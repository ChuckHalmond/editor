{"version":3,"file":"main.js","mappings":"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","sources":["webpack://main/webpack/bootstrap","webpack://main/webpack/runtime/define property getters","webpack://main/webpack/runtime/hasOwnProperty shorthand","webpack://main/webpack/runtime/make namespace object","webpack://main/./src/elements/Snippets.ts","webpack://main/./src/elements/HTMLElement.ts","webpack://main/./src/events/EventDispatcher.ts","webpack://main/./src/models/Model.ts","webpack://main/./src/Editor.ts","webpack://main/./src/commands/Command.ts","webpack://main/./src/Input.ts","webpack://main/./src/elements/containers/menus/Menu.ts","webpack://main/./src/elements/containers/menus/MenuBar.ts","webpack://main/./src/elements/containers/menus/MenuButton.ts","webpack://main/./src/elements/containers/menus/MenuItem.ts","webpack://main/./src/elements/containers/menus/MenuItemGroup.ts","webpack://main/./src/elements/containers/panels/Panel.ts","webpack://main/./src/elements/containers/panels/PanelGroup.ts","webpack://main/./src/elements/containers/status/StatusBar.ts","webpack://main/./src/elements/containers/status/StatusItem.ts","webpack://main/./src/elements/containers/tabs/Tab.ts","webpack://main/./src/elements/containers/tabs/TabList.ts","webpack://main/./src/elements/containers/tabs/TabPanel.ts","webpack://main/./src/elements/containers/trees/TreeItem.ts","webpack://main/./src/elements/containers/trees/Tree.ts","webpack://main/./src/elements/controls/draggable/Draggable.ts","webpack://main/./src/elements/controls/draggable/Dragzone.ts","webpack://main/./src/elements/controls/draggable/Dropzone.ts","webpack://main/./src/elements/controls/dialogs/Dialog.ts","webpack://main/./src/elements/forms/Snippets.ts","webpack://main/./src/elements/utils/HeightSash.ts","webpack://main/./src/elements/utils/Import.ts","webpack://main/./src/elements/utils/Loader.ts","webpack://main/./src/elements/utils/Palette.ts","webpack://main/./src/elements/utils/WidthSash.ts","webpack://main/./src/observers/AttributeMixinsObserver.ts","webpack://main/./src/observers/ReactiveNodesObserver.ts","webpack://main/./src/templates/menus/MenuItemGroupTemplate.ts","webpack://main/./src/templates/menus/MenuTemplate.ts","webpack://main/./src/templates/menus/MenuItemTemplate.ts","webpack://main/./src/templates/menus/MenubarTemplate.ts","webpack://main/./src/templates/table/TableTemplate.ts","webpack://main/./src/views/View.ts","webpack://main/./sample/main.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export { forAllSubtreeElements };\r\nexport { forAllSubtreeNodes };\r\nexport { getPropertyFromPath };\r\nexport { setPropertyFromPath };\r\nexport { pointIntersectsWithDOMRect };\r\nexport { snakeToCamel };\r\nexport { camelToSnake };\r\nexport { trainToCamel };\r\nexport { camelToTrain };\r\nexport { titlize };\r\n\r\nfunction forAllSubtreeElements(element: Element, func: (element: Element) => void) {\r\n  let index = 0;\r\n  func(element);\r\n  while (index < element.children.length) {\r\n    let child = element.children.item(index);\r\n    if (child) {\r\n      forAllSubtreeElements(child, func);\r\n    }\r\n    index++;\r\n  }\r\n}\r\n\r\nfunction forAllSubtreeNodes(parent: Node & ParentNode, func: (childNode: Node & ChildNode, parentNode: Node & ParentNode) => void) {\r\n  let index = 0;\r\n  while (index < parent.childNodes.length) {\r\n    let child = parent.childNodes.item(index);\r\n    if (child) {\r\n      func(child, parent);\r\n      if (child.hasChildNodes()) {\r\n        forAllSubtreeNodes(child as unknown as Node & ParentNode, func);\r\n      }\r\n    }\r\n    index++;\r\n  }\r\n}\r\n\r\nfunction getPropertyFromPath(src: object, path: string): any {\r\n  const props = path.split(\".\");\r\n  let obj: {[key: string]: any} | undefined  = src;\r\n  props.forEach((prop) => {\r\n    if (prop.includes(\"[\")) {\r\n      let index = parseInt(prop.substring(prop.indexOf(\"[\") + 1, prop.indexOf(\"]\")));\r\n      if (Number.isNaN(index)) {\r\n        console.error(`Wrong indexed path: ${prop}`);\r\n      }\r\n      prop = prop.substring(0, prop.indexOf(\"[\"));\r\n      if (typeof obj === \"object\" && prop in obj && Array.isArray(obj[prop])) {\r\n        obj = obj[prop][index];\r\n      }\r\n    }\r\n    else if (typeof obj === \"object\" && prop in obj) {\r\n      obj = obj[prop];\r\n    }\r\n    else {\r\n      obj = void 0;\r\n    }\r\n  });\r\n  return obj;\r\n}\r\n\r\nfunction setPropertyFromPath(src: object, path: string, value: any): object {\r\n  const props = path.split(\".\");\r\n  let obj: {[key: string]: any} = src;\r\n  if (src == null) {\r\n    console.error(\"Source data can't be null\");\r\n  }\r\n  props.forEach((prop, idx) => {\r\n    if (prop.includes(\"[\")) {\r\n      let index = parseInt(prop.substring(prop.indexOf(\"[\") + 1, prop.indexOf(\"]\")));\r\n      if (Number.isNaN(index)) {\r\n        console.error(`Wrong indexed path: ${prop}`);\r\n      }\r\n      prop = prop.substring(0, prop.indexOf(\"[\"));\r\n      if (!Array.isArray(obj[prop])) {\r\n        obj[prop] = [];\r\n      }\r\n      if (idx === props.length - 1) {\r\n        obj[prop][index] = value;\r\n      }\r\n      else {\r\n        if (typeof obj[prop][index] !== \"object\") {\r\n          obj[prop][index] = {}\r\n        }\r\n        obj = obj[prop][index];\r\n      }\r\n    }\r\n    else {\r\n      if (idx === props.length - 1) {\r\n        obj[prop] = value;\r\n      }\r\n      else {\r\n        if (typeof obj[prop] !== \"object\") {\r\n          obj[prop] = {}\r\n        }\r\n        //else {\r\n        obj = obj[prop];\r\n        //}\r\n      }\r\n    }\r\n  });\r\n  return src;\r\n}\r\n\r\nfunction pointIntersectsWithDOMRect(x: number, y: number, rect: DOMRect) {\r\n  return !(rect.left > x || \r\n    rect.right < x || \r\n    rect.top > y ||\r\n    rect.bottom < y);\r\n}\r\n\r\nfunction titlize(str: string) {\r\n  return `${str.charAt(0).toUpperCase()}${str.substr(1).toLowerCase()}`;\r\n}\r\n\r\nfunction snakeToCamel(str: string) {\r\n  return str.split('_').map(str =>  str.charAt(0).toUpperCase() + str.substr(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToSnake(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '_').toLowerCase();\r\n}\r\n\r\nfunction trainToCamel(str: string) {\r\n  return str.split('-').map(str =>  str.charAt(0).toUpperCase() + str.substr(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToTrain(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '-').toLowerCase();\r\n}","import { ListModel, ListModelChangeEvent, ObjectModel, ObjectModelChangeEvent } from \"../models/Model\";\r\nimport { camelToTrain } from \"./Snippets\";\r\n\r\nexport { isTagElement };\r\nexport { RegisterCustomHTMLElement };\r\nexport { GenerateAttributeAccessors };\r\nexport { bindShadowRoot };\r\nexport { isParentNode };\r\nexport { isReactiveNode };\r\nexport { isReactiveParentNode };\r\nexport { ReactiveNode };\r\nexport { ReactiveParentNode };\r\nexport { ReactiveChildNodes };\r\nexport { isElement };\r\nexport { Element };\r\nexport { Fragment };\r\nexport { TextNode };\r\nexport { AttributeMutationMixin };\r\nexport { AttributeType };\r\nexport { areAttributesMatching };\r\nexport { AttributeMutationMixinBase };\r\n\r\ninterface RegisterCustomHTMLElementDecorator {\r\n    (args: {\r\n        name: string;\r\n        observedAttributes?: string[],\r\n        options?: ElementDefinitionOptions\r\n    }): <C extends CustomElementConstructor>(elementCtor: C) => C;\r\n}\r\n\r\nconst RegisterCustomHTMLElement: RegisterCustomHTMLElementDecorator = function(args: {\r\n    name: string;\r\n    attributes?: string[],\r\n    observedAttributes?: string[],\r\n    options?: ElementDefinitionOptions\r\n}) {\r\n    return <C extends CustomElementConstructor>(\r\n        elementCtor: C\r\n    ) => {\r\n        const { name, observedAttributes, options } = args;\r\n\r\n        if (observedAttributes) {\r\n            Object.defineProperty(elementCtor.prototype.constructor, 'observedAttributes', {\r\n                get: () => {\r\n                    return observedAttributes;\r\n                }\r\n            });\r\n        }\r\n\r\n        if (!customElements.get(name)) {\r\n            customElements.define(\r\n                name,\r\n                elementCtor,\r\n                options\r\n            );\r\n        }\r\n\r\n        return elementCtor;\r\n    }\r\n}\r\n\r\ninterface GenerateAttributeAccessorsDecorator {\r\n    (attributes: {\r\n        name: string,\r\n        type?: \"string\" | \"number\" | \"boolean\" | \"json\"\r\n    }[]): <C extends CustomElementConstructor>(elementCtor: C) => C;\r\n}\r\n\r\nconst GenerateAttributeAccessors: GenerateAttributeAccessorsDecorator = function(attributes: {\r\n    name: string,\r\n    type?: \"string\" | \"number\" | \"boolean\" | \"json\"\r\n}[]) {\r\n    return <C extends CustomElementConstructor>(\r\n        elementCtor: C\r\n    ) => {\r\n        attributes.forEach((attr: {\r\n            name: string,\r\n            type?: \"string\" | \"number\" | \"boolean\" | \"json\"\r\n        }) => {\r\n            const { name,  type } = attr;\r\n            switch (type) {\r\n                case \"boolean\":\r\n                    Object.defineProperty(elementCtor.prototype, name, {\r\n                        get: function(this: HTMLElement) {\r\n                            const val = this.getAttribute(name);\r\n                            return (val === \"\" || false);\r\n                        },\r\n                        set: function(this: HTMLElement, value) {\r\n                            if (value) {\r\n                                this.setAttribute(name, \"\");\r\n                            }\r\n                            else {\r\n                                this.removeAttribute(name);\r\n                            }\r\n                        }\r\n                    });\r\n                    break;\r\n                case \"json\":\r\n                    Object.defineProperty(elementCtor.prototype, name, {\r\n                        get: function(this: HTMLElement) {\r\n                            const val = this.getAttribute(name);\r\n                            return (val !== null) ? JSON.parse(val) : null;\r\n                        },\r\n                        set: function(this: HTMLElement, value) {\r\n                            if (value !== null) {\r\n                                this.setAttribute(name, JSON.stringify(value));\r\n                            }\r\n                            else {\r\n                                this.removeAttribute(name);\r\n                            }\r\n                        }\r\n                    });\r\n                    break;\r\n                case \"number\":\r\n                    Object.defineProperty(elementCtor.prototype, name, {\r\n                        get: function(this: HTMLElement) {\r\n                            const val = this.getAttribute(name);\r\n                            return (val !== null) ? parseFloat(val) : val;\r\n                        },\r\n                        set: function(this: HTMLElement, value) {\r\n                            if (value) {\r\n                                this.setAttribute(name, value);\r\n                            }\r\n                            else {\r\n                                this.removeAttribute(name);\r\n                            }\r\n                        }\r\n                    });\r\n                    break;\r\n                case \"string\":\r\n                default:\r\n                    Object.defineProperty(elementCtor.prototype, name, {\r\n                        get: function(this: HTMLElement) {\r\n                            const val = this.getAttribute(name);\r\n                            return val;\r\n                        },\r\n                        set: function(this: HTMLElement, value) {\r\n                            if (value) {\r\n                                this.setAttribute(name, value);\r\n                            }\r\n                            else {\r\n                                this.removeAttribute(name);\r\n                            }\r\n                        }\r\n                    });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return elementCtor;\r\n    }\r\n}\r\n\r\nfunction bindShadowRoot(element: HTMLElement, templateContent?: string): ShadowRoot {\r\n    const root = element.attachShadow({mode: \"open\"});\r\n    const template = document.createElement(\"template\");\r\n    if (typeof templateContent !== \"undefined\") {\r\n        template.innerHTML = templateContent;\r\n    }\r\n    root.appendChild(template.content.cloneNode(true));\r\n    return root;\r\n}\r\n\r\nfunction Fragment(...nodes: (Node | string)[]): DocumentFragment {\r\n    let fragment = document.createDocumentFragment();\r\n    fragment.append(...nodes);\r\n    return fragment;\r\n}\r\n\r\nfunction TextNode(text: string = \"\"): Node {\r\n    return document.createTextNode(text);\r\n}\r\n\r\ntype _IfEquals<X, Y, A = X, B = never> =\r\n  (<T>() => T extends X ? 1 : 2) extends\r\n  (<T>() => T extends Y ? 1 : 2) ? A : B;\r\n\r\ntype WritableKeys<T> = {\r\n    [P in keyof T]-?: _IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, P>\r\n}[keyof T];\r\n\r\ninterface HTMLInit<K extends keyof HTMLElementTagNameMap> {\r\n    options?: ElementCreationOptions,\r\n    props?: Partial<Pick<HTMLElementTagNameMap[K], WritableKeys<HTMLElementTagNameMap[K]>>>,\r\n    attrs?: {[name: string]: number | string | boolean},\r\n    children?: Node[] | NodeList | ReactiveChildNodes,\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: (event: HTMLElementEventMap[EventName]) => void | [(event: HTMLElementEventMap[EventName]) => void, Partial<boolean | AddEventListenerOptions>]\r\n    },\r\n    styles?: {\r\n        [property: string]: string | [string, string]\r\n    }\r\n}\r\n\r\nfunction isTagElement<K extends keyof HTMLElementTagNameMap>(tagName: K, obj: any): obj is HTMLElementTagNameMap[K] {\r\n    return obj instanceof Node && obj.nodeType === obj.ELEMENT_NODE && (obj as Element).tagName.toLowerCase() == tagName;\r\n}\r\n\r\nfunction Element<K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLInit<K>): HTMLElementTagNameMap[K] {\r\n        const element = document.createElement(tagName, init?.options);\r\n        if (init) {\r\n            const { props, attrs, children, listeners, styles } = init;\r\n            if (props) {\r\n                const keys = Object.keys(props) as (keyof Partial<Pick<HTMLElementTagNameMap[K], WritableKeys<HTMLElementTagNameMap[K]>>>)[];\r\n                keys.forEach((key) => {\r\n                    const value = props[key];\r\n                    if (typeof props[key] !== \"undefined\") {\r\n                        Object.assign(\r\n                            element, {\r\n                                [key]: value\r\n                            }\r\n                        );\r\n                    }\r\n                });\r\n            }\r\n            if (attrs) {\r\n                Object.keys(attrs).forEach((attrName) => {\r\n                    const value = attrs[attrName];\r\n                    if (typeof value === \"boolean\") {\r\n                        if (value) {\r\n                            element.setAttribute(camelToTrain(attrName), \"\");\r\n                        }\r\n                    }\r\n                    else {\r\n                        element.setAttribute(camelToTrain(attrName), value.toString());\r\n                    }\r\n                });\r\n            }\r\n            if (children) {\r\n                if (typeof children === \"function\") {\r\n                    element.replaceChildren(...children(element));\r\n                }\r\n                else {\r\n                    element.replaceChildren(...children);\r\n                }\r\n            }\r\n            if (listeners) {\r\n                Object.entries(listeners).forEach((entry) => {\r\n                    if (Array.isArray(entry[1])) {\r\n                        element.addEventListener(entry[0], entry[1][0] as EventListener, entry[1][1]);\r\n                    }\r\n                    else {\r\n                        element.addEventListener(entry[0], entry[1] as EventListener);\r\n                    }\r\n                });\r\n            }\r\n            if (styles) {\r\n                Object.keys(styles).forEach((property) => {\r\n                    if (Array.isArray(styles[property])) {\r\n                        element.style.setProperty(property, styles[property][0], styles[property][1]);\r\n                    }\r\n                    else {\r\n                        element.style.setProperty(property, styles[property] as string);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return element;\r\n}\r\n\r\ntype ReactiveNode = Node & {\r\n    _reactiveNodeAttributes: {\r\n        addReactListener: () => void;\r\n        removeReactListener: () => void;\r\n    }\r\n};\r\n\r\ntype ReactiveParentNode = Node & {\r\n    _reactiveParentNodeAttributes: {\r\n        addReactListener: () => void;\r\n        removeReactListener: () => void;\r\n    }\r\n};\r\n\r\nfunction isParentNode(node: Node): node is Node & ParentNode {\r\n    return node.hasChildNodes();\r\n}\r\n\r\nfunction isElement(node: Node): node is Element {\r\n    return node.nodeType === node.ELEMENT_NODE;\r\n}\r\n\r\nfunction isReactiveNode(node: Node): node is ReactiveNode {\r\n    return typeof (node as ReactiveNode)._reactiveNodeAttributes === \"object\" &&\r\n        typeof (node as ReactiveNode)._reactiveNodeAttributes.addReactListener === \"function\" &&\r\n        typeof (node as ReactiveNode)._reactiveNodeAttributes.removeReactListener === \"function\";\r\n}\r\n\r\nfunction isReactiveParentNode(node: Node): node is ReactiveParentNode {\r\n    return typeof (node as ReactiveParentNode)._reactiveParentNodeAttributes === \"object\" &&\r\n        typeof (node as ReactiveParentNode)._reactiveParentNodeAttributes.addReactListener === \"function\" &&\r\n        typeof (node as ReactiveParentNode)._reactiveParentNodeAttributes.removeReactListener === \"function\";\r\n}\r\n\r\nfunction ReactiveNode<Data extends object, N extends Node>\r\n    (list: ListModel<Data>, node: N, react: (node: N, addedItems: Data[], removedItems: Data[], index: number) => void): N\r\nfunction ReactiveNode<Data extends object, N extends Node>\r\n    (object: ObjectModel, node: N, react: <K extends keyof Data>(node: N, property: K, oldValue: Data[K], newValue: Data[K]) => void): N\r\nfunction ReactiveNode<Data extends object, N extends Node>\r\n    (objectOrList: ObjectModel | ListModel<Data>, node: N, react: (<K extends keyof Data>(node: N, property: K, oldValue: Data[K], newValue: Data[K]) => void)\r\n    | ((node: N, addedItems: Data[], removedItems: Data[], index: number) => void)): N {\r\n        if (\"items\" in objectOrList) {\r\n            const listener = (event: ListModelChangeEvent) => {\r\n                react(node,  event.data.addedItems as any, event.data.removedItems as any, event.data.index as any);\r\n            };\r\n            Object.assign(\r\n                node, {\r\n                    _reactiveNodeAttributes: {\r\n                        addReactListener: () => {\r\n                            objectOrList.addEventListener(\"listmodelchange\", listener);\r\n                        },\r\n                        removeReactListener: () => {\r\n                            objectOrList.removeEventListener(\"listmodelchange\", listener);\r\n                        }\r\n                    }\r\n                }\r\n            ) as ReactiveNode;\r\n            react(node, objectOrList.items as any, [], 0 as any);\r\n        }\r\n        else {\r\n            const listener = (event: ObjectModelChangeEvent) => {\r\n                react(node, event.data.property as any, event.data.oldValue, event.data.newValue);\r\n            };\r\n            Object.assign(\r\n                node, {\r\n                    _reactiveNodeAttributes: {\r\n                        addReactListener: () => {\r\n                            objectOrList.addEventListener(\"objectmodelchange\", listener);\r\n                        },\r\n                        removeReactListener: () => {\r\n                            objectOrList.removeEventListener(\"objectmodelchange\", listener);\r\n                        }\r\n                    }\r\n                }\r\n            ) as ReactiveNode;\r\n            const keys = Object.keys(objectOrList) as (keyof Data)[];\r\n            keys.forEach((key) => {\r\n                react(node, key as any, void 0 as any, (objectOrList as any)[key] as any);\r\n            });\r\n        }\r\n        return node;\r\n}\r\n\r\ninterface ReactiveChildNodes {\r\n    (parent: Node & ParentNode): (Node | string)[]\r\n}\r\n\r\nfunction ReactiveChildNodes<Item extends object>(list: ListModel<Item>, map: (item: Item) => Node | string, placeholder?: Node): ReactiveChildNodes {\r\n    return (parent: Node & ParentNode) => {\r\n        const listener = (event: ListModelChangeEvent) => {\r\n            if (event.data.addedItems.length === list.items.length) {\r\n                parent.textContent = \"\";\r\n            }\r\n            if (event.data.removedItems.length) {\r\n                for (let i = 0; i < event.data.removedItems.length; i++) {\r\n                    if (parent.childNodes.length > event.data.index) {\r\n                        parent.childNodes.item(event.data.index).remove();\r\n                    }\r\n                }\r\n            }\r\n            if (event.data.addedItems.length) {\r\n                let addedElements = event.data.addedItems.map(item => map(item));\r\n                if (event.data.index >= list.items.length - event.data.addedItems.length) {\r\n                    parent.append(...addedElements);\r\n                }\r\n                else {\r\n                    parent.childNodes.item(event.data.index - event.data.removedItems.length)!.before(...addedElements);\r\n                }\r\n            }\r\n            if (list.items.length === 0 && placeholder) {\r\n                parent.append(placeholder);\r\n            }\r\n        };\r\n        Object.assign(\r\n            parent, {\r\n                _reactiveParentNodeAttributes: {\r\n                    addReactListener: () => {\r\n                        list.addEventListener(\"listmodelchange\", listener);\r\n                    },\r\n                    removeReactListener: () => {\r\n                        list.removeEventListener(\"listmodelchange\", listener);\r\n                    }\r\n                }\r\n            }\r\n        ) as ReactiveParentNode;\r\n        const children = placeholder && list.items.length === 0 ? [placeholder] : list.items.map(map);\r\n        return children;\r\n    }\r\n}\r\n\r\ninterface AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n    attach(element: Element): void;\r\n    detach(element: Element): void;\r\n}\r\n\r\ntype AttributeType = \"string\" | \"boolean\" | \"listitem\";\r\n\r\nfunction areAttributesMatching(refAttributeType: AttributeType, refAttrName: string, refAttrValue: string, attrName: string, attrValue: string | null): boolean {\r\n    if (refAttrName == attrName) {\r\n        switch (refAttributeType) {\r\n            case \"boolean\":\r\n                return refAttrValue == \"\" && attrValue == \"\";\r\n            case \"string\":\r\n                return refAttrValue !== \"\" && (refAttrValue === attrValue);\r\n            case \"listitem\":\r\n                return (refAttrValue !== \"\" && attrValue !== null) && new RegExp(`${refAttrValue}\\s*?`, \"g\").test(attrValue);\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nabstract class AttributeMutationMixinBase implements AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n\r\n    constructor(attributeName: string, attributeType: AttributeType = \"boolean\", attributeValue: string = \"\") {\r\n        this.attributeName = attributeName;\r\n        this.attributeType = attributeType;\r\n        this.attributeValue = attributeValue;\r\n    }\r\n\r\n    public abstract attach(element: Element): void;\r\n    public abstract detach(element: Element): void;\r\n}","export { EventBase };\r\nexport { Event };\r\nexport { EEvent };\r\nexport { EventDispatcher };\r\nexport { EventDispatcherBase };\r\n\r\ninterface EventConstructor {\r\n    readonly prototype: Event;\r\n    new<T extends string, D extends any>(type: T, data: D): Event<T, D>;\r\n}\r\n\r\ninterface Event<T extends string = string, D extends any = any> {\r\n    readonly type: T;\r\n    readonly data: D;\r\n}\r\n\r\ntype EEvent<T extends string = string, D extends any = any> = Event<T, D>;\r\n\r\nclass EventBase<T extends string, D extends any> implements Event<T, D> {\r\n    readonly type: T;\r\n    readonly data: D;\r\n\r\n    constructor(type: T, data: D) {\r\n        this.type = type;\r\n        this.data = data;\r\n    }\r\n}\r\n\r\nvar Event: EventConstructor = EventBase;\r\n\r\ntype EventHandler<E extends Event> = (event: E) => void;\r\n\r\ninterface EventListener<E extends Event = Event> {\r\n    handler: EventHandler<E>;\r\n    once?: boolean;\r\n}\r\n\r\ninterface EventDispatcher<Events extends {[K in Extract<keyof Events, string>]: Event<K>} = {}> {\r\n    addEventListener<K extends Extract<keyof Events, string>>(event: K, handler: (event: Events[K]) => void, once?: boolean): (event: Events[K]) => void;\r\n    addEventListener<K extends string>(event: K, handler: (event: Event<K>) => void, once?: boolean): (event: Event<K>) => void;\r\n    removeEventListener<K extends Extract<keyof Events, string>>(event: K, handler: (event: Events[K]) => void, once?: boolean): number;\r\n    removeEventListener<K extends string>(event: K, handler: (event: Event<K>) => void, once?: boolean): number;\r\n    dispatchEvent<K extends Extract<keyof Events, string>>(event: Events[K]): void;\r\n    dispatchEvent<K extends string>(event: Event<K>): void;\r\n}\r\n\r\ninterface EventDispatcherConstructor {\r\n    readonly prototype: EventDispatcher<{}>;\r\n    new<Events extends {[K in Extract<keyof Events, string>]: Event<K>} = {}>(): EventDispatcher<Events>;\r\n}\r\n\r\nclass EventDispatcherBase<Events extends {[K in Extract<keyof Events, string>]: Event<K>} = {}> implements EventDispatcher<Events> {\r\n    private _listeners: Map<string, EventListener<any>[]>;\r\n\r\n    constructor() {\r\n        this._listeners = new Map();\r\n    }\r\n\r\n    public addEventListener<K extends string>(event: K, handler: (event: Event<K>) => void, once?: boolean): (event: Event<K>) => void;\r\n    public addEventListener<K extends Extract<keyof Events, string>>(event: K, handler: (event: Events[K]) => void, once?: boolean): (event: Events[K]) => void;\r\n    public addEventListener<K extends Extract<keyof Events, string>>(event: K, handler: (event: Events[K]) => void, once?: boolean): (event: Events[K]) => void {\r\n        let listeners = this._listeners.get(event.toString());\r\n        let newListener: EventListener<any> = {\r\n            handler: handler,\r\n            once: once\r\n        };\r\n        \r\n        if (typeof listeners === \"undefined\") {\r\n            this._listeners.set(event.toString(), [newListener]);\r\n        }\r\n        else if (!listeners.find(listener => listener.handler === handler && listener.once === once)) {\r\n            listeners.push(newListener);\r\n        }\r\n\r\n        return handler;\r\n    }\r\n\r\n    public removeEventListener<K extends string>(event: string, handler: (event: Event<K>) => void, once?: boolean): number;\r\n    public removeEventListener<K extends Extract<keyof Events, string>>(event: K, handler: (event: Events[K]) => void, once?: boolean): number;\r\n    public removeEventListener<K extends Extract<keyof Events, string>>(event: K, handler: (event: Events[K]) => void, once?: boolean): number {\r\n        let listeners = this._listeners.get(event);\r\n        if (typeof listeners !== \"undefined\") {\r\n            const count = listeners.length;\r\n            const idx = listeners.findIndex(listener => listener.handler === handler && listener.once === once);\r\n            if (idx > -1) {\r\n                if (count > 1) {\r\n                    listeners[idx] = listeners.pop()!;\r\n                    return count - 1;\r\n                }\r\n                else {\r\n                    this._listeners.delete(event.toString());\r\n                    return 0;\r\n                }\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    public dispatchEvent<K extends string>(event: Event<K>): void;\r\n    public dispatchEvent<K extends Extract<keyof Events, string>>(event: Events[K]): void;\r\n    public dispatchEvent<K extends Extract<keyof Events, string>>(event: Events[K]): void {\r\n        let listeners = this._listeners.get(event.type);\r\n        if (typeof listeners !== \"undefined\") {\r\n            listeners = listeners.filter((listener) => {\r\n                listener.handler(event);\r\n                return !listener.once\r\n            });\r\n            if (listeners.length === 0) {\r\n                this._listeners.delete(event.type);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst EventDispatcher: EventDispatcherConstructor = EventDispatcherBase;","import { EventDispatcher, Event } from \"../events/EventDispatcher\";\r\n\r\nexport { GenerateObjectModelAccessors };\r\nexport { ObjectModelChangeEvent };\r\nexport { ObjectModel };\r\nexport { ObjectModelBase };\r\nexport { ListModelChangeEvent };\r\nexport { ListModel };\r\nexport { ListModelBase };\r\n\r\ninterface ObjectModelChangeEvent {\r\n    type: \"objectmodelchange\";\r\n    data: {\r\n        property: string;\r\n        oldValue: any;\r\n        newValue: any;\r\n    };\r\n}\r\n\r\ninterface ObjectModelChangeEvents {\r\n    \"objectmodelchange\": ObjectModelChangeEvent;\r\n}\r\n\r\ninterface ObjectModel extends EventDispatcher<ObjectModelChangeEvents> {}\r\n\r\nclass ObjectModelBase extends EventDispatcher<ObjectModelChangeEvents> implements ObjectModel {\r\n    constructor() {\r\n        super();\r\n    }\r\n}\r\n\r\ninterface GenerateObjectModelAccessorsDecorator {\r\n    (args: {\r\n        props: string[];\r\n    }): <O extends ObjectModelBase, C extends new(...args: any[]) => O>(ctor: C) => C\r\n}\r\n\r\nconst GenerateObjectModelAccessors: GenerateObjectModelAccessorsDecorator = function(args: {\r\n    props: string[]\r\n}) {\r\n    return <O extends ObjectModelBase, C extends new(...args: any[]) => O>(ctor: C) => {\r\n        const { props } = args;\r\n        \r\n        props.forEach((prop) => {\r\n            Object.defineProperty(ctor, prop, {\r\n                get: function(this: ObjectModelBase) {\r\n                    return (this as {[key: string]: any})[`_${prop}`];\r\n                },\r\n                set: function(this: ObjectModelBase, value) {\r\n                    const oldValue = (this as {[key: string]: any})[`_${prop}`];\r\n                    (this as {[key: string]: any})[`_${prop}`] = value;\r\n                    this.dispatchEvent(new Event(\"objectmodelchange\", {property: prop, oldValue: oldValue, newValue: value}));\r\n                }\r\n            });\r\n        });\r\n\r\n        return ctor;\r\n    }\r\n}\r\n\r\ninterface ListModelChangeEvent {\r\n    type: \"listmodelchange\";\r\n    data: {\r\n        addedItems: any[];\r\n        removedItems: any[];\r\n        index: number;\r\n    };\r\n}\r\n\r\ninterface ListModelEvents {\r\n    \"listmodelchange\": ListModelChangeEvent;\r\n}\r\n\r\ninterface ListModel<Item = {}> extends EventDispatcher<ListModelEvents> {\r\n    readonly items: ReadonlyArray<Item>;\r\n    set(index: number, item: Item): void;\r\n    insert(index: number, ...items: Item[]): void;\r\n    push(...items: Item[]): number;\r\n    pop(): Item | undefined;\r\n    remove(item: Item): void;\r\n    clear(): void;\r\n}\r\n\r\nclass ListModelBase<Item> extends EventDispatcher<ListModelEvents> implements ListModel<Item> {\r\n    private _items: Item[];\r\n    \r\n    constructor(items: Item[] = []) {\r\n        super();\r\n        this._items = items;\r\n    }\r\n\r\n    public get items(): ReadonlyArray<Item> {\r\n        return this._items;\r\n    }\r\n\r\n    public set(index: number, item: Item): void {\r\n        if (index >= 0 && index < this._items.length) {\r\n            this._items[index] = item;\r\n            this.dispatchEvent(new Event(\"listmodelchange\", {addedItems: [item], removedItems: [], index: index}));\r\n        }\r\n    }\r\n\r\n    public push(...items: Item[]): number {\r\n        const newLength = this._items.push(...items);\r\n        this.dispatchEvent(new Event(\"listmodelchange\", {addedItems: items, removedItems: [], index: newLength - items.length}));\r\n        return newLength;\r\n    }\r\n\r\n    public pop(): Item | undefined {\r\n        const item = this._items.pop();\r\n        if (item) {\r\n            this.dispatchEvent(new Event(\"listmodelchange\", {addedItems: [], removedItems: [item], index: this._items.length}));\r\n        }\r\n        return item;\r\n    }\r\n\r\n    public insert(index: number, ...items: Item[]): void {\r\n        if (index > this._items.length) {\r\n            index = this._items.length;\r\n        }\r\n        else if (index < 0) {\r\n            if (index < -this._items.length) {\r\n                index = 0;\r\n            }\r\n            else {\r\n                index = this._items.length + index;\r\n            }\r\n        }\r\n        this._items.splice(index, 0, ...items);\r\n        this.dispatchEvent(new Event(\"listmodelchange\", {addedItems: items, removedItems: [], index: index}));\r\n    }\r\n\r\n    public remove(item: Item): void {\r\n        const itemIndex = this._items.indexOf(item);\r\n        if (itemIndex > -1) {\r\n            this._items.splice(itemIndex, 1);\r\n            this.dispatchEvent(new Event(\"listmodelchange\", {addedItems: [], removedItems: [item], index: itemIndex}));\r\n        }\r\n    }\r\n\r\n    public clear(): void {\r\n        const removedItems = this._items.slice();\r\n        this._items.splice(0, this._items.length);\r\n        this.dispatchEvent(new Event(\"listmodelchange\", {addedItems: [], removedItems: removedItems, index: 0}));\r\n    }\r\n}","\r\nimport { Command, isUndoCommand } from \"./commands/Command\";\r\nimport { isTagElement } from \"./elements/HTMLElement\";\r\nimport { HotKeyChangeEvent } from \"./elements/containers/menus/MenuItem\";\r\nimport { HotKey } from \"./Input\";\r\nimport { ObjectModel, ObjectModelBase } from \"./models/Model\";\r\n\r\nexport { Editor };\r\nexport { EditorBase };\r\n\r\ninterface EditorConstructor {\r\n    readonly prototype: Editor;\r\n    new(): Editor;\r\n}\r\n\r\ninterface Editor {\r\n    addHotkeyExec(hotkey: HotKey, exec: () => void): void;\r\n    removeHotkeyExec(hotkey: HotKey, exec: () => void): void;\r\n    registerCommand(name: string, command: Command): void;\r\n    executeCommand(name: string, args?: any, opts?: {undo?: boolean}): void;\r\n    setup(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface EditorState {}\r\n}\r\n\r\nclass EditorBase implements Editor {\r\n    readonly state: ObjectModel;\r\n    private _commands: Map<string, Command>;\r\n    private _hotkeys: Map<HotKey, (() => void)[]>;\r\n\r\n    constructor() {\r\n        this._commands = new Map();\r\n        this._hotkeys = new Map();\r\n        this.state = new ObjectModelBase();\r\n    }\r\n    \r\n    public setup(): void {\r\n        document.body.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            Array.from(this._hotkeys.keys()).forEach((hotkey) => {\r\n                if (hotkey.test(event)) {\r\n                    const execs = this._hotkeys.get(hotkey);\r\n                    if (execs) {\r\n                        execs.forEach((exec) => {\r\n                            exec();\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        });\r\n        \r\n        document.body.addEventListener(\"e_hotkeychange\", (event: HotKeyChangeEvent) => {\r\n            const target = event.target;\r\n            if (isTagElement(\"e-menuitem\", target)) {\r\n                if (event.detail.oldHotKey) {\r\n                    this.removeHotkeyExec(event.detail.oldHotKey, target.trigger.bind(target));\r\n                }\r\n                if (event.detail.newHotKey) {\r\n                    this.addHotkeyExec(event.detail.newHotKey, target.trigger.bind(target));\r\n                }\r\n            }\r\n        });\r\n\r\n        document.body.addEventListener(\"e_trigger\", (event) => {\r\n            const target = event.target;\r\n            if (isTagElement(\"e-menuitem\", target)) {\r\n                if (target.command) {\r\n                    this.executeCommand(target.command, target.commandArgs)\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public registerCommand(name: string, command: Command) {\r\n        this._commands.set(name, command);\r\n    }\r\n\r\n    public executeCommand(name: string, args?: any, opts?: {undo?: boolean}): void {\r\n        const command = this._commands.get(name);\r\n        if (command) {\r\n            if (opts && opts.undo && isUndoCommand(command)) {\r\n                command.undo(args);\r\n            }\r\n            else {\r\n                command.exec(args);\r\n            }\r\n        }\r\n    }\r\n\r\n    public addHotkeyExec(hotkey: HotKey, exec: () => void): void {\r\n        const hotkeys = this._hotkeys.get(hotkey);\r\n        if (typeof hotkeys === \"undefined\") {\r\n            this._hotkeys.set(hotkey, [exec]);\r\n        };\r\n    }\r\n\r\n    public removeHotkeyExec(hotkey: HotKey, exec: () => void): void {\r\n        const hotkeys = this._hotkeys.get(hotkey);\r\n        if (typeof hotkeys !== \"undefined\") {\r\n            const index = hotkeys.indexOf(exec);\r\n            if (index >= 0) {\r\n                hotkeys.splice(index, 1);\r\n            }\r\n            if (hotkeys.length === 0) {\r\n                this._hotkeys.delete(hotkey);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar Editor: EditorConstructor = EditorBase;","export { isCommand };\r\nexport { isUndoCommand };\r\nexport { Command };\r\nexport { UndoCommand };\r\n\r\nfunction isCommand(obj: any): obj is Command {\r\n    return (typeof obj.exec === 'function');\r\n}\r\n\r\nfunction isUndoCommand(obj: any): obj is UndoCommand {\r\n    return (typeof obj.exec === 'function')\r\n        && (typeof obj.undo === 'function');\r\n}\r\n\r\ninterface Command {\r\n    exec: (args?: any) => void;\r\n    undo?: (args?: any) => void;\r\n}\r\n\r\ninterface UndoCommand {\r\n    exec: (args?: any) => void;\r\n    undo: (args?: any) => void;\r\n}","export { Key };\r\nexport { KeyModifier };\r\nexport { HotKey };\r\nexport { MouseButton };\r\n\r\nenum Key {\r\n    A = 'a',\r\n    B = 'b',\r\n    C = \"c\",\r\n    D = \"d\",\r\n    E = \"e\",\r\n    F = \"f\",\r\n    G = \"g\",\r\n    H = \"h\",\r\n    I = \"i\",\r\n    J = \"j\",\r\n    K = \"k\",\r\n    L = \"l\",\r\n    M = \"m\",\r\n    O = \"o\",\r\n    P = \"p\",\r\n    Q = \"q\",\r\n    R = \"r\",\r\n    S = \"s\",\r\n    T = \"t\",\r\n    U = \"u\",\r\n    V = \"v\",\r\n    W = \"w\",\r\n    X = \"x\",\r\n    Y = \"y\",\r\n    Z = \"z\",\r\n    ENTER = \"Enter\",\r\n    BACKSPACE = \"Backspace\",\r\n    ARROW_DOWN = \"ArrowDown\",\r\n    ARROW_LEFT = \"ArrowLeft\",\r\n    ARROW_RIGHT = \"ArrowRight\",\r\n    ARROW_UP = \"ArrowUp\",\r\n    SHIFT = \"Shift\"\r\n}\r\n\r\nenum KeyModifier {\r\n    Alt = \"Alt\",\r\n    Control = \"Control\",\r\n    Shift = \"Shift\",\r\n}\r\n\r\nfunction displayKeyModifier(mode: KeyModifier): string {\r\n    switch (mode) {\r\n        case KeyModifier.Control:\r\n            return \"Ctrl\";\r\n        default:\r\n            return mode;\r\n    }\r\n}\r\n\r\nenum MouseButton {\r\n    LEFT = 1,\r\n    WHEEL = 2,\r\n    RIGHT = 3,\r\n    FORWARD = 4,\r\n    BACK = 5\r\n}\r\n\r\nconst testKeyModifier = (mod: KeyModifier, event: KeyboardEvent) => {\r\n    switch (mod) {\r\n        case 'Alt':\r\n            return event.altKey;\r\n        case 'Control':\r\n            return event.ctrlKey;\r\n        case 'Shift':\r\n            return event.shiftKey;\r\n        default:\r\n            return () => true;\r\n    }\r\n}\r\n\r\nclass HotKey {\r\n    public readonly key: Key;\r\n    public readonly mod1?: KeyModifier;\r\n    public readonly mod2?: KeyModifier;\r\n\r\n    constructor(key: Key, mod1?: KeyModifier, mod2?: KeyModifier) {\r\n        this.key = key;\r\n        this.mod1 = mod1;\r\n        this.mod2 = mod2;\r\n    }\r\n\r\n    public toString(): string {\r\n        return `${this.mod1 ? `${displayKeyModifier(this.mod1)}+` : ''}${this.mod2 ? `${displayKeyModifier(this.mod2)}+` : ''}${(this.key.length === 1) ? this.key.toUpperCase() : this.key}`;\r\n    }\r\n\r\n    public test(event: KeyboardEvent): boolean {\r\n        return ((!this.mod1 || testKeyModifier(this.mod1, event)) && (!this.mod2 || testKeyModifier(this.mod2, event)) && event.key === this.key);\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot, isTagElement } from \"../../HTMLElement\";\r\nimport { pointIntersectsWithDOMRect } from \"../../Snippets\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuElement };\r\nexport { HTMLEMenuElementBase };\r\n\r\ninterface HTMLEMenuElement extends HTMLElement {\r\n    name: string;\r\n    expanded: boolean;\r\n    overflowing: boolean;\r\n    parentItem: HTMLEMenuItemElement | null;\r\n    items: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement)[];\r\n    readonly activeIndex: number;\r\n    readonly activeItem: HTMLEMenuItemElement | HTMLEMenuItemGroupElement | null;\r\n    focusItemAt(index: number, childMenu?: boolean): void;\r\n    reset(): void;\r\n    findItem(predicate: (item: HTMLEMenuItemElement) => boolean, subitems?: boolean): HTMLEMenuItemElement | null;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-menu\",\r\n    observedAttributes: [\"expanded\"]\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"expanded\", type: \"boolean\"},\r\n    {name: \"overflowing\", type: \"boolean\"}\r\n])\r\nclass HTMLEMenuElementBase extends HTMLElement implements HTMLEMenuElement {\r\n\r\n    public name!: string;\r\n    public expanded!: boolean;\r\n    public overflowing!: boolean;\r\n\r\n    public parentItem: HTMLEMenuItemElement | null;\r\n    public items: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement)[];\r\n\r\n    private _activeIndex: number;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: inline-block;\r\n                    user-select: none;\r\n\r\n                    padding: 6px 0;\r\n                    background-color: white;\r\n                    cursor: initial;\r\n                    width: max-content;\r\n\r\n                    -webkit-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                    -moz-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                    box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                }\r\n\r\n                [part~=\"container\"] {\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                }\r\n\r\n                ::slotted(hr) {\r\n                    margin: 6px 0;\r\n                }\r\n            </style>\r\n            <div part=\"container\">\r\n                <slot></slot>\r\n            </div>\r\n        `);\r\n\r\n        this.parentItem = null;\r\n        this.items = [];\r\n        this._activeIndex = -1;\r\n    }\r\n\r\n    public get activeIndex(): number {\r\n        return this._activeIndex;\r\n    }\r\n\r\n    public get activeItem(): HTMLEMenuItemElement | HTMLEMenuItemGroupElement | null {\r\n        return this.items[this.activeIndex] || null;\r\n    }\r\n    \r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n        \r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const items = slot.assignedElements().filter(\r\n                    elem => isTagElement(\"e-menuitem\", elem) || isTagElement(\"e-menuitemgroup\", elem)\r\n                ) as (HTMLEMenuItemElement | HTMLEMenuItemGroupElement)[];\r\n                this.items = items;\r\n                items.forEach((item) => {\r\n                    item.parentMenu = this;\r\n                });\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            if (isTagElement(\"e-menuitem\", target)) {\r\n                let thisIncludesTarget = this.items.includes(target);\r\n                if (thisIncludesTarget) {\r\n                    target.trigger();\r\n                }\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"mouseover\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            let targetIndex = this.items.indexOf(target);\r\n            if (this === target) {\r\n                this.reset();\r\n                this.focus();\r\n            } \r\n            else if (targetIndex >= 0) {\r\n                if (isTagElement(\"e-menuitem\", target)) {\r\n                    this.focusItemAt(targetIndex, true);\r\n                }\r\n                else {\r\n                    this._activeIndex = targetIndex;\r\n                }\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"mouseout\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            let thisIntersectsWithMouse = pointIntersectsWithDOMRect(\r\n                event.clientX, event.clientY,\r\n                this.getBoundingClientRect()\r\n            );\r\n            if ((this === target || this.items.includes(target)) && !thisIntersectsWithMouse) {\r\n                this.reset();\r\n                this.focus();\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusin\", (event: FocusEvent) => {\r\n            let target = event.target as any;\r\n            this._activeIndex = this.items.findIndex(\r\n                (item) => item.contains(target)\r\n            );\r\n            this.expanded = true;\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            let newTarget = event.relatedTarget as any;\r\n            if (!this.contains(newTarget)) {  \r\n                this.reset();\r\n                this.expanded = false;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"ArrowUp\":\r\n                    this.focusItemAt((this.activeIndex <= 0) ? this.items.length - 1 : this.activeIndex - 1);\r\n                    if (isTagElement(\"e-menuitemgroup\", this.activeItem)) {\r\n                        this.activeItem.focusItemAt(this.activeItem.items.length - 1);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    this.focusItemAt((this.activeIndex >= this.items.length - 1) ? 0 : this.activeIndex + 1);\r\n                    if (isTagElement(\"e-menuitemgroup\", this.activeItem)) {\r\n                        this.activeItem.focusItemAt(0);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"Home\":\r\n                    this.focusItemAt(0);\r\n                    if (isTagElement(\"e-menuitemgroup\", this.activeItem)) {\r\n                        this.activeItem.focusItemAt(0);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"End\":\r\n                    this.focusItemAt(this.items.length - 1);\r\n                    if (isTagElement(\"e-menuitemgroup\", this.activeItem)) {\r\n                        this.activeItem.focusItemAt(this.activeItem.items.length - 1);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"Enter\":\r\n                    if (isTagElement(\"e-menuitem\", this.activeItem)) {\r\n                        this.activeItem.trigger();\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                case \"Escape\":\r\n                    if (this.parentItem) {\r\n                        let parentGroup = this.parentItem.group;\r\n                        let parentMenu = parentGroup ? parentGroup.parentMenu : this.parentItem.parentMenu;\r\n                        if (isTagElement(\"e-menu\", parentMenu)) {\r\n                            if (parentGroup) {\r\n                                parentGroup.focusItemAt(parentGroup.activeIndex);\r\n                            }\r\n                            else {\r\n                                parentMenu.focusItemAt(parentMenu.activeIndex);\r\n                            }\r\n                            this.reset();\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    else {\r\n                        document.body.focus();\r\n                    }\r\n                    break;\r\n                case \"ArrowLeft\":\r\n                    if (this.parentItem) {\r\n                        let parentGroup = this.parentItem.group;\r\n                        let parentMenu = parentGroup ? parentGroup.parentMenu : this.parentItem.parentMenu;\r\n                        if (isTagElement(\"e-menu\", parentMenu)) {\r\n                            if (parentGroup) {\r\n                                parentGroup.focusItemAt(parentGroup.activeIndex);\r\n                            }\r\n                            else {\r\n                                parentMenu.focusItemAt(parentMenu.activeIndex);\r\n                            }\r\n                            this.reset();\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"ArrowRight\":\r\n                    if (this.items.includes(event.target as any)) {\r\n                        if (isTagElement(\"e-menuitem\", this.activeItem) && this.activeItem.childMenu) {\r\n                            this.activeItem.childMenu.focusItemAt(0);\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (newValue !== oldValue) {\r\n            switch (name) {\r\n                case \"expanded\":\r\n                    if (newValue !== null) {\r\n                        let thisRect = this.getBoundingClientRect();\r\n                        let thisIsOverflowing = thisRect.right > document.body.clientWidth;\r\n                        if (thisIsOverflowing) {\r\n                            this.overflowing = true;\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.overflowing = false;\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public focusItemAt(index: number, childMenu?: boolean): void {\r\n        let item = this.items[index];\r\n        if (item) {\r\n            this._activeIndex = index;\r\n            item.focus();\r\n            if (isTagElement(\"e-menuitem\", item)) {\r\n                if (childMenu && item.childMenu) {\r\n                    item.childMenu.focus();\r\n                }\r\n            }\r\n            else {\r\n                item.focusItemAt(0);\r\n            } \r\n        }\r\n    }\r\n\r\n    public reset(): void {\r\n        let item = this.activeItem;\r\n        this._activeIndex = -1;\r\n        if (isTagElement(\"e-menuitem\", item) && item.childMenu) {\r\n            item.childMenu.reset();\r\n        }\r\n    }\r\n\r\n    public findItem(predicate: (item: HTMLEMenuItemElement) => boolean, subitems?: boolean): HTMLEMenuItemElement | null {\r\n        let foundItem: HTMLEMenuItemElement | HTMLEMenuItemGroupElement | null = null;\r\n        for (let item of this.items) {\r\n            if (isTagElement(\"e-menuitem\", item)) {\r\n                if (predicate(item)) {\r\n                    return item;\r\n                }\r\n                if (subitems && item.childMenu) {\r\n                    foundItem = item.childMenu.findItem(predicate, subitems);\r\n                    if (foundItem) {\r\n                        return foundItem;\r\n                    }\r\n                }\r\n            }\r\n            else if (isTagElement(\"e-menuitemgroup\", item)) {\r\n                foundItem = item.findItem(predicate, subitems);\r\n                if (foundItem) {\r\n                    return foundItem;\r\n                }\r\n            }\r\n        }\r\n        return foundItem;\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menu\": HTMLEMenuElement,\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot, isTagElement } from \"../../HTMLElement\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuBarElement };\r\nexport { HTMLEMenuBarElementBase };\r\n\r\ninterface HTMLEMenuBarElement extends HTMLElement {\r\n    name: string;\r\n    active: boolean;\r\n    items: HTMLEMenuItemElement[];\r\n    readonly activeIndex: number;\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    focusItemAt(index: number, childMenu?: boolean): void;\r\n    reset(): void;\r\n    findItem(predicate: (item: HTMLEMenuItemElement) => boolean, subtree?: boolean): HTMLEMenuItemElement | null;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-menubar\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"active\", type: \"boolean\"},\r\n])\r\nclass HTMLEMenuBarElementBase extends HTMLElement implements HTMLEMenuBarElement {\r\n\r\n    public name!: string;\r\n    public active!: boolean;\r\n    \r\n    public items: HTMLEMenuItemElement[];\r\n\r\n    private _activeIndex: number;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    position: relative;\r\n                    display: block;\r\n                    user-select: none;\r\n                }\r\n\r\n                :host(:not(:focus-within)) ::slotted(:hover) {\r\n                    color: black;\r\n                    background-color: gainsboro;\r\n                }\r\n\r\n                [part~=\"container\"] {\r\n                    display: flex;\r\n                    flex-direction: row;\r\n                }\r\n            </style>\r\n            <div part=\"container\">\r\n                <slot></slot>\r\n            </div>\r\n        `);\r\n\r\n        this.items = [];\r\n        this._activeIndex = -1;\r\n    }\r\n\r\n    public get activeIndex(): number {\r\n        return this._activeIndex;\r\n    }\r\n\r\n    public get activeItem(): HTMLEMenuItemElement | null {\r\n        return this.items[this.activeIndex] || null;\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n        \r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const items = slot.assignedElements()\r\n                    .filter(item => isTagElement(\"e-menuitem\", item)) as HTMLEMenuItemElement[];\r\n                this.items = items;\r\n                items.forEach((item) => {\r\n                    item.parentMenu = this;\r\n                });\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"mouseover\", (event) => {\r\n            let targetIndex = this.items.indexOf(event.target as any);\r\n            if (targetIndex >= 0) {\r\n                if (this.contains(document.activeElement)) {\r\n                    if (this.active) {\r\n                        this.focusItemAt(targetIndex, true);\r\n                    }\r\n                    else {\r\n                        this._activeIndex = targetIndex;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"keydown\", (event) => {\r\n            switch (event.key) {\r\n                case \"ArrowLeft\":\r\n                    this.focusItemAt((this.activeIndex <= 0) ? this.items.length - 1 : this.activeIndex - 1);\r\n                    if (this.active && this.activeItem?.childMenu) {\r\n                        this.activeItem.childMenu.focusItemAt(0);\r\n                    }\r\n                    break;\r\n                case \"ArrowRight\":\r\n                    this.focusItemAt((this.activeIndex >= this.items.length - 1) ? 0 : this.activeIndex + 1);\r\n                    if (this.active && this.activeItem?.childMenu) {\r\n                        this.activeItem.childMenu.focusItemAt(0);\r\n                    }\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    this.focusItemAt(this.activeIndex);\r\n                    if (this.active && this.activeItem?.childMenu) {\r\n                        this.activeItem.childMenu.focusItemAt(0);\r\n                    }\r\n                    break;\r\n                case \"Enter\":\r\n                    this.active = true;\r\n                    if (this.activeItem) {\r\n                        this.activeItem.trigger();\r\n                    }\r\n                    break;\r\n                case \"Escape\":\r\n                    this.focusItemAt(this.activeIndex);\r\n                    this.active = false;\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"mousedown\", (event) => {\r\n            let targetIndex = this.items.indexOf(event.target as any);\r\n            if (targetIndex >= 0) {\r\n                if (!this.contains(document.activeElement)) {\r\n                    this.active = true;\r\n                    this.focusItemAt(targetIndex, true);\r\n                }\r\n                else {\r\n                    this.active = false;\r\n                    document.body.focus();\r\n                }\r\n                event.preventDefault();\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focus\", () => {\r\n            this._activeIndex = 0;\r\n        });\r\n    }\r\n\r\n    public focusItemAt(index: number, childMenu?: boolean): void {\r\n        let item = this.items[index];\r\n        if (item) {\r\n            this._activeIndex = index;\r\n            item.focus();\r\n            if (childMenu && item.childMenu) {\r\n                item.childMenu.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    public reset(): void {\r\n        let item = this.activeItem;\r\n        this._activeIndex = -1;\r\n        if (item?.childMenu) {\r\n            item.childMenu.reset();\r\n        }\r\n    }\r\n\r\n    public findItem(predicate: (item: HTMLEMenuItemElement) => boolean, subtree?: boolean): HTMLEMenuItemElement | null {\r\n        let foundItem: HTMLEMenuItemElement | null = null;\r\n        for (let item of this.items) {\r\n            if (predicate(item)) {\r\n                return item;\r\n            }\r\n            if (subtree && item.childMenu) {\r\n                foundItem = item.childMenu.findItem(predicate, subtree);\r\n                if (foundItem) {\r\n                    return foundItem;\r\n                }\r\n            }\r\n        }\r\n        return foundItem;\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menubar\": HTMLEMenuBarElement,\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot, isTagElement } from \"../../HTMLElement\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\n\r\nexport { HTMLEMenuButtonElement };\r\nexport { HTMLEMenuButtonElementBase };\r\n\r\ninterface HTMLEMenuButtonElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n    disabled: boolean;\r\n    active: boolean;\r\n    childMenu: HTMLEMenuElement | null;\r\n    trigger(): void\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-menubutton\",\r\n    observedAttributes: [\"icon\", \"label\", \"checked\"]\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"active\", type: \"boolean\"},\r\n    {name: \"label\", type: \"string\"},\r\n    {name: \"disabled\", type: \"boolean\"},\r\n])\r\nclass HTMLEMenuButtonElementBase extends HTMLElement implements HTMLEMenuButtonElement {\r\n\r\n    public name!: string;\r\n    public label!: string;\r\n    public disabled!: boolean;\r\n    public active!: boolean;\r\n\r\n    public childMenu: HTMLEMenuElement | null;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    position: relative;\r\n                    display: inline-block;\r\n\r\n                    user-select: none;\r\n                    white-space: nowrap;\r\n                    cursor: pointer;\r\n                    padding: 2px;\r\n                }\r\n\r\n                :host(:hover) {\r\n                    background-color: gainsboro;\r\n                }\r\n\r\n                :host(:focus-within:not(:focus)) {\r\n                    background-color: gainsboro;\r\n                }\r\n\r\n                :host([disabled]) {\r\n                    color: lightgray;\r\n                }\r\n\r\n                ::slotted([slot=\"menu\"]) {\r\n                    z-index: 1;\r\n                    position: absolute;\r\n                    color: initial;\r\n                }\r\n\r\n                ::slotted([slot=\"menu\"]) {\r\n                    top: 100%;\r\n                    left: 0;\r\n                }\r\n                \r\n                ::slotted([slot=\"menu\"][overflowing]) {\r\n                    right: 0;\r\n                    left: auto;\r\n                }\r\n\r\n                ::slotted([slot=\"menu\"]:not([expanded])) {\r\n                    opacity: 0;\r\n                    pointer-events: none !important;\r\n                }\r\n\r\n                [part~=\"toggle_arrow\"] {\r\n                    position: relative;\r\n                    display: inline-block;\r\n                    flex: auto;\r\n                    width: 18px;\r\n                    height: 18px;\r\n                }\r\n\r\n                [part~=\"toggle_arrow\"]::after {\r\n                    display: inline-block;\r\n                    text-align: center;\r\n                    width: 18px;\r\n                    position: absolute;\r\n                    content: \"▼\";\r\n                    color: dimgray;\r\n                }\r\n            </style>\r\n            <span part=\"toggle_arrow\"></span>\r\n            <slot name=\"menu\"></slot>\r\n        `);\r\n        \r\n        this.childMenu = null;\r\n    }\r\n\r\n    public connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const menuSlot = this.shadowRoot?.querySelector<HTMLSlotElement>(\"slot[name=menu]\");\r\n        if (menuSlot) {\r\n            menuSlot.addEventListener(\"slotchange\", () => {\r\n                const menuElem = menuSlot.assignedElements()[0];\r\n                if (isTagElement(\"e-menu\", menuElem)) {\r\n                    this.childMenu = menuElem;\r\n                }\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Enter\":\r\n                    if (!this.active) {\r\n                        this.active = true;\r\n                        if (this.childMenu) {\r\n                            this.childMenu.focusItemAt(0);\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"Escape\":\r\n                    this.focus();\r\n                    this.active = false;\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"click\", (event: MouseEvent) => {\r\n            let target = event.target as Element;\r\n            if (this.childMenu && !this.childMenu.contains(target)) {\r\n                this.toggle();\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"blur\", (event: FocusEvent) => {\r\n            let containsNewFocus = (event.relatedTarget !== null) && this.contains(event.relatedTarget as Node);\r\n            if (!containsNewFocus) {\r\n                this.active = false;\r\n            }\r\n        }, {capture: true});\r\n    }\r\n\r\n    public toggle(): void {\r\n        if (!this.active) {\r\n            this.active = true;\r\n            if (this.childMenu) {\r\n                this.childMenu.focusItemAt(0);\r\n            }\r\n        }\r\n        else {\r\n            this.active = false;\r\n        }\r\n    }\r\n\r\n    public trigger(): void {\r\n        alert();\r\n        if (!this.disabled) {\r\n            this.dispatchEvent(new CustomEvent(\"trigger\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (newValue !== oldValue) {\r\n            switch (name) {\r\n                case \"label\":\r\n                    if (oldValue !== newValue) {\r\n                        const labelPart = this.shadowRoot?.querySelector(\"[part~=label]\");\r\n                        if (labelPart) {\r\n                            labelPart.textContent = newValue;\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}","import { HotKey } from \"../../../Input\";\r\nimport { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot, isTagElement } from \"../../HTMLElement\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\nimport { HTMLEMenuBarElement } from \"./MenuBar\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { EMenuItemElementType };\r\nexport { HTMLEMenuItemElement };\r\nexport { HTMLEMenuItemElementBase };\r\nexport { HotKeyChangeEvent };\r\n\r\ntype EMenuItemElementType = \"button\" | \"radio\" | \"checkbox\" | \"menu\" | \"submenu\";\r\n\r\ninterface HTMLEMenuItemElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n    type: EMenuItemElementType;\r\n    disabled: boolean;\r\n    checked: boolean;\r\n    value: string;\r\n\r\n    group: HTMLEMenuItemGroupElement | null;\r\n    parentMenu: HTMLEMenuElement | HTMLEMenuBarElement | null;\r\n    childMenu: HTMLEMenuElement | null;\r\n\r\n    hotkey: HotKey | null;\r\n    command: string | null;\r\n    commandArgs: any;\r\n\r\n    trigger(): void;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-menuitem\",\r\n    observedAttributes: [\"label\", \"checked\", \"type\"]\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"label\", type: \"string\"},\r\n    {name: \"type\", type: \"string\"},\r\n    {name: \"disabled\", type: \"boolean\"},\r\n    {name: \"checked\", type: \"boolean\"},\r\n])\r\nclass HTMLEMenuItemElementBase extends HTMLElement implements HTMLEMenuItemElement {\r\n\r\n    public name!: string;\r\n    public label!: string;\r\n    public type!: EMenuItemElementType;\r\n    public disabled!: boolean;\r\n    public checked!: boolean;\r\n    public value!: string;\r\n\r\n    public group: HTMLEMenuItemGroupElement | null;\r\n    public parentMenu: HTMLEMenuElement | HTMLEMenuBarElement | null;\r\n    public childMenu: HTMLEMenuElement | null;\r\n\r\n    public command: string | null;\r\n    public commandArgs: any;\r\n\r\n    private _hotkey: HotKey | null;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    position: relative;\r\n                    display: inline-block;\r\n\r\n                    user-select: none;\r\n                    white-space: nowrap;\r\n\r\n                    padding: 2px 6px;\r\n                    cursor: pointer;\r\n                }\r\n\r\n                :host(:not([type=\"menu\"])) {\r\n                    padding-left: 12px;\r\n                    padding-right: 12px;\r\n                }\r\n\r\n                :host(:focus-within) {\r\n                    color: black;\r\n                    background-color: lightgray;\r\n                }\r\n\r\n                :host([disabled]) {\r\n                    color: dimgray;\r\n                }\r\n\r\n                :host([type=\"submenu\"]) ::slotted([slot=\"menu\"]),\r\n                :host([type=\"menu\"]) ::slotted([slot=\"menu\"]) {\r\n                    z-index: 1;\r\n                    position: absolute;\r\n                    color: initial;\r\n                }\r\n\r\n                :host([type=\"menu\"]) ::slotted([slot=\"menu\"]) {\r\n                    top: 100%;\r\n                    left: 0;\r\n                }\r\n                \r\n                :host([type=\"submenu\"]) ::slotted([slot=\"menu\"]) {\r\n                    left: 100%;\r\n                    top: -6px;\r\n                }\r\n                \r\n                :host([type=\"submenu\"]) ::slotted([slot=\"menu\"][overflowing]) {\r\n                    right: 100%;\r\n                    left: auto;\r\n                }\r\n                \r\n                :host([type=\"menu\"]) ::slotted([slot=\"menu\"][overflowing]) {\r\n                    right: 0;\r\n                    left: auto;\r\n                }\r\n\r\n                :host([type=\"menu\"]) ::slotted([slot=\"menu\"]:not([expanded])),\r\n                :host([type=\"submenu\"]) ::slotted([slot=\"menu\"]:not([expanded])) {\r\n                    opacity: 0;\r\n                    pointer-events: none !important;\r\n                }\r\n\r\n                [part~=\"content\"] {\r\n                    flex: auto;\r\n                    display: flex;\r\n                    overflow: hidden;\r\n                    pointer-events: none;\r\n                }\r\n\r\n                [part~=\"input\"] {\r\n                    display: inline-block;\r\n                    flex: none;\r\n                    width: 16px;\r\n                    height: 16px;\r\n                    margin: 2px;\r\n                }\r\n\r\n                [part~=\"label\"] {\r\n                    flex: auto;\r\n                    text-align: left;\r\n                }\r\n\r\n                [part~=\"hotkey\"] {\r\n                    flex: none;\r\n                    text-align: right;\r\n                    margin-left: 16px;\r\n                }\r\n\r\n                [part~=\"hotkey\"]:empty {\r\n                    display: none !important;\r\n                }\r\n\r\n                [part~=\"arrow\"] {\r\n                    display: inline-block;\r\n                    flex: none;\r\n                    margin: auto;\r\n                    color: inherit;\r\n                    text-align: center;\r\n                    font-weight: bold;\r\n                    width: 18px;\r\n                    height: 18px;\r\n                }\r\n\r\n                [part~=\"arrow\"]::after {\r\n                    display: inline-block;\r\n                    text-align: center;\r\n                    width: 18px;\r\n                    height: 18px;\r\n                    position: absolute;\r\n                    content: \"►\";\r\n                    color: dimgray;\r\n                }\r\n\r\n                :host([type=\"menu\"]) [part~=\"arrow\"],\r\n                :host([type=\"menu\"]) [part~=\"input\"] {\r\n                    display: none;\r\n                }\r\n\r\n                :host(:not([type=\"menu\"])) [part~=\"label\"] {\r\n                    padding-left: 10px;\r\n                    padding-right: 12px;\r\n                }\r\n                \r\n                :host(:not([type=\"checkbox\"]):not([type=\"radio\"])) [part~=\"input\"] {\r\n                    visibility: hidden;\r\n                    pointer-events: none;\r\n                }\r\n                \r\n                :host(:not([type=\"submenu\"])) [part~=\"arrow\"] {\r\n                    visibility: hidden;\r\n                    pointer-events: none;\r\n                }\r\n            </style>\r\n            <span part=\"content\">\r\n                <input part=\"input\" type=\"button\" tabindex=\"-1\"></input>\r\n                <span part=\"label\"></span>\r\n                <span part=\"hotkey\"></span>\r\n                <span part=\"arrow\"></span>\r\n            </span>\r\n            <slot name=\"menu\"></slot>\r\n        `);\r\n        this.childMenu = null;\r\n        this.parentMenu = null;\r\n        this.group = null;\r\n        this.command = null;\r\n        this._hotkey = null;\r\n    }\r\n\r\n    public get hotkey(): HotKey | null {\r\n        return this._hotkey;\r\n    }\r\n\r\n    public set hotkey(hotkey: HotKey | null) {\r\n        this.dispatchEvent(\r\n            new CustomEvent(\"e_hotkeychange\", {\r\n                bubbles: true,\r\n                detail: {\r\n                    oldHotKey: this._hotkey,\r\n                    newHotKey: hotkey\r\n                }\r\n            })\r\n        );\r\n\r\n        this._hotkey = hotkey;\r\n\r\n        let hotkeyPart = this.shadowRoot?.querySelector(\"[part~=hotkey]\");\r\n        if (hotkeyPart) {\r\n            hotkeyPart.textContent = hotkey ? hotkey.toString() : \"\";\r\n        }\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        this.setAttribute(\"aria-label\", this.label);\r\n\r\n        const menuSlot = this.shadowRoot?.querySelector<HTMLSlotElement>(\"slot[name=menu]\");\r\n        if (menuSlot) {\r\n            menuSlot.addEventListener(\"slotchange\", () => {\r\n                const menuElem = menuSlot.assignedElements()[0];\r\n                if (isTagElement(\"e-menu\", menuElem)) {\r\n                    this.childMenu = menuElem;\r\n                    menuElem.parentItem = this;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (newValue !== oldValue) {\r\n            switch (name) {\r\n                case \"label\":\r\n                    if (oldValue !== newValue) {\r\n                        const labelPart = this.shadowRoot?.querySelector(\"[part~=label]\");\r\n                        if (labelPart) {\r\n                            labelPart.textContent = newValue;\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"checked\":\r\n                    if (oldValue !== newValue) {\r\n                        const inputPart = this.shadowRoot?.querySelector<HTMLInputElement>(\"[part~=input]\");\r\n                        if (inputPart) {\r\n                            inputPart.checked = (newValue !== null);\r\n                            this.dispatchEvent(new CustomEvent(\"e_change\", {bubbles: true}));\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"type\":\r\n                    if (oldValue !== newValue) {\r\n                        const inputPart = this.shadowRoot?.querySelector<HTMLInputElement>(\"[part~=input]\");\r\n                        if (inputPart) {\r\n                            switch (this.type) {\r\n                                case \"radio\":\r\n                                    inputPart.type = \"radio\";\r\n                                    break;\r\n                                case \"menu\":\r\n                                    inputPart.type = \"hidden\";\r\n                                    break;\r\n                                default:\r\n                                    inputPart.type = \"checkbox\";\r\n                                    break;\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public trigger(): void {\r\n        if (!this.disabled) {\r\n            switch (this.type) {\r\n                case \"checkbox\":\r\n                    this.checked = !this.checked;\r\n                    break;\r\n                case \"radio\":\r\n                    this.dispatchEvent(new CustomEvent(\"e_radiochangerequest\", {bubbles: true}));\r\n                    break;\r\n                case \"menu\":\r\n                    if (this.childMenu) {\r\n                        this.childMenu.focusItemAt(0);\r\n                    }\r\n                    break;\r\n            }\r\n            this.dispatchEvent(new CustomEvent(\"e_trigger\", {bubbles: true}));\r\n        }\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitem\": HTMLEMenuItemElement,\r\n    }\r\n}\r\n\r\ntype HotKeyChangeEvent = CustomEvent<{\r\n    oldHotKey: HotKey | null;\r\n    newHotKey: HotKey | null;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_hotkeychange\": HotKeyChangeEvent,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_trigger\": Event,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_radiochangerequest\": Event,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_change\": Event,\r\n    }\r\n}","\r\nimport { pointIntersectsWithDOMRect } from \"../../Snippets\";\r\nimport { bindShadowRoot, GenerateAttributeAccessors, isTagElement, RegisterCustomHTMLElement } from \"../../HTMLElement\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuItemGroupElement };\r\nexport { HTMLEMenuItemGroupElementBase };\r\n\r\ninterface HTMLEMenuItemGroupElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n    type: \"list\" | \"grid\";\r\n    rows: number;\r\n    cells: number;\r\n\r\n    parentMenu: HTMLEMenuElement | null;\r\n    items: HTMLEMenuItemElement[];\r\n\r\n    readonly activeIndex: number;\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    \r\n    focusItemAt(index: number, childMenu?: boolean): void;\r\n    reset(): void;\r\n    findItem(predicate: (item: HTMLEMenuItemElement) => boolean, subitems?: boolean): HTMLEMenuItemElement | null;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-menuitemgroup\",\r\n    observedAttributes: [\"label\"]\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"label\", type: \"string\"},\r\n    {name: \"type\", type: \"string\"},\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"rows\", type: \"number\"},\r\n    {name: \"cells\", type: \"number\"},\r\n])\r\nclass HTMLEMenuItemGroupElementBase extends HTMLElement implements HTMLEMenuItemGroupElement {\r\n    public name!: string;\r\n    public label!: string;\r\n    public type!: \"list\" | \"grid\";\r\n    public rows!: number;\r\n    public cells!: number;\r\n    \r\n    public parentMenu: HTMLEMenuElement | null;\r\n    public items: HTMLEMenuItemElement[];\r\n\r\n    private _activeIndex: number;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    position: relative;\r\n                    display: inline-block;\r\n                    user-select: none;\r\n                }\r\n                \r\n                :host(:not([label])) [part~=\"label\"] {\r\n                    display: none;\r\n                }\r\n\r\n                [part~=\"label\"] {\r\n                    white-space: nowrap;\r\n                    padding: 2px 6px 6px 6px;\r\n                    font-weight: bold;\r\n                }\r\n\r\n                [part~=\"container\"] {\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                }\r\n\r\n                [part~=\"separator\"] {\r\n                    margin: 6px 0;\r\n                }\r\n\r\n                :host(:first-child) [part~=\"separator\"] {\r\n                    display: none;\r\n                }\r\n            </style>\r\n            <hr part=\"separator\"/>\r\n            <span part=\"label\"></span>\r\n            <div part=\"container\">\r\n                <slot></slot> \r\n            </div>\r\n        `);\r\n\r\n        this._activeIndex = -1;\r\n        this.parentMenu = null;\r\n        this.items = [];\r\n    }\r\n\r\n    public get activeIndex(): number {\r\n        return this._activeIndex;\r\n    }\r\n\r\n    public get activeItem(): HTMLEMenuItemElement | null {\r\n        return this.items[this.activeIndex] || null;\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const items = slot.assignedElements()\r\n                    .filter(item => isTagElement(\"e-menuitem\", item)) as HTMLEMenuItemElement[];\r\n                this.items = items;\r\n                items.forEach((item) => {\r\n                    item.group = this;\r\n                });\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            if (this.items.includes(target)) {\r\n                target.trigger();\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"mouseover\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            let targetIndex = this.items.indexOf(target);\r\n            if (this === target) {\r\n                this.reset();\r\n                this.focus();\r\n            }\r\n            else if (targetIndex >= 0) {\r\n                this.focusItemAt(this.items.indexOf(target), true);\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"mouseout\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            let thisIntersectsWithMouse = pointIntersectsWithDOMRect(\r\n                event.clientX, event.clientY,\r\n                this.getBoundingClientRect()\r\n            );\r\n            if ((this === target || this.items.includes(target)) && !thisIntersectsWithMouse) {\r\n                this.reset();\r\n                this.focus();\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusin\", (event: FocusEvent) => {\r\n            let target = event.target as any;\r\n            this._activeIndex = this.items.findIndex(\r\n                (item) => item.contains(target)\r\n            );\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            let newTarget = event.relatedTarget as any;\r\n            if (!this.contains(newTarget)) {  \r\n                this.reset();\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"e_radiochangerequest\", (event: Event) => {\r\n            let target = event.target as any;\r\n            if (isTagElement(\"e-menuitem\", target)) {\r\n                let item = target;\r\n                if (item.type === \"radio\" && !item.checked) {\r\n                    let checkedRadio = this.findItem(\r\n                        (item: HTMLEMenuItemElement) => {\r\n                            return item.type === \"radio\" && item.checked\r\n                        }\r\n                    );\r\n                    if (checkedRadio) {\r\n                        checkedRadio.checked = false;\r\n                    }\r\n                    item.checked = true;\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"ArrowUp\":\r\n                    if (this.activeIndex > 0) {\r\n                        this.focusItemAt(this.activeIndex - 1);\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    if (this.activeIndex < this.items.length - 1) {\r\n                        this.focusItemAt(this.activeIndex + 1);\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                case \"Enter\":\r\n                    if (this.activeItem) {\r\n                        this.activeItem.trigger();\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                case \"ArrowRight\":\r\n                    if (this.items.includes(event.target as any)) {\r\n                        if (this.activeItem?.childMenu) {\r\n                            this.activeItem.childMenu.focusItemAt(0);\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"Home\":\r\n                    this.focusItemAt(0);\r\n                    break;\r\n                case \"End\":\r\n                    this.focusItemAt(this.items.length - 1);\r\n                    break;\r\n                case \"Escape\":\r\n                    this.reset();\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (oldValue !== newValue) {\r\n            switch (name) {\r\n            case \"label\":\r\n                if (oldValue !== newValue) {\r\n                    const label = this.shadowRoot?.querySelector(\"[part~=label]\");\r\n                    if (label) {\r\n                        label.textContent = newValue;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public focusItemAt(index: number, childMenu?: boolean): void {\r\n        let item = this.items[index];\r\n        if (item) {\r\n            this._activeIndex = index;\r\n            item.focus();\r\n            if (childMenu && item.childMenu) {\r\n                item.childMenu.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    public reset(): void {\r\n        let item = this.activeItem;\r\n        this._activeIndex = -1;\r\n        if (item?.childMenu) {\r\n            item.childMenu.reset();\r\n        }\r\n    }\r\n\r\n    public findItem(predicate: (item: HTMLEMenuItemElement) => boolean, subitems?: boolean): HTMLEMenuItemElement | null {\r\n        let foundItem: HTMLEMenuItemElement | null = null;\r\n        for (let item of this.items) {\r\n            if (predicate(item)) {\r\n                return item;\r\n            }\r\n            if (subitems && item.childMenu) {\r\n                foundItem = item.childMenu.findItem(predicate, subitems);\r\n                if (foundItem) {\r\n                    return foundItem;\r\n                }\r\n            }\r\n        }\r\n        return foundItem;\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitemgroup\": HTMLEMenuItemGroupElement,\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../../HTMLElement\";\r\n\r\nexport { PanelElement };\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: 'e-panel',\r\n    observedAttributes: ['state']\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: 'label', type: 'string'},\r\n    {name: 'state', type: 'string'},\r\n])\r\nclass PanelElement extends HTMLElement {\r\n\r\n    public label!: string;\r\n    public state!: 'opened' | 'closed';\r\n\r\n    constructor() {\r\n        super();\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n                }\r\n\r\n                :host([state='closed']) #label,\r\n                :host([state='closed']) #content {\r\n                    display: none;\r\n                }\r\n\r\n                :host([state='closed']) #header {\r\n                    padding: 0;\r\n                }\r\n\r\n                :host([state='closed']) #arrow {\r\n                    display: inherit;\r\n                }\r\n                \r\n                :host([state='opened']) #label,\r\n                :host([state='opened']) #content {\r\n                    display: inherit;\r\n                }\r\n\r\n                :host([state='opened']) #arrow {\r\n                    display: none;\r\n                }\r\n\r\n                #content {\r\n                    padding: var(--content-padding, inherit);\r\n                }\r\n\r\n                #header {\r\n                    color: var(--header-color, inherit);\r\n                    text-align: center;\r\n                    padding-top: 0;\r\n\r\n                    user-select: none;\r\n                }\r\n\r\n                #header:hover {\r\n                    --color: var(--header-hover-color, var(--header-color));\r\n                    color: var(--header-hover-color, var(--header-color));\r\n                    font-weight: var(--header-hover-font-weight);\r\n                }\r\n            </style>\r\n            <div>\r\n                <div id=\"header\">\r\n                    <span id=\"arrow\"></span>\r\n                    <span id=\"label\"></span>\r\n                </div>\r\n                <div id=\"content\">\r\n                    <slot></slot>\r\n                </div>\r\n            </div>\r\n        `);\r\n \r\n        const header = this.shadowRoot!.getElementById('header')!;\r\n\r\n        header.addEventListener(\r\n            'click', () => {\r\n                this.state = (this.state === 'opened') ? 'closed' : 'opened';\r\n            }\r\n        );\r\n    }\r\n    \r\n    public async render() {\r\n        const label = this.shadowRoot!.getElementById('label')!;\r\n        const arrow = this.shadowRoot!.getElementById('arrow')!;\r\n        \r\n        let rect = this.getBoundingClientRect();\r\n        const arr = (rect.left < window.innerWidth / 2) ? '>' : '<';\r\n        arrow.innerHTML = arr;\r\n        label.innerHTML = this.label || '';\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.label = this.label || 'label';\r\n        this.state = this.state || 'opened';\r\n\r\n        this.render();\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../../HTMLElement\";\r\n\r\nexport { PanelGroupElement };\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: 'e-panel-group'\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: 'label', type: 'string'},\r\n    {name: 'state', type: 'string'},\r\n])\r\nclass PanelGroupElement extends HTMLElement {\r\n\r\n    public label!: string;\r\n    public state!: 'opened' | 'closed';\r\n\r\n    public static readonly observedAttributes = ['state'];\r\n    \r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <link rel=\"stylesheet\" href=\"css/theme.css\"/>\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n                }\r\n\r\n                :host([state='closed']) #content {\r\n                    display: none;\r\n                }\r\n\r\n                :host([state='closed']) #less {\r\n                    display: none;\r\n                }\r\n\r\n                :host([state='opened']) #more {\r\n                    display: none;\r\n                }\r\n\r\n                #toggler {\r\n                    display: flex;\r\n                }\r\n\r\n                #toggler:hover {\r\n                    font-weight: 500;\r\n                    color: var(--label-on-hover-color);\r\n                }\r\n\r\n                #label {\r\n                    flex: 1;\r\n                }\r\n            </style>\r\n            <div>\r\n                <div id=\"toggler\">\r\n                    <span id=\"arrow\"><!--<icon #less><icon #more>--></span>\r\n                    <span id=\"label\"></span>\r\n                </div>\r\n                <div id=\"content\">\r\n                    <slot></slot>\r\n                </div>\r\n            </div>\r\n        `);\r\n\r\n        \r\n        this.state = this.state || 'closed';\r\n    }\r\n\r\n    public connectedCallback() {\r\n        const toggler = this.shadowRoot!.querySelector<HTMLElement>('#toggler')!;\r\n        const arrow = this.shadowRoot!.querySelector<HTMLElement>('#arrow')!;\r\n        const label = this.shadowRoot!.querySelector<HTMLElement>('#label')!;\r\n\r\n        toggler.addEventListener(\r\n            'click', () => {\r\n                if (this.state === 'opened') {\r\n                    this.state = 'closed';\r\n                }\r\n                else if (this.state === 'closed') {\r\n                    this.state = 'opened';\r\n                }\r\n            }\r\n        );\r\n\r\n        label.innerHTML = this.label!;\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot, isTagElement } from \"../../HTMLElement\";\r\n        import { HTMLEStatusItemElement } from \"./StatusItem\";\r\n\r\nexport { HTMLEStatusBarElement };\r\nexport { HTMLEStatusBarElementBase };\r\n\r\ninterface HTMLEStatusBarElement  extends HTMLElement {\r\n    items: HTMLEStatusItemElement[];\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-statusbar\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"active\", type: \"boolean\"},\r\n])\r\nclass HTMLEStatusBarElementBase extends HTMLElement implements HTMLEStatusBarElement {\r\n\r\n    public name!: string;\r\n    public active!: boolean;\r\n    \r\n    public items: HTMLEStatusItemElement[];\r\n\r\n    public _selectedItemIndex: number;\r\n    \r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: flex;\r\n                    position: relative; \r\n                    user-select: none;\r\n\r\n                    background-color: white;\r\n                }\r\n\r\n                :host(:focus) {\r\n                    outline: 1px solid -webkit-focus-ring-color;\r\n                }\r\n\r\n                :host(:focus) ::slotted(:first-child),\r\n                :host(:not(:focus-within)) ::slotted(:hover) {\r\n                    color: black;\r\n                    background-color: gainsboro;\r\n                }\r\n\r\n                [part~=\"ul\"] {\r\n                    display: block;\r\n                    list-style-type: none;\r\n                    padding: 0; margin: 0;\r\n                }\r\n            </style>\r\n            <ul part=\"ul\">\r\n                <slot></slot>\r\n            </ul>\r\n        `);\r\n\r\n        this.items = [];\r\n        this._selectedItemIndex = -1;\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n        \r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", (event: Event) => {\r\n                const items = (event.target as HTMLSlotElement).assignedElements()\r\n                    .filter(item => isTagElement(\"e-statusitem\", item)) as HTMLEStatusItemElement[];\r\n                this.items = items;\r\n            }, {once: true});\r\n        }\r\n    }\r\n\r\n    public get selectedItemIndex(): number {\r\n        return this._selectedItemIndex;\r\n    }\r\n\r\n    public get selectedItem(): HTMLEStatusItemElement | null {\r\n        return this.items[this.selectedItemIndex] || null;\r\n    }\r\n\r\n    public insertItem(index: number, item: HTMLEStatusItemElement): void {\r\n        index = Math.min(Math.max(index, -this.items.length), this.items.length);\r\n        this.insertBefore(item, this.children[index >= 0 ? index : this.children.length + index]);\r\n        this.items.splice(index, 0, item);\r\n        item.addEventListener(\"mouseenter\", () => {\r\n            this.selectItem(this.items.indexOf(item));\r\n        });\r\n        item.addEventListener(\"mouseleave\", () => {\r\n        });\r\n    }\r\n\r\n    public findItem(predicate: (item: HTMLEStatusItemElement) => boolean): HTMLEStatusItemElement | null {\r\n        const items = this.findItems(predicate);\r\n        if (items.length > 0) {\r\n            return items[0];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public findItems(predicate: (item: HTMLEStatusItemElement) => boolean): HTMLEStatusItemElement[] {\r\n        const items: HTMLEStatusItemElement[] = [];\r\n        this.items.forEach((item) => {\r\n            if (predicate(item)) {\r\n                items.push(item);\r\n            }\r\n        });\r\n        return items;\r\n    }\r\n\r\n    public selectItem(index: number): void {\r\n        if (index !== this.selectedItemIndex) {\r\n            this.clearSelection();\r\n            let item = this.items[index];\r\n            if (item) {\r\n                this._selectedItemIndex = index;\r\n            }\r\n        }\r\n    }\r\n\r\n    public clearSelection() {\r\n        let item = this.selectedItem;\r\n        if (item) {\r\n            this._selectedItemIndex = -1;\r\n        }\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-statusbar\": HTMLEStatusBarElement,\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../../HTMLElement\";\r\n\r\nexport { HTMLEStatusItemElement };\r\nexport { HTMLEStatusItemElementBase };\r\n\r\ninterface HTMLEStatusItemElement extends HTMLElement {\r\n\r\n}\r\n\r\ntype EStatusElementType = \"button\" | \"widget\";\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-statusitem\",\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"icon\", type: \"string\"},\r\n    {name: \"type\", type: \"string\"},\r\n])\r\nclass HTMLEStatusItemElementBase extends HTMLElement implements HTMLEStatusItemElement {\r\n\r\n    public name!: string;\r\n    public type!: EStatusElementType;\r\n    public icon!: string;\r\n\r\n    public command: string | null;\r\n\r\n    private _stateMap: ((state: any) => {content: string}) | null;\r\n\r\n    public get stateMap(): ((state: any) => {content: string}) | null {\r\n        return this._stateMap;\r\n    }\r\n\r\n    public set stateMap(stateMap: ((state: any) => {content: string}) | null) {\r\n        this._stateMap = stateMap;\r\n    }\r\n\r\n    public update(newValue: any): void {\r\n        const { content } = (typeof this.stateMap === \"function\") ? this.stateMap(newValue) : newValue;\r\n        this.textContent = content;\r\n    }\r\n\r\n\r\n    // TODO: Add sync with Promise (icons, etc.)\r\n    \r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    position: relative;\r\n                    display: inline-block;\r\n\r\n                    user-select: none;\r\n                    white-space: nowrap;\r\n\r\n                    padding: 2px 6px;\r\n                    background-color: white;\r\n                }\r\n\r\n                :host(:focus-visible) {\r\n                    outline: none;\r\n                }\r\n\r\n                :host(:hover),\r\n                :host([active]) {\r\n                    background-color: rgb(180, 180, 180);\r\n                }\r\n                \r\n                li {\r\n                    display: flex;\r\n                    height: 100%;\r\n                    list-style-type: none;\r\n                }\r\n            </style>\r\n            <li>\r\n                <slot></slot>\r\n            </li>\r\n        `);\r\n\r\n        this.command = null;\r\n        this._stateMap = null;\r\n    }\r\n\r\n    public activate() {\r\n        this.dispatchEvent(new CustomEvent(\"activate\"));\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n        \r\n        this.addEventListener(\"click\", (event: Event) => {\r\n            this.activate();\r\n            event.stopPropagation();\r\n        });\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-statusitem\": HTMLEStatusItemElement,\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot, isTagElement } from \"../../HTMLElement\";\r\nimport { HTMLETabPanelElement } from \"./TabPanel\";\r\n\r\nexport { ETabChangeEvent };\r\nexport { HTMLETabElement };\r\nexport { BaseHTMLETabElement };\r\n\r\ninterface HTMLETabElement extends HTMLElement {\r\n    name: string;\r\n    active: boolean;\r\n    disabled: boolean;\r\n    controls: string;\r\n    panel: HTMLETabPanelElement | null;\r\n}\r\n\r\ntype ETabChangeEvent = CustomEvent<{\r\n    tab: HTMLETabElement;\r\n}>;\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-tab\",\r\n    observedAttributes: [\"active\", \"controls\"]\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"active\", type: \"boolean\"},\r\n    {name: \"disabled\", type: \"boolean\"},\r\n    {name: \"controls\", type: \"string\"},\r\n])\r\nclass BaseHTMLETabElement extends HTMLElement implements HTMLETabElement {\r\n\r\n    public name!: string;\r\n    public disabled!: boolean;\r\n    public active!: boolean;\r\n    public controls!: string;\r\n\r\n    public panel: HTMLETabPanelElement | null;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: inline-block;\r\n                    position: relative;\r\n                    \r\n                    user-select: none;\r\n                    white-space: nowrap;\r\n                    padding: 2px 6px;\r\n                    border-left: 3px solid transparent;\r\n                    cursor: pointer;\r\n                }\r\n                \r\n                :host([disabled]) {\r\n                    color: grey;\r\n                    pointer-events: none;\r\n                }\r\n\r\n                :host([active]) {\r\n                    border-left: 3px solid dimgray;\r\n                    background-color: whitesmoke;\r\n                }\r\n\r\n                ::slotted(*) {\r\n                    pointer-events: none;\r\n                }\r\n            </style>\r\n            <slot></slot>\r\n        `);\r\n        this.panel = null;\r\n    }\r\n\r\n    public connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const panel = document.getElementById(this.controls);\r\n        if (panel !== this.panel && isTagElement(\"e-tabpanel\", panel)) {\r\n            this.panel = panel;\r\n        }\r\n        if (this.panel)  {\r\n            this.panel.hidden = !this.active;\r\n        }\r\n    }\r\n    \r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (newValue !== oldValue) {\r\n            switch (name) {\r\n                case \"active\":\r\n                    if (this.active) {\r\n                        this.dispatchEvent(new CustomEvent(\"e_tabchange\", {detail: {tab: this}, bubbles: true}));\r\n                    }\r\n                    const panel = document.getElementById(this.controls);\r\n                    if (panel !== this.panel && isTagElement(\"e-tabpanel\", panel)) {\r\n                        this.panel = panel;\r\n                    }\r\n                    if (this.panel)  {\r\n                        this.panel.hidden = !this.active;\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tab\": HTMLETabElement,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_tabchange\": ETabChangeEvent,\r\n    }\r\n}","import { RegisterCustomHTMLElement, bindShadowRoot, isTagElement } from \"../../HTMLElement\";\r\nimport { HTMLETabElement } from \"./Tab\";\r\n\r\nexport { TabChangeEvent };\r\nexport { HTMLETabListElement };\r\nexport { BaseHTMLETabListElement };\r\n\r\ninterface HTMLETabListElement extends HTMLElement {\r\n    readonly activeTab: HTMLETabElement | null;\r\n    tabs: HTMLETabElement[];\r\n}\r\n\r\ntype TabChangeEvent = CustomEvent<{\r\n    tab: HTMLETabElement;\r\n}>\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-tablist\"\r\n})\r\nclass BaseHTMLETabListElement extends HTMLElement implements HTMLETabListElement {\r\n\r\n    public tabs: HTMLETabElement[];\r\n\r\n    private _activeIndex: number;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n                    position: relative;\r\n                }\r\n            </style>\r\n            <slot></slot>\r\n        `);\r\n        this.tabs = [];\r\n        this._activeIndex = 1;\r\n    }\r\n\r\n    public get activeIndex(): number {\r\n        return this._activeIndex;\r\n    }\r\n\r\n    public get activeTab(): HTMLETabElement | null {\r\n        return this.tabs[this._activeIndex] || null;\r\n    }\r\n\r\n    public connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot!.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", (event) => {\r\n                const tabs = (event.target as HTMLSlotElement)\r\n                    .assignedElements()\r\n                    .filter(tab => isTagElement(\"e-tab\", tab)) as HTMLETabElement[];\r\n                this.tabs = tabs;\r\n                this._activeIndex = this.tabs.findIndex(tab => tab.active);\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event) => {\r\n            switch (event.key) {\r\n                case \"ArrowUp\":\r\n                    this.focusTabAt((this.activeIndex <= 0) ? this.tabs.length - 1 : this.activeIndex - 1);\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    this.focusTabAt((this.activeIndex >= this.tabs.length - 1) ? 0 : this.activeIndex + 1);\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"Enter\":\r\n                    if (this.activeTab) {\r\n                        this.activateTab(this.activeTab);\r\n                    }\r\n                    break;\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"click\", (event) => {\r\n            const target = event.target;\r\n            if (isTagElement(\"e-tab\", target)) {\r\n                target.active = true;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"e_tabchange\", (event) => {\r\n            const targetIndex = this.tabs.indexOf(event.detail.tab);\r\n            this._activeIndex = targetIndex;\r\n            this.tabs.forEach((thisTab, thisTabIndex) => {\r\n                if (thisTabIndex !== targetIndex) {\r\n                    thisTab.active = false;\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    public focusTabAt(index: number): void {\r\n        const tab = this.tabs[index];\r\n        if (tab) {\r\n            this._activeIndex = index;\r\n            tab.focus();\r\n        }\r\n    }\r\n\r\n    public findTab(predicate: (tab: HTMLETabElement) => boolean): HTMLETabElement | null {\r\n        return this.tabs.find(predicate) || null;\r\n    }\r\n\r\n    public activateTab(tab: HTMLETabElement) {\r\n        if (this.tabs.includes(tab)) {\r\n            tab.active = true;\r\n        }\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tablist\": HTMLETabListElement,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"tabchange\": TabChangeEvent\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../../HTMLElement\";\r\n\r\nexport { isHTMLETabPanelElement };\r\nexport { HTMLETabPanelElement };\r\nexport { BaseHTMLETabPanelElement };\r\n\r\ninterface HTMLETabPanelElement extends HTMLElement {\r\n    name: string;\r\n}\r\n\r\nfunction isHTMLETabPanelElement(obj: any): obj is BaseHTMLETabPanelElement {\r\n    return obj instanceof Node && obj.nodeType === obj.ELEMENT_NODE && (obj as Element).tagName.toLowerCase() === \"e-tabpanel\";\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-tabpanel\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"name\", type: \"string\"}\r\n])\r\nclass BaseHTMLETabPanelElement extends HTMLElement implements HTMLETabPanelElement {\r\n\r\n    public name!: string;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n                }\r\n\r\n                :host([hidden]) {\r\n                    display: none;\r\n                }\r\n            </style>\r\n            <slot></slot>\r\n        `);\r\n    }\r\n\r\n    public connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tabpanel\": HTMLETabPanelElement,\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot, isTagElement } from \"../../HTMLElement\";\r\nimport { HTMLETreeElement } from \"./Tree\";\r\n\r\nexport { HTMLETreeItemElement };\r\nexport { HTMLETreeItemElementBase };\r\n\r\ninterface HTMLETreeItemElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n    expanded: boolean;\r\n    indent: number;\r\n    icon: string;\r\n    selected: boolean;\r\n    active: boolean;\r\n    leaf: boolean;\r\n\r\n    items: HTMLETreeItemElement[];\r\n    parent: HTMLETreeItemElement | HTMLETreeElement | null;\r\n\r\n    deepestVisibleChildItem(): HTMLETreeItemElement;\r\n    previousVisibleItem(): HTMLETreeItemElement;\r\n    nextVisibleItem(): HTMLETreeItemElement;\r\n    nearestParentItem(): HTMLETreeItemElement;\r\n\r\n    toggle(): void;\r\n    trigger(): void;\r\n\r\n    findItem(predicate: (item: HTMLETreeItemElement) => boolean, subtree?: boolean): HTMLETreeItemElement | null;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-treeitem\",\r\n    observedAttributes: [\"icon\", \"label\", \"expanded\", \"indent\"]\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"label\", type: \"string\"},\r\n    {name: \"icon\", type: \"string\"},\r\n    {name: \"indent\", type: \"number\"},\r\n    {name: \"active\", type: \"boolean\"},\r\n    {name: \"selected\", type: \"boolean\"},\r\n    {name: \"expanded\", type: \"boolean\"},\r\n    {name: \"leaf\", type: \"boolean\"}\r\n])\r\nclass HTMLETreeItemElementBase extends HTMLElement implements HTMLETreeItemElement {\r\n\r\n    public name!: string;\r\n    public label!: string;\r\n    public indent!: number;\r\n    public expanded!: boolean;\r\n    public value!: string;\r\n    public icon!: string;\r\n    public selected!: boolean;\r\n    public active!: boolean;\r\n    public leaf!: boolean;\r\n\r\n    public items: HTMLETreeItemElement[];\r\n    public parent: HTMLETreeItemElement | HTMLETreeElement | null;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: inline-block;\r\n\r\n                    user-select: none;\r\n                    white-space: nowrap;\r\n\r\n                    padding: 0;\r\n                    cursor: pointer;\r\n\r\n                    --indent-width: 6px;\r\n                }\r\n                \r\n                [part~=\"content\"]:hover,\r\n                :host([active]:not([selected])) [part~=\"content\"] {\r\n                    background-color: whitesmoke;\r\n                }\r\n\r\n                :host([selected]) [part~=\"content\"] {\r\n                    background-color: gainsboro;\r\n                }\r\n\r\n                :host(:not([expanded])) [part~=\"container\"] {\r\n                    display: none;\r\n                }\r\n\r\n                [part~=\"content\"] {\r\n                    font-size: 1em;\r\n                    display: flex;\r\n                    padding-left: calc(var(--tree-indent) * var(--indent-width));\r\n                }\r\n\r\n                [part~=\"label\"],\r\n                ::slotted([slot=\"label\"]) {\r\n                    display: block;\r\n                    width: 100%;\r\n                    pointer-events: none;\r\n                    overflow: hidden;\r\n                    white-space: nowrap;\r\n                    text-overflow: ellipsis;\r\n                }\r\n\r\n                :host([leaf]) [part~=\"container\"],\r\n                [part~=\"container\"]:empty {\r\n                    display: none;\r\n                }\r\n\r\n                [part~=\"toggle_arrow\"] {\r\n                    flex: none;\r\n                    display: inline-block;\r\n                    width: 18px;\r\n                    height: 18px;\r\n                    margin: 2px;\r\n                    margin-right: 6px;\r\n                    border-radius: 2px;\r\n                }\r\n\r\n                :host([leaf]) [part~=\"toggle_arrow\"] {\r\n                    visibility: hidden;\r\n                }\r\n\r\n                [part~=\"toggle_arrow\"]::after {\r\n                    display: inline-block;\r\n                    width: 18px;\r\n                    height: 18px;\r\n                    position: absolute;\r\n                    color: dimgray;\r\n                    text-align: center;\r\n                }\r\n\r\n                :host(:not([expanded])) [part~=\"toggle_arrow\"]::after {\r\n                    content: \"►\";\r\n                }\r\n\r\n                :host([expanded]) [part~=\"toggle_arrow\"]::after {\r\n                    content: \"▼\";\r\n                }\r\n\r\n                [part~=\"state\"] {\r\n                    flex: none;\r\n                }\r\n\r\n                [part~=\"container\"] {\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                }\r\n            </style>\r\n            <span part=\"content\">\r\n                <span part=\"toggle_arrow\"></span>\r\n                <slot name=\"label\"><span part=\"label\"></span></slot>\r\n            </span>\r\n            <div part=\"container\">\r\n                <slot></slot>\r\n            </div>\r\n        `);\r\n        this.items = [];\r\n        this.parent = null;\r\n        this.indent = 0;\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot?.querySelector<HTMLSlotElement>(\"slot:not([name])\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const items = slot.assignedElements()\r\n                    .filter(item => isTagElement(\"e-treeitem\", item)) as HTMLETreeItemElement[];\r\n                this.items = items;\r\n                this.items.forEach((item) => {\r\n                    item.parent = this;\r\n                    item.indent = this.indent + 1;\r\n                });\r\n            });\r\n        }\r\n\r\n        const content = this.shadowRoot!.querySelector(\"[part=content]\")!;\r\n        content.addEventListener(\"click\", () => {\r\n            this.toggle();\r\n        });\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (newValue !== oldValue) {\r\n            switch (name) {\r\n                case \"label\":\r\n                    if (oldValue !== newValue) {\r\n                        const labelPart = this.shadowRoot?.querySelector(\"[part~=label]\");\r\n                        if (labelPart) {\r\n                            labelPart.textContent = newValue;\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"icon\":\r\n                    if (oldValue !== newValue) {\r\n                        const iconPart = this.shadowRoot?.querySelector<HTMLElement>(\"[part~=icon]\");\r\n                        if (iconPart) {\r\n                            iconPart.dataset.value = newValue;\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"indent\":\r\n                    if (oldValue !== newValue) {\r\n                        this.style.setProperty(\"--tree-indent\", newValue);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public deepestVisibleChildItem(): HTMLETreeItemElement {\r\n        if (this.expanded && this.items.length > 0) {\r\n            let lastChildItem = this.items[this.items.length - 1];\r\n            return lastChildItem.deepestVisibleChildItem();\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public previousVisibleItem(): HTMLETreeItemElement {\r\n        if (this.parent) {\r\n            let indexOfThis = this.parent.items.indexOf(this);\r\n            if (indexOfThis > 0) {\r\n                let previousItem = this.parent.items[indexOfThis - 1];\r\n                return previousItem.deepestVisibleChildItem();\r\n            }\r\n            return isTagElement(\"e-treeitem\", this.parent) ? this.parent : this;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public nextVisibleItem(): HTMLETreeItemElement {\r\n        if (this.expanded && this.items.length > 0) {\r\n            return this.items[0];\r\n        }\r\n        let nearestItem = this.nearestParentItem();\r\n        if (nearestItem.parent) {\r\n            let indexOfNearest = nearestItem.parent.items.indexOf(nearestItem);\r\n            if (indexOfNearest < nearestItem.parent.items.length - 1) {\r\n                return nearestItem.parent.items[indexOfNearest + 1];\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public nearestParentItem(): HTMLETreeItemElement {\r\n        if (isTagElement(\"e-treeitem\", this.parent)) {\r\n            let indexOfThis = this.parent.items.indexOf(this);\r\n            if (indexOfThis === this.parent.items.length - 1) {\r\n                return this.parent.nearestParentItem();\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public toggle(): void {\r\n        this.expanded = !this.expanded;\r\n        this.dispatchEvent(new CustomEvent(\"e_toggle\", {bubbles: true}));\r\n    }\r\n\r\n    public trigger(): void {\r\n        this.dispatchEvent(new CustomEvent(\"e_trigger\", {bubbles: true}));\r\n    }\r\n\r\n    public findItem(predicate: (item: HTMLETreeItemElement) => boolean, subtree?: boolean): HTMLETreeItemElement | null {\r\n        let foundItem: HTMLETreeItemElement | null = null;\r\n        for (let item of this.items) {\r\n            if (predicate(item)) {\r\n                return item;\r\n            }\r\n            if (subtree && item.items) {\r\n                for (let subitem of item.items) {\r\n                    foundItem = subitem.findItem(predicate, subtree);\r\n                    if (foundItem) {\r\n                        return foundItem;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return foundItem;\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitem\": HTMLETreeItemElement,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_toggle\": Event,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_trigger\": Event,\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot, isTagElement } from \"../../HTMLElement\";\r\nimport { HTMLETreeItemElement } from \"./TreeItem\";\r\n\r\nexport { HTMLETreeElement };\r\nexport { HTMLETreeElementBase };\r\n\r\ninterface HTMLETreeElement extends HTMLElement {\r\n    name: string;\r\n    items: HTMLETreeItemElement[];\r\n    readonly activeItem: HTMLETreeItemElement | null;\r\n    readonly selectedItem: HTMLETreeItemElement | null;\r\n    findItem(predicate: (item: HTMLETreeItemElement) => boolean, subtree?: boolean): HTMLETreeItemElement | null;\r\n    reset(): void;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-tree\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"active\", type: \"boolean\"},\r\n    {name: \"name\", type: \"string\"}\r\n])\r\nclass HTMLETreeElementBase extends HTMLElement implements HTMLETreeElement {\r\n\r\n    public active!: boolean;\r\n    public name!: string;\r\n    \r\n    public items: HTMLETreeItemElement[];\r\n\r\n    private _activeItem: HTMLETreeItemElement | null;\r\n    private _selectedItem: HTMLETreeItemElement | null;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n                    position: relative;\r\n                    user-select: none;\r\n                }\r\n\r\n                [part~=\"container\"] {\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                }\r\n            </style>\r\n            <div part=\"container\">\r\n                <slot></slot>\r\n            </div>\r\n        `);\r\n        this.items = [];\r\n        this._activeItem = null;\r\n        this._selectedItem = null;\r\n    }\r\n\r\n    public get activeItem(): HTMLETreeItemElement | null {\r\n        return this._activeItem;\r\n    }\r\n\r\n    public get selectedItem(): HTMLETreeItemElement | null {\r\n        return this._selectedItem;\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n        \r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const items = slot.assignedElements()\r\n                    .filter(item => isTagElement(\"e-treeitem\", item)) as HTMLETreeItemElement[];\r\n                this.items = items;\r\n                items.forEach((item) => {\r\n                    item.parent = this;\r\n                    item.indent = 1;\r\n                });\r\n            });\r\n        }\r\n        \r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"ArrowLeft\":\r\n                    if (this.activeItem) {\r\n                        if (this.activeItem.expanded) {\r\n                            this.activeItem.toggle();\r\n                        }\r\n                        else {\r\n                            if (isTagElement(\"e-treeitem\", this.activeItem.parent)) {\r\n                                this.focusItem(this.activeItem.parent);\r\n                            }\r\n                        }\r\n                    }\r\n                    event.preventDefault();\r\n                    break;\r\n                case \"ArrowRight\":\r\n                    if (this.activeItem) {\r\n                        if (!this.activeItem.expanded) {\r\n                            this.activeItem.toggle();\r\n                        }\r\n                        else {\r\n                            if (this.activeItem.items.length > 0) {\r\n                                this.focusItem(this.activeItem.items[0]);\r\n                            }\r\n                        }\r\n                    }\r\n                    event.preventDefault();\r\n                    break;\r\n                case \"ArrowUp\":\r\n                    if (this.activeItem) {\r\n                        this.focusItem(this.activeItem.previousVisibleItem());\r\n                    }\r\n                    else if (this.items.length > 0) {\r\n                        this.focusItem(this.items[0]);\r\n                    }\r\n                    event.preventDefault();\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    if (this.activeItem) {\r\n                        this.focusItem(this.activeItem.nextVisibleItem());\r\n                    }\r\n                    else if (this.items.length > 0) {\r\n                        this.focusItem(this.items[this.items.length - 1]);\r\n                    }\r\n                    event.preventDefault();\r\n                    break;\r\n                case \"Home\":\r\n                    if (this.items.length > 0) {\r\n                        this.focusItem(this.items[0]);\r\n                    }\r\n                    event.preventDefault();\r\n                    break;\r\n                case \"End\":\r\n                    if (this.items.length > 0) {\r\n                        this.focusItem(this.items[this.items.length - 1].deepestVisibleChildItem());\r\n                    }\r\n                    event.preventDefault();\r\n                    break;\r\n                case \"Enter\":\r\n                    if (this.activeItem) {\r\n                        this.selectItem(this.activeItem);\r\n                        this.activeItem.trigger();\r\n                    }\r\n                    break;\r\n                case \"Escape\":\r\n                    this.active = false;\r\n                    this.reset();\r\n                    this.focus();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"click\", (event: MouseEvent) => {\r\n            const target = event.target as Element;\r\n            if (isTagElement(\"e-treeitem\", target)) {\r\n                this.selectItem(target);\r\n                target.trigger();\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusin\", (event: FocusEvent) => {\r\n            const target = event.target as Element;\r\n            if (!this.active) {\r\n                this.active = true;\r\n            }\r\n            const closestItem = target.closest(\"e-treeitem\");\r\n            if (closestItem && this.contains(closestItem)) {\r\n                this.focusItem(closestItem);\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            const relatedTarget = event.relatedTarget as Element;\r\n            if (!this.contains(relatedTarget)) {\r\n                this.active = false;\r\n                if (this.activeItem) {\r\n                    this.activeItem.active = false;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public focusItem(item: HTMLETreeItemElement) {\r\n        if (this.activeItem) {\r\n            this.activeItem.active = false;\r\n        }\r\n        this._activeItem = item;\r\n        this._activeItem.active = true;\r\n        item.focus();\r\n    }\r\n\r\n    public selectItem(item: HTMLETreeItemElement) {\r\n        if (this._selectedItem) {\r\n            this._selectedItem.selected = false;\r\n        }\r\n        this._selectedItem = item;\r\n        this._selectedItem.selected = true;\r\n    }\r\n\r\n    public reset(): void {\r\n        if (this.activeItem) {\r\n            this.activeItem.active = false;\r\n        }\r\n        if (this._selectedItem) {\r\n            this._selectedItem.selected = false;\r\n        }\r\n    }\r\n\r\n    public findItem(predicate: (item: HTMLETreeItemElement) => boolean, subtree?: boolean): HTMLETreeItemElement | null {\r\n        let foundItem: HTMLETreeItemElement | null = null;\r\n        for (let item of this.items) {\r\n            if (predicate(item)) {\r\n                return item;\r\n            }\r\n            if (subtree && item.items) {\r\n                for (let subitem of item.items) {\r\n                    foundItem = subitem.findItem(predicate, subtree);\r\n                    if (foundItem) {\r\n                        return foundItem;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return foundItem;\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tree\": HTMLETreeElement,\r\n    }\r\n}\r\n","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../../HTMLElement\";\r\nimport { forAllSubtreeElements } from \"../../Snippets\";\r\n\r\nexport { HTMLEDraggableElement };\r\nexport { HTMLEDraggableElementBase };\r\n\r\ninterface HTMLEDraggableElementConstructor {\r\n    readonly prototype: HTMLEDraggableElement;\r\n    new(): HTMLEDraggableElement;\r\n}\r\n\r\ninterface HTMLEDraggableElement extends HTMLElement {\r\n    selected: boolean;\r\n    dragged: boolean;\r\n    type: string;\r\n    dragovered: boolean;\r\n    data: object | null;\r\n\r\n    getReference(): HTMLEDraggableElement;\r\n    readonly referee: HTMLEDraggableElement | null;\r\n    readonly references: HTMLEDraggableElement[];\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-draggable\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"selected\", type: \"boolean\"},\r\n    {name: \"dragged\", type: \"boolean\"},\r\n    {name: \"dragovered\", type: \"boolean\"},\r\n    {name: \"disabled\", type: \"boolean\"},\r\n    {name: \"type\", type: \"string\"},\r\n    {name: \"data\", type: \"json\"}\r\n])\r\nclass HTMLEDraggableElementBase extends HTMLElement implements HTMLEDraggableElement {\r\n    \r\n    public selected!: boolean;\r\n    public dragovered!: boolean;\r\n    public dragged!: boolean;\r\n    public disabled!: boolean;\r\n\r\n    public type!: string;\r\n    public data!: object | null;\r\n\r\n    private _referee: HTMLEDraggableElementBase | null;\r\n    public readonly references: HTMLEDraggableElementBase[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: inline-block;\r\n                    padding: 3px 4px;\r\n                    cursor: pointer;\r\n                    white-space: nowrap;\r\n                    border-radius: 4px;\r\n                    border: 1px solid black;\r\n                    user-select: none;\r\n                }\r\n\r\n                :host([disabled]) {\r\n                    pointer-events: none;\r\n                    color: gray;\r\n                    border-color: gray;\r\n                }\r\n\r\n                :host([selected]:active) {\r\n                    cursor: grabbing;\r\n                }\r\n                \r\n                :host([selected]) {\r\n                    cursor: grab;\r\n                    font-weight: bold;\r\n                    outline: 1px auto black;\r\n                }\r\n\r\n                :host([dragovered]) {\r\n                    border-style: dotted;\r\n                }\r\n                \r\n                [part=\"container\"] {\r\n                    display: flex;\r\n                    align-items: center;\r\n                }\r\n            </style>\r\n            <div part=\"container\">\r\n                <slot>&nbsp;</slot>\r\n            </div>\r\n        `);\r\n        this.references = [];\r\n        this._referee = null;\r\n    }\r\n\r\n    public get referee(): HTMLEDraggableElementBase | null {\r\n        return this._referee;\r\n    }\r\n    \r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n        this.draggable = true;\r\n    }\r\n\r\n    public disconnectedCallback() {\r\n        if (this.referee) {\r\n            const thisRefIndex = this.referee.references.indexOf(this);\r\n            if (thisRefIndex > -1) {\r\n                this.referee.references.splice(thisRefIndex, 1);\r\n                const refereeId = this.referee.id;\r\n                if (refereeId) {\r\n                    this.referee.references.slice(thisRefIndex).forEach((reference, index) => {\r\n                        forAllSubtreeElements(reference, (element) => {\r\n                            if (element.id) {\r\n                                element.id = `${element.id}-${thisRefIndex + index + 1}`;\r\n                            }\r\n                        });\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public getReference(): HTMLEDraggableElementBase {\r\n        const reference = this.cloneNode(true) as HTMLEDraggableElementBase;\r\n        const referenceIdx = this.references.push(reference);\r\n        reference._referee = this;\r\n        if (this.id) {\r\n            forAllSubtreeElements(reference, (element) => {\r\n                if (element.id) {\r\n                    element.id = `${element.id}-${referenceIdx}`;\r\n                }\r\n            });\r\n        }\r\n        return reference;\r\n    }\r\n}\r\n\r\nvar HTMLEDraggableElement: HTMLEDraggableElementConstructor = HTMLEDraggableElementBase\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-draggable\": HTMLEDraggableElement,\r\n    }\r\n}","import { RegisterCustomHTMLElement, bindShadowRoot, isTagElement, GenerateAttributeAccessors } from \"../../HTMLElement\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\n\r\nexport { HTMLEDragzoneElement };\r\nexport { HTMLEDragzoneElementBase };\r\n\r\ninterface HTMLEDragzoneElement extends HTMLElement {\r\n    draggables: HTMLEDraggableElement[];\r\n    selectedDraggables: HTMLEDraggableElement[];\r\n    disabled: boolean;\r\n    selectDraggable(draggable: HTMLEDraggableElement): void;\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void;\r\n    clearSelection(): void;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-dragzone\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"disabled\", type: \"boolean\"},\r\n])\r\nclass HTMLEDragzoneElementBase extends HTMLElement implements HTMLEDragzoneElement {\r\n\r\n    public disabled!: boolean;\r\n\r\n    public draggables: HTMLEDraggableElement[];\r\n    public selectedDraggables: HTMLEDraggableElement[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n                }\r\n\r\n                :host([disabled]) {\r\n                    pointer-events: none;\r\n                }\r\n\r\n                [part~=\"container\"]:empty {\r\n                    display: none !important;\r\n                }\r\n\r\n                [part~=\"container\"] {\r\n                    position: relative;\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                    padding: 2px;\r\n                }\r\n\r\n                ::slotted(*:not(:only-child)) {\r\n                    margin-top: 2px;\r\n                    margin-bottom: 2px;\r\n                }\r\n            </style>\r\n            <div part=\"container\">\r\n                <slot></slot>\r\n            </div>\r\n        `);\r\n        this.draggables = [];\r\n        this.selectedDraggables = [];\r\n    }\r\n\r\n    public selectDraggable(draggable: HTMLEDraggableElement): void {\r\n        draggable.selected = true;\r\n        if (!this.selectedDraggables.includes(draggable)) {\r\n            this.selectedDraggables.push(draggable);\r\n        }\r\n    }\r\n\r\n    public unselectDraggable(draggable: HTMLEDraggableElement): void {\r\n        let index = this.selectedDraggables.indexOf(draggable);\r\n        if (index > -1) {\r\n            draggable.selected = false;\r\n            this.selectedDraggables.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    public clearSelection(): void {\r\n        this.selectedDraggables.forEach((draggable) => {\r\n            draggable.selected = false;\r\n        });\r\n        this.selectedDraggables = [];\r\n    }\r\n    \r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const draggables = slot.assignedElements().filter(\r\n                    elem => elem instanceof HTMLEDraggableElement\r\n                ) as HTMLEDraggableElement[];\r\n                this.draggables = draggables;\r\n                this.draggables.forEach((draggable) => {\r\n                    draggable.draggable = true;\r\n                });\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Escape\":\r\n                    this.clearSelection();\r\n                    this.focus();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragstart\", (event: DragEvent) => {\r\n            let target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                this.selectedDraggables.forEach((thisSelectedDraggable) => {\r\n                    thisSelectedDraggable.dragged = true;\r\n                });\r\n                let dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    dataTransfer.effectAllowed = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", this.id);\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"dragend\", (event: DragEvent) => {\r\n            let target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                let thisDraggedDraggables = this.draggables.filter(draggable => draggable.dragged);\r\n                thisDraggedDraggables.forEach((thisDraggedDraggable) => {\r\n                    thisDraggedDraggable.dragged = false;\r\n                });\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            let relatedTarget = event.relatedTarget as any;\r\n            if (!this.contains(relatedTarget)) {\r\n                this.clearSelection();\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            if (event.button === 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        if (!target.selected) {\r\n                            this.clearSelection();\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                    else if (event.ctrlKey) {\r\n                        (!target.selected) ?\r\n                            this.selectDraggable(target) :\r\n                            this.unselectDraggable(target);\r\n                    }\r\n                    else if (event.shiftKey) {\r\n                        if (this.selectedDraggables.length > 0) {\r\n                            let targetIndex = this.draggables.indexOf(target);\r\n                            let firstIndex = this.draggables.indexOf(this.selectedDraggables[0]);\r\n                            let direction = Math.sign(targetIndex - firstIndex);\r\n                            let fromIndex = (direction > 0) ? 0 : this.draggables.length - 1;\r\n                            let toIndex = (direction > 0) ? this.draggables.length - 1 : 0;\r\n                            let startRangeIndex = (direction > 0) ? firstIndex : targetIndex;\r\n                            let endRangeIndex = (direction > 0) ? targetIndex : firstIndex;\r\n                            for (let index = fromIndex; index !== (toIndex + direction); index += direction) {\r\n                                (index >= startRangeIndex && index <= endRangeIndex) ? \r\n                                    this.selectDraggable(this.draggables[index]) :\r\n                                    this.unselectDraggable(this.draggables[index]);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.clearSelection();\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mouseup\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            if (event.button === 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        this.draggables.forEach((thisDraggable) => {\r\n                            if (thisDraggable !== target) {\r\n                                this.unselectDraggable(thisDraggable);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dragzone\": HTMLEDragzoneElement,\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot, isTagElement } from \"../../HTMLElement\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\nimport { HTMLEDragzoneElement } from \"./Dragzone\";\r\n\r\nexport { EDataChangeEvent };\r\nexport { HTMLEDropzoneElement };\r\nexport { HTMLEDropzoneElementBase };\r\nexport { DropzoneDataBase };\r\nexport { DropzoneData };\r\n\r\ninterface HTMLEDropzoneElement extends HTMLElement {\r\n    selectedDraggables: HTMLEDraggableElement[]\r\n    draggables: HTMLEDraggableElement[];\r\n    dragovered: DropzoneDragoveredType | null;\r\n    name: string;\r\n    type: string;\r\n    multiple: boolean;\r\n    disabled: boolean;\r\n    placeholder: string;\r\n    droptest: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => void) | null;\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): void;\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean): void;\r\n    selectDraggable(draggable: HTMLEDraggableElement): void;\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void;\r\n    clearSelection(): void;\r\n}\r\n\r\ntype DropzoneDragoveredType = \"self\" | \"draggable\" | \"appendarea\";\r\n\r\ntype EDataChangeEvent = CustomEvent<{\r\n    action: \"insert\" | \"remove\";\r\n    draggables: HTMLEDraggableElement[];\r\n    position: number;\r\n}>;\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-dropzone\",\r\n    observedAttributes: [\"placeholder\", \"label\"]\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"dragovered\", type: \"string\"},\r\n    {name: \"placeholder\", type: \"string\"},\r\n    {name: \"disabled\", type: \"boolean\"},\r\n    {name: \"multiple\", type: \"boolean\"},\r\n    {name: \"input\", type: \"string\"},\r\n    {name: \"label\", type: \"string\"},\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"type\", type: \"string\"},\r\n])\r\nclass HTMLEDropzoneElementBase extends HTMLElement implements HTMLEDropzoneElement {\r\n    \r\n    public dragovered!: DropzoneDragoveredType | null;\r\n    public placeholder!: string;\r\n    public input!: string;\r\n    public multiple!: boolean;\r\n    public disabled!: boolean;\r\n    public name!: string;\r\n    public type!: string;\r\n\r\n    public droptest!: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => boolean) | null;\r\n    public value: any;\r\n\r\n    public draggables: HTMLEDraggableElement[];\r\n    public selectedDraggables: HTMLEDraggableElement[];\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        bindShadowRoot(this, /*html*/`\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n                    border: 1px dashed gray;\r\n                }\r\n\r\n                :host([disabled]) {\r\n                    pointer-events: none;\r\n                    opacity: 0.3;\r\n                }\r\n\r\n                :host(:empty) [part~=\"container\"] {\r\n                    display: none !important;\r\n                }\r\n\r\n                [part~=\"container\"] {\r\n                    position: relative;\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                    padding: 2px;\r\n                }\r\n\r\n                ::slotted(*:not(:only-child)) {\r\n                    margin-top: 2px;\r\n                    margin-bottom: 2px;\r\n                }\r\n\r\n                :host(:not([multiple]):not(:empty)) [part=\"appendarea\"],\r\n                :host(:not(:empty):not([dragovered])) [part=\"appendarea\"] {\r\n                    display: none !important;\r\n                }\r\n\r\n                [part=\"appendarea\"] {\r\n                    display: block;\r\n                    margin: 2px;\r\n                    border-radius: 4px;\r\n                    border: 1px dotted black;\r\n                }\r\n\r\n                :host(:not([dragovered=\"appendarea\"])) [part=\"appendarea\"] {\r\n                    border-color: transparent;\r\n                }\r\n                \r\n                [part=\"placeholder\"] {\r\n                    display: inline-block;\r\n                    color: grey;\r\n                    pointer-events: none;\r\n                    user-select: none;\r\n                }\r\n            </style>\r\n            <div part=\"container\">\r\n                <slot></slot>\r\n            </div>\r\n            <div part=\"appendarea\">\r\n                <span part=\"placeholder\">&nbsp;</span>\r\n            </div>\r\n            `\r\n        );\r\n        this.draggables = [];\r\n        this.selectedDraggables = [];\r\n        this.droptest = null;\r\n    }\r\n\r\n    public selectDraggable(draggable: HTMLEDraggableElement): void {\r\n        draggable.selected = true;\r\n        if (!this.selectedDraggables.includes(draggable)) {\r\n            this.selectedDraggables.push(draggable);\r\n        }\r\n    }\r\n\r\n    public unselectDraggable(draggable: HTMLEDraggableElement): void {\r\n        let index = this.selectedDraggables.indexOf(draggable);\r\n        if (index > -1) {\r\n            draggable.selected = false;\r\n            this.selectedDraggables.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    public clearSelection(): void {\r\n        this.selectedDraggables.forEach((draggable) => {\r\n            draggable.selected = false;\r\n        });\r\n        this.selectedDraggables = [];\r\n    }\r\n    \r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const draggables = slot.assignedElements().filter(\r\n                    elem => elem instanceof HTMLEDraggableElement\r\n                ) as HTMLEDraggableElement[];\r\n                this.draggables = draggables;\r\n                this.draggables.forEach((draggable) => {\r\n                    draggable.draggable = false;\r\n                });\r\n            });\r\n        }\r\n\r\n        const appendAreaPart = this.shadowRoot!.querySelector<HTMLDivElement>(\"[part='appendarea']\");\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Delete\":\r\n                    if (this == event.target) {\r\n                        this.removeDraggables();\r\n                    }\r\n                    else {\r\n                        this.removeDraggables(draggable => draggable.selected);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"Escape\":\r\n                    this.clearSelection();\r\n                    this.focus();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            let relatedTarget = event.relatedTarget as any;\r\n            if (!this.contains(relatedTarget)) {\r\n                this.clearSelection();\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            if (event.button === 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        if (!target.selected) {\r\n                            this.clearSelection();\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                    else if (event.ctrlKey) {\r\n                        (!target.selected) ?\r\n                            this.selectDraggable(target) :\r\n                            this.unselectDraggable(target);\r\n                    }\r\n                    else if (event.shiftKey) {\r\n                        if (this.selectedDraggables.length > 0) {\r\n                            let targetIndex = this.draggables.indexOf(target);\r\n                            let firstIndex = this.draggables.indexOf(this.selectedDraggables[0]);\r\n                            let direction = Math.sign(targetIndex - firstIndex);\r\n                            let fromIndex = (direction > 0) ? 0 : this.draggables.length - 1;\r\n                            let toIndex = (direction > 0) ? this.draggables.length - 1 : 0;\r\n                            let startRangeIndex = (direction > 0) ? firstIndex : targetIndex;\r\n                            let endRangeIndex = (direction > 0) ? targetIndex : firstIndex;\r\n                            for (let index = fromIndex; index !== (toIndex + direction); index += direction) {\r\n                                (index >= startRangeIndex && index <= endRangeIndex) ? \r\n                                    this.selectDraggable(this.draggables[index]) :\r\n                                    this.unselectDraggable(this.draggables[index]);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.clearSelection();\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mouseup\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            if (event.button === 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        this.draggables.forEach((thisDraggable) => {\r\n                            if (thisDraggable !== target) {\r\n                                this.unselectDraggable(thisDraggable);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragover\", (event: DragEvent) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragover\", (event) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragenter\", (event: DragEvent) => {\r\n            let target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                target.dragovered = true;\r\n                this.dragovered = \"draggable\";\r\n            }\r\n            else {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragenter\", (event) => {\r\n            let target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"appendarea\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event: DragEvent) => {\r\n            let relatedTarget = event.relatedTarget as any;\r\n            let target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                if (target == this) {\r\n                    if (appendAreaPart) {\r\n                        this.dragovered = \"self\";\r\n                    }\r\n                    if (!this.draggables.includes(relatedTarget)) {\r\n                        this.dragovered = null;\r\n                    }\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                }\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragleave\", (event) => {\r\n            let target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n        \r\n        this.addEventListener(\"drop\", (event) => {\r\n            let target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                let dropIndex = this.draggables.length;\r\n                if (target == this) {\r\n                    this.dragovered = null;\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                    dropIndex = this.draggables.indexOf(target);\r\n                }\r\n\r\n                let dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    let dragzoneId = dataTransfer.getData(\"text/plain\");\r\n                    let dragzone = document.getElementById(dragzoneId) as HTMLEDragzoneElement;\r\n                    if (dragzone) {\r\n                        let selectedDraggables = dragzone.selectedDraggables;\r\n                        if (selectedDraggables) {\r\n                            selectedDraggables.forEach((selectedDraggable) => {\r\n                                selectedDraggable.dragged = false;\r\n                            });\r\n                            dragzone.clearSelection();\r\n                            this.addDraggables(selectedDraggables, dropIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.dragovered = null;\r\n            event.preventDefault();\r\n        });\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (newValue !== oldValue) {\r\n            switch (name) {\r\n                case \"placeholder\":\r\n                    if (oldValue !== newValue) {\r\n                        const placeholderPart = this.shadowRoot?.querySelector(\"[part~=placeholder]\");\r\n                        if (placeholderPart) {\r\n                            placeholderPart.textContent = newValue;\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public addDraggables(draggables: HTMLEDraggableElement[], position: number): HTMLEDraggableElement[] | null {\r\n        if (draggables.length > 0) {\r\n            let dataTransferSuccess = true;\r\n            if (this.droptest) {\r\n                dataTransferSuccess = this.droptest(this, draggables);\r\n            }\r\n            \r\n            let newDraggables: HTMLEDraggableElement[] = [];\r\n            let insertionPosition = -1;\r\n            if (dataTransferSuccess) {\r\n                if (this.multiple) {\r\n                    draggables.forEach((draggable) => {\r\n                        let newDraggable = draggable.getReference();\r\n                        if (position > -1 && position < this.draggables.length) {\r\n                            this.draggables[position].insertAdjacentElement(\"beforebegin\", newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? position : insertionPosition;\r\n                        }\r\n                        else {\r\n                            this.appendChild(newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? this.draggables.length - 1 : insertionPosition;\r\n                        }\r\n                        newDraggables.push(newDraggable);\r\n                    });\r\n                }\r\n                else {\r\n                    let newDraggable = draggables[0].getReference();\r\n                    if (this.draggables.length > 0) {\r\n                        this.replaceChild(newDraggable, this.draggables[0]);\r\n                    }\r\n                    else {\r\n                        this.appendChild(newDraggable);\r\n                    }\r\n                    newDraggables.push(newDraggable);\r\n                    insertionPosition = 0;\r\n                }\r\n            }\r\n            \r\n            const slot = this.shadowRoot?.querySelector(\"slot\");\r\n            if (slot) {\r\n                slot.addEventListener(\"slotchange\", () => {\r\n                    this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                        bubbles: true,\r\n                        detail: {\r\n                            action: \"insert\",\r\n                            draggables: newDraggables,\r\n                            position: insertionPosition\r\n                        }\r\n                    }));\r\n                }, {once: true});\r\n            }\r\n            return newDraggables;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean = () => true) {\r\n        let toRemove = this.draggables.filter(\r\n            (value: HTMLEDraggableElement, index: number) => {\r\n                return predicate(value, index);\r\n            }\r\n        );\r\n        let atPosition = this.draggables.indexOf(toRemove[0]);\r\n        toRemove.forEach((draggable) => {\r\n            draggable.remove(); \r\n        });\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                    bubbles: true,\r\n                    detail: {\r\n                        action: \"remove\",\r\n                        draggables: toRemove,\r\n                        position: atPosition\r\n                    }\r\n                }));\r\n            }, {once: true});\r\n        }\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dropzone\": HTMLEDropzoneElement,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_datachange\": EDataChangeEvent,\r\n    }\r\n}\r\n\r\ninterface DropzoneData {\r\n    getData(): object | null;\r\n}\r\n\r\ninterface DropzoneDataConstructor {\r\n    readonly prototype: DropzoneData;\r\n    new(dropzone: HTMLEDropzoneElement): DropzoneData;\r\n}\r\n\r\nclass DropzoneDataBase {\r\n    private _dropzone: HTMLEDropzoneElement;\r\n\r\n    constructor(dropzone: HTMLEDropzoneElement) {\r\n        this._dropzone = dropzone;\r\n    }\r\n\r\n    public getData(): object | null {\r\n        const dropzoneData = \r\n            this._dropzone.multiple ? this._dropzone.draggables.map(draggable => draggable.data) :\r\n            this._dropzone.draggables.length > 0 ? this._dropzone.draggables[0].data : null;\r\n\r\n        const childDropzones = Array.from(this._dropzone.querySelectorAll(\"e-dropzone\")).filter(\r\n            dropzone => dropzone.parentElement!.closest(\"e-dropzone\") === this._dropzone\r\n        );\r\n\r\n        childDropzones.forEach((childDropzone) => {\r\n            const childDropzoneData = new DropzoneDataBase(childDropzone).getData();\r\n            Object.assign(dropzoneData, {\r\n                ...childDropzoneData\r\n            });\r\n        });\r\n\r\n        return dropzoneData;\r\n    }\r\n}\r\n\r\nvar DropzoneData: DropzoneDataConstructor = DropzoneDataBase;","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot, isTagElement } from \"../../HTMLElement\";\r\n\r\nexport { HTMLEDialogElement };\r\nexport { HTMLEDialogElementBase };\r\n\r\ntype EDialogElementType = \"confirm\" | \"alert\";\r\n\r\ninterface HTMLEDialogElement extends HTMLElement {\r\n    name: string;\r\n    type: EDialogElementType;\r\n    open(): void;\r\n    close(): void;\r\n    cancel(): void;\r\n    confirm(): void;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-dialog\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"type\", type: \"string\"},\r\n])\r\nclass HTMLEDialogElementBase extends HTMLElement implements HTMLEDialogElement {\r\n\r\n    public name!: string;\r\n    public type!: EDialogElementType;\r\n\r\n    private _closeButton: HTMLButtonElement;\r\n    private _cancelButton: HTMLButtonElement;\r\n    private _confirmButton: HTMLButtonElement;\r\n    private _okButton: HTMLButtonElement;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: inline-block;\r\n\r\n                    padding: 6px;\r\n                    background-color: white;\r\n\r\n                    -webkit-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                    -moz-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                    box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                }\r\n\r\n                button {\r\n                    cursor: pointer;\r\n                }\r\n\r\n                [part~=\"actions\"] {\r\n                    display: flex;\r\n                    flex-direction: row;\r\n                    justify-content: flex-end;\r\n                }\r\n\r\n                [part~=\"header\"] {\r\n                    display: flex;\r\n                    flex-direction: row;\r\n                    justify-content: flex-end;\r\n                }\r\n\r\n                [part~=\"button\"]:not(:first-child) {\r\n                    margin-left: 4px;\r\n                }\r\n\r\n                :host([type=\"confirm\"]) [part~=\"ok-button\"] {\r\n                    display: none !important;\r\n                }\r\n\r\n                :host([type=\"alert\"]) [part~=\"cancel-button\"],\r\n                :host([type=\"alert\"]) [part~=\"confirm-button\"] {\r\n                    display: none !important;\r\n                }\r\n            </style>\r\n            <div part=\"header\">\r\n                <button type=\"button\" tabindex=\"0\" part=\"button close-button\">x</button>\r\n            </div>\r\n            <hr part=\"separator\"/>\r\n            <div part=\"body\">\r\n                <slot></slot>\r\n            </div>\r\n            <hr part=\"separator\"/>\r\n            <div part=\"actions\">\r\n                <button type=\"button\" tabindex=\"0\" part=\"button cancel-button\">Cancel</button>\r\n                <button type=\"button\" tabindex=\"0\" part=\"button confirm-button\">Confirm</button>\r\n                <button type=\"button\" tabindex=\"0\" part=\"button ok-button\">OK</button>\r\n            </div>\r\n        `);\r\n\r\n        this._closeButton = this.shadowRoot!.querySelector(\"[part~='close-button']\")!;\r\n        this._cancelButton = this.shadowRoot!.querySelector(\"[part~='cancel-button']\")!;\r\n        this._confirmButton = this.shadowRoot!.querySelector(\"[part~='confirm-button']\")!;\r\n        this._okButton = this.shadowRoot!.querySelector(\"[part~='ok-button']\")!;\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        this.shadowRoot!.addEventListener(\"mousedown\", (event) => {\r\n            let target = event.target as Element;\r\n            if (target === this._closeButton || target === this._cancelButton) {\r\n                this.cancel();\r\n            }\r\n            else if (target === this._confirmButton || target === this._okButton) {\r\n                this.confirm();\r\n            }\r\n        });\r\n    }\r\n\r\n    public open(): void {\r\n        this.dispatchEvent(new CustomEvent(\"e_open\", {bubbles: true}));\r\n    }\r\n\r\n    public close(): void {\r\n        this.dispatchEvent(new CustomEvent(\"e_close\", {bubbles: true}));\r\n    }\r\n\r\n    public cancel(): void {\r\n        this.dispatchEvent(new CustomEvent(\"e_cancel\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n\r\n    public confirm(): void {\r\n        this.dispatchEvent(new CustomEvent(\"e_confirm\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dialog\": HTMLEDialogElement,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_open\": Event,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_close\": Event,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_cancel\": Event,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_confirm\": Event,\r\n    }\r\n}","import { isTagElement } from \"../HTMLElement\";\r\n\r\nexport { FormState };\r\nexport { getFormState };\r\nexport { setFormState };\r\n\r\ninterface FormState {\r\n    [name: string]: {\r\n        value: string | number | boolean | null;\r\n        _control?: string;\r\n    }\r\n};\r\n\r\nconst getFormState = (form: HTMLFormElement) => {\r\n    const elements = Array.from(form.elements);\r\n    const state: FormState = {};\r\n    elements.forEach((element) => {\r\n        if (isTagElement(\"input\", element)) {\r\n            if (element.type === \"radio\") {\r\n                if (typeof state[element.name] === \"undefined\") {\r\n                    state[element.name] = {\r\n                        value: null,\r\n                        _control: element.type\r\n                    };\r\n                }\r\n                if (element.checked) {\r\n                    state[element.name] = {\r\n                        value: element.value,\r\n                        _control: element.type\r\n                    };\r\n                }\r\n            }\r\n            else if (element.type === \"checkbox\") {\r\n                state[element.name] = {\r\n                    value: element.checked,\r\n                    _control: element.type\r\n                };\r\n            }\r\n            else if (element.type === \"number\") {\r\n                let floatValue = parseFloat(element.value);\r\n                state[element.name] = {\r\n                    value: !isNaN(floatValue) ? floatValue : null,\r\n                    _control: element.type\r\n                };\r\n            }\r\n            else if (element.type === \"file\") {\r\n                let files = element.files;\r\n                if (files !== null) {\r\n                    state[element.name] = {\r\n                        value: files[0].name,\r\n                        _control: element.type\r\n                    };\r\n                }\r\n            }\r\n            else {\r\n                state[element.name] = {\r\n                    value: (element.value !== \"\") ? element.value : null,\r\n                    _control: element.type\r\n                };\r\n            }\r\n        }\r\n        else if (isTagElement(\"select\", element) || isTagElement(\"textarea\", element)) {\r\n            state[element.name] = {\r\n                value: (element.value !== \"\") ? element.value : null,\r\n                _control: element.type\r\n            };\r\n        }\r\n    });\r\n\r\n    return state;\r\n}\r\n\r\nconst setFormState = (form: HTMLFormElement, state: FormState) => {\r\n    const elements = Array.from(form.elements);\r\n    const names = Object.keys(state);\r\n    names.forEach((name) => {\r\n        let namedElements = elements.filter((element) => (element as any).name === name);\r\n        namedElements.forEach((element) => {\r\n            let stateValue = state[name].value;\r\n            if (isTagElement(\"input\", element)) {\r\n                if (element.type === \"radio\") {\r\n                    element.checked = (stateValue !== null && element.value === stateValue.toString());\r\n                }\r\n                else if (element.type === \"checkbox\") {\r\n                    element.checked = !!stateValue;\r\n                }\r\n                else if (element.type === \"number\") {\r\n                    element.value = (stateValue !== null) ? stateValue.toString() : \"\";\r\n                }\r\n                else {\r\n                    element.value = (stateValue !== null) ? stateValue.toString() : \"\";\r\n                }\r\n            }\r\n            else if (isTagElement(\"select\", element) || isTagElement(\"textarea\", element)) {\r\n                element.value = (stateValue !== null) ? stateValue.toString() : \"\";\r\n            }\r\n        });\r\n    });\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../HTMLElement\";\r\n\r\nexport { HTMLEHeightSashElement };\r\nexport { HTMLEHeightSashElementBase };\r\n\r\ntype EHeightSashDirection = \"top\" | \"bottom\";\r\n\r\ninterface HTMLEHeightSashElement extends HTMLElement {\r\n    controls: string;\r\n    growdir: EHeightSashDirection;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-hsash\",\r\n    observedAttributes: [\"controls\"]\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"controls\", type: \"string\"},\r\n    {name: \"growdir\", type: \"string\"},\r\n])\r\nclass HTMLEHeightSashElementBase extends HTMLElement implements HTMLEHeightSashElement {\r\n\r\n    public controls!: string;\r\n    public growdir!: EHeightSashDirection;\r\n\r\n    private _target: HTMLElement | null;\r\n    private _targetStyle: CSSStyleDeclaration | null;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n                    z-index: 1;\r\n\r\n                    height: 4px;\r\n                    margin-top: -2px;\r\n                    margin-bottom: -2px;\r\n                    background-color: rgb(0, 128, 255);\r\n                    cursor: ns-resize;\r\n\r\n                    transition-property: opacity;\r\n                    transition-delay: 0.2s;\r\n                    transition-duration: 0.2s;\r\n                    transition-timing-function: ease-out;\r\n                    opacity: 0;\r\n                }\r\n\r\n                :host(:active),\r\n                :host(:hover) {\r\n                    opacity: 1;\r\n                }\r\n            </style>\r\n        `);\r\n        this._target = null;\r\n        this._targetStyle = null;\r\n    }\r\n\r\n    public connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        let onPointerMove = (event: PointerEvent) => {\r\n            if (this._target && this._targetStyle) {\r\n                let height = parseFloat(this._targetStyle.getPropertyValue(\"height\"));\r\n                let newHeight = Math.trunc(height + ((this.growdir === \"top\") ? -1 : 1) * event.movementY);\r\n                this._target.style.setProperty(\"height\", `${newHeight}px`);\r\n                this.dispatchEvent(new CustomEvent(\"e_resize\"));\r\n            }\r\n        };\r\n\r\n        this.addEventListener(\"pointerdown\", (event: PointerEvent) => {\r\n            const target = document.getElementById(this.controls);\r\n            if (target && this._target !== target) {\r\n                this._target = target;\r\n                this._targetStyle = window.getComputedStyle(target);\r\n            }\r\n            this.setPointerCapture(event.pointerId);\r\n            this.addEventListener(\"pointermove\", onPointerMove);\r\n            this.addEventListener(\"pointerup\", (event) => {\r\n                this.removeEventListener(\"pointermove\", onPointerMove);\r\n                this.releasePointerCapture(event.pointerId);\r\n            });\r\n        });\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (newValue !== oldValue) {\r\n            switch (name) {\r\n                case \"controls\":\r\n                    if (oldValue !== newValue) {\r\n                        const target = document.getElementById(this.controls);\r\n                        if (target) {\r\n                            this._target = target;\r\n                            this._targetStyle = window.getComputedStyle(target);\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-hsash\": HTMLEHeightSashElement,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_resize\": CustomEvent,\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors } from \"../HTMLElement\";\r\n\r\nexport { HTMLEImportElement };\r\nexport { HTMLEImportElementBase };\r\n\r\ninterface HTMLEImportElement extends HTMLElement {\r\n    src: string;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-import\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"src\", type: \"string\"}\r\n])\r\nclass HTMLEImportElementBase extends HTMLElement {\r\n\r\n    public src!: string;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n    \r\n    public connectedCallback(): void {\r\n        const importRequest = async (src: string) => {\r\n            this.outerHTML = await fetch(src).then((response: Response) => {\r\n                if (response.ok) {\r\n                    return response.text();\r\n                }\r\n                else {\r\n                    throw new Error(response.statusText);\r\n                }\r\n            });\r\n            this.dispatchEvent(new CustomEvent(\"e_load\"));\r\n        }\r\n        if (this.src) {\r\n            importRequest(this.src);\r\n        }\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-import\": HTMLEImportElement,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_load\": CustomEvent\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../HTMLElement\";\r\n\r\nexport { HTMLELoaderElement };\r\nexport { HTMLELoaderElementBase };\r\n\r\ntype LoaderType = \"bar\" | \"circle\";\r\n\r\ninterface HTMLELoaderElement extends HTMLElement {\r\n    type: LoaderType;\r\n    promise: Promise<any> | null;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-loader\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"type\", type: \"string\"}\r\n])\r\nclass HTMLELoaderElementBase extends HTMLElement implements HTMLELoaderElement {\r\n\r\n    public type!: LoaderType;\r\n    private _promise: Promise<any> | null;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: inline-block;\r\n                }\r\n                \r\n                :host([type=\"bar\"]) {\r\n                    display: inline-block;\r\n                    width: 64px;\r\n                }\r\n\r\n                :host([type]:not([type=\"circle\"])) [part~=\"circle\"] {\r\n                    display: none !important;\r\n                }\r\n                \r\n                :host(:not([type=\"bar\"])) [part~=\"bar\"] {\r\n                    display: none !important;\r\n                }\r\n\r\n                [part~=\"circle\"] {\r\n                    position: relative;\r\n                    width: 12px;\r\n                    height: 12px;\r\n                    border-top: 4px solid var(--loader-color, rgb(0, 128, 255));\r\n                    border-right: 4px solid var(--loader-color, rgb(0, 128, 255));\r\n                    border-left: 4px solid transparent;\r\n                    border-bottom: 4px solid transparent;\r\n                    border-radius: 50%;\r\n                    animation-duration: 1s;\r\n                    animation-name: circle;\r\n                    animation-timing-function: linear;\r\n                    animation-iteration-count: infinite;\r\n                }\r\n\r\n                @keyframes circle {\r\n                    0% {\r\n                        transform: rotate(0);\r\n                    }\r\n                    100% {\r\n                        transform: rotate(360deg);\r\n                    }\r\n                }\r\n\r\n                [part~=\"bar\"] {\r\n                    display: block;\r\n                    position: relative;\r\n                    overflow: hidden;\r\n                }\r\n\r\n                [part~=\"slider\"] {\r\n                    position: relative;\r\n                    display: flex;\r\n                    will-change: transform;\r\n                    animation-duration: 1s;\r\n                    animation-name: slider;\r\n                    animation-timing-function: linear;\r\n                    animation-iteration-count: infinite;\r\n                }\r\n\r\n                [part~=\"cursor\"] {\r\n                    position: relative;\r\n                    display: inline-block;\r\n                    width: 32px;\r\n                    height: 4px;\r\n                    background-color: var(--loader-color, rgb(0, 128, 255));\r\n                    border-radius: 4px;\r\n\r\n                    will-change: transform;\r\n                    animation-duration: 1s;\r\n                    animation-name: cursor;\r\n                    animation-timing-function: linear;\r\n                    animation-iteration-count: infinite;\r\n                }\r\n\r\n                @keyframes slider {\r\n                    0% {\r\n                        transform: translateX(0);\r\n                    }\r\n                    100% {\r\n                        transform: translateX(100%);\r\n                    }\r\n                }\r\n\r\n                @keyframes cursor {\r\n                    0% {\r\n                        transform: translateX(-100%);\r\n                    }\r\n                    100% {\r\n                        transform: translateX(100%);\r\n                    }\r\n                }\r\n            </style>\r\n            <div part=\"bar\">\r\n                <div part=\"slider\">\r\n                    <div part=\"cursor\"></div>\r\n                </div>\r\n            </div>\r\n            <div part=\"circle\"></div>\r\n        `);\r\n        this._promise = null;\r\n    }\r\n\r\n    public set promise(promise: Promise<any> | null) {\r\n        if (promise) {\r\n            promise.finally(() => {\r\n                this.remove();\r\n            });\r\n        }\r\n        this._promise = promise;\r\n    }\r\n\r\n    public get promise(): Promise<any> | null {\r\n        return this._promise;\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-loader\": HTMLELoaderElement,\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../HTMLElement\";\r\n\r\nexport { PaletteElement };\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: 'e-palette'\r\n})\r\n@GenerateAttributeAccessors([{name: 'colors', type: 'json'}])\r\nclass PaletteElement extends HTMLElement {\r\n\r\n    public colors!: Array<string>;\r\n\r\n    constructor() {\r\n        super();\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n                    content: contains;\r\n                }\r\n\r\n               :host #container {\r\n                    display: grid;\r\n                    grid-template-cols: repeat(5, 1fr);\r\n                    grid-auto-rows: 16px;\r\n                }\r\n            </style>\r\n            <div id=\"container\">\r\n            </div>\r\n        `);\r\n    }\r\n\r\n    public connectedCallback() {\r\n                \r\n        const colors = this.colors;\r\n        if (colors.length > 0) {\r\n            this.shadowRoot!.querySelector('#container')!.append(\r\n                ...colors.map((color: string) => {\r\n                    const div = document.createElement('div');\r\n                    div.setAttribute('style', `background-color: ${color}`);                    \r\n                    return div;\r\n                })\r\n            );\r\n        }\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../HTMLElement\";\r\n\r\nexport { HTMLEWidthSashElement };\r\nexport { HTMLEWidthSashElementBase };\r\n\r\ntype EWidthSashDirection = \"left\" | \"right\";\r\n\r\ninterface HTMLEWidthSashElement extends HTMLElement {\r\n    controls: string;\r\n    growdir: EWidthSashDirection;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-wsash\",\r\n    observedAttributes: [\"controls\"]\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"controls\", type: \"string\"},\r\n    {name: \"growdir\", type: \"string\"},\r\n])\r\nclass HTMLEWidthSashElementBase extends HTMLElement implements HTMLEWidthSashElement {\r\n\r\n    public controls!: string;\r\n    public growdir!: EWidthSashDirection;\r\n\r\n    private _target: HTMLElement | null;\r\n    private _targetStyle: CSSStyleDeclaration | null;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n                    z-index: 1;\r\n\r\n                    width: 4px;\r\n                    margin-left: -2px;\r\n                    margin-right: -2px;\r\n                    background-color: rgb(0, 128, 255);\r\n                    cursor: ew-resize;\r\n\r\n                    transition-property: opacity;\r\n                    transition-delay: 0.2s;\r\n                    transition-duration: 0.2s;\r\n                    transition-timing-function: ease-out;\r\n                    opacity: 0;\r\n                }\r\n\r\n                :host(:active),\r\n                :host(:hover) {\r\n                    opacity: 1;\r\n                }\r\n            </style>\r\n        `);\r\n        this._target = null;\r\n        this._targetStyle = null;\r\n    }\r\n\r\n    public connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        let onPointerMove = (event: PointerEvent) => {\r\n            if (this._target && this._targetStyle) {\r\n                let width = parseFloat(this._targetStyle.getPropertyValue(\"width\"));\r\n                let newWidth = Math.trunc(width + ((this.growdir === \"left\") ? -1 : 1) * event.movementX);\r\n                this._target.style.setProperty(\"width\", `${newWidth}px`);\r\n                this.dispatchEvent(new CustomEvent(\"e_resize\"));\r\n            }\r\n        };\r\n\r\n        this.addEventListener(\"pointerdown\", (event: PointerEvent) => {\r\n            const target = document.getElementById(this.controls);\r\n            if (target && this._target !== target) {\r\n                this._target = target;\r\n                this._targetStyle = window.getComputedStyle(target);\r\n            }\r\n            this.setPointerCapture(event.pointerId);\r\n            this.addEventListener(\"pointermove\", onPointerMove);\r\n            this.addEventListener(\"pointerup\", () => {\r\n                this.removeEventListener(\"pointermove\", onPointerMove);\r\n                this.releasePointerCapture(event.pointerId);\r\n            });\r\n        });\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (newValue !== oldValue) {\r\n            switch (name) {\r\n                case \"controls\":\r\n                    if (oldValue !== newValue) {\r\n                        const target = document.getElementById(this.controls);\r\n                        if (target) {\r\n                            this._target = target;\r\n                            this._targetStyle = window.getComputedStyle(target);\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-wsash\": HTMLEWidthSashElement,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_resize\": CustomEvent,\r\n    }\r\n}","import { areAttributesMatching, AttributeMutationMixin, isElement } from \"../elements/HTMLElement\";\r\nimport { forAllSubtreeElements } from \"../elements/Snippets\";\r\n\r\nexport { AttributeMixinsObserverConstructor };\r\nexport { AttributeMixinsObserver };\r\nexport { AttributeMixinsObserverBase };\r\n\r\ninterface AttributeMixinsObserverConstructor {\r\n    readonly prototype: AttributeMixinsObserver;\r\n    new(mixins: AttributeMutationMixin[]): AttributeMixinsObserver;\r\n}\r\n\r\ninterface AttributeMixinsObserver {\r\n    observe(target: Node): void;\r\n    disconnect(): void;\r\n}\r\n\r\nclass AttributeMixinsObserverBase implements AttributeMixinsObserver {\r\n    private _observer: MutationObserver;\r\n    private _mixins: AttributeMutationMixin[];\r\n\r\n    constructor(mixins: AttributeMutationMixin[]) {\r\n        this._observer = new MutationObserver(\r\n            this.callback.bind(this)\r\n        );\r\n        this._mixins = mixins.slice();\r\n    }\r\n\r\n    public callback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            mutation.addedNodes.forEach((node: Node) => {\r\n                if (isElement(node)) {\r\n                    forAllSubtreeElements(node, (childElement: Element) => {\r\n                        [...childElement.attributes].forEach((attr) => {\r\n                            let matchingMixins = this._mixins.filter(\r\n                                mixin => areAttributesMatching(\r\n                                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                                    attr.name, attr.value\r\n                                )\r\n                            );\r\n                            matchingMixins.forEach((mixin) => {\r\n                                mixin.attach(childElement);\r\n                            });\r\n                        });\r\n                    });\r\n                }\r\n            });\r\n            mutation.removedNodes.forEach((node: Node) => {\r\n                if (isElement(node)) {\r\n                    forAllSubtreeElements(node, (childElement: Element) => {\r\n                        [...childElement.attributes].forEach((attr) => {\r\n                            let matchingMixins = this._mixins.filter(\r\n                                mixin => areAttributesMatching(\r\n                                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                                    attr.name, attr.value\r\n                                )\r\n                            );\r\n                            matchingMixins.forEach((mixin) => {\r\n                                mixin.detach(childElement);\r\n                            });\r\n                        });\r\n                    });\r\n                }\r\n            });\r\n            if (isElement(mutation.target)) {\r\n                let targetElement = mutation.target;\r\n                let attrName = mutation.attributeName;\r\n                if (attrName) {\r\n                    let relatedMixins = this._mixins.filter(mixin => mixin.attributeName === attrName);\r\n                    relatedMixins.forEach((mixin) => {\r\n                        if (areAttributesMatching(\r\n                                mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                                attrName!, targetElement.getAttribute(attrName!)\r\n                            )) {\r\n                                mixin.attach(targetElement);\r\n                        }\r\n                        else {\r\n                            mixin.detach(targetElement);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public observe(target: Node): void  {\r\n        this._observer.observe(target, {\r\n            childList: true,\r\n            subtree: true,\r\n            attributeFilter: this._mixins.map((mixin => mixin.attributeName))\r\n        });\r\n    }\r\n\r\n    public disconnect(): void {\r\n        this._observer.disconnect();\r\n    }\r\n}\r\n\r\nvar AttributeMixinsObserver: AttributeMixinsObserverConstructor = AttributeMixinsObserverBase;","import { isParentNode, isReactiveNode, isReactiveParentNode } from \"../elements/HTMLElement\";\r\nimport { forAllSubtreeNodes } from \"../elements/Snippets\";\r\n\r\nexport { ReactiveNodesObserverConstructor };\r\nexport { ReactiveNodesObserver };\r\nexport { ReactiveNodesObserverBase };\r\n\r\ninterface ReactiveNodesObserverConstructor {\r\n    readonly prototype: ReactiveNodesObserver;\r\n    new(): ReactiveNodesObserver;\r\n}\r\n\r\ninterface ReactiveNodesObserver {\r\n    observe(target: Node): void;\r\n    disconnect(): void;\r\n}\r\n\r\nclass ReactiveNodesObserverBase implements ReactiveNodesObserver {\r\n    private _observer: MutationObserver;\r\n\r\n    constructor() {\r\n        this._observer = new MutationObserver(\r\n            this.callback.bind(this)\r\n        );\r\n    }\r\n\r\n    public callback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            mutation.addedNodes.forEach((node: Node) => {\r\n                if (isReactiveNode(node)) {\r\n                    node._reactiveNodeAttributes.addReactListener();\r\n                }\r\n                if (isReactiveParentNode(node)) {\r\n                    node._reactiveParentNodeAttributes.addReactListener();\r\n                }\r\n                if (isParentNode(node)) {\r\n                    forAllSubtreeNodes(node, (childNode) => {\r\n                        if (isReactiveNode(childNode)) {\r\n                            childNode._reactiveNodeAttributes.addReactListener();\r\n                        }\r\n                        if (isReactiveParentNode(childNode)) {\r\n                            childNode._reactiveParentNodeAttributes.addReactListener();\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n            mutation.removedNodes.forEach((node: Node) => {\r\n                if (isReactiveNode(node)) {\r\n                    node._reactiveNodeAttributes.addReactListener();\r\n                }\r\n                if (isReactiveParentNode(node)) {\r\n                    node._reactiveParentNodeAttributes.addReactListener();\r\n                }\r\n                if (isParentNode(node)) {\r\n                    forAllSubtreeNodes(node, (childNode) => {\r\n                        if (isReactiveNode(childNode)) {\r\n                            childNode._reactiveNodeAttributes.addReactListener();\r\n                        }\r\n                        if (isReactiveParentNode(childNode)) {\r\n                            childNode._reactiveParentNodeAttributes.addReactListener();\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    public observe(target: Node): void  {\r\n        this._observer.observe(target, {\r\n            childList: true,\r\n            subtree: true\r\n        });\r\n    }\r\n\r\n    public disconnect(): void {\r\n        this._observer.disconnect();\r\n    }\r\n}\r\n\r\nvar ReactiveNodesObserver: ReactiveNodesObserverConstructor = ReactiveNodesObserverBase;","import { HTMLEMenuItemGroupElement } from \"../../elements/containers/menus/MenuItemGroup\";\r\nimport { Element } from \"../../elements/HTMLElement\";\r\nimport { HTMLEMenuItemTemplateDescription, HTMLEMenuItemTemplate } from \"./MenuItemTemplate\";\r\n\r\nexport { HTMLEMenuItemGroupTemplateDescription };\r\nexport { HTMLEMenuItemGroupTemplate };\r\n\r\ntype HTMLEMenuItemGroupTemplateDescription = Partial<Pick<HTMLEMenuItemGroupElement, 'id' | 'className' | 'name' | 'label'>> & {\r\n    isGroup: true,\r\n    items: HTMLEMenuItemTemplateDescription[],\r\n}\r\n\r\ninterface HTMLEMenuItemGroupTemplate {\r\n    (desc: HTMLEMenuItemGroupTemplateDescription): HTMLEMenuItemGroupElement;\r\n}\r\n\r\nconst HTMLEMenuItemGroupTemplate: HTMLEMenuItemGroupTemplate = (desc: HTMLEMenuItemGroupTemplateDescription) => {\r\n    \r\n    const items = desc.items.map((descArgs) => HTMLEMenuItemTemplate(descArgs));\r\n\r\n    return Element(\r\n        \"e-menuitemgroup\", {\r\n            props: {\r\n                id: desc.id,\r\n                className: desc.className,\r\n                name: desc.name\r\n            },\r\n            children: items\r\n        }\r\n    );\r\n}","\r\nimport { HTMLEMenuElement } from \"../../elements/containers/menus/Menu\";\r\nimport { Element } from \"../../elements/HTMLElement\";\r\nimport { HTMLEMenuItemGroupTemplate, HTMLEMenuItemGroupTemplateDescription } from \"./MenuItemGroupTemplate\";\r\nimport { HTMLEMenuItemTemplate, HTMLEMenuItemTemplateDescription } from \"./MenuItemTemplate\";\r\n\r\nexport { HTMLEMenuTemplateDescription };\r\nexport { HTMLEMenuTemplate };\r\n\r\ntype HTMLEMenuTemplateDescription = Partial<Pick<HTMLEMenuElement, 'id' | 'className' | 'name'>> & {\r\n    items: (HTMLEMenuItemTemplateDescription | HTMLEMenuItemGroupTemplateDescription)[],\r\n}\r\n\r\ninterface HTMLEMenuTemplate {\r\n    (desc: HTMLEMenuTemplateDescription): HTMLEMenuElement;\r\n}\r\n\r\nconst HTMLEMenuTemplate: HTMLEMenuTemplate = (desc: HTMLEMenuTemplateDescription) => {\r\n    \r\n    const items = desc.items.map((itemDesc) => {\r\n        if (\"isGroup\" in itemDesc) {\r\n            return HTMLEMenuItemGroupTemplate(itemDesc);\r\n        }\r\n        else {\r\n            return HTMLEMenuItemTemplate(itemDesc);\r\n        }\r\n    });\r\n\r\n    return Element(\r\n        \"e-menu\", {\r\n            props: {\r\n                id: desc.id,\r\n                className: desc.className,\r\n                name: desc.name,\r\n            },\r\n            children: items\r\n        }\r\n    );\r\n}","\r\nimport { HTMLEMenuItemElement } from \"../../elements/containers/menus/MenuItem\";\r\nimport { Element, TextNode } from \"../../elements/HTMLElement\";\r\nimport { Key, KeyModifier, HotKey } from \"../../Input\";\r\nimport { HTMLEMenuTemplate, HTMLEMenuTemplateDescription } from \"./MenuTemplate\";\r\n\r\nexport { HTMLEMenuItemTemplateDescription };\r\nexport { HTMLEMenuItemTemplate };\r\n\r\ntype HTMLEMenuItemTemplateDescription = Pick<HTMLEMenuItemElement, 'name'> & Partial<Pick<HTMLEMenuItemElement, 'id' | 'className' | 'title' | 'type' | 'disabled'>> & {\r\n    label?: string;\r\n    command?: string;\r\n    commandArgs?: any;\r\n    hotkey?: {\r\n        key: Key;\r\n        mod1?: KeyModifier;\r\n        mod2?: KeyModifier;\r\n    },\r\n    value?: string,\r\n    checked?: boolean,\r\n    statekey?: string,\r\n    menu?: HTMLEMenuTemplateDescription;\r\n    disabled?: boolean;\r\n}\r\n\r\ninterface HTMLEMenuItemTemplate {\r\n    (args: HTMLEMenuItemTemplateDescription): HTMLEMenuItemElement;\r\n}\r\n\r\nconst HTMLEMenuItemTemplate: HTMLEMenuItemTemplate = (desc: HTMLEMenuItemTemplateDescription) => {\r\n    let slotted: (Node | string)[] = [];\r\n\r\n    if (desc.menu) {\r\n        let menu = HTMLEMenuTemplate(desc.menu);\r\n        menu.slot = \"menu\";\r\n        slotted.push(menu);\r\n    }\r\n\r\n    const menuItem = Element(\r\n        \"e-menuitem\", {\r\n            props: {\r\n                id: desc.id,\r\n                className: desc.className,\r\n                name: desc.name,\r\n                title: desc.title,\r\n                type: desc.type,\r\n                label: desc.label,\r\n                disabled: desc.disabled,\r\n                value: desc.value,\r\n                checked: desc.checked,\r\n                command: desc.command,\r\n                commandArgs: desc.commandArgs,\r\n                hotkey: desc.hotkey ? new HotKey(desc.hotkey.key, desc.hotkey.mod1, desc.hotkey.mod2) : void 0\r\n            },\r\n            children: slotted.map((slotted) => (typeof slotted === \"string\") ? TextNode(slotted) : slotted)\r\n        }\r\n    );\r\n\r\n    return menuItem;\r\n}","\r\nimport { HTMLEMenuBarElement } from \"../../elements/containers/menus/MenuBar\";\r\nimport { Element } from \"../../elements/HTMLElement\";\r\nimport { HTMLEMenuItemTemplateDescription, HTMLEMenuItemTemplate } from \"./MenuItemTemplate\";\r\n\r\n\r\nexport { HTMLEMenubarTemplateDescription };\r\nexport { HTMLEMenubarTemplate };\r\n\r\ntype HTMLEMenubarTemplateDescription = Partial<Pick<HTMLEMenuBarElement, 'id' | 'className' | 'tabIndex'>> & {\r\n    items: HTMLEMenuItemTemplateDescription[],\r\n}\r\n\r\ninterface HTMLEMenubarTemplate {\r\n    (desc: HTMLEMenubarTemplateDescription): HTMLEMenuBarElement;\r\n}\r\n\r\nconst HTMLEMenubarTemplate: HTMLEMenubarTemplate = (desc: HTMLEMenubarTemplateDescription) => {\r\n    \r\n    const items = desc.items.map((itemDesc) => {\r\n        return HTMLEMenuItemTemplate(itemDesc);\r\n    });\r\n\r\n    return Element(\r\n        \"e-menubar\", {\r\n            props: {\r\n                id: desc.id,\r\n                className: desc.className,\r\n                tabIndex: desc.tabIndex\r\n            },\r\n            children: items\r\n        }\r\n    );\r\n}","import { Element, TextNode } from \"../../elements/HTMLElement\";\r\n\r\nexport { HTMLTableTemplateDescription };\r\nexport { HTMLTableTemplate };\r\n\r\ntype HTMLTableTemplateDescription = Partial<Pick<HTMLTableElement, \"id\" | \"className\">> & {\r\n    headerCells: (string | Node)[];\r\n\r\n    bodyCells: ((string | Node) | {\r\n        type: \"header\" | \"data\" | undefined\r\n        content: Node | string\r\n    })[][];\r\n\r\n    footerCells: (string | Node | {\r\n        type: \"header\" | \"data\" | undefined\r\n        content: Node | string\r\n    })[];\r\n}\r\n\r\ninterface HTMLTableTemplate {\r\n    (desc: HTMLTableTemplateDescription): HTMLTableElement;\r\n}\r\n\r\nconst HTMLTableTemplate: HTMLTableTemplate = (desc: HTMLTableTemplateDescription) => {\r\n    \r\n    const thead = Element(\r\n        \"thead\", {\r\n            children: [\r\n                Element(\r\n                \"tr\", {\r\n                    props: {\r\n                        id: desc.id,\r\n                        className: desc.className,\r\n                    },\r\n                    children: desc.headerCells.map((cell) => {\r\n                        return Element(\r\n                            \"th\", {\r\n                                props: {\r\n                                    scope: \"col\" \r\n                                },\r\n                                children: [\r\n                                    (typeof cell === \"string\") ? TextNode(cell) : cell\r\n                                ]\r\n                            }\r\n                        );\r\n                    })\r\n                })\r\n            ]\r\n        }\r\n    );\r\n\r\n    const tbody = Element(\r\n        \"tbody\", {\r\n            children: desc.bodyCells.map((row) => {\r\n                return Element(\r\n                \"tr\", {\r\n                    props: {\r\n                        id: desc.id,\r\n                        className: desc.className,\r\n                    },\r\n                    children: row.map((cell) => {\r\n                        if ((typeof cell === \"object\") && !(cell instanceof Node) && (\"type\" in cell)) {\r\n                            switch (cell.type) {\r\n                                case \"data\":\r\n                                default:\r\n                                    return Element(\r\n                                        \"td\", {\r\n                                            children: [\r\n                                                (typeof cell.content === \"string\") ? TextNode(cell.content) : cell.content\r\n                                            ]\r\n                                        }\r\n                                    );\r\n                                case \"header\":\r\n                                    return Element(\r\n                                        \"th\", {\r\n                                            props: {\r\n                                                scope: \"row\" \r\n                                            },\r\n                                            children: [\r\n                                                (typeof cell.content === \"string\") ? TextNode(cell.content) : cell.content\r\n                                            ]\r\n                                        }\r\n                                    );\r\n                            }\r\n                        }\r\n                        else {\r\n                            return Element(\r\n                                \"td\", {\r\n                                    children: [\r\n                                        (typeof cell === \"string\") ? TextNode(cell) : cell\r\n                                    ]\r\n                                }\r\n                            );\r\n                        }\r\n                    })\r\n                })\r\n            })\r\n        }\r\n    );\r\n\r\n    const tfoot = Element(\r\n        \"tfoot\", {\r\n            children: [\r\n                Element(\r\n                \"tr\", {\r\n                    props: {\r\n                        id: desc.id,\r\n                        className: desc.className,\r\n                    },\r\n                    children: desc.footerCells.map((cell) => {\r\n                        if ((typeof cell === \"object\") && !(cell instanceof Node) && (\"type\" in cell)) {\r\n                            switch (cell.type) {\r\n                                case \"data\":\r\n                                default:\r\n                                    return Element(\r\n                                        \"td\", {\r\n                                            children: [\r\n                                                (typeof cell.content === \"string\") ? TextNode(cell.content) : cell.content\r\n                                            ]\r\n                                        }\r\n                                    );\r\n                                case \"header\":\r\n                                    return Element(\r\n                                        \"th\", {\r\n                                            props: {\r\n                                                scope: \"row\" \r\n                                            },\r\n                                            children: [\r\n                                                (typeof cell.content === \"string\") ? TextNode(cell.content) : cell.content\r\n                                            ]\r\n                                        }\r\n                                    );\r\n                            }\r\n                        }\r\n                        else {\r\n                            return Element(\r\n                                \"td\", {\r\n                                    children: [\r\n                                        (typeof cell === \"string\") ? TextNode(cell) : cell\r\n                                    ]\r\n                                }\r\n                            );\r\n                        }\r\n                    })\r\n                })\r\n            ]\r\n        }\r\n    );\r\n\r\n    const table = Element(\r\n        \"table\", {\r\n            props: {\r\n                id: desc.id,\r\n                className: desc.className,\r\n            },\r\n            children: [\r\n                thead,\r\n                tbody,\r\n                tfoot\r\n            ]\r\n        }\r\n    );\r\n\r\n    return table;\r\n}","import { isParentNode, isReactiveNode, isReactiveParentNode } from \"../elements/HTMLElement\";\r\nimport { forAllSubtreeNodes } from \"../elements/Snippets\";\r\n\r\nexport { ViewRoot };\r\nexport { isViewRoot };\r\nexport { View };\r\nexport { ViewBase };\r\nexport { ReactiveView };\r\nexport { ReactiveViewBase };\r\n\r\ntype ViewRoot = Element & {\r\n    _view: View;\r\n}\r\n\r\ninterface View<M extends object = object> {\r\n    root: ViewRoot;\r\n    readonly model: M;\r\n    render(): Element;\r\n}\r\n\r\nfunction isViewRoot(root: Node): root is ViewRoot {\r\n    return typeof (root as ViewRoot)._view !== \"undefined\";\r\n}\r\n\r\nabstract class ViewBase<M extends object = object> implements View {\r\n    public readonly root: ViewRoot;\r\n    public readonly model: M;\r\n\r\n    constructor(model: M) {\r\n        this.model = model;\r\n        this.root = Object.assign(\r\n            this.render(), {\r\n                _view: this\r\n            }\r\n        );\r\n    }\r\n    \r\n    public abstract render(): Element;\r\n}\r\n\r\ninterface ReactiveView<M extends object = object> extends View<M> {\r\n    disconnect(): void;\r\n}\r\n\r\nabstract class ReactiveViewBase<M extends object = object> extends ViewBase<M> implements ReactiveView<M> {\r\n    readonly observer: MutationObserver;\r\n    \r\n    constructor(model: M) {\r\n        super(model);\r\n        this.observer = new MutationObserver((mutations: MutationRecord[]) => {\r\n            mutations.forEach((record: MutationRecord) => {\r\n                Array.from(record.removedNodes).map((node) => {\r\n                    if (!isViewRoot(node)) {\r\n                        this.removeReactiveListeners(node);\r\n                    }\r\n                });\r\n                Array.from(record.addedNodes).map((node) => {\r\n                    if (!isViewRoot(node)) {\r\n                        this.addReactiveListeners(node);\r\n                    }\r\n                });\r\n            });\r\n        });\r\n        this.observer.observe(this.root, {\r\n            subtree: true,\r\n            childList: true\r\n        });\r\n        this.addReactiveListeners(this.root);\r\n    }\r\n\r\n    public disconnect(): void {\r\n        this.observer.disconnect();\r\n        this.removeReactiveListeners(this.root);\r\n    }\r\n\r\n    public addReactiveListeners(node: Node): void {\r\n        if (isReactiveNode(node)) {\r\n            node._reactiveNodeAttributes.addReactListener();\r\n        }\r\n        if (isReactiveParentNode(node)) {\r\n            node._reactiveParentNodeAttributes.addReactListener();\r\n        }\r\n        if (isParentNode(node)) {\r\n            forAllSubtreeNodes(node, (childNode) => {\r\n                if (!isViewRoot(childNode)) {\r\n                    this.addReactiveListeners(childNode);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    public removeReactiveListeners(node: Node): void {\r\n        if (isReactiveNode(node)) {\r\n            node._reactiveNodeAttributes.addReactListener();\r\n        }\r\n        if (isReactiveParentNode(node)) {\r\n            node._reactiveParentNodeAttributes.addReactListener();\r\n        }\r\n        if (isParentNode(node)) {\r\n            forAllSubtreeNodes(node, (childNode) => {\r\n                if (!isViewRoot(childNode)) {\r\n                    this.removeReactiveListeners(childNode);\r\n                }\r\n            });\r\n        }\r\n    }\r\n}","import * as editor from \"../index\";\r\nimport { HTMLEDraggableElementBase, RegisterCustomHTMLElement } from \"../index\";\r\n\r\neditor;\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"my-drag\"\r\n})\r\nclass MyDraggable extends HTMLEDraggableElementBase {\r\n    public test() {\r\n\r\n    }\r\n}\r\n\r\nexport async function main() {\r\n    setTimeout(() => {\r\n        document.getElementById(\"dragzone\")!.append(document.createElement(\"my-drag\"));\r\n    }, 100);\r\n    console.log(\"Main loaded!\");\r\n    /*(window as {[key: string]: any})[\"editor\"] = editor;\r\n    let formDataImport = document.getElementById(\"formdata-import\");\r\n    if (formDataImport) {\r\n        formDataImport.addEventListener(\"load\", () => {\r\n            formdata();\r\n        });\r\n    }*/\r\n}"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","forAllSubtreeElements","element","func","index","children","length","child","item","forAllSubtreeNodes","parent","childNodes","hasChildNodes","getPropertyFromPath","src","path","props","split","forEach","includes","parseInt","substring","indexOf","Number","isNaN","console","error","Array","isArray","setPropertyFromPath","idx","pointIntersectsWithDOMRect","x","y","rect","left","right","top","bottom","titlize","str","charAt","toUpperCase","substr","toLowerCase","snakeToCamel","map","join","camelToSnake","replace","trainToCamel","camelToTrain","RegisterCustomHTMLElement","args","elementCtor","name","observedAttributes","options","constructor","customElements","define","GenerateAttributeAccessors","attributes","attr","type","this","getAttribute","set","setAttribute","removeAttribute","val","JSON","parse","stringify","parseFloat","bindShadowRoot","templateContent","root","attachShadow","mode","template","document","createElement","innerHTML","appendChild","content","cloneNode","Fragment","nodes","fragment","createDocumentFragment","append","TextNode","text","createTextNode","isTagElement","tagName","Node","nodeType","ELEMENT_NODE","Element","init","attrs","listeners","styles","keys","assign","attrName","toString","replaceChildren","entries","entry","addEventListener","property","style","setProperty","isParentNode","node","isElement","isReactiveNode","_reactiveNodeAttributes","addReactListener","removeReactListener","isReactiveParentNode","_reactiveParentNodeAttributes","ReactiveNode","objectOrList","react","listener","event","data","addedItems","removedItems","removeEventListener","items","oldValue","newValue","ReactiveChildNodes","list","placeholder","textContent","i","remove","addedElements","before","areAttributesMatching","refAttributeType","refAttrName","refAttrValue","attrValue","RegExp","test","AttributeMutationMixinBase","attributeName","attributeType","attributeValue","EventBase","Event","EventDispatcherBase","_listeners","Map","handler","once","newListener","find","push","count","findIndex","pop","delete","dispatchEvent","filter","EventDispatcher","ObjectModelBase","super","GenerateObjectModelAccessors","ctor","ListModelBase","_items","newLength","insert","splice","itemIndex","clear","slice","EditorBase","_commands","_hotkeys","state","setup","body","from","hotkey","execs","exec","target","detail","oldHotKey","removeHotkeyExec","trigger","bind","newHotKey","addHotkeyExec","command","executeCommand","commandArgs","registerCommand","opts","undo","hotkeys","Key","KeyModifier","MouseButton","Editor","displayKeyModifier","Control","testKeyModifier","mod","altKey","ctrlKey","shiftKey","HotKey","mod1","mod2","HTMLEMenuElementBase","HTMLElement","parentItem","_activeIndex","activeIndex","connectedCallback","tabIndex","slot","shadowRoot","querySelector","assignedElements","elem","parentMenu","targetIndex","reset","focus","focusItemAt","thisIntersectsWithMouse","clientX","clientY","getBoundingClientRect","contains","expanded","newTarget","relatedTarget","activeItem","stopPropagation","parentGroup","group","childMenu","attributeChangedCallback","clientWidth","overflowing","findItem","predicate","subitems","foundItem","HTMLEMenuBarElementBase","activeElement","active","preventDefault","subtree","HTMLEMenuButtonElementBase","menuSlot","menuElem","toggle","capture","alert","disabled","CustomEvent","bubbles","labelPart","HTMLEMenuItemElementBase","_hotkey","hotkeyPart","label","inputPart","checked","HTMLEMenuItemGroupElementBase","checkedRadio","PanelElement","getElementById","arrow","arr","window","innerWidth","render","PanelGroupElement","toggler","HTMLEStatusBarElementBase","_selectedItemIndex","selectedItemIndex","insertItem","Math","min","max","insertBefore","selectItem","findItems","clearSelection","selectedItem","HTMLEStatusItemElementBase","_stateMap","stateMap","update","activate","BaseHTMLETabElement","panel","controls","hidden","tab","BaseHTMLETabListElement","tabs","focusTabAt","activeTab","activateTab","thisTab","thisTabIndex","findTab","isHTMLETabPanelElement","BaseHTMLETabPanelElement","HTMLETreeItemElementBase","indent","iconPart","dataset","deepestVisibleChildItem","previousVisibleItem","indexOfThis","nextVisibleItem","nearestItem","nearestParentItem","indexOfNearest","subitem","HTMLETreeElementBase","_activeItem","_selectedItem","focusItem","closestItem","closest","selected","HTMLEDraggableElementBase","references","_referee","draggable","disconnectedCallback","referee","thisRefIndex","id","reference","getReference","referenceIdx","HTMLEDraggableElement","HTMLEDragzoneElementBase","draggables","selectedDraggables","selectDraggable","unselectDraggable","thisSelectedDraggable","dragged","dataTransfer","effectAllowed","setData","thisDraggedDraggable","button","firstIndex","direction","sign","fromIndex","toIndex","startRangeIndex","endRangeIndex","thisDraggable","HTMLEDropzoneElementBase","droptest","appendAreaPart","removeDraggables","dragovered","dropIndex","dragzoneId","getData","dragzone","selectedDraggable","addDraggables","placeholderPart","position","dataTransferSuccess","newDraggables","insertionPosition","multiple","newDraggable","insertAdjacentElement","replaceChild","action","toRemove","atPosition","DropzoneDataBase","dropzone","_dropzone","dropzoneData","querySelectorAll","parentElement","childDropzone","childDropzoneData","DropzoneData","HTMLEDialogElementBase","_closeButton","_cancelButton","_confirmButton","_okButton","cancel","confirm","open","close","getFormState","form","elements","_control","floatValue","files","setFormState","stateValue","HTMLEHeightSashElementBase","_target","_targetStyle","onPointerMove","height","getPropertyValue","newHeight","trunc","growdir","movementY","getComputedStyle","setPointerCapture","pointerId","releasePointerCapture","HTMLEImportElementBase","async","outerHTML","fetch","then","response","ok","Error","statusText","importRequest","HTMLELoaderElementBase","_promise","promise","finally","PaletteElement","colors","color","div","HTMLEWidthSashElementBase","width","newWidth","movementX","AttributeMixinsObserverBase","mixins","_observer","MutationObserver","callback","_mixins","mutationsList","mutation","addedNodes","childElement","mixin","attach","removedNodes","detach","targetElement","observe","childList","attributeFilter","disconnect","AttributeMixinsObserver","ReactiveNodesObserverBase","childNode","ReactiveNodesObserver","HTMLEMenuItemGroupTemplate","desc","descArgs","HTMLEMenuItemTemplate","className","HTMLEMenuTemplate","itemDesc","slotted","menu","title","HTMLEMenubarTemplate","HTMLTableTemplate","thead","headerCells","cell","scope","tbody","bodyCells","row","tfoot","footerCells","isViewRoot","_view","ViewBase","model","ReactiveViewBase","observer","mutations","record","removeReactiveListeners","addReactiveListeners","MyDraggable","main","setTimeout","log"],"sourceRoot":""}