{"version":3,"file":"main.js","mappings":"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","sources":["webpack://main/webpack/bootstrap","webpack://main/webpack/runtime/define property getters","webpack://main/webpack/runtime/hasOwnProperty shorthand","webpack://main/webpack/runtime/make namespace object","webpack://main/./src/models/Model.ts","webpack://main/./src/elements/Snippets.ts","webpack://main/./src/elements/Element.ts","webpack://main/./src/elements/containers/actions/Action.ts","webpack://main/./src/Input.ts","webpack://main/./src/elements/containers/grid/GridCell.ts","webpack://main/./src/elements/containers/grid/GridRowGroup.ts","webpack://main/./src/elements/containers/menus/MenuItem.ts","webpack://main/./src/elements/containers/menus/MenuItemGroup.ts","webpack://main/./src/elements/containers/menus/Menu.ts","webpack://main/./src/elements/containers/grid/GridRow.ts","webpack://main/./src/elements/containers/grid/GridCellCollection.ts","webpack://main/./src/elements/containers/grid/GridRowCollection.ts","webpack://main/./src/elements/containers/grid/GridBody.ts","webpack://main/./src/elements/containers/grid/Grid.ts","webpack://main/./src/elements/containers/grid/GridHead.ts","webpack://main/./src/elements/containers/menus/MenuBar.ts","webpack://main/./src/elements/containers/menus/MenuButton.ts","webpack://main/./src/elements/controls/forms/Option.ts","webpack://main/./src/elements/controls/forms/OptionGroup.ts","webpack://main/./src/elements/controls/forms/OptionCollection.ts","webpack://main/./src/elements/controls/forms/Select.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItem.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItemGroup.ts","webpack://main/./src/elements/containers/toolbars/ToolBar.ts","webpack://main/./src/elements/containers/tabs/TabPanel.ts","webpack://main/./src/elements/containers/tabs/Tab.ts","webpack://main/./src/elements/containers/tabs/TabList.ts","webpack://main/./src/elements/containers/trees/TreeItemGroup.ts","webpack://main/./src/elements/containers/trees/TreeItem.ts","webpack://main/./src/elements/containers/trees/Tree.ts","webpack://main/./src/elements/containers/lists/ListItem.ts","webpack://main/./src/elements/containers/lists/ListItemGroup.ts","webpack://main/./src/elements/containers/lists/List.ts","webpack://main/./src/elements/controls/draggable/Draggable.ts","webpack://main/./src/elements/controls/draggable/Dragzone.ts","webpack://main/./src/elements/controls/draggable/Dropzone.ts","webpack://main/./src/elements/controls/dialogs/Dialog.ts","webpack://main/./src/elements/utils/Handle.ts","webpack://main/./src/elements/utils/HeightSash.ts","webpack://main/./src/elements/utils/Import.ts","webpack://main/./src/elements/utils/Loader.ts","webpack://main/./src/elements/utils/WidthSash.ts","webpack://main/./src/observers/AttributeMixinsObserver.ts","webpack://main/./src/views/widgets/Widget.ts","webpack://main/./src/views/widgets/SeparatorWidget.ts","webpack://main/./src/views/widgets/menu/MenuItemWidget.ts","webpack://main/./src/views/widgets/menu/MenuBarWidget.ts","webpack://main/./src/views/widgets/menu/MenuWidget.ts","webpack://main/./src/views/widgets/menu/MenuItemGroupWidget.ts","webpack://main/./src/views/widgets/tree/TreeItemWidget.ts","webpack://main/./src/views/widgets/tree/TreeWidget.ts","webpack://main/./src/views/widgets/tree/TreeItemGroupWidget.ts","webpack://main/./src/views/widgets/list/ListItemWidget.ts","webpack://main/./src/views/widgets/list/ListWidget.ts","webpack://main/./src/views/widgets/list/ListItemGroupWidget.ts","webpack://main/./src/views/widgets/toolbar/ToolBarItemWidget.ts","webpack://main/./src/views/widgets/toolbar/ToolBarWidget.ts","webpack://main/./src/views/widgets/toolbar/ToolBarItemGroupWidget.ts","webpack://main/./src/views/widgets/WidthSashWidget.ts","webpack://main/./src/views/widgets/HeightSashWidget.ts","webpack://main/./src/views/widgets/grid/GridCellWidget.ts","webpack://main/./src/views/widgets/grid/GridRowWidget.ts","webpack://main/./src/views/widgets/grid/GridWidget.ts","webpack://main/./src/views/widgets/grid/GridBodyWidget.ts","webpack://main/./src/views/widgets/grid/GridHeadWidget.ts","webpack://main/./src/views/widgets/grid/GridHeaderWidget.ts","webpack://main/./src/views/widgets/combobox/OptionWidget.ts","webpack://main/./src/views/widgets/combobox/ComboBoxWidget.ts","webpack://main/./src/views/widgets/combobox/OptionGroupWidget.ts","webpack://main/./src/views/TreeView.ts","webpack://main/./TreeMain.ts","webpack://main/./main.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export { ModelChangeRecord };\r\nexport { ModelEvent };\r\nexport { ModelNode };\r\nexport { ModelObject };\r\nexport { ModelProperty };\r\nexport { ModelList };\r\nexport { ModelChangeObserverOptions };\r\nexport { ModelChangeObserver };\r\n\r\ninterface ModelChangeRecordConstructor {\r\n    prototype: ModelChangeRecord;\r\n    new(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ): ModelChangeRecord;\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\ninterface ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly changeType: number;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\nclass ModelChangeRecordBase implements ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList;\r\n    readonly changeType: number;\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n\r\n    constructor(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ) {\r\n        this.target = init.target;\r\n        this.changeType = init.changeType;\r\n        this.propertyName = init.propertyName ?? null;\r\n        this.oldValue = init.oldValue ?? undefined;\r\n        this.newValue = init.newValue ?? undefined;\r\n        this.removedIndex = init.removedIndex ?? 0;\r\n        this.removedItems = new ModelNodesList(init.removedItems ?? []);\r\n        this.insertedIndex = init.insertedIndex ?? 0;\r\n        this.insertedItems = new ModelNodesList(init.insertedItems ?? []);\r\n        this.sortedIndices = init.sortedIndices ?? [];\r\n    }\r\n\r\n    static get PROPERTY_CHANGE(): number {\r\n        return 1;\r\n    }\r\n\r\n    static get LIST_REMOVE(): number {\r\n        return 2;\r\n    }\r\n\r\n    static get LIST_INSERT(): number {\r\n        return 3;\r\n    }\r\n\r\n    static get LIST_SORT(): number {\r\n        return 4;\r\n    }\r\n\r\n    get PROPERTY_CHANGE(): number {\r\n        return ModelChangeRecordBase.PROPERTY_CHANGE;\r\n    }\r\n\r\n    get LIST_REMOVE(): number {\r\n        return ModelChangeRecordBase.LIST_REMOVE;\r\n    }\r\n\r\n    get LIST_INSERT(): number {\r\n        return ModelChangeRecordBase.LIST_INSERT;\r\n    }\r\n\r\n    get LIST_SORT(): number {\r\n        return ModelChangeRecordBase.LIST_SORT;\r\n    }\r\n}\r\n\r\nvar ModelChangeRecord: ModelChangeRecordConstructor = ModelChangeRecordBase;\r\n\r\ninterface ModelNodesListConstructor {\r\n    prototype: ModelNodesList;\r\n    new(items: any[]): ModelNodesList;\r\n}\r\n\r\ninterface ModelNodesList {\r\n    get length(): number;\r\n    item(index: number): ModelNode | null;\r\n    values(): IterableIterator<ModelNode>;\r\n}\r\n\r\nclass ModelNodesListBase implements ModelNodesList {\r\n    #items: ModelNode[];\r\n\r\n    constructor(items: ModelNode[]) {\r\n        this.#items = items.slice();\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    item(index: number): ModelNode | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    values(): IterableIterator<ModelNode> {\r\n        return this.#items.values();\r\n    }\r\n}\r\n\r\nvar ModelNodesList: ModelNodesListConstructor = ModelNodesListBase;\r\n\r\ninterface ModelEventConstructor {\r\n    prototype: ModelEvent;\r\n    new(type: string): ModelEvent;\r\n}\r\n\r\ninterface ModelEvent {\r\n    readonly type: string;\r\n    readonly currentTarget: ModelEventTarget | null;\r\n    readonly target: ModelEventTarget | null;\r\n}\r\n\r\nclass ModelEventBase implements ModelEvent {\r\n    readonly type: string;\r\n\r\n    #currentTarget: ModelEventTarget | null;\r\n    #target: ModelEventTarget | null;\r\n\r\n    constructor(type: string) {\r\n        this.type = type;\r\n        this.#currentTarget = null;\r\n        this.#target = null;\r\n    }\r\n\r\n    get currentTarget(): ModelEventTarget | null {\r\n        return this.#currentTarget;\r\n    }\r\n\r\n    get target(): ModelEventTarget | null {\r\n        return this.#target;\r\n    }\r\n\r\n    static ModelEventTargetAccessor? = new class ModelEventTargetAccessor {\r\n        setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#currentTarget = currentTarget;\r\n            }\r\n        }\r\n\r\n        setTarget(event: ModelEvent, target: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#target = target;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface ModelEventTargetAccessor {\r\n    setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void;\r\n    setTarget(event: ModelEvent, target: ModelEventTarget): void;\r\n}\r\n\r\nvar ModelEventTargetAccessor: ModelEventTargetAccessor = ModelEventBase.ModelEventTargetAccessor!;\r\ndelete ModelEventBase.ModelEventTargetAccessor;\r\n\r\nvar ModelEvent: ModelEventConstructor = ModelEventBase;\r\n\r\ninterface ModelEventTargetConstructor {\r\n    prototype: ModelEventTarget;\r\n    new(): ModelEventTarget;\r\n}\r\n\r\ninterface ModelEventTarget {\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    dispatchEvent(event: ModelEvent): void;\r\n    receiveEvent(event: ModelEvent): void;\r\n}\r\n\r\nclass ModelEventTargetBase implements ModelEventTarget {\r\n    #callbacks: Map<string, ((event: ModelEvent) => void)[]>;\r\n\r\n    constructor() {\r\n        this.#callbacks = new Map();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        const {type} = event;\r\n        const callbacks = this.#callbacks.get(type);\r\n        ModelEventTargetAccessor.setCurrentTarget(event, this);\r\n        if (callbacks) {\r\n            callbacks.forEach((callback_i) => {\r\n                callback_i(event);\r\n            });\r\n        }\r\n    }\r\n\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            callbacks.push(callback);\r\n        }\r\n        else {\r\n            this.#callbacks.set(type, [callback]);\r\n        }\r\n    }\r\n\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            const callbackIndex = callbacks.findIndex(\r\n                callback_i => callback_i == callback\r\n            );\r\n            if (callbackIndex > -1) {\r\n                callbacks.splice(callbackIndex, 1);\r\n            }\r\n            if (callbacks.length == 0) {\r\n                this.#callbacks.delete(type);\r\n            }\r\n        }\r\n    }\r\n\r\n    dispatchEvent(event: ModelEvent): void {\r\n        ModelEventTargetAccessor.setTarget(event, this);\r\n        this.receiveEvent(event);\r\n    }\r\n}\r\n\r\nvar ModelEventTarget: ModelEventTargetConstructor = ModelEventTargetBase;\r\n\r\ninterface ModelNodeConstructor {\r\n    prototype: ModelNode;\r\n    new(): ModelNode;\r\n}\r\n\r\ninterface ModelNode extends ModelEventTarget {\r\n    readonly parentNode: ModelNode | null;\r\n    setParent(parentNode: ModelNode | null): void;\r\n    getRecords(): ModelChangeRecord[];\r\n    beginChanges(): void;\r\n    endChanges(): void;\r\n}\r\n\r\ninterface ModelNodeRecordsAccessor {\r\n    triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void;\r\n    handleRecord(node: ModelNode, record: ModelChangeRecord): void;\r\n}\r\n\r\nclass ModelNodeBase extends ModelEventTargetBase implements ModelNode {\r\n    #parentNode: ModelNode | null;\r\n    #records: ModelChangeRecord[];\r\n    #isRecording: boolean;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#parentNode = null;\r\n        this.#records = [];\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    get parentNode(): ModelNode | null {\r\n        return this.#parentNode;\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        if (parentNode !== null) {\r\n            let isCyclicReference = parentNode == this;\r\n            let {parentNode: ancestorNode} = parentNode;\r\n            while (!isCyclicReference && ancestorNode !== null) {\r\n                ({parentNode: ancestorNode} = ancestorNode);\r\n                isCyclicReference = ancestorNode == this;\r\n            }\r\n            if (!isCyclicReference) {\r\n                this.#parentNode = parentNode;\r\n            }\r\n            else {\r\n                throw new TypeError(\"Failed to set parent on ModelNode: circular reference detected in the hierarchy.\");\r\n            }\r\n        }\r\n        else {\r\n            this.#parentNode = null;\r\n        }\r\n    }\r\n    \r\n    beginChanges(): void {\r\n        this.#isRecording = true;\r\n    }\r\n\r\n    endChanges(): void {\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        this.#records.splice(0);\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    getRecords(): ModelChangeRecord[] {\r\n        return this.#records.slice();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        super.receiveEvent(event);\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            parentNode.receiveEvent(event);\r\n        }\r\n    }\r\n\r\n    #triggerChange(property: string, oldValue: any, newValue: any): void {\r\n        const records = this.#records;\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.PROPERTY_CHANGE,\r\n            propertyName: property,\r\n            oldValue, newValue\r\n        });\r\n        records.push(record);\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        records.splice(0);\r\n    }\r\n\r\n    #handleRecord(record: ModelChangeRecord): void {\r\n        this.#records.push(record);\r\n        if (!this.#isRecording) {\r\n            this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n            this.#records.splice(0);\r\n        }\r\n    }\r\n\r\n    static ModelNodeRecordsAccessor? = new class ModelNodeRecordsAccessor {\r\n        triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#triggerChange(property, oldValue, newValue);\r\n            }\r\n        }\r\n\r\n        handleRecord(node: ModelNode, record: ModelChangeRecord): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#handleRecord(record);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelNodeRecordsAccessor: ModelNodeRecordsAccessor = ModelNodeBase.ModelNodeRecordsAccessor!;\r\ndelete ModelNodeBase.ModelNodeRecordsAccessor;\r\n\r\nvar ModelNode: ModelNodeConstructor = ModelNodeBase;\r\n\r\ninterface ModelPropertyDecorator {\r\n    (\r\n        init?: {\r\n            type: typeof String | typeof Number | typeof Boolean | typeof Date | typeof Object\r\n        }\r\n    ): <Model extends ModelObject>(target: Model, property: string) => void;\r\n}\r\n\r\nconst ModelProperty: ModelPropertyDecorator = function(\r\n    init?: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Date | typeof Object\r\n    }\r\n) {\r\n    return (\r\n        target: ModelObject, property: string\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        /*const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n        if (Array.isArray(observedAttributes)) {\r\n            observedAttributes.push(property);\r\n        }\r\n        else {\r\n            Object.defineProperty(\r\n                constructor, \"observedAttributes\", {\r\n                    value: [property],\r\n                    writable: false\r\n                }\r\n            );\r\n        }*/\r\n        const setter = function(this: ModelObject, value: any) {\r\n            const oldValue = ModelObjectPropertiesAccessor.getProperty(this, property);\r\n            ModelObjectPropertiesAccessor.setProperty(this, property, value);\r\n            if (value !== oldValue) {\r\n                ModelNodeRecordsAccessor.triggerChange(this, property, oldValue, value);\r\n            }\r\n            return true;\r\n        };\r\n        const getter = function(this: ModelObject) {\r\n            return ModelObjectPropertiesAccessor.getProperty(this, property);\r\n        };\r\n        Object.defineProperty(prototype, property, {\r\n            set: setter,\r\n            get: getter,\r\n            enumerable: true\r\n        });\r\n    }\r\n}\r\n\r\ninterface ModelObjectConstructor {\r\n    prototype: ModelObject;\r\n    new(): ModelObject;\r\n}\r\n\r\ninterface ModelObject extends ModelNode {}\r\n\r\ninterface ModelObjectPropertiesAccessor {\r\n    setProperty(node: ModelNode, property: string, value: any): void;\r\n    getProperty(node: ModelNode, property: string,): any;\r\n}\r\n\r\nclass ModelObjectBase extends ModelNodeBase implements ModelObject {\r\n    #properties: Map<string, any>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#properties = new Map();\r\n    }\r\n\r\n    static ModelObjectPropertiesAccessor? = new class ModelPropertiesAccessor {\r\n        setProperty(node: ModelObject, property: string, value: any): void {\r\n            if (node instanceof ModelObjectBase) {\r\n                node.#properties.set(property, value);\r\n            }\r\n        }\r\n\r\n        getProperty(node: ModelObject, property: string): any {\r\n            if (node instanceof ModelObjectBase) {\r\n                return node.#properties.get(property);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelObjectPropertiesAccessor: ModelObjectPropertiesAccessor = ModelObjectBase.ModelObjectPropertiesAccessor!;\r\ndelete ModelObjectBase.ModelObjectPropertiesAccessor;\r\n\r\nvar ModelObject: ModelObjectConstructor = ModelObjectBase;\r\n\r\ninterface ModelListConstructor {\r\n    prototype: ModelList;\r\n    new<Model extends ModelNode>(): ModelList<Model>;\r\n    new<Model extends ModelNode>(items: Model[]): ModelList<Model>;\r\n}\r\n\r\ninterface ModelList<Model extends ModelNode = ModelNode> extends ModelNode {\r\n    readonly parentNode: ModelNode | null;\r\n    readonly length: number;\r\n    index(items: Model): number;\r\n    index(items: Model, fromIndex: number): number;\r\n    get(index: number): Model | null;\r\n    values(): IterableIterator<Model>;\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void;\r\n    insert(index: number, ...items: Model[]): void;\r\n    prepend(...items: Model[]): void;\r\n    append(...items: Model[]): void;\r\n    remove(item: Model): void;\r\n    clear(): void;\r\n}\r\n\r\nclass ModelListBase<Model extends ModelNode = ModelNode> extends ModelNodeBase implements ModelList<Model> {\r\n    #items: Model[];\r\n\r\n    constructor()\r\n    constructor(items: Model[])\r\n    constructor(items?: Model[]) {\r\n        super();\r\n        this.#items = items?.slice() ?? [];\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        super.setParent(parentNode);\r\n        this.#items.forEach((item_i) => {\r\n            item_i.setParent(parentNode);\r\n        });\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    get(index: number): Model | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    index(item: Model, fromIndex?: number): number {\r\n        return this.#items.indexOf(item, fromIndex)\r\n    }\r\n\r\n    values(): IterableIterator<Model> {\r\n        return this.#items.values();\r\n    }\r\n\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void {\r\n        const items = this.#items;\r\n        const indexedItems = items.map(\r\n            (item_i, i) => {\r\n                return {\r\n                    item: item_i,\r\n                    index: i\r\n                };\r\n            }\r\n        );\r\n        indexedItems.sort(\r\n            (indexedItem_a, indexedItem_b) => {\r\n                return compareFunction(\r\n                    indexedItem_a.item, indexedItem_b.item\r\n                )\r\n            }\r\n        );\r\n        this.#items = indexedItems.map(indexedItem_i => indexedItem_i.item);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_SORT,\r\n            sortedIndices: indexedItems.map(indexedItem_i => indexedItem_i.index)\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    prepend(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.splice(0, 0, ...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: 0,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    append(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.push(...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: length,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    insert(index: number, ...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const positiveIndex = Math.abs(index);\r\n        if (positiveIndex <= length) {\r\n            if (index >= 0) {\r\n                const {parentNode} = this;\r\n                items.forEach(item_i => {\r\n                    item_i.setParent(parentNode);\r\n                });\r\n                if (index < length) {\r\n                    _items.splice(index, 0, ...items);\r\n                }\r\n                else {\r\n                    _items.push(...items);\r\n                }\r\n            }\r\n            else if (index < 0) {\r\n                index = length - index;\r\n                const {parentNode} = this;\r\n                if (parentNode) {\r\n                    items.forEach(item_i => {\r\n                        item_i.setParent(parentNode);\r\n                    });\r\n                }\r\n                _items.splice(index, 0, ...items);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_INSERT,\r\n                insertedIndex: index,\r\n                insertedItems: items.slice()\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    remove(item: Model): void {\r\n        const _items = this.#items;\r\n        const index = _items.indexOf(item);\r\n        if (index > -1) {\r\n            const item = _items.splice(index, 1)[0];\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                item.setParent(null);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: index,\r\n                removedItems: [item]\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    clear(): void {\r\n        const items = this.#items;\r\n        const {length} = items;\r\n        if (length > 0) {\r\n            const removedItems = items.splice(0);\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                removedItems.forEach((removedItem_i) => {\r\n                    removedItem_i.setParent(null);\r\n                });\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: 0,\r\n                removedItems: removedItems\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n};\r\n\r\nvar ModelList: ModelListConstructor = ModelListBase!;\r\n\r\ninterface ModelChangeObserverConstructor {\r\n    prototype: ModelChangeObserver;\r\n    new(callback: (records: ModelChangeRecord[]) => void): ModelChangeObserver;\r\n}\r\n\r\ninterface ModelChangeObserver {\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void;\r\n    unobserve(node: ModelNode): void;\r\n    disconnect(): void;\r\n}\r\n\r\ntype ModelChangeObserverOptions = {\r\n    properties?: boolean;\r\n    propertiesFilter?: string[];\r\n    childList?: boolean;\r\n    subtree?: boolean;\r\n}\r\n\r\nclass ModelChangeObserverBase implements ModelChangeObserver {\r\n    #callback: (records: ModelChangeRecord[]) => void;\r\n    #records: ModelChangeRecord[];\r\n    #disconnected: boolean;\r\n\r\n    #references: WeakMap<ModelNode, {\r\n        listener: (event: ModelEvent) => void,\r\n        options: ModelChangeObserverOptions\r\n    }>;\r\n\r\n    constructor(callback: (records: ModelChangeRecord[]) => void) {\r\n        this.#callback = callback;\r\n        this.#records = [];\r\n        this.#disconnected = false;\r\n        this.#references = new WeakMap();\r\n    }\r\n\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void {\r\n        this.#disconnected = false;\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (!reference) {\r\n            const listener = this.#handleModelEvent.bind(this);\r\n            node.addEventListener(\"modelchange\", listener);\r\n            reference = {listener, options};\r\n            references.set(node, reference);\r\n        }\r\n        else {\r\n            references.set(node, reference);\r\n        }\r\n    }\r\n\r\n    unobserve(node: ModelNode): void {\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (reference) {\r\n            const {listener} = reference;\r\n            node.removeEventListener(\"modelchange\", listener);\r\n        }\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#records.splice(0);\r\n        this.#disconnected = true;\r\n    }\r\n\r\n    #trigger(): void {\r\n        const records = this.#records.splice(0);\r\n        if (records.length > 0) {\r\n            this.#callback(records);\r\n        }\r\n    }\r\n\r\n    #handleModelEvent(event: ModelEvent): void {\r\n        if (!this.#disconnected) {\r\n            const {target, currentTarget} = event;\r\n            const reference = this.#references.get(<ModelNode>currentTarget);\r\n            if (reference) {\r\n                const {options} = reference;\r\n                const {properties, propertiesFilter, childList, subtree} = options;\r\n                if (subtree) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n                else if (target == currentTarget) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelChangeObserver: ModelChangeObserverConstructor = ModelChangeObserverBase;","export { getPropertyFromPath };\r\nexport { setPropertyFromPath };\r\nexport { snakeToCamel };\r\nexport { camelToSnake };\r\nexport { trainToCamel };\r\nexport { camelToTrain };\r\n\r\nfunction getPropertyFromPath(src: object, path: string): any {\r\n  const props = path.split(\".\");\r\n  let obj: {[key: string]: any} | undefined  = src;\r\n  props.forEach((prop) => {\r\n    if (prop.includes(\"[\")) {\r\n      const index = parseInt(prop.substring(prop.indexOf(\"[\") + 1, prop.indexOf(\"]\")));\r\n      if (Number.isNaN(index)) {\r\n        console.error(`Wrong indexed path: ${prop}`);\r\n      }\r\n      prop = prop.substring(0, prop.indexOf(\"[\"));\r\n      if (typeof obj == \"object\" && prop in obj && Array.isArray(obj[prop])) {\r\n        obj = obj[prop][index];\r\n      }\r\n    }\r\n    else if (typeof obj == \"object\" && prop in obj) {\r\n      obj = obj[prop];\r\n    }\r\n    else {\r\n      obj = undefined;\r\n    }\r\n  });\r\n  return obj;\r\n}\r\n\r\nfunction setPropertyFromPath(src: object, path: string, value: any): object {\r\n  const props = path.split(\".\");\r\n  let obj: {[key: string]: any} = src;\r\n  if (src == null) {\r\n    console.error(\"Source data can't be null\");\r\n  }\r\n  props.forEach((prop, idx) => {\r\n    if (prop.includes(\"[\")) {\r\n      const index = parseInt(prop.substring(prop.indexOf(\"[\") + 1, prop.indexOf(\"]\")));\r\n      if (Number.isNaN(index)) {\r\n        console.error(`Wrong indexed path: ${prop}`);\r\n      }\r\n      prop = prop.substring(0, prop.indexOf(\"[\"));\r\n      if (!Array.isArray(obj[prop])) {\r\n        obj[prop] = [];\r\n      }\r\n      if (idx == props.length - 1) {\r\n        obj[prop][index] = value;\r\n      }\r\n      else {\r\n        if (typeof obj[prop][index] !== \"object\") {\r\n          obj[prop][index] = {}\r\n        }\r\n        obj = obj[prop][index];\r\n      }\r\n    }\r\n    else {\r\n      if (idx == props.length - 1) {\r\n        obj[prop] = value;\r\n      }\r\n      else {\r\n        if (typeof obj[prop] !== \"object\") {\r\n          obj[prop] = {}\r\n        }\r\n        obj = obj[prop];\r\n      }\r\n    }\r\n  });\r\n  return src;\r\n}\r\n\r\nfunction snakeToCamel(str: string) {\r\n  return str.split('_').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToSnake(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '_').toLowerCase();\r\n}\r\n\r\nfunction trainToCamel(str: string) {\r\n  return str.split('-').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToTrain(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '-').toLowerCase();\r\n}","import { ModelList, ModelNode, ModelChangeRecord, ModelChangeObserver, ModelChangeObserverOptions } from \"../models/Model\";\r\nimport { camelToTrain } from \"./Snippets\";\r\n\r\nexport { subtreeNodes };\r\nexport { ancestorNodes };\r\nexport { CustomElement };\r\nexport { ReactiveChildElements };\r\nexport { QueryProperty };\r\nexport { QueryAllProperty };\r\nexport { AttributeProperty };\r\nexport { reactiveElement };\r\nexport { reactiveChildElements };\r\nexport { element };\r\nexport { fragment };\r\nexport { textNode };\r\nexport { AttributeMutationMixin };\r\nexport { AttributeType };\r\nexport { areAttributesMatching };\r\nexport { AttributeMutationMixinBase };\r\nexport { trimMultilineIndent };\r\nexport { Stylesheet };\r\n\r\ninterface AttributePropertyDecorator {\r\n    (\r\n        init: {\r\n            type: typeof String;\r\n            observed?: boolean;\r\n            defaultValue?: string | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Number;\r\n            observed?: boolean;\r\n            defaultValue?: number | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Boolean;\r\n            observed?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Object;\r\n            observed?: boolean;\r\n            defaultValue?: any | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n}\r\n\r\nconst AttributeProperty: AttributePropertyDecorator = function(\r\n    init: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Object;\r\n        observed?: boolean;\r\n        defaultValue?: string | number | any | null;\r\n    }\r\n) {\r\n    return <E extends HTMLElement>(\r\n        target: E, property: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(property);\r\n        const attributeName = camelToTrain(propertyName);\r\n        const defaultValue = init.defaultValue ?? null;\r\n        const observed = init.observed ?? false;\r\n        if (observed) {\r\n            const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n            if (Array.isArray(observedAttributes)) {\r\n                observedAttributes.push(attributeName);\r\n            }\r\n            else {\r\n                Object.defineProperty(\r\n                    constructor, \"observedAttributes\", {\r\n                        value: [attributeName],\r\n                        writable: false\r\n                    }\r\n                );\r\n            }\r\n        }\r\n        const {type} = init;\r\n        switch (type) {\r\n            case Boolean: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        return this.hasAttribute(attributeName);\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value) {\r\n                            this.setAttribute(attributeName, \"\");\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Object: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? JSON.parse(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, JSON.stringify(value));\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Number: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? parseFloat(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case String:\r\n            default: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? val : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n    \r\nfunction Stylesheet(text: string): CSSStyleSheet {\r\n    const stylesheet = new CSSStyleSheet();\r\n    (stylesheet as any).replaceSync(text);\r\n    return stylesheet;\r\n}\r\n\r\nfunction trimMultilineIndent(text: string): string {\r\n    const newlineIndex = text.indexOf(\"\\n\");\r\n    text = text.substring(newlineIndex + 1);\r\n    const indentMatch = text.match(/^[\\s]*/);\r\n    if (indentMatch) {\r\n        const indent = text.substring(0, indentMatch[0].length);\r\n        text = text.replaceAll(indent, \"\").trimEnd();\r\n    }\r\n    return text;\r\n}\r\n\r\ninterface CustomElementDecorator {\r\n    (init: {\r\n        name: string;\r\n        options?: ElementDefinitionOptions\r\n    }): <C extends CustomElementConstructor>(elementCtor: C) => C;\r\n}\r\n\r\nconst CustomElement: CustomElementDecorator = function(init: {\r\n    name: string;\r\n    options?: ElementDefinitionOptions\r\n}) {\r\n    return <C extends CustomElementConstructor>(\r\n        elementCtor: C\r\n    ) => {\r\n        const {name, options} = init;\r\n        if (!customElements.get(name)) {\r\n            customElements.define(\r\n                name,\r\n                elementCtor,\r\n                options\r\n            );\r\n        }\r\n        return elementCtor;\r\n    }\r\n}\r\n\r\nfunction *subtreeNodes(node: Node): Generator<Node> {\r\n    yield node;\r\n    const childNodes = node.childNodes;\r\n    const childNodesCount = childNodes.length;\r\n    let childIndex = 0;\r\n    while (childIndex < childNodesCount) {\r\n        const child = childNodes.item(childIndex);\r\n        if (child !== null) {\r\n            yield * subtreeNodes(child);\r\n        }\r\n        childIndex++;\r\n    }\r\n}\r\n\r\nfunction *ancestorNodes(node: Node): Generator<Node> {\r\n    const {parentNode} = node;\r\n    if (parentNode) {\r\n        yield parentNode;\r\n        yield *ancestorNodes(parentNode);\r\n    }\r\n}\r\n\r\ninterface QueryPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryProperty: QueryPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(propertyKey);\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return this.shadowRoot!.querySelector(selector);\r\n        } : function(this: HTMLElement) {\r\n            return this.querySelector(selector);\r\n        }\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\ninterface QueryAllPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryAllProperty: QueryAllPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(propertyKey);\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return Array.from(this.shadowRoot!.querySelectorAll(selector));\r\n        } : function(this: HTMLElement) {\r\n            return Array.from(this.querySelectorAll(selector));\r\n        };\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\nfunction fragment(...nodes: (Node | string)[]): DocumentFragment {\r\n    const fragment = document.createDocumentFragment();\r\n    fragment.append(...nodes);\r\n    return fragment;\r\n}\r\n\r\nfunction textNode(text: string): Node {\r\n    return document.createTextNode(text);\r\n}\r\n\r\ninterface HTMLElementInit {\r\n    options?: ElementCreationOptions,\r\n    attributes?: {\r\n        [name: string]: number | string | boolean | undefined\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    children?: Node | string | (Node | string)[] | NodeList | ReactiveChildElements,\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction element<E extends HTMLElementTagNameMap[K], K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): E;\r\nfunction element(\r\n    tagName: string, init?: HTMLElementInit): HTMLElement;\r\nfunction element<K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): HTMLElementTagNameMap[K] {\r\n    if (init) {\r\n        const {options, attributes, dataset, children, listeners} = init;\r\n        const element = document.createElement(tagName, options);\r\n        if (attributes) {\r\n            Object.entries(attributes).forEach(([attributeName, attributeValue]) => {\r\n                if (attributeValue !== undefined) {\r\n                    if (typeof attributeValue === \"boolean\") {\r\n                        element.toggleAttribute(camelToTrain(attributeName), attributeValue);\r\n                    }\r\n                    else {\r\n                        element.setAttribute(camelToTrain(attributeName), String(attributeValue));\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        if (dataset) {\r\n            const {dataset: elementDataset} = element;\r\n            Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                elementDataset[datasetEntry_i] = String(dataset[datasetEntry_i]);\r\n            });\r\n        }\r\n        if (children) {\r\n            if (typeof children === \"function\") {\r\n                element.append(...children(element));\r\n            }\r\n            else if (typeof children === \"object\" && \"length\" in children) {\r\n                element.append(...Array.from(children));\r\n            }\r\n            else {\r\n                element.append(children);\r\n            }\r\n        }\r\n        if (listeners) {\r\n            Object.entries(listeners).forEach(([name_i, listener_i]) => {\r\n                if (Array.isArray(listener_i)) {\r\n                    element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                }\r\n                else {\r\n                    element.addEventListener(name_i, listener_i);\r\n                }\r\n            });\r\n        }\r\n        return element;\r\n    }\r\n    return document.createElement(tagName);\r\n}\r\n\r\nconst reactiveElementsMap = new WeakMap<ModelNode, {\r\n    observerOptions: ModelChangeObserverOptions,\r\n    reactiveElementsArray: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }[]\r\n}>();\r\n\r\nconst reactiveElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    model: ModelNode,\r\n    reactiveElement: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }\r\n}) => {\r\n    const {model, reactiveElement} = heldValue;\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    if (reactiveElementsMapEntry !== undefined) {\r\n        const {reactiveElementsArray} = reactiveElementsMapEntry;\r\n        reactiveElementsArray.splice(reactiveElementsArray.indexOf(reactiveElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveElementsPropertyObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    records.forEach((record_i) => {\r\n        const {target, propertyName, oldValue, newValue} = record_i;\r\n        const {reactiveElementsArray} = reactiveElementsMap.get(target)!;\r\n        reactiveElementsArray.forEach(reactiveElement_i => {\r\n            const {elementRef, react, properties} = reactiveElement_i;\r\n            const element = elementRef.deref();\r\n            if (element) {\r\n                if (properties.includes(propertyName!)) {\r\n                    react(element, propertyName!, oldValue, newValue);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveElement<M extends ModelNode, E extends Element, K extends string>(\r\n    model: M,\r\n    element: E,\r\n    properties: K[],\r\n    react: (object: E, property: K, oldValue: any, newValue: any) => void\r\n): E;\r\nfunction reactiveElement<M extends ModelNode, E extends Element>(\r\n    model: M,\r\n    element: E,\r\n    properties: string[],\r\n    react: (element: E, property: string, oldValue: any, newValue: any) => void\r\n): E {\r\n    const elementRef = new WeakRef(element);\r\n    const reactiveElement = {elementRef, react, properties};\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    reactiveElementsFinalizationRegistry.register(element, {model, reactiveElement});\r\n    if (!reactiveElementsMapEntry) {\r\n        const observerOptions = {\r\n            properties: true,\r\n            propertiesFilter: properties\r\n        };\r\n        const reactiveElementsArray = [reactiveElement];\r\n        reactiveElementsMap.set(model, {observerOptions, reactiveElementsArray});\r\n        reactiveElementsPropertyObserver.observe(model, observerOptions);\r\n    }\r\n    else {\r\n        const {reactiveElementsArray, observerOptions} = reactiveElementsMapEntry;\r\n        const {propertiesFilter} = observerOptions;\r\n        reactiveElementsArray.push(reactiveElement);\r\n        observerOptions.propertiesFilter = propertiesFilter ?\r\n            propertiesFilter.concat(properties.filter(\r\n                property_i => !propertiesFilter.includes(property_i)\r\n            )) : Array.from(new Set(properties));\r\n    }\r\n    properties.forEach((property_i) => {\r\n        if (property_i in model) {\r\n            const value = Reflect.get(model, property_i, model);\r\n            if (value !== undefined) {\r\n                react(element, <any>property_i, <any>undefined, value);\r\n            }\r\n        }\r\n    });\r\n    return element;\r\n}\r\n\r\ninterface ReactiveChildElements {\r\n    (parent: Node & ParentNode): (Node | string)[]\r\n}\r\n\r\nconst reactiveChildElementsMap = new WeakMap<ModelList, {\r\n    reactiveChildElementsArray: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }[]\r\n}>();\r\n\r\nconst reactiveChildElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    list: ModelList,\r\n    reactiveChildElement: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }\r\n}) => {\r\n    const {list, reactiveChildElement} = heldValue;\r\n    const reactiveChildrenElementsMapEntry = reactiveChildElementsMap.get(list);\r\n    if (reactiveChildrenElementsMapEntry) {\r\n        const {reactiveChildElementsArray} = reactiveChildrenElementsMapEntry;\r\n        reactiveChildElementsArray.splice(reactiveChildElementsArray.indexOf(reactiveChildElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveChildElementsObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    let range: null | Range = null;\r\n    Array.from(records.values()).forEach((record_i) => {\r\n        const {target} = record_i;\r\n        const list = <ModelList>target;\r\n        const {length: listLength} = list;\r\n        const {reactiveChildElementsArray} = reactiveChildElementsMap.get(list)!;\r\n        reactiveChildElementsArray.forEach((reactiveChildElements_i) => {\r\n            const {parentRef, mapping, placeholder} = reactiveChildElements_i;\r\n            const parent = parentRef.deref();\r\n            if (parent) {\r\n                const {firstChild, children} = parent;\r\n                const {length: childrenCount} = children;\r\n                if (placeholder && listLength > 0 && firstChild == placeholder) {\r\n                    parent.removeChild(placeholder);\r\n                }\r\n                const {changeType, LIST_INSERT, LIST_REMOVE, LIST_SORT} = record_i;\r\n                switch (changeType) {\r\n                    case LIST_INSERT: {\r\n                        const {insertedIndex, insertedItems} = record_i;\r\n                        const insertedItemsArray = Array.from(insertedItems.values()).map(mapping);\r\n                        const {length: childrenCount} = children;\r\n                        if (insertedIndex < childrenCount) {\r\n                            children[insertedIndex].before(...insertedItemsArray);\r\n                        }\r\n                        else {\r\n                            parent.append(...insertedItemsArray);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_REMOVE: {\r\n                        const {removedIndex, removedItems} = record_i;\r\n                        const {length: removedCount} = removedItems;\r\n                        range = range ?? document.createRange();\r\n                        const removeEndIndex = removedIndex + (removedCount - 1);\r\n                        if (removeEndIndex < childrenCount) {\r\n                            range.setStartBefore(children[removedIndex]);\r\n                            range.setEndAfter(children[removeEndIndex]);\r\n                            range.deleteContents();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_SORT: {\r\n                        const {sortedIndices} = record_i;\r\n                        const childrenArray = Array.from(children);\r\n                        parent.append(\r\n                            ...sortedIndices.filter(\r\n                                index_i => index_i < childrenCount\r\n                            ).map(\r\n                                index_i => childrenArray[index_i]\r\n                            )\r\n                        );\r\n                        break;\r\n                    }\r\n                }\r\n                if (listLength == 0 && placeholder) {\r\n                    parent.append(placeholder);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveChildElements<Model extends ModelNode>(\r\n    list: ModelList<Model>,\r\n    mapping: (item: Model) => Element,\r\n    placeholder?: Element\r\n): ReactiveChildElements {\r\n    return (parent: Node & ParentNode) => {\r\n        const parentRef = new WeakRef(parent);\r\n        const reactiveChildElementsMapEntry = reactiveChildElementsMap.get(list);\r\n        const reactiveChildElement = {parentRef, mapping, placeholder};\r\n        reactiveChildElementsFinalizationRegistry.register(parent, {list, reactiveChildElement});\r\n        if (!reactiveChildElementsMapEntry) {\r\n            const reactiveChildElementsArray = [reactiveChildElement];\r\n            reactiveChildElementsMap.set(list, {reactiveChildElementsArray});\r\n            reactiveChildElementsObserver.observe(list, {\r\n                childList: true\r\n            });\r\n        }\r\n        else {\r\n            const {reactiveChildElementsArray} = reactiveChildElementsMapEntry;\r\n            reactiveChildElementsArray.push(reactiveChildElement);\r\n        }\r\n        return list.length == 0 && placeholder ?\r\n            [placeholder] : Array.from(list.values()).map(mapping);\r\n    }\r\n}\r\n\r\ninterface AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n    attach(element: Element): void;\r\n    detach(element: Element): void;\r\n}\r\n\r\ntype AttributeType = \"string\" | \"boolean\" | \"list\";\r\n\r\nfunction areAttributesMatching(\r\n    referenceAttributeType: AttributeType,\r\n    referenceAttributeName: string, referenceAttributeValue: string,\r\n    attributeName: string, attributeValue: string | null): boolean {\r\n    if (referenceAttributeName == attributeName) {\r\n        switch (referenceAttributeType) {\r\n            case \"boolean\":\r\n                return referenceAttributeValue == \"\" && attributeValue == \"\";\r\n            case \"string\":\r\n                return referenceAttributeValue !== \"\" && (referenceAttributeValue == attributeValue);\r\n            case \"list\":\r\n                return (referenceAttributeValue !== \"\" && attributeValue !== null) && new RegExp(`${referenceAttributeValue}\\s*?`, \"g\").test(attributeValue );\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nclass AttributeMutationMixinBase implements AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n\r\n    constructor(attributeName: string, attributeType: AttributeType = \"boolean\", attributeValue: string = \"\") {\r\n        this.attributeName = attributeName;\r\n        this.attributeType = attributeType;\r\n        this.attributeValue = attributeValue;\r\n    }\r\n\r\n    attach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n\r\n    detach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n}","import { AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEActionElement };\r\nexport { ActionType };\r\n\r\ninterface HTMLEActionElementConstructor {\r\n    prototype: HTMLEActionElement;\r\n    new(): HTMLEActionElement;\r\n}\r\n\r\ninterface HTMLEActionElement extends HTMLElement {\r\n    name: string;\r\n    value: string;\r\n    checked: boolean;\r\n    type: string;\r\n    disabled: boolean;\r\n    hotkey: string;\r\n\r\n    trigger(): void;\r\n    enable(): void;\r\n    disable(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"trigger\": Event;\r\n    }\r\n}\r\n\r\ntype ActionType = \"button\" | \"checkbox\" | \"radio\" | \"select\";\r\n\r\nclass HTMLEActionElementBase extends HTMLElement implements HTMLEActionElement {\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    hotkey!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"button\"})\r\n    type!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    checked!: boolean;\r\n\r\n    trigger(): void {\r\n        if (!this.disabled) {\r\n            switch (this.type) {\r\n                case \"checkbox\":\r\n                    this.checked = !this.checked;\r\n                    break;\r\n                case \"radio\":\r\n                    this.checked = true;\r\n                    break;\r\n            }\r\n            this.dispatchEvent(new Event(\"trigger\", {\r\n                bubbles: true\r\n            }));\r\n        }\r\n    }\r\n\r\n    enable(): void {\r\n        this.disabled = false;\r\n    }\r\n\r\n    disable(): void {\r\n        this.disabled = true;\r\n    }\r\n}\r\n\r\nvar HTMLEActionElement: HTMLEActionElementConstructor = HTMLEActionElementBase;","export { Key };\r\nexport { KeyModifier };\r\nexport { HotKey };\r\nexport { MouseButton };\r\n\r\nenum Key {\r\n    A = \"a\",\r\n    B = \"b\",\r\n    C = \"c\",\r\n    D = \"d\",\r\n    E = \"e\",\r\n    F = \"f\",\r\n    G = \"g\",\r\n    H = \"h\",\r\n    I = \"i\",\r\n    J = \"j\",\r\n    K = \"k\",\r\n    L = \"l\",\r\n    M = \"m\",\r\n    O = \"o\",\r\n    P = \"p\",\r\n    Q = \"q\",\r\n    R = \"r\",\r\n    S = \"s\",\r\n    T = \"t\",\r\n    U = \"u\",\r\n    V = \"v\",\r\n    W = \"w\",\r\n    X = \"x\",\r\n    Y = \"y\",\r\n    Z = \"z\",\r\n    ENTER = \"Enter\",\r\n    BACKSPACE = \"Backspace\",\r\n    ARROW_DOWN = \"ArrowDown\",\r\n    ARROW_LEFT = \"ArrowLeft\",\r\n    ARROW_RIGHT = \"ArrowRight\",\r\n    ARROW_UP = \"ArrowUp\",\r\n    SHIFT = \"Shift\"\r\n}\r\n\r\nenum KeyModifier {\r\n    Alt = \"Alt\",\r\n    Control = \"Control\",\r\n    Shift = \"Shift\"\r\n}\r\n\r\nenum MouseButton {\r\n    LEFT = 1,\r\n    WHEEL = 2,\r\n    RIGHT = 3,\r\n    FORWARD = 4,\r\n    BACK = 5\r\n}\r\n\r\nclass HotKey {\r\n    readonly key: Key;\r\n    readonly mod1?: KeyModifier;\r\n    readonly mod2?: KeyModifier;\r\n\r\n    constructor(key: Key, mod1?: KeyModifier, mod2?: KeyModifier) {\r\n        this.key = key;\r\n        this.mod1 = mod1;\r\n        this.mod2 = mod2;\r\n    }\r\n\r\n    toString(): string {\r\n        return `${this.mod1 ? `${this.#modifierString(this.mod1)}+` : \"\"}${this.mod2 ? `${this.#modifierString(this.mod2)}+` : \"\"}${(this.key.length == 1) ? this.key.toUpperCase() : this.key}`;\r\n    }\r\n\r\n    test(event: KeyboardEvent): boolean {\r\n        return (!this.mod1 || this.#testModifier(this.mod1, event)) && (!this.mod2 || this.#testModifier(this.mod2, event)) && event.key == this.key;\r\n    }\r\n\r\n    #modifierString(mod: KeyModifier): string {\r\n        switch (mod) {\r\n            case KeyModifier.Control:\r\n                return \"Ctrl\";\r\n            default:\r\n                return mod;\r\n        }\r\n    }\r\n\r\n    #testModifier(mod: KeyModifier, event: KeyboardEvent): boolean {\r\n        switch (mod) {\r\n            case \"Alt\":\r\n                return event.altKey;\r\n            case \"Control\":\r\n                return event.ctrlKey;\r\n            case \"Shift\":\r\n                return event.shiftKey;\r\n            default:\r\n                return true;\r\n        }\r\n    }\r\n}","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEGridCellElement };\r\n\r\ninterface HTMLEGridCellElementConstructor {\r\n    prototype: HTMLEGridCellElement;\r\n    new(): HTMLEGridCellElement;\r\n}\r\n\r\ninterface HTMLEGridCellElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n    headers: string;\r\n    posinset: number;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridcell\": HTMLEGridCellElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridcell\"\r\n})\r\nclass HTMLEGridCellElementBase extends HTMLElement implements HTMLEGridCellElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    headers!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridCellElement: HTMLEGridCellElementConstructor = HTMLEGridCellElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\n\r\nexport { HTMLEGridRowGroupElement };\r\n\r\ninterface HTMLEGridRowGroupElementConstructor {\r\n    prototype: HTMLEGridRowGroupElement;\r\n    new(): HTMLEGridRowGroupElement;\r\n}\r\n\r\ninterface HTMLEGridRowGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrowgroup\": HTMLEGridRowGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrowgroup\"\r\n})\r\nclass HTMLEGridRowGroupElementBase extends HTMLElement implements HTMLEGridRowGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                            /*display: flex;\r\n                            flex-direction: column;*/\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowGroupElement: HTMLEGridRowGroupElementConstructor = HTMLEGridRowGroupElementBase;","import { CustomElement, AttributeProperty, QueryProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\n\r\nexport { HTMLEMenuItemElement };\r\nexport { EMenuItem };\r\n\r\ninterface HTMLEMenuItemElementConstructor {\r\n    prototype: HTMLEMenuItemElement;\r\n    new(): HTMLEMenuItemElement;\r\n}\r\n\r\ninterface HTMLEMenuItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    value: string;\r\n    hotkey: string;\r\n    disabled: boolean;\r\n    checked: boolean;\r\n    expanded: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitem\": HTMLEMenuItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitem\"\r\n})\r\nclass HTMLEMenuItemElementBase extends HTMLElement implements HTMLEMenuItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    hotkey!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    checked!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"button\", observed: true})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"icon\"\r\n                }\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"label\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"arrow\"\r\n                }\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n    }\r\n\r\n    @QueryProperty({selector: \":scope > e-menu[slot=menu]\"})\r\n    readonly menu!: HTMLEMenuElement | null;\r\n\r\n    toggle(force?: boolean): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                const expand = force ?? !expanded;\r\n                this.expanded = expand;\r\n                if (expand) {\r\n                    this.#positionMenu();\r\n                }\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {type} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (!this.expanded) {\r\n                    this.expanded = true;\r\n                    this.#positionMenu();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {type} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (this.expanded) {\r\n                    this.expanded = false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const {type} = this;\r\n            if (type == \"menu\") {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const closestMenu = this.closest(\"e-menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    const overflowX = itemRight + menuWidth - clientWidth;\r\n                    const overflowY = itemTop + menuHeight - clientHeight;\r\n                    menuStyle.setProperty(\"left\", `${\r\n                        overflowX > 0 ?\r\n                        itemLeft - menuWidth - closestMenuLeft :\r\n                        itemRight - closestMenuLeft\r\n                    }px`);\r\n                    const menuComputedStyle = window.getComputedStyle(menu);\r\n                    const {paddingTop, paddingBottom} = menuComputedStyle;\r\n                    const menuPaddingTop = parseFloat(paddingTop);\r\n                    const menuPaddingBottom = parseFloat(paddingBottom);\r\n                    menuStyle.setProperty(\"top\", `${\r\n                        overflowY > 0 ?\r\n                        itemBottom - menuHeight - closestMenuTop + menuPaddingBottom :\r\n                        itemTop - closestMenuTop - menuPaddingTop\r\n                    }px`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target == this) {\r\n            const {type} = this;\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.checked = !this.checked;\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.checked = true;\r\n                    break;\r\n                }\r\n                case \"menu\":\r\n                case \"submenu\": {\r\n                    this.toggle();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemElement: HTMLEMenuItemElementConstructor = HTMLEMenuItemElementBase;\r\n\r\ninterface EMenuItemConstructor {\r\n    prototype: HTMLEMenuItemElement;\r\n    new(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    button(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    checkbox(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    radio(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    menu(init: {\r\n        name: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    submenu(init: {\r\n        name: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n}\r\n\r\nvar EMenuItem = <EMenuItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menu} = init;\r\n        if (menu) {\r\n            menu.slot = \"menu\";\r\n        }\r\n        return element(\"e-menuitem\", {\r\n            attributes: {\r\n                tabindex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type\r\n            },\r\n            children: menu ? [\r\n                label,\r\n                menu\r\n            ] : [\r\n                label\r\n            ],\r\n            listeners: {\r\n                trigger: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemElement.prototype,\r\n        button(init: {\r\n            name: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menu(init: {\r\n            name: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"menu\"\r\n            });\r\n        },\r\n        submenu(init: {\r\n            name: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"submenu\"\r\n            });\r\n        }\r\n    }\r\n);","import { element, CustomElement, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuItemElement, EMenuItem } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuItemGroupElement };\r\nexport { EMenuItemGroup };\r\n\r\ninterface HTMLEMenuItemGroupElementConstructor {\r\n    prototype: HTMLEMenuItemGroupElement;\r\n    new(): HTMLEMenuItemGroupElement;\r\n}\r\n\r\ninterface HTMLEMenuItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    label: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitemgroup\": HTMLEMenuItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitemgroup\"\r\n})\r\nclass HTMLEMenuItemGroupElementBase extends HTMLElement implements HTMLEMenuItemGroupElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            flex-direction: column;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEMenuItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEMenuItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            //item_i.index = i;\r\n        });\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\":\r\n                const label = this.shadowRoot.querySelector(\"[part=label]\");\r\n                if (label) {\r\n                    label.textContent = newValue;\r\n                }\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemGroupElement: HTMLEMenuItemGroupElementConstructor = HTMLEMenuItemGroupElementBase;\r\n\r\ninterface EMenuItemGroupConstructor {\r\n    prototype: HTMLEMenuItemGroupElement;\r\n    new(init: {\r\n        name?: string;\r\n        items: HTMLEMenuItemElement[];\r\n    }): HTMLEMenuItemGroupElement;\r\n    radios(init: {name: string, items: {label: string, value: string}[]}): HTMLEMenuItemGroupElement;\r\n}\r\n\r\nvar EMenuItemGroup = <EMenuItemGroupConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string,\r\n        items: HTMLEMenuItemElement[]\r\n    }) {\r\n        const {name, items} = init;\r\n        return element(\"e-menuitemgroup\", {\r\n            attributes: {\r\n                name: name\r\n            },\r\n            children: items\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemGroupElement.prototype,\r\n        radios: (init: {\r\n            name: string,\r\n            items: {\r\n                label: string,\r\n                value: string\r\n            }[]\r\n        }) => {\r\n            const {name, items} = init;\r\n            return element(\"e-menuitemgroup\", {\r\n                attributes: {\r\n                    name: name\r\n                },\r\n                children: items.map(\r\n                    ({label, value}) => new EMenuItem({name, label, type: \"radio\", value})\r\n                )\r\n            });\r\n        }\r\n    }\r\n);","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuElement };\r\nexport { EMenu };\r\n\r\ninterface HTMLEMenuElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    items(): HTMLEMenuItemElement[];\r\n    name: string;\r\n    contextual: boolean;\r\n    positionContextual(x: number, y: number): void;\r\n}\r\n\r\ninterface HTMLEMenuElementConstructor {\r\n    prototype: HTMLEMenuElement;\r\n    new(): HTMLEMenuElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menu\": HTMLEMenuElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar toggleTimeouts: WeakMap<HTMLEMenuItemElement, {clear(): void;}>;\r\n\r\n@CustomElement({\r\n    name: \"e-menu\"\r\n})\r\nclass HTMLEMenuElementBase extends HTMLElement implements HTMLEMenuElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    items(): HTMLEMenuItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        ));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        const {activeIndex} = this;\r\n        return this.querySelector<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem:focus-within\"\r\n        ) ?? activeIndex > -1 ? this.items()[activeIndex] ?? null : null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    contextual!: boolean;\r\n\r\n    #walker: TreeWalker;\r\n    #activeIndex: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        toggleTimeouts = new WeakMap();\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        this.#activeIndex = -1;\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"mouseout\", this.#handleMouseOutEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    positionContextual(x: number, y: number): void {\r\n        const {style} = this;\r\n        const {width: menuWidth, height: menuHeight} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        const left = x + scrollX;\r\n        const top = y + scrollY;\r\n        const {clientWidth, clientHeight} = document.body;\r\n        const overflowX = left + menuWidth - clientWidth;\r\n        const overflowY = top + menuHeight - clientHeight;\r\n        style.setProperty(\"left\", `${overflowX > 0 ? left - menuWidth : left}px`);\r\n        style.setProperty(\"top\", `${overflowY > 0 ? top - menuHeight : top}px`);\r\n    }\r\n\r\n    #collapseSubmenus(): void {\r\n        this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem[expanded]\"\r\n        )\r\n        .forEach((item_i) => {\r\n            item_i.collapse();\r\n        });\r\n    }\r\n\r\n    #isClosestMenu(target: Element): boolean {\r\n        return target.closest(\":is(e-menu)\") == this;\r\n    }\r\n\r\n    #nearestItem(target: Element): HTMLEMenuItemElement | null {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextNode();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        return menu instanceof HTMLEMenuElementBase ?\r\n            menu.#firstItem() :\r\n            null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        if (item !== null) {\r\n            this.#activeIndex = this.items().indexOf(item);\r\n        }\r\n    }\r\n\r\n    async #setItemTimeout(item: HTMLEMenuItemElement, delay?: number): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => {\r\n                resolve(undefined);\r\n            }, delay ?? 0);\r\n            toggleTimeouts.set(item, {\r\n                clear: () => {\r\n                    clearTimeout(timeout);\r\n                    reject();\r\n                }\r\n            });\r\n        }).then(() => {\r\n            toggleTimeouts.delete(item);\r\n        });\r\n    }\r\n\r\n    #clearItemTimeout(item: HTMLEMenuItemElement): void {\r\n        const timeout = toggleTimeouts.get(item);\r\n        if (typeof timeout !== \"undefined\") {\r\n            toggleTimeouts.delete(item);\r\n            timeout.clear();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const {contextual} = this;\r\n            if (contextual) {\r\n                try {\r\n                    this.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const isClosestMenu = this.#isClosestMenu(target);\r\n                if (isClosestMenu) {\r\n                    const {type, name, value} = target;\r\n                    if (type == \"radio\") {\r\n                        this.querySelectorAll<HTMLEMenuItemElement>(\r\n                            `:is(:scope, :scope > e-menuitemgroup) > e-menuitem[type=radio][name=${name}]`\r\n                        )\r\n                        .forEach((radio_i) => {\r\n                            radio_i.checked = radio_i.value == value;\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem) {\r\n                this.#setActiveItem(nearestItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const {contextual} = this;\r\n            if (contextual) {\r\n                try {\r\n                    this.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const {activeItem} = this;\r\n                if (activeItem?.expanded) {\r\n                    activeItem.collapse();\r\n                }\r\n                this.#setActiveItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.#firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem() :\r\n                    this.#firstItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                firstItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                lastItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            activeItem.expand();\r\n                            if (activeItem.expanded) {\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            if (!activeItem.expanded) {\r\n                                activeItem.expand();\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                                event.stopPropagation();\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOutEvent(event: MouseEvent): void {\r\n        const {target, relatedTarget} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem !== null) {\r\n                if (nearestItem.type == \"submenu\" &&\r\n                    !nearestItem.expanded) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLEMenuElement\r\n                ) == this;\r\n                if (isTargetClosestMenu) {\r\n                    const {activeItem} = this;\r\n                    if (activeItem?.type == \"submenu\" &&\r\n                        activeItem.expanded) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, 400)\r\n                            .then(() => {\r\n                                activeItem.collapse();\r\n                            })\r\n                            .catch(() => undefined);\r\n                    }\r\n                    const {clientX, clientY} = event;\r\n                    const {left, right, top, bottom} = this.getBoundingClientRect();\r\n                    const intersectsWithMouse = !(\r\n                        left > clientX || right < clientX || top > clientY || bottom < clientY\r\n                    );\r\n                    const containsRelatedTarget = this.contains(<Node>relatedTarget);\r\n                    if (intersectsWithMouse && containsRelatedTarget) {\r\n                        if (relatedTarget instanceof HTMLEMenuElement && relatedTarget !== this) {\r\n                            relatedTarget.focus({preventScroll: true});\r\n                        }\r\n                        else {\r\n                            this.focus({preventScroll: true});\r\n                            this.#setActiveItem(null);\r\n                        }\r\n                    }\r\n                    if (!intersectsWithMouse) {\r\n                        this.focus({preventScroll: true});\r\n                        this.#setActiveItem(null);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem !== null) {\r\n                if (nearestItem.type == \"submenu\" && nearestItem.expanded) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLEMenuElement\r\n                ) == this;\r\n                if (isTargetClosestMenu) {\r\n                    const {activeItem} = this;\r\n                    if (activeItem?.type == \"submenu\" &&\r\n                        activeItem.expanded && \r\n                        !activeItem.contains(<Node>target)) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, 400)\r\n                            .then(() => {\r\n                                activeItem.collapse();\r\n                            })\r\n                            .catch(() => undefined);\r\n                    }\r\n                    this.#setActiveItem(nearestItem);\r\n                    nearestItem.focus({preventScroll: true});\r\n                    if (nearestItem.type == \"submenu\") {\r\n                        if (!nearestItem.expanded) {\r\n                            this.#clearItemTimeout(nearestItem);\r\n                            this.#setItemTimeout(nearestItem, 200)\r\n                                .then(() => {\r\n                                    const {activeItem} = this;\r\n                                    this.#collapseSubmenus();\r\n                                    if (activeItem) {\r\n                                        this.#clearItemTimeout(activeItem);\r\n                                        activeItem.expand();\r\n                                        activeItem.menu?.focus({preventScroll: true});\r\n                                    }\r\n                                })\r\n                                .catch(() => undefined);\r\n                        }\r\n                        else {\r\n                            nearestItem.menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuElement: HTMLEMenuElementConstructor = HTMLEMenuElementBase;\r\n\r\ninterface EMenuConstructor {\r\n    prototype: HTMLEMenuElement;\r\n    new(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }): HTMLEMenuElement;\r\n}\r\n\r\nvar EMenu = <EMenuConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }) {\r\n        const {name, children} = init;\r\n        return element(\"e-menu\", {\r\n            attributes: {\r\n                name: name,\r\n                tabindex: -1,\r\n            },\r\n            children: children\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuElement.prototype,\r\n    }\r\n);","import { AttributeProperty, CustomElement, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\n\r\nexport { HTMLEGridRowElement };\r\n\r\ninterface HTMLEGridRowElementConstructor {\r\n    prototype: HTMLEGridRowElement;\r\n    new(): HTMLEGridRowElement;\r\n}\r\n\r\ninterface HTMLEGridRowElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    active: boolean;\r\n    selected: boolean;\r\n    posinset: number;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrow\": HTMLEGridRowElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrow\"\r\n})\r\nclass HTMLEGridRowElementBase extends HTMLElement implements HTMLEGridRowElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    #menu: HTMLEMenuElement | null;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row;\r\n                        }\r\n\r\n                        :host([droptarget]) {\r\n                            background-color: gainsboro;\r\n                        }\r\n                        \r\n                        :host(:hover) {\r\n                            background-color: rgba(135, 206, 250, 0.2);\r\n                        }\r\n\r\n                        :host([active]) {\r\n                            outline: 1px solid rgb(135, 206, 250);\r\n                            outline-offset: -1px;\r\n                        }\r\n\r\n                        :host([selected]) {\r\n                            background-color: rgba(135, 206, 250, 0.4);\r\n                            outline: 1px solid rgb(135, 206, 250);\r\n                            outline-offset: -1px;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\"),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#menu = null;\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"menu\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#menu = element instanceof HTMLEMenuElement ? element : null;\r\n                break;\r\n            }\r\n            default: {\r\n                const assignedCells = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n                    .assignedElements()\r\n                    .filter(\r\n                        element_i => element_i instanceof HTMLEGridCellElement\r\n                    );\r\n                assignedCells.forEach((cell_i, i) => {\r\n                    cell_i.posinset = i;\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowElement: HTMLEGridRowElementConstructor = HTMLEGridRowElementBase;","import { HTMLEGridElement } from \"./Grid\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\n\r\nexport { HTMLEGridCellCollection };\r\n\r\ninterface HTMLEGridCellCollectionConstructor {\r\n    prototype: HTMLEGridCellCollection;\r\n    new(root: HTMLElement): HTMLEGridCellCollection;\r\n}\r\n\r\ninterface HTMLEGridCellCollection {\r\n    length: number;\r\n    item(index: number): HTMLEGridCellElement | null;\r\n    namedItem(name: string): HTMLEGridCellElement | null;\r\n    values(): IterableIterator<HTMLEGridCellElement>;\r\n}\r\n\r\nclass HTMLEGridCellCollectionBase implements HTMLEGridCellCollection {\r\n    #walker: TreeWalker;\r\n\r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridCellElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEGridCellElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEGridCellElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEGridCellElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEGridCellElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEGridCellElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEGridCellElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEGridCellElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEGridCellElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridCellCollection: HTMLEGridCellCollectionConstructor =  HTMLEGridCellCollectionBase;","import { HTMLEGridElement } from \"./Grid\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\n\r\nexport { HTMLEGridRowCollection };\r\n\r\ninterface HTMLEGridRowCollectionConstructor {\r\n    prototype: HTMLEGridRowCollection;\r\n    new(root: HTMLElement): HTMLEGridRowCollection;\r\n}\r\n\r\ninterface HTMLEGridRowCollection {\r\n    length: number;\r\n    item(index: number): HTMLEGridRowElement | null;\r\n    namedItem(name: string): HTMLEGridRowElement | null;\r\n    values(): IterableIterator<HTMLEGridRowElement>;\r\n}\r\n\r\nclass HTMLEGridRowCollectionBase implements HTMLEGridRowCollection {\r\n    #walker: TreeWalker;\r\n    \r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEGridRowElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEGridRowElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEGridRowElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEGridRowElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEGridRowElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEGridRowElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEGridRowElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEGridRowElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowCollection: HTMLEGridRowCollectionConstructor =  HTMLEGridRowCollectionBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\n\r\nexport { HTMLEGridBodyElement };\r\n\r\ninterface HTMLEGridBodyElementConstructor {\r\n    prototype: HTMLEGridBodyElement;\r\n    new(): HTMLEGridBodyElement;\r\n}\r\n\r\ninterface HTMLEGridBodyElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridbody\": HTMLEGridBodyElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridbody\"\r\n})\r\nclass HTMLEGridBodyElementBase extends HTMLElement implements HTMLEGridBodyElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridBodyElement: HTMLEGridBodyElementConstructor = HTMLEGridBodyElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridHeadElement } from \"./GridHead\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\n\r\nexport { HTMLEGridElement };\r\n\r\ninterface HTMLEGridElementConstructor {\r\n    prototype: HTMLEGridElement;\r\n    new(): HTMLEGridElement;\r\n}\r\n\r\ninterface HTMLEGridElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly body: HTMLEGridBodyElement | null;\r\n    readonly head: HTMLEGridHeadElement | null\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n    readonly activeCell: HTMLEGridCellElement | null;\r\n    readonly activeCellIndex: number;\r\n    readonly activeRow: HTMLEGridRowElement | null;\r\n    readonly activeRowIndex: number;\r\n    selectby: \"cell\" | \"row\";\r\n    name: string;\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    clearSelection(): void;\r\n    selectedCells(): HTMLEGridCellElement[];\r\n    selectedRows(): HTMLEGridRowElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-grid\": HTMLEGridElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-grid\"\r\n})\r\nclass HTMLEGridElementBase extends HTMLElement implements HTMLEGridElement {\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    get activeCellIndex(): number {\r\n        return this.#activeCellIndex;\r\n    }\r\n\r\n    get activeCell(): HTMLEGridCellElement | null {\r\n        return this.cells.item(this.#activeCellIndex) ?? null;\r\n    }\r\n\r\n    get activeRowIndex(): number {\r\n        return this.#activeRowIndex;\r\n    }\r\n\r\n    get activeRow(): HTMLEGridRowElement | null {\r\n        return this.rows.item(this.#activeRowIndex) ?? null;\r\n    }\r\n\r\n    get body(): HTMLEGridBodyElement | null {\r\n        return this.querySelector<HTMLEGridBodyElement>(\":scope > e-gridbody\");\r\n    }\r\n\r\n    get head(): HTMLEGridHeadElement | null {\r\n        return this.querySelector<HTMLEGridHeadElement>(\":scope > e-gridhead\");\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"cell\"})\r\n    selectby!: \"cell\" | \"row\";\r\n\r\n    #activeCellIndex: number;\r\n    #activeRowIndex: number;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #cellsWalker: TreeWalker;\r\n    #rowsWalker: TreeWalker;\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#cellsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#cellsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#rowsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#rowsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeCellIndex = -1;\r\n        this.#activeRowIndex = -1;\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.#clearCellsSelection();\r\n        this.#clearRowsSelection();\r\n    }\r\n\r\n    selectedCells(): HTMLEGridCellElement[] {\r\n        return Array.from(this.querySelectorAll(\"e-gridcell[selected]\"));\r\n    }\r\n\r\n    selectedRows(): HTMLEGridRowElement[] {\r\n        return Array.from(this.querySelectorAll(\"e-gridrow[selected]\"));\r\n    }\r\n\r\n    #cellsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridCellElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #rowsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridRowElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getCellsRange(from: HTMLEGridCellElement, to: HTMLEGridCellElement): HTMLEGridCellElement[] {\r\n        const cells = Array.from(this.cells.values());\r\n        const fromIndex = cells.indexOf(from);\r\n        const toIndex = cells.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return cells.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #getRowsRange(from: HTMLEGridRowElement, to: HTMLEGridRowElement): HTMLEGridRowElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleRow = this.#nextRow(from);\r\n            while (nextVisibleRow && nextVisibleRow !== to) {\r\n                range.push(nextVisibleRow);\r\n                nextVisibleRow = this.#nextRow(nextVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleRow = this.#previousRow(from);\r\n            while (previousVisibleRow && previousVisibleRow !== to) {\r\n                range.push(previousVisibleRow);\r\n                previousVisibleRow = this.#previousRow(previousVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setCellsSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((selectedCell_i) => {\r\n            if (!cells.includes(selectedCell_i)) {\r\n                selectedCell_i.selected = false;\r\n            }\r\n        });\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setRowsSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((selectedRow_i) => {\r\n            if (!rows.includes(selectedRow_i)) {\r\n                selectedRow_i.selected = false;\r\n            }\r\n        });\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addCellsToSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addRowsToSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeCellsFromSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        cells.forEach((cell_i) => {\r\n            if (selectedCells.includes(cell_i)) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeRowsFromSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        rows.forEach((row_i) => {\r\n            if (selectedRows.includes(row_i)) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearCellsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((cell_i) => {\r\n            if (cell_i.selected) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearRowsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((row_i) => {\r\n            if (row_i.selected) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveCell(cell: HTMLEGridCellElement | null): void {\r\n        const {activeCell, cells} = this;\r\n        if (activeCell !== null && activeCell !== cell) {\r\n            activeCell.active = false;\r\n            activeCell.tabIndex = -1;\r\n        }\r\n        else if (cell !== null) {\r\n            const cellsWalker = this.#cellsWalker;\r\n            cellsWalker.currentNode = cell;\r\n            cell.active = true;\r\n            cell.tabIndex = 0;\r\n            const closestRow = this.#closestRow(cell);\r\n            if (closestRow) {\r\n                this.#setActiveRow(closestRow);\r\n            }\r\n            this.#activeCellIndex = Array.from(cells.values()).indexOf(cell);\r\n        }\r\n        else {\r\n            this.#activeCellIndex = -1;\r\n        }\r\n    }\r\n\r\n    #setActiveRow(row: HTMLEGridRowElement | null): void {\r\n        const {activeRow, rows} = this;\r\n        if (activeRow !== null && activeRow !== row) {\r\n            activeRow.active = false;\r\n            activeRow.tabIndex = -1;\r\n        }\r\n        else if (row !== null) {\r\n            const rowsWalker = this.#rowsWalker;\r\n            rowsWalker.currentNode = row;\r\n            row.active = true;\r\n            row.tabIndex = 0;\r\n            this.#activeRowIndex = Array.from(rows.values()).indexOf(row);\r\n        }\r\n        else {\r\n            this.#activeRowIndex = -1;\r\n        }\r\n    }\r\n\r\n    #firstCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.firstChild();\r\n    }\r\n\r\n    #lastCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.lastChild();\r\n    }\r\n\r\n    #previousCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.previousNode();\r\n    }\r\n\r\n    #nextCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.nextNode();\r\n    }\r\n\r\n    #closestRow(cell: HTMLEGridCellElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = cell;\r\n        return <HTMLEGridRowElement | null>rowsWalker.parentNode();\r\n    }\r\n\r\n    #firstRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.firstChild();\r\n    }\r\n\r\n    #lastRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.lastChild();\r\n    }\r\n\r\n    #previousRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.previousNode();\r\n    }\r\n\r\n    #nextRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.nextNode();\r\n    }\r\n\r\n    #topCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const {cells: closestRowCells} = closestRow;\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const previousRow = this.#previousRow(closestRow);\r\n            if (previousRow) {\r\n                const {cells: previousRowCells} = previousRow;\r\n                return previousRowCells.item(\r\n                    Math.min(cellIndex, previousRowCells.length)\r\n                );\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #bottomCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const {cells: closestRowCells} = closestRow;\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const nextRow = this.#nextRow(closestRow);\r\n            if (nextRow) {\r\n                const {cells: nextRowCells} = nextRow;\r\n                return nextRowCells.item(\r\n                    Math.min(cellIndex, nextRowCells.length)\r\n                );\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent) {\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const composedPath = event.composedPath();\r\n                const targetCell = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridCellElement\r\n                ) : null;\r\n                if (targetCell instanceof HTMLEGridCellElement) {\r\n                    const selectedCells = this.selectedCells();\r\n                    if (!selectedCells.includes(targetCell)) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    targetCell.focus({preventScroll: true});\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const composedPath = event.composedPath();\r\n                const targetRow = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridRowElement\r\n                ) : null;\r\n                if (targetRow instanceof HTMLEGridRowElement) {\r\n                    const selectedRows = this.selectedRows();\r\n                    if (!selectedRows.includes(targetRow)) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    targetRow.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {ctrlKey, shiftKey} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const composedPath = event.composedPath();\r\n                const targetCell = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridCellElement\r\n                ) : null;\r\n                const selectedCells = this.selectedCells();\r\n                if (targetCell instanceof HTMLEGridCellElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetCell.selected ?\r\n                            this.#addCellsToSelection(targetCell) :\r\n                            this.#removeCellsFromSelection(targetCell);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedCell = selectedCells[selectedCells.length - 1];\r\n                        if (lastSelectedCell) {\r\n                            const range = this.#getCellsRange(\r\n                                lastSelectedCell,\r\n                                targetCell\r\n                            );\r\n                            if (range) {\r\n                                selectedCells.includes(targetCell) ?\r\n                                    this.#removeCellsFromSelection(...range) :\r\n                                    this.#addCellsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setCellsSelection(targetCell);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const selectedRows = this.selectedRows();\r\n                const composedPath = event.composedPath();\r\n                const targetRow = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridRowElement\r\n                ) : null;\r\n                if (targetRow instanceof HTMLEGridRowElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetRow.selected ?\r\n                            this.#addRowsToSelection(targetRow) :\r\n                            this.#removeRowsFromSelection(targetRow);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedRow = selectedRows[selectedRows.length - 1];\r\n                        if (lastSelectedRow) {\r\n                            const range = this.#getRowsRange(\r\n                                lastSelectedRow,\r\n                                targetRow\r\n                            );\r\n                            if (range) {\r\n                                selectedRows.includes(targetRow) ?\r\n                                    this.#removeRowsFromSelection(...range) :\r\n                                    this.#addRowsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setRowsSelection(targetRow);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {selectby, activeCell, activeRow} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    switch (selectby) {\r\n                        case \"cell\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const firstCell = firstRow ? this.#firstCell(firstRow) : null;\r\n                            const lastRow = this.#lastRow();\r\n                            const lastCell = lastRow ? this.#lastCell(lastRow) : null;\r\n                            if (firstCell && lastCell) {\r\n                                const range = this.#getCellsRange(firstCell, lastCell);\r\n                                if (range) {\r\n                                    this.#setCellsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"row\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const lastRow = this.#lastRow();\r\n                            if (firstRow && lastRow) {\r\n                                const range = this.#getRowsRange(firstRow, lastRow);\r\n                                if (range) {\r\n                                    this.#setRowsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const previousCell = this.#previousCell(activeCell);\r\n                        if (previousCell) {\r\n                            previousCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousCell.selected ?\r\n                                    this.#removeCellsFromSelection(previousCell) :\r\n                                    this.#addCellsToSelection(previousCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const nextCell = this.#nextCell(activeCell);\r\n                        if (nextCell) {\r\n                            nextCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextCell.selected ?\r\n                                    this.#removeCellsFromSelection(nextCell) :\r\n                                    this.#addCellsToSelection(nextCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const firstRow = activeRow ?? this.#firstRow();\r\n                        const topCell = activeCell ?\r\n                            this.#topCell(activeCell) :\r\n                            firstRow ?\r\n                            this.#firstCell(firstRow) :\r\n                            null;\r\n                        if (topCell) {\r\n                            topCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                topCell.selected ?\r\n                                    this.#removeCellsFromSelection(topCell) :\r\n                                    this.#addCellsToSelection(topCell);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const previousRow = activeRow ?\r\n                            this.#previousRow(activeRow) :\r\n                            this.#firstRow();\r\n                        if (previousRow) {\r\n                            previousRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousRow.selected ?\r\n                                    this.#removeRowsFromSelection(previousRow) :\r\n                                    this.#addRowsToSelection(previousRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const lastRow = activeRow ?? this.#lastRow();\r\n                        const bottomCell = activeCell ?\r\n                            this.#bottomCell(activeCell) :\r\n                            lastRow ?\r\n                            this.#lastCell(lastRow) :\r\n                            null;\r\n                            if (bottomCell) {\r\n                                bottomCell.focus({preventScroll: true});\r\n                                const {shiftKey} = event;\r\n                                if (shiftKey) {\r\n                                    bottomCell.selected ?\r\n                                        this.#removeCellsFromSelection(bottomCell) :\r\n                                        this.#addCellsToSelection(bottomCell);\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"row\": {\r\n                        const nextRow = activeRow ?\r\n                            this.#nextRow(activeRow) :\r\n                            this.#lastRow();\r\n                        if (nextRow) {\r\n                            nextRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextRow.selected ?\r\n                                    this.#removeRowsFromSelection(nextRow) :\r\n                                    this.#addRowsToSelection(nextRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const firstCell = this.#firstCell(activeRow);\r\n                            if (firstCell) {\r\n                                firstCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const firstRow = this.#firstRow();\r\n                        if (firstRow) {\r\n                            firstRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const lastCell = this.#lastCell(activeRow);\r\n                            if (lastCell) {\r\n                                lastCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const lastRow = this.#lastRow();\r\n                        if (lastRow) {\r\n                            lastRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeCell) {\r\n                            this.#setCellsSelection(activeCell);\r\n                            activeCell.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        if (activeRow) {\r\n                            this.#setRowsSelection(activeRow);\r\n                            activeRow.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        this.#clearCellsSelection();\r\n                        this.#setActiveCell(null);\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        this.#clearRowsSelection();\r\n                        this.#setActiveRow(null);\r\n                        break;\r\n                    }\r\n                }\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const {activeCell} = this;\r\n                if (activeCell && relatedTarget !== activeCell) {\r\n                    activeCell.focus();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const {activeRow} = this;\r\n                if (activeRow && relatedTarget !== activeRow) {\r\n                    activeRow.focus();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                if (target instanceof HTMLEGridCellElement) {\r\n                    this.#setActiveCell(target);\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                if (target instanceof HTMLEGridRowElement) {\r\n                    this.#setActiveRow(target);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedRows = <HTMLEGridRowElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridRowElement\r\n            );\r\n            assignedRows.forEach((row_i, i) => {\r\n                row_i.posinset = i;\r\n            });\r\n    }\r\n}\r\n\r\nvar HTMLEGridElement: HTMLEGridElementConstructor = HTMLEGridElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\n\r\nexport { HTMLEGridHeadElement };\r\n\r\ninterface HTMLEGridHeadElementConstructor {\r\n    prototype: HTMLEGridHeadElement;\r\n    new(): HTMLEGridHeadElement;\r\n}\r\n\r\ninterface HTMLEGridHeadElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridhead\": HTMLEGridHeadElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridhead\"\r\n})\r\nclass HTMLEGridHeadElementBase extends HTMLElement implements HTMLEGridHeadElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                        }\r\n                    `\r\n                    ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridHeadElement: HTMLEGridHeadElementConstructor = HTMLEGridHeadElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuBarElement };\r\n\r\ninterface HTMLEMenuBarElementConstructor {\r\n    prototype: HTMLEMenuBarElement;\r\n    new(): HTMLEMenuBarElement;\r\n}\r\n\r\ninterface HTMLEMenuBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    items(): HTMLEMenuItemElement[];\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    expanded: boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menubar\": HTMLEMenuBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menubar\"\r\n})\r\nclass HTMLEMenuBarElementBase extends HTMLElement implements HTMLEMenuBarElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    #activeIndex: number;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    items(): HTMLEMenuItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        ));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        const {activeIndex} = this;\r\n        return this.querySelector<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem:focus-within\"\r\n        ) ?? activeIndex > -1 ? this.items()[activeIndex] ?? null : null;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLEMenuItemElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        const {activeItem, expanded} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.collapse();\r\n        }\r\n        if (item !== null) {\r\n            if (expanded) {\r\n                item.expand();\r\n            }\r\n            this.#activeIndex = this.items().indexOf(item);\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    get #items(): HTMLEMenuItemElement[] {\r\n        return Array.from(\r\n            this.querySelectorAll(\":is(:scope, :scope > e-menuitemgroup) > e-menuitem\")\r\n        );\r\n    }\r\n\r\n    #isClosestMenu(target: Element): boolean {\r\n        return target.closest(\":is(e-menubar, e-menu)\") == this;\r\n    }\r\n\r\n    #nearestItem(target: Element): HTMLEMenuItemElement | null {\r\n        return this.#items.find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n    \r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof Element) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            this.#setActiveItem(nearestItem);\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, relatedTarget} = event;\r\n        if (target instanceof HTMLElement && !target.contains(<Element>relatedTarget)) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem) {\r\n                nearestItem.collapse();\r\n            }\r\n        }\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.expanded = false;\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {expanded, activeItem} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu && target !== activeItem && expanded) {\r\n                const {menu} = target;\r\n                if (menu) {\r\n                    target.expand();\r\n                    menu.focus({preventScroll: true});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {expanded, activeItem} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu) {\r\n                const isExpanded = !expanded;\r\n                this.expanded = isExpanded;\r\n                if (isExpanded) {\r\n                    if (activeItem && !activeItem.expanded) {\r\n                        activeItem.expand();\r\n                    }\r\n                    const {menu} = target;\r\n                    menu?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true})\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded} = this;\r\n        let {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.#firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem() : \r\n                    this.#lastItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    this.expanded = !expanded;\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.expanded = false;\r\n                    if (activeItem) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /*#handleTriggerEvent(): void {\r\n        const {activeItem} = this;\r\n        if (activeItem?.expanded) {\r\n            activeItem.collapse();\r\n        }\r\n        this.expanded = false;\r\n        this.focus({preventScroll: true});\r\n    }*/\r\n}\r\n\r\nvar HTMLEMenuBarElement: HTMLEMenuBarElementConstructor = HTMLEMenuBarElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuButtonElement };\r\nexport { EMenuButton };\r\n\r\ninterface HTMLEMenuButtonElementConstructor {\r\n    prototype: HTMLEMenuButtonElement;\r\n    new(): HTMLEMenuButtonElement;\r\n}\r\n\r\ninterface HTMLEMenuButtonElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    readonly firstItem: HTMLEMenuItemElement | null;\r\n    name: string;\r\n    disabled: boolean;\r\n    expanded: boolean;\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-menubutton\"\r\n})\r\nclass HTMLEMenuButtonElementBase extends HTMLElement implements HTMLEMenuButtonElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    #menu: HTMLEMenuElement | null;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#menu = null;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"icon\"\r\n                        }\r\n                    }),\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"label\"\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n\r\n\r\n    toggle(force?: boolean): void {\r\n        const expand = force ?? !this.expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n\r\n    expand(): void {\r\n        if (!this.expanded) {\r\n            this.expanded = true;\r\n            this.#positionMenu();\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        if (this.expanded) {\r\n            this.expanded = false;\r\n        }\r\n    }\r\n\r\n    get firstItem(): HTMLEMenuItemElement | null {\r\n        return this.querySelector<HTMLEMenuItemElement>(\r\n            \":scope > :is(e-menu, e-menu > e-menuitemgroup) > e-menuitem\"\r\n        );\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const overflowX = itemRight + menuWidth - clientWidth;\r\n            const overflowY = itemTop + menuHeight - clientHeight;\r\n            menuStyle.setProperty(\"left\", `${\r\n                overflowX > 0 ?\r\n                scrollX + itemRight - menuWidth :\r\n                scrollX + itemLeft\r\n            }px`);\r\n            menuStyle.setProperty(\"top\", `${\r\n                overflowY > 0 ?\r\n                scrollY + itemTop - menuHeight :\r\n                scrollY + itemBottom\r\n            }px`);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target == this) {\r\n            this.toggle();\r\n            const {expanded} = this;\r\n            if (expanded) {\r\n                this.menu?.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded} = this;\r\n        switch (key) {\r\n            case \"ArrowDown\":\r\n            case \"Enter\":\r\n                if (!expanded) {\r\n                    this.expand();\r\n                    this.firstItem?.focus({preventScroll: true});\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            case \"Escape\":\r\n                if (expanded) {\r\n                    this.collapse();\r\n                    this.focus({preventScroll: true});\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n        this.#menu = (element instanceof HTMLEMenuElement) ? element : null;\r\n    }\r\n\r\n    #handleTriggerEvent(): void {\r\n        this.collapse();\r\n        this.focus({preventScroll: true});\r\n    }\r\n}\r\n\r\nvar HTMLEMenuButtonElement: HTMLEMenuButtonElementConstructor = HTMLEMenuButtonElementBase;\r\n\r\ninterface EMenuButtonConstructor {\r\n    prototype: HTMLEMenuButtonElement;\r\n    new(init: {\r\n        menu: HTMLEMenuElement\r\n    }): HTMLEMenuButtonElement;\r\n}\r\n\r\nvar EMenuButton = <EMenuButtonConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        menu: HTMLEMenuElement\r\n    }) {\r\n        const {menu} = init;\r\n        menu.slot = \"menu\";\r\n        return element(\"e-menubutton\", {\r\n            attributes: {\r\n                tabindex: -1\r\n            },\r\n            children: [menu]\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuButtonElement.prototype,\r\n    }\r\n);","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionElement };\r\n\r\ninterface HTMLEOptionElementConstructor {\r\n    prototype: HTMLEOptionElement;\r\n    new(): HTMLEOptionElement;\r\n}\r\n\r\ninterface HTMLEOptionElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    active: boolean;\r\n    value: string;\r\n    label: string;\r\n    description: string;\r\n    disabled: boolean;\r\n    selected: boolean;\r\n    default: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-option\": HTMLEOptionElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-option\"\r\n})\r\nclass HTMLEOptionElementBase extends HTMLElement implements HTMLEOptionElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n    \r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n        \r\n    @AttributeProperty({type: String})\r\n    description!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    default!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            user-select: none;\r\n                            white-space: nowrap;\r\n                            padding: 2px 12px;\r\n                        }\r\n                        \r\n                        :host([active]) {\r\n                            color: black;\r\n                            background-color: lightgray;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            color: lightgray;\r\n                        }\r\n\r\n                        :host::before {\r\n                            display: flex;\r\n                            content: \"\";\r\n                            width: 18px;\r\n                            height: 18px;\r\n                            margin-right: 6px;\r\n\r\n                            mask-size: 18px 18px;\r\n                            -webkit-mask-size: 18px 18px;\r\n                            background-color: var(--icon-color, none);\r\n                            -webkit-mask-image: var(--icon-image, none);\r\n                            mask-image: var(--icon-image, none);\r\n                        }\r\n\r\n                        [part=\"label\"] {\r\n                            flex: auto;\r\n                            text-align: left;\r\n                        }\r\n\r\n                        :host([default])::after {\r\n                            display: inline-block;\r\n                            content: \"(default)\";\r\n                            margin-left: 24px;\r\n                            text-align: right;\r\n                        }\r\n\r\n                        [part=\"content\"] {\r\n                            flex: auto;\r\n                            display: flex;\r\n                            overflow: hidden;\r\n                            pointer-events: none;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"label\"\r\n                        }\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector<HTMLElement>(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEOptionElement: HTMLEOptionElementConstructor = HTMLEOptionElementBase;","import { CustomElement, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionGroupElement };\r\n\r\ninterface HTMLEOptionGroupElementConstructor {\r\n    prototype: HTMLEOptionGroupElement;\r\n    new(): HTMLEOptionGroupElement;\r\n}\r\n\r\ninterface HTMLEOptionGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-optiongroup\": HTMLEOptionGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-optiongroup\"\r\n})\r\nclass HTMLEOptionGroupElementBase extends HTMLElement implements HTMLEOptionGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n}\r\n\r\nvar HTMLEOptionGroupElement: HTMLEOptionGroupElementConstructor = HTMLEOptionGroupElementBase;","import { HTMLEOptionElement } from \"./Option\";\r\nimport { HTMLEOptionGroupElement } from \"./OptionGroup\";\r\nimport { HTMLESelectElement } from \"./Select\";\r\n\r\nexport { HTMLEOptionCollection };\r\n\r\ninterface HTMLEOptionCollectionConstructor {\r\n    prototype: HTMLEOptionCollection;\r\n    new(root: HTMLESelectElement): HTMLEOptionCollection;\r\n}\r\n\r\ninterface HTMLEOptionCollection {\r\n    length: number;\r\n    item(index: number): HTMLEOptionElement | null;\r\n    namedItem(name: string): HTMLEOptionElement | null;\r\n    values(): IterableIterator<HTMLEOptionElement>;\r\n}\r\n\r\nclass HTMLEOptionCollectionBase implements HTMLEOptionCollection {\r\n    #walker: TreeWalker;\r\n\r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    get value(): string {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        while (currentNode !== null) {\r\n            if (currentNode.selected) {\r\n                return currentNode.value;\r\n            }\r\n            currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    constructor(root: HTMLESelectElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEOptionElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEOptionGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEOptionElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEOptionElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEOptionElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        let currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEOptionElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEOptionElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEOptionElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEOptionCollection: HTMLEOptionCollectionConstructor =  HTMLEOptionCollectionBase;","import { HTMLEActionElement } from \"../../containers/actions/Action\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEOptionElement } from \"./Option\";\r\nimport { HTMLEOptionCollection } from \"./OptionCollection\";\r\nimport { HTMLEOptionGroupElement } from \"./OptionGroup\";\r\n\r\nexport { HTMLESelectElement };\r\n\r\ninterface HTMLESelectElement extends HTMLEActionElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly options: HTMLEOptionCollection;\r\n    readonly activeIndex: number;\r\n    readonly activeOption: HTMLEOptionElement | null;\r\n    readonly selectedIndex: number;\r\n    readonly selectedOption: HTMLEOptionElement | null;\r\n    name: string;\r\n    label: string;\r\n    value: string;\r\n    expanded: boolean;\r\n    expand(): void;\r\n    collapse(): void;\r\n    toggle(force?: boolean): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ninterface HTMLESelectElementConstructor {\r\n    prototype: HTMLESelectElement;\r\n    new(): HTMLESelectElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-select\": HTMLESelectElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-select\"\r\n})\r\nclass HTMLESelectElementBase extends HTMLEActionElement implements HTMLESelectElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly options: HTMLEOptionCollection;\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get selectedIndex(): number {\r\n        return this.#selectedIndex;\r\n    }\r\n\r\n    get activeOption(): HTMLEOptionElement | null {\r\n        return this.options.item(this.#activeIndex) ?? null;\r\n    }\r\n\r\n    get selectedOption(): HTMLEOptionElement | null {\r\n        return this.options.item(this.#selectedIndex) ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"select\", observed: true})\r\n    type!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    #walker: TreeWalker;\r\n    #activeIndex: number;\r\n    #selectedIndex: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"label\", {\r\n                        attributes: {\r\n                            part: \"label\"\r\n                        }\r\n                    }),\r\n                    element(\"output\", {\r\n                        attributes: {\r\n                            part: \"value\"\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"options\"\r\n                },\r\n                children: [\r\n                    element(\"slot\"),\r\n                    element(\"hr\", {\r\n                        attributes: {\r\n                            part: \"separator\"\r\n                        }\r\n                    }),\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"description\"\r\n                        }\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        this.#selectedIndex = -1;\r\n        this.options = new HTMLEOptionCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"value\": {\r\n                const {options} = this;\r\n                const matchingOption = Array.from(options.values()).find(option => option.value == newValue);\r\n                if (matchingOption) {\r\n                    this.#setSelectedOption(matchingOption);\r\n                    this.dispatchEvent(new Event(\"change\", {bubbles: true}));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {expanded, options} = this;\r\n        if (!expanded) {\r\n            this.expanded = true;\r\n            const {selectedIndex} = this;\r\n            this.#positionOptions();\r\n            const option = options.item(selectedIndex);\r\n            if (option) {\r\n                option.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {expanded} = this;\r\n        if (expanded) {\r\n            this.expanded = false;\r\n            this.focus();\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {expanded} = this;\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEOptionElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEOptionGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEOptionElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEOptionElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousOption(item: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEOptionElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextOption(item: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEOptionElement | null>walker.nextNode();\r\n    }\r\n\r\n    #selectOption(option: HTMLEOptionElement): void {\r\n        if (option && !option.disabled) {\r\n            this.value = option.value;\r\n        }\r\n    }\r\n\r\n    #setActiveOption(option: HTMLEOptionElement | null): void {\r\n        const {options, activeOption} = this;\r\n        if (activeOption !== null && activeOption !== option) {\r\n            activeOption.active = false;\r\n        }\r\n        if (option !== null) {\r\n            if (!option.disabled) {\r\n                const {shadowRoot} = this;\r\n                const descriptionPart = shadowRoot.querySelector(\"[part='description']\");\r\n                if (descriptionPart) {\r\n                    descriptionPart.textContent = option.description;\r\n                }\r\n                this.#activeIndex = Array.from(options.values()).indexOf(option);\r\n            }\r\n            option.active = true;\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    #setSelectedOption(option: HTMLEOptionElement | null): void {\r\n        const {options} = this;\r\n        if (option !== null) {\r\n            if (!option.disabled) {\r\n                const {shadowRoot, selectedOption} = this;\r\n                const valuePart = shadowRoot.querySelector(\"[part='value']\");\r\n                if (valuePart) {\r\n                    valuePart.textContent = option.label;\r\n                }\r\n                option.selected = true;\r\n                if (selectedOption) {\r\n                    selectedOption.selected = false;\r\n                }\r\n                this.#selectedIndex = Array.from(options.values()).indexOf(option);\r\n            }\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    #positionOptions(): void {\r\n        const {shadowRoot} = this;\r\n        const options = shadowRoot.querySelector<HTMLElement>(\"[part=options]\")!;\r\n        const {style: optionsStyle} = options;  \r\n        const {bottom: selectBottom, left: selectLeft} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        optionsStyle.setProperty(\"top\", `${selectBottom + scrollY}px`);\r\n        optionsStyle.setProperty(\"left\", `${selectLeft + scrollX}px`);\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEOptionElement) {\r\n            this.#selectOption(target);\r\n            this.collapse();\r\n        }\r\n        else {\r\n            if (target == this) {\r\n                this.toggle();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {expanded} = this;\r\n        if (target instanceof HTMLEOptionElement) {\r\n            if (!expanded) {\r\n                this.expand();\r\n            }\r\n            this.#setActiveOption(target);\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {expanded} = this;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            if (expanded) {\r\n                this.collapse();\r\n            }\r\n            this.#setActiveOption(null);\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {options, activeOption, selectedOption, selectedIndex, expanded} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                if (expanded && activeOption !== null) {\r\n                    const previousOption = this.#previousOption(activeOption) ?? this.#firstOption();\r\n                    if (previousOption) {\r\n                        previousOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else if (!expanded && selectedOption !== null) {\r\n                    const previousOption = this.#previousOption(selectedOption) ?? this.#firstOption();\r\n                    if (previousOption) {\r\n                        this.#selectOption(previousOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (expanded && activeOption !== null) {\r\n                    const nextOption = this.#nextOption(activeOption) ?? this.#lastOption();\r\n                    if (nextOption) {\r\n                        nextOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else if (!expanded && selectedOption !== null) {\r\n                    const nextOption = this.#nextOption(selectedOption) ?? this.#lastOption();\r\n                    if (nextOption) {\r\n                        this.#selectOption(nextOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstOption = this.#firstOption();\r\n                if (firstOption !== null) {\r\n                    if (expanded) {\r\n                        firstOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(firstOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastOption = this.#lastOption();\r\n                if (lastOption !== null) {\r\n                    if (expanded) {\r\n                        lastOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(lastOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (expanded) {\r\n                    this.collapse();\r\n                    if (activeOption !== null) {\r\n                        this.#selectOption(activeOption);\r\n                    }\r\n                }\r\n                else {\r\n                    const option = options.item(selectedIndex);\r\n                    if (option !== null) {\r\n                        option.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.collapse();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            default: {\r\n                const {activeIndex} = this;\r\n                const {length: keyLength} = key;\r\n                if (keyLength == 1) {\r\n                    const keyCode = key.charCodeAt(0);\r\n                    const optionsArray = Array.from(options.values());\r\n                    const firstMatchIndex = optionsArray.findIndex(\r\n                        option_i => option_i.label.toLowerCase().charCodeAt(0) == keyCode\r\n                    );\r\n                    const nextMatchIndex = optionsArray.findIndex(\r\n                        (option_i, i) => option_i.label.toLowerCase().charCodeAt(0) == keyCode && i > activeIndex\r\n                    );\r\n                    const matchIndex = nextMatchIndex > -1 ?\r\n                        nextMatchIndex :\r\n                        firstMatchIndex;\r\n                    const option = options.item(matchIndex);\r\n                    if (option !== null) {\r\n                        option.focus({preventScroll: true});\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEOptionElement) {\r\n            target.focus({preventScroll: true});\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const options = <HTMLEOptionElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEOptionElement\r\n            );\r\n        if (options.length > 0) {\r\n            let selectedOption: HTMLEOptionElement | null = null;\r\n            let {value} = this;\r\n            if (value) {\r\n                selectedOption = options.find(option => option.value == value) ?? null;\r\n            }\r\n            if (selectedOption == null) {\r\n                selectedOption = options.find(option => option.selected) ?? null;\r\n            }\r\n            if (selectedOption == null) {\r\n                selectedOption = options.find(option => option.default) ?? null;\r\n            }\r\n            if (selectedOption == null) {\r\n                selectedOption = this.#firstOption();\r\n            }\r\n            options.forEach(option_i => {\r\n                option_i.selected = option_i == selectedOption\r\n            });\r\n            if (selectedOption !== null) {\r\n                this.#setSelectedOption(selectedOption);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLESelectElement: HTMLESelectElementConstructor = HTMLESelectElementBase;","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEActionElement } from \"../actions/Action\";\r\nimport { HTMLEMenuButtonElement } from \"../menus/MenuButton\";\r\n\r\nexport { HTMLEToolBarItemElement };\r\nexport { EToolBarItem };\r\n\r\ninterface HTMLEToolBarItemElementConstructor {\r\n    prototype: HTMLEToolBarItemElement;\r\n    new(): HTMLEToolBarItemElement;\r\n}\r\n\r\ninterface HTMLEToolBarItemElement extends HTMLEActionElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menubutton: HTMLEMenuButtonElement | null;\r\n    readonly select: HTMLESelectElement | null;\r\n    name: string;\r\n    label: string;\r\n    active: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritem\": HTMLEToolBarItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar slottedKeyboardListeners: WeakMap<HTMLElement, EventListener>;\r\nvar slottedTriggerListeners: WeakMap<HTMLElement, EventListener>;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritem\"\r\n})\r\nclass HTMLEToolBarItemElementBase extends HTMLEActionElement implements HTMLEToolBarItemElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get menubutton(): HTMLEMenuButtonElement | null {\r\n        return this.#menubutton;\r\n    }\r\n    \r\n    get select(): HTMLESelectElement | null {\r\n        return this.#select;\r\n    }\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n    \r\n    #menubutton: HTMLEMenuButtonElement | null;\r\n    #select: HTMLESelectElement | null;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"icon\"\r\n                        }\r\n                    }),\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"label\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\", {\r\n                        attributes: {\r\n                            name: \"select\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\", {\r\n                        attributes: {\r\n                            name: \"menubutton\"\r\n                        }\r\n                    })\r\n                ]\r\n            })\r\n        )\r\n        slottedKeyboardListeners = new WeakMap();\r\n        slottedTriggerListeners = new WeakMap();\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#menubutton = null;\r\n        this.#select = null;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    toggle(): void {\r\n        const {type} = this;\r\n        switch (type) {\r\n            case \"menubutton\": {\r\n                const {menubutton} = this;\r\n                if (menubutton) {\r\n                    menubutton.toggle();\r\n                    if (menubutton.expanded) {\r\n                        menubutton.firstItem?.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"select\": {\r\n                const {select} = this;\r\n                if (select) {\r\n                    select.toggle();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector<HTMLSpanElement>(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"value\": {\r\n                const {type} = this;\r\n                if (type == \"select\") {\r\n                    this.#updateSelectValue();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #updateSelectValue(): void {\r\n        const {select} = this;\r\n        if (select) {\r\n            const {value} = this;\r\n            const {value: selectValue} = select;\r\n            if (selectValue !== value) {\r\n                select.value = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    #addSlottedKeyboardHandler(element: HTMLElement): void {\r\n        const listener = <EventListener>this.#handleSlottedKeyboardEvent.bind(this);\r\n        slottedKeyboardListeners.set(element, listener);\r\n        element.addEventListener(\"keydown\", listener);\r\n    }\r\n\r\n    #removeSlottedKeyboardHandler(element: HTMLElement): void {\r\n        const listener = slottedKeyboardListeners.get(element);\r\n        if (listener) {\r\n            element.removeEventListener(\"keydown\", listener);\r\n        }\r\n    }\r\n\r\n    #addSlottedTriggerHandler(element: HTMLElement): void {\r\n        const listener = <EventListener>this.#handleSlottedTriggerEvent.bind(this);\r\n        slottedTriggerListeners.set(element, listener);\r\n        element.addEventListener(\"trigger\", listener);\r\n    }\r\n\r\n    #removeSlottedTriggerHandler(element: HTMLElement): void {\r\n        const listener = slottedTriggerListeners.get(element);\r\n        if (listener) {\r\n            element.removeEventListener(\"trigger\", listener);\r\n        }\r\n    }\r\n\r\n    #handleSlottedKeyboardEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        switch (key) {\r\n            case \"Enter\":\r\n            case \"Escape\": {\r\n                this.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlottedTriggerEvent(event: KeyboardEvent): void {\r\n        this.focus({preventScroll: true});\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target;\r\n        switch (slotName) {\r\n            case \"menubutton\": {\r\n                let menubutton = this.#menubutton;\r\n                if (menubutton !== null) {\r\n                    this.#removeSlottedTriggerHandler(menubutton);\r\n                    this.#removeSlottedKeyboardHandler(menubutton);\r\n                }\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                menubutton = element instanceof HTMLEMenuButtonElement ? element : null;\r\n                if (menubutton !== null) {\r\n                    this.#addSlottedTriggerHandler(menubutton);\r\n                    this.#addSlottedKeyboardHandler(menubutton);\r\n                }\r\n                this.#menubutton = menubutton;\r\n                break;\r\n            }\r\n            case \"select\": {\r\n                let select = this.#select;\r\n                if (select !== null) {\r\n                    this.#removeSlottedKeyboardHandler(select);\r\n                }\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                select = element instanceof HTMLESelectElement ? element : null;\r\n                if (select !== null) {\r\n                    this.#addSlottedKeyboardHandler(select);\r\n                }\r\n                this.#select = select;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemElement: HTMLEToolBarItemElementConstructor = HTMLEToolBarItemElementBase;\r\n\r\ninterface EToolBarItemConstructor {\r\n    prototype: HTMLEToolBarItemElement;\r\n    new(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n    button(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    checkbox(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    radio(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    menubutton(init: {\r\n        name: string;\r\n        label: string;\r\n        menubutton: HTMLEMenuButtonElement;\r\n    }): HTMLEToolBarItemElement;\r\n    select(init: {\r\n        name: string;\r\n        label: string;\r\n        select: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n}\r\n\r\nvar EToolBarItem = <EToolBarItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menubutton, select} = init;\r\n        if (menubutton) {\r\n            menubutton.slot = \"menubutton\";\r\n        }\r\n        if (select) {\r\n            select.slot = \"select\";\r\n        }\r\n        return element(\"e-toolbaritem\", {\r\n            attributes: {\r\n                tabindex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type\r\n            },\r\n            children: menubutton ? [menubutton] : select ? [select] : undefined,\r\n            listeners: {\r\n                trigger: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEToolBarItemElement.prototype,\r\n        button(init: {\r\n            name: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menubutton(init: {\r\n            name: string;\r\n            label: string;\r\n            menubutton: HTMLEMenuButtonElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"menubutton\"\r\n            });\r\n        },\r\n        select(init: {\r\n            name: string;\r\n            label: string;\r\n            select: HTMLESelectElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"select\"\r\n            });\r\n        },\r\n    }\r\n);","\r\nimport { element, CustomElement, AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEToolBarItemGroupElement };\r\n\r\ninterface HTMLEToolBarItemGroupElementConstructor {\r\n    prototype: HTMLEToolBarItemGroupElement;\r\n    new(): HTMLEToolBarItemGroupElement;\r\n}\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\ninterface HTMLEToolBarItemGroupElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n    disabled: boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritemgroup\": HTMLEToolBarItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritemgroup\"\r\n})\r\nclass HTMLEToolBarItemGroupElementBase extends HTMLElement implements HTMLEToolBarItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    disabled!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            width: max-content;\r\n                            flex-direction: row;\r\n                        }\r\n\r\n                        /*:host([orientation=\"vertical\"]) {\r\n                            flex-direction: column;\r\n                        }\r\n\r\n                        :host([orientation=\"horizontal\"]) {\r\n                            flex-direction: row;\r\n                        }*/\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const label = this.shadowRoot.querySelector<HTMLLabelElement>(\"[part='label']\");\r\n                if (label) {\r\n                    label.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"disabled\": {\r\n                /*this.items.forEach((item) => {\r\n                    item.disabled = newValue !== null;\r\n                });*/\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemGroupElement: HTMLEToolBarItemGroupElementConstructor = HTMLEToolBarItemGroupElementBase;","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEToolBarItemElement } from \"./ToolBarItem\";\r\nimport { HTMLEToolBarItemGroupElement } from \"./ToolBarItemGroup\";\r\n\r\nexport { HTMLEToolBarElement };\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\ninterface HTMLEToolBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    items(): HTMLEToolBarItemElement[];\r\n    readonly activeItem: HTMLEToolBarItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n}\r\n\r\ninterface HTMLEToolbarElementConstructor {\r\n    prototype: HTMLEToolBarElement;\r\n    new(): HTMLEToolBarElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbar\": HTMLEToolBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbar\"\r\n})\r\nclass HTMLEToolBarElementBase extends HTMLElement implements HTMLEToolBarElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get activeItem(): HTMLEToolBarItemElement | null {\r\n        return this.querySelector<HTMLEToolBarItemElement>(\r\n            \"e-toolbaritem[active]\"\r\n        );\r\n    }\r\n\r\n    items(): HTMLEToolBarItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEToolBarItemElement>(\r\n            \":is(:scope, :scope > e-toolbaritemgroup) > e-toolbaritem\"\r\n        ));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    orientation!: ToolBarOrientation;\r\n\r\n    #walker: TreeWalker;\r\n    #activeIndex: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#activeIndex = -1;\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"change\", this.#handleChangeEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEToolBarItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEToolBarItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEToolBarItemElement | null>walker.previousSibling();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEToolBarItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEToolBarItemElement | null): void {\r\n        const {activeItem} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n            this.#activeIndex = this.items().indexOf(item);\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLESelectElement) {\r\n            const item = target.closest(\"e-toolbaritem\");\r\n            if (item !== null) {\r\n                const {select, type} = item;\r\n                if (target == select && select && type == \"select\") {\r\n                    const {value} = item;\r\n                    const {value: selectValue} = select;\r\n                    if (value !== selectValue) {\r\n                        item.value = selectValue;\r\n                        item.trigger();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEToolBarItemElement) {\r\n            const {type} = target;\r\n            switch (type) {\r\n                /*case \"menubutton\": {\r\n                    const {menubutton} = target;\r\n                    if (menubutton) {\r\n                        const {expanded} = menubutton;\r\n                        if (!expanded) {\r\n                            menubutton.expand();\r\n                            menubutton.menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                case \"select\": {\r\n                    const {select} = target;\r\n                    if (select) {\r\n                        select.toggle();\r\n                    }\r\n                    break;\r\n                }*/\r\n                default: {\r\n                    target.trigger();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const activeItem = this.items().find(\r\n            item_i => item_i.contains(<Node>target)\r\n        ) ?? null;\r\n        this.#setActiveItem(activeItem);\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.#setActiveItem(null);\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"menubutton\": {\r\n                            const {menubutton} = activeItem;\r\n                            if (menubutton) {\r\n                                const {expanded} = menubutton;\r\n                                if (!expanded) {\r\n                                    menubutton.expand();\r\n                                    menubutton.firstItem?.focus({preventScroll: true});\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"select\": {\r\n                            const {select} = activeItem;\r\n                            if (select) {\r\n                                select.expand();\r\n                            }\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            activeItem.trigger();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"select\": {\r\n                            activeItem.select?.expand();\r\n                            event.stopPropagation();\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    activeItem.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleTriggerEvent(event: Event): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEToolBarItemElement) {\r\n            const {type, name, value} = target;\r\n            if (type == \"radio\") {\r\n                this.querySelectorAll<HTMLEToolBarItemElement>(\r\n                    `:is(:scope, :scope > e-toolbaritemgroup) > e-toolbaritem[type=radio][name=${name}]`\r\n                ).forEach((radio_i) => {\r\n                    radio_i.checked = radio_i.value == value;\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarElement: HTMLEToolbarElementConstructor = HTMLEToolBarElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLETabPanelElement };\r\n\r\ninterface HTMLETabPanelElementConstructor {\r\n    prototype: HTMLETabPanelElement;\r\n    new(): HTMLETabPanelElement;\r\n}\r\n\r\ninterface HTMLETabPanelElement extends HTMLElement {\r\n    name: string;\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tabpanel\"\r\n})\r\nclass HTMLETabPanelElementBase extends HTMLElement implements HTMLETabPanelElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n        \r\n                        :host([hidden]) {\r\n                            display: none;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n}\r\n\r\nvar HTMLETabPanelElement: HTMLETabPanelElementConstructor = HTMLETabPanelElementBase;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tabpanel\": HTMLETabPanelElement,\r\n    }\r\n}","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLETabPanelElement } from \"./TabPanel\";\r\n\r\nexport { ETabChangeEvent };\r\nexport { HTMLETabElement };\r\n\r\ninterface HTMLETabElementConstructor {\r\n    prototype: HTMLETabElement;\r\n    new(): HTMLETabElement;\r\n}\r\n\r\ninterface HTMLETabElement extends HTMLElement {\r\n    name: string;\r\n    active: boolean;\r\n    disabled: boolean;\r\n    controls: string;\r\n    panel: HTMLETabPanelElement | null;\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ntype ETabChangeEvent = CustomEvent<{\r\n    tab: HTMLETabElement;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_tabchange\": ETabChangeEvent,\r\n    }\r\n\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tab\": HTMLETabElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tab\"\r\n})\r\nclass HTMLETabElementBase extends HTMLElement implements HTMLETabElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    #panel: HTMLETabPanelElement | null;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            user-select: none;\r\n                            white-space: nowrap;\r\n\r\n                            padding: 2px 6px;\r\n                            cursor: pointer;\r\n                        }\r\n                        \r\n                        :host([disabled]) {\r\n                            color: lightgray;\r\n                            pointer-events: none;\r\n                        }\r\n        \r\n                        :host([active]) {\r\n                            background-color: lightgray;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n        this.#panel = null;\r\n    }\r\n\r\n    get panel(): HTMLETabPanelElement | null {\r\n        return this.#panel;\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const panel = document.getElementById(this.controls);\r\n        if (panel !== this.#panel && panel instanceof HTMLETabPanelElement) {\r\n            this.#panel = panel;\r\n        }\r\n        if (panel)  {\r\n            panel.hidden = !this.active;\r\n        }\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"active\":\r\n                if (this.active) {\r\n                    this.dispatchEvent(new CustomEvent(\"e_tabchange\", {detail: {tab: this}, bubbles: true}));\r\n                }\r\n                const panel = document.getElementById(this.controls);\r\n                if (panel !== this.panel && panel instanceof HTMLETabPanelElement) {\r\n                    this.#panel = panel;\r\n                }\r\n                if (panel)  {\r\n                    panel.hidden = !this.active;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabElement: HTMLETabElementConstructor = HTMLETabElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLETabElement } from \"./Tab\";\r\n\r\nexport { HTMLETabListElement };\r\n\r\ninterface HTMLETabListElementConstructor {\r\n    prototype: HTMLETabListElement;\r\n    new(): HTMLETabListElement;\r\n}\r\n\r\ninterface HTMLETabListElement extends HTMLElement {\r\n    readonly activeTab: HTMLETabElement | null;\r\n    tabs: HTMLETabElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tablist\": HTMLETabListElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tablist\"\r\n})\r\nclass HTMLETabListElementBase extends HTMLElement implements HTMLETabListElement {\r\n\r\n    tabs: HTMLETabElement[];\r\n\r\n    #activeIndex: number;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                            position: relative;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n        \r\n        this.tabs = [];\r\n        this.#activeIndex = 1;\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeTab(): HTMLETabElement | null {\r\n        return this.tabs[this.#activeIndex] || null;\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n        const slot = this.shadowRoot!.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", (event) => {\r\n\r\n                const tabs = <HTMLETabElement[]>(<HTMLSlotElement>event.target)\r\n                    .assignedElements()\r\n                    .filter(tab => tab instanceof HTMLETabElement);\r\n                this.tabs = tabs;\r\n                this.#activeIndex = this.tabs.findIndex(tab => tab.active);\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event) => {\r\n            switch (event.key) {\r\n                case \"ArrowUp\":\r\n                    this.focusTabAt((this.activeIndex <= 0) ? this.tabs.length - 1 : this.activeIndex - 1);\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    this.focusTabAt((this.activeIndex >= this.tabs.length - 1) ? 0 : this.activeIndex + 1);\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"Enter\":\r\n                    if (this.activeTab) {\r\n                        this.activateTab(this.activeTab);\r\n                    }\r\n                    break;\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"click\", (event) => {\r\n            const target = event.target;\r\n            if (target instanceof HTMLETabElement) {\r\n                target.active = true;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"e_tabchange\", (event) => {\r\n            const targetIndex = this.tabs.indexOf(event.detail.tab);\r\n            this.#activeIndex = targetIndex;\r\n            this.tabs.forEach((thisTab, thisTabIndex) => {\r\n                if (thisTabIndex !== targetIndex) {\r\n                    thisTab.active = false;\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    focusTabAt(index: number): void {\r\n        const tab = this.tabs[index];\r\n        if (tab) {\r\n            this.#activeIndex = index;\r\n            tab.focus();\r\n        }\r\n    }\r\n\r\n    activateTab(tab: HTMLETabElement) {\r\n        if (this.tabs.includes(tab)) {\r\n            tab.active = true;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabListElement: HTMLETabListElementConstructor = HTMLETabListElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLETreeElement } from \"./Tree\";\r\nimport { HTMLETreeItemElement } from \"./TreeItem\";\r\n\r\nexport { HTMLETreeItemGroupElement };\r\n\r\ninterface HTMLETreeItemGroupElementConstructor {\r\n    prototype: HTMLETreeItemGroupElement;\r\n    new(): HTMLETreeItemGroupElement;\r\n}\r\n\r\ninterface HTMLETreeItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitemgroup\": HTMLETreeItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-treeitemgroup\"\r\n})\r\nclass HTMLETreeItemGroupElementBase extends HTMLElement implements HTMLETreeItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLETreeItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLETreeItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n            item_i.level = (() => {\r\n                let level = -1;\r\n                let closestItem: HTMLETreeItemElement | null = item_i;\r\n                while (closestItem !== null && closestItem.matches(\"e-tree :scope\")) {\r\n                    closestItem = closestItem.parentElement?.closest(\"e-treeitem\") ?? null;\r\n                    level++;\r\n                }\r\n                return level;\r\n            })();\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemGroupElement: HTMLETreeItemGroupElementConstructor = HTMLETreeItemGroupElementBase;","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\nimport { HTMLETreeElement } from \"./Tree\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeItemElement };\r\n\r\ninterface HTMLETreeItemElementConstructor {\r\n    prototype: HTMLETreeItemElement;\r\n    new(): HTMLETreeItemElement;\r\n}\r\n\r\ninterface HTMLETreeItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly group: HTMLETreeItemGroupElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    expanded: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    level: number;\r\n    type: \"leaf\" | \"parent\";\r\n    toggle(force?: boolean): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitem\": HTMLETreeItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-treeitem\"\r\n})\r\nclass HTMLETreeItemElementBase extends HTMLElement implements HTMLETreeItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get group(): HTMLETreeItemGroupElement | null {\r\n        return this.#group;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    expanded!: boolean;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number, observed: true})\r\n    level!: number;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"leaf\"})\r\n    type!: \"leaf\" | \"parent\";\r\n\r\n    #group: HTMLETreeItemGroupElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"arrow\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"group\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.#group = null;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"expanded\": {\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const labelPart = this.shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"level\": {\r\n                this.style.setProperty(\"--level\", `${this.level}`);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        this.expanded = force ?? !this.expanded;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, shiftKey, ctrlKey} = event;\r\n        const {type} = this;\r\n        if (this == target && type == \"parent\" && !(shiftKey || ctrlKey)) {\r\n            this.toggle();\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target;\r\n        switch (slotName) {\r\n            case \"group\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#group = element instanceof HTMLETreeItemGroupElement ? element : null;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemElement: HTMLETreeItemElementConstructor = HTMLETreeItemElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLETreeItemElement } from \"./TreeItem\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeElement };\r\n\r\ninterface HTMLETreeElementConstructor {\r\n    prototype: HTMLETreeElement;\r\n    new(): HTMLETreeElement;\r\n}\r\n\r\ninterface HTMLETreeElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLETreeItemElement>;\r\n    readonly activeItem: HTMLETreeItemElement | null;\r\n    readonly dropTargetItem: HTMLETreeItemElement | null;\r\n    droptarget: boolean;\r\n    name: string;\r\n    selectedItems(): HTMLETreeItemElement[];\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tree\": HTMLETreeElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-tree\"\r\n})\r\nclass HTMLETreeElementBase extends HTMLElement implements HTMLETreeElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLETreeItemElement>;\r\n\r\n    get activeItem(): HTMLETreeItemElement | null {\r\n        return this.querySelector<HTMLETreeItemElement>(\r\n            \"e-treeitem[active]\"\r\n        );\r\n    }\r\n\r\n    get dropTargetItem(): HTMLETreeItemElement | null {\r\n        return this.querySelector<HTMLETreeItemElement>(\r\n            \"e-treeitem[droptarget]\"\r\n        );\r\n    }\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.items = this.getElementsByTagName(\"e-treeitem\");\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    selectedItems(): HTMLETreeItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.#firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLETreeItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLETreeItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLETreeItemElement, to: HTMLETreeItemElement): HTMLETreeItemElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleItem = this.#nextItem(from);\r\n            while (nextVisibleItem && nextVisibleItem !== to) {\r\n                range.push(nextVisibleItem);\r\n                nextVisibleItem = this.#nextItem(nextVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleItem = this.#previousItem(from);\r\n            while (previousVisibleItem && previousVisibleItem !== to) {\r\n                range.push(previousVisibleItem);\r\n                previousVisibleItem = this.#previousItem(previousVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLETreeItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((item_i) => {\r\n            item_i.selected = false;\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLETreeItemElement | null): void {\r\n        const {activeItem} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = item;\r\n            item.active = true;\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n    \r\n    #setDropTargetItem(item: HTMLETreeItemElement | null): void {\r\n        const {dropTargetItem} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n        }\r\n    }\r\n\r\n    #firstItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousSibling = <HTMLETreeItemElement | null>walker.previousSibling();\r\n        return previousSibling ?\r\n            this.#deepestItem(previousSibling) :\r\n            <HTMLETreeItemElement | null>walker.parentNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const {type, expanded} = item;\r\n        return <HTMLETreeItemElement | null>(\r\n            type === \"leaf\" ?\r\n                walker.nextNode() :\r\n                expanded ?\r\n                    walker.nextNode() :\r\n                    walker.nextSibling() ??\r\n                    (walker.parentNode(), walker.nextSibling())\r\n        );\r\n    }\r\n\r\n    #deepestItem(item: HTMLETreeItemElement): HTMLETreeItemElement {\r\n        if (item.expanded) {\r\n            const walker = this.#walker;\r\n            const lastItem = <HTMLETreeItemElement>walker.lastChild();\r\n            if (lastItem) {\r\n                return this.#deepestItem(lastItem);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey, button} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const {selected} = target;\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setSelection(target);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            target.blur();\r\n                        }\r\n                        (!selected) ?\r\n                            this.#addToSelection(target) :\r\n                            this.#removeFromSelection(target);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const {activeItem} = this\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                target\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(target);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const {type} = target;\r\n            if (type == \"parent\") {\r\n                target.toggle(true);\r\n            }\r\n            this.#setDropTargetItem(target);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!this.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        const {root} = walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? root, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? root, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(\r\n                                firstItem,\r\n                                this.#deepestItem(lastItem)\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    if (activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                    else {\r\n                        const walker = this.#walker;\r\n                        const parentItem = <HTMLETreeItemElement>walker.parentNode();\r\n                        if (parentItem) {\r\n                            parentItem.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    if (!activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.#setActiveItem(null);\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            this.#setActiveItem(target);\r\n            this.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLETreeItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLETreeItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n            item_i.level = 0;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLETreeElement: HTMLETreeElementConstructor = HTMLETreeElementBase;","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEToolBarElement } from \"../toolbars/ToolBar\";\r\n\r\nexport { HTMLEListItemElement };\r\n\r\ninterface HTMLEListItemElementConstructor {\r\n    prototype: HTMLEListItemElement;\r\n    new(): HTMLEListItemElement;\r\n}\r\n\r\ninterface HTMLEListItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly badge: HTMLSpanElement | null;\r\n    readonly toolbar: HTMLEToolBarElement | null;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitem\": HTMLEListItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-listitem\"\r\n})\r\nclass HTMLEListItemElementBase extends HTMLElement implements HTMLEListItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    get badge(): HTMLElement | null {\r\n        return this.#badge;\r\n    }\r\n\r\n    get toolbar(): HTMLEToolBarElement | null {\r\n        return this.#toolbar;\r\n    }\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    #badge: HTMLElement | null;\r\n    #toolbar: HTMLEToolBarElement | null;\r\n    #menu: HTMLEMenuElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#badge = null;\r\n        this.#menu = null;\r\n        this.#toolbar = null;\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this))\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"toolbar\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#toolbar = element instanceof HTMLEToolBarElement ? element : null;\r\n                break;\r\n            }\r\n            case \"badge\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#badge = element instanceof HTMLSpanElement ? element : null;\r\n                break;\r\n            }\r\n            case \"menu\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#menu = element instanceof HTMLEMenuElement ? element : null;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEListItemElement: HTMLEListItemElementConstructor = HTMLEListItemElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEListItemElement } from \"./ListItem\";\r\n\r\nexport { HTMLEListItemGroupElement };\r\n\r\ninterface HTMLEListItemGroupElementConstructor {\r\n    prototype: HTMLEListItemGroupElement;\r\n    new(): HTMLEListItemGroupElement;\r\n}\r\n\r\ninterface HTMLEListItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitemgroup\": HTMLEListItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-listitemgroup\"\r\n})\r\nclass HTMLEListItemGroupElementBase extends HTMLElement implements HTMLEListItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEListItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEListItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEListItemGroupElement: HTMLEListItemGroupElementConstructor = HTMLEListItemGroupElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEListItemElement } from \"./ListItem\";\r\nimport { HTMLEListItemGroupElement } from \"./ListItemGroup\";\r\n\r\nexport { HTMLEListElement };\r\n\r\ninterface HTMLEListElementConstructor {\r\n    prototype: HTMLEListElement;\r\n    new(): HTMLEListElement;\r\n}\r\n\r\ninterface HTMLEListElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEListItemElement>;\r\n    readonly activeItem: HTMLEListItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    droptarget: boolean;\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    selectedItems(): HTMLEListItemElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-list\": HTMLEListElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-list\"\r\n})\r\nclass HTMLEListElementBase extends HTMLElement implements HTMLEListElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEListItemElement>;\r\n\r\n    get dropTargetItem(): HTMLEListItemElement | null {\r\n        return this.items[this.#dropTargetIndex] ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    #dropTargetIndex: number;\r\n    #activeIndex: number;\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        this.#dropTargetIndex = -1;\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.items = this.getElementsByTagName(\"e-listitem\");\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEListItemElement | null {\r\n        return this.items[this.activeIndex] ?? null;\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    selectedItems(): HTMLEListItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.#firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEListItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEListItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLEListItemElement, to: HTMLEListItemElement): HTMLEListItemElement[] {\r\n        const items = Array.from(this.items);\r\n        const fromIndex = items.indexOf(from);\r\n        const toIndex = items.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return items.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        selectedItems.forEach((item_i) => {\r\n            if (item_i.selected) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEListItemElement | null): void {\r\n        const {activeItem, items} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n            item.tabIndex = 0;\r\n            this.#activeIndex = Array.from(items).indexOf(item);\r\n        }\r\n    }\r\n\r\n    #setDropTargetItem(item: HTMLEListItemElement | null): void {\r\n        const {dropTargetItem, items} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n            this.#dropTargetIndex = Array.from(items).indexOf(item);\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n            this.#dropTargetIndex = -1;\r\n        }\r\n    }\r\n\r\n    #firstItem(): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLEListItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLEListItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEListItemElement): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEListItemElement | null>walker.previousNode();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEListItemElement): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const nextItem = <HTMLEListItemElement | null>walker.nextNode();\r\n        return nextItem;\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent) {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n            target.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey} = event;\r\n        const selectedItems = this.selectedItems();\r\n        if (target instanceof HTMLEListItemElement) {\r\n            if (!shiftKey && !ctrlKey) {\r\n                this.#setSelection(target);\r\n            }\r\n            else if (ctrlKey) {\r\n                (!target.selected) ?\r\n                    this.#addToSelection(target) :\r\n                    this.#removeFromSelection(target);\r\n                event.stopPropagation();\r\n            }\r\n            else if (shiftKey) {\r\n                const lastSelectedItem = selectedItems[selectedItems.length - 1];\r\n                if (lastSelectedItem) {\r\n                    const range = this.#getItemsRange(\r\n                        lastSelectedItem,\r\n                        target\r\n                    );\r\n                    if (range) {\r\n                        if (selectedItems.includes(target)) {\r\n                            this.#removeFromSelection(...range);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(...range);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.#setSelection(target);\r\n                }\r\n                event.stopPropagation();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            this.#setDropTargetItem(target);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n    \r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n        const relatedTargetHost =\r\n            relatedTargetRoot instanceof ShadowRoot ?\r\n            relatedTargetRoot.host :\r\n            relatedTarget;\r\n        if (!this.contains(<Node>relatedTargetHost)) {\r\n            this.#setDropTargetItem(null);\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    const walker = this.#walker;\r\n                    const {root} = walker;\r\n                    const firstItem = <HTMLEListItemElement>(\r\n                        walker.currentNode = walker.parentNode() ?? root, walker.firstChild()\r\n                    );\r\n                    const lastItem = <HTMLEListItemElement>(\r\n                        walker.currentNode = walker.parentNode() ?? root, walker.lastChild()\r\n                    );\r\n                    const range = this.#getItemsRange(\r\n                        firstItem,\r\n                        lastItem\r\n                    );\r\n                    if (range) {\r\n                        this.#setSelection(...range);\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                const {activeItem} = this;\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.#setActiveItem(null);\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            this.#setActiveItem(target);\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (!this.#onSelection) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEListItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEListItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEListElement: HTMLEListElementConstructor = HTMLEListElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEDraggableElement };\r\n\r\ninterface HTMLEDraggableElementConstructor {\r\n    prototype: HTMLEDraggableElement;\r\n    new(): HTMLEDraggableElement;\r\n}\r\n\r\ninterface HTMLEDraggableElement extends HTMLElement {\r\n    readonly referee: this | null;\r\n    readonly references: this[];\r\n    selected: boolean;\r\n    dragged: boolean;\r\n    dragovered: boolean;\r\n\r\n    connectedCallback(): void;\r\n    disconnectedCallback(): void;\r\n    getReference(): this;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-draggable\": HTMLEDraggableElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-draggable\"\r\n})\r\nclass HTMLEDraggableElementBase extends HTMLElement implements HTMLEDraggableElement {\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    dragovered!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    dragged!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    #referee: this | null;\r\n    readonly references: this[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            padding: 3px 4px;\r\n                            cursor: pointer;\r\n                            white-space: nowrap;\r\n                            border-radius: 4px;\r\n                            border: 1px solid black;\r\n                            user-select: none;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                            color: lightgray;\r\n                            border-color: lightgray;\r\n                        }\r\n        \r\n                        :host([selected]:active) {\r\n                            cursor: grabbing;\r\n                        }\r\n                        \r\n                        :host([selected]) {\r\n                            cursor: grab;\r\n                            font-weight: bold;\r\n                            outline: 1px auto black;\r\n                        }\r\n        \r\n                        :host([dragovered]) {\r\n                            border-style: dotted;\r\n                        }\r\n                        \r\n                        [part=\"container\"] {\r\n                            display: flex;\r\n                            align-items: center;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"container\"\r\n                },\r\n                children: [\r\n                    element(\"slot\", {\r\n                        children: [\r\n                            \"&nbsp;\"\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.references = [];\r\n        this.#referee = null;\r\n    }\r\n\r\n    get referee(): this | null {\r\n        return this.#referee;\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n        this.draggable = true;\r\n    }\r\n\r\n    disconnectedCallback(): void {\r\n        if (this.referee) {\r\n            const thisRefIndex = this.referee.references.indexOf(this);\r\n            if (thisRefIndex > -1) {\r\n                this.referee.references.splice(thisRefIndex, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    getReference(): this {\r\n        const reference = <this>this.cloneNode(true);\r\n        reference.#referee = this;\r\n        return reference;\r\n    }\r\n}\r\n\r\nvar HTMLEDraggableElement: HTMLEDraggableElementConstructor = HTMLEDraggableElementBase","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\n\r\nexport { HTMLEDragzoneElement };\r\n\r\ninterface HTMLEDragzoneElementConstructor {\r\n    prototype: HTMLEDragzoneElement;\r\n    new(): HTMLEDragzoneElement\r\n}\r\n\r\ninterface HTMLEDragzoneElement extends HTMLElement {\r\n    readonly draggables: HTMLEDraggableElement[];\r\n    readonly selectedDraggables: HTMLEDraggableElement[];\r\n    disabled: boolean;\r\n    selectDraggable(draggable: HTMLEDraggableElement): void;\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void;\r\n    clearSelection(): void;\r\n    connectedCallback(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dragzone\": HTMLEDragzoneElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dragzone\"\r\n})\r\nclass HTMLEDragzoneElementBase extends HTMLElement implements HTMLEDragzoneElement {\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    #draggables: HTMLEDraggableElement[];\r\n    #selectedDraggables: HTMLEDraggableElement[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                        }\r\n        \r\n                        [part=\"container\"] {\r\n                            position: relative;\r\n                            display: flex;\r\n                            flex-direction: column;\r\n                            padding-left: 2px;\r\n                            padding-right: 2px;\r\n                        }\r\n        \r\n                        ::slotted(*) {\r\n                            margin-top: 2px;\r\n                            margin-bottom: 2px;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"container\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n        this.#draggables = [];\r\n        this.#selectedDraggables = [];\r\n    }\r\n\r\n    get draggables(): HTMLEDraggableElement[] {\r\n        return this.#draggables;\r\n    }\r\n\r\n    get selectedDraggables(): HTMLEDraggableElement[] {\r\n        return this.#selectedDraggables;\r\n    }\r\n\r\n    selectDraggable(draggable: HTMLEDraggableElement): void {\r\n        if (!this.selectedDraggables.includes(draggable)) {\r\n            this.selectedDraggables.push(draggable);\r\n        }\r\n        if (!draggable.selected) {\r\n            draggable.selected = true;\r\n        }\r\n    }\r\n\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void {\r\n        const index = this.selectedDraggables.indexOf(draggable);\r\n        if (index > -1) {\r\n            if (draggable.selected) {\r\n                draggable.selected = false;\r\n            }\r\n            this.selectedDraggables.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.selectedDraggables.forEach((draggable) => {\r\n            draggable.selected = false;\r\n        });\r\n        this.#selectedDraggables = [];\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const draggables = slot.assignedElements().filter(\r\n                    elem => elem instanceof HTMLEDraggableElement\r\n                ) as HTMLEDraggableElement[];\r\n                this.#draggables = draggables;\r\n                this.draggables.forEach((draggable) => {\r\n                    draggable.draggable = true;\r\n                });\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Escape\":\r\n                    this.clearSelection();\r\n                    this.focus();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragstart\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                this.selectedDraggables.forEach((thisSelectedDraggable) => {\r\n                    thisSelectedDraggable.dragged = true;\r\n                });\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", this.id);\r\n                }\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event) => {\r\n            const dataTransfer = event.dataTransfer;\r\n            if (dataTransfer) {\r\n                dataTransfer.dropEffect = \"none\";\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"dragend\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                const thisDraggedDraggables = this.draggables.filter(draggable => draggable.dragged);\r\n                thisDraggedDraggables.forEach((thisDraggedDraggable) => {\r\n                    thisDraggedDraggable.dragged = false;\r\n                });\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            if (!this.contains(relatedTarget)) {\r\n                this.clearSelection();\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button == 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        if (!target.selected) {\r\n                            this.clearSelection();\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                    else if (event.ctrlKey) {\r\n                        (!target.selected) ?\r\n                            this.selectDraggable(target) :\r\n                            this.unselectDraggable(target);\r\n                    }\r\n                    else if (event.shiftKey) {\r\n                        if (this.selectedDraggables.length > 0) {\r\n                            const targetIndex = this.draggables.indexOf(target);\r\n                            const firstIndex = this.draggables.indexOf(this.selectedDraggables[0]);\r\n                            const direction = Math.sign(targetIndex - firstIndex);\r\n                            const fromIndex = (direction > 0) ? 0 : this.draggables.length - 1;\r\n                            const toIndex = (direction > 0) ? this.draggables.length - 1 : 0;\r\n                            const startRangeIndex = (direction > 0) ? firstIndex : targetIndex;\r\n                            const endRangeIndex = (direction > 0) ? targetIndex : firstIndex;\r\n                            for (let index = fromIndex; index !== (toIndex + direction); index += direction) {\r\n                                (index >= startRangeIndex && index <= endRangeIndex) ? \r\n                                    this.selectDraggable(this.draggables[index]) :\r\n                                    this.unselectDraggable(this.draggables[index]);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.clearSelection();\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mouseup\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button == 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        this.draggables.forEach((thisDraggable) => {\r\n                            if (thisDraggable !== target) {\r\n                                this.unselectDraggable(thisDraggable);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEDragzoneElement: HTMLEDragzoneElementConstructor = HTMLEDragzoneElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\nimport { HTMLEDragzoneElement } from \"./Dragzone\";\r\n\r\nexport { HTMLEDropzoneElement };\r\nexport { EDataChangeEvent };\r\n\r\ninterface HTMLEDropzoneElementConstructor {\r\n    prototype: HTMLEDropzoneElement;\r\n    new(): HTMLEDropzoneElement;\r\n}\r\n\r\ninterface HTMLEDropzoneElement extends HTMLEDragzoneElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    dragovered: DropzoneDragoveredType | null;\r\n    name: string;\r\n    multiple: boolean;\r\n    placeholder: string;\r\n\r\n    droptest: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => void) | null;\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): void;\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean): void;\r\n\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ntype DropzoneDragoveredType = \"self\" | \"draggable\" | \"appendarea\";\r\n\r\ntype EDataChangeEvent = CustomEvent<{\r\n    action: \"insert\" | \"remove\";\r\n    draggables: HTMLEDraggableElement[];\r\n    position: number;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dropzone\": HTMLEDropzoneElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"e_datachange\": EDataChangeEvent,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dropzone\"\r\n})\r\nclass HTMLEDropzoneElementBase extends HTMLEDragzoneElement implements HTMLEDropzoneElement {\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    dragovered!: DropzoneDragoveredType | null;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    placeholder!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    multiple!: boolean;\r\n\r\n    droptest!: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => boolean) | null;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.shadowRoot!.querySelector(\"style\")!.append(/*css*/`\r\n            :host {\r\n                border: 1px dashed gray;\r\n            }\r\n\r\n            :host(:not([multiple]):not(:empty)) [part=\"appendarea\"],\r\n            :host(:not(:empty):not([dragovered])) [part=\"appendarea\"] {\r\n                display: none !important;\r\n            }\r\n\r\n            [part=\"appendarea\"] {\r\n                display: block;\r\n                margin: 2px;\r\n                border-radius: 4px;\r\n                border: 1px dotted black;\r\n            }\r\n\r\n            :host(:not([dragovered=\"appendarea\"])) [part=\"appendarea\"] {\r\n                border-color: transparent;\r\n            }\r\n            \r\n            [part=\"placeholder\"] {\r\n                display: inline-block;\r\n                color: grey;\r\n                pointer-events: none;\r\n                user-select: none;\r\n            }\r\n        `);\r\n\r\n        this.shadowRoot.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"appendarea\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"placeholder\"\r\n                        },\r\n                        children: [\r\n                            \"&nbsp;\"\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.droptest = null;\r\n    }\r\n    \r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        const appendAreaPart = this.shadowRoot!.querySelector<HTMLDivElement>(\"[part='appendarea']\");\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Delete\":\r\n                    if (this == event.target) {\r\n                        this.removeDraggables();\r\n                    }\r\n                    else {\r\n                        this.removeDraggables(draggable => draggable.selected);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragover\", (event: DragEvent) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragover\", (event) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragenter\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                target.dragovered = true;\r\n                this.dragovered = \"draggable\";\r\n            }\r\n            else {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragenter\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"appendarea\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event: DragEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                if (target == this) {\r\n                    if (appendAreaPart) {\r\n                        this.dragovered = \"self\";\r\n                    }\r\n                    if (!this.draggables.includes(relatedTarget)) {\r\n                        this.dragovered = null;\r\n                    }\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                }\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragleave\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n        \r\n        this.addEventListener(\"drop\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                let dropIndex = this.draggables.length;\r\n                if (target == this) {\r\n                    this.dragovered = null;\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                    dropIndex = this.draggables.indexOf(target);\r\n                }\r\n\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    const dragzoneId = dataTransfer.getData(\"text/plain\");\r\n                    const dragzone = document.getElementById(dragzoneId);\r\n                    if (dragzone instanceof HTMLEDragzoneElement) {\r\n                        const selectedDraggables = dragzone.selectedDraggables;\r\n                        if (selectedDraggables) {\r\n                            selectedDraggables.forEach((selectedDraggable) => {\r\n                                selectedDraggable.dragged = false;\r\n                            });\r\n                            if (dragzone instanceof HTMLEDropzoneElement) {\r\n                                dragzone.removeDraggables((draggable) => selectedDraggables.includes(draggable));\r\n                            }\r\n                            dragzone.clearSelection();\r\n                            this.addDraggables(selectedDraggables, dropIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.dragovered = null;\r\n            event.preventDefault();\r\n        });\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"placeholder\": {\r\n                const placeholderPart = this.shadowRoot.querySelector(\"[part='placeholder']\");\r\n                if (placeholderPart) {\r\n                    placeholderPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): HTMLEDraggableElement[] | null {\r\n        if (draggables.length > 0) {\r\n            let dataTransferSuccess = true;\r\n            if (this.droptest) {\r\n                dataTransferSuccess = this.droptest(this, draggables);\r\n            }\r\n            \r\n            let newDraggables: HTMLEDraggableElement[] = [];\r\n            let insertionPosition = -1;\r\n            if (dataTransferSuccess) {\r\n                if (this.multiple) {\r\n                    draggables.forEach((draggable) => {\r\n                        let newDraggable = draggable.getReference();\r\n                        if (position > -1 && position < this.draggables.length) {\r\n                            this.draggables[position].insertAdjacentElement(\"beforebegin\", newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? position : insertionPosition;\r\n                        }\r\n                        else {\r\n                            this.appendChild(newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? this.draggables.length - 1 : insertionPosition;\r\n                        }\r\n                        newDraggables.push(newDraggable);\r\n                    });\r\n                }\r\n                else {\r\n                    let newDraggable = draggables[0].getReference();\r\n                    if (this.draggables.length > 0) {\r\n                        this.replaceChild(newDraggable, this.draggables[0]);\r\n                    }\r\n                    else {\r\n                        this.appendChild(newDraggable);\r\n                    }\r\n                    newDraggables.push(newDraggable);\r\n                    insertionPosition = 0;\r\n                }\r\n            }\r\n            \r\n            const slot = this.shadowRoot?.querySelector(\"slot\");\r\n            if (slot) {\r\n                slot.addEventListener(\"slotchange\", () => {\r\n                    this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                        bubbles: true,\r\n                        detail: {\r\n                            action: \"insert\",\r\n                            draggables: newDraggables,\r\n                            position: insertionPosition\r\n                        }\r\n                    }));\r\n                }, {once: true});\r\n            }\r\n            return newDraggables;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean = () => true) {\r\n        let toRemove = this.draggables.filter(\r\n            (value: HTMLEDraggableElement, index: number) => {\r\n                return predicate(value, index);\r\n            }\r\n        );\r\n        let atPosition = this.draggables.indexOf(toRemove[0]);\r\n        toRemove.forEach((draggable) => {\r\n            draggable.remove(); \r\n        });\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                    bubbles: true,\r\n                    detail: {\r\n                        action: \"remove\",\r\n                        draggables: toRemove,\r\n                        position: atPosition\r\n                    }\r\n                }));\r\n            }, {once: true});\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEDropzoneElement: HTMLEDropzoneElementConstructor = HTMLEDropzoneElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEDialogElement };\r\n\r\ninterface HTMLEDialogElementConstructor {\r\n    prototype: HTMLEDialogElement;\r\n    new(): HTMLEDialogElement;\r\n}\r\n\r\ntype DialogElementType = \"confirm\" | \"alert\";\r\n\r\ninterface HTMLEDialogElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: DialogElementType;\r\n    open(): void;\r\n    close(): void;\r\n    cancel(): void;\r\n    confirm(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dialog\": HTMLEDialogElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"open\": Event,\r\n        \"close\": Event,\r\n        \"cancel\": Event,\r\n        \"confirm\": Event,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dialog\"\r\n})\r\nclass HTMLEDialogElementBase extends HTMLElement implements HTMLEDialogElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: DialogElementType;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            padding: 6px;\r\n                            background-color: white;\r\n        \r\n                            -webkit-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            -moz-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                        }\r\n        \r\n                        button {\r\n                            cursor: pointer;\r\n                        }\r\n        \r\n                        [part=\"actions\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part=\"header\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part=\"button\"]:not(:first-child) {\r\n                            margin-left: 4px;\r\n                        }\r\n        \r\n                        :host([type=\"confirm\"]) [part=\"ok-button\"] {\r\n                            display: none !important;\r\n                        }\r\n        \r\n                        :host([type=\"alert\"]) [part=\"cancel-button\"],\r\n                        :host([type=\"alert\"]) [part=\"confirm-button\"] {\r\n                            display: none !important;\r\n                        }\r\n                    `\r\n                    ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"header\"\r\n                },\r\n                children: [\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button close-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"x\"\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"hr\", {\r\n                attributes: {\r\n                    part: \"separator\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"body\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"hr\", {\r\n                attributes: {\r\n                    part: \"separator\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"actions\",\r\n                },\r\n                children: [\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button cancel-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"Cancel\"\r\n                        ]\r\n                    }),\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button confirm-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"Confirm\"\r\n                        ]\r\n                    }),\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button ok-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"OK\"\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n        );\r\n    }\r\n\r\n    connectedCallback() {\r\n        this.shadowRoot.addEventListener(\"click\", this);\r\n    }\r\n\r\n    handleEvent(event: Event) {\r\n        const {type, target} = event;\r\n        switch (type) {\r\n            case \"click\":\r\n                const {part} = <Element>target;\r\n                if (part.contains(\"close-button\") || part.contains(\"cancel-button\")) {\r\n                    this.cancel();\r\n                }\r\n                else if (part.contains(\"confirm-button\") || part.contains(\"ok-button\")) {\r\n                    this.confirm();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    open(): void {\r\n        this.dispatchEvent(new CustomEvent(\"open\", {bubbles: true}));\r\n    }\r\n\r\n    close(): void {\r\n        this.dispatchEvent(new CustomEvent(\"close\", {bubbles: true}));\r\n    }\r\n\r\n    cancel(): void {\r\n        this.dispatchEvent(new CustomEvent(\"cancel\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n\r\n    confirm(): void {\r\n        this.dispatchEvent(new CustomEvent(\"confirm\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n}\r\n\r\nvar HTMLEDialogElement: HTMLEDialogElementConstructor = HTMLEDialogElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEHandleElement };\r\n\r\ninterface HTMLEHandleElementConstructor {\r\n    prototype: HTMLEHandleElement;\r\n    new(): HTMLEHandleElement;\r\n}\r\n\r\ninterface HTMLEHandleElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    controls: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-handle\": HTMLEHandleElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"move\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-handle\"\r\n})\r\nclass HTMLEHandleElementBase extends HTMLElement implements HTMLEHandleElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                            \r\n                            width: 24px;\r\n                            height: 12px;\r\n                            \r\n                            background-color: rgb(0, 128, 255);\r\n\r\n                            -webkit-mask-image: url(\"assets/dots.png\");\r\n                            mask-image: url(\"assets/dots.png\");\r\n\r\n                            -webkit-mask-repeat: repeat;\r\n                            mask-repeat: repeat;\r\n                            cursor: move;\r\n                        }\r\n                    `\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"controls\": {\r\n                const {controls} = this;\r\n                this.#target = document.getElementById(controls);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        this.#target = document.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            const target = this.#target;\r\n            if (target !== null) {\r\n                const targetComputedStyle = window.getComputedStyle(target);\r\n                const {movementX, movementY} = event;\r\n                const {width: rectWidth, height: rectHeight} = target.getBoundingClientRect();\r\n                const outerElement = target.parentElement ?? document.body;\r\n                const {\r\n                    left: outerRectLeft, right: outerRectRight,\r\n                    top: outerRectTop, bottom: outerRectBottom\r\n                } = outerElement.getBoundingClientRect();\r\n                const left = parseFloat(targetComputedStyle.getPropertyValue(\"left\"));\r\n                const newLeft = Math.max(outerRectLeft, Math.min(Math.trunc(left + movementX), outerRectRight - rectWidth));\r\n                const top = parseFloat(targetComputedStyle.getPropertyValue(\"top\"));\r\n                const newTop = Math.max(outerRectTop, Math.min(Math.trunc(top + movementY), outerRectBottom - rectHeight));\r\n                target.style.setProperty(\"left\", `${newLeft}px`);\r\n                target.style.setProperty(\"top\", `${newTop}px`);\r\n                this.dispatchEvent(new CustomEvent(\"move\"));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEHandleElement: HTMLEHandleElementConstructor = HTMLEHandleElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEHeightSashElement };\r\n\r\ninterface HTMLEHeightSashElementConstructor {\r\n    prototype: HTMLEHeightSashElement;\r\n    new(): HTMLEHeightSashElement;\r\n}\r\n\r\ninterface HTMLEHeightSashElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    controls: string;\r\n    growdir: \"top\" | \"bottom\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-hsash\": HTMLEHeightSashElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"resize\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-hsash\"\r\n})\r\nclass HTMLEHeightSashElementBase extends HTMLElement implements HTMLEHeightSashElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"top\"})\r\n    growdir!: \"top\" | \"bottom\";\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n    #queuedPointerCallback: FrameRequestCallback | null;\r\n    #pointerMovement: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            width: 100%;\r\n        \r\n                            max-height: 4px;\r\n                            height: 4px;\r\n                            min-height: 4px;\r\n        \r\n                            margin-top: -2px;\r\n                            margin-bottom: -2px;\r\n                            \r\n                            background-color: rgb(135, 206, 250);\r\n                            cursor: ns-resize;\r\n        \r\n                            transition-property: opacity;\r\n                            transition-delay: 0.2s;\r\n                            transition-duration: 0.2s;\r\n                            transition-timing-function: ease-out;\r\n                            opacity: 0;\r\n                        }\r\n        \r\n                        :host(:active),\r\n                        :host(:hover) {\r\n                            opacity: 1;\r\n                        }\r\n                    `\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#queuedPointerCallback = null;\r\n        this.#pointerMovement = 0;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        const rootNode = <ShadowRoot | Document>this.getRootNode();\r\n        this.#target = rootNode.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            if (this.#queuedPointerCallback == null) {\r\n                this.#pointerMovement = event.movementY;\r\n                this.#queuedPointerCallback = this.#pointerMoveCallback.bind(this);\r\n                requestAnimationFrame(this.#queuedPointerCallback);\r\n            }\r\n            else {\r\n                this.#pointerMovement += event.movementY;\r\n            }\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const {growdir} = this;\r\n            const movementY = this.#pointerMovement;\r\n            const height = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            const newHeight = Math.trunc(height + (growdir == \"top\" ? -1 : 1) * movementY);\r\n            target.style.setProperty(\"height\", `${newHeight}px`);\r\n            const computedNewHeight = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            target.style.setProperty(\"height\", `${computedNewHeight}px`);\r\n            this.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        this.#queuedPointerCallback = null;\r\n    }\r\n}\r\n\r\nvar HTMLEHeightSashElement: HTMLEHeightSashElementConstructor = HTMLEHeightSashElementBase;","import { CustomElement, AttributeProperty } from \"../Element\";\r\n\r\nexport { HTMLEImportElement };\r\n\r\ninterface HTMLEImportElementConstructor {\r\n    prototype: HTMLEImportElement;\r\n    new(): HTMLEImportElement;\r\n}\r\n\r\ninterface HTMLEImportElement extends HTMLElement {\r\n    src: string;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-import\": HTMLEImportElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"load\": Event;\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-import\"\r\n})\r\nclass HTMLEImportElementBase extends HTMLElement implements HTMLEImportElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    src!: string;\r\n    \r\n    connectedCallback(): void {\r\n        const {src} = this;\r\n        if (src) {\r\n            this.#importRequest(src);\r\n        }\r\n    }\r\n\r\n    async #importRequest(src: string): Promise<void> {\r\n        this.outerHTML = await fetch(src).then((response: Response) => {\r\n            if (response.ok) {\r\n                return response.text();\r\n            }\r\n            else {\r\n                throw new Error(response.statusText);\r\n            }\r\n        });\r\n        this.dispatchEvent(new Event(\"load\", {bubbles: true}));\r\n    }\r\n}\r\n\r\nvar HTMLEImportElement: HTMLEImportElementConstructor = HTMLEImportElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLELoaderElement };\r\n\r\ninterface HTMLELoaderElementConstructor {\r\n    prototype: HTMLELoaderElement;\r\n    new(): HTMLELoaderElement;\r\n}\r\n\r\ninterface HTMLELoaderElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    type: \"bar\" | \"circle\";\r\n    promise: Promise<any> | null;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-loader\": HTMLELoaderElement,\r\n    }\r\n}\r\n\r\nvar barShadowTemplate: HTMLTemplateElement;\r\nvar circleShadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-loader\"\r\n})\r\nclass HTMLELoaderElementBase extends HTMLElement implements HTMLELoaderElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String, defaultValue: \"bar\", observed: true})\r\n    type!: \"bar\" | \"circle\";\r\n    \r\n    #promise: Promise<any> | null;\r\n\r\n    static {\r\n        const commonStyle = element(\"style\", {\r\n            children: [\r\n                /*css*/`\r\n                    :host {\r\n                        display: inline-block;\r\n                        --default-loader-color: rgb(0, 128, 255);\r\n                        --default-animation-duration: 2s;\r\n                    }\r\n                `\r\n            ]\r\n        });\r\n        const barStyle = commonStyle.cloneNode(true);\r\n        const circleStyle = commonStyle.cloneNode(true);\r\n        barStyle.textContent += /*css*/`\r\n            :host {\r\n                display: block;\r\n            }\r\n\r\n            [part=\"bar\"] {\r\n                position: relative;\r\n                display: block;\r\n                overflow: hidden;\r\n                height: 6px;\r\n                width: 100%;\r\n            }\r\n\r\n            [part=\"slider\"] {\r\n                display: flex;\r\n                position: absolute;\r\n                width: 100%;\r\n                height: 100%;\r\n                animation-name: slider;\r\n            }\r\n\r\n            [part=\"slider\"],\r\n            [part=\"cursor\"] {\r\n                border-radius: 4px;\r\n                will-change: transform;\r\n                animation-duration: var(--animation-duration, var(--default-animation-duration));\r\n                animation-timing-function: linear;\r\n                animation-iteration-count: infinite;\r\n            }\r\n\r\n            [part=\"cursor\"] {\r\n                display: block;\r\n                width: 128px;\r\n                background-color: var(--loader-color, var(--default-loader-color));\r\n                animation-name: cursor;\r\n            }\r\n\r\n            [part=\"bar\"]:after {\r\n                animation-name: shine;\r\n                animation-duration: var(--animation-duration, var(--default-animation-duration));\r\n                animation-iteration-count: infinite;\r\n                animation-fill-mode: forwards;  \r\n                content: \"\";\r\n                position: absolute;\r\n                left: -100%;\r\n                width: 100%;\r\n                height: 100%;\r\n                top: 0;\r\n                opacity: 0;\r\n                \r\n                background: rgba(255, 255, 255, 0.13);\r\n                background: linear-gradient(\r\n                    to right, \r\n                    rgba(255, 255, 255, 0) 0%,\r\n                    rgba(255, 255, 255, 0.1) 10%,\r\n                    rgba(255, 255, 255, 0.9) 80%,\r\n                    rgba(255, 255, 255, 0) 100%\r\n                );\r\n            }\r\n\r\n            @keyframes shine {\r\n                25% {\r\n                    opacity: 1;\r\n                    left: -100%;\r\n                }\r\n                100% {\r\n                    opacity: 0;\r\n                    left: 100%;\r\n                }\r\n            }\r\n\r\n            @keyframes slider {\r\n                0% {\r\n                    transform: translateX(0%);\r\n                }\r\n                100% {\r\n                    transform: translateX(100%);\r\n                }\r\n            }\r\n\r\n            @keyframes cursor {\r\n                0% {\r\n                    transform: translateX(-100%);\r\n                }\r\n                100% {\r\n                    transform: translateX(100%);\r\n                }\r\n            }\r\n        `;\r\n        circleStyle.textContent += /*css*/`\r\n            :host {\r\n                display: inline-block;\r\n            }\r\n\r\n            [part=\"circle\"] {\r\n                width: 12px;\r\n                height: 12px;\r\n                border-top: 4px solid var(--loader-color, var(--default-loader-color));\r\n                border-right: 4px solid var(--loader-color, var(--default-loader-color));\r\n                border-left: 4px solid transparent;\r\n                border-bottom: 4px solid transparent;\r\n                border-radius: 50%;\r\n                animation-duration: 1s;\r\n                animation-name: circle;\r\n                animation-timing-function: linear;\r\n                animation-iteration-count: infinite;\r\n            }\r\n\r\n            @keyframes circle {\r\n                0% {\r\n                    transform: rotate(0);\r\n                }\r\n                100% {\r\n                    transform: rotate(360deg);\r\n                }\r\n            }\r\n        `;\r\n        barShadowTemplate = element(\"template\");\r\n        barShadowTemplate.content.append(\r\n            barStyle,\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"bar\"\r\n                },\r\n                children: [\r\n                    element(\"div\", {\r\n                        attributes: {\r\n                            part: \"slider\"\r\n                        },\r\n                        children: [\r\n                            element(\"div\", {\r\n                                attributes: {\r\n                                    part: \"cursor\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n        circleShadowTemplate = element(\"template\");\r\n        circleShadowTemplate.content.append(\r\n            circleStyle,\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"circle\"\r\n                }\r\n            })\r\n        )\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.#updateTemplate();\r\n        this.#promise = null;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"type\": {\r\n                this.#updateTemplate();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    set promise(promise: Promise<any> | null) {\r\n        if (promise) {\r\n            promise.finally(() => {\r\n                this.remove();\r\n            });\r\n        }\r\n        this.#promise = promise;\r\n    }\r\n\r\n    get promise(): Promise<any> | null {\r\n        return this.#promise;\r\n    }\r\n\r\n    #updateTemplate(): void {\r\n        const {type, shadowRoot} = this;\r\n        switch (type) {\r\n            case \"circle\": {\r\n                shadowRoot.replaceChildren(\r\n                    circleShadowTemplate.content.cloneNode(true)\r\n                );\r\n                break;\r\n            }\r\n            case \"bar\": {\r\n                shadowRoot.replaceChildren(\r\n                    barShadowTemplate.content.cloneNode(true)\r\n                );\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLELoaderElement: HTMLELoaderElementConstructor = HTMLELoaderElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEWidthSashElement };\r\n\r\ninterface HTMLEWidthSashElementConstructor {\r\n    prototype: HTMLEWidthSashElement;\r\n    new(): HTMLEWidthSashElement;\r\n}\r\n\r\ninterface HTMLEWidthSashElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    controls: string;\r\n    growdir: \"right\" | \"left\";\r\n    max: boolean;\r\n    setWidth(width: number): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-wsash\": HTMLEWidthSashElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"resize\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-wsash\"\r\n})\r\nclass HTMLEWidthSashElementBase extends HTMLElement implements HTMLEWidthSashElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"right\"})\r\n    growdir!: \"right\" | \"left\";\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    max!: boolean;\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n    #queuedPointerCallback: FrameRequestCallback | null;\r\n    #pointerMovement: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            width: 4px;\r\n                            \r\n                            background-color: transparent;\r\n                            cursor: ew-resize;\r\n        \r\n                            transition-property: opacity;\r\n                            transition-delay: 0.2s;\r\n                            transition-duration: 0.2s;\r\n                            transition-timing-function: ease-out;\r\n                        }\r\n        \r\n                        :host(:active),\r\n                        :host(:hover) {\r\n                            background-color: rgb(135, 206, 250);\r\n                        }\r\n                    `\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#queuedPointerCallback = null;\r\n        this.#pointerMovement = 0;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    setWidth(width: number): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const {max} = this;\r\n            target.style.setProperty(\"width\", `${width}px`);\r\n            if (max) {\r\n                target.style.setProperty(\"max-width\", `${width}px`);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        const rootNode = <ShadowRoot | Document>this.getRootNode();\r\n        this.#target = rootNode.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            if (this.#queuedPointerCallback == null) {\r\n                this.#queuedPointerCallback = this.#pointerMoveCallback.bind(this);\r\n                requestAnimationFrame(this.#queuedPointerCallback);\r\n            }\r\n            this.#pointerMovement += event.movementX;\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const {growdir} = this;\r\n            const movementX = this.#pointerMovement;\r\n            const width = parseFloat(targetComputedStyle.getPropertyValue(\"width\"));\r\n            const newWidth = width + (growdir == \"right\" ? 1 : -1) * movementX;\r\n            this.setWidth(newWidth);\r\n            this.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        this.#pointerMovement = 0;\r\n        this.#queuedPointerCallback = null;\r\n    }\r\n}\r\n\r\nvar HTMLEWidthSashElement: HTMLEWidthSashElementConstructor = HTMLEWidthSashElementBase;","import { areAttributesMatching, AttributeMutationMixin } from \"../elements/Element\";\r\n\r\nexport { AttributeMixinsObserver };\r\n\r\ninterface AttributeMixinsObserverConstructor {\r\n    prototype: AttributeMixinsObserver;\r\n    new(mixins: AttributeMutationMixin[]): AttributeMixinsObserver;\r\n}\r\n\r\ninterface AttributeMixinsObserver {\r\n    observe(target: Node): void;\r\n    trigger(): void;\r\n    disconnect(): void;\r\n}\r\n\r\nclass AttributeMixinsObserverBase implements AttributeMixinsObserver {\r\n    #observer: MutationObserver;\r\n    #mixins: AttributeMutationMixin[];\r\n\r\n    constructor(mixins: AttributeMutationMixin[]) {\r\n        this.#observer = new MutationObserver(\r\n            this.#callback.bind(this)\r\n        );\r\n        this.#mixins = mixins.slice();\r\n    }\r\n\r\n    trigger(): void {\r\n        this.#callback(this.#observer.takeRecords());\r\n    }\r\n\r\n    observe(target: Node): void  {\r\n        this.#observer.observe(target, {\r\n            childList: true,\r\n            subtree: true,\r\n            attributeFilter: this.#mixins.map((mixin => mixin.attributeName))\r\n        });\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#observer.disconnect();\r\n    }\r\n\r\n    #callback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            mutation.addedNodes.forEach((node: Node) => {\r\n                if (node instanceof Element) {\r\n                    this.#attachMatchingAttributeMixinsInSubtree(node);\r\n                }\r\n            });\r\n            mutation.removedNodes.forEach((node: Node) => {\r\n                if (node instanceof Element) {\r\n                    this.#detachMatchingAttributeMixinsInSubtree(node);\r\n                }\r\n            });\r\n            if (mutation.target instanceof Element) {\r\n                const targetElement = mutation.target;\r\n                const attributeName = mutation.attributeName;\r\n                if (attributeName) {\r\n                    const relatedMixins = this.#mixins.filter(mixin => mixin.attributeName == attributeName);\r\n                    relatedMixins.forEach((mixin) => {\r\n                        if (areAttributesMatching(\r\n                                mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                                attributeName!, targetElement.getAttribute(attributeName!)\r\n                            )) {\r\n                                mixin.attach(targetElement);\r\n                        }\r\n                        else {\r\n                            mixin.detach(targetElement);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    #attachMatchingAttributeMixinsInSubtree(element: Element) {\r\n        Array.from(element.attributes).forEach((attr) => {\r\n            let matchingMixins = this.#mixins.filter(\r\n                mixin => areAttributesMatching(\r\n                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                    attr.name, attr.value\r\n                )\r\n            );\r\n            matchingMixins.forEach((mixin) => {\r\n                mixin.attach(element);\r\n            });\r\n        });\r\n        let childIndex = 0;\r\n        const {children} = element;\r\n        while (childIndex < children.length) {\r\n            const child = children.item(childIndex);\r\n            if (child !== null) {\r\n                this.#attachMatchingAttributeMixinsInSubtree(child);\r\n            }\r\n            childIndex++;\r\n        }\r\n    }\r\n\r\n    #detachMatchingAttributeMixinsInSubtree(element: Element) {\r\n        Array.from(element.attributes).forEach((attr) => {\r\n            let matchingMixins = this.#mixins.filter(\r\n                mixin => areAttributesMatching(\r\n                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                    attr.name, attr.value\r\n                )\r\n            );\r\n            matchingMixins.forEach((mixin) => {\r\n                mixin.detach(element);\r\n            });\r\n        });\r\n        let childIndex = 0;\r\n        const {children} = element;\r\n        while (childIndex < children.length) {\r\n            const child = children.item(childIndex);\r\n            if (child !== null) {\r\n                this.#detachMatchingAttributeMixinsInSubtree(child);\r\n            }\r\n            childIndex++;\r\n        }\r\n    }\r\n}\r\n\r\nvar AttributeMixinsObserver: AttributeMixinsObserverConstructor = AttributeMixinsObserverBase;","import { ReactiveChildElements } from \"../../elements/Element\";\r\nimport { camelToTrain } from \"../../elements/Snippets\";\r\n\r\nexport { WidgetFactoryConstructor };\r\n\r\nexport { widget };\r\nexport { Widget };\r\nexport { WidgetFactory };\r\nexport { widgets };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {}\r\n}\r\n\r\ninterface WidgetFactoryConstructor {\r\n    prototype: WidgetFactory;\r\n    new(): WidgetFactory;\r\n}\r\n\r\ninterface WidgetFactory {\r\n    create(properties?: object): HTMLElement;\r\n    slot(root: HTMLElement, name: string | null): HTMLElement | null;\r\n}\r\n\r\nvar slotsMap: WeakMap<HTMLElement, {\r\n    widget: WidgetFactory,\r\n    element: WeakRef<HTMLElement>;\r\n    slot: string | null;\r\n}[]> = new WeakMap();\r\nvar slotsObserver = new MutationObserver(\r\n    (mutationsList: MutationRecord[]) => {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            if (target instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"childList\": {\r\n                        const slotReferences = slotsMap.get(target);\r\n                        if (slotReferences) {\r\n                            slotReferences.forEach(slotRef_i => {\r\n                                const {widget, element, slot} = slotRef_i;\r\n                                const slottedCallback = (widget as any)[\"slottedCallback\"];\r\n                                if (typeof slottedCallback == \"function\") {\r\n                                    slottedCallback(element.deref(), target, slot);\r\n                                }\r\n                            });\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n);\r\n\r\nvar widgetsMap: WeakMap<HTMLElement, WidgetFactory> = new WeakMap();\r\nvar attributesObserver = new MutationObserver(\r\n    (mutationsList: MutationRecord[]) => {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            if (target instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"attributes\": {\r\n                        const {attributeName, oldValue} = mutation;\r\n                        const widget = widgetsMap.get(target);\r\n                        if (widget) {\r\n                            const attributeChangedCallback = (widget as any)[\"attributeChangedCallback\"];\r\n                            if (typeof attributeChangedCallback == \"function\") {\r\n                                attributeChangedCallback(target, attributeName, oldValue, target.getAttribute(attributeName!));\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n);\r\n\r\nclass WidgetFactoryBase implements WidgetFactory {\r\n\r\n    constructor() {\r\n        const widget = <WidgetFactory>this;\r\n        this.create = new Proxy(\r\n            this.create, {\r\n                apply: (target, thisArg, argumentsList: Parameters<WidgetFactory[\"create\"]>) => {\r\n                    const element = <HTMLElement>Reflect.apply(target, thisArg, argumentsList);\r\n                    const observedSlots = <(string | null)[]>(widget as any)[\"observedSlots\"];\r\n                    if (Array.isArray(observedSlots)) {\r\n                        const slots = observedSlots\r\n                            .map(slotName_i => {\r\n                                return {\r\n                                    slotName: slotName_i,\r\n                                    slotElement: widget.slot(element, slotName_i)\r\n                                };\r\n                            });\r\n                        slots.forEach(slot_i => {\r\n                            const {slotElement, slotName} = slot_i;\r\n                            if (slotElement) {\r\n                                slotsObserver.observe(slotElement, {\r\n                                    childList: true\r\n                                });\r\n                                const slotReferences = slotsMap.get(slotElement);\r\n                                const slotReference = {widget, element: new WeakRef(element), slot: slotName};\r\n                                if (Array.isArray(slotReferences)) {\r\n                                    slotReferences.push(slotReference);\r\n                                }\r\n                                else {\r\n                                    slotsMap.set(slotElement, new Array(slotReference));\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                    const observedAttributes = (widget as any)[\"observedAttributes\"];\r\n                    if (Array.isArray(observedAttributes)) {\r\n                        widgetsMap.set(element, widget);\r\n                        attributesObserver.observe(element, {\r\n                            attributes: true,\r\n                            attributeFilter: observedAttributes,\r\n                            attributeOldValue: true\r\n                        });\r\n                    }\r\n                    return element;\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    create(): HTMLElement {\r\n        throw new Error(`create method is not implemented`);\r\n    }\r\n\r\n    slot(): HTMLElement | null {\r\n        return null;\r\n    }\r\n\r\n    get observedSlots(): string[] {\r\n        return [\"\"];\r\n    }\r\n}\r\n\r\nvar WidgetFactory: WidgetFactoryConstructor = WidgetFactoryBase;\r\nvar widgets: Map<string, WidgetFactory> = new Map();\r\n\r\ninterface WidgetInit<K extends keyof WidgetNameMap> {\r\n    properties?: Parameters<WidgetNameMap[K][\"create\"]>[0],\r\n    attributes?: {\r\n        [name: string]: number | string | boolean\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    slotted?: {\r\n        [slot: string]: Node | string | (Node | string)[] | NodeList | ReactiveChildElements\r\n    } | (Node | string | (Node | string)[] | NodeList | ReactiveChildElements),\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: K, init?: WidgetInit<K>): ReturnType<WidgetNameMap[K][\"create\"]>;\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: K, init?: WidgetInit<K>): HTMLElement {\r\n    const widget = widgets.get(name);\r\n    if (widget) {\r\n        if (init !== undefined) {\r\n            const {properties, attributes, dataset, slotted, listeners} = init;\r\n            const element = widget.create(properties);\r\n            if (attributes) {\r\n                Object.entries(attributes).forEach(([attributeName, attributeValue]) => {\r\n                    if (attributeValue !== undefined) {\r\n                        if (typeof attributeValue === \"boolean\") {\r\n                            element.toggleAttribute(camelToTrain(attributeName), attributeValue);\r\n                        }\r\n                        else {\r\n                            element.setAttribute(camelToTrain(attributeName), String(attributeValue));\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            if (dataset) {\r\n                const {dataset: elementDataset} = element;\r\n                Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                    elementDataset[datasetEntry_i] = String(dataset[datasetEntry_i]);\r\n                });\r\n            }\r\n            if (slotted) {\r\n                if (typeof slotted === \"function\" || Array.isArray(slotted) || slotted instanceof NodeList || typeof slotted === \"string\" || slotted instanceof Node) {\r\n                    const slot = widget.slot(element, null);\r\n                    if (slot) {\r\n                        if (typeof slotted === \"function\") {\r\n                            slot.append(...slotted(slot));\r\n                        }\r\n                        else if (typeof slotted === \"object\" && \"length\" in slotted) {\r\n                            slot.append(...Array.from(slotted));\r\n                        }\r\n                        else {\r\n                            slot.append(slotted);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    Object.entries(slotted).forEach(([slot_i, slotted]) => {\r\n                        const slot = widget.slot(element, slot_i);\r\n                        if (slot) {\r\n                            if (typeof slotted === \"function\") {\r\n                                slot.append(...slotted(slot));\r\n                            }\r\n                            else if (typeof slotted === \"object\" && \"length\" in slotted) {\r\n                                slot.append(...Array.from(slotted));\r\n                            }\r\n                            else {\r\n                                slot.append(slotted);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            if (listeners) {\r\n                Object.entries(listeners).forEach(([name_i, listener_i]) => {\r\n                    if (Array.isArray(listener_i)) {\r\n                        element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                    }\r\n                    else {\r\n                        element.addEventListener(name_i, listener_i);\r\n                    }\r\n                });\r\n            }\r\n            return element;\r\n        }\r\n        else {\r\n            return widget.create();\r\n        }\r\n    }\r\n    throw new Error(`Unknown widget ${name}. The corresponding module might not be imported.`);\r\n}\r\n\r\ninterface WidgetDecorator {\r\n    (init: {\r\n        name: string;\r\n    }): <W extends WidgetFactoryConstructor>(widget: W) => W;\r\n}\r\n\r\nconst Widget: WidgetDecorator = function(init: {\r\n    name: string;\r\n}) {\r\n    return <W extends WidgetFactoryConstructor>(\r\n        widget: W\r\n    ) => {\r\n        const {name} = init;\r\n        widgets.set(\r\n            name,\r\n            new widget()\r\n        );\r\n        return widget;\r\n    }\r\n}","import { element } from \"../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"./Widget\";\r\n\r\nexport { separatorWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"separator\": SeparatorWidgetFactory\r\n    }\r\n}\r\n\r\ninterface SeparatorWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar separatorWidget = new (\r\nWidget({\r\n    name: \"separator\"\r\n})(class SeparatorWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"separator\",\r\n                role: \"separator\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuItemWidget };\r\n\r\ntype MenuItemType = \"button\" | \"radio\" | \"checkbox\" | \"menu\" | \"submenu\";\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menuitem\": MenuItemWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        type?: MenuItemType;\r\n        checked?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void;\r\n    getMenu(item: HTMLElement): HTMLElement | null;\r\n    getKeyShortcut(item: HTMLElement): string | null;\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    getType(item: HTMLElement): MenuItemType | null;\r\n    setType(item: HTMLElement, type: MenuItemType): void;\r\n    getValue(item: HTMLElement): string;\r\n    setValue(item: HTMLElement, value: string): void;\r\n    getName(item: HTMLElement): string;\r\n    setName(item: HTMLElement, value: string): void;\r\n    getChecked(item: HTMLElement): boolean;\r\n    setChecked(item: HTMLElement, value: boolean): void;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setExpanded(item: HTMLElement, value: boolean): void;\r\n    getExpanded(item: HTMLElement): boolean;\r\n    toggle(item: HTMLElement, force?: boolean): void;\r\n    expand(item: HTMLElement): void;\r\n    collapse(item: HTMLElement): void;\r\n}\r\n\r\nvar menuItemWidget = new(\r\nWidget({\r\n    name: \"menuitem\"\r\n})(\r\nclass MenuItemWidgetFactoryBase extends WidgetFactory implements MenuItemWidgetFactory {\r\n    #iconPartTemplate: HTMLElement;\r\n    #arrowPartTemplate : HTMLElement;\r\n    #keyshortcutsPartTemplate: HTMLElement;\r\n    #template: HTMLElement;\r\n    #types: MenuItemType[];\r\n    #typesFeatures: {\r\n        [key in MenuItemType]: {\r\n            role: string,\r\n            hasIcon: boolean,\r\n            hasArrow: boolean\r\n        }\r\n    };\r\n\r\n    constructor() {\r\n        super();\r\n        this.#iconPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"icon\"\r\n            }\r\n        });\r\n        this.#arrowPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"arrow\"\r\n            }\r\n        });\r\n        this.#keyshortcutsPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"keyshortcuts\"\r\n            }\r\n        });\r\n        this.#template = element(\"button\", {\r\n            attributes: {\r\n                class: \"menuitem\",\r\n                role: \"menuitem\",\r\n                type: \"button\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                this.#iconPartTemplate.cloneNode(true),\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n        this.#types = [\"checkbox\", \"radio\", \"menu\", \"submenu\", \"button\"];\r\n        this.#typesFeatures = {\r\n            button: {\r\n                role: \"menuitem\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            checkbox: {\r\n                role: \"menuitemcheckbox\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            radio: {\r\n                role: \"menuitemradio\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            menu: {\r\n                role: \"menuitem\",\r\n                hasIcon: false,\r\n                hasArrow: false\r\n            },\r\n            submenu: {\r\n                role: \"menuitem\",\r\n                hasIcon: true,\r\n                hasArrow: true\r\n            }\r\n        }\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        type: MenuItemType;\r\n        checked?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (init !== undefined) {\r\n            const {id, classList, tabIndex, keyshortcut, checked, type, label, name, value, disabled} = init;\r\n            if (id !== undefined) {\r\n                item.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                item.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                item.tabIndex = tabIndex;\r\n            }\r\n            if (keyshortcut !== undefined) {\r\n                this.setKeyShortcut(item, keyshortcut);\r\n            }\r\n            if (checked !== undefined) {\r\n                this.setChecked(item, checked);\r\n            }\r\n            if (type !== undefined) {\r\n                if (type == \"menu\" || type == \"submenu\") {\r\n                    this.setExpanded(item, false);\r\n                }\r\n                this.setType(item, type);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(item, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(item, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(item: HTMLElement): HTMLElement | null {\r\n        return item;\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void {\r\n        const hasChildMenu = Array.from(slot.childNodes).some(\r\n            childNode_i => childNode_i instanceof HTMLElement && childNode_i.classList.contains(\"menu\")\r\n        );\r\n        item.setAttribute(\"aria-haspopup\", String(hasChildMenu));\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n\r\n    getMenu(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .menu\");\r\n    }\r\n\r\n    getKeyShortcut(item: HTMLElement): string | null {\r\n        return item.getAttribute(\"aria-keyshortcuts\");\r\n    }\r\n\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void {\r\n        let keyshortcutsPart = item.querySelector(\":scope > .keyshortcuts\");\r\n        if (value !== null) {\r\n            item.setAttribute(\"aria-keyshortcuts\", value);\r\n            if (!keyshortcutsPart) {\r\n                const labelPart = this.#label(item);\r\n                const keyshortcutsPartTemplate = this.#keyshortcutsPartTemplate;\r\n                keyshortcutsPart = <HTMLElement>keyshortcutsPartTemplate.cloneNode(true);\r\n                labelPart.after(keyshortcutsPart);\r\n            }\r\n            keyshortcutsPart.textContent = value;\r\n        }\r\n        else {\r\n            item.removeAttribute(\"aria-keyshortcuts\");\r\n            if (keyshortcutsPart) {\r\n                keyshortcutsPart.remove();\r\n            }\r\n        }\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n    \r\n    getType(item: HTMLElement): MenuItemType | null {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`menuitem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setType(item: HTMLElement, type: MenuItemType): void {\r\n        const typesFeatures = this.#typesFeatures;\r\n        const iconPartTemplate = this.#iconPartTemplate;\r\n        const arrowPartTemplate = this.#arrowPartTemplate;\r\n        const {role, hasIcon, hasArrow} = typesFeatures[type];\r\n        const oldType = this.getType(item);\r\n        const {classList} = item;\r\n        if (oldType) {\r\n            classList.remove(`menuitem-${oldType}`);\r\n        }\r\n        classList.add(`menuitem-${type}`);\r\n        item.setAttribute(\"role\", role);\r\n        const labelPart = this.#label(item);\r\n        const iconPart = item.querySelector(\":scope > .icon\");\r\n        const arrowPart = item.querySelector(\":scope > .arrow\");\r\n        if (hasIcon) {\r\n            if (!iconPart && labelPart) {\r\n                labelPart.before(iconPartTemplate.cloneNode(true));\r\n            }\r\n        }\r\n        else {\r\n            if (iconPart) {\r\n                iconPart.remove();\r\n            }\r\n        }\r\n        if (hasArrow) {\r\n            if (!arrowPart && labelPart) {\r\n                labelPart.after(arrowPartTemplate.cloneNode(true));\r\n            }\r\n        }\r\n        else {\r\n            if (arrowPart) {\r\n                arrowPart.remove();\r\n            }\r\n        }\r\n    }\r\n\r\n    getValue(item: HTMLElement): string {\r\n        return item.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"value\", value);\r\n    }\r\n    \r\n    getName(item: HTMLElement): string {\r\n        return item.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getChecked(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-checked\") ?? String(false));\r\n    }\r\n\r\n    setChecked(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-checked\", String(value));\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-expanded\", String(value));\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-expanded\") ?? String(false));\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        const expand = force ?? !this.getExpanded(item);\r\n        this.setExpanded(item, expand);\r\n        if (expand) {\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    expand(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (!expanded) {\r\n            this.setExpanded(item, true);\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    collapse(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (expanded) {\r\n            this.setExpanded(item, false);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.setChecked(targetItem, !this.getChecked(targetItem));\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.setChecked(targetItem, true);\r\n                    break;\r\n                }\r\n                case \"menu\":\r\n                case \"submenu\": {\r\n                    this.toggle(targetItem);\r\n                    if (this.getExpanded(targetItem)) {\r\n                        this.getMenu(targetItem)?.focus({preventScroll: true});\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(item: HTMLElement): void {\r\n        const menu = this.getMenu(item);\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = item.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const type = this.getType(item);\r\n            if (type == \"menu\") {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const closestMenu = item.closest(\".menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    const overflowX = itemRight + menuWidth - clientWidth;\r\n                    const overflowY = itemTop + menuHeight - clientHeight;\r\n                    menuStyle.setProperty(\"left\", `${\r\n                        overflowX > 0 ?\r\n                        itemLeft - menuWidth - closestMenuLeft :\r\n                        itemRight - closestMenuLeft\r\n                    }px`);\r\n                    const menuComputedStyle = window.getComputedStyle(menu);\r\n                    const {paddingTop, paddingBottom} = menuComputedStyle;\r\n                    const menuPaddingTop = parseFloat(paddingTop);\r\n                    const menuPaddingBottom = parseFloat(paddingBottom);\r\n                    menuStyle.setProperty(\"top\", `${\r\n                        overflowY > 0 ?\r\n                        itemBottom - menuHeight - closestMenuTop + menuPaddingBottom :\r\n                        itemTop - closestMenuTop - menuPaddingTop\r\n                    }px`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { menuItemWidget } from \"./MenuItemWidget\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuBarWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menubar\": MenuBarWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuBarWidgetFactory extends WidgetFactory {\r\n    setExpanded(menubar: HTMLElement, value: boolean): void;\r\n    getExpanded(menubar: HTMLElement): boolean;\r\n}\r\n\r\nvar menuBarWidget = new (\r\nWidget({\r\n    name: \"menubar\"\r\n})(class MenubarWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menubar\",\r\n                role: \"menubar\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        )\r\n    }\r\n\r\n    create() {\r\n        const menubar = <HTMLElement>this.#template.cloneNode(true);\r\n        menubar.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        menubar.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        menubar.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        menubar.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        menubar.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        return menubar;\r\n    }\r\n\r\n    slot(menubar: HTMLElement) {\r\n        return menubar;\r\n    }\r\n\r\n    setExpanded(menubar: HTMLElement, value: boolean): void {\r\n        menubar.toggleAttribute(\"aria-expanded\", value);\r\n    }\r\n\r\n    getExpanded(menubar: HTMLElement): boolean {\r\n        return menubar.hasAttribute(\"aria-expanded\");\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node) {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"menuitem\") && !menuItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"menuitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getActiveItem(menubar: HTMLElement): HTMLElement | null {\r\n        return menubar.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem:focus-within\"\r\n        );\r\n    }\r\n\r\n    #firstItem(menubar: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menubar;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(menubar: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menubar;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n\r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = menuItemWidget.getMenu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #isClosestMenu(menubar: HTMLElement, target: HTMLElement): boolean {\r\n        return target.closest(\":is(.menubar, .menu)\") == menubar;\r\n    }\r\n\r\n    #nearestItem(menubar: HTMLElement, target: HTMLElement): HTMLElement | null {\r\n        return Array.from(menubar.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem) {\r\n            const expanded = this.getExpanded(menubar);\r\n            const isClosestMenu = this.#isClosestMenu(menubar, targetItem);\r\n            if (isClosestMenu) {\r\n                const isExpanded = !expanded;\r\n                this.setExpanded(menubar, isExpanded);\r\n                if (isExpanded) {\r\n                    if (targetItem !== null && !menuItemWidget.getExpanded(targetItem)) {\r\n                        menuItemWidget.expand(targetItem);\r\n                    }\r\n                    const menu = menuItemWidget.getMenu(targetItem);\r\n                    menu?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    menubar.focus({preventScroll: true})\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && this.getExpanded(menubar)) {\r\n            const nearestItem = this.#nearestItem(menubar, target);\r\n            if (nearestItem) {\r\n                menuItemWidget.expand(nearestItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && !target.contains(<Element>relatedTarget)) {\r\n            const nearestItem = this.#nearestItem(menubar, target);\r\n            if (nearestItem) {\r\n                menuItemWidget.collapse(nearestItem);\r\n            }\r\n        }\r\n        const lostFocusWithin = !menubar.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.setExpanded(menubar, false);\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const activeItem = this.#getActiveItem(menubar);\r\n            const expanded = this.getExpanded(menubar);\r\n            const isClosestMenu = this.#isClosestMenu(menubar, target);\r\n            if (isClosestMenu && target !== activeItem && expanded) {\r\n                const menu = menuItemWidget.getMenu(target);\r\n                if (menu) {\r\n                    menu.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    target.focus({preventScroll: true});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        let activeItem = this.#getActiveItem(menubar);\r\n        const expanded = this.getExpanded(menubar);\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem(menubar) :\r\n                    this.#firstItem(menubar);\r\n                previousItem?.focus({preventScroll: true});\r\n                activeItem = this.#getActiveItem(menubar);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem(menubar) : \r\n                    this.#lastItem(menubar);\r\n                nextItem?.focus({preventScroll: true});\r\n                activeItem = this.#getActiveItem(menubar);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    this.setExpanded(menubar, !expanded);\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.setExpanded(menubar, false);\r\n                    if (activeItem) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    menubar.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { menuItemWidget } from \"./MenuItemWidget\";\r\n\r\nexport { menuWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menu\": MenuWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        contextual?: boolean;\r\n        position?: {x: number, y: number};\r\n    }): HTMLElement;\r\n    setPosition(menu: HTMLElement, x: number, y: number): void;\r\n    getContextual(menu: HTMLElement): boolean;\r\n    setContextual(menu: HTMLElement, value: boolean): void;\r\n    items(menu: HTMLElement): HTMLElement[];\r\n}\r\n\r\nvar mouseOverExpandDelay = 0_200;\r\nvar mouseOutCollapseDelay = 0_400;\r\n\r\nvar menuWidget = new (\r\nWidget({\r\n    name: \"menu\"\r\n})(class MenuWidgetFactoryBase extends WidgetFactory implements MenuWidgetFactory {\r\n\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #toggleTimeouts: WeakMap<HTMLElement, {clear(): void;}>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menu\",\r\n                role: \"menu\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#toggleTimeouts = new WeakMap();\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        contextual?: boolean;\r\n        position?: {x: number, y: number};\r\n    }): HTMLElement {\r\n        const menu = <HTMLElement>this.#template.cloneNode(true);\r\n        menu.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        menu.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        menu.addEventListener(\"mouseout\", this.#handleMouseOutEvent.bind(this));\r\n        menu.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        menu.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, contextual, position} = properties;\r\n            if (id !== undefined) {\r\n                menu.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                menu.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                menu.tabIndex = tabIndex;\r\n            }\r\n            if (contextual !== undefined) {\r\n                this.setContextual(menu, contextual);\r\n            }\r\n            if (position !== undefined) {\r\n                const {x, y} = position;\r\n                this.setPosition(menu, x, y);\r\n            }\r\n        }\r\n        return menu;\r\n    }\r\n\r\n    slot(menu: HTMLElement): HTMLElement | null {\r\n        return menu;\r\n    }\r\n\r\n    setPosition(menu: HTMLElement, x: number, y: number): void {\r\n        const {style} = menu;\r\n        const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        const left = x + scrollX;\r\n        const top = y + scrollY;\r\n        const {clientWidth, clientHeight} = document.body;\r\n        const overflowX = left + menuWidth - clientWidth;\r\n        const overflowY = top + menuHeight - clientHeight;\r\n        style.setProperty(\"left\", `${overflowX > 0 ? left - menuWidth : left}px`);\r\n        style.setProperty(\"top\", `${overflowY > 0 ? top - menuHeight : top}px`);\r\n    }\r\n\r\n    getContextual(menu: HTMLElement): boolean {\r\n        const {classList} = menu;\r\n        return classList.contains(\"menu-contextual\");\r\n    }\r\n\r\n    setContextual(menu: HTMLElement, value: boolean): void {\r\n        const {classList} = menu;\r\n        if (value) {\r\n            classList.add(\"menu-contextual\");\r\n        }\r\n        else {\r\n            classList.remove(\"menu-contextual\");\r\n        }\r\n    }\r\n\r\n    items(menu: HTMLElement): HTMLElement[] {\r\n        return Array.from(menu.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        ));\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"menuitem\") && !menuItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"menuitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #collapseSubmenus(menu: HTMLElement): void {\r\n        menu.querySelectorAll<HTMLElement>(\":is(:scope, :scope > .menuitemgroup) > .menuitem[aria-expanded]\")\r\n            .forEach(menuitem_i => menuItemWidget.collapse(menuitem_i));\r\n    }\r\n\r\n    #isClosestMenu(menu: HTMLElement, target: HTMLElement): boolean {\r\n        return target.closest(\".menu\") == menu;\r\n    }\r\n\r\n    #nearestItem(menu: HTMLElement, target: HTMLElement): HTMLElement | null {\r\n        return Array.from(menu.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #firstItem(menu: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menu;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(menu: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menu;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n\r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = menuItemWidget.getMenu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #getActiveItem(menu: HTMLElement): HTMLElement | null {\r\n        return menu.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem:focus-within\"\r\n        );\r\n    }\r\n\r\n    async #setItemTimeout(item: HTMLElement, delay?: number): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => {\r\n                resolve(undefined);\r\n            }, delay ?? 0);\r\n            this.#toggleTimeouts.set(item, {\r\n                clear: () => {\r\n                    clearTimeout(timeout);\r\n                    reject();\r\n                }\r\n            });\r\n        }).then(() => {\r\n            this.#toggleTimeouts.delete(item);\r\n        });\r\n    }\r\n\r\n    #clearItemTimeout(item: HTMLElement): void {\r\n        const timeout = this.#toggleTimeouts.get(item);\r\n        if (typeof timeout !== \"undefined\") {\r\n            this.#toggleTimeouts.delete(item);\r\n            timeout.clear();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem) {\r\n            const contextual = this.getContextual(targetMenu);\r\n            if (contextual) {\r\n                try {\r\n                    targetMenu.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const isClosestMenu = this.#isClosestMenu(targetMenu, targetItem);\r\n                if (isClosestMenu) {\r\n                    const type = menuItemWidget.getType(targetItem);\r\n                    const name = menuItemWidget.getName(targetItem);\r\n                    const value = menuItemWidget.getValue(targetItem);\r\n                    if (type == \"radio\") {\r\n                        targetMenu.querySelectorAll<HTMLElement>(\r\n                            `:is(:scope, :scope > .menuitemgroup) > .menuitem-radio[name=${name}]`\r\n                        )\r\n                        .forEach((radio_i) => {\r\n                            menuItemWidget.setChecked(radio_i, menuItemWidget.getValue(radio_i) == value);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetMenu.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const contextual = this.getContextual(targetMenu);\r\n            if (contextual) {\r\n                try {\r\n                    targetMenu.remove();\r\n                } catch (error) {\r\n                    undefined;\r\n                }\r\n            }\r\n            else {\r\n                const nearestItem = this.#nearestItem(targetMenu, <HTMLElement>target);\r\n                if (nearestItem) {\r\n                    menuItemWidget.collapse(nearestItem);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetMenu);\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem(targetMenu) :\r\n                    this.#firstItem(targetMenu);\r\n                previousItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem(targetMenu) :\r\n                    this.#firstItem(targetMenu);\r\n                nextItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetMenu);\r\n                firstItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetMenu);\r\n                lastItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const type = menuItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            menuItemWidget.expand(activeItem);\r\n                            const firstChildItem = this.#firstChildItem(activeItem);\r\n                            firstChildItem?.focus({preventScroll: true});\r\n                            event.preventDefault();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    const isTargetClosestMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                    ) == targetMenu;\r\n                    if (!isTargetClosestMenu) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const isTargetClosestMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                    ) == targetMenu;\r\n                    if (!isTargetClosestMenu) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const type = menuItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            const expanded = menuItemWidget.getExpanded(activeItem);\r\n                            if (!expanded) {\r\n                                menuItemWidget.expand(activeItem);\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                                event.stopPropagation();\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOutEvent(event: MouseEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const nearestItem = this.#nearestItem(targetMenu, target);\r\n            if (nearestItem !== null) {\r\n                if (menuItemWidget.getType(nearestItem) == \"submenu\" &&\r\n                    !menuItemWidget.getExpanded(nearestItem)) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                ) == targetMenu;\r\n                if (isTargetClosestMenu) {\r\n                    const activeItem = this.#getActiveItem(targetMenu);\r\n                    if (activeItem !== null &&\r\n                        menuItemWidget.getType(activeItem) == \"submenu\" &&\r\n                        menuItemWidget.getExpanded(activeItem)) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, mouseOutCollapseDelay)\r\n                            .then(() => {\r\n                                menuItemWidget.collapse(activeItem);\r\n                            })\r\n                            .catch(() => undefined);\r\n                    }\r\n                    const {clientX, clientY} = event;\r\n                    const {left, right, top, bottom} = targetMenu.getBoundingClientRect();\r\n                    const intersectsWithMouse = !(\r\n                        left > clientX || right < clientX || top > clientY || bottom < clientY\r\n                    );\r\n                    const containsRelatedTarget = targetMenu.contains(<Node>relatedTarget);\r\n                    if (intersectsWithMouse && containsRelatedTarget) {\r\n                        if (relatedTarget instanceof HTMLElement && relatedTarget.classList.contains(\"menu\") && relatedTarget !== targetMenu) {\r\n                            relatedTarget.focus({preventScroll: true});\r\n                        }\r\n                        else {\r\n                            targetMenu.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    if (!intersectsWithMouse) {\r\n                        targetMenu.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const nearestItem = this.#nearestItem(targetMenu, target); \r\n            if (nearestItem !== null) {\r\n                if (menuItemWidget.getType(nearestItem) == \"submenu\" &&\r\n                    menuItemWidget.getExpanded(nearestItem)) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                ) == targetMenu;\r\n                if (isTargetClosestMenu) {\r\n                    const activeItem = this.#getActiveItem(targetMenu);\r\n                    if (activeItem !== null) {\r\n                        if (menuItemWidget.getType(activeItem) == \"submenu\" &&\r\n                            menuItemWidget.getExpanded(activeItem) && \r\n                            !activeItem.contains(<HTMLElement>target)) {\r\n                            this.#clearItemTimeout(activeItem);\r\n                            this.#setItemTimeout(activeItem, mouseOutCollapseDelay)\r\n                                .then(() => {\r\n                                    menuItemWidget.collapse(activeItem);\r\n                                })\r\n                                .catch(() => undefined);\r\n                        }\r\n                    }\r\n                    nearestItem.focus({preventScroll: true});\r\n                    if (menuItemWidget.getType(nearestItem) == \"submenu\") {\r\n                        if (!menuItemWidget.getExpanded(nearestItem)) {\r\n                            this.#clearItemTimeout(nearestItem);\r\n                            this.#setItemTimeout(nearestItem, mouseOverExpandDelay)\r\n                                .then(() => {\r\n                                    const activeItem = this.#getActiveItem(targetMenu);\r\n                                    this.#collapseSubmenus(targetMenu);\r\n                                    if (activeItem) {\r\n                                        this.#clearItemTimeout(activeItem);\r\n                                        menuItemWidget.expand(activeItem);\r\n                                        menuItemWidget.getMenu(activeItem)?.focus({preventScroll: true});\r\n                                    }\r\n                                })\r\n                                .catch(() => undefined);\r\n                        }\r\n                        else {\r\n                            menuItemWidget.getMenu(nearestItem)?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menuitemgroup\": MenuItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar menuItemGroupWidget = new (\r\nWidget({\r\n    name: \"menuitemgroup\"\r\n})(class MenuItemGroupWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menuitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement): HTMLElement | null {\r\n        return group;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { treeItemWidget };\r\n\r\ntype TreeItemType = \"parent\" | \"leaf\";\r\n\r\ninterface TreeItemWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        type?: TreeItemType;\r\n        label?: string;\r\n        title?: string;\r\n        disabled?: boolean;\r\n        draggable?: boolean;\r\n    }): HTMLElement;\r\n    group(item: HTMLElement): HTMLElement | null;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setExpanded(item: HTMLElement, value: boolean): void;\r\n    getExpanded(item: HTMLElement): boolean;\r\n    setDraggable(row: HTMLElement, value: boolean): void;\r\n    getDraggable(item: HTMLElement): boolean;\r\n    getType(item: HTMLElement): TreeItemType | null;\r\n    setType(item: HTMLElement, value: TreeItemType): void;\r\n    toggle(item: HTMLElement, force?: boolean): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"treeitem\": TreeItemWidgetFactory,\r\n    }\r\n}\r\n\r\nvar treeItemWidget = new (\r\nWidget({\r\n    name: \"treeitem\"\r\n})(class TreeItemWidgetFactoryBase extends WidgetFactory implements TreeItemWidgetFactory {\r\n    #template: HTMLElement;\r\n    #types: TreeItemType[];\r\n\r\n    constructor() {\r\n        super();\r\n        this.#types = [\"parent\", \"leaf\"];\r\n        this.#template = element(\"li\", {\r\n            attributes: {\r\n                class: \"treeitem\",\r\n                role: \"treeitem\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"content\"\r\n                    },\r\n                    children: [\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"arrow\"\r\n                            }\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    group(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .treeitemgroup\");\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        label?: string;\r\n        title?: string;\r\n        type?: TreeItemType;\r\n        disabled?: boolean;\r\n        draggable?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, label, title, type = \"leaf\", disabled, draggable} = properties;\r\n            if (id !== undefined) {\r\n                item.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                item.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                item.tabIndex = tabIndex;\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (title !== undefined) {\r\n                this.setTitle(item, title);\r\n            }\r\n            this.setType(item, type);\r\n            if (type === \"parent\") {\r\n                this.setExpanded(item, false);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n            if (draggable !== undefined) {\r\n                this.setDraggable(item, draggable);\r\n            }\r\n            this.setSelected(item, false);\r\n        }\r\n        return item;\r\n    }\r\n\r\n    get observedSlots() {\r\n        return [\"content\", \"group\"];\r\n    }\r\n\r\n    slot(item: HTMLElement, name: string | null) {\r\n        switch (name) {\r\n            case \"content\":\r\n                return this.#content(item);\r\n            case \"group\":\r\n                return item;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #content(item: HTMLElement): HTMLElement {\r\n        const content = item.querySelector<HTMLElement>(\":scope > .content\")!;\r\n        if (!content) throw new Error(\"Missing .content slot.\");\r\n        return content;\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return item.getAttribute(\"aria-label\") ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"aria-label\", value);\r\n    }\r\n\r\n    getTitle(item: HTMLElement): string {\r\n        return item.title;\r\n    }\r\n\r\n    setTitle(item: HTMLElement, value: string): void {\r\n        item.title = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? Number(posInSet) : -1;\r\n    }\r\n\r\n    getType(item: HTMLElement): TreeItemType {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`treeitem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        throw new Error(\"Missing type.\");\r\n    }\r\n\r\n    setType(item: HTMLElement, type: TreeItemType): void {\r\n        const {classList} = item;\r\n        try {\r\n            const oldType = this.getType(item);\r\n            classList.remove(`treeitem-${oldType}`);\r\n        }\r\n        catch (e) {};\r\n        classList.add(`treeitem-${type}`);\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-expanded\", String(value));\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-expanded\") ?? String(false));\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            if (!classList.contains(\"active\")) {\r\n                classList.add(\"active\");\r\n            }\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDraggable(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"draggable\", String(value));\r\n    }\r\n\r\n    getDraggable(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"draggable\") ?? String(false));\r\n    }\r\n\r\n    setSelected(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-selected\", String(value));\r\n        item.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    setLevel(item: HTMLElement, value: number): void {\r\n        item.style.setProperty(\"--level\", String(value));\r\n    }\r\n\r\n    getLevel(item: HTMLElement): number {\r\n        return parseInt(item.style.getPropertyValue(\"--level\"));\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        this.setExpanded(item, force ?? !this.getExpanded(item));\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget, shiftKey, ctrlKey} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            if (type == \"parent\" && !(shiftKey || ctrlKey)) {\r\n                this.toggle(targetItem);\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { treeItemWidget } from \"./TreeItemWidget\";\r\n\r\nexport { treeWidget };\r\n\r\ninterface TreeWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement;\r\n    items(tree: HTMLElement): HTMLElement[];\r\n    selectedItems(tree: HTMLElement): HTMLElement[];\r\n    beginSelection(tree: HTMLElement): void;\r\n    endSelection(tree: HTMLElement): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"tree\": TreeWidgetFactory,\r\n    }\r\n}\r\n\r\nvar treeWidget = new (\r\nWidget({\r\n    name: \"tree\"\r\n})(class TreeWidgetFactoryBase extends WidgetFactory implements TreeWidgetFactory {\r\n\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"tree\",\r\n                role: \"tree\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement {\r\n        const tree = <HTMLElement>this.#template.cloneNode(true);\r\n        tree.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        tree.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        tree.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        tree.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        tree.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        tree.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        tree.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        tree.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        tree.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        tree.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        tree.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        this.#onSelection.set(tree, false);\r\n        this.#hasSelectionChanged.set(tree, false);\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, multisectable} = properties;\r\n            if (id !== undefined) {\r\n                tree.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                tree.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                tree.tabIndex = tabIndex;\r\n            }\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(tree, multisectable);\r\n            }\r\n        }\r\n        return tree;\r\n    }\r\n\r\n    slot(tree: HTMLElement) {\r\n        return tree;\r\n    }\r\n\r\n    slottedCallback(tree: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"treeitem\")) {\r\n                treeItemWidget.setPosInSet(child_i, i);\r\n                treeItemWidget.setLevel(child_i, 0);\r\n            }\r\n        });\r\n    }\r\n\r\n    items(tree: HTMLElement): HTMLElement[] {\r\n        return Array.from(tree.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .treeitemgroup) > .treeitem\"\r\n        ));\r\n    }\r\n\r\n    selectedItems(tree: HTMLElement): HTMLElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        let item = this.#firstItem(tree);\r\n        while (item !== null) {\r\n            const selected = treeItemWidget.getSelected(item);\r\n            if (selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(tree: HTMLElement): void {\r\n        this.#onSelection.set(tree, true);\r\n    }\r\n\r\n    endSelection(tree: HTMLElement): void {\r\n        this.#onSelection.set(tree, false);\r\n        if (this.#hasSelectionChanged.get(tree)) {\r\n            tree.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(tree, false);\r\n        }\r\n    }\r\n\r\n    setMultiSelectable(tree: HTMLElement, value: boolean): void {\r\n        tree.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(tree: HTMLElement): boolean {\r\n        return JSON.parse(tree.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    #getActiveItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".treeitem.active\");\r\n    }\r\n\r\n    #getDropTargetItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".treeitem.droptarget\");\r\n    }\r\n\r\n    #setDropTargetItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const {classList} = tree;\r\n        const dropTargetItem = this.#getDropTargetItem(tree);\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            treeItemWidget.setDropTarget(dropTargetItem, false);\r\n        }\r\n        if (item !== null) {\r\n            treeItemWidget.setDropTarget(item, true);\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"treeitem\") && !treeItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"treeitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextItem = this.#nextItem(from);\r\n            while (nextItem && nextItem !== to) {\r\n                range.push(nextItem);\r\n                nextItem = this.#nextItem(nextItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousItem = this.#previousItem(from);\r\n            while (previousItem && previousItem !== to) {\r\n                range.push(previousItem);\r\n                previousItem = this.#previousItem(previousItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        selectedItems.forEach((item_i) => {\r\n            if (!items.includes(item_i)) {\r\n                treeItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            const selected = treeItemWidget.getSelected(item_i);\r\n            if (tree.contains(item_i) && !selected) {\r\n                treeItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #addToSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        this.beginSelection(tree);\r\n        items.forEach((item_i) => {\r\n            if (!treeItemWidget.getSelected(item_i)) {\r\n                treeItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #removeFromSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                treeItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #clearSelection(tree: HTMLElement): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        selectedItems.forEach((item_i) => {\r\n            treeItemWidget.setSelected(item_i, false);\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #setActiveItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(tree);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            treeItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            treeItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #firstItem(tree: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(tree: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousSibling = <HTMLElement | null>walker.previousSibling();\r\n        return previousSibling ?\r\n            this.#deepestItem(previousSibling) :\r\n            <HTMLElement | null>walker.parentNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const type = treeItemWidget.getType(item);\r\n        const expanded = treeItemWidget.getExpanded(item);\r\n        return <HTMLElement | null>(\r\n            type === \"leaf\" ?\r\n                walker.nextNode() :\r\n                expanded ?\r\n                    walker.nextNode() :\r\n                    walker.nextSibling() ??\r\n                    (walker.parentNode(), walker.nextSibling())\r\n        );\r\n    }\r\n\r\n    #deepestItem(item: HTMLElement): HTMLElement {\r\n        const expanded = treeItemWidget.getExpanded(item);\r\n        if (expanded) {\r\n            const walker = this.#walker;\r\n            const lastItem = <HTMLElement>walker.lastChild();\r\n            if (lastItem) {\r\n                return this.#deepestItem(lastItem);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey, button} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        if (targetItem) {\r\n            const selected = treeItemWidget.getSelected(targetItem);\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setSelection(targetTree, targetItem);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            targetItem.blur();\r\n                            this.#removeFromSelection(targetTree, targetItem);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(targetTree, targetItem);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const activeItem = this.#getActiveItem(targetTree);\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                targetItem\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetTree, ...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                }\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(targetTree, targetItem);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            const type = treeItemWidget.getType(targetItem);\r\n            if (type == \"parent\") {\r\n                treeItemWidget.toggle(targetItem, true);\r\n            }\r\n            this.#setDropTargetItem(targetTree, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (!targetTree.contains(<Node>relatedTarget)) {\r\n            this.#setDropTargetItem(targetTree, null);\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const focusWithin = targetTree.contains(<Node>relatedTarget);\r\n        if (!focusWithin) {   \r\n            const activeItem = this.#getActiveItem(targetTree);\r\n            if (activeItem) {\r\n                activeItem.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetTree, targetItem);\r\n            targetTree.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetTree.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetTree.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetTree);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetTree, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetTree, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(\r\n                                firstItem,\r\n                                this.#deepestItem(lastItem)\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetTree, ...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const expanded = treeItemWidget.getExpanded(activeItem);\r\n                    if (expanded) {\r\n                        treeItemWidget.toggle(activeItem);\r\n                    }\r\n                    else {\r\n                        const walker = this.#walker;\r\n                        const parentItem = <HTMLElement>walker.parentNode();\r\n                        if (parentItem) {\r\n                            parentItem.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const expanded = treeItemWidget.getExpanded(activeItem);\r\n                    if (!expanded) {\r\n                        treeItemWidget.toggle(activeItem);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = treeItemWidget.getSelected(previousItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetTree, previousItem) :\r\n                                this.#addToSelection(targetTree, previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetTree);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = treeItemWidget.getSelected(nextItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetTree, nextItem) :\r\n                                this.#addToSelection(targetTree, nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetTree);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetTree);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetTree);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(targetTree, activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection(targetTree);\r\n                this.#setActiveItem(targetTree, null);\r\n                targetTree.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {target} = event;\r\n        const targetTree = <HTMLElement>target;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"treeitem\")) {\r\n            if (this.#onSelection.get(targetTree)) {\r\n                this.#hasSelectionChanged.set(target, true);\r\n            }\r\n            else {\r\n                targetTree.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { treeItemWidget } from \"./TreeItemWidget\";\r\n\r\nexport { treeItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"treeitemgroup\": TreeItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface TreeItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar treeItemGroupWidget = new (\r\nWidget({\r\n    name: \"treeitemgroup\"\r\n})(class TreeItemGroupWidgetFactoryBase extends WidgetFactory implements TreeItemGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"treeitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n\r\n    slottedCallback(group: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"treeitem\")) {\r\n                treeItemWidget.setPosInSet(child_i, i);\r\n                treeItemWidget.setLevel(child_i, (() => {\r\n                    let level = -1;\r\n                    let closestItem: HTMLElement | null = child_i;\r\n                    while (closestItem !== null && closestItem.matches(\".tree :scope\")) {\r\n                        closestItem = closestItem.parentElement?.closest(\".treeitem\") ?? null;\r\n                        level++;\r\n                    }\r\n                    return level;\r\n                })());\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { listItemWidget };\r\n\r\ninterface ListItemWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        label?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"listitem\": ListItemWidgetFactory,\r\n    }\r\n}\r\n\r\nvar listItemWidget = new (\r\nWidget({\r\n    name: \"listitem\"\r\n})(class ListItemWidgetFactoryBase extends WidgetFactory implements ListItemWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"li\", {\r\n            attributes: {\r\n                class: \"listitem\",\r\n                role: \"listitem\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        label?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {label, disabled} = init;\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n            this.setSelected(item, false);\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(root: HTMLElement): HTMLElement | null {\r\n        return root;\r\n    }\r\n\r\n    group(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .listitemgroup\");\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(row: HTMLElement, value: boolean): void {\r\n        row.setAttribute(\"aria-selected\", String(value));\r\n        row.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(row: HTMLElement): boolean {\r\n        return JSON.parse(row.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    #label(item: HTMLElement): Node {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { listItemWidget } from \"./ListItemWidget\";\r\n\r\nexport  { listWidget };\r\n\r\ninterface ListWidgetFactory extends WidgetFactory {\r\n    create(properties: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement;\r\n    items(list: HTMLElement): HTMLElement[];\r\n    beginSelection(list: HTMLElement): void;\r\n    endSelection(list: HTMLElement): void;\r\n    selectedItems(list: HTMLElement): HTMLElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"list\": ListWidgetFactory,\r\n    }\r\n}\r\n\r\nvar listWidget = new (\r\nWidget({\r\n    name: \"list\"\r\n})(class ListWidgetFactoryBase extends WidgetFactory implements ListWidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"list\",\r\n                role: \"list\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement {\r\n        const list = <HTMLElement>this.#template.cloneNode(true);\r\n        list.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        list.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        list.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        list.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        list.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        list.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        list.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        list.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        list.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        list.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        list.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        list.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, multisectable} = properties;\r\n            if (id !== undefined) {\r\n                list.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                list.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                list.tabIndex = tabIndex;\r\n            }\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(list, multisectable);\r\n            }\r\n        }\r\n        this.#onSelection.set(list, false);\r\n        this.#hasSelectionChanged.set(list, false);\r\n        return list;\r\n    }\r\n\r\n    slot(list: HTMLElement) {\r\n        return list;\r\n    }\r\n\r\n    slottedCallback(list: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"listitem\")) {\r\n                listItemWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n\r\n    setMultiSelectable(tree: HTMLElement, value: boolean): void {\r\n        tree.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(tree: HTMLElement): boolean {\r\n        return JSON.parse(tree.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    #getActiveItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".listitem.active\");\r\n    }\r\n\r\n    #getDropTargetItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".listitem.droptarget\");\r\n    }\r\n\r\n    items(list: HTMLElement): HTMLElement[] {\r\n        return Array.from(list.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .listitemgroup) > .listitem\"\r\n        ));\r\n    }\r\n\r\n    selectedItems(list: HTMLElement): HTMLElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        let item = this.#firstItem(list);\r\n        while (item !== null) {\r\n            const selected = listItemWidget.getSelected(item);\r\n            if (selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(list: HTMLElement): void {\r\n        this.#onSelection.set(list, true);\r\n    }\r\n\r\n    endSelection(list: HTMLElement): void {\r\n        this.#onSelection.set(list, false);\r\n        if (this.#hasSelectionChanged.get(list)) {\r\n            list.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(list, false);\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"listitem\") && !listItemWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"listitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextItem = this.#nextItem(from);\r\n            while (nextItem && nextItem !== to) {\r\n                range.push(nextItem);\r\n                nextItem = this.#nextItem(nextItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousItem = this.#previousItem(from);\r\n            while (previousItem && previousItem !== to) {\r\n                range.push(previousItem);\r\n                previousItem = this.#previousItem(previousItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        selectedItems.forEach((item_i) => {\r\n            if (!items.includes(item_i)) {\r\n                listItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            const selected = listItemWidget.getSelected(item_i);\r\n            if (list.contains(item_i) && !selected) {\r\n                listItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #addToSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        this.beginSelection(list);\r\n        items.forEach((item_i) => {\r\n            if (!listItemWidget.getSelected(item_i)) {\r\n                listItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #removeFromSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                listItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #clearSelection(list: HTMLElement): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        selectedItems.forEach((item_i) => {\r\n            listItemWidget.setSelected(item_i, false);\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #setActiveItem(list: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(list);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            listItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            listItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n    \r\n    #setDropTargetItem(list: HTMLElement, item: HTMLElement | null): void {\r\n        const {classList} = list;\r\n        const dropTargetItem = this.#getDropTargetItem(list);\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            listItemWidget.setDropTarget(dropTargetItem, false);\r\n        }\r\n        if (item !== null) {\r\n            listItemWidget.setDropTarget(item, false);\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    #firstItem(list: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(list: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLElement | null>walker.previousNode();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const nextItem = <HTMLElement | null>walker.nextNode();\r\n        return nextItem;\r\n    }\r\n\r\n    #handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetList, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            this.#setDropTargetItem(targetList, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!targetList.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(targetList, null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            const selectedItems = this.selectedItems(targetTree);\r\n            if (!selectedItems.includes(targetItem)) {\r\n                this.#setSelection(targetTree, targetItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetTree);\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetTree, targetItem);\r\n            targetTree.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetList);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetList, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetList, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(firstItem, lastItem);\r\n                            if (range) {\r\n                                this.#setSelection(targetList, ...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = listItemWidget.getSelected(previousItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetList, previousItem) :\r\n                                this.#addToSelection(targetList, previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetList);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = listItemWidget.getSelected(nextItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetList, nextItem) :\r\n                                this.#addToSelection(targetList, nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetList);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetList);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetList);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(targetList, activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection(targetList);\r\n                this.#setActiveItem(targetList, null);\r\n                targetList.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey, button} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            const selected = listItemWidget.getSelected(targetItem);\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setSelection(targetList, targetItem);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            targetItem.blur();\r\n                            this.#removeFromSelection(targetList, targetItem);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(targetList, targetItem);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const activeItem = this.#getActiveItem(targetList);\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                targetItem\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetList, ...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                }\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(targetList, targetItem);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetList.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetList.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetList) {\r\n            if (this.#onSelection.get(targetList)) {\r\n                this.#hasSelectionChanged.set(targetList, true);\r\n            }\r\n            else {\r\n                targetList.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { listItemWidget } from \"./ListItemWidget\";\r\n\r\nexport { listItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"listitemgroup\": ListItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ListItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar listItemGroupWidget = new (\r\nWidget({\r\n    name: \"listitemgroup\"\r\n})(class ListItemGroupWidgetFactoryBase extends WidgetFactory implements ListItemGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"listitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n\r\n    slottedCallback(group: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"listitem\")) {\r\n                listItemWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { toolbarItemWidget };\r\n\r\ntype ToolBarItemType = \"button\" | \"checkbox\" | \"radio\" | \"menubutton\";\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbaritem\": ToolBarItemWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ToolBarItemWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        id?: string;\r\n        type: ToolBarItemType;\r\n        pressed?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    menu(item: HTMLElement): HTMLElement | null;\r\n    getName(item: HTMLElement): string;\r\n    setName(item: HTMLElement, value: string): void;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setPressed(item: HTMLElement, value: boolean): void;\r\n    getPressed(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    getValue(item: HTMLElement): string;\r\n    setValue(item: HTMLElement, value: string): void;\r\n    getType(item: HTMLElement): ToolBarItemType | null;\r\n    setType(item: HTMLElement, value: ToolBarItemType): void;\r\n}\r\n\r\nvar toolbarItemWidget = new(\r\nWidget({\r\n    name: \"toolbaritem\"\r\n})(\r\nclass ToolBarItemWidgetFactoryBase extends WidgetFactory implements ToolBarItemWidgetFactory {\r\n    #template: HTMLElement;\r\n    #types: ToolBarItemType[];\r\n\r\n    constructor() {\r\n        super();\r\n        this.#types = [\"button\", \"checkbox\", \"radio\", \"menubutton\"];\r\n        this.#template = element(\"button\", {\r\n            attributes: {\r\n                class: \"toolbaritem\",\r\n                role: \"button\",\r\n                type: \"button\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        type?: ToolBarItemType;\r\n        pressed?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }) {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (init !== void 0) {\r\n            const {id, keyshortcut, pressed, type, label, name, value, disabled} = init;\r\n            if (id !== undefined) {\r\n                item.id = id;\r\n            }\r\n            if (keyshortcut !== undefined) {\r\n                this.setKeyShortcut(item, keyshortcut);\r\n            }\r\n            if (pressed !== undefined) {\r\n                this.setPressed(item, pressed);\r\n            }\r\n            if (type !== undefined) {\r\n                this.setType(item, type);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(item, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(item, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(item: HTMLElement): HTMLElement | null {\r\n        return item;\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void {\r\n        const hasChildMenu = Array.from(slot.childNodes).some(\r\n            childNode_i => childNode_i instanceof HTMLElement && childNode_i.classList.contains(\"menu\")\r\n        );\r\n        item.setAttribute(\"aria-haspopup\", String(hasChildMenu));\r\n    }\r\n\r\n    menu(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .menu\");\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-expanded\", value);\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-expanded\");\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    getKeyShortcut(item: HTMLElement): string | null {\r\n        return item.getAttribute(\"aria-keyshortcuts\");\r\n    }\r\n\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void {\r\n        if (value !== null) {\r\n            item.setAttribute(\"aria-keyshortcuts\", value);\r\n        }\r\n        else {\r\n            item.removeAttribute(\"aria-keyshortcuts\");\r\n        }\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        const expand = force ?? !this.getExpanded(item);\r\n        this.setExpanded(item, expand);\r\n        if (expand) {\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    expand(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (!expanded) {\r\n            this.setExpanded(item, true);\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    collapse(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (expanded) {\r\n            this.setExpanded(item, false);\r\n        }\r\n    }\r\n\r\n    getType(item: HTMLElement): ToolBarItemType | null {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`toolbaritem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setType(item: HTMLElement, type: ToolBarItemType): void {\r\n        const oldType = this.getType(item);\r\n        if (type !== oldType) {\r\n            const {classList} = item;\r\n            if (oldType) {\r\n                classList.remove(`toolbaritem-${oldType}`);\r\n            }\r\n            classList.add(`toolbaritem-${type}`);\r\n        }\r\n    }\r\n\r\n    getValue(item: HTMLElement): string {\r\n        return item.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"value\", value);\r\n    }\r\n\r\n    getTitle(item: HTMLElement): string {\r\n        return item.getAttribute(\"title\") ?? \"\";\r\n    }\r\n\r\n    setTitle(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"title\", value);\r\n    }\r\n\r\n    getName(item: HTMLElement): string {\r\n        return item.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getPressed(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-pressed\") ?? String(false));\r\n    }\r\n\r\n    setPressed(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-pressed\", String(value));\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetItem = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetItem.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse(targetItem);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.setPressed(targetItem, !this.getPressed(targetItem));\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.setPressed(targetItem, true);\r\n                    break;\r\n                }\r\n                case \"menubutton\": {\r\n                    const menu = this.menu(targetItem);\r\n                    if (menu && !menu.contains(<Node>target)) {\r\n                        this.toggle(targetItem);\r\n                        const expanded = this.getExpanded(targetItem);\r\n                        if (expanded) {\r\n                            menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(item: HTMLElement): void {\r\n        const type = this.getType(item);\r\n        if (type == \"menubutton\") {\r\n            const menu = this.menu(item);\r\n            if (menu !== null) {\r\n                const {style: menuStyle} = menu;\r\n                const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = item.getBoundingClientRect();\r\n                const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n                const {scrollY, scrollX} = window;\r\n                const {clientWidth, clientHeight} = document.body;\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n        }\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n}));\r\n","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { toolbarItemWidget } from \"./ToolBarItemWidget\";\r\n\r\nexport { toolbarWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbar\": ToolBarWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ToolBarWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }): HTMLElement;\r\n    setOrientation(toolbar: HTMLElement, value: ToolBarOrientation): void;\r\n    getOrientation(toolbar: HTMLElement): ToolBarOrientation;\r\n}\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\nvar toolbarWidget = new (\r\nWidget({\r\n    name: \"toolbar\"\r\n})(class ToolBarWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"toolbar\",\r\n                role: \"toolbar\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        )\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }) {\r\n        const toolbar = <HTMLElement>this.#template.cloneNode(true);\r\n        toolbar.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        toolbar.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        toolbar.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        toolbar.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        toolbar.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex} = properties;\r\n            if (id !== undefined) {\r\n                toolbar.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                toolbar.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                toolbar.tabIndex = tabIndex;\r\n            }\r\n        }\r\n        return toolbar;\r\n    }\r\n\r\n    slot(toolbar: HTMLElement) {\r\n        return toolbar;\r\n    }\r\n\r\n    #getActiveItem(toolbar: HTMLElement): HTMLElement | null {\r\n        return toolbar.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .toolbaritemgroup) > .toolbaritem.active\"\r\n        );\r\n    }\r\n\r\n    items(toolbar: HTMLElement): HTMLElement[] {\r\n        return Array.from(toolbar.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .toolbaritemgroup) > .toolbaritem\"\r\n        ));\r\n    }\r\n\r\n    setOrientation(toolbar: HTMLElement, value: ToolBarOrientation): void {\r\n        toolbar.setAttribute(\"aria-orientation\", value);\r\n    }\r\n\r\n    getOrientation(toolbar: HTMLElement): ToolBarOrientation {\r\n        return <ToolBarOrientation>toolbar.getAttribute(\"aria-orientation\") ?? \"horizontal\";\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node) {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"toolbaritem\") && !toolbarItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"toolbaritemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(toolbar: Element): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = toolbar;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(toolbar: Element): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = toolbar;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLElement | null>walker.previousSibling();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = toolbarItemWidget.menu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #setActiveItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(tree);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            toolbarItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            toolbarItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: Event): void {\r\n        const {currentTarget, target} = event;\r\n        const toolbar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem) {\r\n            const type = toolbarItemWidget.getType(targetItem);\r\n            const name = toolbarItemWidget.getName(targetItem);\r\n            const value = toolbarItemWidget.getType(targetItem);\r\n            if (type == \"radio\") {\r\n                toolbar.querySelectorAll<HTMLElement>(\r\n                    `:is(:scope, :scope > .toolbaritemgroup) > .toolbaritem[type=radio][name=${name}]`\r\n                ).forEach((radio_i) => {\r\n                    toolbarItemWidget.setPressed(radio_i, toolbarItemWidget.getValue(radio_i) == value);\r\n                });\r\n            }\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const focusWithin = targetToolbar.contains(<Node>relatedTarget);\r\n        if (!focusWithin) {\r\n            const activeItem = this.#getActiveItem(targetToolbar);\r\n            if (activeItem) {\r\n                activeItem.focus();\r\n            }\r\n            else {\r\n                const firstItem = this.#firstItem(targetToolbar);\r\n                firstItem?.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetToolbar, targetItem);\r\n            targetToolbar.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetToolbar.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.#setActiveItem(targetToolbar, null);\r\n            targetToolbar.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetToolbar);\r\n        switch (key) {\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const type = toolbarItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"menubutton\": {\r\n                            toolbarItemWidget.expand(activeItem);\r\n                            const firstChildItem = this.#firstChildItem(activeItem);\r\n                            firstChildItem?.focus({preventScroll: true});\r\n                            event.preventDefault();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetToolbar);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetToolbar);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetToolbar);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetToolbar);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    activeItem.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    targetToolbar.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { toolbarItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbaritemgroup\": MenuItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar toolbarItemGroupWidget = new (\r\nWidget({\r\n    name: \"toolbaritemgroup\"\r\n})(class MenuItemGroupWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"toolbaritemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n}));","import { element } from \"../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"./Widget\";\r\n\r\nexport { widthSashWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"widthsash\": WidthSashWidgetFactory\r\n    }\r\n}\r\n\r\ninterface WidthSashWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"left\" | \"right\";\r\n    }): HTMLElement;\r\n}\r\n\r\nvar widthSashWidget = new (\r\nWidget({\r\n    name: \"widthsash\"\r\n})(class WidthSashWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    #targets: WeakMap<HTMLElement, HTMLElement | null>;\r\n    #onCaptureFlags: WeakMap<HTMLElement, boolean>;\r\n    #queuedPointerCallbacks: WeakMap<HTMLElement, FrameRequestCallback | null>;\r\n    #pointerMovements: WeakMap<HTMLElement, number>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"widthsash\"\r\n            }\r\n        });\r\n        this.#targets = new WeakMap();\r\n        this.#onCaptureFlags = new WeakMap();\r\n        this.#queuedPointerCallbacks = new WeakMap();\r\n        this.#pointerMovements = new WeakMap();\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"left\" | \"right\";\r\n    }) {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const sash = <HTMLElement>this.#template.cloneNode(true);\r\n        sash.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        sash.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        sash.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, controls, growDir} = properties;\r\n            if (id !== undefined) {\r\n                sash.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                sash.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                sash.tabIndex = tabIndex;\r\n            }\r\n            if (controls !== undefined) {\r\n                this.setControls(sash, controls);\r\n            }\r\n            if (growDir !== undefined) {\r\n                this.setGrowDir(sash, growDir);\r\n            }\r\n        }\r\n        targets.set(sash, null);\r\n        queuedPointerCallbacks.set(sash, null);\r\n        pointerMovements.set(sash, 0);\r\n        onCaptureFlags.set(sash, false);\r\n        return sash;\r\n    }\r\n\r\n    getGrowDir(sash: HTMLElement): \"right\" | \"left\" {\r\n        return <\"right\" | \"left\">sash.getAttribute(\"data-growdir\") ?? \"right\";\r\n    }\r\n\r\n    setGrowDir(sash: HTMLElement, value: \"right\" | \"left\"): void {\r\n        sash.setAttribute(\"data-growdir\", value);\r\n    }\r\n\r\n    getControls(sash: HTMLElement): string | null {\r\n        return sash.getAttribute(\"data-controls\");\r\n    }\r\n\r\n    setControls(sash: HTMLElement, value: string): void {\r\n        sash.setAttribute(\"data-controls\", value);\r\n    }\r\n\r\n    setWidth(sash: HTMLElement, width: number): void {\r\n        const targets = this.#targets;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            target.style.setProperty(\"width\", `${width}px`);\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        sashTarget.releasePointerCapture(pointerId);\r\n        onCaptureFlags.set(sashTarget, false);\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const controls = this.getControls(sashTarget);\r\n        if (controls) {\r\n            const targets = this.#targets;\r\n            const onCaptureFlags = this.#onCaptureFlags;\r\n            const rootNode = <ShadowRoot | Document>sashTarget.getRootNode();\r\n            targets.set(sashTarget, rootNode.getElementById(controls));\r\n            onCaptureFlags.set(sashTarget, true);\r\n            sashTarget.setPointerCapture(pointerId);\r\n        }\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        const {currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const pointerMoveCallback = this.#pointerMoveCallback;\r\n        const onCaptureFlag = onCaptureFlags.get(sashTarget);\r\n        if (onCaptureFlag) {\r\n            let callback = queuedPointerCallbacks.get(sashTarget);\r\n            if (callback == null) {\r\n                callback = pointerMoveCallback.bind(this, sashTarget);\r\n                queuedPointerCallbacks.set(sashTarget, callback);\r\n                requestAnimationFrame(callback);\r\n            }\r\n            const pointerMovement = pointerMovements.get(sashTarget)! + event.movementX;\r\n            pointerMovements.set(sashTarget, pointerMovement);\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(sash: HTMLElement): void {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const growdir = this.getGrowDir(sash);\r\n            const movementX = pointerMovements.get(sash)!;\r\n            const width = parseFloat(targetComputedStyle.getPropertyValue(\"width\"));\r\n            const newWidth = width + (growdir == \"right\" ? 1 : -1) * movementX;\r\n            this.setWidth(sash, newWidth);\r\n            sash.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        pointerMovements.set(sash, 0);\r\n        queuedPointerCallbacks.set(sash, null);\r\n    }\r\n}));","import { element } from \"../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"./Widget\";\r\n\r\nexport { heightSashWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"heightsash\": HeightSashWidgetFactory\r\n    }\r\n}\r\n\r\ninterface HeightSashWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"top\" | \"bottom\";\r\n    }): HTMLElement;\r\n}\r\n\r\nvar heightSashWidget = new (\r\nWidget({\r\n    name: \"heightsash\"\r\n})(class HeightSashWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    #targets: WeakMap<HTMLElement, HTMLElement | null>;\r\n    #onCaptureFlags: WeakMap<HTMLElement, boolean>;\r\n    #queuedPointerCallbacks: WeakMap<HTMLElement, FrameRequestCallback | null>;\r\n    #pointerMovements: WeakMap<HTMLElement, number>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"heightsash\"\r\n            }\r\n        });\r\n        this.#targets = new WeakMap();\r\n        this.#onCaptureFlags = new WeakMap();\r\n        this.#queuedPointerCallbacks = new WeakMap();\r\n        this.#pointerMovements = new WeakMap();\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"top\" | \"bottom\";\r\n    }) {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const sash = <HTMLElement>this.#template.cloneNode(true);\r\n        sash.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        sash.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        sash.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, controls, growDir} = properties;\r\n            if (id !== undefined) {\r\n                sash.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                sash.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                sash.tabIndex = tabIndex;\r\n            }\r\n            if (controls !== undefined) {\r\n                this.setControls(sash, controls);\r\n            }\r\n            if (growDir !== undefined) {\r\n                this.setGrowDir(sash, growDir);\r\n            }\r\n        }\r\n        targets.set(sash, null);\r\n        queuedPointerCallbacks.set(sash, null);\r\n        pointerMovements.set(sash, 0);\r\n        onCaptureFlags.set(sash, false);\r\n        return sash;\r\n    }\r\n\r\n    getGrowDir(sash: HTMLElement): \"top\" | \"bottom\" {\r\n        return <\"top\" | \"bottom\">sash.getAttribute(\"data-growdir\") ?? \"top\";\r\n    }\r\n\r\n    setGrowDir(sash: HTMLElement, value: \"top\" | \"bottom\"): void {\r\n        sash.setAttribute(\"data-growdir\", value);\r\n    }\r\n\r\n    getControls(sash: HTMLElement): string | null {\r\n        return sash.getAttribute(\"data-controls\");\r\n    }\r\n\r\n    setControls(sash: HTMLElement, value: string): void {\r\n        sash.setAttribute(\"data-controls\", value);\r\n    }\r\n\r\n    setHeight(sash: HTMLElement, height: number): void {\r\n        const targets = this.#targets;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            target.style.setProperty(\"height\", `${height}px`);\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        sashTarget.releasePointerCapture(pointerId);\r\n        onCaptureFlags.set(sashTarget, false);\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const controls = this.getControls(sashTarget);\r\n        if (controls) {\r\n            const targets = this.#targets;\r\n            const onCaptureFlags = this.#onCaptureFlags;\r\n            const rootNode = <ShadowRoot | Document>sashTarget.getRootNode();\r\n            targets.set(sashTarget, rootNode.getElementById(controls));\r\n            onCaptureFlags.set(sashTarget, true);\r\n            sashTarget.setPointerCapture(pointerId);\r\n        }\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        const {currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const onCaptureFlag = onCaptureFlags.get(sashTarget);\r\n        if (onCaptureFlag) {\r\n            let callback = queuedPointerCallbacks.get(sashTarget);\r\n            if (callback == null) {\r\n                callback = this.#pointerMoveCallback.bind(this, sashTarget);\r\n                queuedPointerCallbacks.set(sashTarget, callback);\r\n                requestAnimationFrame(callback);\r\n            }\r\n            const pointerMovement = pointerMovements.get(sashTarget)! + event.movementX;\r\n            pointerMovements.set(sashTarget, pointerMovement);\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(sash: HTMLElement): void {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const growdir = this.getGrowDir(sash);\r\n            const movementX = pointerMovements.get(sash)!;\r\n            const height = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            const newHeight = height + (growdir == \"top\" ? -1 : 1) * movementX;\r\n            this.setHeight(sash, newHeight);\r\n            sash.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        pointerMovements.set(sash, 0);\r\n        queuedPointerCallbacks.set(sash, null);\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridCellWidget };\r\n\r\ninterface GridCellWidgetFactory extends WidgetFactory {\r\n    create(init: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        disabled?: boolean;\r\n        headers?: string;\r\n    }): HTMLElement;\r\n    getHeaders(item: HTMLElement): string;\r\n    setHeaders(item: HTMLElement, value: string): void;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridcell\": GridCellWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridCellWidget = new (\r\nWidget({\r\n    name: \"gridcell\"\r\n})(class GridCellWidgetFactoryBase extends WidgetFactory implements GridCellWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"td\", {\r\n            attributes: {\r\n                class: \"gridcell\",\r\n                role: \"gridcell\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        disabled?: boolean;\r\n        headers?: string;\r\n    }): HTMLElement {\r\n        const cell = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {id, classList, tabIndex, disabled, headers} = init;\r\n            if (id !== undefined) {\r\n                cell.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                cell.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                cell.tabIndex = tabIndex;\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(cell, disabled);\r\n            }\r\n            if (headers !== undefined) {\r\n                this.setHeaders(cell, headers);\r\n            }\r\n            this.setSelected(cell, false);\r\n        }\r\n        return cell;\r\n    }\r\n\r\n    slot(cell: HTMLElement): HTMLElement | null {\r\n        return cell;\r\n    }\r\n\r\n    getHeaders(item: HTMLElement): string {\r\n        return item.getAttribute(\"headers\") ?? \"\";\r\n    }\r\n\r\n    setHeaders(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"headers\", value);\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-selected\", String(value));\r\n        item.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .content > .label\")!;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { gridCellWidget } from \"./GridCellWidget\";\r\n\r\nexport { gridRowWidget };\r\n\r\ninterface GridRowWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        disabled?: boolean\r\n    }): HTMLElement;\r\n    cells(row: HTMLElement): HTMLElement[];\r\n    setPosInSet(row: HTMLElement, value: number): void;\r\n    getPosInSet(row: HTMLElement): number;\r\n    setActive(row: HTMLElement, value: boolean): void;\r\n    getActive(row: HTMLElement): boolean;\r\n    setDropTarget(row: HTMLElement, value: boolean): void;\r\n    getDropTarget(row: HTMLElement): boolean;\r\n    setSelected(row: HTMLElement, value: boolean): void;\r\n    getSelected(row: HTMLElement): boolean;\r\n    setDisabled(row: HTMLElement, value: boolean): void;\r\n    getDisabled(row: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridrow\": GridRowWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridRowWidget = new (\r\nWidget({\r\n    name: \"gridrow\"\r\n})(class GridRowWidgetFactoryBase extends WidgetFactory implements GridRowWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"tr\", {\r\n            attributes: {\r\n                class: \"gridrow\",\r\n                role: \"row\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const row = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {disabled} = init;\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(row, disabled);\r\n            }\r\n            this.setSelected(row, false);\r\n        }\r\n        return row;\r\n    }\r\n\r\n    slot(row: HTMLElement): HTMLElement | null {\r\n        return row;\r\n    }\r\n\r\n    cells(row: HTMLElement): HTMLElement[] {\r\n        return Array.from(row.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridcell\"\r\n        ));\r\n    }\r\n    \r\n    setPosInSet(row: HTMLElement, value: number): void {\r\n        row.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(row: HTMLElement): number {\r\n        const posInSet = row.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(row: HTMLElement, value: boolean): void {\r\n        const {classList} = row;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(row: HTMLElement): boolean {\r\n        const {classList} = row;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(row: HTMLElement, value: boolean): void {\r\n        const {classList} = row;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(row: HTMLElement): boolean {\r\n        const {classList} = row;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(row: HTMLElement, value: boolean): void {\r\n        row.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(row: HTMLElement): boolean {\r\n        return row.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(row: HTMLElement, value: boolean): void {\r\n        row.setAttribute(\"aria-selected\", String(value));\r\n        row.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(row: HTMLElement): boolean {\r\n        return JSON.parse(row.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((item_i, i) => {\r\n            if (item_i instanceof HTMLElement) {\r\n                gridCellWidget.setPosInSet(item_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { gridCellWidget } from \"./GridCellWidget\";\r\nimport { gridRowWidget } from \"./GridRowWidget\";\r\n\r\nexport { gridWidget };\r\n\r\ntype GridSelectBy = \"cell\" | \"row\";\r\n\r\ninterface GridRowWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n        selectby?: GridSelectBy\r\n    }): HTMLElement;\r\n    setSelectBy(item: HTMLElement, value: GridSelectBy): void;\r\n    getSelectBy(item: HTMLElement): GridSelectBy;\r\n    headers(grid: HTMLElement): HTMLElement[];\r\n    cells(grid: HTMLElement): HTMLElement[];\r\n    rows(grid: HTMLElement): HTMLElement[];\r\n    beginSelection(grid: HTMLElement): void;\r\n    endSelection(grid: HTMLElement): void;\r\n    selectedCells(grid: HTMLElement): HTMLElement[];\r\n    selectedRows(grid: HTMLElement): HTMLElement[];\r\n    clearSelection(grid: HTMLElement): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"grid\": GridRowWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridWidget = new (\r\nWidget({\r\n    name: \"grid\"\r\n})(class GridWidgetFactoryBase extends WidgetFactory implements GridRowWidgetFactory {\r\n\r\n    #getActiveRow(grid: HTMLElement): HTMLElement | null {\r\n        return grid.querySelector<HTMLElement>(\".gridrow.active\");\r\n    }\r\n\r\n    #getActiveCell(grid: HTMLElement): HTMLElement | null {\r\n        return grid.querySelector<HTMLElement>(\".gridcell.active\");\r\n    }\r\n\r\n    headers(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridhead > .gridheader\"\r\n        ));\r\n    }\r\n\r\n    rows(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridbody > .gridrow\"\r\n        ));\r\n    }\r\n\r\n    cells(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridbody > .gridrow > .gridcell\"\r\n        ));\r\n    }\r\n\r\n    #template: HTMLElement;\r\n    #rowsWalker: TreeWalker;\r\n    #cellsWalker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"table\", {\r\n            attributes: {\r\n                class: \"grid\",\r\n                role: \"grid\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#cellsWalker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#cellsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#rowsWalker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#rowsWalkerNodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n        selectby?: GridSelectBy;\r\n    }) {\r\n        const grid = <HTMLElement>this.#template.cloneNode(true);\r\n        //grid.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        grid.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        grid.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        grid.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        grid.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        grid.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        grid.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, selectby, multisectable} = properties;\r\n            if (id !== undefined) {\r\n                grid.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                grid.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                grid.tabIndex = tabIndex;\r\n            }\r\n            if (selectby !== undefined) {\r\n                this.setSelectBy(grid, selectby);\r\n            }\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(grid, multisectable);\r\n            }\r\n        }\r\n        return grid;\r\n    }\r\n\r\n    slot(grid: HTMLElement): HTMLElement | null {\r\n        return grid;\r\n    }\r\n\r\n    setMultiSelectable(grid: HTMLElement, value: boolean): void {\r\n        grid.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(grid: HTMLElement): boolean {\r\n        return JSON.parse(grid.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    setSelectBy(grid: HTMLElement, value: GridSelectBy): void {\r\n        grid.setAttribute(\"data-selectby\", value);\r\n    }\r\n\r\n    getSelectBy(grid: HTMLElement): GridSelectBy {\r\n        return <GridSelectBy>grid.getAttribute(\"data-selectby\") ?? \"cell\";\r\n    }\r\n\r\n    beginSelection(grid: HTMLElement): void {\r\n        this.#onSelection.set(grid, true);\r\n    }\r\n\r\n    endSelection(grid: HTMLElement): void {\r\n        this.#onSelection.set(grid, false);\r\n        if (this.#hasSelectionChanged.get(grid)) {\r\n            grid.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(grid, false);\r\n        }\r\n    }\r\n\r\n    clearSelection(grid: HTMLElement): void {\r\n        this.#clearCellsSelection(grid);\r\n        this.#clearRowsSelection(grid);\r\n    }\r\n\r\n    selectedCells(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll(\":scope > .gridbody > .gridrow > .gridcell[aria-selected=true]\"));\r\n    }\r\n\r\n    selectedRows(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll(\":scope > .gridbody > .gridrow[aria-selected=true]\"));\r\n    }\r\n\r\n    #cellsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"gridcell\") && !gridCellWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"gridrow\") || classList.contains(\"gridbody\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #rowsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"gridrow\") && !gridRowWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"gridbody\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getCellsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextCell = this.#nextCell(from);\r\n            while (nextCell && nextCell !== to) {\r\n                range.push(nextCell);\r\n                nextCell = this.#nextCell(nextCell);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousCell = this.#previousCell(from);\r\n            while (previousCell && previousCell !== to) {\r\n                range.push(previousCell);\r\n                previousCell = this.#previousRow(previousCell);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #getRowsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextRow = this.#nextRow(from);\r\n            while (nextRow && nextRow !== to) {\r\n                range.push(nextRow);\r\n                nextRow = this.#nextRow(nextRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousRow = this.#previousRow(from);\r\n            while (previousRow && previousRow !== to) {\r\n                range.push(previousRow);\r\n                previousRow = this.#previousRow(previousRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setCellsSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        selectedCells.forEach((selectedCell_i) => {\r\n            if (!cells.includes(selectedCell_i)) {\r\n                gridCellWidget.setSelected(selectedCell_i, false);\r\n            }\r\n        });\r\n        cells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (!selected) {\r\n                gridCellWidget.setSelected(cell_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #setRowsSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        selectedRows.forEach((selectedRow_i) => {\r\n            if (!rows.includes(selectedRow_i)) {\r\n                gridRowWidget.setSelected(selectedRow_i, false);\r\n            }\r\n        });\r\n        rows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (!selected) {\r\n                gridRowWidget.setSelected(row_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #addCellsToSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        cells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (!selected) {\r\n                gridCellWidget.setSelected(cell_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #addRowsToSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        rows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (!selected) {\r\n                gridRowWidget.setSelected(row_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #removeCellsFromSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        cells.forEach((cell_i) => {\r\n            if (selectedCells.includes(cell_i)) {\r\n                gridCellWidget.setSelected(cell_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #removeRowsFromSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        rows.forEach((row_i) => {\r\n            if (selectedRows.includes(row_i)) {\r\n                gridRowWidget.setSelected(row_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #clearCellsSelection(grid: HTMLElement): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        selectedCells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (selected) {\r\n                gridCellWidget.setSelected(cell_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #clearRowsSelection(grid: HTMLElement): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        selectedRows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (selected) {\r\n                gridRowWidget.setSelected(row_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #setActiveCell(grid: HTMLElement, cell: HTMLElement | null): void {\r\n        const activeCell = this.#getActiveCell(grid);\r\n        if (activeCell !== null && activeCell !== cell) {\r\n            gridCellWidget.setActive(activeCell, false);\r\n            activeCell.tabIndex = -1;\r\n        }\r\n        if (cell !== null) {\r\n            gridCellWidget.setActive(cell, true);\r\n            cell.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #setActiveRow(grid: HTMLElement, row: HTMLElement | null): void {\r\n        const activeRow = this.#getActiveRow(grid);\r\n        if (activeRow !== null && activeRow !== row) {\r\n            gridRowWidget.setActive(activeRow, false);\r\n            activeRow.tabIndex = -1;\r\n        }\r\n        if (row !== null) {\r\n            gridCellWidget.setActive(row, true);\r\n            row.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #firstCell(row: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLElement | null>cellsWalker.firstChild();\r\n    }\r\n\r\n    #lastCell(row: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLElement | null>cellsWalker.lastChild();\r\n    }\r\n\r\n    #previousCell(cell: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLElement | null>cellsWalker.previousNode();\r\n    }\r\n\r\n    #nextCell(cell: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLElement | null>cellsWalker.nextNode();\r\n    }\r\n\r\n    #closestRow(cell: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = cell;\r\n        return <HTMLElement | null>rowsWalker.parentNode();\r\n    }\r\n\r\n    #firstRow(grid: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = grid;\r\n        return <HTMLElement | null>rowsWalker.firstChild();\r\n    }\r\n\r\n    #lastRow(grid: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = grid;\r\n        return <HTMLElement | null>rowsWalker.lastChild();\r\n    }\r\n\r\n    #previousRow(row: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLElement | null>rowsWalker.previousNode();\r\n    }\r\n\r\n    #nextRow(row: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLElement | null>rowsWalker.nextNode();\r\n    }\r\n\r\n    #topCell(cell: HTMLElement): HTMLElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const closestRowCells = gridRowWidget.cells(closestRow);\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const previousRow = this.#previousRow(closestRow);\r\n            if (previousRow) {\r\n                const previousRowCells = gridRowWidget.cells(previousRow);\r\n                return previousRowCells[Math.min(cellIndex, previousRowCells.length)];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #bottomCell(cell: HTMLElement): HTMLElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const closestRowCells = gridRowWidget.cells(closestRow);\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const nextRow = this.#nextRow(closestRow);\r\n            if (nextRow) {\r\n                const nextRowCells = gridRowWidget.cells(nextRow);\r\n                return nextRowCells[Math.min(cellIndex, nextRowCells.length)];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /*#handleContextMenuEvent(event: MouseEvent) {\r\n        const {currentTarget, target} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    const selectedCells = this.selectedCells(targetGrid);\r\n                    if (!selectedCells.includes(targetCell)) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    targetCell.focus({preventScroll: true});\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    const selectedRows = this.selectedRows(targetGrid);\r\n                    if (!selectedRows.includes(targetRow)) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    targetRow.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        event.preventDefault();\r\n    }*/\r\n\r\n    /*#handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            const type = treeitemWidget.getType(targetItem);\r\n            if (type == \"parent\") {\r\n                treeitemWidget.toggle(targetItem, true);\r\n            }\r\n            this.#setDropTargetItem(targetTree, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!targetTree.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(targetTree, null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }*/\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const activeCell = this.#getActiveCell(targetGrid);\r\n                if (activeCell && relatedTarget !== activeCell) {\r\n                    activeCell.focus();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const activeRow = this.#getActiveRow(targetGrid);\r\n                if (activeRow && relatedTarget !== activeRow) {\r\n                    activeRow.focus();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    this.#setActiveCell(targetGrid, targetCell);\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    this.#setActiveRow(targetGrid, targetRow);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetGrid.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetGrid.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const activeCell = this.#getActiveCell(targetGrid);\r\n        const activeRow = this.#getActiveRow(targetGrid);\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        const multiselectable = this.getMultiSelectable(targetGrid);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey && multiselectable) {\r\n                    switch (selectby) {\r\n                        case \"cell\": {\r\n                            const firstRow = this.#firstRow(targetGrid);\r\n                            const firstCell = firstRow ? this.#firstCell(firstRow) : null;\r\n                            const lastRow = this.#lastRow(targetGrid);\r\n                            const lastCell = lastRow ? this.#lastCell(lastRow) : null;\r\n                            if (firstCell && lastCell) {\r\n                                const range = this.#getCellsRange(firstCell, lastCell);\r\n                                if (range) {\r\n                                    this.#setCellsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"row\": {\r\n                            const firstRow = this.#firstRow(targetGrid);\r\n                            const lastRow = this.#lastRow(targetGrid);\r\n                            if (firstRow && lastRow) {\r\n                                const range = this.#getRowsRange(firstRow, lastRow);\r\n                                if (range) {\r\n                                    this.#setRowsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const previousCell = this.#previousCell(activeCell);\r\n                        if (previousCell) {\r\n                            previousCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(previousCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, previousCell) :\r\n                                    this.#addCellsToSelection(targetGrid, previousCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const nextCell = this.#nextCell(activeCell);\r\n                        if (nextCell) {\r\n                            nextCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(nextCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, nextCell) :\r\n                                    this.#addCellsToSelection(targetGrid, nextCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const firstRow = activeRow ?? this.#firstRow(targetGrid);\r\n                        const topCell = activeCell ?\r\n                            this.#topCell(activeCell) :\r\n                            firstRow ?\r\n                            this.#firstCell(firstRow) :\r\n                            null;\r\n                        if (topCell) {\r\n                            topCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(topCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, topCell) :\r\n                                    this.#addCellsToSelection(targetGrid, topCell);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const previousRow = activeRow ?\r\n                            this.#previousRow(activeRow) :\r\n                            this.#firstRow(targetGrid);\r\n                        if (previousRow) {\r\n                            previousRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridRowWidget.getSelected(previousRow);\r\n                                selected ?\r\n                                    this.#removeRowsFromSelection(targetGrid, previousRow) :\r\n                                    this.#addRowsToSelection(targetGrid, previousRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const lastRow = activeRow ?? this.#lastRow(targetGrid);\r\n                        const bottomCell = activeCell ?\r\n                            this.#bottomCell(activeCell) :\r\n                            lastRow ?\r\n                            this.#lastCell(lastRow) :\r\n                            null;\r\n                            if (bottomCell) {\r\n                                bottomCell.focus({preventScroll: true});\r\n                                const {shiftKey} = event;\r\n                                if (shiftKey && multiselectable) {\r\n                                    const selected = gridCellWidget.getSelected(bottomCell);\r\n                                    selected ?\r\n                                        this.#removeCellsFromSelection(targetGrid, bottomCell) :\r\n                                        this.#addCellsToSelection(targetGrid, bottomCell);\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"row\": {\r\n                        const nextRow = activeRow ?\r\n                            this.#nextRow(activeRow) :\r\n                            this.#lastRow(targetGrid);\r\n                        if (nextRow) {\r\n                            nextRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridRowWidget.getSelected(nextRow);\r\n                                selected ?\r\n                                    this.#removeRowsFromSelection(targetGrid, nextRow) :\r\n                                    this.#addRowsToSelection(targetGrid, nextRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const firstCell = this.#firstCell(activeRow);\r\n                            if (firstCell) {\r\n                                firstCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const firstRow = this.#firstRow(targetGrid);\r\n                        if (firstRow) {\r\n                            firstRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const lastCell = this.#lastCell(activeRow);\r\n                            if (lastCell) {\r\n                                lastCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const lastRow = this.#lastRow(targetGrid);\r\n                        if (lastRow) {\r\n                            lastRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeCell) {\r\n                            this.#setCellsSelection(targetGrid, activeCell);\r\n                            activeCell.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        if (activeRow) {\r\n                            this.#setRowsSelection(targetGrid, activeRow);\r\n                            activeRow.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        this.#clearCellsSelection(targetGrid);\r\n                        this.#setActiveCell(targetGrid, null);\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        this.#clearRowsSelection(targetGrid);\r\n                        this.#setActiveRow(targetGrid, null);\r\n                        break;\r\n                    }\r\n                }\r\n                targetGrid.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        const multiselectable = this.getMultiSelectable(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    if (multiselectable) {\r\n                        if (!shiftKey && !ctrlKey) {\r\n                            this.#setCellsSelection(targetGrid, targetCell);\r\n                        }\r\n                        else if (ctrlKey) {\r\n                            const selected = gridCellWidget.getSelected(targetCell);\r\n                            !selected ?\r\n                                this.#addCellsToSelection(targetGrid, targetCell) :\r\n                                this.#removeCellsFromSelection(targetGrid, targetCell);\r\n                            event.stopPropagation();\r\n                        }\r\n                        else if (shiftKey) {\r\n                            const activeCell = this.#getActiveCell(targetGrid);\r\n                            if (activeCell) {\r\n                                const range = this.#getCellsRange(\r\n                                    activeCell,\r\n                                    targetCell\r\n                                );\r\n                                if (range) {\r\n                                    this.#setCellsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.#setCellsSelection(targetGrid, targetCell);\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    if (multiselectable) {\r\n                        if (!shiftKey && !ctrlKey) {\r\n                            this.#setRowsSelection(targetGrid, targetRow);\r\n                        }\r\n                        else if (ctrlKey) {\r\n                            const selected = gridRowWidget.getSelected(targetRow);\r\n                            !selected ?\r\n                                this.#addRowsToSelection(targetGrid, targetRow) :\r\n                                this.#removeRowsFromSelection(targetGrid, targetRow);\r\n                            event.stopPropagation();\r\n                        }\r\n                        else if (shiftKey) {\r\n                            const activeRow = this.#getActiveRow(targetGrid);\r\n                            if (activeRow) {\r\n                                const range = this.#getRowsRange(\r\n                                    activeRow,\r\n                                    targetRow\r\n                                );\r\n                                if (range) {\r\n                                    this.#setRowsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.#setRowsSelection(targetGrid, targetRow);\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetList) {\r\n            if (this.#onSelection.get(targetList)) {\r\n                this.#hasSelectionChanged.set(targetList, true);\r\n            }\r\n            else {\r\n                targetList.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { gridRowWidget } from \"./GridRowWidget\";\r\n\r\nexport { gridBodyWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridbody\": GridBodyWidgetFactory\r\n    }\r\n}\r\n\r\ninterface GridBodyWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar gridBodyWidget = new (\r\nWidget({\r\n    name: \"gridbody\"\r\n})(class GridBodyWidgetFactoryBase extends WidgetFactory implements GridBodyWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"tbody\", {\r\n            attributes: {\r\n                class: \"gridbody\",\r\n                role: \"rowgroup\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(body: HTMLElement) {\r\n        return body;\r\n    }\r\n\r\n    slottedCallback(body: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"gridrow\")) {\r\n                gridRowWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridHeadWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridhead\": GridHeadWidgetFactory\r\n    }\r\n}\r\n\r\ninterface GridHeadWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar gridHeadWidget = new (\r\nWidget({\r\n    name: \"gridhead\"\r\n})(class GridHeadWidgetFactoryBase extends WidgetFactory implements GridHeadWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"thead\", {\r\n            attributes: {\r\n                class: \"gridhead\",\r\n                role: \"rowgroup\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(head: HTMLElement) {\r\n        return head;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridHeaderWidget };\r\n\r\ninterface GridHeaderWidgetFactory extends WidgetFactory {\r\n    create(init: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }): HTMLElement;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridheader\": GridHeaderWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridHeaderWidget = new (\r\nWidget({\r\n    name: \"gridheader\"\r\n})(class GridHeaderWidgetFactoryBase extends WidgetFactory implements GridHeaderWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"th\", {\r\n            attributes: {\r\n                class: \"gridheader\",\r\n                scope: \"column\",\r\n                role: \"columnheader\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }): HTMLElement {\r\n        const header = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {id, classList, tabIndex} = init;\r\n            if (id !== undefined) {\r\n                header.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                header.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                header.tabIndex = tabIndex;\r\n            }\r\n        }\r\n        return header;\r\n    }\r\n\r\n    slot(header: HTMLElement): HTMLElement | null {\r\n        return header;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { optionWidget };\r\n\r\ninterface OptionWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        label?: string;\r\n        name?: string;\r\n        value?: string;\r\n        selected?: boolean;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    getLabel(option: HTMLElement): string;\r\n    setLabel(option: HTMLElement, value: string): void;\r\n    getValue(option: HTMLElement): string;\r\n    setValue(option: HTMLElement, value: string): void;\r\n    getName(option: HTMLElement): string;\r\n    setName(option: HTMLElement, value: string): void;\r\n    getSelected(option: HTMLElement): boolean;\r\n    setSelected(option: HTMLElement, value: boolean): void;\r\n    setDisabled(option: HTMLElement, value: boolean): void;\r\n    getDisabled(option: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"option\": OptionWidgetFactory\r\n    }\r\n}\r\n\r\nvar optionWidget = new(\r\nWidget({\r\n    name: \"option\"\r\n})(\r\nclass OptionWidgetFactoryBase extends WidgetFactory implements OptionWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"span\", {\r\n            attributes: {\r\n                class: \"option\",\r\n                role: \"option\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(properties?: {\r\n        selected?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const option = <HTMLElement>this.#template.cloneNode(true);\r\n        if (properties !== undefined) {\r\n            const {label, name, value, disabled} = properties;\r\n            let {selected} = properties;\r\n            selected = selected ?? false;\r\n            if (selected !== undefined) {\r\n                this.setSelected(option, selected);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(option, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(option, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(option, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(option, disabled);\r\n            }\r\n        }\r\n        return option;\r\n    }\r\n\r\n    get observedAttributes() {\r\n        return [\"aria-selected\"];\r\n    }\r\n\r\n    attributeChangedCallback(option: HTMLElement, name: string, oldValue: string, newValue: string) {\r\n        switch (name) {\r\n            case \"aria-selected\": {\r\n                if (JSON.parse(newValue) === true) {\r\n                    option.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #label(option: HTMLElement): HTMLElement {\r\n        return option.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n\r\n    getLabel(option: HTMLElement): string {\r\n        return this.#label(option).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(option: HTMLElement, value: string): void {\r\n        this.#label(option).textContent = value;\r\n    }\r\n\r\n    getValue(option: HTMLElement): string {\r\n        return option.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(option: HTMLElement, value: string): void {\r\n        option.setAttribute(\"value\", value);\r\n    }\r\n    \r\n    getName(option: HTMLElement): string {\r\n        return option.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(option: HTMLElement, value: string): void {\r\n        option.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getSelected(option: HTMLElement): boolean {\r\n        return JSON.parse(option.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    setSelected(option: HTMLElement, value: boolean): void {\r\n        option.setAttribute(\"aria-selected\", String(value));\r\n    }\r\n\r\n    getDisabled(option: HTMLElement): boolean {\r\n        return option.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(option: HTMLElement, value: boolean): void {\r\n        option.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { optionWidget } from \"./OptionWidget\";\r\n\r\nexport { comboBoxWidget };\r\n\r\ninterface ComboBoxWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        name?: string;\r\n        disabled?: boolean;\r\n        multiselectable?: boolean;\r\n    }): HTMLElement;\r\n    options(combobox: HTMLElement): HTMLElement[];\r\n    getName(combobox: HTMLElement): string;\r\n    setName(combobox: HTMLElement, value: string): void;\r\n    getExpanded(combobox: HTMLElement): boolean;\r\n    setExpanded(combobox: HTMLElement, value: boolean): void;\r\n    setDisabled(combobox: HTMLElement, value: boolean): void;\r\n    getDisabled(combobox: HTMLElement): boolean;\r\n    expand(combobox: HTMLElement): void;\r\n    collapse(combobox: HTMLElement): void;\r\n    toggle(combobox: HTMLElement, force?: boolean): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"combobox\": ComboBoxWidgetFactory\r\n    }\r\n}\r\n\r\nvar comboBoxWidget = new(\r\nWidget({\r\n    name: \"combobox\"\r\n})(\r\nclass ComboBoxWidgetFactoryBase extends WidgetFactory implements ComboBoxWidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #optionsObserver: MutationObserver;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#optionsObserver = new MutationObserver(\r\n            this.#optionsMutationCallback.bind(this)\r\n        );\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"combobox\",\r\n                role: \"combobox\",\r\n                tabindex: 0,\r\n            },\r\n            children: [\r\n                element(\"div\", {\r\n                    attributes: {\r\n                        class: \"content\"\r\n                    },\r\n                    children: [\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"value\"\r\n                            }\r\n                        })\r\n                    ]\r\n                }),\r\n                element(\"div\", {\r\n                    attributes: {\r\n                        class: \"box\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        name?: string;\r\n        disabled?: boolean;\r\n        multiselectable?: boolean;\r\n    }): HTMLElement {\r\n        const combobox = <HTMLElement>this.#template.cloneNode(true);\r\n        this.#optionsObserver.observe(combobox, {\r\n            childList: true,\r\n            subtree: true\r\n        });\r\n        combobox.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        combobox.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        combobox.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        combobox.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.setExpanded(combobox, false);\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, name, disabled, multiselectable} = properties;\r\n            if (id !== undefined) {\r\n                combobox.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                combobox.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                combobox.tabIndex = tabIndex;\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(combobox, name);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(combobox, disabled);\r\n            }\r\n            if (multiselectable !== undefined) {\r\n                this.setMultiSelectable(combobox, multiselectable);\r\n            }\r\n        }\r\n        return combobox;\r\n    }\r\n\r\n    slot(combobox: HTMLElement) {\r\n        return this.#box(combobox);\r\n    }\r\n\r\n    slottedCallback(combobox: HTMLElement, slot: HTMLElement, name: string | null) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement) {\r\n                //gridRowWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n\r\n    #box(combobox: HTMLElement): HTMLElement {\r\n        return combobox.querySelector<HTMLElement>(\":scope > .box\")!;\r\n    }\r\n    \r\n    options(combobox: HTMLElement): HTMLElement[] {\r\n        return Array.from(combobox.querySelectorAll<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option\"\r\n        ));\r\n    }\r\n\r\n    selectedOption(combobox: HTMLElement): HTMLElement | null {\r\n        return combobox.querySelector<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option[aria-selected=true]\"\r\n        );\r\n    }\r\n\r\n    #getActiveOption(combobox: HTMLElement): HTMLElement | null {\r\n        return combobox.querySelector<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option:focus-within\"\r\n        );\r\n    }\r\n\r\n    #value(combobox: HTMLElement): HTMLElement {\r\n        return combobox.querySelector<HTMLElement>(\":scope > .content > .value\")!;\r\n    }\r\n    \r\n    getName(combobox: HTMLElement): string {\r\n        return combobox.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(combobox: HTMLElement, value: string): void {\r\n        combobox.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getDisabled(combobox: HTMLElement): boolean {\r\n        return combobox.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(combobox: HTMLElement, value: boolean): void {\r\n        combobox.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setExpanded(combobox: HTMLElement, value: boolean): void {\r\n        combobox.setAttribute(\"aria-expanded\", String(value));\r\n    }\r\n\r\n    getExpanded(combobox: HTMLElement): boolean {\r\n        return JSON.parse(combobox.getAttribute(\"aria-expanded\") ?? String(false));\r\n    }\r\n\r\n    setMultiSelectable(combobox: HTMLElement, value: boolean): void {\r\n        combobox.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(combobox: HTMLElement): boolean {\r\n        return JSON.parse(combobox.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    expand(combobox: HTMLElement): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        if (!expanded) {\r\n            this.setExpanded(combobox, true);\r\n            this.#positionBox(combobox);\r\n            const selectedOption = this.selectedOption(combobox);\r\n            if (selectedOption) {\r\n                selectedOption.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(combobox: HTMLElement): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        if (expanded) {\r\n            this.setExpanded(combobox, false);\r\n            combobox.focus();\r\n        }\r\n    }\r\n\r\n    toggle(combobox: HTMLElement, force?: boolean): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand(combobox) : this.collapse(combobox);\r\n    }\r\n\r\n    #optionsMutationCallback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            const targetCombobox = (<HTMLElement>target).closest<HTMLElement>(\".combobox\")!;\r\n            if (targetCombobox instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"childList\": {\r\n                        const {addedNodes} = mutation;\r\n                        const selector = \".option[aria-selected=true]\";\r\n                        for (let node of addedNodes) {\r\n                            if (node instanceof HTMLElement) {\r\n                                const selectedOption = node.matches(selector) ? node :\r\n                                    node.querySelector<HTMLElement>(selector);\r\n                                if (selectedOption) {\r\n                                    this.#setSelectedOption(targetCombobox, selectedOption);\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"option\") && !optionWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"optiongroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstOption(combobox: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = this.#box(combobox);\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastOption(combobox: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = this.#box(combobox);\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousOption(option: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextOption(option: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLElement | null>walker.nextNode();\r\n    }\r\n\r\n    #selectOption(combobox: HTMLElement, option: HTMLElement) {\r\n        const selectedOption = this.selectedOption(combobox);\r\n        if (selectedOption) {\r\n            optionWidget.setSelected(selectedOption, false);\r\n        }\r\n        if (option !== selectedOption) {\r\n            optionWidget.setSelected(option, true);\r\n            this.#setSelectedOption(combobox, option);\r\n            combobox.dispatchEvent(new Event(\"change\", {bubbles: true}));\r\n        }\r\n    }\r\n    \r\n    #setSelectedOption(combobox: HTMLElement, option: HTMLElement) {\r\n        this.#value(combobox).textContent = optionWidget.getLabel(option);\r\n    }\r\n\r\n    #positionBox(combobox: HTMLElement): void {\r\n        const box = combobox.querySelector<HTMLElement>(\":scope > .box\")!;\r\n        const {style: optionsStyle} = box;  \r\n        const {bottom, left} = combobox.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        optionsStyle.setProperty(\"top\", `${bottom + scrollY}px`);\r\n        optionsStyle.setProperty(\"left\", `${left + scrollX}px`);\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        this.toggle(targetCombobox);\r\n        const expanded = this.getExpanded(targetCombobox);\r\n        if (expanded) {\r\n            const selectedOption = this.selectedOption(targetCombobox);\r\n            (selectedOption ?? this.options(targetCombobox)[0])?.focus({preventScroll: true});\r\n        }\r\n        else {\r\n            const targetOption = (<HTMLElement>target).closest<HTMLElement>(\".option\");\r\n            if (targetOption) {\r\n                this.#selectOption(targetCombobox, targetOption);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetCombobox.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse(targetCombobox);\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        const expanded = this.getExpanded(targetCombobox);\r\n        const activeOption = this.#getActiveOption(targetCombobox);\r\n        const selectedOption = this.selectedOption(targetCombobox);\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                if (expanded) {\r\n                    const previousOption = activeOption ?\r\n                        this.#previousOption(activeOption) :\r\n                        this.#firstOption(targetCombobox);\r\n                    if (previousOption) {\r\n                        previousOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const previousOption = selectedOption ?\r\n                        this.#previousOption(selectedOption) :\r\n                        this.#firstOption(targetCombobox);\r\n                    if (previousOption) {\r\n                        this.#selectOption(targetCombobox, previousOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (expanded) {\r\n                    const nextOption = activeOption ?\r\n                        this.#nextOption(activeOption) :\r\n                        this.#lastOption(targetCombobox);\r\n                    if (nextOption) {\r\n                        nextOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const nextOption = selectedOption ?\r\n                        this.#nextOption(selectedOption) :\r\n                        this.#lastOption(targetCombobox);\r\n                    if (nextOption) {\r\n                        this.#selectOption(targetCombobox, nextOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstOption = this.#firstOption(targetCombobox);\r\n                if (firstOption) {\r\n                    if (expanded) {\r\n                        firstOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(targetCombobox, firstOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastOption = this.#lastOption(targetCombobox);\r\n                if (lastOption) {\r\n                    if (expanded) {\r\n                        lastOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(targetCombobox, lastOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (expanded) {\r\n                    this.collapse(targetCombobox);\r\n                    if (activeOption) {\r\n                        this.#selectOption(targetCombobox, activeOption);\r\n                    }\r\n                }\r\n                else {\r\n                    this.expand(targetCombobox);\r\n                    selectedOption?.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.collapse(targetCombobox);\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            default: {\r\n                const {length: keyLength} = key;\r\n                if (keyLength == 1) {\r\n                    const keyCode = key.charCodeAt(0);\r\n                    const options = this.options(targetCombobox);\r\n                    const activeIndex = activeOption ? options.indexOf(activeOption) : -1;\r\n                    const matchingOption = options.find(\r\n                        (option_i, i) => optionWidget.getLabel(option_i).toLowerCase().charCodeAt(0) == keyCode && i > activeIndex\r\n                    ) ?? options.find(\r\n                        (option_i) => optionWidget.getLabel(option_i).toLowerCase().charCodeAt(0) == keyCode\r\n                    );\r\n                    if (matchingOption) {\r\n                        matchingOption.focus({preventScroll: true});\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetItem = (<Element>target).closest<HTMLElement>(\".option\");\r\n        if (targetItem) {\r\n            targetItem.focus({preventScroll: true});\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { optionGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"optiongroup\": OptionGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface OptionGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar optionGroupWidget = new (\r\nWidget({\r\n    name: \"optiongroup\"\r\n})(class OptionGroupWidgetFactoryBase extends WidgetFactory implements OptionGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"optiongroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n}));","import { element, reactiveChildElements, reactiveElement } from \"../elements/Element\";\r\nimport { ModelEvent, ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { menuWidget } from \"./widgets/menu/MenuWidget\";\r\nimport { toolbarItemWidget } from \"./widgets/toolbar/ToolBarItemWidget\";\r\nimport { toolbarWidget } from \"./widgets/toolbar/ToolBarWidget\";\r\nimport { treeItemWidget } from \"./widgets/tree/TreeItemWidget\";\r\nimport { treeWidget } from \"./widgets/tree/TreeWidget\";\r\nimport { widget } from \"./widgets/Widget\";\r\n\r\nexport { TreeItemList };\r\nexport { TreeModel };\r\nexport { TreeItemModel };\r\nexport { treeView };\r\nexport { TreeViewFactoryBase };\r\nexport { TreeViewFactory };\r\n\r\nclass TreeModel extends ModelObject {\r\n    readonly items: ModelList<TreeItemModel>;\r\n    readonly childItems: ModelList<TreeItemModel>;\r\n    sortFunction: ((item_a: TreeItemModel, item_b: TreeItemModel) => number) | null;\r\n\r\n    constructor()\r\n    constructor(init: {\r\n        items: TreeItemModel[], sortFunction?: (item_a: TreeItemModel, item_b: TreeItemModel) => number;\r\n    })\r\n    constructor(init?: {\r\n        items: TreeItemModel[], sortFunction?: (item_a: TreeItemModel, item_b: TreeItemModel) => number;\r\n    }) {\r\n        super();\r\n        const {items, sortFunction} = init ?? {};\r\n        const childItems = new ModelList(items ?? []);\r\n        childItems.setParent(this);\r\n        this.childItems = childItems;\r\n        this.items = new ModelList(this.flattenItems());\r\n        this.sortFunction = sortFunction ??\r\n            function(item_a: TreeItemModel, item_b: TreeItemModel) {\r\n                return item_a.label.localeCompare(item_b.label);\r\n            };\r\n        this.addEventListener(\"modelchange\", this.#handleModelChangeEvent.bind(this));\r\n    }\r\n    \r\n    #handleModelChangeEvent(event: ModelEvent): void {\r\n        const {target} = event;\r\n        const {items, sortFunction, flattenItems} = this;\r\n        if (target instanceof ModelList) {\r\n            const records = target.getRecords();\r\n            records.forEach((record_i) => {\r\n                const {insertedItems, removedItems} = record_i;\r\n                const flattenedInsertedItems = (<TreeItemModel[]>Array.from(insertedItems.values())).flatMap(\r\n                    insertedItem_i => Array.of(insertedItem_i, ...flattenItems.call(insertedItem_i))\r\n                );\r\n                const flattenedRemovedItems = (<TreeItemModel[]>Array.from(removedItems.values())).flatMap(\r\n                    removedItem_i => Array.of(removedItem_i, ...flattenItems.call(removedItem_i))\r\n                );\r\n                items.beginChanges();\r\n                items.append(...flattenedInsertedItems);\r\n                flattenedRemovedItems.forEach((removedItem_i) => items.remove(removedItem_i));\r\n                if (sortFunction) items.sort(sortFunction);\r\n                items.endChanges();\r\n            });\r\n        }\r\n    }\r\n\r\n    flattenItems(this: TreeModel | TreeItemModel): TreeItemModel[] {\r\n        const {childItems} = this;\r\n        return Array.from(childItems.values()).flatMap(\r\n            treeItem_i => Array.of(treeItem_i, ...TreeModel.prototype.flattenItems.call(treeItem_i))\r\n        );\r\n    }\r\n\r\n    getItemByUri(this: TreeModel | TreeItemModel, uri: string): TreeItemModel | null {\r\n        const {childItems} = this;\r\n        const {length: itemsCount} = childItems;\r\n        const {length: uriLength} = uri;\r\n        for (let i = 0; i < itemsCount; i++) {\r\n            const item_i = childItems.get(i)!;\r\n            const {uri: itemUri} = item_i;\r\n            const {length: itemUriLength} = itemUri;\r\n            if (uri.startsWith(itemUri)) {\r\n                if (uri.charAt(itemUriLength) == \"/\") {\r\n                    return TreeModel.prototype.getItemByUri.call(item_i, uri);\r\n                }\r\n                else if (itemUriLength == uriLength) {\r\n                    return <TreeItemModel>item_i;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\nclass TreeItemList {\r\n    readonly items: TreeItemModel[];\r\n\r\n    constructor(items: TreeItemModel[]) {\r\n        this.items = items;\r\n    }\r\n\r\n    get count(): number {\r\n        return this.items.length;\r\n    }\r\n\r\n    remove(): void {\r\n        const {items} = this;\r\n        const removedItemsGroups = items.reduce((map, item_i) => {\r\n            const {parentNode} = item_i;\r\n            if (parentNode instanceof TreeItemModel || parentNode instanceof TreeModel) {\r\n                const {childItems} = parentNode;\r\n                const group = map.get(childItems);\r\n                if (group) group.push(item_i);\r\n                else map.set(childItems, [item_i]);\r\n            }\r\n            return map;\r\n        }, new Map<ModelList, TreeItemModel[]>());\r\n        Array.from(removedItemsGroups.entries()).forEach(\r\n            ([list_i, children_i]) => {\r\n                list_i.beginChanges();\r\n                children_i.forEach((child_i) => {\r\n                    list_i.remove(child_i);\r\n                });\r\n                list_i.endChanges();\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nclass TreeItemModel extends ModelObject {\r\n    readonly childItems: ModelList<TreeItemModel>;\r\n    readonly type: \"leaf\" | \"parent\";\r\n    readonly label: string;\r\n\r\n    get uri(): string {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return `${parentNode.uri}/${this.label}`;\r\n        }\r\n        return this.label;\r\n    }\r\n\r\n    get parentItem(): TreeItemModel | null {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return parentNode;\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    constructor(init: {label: string, type: \"leaf\" | \"parent\", items?: TreeItemModel[]}) {\r\n        super();\r\n        const {label, type, items} = init;\r\n        const childItems = new ModelList(items ?? []);\r\n        childItems.setParent(this);\r\n        this.childItems = childItems;\r\n        this.label = label;\r\n        this.type = type;\r\n    }\r\n    \r\n    remove(): void {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel || parentNode instanceof TreeModel) {\r\n            const {childItems} = parentNode;\r\n            if (childItems) {\r\n                childItems.remove(this);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface TreeViewFactory {\r\n    create(init: {\r\n        model: TreeModel;\r\n    }): HTMLElement;\r\n    itemContentDelegate(item: TreeItemModel): string | Node;\r\n    itemContextMenuDelegate?(activeItem: TreeItemModel, selectedItems: TreeItemModel[]): Node | null;\r\n    getModel(tree: HTMLElement): TreeModel | null;\r\n    selectedItems(tree: HTMLElement): TreeItemModel[];\r\n}\r\n\r\nclass TreeViewFactoryBase implements TreeViewFactory {\r\n    #models: WeakMap<HTMLElement, TreeModel>;\r\n    #dragImages: WeakMap<TreeItemModel, WeakRef<Element>>;\r\n    itemContextMenuDelegate?(activeItem: TreeItemModel, selectedItems: TreeItemModel[]): Node | null;\r\n\r\n    itemContentDelegate(item: TreeItemModel): string | Node {\r\n        return reactiveElement(\r\n            item,\r\n            element(\"span\"),\r\n            [\"label\"],\r\n            (label, property, oldValue, newValue) => {\r\n                label.textContent = newValue;\r\n            }\r\n        )\r\n    }\r\n\r\n    \r\n    constructor() {\r\n        this.#models = new WeakMap();\r\n        this.#dragImages = new WeakMap();\r\n    }\r\n\r\n    create(init: {\r\n        model: TreeModel;\r\n    }): HTMLElement {\r\n        const {model} = init;\r\n        const treeElement = widget(\"tree\", {\r\n            properties: {\r\n                tabIndex: 0,\r\n            },\r\n            slotted: reactiveChildElements(\r\n                model.childItems, item => this.#renderTreeItem(<TreeItemModel>item, <TreeModel><unknown>model)\r\n            ),\r\n            listeners: {\r\n                dragstart: <EventListener>this.#handleDragStartEvent.bind(this),\r\n                drop: <EventListener>this.#handleDropEvent.bind(this),\r\n                contextmenu: <EventListener>this.#handleContextMenuEvent.bind(this),\r\n                keydown: <EventListener>this.#handleKeyDownEvent.bind(this),\r\n                focusin: <EventListener>this.#handleFocusInEvent.bind(this),\r\n                focusout: <EventListener>this.#handleFocusOutEvent.bind(this),\r\n            }\r\n        });\r\n        const rootElement = element(\"div\", {\r\n            attributes: {\r\n                class: \"tree-view\",\r\n            },\r\n            children: [\r\n                treeElement,\r\n                element(\"div\", {\r\n                    attributes: {\r\n                        class: \"offscreen\",\r\n                        hidden: true\r\n                    },\r\n                    children: reactiveChildElements(model.items,\r\n                        item => this.#renderTreeItemDragImage(item)\r\n                    )\r\n                })\r\n            ]\r\n        });\r\n        this.#models.set(treeElement, <TreeModel><unknown>model);\r\n        return rootElement;\r\n    }\r\n    \r\n    getModel(tree: HTMLElement): TreeModel | null {\r\n        return this.#models.get(tree) ?? null;\r\n    }\r\n\r\n    selectedItems(tree: HTMLElement): TreeItemModel[] {\r\n        const model = this.getModel(tree)!;\r\n        const selectedElements = treeWidget.selectedItems(tree);\r\n        return selectedElements.map(\r\n            item_i => <TreeItemModel>model.getItemByUri(item_i.dataset.uri!)\r\n        );\r\n    }\r\n\r\n    #getDragImage(model: TreeItemModel): Element | null {\r\n        return this.#dragImages.get(model)?.deref() ?? null;\r\n    }\r\n\r\n    #renderTreeItem(item: TreeItemModel, model: TreeModel): Element {\r\n        const treeItemElement = widget(\"treeitem\", {\r\n            properties: {\r\n                type: item.type,\r\n                draggable: true\r\n            },\r\n            dataset: {\r\n                uri: item.uri\r\n            },\r\n            slotted: {\r\n                content: this.itemContentDelegate(item),\r\n                group:\r\n                    <Node[]>((item.type == \"parent\") ? [\r\n                    widget(\"treeitemgroup\", {\r\n                        slotted: reactiveChildElements(item.childItems,\r\n                            item => this.#renderTreeItem(item, model)\r\n                        )\r\n                    })\r\n                ] : [])\r\n            }\r\n        });\r\n        return treeItemElement;\r\n    }\r\n\r\n    #renderTreeItemDragImage(item: TreeItemModel): Element {\r\n        const dragImageElement = reactiveElement(\r\n            item,\r\n            element(\"span\", {\r\n                attributes: {\r\n                    class: \"dragimage\"\r\n                }\r\n            }),\r\n            [\"label\"],\r\n            (span, property, oldValue, newValue) => {\r\n                span.textContent = newValue;\r\n            }\r\n        );\r\n        this.#dragImages.set(item, new WeakRef(dragImageElement));\r\n        return dragImageElement;\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetModel = this.getModel(targetTree)!;\r\n        if (targetItem) {\r\n            const {dataTransfer} = event;\r\n            const selectedElements = treeWidget.selectedItems(targetTree);\r\n            const {length: selectedCount} = selectedElements;\r\n            if (selectedCount > 0) {\r\n                const selectedUris = \r\n                    selectedElements\r\n                    .map((element_i) =>\r\n                        element_i.dataset.uri!\r\n                    )\r\n                    .filter(\r\n                        (uri_i, _, uris) => !uris.some(\r\n                            uri_j => uri_i.startsWith(`${uri_j}/`)\r\n                        )\r\n                    );\r\n                const selectedUrisString = selectedUris.join(\"\\n\");\r\n                const lastUri = selectedUris[selectedUris.length - 1];\r\n                const lastItem = targetModel.getItemByUri(lastUri);\r\n                if (lastItem && dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", selectedUrisString);\r\n                    const dragImage = this.#getDragImage(lastItem);\r\n                    if (dragImage) {\r\n                        dataTransfer.setDragImage(dragImage, -16, 0);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetModel = this.getModel(targetTree)!;\r\n        const {sortFunction} = targetModel;\r\n        if (targetItem) {\r\n            const {dataTransfer} = event;\r\n            if (dataTransfer) {\r\n                const targetUri = targetItem.dataset.uri!;\r\n                const targetItemModel = targetModel.getItemByUri(targetUri)!;\r\n                const transferedUris = dataTransfer.getData(\"text/plain\").split(\"\\n\");\r\n                const targetIsWithin = transferedUris.some(uri_i => targetUri.startsWith(`${uri_i}/`) || uri_i == targetUri);\r\n                if (!targetIsWithin) {\r\n                    const transferedItems = <TreeItemModel[]>transferedUris.map(\r\n                        uri_i => targetModel.getItemByUri(uri_i)\r\n                    ).filter(\r\n                        item_i => item_i !== null\r\n                    );\r\n                    const {type: targetType, parentItem: targetParentItem} = targetItemModel;\r\n                    const {childItems: targetList} = targetType == \"parent\" ?\r\n                        targetItemModel :\r\n                        targetParentItem ?\r\n                        targetParentItem :\r\n                        targetModel;\r\n                    const targetItems = Array.from(targetList.values());\r\n                    targetItems.forEach((item_i) => {\r\n                        const sameLabelIndex = transferedItems.findIndex(item_j => item_j.label == item_i.label);\r\n                        if (sameLabelIndex > -1) {\r\n                            const doReplace = confirm(`Replace ${item_i.label}?`);\r\n                            if (doReplace) {\r\n                                targetList.remove(item_i);\r\n                            }\r\n                            else {\r\n                                transferedItems.copyWithin(sameLabelIndex, sameLabelIndex + 1);\r\n                                transferedItems.length--;\r\n                            }\r\n                        }\r\n                    });\r\n                    const itemsList = new TreeItemList(transferedItems);\r\n                    itemsList.remove();\r\n                    if (sortFunction) {\r\n                        targetList.beginChanges();\r\n                        targetList.append(...transferedItems);\r\n                        targetList.sort(sortFunction);\r\n                        targetList.endChanges();\r\n                    }\r\n                    else {\r\n                        targetList.insert(treeItemWidget.getPosInSet(targetItem), ...transferedItems);\r\n                    }\r\n                    \r\n                    const newElements = targetTree.querySelectorAll<HTMLElement>(`.treeitem:is(${\r\n                        transferedItems.map(item_i => `[data-uri=\"${item_i.uri}\"]`).join(\",\")\r\n                    })`);\r\n                    treeWidget.beginSelection(targetTree);\r\n                    newElements.forEach((element_i) => {\r\n                        treeItemWidget.setSelected(element_i, true);\r\n                    });\r\n                    treeWidget.endSelection(targetTree);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        const {clientX, clientY, currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetModel = this.getModel(targetTree)!;\r\n        const {itemContextMenuDelegate} = this;\r\n        if (itemContextMenuDelegate && targetItem) {\r\n            const activeItem = targetModel.getItemByUri(targetItem.dataset.uri!)!;\r\n            const contextMenu = widget(\"menu\", {\r\n                properties: {\r\n                    contextual: true,\r\n                    position: {\r\n                        x: clientX,\r\n                        y: clientY\r\n                    }\r\n                },\r\n                slotted: itemContextMenuDelegate.call(this, activeItem, this.selectedItems(targetTree))!,\r\n                listeners: {\r\n                    /*click: () => {\r\n                        if (targetItem.isConnected) {\r\n                            targetItem.focus({preventScroll: true});\r\n                        }\r\n                        else {\r\n                            targetTree.focus({preventScroll: true});\r\n                        }\r\n                    },*/\r\n                    close: () => {\r\n                        targetItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            });\r\n            targetTree.append(contextMenu);\r\n            contextMenu.focus({preventScroll: true});\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetElement = <HTMLElement>target;\r\n        if (targetElement.matches(\".treeitem\")) {\r\n            const targetItem = targetElement;\r\n            const toolbar = targetItem.querySelector<HTMLElement>(\".toolbar\");\r\n            if (toolbar) {\r\n                toolbar.tabIndex = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetElement = <HTMLElement>target;\r\n        if (targetElement.matches(\".treeitem\")) {\r\n            const targetItem = targetElement;\r\n            const toolbar = targetItem.querySelector<HTMLElement>(\".toolbar\");\r\n            if (toolbar) {\r\n                toolbar.tabIndex = -1;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        switch (key) {\r\n            case \"Delete\": {\r\n                const itemsList = new TreeItemList(this.selectedItems(targetTree));\r\n                const {count} = itemsList;\r\n                const doRemove = confirm(`Remove ${count} items?`);\r\n                if (doRemove) {\r\n                    itemsList.remove();\r\n                }\r\n                targetTree.focus();\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar treeView = new TreeViewFactoryBase();","\r\nimport { element, fragment, reactiveElement } from \"./src/elements/Element\";\r\nimport { ModelEvent, ModelList, ModelObject, ModelProperty } from \"./src/models/Model\";\r\nimport { TreeItemList, TreeItemModel, TreeModel, TreeViewFactory, TreeViewFactoryBase } from \"./src/views/TreeView\";\r\nimport { toolbarItemWidget } from \"./src/views/widgets/toolbar/ToolBarItemWidget\";\r\nimport { toolbarWidget } from \"./src/views/widgets/toolbar/ToolBarWidget\";\r\nimport { widget } from \"./src/views/widgets/Widget\";\r\n\r\nclass MyTreeItemList extends TreeItemList {\r\n    readonly items!: MyTreeItemModel[];\r\n\r\n    constructor(items: MyTreeItemModel[]) {\r\n        super(items);\r\n    }\r\n\r\n    get count(): number {\r\n        return this.items.length;\r\n    }\r\n\r\n    show(): void {\r\n        this.items.forEach(item_i => item_i.show());\r\n    }\r\n\r\n    hide(): void {\r\n        this.items.forEach(item_i => item_i.hide());\r\n    }\r\n\r\n    display(): void {\r\n        const result = this.items.reduce(\r\n            (result, item_i) => `${result} ${item_i.label}`, \"\"\r\n        );\r\n        console.log(result);\r\n    }\r\n}\r\n\r\nclass MyTreeItemModel extends TreeItemModel {\r\n\r\n    @ModelProperty()\r\n    childCount: number;\r\n\r\n    @ModelProperty()\r\n    visibility: boolean;\r\n\r\n    constructor(init: {label: string, type: \"leaf\" | \"parent\", items?: TreeItemModel[]}) {\r\n        super(init);\r\n        this.childCount = this.childItems.length;\r\n        this.visibility = true;\r\n        this.addEventListener(\"modelchange\", this.#handleModelChangeEvent.bind(this));\r\n    }\r\n\r\n    show(): void {\r\n        this.visibility = true;\r\n    }\r\n\r\n    hide(): void {\r\n        this.visibility = false;\r\n    }\r\n\r\n    display(): void {\r\n        console.log(this.label);\r\n    }\r\n\r\n    #handleModelChangeEvent(event: ModelEvent): void {\r\n        const {target} = event;\r\n        const {childItems} = this;\r\n        if (target == childItems) {\r\n            this.childCount = childItems.length;\r\n        }\r\n    }\r\n}\r\n\r\nexport async function TreeMain() {\r\n    const myTreeView = new class extends TreeViewFactoryBase {\r\n        itemContextMenuDelegate(activeItem: MyTreeItemModel, selectedItems: MyTreeItemModel[]): Node {\r\n            const self = this;\r\n            return fragment(\r\n                widget(\"menuitemgroup\", {\r\n                    slotted: [\r\n                        widget(\"menuitem\", {\r\n                            properties: {\r\n                                label: \"Display\"\r\n                            },\r\n                            listeners: {\r\n                                click: () => {\r\n                                    const itemsList = new MyTreeItemList(selectedItems);\r\n                                    itemsList.display();\r\n                                }\r\n                            }\r\n                        }),\r\n                        widget(\"menuitem\", {\r\n                            properties: {\r\n                                label: \"Delete\"\r\n                            },\r\n                            listeners: {\r\n                                click: () => {\r\n                                    const itemsList = new MyTreeItemList(selectedItems);\r\n                                    const {count} = itemsList;\r\n                                    const doRemove = confirm(`Remove ${count} items?`);\r\n                                    if (doRemove) {\r\n                                        itemsList.remove();\r\n                                    }\r\n                                    //TODO: focus the tree\r\n                                }\r\n                            }\r\n                        })\r\n                    ]\r\n                }),\r\n                widget(\"menuitemgroup\", {\r\n                    slotted: [\r\n                        widget(\"menuitem\", {\r\n                            properties: {\r\n                                type: \"checkbox\",\r\n                                label: activeItem.visibility ? \"Hide\" : \"Show\"\r\n                            },\r\n                            listeners: {\r\n                                click: () => {\r\n                                    const itemsList = new MyTreeItemList(selectedItems);\r\n                                    activeItem.visibility ?\r\n                                        itemsList.hide() :\r\n                                        itemsList.show();\r\n                                }\r\n                            }\r\n                        })\r\n                    ]\r\n                })\r\n            )\r\n        }\r\n        itemContentDelegate(item: MyTreeItemModel): string | Node {\r\n            return fragment(\r\n                ...([\r\n                    reactiveElement(\r\n                        item,\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"label\"\r\n                            }\r\n                        }),\r\n                        [\"label\"],\r\n                        (label, property, oldValue, newValue) => {\r\n                            label.textContent = newValue;\r\n                        }\r\n                    )\r\n                ]).concat(\r\n                    (item.type == \"parent\") ? [\r\n                        reactiveElement(\r\n                            item,\r\n                            element(\"span\", {\r\n                                attributes: {\r\n                                    class: \"badge\"\r\n                                }\r\n                            }),\r\n                            [\"childCount\"],\r\n                            (badge, property, oldValue, newValue) => {\r\n                                badge.textContent = `(${newValue})`;\r\n                            }\r\n                        )\r\n                    ] : []\r\n                ).concat([\r\n                    reactiveElement(\r\n                        item,\r\n                        widget(\"toolbar\", {\r\n                            slotted: [\r\n                                widget(\"toolbaritem\", {\r\n                                    properties: {\r\n                                        name: \"visibility\",\r\n                                        type: \"checkbox\",\r\n                                        label: \"Visibility\"\r\n                                    },\r\n                                    listeners: {\r\n                                        click: () => {\r\n                                            item.visibility ?\r\n                                                item.hide() :\r\n                                                item.show();\r\n                                        }\r\n                                    }\r\n                                })\r\n                            ]\r\n                        }),\r\n                        [\"visibility\"],\r\n                        (toolbar, property, oldValue, newValue) => {\r\n                            switch (property) {\r\n                                case \"visibility\": {\r\n                                    const visibilityItem = toolbarWidget.slot(toolbar)\r\n                                        ?.querySelector<HTMLElement>(\".toolbaritem[name=visibility]\");\r\n                                    if (visibilityItem) {\r\n                                        const label = newValue ? \"Hide\" : \"Show\";\r\n                                        toolbarItemWidget.setLabel(visibilityItem, label);\r\n                                        toolbarItemWidget.setTitle(visibilityItem, label);\r\n                                        toolbarItemWidget.setPressed(visibilityItem, newValue);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    )\r\n                ])\r\n            );\r\n        }\r\n    };\r\n\r\n    const treeModel = new TreeModel({\r\n        items: [\r\n            new MyTreeItemModel({\r\n                label: \"TI 0\",\r\n                type: \"parent\",\r\n                items: [\r\n                    new MyTreeItemModel({\r\n                        label: \"TI 1A\",\r\n                        type: \"parent\",\r\n                        items: [\r\n                            new MyTreeItemModel({\r\n                                type: \"leaf\",\r\n                                label: \"TI 1AX\"\r\n                            }),\r\n                        ]\r\n                    }),\r\n                    new MyTreeItemModel({\r\n                        type: \"parent\",\r\n                        label: \"TI 1B\"\r\n                    })\r\n                ]\r\n            }),\r\n            new MyTreeItemModel({\r\n                label: \"TI 1\",\r\n                type: \"parent\",\r\n                items: [\r\n                    new MyTreeItemModel({\r\n                        label: \"TI 1A\",\r\n                        type: \"parent\",\r\n                        items: [\r\n                            new MyTreeItemModel({\r\n                                type: \"leaf\",\r\n                                label: \"TI 1AX\"\r\n                            }),\r\n                        ]\r\n                    }),\r\n                    new MyTreeItemModel({\r\n                        type: \"parent\",\r\n                        label: \"TI 1B\"\r\n                    })\r\n                ]\r\n            }),\r\n            new MyTreeItemModel({\r\n                type: \"leaf\",\r\n                label: \"TI 2\"\r\n            }),\r\n            new MyTreeItemModel({\r\n                type: \"leaf\",\r\n                label: \"TI 3\"\r\n            })\r\n        ],\r\n        sortFunction: (item_a: TreeItemModel, item_b: TreeItemModel) => {\r\n            const {label: aLabel} = item_a;\r\n            const {label: bLabel} = item_b;\r\n            return bLabel.localeCompare(aLabel);\r\n        }\r\n    });\r\n    const treeElement = myTreeView.create({\r\n        model: treeModel\r\n    });\r\n    document.body.append(treeElement);\r\n}","//import { MenuItemGroupWidget, MenuItemWidget, MenuWidget, MenuBarWidget } from \"./src/views/MenuBarWidget\";\r\nimport { treeView, TreeItemModel, TreeModel, TreeItemList } from \"./src/views/TreeView\";\r\n\r\nimport \"./index\";\r\nimport { ListItemModel, ListModel, ListView } from \"./src/views/ListView\";\r\nimport { GridColumnModel, GridModel, GridRowModel, GridView } from \"./src/views/GridView\";\r\nimport { element, fragment, reactiveElement } from \"./src/elements/Element\";\r\nimport { treeItemWidget } from \"./src/views/widgets/tree/TreeItemWidget\";\r\nimport { widget } from \"./src/views/widgets/Widget\";\r\nimport { Editor } from \"./src/Editor\";\r\nimport { toolbarWidget } from \"./src/views/widgets/toolbar/ToolBarWidget\";\r\nimport { toolbarItemWidget } from \"./src/views/widgets/toolbar/ToolBarItemWidget\";\r\nimport { comboBoxWidget } from \"./src/views/widgets/combobox/ComboBoxWidget\";\r\nimport { optionWidget } from \"./src/views/widgets/combobox/OptionWidget\";\r\nimport { TreeMain } from \"./TreeMain\";\r\n\r\n// const menubar = new MenuBarWidget([\r\n//     new MenuItemWidget({\r\n//         label: \"File\",\r\n//         name: \"file\",\r\n//         type: \"menu\",\r\n//         menu: new MenuWidget({\r\n//             name: \"File\",\r\n//             groups: [\r\n//                 new MenuItemGroupWidget({\r\n//                     name: \"fileActions\",\r\n//                     items: [\r\n//                         new MenuItemWidget({\r\n//                             label: \"Import file...\",\r\n//                             name: \"import\"\r\n//                         }),\r\n//                         new MenuItemWidget({\r\n//                             label: \"Export file...\",\r\n//                             name: \"export\",\r\n//                             hotkey: new HotKey(Key.B, KeyModifier.Control, KeyModifier.Alt)\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         })\r\n//     }),\r\n//     new MenuItemWidget({\r\n//         label: \"Preferences\",\r\n//         name: \"preferences\",\r\n//         type: \"menu\",\r\n//         menu: new MenuWidget({\r\n//             name: \"Preferences\",\r\n//             groups: [\r\n//                 new MenuItemGroupWidget({\r\n//                     name: \"fileActions\",\r\n//                     items: [\r\n//                         new MenuItemWidget({\r\n//                             label: \"Advanced User\",\r\n//                             name: \"advanced\",\r\n//                             type: \"checkbox\",\r\n//                             hotkey: new HotKey(Key.A, KeyModifier.Control, KeyModifier.Alt)\r\n//                         }),\r\n//                         new MenuItemWidget({\r\n//                             label: \"Layout\",\r\n//                             name: \"layout\",\r\n//                             type: \"submenu\",\r\n//                             menu: new MenuWidget({\r\n//                                 name: \"Layout\",\r\n//                                 groups: [\r\n//                                     new MenuItemGroupWidget({\r\n//                                         name: \"Layout\",\r\n//                                         items: [\r\n//                                             new MenuItemWidget({\r\n//                                                 label: \"Standard\",\r\n//                                                 name: \"standard\",\r\n//                                                 type: \"radio\"\r\n//                                             }),\r\n//                                             new MenuItemWidget({\r\n//                                                 label: \"Advanced\",\r\n//                                                 name: \"advanced\",\r\n//                                                 type: \"radio\"\r\n//                                             })\r\n//                                         ]\r\n//                                     })\r\n//                                 ]\r\n//                             })\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         })\r\n//     })\r\n// ]);\r\n\r\n// const treeModel = new TreeModel({\r\n//     itemContextMenuDelegate: (activeItem: TreeItemModel, selectedItems: TreeItemList) => \r\n//         fragment(\r\n//             widget(\"menuitemgroup\", {\r\n//                 slotted: [\r\n//                     widget(\"menuitem\", {\r\n//                         properties: {\r\n//                             label: \"Display\"\r\n//                         },\r\n//                         listeners: {\r\n//                             click: () => {\r\n//                                 selectedItems.display();\r\n//                             }\r\n//                         }\r\n//                     }),\r\n//                     widget(\"menuitem\", {\r\n//                         properties: {\r\n//                             label: \"Delete\"\r\n//                         },\r\n//                         listeners: {\r\n//                             click: () => {\r\n//                                 const {count} = selectedItems;\r\n//                                 const doRemove = confirm(`Remove ${count} items?`);\r\n//                                 if (doRemove) {\r\n//                                     selectedItems.remove();\r\n//                                 }\r\n//                             }\r\n//                         }\r\n//                     })\r\n//                 ]\r\n//             }),\r\n//             widget(\"menuitemgroup\", {\r\n//                 slotted: [\r\n//                     widget(\"menuitem\", {\r\n//                         properties: {\r\n//                             type: \"checkbox\",\r\n//                             label: activeItem.visibility ? \"Hide\" : \"Show\"\r\n//                         },\r\n//                         listeners: {\r\n//                             click: () => {\r\n//                                 activeItem.visibility ?\r\n//                                     selectedItems.hide() :\r\n//                                     selectedItems.show();\r\n//                             }\r\n//                         }\r\n//                     })\r\n//                 ]\r\n//             })\r\n//         ),\r\n//     itemContentDelegate: (item: TreeItemModel) => \r\n//         fragment(\r\n//             ...([\r\n//                 reactiveElement(\r\n//                     item,\r\n//                     element(\"span\", {\r\n//                         attributes: {\r\n//                             class: \"label\"\r\n//                         }\r\n//                     }),\r\n//                     [\"label\"],\r\n//                     (label, property, oldValue, newValue) => {\r\n//                         label.textContent = newValue;\r\n//                     }\r\n//                 )\r\n//             ]).concat(\r\n//                 (item.type == \"parent\") ? [\r\n//                     reactiveElement(\r\n//                         item,\r\n//                         element(\"span\", {\r\n//                             attributes: {\r\n//                                 class: \"badge\"\r\n//                             }\r\n//                         }),\r\n//                         [\"childCount\"],\r\n//                         (badge, property, oldValue, newValue) => {\r\n//                             badge.textContent = `(${newValue})`;\r\n//                         }\r\n//                     )\r\n//                 ] : []\r\n//             ).concat([\r\n//                 reactiveElement(\r\n//                     item,\r\n//                     widget(\"toolbar\", {\r\n//                         slotted: [\r\n//                             widget(\"toolbaritem\", {\r\n//                                 properties: {\r\n//                                     name: \"visibility\",\r\n//                                     type: \"checkbox\",\r\n//                                     label: \"Visibility\"\r\n//                                 },\r\n//                                 listeners: {\r\n//                                     click: () => {\r\n//                                         item.visibility ?\r\n//                                             item.hide() :\r\n//                                             item.show();\r\n//                                     }\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     }),\r\n//                     [\"visibility\"],\r\n//                     (toolbar, property, oldValue, newValue) => {\r\n//                         switch (property) {\r\n//                             case \"visibility\": {\r\n//                                 const visibilityItem = toolbarWidget.slot(toolbar)\r\n//                                     ?.querySelector<HTMLElement>(\".toolbaritem[name=visibility]\");\r\n//                                 if (visibilityItem) {\r\n//                                     const label = newValue ? \"Hide\" : \"Show\";\r\n//                                     toolbarItemWidget.setLabel(visibilityItem, label);\r\n//                                     toolbarItemWidget.setTitle(visibilityItem, label);\r\n//                                     toolbarItemWidget.setPressed(visibilityItem, newValue);\r\n//                                 }\r\n//                             }\r\n//                         }\r\n//                     }\r\n//                 )\r\n//             ])\r\n//         ),\r\n//     items: [\r\n//         new TreeItemModel({\r\n//             label: \"TI 0\",\r\n//             type: \"parent\",\r\n//             items: [\r\n//                 new TreeItemModel({\r\n//                     label: \"TI 1A\",\r\n//                     type: \"parent\",\r\n//                     items: [\r\n//                         new TreeItemModel({\r\n//                             type: \"leaf\",\r\n//                             label: \"TI 1AX\"\r\n//                         }),\r\n//                     ]\r\n//                 }),\r\n//                 new TreeItemModel({\r\n//                     type: \"parent\",\r\n//                     label: \"TI 1B\"\r\n//                 })\r\n//             ]\r\n//         }),\r\n//         new TreeItemModel({\r\n//             label: \"TI 1\",\r\n//             type: \"parent\",\r\n//             items: [\r\n//                 new TreeItemModel({\r\n//                     label: \"TI 1A\",\r\n//                     type: \"parent\",\r\n//                     items: [\r\n//                         new TreeItemModel({\r\n//                             type: \"leaf\",\r\n//                             label: \"TI 1AX\"\r\n//                         }),\r\n//                     ]\r\n//                 }),\r\n//                 new TreeItemModel({\r\n//                     type: \"parent\",\r\n//                     label: \"TI 1B\"\r\n//                 })\r\n//             ]\r\n//         }),\r\n//         new TreeItemModel({\r\n//             type: \"leaf\",\r\n//             label: \"TI 2\"\r\n//         }),\r\n//         new TreeItemModel({\r\n//             type: \"leaf\",\r\n//             label: \"TI 3\"\r\n//         })\r\n//     ],\r\n//     sortFunction: (item_a: TreeItemModel, item_b: TreeItemModel) => {\r\n//         const {label: aLabel} = item_a;\r\n//         const {label: bLabel} = item_b;\r\n//         return bLabel.localeCompare(aLabel);\r\n//     }\r\n// });\r\n// const treeElement = treeView.create(treeModel);\r\n// document.body.append(treeElement);\r\n\r\n// treeModel.childItems.append(\r\n//     new TreeItemModel({\r\n//         label: \"yo\",\r\n//         type: \"parent\",\r\n//         items: [\r\n//             new TreeItemModel({\r\n//                 type: \"leaf\",\r\n//                 label: \"plop\"\r\n//             })\r\n//         ]\r\n//     })\r\n// );\r\n\r\n// const listView = new ListView();\r\n// listView.setModel(\r\n//     new ListModel({\r\n//         items: [\r\n//             new ListItemModel({\r\n//                 label: \"Hey\"\r\n//             }),\r\n//             new ListItemModel({\r\n//                 label: \"Yo\"\r\n//             })\r\n//         ]\r\n//     })\r\n// );\r\n\r\n// //document.body.append(listView);\r\n\r\n// // Menu actions\r\n// // Toolbar actions\r\n// const gridView = new GridView();\r\n// gridView.resizable = true;\r\n// gridView.sortable = true;\r\n// gridView.setColumnDelegate((column) => {\r\n//     return fragment(\r\n//         element(\"label\", {\r\n//             children: column.label\r\n//         }),\r\n//         element(\"e-toolbar\", {\r\n//             children: [\r\n//                 element(\"e-toolbaritem\", {\r\n//                     attributes: {\r\n//                         type: \"button\"\r\n//                     }\r\n//                 })\r\n//             ]\r\n//         })\r\n//     );\r\n// });\r\n// const year = new Date().getFullYear();\r\n// gridView.setModel(\r\n//     new GridModel({\r\n//         columns: [\r\n//             new GridColumnModel({\r\n//                 name: \"name\",\r\n//                 type: String,\r\n//                 label: \"Name\",\r\n//                 extract: (row) => row.name\r\n//             }),\r\n//             new GridColumnModel({\r\n//                 name: \"age\",\r\n//                 type: Number,\r\n//                 label: \"Age\",\r\n//                 extract: (row) => row.age,\r\n//                 filters: [{\r\n//                     name: \"Minors\",\r\n//                     filter: (row) => row.age < 18\r\n//                 },{\r\n//                     name: \"Majors\",\r\n//                     filter: (row) => row.age >= 18\r\n//                 }]\r\n//             }),\r\n//             new GridColumnModel({\r\n//                 name: \"birthyear\",\r\n//                 type: String,\r\n//                 label: \"Brith Year\",\r\n//                 extract: (row) => year - row.age\r\n//             }),\r\n//         ],\r\n//         rows: [\r\n//             new GridRowModel({\r\n//                 id: 1,\r\n//                 name: \"Denis\",\r\n//                 age: 13\r\n//             }),\r\n//             new GridRowModel({\r\n//                 id: 2,\r\n//                 name: \"Jean-Charles\",\r\n//                 age: 32\r\n//             }),\r\n//             new GridRowModel({\r\n//                 id: 3,\r\n//                 name: \"Charles\",\r\n//                 age: 25\r\n//             }),\r\n//             new GridRowModel({\r\n//                 id: 4,\r\n//                 name: \"Mamagubida\",\r\n//                 age: 128\r\n//             })\r\n//         ]\r\n//     })\r\n// );\r\n// document.body.append(gridView);\r\n\r\n// const menuView = widget(\"menubar\", {\r\n//     slotted: [\r\n//         widget(\"menuitem\", {\r\n//             properties: {\r\n//                 label: \"MenuItem 0\",\r\n//                 name: \"MenuItem 0\",\r\n//                 type: \"menu\",\r\n//                 disabled: true\r\n//             },\r\n//             slotted: [\r\n//                 widget(\"menu\", {\r\n//                     slotted: [\r\n//                         widget(\"menuitem\", {\r\n//                             properties: {\r\n//                                 label: \"MenuItem 1\",\r\n//                                 name: \"MenuItem 1\",\r\n//                                 type: \"checkbox\"\r\n//                             }\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         }),\r\n//         widget(\"menuitem\", {\r\n//             properties: {\r\n//                 label: \"MenuItem 0\",\r\n//                 name: \"MenuItem 0\",\r\n//                 type: \"menu\"\r\n//             },\r\n//             slotted: [\r\n//                 widget(\"menu\", {\r\n//                     slotted: [\r\n//                         widget(\"menuitem\", {\r\n//                             properties: {\r\n//                                 label: \"MenuItem 1\",\r\n//                                 name: \"MenuItem 1\",\r\n//                                 type: \"checkbox\"\r\n//                             }\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         }),\r\n//         widget(\"menuitem\", {\r\n//             properties: {\r\n//                 label: \"MenuItem 1\",\r\n//                 name: \"MenuItem 1\",\r\n//                 type: \"menu\"\r\n//             },\r\n//             slotted: [\r\n//                 widget(\"menu\", {\r\n//                     slotted: [\r\n//                         widget(\"menuitemgroup\", {\r\n//                             slotted: [\r\n//                                 widget(\"menuitem\", {\r\n//                                     properties: {\r\n//                                         label: \"MenuItem 1\",\r\n//                                         type: \"checkbox\",\r\n//                                         keyshortcut: \"Ctrl+B\",\r\n//                                         disabled: true,\r\n//                                         checked: true\r\n//                                     }\r\n//                                 }),\r\n//                                 widget(\"menuitem\", {\r\n//                                     properties: {\r\n//                                         type: \"button\",\r\n//                                         label: \"MenuItem 2\",\r\n//                                         keyshortcut: \"Ctrl+A\"\r\n//                                     }\r\n//                                 })\r\n//                             ]\r\n//                         }),\r\n//                         widget(\"separator\"),\r\n//                         widget(\"menuitem\", {\r\n//                             properties: {\r\n//                                 label: \"Submenu\",\r\n//                                 type: \"submenu\"\r\n//                             },\r\n//                             slotted: [\r\n//                                 widget(\"menu\", {\r\n//                                     slotted: [\r\n//                                         widget(\"menuitem\", {\r\n//                                             properties: {\r\n//                                                 label: \"MenuItem 1\",\r\n//                                                 type: \"radio\",\r\n//                                                 name: \"radio\",\r\n//                                                 value: \"1\"\r\n//                                             }\r\n//                                         }),\r\n//                                         widget(\"menuitem\", {\r\n//                                             properties: {\r\n//                                                 type: \"radio\",\r\n//                                                 label: \"MenuItem 2\",\r\n//                                                 name: \"radio\",\r\n//                                                 value: \"2\"\r\n//                                             }\r\n//                                         }),\r\n//                                         widget(\"menuitem\", {\r\n//                                             properties: {\r\n//                                                 type: \"radio\",\r\n//                                                 label: \"MenuItem 3\",\r\n//                                                 name: \"radio\",\r\n//                                                 value: \"3\"\r\n//                                             }\r\n//                                         })\r\n//                                     ]\r\n//                                 })\r\n//                             ]\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         })\r\n//     ]\r\n// })\r\n// document.body.append(menuView);\r\n\r\n// const tree = widget(\"tree\", {\r\n//     slotted: [\r\n//         widget(\"treeitem\", {\r\n//             properties: {\r\n//                 label: \"treeitem 0\",\r\n//                 type: \"parent\",\r\n//                 draggable: true\r\n//                 //disabled: true\r\n//             },\r\n//             slotted: {\r\n//                 group: [\r\n//                     widget(\"treeitemgroup\", {\r\n//                         slotted: [\r\n//                             widget(\"treeitem\", {\r\n//                                 properties: {\r\n//                                     label: \"treeitem 1\",\r\n//                                     type: \"leaf\",\r\n//                                     draggable: true\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     })\r\n//                 ]\r\n//             },\r\n//             listeners: {\r\n//                 contextmenu: <EventListener>((event: MouseEvent) => {\r\n//                     const {target, clientX, clientY} = event;\r\n//                     const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n//                     const menu = widget(\"menu\", {\r\n//                         properties: {\r\n//                             contextual: true\r\n//                         },\r\n//                         slotted: [\r\n//                             widget(\"menuitemgroup\", {\r\n//                                 slotted: [\r\n//                                     widget(\"menuitem\", {\r\n//                                         properties: {\r\n//                                             label: \"Display\"\r\n//                                         },\r\n//                                         listeners: {\r\n//                                             click: () => {\r\n//                                                 console.log(treeItemWidget.getLabel(targetItem));\r\n//                                             }\r\n//                                         }\r\n//                                     }),\r\n//                                     widget(\"menuitem\", {\r\n//                                         properties: {\r\n//                                             label: \"Delete\"\r\n//                                         },\r\n//                                         listeners: {\r\n//                                             click: () => {\r\n//                                                 targetItem.remove();\r\n//                                             }\r\n//                                         }\r\n//                                     })\r\n//                                 ]\r\n//                             }),\r\n//                         ]\r\n//                     });\r\n//                     targetItem.append(menu);\r\n//                     menuWidget.positionContextual(menu, clientX, clientY);\r\n//                     menu.focus({preventScroll: true});\r\n//                     event.preventDefault();\r\n//                 })\r\n//             }\r\n//         }),\r\n//         widget(\"treeitem\", {\r\n//             properties: {\r\n//                 label: \"treeitem 0\",\r\n//                 type: \"parent\",\r\n//                 draggable: true,\r\n//                 disabled: true\r\n//             },\r\n//             slotted: {\r\n//                 group: [\r\n//                     widget(\"treeitemgroup\", {\r\n//                         slotted: [\r\n//                             widget(\"treeitem\", {\r\n//                                 properties: {\r\n//                                     label: \"treeitem 1\",\r\n//                                     type: \"leaf\",\r\n//                                     draggable: true\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     })\r\n//                 ]\r\n//             }\r\n//         }),\r\n//         widget(\"treeitem\", {\r\n//             properties: {\r\n//                 label: \"treeitem 1\",\r\n//                 type: \"leaf\",\r\n//                 draggable: true\r\n//             },\r\n//             slotted: {\r\n//                 content: [\r\n//                     widget(\"toolbar\", {\r\n//                         slotted: [\r\n//                             widget(\"toolbaritem\",  {\r\n//                                 properties: {\r\n//                                     label: \"First item\",\r\n//                                     type: \"button\"\r\n//                                 }\r\n//                             }),\r\n//                             widget(\"toolbaritem\",  {\r\n//                                 properties: {\r\n//                                     label: \"Second item\",\r\n//                                     type: \"checkbox\"\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     })\r\n//                 ]\r\n//             }\r\n//         })\r\n//     ]\r\n// })\r\n// document.body.append(tree);\r\n\r\n// document.body.append(\r\n//     widget(\"toolbar\", {\r\n//         slotted: [\r\n//             widget(\"toolbaritem\",  {\r\n//                 properties: {\r\n//                     label: \"First item\",\r\n//                     type: \"menubutton\"\r\n//                 },\r\n//                 slotted: [\r\n//                     widget(\"menu\", {\r\n//                         slotted: [\r\n//                             widget(\"menuitem\", {\r\n//                                 properties: {\r\n//                                     label: \"MenuItem 1\",\r\n//                                     name: \"MenuItem 1\",\r\n//                                     type: \"checkbox\"\r\n//                                 }\r\n//                             }),\r\n//                             widget(\"menuitem\", {\r\n//                                 properties: {\r\n//                                     label: \"MenuItem 2\",\r\n//                                     name: \"MenuItem 2\",\r\n//                                     type: \"checkbox\"\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     })\r\n//                 ]\r\n//             }),\r\n//             widget(\"toolbaritem\",  {\r\n//                 properties: {\r\n//                     label: \"Second item\",\r\n//                     type: \"checkbox\"\r\n//                 }\r\n//             }),\r\n//             widget(\"toolbaritem\",  {\r\n//                 properties: {\r\n//                     label: \"Third item\",\r\n//                     type: \"checkbox\",\r\n//                     disabled: true,\r\n//                 }\r\n//             }),\r\n//             widget(\"toolbaritem\",  {\r\n//                 properties: {\r\n//                     label: \"Fourth item\",\r\n//                     type: \"checkbox\"\r\n//                 }\r\n//             })\r\n//         ]\r\n//     })\r\n// );\r\n\r\n// document.body.append(\r\n//     widget(\"list\", {\r\n//         slotted: [\r\n//             widget(\"listitemgroup\",  {\r\n//                 slotted: [   \r\n//                     widget(\"listitem\",  {\r\n//                         properties: {\r\n//                             label: \"First item\"\r\n//                         }\r\n//                     })\r\n//                 ]\r\n//             }),\r\n//             widget(\"listitem\",  {\r\n//                 properties: {\r\n//                     label: \"Second item\"\r\n//                 },\r\n//                 slotted: [\r\n//                     widget(\"toolbar\", {\r\n//                         slotted: [\r\n//                             widget(\"toolbaritem\",  {\r\n//                                 properties: {\r\n//                                     label: \"First item\",\r\n//                                     type: \"button\"\r\n//                                 }\r\n//                             }),\r\n//                             widget(\"toolbaritem\",  {\r\n//                                 properties: {\r\n//                                     label: \"Second item\",\r\n//                                     type: \"checkbox\"\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     })\r\n//                 ]\r\n//             }),\r\n//             widget(\"listitem\",  {\r\n//                 properties: {\r\n//                     label: \"Third item\",\r\n//                     disabled: true,\r\n//                 }\r\n//             }),\r\n//             widget(\"listitem\",  {\r\n//                 properties: {\r\n//                     label: \"Fourth item\"\r\n//                 }\r\n//             })\r\n//         ]\r\n//     })\r\n// );\r\n\r\n// document.body.append(\r\n//     widget(\"grid\", {\r\n//         properties: {\r\n//             selectby: \"row\",\r\n//             multisectable: true\r\n//         },\r\n//         slotted: {\r\n//             headers: [\r\n//                 widget(\"gridheader\",  {\r\n//                     slotted: \"First header\"\r\n//                 }),\r\n//                 widget(\"gridheader\",  {\r\n//                     slotted: \"Second header\"\r\n//                 })\r\n//             ],\r\n//             rows: [\r\n//                 widget(\"gridrow\",  {\r\n//                     slotted: [   \r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"First cell\"\r\n//                         }),\r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Second cell\"\r\n//                         })\r\n//                     ]\r\n//                 }),\r\n//                 widget(\"gridrow\",  {\r\n//                     slotted: [   \r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Third cell\"\r\n//                         }),\r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Fourth cell\"\r\n//                         })\r\n//                     ]\r\n//                 }),\r\n//                 widget(\"gridrow\",  {\r\n//                     slotted: [   \r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Fifth cell\"\r\n//                         }),\r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Sixth cell\"\r\n//                         })\r\n//                     ]\r\n//                 }),\r\n//                 widget(\"gridrow\",  {\r\n//                     slotted: [   \r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Heighth cell\"\r\n//                         }),\r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Nineth cell\"\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         }\r\n//     })\r\n// );\r\n\r\n// document.body.append(\r\n//     widget(\"combobox\", {\r\n//         slotted: [\r\n//             widget(\"option\",  {\r\n//                 properties: {\r\n//                     label: \"First option\"\r\n//                 }\r\n//             }),\r\n//             widget(\"option\",  {\r\n//                 properties: {\r\n//                     label: \"Second option\"\r\n//                 }\r\n//             }),\r\n//             widget(\"option\",  {\r\n//                 properties: {\r\n//                     label: \"Third option\",\r\n//                     selected: true\r\n//                 }\r\n//             })\r\n//         ],\r\n//         listeners: {\r\n//             change: (event) => {\r\n//                 const {currentTarget} = event;\r\n//                 const comboBoxTarget = <HTMLElement>currentTarget;\r\n//                 console.log(optionWidget.getLabel(comboBoxWidget.selectedOption(comboBoxTarget)!));\r\n//             }\r\n//         }\r\n//     })\r\n// );\r\n\r\n// const editor = new Editor();\r\n// editor.setup();\r\n\r\n// editor.registerCheckboxAction(\"toggleAdvancedUser\", (_, newValue) => {\r\n//     console.log(`Advanced user is now ${newValue}`);\r\n// }, {hotkey: new HotKey(Key.ARROW_DOWN, KeyModifier.Alt)});\r\n\r\n// editor.registerRadioAction(\"setLayout\", (_, newValue) => {\r\n//     editor.setPair(\"layout\", newValue);\r\n// });\r\n\r\n// editor.registerButtonAction(\"execLayout\", () => {\r\n//     const layout = editor.getPair(\"layout\");\r\n//     console.log(`Layout is ${layout}`);\r\n// }, {hotkey: new HotKey(Key.ARROW_UP, KeyModifier.Alt)});\r\n\r\n\r\n// editor.registerRadioAction(\"selectTest\", (oldValue, newValue) => {\r\n//     console.log(`Test is ${newValue}`);\r\n// }, {value: \"2\", key: \"test\"});\r\n\r\n// document.addEventListener(\"slotchange\", (event) => {\r\n//     console.log(event);\r\n// });\r\n\r\n// setTimeout(() => {\r\n//     const execLayoutToolBarItem = document.querySelector<HTMLEActionElement>(\"e-toolbaritem[name=execLayout]\");\r\n//     if (execLayoutToolBarItem) {\r\n//         editor.addPairListener(\"layout\", (oldValue, newValue) => {\r\n//             if (newValue !== oldValue) {\r\n//                 execLayoutToolBarItem.value = newValue;\r\n//             }\r\n//         });\r\n//     }\r\n// }, 100);\r\n\r\n// const button = element(\"button\", {\r\n//     properties: {\r\n//         textContent: \"Focus\"\r\n//     },\r\n//     listeners: {\r\n//         click: () => {\r\n//             const menuitem = document.querySelector<HTMLEMenuItemElement>(\"e-menuitem#hey\");\r\n//             if (menuitem) {\r\n//                 menuitem.focus();\r\n//             }\r\n//         }\r\n//     }\r\n// });\r\n// document.body.append(button);\r\n// document.body.append(menubar.element);\r\n\r\n// editor.executeCheckboxAction(\"toggleAdvancedUser\", true);\r\n// editor.setCheckboxActionValue(\"toggleAdvancedUser\", false);\r\n\r\n//editor.setRadioActionValue(\"selectTest\", \"2\");\r\n\r\n//editor.executeRadioAction(\"setLayout\", \"other\");\r\nexport async function main() {\r\n    TreeMain();\r\n}"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","ModelChangeRecordBase","constructor","init","this","target","changeType","propertyName","oldValue","undefined","newValue","removedIndex","removedItems","ModelNodesList","insertedIndex","insertedItems","sortedIndices","PROPERTY_CHANGE","LIST_REMOVE","LIST_INSERT","LIST_SORT","ModelChangeRecord","items","slice","length","item","index","values","ModelEventBase","type","ModelEventTargetAccessor","setCurrentTarget","event","currentTarget","setTarget","ModelEvent","ModelNodeBase","Map","receiveEvent","callbacks","forEach","callback_i","addEventListener","callback","push","set","removeEventListener","callbackIndex","findIndex","splice","delete","dispatchEvent","super","setParent","parentNode","isCyclicReference","ancestorNode","TypeError","beginChanges","endChanges","getRecords","property","records","record","ModelNodeRecordsAccessor","triggerChange","node","handleRecord","ModelNode","ModelProperty","ModelObjectPropertiesAccessor","getProperty","setProperty","ModelObjectBase","ModelObject","ModelList","item_i","fromIndex","indexOf","sort","compareFunction","indexedItems","map","i","indexedItem_a","indexedItem_b","indexedItem_i","prepend","_items","append","insert","Math","abs","remove","clear","removedItem_i","reference","options","properties","propertiesFilter","childList","subtree","filter","record_i","includes","ModelChangeObserver","WeakMap","observe","references","listener","bind","unobserve","disconnect","camelToTrain","str","replace","toLowerCase","AttributeProperty","String","attributeName","defaultValue","observed","observedAttributes","Reflect","Array","isArray","writable","Boolean","hasAttribute","setAttribute","removeAttribute","val","getAttribute","JSON","parse","stringify","Number","parseFloat","CustomElement","elementCtor","name","customElements","define","fragment","nodes","document","createDocumentFragment","tagName","attributes","dataset","children","listeners","element","createElement","entries","attributeValue","toggleAttribute","elementDataset","keys","datasetEntry_i","from","name_i","listener_i","reactiveElementsMap","reactiveElementsFinalizationRegistry","FinalizationRegistry","heldValue","model","reactiveElement","reactiveElementsMapEntry","reactiveElementsArray","reactiveElementsPropertyObserver","reactiveElement_i","elementRef","react","deref","WeakRef","register","observerOptions","concat","property_i","Set","reactiveChildElementsMap","reactiveChildElementsFinalizationRegistry","list","reactiveChildElement","reactiveChildrenElementsMapEntry","reactiveChildElementsArray","reactiveChildElementsObserver","range","listLength","reactiveChildElements_i","parentRef","mapping","placeholder","parent","firstChild","childrenCount","removeChild","insertedItemsArray","before","removedCount","createRange","removeEndIndex","setStartBefore","setEndAfter","deleteContents","childrenArray","index_i","reactiveChildElements","reactiveChildElementsMapEntry","areAttributesMatching","referenceAttributeType","referenceAttributeName","referenceAttributeValue","RegExp","test","HTMLEActionElementBase","HTMLElement","trigger","disabled","checked","Event","bubbles","enable","disable","Key","KeyModifier","MouseButton","HTMLEActionElement","shadowTemplate","HTMLEGridCellElementBase","attachShadow","mode","content","cloneNode","attributeChangedCallback","HTMLEGridCellElement","HTMLEGridRowGroupElementBase","shadowRoot","assignedElements","element_i","posinset","HTMLEGridRowGroupElement","HTMLEMenuItemElementBase","toggle","force","expanded","expand","collapse","menu","style","menuStyle","top","itemTop","bottom","itemBottom","left","itemLeft","right","itemRight","getBoundingClientRect","width","menuWidth","height","menuHeight","scrollY","scrollX","window","clientWidth","clientHeight","body","overflowX","overflowY","closestMenu","closest","closestMenuTop","closestMenuLeft","menuComputedStyle","getComputedStyle","paddingTop","paddingBottom","menuPaddingTop","menuPaddingBottom","part","selector","propertyKey","getter","withinShadowRoot","querySelector","HTMLEMenuItemElement","EMenuItem","assign","label","slot","tabindex","title","button","checkbox","radio","submenu","HTMLEMenuItemGroupElementBase","textContent","toggleTimeouts","HTMLEMenuItemGroupElement","radios","HTMLEMenuElementBase","createTreeWalker","NodeFilter","SHOW_ELEMENT","querySelectorAll","activeIndex","positionContextual","x","y","find","contains","FILTER_ACCEPT","FILTER_SKIP","FILTER_REJECT","walker","currentNode","root","lastChild","previousNode","nextNode","async","delay","Promise","resolve","reject","timeout","setTimeout","clearTimeout","then","contextual","error","radio_i","nearestItem","relatedTarget","activeItem","focus","preventScroll","stopPropagation","composedPath","target_i","HTMLEMenuElement","catch","clientX","clientY","intersectsWithMouse","containsRelatedTarget","HTMLEGridRowElementBase","cells","HTMLEGridCellCollection","slotName","cell_i","HTMLEGridRowElement","HTMLEGridBodyElement","namedItem","HTMLEGridRowCollection","HTMLEGridBodyElementBase","rows","HTMLEGridElementBase","beginSelection","endSelection","clearSelection","selectedCells","selectedRows","hidden","to","toIndex","min","max","position","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","nextVisibleRow","DOCUMENT_POSITION_PRECEDING","previousVisibleRow","selectedCell_i","selected","selectedRow_i","row_i","cell","activeCell","active","tabIndex","closestRow","row","activeRow","cellsWalker","rowsWalker","closestRowCells","cellIndex","previousRow","previousRowCells","nextRow","nextRowCells","selectby","targetCell","preventDefault","targetRow","ctrlKey","shiftKey","lastSelectedCell","lastSelectedRow","firstRow","firstCell","lastRow","lastCell","previousCell","nextCell","topCell","bottomCell","click","HTMLEGridHeadElementBase","HTMLEMenuBarElementBase","previousSibling","nextSibling","Element","isExpanded","HTMLEMenuButtonElementBase","firstItem","HTMLEMenuButtonElement","HTMLEOptionElementBase","labelPart","HTMLEOptionElement","HTMLEOptionGroupElementBase","HTMLEOptionGroupElement","HTMLESelectElementBase","matchingOption","option","selectedIndex","activeOption","descriptionPart","description","selectedOption","valuePart","optionsStyle","selectBottom","selectLeft","previousOption","nextOption","firstOption","lastOption","keyLength","keyCode","charCodeAt","optionsArray","firstMatchIndex","option_i","nextMatchIndex","matchIndex","default","slottedKeyboardListeners","slottedTriggerListeners","HTMLESelectElement","HTMLEToolBarItemElementBase","menubutton","select","selectValue","HTMLEToolBarItemElement","EToolBarItem","HTMLEToolBarItemGroupElementBase","HTMLEToolBarItemGroupElement","HTMLEToolBarElementBase","previousItem","nextItem","lastItem","HTMLEToolBarElement","HTMLETabPanelElementBase","HTMLETabPanelElement","HTMLETabElementBase","connectedCallback","panel","getElementById","controls","CustomEvent","detail","tab","HTMLETabElement","HTMLETabListElementBase","tabs","focusTabAt","activeTab","activateTab","targetIndex","thisTab","thisTabIndex","HTMLETreeItemGroupElementBase","HTMLETreeItemElement","level","closestItem","matches","parentElement","HTMLETreeItemGroupElement","HTMLETreeItemElementBase","HTMLETreeElementBase","getElementsByTagName","selectedItems","nextVisibleItem","previousVisibleItem","selectedItem_i","dropTargetItem","droptarget","blur","relatedTargetRoot","getRootNode","relatedTargetHost","ShadowRoot","host","parentItem","HTMLEListItemElementBase","HTMLSpanElement","HTMLEListItemElement","HTMLEListItemGroupElementBase","HTMLEListItemGroupElement","HTMLEListElementBase","lastSelectedItem","HTMLEDraggableElementBase","draggable","disconnectedCallback","referee","thisRefIndex","getReference","HTMLEDraggableElement","HTMLEDragzoneElementBase","selectDraggable","selectedDraggables","unselectDraggable","draggables","elem","thisSelectedDraggable","dragged","dataTransfer","dropEffect","setData","id","thisDraggedDraggable","firstIndex","direction","sign","startRangeIndex","endRangeIndex","thisDraggable","HTMLEDragzoneElement","HTMLEDropzoneElementBase","droptest","appendAreaPart","removeDraggables","dragovered","dropIndex","dragzoneId","getData","dragzone","selectedDraggable","HTMLEDropzoneElement","addDraggables","placeholderPart","dataTransferSuccess","newDraggables","insertionPosition","multiple","newDraggable","insertAdjacentElement","appendChild","replaceChild","action","once","predicate","toRemove","atPosition","HTMLEDialogElementBase","handleEvent","cancel","confirm","open","close","HTMLEHandleElementBase","pointerId","releasePointerCapture","setPointerCapture","targetComputedStyle","movementX","movementY","rectWidth","rectHeight","outerElement","outerRectLeft","outerRectRight","outerRectTop","outerRectBottom","getPropertyValue","newLeft","trunc","newTop","HTMLEHeightSashElementBase","rootNode","requestAnimationFrame","growdir","newHeight","computedNewHeight","HTMLEImportElementBase","src","outerHTML","fetch","response","ok","text","Error","statusText","barShadowTemplate","circleShadowTemplate","HTMLELoaderElementBase","promise","finally","replaceChildren","commonStyle","barStyle","circleStyle","HTMLEWidthSashElementBase","setWidth","newWidth","slotsMap","slotsObserver","MutationObserver","mutationsList","mutation","slotReferences","slotRef_i","widget","slottedCallback","widgetsMap","attributesObserver","WidgetFactory","create","Proxy","apply","thisArg","argumentsList","observedSlots","slotName_i","slotElement","slot_i","slotReference","attributeFilter","attributeOldValue","widgets","slotted","NodeList","Widget","class","role","menuItemWidget","hasIcon","hasArrow","classList","keyshortcut","add","setKeyShortcut","setChecked","setExpanded","setType","setLabel","setName","setValue","setDisabled","hasChildMenu","childNodes","some","childNode_i","getMenu","getKeyShortcut","keyshortcutsPart","after","getLabel","getType","types","type_i","typesFeatures","iconPartTemplate","arrowPartTemplate","oldType","iconPart","arrowPart","getValue","getName","getChecked","getDisabled","getExpanded","targetItem","menubar","setContextual","setPosition","getContextual","menuitem_i","targetMenu","group","treeItemWidget","setTitle","setDraggable","setSelected","getTitle","setPosInSet","getPosInSet","posInSet","e","setActive","getActive","setDropTarget","getDropTarget","getDraggable","getSelected","setLevel","getLevel","parseInt","treeWidget","tree","multisectable","setMultiSelectable","child_i","getMultiSelectable","targetTree","listItemWidget","targetList","toolbarItemWidget","pressed","setPressed","getPressed","toolbarWidget","toolbar","setOrientation","getOrientation","targetToolbar","targets","pointerMovements","onCaptureFlags","queuedPointerCallbacks","sash","growDir","setControls","setGrowDir","getGrowDir","getControls","sashTarget","pointerMoveCallback","pointerMovement","setHeight","gridCellWidget","headers","setHeaders","getHeaders","gridRowWidget","grid","setSelectBy","getSelectBy","targetGrid","multiselectable","head","scope","header","optionWidget","combobox","targetCombobox","addedNodes","box","targetOption","TreeModel","sortFunction","childItems","flattenItems","item_a","item_b","localeCompare","flatMap","treeItem_i","of","getItemByUri","uri","itemsCount","uriLength","itemUri","itemUriLength","startsWith","charAt","flattenedInsertedItems","insertedItem_i","flattenedRemovedItems","TreeItemList","removedItemsGroups","reduce","TreeItemModel","list_i","children_i","TreeViewFactoryBase","itemContentDelegate","treeElement","dragstart","drop","contextmenu","keydown","focusin","focusout","rootElement","getModel","dragImageElement","span","targetModel","selectedElements","selectedCount","selectedUris","uri_i","_","uris","uri_j","selectedUrisString","join","lastUri","dragImage","setDragImage","targetUri","targetItemModel","transferedUris","split","transferedItems","targetType","targetParentItem","sameLabelIndex","item_j","copyWithin","newElements","itemContextMenuDelegate","contextMenu","targetElement","itemsList","count","MyTreeItemList","show","hide","display","result","console","log","MyTreeItemModel","childCount","visibility","main","myTreeView","badge","visibilityItem","treeModel","aLabel","bLabel","TreeMain"],"sourceRoot":""}