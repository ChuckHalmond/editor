{"version":3,"file":"main.js","mappings":"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","sources":["webpack://main/webpack/bootstrap","webpack://main/webpack/runtime/define property getters","webpack://main/webpack/runtime/hasOwnProperty shorthand","webpack://main/webpack/runtime/make namespace object","webpack://main/./src/views/widgets/Widget.ts","webpack://main/./src/models/Model.ts","webpack://main/./src/elements/Snippets.ts","webpack://main/./src/elements/Element.ts","webpack://main/./src/views/widgets/menu/MenuItemWidget.ts","webpack://main/./src/views/widgets/menu/MenuWidget.ts","webpack://main/./src/views/widgets/toolbar/ToolBarItemWidget.ts","webpack://main/./src/views/widgets/toolbar/ToolBarWidget.ts","webpack://main/./src/views/widgets/tree/TreeItemWidget.ts","webpack://main/./src/views/widgets/tree/TreeWidget.ts","webpack://main/./src/views/TreeView.ts","webpack://main/./src/elements/containers/actions/Action.ts","webpack://main/./src/Input.ts","webpack://main/./src/elements/containers/grid/GridCell.ts","webpack://main/./src/elements/containers/grid/GridRowGroup.ts","webpack://main/./src/elements/containers/menus/MenuItem.ts","webpack://main/./src/elements/containers/menus/MenuItemGroup.ts","webpack://main/./src/elements/containers/menus/Menu.ts","webpack://main/./src/elements/containers/grid/GridRow.ts","webpack://main/./src/elements/containers/grid/GridCellCollection.ts","webpack://main/./src/elements/containers/grid/GridRowCollection.ts","webpack://main/./src/elements/containers/grid/GridBody.ts","webpack://main/./src/elements/containers/grid/Grid.ts","webpack://main/./src/elements/containers/grid/GridHead.ts","webpack://main/./src/elements/containers/menus/MenuBar.ts","webpack://main/./src/elements/containers/menus/MenuButton.ts","webpack://main/./src/elements/controls/forms/Option.ts","webpack://main/./src/elements/controls/forms/OptionGroup.ts","webpack://main/./src/elements/controls/forms/OptionCollection.ts","webpack://main/./src/elements/controls/forms/Select.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItem.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItemGroup.ts","webpack://main/./src/elements/containers/toolbars/ToolBar.ts","webpack://main/./src/elements/containers/tabs/TabPanel.ts","webpack://main/./src/elements/containers/tabs/Tab.ts","webpack://main/./src/elements/containers/tabs/TabList.ts","webpack://main/./src/elements/containers/trees/TreeItemGroup.ts","webpack://main/./src/elements/containers/trees/TreeItem.ts","webpack://main/./src/elements/containers/trees/Tree.ts","webpack://main/./src/elements/containers/lists/ListItem.ts","webpack://main/./src/elements/containers/lists/ListItemGroup.ts","webpack://main/./src/elements/containers/lists/List.ts","webpack://main/./src/elements/controls/draggable/Draggable.ts","webpack://main/./src/elements/controls/draggable/Dragzone.ts","webpack://main/./src/elements/controls/draggable/Dropzone.ts","webpack://main/./src/elements/controls/dialogs/Dialog.ts","webpack://main/./src/elements/utils/Handle.ts","webpack://main/./src/elements/utils/HeightSash.ts","webpack://main/./src/elements/utils/Import.ts","webpack://main/./src/elements/utils/Loader.ts","webpack://main/./src/elements/utils/WidthSash.ts","webpack://main/./src/observers/AttributeMixinsObserver.ts","webpack://main/./src/views/widgets/SeparatorWidget.ts","webpack://main/./src/views/widgets/menu/MenuBarWidget.ts","webpack://main/./src/views/widgets/menu/MenuItemGroupWidget.ts","webpack://main/./src/views/widgets/tree/TreeItemGroupWidget.ts","webpack://main/./src/views/widgets/list/ListItemWidget.ts","webpack://main/./src/views/widgets/list/ListWidget.ts","webpack://main/./src/views/widgets/list/ListItemGroupWidget.ts","webpack://main/./src/views/widgets/toolbar/ToolBarItemGroupWidget.ts","webpack://main/./src/views/widgets/grid/GridCellWidget.ts","webpack://main/./src/views/widgets/grid/GridRowWidget.ts","webpack://main/./src/views/widgets/grid/GridWidget.ts","webpack://main/./src/views/widgets/grid/GridBodyWidget.ts","webpack://main/./src/views/widgets/grid/GridHeadWidget.ts","webpack://main/./src/views/widgets/grid/GridHeaderWidget.ts","webpack://main/./src/views/widgets/combobox/OptionWidget.ts","webpack://main/./src/views/widgets/combobox/ComboBoxWidget.ts","webpack://main/./src/views/widgets/combobox/OptionGroupWidget.ts","webpack://main/./src/views/View.ts","webpack://main/./src/views/ListView.ts","webpack://main/./src/views/GridView.ts","webpack://main/./main.ts","webpack://main/./src/Editor.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export { WidgetFactoryConstructor };\r\n\r\nexport { WidgetFactory };\r\nexport { widgets };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {}\r\n}\r\n\r\ninterface WidgetFactoryConstructor {\r\n    prototype: WidgetFactory;\r\n    new(): WidgetFactory;\r\n}\r\n\r\ninterface WidgetFactory {\r\n    create(properties?: object): HTMLElement;\r\n    slot(root: HTMLElement, name: string | null): HTMLElement | null;\r\n}\r\n\r\nvar slotsMap: WeakMap<HTMLElement, {\r\n    widget: WidgetFactory,\r\n    element: WeakRef<HTMLElement>;\r\n    slot: string | null;\r\n}[]> = new WeakMap();\r\nvar slotsObserver = new MutationObserver(\r\n    (mutationsList: MutationRecord[]) => {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            if (target instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"childList\": {\r\n                        const slotReferences = slotsMap.get(target);\r\n                        if (slotReferences) {\r\n                            slotReferences.forEach(slotRef_i => {\r\n                                const {widget, element, slot} = slotRef_i;\r\n                                const slottedCallback = (widget as any)[\"slottedCallback\"];\r\n                                if (typeof slottedCallback == \"function\") {\r\n                                    slottedCallback(element.deref(), target, slot);\r\n                                }\r\n                            });\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n);\r\n\r\nvar widgetsMap: WeakMap<HTMLElement, WidgetFactory> = new WeakMap();\r\nvar attributesObserver = new MutationObserver(\r\n    (mutationsList: MutationRecord[]) => {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            if (target instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"attributes\": {\r\n                        const {attributeName, oldValue} = mutation;\r\n                        const widget = widgetsMap.get(target);\r\n                        if (widget) {\r\n                            const attributeChangedCallback = (widget as any)[\"attributeChangedCallback\"];\r\n                            if (typeof attributeChangedCallback == \"function\") {\r\n                                attributeChangedCallback(target, attributeName, oldValue, target.getAttribute(attributeName!));\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n);\r\n\r\nclass WidgetFactoryBase implements WidgetFactory {\r\n\r\n    constructor() {\r\n        const widget = <WidgetFactory>this;\r\n        this.create = new Proxy(\r\n            this.create, {\r\n                apply: (target, thisArg, argumentsList: Parameters<WidgetFactory[\"create\"]>) => {\r\n                    const element = <HTMLElement>Reflect.apply(target, thisArg, argumentsList);\r\n                    const observedSlots = <(string | null)[]>(widget as any)[\"observedSlots\"];\r\n                    if (Array.isArray(observedSlots)) {\r\n                        const slots = observedSlots\r\n                            .map(slotName_i => {\r\n                                return {\r\n                                    slotName: slotName_i,\r\n                                    slotElement: widget.slot(element, slotName_i)\r\n                                };\r\n                            });\r\n                        slots.forEach(slot_i => {\r\n                            const {slotElement, slotName} = slot_i;\r\n                            if (slotElement) {\r\n                                slotsObserver.observe(slotElement, {\r\n                                    childList: true\r\n                                });\r\n                                const slotReferences = slotsMap.get(slotElement);\r\n                                const slotReference = {widget, element: new WeakRef(element), slot: slotName};\r\n                                if (Array.isArray(slotReferences)) {\r\n                                    slotReferences.push(slotReference);\r\n                                }\r\n                                else {\r\n                                    slotsMap.set(slotElement, new Array(slotReference));\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                    const observedAttributes = (widget as any)[\"observedAttributes\"];\r\n                    if (Array.isArray(observedAttributes)) {\r\n                        widgetsMap.set(element, widget);\r\n                        attributesObserver.observe(element, {\r\n                            attributes: true,\r\n                            attributeFilter: observedAttributes,\r\n                            attributeOldValue: true\r\n                        });\r\n                    }\r\n                    return element;\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    create(): HTMLElement {\r\n        throw new Error(`create method is not implemented`);\r\n    }\r\n\r\n    slot(): HTMLElement | null {\r\n        return null;\r\n    }\r\n\r\n    get observedSlots(): string[] {\r\n        return [\"\"];\r\n    }\r\n}\r\n\r\nvar WidgetFactory: WidgetFactoryConstructor = WidgetFactoryBase;\r\nvar widgets: Map<string, WidgetFactory> = new Map();","export { ModelChangeRecord };\r\nexport { ModelEvent };\r\nexport { ModelNode };\r\nexport { ModelObject };\r\nexport { ModelProperty };\r\nexport { ModelList };\r\nexport { ModelChangeObserverOptions };\r\nexport { ModelChangeObserver };\r\n\r\ninterface ModelChangeRecordConstructor {\r\n    prototype: ModelChangeRecord;\r\n    new(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ): ModelChangeRecord;\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\ninterface ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly changeType: number;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\nclass ModelChangeRecordBase implements ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList;\r\n    readonly changeType: number;\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n\r\n    constructor(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ) {\r\n        this.target = init.target;\r\n        this.changeType = init.changeType;\r\n        this.propertyName = init.propertyName ?? null;\r\n        this.oldValue = init.oldValue ?? undefined;\r\n        this.newValue = init.newValue ?? undefined;\r\n        this.removedIndex = init.removedIndex ?? 0;\r\n        this.removedItems = new ModelNodesList(init.removedItems ?? []);\r\n        this.insertedIndex = init.insertedIndex ?? 0;\r\n        this.insertedItems = new ModelNodesList(init.insertedItems ?? []);\r\n        this.sortedIndices = init.sortedIndices ?? [];\r\n    }\r\n\r\n    static get PROPERTY_CHANGE(): number {\r\n        return 1;\r\n    }\r\n\r\n    static get LIST_REMOVE(): number {\r\n        return 2;\r\n    }\r\n\r\n    static get LIST_INSERT(): number {\r\n        return 3;\r\n    }\r\n\r\n    static get LIST_SORT(): number {\r\n        return 4;\r\n    }\r\n\r\n    get PROPERTY_CHANGE(): number {\r\n        return ModelChangeRecordBase.PROPERTY_CHANGE;\r\n    }\r\n\r\n    get LIST_REMOVE(): number {\r\n        return ModelChangeRecordBase.LIST_REMOVE;\r\n    }\r\n\r\n    get LIST_INSERT(): number {\r\n        return ModelChangeRecordBase.LIST_INSERT;\r\n    }\r\n\r\n    get LIST_SORT(): number {\r\n        return ModelChangeRecordBase.LIST_SORT;\r\n    }\r\n}\r\n\r\nvar ModelChangeRecord: ModelChangeRecordConstructor = ModelChangeRecordBase;\r\n\r\ninterface ModelNodesListConstructor {\r\n    prototype: ModelNodesList;\r\n    new(items: any[]): ModelNodesList;\r\n}\r\n\r\ninterface ModelNodesList {\r\n    get length(): number;\r\n    item(index: number): ModelNode | null;\r\n    values(): IterableIterator<ModelNode>;\r\n}\r\n\r\nclass ModelNodesListBase implements ModelNodesList {\r\n    #items: ModelNode[];\r\n\r\n    constructor(items: ModelNode[]) {\r\n        this.#items = items.slice();\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    item(index: number): ModelNode | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    values(): IterableIterator<ModelNode> {\r\n        return this.#items.values();\r\n    }\r\n}\r\n\r\nvar ModelNodesList: ModelNodesListConstructor = ModelNodesListBase;\r\n\r\ninterface ModelEventConstructor {\r\n    prototype: ModelEvent;\r\n    new(type: string): ModelEvent;\r\n}\r\n\r\ninterface ModelEvent {\r\n    readonly type: string;\r\n    readonly currentTarget: ModelEventTarget | null;\r\n    readonly target: ModelEventTarget | null;\r\n}\r\n\r\nclass ModelEventBase implements ModelEvent {\r\n    readonly type: string;\r\n\r\n    #currentTarget: ModelEventTarget | null;\r\n    #target: ModelEventTarget | null;\r\n\r\n    constructor(type: string) {\r\n        this.type = type;\r\n        this.#currentTarget = null;\r\n        this.#target = null;\r\n    }\r\n\r\n    get currentTarget(): ModelEventTarget | null {\r\n        return this.#currentTarget;\r\n    }\r\n\r\n    get target(): ModelEventTarget | null {\r\n        return this.#target;\r\n    }\r\n\r\n    static ModelEventTargetAccessor? = new class ModelEventTargetAccessor {\r\n        setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#currentTarget = currentTarget;\r\n            }\r\n        }\r\n\r\n        setTarget(event: ModelEvent, target: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#target = target;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface ModelEventTargetAccessor {\r\n    setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void;\r\n    setTarget(event: ModelEvent, target: ModelEventTarget): void;\r\n}\r\n\r\nvar ModelEventTargetAccessor: ModelEventTargetAccessor = ModelEventBase.ModelEventTargetAccessor!;\r\ndelete ModelEventBase.ModelEventTargetAccessor;\r\n\r\nvar ModelEvent: ModelEventConstructor = ModelEventBase;\r\n\r\ninterface ModelEventTargetConstructor {\r\n    prototype: ModelEventTarget;\r\n    new(): ModelEventTarget;\r\n}\r\n\r\ninterface ModelEventTarget {\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    dispatchEvent(event: ModelEvent): void;\r\n    receiveEvent(event: ModelEvent): void;\r\n}\r\n\r\nclass ModelEventTargetBase implements ModelEventTarget {\r\n    #callbacks: Map<string, ((event: ModelEvent) => void)[]>;\r\n\r\n    constructor() {\r\n        this.#callbacks = new Map();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        const {type} = event;\r\n        const callbacks = this.#callbacks.get(type);\r\n        ModelEventTargetAccessor.setCurrentTarget(event, this);\r\n        if (callbacks) {\r\n            callbacks.forEach((callback_i) => {\r\n                callback_i(event);\r\n            });\r\n        }\r\n    }\r\n\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            callbacks.push(callback);\r\n        }\r\n        else {\r\n            this.#callbacks.set(type, [callback]);\r\n        }\r\n    }\r\n\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            const callbackIndex = callbacks.findIndex(\r\n                callback_i => callback_i == callback\r\n            );\r\n            if (callbackIndex > -1) {\r\n                callbacks.splice(callbackIndex, 1);\r\n            }\r\n            if (callbacks.length == 0) {\r\n                this.#callbacks.delete(type);\r\n            }\r\n        }\r\n    }\r\n\r\n    dispatchEvent(event: ModelEvent): void {\r\n        ModelEventTargetAccessor.setTarget(event, this);\r\n        this.receiveEvent(event);\r\n    }\r\n}\r\n\r\nvar ModelEventTarget: ModelEventTargetConstructor = ModelEventTargetBase;\r\n\r\ninterface ModelNodeConstructor {\r\n    prototype: ModelNode;\r\n    new(): ModelNode;\r\n}\r\n\r\ninterface ModelNode extends ModelEventTarget {\r\n    readonly parentNode: ModelNode | null;\r\n    setParent(parentNode: ModelNode | null): void;\r\n    getRecords(): ModelChangeRecord[];\r\n    beginChanges(): void;\r\n    endChanges(): void;\r\n}\r\n\r\ninterface ModelNodeRecordsAccessor {\r\n    triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void;\r\n    handleRecord(node: ModelNode, record: ModelChangeRecord): void;\r\n}\r\n\r\nclass ModelNodeBase extends ModelEventTargetBase implements ModelNode {\r\n    #parentNode: ModelNode | null;\r\n    #records: ModelChangeRecord[];\r\n    #isRecording: boolean;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#parentNode = null;\r\n        this.#records = [];\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    get parentNode(): ModelNode | null {\r\n        return this.#parentNode;\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        if (parentNode !== null) {\r\n            let isCyclicReference = parentNode == this;\r\n            let {parentNode: ancestorNode} = parentNode;\r\n            while (!isCyclicReference && ancestorNode !== null) {\r\n                ({parentNode: ancestorNode} = ancestorNode);\r\n                isCyclicReference = ancestorNode == this;\r\n            }\r\n            if (!isCyclicReference) {\r\n                this.#parentNode = parentNode;\r\n            }\r\n            else {\r\n                throw new TypeError(\"Failed to set parent on ModelNode: circular reference detected in the hierarchy.\");\r\n            }\r\n        }\r\n        else {\r\n            this.#parentNode = null;\r\n        }\r\n    }\r\n    \r\n    beginChanges(): void {\r\n        this.#isRecording = true;\r\n    }\r\n\r\n    endChanges(): void {\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        this.#records.splice(0);\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    getRecords(): ModelChangeRecord[] {\r\n        return this.#records.slice();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        super.receiveEvent(event);\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            parentNode.receiveEvent(event);\r\n        }\r\n    }\r\n\r\n    #triggerChange(property: string, oldValue: any, newValue: any): void {\r\n        const records = this.#records;\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.PROPERTY_CHANGE,\r\n            propertyName: property,\r\n            oldValue, newValue\r\n        });\r\n        records.push(record);\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        records.splice(0);\r\n    }\r\n\r\n    #handleRecord(record: ModelChangeRecord): void {\r\n        this.#records.push(record);\r\n        if (!this.#isRecording) {\r\n            this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n            this.#records.splice(0);\r\n        }\r\n    }\r\n\r\n    static ModelNodeRecordsAccessor? = new class ModelNodeRecordsAccessor {\r\n        triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#triggerChange(property, oldValue, newValue);\r\n            }\r\n        }\r\n\r\n        handleRecord(node: ModelNode, record: ModelChangeRecord): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#handleRecord(record);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelNodeRecordsAccessor: ModelNodeRecordsAccessor = ModelNodeBase.ModelNodeRecordsAccessor!;\r\ndelete ModelNodeBase.ModelNodeRecordsAccessor;\r\n\r\nvar ModelNode: ModelNodeConstructor = ModelNodeBase;\r\n\r\ninterface ModelPropertyDecorator {\r\n    (\r\n        init?: {\r\n            type: typeof String | typeof Number | typeof Boolean | typeof Date | typeof Object\r\n        }\r\n    ): <Model extends ModelObject>(target: Model, property: string) => void;\r\n}\r\n\r\nconst ModelProperty: ModelPropertyDecorator = function(\r\n    init?: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Date | typeof Object\r\n    }\r\n) {\r\n    return (\r\n        target: ModelObject, property: string\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        /*const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n        if (Array.isArray(observedAttributes)) {\r\n            observedAttributes.push(property);\r\n        }\r\n        else {\r\n            Object.defineProperty(\r\n                constructor, \"observedAttributes\", {\r\n                    value: [property],\r\n                    writable: false\r\n                }\r\n            );\r\n        }*/\r\n        const setter = function(this: ModelObject, value: any) {\r\n            const oldValue = ModelObjectPropertiesAccessor.getProperty(this, property);\r\n            ModelObjectPropertiesAccessor.setProperty(this, property, value);\r\n            if (value !== oldValue) {\r\n                ModelNodeRecordsAccessor.triggerChange(this, property, oldValue, value);\r\n            }\r\n            return true;\r\n        };\r\n        const getter = function(this: ModelObject) {\r\n            return ModelObjectPropertiesAccessor.getProperty(this, property);\r\n        };\r\n        Object.defineProperty(prototype, property, {\r\n            set: setter,\r\n            get: getter,\r\n            enumerable: true\r\n        });\r\n    }\r\n}\r\n\r\ninterface ModelObjectConstructor {\r\n    prototype: ModelObject;\r\n    new(): ModelObject;\r\n}\r\n\r\ninterface ModelObject extends ModelNode {}\r\n\r\ninterface ModelObjectPropertiesAccessor {\r\n    setProperty(node: ModelNode, property: string, value: any): void;\r\n    getProperty(node: ModelNode, property: string,): any;\r\n}\r\n\r\nclass ModelObjectBase extends ModelNodeBase implements ModelObject {\r\n    #properties: Map<string, any>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#properties = new Map();\r\n    }\r\n\r\n    static ModelObjectPropertiesAccessor? = new class ModelPropertiesAccessor {\r\n        setProperty(node: ModelObject, property: string, value: any): void {\r\n            if (node instanceof ModelObjectBase) {\r\n                node.#properties.set(property, value);\r\n            }\r\n        }\r\n\r\n        getProperty(node: ModelObject, property: string): any {\r\n            if (node instanceof ModelObjectBase) {\r\n                return node.#properties.get(property);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelObjectPropertiesAccessor: ModelObjectPropertiesAccessor = ModelObjectBase.ModelObjectPropertiesAccessor!;\r\ndelete ModelObjectBase.ModelObjectPropertiesAccessor;\r\n\r\nvar ModelObject: ModelObjectConstructor = ModelObjectBase;\r\n\r\ninterface ModelListConstructor {\r\n    prototype: ModelList;\r\n    new<Model extends ModelNode>(): ModelList<Model>;\r\n    new<Model extends ModelNode>(items: Model[]): ModelList<Model>;\r\n}\r\n\r\ninterface ModelList<Model extends ModelNode = ModelNode> extends ModelNode {\r\n    readonly parentNode: ModelNode | null;\r\n    readonly length: number;\r\n    index(items: Model): number;\r\n    index(items: Model, fromIndex: number): number;\r\n    get(index: number): Model | null;\r\n    values(): IterableIterator<Model>;\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void;\r\n    insert(index: number, ...items: Model[]): void;\r\n    prepend(...items: Model[]): void;\r\n    append(...items: Model[]): void;\r\n    remove(item: Model): void;\r\n    clear(): void;\r\n}\r\n\r\nclass ModelListBase<Model extends ModelNode = ModelNode> extends ModelNodeBase implements ModelList<Model> {\r\n    #items: Model[];\r\n\r\n    constructor()\r\n    constructor(items: Model[])\r\n    constructor(items?: Model[]) {\r\n        super();\r\n        this.#items = items?.slice() ?? [];\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        super.setParent(parentNode);\r\n        this.#items.forEach((item_i) => {\r\n            item_i.setParent(parentNode);\r\n        });\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    get(index: number): Model | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    index(item: Model, fromIndex?: number): number {\r\n        return this.#items.indexOf(item, fromIndex)\r\n    }\r\n\r\n    values(): IterableIterator<Model> {\r\n        return this.#items.values();\r\n    }\r\n\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void {\r\n        const items = this.#items;\r\n        const indexedItems = items.map(\r\n            (item_i, i) => {\r\n                return {\r\n                    item: item_i,\r\n                    index: i\r\n                };\r\n            }\r\n        );\r\n        indexedItems.sort(\r\n            (indexedItem_a, indexedItem_b) => {\r\n                return compareFunction(\r\n                    indexedItem_a.item, indexedItem_b.item\r\n                )\r\n            }\r\n        );\r\n        this.#items = indexedItems.map(indexedItem_i => indexedItem_i.item);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_SORT,\r\n            sortedIndices: indexedItems.map(indexedItem_i => indexedItem_i.index)\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    prepend(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.splice(0, 0, ...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: 0,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    append(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.push(...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: length,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    insert(index: number, ...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const positiveIndex = Math.abs(index);\r\n        if (positiveIndex <= length) {\r\n            if (index >= 0) {\r\n                const {parentNode} = this;\r\n                items.forEach(item_i => {\r\n                    item_i.setParent(parentNode);\r\n                });\r\n                if (index < length) {\r\n                    _items.splice(index, 0, ...items);\r\n                }\r\n                else {\r\n                    _items.push(...items);\r\n                }\r\n            }\r\n            else if (index < 0) {\r\n                index = length - index;\r\n                const {parentNode} = this;\r\n                if (parentNode) {\r\n                    items.forEach(item_i => {\r\n                        item_i.setParent(parentNode);\r\n                    });\r\n                }\r\n                _items.splice(index, 0, ...items);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_INSERT,\r\n                insertedIndex: index,\r\n                insertedItems: items.slice()\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    remove(item: Model): void {\r\n        const _items = this.#items;\r\n        const index = _items.indexOf(item);\r\n        if (index > -1) {\r\n            const item = _items.splice(index, 1)[0];\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                item.setParent(null);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: index,\r\n                removedItems: [item]\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    clear(): void {\r\n        const items = this.#items;\r\n        const {length} = items;\r\n        if (length > 0) {\r\n            const removedItems = items.splice(0);\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                removedItems.forEach((removedItem_i) => {\r\n                    removedItem_i.setParent(null);\r\n                });\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: 0,\r\n                removedItems: removedItems\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n};\r\n\r\nvar ModelList: ModelListConstructor = ModelListBase!;\r\n\r\ninterface ModelChangeObserverConstructor {\r\n    prototype: ModelChangeObserver;\r\n    new(callback: (records: ModelChangeRecord[]) => void): ModelChangeObserver;\r\n}\r\n\r\ninterface ModelChangeObserver {\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void;\r\n    unobserve(node: ModelNode): void;\r\n    disconnect(): void;\r\n}\r\n\r\ntype ModelChangeObserverOptions = {\r\n    properties?: boolean;\r\n    propertiesFilter?: string[];\r\n    childList?: boolean;\r\n    subtree?: boolean;\r\n}\r\n\r\nclass ModelChangeObserverBase implements ModelChangeObserver {\r\n    #callback: (records: ModelChangeRecord[]) => void;\r\n    #records: ModelChangeRecord[];\r\n    #disconnected: boolean;\r\n\r\n    #references: WeakMap<ModelNode, {\r\n        listener: (event: ModelEvent) => void,\r\n        options: ModelChangeObserverOptions\r\n    }>;\r\n\r\n    constructor(callback: (records: ModelChangeRecord[]) => void) {\r\n        this.#callback = callback;\r\n        this.#records = [];\r\n        this.#disconnected = false;\r\n        this.#references = new WeakMap();\r\n    }\r\n\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void {\r\n        this.#disconnected = false;\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (!reference) {\r\n            const listener = this.#handleModelEvent.bind(this);\r\n            node.addEventListener(\"modelchange\", listener);\r\n            reference = {listener, options};\r\n            references.set(node, reference);\r\n        }\r\n        else {\r\n            references.set(node, reference);\r\n        }\r\n    }\r\n\r\n    unobserve(node: ModelNode): void {\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (reference) {\r\n            const {listener} = reference;\r\n            node.removeEventListener(\"modelchange\", listener);\r\n        }\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#records.splice(0);\r\n        this.#disconnected = true;\r\n    }\r\n\r\n    #trigger(): void {\r\n        const records = this.#records.splice(0);\r\n        if (records.length > 0) {\r\n            this.#callback(records);\r\n        }\r\n    }\r\n\r\n    #handleModelEvent(event: ModelEvent): void {\r\n        if (!this.#disconnected) {\r\n            const {target, currentTarget} = event;\r\n            const reference = this.#references.get(<ModelNode>currentTarget);\r\n            if (reference) {\r\n                const {options} = reference;\r\n                const {properties, propertiesFilter, childList, subtree} = options;\r\n                if (subtree) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n                else if (target == currentTarget) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelChangeObserver: ModelChangeObserverConstructor = ModelChangeObserverBase;","export { getPropertyFromPath };\r\nexport { setPropertyFromPath };\r\nexport { snakeToCamel };\r\nexport { camelToSnake };\r\nexport { trainToCamel };\r\nexport { camelToTrain };\r\n\r\nfunction getPropertyFromPath(src: object, path: string): any {\r\n  const props = path.split(\".\");\r\n  let obj: {[key: string]: any} | undefined  = src;\r\n  props.forEach((prop) => {\r\n    if (prop.includes(\"[\")) {\r\n      const index = parseInt(prop.substring(prop.indexOf(\"[\") + 1, prop.indexOf(\"]\")));\r\n      if (Number.isNaN(index)) {\r\n        console.error(`Wrong indexed path: ${prop}`);\r\n      }\r\n      prop = prop.substring(0, prop.indexOf(\"[\"));\r\n      if (typeof obj == \"object\" && prop in obj && Array.isArray(obj[prop])) {\r\n        obj = obj[prop][index];\r\n      }\r\n    }\r\n    else if (typeof obj == \"object\" && prop in obj) {\r\n      obj = obj[prop];\r\n    }\r\n    else {\r\n      obj = undefined;\r\n    }\r\n  });\r\n  return obj;\r\n}\r\n\r\nfunction setPropertyFromPath(src: object, path: string, value: any): object {\r\n  const props = path.split(\".\");\r\n  let obj: {[key: string]: any} = src;\r\n  if (src == null) {\r\n    console.error(\"Source data can't be null\");\r\n  }\r\n  props.forEach((prop, idx) => {\r\n    if (prop.includes(\"[\")) {\r\n      const index = parseInt(prop.substring(prop.indexOf(\"[\") + 1, prop.indexOf(\"]\")));\r\n      if (Number.isNaN(index)) {\r\n        console.error(`Wrong indexed path: ${prop}`);\r\n      }\r\n      prop = prop.substring(0, prop.indexOf(\"[\"));\r\n      if (!Array.isArray(obj[prop])) {\r\n        obj[prop] = [];\r\n      }\r\n      if (idx == props.length - 1) {\r\n        obj[prop][index] = value;\r\n      }\r\n      else {\r\n        if (typeof obj[prop][index] !== \"object\") {\r\n          obj[prop][index] = {}\r\n        }\r\n        obj = obj[prop][index];\r\n      }\r\n    }\r\n    else {\r\n      if (idx == props.length - 1) {\r\n        obj[prop] = value;\r\n      }\r\n      else {\r\n        if (typeof obj[prop] !== \"object\") {\r\n          obj[prop] = {}\r\n        }\r\n        obj = obj[prop];\r\n      }\r\n    }\r\n  });\r\n  return src;\r\n}\r\n\r\nfunction snakeToCamel(str: string) {\r\n  return str.split('_').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToSnake(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '_').toLowerCase();\r\n}\r\n\r\nfunction trainToCamel(str: string) {\r\n  return str.split('-').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToTrain(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '-').toLowerCase();\r\n}","import { widgets, WidgetFactoryConstructor } from \"../views/widgets/Widget\";\r\nimport { ModelList, ModelNode, ModelChangeRecord, ModelChangeObserver, ModelChangeObserverOptions } from \"../models/Model\";\r\nimport { camelToTrain } from \"./Snippets\";\r\n\r\nexport { subtreeNodes };\r\nexport { ancestorNodes };\r\nexport { CustomElement };\r\nexport { Widget };\r\nexport { widget };\r\nexport { QueryProperty };\r\nexport { QueryAllProperty };\r\nexport { AttributeProperty };\r\nexport { reactiveElement };\r\nexport { reactiveChildElements };\r\nexport { element };\r\nexport { fragment };\r\nexport { textNode };\r\nexport { AttributeMutationMixin };\r\nexport { AttributeType };\r\nexport { areAttributesMatching };\r\nexport { AttributeMutationMixinBase };\r\nexport { trimMultilineIndent };\r\nexport { Stylesheet };\r\n\r\ninterface AttributePropertyDecorator {\r\n    (\r\n        init: {\r\n            type: typeof String;\r\n            observed?: boolean;\r\n            defaultValue?: string | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Number;\r\n            observed?: boolean;\r\n            defaultValue?: number | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Boolean;\r\n            observed?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Object;\r\n            observed?: boolean;\r\n            defaultValue?: any | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n}\r\n\r\nconst AttributeProperty: AttributePropertyDecorator = function(\r\n    init: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Object;\r\n        observed?: boolean;\r\n        defaultValue?: string | number | any | null;\r\n    }\r\n) {\r\n    return <E extends HTMLElement>(\r\n        target: E, property: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(property);\r\n        const attributeName = camelToTrain(propertyName);\r\n        const defaultValue = init.defaultValue ?? null;\r\n        const observed = init.observed ?? false;\r\n        if (observed) {\r\n            const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n            if (Array.isArray(observedAttributes)) {\r\n                observedAttributes.push(attributeName);\r\n            }\r\n            else {\r\n                Object.defineProperty(\r\n                    constructor, \"observedAttributes\", {\r\n                        value: [attributeName],\r\n                        writable: false\r\n                    }\r\n                );\r\n            }\r\n        }\r\n        const {type} = init;\r\n        switch (type) {\r\n            case Boolean: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        return this.hasAttribute(attributeName);\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value) {\r\n                            this.setAttribute(attributeName, \"\");\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Object: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? JSON.parse(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, JSON.stringify(value));\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Number: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? parseFloat(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case String:\r\n            default: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? val : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n    \r\nfunction Stylesheet(text: string): CSSStyleSheet {\r\n    const stylesheet = new CSSStyleSheet();\r\n    (stylesheet as any).replaceSync(text);\r\n    return stylesheet;\r\n}\r\n\r\nfunction trimMultilineIndent(text: string): string {\r\n    const newlineIndex = text.indexOf(\"\\n\");\r\n    text = text.substring(newlineIndex + 1);\r\n    const indentMatch = text.match(/^[\\s]*/);\r\n    if (indentMatch) {\r\n        const indent = text.substring(0, indentMatch[0].length);\r\n        text = text.replaceAll(indent, \"\").trimEnd();\r\n    }\r\n    return text;\r\n}\r\n\r\ninterface CustomElementDecorator {\r\n    (init: {\r\n        name: string;\r\n        options?: ElementDefinitionOptions\r\n    }): <C extends CustomElementConstructor>(elementCtor: C) => C;\r\n}\r\n\r\nconst CustomElement: CustomElementDecorator = function(init: {\r\n    name: string;\r\n    options?: ElementDefinitionOptions\r\n}) {\r\n    return <C extends CustomElementConstructor>(\r\n        elementCtor: C\r\n    ) => {\r\n        const {name, options} = init;\r\n        if (!customElements.get(name)) {\r\n            customElements.define(\r\n                name,\r\n                elementCtor,\r\n                options\r\n            );\r\n        }\r\n        return elementCtor;\r\n    }\r\n}\r\n\r\ninterface WidgetDecorator {\r\n    (init: {\r\n        name: string;\r\n    }): <W extends WidgetFactoryConstructor>(widget: W) => W;\r\n}\r\n\r\nconst Widget: WidgetDecorator = function(init: {\r\n    name: string;\r\n}) {\r\n    return <W extends WidgetFactoryConstructor>(\r\n        widget: W\r\n    ) => {\r\n        const {name} = init;\r\n        widgets.set(\r\n            name,\r\n            new widget()\r\n        );\r\n        return widget;\r\n    }\r\n}\r\n\r\nfunction *subtreeNodes(node: Node): Generator<Node> {\r\n    yield node;\r\n    const childNodes = node.childNodes;\r\n    const childNodesCount = childNodes.length;\r\n    let childIndex = 0;\r\n    while (childIndex < childNodesCount) {\r\n        const child = childNodes.item(childIndex);\r\n        if (child !== null) {\r\n            yield * subtreeNodes(child);\r\n        }\r\n        childIndex++;\r\n    }\r\n}\r\n\r\nfunction *ancestorNodes(node: Node): Generator<Node> {\r\n    const {parentNode} = node;\r\n    if (parentNode) {\r\n        yield parentNode;\r\n        yield *ancestorNodes(parentNode);\r\n    }\r\n}\r\n\r\ninterface QueryPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryProperty: QueryPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(propertyKey);\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return this.shadowRoot!.querySelector(selector);\r\n        } : function(this: HTMLElement) {\r\n            return this.querySelector(selector);\r\n        }\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\ninterface QueryAllPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryAllProperty: QueryAllPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(propertyKey);\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return Array.from(this.shadowRoot!.querySelectorAll(selector));\r\n        } : function(this: HTMLElement) {\r\n            return Array.from(this.querySelectorAll(selector));\r\n        };\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\nfunction fragment(...nodes: (Node | string)[]): DocumentFragment {\r\n    const fragment = document.createDocumentFragment();\r\n    fragment.append(...nodes);\r\n    return fragment;\r\n}\r\n\r\nfunction textNode(text: string): Node {\r\n    return document.createTextNode(text);\r\n}\r\n\r\ninterface HTMLElementInit {\r\n    options?: ElementCreationOptions,\r\n    attributes?: {\r\n        [name: string]: number | string | boolean | undefined\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    children?: Node | string | (Node | string)[] | NodeList | ReactiveChildElements,\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction element<E extends HTMLElementTagNameMap[K], K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): E;\r\nfunction element(\r\n    tagName: string, init?: HTMLElementInit): HTMLElement;\r\nfunction element<K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): HTMLElementTagNameMap[K] {\r\n    if (init) {\r\n        const {options, attributes, dataset, children, listeners} = init;\r\n        const element = document.createElement(tagName, options);\r\n        if (attributes) {\r\n            Object.entries(attributes).forEach(([attributeName, attributeValue]) => {\r\n                if (attributeValue !== undefined) {\r\n                    if (typeof attributeValue === \"boolean\") {\r\n                        element.toggleAttribute(camelToTrain(attributeName), attributeValue);\r\n                    }\r\n                    else {\r\n                        element.setAttribute(camelToTrain(attributeName), String(attributeValue));\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        if (dataset) {\r\n            const {dataset: elementDataset} = element;\r\n            Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                elementDataset[datasetEntry_i] = String(dataset[datasetEntry_i]);\r\n            });\r\n        }\r\n        if (children) {\r\n            if (typeof children === \"function\") {\r\n                element.append(...children(element));\r\n            }\r\n            else if (typeof children === \"object\" && \"length\" in children) {\r\n                element.append(...Array.from(children));\r\n            }\r\n            else {\r\n                element.append(children);\r\n            }\r\n        }\r\n        if (listeners) {\r\n            Object.entries(listeners).forEach(([name_i, listener_i]) => {\r\n                if (Array.isArray(listener_i)) {\r\n                    element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                }\r\n                else {\r\n                    element.addEventListener(name_i, listener_i);\r\n                }\r\n            });\r\n        }\r\n        return element;\r\n    }\r\n    return document.createElement(tagName);\r\n}\r\n\r\ninterface WidgetInit<K extends keyof WidgetNameMap> {\r\n    properties?: Parameters<WidgetNameMap[K][\"create\"]>[0],\r\n    attributes?: {\r\n        [name: string]: number | string | boolean\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    slotted?: {\r\n        [slot: string]: Node | string | (Node | string)[] | NodeList | ReactiveChildElements\r\n    } | (Node | string | (Node | string)[] | NodeList | ReactiveChildElements),\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: K, init?: WidgetInit<K>): ReturnType<WidgetNameMap[K][\"create\"]>;\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: K, init?: WidgetInit<K>): HTMLElement {\r\n    const widget = widgets.get(name);\r\n    if (widget) {\r\n        if (init !== undefined) {\r\n            const {properties, attributes, dataset, slotted, listeners} = init;\r\n            const element = widget.create(properties);\r\n            if (attributes) {\r\n                Object.entries(attributes).forEach(([attributeName, attributeValue]) => {\r\n                    if (attributeValue !== undefined) {\r\n                        if (typeof attributeValue === \"boolean\") {\r\n                            element.toggleAttribute(camelToTrain(attributeName), attributeValue);\r\n                        }\r\n                        else {\r\n                            element.setAttribute(camelToTrain(attributeName), String(attributeValue));\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            if (dataset) {\r\n                const {dataset: elementDataset} = element;\r\n                Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                    elementDataset[datasetEntry_i] = String(dataset[datasetEntry_i]);\r\n                });\r\n            }\r\n            if (slotted) {\r\n                if (typeof slotted === \"function\" || Array.isArray(slotted) || slotted instanceof NodeList || typeof slotted === \"string\" || slotted instanceof Node) {\r\n                    const slot = widget.slot(element, null);\r\n                    if (slot) {\r\n                        if (typeof slotted === \"function\") {\r\n                            slot.append(...slotted(slot));\r\n                        }\r\n                        else if (typeof slotted === \"object\" && \"length\" in slotted) {\r\n                            slot.append(...Array.from(slotted));\r\n                        }\r\n                        else {\r\n                            slot.append(slotted);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    Object.entries(slotted).forEach(([slot_i, slotted]) => {\r\n                        const slot = widget.slot(element, slot_i);\r\n                        if (slot) {\r\n                            if (typeof slotted === \"function\") {\r\n                                slot.append(...slotted(slot));\r\n                            }\r\n                            else if (typeof slotted === \"object\" && \"length\" in slotted) {\r\n                                slot.append(...Array.from(slotted));\r\n                            }\r\n                            else {\r\n                                slot.append(slotted);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            if (listeners) {\r\n                Object.entries(listeners).forEach(([name_i, listener_i]) => {\r\n                    if (Array.isArray(listener_i)) {\r\n                        element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                    }\r\n                    else {\r\n                        element.addEventListener(name_i, listener_i);\r\n                    }\r\n                });\r\n            }\r\n            return element;\r\n        }\r\n        else {\r\n            return widget.create();\r\n        }\r\n    }\r\n    throw new Error(`Unknown widget ${name}.`);\r\n}\r\n\r\nconst reactiveElementsMap = new WeakMap<ModelNode, {\r\n    observerOptions: ModelChangeObserverOptions,\r\n    reactiveElementsArray: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }[]\r\n}>();\r\n\r\nconst reactiveElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    model: ModelNode,\r\n    reactiveElement: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }\r\n}) => {\r\n    const {model, reactiveElement} = heldValue;\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    if (reactiveElementsMapEntry !== undefined) {\r\n        const {reactiveElementsArray} = reactiveElementsMapEntry;\r\n        reactiveElementsArray.splice(reactiveElementsArray.indexOf(reactiveElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveElementsPropertyObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    records.forEach((record_i) => {\r\n        const {target, propertyName, oldValue, newValue} = record_i;\r\n        const {reactiveElementsArray} = reactiveElementsMap.get(target)!;\r\n        reactiveElementsArray.forEach(reactiveElement_i => {\r\n            const {elementRef, react, properties} = reactiveElement_i;\r\n            const element = elementRef.deref();\r\n            if (element) {\r\n                if (properties.includes(propertyName!)) {\r\n                    react(element, propertyName!, oldValue, newValue);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveElement<M extends ModelNode, E extends Element, K extends string>(\r\n    model: M,\r\n    element: E,\r\n    properties: K[],\r\n    react: (object: E, property: K, oldValue: any, newValue: any) => void\r\n): E;\r\nfunction reactiveElement<M extends ModelNode, E extends Element>(\r\n    model: M,\r\n    element: E,\r\n    properties: string[],\r\n    react: (element: E, property: string, oldValue: any, newValue: any) => void\r\n): E {\r\n    const elementRef = new WeakRef(element);\r\n    const reactiveElement = {elementRef, react, properties};\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    reactiveElementsFinalizationRegistry.register(element, {model, reactiveElement});\r\n    if (!reactiveElementsMapEntry) {\r\n        const observerOptions = {\r\n            properties: true,\r\n            propertiesFilter: properties\r\n        };\r\n        const reactiveElementsArray = [reactiveElement];\r\n        reactiveElementsMap.set(model, {observerOptions, reactiveElementsArray});\r\n        reactiveElementsPropertyObserver.observe(model, observerOptions);\r\n    }\r\n    else {\r\n        const {reactiveElementsArray, observerOptions} = reactiveElementsMapEntry;\r\n        const {propertiesFilter} = observerOptions;\r\n        reactiveElementsArray.push(reactiveElement);\r\n        observerOptions.propertiesFilter = propertiesFilter ?\r\n            propertiesFilter.concat(properties.filter(\r\n                property_i => !propertiesFilter.includes(property_i)\r\n            )) : Array.from(new Set(properties));\r\n    }\r\n    properties.forEach((property_i) => {\r\n        if (property_i in model) {\r\n            const value = Reflect.get(model, property_i, model);\r\n            if (value !== undefined) {\r\n                react(element, <any>property_i, <any>undefined, value);\r\n            }\r\n        }\r\n    });\r\n    return element;\r\n}\r\n\r\ninterface ReactiveChildElements {\r\n    (parent: Node & ParentNode): (Node | string)[]\r\n}\r\n\r\nconst reactiveChildElementsMap = new WeakMap<ModelList, {\r\n    reactiveChildElementsArray: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }[]\r\n}>();\r\n\r\nconst reactiveChildElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    list: ModelList,\r\n    reactiveChildElement: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }\r\n}) => {\r\n    const {list, reactiveChildElement} = heldValue;\r\n    const reactiveChildrenElementsMapEntry = reactiveChildElementsMap.get(list);\r\n    if (reactiveChildrenElementsMapEntry) {\r\n        const {reactiveChildElementsArray} = reactiveChildrenElementsMapEntry;\r\n        reactiveChildElementsArray.splice(reactiveChildElementsArray.indexOf(reactiveChildElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveChildElementsObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    let range: null | Range = null;\r\n    Array.from(records.values()).forEach((record_i) => {\r\n        const {target} = record_i;\r\n        const list = <ModelList>target;\r\n        const {length: listLength} = list;\r\n        const {reactiveChildElementsArray} = reactiveChildElementsMap.get(list)!;\r\n        reactiveChildElementsArray.forEach((reactiveChildElements_i) => {\r\n            const {parentRef, mapping, placeholder} = reactiveChildElements_i;\r\n            const parent = parentRef.deref();\r\n            if (parent) {\r\n                const {firstChild, children} = parent;\r\n                const {length: childrenCount} = children;\r\n                if (placeholder && listLength > 0 && firstChild == placeholder) {\r\n                    parent.removeChild(placeholder);\r\n                }\r\n                const {changeType, LIST_INSERT, LIST_REMOVE, LIST_SORT} = record_i;\r\n                switch (changeType) {\r\n                    case LIST_INSERT: {\r\n                        const {insertedIndex, insertedItems} = record_i;\r\n                        const insertedItemsArray = Array.from(insertedItems.values()).map(mapping);\r\n                        const {length: childrenCount} = children;\r\n                        if (insertedIndex < childrenCount) {\r\n                            children[insertedIndex].before(...insertedItemsArray);\r\n                        }\r\n                        else {\r\n                            parent.append(...insertedItemsArray);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_REMOVE: {\r\n                        const {removedIndex, removedItems} = record_i;\r\n                        const {length: removedCount} = removedItems;\r\n                        range = range ?? document.createRange();\r\n                        const removeEndIndex = removedIndex + (removedCount - 1);\r\n                        if (removeEndIndex < childrenCount) {\r\n                            range.setStartBefore(children[removedIndex]);\r\n                            range.setEndAfter(children[removeEndIndex]);\r\n                            range.deleteContents();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_SORT: {\r\n                        const {sortedIndices} = record_i;\r\n                        const childrenArray = Array.from(children);\r\n                        parent.append(\r\n                            ...sortedIndices.filter(\r\n                                index_i => index_i < childrenCount\r\n                            ).map(\r\n                                index_i => childrenArray[index_i]\r\n                            )\r\n                        );\r\n                        break;\r\n                    }\r\n                }\r\n                if (listLength == 0 && placeholder) {\r\n                    parent.append(placeholder);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveChildElements<Model extends ModelNode>(\r\n    list: ModelList<Model>,\r\n    mapping: (item: Model) => Element,\r\n    placeholder?: Element\r\n): ReactiveChildElements {\r\n    return (parent: Node & ParentNode) => {\r\n        const parentRef = new WeakRef(parent);\r\n        const reactiveChildElementsMapEntry = reactiveChildElementsMap.get(list);\r\n        const reactiveChildElement = {parentRef, mapping, placeholder};\r\n        reactiveChildElementsFinalizationRegistry.register(parent, {list, reactiveChildElement});\r\n        if (!reactiveChildElementsMapEntry) {\r\n            const reactiveChildElementsArray = [reactiveChildElement];\r\n            reactiveChildElementsMap.set(list, {reactiveChildElementsArray});\r\n            reactiveChildElementsObserver.observe(list, {\r\n                childList: true\r\n            });\r\n        }\r\n        else {\r\n            const {reactiveChildElementsArray} = reactiveChildElementsMapEntry;\r\n            reactiveChildElementsArray.push(reactiveChildElement);\r\n        }\r\n        return list.length == 0 && placeholder ?\r\n            [placeholder] : Array.from(list.values()).map(mapping);\r\n    }\r\n}\r\n\r\ninterface AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n    attach(element: Element): void;\r\n    detach(element: Element): void;\r\n}\r\n\r\ntype AttributeType = \"string\" | \"boolean\" | \"list\";\r\n\r\nfunction areAttributesMatching(\r\n    referenceAttributeType: AttributeType,\r\n    referenceAttributeName: string, referenceAttributeValue: string,\r\n    attributeName: string, attributeValue: string | null): boolean {\r\n    if (referenceAttributeName == attributeName) {\r\n        switch (referenceAttributeType) {\r\n            case \"boolean\":\r\n                return referenceAttributeValue == \"\" && attributeValue == \"\";\r\n            case \"string\":\r\n                return referenceAttributeValue !== \"\" && (referenceAttributeValue == attributeValue);\r\n            case \"list\":\r\n                return (referenceAttributeValue !== \"\" && attributeValue !== null) && new RegExp(`${referenceAttributeValue}\\s*?`, \"g\").test(attributeValue );\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nclass AttributeMutationMixinBase implements AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n\r\n    constructor(attributeName: string, attributeType: AttributeType = \"boolean\", attributeValue: string = \"\") {\r\n        this.attributeName = attributeName;\r\n        this.attributeType = attributeType;\r\n        this.attributeValue = attributeValue;\r\n    }\r\n\r\n    attach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n\r\n    detach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n}","import { Widget, element } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuItemWidget };\r\n\r\ntype MenuItemType = \"button\" | \"radio\" | \"checkbox\" | \"menu\" | \"submenu\";\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menuitem\": MenuItemWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        type?: MenuItemType;\r\n        checked?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void;\r\n    getMenu(item: HTMLElement): HTMLElement | null;\r\n    getKeyShortcut(item: HTMLElement): string | null;\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    getType(item: HTMLElement): MenuItemType | null;\r\n    setType(item: HTMLElement, type: MenuItemType): void;\r\n    getValue(item: HTMLElement): string;\r\n    setValue(item: HTMLElement, value: string): void;\r\n    getName(item: HTMLElement): string;\r\n    setName(item: HTMLElement, value: string): void;\r\n    getChecked(item: HTMLElement): boolean;\r\n    setChecked(item: HTMLElement, value: boolean): void;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setExpanded(item: HTMLElement, value: boolean): void;\r\n    getExpanded(item: HTMLElement): boolean;\r\n    toggle(item: HTMLElement, force?: boolean): void;\r\n    expand(item: HTMLElement): void;\r\n    collapse(item: HTMLElement): void;\r\n}\r\n\r\nvar menuItemWidget = new(\r\nWidget({\r\n    name: \"menuitem\"\r\n})(\r\nclass MenuItemWidgetFactoryBase extends WidgetFactory implements MenuItemWidgetFactory {\r\n    #iconPartTemplate: HTMLElement;\r\n    #arrowPartTemplate : HTMLElement;\r\n    #keyshortcutsPartTemplate: HTMLElement;\r\n    #template: HTMLElement;\r\n    #types: MenuItemType[];\r\n    #typesFeatures: {\r\n        [key in MenuItemType]: {\r\n            role: string,\r\n            hasIcon: boolean,\r\n            hasArrow: boolean\r\n        }\r\n    };\r\n\r\n    constructor() {\r\n        super();\r\n        this.#iconPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"icon\"\r\n            }\r\n        });\r\n        this.#arrowPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"arrow\"\r\n            }\r\n        });\r\n        this.#keyshortcutsPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"keyshortcuts\"\r\n            }\r\n        });\r\n        this.#template = element(\"button\", {\r\n            attributes: {\r\n                class: \"menuitem\",\r\n                role: \"menuitem\",\r\n                type: \"button\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                this.#iconPartTemplate.cloneNode(true),\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n        this.#types = [\"checkbox\", \"radio\", \"menu\", \"submenu\", \"button\"];\r\n        this.#typesFeatures = {\r\n            button: {\r\n                role: \"menuitem\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            checkbox: {\r\n                role: \"menuitemcheckbox\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            radio: {\r\n                role: \"menuitemradio\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            menu: {\r\n                role: \"menuitem\",\r\n                hasIcon: false,\r\n                hasArrow: false\r\n            },\r\n            submenu: {\r\n                role: \"menuitem\",\r\n                hasIcon: true,\r\n                hasArrow: true\r\n            }\r\n        }\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        type: MenuItemType;\r\n        checked?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (init !== undefined) {\r\n            const {id, classList, tabIndex, keyshortcut, checked, type, label, name, value, disabled} = init;\r\n            if (id !== undefined) {\r\n                item.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                item.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                item.tabIndex = tabIndex;\r\n            }\r\n            if (keyshortcut !== undefined) {\r\n                this.setKeyShortcut(item, keyshortcut);\r\n            }\r\n            if (checked !== undefined) {\r\n                this.setChecked(item, checked);\r\n            }\r\n            if (type !== undefined) {\r\n                if (type == \"menu\" || type == \"submenu\") {\r\n                    this.setExpanded(item, false);\r\n                }\r\n                this.setType(item, type);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(item, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(item, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(item: HTMLElement): HTMLElement | null {\r\n        return item;\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void {\r\n        const hasChildMenu = Array.from(slot.childNodes).some(\r\n            childNode_i => childNode_i instanceof HTMLElement && childNode_i.classList.contains(\"menu\")\r\n        );\r\n        item.setAttribute(\"aria-haspopup\", String(hasChildMenu));\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n\r\n    getMenu(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .menu\");\r\n    }\r\n\r\n    getKeyShortcut(item: HTMLElement): string | null {\r\n        return item.getAttribute(\"aria-keyshortcuts\");\r\n    }\r\n\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void {\r\n        let keyshortcutsPart = item.querySelector(\":scope > .keyshortcuts\");\r\n        if (value !== null) {\r\n            item.setAttribute(\"aria-keyshortcuts\", value);\r\n            if (!keyshortcutsPart) {\r\n                const labelPart = this.#label(item);\r\n                const keyshortcutsPartTemplate = this.#keyshortcutsPartTemplate;\r\n                keyshortcutsPart = <HTMLElement>keyshortcutsPartTemplate.cloneNode(true);\r\n                labelPart.after(keyshortcutsPart);\r\n            }\r\n            keyshortcutsPart.textContent = value;\r\n        }\r\n        else {\r\n            item.removeAttribute(\"aria-keyshortcuts\");\r\n            if (keyshortcutsPart) {\r\n                keyshortcutsPart.remove();\r\n            }\r\n        }\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n    \r\n    getType(item: HTMLElement): MenuItemType | null {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`menuitem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setType(item: HTMLElement, type: MenuItemType): void {\r\n        const typesFeatures = this.#typesFeatures;\r\n        const iconPartTemplate = this.#iconPartTemplate;\r\n        const arrowPartTemplate = this.#arrowPartTemplate;\r\n        const {role, hasIcon, hasArrow} = typesFeatures[type];\r\n        const oldType = this.getType(item);\r\n        const {classList} = item;\r\n        if (oldType) {\r\n            classList.remove(`menuitem-${oldType}`);\r\n        }\r\n        classList.add(`menuitem-${type}`);\r\n        item.setAttribute(\"role\", role);\r\n        const labelPart = this.#label(item);\r\n        const iconPart = item.querySelector(\":scope > .icon\");\r\n        const arrowPart = item.querySelector(\":scope > .arrow\");\r\n        if (hasIcon) {\r\n            if (!iconPart && labelPart) {\r\n                labelPart.before(iconPartTemplate.cloneNode(true));\r\n            }\r\n        }\r\n        else {\r\n            if (iconPart) {\r\n                iconPart.remove();\r\n            }\r\n        }\r\n        if (hasArrow) {\r\n            if (!arrowPart && labelPart) {\r\n                labelPart.after(arrowPartTemplate.cloneNode(true));\r\n            }\r\n        }\r\n        else {\r\n            if (arrowPart) {\r\n                arrowPart.remove();\r\n            }\r\n        }\r\n    }\r\n\r\n    getValue(item: HTMLElement): string {\r\n        return item.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"value\", value);\r\n    }\r\n    \r\n    getName(item: HTMLElement): string {\r\n        return item.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getChecked(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-checked\") ?? String(false));\r\n    }\r\n\r\n    setChecked(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-checked\", String(value));\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-expanded\", String(value));\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-expanded\") ?? String(false));\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        const expand = force ?? !this.getExpanded(item);\r\n        this.setExpanded(item, expand);\r\n        if (expand) {\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    expand(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (!expanded) {\r\n            this.setExpanded(item, true);\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    collapse(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (expanded) {\r\n            this.setExpanded(item, false);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.setChecked(targetItem, !this.getChecked(targetItem));\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.setChecked(targetItem, true);\r\n                    break;\r\n                }\r\n                case \"menu\":\r\n                case \"submenu\": {\r\n                    this.toggle(targetItem);\r\n                    if (this.getExpanded(targetItem)) {\r\n                        this.getMenu(targetItem)?.focus({preventScroll: true});\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(item: HTMLElement): void {\r\n        const menu = this.getMenu(item);\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = item.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const type = this.getType(item);\r\n            if (type == \"menu\") {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const closestMenu = item.closest(\".menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    const overflowX = itemRight + menuWidth - clientWidth;\r\n                    const overflowY = itemTop + menuHeight - clientHeight;\r\n                    menuStyle.setProperty(\"left\", `${\r\n                        overflowX > 0 ?\r\n                        itemLeft - menuWidth - closestMenuLeft :\r\n                        itemRight - closestMenuLeft\r\n                    }px`);\r\n                    const menuComputedStyle = window.getComputedStyle(menu);\r\n                    const {paddingTop, paddingBottom} = menuComputedStyle;\r\n                    const menuPaddingTop = parseFloat(paddingTop);\r\n                    const menuPaddingBottom = parseFloat(paddingBottom);\r\n                    menuStyle.setProperty(\"top\", `${\r\n                        overflowY > 0 ?\r\n                        itemBottom - menuHeight - closestMenuTop + menuPaddingBottom :\r\n                        itemTop - closestMenuTop - menuPaddingTop\r\n                    }px`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}));","import { Widget, element } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\nimport { menuItemWidget } from \"./MenuItemWidget\";\r\n\r\nexport { menuWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menu\": MenuWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        contextual?: boolean;\r\n    }): HTMLElement;\r\n    positionContextual(menu: HTMLElement, x: number, y: number): void;\r\n    getContextual(menu: HTMLElement): boolean;\r\n    setContextual(menu: HTMLElement, value: boolean): void;\r\n    items(menu: HTMLElement): HTMLElement[];\r\n}\r\n\r\nvar mouseOverExpandDelay = 0_200;\r\nvar mouseOutCollapseDelay = 0_400;\r\n\r\nvar menuWidget = new (\r\nWidget({\r\n    name: \"menu\"\r\n})(class MenuWidgetFactoryBase extends WidgetFactory implements MenuWidgetFactory {\r\n\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #toggleTimeouts: WeakMap<HTMLElement, {clear(): void;}>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menu\",\r\n                role: \"menu\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#toggleTimeouts = new WeakMap();\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        contextual?: boolean;\r\n    }): HTMLElement {\r\n        const menu = <HTMLElement>this.#template.cloneNode(true);\r\n        menu.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        menu.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        menu.addEventListener(\"mouseout\", this.#handleMouseOutEvent.bind(this));\r\n        menu.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        menu.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, contextual} = properties;\r\n            if (id !== undefined) {\r\n                menu.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                menu.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                menu.tabIndex = tabIndex;\r\n            }\r\n            if (contextual !== undefined) {\r\n                this.setContextual(menu, contextual);\r\n            }\r\n        }\r\n        return menu;\r\n    }\r\n\r\n    slot(menu: HTMLElement): HTMLElement | null {\r\n        return menu;\r\n    }\r\n\r\n    positionContextual(menu: HTMLElement, x: number, y: number): void {\r\n        const {style} = menu;\r\n        const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        const left = x + scrollX;\r\n        const top = y + scrollY;\r\n        const {clientWidth, clientHeight} = document.body;\r\n        const overflowX = left + menuWidth - clientWidth;\r\n        const overflowY = top + menuHeight - clientHeight;\r\n        style.setProperty(\"left\", `${overflowX > 0 ? left - menuWidth : left}px`);\r\n        style.setProperty(\"top\", `${overflowY > 0 ? top - menuHeight : top}px`);\r\n    }\r\n\r\n    getContextual(menu: HTMLElement): boolean {\r\n        const {classList} = menu;\r\n        return classList.contains(\"menu-contextual\");\r\n    }\r\n\r\n    setContextual(menu: HTMLElement, value: boolean): void {\r\n        const {classList} = menu;\r\n        if (value) {\r\n            classList.add(\"menu-contextual\");\r\n        }\r\n        else {\r\n            classList.remove(\"menu-contextual\");\r\n        }\r\n    }\r\n\r\n    items(menu: HTMLElement): HTMLElement[] {\r\n        return Array.from(menu.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        ));\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"menuitem\") && !menuItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"menuitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #collapseSubmenus(menu: HTMLElement): void {\r\n        menu.querySelectorAll<HTMLElement>(\":is(:scope, :scope > .menuitemgroup) > .menuitem[aria-expanded]\")\r\n            .forEach(menuitem_i => menuItemWidget.collapse(menuitem_i));\r\n    }\r\n\r\n    #isClosestMenu(menu: HTMLElement, target: HTMLElement): boolean {\r\n        return target.closest(\".menu\") == menu;\r\n    }\r\n\r\n    #nearestItem(menu: HTMLElement, target: HTMLElement): HTMLElement | null {\r\n        return Array.from(menu.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #firstItem(menu: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menu;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(menu: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menu;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n\r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = menuItemWidget.getMenu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #getActiveItem(menu: HTMLElement): HTMLElement | null {\r\n        return menu.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem:focus-within\"\r\n        );\r\n    }\r\n\r\n    async #setItemTimeout(item: HTMLElement, delay?: number): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => {\r\n                resolve(undefined);\r\n            }, delay ?? 0);\r\n            this.#toggleTimeouts.set(item, {\r\n                clear: () => {\r\n                    clearTimeout(timeout);\r\n                    reject();\r\n                }\r\n            });\r\n        }).then(() => {\r\n            this.#toggleTimeouts.delete(item);\r\n        });\r\n    }\r\n\r\n    #clearItemTimeout(item: HTMLElement): void {\r\n        const timeout = this.#toggleTimeouts.get(item);\r\n        if (typeof timeout !== \"undefined\") {\r\n            this.#toggleTimeouts.delete(item);\r\n            timeout.clear();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem) {\r\n            const contextual = this.getContextual(targetMenu);\r\n            if (contextual) {\r\n                try {\r\n                    targetMenu.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const isClosestMenu = this.#isClosestMenu(targetMenu, targetItem);\r\n                if (isClosestMenu) {\r\n                    const type = menuItemWidget.getType(targetItem);\r\n                    const name = menuItemWidget.getName(targetItem);\r\n                    const value = menuItemWidget.getValue(targetItem);\r\n                    if (type == \"radio\") {\r\n                        targetMenu.querySelectorAll<HTMLElement>(\r\n                            `:is(:scope, :scope > .menuitemgroup) > .menuitem-radio[name=${name}]`\r\n                        )\r\n                        .forEach((radio_i) => {\r\n                            menuItemWidget.setChecked(radio_i, menuItemWidget.getValue(radio_i) == value);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetMenu.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const contextual = this.getContextual(targetMenu);\r\n            if (contextual) {\r\n                try {\r\n                    targetMenu.remove();\r\n                } catch (error) {\r\n                    undefined;\r\n                }\r\n            }\r\n            else {\r\n                const nearestItem = this.#nearestItem(targetMenu, <HTMLElement>target);\r\n                if (nearestItem) {\r\n                    menuItemWidget.collapse(nearestItem);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetMenu);\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem(targetMenu) :\r\n                    this.#firstItem(targetMenu);\r\n                previousItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem(targetMenu) :\r\n                    this.#firstItem(targetMenu);\r\n                nextItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetMenu);\r\n                firstItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetMenu);\r\n                lastItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const type = menuItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            menuItemWidget.expand(activeItem);\r\n                            const firstChildItem = this.#firstChildItem(activeItem);\r\n                            firstChildItem?.focus({preventScroll: true});\r\n                            event.preventDefault();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    const isTargetClosestMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                    ) == targetMenu;\r\n                    if (!isTargetClosestMenu) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const isTargetClosestMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                    ) == targetMenu;\r\n                    if (!isTargetClosestMenu) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const type = menuItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            const expanded = menuItemWidget.getExpanded(activeItem);\r\n                            if (!expanded) {\r\n                                menuItemWidget.expand(activeItem);\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                                event.stopPropagation();\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOutEvent(event: MouseEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const nearestItem = this.#nearestItem(targetMenu, target);\r\n            if (nearestItem !== null) {\r\n                if (menuItemWidget.getType(nearestItem) == \"submenu\" &&\r\n                    !menuItemWidget.getExpanded(nearestItem)) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                ) == targetMenu;\r\n                if (isTargetClosestMenu) {\r\n                    const activeItem = this.#getActiveItem(targetMenu);\r\n                    if (activeItem !== null &&\r\n                        menuItemWidget.getType(activeItem) == \"submenu\" &&\r\n                        menuItemWidget.getExpanded(activeItem)) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, mouseOutCollapseDelay)\r\n                            .then(() => {\r\n                                menuItemWidget.collapse(activeItem);\r\n                            })\r\n                            .catch(() => undefined);\r\n                    }\r\n                    const {clientX, clientY} = event;\r\n                    const {left, right, top, bottom} = targetMenu.getBoundingClientRect();\r\n                    const intersectsWithMouse = !(\r\n                        left > clientX || right < clientX || top > clientY || bottom < clientY\r\n                    );\r\n                    const containsRelatedTarget = targetMenu.contains(<Node>relatedTarget);\r\n                    if (intersectsWithMouse && containsRelatedTarget) {\r\n                        if (relatedTarget instanceof HTMLElement && relatedTarget.classList.contains(\"menu\") && relatedTarget !== targetMenu) {\r\n                            relatedTarget.focus({preventScroll: true});\r\n                        }\r\n                        else {\r\n                            targetMenu.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    if (!intersectsWithMouse) {\r\n                        targetMenu.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const nearestItem = this.#nearestItem(targetMenu, target); \r\n            if (nearestItem !== null) {\r\n                if (menuItemWidget.getType(nearestItem) == \"submenu\" &&\r\n                    menuItemWidget.getExpanded(nearestItem)) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                ) == targetMenu;\r\n                if (isTargetClosestMenu) {\r\n                    const activeItem = this.#getActiveItem(targetMenu);\r\n                    if (activeItem !== null) {\r\n                        if (menuItemWidget.getType(activeItem) == \"submenu\" &&\r\n                            menuItemWidget.getExpanded(activeItem) && \r\n                            !activeItem.contains(<HTMLElement>target)) {\r\n                            this.#clearItemTimeout(activeItem);\r\n                            this.#setItemTimeout(activeItem, mouseOutCollapseDelay)\r\n                                .then(() => {\r\n                                    menuItemWidget.collapse(activeItem);\r\n                                })\r\n                                .catch(() => undefined);\r\n                        }\r\n                    }\r\n                    nearestItem.focus({preventScroll: true});\r\n                    if (menuItemWidget.getType(nearestItem) == \"submenu\") {\r\n                        if (!menuItemWidget.getExpanded(nearestItem)) {\r\n                            this.#clearItemTimeout(nearestItem);\r\n                            this.#setItemTimeout(nearestItem, mouseOverExpandDelay)\r\n                                .then(() => {\r\n                                    const activeItem = this.#getActiveItem(targetMenu);\r\n                                    this.#collapseSubmenus(targetMenu);\r\n                                    if (activeItem) {\r\n                                        this.#clearItemTimeout(activeItem);\r\n                                        menuItemWidget.expand(activeItem);\r\n                                        menuItemWidget.getMenu(activeItem)?.focus({preventScroll: true});\r\n                                    }\r\n                                })\r\n                                .catch(() => undefined);\r\n                        }\r\n                        else {\r\n                            menuItemWidget.getMenu(nearestItem)?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}));","import { element, Widget } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\n\r\nexport { toolbarItemWidget };\r\n\r\ntype ToolBarItemType = \"button\" | \"checkbox\" | \"radio\" | \"menubutton\";\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbaritem\": ToolBarItemWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ToolBarItemWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        id?: string;\r\n        type: ToolBarItemType;\r\n        pressed?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    menu(item: HTMLElement): HTMLElement | null;\r\n    getName(item: HTMLElement): string;\r\n    setName(item: HTMLElement, value: string): void;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setPressed(item: HTMLElement, value: boolean): void;\r\n    getPressed(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    getValue(item: HTMLElement): string;\r\n    setValue(item: HTMLElement, value: string): void;\r\n    getType(item: HTMLElement): ToolBarItemType | null;\r\n    setType(item: HTMLElement, value: ToolBarItemType): void;\r\n}\r\n\r\nvar toolbarItemWidget = new(\r\nWidget({\r\n    name: \"toolbaritem\"\r\n})(\r\nclass ToolBarItemWidgetFactoryBase extends WidgetFactory implements ToolBarItemWidgetFactory {\r\n    #template: HTMLElement;\r\n    #types: ToolBarItemType[];\r\n\r\n    constructor() {\r\n        super();\r\n        this.#types = [\"button\", \"checkbox\", \"radio\", \"menubutton\"];\r\n        this.#template = element(\"button\", {\r\n            attributes: {\r\n                class: \"toolbaritem\",\r\n                role: \"button\",\r\n                type: \"button\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        type?: ToolBarItemType;\r\n        pressed?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }) {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (init !== void 0) {\r\n            const {id, keyshortcut, pressed, type, label, name, value, disabled} = init;\r\n            if (id !== undefined) {\r\n                item.id = id;\r\n            }\r\n            if (keyshortcut !== undefined) {\r\n                this.setKeyShortcut(item, keyshortcut);\r\n            }\r\n            if (pressed !== undefined) {\r\n                this.setPressed(item, pressed);\r\n            }\r\n            if (type !== undefined) {\r\n                this.setType(item, type);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(item, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(item, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(item: HTMLElement): HTMLElement | null {\r\n        return item;\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void {\r\n        const hasChildMenu = Array.from(slot.childNodes).some(\r\n            childNode_i => childNode_i instanceof HTMLElement && childNode_i.classList.contains(\"menu\")\r\n        );\r\n        item.setAttribute(\"aria-haspopup\", String(hasChildMenu));\r\n    }\r\n\r\n    menu(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .menu\");\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-expanded\", value);\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-expanded\");\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    getKeyShortcut(item: HTMLElement): string | null {\r\n        return item.getAttribute(\"aria-keyshortcuts\");\r\n    }\r\n\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void {\r\n        if (value !== null) {\r\n            item.setAttribute(\"aria-keyshortcuts\", value);\r\n        }\r\n        else {\r\n            item.removeAttribute(\"aria-keyshortcuts\");\r\n        }\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        const expand = force ?? !this.getExpanded(item);\r\n        this.setExpanded(item, expand);\r\n        if (expand) {\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    expand(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (!expanded) {\r\n            this.setExpanded(item, true);\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    collapse(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (expanded) {\r\n            this.setExpanded(item, false);\r\n        }\r\n    }\r\n\r\n    getType(item: HTMLElement): ToolBarItemType | null {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`toolbaritem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setType(item: HTMLElement, type: ToolBarItemType): void {\r\n        const oldType = this.getType(item);\r\n        if (type !== oldType) {\r\n            const {classList} = item;\r\n            if (oldType) {\r\n                classList.remove(`toolbaritem-${oldType}`);\r\n            }\r\n            classList.add(`toolbaritem-${type}`);\r\n        }\r\n    }\r\n\r\n    getValue(item: HTMLElement): string {\r\n        return item.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"value\", value);\r\n    }\r\n\r\n    getTitle(item: HTMLElement): string {\r\n        return item.getAttribute(\"title\") ?? \"\";\r\n    }\r\n\r\n    setTitle(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"title\", value);\r\n    }\r\n\r\n    getName(item: HTMLElement): string {\r\n        return item.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getPressed(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-pressed\") ?? String(false));\r\n    }\r\n\r\n    setPressed(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-pressed\", String(value));\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetItem = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetItem.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse(targetItem);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.setPressed(targetItem, !this.getPressed(targetItem));\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.setPressed(targetItem, true);\r\n                    break;\r\n                }\r\n                case \"menubutton\": {\r\n                    const menu = this.menu(targetItem);\r\n                    if (menu && !menu.contains(<Node>target)) {\r\n                        this.toggle(targetItem);\r\n                        const expanded = this.getExpanded(targetItem);\r\n                        if (expanded) {\r\n                            menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(item: HTMLElement): void {\r\n        const type = this.getType(item);\r\n        if (type == \"menubutton\") {\r\n            const menu = this.menu(item);\r\n            if (menu !== null) {\r\n                const {style: menuStyle} = menu;\r\n                const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = item.getBoundingClientRect();\r\n                const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n                const {scrollY, scrollX} = window;\r\n                const {clientWidth, clientHeight} = document.body;\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n        }\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n}));\r\n","import { element, Widget } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\nimport { toolbarItemWidget } from \"./ToolBarItemWidget\";\r\n\r\nexport { toolbarWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbar\": ToolBarWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ToolBarWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }): HTMLElement;\r\n    setOrientation(toolbar: HTMLElement, value: ToolBarOrientation): void;\r\n    getOrientation(toolbar: HTMLElement): ToolBarOrientation;\r\n}\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\nvar toolbarWidget = new (\r\nWidget({\r\n    name: \"toolbar\"\r\n})(class ToolBarWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"toolbar\",\r\n                role: \"toolbar\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        )\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }) {\r\n        const toolbar = <HTMLElement>this.#template.cloneNode(true);\r\n        toolbar.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        toolbar.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        toolbar.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        toolbar.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        toolbar.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex} = properties;\r\n            if (id !== undefined) {\r\n                toolbar.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                toolbar.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                toolbar.tabIndex = tabIndex;\r\n            }\r\n        }\r\n        return toolbar;\r\n    }\r\n\r\n    slot(toolbar: HTMLElement) {\r\n        return toolbar;\r\n    }\r\n\r\n    #getActiveItem(toolbar: HTMLElement): HTMLElement | null {\r\n        return toolbar.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .toolbaritemgroup) > .toolbaritem.active\"\r\n        );\r\n    }\r\n\r\n    items(toolbar: HTMLElement): HTMLElement[] {\r\n        return Array.from(toolbar.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .toolbaritemgroup) > .toolbaritem\"\r\n        ));\r\n    }\r\n\r\n    setOrientation(toolbar: HTMLElement, value: ToolBarOrientation): void {\r\n        toolbar.setAttribute(\"aria-orientation\", value);\r\n    }\r\n\r\n    getOrientation(toolbar: HTMLElement): ToolBarOrientation {\r\n        return <ToolBarOrientation>toolbar.getAttribute(\"aria-orientation\") ?? \"horizontal\";\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node) {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"toolbaritem\") && !toolbarItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"toolbaritemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(toolbar: Element): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = toolbar;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(toolbar: Element): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = toolbar;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLElement | null>walker.previousSibling();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = toolbarItemWidget.menu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #setActiveItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(tree);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            toolbarItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            toolbarItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: Event): void {\r\n        const {currentTarget, target} = event;\r\n        const toolbar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem) {\r\n            const type = toolbarItemWidget.getType(targetItem);\r\n            const name = toolbarItemWidget.getName(targetItem);\r\n            const value = toolbarItemWidget.getType(targetItem);\r\n            if (type == \"radio\") {\r\n                toolbar.querySelectorAll<HTMLElement>(\r\n                    `:is(:scope, :scope > .toolbaritemgroup) > .toolbaritem[type=radio][name=${name}]`\r\n                ).forEach((radio_i) => {\r\n                    toolbarItemWidget.setPressed(radio_i, toolbarItemWidget.getValue(radio_i) == value);\r\n                });\r\n            }\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const focusWithin = targetToolbar.contains(<Node>relatedTarget);\r\n        if (!focusWithin) {\r\n            const activeItem = this.#getActiveItem(targetToolbar);\r\n            if (activeItem) {\r\n                activeItem.focus();\r\n            }\r\n            else {\r\n                const firstItem = this.#firstItem(targetToolbar);\r\n                firstItem?.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetToolbar, targetItem);\r\n            targetToolbar.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetToolbar.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.#setActiveItem(targetToolbar, null);\r\n            targetToolbar.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetToolbar);\r\n        switch (key) {\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const type = toolbarItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"menubutton\": {\r\n                            toolbarItemWidget.expand(activeItem);\r\n                            const firstChildItem = this.#firstChildItem(activeItem);\r\n                            firstChildItem?.focus({preventScroll: true});\r\n                            event.preventDefault();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetToolbar);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetToolbar);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetToolbar);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetToolbar);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    activeItem.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    targetToolbar.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}));","import { element, Widget } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\n\r\nexport { treeItemWidget };\r\n\r\ntype TreeItemType = \"parent\" | \"leaf\";\r\n\r\ninterface TreeItemWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        type?: TreeItemType;\r\n        label?: string;\r\n        disabled?: boolean;\r\n        draggable?: boolean;\r\n    }): HTMLElement;\r\n    group(item: HTMLElement): HTMLElement | null;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setExpanded(item: HTMLElement, value: boolean): void;\r\n    getExpanded(item: HTMLElement): boolean;\r\n    setDraggable(row: HTMLElement, value: boolean): void;\r\n    getDraggable(item: HTMLElement): boolean;\r\n    getType(item: HTMLElement): TreeItemType | null;\r\n    setType(item: HTMLElement, value: TreeItemType): void;\r\n    toggle(item: HTMLElement, force?: boolean): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"treeitem\": TreeItemWidgetFactory,\r\n    }\r\n}\r\n\r\nvar treeItemWidget = new (\r\nWidget({\r\n    name: \"treeitem\"\r\n})(class TreeItemWidgetFactoryBase extends WidgetFactory implements TreeItemWidgetFactory {\r\n    #template: HTMLElement;\r\n    #types: TreeItemType[];\r\n\r\n    constructor() {\r\n        super();\r\n        this.#types = [\"parent\", \"leaf\"];\r\n        this.#template = element(\"li\", {\r\n            attributes: {\r\n                class: \"treeitem\",\r\n                role: \"treeitem\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"content\"\r\n                    },\r\n                    children: [\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"arrow\"\r\n                            }\r\n                        }),\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"label\"\r\n                            }\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    group(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .treeitemgroup\");\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        type?: TreeItemType;\r\n        label?: string;\r\n        disabled?: boolean;\r\n        draggable?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, label, disabled, draggable} = properties;\r\n            let {type} = properties;\r\n            type = type ?? \"leaf\";\r\n            this.setType(item, type);\r\n            if (type === \"parent\") {\r\n                this.setExpanded(item, false);\r\n            }\r\n            if (id !== undefined) {\r\n                item.id = id;\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n            if (draggable !== undefined) {\r\n                this.setDraggable(item, draggable);\r\n            }\r\n            this.setSelected(item, false);\r\n        }\r\n        return item;\r\n    }\r\n\r\n    get observedSlots() {\r\n        return [\"content\", \"group\"];\r\n    }\r\n\r\n    slot(item: HTMLElement, name: string | null) {\r\n        switch (name) {\r\n            case \"content\":\r\n                return this.#content(item);\r\n            case \"group\":\r\n                return item;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #content(item: HTMLElement): HTMLElement {\r\n        const content = item.querySelector<HTMLElement>(\":scope > .content\")!;\r\n        if (!content) throw new Error(\"Missing content.\");\r\n        return content;\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        const label = item.querySelector<HTMLElement>(\":scope > .content > .label\");\r\n        if (!label) throw new Error(\"Missing label.\");\r\n        return label;\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? Number(posInSet) : -1;\r\n    }\r\n\r\n    getType(item: HTMLElement): TreeItemType {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`treeitem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        throw new Error(\"Missing type.\");\r\n    }\r\n\r\n    setType(item: HTMLElement, type: TreeItemType): void {\r\n        const {classList} = item;\r\n        try {\r\n            const oldType = this.getType(item);\r\n            classList.remove(`treeitem-${oldType}`);\r\n        }\r\n        catch (e) {};\r\n        classList.add(`treeitem-${type}`);\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-expanded\", String(value));\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-expanded\") ?? String(false));\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            if (!classList.contains(\"active\")) {\r\n                classList.add(\"active\");\r\n            }\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDraggable(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"draggable\", String(value));\r\n    }\r\n\r\n    getDraggable(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"draggable\") ?? String(false));\r\n    }\r\n\r\n    setSelected(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-selected\", String(value));\r\n        item.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    setLevel(item: HTMLElement, value: number): void {\r\n        item.style.setProperty(\"--level\", String(value));\r\n    }\r\n\r\n    getLevel(item: HTMLElement): number {\r\n        return parseInt(item.style.getPropertyValue(\"--level\"));\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        this.setExpanded(item, force ?? !this.getExpanded(item));\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget, shiftKey, ctrlKey} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            if (type == \"parent\" && !(shiftKey || ctrlKey)) {\r\n                this.toggle(targetItem);\r\n            }\r\n        }\r\n    }\r\n}));","import { element, Widget } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\nimport { treeItemWidget } from \"./TreeItemWidget\";\r\n\r\nexport { treeWidget };\r\n\r\ninterface TreeWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement;\r\n    items(tree: HTMLElement): HTMLElement[];\r\n    selectedItems(tree: HTMLElement): HTMLElement[];\r\n    beginSelection(tree: HTMLElement): void;\r\n    endSelection(tree: HTMLElement): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"tree\": TreeWidgetFactory,\r\n    }\r\n}\r\n\r\nvar treeWidget = new (\r\nWidget({\r\n    name: \"tree\"\r\n})(class TreeWidgetFactoryBase extends WidgetFactory implements TreeWidgetFactory {\r\n\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"tree\",\r\n                role: \"tree\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement {\r\n        const tree = <HTMLElement>this.#template.cloneNode(true);\r\n        tree.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        tree.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        tree.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        tree.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        tree.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        tree.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        tree.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        tree.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        tree.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        tree.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        tree.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        this.#onSelection.set(tree, false);\r\n        this.#hasSelectionChanged.set(tree, false);\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, multisectable} = properties;\r\n            if (id !== undefined) {\r\n                tree.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                tree.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                tree.tabIndex = tabIndex;\r\n            }\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(tree, multisectable);\r\n            }\r\n        }\r\n        return tree;\r\n    }\r\n\r\n    slot(tree: HTMLElement) {\r\n        return tree;\r\n    }\r\n\r\n    slottedCallback(tree: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"treeitem\")) {\r\n                treeItemWidget.setPosInSet(child_i, i);\r\n                treeItemWidget.setLevel(child_i, 0);\r\n            }\r\n        });\r\n    }\r\n\r\n    items(tree: HTMLElement): HTMLElement[] {\r\n        return Array.from(tree.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .treeitemgroup) > .treeitem\"\r\n        ));\r\n    }\r\n\r\n    selectedItems(tree: HTMLElement): HTMLElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        let item = this.#firstItem(tree);\r\n        while (item !== null) {\r\n            const selected = treeItemWidget.getSelected(item);\r\n            if (selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(tree: HTMLElement): void {\r\n        this.#onSelection.set(tree, true);\r\n    }\r\n\r\n    endSelection(tree: HTMLElement): void {\r\n        this.#onSelection.set(tree, false);\r\n        if (this.#hasSelectionChanged.get(tree)) {\r\n            tree.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(tree, false);\r\n        }\r\n    }\r\n\r\n    setMultiSelectable(tree: HTMLElement, value: boolean): void {\r\n        tree.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(tree: HTMLElement): boolean {\r\n        return JSON.parse(tree.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    #getActiveItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".treeitem.active\");\r\n    }\r\n\r\n    #getDropTargetItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".treeitem.droptarget\");\r\n    }\r\n\r\n    #setDropTargetItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const {classList} = tree;\r\n        const dropTargetItem = this.#getDropTargetItem(tree);\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            treeItemWidget.setDropTarget(dropTargetItem, false);\r\n        }\r\n        if (item !== null) {\r\n            treeItemWidget.setDropTarget(item, true);\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"treeitem\") && !treeItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"treeitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextItem = this.#nextItem(from);\r\n            while (nextItem && nextItem !== to) {\r\n                range.push(nextItem);\r\n                nextItem = this.#nextItem(nextItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousItem = this.#previousItem(from);\r\n            while (previousItem && previousItem !== to) {\r\n                range.push(previousItem);\r\n                previousItem = this.#previousItem(previousItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        selectedItems.forEach((item_i) => {\r\n            if (!items.includes(item_i)) {\r\n                treeItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            const selected = treeItemWidget.getSelected(item_i);\r\n            if (tree.contains(item_i) && !selected) {\r\n                treeItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #addToSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        this.beginSelection(tree);\r\n        items.forEach((item_i) => {\r\n            if (!treeItemWidget.getSelected(item_i)) {\r\n                treeItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #removeFromSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                treeItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #clearSelection(tree: HTMLElement): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        selectedItems.forEach((item_i) => {\r\n            treeItemWidget.setSelected(item_i, false);\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #setActiveItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(tree);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            treeItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            treeItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #firstItem(tree: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(tree: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousSibling = <HTMLElement | null>walker.previousSibling();\r\n        return previousSibling ?\r\n            this.#deepestItem(previousSibling) :\r\n            <HTMLElement | null>walker.parentNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const type = treeItemWidget.getType(item);\r\n        const expanded = treeItemWidget.getExpanded(item);\r\n        return <HTMLElement | null>(\r\n            type === \"leaf\" ?\r\n                walker.nextNode() :\r\n                expanded ?\r\n                    walker.nextNode() :\r\n                    walker.nextSibling() ??\r\n                    (walker.parentNode(), walker.nextSibling())\r\n        );\r\n    }\r\n\r\n    #deepestItem(item: HTMLElement): HTMLElement {\r\n        const expanded = treeItemWidget.getExpanded(item);\r\n        if (expanded) {\r\n            const walker = this.#walker;\r\n            const lastItem = <HTMLElement>walker.lastChild();\r\n            if (lastItem) {\r\n                return this.#deepestItem(lastItem);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey, button} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        if (targetItem) {\r\n            const selected = treeItemWidget.getSelected(targetItem);\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setSelection(targetTree, targetItem);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            targetItem.blur();\r\n                            this.#removeFromSelection(targetTree, targetItem);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(targetTree, targetItem);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const activeItem = this.#getActiveItem(targetTree);\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                targetItem\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetTree, ...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                }\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(targetTree, targetItem);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            const type = treeItemWidget.getType(targetItem);\r\n            if (type == \"parent\") {\r\n                treeItemWidget.toggle(targetItem, true);\r\n            }\r\n            this.#setDropTargetItem(targetTree, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (!targetTree.contains(<Node>relatedTarget)) {\r\n            this.#setDropTargetItem(targetTree, null);\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const focusWithin = targetTree.contains(<Node>relatedTarget);\r\n        if (!focusWithin) {   \r\n            const activeItem = this.#getActiveItem(targetTree);\r\n            if (activeItem) {\r\n                activeItem.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetTree, targetItem);\r\n            targetTree.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetTree.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetTree.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetTree);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetTree, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetTree, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(\r\n                                firstItem,\r\n                                this.#deepestItem(lastItem)\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetTree, ...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const expanded = treeItemWidget.getExpanded(activeItem);\r\n                    if (expanded) {\r\n                        treeItemWidget.toggle(activeItem);\r\n                    }\r\n                    else {\r\n                        const walker = this.#walker;\r\n                        const parentItem = <HTMLElement>walker.parentNode();\r\n                        if (parentItem) {\r\n                            parentItem.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const expanded = treeItemWidget.getExpanded(activeItem);\r\n                    if (!expanded) {\r\n                        treeItemWidget.toggle(activeItem);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = treeItemWidget.getSelected(previousItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetTree, previousItem) :\r\n                                this.#addToSelection(targetTree, previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetTree);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = treeItemWidget.getSelected(nextItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetTree, nextItem) :\r\n                                this.#addToSelection(targetTree, nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetTree);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetTree);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetTree);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(targetTree, activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection(targetTree);\r\n                this.#setActiveItem(targetTree, null);\r\n                targetTree.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {target} = event;\r\n        const targetTree = <HTMLElement>target;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"treeitem\")) {\r\n            if (this.#onSelection.get(targetTree)) {\r\n                this.#hasSelectionChanged.set(target, true);\r\n            }\r\n            else {\r\n                targetTree.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { element, reactiveChildElements, reactiveElement, widget } from \"../elements/Element\";\r\nimport { ModelEvent, ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { menuWidget } from \"./widgets/menu/MenuWidget\";\r\nimport { toolbarItemWidget } from \"./widgets/toolbar/ToolBarItemWidget\";\r\nimport { toolbarWidget } from \"./widgets/toolbar/ToolBarWidget\";\r\nimport { treeItemWidget } from \"./widgets/tree/TreeItemWidget\";\r\nimport { treeWidget } from \"./widgets/tree/TreeWidget\";\r\n\r\nexport { TreeModel };\r\nexport { TreeItemModel };\r\nexport { treeView };\r\n\r\nclass TreeModel extends ModelObject {\r\n    readonly items: ModelList<TreeItemModel>;\r\n    readonly childItems: ModelList<TreeItemModel>;\r\n    sortFunction: ((item_a: TreeItemModel, item_b: TreeItemModel) => number) | null;\r\n    \r\n    constructor()\r\n    constructor(init: {items: TreeItemModel[], sortFunction?: (item_a: TreeItemModel, item_b: TreeItemModel) => number})\r\n    constructor(init?: {items: TreeItemModel[], sortFunction?: (item_a: TreeItemModel, item_b: TreeItemModel) => number}) {\r\n        super();\r\n        const childItems = new ModelList(init?.items ?? []);\r\n        childItems.setParent(this);\r\n        this.childItems = childItems;\r\n        this.items = new ModelList(this.flattenItems());\r\n        this.sortFunction = init?.sortFunction ??\r\n            function(item_a: TreeItemModel, item_b: TreeItemModel) {\r\n                return item_a.label.localeCompare(item_b.label);\r\n            };\r\n        this.addEventListener(\"modelchange\", this.#handleModelChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleModelChangeEvent(event: ModelEvent): void {\r\n        const {target} = event;\r\n        const {items, sortFunction, flattenItems} = this;\r\n        if (target instanceof ModelList) {\r\n            const records = target.getRecords();\r\n            records.forEach((record_i) => {\r\n                const {insertedItems, removedItems} = record_i;\r\n                const flattenedInsertedItems = (<TreeItemModel[]>Array.from(insertedItems.values())).flatMap(\r\n                    insertedItem_i => Array.of(insertedItem_i, ...flattenItems.call(insertedItem_i))\r\n                );\r\n                const flattenedRemovedItems = (<TreeItemModel[]>Array.from(removedItems.values())).flatMap(\r\n                    removedItem_i => Array.of(removedItem_i, ...flattenItems.call(removedItem_i))\r\n                );\r\n                items.beginChanges();\r\n                items.append(...flattenedInsertedItems);\r\n                flattenedRemovedItems.forEach((removedItem_i) => items.remove(removedItem_i));\r\n                if (sortFunction) items.sort(sortFunction);\r\n                items.endChanges();\r\n            });\r\n        }\r\n    }\r\n\r\n    flattenItems(this: TreeModel | TreeItemModel): TreeItemModel[] {\r\n        const {childItems} = this;\r\n        return Array.from(childItems.values()).flatMap(\r\n            treeItem_i => Array.of(treeItem_i, ...TreeModel.prototype.flattenItems.call(treeItem_i))\r\n        );\r\n    }\r\n\r\n    getItemByUri(this: TreeModel | TreeItemModel, uri: string): TreeItemModel | null {\r\n        const {childItems} = this;\r\n        const {length: itemsCount} = childItems;\r\n        const {length: uriLength} = uri;\r\n        for (let i = 0; i < itemsCount; i++) {\r\n            const item_i = childItems.get(i)!;\r\n            const {uri: itemUri} = item_i;\r\n            const {length: itemUriLength} = itemUri;\r\n            if (uri.startsWith(itemUri)) {\r\n                if (uri.charAt(itemUriLength) == \"/\") {\r\n                    return TreeModel.prototype.getItemByUri.call(item_i, uri);\r\n                }\r\n                else if (itemUriLength == uriLength) {\r\n                    return item_i;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\ninterface TreeItem {\r\n    show(): void;\r\n    hide(): void;\r\n    display(): void;\r\n    remove(): void;\r\n}\r\n\r\nclass TreeItemList implements TreeItem {\r\n    readonly items: TreeItemModel[];\r\n\r\n    constructor(items: TreeItemModel[]) {\r\n        this.items = items;\r\n    }\r\n\r\n    get count(): number {\r\n        return this.items.length;\r\n    }\r\n\r\n    static from(items: TreeItemModel[]): TreeItemList {\r\n        return new TreeItemList(items);\r\n    }\r\n\r\n    static of(...items: TreeItemModel[]): TreeItemList {\r\n        return new TreeItemList(items);\r\n    }\r\n\r\n    show(): void {\r\n        this.items.forEach(item_i => item_i.show());\r\n    }\r\n\r\n    hide(): void {\r\n        this.items.forEach(item_i => item_i.hide());\r\n    }\r\n\r\n    display(): void {\r\n        const result = this.items.reduce(\r\n            (result, item_i) => `${result} ${item_i.label}`, \"\"\r\n        );\r\n        console.log(result);\r\n    }\r\n\r\n    remove(): void {\r\n        const {items} = this;\r\n        const removedItemsGroups = items.reduce((map, item_i) => {\r\n            const {parentNode} = item_i;\r\n            if (parentNode instanceof TreeItemModel || parentNode instanceof TreeModel) {\r\n                const {childItems} = parentNode;\r\n                const group = map.get(childItems);\r\n                if (group) group.push(item_i);\r\n                else map.set(childItems, [item_i]);\r\n            }\r\n            return map;\r\n        }, new Map<ModelList, TreeItemModel[]>());\r\n        Array.from(removedItemsGroups.entries()).forEach(\r\n            ([list_i, children_i]) => {\r\n                list_i.beginChanges();\r\n                children_i.forEach((child_i) => {\r\n                    list_i.remove(child_i);\r\n                });\r\n                list_i.endChanges();\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nclass TreeItemModel extends ModelObject implements TreeItem {\r\n    readonly childItems: ModelList<TreeItemModel>;\r\n    readonly type: \"leaf\" | \"parent\";\r\n    readonly label: string;\r\n\r\n    @ModelProperty(/*{type: Number}*/)\r\n    childCount: number;\r\n\r\n    @ModelProperty(/*{type: Boolean}*/)\r\n    visibility: boolean;\r\n\r\n    get uri(): string {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return `${parentNode.uri}/${this.label}`;\r\n        }\r\n        return this.label;\r\n    }\r\n\r\n    get parentItem(): TreeItemModel | null {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return parentNode;\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    constructor(init: {label: string, type: \"leaf\" | \"parent\", items?: TreeItemModel[]}) {\r\n        super();\r\n        const {label, type} = init;\r\n        const childItems = new ModelList(init.items ?? []);\r\n        childItems.setParent(this);\r\n        this.childItems = childItems;\r\n        this.label = label;\r\n        this.type = type;\r\n        this.childCount = childItems.length;\r\n        this.visibility = true;\r\n        this.addEventListener(\"modelchange\", this.#handleModelChangeEvent.bind(this));\r\n    }\r\n\r\n    show(): void {\r\n        this.visibility = true;\r\n    }\r\n\r\n    hide(): void {\r\n        this.visibility = false;\r\n    }\r\n\r\n    display(): void {\r\n        console.log(this.label);\r\n    }\r\n    \r\n    remove(): void {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel || parentNode instanceof TreeModel) {\r\n            const {childItems} = parentNode;\r\n            if (childItems) {\r\n                childItems.remove(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleModelChangeEvent(event: ModelEvent): void {\r\n        const {target} = event;\r\n        const {childItems} = this;\r\n        if (target == childItems) {\r\n            this.childCount = childItems.length;\r\n        }\r\n    }\r\n}\r\n\r\ninterface TreeViewFactory {\r\n    create(model: TreeModel): HTMLElement;\r\n    getModel(tree: HTMLElement): TreeModel | null;\r\n    selectedItems(tree: HTMLElement): TreeItemModel[];\r\n}\r\n\r\nvar treeView = new class TreeViewFactoryBase implements TreeViewFactory {\r\n    #models: WeakMap<HTMLElement, TreeModel>;\r\n    #dragImages: WeakMap<TreeItemModel, WeakRef<Element>>;\r\n    \r\n    constructor() {\r\n        this.#models = new WeakMap();\r\n        this.#dragImages = new WeakMap();\r\n    }\r\n\r\n    create(model: TreeModel): HTMLElement {\r\n        const treeElement = widget(\"tree\", {\r\n            properties: {\r\n                tabIndex: 0,\r\n            },\r\n            slotted: reactiveChildElements(\r\n                model.childItems, item => this.#renderTreeItem(item)\r\n            ),\r\n            listeners: {\r\n                dragstart: <EventListener>this.#handleDragStartEvent.bind(this),\r\n                drop: <EventListener>this.#handleDropEvent.bind(this),\r\n                contextmenu: <EventListener>this.#handleContextMenuEvent.bind(this),\r\n                keydown: <EventListener>this.#handleKeyDownEvent.bind(this),\r\n                focusin: <EventListener>this.#handleFocusInEvent.bind(this),\r\n                focusout: <EventListener>this.#handleFocusOutEvent.bind(this),\r\n            }\r\n        });\r\n        const rootElement = element(\"div\", {\r\n            attributes: {\r\n                class: \"tree-view\",\r\n            },\r\n            children: [\r\n                treeElement,\r\n                element(\"div\", {\r\n                    attributes: {\r\n                        class: \"offscreen\",\r\n                        hidden: true\r\n                    },\r\n                    children: reactiveChildElements(model.items,\r\n                        item => this.#renderTreeItemDragImage(item)\r\n                    )\r\n                })\r\n            ]\r\n        });\r\n        this.#models.set(treeElement, model);\r\n        return rootElement;\r\n    }\r\n    \r\n    getModel(tree: HTMLElement): TreeModel | null {\r\n        return this.#models.get(tree) ?? null;\r\n    }\r\n\r\n    selectedItems(tree: HTMLElement): TreeItemModel[] {\r\n        const model = this.getModel(tree)!;\r\n        const selectedElements = treeWidget.selectedItems(tree);\r\n        return selectedElements.map(\r\n            item_i => <TreeItemModel>model.getItemByUri(item_i.dataset.uri!)\r\n        );\r\n    }\r\n\r\n    #getDragImage(model: TreeItemModel): Element | null {\r\n        return this.#dragImages.get(model)?.deref() ?? null;\r\n    }\r\n\r\n    #renderTreeItem(item: TreeItemModel): Element {\r\n        const treeItemElement = reactiveElement(\r\n            item,\r\n            widget(\"treeitem\", {\r\n                properties: {\r\n                    type: item.type,\r\n                    draggable: true,\r\n                    label: item.label\r\n                },\r\n                dataset: {\r\n                    uri: item.uri\r\n                },\r\n                slotted: {\r\n                    group:\r\n                        <Node[]>((item.type == \"parent\") ? [\r\n                        widget(\"treeitemgroup\", {\r\n                            slotted: reactiveChildElements(item.childItems,\r\n                                item => this.#renderTreeItem(item)\r\n                            )\r\n                        })\r\n                    ] : []),\r\n                    content: <Node[]>\r\n                        ([\r\n                            element(\"span\", {\r\n                                attributes: {\r\n                                    class: \"label\"\r\n                                }\r\n                            })\r\n                        ]).concat((item.type == \"parent\") ? [\r\n                            element(\"span\", {\r\n                                attributes: {\r\n                                    class: \"badge\"\r\n                                }\r\n                            })\r\n                        ] : []).concat([\r\n                            widget(\"toolbar\", {\r\n                                properties: {\r\n                                    tabIndex: -1\r\n                                },\r\n                                slotted: [\r\n                                    widget(\"toolbaritem\", {\r\n                                        properties: {\r\n                                            name: \"visibility\",\r\n                                            type: \"checkbox\",\r\n                                            label: \"Visibility\"\r\n                                        },\r\n                                        listeners: {\r\n                                            click: () => {\r\n                                                item.visibility ?\r\n                                                    item.hide() :\r\n                                                    item.show();\r\n                                            }\r\n                                        }\r\n                                    })\r\n                                ]\r\n                            })\r\n                        ])\r\n                }\r\n            }),\r\n            [\"label\", \"childCount\", \"visibility\"],\r\n            (treeitem, property, oldValue, newValue) => {\r\n                switch (property) {\r\n                    case \"label\": {\r\n                        treeItemWidget.setLabel(treeitem, newValue);\r\n                        break;\r\n                    }\r\n                    case \"childCount\": {\r\n                        const badge = treeitem.querySelector<HTMLElement>(\":scope > .content > .badge\");\r\n                        if (badge) {\r\n                            badge.textContent = `(${newValue})`;\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"visibility\": {\r\n                        const toolbar = treeitem.querySelector<HTMLElement>(\":scope > .content > .toolbar\");\r\n                        if (toolbar) {\r\n                            const visibilityItem = toolbarWidget.slot(toolbar)\r\n                                ?.querySelector<HTMLElement>(\".toolbaritem[name=visibility]\");\r\n                            if (visibilityItem) {\r\n                                const label = newValue ? \"Hide\" : \"Show\";\r\n                                toolbarItemWidget.setLabel(visibilityItem, label);\r\n                                toolbarItemWidget.setTitle(visibilityItem, label);\r\n                                toolbarItemWidget.setPressed(visibilityItem, newValue);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        );\r\n        return treeItemElement;\r\n    }\r\n\r\n    #renderTreeItemDragImage(item: TreeItemModel): Element {\r\n        const dragImageElement = reactiveElement(\r\n            item,\r\n            element(\"span\", {\r\n                attributes: {\r\n                    class: \"dragimage\"\r\n                }\r\n            }),\r\n            [\"label\"],\r\n            (span, property, oldValue, newValue) => {\r\n                span.textContent = newValue;\r\n            }\r\n        );\r\n        this.#dragImages.set(item, new WeakRef(dragImageElement));\r\n        return dragImageElement;\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n        const model = this.getModel(targetTree)!;\r\n        if (targetItem) {\r\n            const {dataTransfer} = event;\r\n            const selectedElements = treeWidget.selectedItems(targetTree);\r\n            const {length: selectedCount} = selectedElements;\r\n            if (selectedCount > 0) {\r\n                const selectedUris = \r\n                    selectedElements\r\n                    .map((element_i) =>\r\n                        element_i.dataset.uri!\r\n                    )\r\n                    .filter(\r\n                        (uri_i, _, uris) => !uris.some(\r\n                            uri_j => uri_i.startsWith(`${uri_j}/`)\r\n                        )\r\n                    );\r\n                const selectedUrisString = selectedUris.join(\"\\n\");\r\n                const lastUri = selectedUris[selectedUris.length - 1];\r\n                const lastItem = model.getItemByUri(lastUri);\r\n                if (lastItem && dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", selectedUrisString);\r\n                    const dragImage = this.#getDragImage(lastItem);\r\n                    if (dragImage) {\r\n                        dataTransfer.setDragImage(dragImage, -16, 0);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n        const model = this.getModel(targetTree)!;\r\n        const {sortFunction} = model;\r\n        if (targetItem) {\r\n            const {dataTransfer} = event;\r\n            if (dataTransfer) {\r\n                const targetUri = targetItem.dataset.uri!;\r\n                const targetItemModel = model.getItemByUri(targetUri)!;\r\n                const transferedUris = dataTransfer.getData(\"text/plain\").split(\"\\n\");\r\n                const targetIsWithin = transferedUris.some(uri_i => targetUri.startsWith(`${uri_i}/`) || uri_i == targetUri);\r\n                if (!targetIsWithin) {\r\n                    const transferedItems = <TreeItemModel[]>transferedUris.map(\r\n                        uri_i => model.getItemByUri(uri_i)\r\n                    ).filter(\r\n                        item_i => item_i !== null\r\n                    );\r\n                    const {type: targetType, parentItem: targetParentItem} = targetItemModel;\r\n                    const {childItems: targetList} = targetType == \"parent\" ?\r\n                        targetItemModel :\r\n                        targetParentItem ?\r\n                        targetParentItem :\r\n                        model;\r\n                    const targetItems = Array.from(targetList.values());\r\n                    targetItems.forEach((item_i) => {\r\n                        const sameLabelIndex = transferedItems.findIndex(item_j => item_j.label == item_i.label);\r\n                        if (sameLabelIndex > -1) {\r\n                            const doReplace = confirm(`Replace ${item_i.label}?`);\r\n                            if (doReplace) {\r\n                                targetList.remove(item_i);\r\n                            }\r\n                            else {\r\n                                transferedItems.copyWithin(sameLabelIndex, sameLabelIndex + 1);\r\n                                transferedItems.length--;\r\n                            }\r\n                        }\r\n                    });\r\n                    TreeItemList.from(transferedItems).remove();\r\n                    if (sortFunction) {\r\n                        targetList.beginChanges();\r\n                        targetList.append(...transferedItems);\r\n                        targetList.sort(sortFunction);\r\n                        targetList.endChanges();\r\n                    }\r\n                    else {\r\n                        targetList.insert(treeItemWidget.getPosInSet(targetItem), ...transferedItems);\r\n                    }\r\n                    \r\n                    const newElements = targetTree.querySelectorAll<HTMLElement>(`.treeitem:is(${\r\n                        transferedItems.map(item_i => `[data-uri=\"${item_i.uri}\"]`).join(\",\")\r\n                    })`);\r\n                    treeWidget.beginSelection(targetTree);\r\n                    newElements.forEach((element_i) => {\r\n                        treeItemWidget.setSelected(element_i, true);\r\n                    });\r\n                    treeWidget.endSelection(targetTree);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        const {clientX, clientY, currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n        const model = this.getModel(targetTree)!;\r\n        if (targetItem) {\r\n            const activeItem = model.getItemByUri(targetItem.dataset.uri!)!;\r\n            const menu = widget(\"menu\", {\r\n                properties: {\r\n                    contextual: true\r\n                },\r\n                slotted: [\r\n                    widget(\"menuitemgroup\", {\r\n                        slotted: [\r\n                            widget(\"menuitem\", {\r\n                                properties: {\r\n                                    label: \"Display\"\r\n                                },\r\n                                listeners: {\r\n                                    click: () => {\r\n                                        const selectedItems = TreeItemList.from(this.selectedItems(targetTree));\r\n                                        selectedItems.display();\r\n                                    }\r\n                                }\r\n                            }),\r\n                            widget(\"menuitem\", {\r\n                                properties: {\r\n                                    label: \"Delete\"\r\n                                },\r\n                                listeners: {\r\n                                    click: () => {\r\n                                        const selectedItems = TreeItemList.from(this.selectedItems(targetTree));\r\n                                        const {count} = selectedItems;\r\n                                        const doRemove = confirm(`Remove ${count} items?`);\r\n                                        if (doRemove) {\r\n                                            selectedItems.remove();\r\n                                        }\r\n                                        targetTree.focus();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    }),\r\n                    widget(\"menuitemgroup\", {\r\n                        slotted: [\r\n                            widget(\"menuitem\", {\r\n                                properties: {\r\n                                    type: \"checkbox\",\r\n                                    label: activeItem.visibility ? \"Hide\" : \"Show\"\r\n                                },\r\n                                listeners: {\r\n                                    click: () => {\r\n                                        const selectedItems = TreeItemList.from(\r\n                                            this.selectedItems(targetTree)\r\n                                        );\r\n                                        activeItem.visibility ?\r\n                                            selectedItems.hide() :\r\n                                            selectedItems.show();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ],\r\n                listeners: {\r\n                    close: () => {\r\n                        targetItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            });\r\n            targetTree.append(menu);\r\n            menuWidget.positionContextual(menu, clientX, clientY);\r\n            menu.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetElement = <HTMLElement>target;\r\n        if (targetElement.matches(\".treeitem\")) {\r\n            const targetItem = targetElement;\r\n            const toolbar = targetItem.querySelector<HTMLElement>(\".toolbar\");\r\n            if (toolbar) {\r\n                toolbar.tabIndex = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetElement = <HTMLElement>target;\r\n        if (targetElement.matches(\".treeitem\")) {\r\n            const targetItem = targetElement;\r\n            const toolbar = targetItem.querySelector<HTMLElement>(\".toolbar\");\r\n            if (toolbar) {\r\n                toolbar.tabIndex = -1;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        switch (key) {\r\n            case \"Delete\": {\r\n                const itemsList = TreeItemList.from(this.selectedItems(targetTree));\r\n                const {count} = itemsList;\r\n                const doRemove = confirm(`Remove ${count} items?`);\r\n                if (doRemove) {\r\n                    itemsList.remove();\r\n                }\r\n                targetTree.focus();\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}","import { AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEActionElement };\r\nexport { ActionType };\r\n\r\ninterface HTMLEActionElementConstructor {\r\n    prototype: HTMLEActionElement;\r\n    new(): HTMLEActionElement;\r\n}\r\n\r\ninterface HTMLEActionElement extends HTMLElement {\r\n    name: string;\r\n    value: string;\r\n    checked: boolean;\r\n    type: string;\r\n    disabled: boolean;\r\n    hotkey: string;\r\n\r\n    trigger(): void;\r\n    enable(): void;\r\n    disable(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"trigger\": Event;\r\n    }\r\n}\r\n\r\ntype ActionType = \"button\" | \"checkbox\" | \"radio\" | \"select\";\r\n\r\nclass HTMLEActionElementBase extends HTMLElement implements HTMLEActionElement {\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    hotkey!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"button\"})\r\n    type!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    checked!: boolean;\r\n\r\n    trigger(): void {\r\n        if (!this.disabled) {\r\n            switch (this.type) {\r\n                case \"checkbox\":\r\n                    this.checked = !this.checked;\r\n                    break;\r\n                case \"radio\":\r\n                    this.checked = true;\r\n                    break;\r\n            }\r\n            this.dispatchEvent(new Event(\"trigger\", {\r\n                bubbles: true\r\n            }));\r\n        }\r\n    }\r\n\r\n    enable(): void {\r\n        this.disabled = false;\r\n    }\r\n\r\n    disable(): void {\r\n        this.disabled = true;\r\n    }\r\n}\r\n\r\nvar HTMLEActionElement: HTMLEActionElementConstructor = HTMLEActionElementBase;","export { Key };\r\nexport { KeyModifier };\r\nexport { HotKey };\r\nexport { MouseButton };\r\n\r\nenum Key {\r\n    A = \"a\",\r\n    B = \"b\",\r\n    C = \"c\",\r\n    D = \"d\",\r\n    E = \"e\",\r\n    F = \"f\",\r\n    G = \"g\",\r\n    H = \"h\",\r\n    I = \"i\",\r\n    J = \"j\",\r\n    K = \"k\",\r\n    L = \"l\",\r\n    M = \"m\",\r\n    O = \"o\",\r\n    P = \"p\",\r\n    Q = \"q\",\r\n    R = \"r\",\r\n    S = \"s\",\r\n    T = \"t\",\r\n    U = \"u\",\r\n    V = \"v\",\r\n    W = \"w\",\r\n    X = \"x\",\r\n    Y = \"y\",\r\n    Z = \"z\",\r\n    ENTER = \"Enter\",\r\n    BACKSPACE = \"Backspace\",\r\n    ARROW_DOWN = \"ArrowDown\",\r\n    ARROW_LEFT = \"ArrowLeft\",\r\n    ARROW_RIGHT = \"ArrowRight\",\r\n    ARROW_UP = \"ArrowUp\",\r\n    SHIFT = \"Shift\"\r\n}\r\n\r\nenum KeyModifier {\r\n    Alt = \"Alt\",\r\n    Control = \"Control\",\r\n    Shift = \"Shift\"\r\n}\r\n\r\nenum MouseButton {\r\n    LEFT = 1,\r\n    WHEEL = 2,\r\n    RIGHT = 3,\r\n    FORWARD = 4,\r\n    BACK = 5\r\n}\r\n\r\nclass HotKey {\r\n    readonly key: Key;\r\n    readonly mod1?: KeyModifier;\r\n    readonly mod2?: KeyModifier;\r\n\r\n    constructor(key: Key, mod1?: KeyModifier, mod2?: KeyModifier) {\r\n        this.key = key;\r\n        this.mod1 = mod1;\r\n        this.mod2 = mod2;\r\n    }\r\n\r\n    toString(): string {\r\n        return `${this.mod1 ? `${this.#modifierString(this.mod1)}+` : \"\"}${this.mod2 ? `${this.#modifierString(this.mod2)}+` : \"\"}${(this.key.length == 1) ? this.key.toUpperCase() : this.key}`;\r\n    }\r\n\r\n    test(event: KeyboardEvent): boolean {\r\n        return (!this.mod1 || this.#testModifier(this.mod1, event)) && (!this.mod2 || this.#testModifier(this.mod2, event)) && event.key == this.key;\r\n    }\r\n\r\n    #modifierString(mod: KeyModifier): string {\r\n        switch (mod) {\r\n            case KeyModifier.Control:\r\n                return \"Ctrl\";\r\n            default:\r\n                return mod;\r\n        }\r\n    }\r\n\r\n    #testModifier(mod: KeyModifier, event: KeyboardEvent): boolean {\r\n        switch (mod) {\r\n            case \"Alt\":\r\n                return event.altKey;\r\n            case \"Control\":\r\n                return event.ctrlKey;\r\n            case \"Shift\":\r\n                return event.shiftKey;\r\n            default:\r\n                return true;\r\n        }\r\n    }\r\n}","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEGridCellElement };\r\n\r\ninterface HTMLEGridCellElementConstructor {\r\n    prototype: HTMLEGridCellElement;\r\n    new(): HTMLEGridCellElement;\r\n}\r\n\r\ninterface HTMLEGridCellElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n    headers: string;\r\n    posinset: number;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridcell\": HTMLEGridCellElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridcell\"\r\n})\r\nclass HTMLEGridCellElementBase extends HTMLElement implements HTMLEGridCellElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    headers!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridCellElement: HTMLEGridCellElementConstructor = HTMLEGridCellElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\n\r\nexport { HTMLEGridRowGroupElement };\r\n\r\ninterface HTMLEGridRowGroupElementConstructor {\r\n    prototype: HTMLEGridRowGroupElement;\r\n    new(): HTMLEGridRowGroupElement;\r\n}\r\n\r\ninterface HTMLEGridRowGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrowgroup\": HTMLEGridRowGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrowgroup\"\r\n})\r\nclass HTMLEGridRowGroupElementBase extends HTMLElement implements HTMLEGridRowGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                            /*display: flex;\r\n                            flex-direction: column;*/\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowGroupElement: HTMLEGridRowGroupElementConstructor = HTMLEGridRowGroupElementBase;","import { CustomElement, AttributeProperty, QueryProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\n\r\nexport { HTMLEMenuItemElement };\r\nexport { EMenuItem };\r\n\r\ninterface HTMLEMenuItemElementConstructor {\r\n    prototype: HTMLEMenuItemElement;\r\n    new(): HTMLEMenuItemElement;\r\n}\r\n\r\ninterface HTMLEMenuItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    value: string;\r\n    hotkey: string;\r\n    disabled: boolean;\r\n    checked: boolean;\r\n    expanded: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitem\": HTMLEMenuItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitem\"\r\n})\r\nclass HTMLEMenuItemElementBase extends HTMLElement implements HTMLEMenuItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    hotkey!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    checked!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"button\", observed: true})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"icon\"\r\n                }\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"label\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"arrow\"\r\n                }\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n    }\r\n\r\n    @QueryProperty({selector: \":scope > e-menu[slot=menu]\"})\r\n    readonly menu!: HTMLEMenuElement | null;\r\n\r\n    toggle(force?: boolean): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                const expand = force ?? !expanded;\r\n                this.expanded = expand;\r\n                if (expand) {\r\n                    this.#positionMenu();\r\n                }\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {type} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (!this.expanded) {\r\n                    this.expanded = true;\r\n                    this.#positionMenu();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {type} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (this.expanded) {\r\n                    this.expanded = false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const {type} = this;\r\n            if (type == \"menu\") {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const closestMenu = this.closest(\"e-menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    const overflowX = itemRight + menuWidth - clientWidth;\r\n                    const overflowY = itemTop + menuHeight - clientHeight;\r\n                    menuStyle.setProperty(\"left\", `${\r\n                        overflowX > 0 ?\r\n                        itemLeft - menuWidth - closestMenuLeft :\r\n                        itemRight - closestMenuLeft\r\n                    }px`);\r\n                    const menuComputedStyle = window.getComputedStyle(menu);\r\n                    const {paddingTop, paddingBottom} = menuComputedStyle;\r\n                    const menuPaddingTop = parseFloat(paddingTop);\r\n                    const menuPaddingBottom = parseFloat(paddingBottom);\r\n                    menuStyle.setProperty(\"top\", `${\r\n                        overflowY > 0 ?\r\n                        itemBottom - menuHeight - closestMenuTop + menuPaddingBottom :\r\n                        itemTop - closestMenuTop - menuPaddingTop\r\n                    }px`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target == this) {\r\n            const {type} = this;\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.checked = !this.checked;\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.checked = true;\r\n                    break;\r\n                }\r\n                case \"menu\":\r\n                case \"submenu\": {\r\n                    this.toggle();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemElement: HTMLEMenuItemElementConstructor = HTMLEMenuItemElementBase;\r\n\r\ninterface EMenuItemConstructor {\r\n    prototype: HTMLEMenuItemElement;\r\n    new(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    button(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    checkbox(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    radio(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    menu(init: {\r\n        name: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    submenu(init: {\r\n        name: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n}\r\n\r\nvar EMenuItem = <EMenuItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menu} = init;\r\n        if (menu) {\r\n            menu.slot = \"menu\";\r\n        }\r\n        return element(\"e-menuitem\", {\r\n            attributes: {\r\n                tabindex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type\r\n            },\r\n            children: menu ? [\r\n                label,\r\n                menu\r\n            ] : [\r\n                label\r\n            ],\r\n            listeners: {\r\n                trigger: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemElement.prototype,\r\n        button(init: {\r\n            name: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menu(init: {\r\n            name: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"menu\"\r\n            });\r\n        },\r\n        submenu(init: {\r\n            name: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"submenu\"\r\n            });\r\n        }\r\n    }\r\n);","import { element, CustomElement, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuItemElement, EMenuItem } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuItemGroupElement };\r\nexport { EMenuItemGroup };\r\n\r\ninterface HTMLEMenuItemGroupElementConstructor {\r\n    prototype: HTMLEMenuItemGroupElement;\r\n    new(): HTMLEMenuItemGroupElement;\r\n}\r\n\r\ninterface HTMLEMenuItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    label: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitemgroup\": HTMLEMenuItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitemgroup\"\r\n})\r\nclass HTMLEMenuItemGroupElementBase extends HTMLElement implements HTMLEMenuItemGroupElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            flex-direction: column;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEMenuItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEMenuItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            //item_i.index = i;\r\n        });\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\":\r\n                const label = this.shadowRoot.querySelector(\"[part=label]\");\r\n                if (label) {\r\n                    label.textContent = newValue;\r\n                }\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemGroupElement: HTMLEMenuItemGroupElementConstructor = HTMLEMenuItemGroupElementBase;\r\n\r\ninterface EMenuItemGroupConstructor {\r\n    prototype: HTMLEMenuItemGroupElement;\r\n    new(init: {\r\n        name?: string;\r\n        items: HTMLEMenuItemElement[];\r\n    }): HTMLEMenuItemGroupElement;\r\n    radios(init: {name: string, items: {label: string, value: string}[]}): HTMLEMenuItemGroupElement;\r\n}\r\n\r\nvar EMenuItemGroup = <EMenuItemGroupConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string,\r\n        items: HTMLEMenuItemElement[]\r\n    }) {\r\n        const {name, items} = init;\r\n        return element(\"e-menuitemgroup\", {\r\n            attributes: {\r\n                name: name\r\n            },\r\n            children: items\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemGroupElement.prototype,\r\n        radios: (init: {\r\n            name: string,\r\n            items: {\r\n                label: string,\r\n                value: string\r\n            }[]\r\n        }) => {\r\n            const {name, items} = init;\r\n            return element(\"e-menuitemgroup\", {\r\n                attributes: {\r\n                    name: name\r\n                },\r\n                children: items.map(\r\n                    ({label, value}) => new EMenuItem({name, label, type: \"radio\", value})\r\n                )\r\n            });\r\n        }\r\n    }\r\n);","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuElement };\r\nexport { EMenu };\r\n\r\ninterface HTMLEMenuElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    items(): HTMLEMenuItemElement[];\r\n    name: string;\r\n    contextual: boolean;\r\n    positionContextual(x: number, y: number): void;\r\n}\r\n\r\ninterface HTMLEMenuElementConstructor {\r\n    prototype: HTMLEMenuElement;\r\n    new(): HTMLEMenuElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menu\": HTMLEMenuElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar toggleTimeouts: WeakMap<HTMLEMenuItemElement, {clear(): void;}>;\r\n\r\n@CustomElement({\r\n    name: \"e-menu\"\r\n})\r\nclass HTMLEMenuElementBase extends HTMLElement implements HTMLEMenuElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    items(): HTMLEMenuItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        ));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        const {activeIndex} = this;\r\n        return this.querySelector<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem:focus-within\"\r\n        ) ?? activeIndex > -1 ? this.items()[activeIndex] ?? null : null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    contextual!: boolean;\r\n\r\n    #walker: TreeWalker;\r\n    #activeIndex: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        toggleTimeouts = new WeakMap();\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        this.#activeIndex = -1;\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"mouseout\", this.#handleMouseOutEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    positionContextual(x: number, y: number): void {\r\n        const {style} = this;\r\n        const {width: menuWidth, height: menuHeight} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        const left = x + scrollX;\r\n        const top = y + scrollY;\r\n        const {clientWidth, clientHeight} = document.body;\r\n        const overflowX = left + menuWidth - clientWidth;\r\n        const overflowY = top + menuHeight - clientHeight;\r\n        style.setProperty(\"left\", `${overflowX > 0 ? left - menuWidth : left}px`);\r\n        style.setProperty(\"top\", `${overflowY > 0 ? top - menuHeight : top}px`);\r\n    }\r\n\r\n    #collapseSubmenus(): void {\r\n        this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem[expanded]\"\r\n        )\r\n        .forEach((item_i) => {\r\n            item_i.collapse();\r\n        });\r\n    }\r\n\r\n    #isClosestMenu(target: Element): boolean {\r\n        return target.closest(\":is(e-menu)\") == this;\r\n    }\r\n\r\n    #nearestItem(target: Element): HTMLEMenuItemElement | null {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextNode();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        return menu instanceof HTMLEMenuElementBase ?\r\n            menu.#firstItem() :\r\n            null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        if (item !== null) {\r\n            this.#activeIndex = this.items().indexOf(item);\r\n        }\r\n    }\r\n\r\n    async #setItemTimeout(item: HTMLEMenuItemElement, delay?: number): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => {\r\n                resolve(undefined);\r\n            }, delay ?? 0);\r\n            toggleTimeouts.set(item, {\r\n                clear: () => {\r\n                    clearTimeout(timeout);\r\n                    reject();\r\n                }\r\n            });\r\n        }).then(() => {\r\n            toggleTimeouts.delete(item);\r\n        });\r\n    }\r\n\r\n    #clearItemTimeout(item: HTMLEMenuItemElement): void {\r\n        const timeout = toggleTimeouts.get(item);\r\n        if (typeof timeout !== \"undefined\") {\r\n            toggleTimeouts.delete(item);\r\n            timeout.clear();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const {contextual} = this;\r\n            if (contextual) {\r\n                try {\r\n                    this.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const isClosestMenu = this.#isClosestMenu(target);\r\n                if (isClosestMenu) {\r\n                    const {type, name, value} = target;\r\n                    if (type == \"radio\") {\r\n                        this.querySelectorAll<HTMLEMenuItemElement>(\r\n                            `:is(:scope, :scope > e-menuitemgroup) > e-menuitem[type=radio][name=${name}]`\r\n                        )\r\n                        .forEach((radio_i) => {\r\n                            radio_i.checked = radio_i.value == value;\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem) {\r\n                this.#setActiveItem(nearestItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const {contextual} = this;\r\n            if (contextual) {\r\n                try {\r\n                    this.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const {activeItem} = this;\r\n                if (activeItem?.expanded) {\r\n                    activeItem.collapse();\r\n                }\r\n                this.#setActiveItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.#firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem() :\r\n                    this.#firstItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                firstItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                lastItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            activeItem.expand();\r\n                            if (activeItem.expanded) {\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            if (!activeItem.expanded) {\r\n                                activeItem.expand();\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                                event.stopPropagation();\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOutEvent(event: MouseEvent): void {\r\n        const {target, relatedTarget} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem !== null) {\r\n                if (nearestItem.type == \"submenu\" &&\r\n                    !nearestItem.expanded) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLEMenuElement\r\n                ) == this;\r\n                if (isTargetClosestMenu) {\r\n                    const {activeItem} = this;\r\n                    if (activeItem?.type == \"submenu\" &&\r\n                        activeItem.expanded) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, 400)\r\n                            .then(() => {\r\n                                activeItem.collapse();\r\n                            })\r\n                            .catch(() => undefined);\r\n                    }\r\n                    const {clientX, clientY} = event;\r\n                    const {left, right, top, bottom} = this.getBoundingClientRect();\r\n                    const intersectsWithMouse = !(\r\n                        left > clientX || right < clientX || top > clientY || bottom < clientY\r\n                    );\r\n                    const containsRelatedTarget = this.contains(<Node>relatedTarget);\r\n                    if (intersectsWithMouse && containsRelatedTarget) {\r\n                        if (relatedTarget instanceof HTMLEMenuElement && relatedTarget !== this) {\r\n                            relatedTarget.focus({preventScroll: true});\r\n                        }\r\n                        else {\r\n                            this.focus({preventScroll: true});\r\n                            this.#setActiveItem(null);\r\n                        }\r\n                    }\r\n                    if (!intersectsWithMouse) {\r\n                        this.focus({preventScroll: true});\r\n                        this.#setActiveItem(null);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem !== null) {\r\n                if (nearestItem.type == \"submenu\" && nearestItem.expanded) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLEMenuElement\r\n                ) == this;\r\n                if (isTargetClosestMenu) {\r\n                    const {activeItem} = this;\r\n                    if (activeItem?.type == \"submenu\" &&\r\n                        activeItem.expanded && \r\n                        !activeItem.contains(<Node>target)) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, 400)\r\n                            .then(() => {\r\n                                activeItem.collapse();\r\n                            })\r\n                            .catch(() => undefined);\r\n                    }\r\n                    this.#setActiveItem(nearestItem);\r\n                    nearestItem.focus({preventScroll: true});\r\n                    if (nearestItem.type == \"submenu\") {\r\n                        if (!nearestItem.expanded) {\r\n                            this.#clearItemTimeout(nearestItem);\r\n                            this.#setItemTimeout(nearestItem, 200)\r\n                                .then(() => {\r\n                                    const {activeItem} = this;\r\n                                    this.#collapseSubmenus();\r\n                                    if (activeItem) {\r\n                                        this.#clearItemTimeout(activeItem);\r\n                                        activeItem.expand();\r\n                                        activeItem.menu?.focus({preventScroll: true});\r\n                                    }\r\n                                })\r\n                                .catch(() => undefined);\r\n                        }\r\n                        else {\r\n                            nearestItem.menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuElement: HTMLEMenuElementConstructor = HTMLEMenuElementBase;\r\n\r\ninterface EMenuConstructor {\r\n    prototype: HTMLEMenuElement;\r\n    new(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }): HTMLEMenuElement;\r\n}\r\n\r\nvar EMenu = <EMenuConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }) {\r\n        const {name, children} = init;\r\n        return element(\"e-menu\", {\r\n            attributes: {\r\n                name: name,\r\n                tabindex: -1,\r\n            },\r\n            children: children\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuElement.prototype,\r\n    }\r\n);","import { AttributeProperty, CustomElement, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\n\r\nexport { HTMLEGridRowElement };\r\n\r\ninterface HTMLEGridRowElementConstructor {\r\n    prototype: HTMLEGridRowElement;\r\n    new(): HTMLEGridRowElement;\r\n}\r\n\r\ninterface HTMLEGridRowElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    active: boolean;\r\n    selected: boolean;\r\n    posinset: number;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrow\": HTMLEGridRowElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrow\"\r\n})\r\nclass HTMLEGridRowElementBase extends HTMLElement implements HTMLEGridRowElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    #menu: HTMLEMenuElement | null;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row;\r\n                        }\r\n\r\n                        :host([droptarget]) {\r\n                            background-color: gainsboro;\r\n                        }\r\n                        \r\n                        :host(:hover) {\r\n                            background-color: rgba(135, 206, 250, 0.2);\r\n                        }\r\n\r\n                        :host([active]) {\r\n                            outline: 1px solid rgb(135, 206, 250);\r\n                            outline-offset: -1px;\r\n                        }\r\n\r\n                        :host([selected]) {\r\n                            background-color: rgba(135, 206, 250, 0.4);\r\n                            outline: 1px solid rgb(135, 206, 250);\r\n                            outline-offset: -1px;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\"),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#menu = null;\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"menu\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#menu = element instanceof HTMLEMenuElement ? element : null;\r\n                break;\r\n            }\r\n            default: {\r\n                const assignedCells = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n                    .assignedElements()\r\n                    .filter(\r\n                        element_i => element_i instanceof HTMLEGridCellElement\r\n                    );\r\n                assignedCells.forEach((cell_i, i) => {\r\n                    cell_i.posinset = i;\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowElement: HTMLEGridRowElementConstructor = HTMLEGridRowElementBase;","import { HTMLEGridElement } from \"./Grid\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\n\r\nexport { HTMLEGridCellCollection };\r\n\r\ninterface HTMLEGridCellCollectionConstructor {\r\n    prototype: HTMLEGridCellCollection;\r\n    new(root: HTMLElement): HTMLEGridCellCollection;\r\n}\r\n\r\ninterface HTMLEGridCellCollection {\r\n    length: number;\r\n    item(index: number): HTMLEGridCellElement | null;\r\n    namedItem(name: string): HTMLEGridCellElement | null;\r\n    values(): IterableIterator<HTMLEGridCellElement>;\r\n}\r\n\r\nclass HTMLEGridCellCollectionBase implements HTMLEGridCellCollection {\r\n    #walker: TreeWalker;\r\n\r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridCellElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEGridCellElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEGridCellElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEGridCellElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEGridCellElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEGridCellElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEGridCellElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEGridCellElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEGridCellElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridCellCollection: HTMLEGridCellCollectionConstructor =  HTMLEGridCellCollectionBase;","import { HTMLEGridElement } from \"./Grid\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\n\r\nexport { HTMLEGridRowCollection };\r\n\r\ninterface HTMLEGridRowCollectionConstructor {\r\n    prototype: HTMLEGridRowCollection;\r\n    new(root: HTMLElement): HTMLEGridRowCollection;\r\n}\r\n\r\ninterface HTMLEGridRowCollection {\r\n    length: number;\r\n    item(index: number): HTMLEGridRowElement | null;\r\n    namedItem(name: string): HTMLEGridRowElement | null;\r\n    values(): IterableIterator<HTMLEGridRowElement>;\r\n}\r\n\r\nclass HTMLEGridRowCollectionBase implements HTMLEGridRowCollection {\r\n    #walker: TreeWalker;\r\n    \r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEGridRowElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEGridRowElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEGridRowElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEGridRowElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEGridRowElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEGridRowElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEGridRowElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEGridRowElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowCollection: HTMLEGridRowCollectionConstructor =  HTMLEGridRowCollectionBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\n\r\nexport { HTMLEGridBodyElement };\r\n\r\ninterface HTMLEGridBodyElementConstructor {\r\n    prototype: HTMLEGridBodyElement;\r\n    new(): HTMLEGridBodyElement;\r\n}\r\n\r\ninterface HTMLEGridBodyElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridbody\": HTMLEGridBodyElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridbody\"\r\n})\r\nclass HTMLEGridBodyElementBase extends HTMLElement implements HTMLEGridBodyElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridBodyElement: HTMLEGridBodyElementConstructor = HTMLEGridBodyElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridHeadElement } from \"./GridHead\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\n\r\nexport { HTMLEGridElement };\r\n\r\ninterface HTMLEGridElementConstructor {\r\n    prototype: HTMLEGridElement;\r\n    new(): HTMLEGridElement;\r\n}\r\n\r\ninterface HTMLEGridElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly body: HTMLEGridBodyElement | null;\r\n    readonly head: HTMLEGridHeadElement | null\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n    readonly activeCell: HTMLEGridCellElement | null;\r\n    readonly activeCellIndex: number;\r\n    readonly activeRow: HTMLEGridRowElement | null;\r\n    readonly activeRowIndex: number;\r\n    selectby: \"cell\" | \"row\";\r\n    name: string;\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    clearSelection(): void;\r\n    selectedCells(): HTMLEGridCellElement[];\r\n    selectedRows(): HTMLEGridRowElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-grid\": HTMLEGridElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-grid\"\r\n})\r\nclass HTMLEGridElementBase extends HTMLElement implements HTMLEGridElement {\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    get activeCellIndex(): number {\r\n        return this.#activeCellIndex;\r\n    }\r\n\r\n    get activeCell(): HTMLEGridCellElement | null {\r\n        return this.cells.item(this.#activeCellIndex) ?? null;\r\n    }\r\n\r\n    get activeRowIndex(): number {\r\n        return this.#activeRowIndex;\r\n    }\r\n\r\n    get activeRow(): HTMLEGridRowElement | null {\r\n        return this.rows.item(this.#activeRowIndex) ?? null;\r\n    }\r\n\r\n    get body(): HTMLEGridBodyElement | null {\r\n        return this.querySelector<HTMLEGridBodyElement>(\":scope > e-gridbody\");\r\n    }\r\n\r\n    get head(): HTMLEGridHeadElement | null {\r\n        return this.querySelector<HTMLEGridHeadElement>(\":scope > e-gridhead\");\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"cell\"})\r\n    selectby!: \"cell\" | \"row\";\r\n\r\n    #activeCellIndex: number;\r\n    #activeRowIndex: number;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #cellsWalker: TreeWalker;\r\n    #rowsWalker: TreeWalker;\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#cellsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#cellsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#rowsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#rowsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeCellIndex = -1;\r\n        this.#activeRowIndex = -1;\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.#clearCellsSelection();\r\n        this.#clearRowsSelection();\r\n    }\r\n\r\n    selectedCells(): HTMLEGridCellElement[] {\r\n        return Array.from(this.querySelectorAll(\"e-gridcell[selected]\"));\r\n    }\r\n\r\n    selectedRows(): HTMLEGridRowElement[] {\r\n        return Array.from(this.querySelectorAll(\"e-gridrow[selected]\"));\r\n    }\r\n\r\n    #cellsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridCellElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #rowsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridRowElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getCellsRange(from: HTMLEGridCellElement, to: HTMLEGridCellElement): HTMLEGridCellElement[] {\r\n        const cells = Array.from(this.cells.values());\r\n        const fromIndex = cells.indexOf(from);\r\n        const toIndex = cells.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return cells.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #getRowsRange(from: HTMLEGridRowElement, to: HTMLEGridRowElement): HTMLEGridRowElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleRow = this.#nextRow(from);\r\n            while (nextVisibleRow && nextVisibleRow !== to) {\r\n                range.push(nextVisibleRow);\r\n                nextVisibleRow = this.#nextRow(nextVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleRow = this.#previousRow(from);\r\n            while (previousVisibleRow && previousVisibleRow !== to) {\r\n                range.push(previousVisibleRow);\r\n                previousVisibleRow = this.#previousRow(previousVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setCellsSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((selectedCell_i) => {\r\n            if (!cells.includes(selectedCell_i)) {\r\n                selectedCell_i.selected = false;\r\n            }\r\n        });\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setRowsSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((selectedRow_i) => {\r\n            if (!rows.includes(selectedRow_i)) {\r\n                selectedRow_i.selected = false;\r\n            }\r\n        });\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addCellsToSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addRowsToSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeCellsFromSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        cells.forEach((cell_i) => {\r\n            if (selectedCells.includes(cell_i)) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeRowsFromSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        rows.forEach((row_i) => {\r\n            if (selectedRows.includes(row_i)) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearCellsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((cell_i) => {\r\n            if (cell_i.selected) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearRowsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((row_i) => {\r\n            if (row_i.selected) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveCell(cell: HTMLEGridCellElement | null): void {\r\n        const {activeCell, cells} = this;\r\n        if (activeCell !== null && activeCell !== cell) {\r\n            activeCell.active = false;\r\n            activeCell.tabIndex = -1;\r\n        }\r\n        else if (cell !== null) {\r\n            const cellsWalker = this.#cellsWalker;\r\n            cellsWalker.currentNode = cell;\r\n            cell.active = true;\r\n            cell.tabIndex = 0;\r\n            const closestRow = this.#closestRow(cell);\r\n            if (closestRow) {\r\n                this.#setActiveRow(closestRow);\r\n            }\r\n            this.#activeCellIndex = Array.from(cells.values()).indexOf(cell);\r\n        }\r\n        else {\r\n            this.#activeCellIndex = -1;\r\n        }\r\n    }\r\n\r\n    #setActiveRow(row: HTMLEGridRowElement | null): void {\r\n        const {activeRow, rows} = this;\r\n        if (activeRow !== null && activeRow !== row) {\r\n            activeRow.active = false;\r\n            activeRow.tabIndex = -1;\r\n        }\r\n        else if (row !== null) {\r\n            const rowsWalker = this.#rowsWalker;\r\n            rowsWalker.currentNode = row;\r\n            row.active = true;\r\n            row.tabIndex = 0;\r\n            this.#activeRowIndex = Array.from(rows.values()).indexOf(row);\r\n        }\r\n        else {\r\n            this.#activeRowIndex = -1;\r\n        }\r\n    }\r\n\r\n    #firstCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.firstChild();\r\n    }\r\n\r\n    #lastCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.lastChild();\r\n    }\r\n\r\n    #previousCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.previousNode();\r\n    }\r\n\r\n    #nextCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.nextNode();\r\n    }\r\n\r\n    #closestRow(cell: HTMLEGridCellElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = cell;\r\n        return <HTMLEGridRowElement | null>rowsWalker.parentNode();\r\n    }\r\n\r\n    #firstRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.firstChild();\r\n    }\r\n\r\n    #lastRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.lastChild();\r\n    }\r\n\r\n    #previousRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.previousNode();\r\n    }\r\n\r\n    #nextRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.nextNode();\r\n    }\r\n\r\n    #topCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const {cells: closestRowCells} = closestRow;\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const previousRow = this.#previousRow(closestRow);\r\n            if (previousRow) {\r\n                const {cells: previousRowCells} = previousRow;\r\n                return previousRowCells.item(\r\n                    Math.min(cellIndex, previousRowCells.length)\r\n                );\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #bottomCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const {cells: closestRowCells} = closestRow;\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const nextRow = this.#nextRow(closestRow);\r\n            if (nextRow) {\r\n                const {cells: nextRowCells} = nextRow;\r\n                return nextRowCells.item(\r\n                    Math.min(cellIndex, nextRowCells.length)\r\n                );\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent) {\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const composedPath = event.composedPath();\r\n                const targetCell = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridCellElement\r\n                ) : null;\r\n                if (targetCell instanceof HTMLEGridCellElement) {\r\n                    const selectedCells = this.selectedCells();\r\n                    if (!selectedCells.includes(targetCell)) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    targetCell.focus({preventScroll: true});\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const composedPath = event.composedPath();\r\n                const targetRow = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridRowElement\r\n                ) : null;\r\n                if (targetRow instanceof HTMLEGridRowElement) {\r\n                    const selectedRows = this.selectedRows();\r\n                    if (!selectedRows.includes(targetRow)) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    targetRow.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {ctrlKey, shiftKey} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const composedPath = event.composedPath();\r\n                const targetCell = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridCellElement\r\n                ) : null;\r\n                const selectedCells = this.selectedCells();\r\n                if (targetCell instanceof HTMLEGridCellElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetCell.selected ?\r\n                            this.#addCellsToSelection(targetCell) :\r\n                            this.#removeCellsFromSelection(targetCell);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedCell = selectedCells[selectedCells.length - 1];\r\n                        if (lastSelectedCell) {\r\n                            const range = this.#getCellsRange(\r\n                                lastSelectedCell,\r\n                                targetCell\r\n                            );\r\n                            if (range) {\r\n                                selectedCells.includes(targetCell) ?\r\n                                    this.#removeCellsFromSelection(...range) :\r\n                                    this.#addCellsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setCellsSelection(targetCell);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const selectedRows = this.selectedRows();\r\n                const composedPath = event.composedPath();\r\n                const targetRow = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridRowElement\r\n                ) : null;\r\n                if (targetRow instanceof HTMLEGridRowElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetRow.selected ?\r\n                            this.#addRowsToSelection(targetRow) :\r\n                            this.#removeRowsFromSelection(targetRow);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedRow = selectedRows[selectedRows.length - 1];\r\n                        if (lastSelectedRow) {\r\n                            const range = this.#getRowsRange(\r\n                                lastSelectedRow,\r\n                                targetRow\r\n                            );\r\n                            if (range) {\r\n                                selectedRows.includes(targetRow) ?\r\n                                    this.#removeRowsFromSelection(...range) :\r\n                                    this.#addRowsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setRowsSelection(targetRow);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {selectby, activeCell, activeRow} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    switch (selectby) {\r\n                        case \"cell\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const firstCell = firstRow ? this.#firstCell(firstRow) : null;\r\n                            const lastRow = this.#lastRow();\r\n                            const lastCell = lastRow ? this.#lastCell(lastRow) : null;\r\n                            if (firstCell && lastCell) {\r\n                                const range = this.#getCellsRange(firstCell, lastCell);\r\n                                if (range) {\r\n                                    this.#setCellsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"row\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const lastRow = this.#lastRow();\r\n                            if (firstRow && lastRow) {\r\n                                const range = this.#getRowsRange(firstRow, lastRow);\r\n                                if (range) {\r\n                                    this.#setRowsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const previousCell = this.#previousCell(activeCell);\r\n                        if (previousCell) {\r\n                            previousCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousCell.selected ?\r\n                                    this.#removeCellsFromSelection(previousCell) :\r\n                                    this.#addCellsToSelection(previousCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const nextCell = this.#nextCell(activeCell);\r\n                        if (nextCell) {\r\n                            nextCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextCell.selected ?\r\n                                    this.#removeCellsFromSelection(nextCell) :\r\n                                    this.#addCellsToSelection(nextCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const firstRow = activeRow ?? this.#firstRow();\r\n                        const topCell = activeCell ?\r\n                            this.#topCell(activeCell) :\r\n                            firstRow ?\r\n                            this.#firstCell(firstRow) :\r\n                            null;\r\n                        if (topCell) {\r\n                            topCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                topCell.selected ?\r\n                                    this.#removeCellsFromSelection(topCell) :\r\n                                    this.#addCellsToSelection(topCell);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const previousRow = activeRow ?\r\n                            this.#previousRow(activeRow) :\r\n                            this.#firstRow();\r\n                        if (previousRow) {\r\n                            previousRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousRow.selected ?\r\n                                    this.#removeRowsFromSelection(previousRow) :\r\n                                    this.#addRowsToSelection(previousRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const lastRow = activeRow ?? this.#lastRow();\r\n                        const bottomCell = activeCell ?\r\n                            this.#bottomCell(activeCell) :\r\n                            lastRow ?\r\n                            this.#lastCell(lastRow) :\r\n                            null;\r\n                            if (bottomCell) {\r\n                                bottomCell.focus({preventScroll: true});\r\n                                const {shiftKey} = event;\r\n                                if (shiftKey) {\r\n                                    bottomCell.selected ?\r\n                                        this.#removeCellsFromSelection(bottomCell) :\r\n                                        this.#addCellsToSelection(bottomCell);\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"row\": {\r\n                        const nextRow = activeRow ?\r\n                            this.#nextRow(activeRow) :\r\n                            this.#lastRow();\r\n                        if (nextRow) {\r\n                            nextRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextRow.selected ?\r\n                                    this.#removeRowsFromSelection(nextRow) :\r\n                                    this.#addRowsToSelection(nextRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const firstCell = this.#firstCell(activeRow);\r\n                            if (firstCell) {\r\n                                firstCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const firstRow = this.#firstRow();\r\n                        if (firstRow) {\r\n                            firstRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const lastCell = this.#lastCell(activeRow);\r\n                            if (lastCell) {\r\n                                lastCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const lastRow = this.#lastRow();\r\n                        if (lastRow) {\r\n                            lastRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeCell) {\r\n                            this.#setCellsSelection(activeCell);\r\n                            activeCell.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        if (activeRow) {\r\n                            this.#setRowsSelection(activeRow);\r\n                            activeRow.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        this.#clearCellsSelection();\r\n                        this.#setActiveCell(null);\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        this.#clearRowsSelection();\r\n                        this.#setActiveRow(null);\r\n                        break;\r\n                    }\r\n                }\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const {activeCell} = this;\r\n                if (activeCell && relatedTarget !== activeCell) {\r\n                    activeCell.focus();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const {activeRow} = this;\r\n                if (activeRow && relatedTarget !== activeRow) {\r\n                    activeRow.focus();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                if (target instanceof HTMLEGridCellElement) {\r\n                    this.#setActiveCell(target);\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                if (target instanceof HTMLEGridRowElement) {\r\n                    this.#setActiveRow(target);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedRows = <HTMLEGridRowElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridRowElement\r\n            );\r\n            assignedRows.forEach((row_i, i) => {\r\n                row_i.posinset = i;\r\n            });\r\n    }\r\n}\r\n\r\nvar HTMLEGridElement: HTMLEGridElementConstructor = HTMLEGridElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\n\r\nexport { HTMLEGridHeadElement };\r\n\r\ninterface HTMLEGridHeadElementConstructor {\r\n    prototype: HTMLEGridHeadElement;\r\n    new(): HTMLEGridHeadElement;\r\n}\r\n\r\ninterface HTMLEGridHeadElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridhead\": HTMLEGridHeadElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridhead\"\r\n})\r\nclass HTMLEGridHeadElementBase extends HTMLElement implements HTMLEGridHeadElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                        }\r\n                    `\r\n                    ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridHeadElement: HTMLEGridHeadElementConstructor = HTMLEGridHeadElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuBarElement };\r\n\r\ninterface HTMLEMenuBarElementConstructor {\r\n    prototype: HTMLEMenuBarElement;\r\n    new(): HTMLEMenuBarElement;\r\n}\r\n\r\ninterface HTMLEMenuBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    items(): HTMLEMenuItemElement[];\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    expanded: boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menubar\": HTMLEMenuBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menubar\"\r\n})\r\nclass HTMLEMenuBarElementBase extends HTMLElement implements HTMLEMenuBarElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    #activeIndex: number;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    items(): HTMLEMenuItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        ));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        const {activeIndex} = this;\r\n        return this.querySelector<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem:focus-within\"\r\n        ) ?? activeIndex > -1 ? this.items()[activeIndex] ?? null : null;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLEMenuItemElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        const {activeItem, expanded} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.collapse();\r\n        }\r\n        if (item !== null) {\r\n            if (expanded) {\r\n                item.expand();\r\n            }\r\n            this.#activeIndex = this.items().indexOf(item);\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    get #items(): HTMLEMenuItemElement[] {\r\n        return Array.from(\r\n            this.querySelectorAll(\":is(:scope, :scope > e-menuitemgroup) > e-menuitem\")\r\n        );\r\n    }\r\n\r\n    #isClosestMenu(target: Element): boolean {\r\n        return target.closest(\":is(e-menubar, e-menu)\") == this;\r\n    }\r\n\r\n    #nearestItem(target: Element): HTMLEMenuItemElement | null {\r\n        return this.#items.find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n    \r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof Element) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            this.#setActiveItem(nearestItem);\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, relatedTarget} = event;\r\n        if (target instanceof HTMLElement && !target.contains(<Element>relatedTarget)) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem) {\r\n                nearestItem.collapse();\r\n            }\r\n        }\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.expanded = false;\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {expanded, activeItem} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu && target !== activeItem && expanded) {\r\n                const {menu} = target;\r\n                if (menu) {\r\n                    target.expand();\r\n                    menu.focus({preventScroll: true});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {expanded, activeItem} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu) {\r\n                const isExpanded = !expanded;\r\n                this.expanded = isExpanded;\r\n                if (isExpanded) {\r\n                    if (activeItem && !activeItem.expanded) {\r\n                        activeItem.expand();\r\n                    }\r\n                    const {menu} = target;\r\n                    menu?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true})\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded} = this;\r\n        let {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.#firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem() : \r\n                    this.#lastItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    this.expanded = !expanded;\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.expanded = false;\r\n                    if (activeItem) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /*#handleTriggerEvent(): void {\r\n        const {activeItem} = this;\r\n        if (activeItem?.expanded) {\r\n            activeItem.collapse();\r\n        }\r\n        this.expanded = false;\r\n        this.focus({preventScroll: true});\r\n    }*/\r\n}\r\n\r\nvar HTMLEMenuBarElement: HTMLEMenuBarElementConstructor = HTMLEMenuBarElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuButtonElement };\r\nexport { EMenuButton };\r\n\r\ninterface HTMLEMenuButtonElementConstructor {\r\n    prototype: HTMLEMenuButtonElement;\r\n    new(): HTMLEMenuButtonElement;\r\n}\r\n\r\ninterface HTMLEMenuButtonElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    readonly firstItem: HTMLEMenuItemElement | null;\r\n    name: string;\r\n    disabled: boolean;\r\n    expanded: boolean;\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-menubutton\"\r\n})\r\nclass HTMLEMenuButtonElementBase extends HTMLElement implements HTMLEMenuButtonElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    #menu: HTMLEMenuElement | null;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#menu = null;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"icon\"\r\n                        }\r\n                    }),\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"label\"\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n\r\n\r\n    toggle(force?: boolean): void {\r\n        const expand = force ?? !this.expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n\r\n    expand(): void {\r\n        if (!this.expanded) {\r\n            this.expanded = true;\r\n            this.#positionMenu();\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        if (this.expanded) {\r\n            this.expanded = false;\r\n        }\r\n    }\r\n\r\n    get firstItem(): HTMLEMenuItemElement | null {\r\n        return this.querySelector<HTMLEMenuItemElement>(\r\n            \":scope > :is(e-menu, e-menu > e-menuitemgroup) > e-menuitem\"\r\n        );\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const overflowX = itemRight + menuWidth - clientWidth;\r\n            const overflowY = itemTop + menuHeight - clientHeight;\r\n            menuStyle.setProperty(\"left\", `${\r\n                overflowX > 0 ?\r\n                scrollX + itemRight - menuWidth :\r\n                scrollX + itemLeft\r\n            }px`);\r\n            menuStyle.setProperty(\"top\", `${\r\n                overflowY > 0 ?\r\n                scrollY + itemTop - menuHeight :\r\n                scrollY + itemBottom\r\n            }px`);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target == this) {\r\n            this.toggle();\r\n            const {expanded} = this;\r\n            if (expanded) {\r\n                this.menu?.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded} = this;\r\n        switch (key) {\r\n            case \"ArrowDown\":\r\n            case \"Enter\":\r\n                if (!expanded) {\r\n                    this.expand();\r\n                    this.firstItem?.focus({preventScroll: true});\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            case \"Escape\":\r\n                if (expanded) {\r\n                    this.collapse();\r\n                    this.focus({preventScroll: true});\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n        this.#menu = (element instanceof HTMLEMenuElement) ? element : null;\r\n    }\r\n\r\n    #handleTriggerEvent(): void {\r\n        this.collapse();\r\n        this.focus({preventScroll: true});\r\n    }\r\n}\r\n\r\nvar HTMLEMenuButtonElement: HTMLEMenuButtonElementConstructor = HTMLEMenuButtonElementBase;\r\n\r\ninterface EMenuButtonConstructor {\r\n    prototype: HTMLEMenuButtonElement;\r\n    new(init: {\r\n        menu: HTMLEMenuElement\r\n    }): HTMLEMenuButtonElement;\r\n}\r\n\r\nvar EMenuButton = <EMenuButtonConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        menu: HTMLEMenuElement\r\n    }) {\r\n        const {menu} = init;\r\n        menu.slot = \"menu\";\r\n        return element(\"e-menubutton\", {\r\n            attributes: {\r\n                tabindex: -1\r\n            },\r\n            children: [menu]\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuButtonElement.prototype,\r\n    }\r\n);","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionElement };\r\n\r\ninterface HTMLEOptionElementConstructor {\r\n    prototype: HTMLEOptionElement;\r\n    new(): HTMLEOptionElement;\r\n}\r\n\r\ninterface HTMLEOptionElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    active: boolean;\r\n    value: string;\r\n    label: string;\r\n    description: string;\r\n    disabled: boolean;\r\n    selected: boolean;\r\n    default: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-option\": HTMLEOptionElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-option\"\r\n})\r\nclass HTMLEOptionElementBase extends HTMLElement implements HTMLEOptionElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n    \r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n        \r\n    @AttributeProperty({type: String})\r\n    description!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    default!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            user-select: none;\r\n                            white-space: nowrap;\r\n                            padding: 2px 12px;\r\n                        }\r\n                        \r\n                        :host([active]) {\r\n                            color: black;\r\n                            background-color: lightgray;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            color: lightgray;\r\n                        }\r\n\r\n                        :host::before {\r\n                            display: flex;\r\n                            content: \"\";\r\n                            width: 18px;\r\n                            height: 18px;\r\n                            margin-right: 6px;\r\n\r\n                            mask-size: 18px 18px;\r\n                            -webkit-mask-size: 18px 18px;\r\n                            background-color: var(--icon-color, none);\r\n                            -webkit-mask-image: var(--icon-image, none);\r\n                            mask-image: var(--icon-image, none);\r\n                        }\r\n\r\n                        [part=\"label\"] {\r\n                            flex: auto;\r\n                            text-align: left;\r\n                        }\r\n\r\n                        :host([default])::after {\r\n                            display: inline-block;\r\n                            content: \"(default)\";\r\n                            margin-left: 24px;\r\n                            text-align: right;\r\n                        }\r\n\r\n                        [part=\"content\"] {\r\n                            flex: auto;\r\n                            display: flex;\r\n                            overflow: hidden;\r\n                            pointer-events: none;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"label\"\r\n                        }\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector<HTMLElement>(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEOptionElement: HTMLEOptionElementConstructor = HTMLEOptionElementBase;","import { CustomElement, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionGroupElement };\r\n\r\ninterface HTMLEOptionGroupElementConstructor {\r\n    prototype: HTMLEOptionGroupElement;\r\n    new(): HTMLEOptionGroupElement;\r\n}\r\n\r\ninterface HTMLEOptionGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-optiongroup\": HTMLEOptionGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-optiongroup\"\r\n})\r\nclass HTMLEOptionGroupElementBase extends HTMLElement implements HTMLEOptionGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n}\r\n\r\nvar HTMLEOptionGroupElement: HTMLEOptionGroupElementConstructor = HTMLEOptionGroupElementBase;","import { HTMLEOptionElement } from \"./Option\";\r\nimport { HTMLEOptionGroupElement } from \"./OptionGroup\";\r\nimport { HTMLESelectElement } from \"./Select\";\r\n\r\nexport { HTMLEOptionCollection };\r\n\r\ninterface HTMLEOptionCollectionConstructor {\r\n    prototype: HTMLEOptionCollection;\r\n    new(root: HTMLESelectElement): HTMLEOptionCollection;\r\n}\r\n\r\ninterface HTMLEOptionCollection {\r\n    length: number;\r\n    item(index: number): HTMLEOptionElement | null;\r\n    namedItem(name: string): HTMLEOptionElement | null;\r\n    values(): IterableIterator<HTMLEOptionElement>;\r\n}\r\n\r\nclass HTMLEOptionCollectionBase implements HTMLEOptionCollection {\r\n    #walker: TreeWalker;\r\n\r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    get value(): string {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        while (currentNode !== null) {\r\n            if (currentNode.selected) {\r\n                return currentNode.value;\r\n            }\r\n            currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    constructor(root: HTMLESelectElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEOptionElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEOptionGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEOptionElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEOptionElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEOptionElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        let currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEOptionElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEOptionElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEOptionElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEOptionCollection: HTMLEOptionCollectionConstructor =  HTMLEOptionCollectionBase;","import { HTMLEActionElement } from \"../../containers/actions/Action\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEOptionElement } from \"./Option\";\r\nimport { HTMLEOptionCollection } from \"./OptionCollection\";\r\nimport { HTMLEOptionGroupElement } from \"./OptionGroup\";\r\n\r\nexport { HTMLESelectElement };\r\n\r\ninterface HTMLESelectElement extends HTMLEActionElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly options: HTMLEOptionCollection;\r\n    readonly activeIndex: number;\r\n    readonly activeOption: HTMLEOptionElement | null;\r\n    readonly selectedIndex: number;\r\n    readonly selectedOption: HTMLEOptionElement | null;\r\n    name: string;\r\n    label: string;\r\n    value: string;\r\n    expanded: boolean;\r\n    expand(): void;\r\n    collapse(): void;\r\n    toggle(force?: boolean): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ninterface HTMLESelectElementConstructor {\r\n    prototype: HTMLESelectElement;\r\n    new(): HTMLESelectElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-select\": HTMLESelectElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-select\"\r\n})\r\nclass HTMLESelectElementBase extends HTMLEActionElement implements HTMLESelectElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly options: HTMLEOptionCollection;\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get selectedIndex(): number {\r\n        return this.#selectedIndex;\r\n    }\r\n\r\n    get activeOption(): HTMLEOptionElement | null {\r\n        return this.options.item(this.#activeIndex) ?? null;\r\n    }\r\n\r\n    get selectedOption(): HTMLEOptionElement | null {\r\n        return this.options.item(this.#selectedIndex) ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"select\", observed: true})\r\n    type!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    #walker: TreeWalker;\r\n    #activeIndex: number;\r\n    #selectedIndex: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"label\", {\r\n                        attributes: {\r\n                            part: \"label\"\r\n                        }\r\n                    }),\r\n                    element(\"output\", {\r\n                        attributes: {\r\n                            part: \"value\"\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"options\"\r\n                },\r\n                children: [\r\n                    element(\"slot\"),\r\n                    element(\"hr\", {\r\n                        attributes: {\r\n                            part: \"separator\"\r\n                        }\r\n                    }),\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"description\"\r\n                        }\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        this.#selectedIndex = -1;\r\n        this.options = new HTMLEOptionCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"value\": {\r\n                const {options} = this;\r\n                const matchingOption = Array.from(options.values()).find(option => option.value == newValue);\r\n                if (matchingOption) {\r\n                    this.#setSelectedOption(matchingOption);\r\n                    this.dispatchEvent(new Event(\"change\", {bubbles: true}));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {expanded, options} = this;\r\n        if (!expanded) {\r\n            this.expanded = true;\r\n            const {selectedIndex} = this;\r\n            this.#positionOptions();\r\n            const option = options.item(selectedIndex);\r\n            if (option) {\r\n                option.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {expanded} = this;\r\n        if (expanded) {\r\n            this.expanded = false;\r\n            this.focus();\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {expanded} = this;\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEOptionElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEOptionGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEOptionElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEOptionElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousOption(item: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEOptionElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextOption(item: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEOptionElement | null>walker.nextNode();\r\n    }\r\n\r\n    #selectOption(option: HTMLEOptionElement): void {\r\n        if (option && !option.disabled) {\r\n            this.value = option.value;\r\n        }\r\n    }\r\n\r\n    #setActiveOption(option: HTMLEOptionElement | null): void {\r\n        const {options, activeOption} = this;\r\n        if (activeOption !== null && activeOption !== option) {\r\n            activeOption.active = false;\r\n        }\r\n        if (option !== null) {\r\n            if (!option.disabled) {\r\n                const {shadowRoot} = this;\r\n                const descriptionPart = shadowRoot.querySelector(\"[part='description']\");\r\n                if (descriptionPart) {\r\n                    descriptionPart.textContent = option.description;\r\n                }\r\n                this.#activeIndex = Array.from(options.values()).indexOf(option);\r\n            }\r\n            option.active = true;\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    #setSelectedOption(option: HTMLEOptionElement | null): void {\r\n        const {options} = this;\r\n        if (option !== null) {\r\n            if (!option.disabled) {\r\n                const {shadowRoot, selectedOption} = this;\r\n                const valuePart = shadowRoot.querySelector(\"[part='value']\");\r\n                if (valuePart) {\r\n                    valuePart.textContent = option.label;\r\n                }\r\n                option.selected = true;\r\n                if (selectedOption) {\r\n                    selectedOption.selected = false;\r\n                }\r\n                this.#selectedIndex = Array.from(options.values()).indexOf(option);\r\n            }\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    #positionOptions(): void {\r\n        const {shadowRoot} = this;\r\n        const options = shadowRoot.querySelector<HTMLElement>(\"[part=options]\")!;\r\n        const {style: optionsStyle} = options;  \r\n        const {bottom: selectBottom, left: selectLeft} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        optionsStyle.setProperty(\"top\", `${selectBottom + scrollY}px`);\r\n        optionsStyle.setProperty(\"left\", `${selectLeft + scrollX}px`);\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEOptionElement) {\r\n            this.#selectOption(target);\r\n            this.collapse();\r\n        }\r\n        else {\r\n            if (target == this) {\r\n                this.toggle();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {expanded} = this;\r\n        if (target instanceof HTMLEOptionElement) {\r\n            if (!expanded) {\r\n                this.expand();\r\n            }\r\n            this.#setActiveOption(target);\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {expanded} = this;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            if (expanded) {\r\n                this.collapse();\r\n            }\r\n            this.#setActiveOption(null);\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {options, activeOption, selectedOption, selectedIndex, expanded} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                if (expanded && activeOption !== null) {\r\n                    const previousOption = this.#previousOption(activeOption) ?? this.#firstOption();\r\n                    if (previousOption) {\r\n                        previousOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else if (!expanded && selectedOption !== null) {\r\n                    const previousOption = this.#previousOption(selectedOption) ?? this.#firstOption();\r\n                    if (previousOption) {\r\n                        this.#selectOption(previousOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (expanded && activeOption !== null) {\r\n                    const nextOption = this.#nextOption(activeOption) ?? this.#lastOption();\r\n                    if (nextOption) {\r\n                        nextOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else if (!expanded && selectedOption !== null) {\r\n                    const nextOption = this.#nextOption(selectedOption) ?? this.#lastOption();\r\n                    if (nextOption) {\r\n                        this.#selectOption(nextOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstOption = this.#firstOption();\r\n                if (firstOption !== null) {\r\n                    if (expanded) {\r\n                        firstOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(firstOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastOption = this.#lastOption();\r\n                if (lastOption !== null) {\r\n                    if (expanded) {\r\n                        lastOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(lastOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (expanded) {\r\n                    this.collapse();\r\n                    if (activeOption !== null) {\r\n                        this.#selectOption(activeOption);\r\n                    }\r\n                }\r\n                else {\r\n                    const option = options.item(selectedIndex);\r\n                    if (option !== null) {\r\n                        option.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.collapse();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            default: {\r\n                const {activeIndex} = this;\r\n                const {length: keyLength} = key;\r\n                if (keyLength == 1) {\r\n                    const keyCode = key.charCodeAt(0);\r\n                    const optionsArray = Array.from(options.values());\r\n                    const firstMatchIndex = optionsArray.findIndex(\r\n                        option_i => option_i.label.toLowerCase().charCodeAt(0) == keyCode\r\n                    );\r\n                    const nextMatchIndex = optionsArray.findIndex(\r\n                        (option_i, i) => option_i.label.toLowerCase().charCodeAt(0) == keyCode && i > activeIndex\r\n                    );\r\n                    const matchIndex = nextMatchIndex > -1 ?\r\n                        nextMatchIndex :\r\n                        firstMatchIndex;\r\n                    const option = options.item(matchIndex);\r\n                    if (option !== null) {\r\n                        option.focus({preventScroll: true});\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEOptionElement) {\r\n            target.focus({preventScroll: true});\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const options = <HTMLEOptionElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEOptionElement\r\n            );\r\n        if (options.length > 0) {\r\n            let selectedOption: HTMLEOptionElement | null = null;\r\n            let {value} = this;\r\n            if (value) {\r\n                selectedOption = options.find(option => option.value == value) ?? null;\r\n            }\r\n            if (selectedOption == null) {\r\n                selectedOption = options.find(option => option.selected) ?? null;\r\n            }\r\n            if (selectedOption == null) {\r\n                selectedOption = options.find(option => option.default) ?? null;\r\n            }\r\n            if (selectedOption == null) {\r\n                selectedOption = this.#firstOption();\r\n            }\r\n            options.forEach(option_i => {\r\n                option_i.selected = option_i == selectedOption\r\n            });\r\n            if (selectedOption !== null) {\r\n                this.#setSelectedOption(selectedOption);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLESelectElement: HTMLESelectElementConstructor = HTMLESelectElementBase;","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEActionElement } from \"../actions/Action\";\r\nimport { HTMLEMenuButtonElement } from \"../menus/MenuButton\";\r\n\r\nexport { HTMLEToolBarItemElement };\r\nexport { EToolBarItem };\r\n\r\ninterface HTMLEToolBarItemElementConstructor {\r\n    prototype: HTMLEToolBarItemElement;\r\n    new(): HTMLEToolBarItemElement;\r\n}\r\n\r\ninterface HTMLEToolBarItemElement extends HTMLEActionElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menubutton: HTMLEMenuButtonElement | null;\r\n    readonly select: HTMLESelectElement | null;\r\n    name: string;\r\n    label: string;\r\n    active: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritem\": HTMLEToolBarItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar slottedKeyboardListeners: WeakMap<HTMLElement, EventListener>;\r\nvar slottedTriggerListeners: WeakMap<HTMLElement, EventListener>;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritem\"\r\n})\r\nclass HTMLEToolBarItemElementBase extends HTMLEActionElement implements HTMLEToolBarItemElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get menubutton(): HTMLEMenuButtonElement | null {\r\n        return this.#menubutton;\r\n    }\r\n    \r\n    get select(): HTMLESelectElement | null {\r\n        return this.#select;\r\n    }\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n    \r\n    #menubutton: HTMLEMenuButtonElement | null;\r\n    #select: HTMLESelectElement | null;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"icon\"\r\n                        }\r\n                    }),\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"label\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\", {\r\n                        attributes: {\r\n                            name: \"select\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\", {\r\n                        attributes: {\r\n                            name: \"menubutton\"\r\n                        }\r\n                    })\r\n                ]\r\n            })\r\n        )\r\n        slottedKeyboardListeners = new WeakMap();\r\n        slottedTriggerListeners = new WeakMap();\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#menubutton = null;\r\n        this.#select = null;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    toggle(): void {\r\n        const {type} = this;\r\n        switch (type) {\r\n            case \"menubutton\": {\r\n                const {menubutton} = this;\r\n                if (menubutton) {\r\n                    menubutton.toggle();\r\n                    if (menubutton.expanded) {\r\n                        menubutton.firstItem?.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"select\": {\r\n                const {select} = this;\r\n                if (select) {\r\n                    select.toggle();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector<HTMLSpanElement>(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"value\": {\r\n                const {type} = this;\r\n                if (type == \"select\") {\r\n                    this.#updateSelectValue();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #updateSelectValue(): void {\r\n        const {select} = this;\r\n        if (select) {\r\n            const {value} = this;\r\n            const {value: selectValue} = select;\r\n            if (selectValue !== value) {\r\n                select.value = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    #addSlottedKeyboardHandler(element: HTMLElement): void {\r\n        const listener = <EventListener>this.#handleSlottedKeyboardEvent.bind(this);\r\n        slottedKeyboardListeners.set(element, listener);\r\n        element.addEventListener(\"keydown\", listener);\r\n    }\r\n\r\n    #removeSlottedKeyboardHandler(element: HTMLElement): void {\r\n        const listener = slottedKeyboardListeners.get(element);\r\n        if (listener) {\r\n            element.removeEventListener(\"keydown\", listener);\r\n        }\r\n    }\r\n\r\n    #addSlottedTriggerHandler(element: HTMLElement): void {\r\n        const listener = <EventListener>this.#handleSlottedTriggerEvent.bind(this);\r\n        slottedTriggerListeners.set(element, listener);\r\n        element.addEventListener(\"trigger\", listener);\r\n    }\r\n\r\n    #removeSlottedTriggerHandler(element: HTMLElement): void {\r\n        const listener = slottedTriggerListeners.get(element);\r\n        if (listener) {\r\n            element.removeEventListener(\"trigger\", listener);\r\n        }\r\n    }\r\n\r\n    #handleSlottedKeyboardEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        switch (key) {\r\n            case \"Enter\":\r\n            case \"Escape\": {\r\n                this.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlottedTriggerEvent(event: KeyboardEvent): void {\r\n        this.focus({preventScroll: true});\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target;\r\n        switch (slotName) {\r\n            case \"menubutton\": {\r\n                let menubutton = this.#menubutton;\r\n                if (menubutton !== null) {\r\n                    this.#removeSlottedTriggerHandler(menubutton);\r\n                    this.#removeSlottedKeyboardHandler(menubutton);\r\n                }\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                menubutton = element instanceof HTMLEMenuButtonElement ? element : null;\r\n                if (menubutton !== null) {\r\n                    this.#addSlottedTriggerHandler(menubutton);\r\n                    this.#addSlottedKeyboardHandler(menubutton);\r\n                }\r\n                this.#menubutton = menubutton;\r\n                break;\r\n            }\r\n            case \"select\": {\r\n                let select = this.#select;\r\n                if (select !== null) {\r\n                    this.#removeSlottedKeyboardHandler(select);\r\n                }\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                select = element instanceof HTMLESelectElement ? element : null;\r\n                if (select !== null) {\r\n                    this.#addSlottedKeyboardHandler(select);\r\n                }\r\n                this.#select = select;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemElement: HTMLEToolBarItemElementConstructor = HTMLEToolBarItemElementBase;\r\n\r\ninterface EToolBarItemConstructor {\r\n    prototype: HTMLEToolBarItemElement;\r\n    new(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n    button(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    checkbox(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    radio(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    menubutton(init: {\r\n        name: string;\r\n        label: string;\r\n        menubutton: HTMLEMenuButtonElement;\r\n    }): HTMLEToolBarItemElement;\r\n    select(init: {\r\n        name: string;\r\n        label: string;\r\n        select: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n}\r\n\r\nvar EToolBarItem = <EToolBarItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menubutton, select} = init;\r\n        if (menubutton) {\r\n            menubutton.slot = \"menubutton\";\r\n        }\r\n        if (select) {\r\n            select.slot = \"select\";\r\n        }\r\n        return element(\"e-toolbaritem\", {\r\n            attributes: {\r\n                tabindex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type\r\n            },\r\n            children: menubutton ? [menubutton] : select ? [select] : undefined,\r\n            listeners: {\r\n                trigger: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEToolBarItemElement.prototype,\r\n        button(init: {\r\n            name: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menubutton(init: {\r\n            name: string;\r\n            label: string;\r\n            menubutton: HTMLEMenuButtonElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"menubutton\"\r\n            });\r\n        },\r\n        select(init: {\r\n            name: string;\r\n            label: string;\r\n            select: HTMLESelectElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"select\"\r\n            });\r\n        },\r\n    }\r\n);","\r\nimport { element, CustomElement, AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEToolBarItemGroupElement };\r\n\r\ninterface HTMLEToolBarItemGroupElementConstructor {\r\n    prototype: HTMLEToolBarItemGroupElement;\r\n    new(): HTMLEToolBarItemGroupElement;\r\n}\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\ninterface HTMLEToolBarItemGroupElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n    disabled: boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritemgroup\": HTMLEToolBarItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritemgroup\"\r\n})\r\nclass HTMLEToolBarItemGroupElementBase extends HTMLElement implements HTMLEToolBarItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    disabled!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            width: max-content;\r\n                            flex-direction: row;\r\n                        }\r\n\r\n                        /*:host([orientation=\"vertical\"]) {\r\n                            flex-direction: column;\r\n                        }\r\n\r\n                        :host([orientation=\"horizontal\"]) {\r\n                            flex-direction: row;\r\n                        }*/\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const label = this.shadowRoot.querySelector<HTMLLabelElement>(\"[part='label']\");\r\n                if (label) {\r\n                    label.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"disabled\": {\r\n                /*this.items.forEach((item) => {\r\n                    item.disabled = newValue !== null;\r\n                });*/\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemGroupElement: HTMLEToolBarItemGroupElementConstructor = HTMLEToolBarItemGroupElementBase;","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEToolBarItemElement } from \"./ToolBarItem\";\r\nimport { HTMLEToolBarItemGroupElement } from \"./ToolBarItemGroup\";\r\n\r\nexport { HTMLEToolBarElement };\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\ninterface HTMLEToolBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    items(): HTMLEToolBarItemElement[];\r\n    readonly activeItem: HTMLEToolBarItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n}\r\n\r\ninterface HTMLEToolbarElementConstructor {\r\n    prototype: HTMLEToolBarElement;\r\n    new(): HTMLEToolBarElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbar\": HTMLEToolBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbar\"\r\n})\r\nclass HTMLEToolBarElementBase extends HTMLElement implements HTMLEToolBarElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get activeItem(): HTMLEToolBarItemElement | null {\r\n        return this.querySelector<HTMLEToolBarItemElement>(\r\n            \"e-toolbaritem[active]\"\r\n        );\r\n    }\r\n\r\n    items(): HTMLEToolBarItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEToolBarItemElement>(\r\n            \":is(:scope, :scope > e-toolbaritemgroup) > e-toolbaritem\"\r\n        ));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    orientation!: ToolBarOrientation;\r\n\r\n    #walker: TreeWalker;\r\n    #activeIndex: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#activeIndex = -1;\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"change\", this.#handleChangeEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEToolBarItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEToolBarItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEToolBarItemElement | null>walker.previousSibling();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEToolBarItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEToolBarItemElement | null): void {\r\n        const {activeItem} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n            this.#activeIndex = this.items().indexOf(item);\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLESelectElement) {\r\n            const item = target.closest(\"e-toolbaritem\");\r\n            if (item !== null) {\r\n                const {select, type} = item;\r\n                if (target == select && select && type == \"select\") {\r\n                    const {value} = item;\r\n                    const {value: selectValue} = select;\r\n                    if (value !== selectValue) {\r\n                        item.value = selectValue;\r\n                        item.trigger();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEToolBarItemElement) {\r\n            const {type} = target;\r\n            switch (type) {\r\n                /*case \"menubutton\": {\r\n                    const {menubutton} = target;\r\n                    if (menubutton) {\r\n                        const {expanded} = menubutton;\r\n                        if (!expanded) {\r\n                            menubutton.expand();\r\n                            menubutton.menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                case \"select\": {\r\n                    const {select} = target;\r\n                    if (select) {\r\n                        select.toggle();\r\n                    }\r\n                    break;\r\n                }*/\r\n                default: {\r\n                    target.trigger();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const activeItem = this.items().find(\r\n            item_i => item_i.contains(<Node>target)\r\n        ) ?? null;\r\n        this.#setActiveItem(activeItem);\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.#setActiveItem(null);\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"menubutton\": {\r\n                            const {menubutton} = activeItem;\r\n                            if (menubutton) {\r\n                                const {expanded} = menubutton;\r\n                                if (!expanded) {\r\n                                    menubutton.expand();\r\n                                    menubutton.firstItem?.focus({preventScroll: true});\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"select\": {\r\n                            const {select} = activeItem;\r\n                            if (select) {\r\n                                select.expand();\r\n                            }\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            activeItem.trigger();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"select\": {\r\n                            activeItem.select?.expand();\r\n                            event.stopPropagation();\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    activeItem.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleTriggerEvent(event: Event): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEToolBarItemElement) {\r\n            const {type, name, value} = target;\r\n            if (type == \"radio\") {\r\n                this.querySelectorAll<HTMLEToolBarItemElement>(\r\n                    `:is(:scope, :scope > e-toolbaritemgroup) > e-toolbaritem[type=radio][name=${name}]`\r\n                ).forEach((radio_i) => {\r\n                    radio_i.checked = radio_i.value == value;\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarElement: HTMLEToolbarElementConstructor = HTMLEToolBarElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLETabPanelElement };\r\n\r\ninterface HTMLETabPanelElementConstructor {\r\n    prototype: HTMLETabPanelElement;\r\n    new(): HTMLETabPanelElement;\r\n}\r\n\r\ninterface HTMLETabPanelElement extends HTMLElement {\r\n    name: string;\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tabpanel\"\r\n})\r\nclass HTMLETabPanelElementBase extends HTMLElement implements HTMLETabPanelElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n        \r\n                        :host([hidden]) {\r\n                            display: none;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n}\r\n\r\nvar HTMLETabPanelElement: HTMLETabPanelElementConstructor = HTMLETabPanelElementBase;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tabpanel\": HTMLETabPanelElement,\r\n    }\r\n}","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLETabPanelElement } from \"./TabPanel\";\r\n\r\nexport { ETabChangeEvent };\r\nexport { HTMLETabElement };\r\n\r\ninterface HTMLETabElementConstructor {\r\n    prototype: HTMLETabElement;\r\n    new(): HTMLETabElement;\r\n}\r\n\r\ninterface HTMLETabElement extends HTMLElement {\r\n    name: string;\r\n    active: boolean;\r\n    disabled: boolean;\r\n    controls: string;\r\n    panel: HTMLETabPanelElement | null;\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ntype ETabChangeEvent = CustomEvent<{\r\n    tab: HTMLETabElement;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_tabchange\": ETabChangeEvent,\r\n    }\r\n\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tab\": HTMLETabElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tab\"\r\n})\r\nclass HTMLETabElementBase extends HTMLElement implements HTMLETabElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    #panel: HTMLETabPanelElement | null;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            user-select: none;\r\n                            white-space: nowrap;\r\n\r\n                            padding: 2px 6px;\r\n                            cursor: pointer;\r\n                        }\r\n                        \r\n                        :host([disabled]) {\r\n                            color: lightgray;\r\n                            pointer-events: none;\r\n                        }\r\n        \r\n                        :host([active]) {\r\n                            background-color: lightgray;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n        this.#panel = null;\r\n    }\r\n\r\n    get panel(): HTMLETabPanelElement | null {\r\n        return this.#panel;\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const panel = document.getElementById(this.controls);\r\n        if (panel !== this.#panel && panel instanceof HTMLETabPanelElement) {\r\n            this.#panel = panel;\r\n        }\r\n        if (panel)  {\r\n            panel.hidden = !this.active;\r\n        }\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"active\":\r\n                if (this.active) {\r\n                    this.dispatchEvent(new CustomEvent(\"e_tabchange\", {detail: {tab: this}, bubbles: true}));\r\n                }\r\n                const panel = document.getElementById(this.controls);\r\n                if (panel !== this.panel && panel instanceof HTMLETabPanelElement) {\r\n                    this.#panel = panel;\r\n                }\r\n                if (panel)  {\r\n                    panel.hidden = !this.active;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabElement: HTMLETabElementConstructor = HTMLETabElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLETabElement } from \"./Tab\";\r\n\r\nexport { HTMLETabListElement };\r\n\r\ninterface HTMLETabListElementConstructor {\r\n    prototype: HTMLETabListElement;\r\n    new(): HTMLETabListElement;\r\n}\r\n\r\ninterface HTMLETabListElement extends HTMLElement {\r\n    readonly activeTab: HTMLETabElement | null;\r\n    tabs: HTMLETabElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tablist\": HTMLETabListElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tablist\"\r\n})\r\nclass HTMLETabListElementBase extends HTMLElement implements HTMLETabListElement {\r\n\r\n    tabs: HTMLETabElement[];\r\n\r\n    #activeIndex: number;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                            position: relative;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n        \r\n        this.tabs = [];\r\n        this.#activeIndex = 1;\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeTab(): HTMLETabElement | null {\r\n        return this.tabs[this.#activeIndex] || null;\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n        const slot = this.shadowRoot!.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", (event) => {\r\n\r\n                const tabs = <HTMLETabElement[]>(<HTMLSlotElement>event.target)\r\n                    .assignedElements()\r\n                    .filter(tab => tab instanceof HTMLETabElement);\r\n                this.tabs = tabs;\r\n                this.#activeIndex = this.tabs.findIndex(tab => tab.active);\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event) => {\r\n            switch (event.key) {\r\n                case \"ArrowUp\":\r\n                    this.focusTabAt((this.activeIndex <= 0) ? this.tabs.length - 1 : this.activeIndex - 1);\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    this.focusTabAt((this.activeIndex >= this.tabs.length - 1) ? 0 : this.activeIndex + 1);\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"Enter\":\r\n                    if (this.activeTab) {\r\n                        this.activateTab(this.activeTab);\r\n                    }\r\n                    break;\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"click\", (event) => {\r\n            const target = event.target;\r\n            if (target instanceof HTMLETabElement) {\r\n                target.active = true;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"e_tabchange\", (event) => {\r\n            const targetIndex = this.tabs.indexOf(event.detail.tab);\r\n            this.#activeIndex = targetIndex;\r\n            this.tabs.forEach((thisTab, thisTabIndex) => {\r\n                if (thisTabIndex !== targetIndex) {\r\n                    thisTab.active = false;\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    focusTabAt(index: number): void {\r\n        const tab = this.tabs[index];\r\n        if (tab) {\r\n            this.#activeIndex = index;\r\n            tab.focus();\r\n        }\r\n    }\r\n\r\n    activateTab(tab: HTMLETabElement) {\r\n        if (this.tabs.includes(tab)) {\r\n            tab.active = true;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabListElement: HTMLETabListElementConstructor = HTMLETabListElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLETreeElement } from \"./Tree\";\r\nimport { HTMLETreeItemElement } from \"./TreeItem\";\r\n\r\nexport { HTMLETreeItemGroupElement };\r\n\r\ninterface HTMLETreeItemGroupElementConstructor {\r\n    prototype: HTMLETreeItemGroupElement;\r\n    new(): HTMLETreeItemGroupElement;\r\n}\r\n\r\ninterface HTMLETreeItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitemgroup\": HTMLETreeItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-treeitemgroup\"\r\n})\r\nclass HTMLETreeItemGroupElementBase extends HTMLElement implements HTMLETreeItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLETreeItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLETreeItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n            item_i.level = (() => {\r\n                let level = -1;\r\n                let closestItem: HTMLETreeItemElement | null = item_i;\r\n                while (closestItem !== null && closestItem.matches(\"e-tree :scope\")) {\r\n                    closestItem = closestItem.parentElement?.closest(\"e-treeitem\") ?? null;\r\n                    level++;\r\n                }\r\n                return level;\r\n            })();\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemGroupElement: HTMLETreeItemGroupElementConstructor = HTMLETreeItemGroupElementBase;","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\nimport { HTMLETreeElement } from \"./Tree\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeItemElement };\r\n\r\ninterface HTMLETreeItemElementConstructor {\r\n    prototype: HTMLETreeItemElement;\r\n    new(): HTMLETreeItemElement;\r\n}\r\n\r\ninterface HTMLETreeItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly group: HTMLETreeItemGroupElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    expanded: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    level: number;\r\n    type: \"leaf\" | \"parent\";\r\n    toggle(force?: boolean): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitem\": HTMLETreeItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-treeitem\"\r\n})\r\nclass HTMLETreeItemElementBase extends HTMLElement implements HTMLETreeItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get group(): HTMLETreeItemGroupElement | null {\r\n        return this.#group;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    expanded!: boolean;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number, observed: true})\r\n    level!: number;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"leaf\"})\r\n    type!: \"leaf\" | \"parent\";\r\n\r\n    #group: HTMLETreeItemGroupElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"arrow\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"group\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.#group = null;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"expanded\": {\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const labelPart = this.shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"level\": {\r\n                this.style.setProperty(\"--level\", `${this.level}`);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        this.expanded = force ?? !this.expanded;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, shiftKey, ctrlKey} = event;\r\n        const {type} = this;\r\n        if (this == target && type == \"parent\" && !(shiftKey || ctrlKey)) {\r\n            this.toggle();\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target;\r\n        switch (slotName) {\r\n            case \"group\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#group = element instanceof HTMLETreeItemGroupElement ? element : null;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemElement: HTMLETreeItemElementConstructor = HTMLETreeItemElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLETreeItemElement } from \"./TreeItem\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeElement };\r\n\r\ninterface HTMLETreeElementConstructor {\r\n    prototype: HTMLETreeElement;\r\n    new(): HTMLETreeElement;\r\n}\r\n\r\ninterface HTMLETreeElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLETreeItemElement>;\r\n    readonly activeItem: HTMLETreeItemElement | null;\r\n    readonly dropTargetItem: HTMLETreeItemElement | null;\r\n    droptarget: boolean;\r\n    name: string;\r\n    selectedItems(): HTMLETreeItemElement[];\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tree\": HTMLETreeElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-tree\"\r\n})\r\nclass HTMLETreeElementBase extends HTMLElement implements HTMLETreeElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLETreeItemElement>;\r\n\r\n    get activeItem(): HTMLETreeItemElement | null {\r\n        return this.querySelector<HTMLETreeItemElement>(\r\n            \"e-treeitem[active]\"\r\n        );\r\n    }\r\n\r\n    get dropTargetItem(): HTMLETreeItemElement | null {\r\n        return this.querySelector<HTMLETreeItemElement>(\r\n            \"e-treeitem[droptarget]\"\r\n        );\r\n    }\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.items = this.getElementsByTagName(\"e-treeitem\");\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    selectedItems(): HTMLETreeItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.#firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLETreeItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLETreeItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLETreeItemElement, to: HTMLETreeItemElement): HTMLETreeItemElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleItem = this.#nextItem(from);\r\n            while (nextVisibleItem && nextVisibleItem !== to) {\r\n                range.push(nextVisibleItem);\r\n                nextVisibleItem = this.#nextItem(nextVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleItem = this.#previousItem(from);\r\n            while (previousVisibleItem && previousVisibleItem !== to) {\r\n                range.push(previousVisibleItem);\r\n                previousVisibleItem = this.#previousItem(previousVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLETreeItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((item_i) => {\r\n            item_i.selected = false;\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLETreeItemElement | null): void {\r\n        const {activeItem} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = item;\r\n            item.active = true;\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n    \r\n    #setDropTargetItem(item: HTMLETreeItemElement | null): void {\r\n        const {dropTargetItem} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n        }\r\n    }\r\n\r\n    #firstItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousSibling = <HTMLETreeItemElement | null>walker.previousSibling();\r\n        return previousSibling ?\r\n            this.#deepestItem(previousSibling) :\r\n            <HTMLETreeItemElement | null>walker.parentNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const {type, expanded} = item;\r\n        return <HTMLETreeItemElement | null>(\r\n            type === \"leaf\" ?\r\n                walker.nextNode() :\r\n                expanded ?\r\n                    walker.nextNode() :\r\n                    walker.nextSibling() ??\r\n                    (walker.parentNode(), walker.nextSibling())\r\n        );\r\n    }\r\n\r\n    #deepestItem(item: HTMLETreeItemElement): HTMLETreeItemElement {\r\n        if (item.expanded) {\r\n            const walker = this.#walker;\r\n            const lastItem = <HTMLETreeItemElement>walker.lastChild();\r\n            if (lastItem) {\r\n                return this.#deepestItem(lastItem);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey, button} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const {selected} = target;\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setSelection(target);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            target.blur();\r\n                        }\r\n                        (!selected) ?\r\n                            this.#addToSelection(target) :\r\n                            this.#removeFromSelection(target);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const {activeItem} = this\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                target\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(target);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const {type} = target;\r\n            if (type == \"parent\") {\r\n                target.toggle(true);\r\n            }\r\n            this.#setDropTargetItem(target);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!this.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        const {root} = walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? root, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? root, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(\r\n                                firstItem,\r\n                                this.#deepestItem(lastItem)\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    if (activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                    else {\r\n                        const walker = this.#walker;\r\n                        const parentItem = <HTMLETreeItemElement>walker.parentNode();\r\n                        if (parentItem) {\r\n                            parentItem.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    if (!activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.#setActiveItem(null);\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            this.#setActiveItem(target);\r\n            this.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLETreeItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLETreeItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n            item_i.level = 0;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLETreeElement: HTMLETreeElementConstructor = HTMLETreeElementBase;","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEToolBarElement } from \"../toolbars/ToolBar\";\r\n\r\nexport { HTMLEListItemElement };\r\n\r\ninterface HTMLEListItemElementConstructor {\r\n    prototype: HTMLEListItemElement;\r\n    new(): HTMLEListItemElement;\r\n}\r\n\r\ninterface HTMLEListItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly badge: HTMLSpanElement | null;\r\n    readonly toolbar: HTMLEToolBarElement | null;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitem\": HTMLEListItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-listitem\"\r\n})\r\nclass HTMLEListItemElementBase extends HTMLElement implements HTMLEListItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    get badge(): HTMLElement | null {\r\n        return this.#badge;\r\n    }\r\n\r\n    get toolbar(): HTMLEToolBarElement | null {\r\n        return this.#toolbar;\r\n    }\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    #badge: HTMLElement | null;\r\n    #toolbar: HTMLEToolBarElement | null;\r\n    #menu: HTMLEMenuElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#badge = null;\r\n        this.#menu = null;\r\n        this.#toolbar = null;\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this))\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"toolbar\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#toolbar = element instanceof HTMLEToolBarElement ? element : null;\r\n                break;\r\n            }\r\n            case \"badge\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#badge = element instanceof HTMLSpanElement ? element : null;\r\n                break;\r\n            }\r\n            case \"menu\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#menu = element instanceof HTMLEMenuElement ? element : null;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEListItemElement: HTMLEListItemElementConstructor = HTMLEListItemElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEListItemElement } from \"./ListItem\";\r\n\r\nexport { HTMLEListItemGroupElement };\r\n\r\ninterface HTMLEListItemGroupElementConstructor {\r\n    prototype: HTMLEListItemGroupElement;\r\n    new(): HTMLEListItemGroupElement;\r\n}\r\n\r\ninterface HTMLEListItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitemgroup\": HTMLEListItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-listitemgroup\"\r\n})\r\nclass HTMLEListItemGroupElementBase extends HTMLElement implements HTMLEListItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEListItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEListItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEListItemGroupElement: HTMLEListItemGroupElementConstructor = HTMLEListItemGroupElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEListItemElement } from \"./ListItem\";\r\nimport { HTMLEListItemGroupElement } from \"./ListItemGroup\";\r\n\r\nexport { HTMLEListElement };\r\n\r\ninterface HTMLEListElementConstructor {\r\n    prototype: HTMLEListElement;\r\n    new(): HTMLEListElement;\r\n}\r\n\r\ninterface HTMLEListElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEListItemElement>;\r\n    readonly activeItem: HTMLEListItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    droptarget: boolean;\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    selectedItems(): HTMLEListItemElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-list\": HTMLEListElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-list\"\r\n})\r\nclass HTMLEListElementBase extends HTMLElement implements HTMLEListElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEListItemElement>;\r\n\r\n    get dropTargetItem(): HTMLEListItemElement | null {\r\n        return this.items[this.#dropTargetIndex] ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    #dropTargetIndex: number;\r\n    #activeIndex: number;\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        this.#dropTargetIndex = -1;\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.items = this.getElementsByTagName(\"e-listitem\");\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEListItemElement | null {\r\n        return this.items[this.activeIndex] ?? null;\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    selectedItems(): HTMLEListItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.#firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEListItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEListItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLEListItemElement, to: HTMLEListItemElement): HTMLEListItemElement[] {\r\n        const items = Array.from(this.items);\r\n        const fromIndex = items.indexOf(from);\r\n        const toIndex = items.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return items.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        selectedItems.forEach((item_i) => {\r\n            if (item_i.selected) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEListItemElement | null): void {\r\n        const {activeItem, items} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n            item.tabIndex = 0;\r\n            this.#activeIndex = Array.from(items).indexOf(item);\r\n        }\r\n    }\r\n\r\n    #setDropTargetItem(item: HTMLEListItemElement | null): void {\r\n        const {dropTargetItem, items} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n            this.#dropTargetIndex = Array.from(items).indexOf(item);\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n            this.#dropTargetIndex = -1;\r\n        }\r\n    }\r\n\r\n    #firstItem(): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLEListItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLEListItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEListItemElement): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEListItemElement | null>walker.previousNode();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEListItemElement): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const nextItem = <HTMLEListItemElement | null>walker.nextNode();\r\n        return nextItem;\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent) {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n            target.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey} = event;\r\n        const selectedItems = this.selectedItems();\r\n        if (target instanceof HTMLEListItemElement) {\r\n            if (!shiftKey && !ctrlKey) {\r\n                this.#setSelection(target);\r\n            }\r\n            else if (ctrlKey) {\r\n                (!target.selected) ?\r\n                    this.#addToSelection(target) :\r\n                    this.#removeFromSelection(target);\r\n                event.stopPropagation();\r\n            }\r\n            else if (shiftKey) {\r\n                const lastSelectedItem = selectedItems[selectedItems.length - 1];\r\n                if (lastSelectedItem) {\r\n                    const range = this.#getItemsRange(\r\n                        lastSelectedItem,\r\n                        target\r\n                    );\r\n                    if (range) {\r\n                        if (selectedItems.includes(target)) {\r\n                            this.#removeFromSelection(...range);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(...range);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.#setSelection(target);\r\n                }\r\n                event.stopPropagation();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            this.#setDropTargetItem(target);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n    \r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n        const relatedTargetHost =\r\n            relatedTargetRoot instanceof ShadowRoot ?\r\n            relatedTargetRoot.host :\r\n            relatedTarget;\r\n        if (!this.contains(<Node>relatedTargetHost)) {\r\n            this.#setDropTargetItem(null);\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    const walker = this.#walker;\r\n                    const {root} = walker;\r\n                    const firstItem = <HTMLEListItemElement>(\r\n                        walker.currentNode = walker.parentNode() ?? root, walker.firstChild()\r\n                    );\r\n                    const lastItem = <HTMLEListItemElement>(\r\n                        walker.currentNode = walker.parentNode() ?? root, walker.lastChild()\r\n                    );\r\n                    const range = this.#getItemsRange(\r\n                        firstItem,\r\n                        lastItem\r\n                    );\r\n                    if (range) {\r\n                        this.#setSelection(...range);\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                const {activeItem} = this;\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.#setActiveItem(null);\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            this.#setActiveItem(target);\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (!this.#onSelection) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEListItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEListItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEListElement: HTMLEListElementConstructor = HTMLEListElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEDraggableElement };\r\n\r\ninterface HTMLEDraggableElementConstructor {\r\n    prototype: HTMLEDraggableElement;\r\n    new(): HTMLEDraggableElement;\r\n}\r\n\r\ninterface HTMLEDraggableElement extends HTMLElement {\r\n    readonly referee: this | null;\r\n    readonly references: this[];\r\n    selected: boolean;\r\n    dragged: boolean;\r\n    dragovered: boolean;\r\n\r\n    connectedCallback(): void;\r\n    disconnectedCallback(): void;\r\n    getReference(): this;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-draggable\": HTMLEDraggableElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-draggable\"\r\n})\r\nclass HTMLEDraggableElementBase extends HTMLElement implements HTMLEDraggableElement {\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    dragovered!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    dragged!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    #referee: this | null;\r\n    readonly references: this[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            padding: 3px 4px;\r\n                            cursor: pointer;\r\n                            white-space: nowrap;\r\n                            border-radius: 4px;\r\n                            border: 1px solid black;\r\n                            user-select: none;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                            color: lightgray;\r\n                            border-color: lightgray;\r\n                        }\r\n        \r\n                        :host([selected]:active) {\r\n                            cursor: grabbing;\r\n                        }\r\n                        \r\n                        :host([selected]) {\r\n                            cursor: grab;\r\n                            font-weight: bold;\r\n                            outline: 1px auto black;\r\n                        }\r\n        \r\n                        :host([dragovered]) {\r\n                            border-style: dotted;\r\n                        }\r\n                        \r\n                        [part=\"container\"] {\r\n                            display: flex;\r\n                            align-items: center;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"container\"\r\n                },\r\n                children: [\r\n                    element(\"slot\", {\r\n                        children: [\r\n                            \"&nbsp;\"\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.references = [];\r\n        this.#referee = null;\r\n    }\r\n\r\n    get referee(): this | null {\r\n        return this.#referee;\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n        this.draggable = true;\r\n    }\r\n\r\n    disconnectedCallback(): void {\r\n        if (this.referee) {\r\n            const thisRefIndex = this.referee.references.indexOf(this);\r\n            if (thisRefIndex > -1) {\r\n                this.referee.references.splice(thisRefIndex, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    getReference(): this {\r\n        const reference = <this>this.cloneNode(true);\r\n        reference.#referee = this;\r\n        return reference;\r\n    }\r\n}\r\n\r\nvar HTMLEDraggableElement: HTMLEDraggableElementConstructor = HTMLEDraggableElementBase","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\n\r\nexport { HTMLEDragzoneElement };\r\n\r\ninterface HTMLEDragzoneElementConstructor {\r\n    prototype: HTMLEDragzoneElement;\r\n    new(): HTMLEDragzoneElement\r\n}\r\n\r\ninterface HTMLEDragzoneElement extends HTMLElement {\r\n    readonly draggables: HTMLEDraggableElement[];\r\n    readonly selectedDraggables: HTMLEDraggableElement[];\r\n    disabled: boolean;\r\n    selectDraggable(draggable: HTMLEDraggableElement): void;\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void;\r\n    clearSelection(): void;\r\n    connectedCallback(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dragzone\": HTMLEDragzoneElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dragzone\"\r\n})\r\nclass HTMLEDragzoneElementBase extends HTMLElement implements HTMLEDragzoneElement {\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    #draggables: HTMLEDraggableElement[];\r\n    #selectedDraggables: HTMLEDraggableElement[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                        }\r\n        \r\n                        [part=\"container\"] {\r\n                            position: relative;\r\n                            display: flex;\r\n                            flex-direction: column;\r\n                            padding-left: 2px;\r\n                            padding-right: 2px;\r\n                        }\r\n        \r\n                        ::slotted(*) {\r\n                            margin-top: 2px;\r\n                            margin-bottom: 2px;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"container\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n        this.#draggables = [];\r\n        this.#selectedDraggables = [];\r\n    }\r\n\r\n    get draggables(): HTMLEDraggableElement[] {\r\n        return this.#draggables;\r\n    }\r\n\r\n    get selectedDraggables(): HTMLEDraggableElement[] {\r\n        return this.#selectedDraggables;\r\n    }\r\n\r\n    selectDraggable(draggable: HTMLEDraggableElement): void {\r\n        if (!this.selectedDraggables.includes(draggable)) {\r\n            this.selectedDraggables.push(draggable);\r\n        }\r\n        if (!draggable.selected) {\r\n            draggable.selected = true;\r\n        }\r\n    }\r\n\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void {\r\n        const index = this.selectedDraggables.indexOf(draggable);\r\n        if (index > -1) {\r\n            if (draggable.selected) {\r\n                draggable.selected = false;\r\n            }\r\n            this.selectedDraggables.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.selectedDraggables.forEach((draggable) => {\r\n            draggable.selected = false;\r\n        });\r\n        this.#selectedDraggables = [];\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const draggables = slot.assignedElements().filter(\r\n                    elem => elem instanceof HTMLEDraggableElement\r\n                ) as HTMLEDraggableElement[];\r\n                this.#draggables = draggables;\r\n                this.draggables.forEach((draggable) => {\r\n                    draggable.draggable = true;\r\n                });\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Escape\":\r\n                    this.clearSelection();\r\n                    this.focus();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragstart\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                this.selectedDraggables.forEach((thisSelectedDraggable) => {\r\n                    thisSelectedDraggable.dragged = true;\r\n                });\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", this.id);\r\n                }\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event) => {\r\n            const dataTransfer = event.dataTransfer;\r\n            if (dataTransfer) {\r\n                dataTransfer.dropEffect = \"none\";\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"dragend\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                const thisDraggedDraggables = this.draggables.filter(draggable => draggable.dragged);\r\n                thisDraggedDraggables.forEach((thisDraggedDraggable) => {\r\n                    thisDraggedDraggable.dragged = false;\r\n                });\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            if (!this.contains(relatedTarget)) {\r\n                this.clearSelection();\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button == 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        if (!target.selected) {\r\n                            this.clearSelection();\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                    else if (event.ctrlKey) {\r\n                        (!target.selected) ?\r\n                            this.selectDraggable(target) :\r\n                            this.unselectDraggable(target);\r\n                    }\r\n                    else if (event.shiftKey) {\r\n                        if (this.selectedDraggables.length > 0) {\r\n                            const targetIndex = this.draggables.indexOf(target);\r\n                            const firstIndex = this.draggables.indexOf(this.selectedDraggables[0]);\r\n                            const direction = Math.sign(targetIndex - firstIndex);\r\n                            const fromIndex = (direction > 0) ? 0 : this.draggables.length - 1;\r\n                            const toIndex = (direction > 0) ? this.draggables.length - 1 : 0;\r\n                            const startRangeIndex = (direction > 0) ? firstIndex : targetIndex;\r\n                            const endRangeIndex = (direction > 0) ? targetIndex : firstIndex;\r\n                            for (let index = fromIndex; index !== (toIndex + direction); index += direction) {\r\n                                (index >= startRangeIndex && index <= endRangeIndex) ? \r\n                                    this.selectDraggable(this.draggables[index]) :\r\n                                    this.unselectDraggable(this.draggables[index]);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.clearSelection();\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mouseup\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button == 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        this.draggables.forEach((thisDraggable) => {\r\n                            if (thisDraggable !== target) {\r\n                                this.unselectDraggable(thisDraggable);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEDragzoneElement: HTMLEDragzoneElementConstructor = HTMLEDragzoneElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\nimport { HTMLEDragzoneElement } from \"./Dragzone\";\r\n\r\nexport { HTMLEDropzoneElement };\r\nexport { EDataChangeEvent };\r\n\r\ninterface HTMLEDropzoneElementConstructor {\r\n    prototype: HTMLEDropzoneElement;\r\n    new(): HTMLEDropzoneElement;\r\n}\r\n\r\ninterface HTMLEDropzoneElement extends HTMLEDragzoneElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    dragovered: DropzoneDragoveredType | null;\r\n    name: string;\r\n    multiple: boolean;\r\n    placeholder: string;\r\n\r\n    droptest: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => void) | null;\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): void;\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean): void;\r\n\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ntype DropzoneDragoveredType = \"self\" | \"draggable\" | \"appendarea\";\r\n\r\ntype EDataChangeEvent = CustomEvent<{\r\n    action: \"insert\" | \"remove\";\r\n    draggables: HTMLEDraggableElement[];\r\n    position: number;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dropzone\": HTMLEDropzoneElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"e_datachange\": EDataChangeEvent,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dropzone\"\r\n})\r\nclass HTMLEDropzoneElementBase extends HTMLEDragzoneElement implements HTMLEDropzoneElement {\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    dragovered!: DropzoneDragoveredType | null;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    placeholder!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    multiple!: boolean;\r\n\r\n    droptest!: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => boolean) | null;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.shadowRoot!.querySelector(\"style\")!.append(/*css*/`\r\n            :host {\r\n                border: 1px dashed gray;\r\n            }\r\n\r\n            :host(:not([multiple]):not(:empty)) [part=\"appendarea\"],\r\n            :host(:not(:empty):not([dragovered])) [part=\"appendarea\"] {\r\n                display: none !important;\r\n            }\r\n\r\n            [part=\"appendarea\"] {\r\n                display: block;\r\n                margin: 2px;\r\n                border-radius: 4px;\r\n                border: 1px dotted black;\r\n            }\r\n\r\n            :host(:not([dragovered=\"appendarea\"])) [part=\"appendarea\"] {\r\n                border-color: transparent;\r\n            }\r\n            \r\n            [part=\"placeholder\"] {\r\n                display: inline-block;\r\n                color: grey;\r\n                pointer-events: none;\r\n                user-select: none;\r\n            }\r\n        `);\r\n\r\n        this.shadowRoot.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"appendarea\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"placeholder\"\r\n                        },\r\n                        children: [\r\n                            \"&nbsp;\"\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.droptest = null;\r\n    }\r\n    \r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        const appendAreaPart = this.shadowRoot!.querySelector<HTMLDivElement>(\"[part='appendarea']\");\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Delete\":\r\n                    if (this == event.target) {\r\n                        this.removeDraggables();\r\n                    }\r\n                    else {\r\n                        this.removeDraggables(draggable => draggable.selected);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragover\", (event: DragEvent) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragover\", (event) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragenter\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                target.dragovered = true;\r\n                this.dragovered = \"draggable\";\r\n            }\r\n            else {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragenter\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"appendarea\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event: DragEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                if (target == this) {\r\n                    if (appendAreaPart) {\r\n                        this.dragovered = \"self\";\r\n                    }\r\n                    if (!this.draggables.includes(relatedTarget)) {\r\n                        this.dragovered = null;\r\n                    }\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                }\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragleave\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n        \r\n        this.addEventListener(\"drop\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                let dropIndex = this.draggables.length;\r\n                if (target == this) {\r\n                    this.dragovered = null;\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                    dropIndex = this.draggables.indexOf(target);\r\n                }\r\n\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    const dragzoneId = dataTransfer.getData(\"text/plain\");\r\n                    const dragzone = document.getElementById(dragzoneId);\r\n                    if (dragzone instanceof HTMLEDragzoneElement) {\r\n                        const selectedDraggables = dragzone.selectedDraggables;\r\n                        if (selectedDraggables) {\r\n                            selectedDraggables.forEach((selectedDraggable) => {\r\n                                selectedDraggable.dragged = false;\r\n                            });\r\n                            if (dragzone instanceof HTMLEDropzoneElement) {\r\n                                dragzone.removeDraggables((draggable) => selectedDraggables.includes(draggable));\r\n                            }\r\n                            dragzone.clearSelection();\r\n                            this.addDraggables(selectedDraggables, dropIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.dragovered = null;\r\n            event.preventDefault();\r\n        });\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"placeholder\": {\r\n                const placeholderPart = this.shadowRoot.querySelector(\"[part='placeholder']\");\r\n                if (placeholderPart) {\r\n                    placeholderPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): HTMLEDraggableElement[] | null {\r\n        if (draggables.length > 0) {\r\n            let dataTransferSuccess = true;\r\n            if (this.droptest) {\r\n                dataTransferSuccess = this.droptest(this, draggables);\r\n            }\r\n            \r\n            let newDraggables: HTMLEDraggableElement[] = [];\r\n            let insertionPosition = -1;\r\n            if (dataTransferSuccess) {\r\n                if (this.multiple) {\r\n                    draggables.forEach((draggable) => {\r\n                        let newDraggable = draggable.getReference();\r\n                        if (position > -1 && position < this.draggables.length) {\r\n                            this.draggables[position].insertAdjacentElement(\"beforebegin\", newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? position : insertionPosition;\r\n                        }\r\n                        else {\r\n                            this.appendChild(newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? this.draggables.length - 1 : insertionPosition;\r\n                        }\r\n                        newDraggables.push(newDraggable);\r\n                    });\r\n                }\r\n                else {\r\n                    let newDraggable = draggables[0].getReference();\r\n                    if (this.draggables.length > 0) {\r\n                        this.replaceChild(newDraggable, this.draggables[0]);\r\n                    }\r\n                    else {\r\n                        this.appendChild(newDraggable);\r\n                    }\r\n                    newDraggables.push(newDraggable);\r\n                    insertionPosition = 0;\r\n                }\r\n            }\r\n            \r\n            const slot = this.shadowRoot?.querySelector(\"slot\");\r\n            if (slot) {\r\n                slot.addEventListener(\"slotchange\", () => {\r\n                    this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                        bubbles: true,\r\n                        detail: {\r\n                            action: \"insert\",\r\n                            draggables: newDraggables,\r\n                            position: insertionPosition\r\n                        }\r\n                    }));\r\n                }, {once: true});\r\n            }\r\n            return newDraggables;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean = () => true) {\r\n        let toRemove = this.draggables.filter(\r\n            (value: HTMLEDraggableElement, index: number) => {\r\n                return predicate(value, index);\r\n            }\r\n        );\r\n        let atPosition = this.draggables.indexOf(toRemove[0]);\r\n        toRemove.forEach((draggable) => {\r\n            draggable.remove(); \r\n        });\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                    bubbles: true,\r\n                    detail: {\r\n                        action: \"remove\",\r\n                        draggables: toRemove,\r\n                        position: atPosition\r\n                    }\r\n                }));\r\n            }, {once: true});\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEDropzoneElement: HTMLEDropzoneElementConstructor = HTMLEDropzoneElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEDialogElement };\r\n\r\ninterface HTMLEDialogElementConstructor {\r\n    prototype: HTMLEDialogElement;\r\n    new(): HTMLEDialogElement;\r\n}\r\n\r\ntype DialogElementType = \"confirm\" | \"alert\";\r\n\r\ninterface HTMLEDialogElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: DialogElementType;\r\n    open(): void;\r\n    close(): void;\r\n    cancel(): void;\r\n    confirm(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dialog\": HTMLEDialogElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"open\": Event,\r\n        \"close\": Event,\r\n        \"cancel\": Event,\r\n        \"confirm\": Event,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dialog\"\r\n})\r\nclass HTMLEDialogElementBase extends HTMLElement implements HTMLEDialogElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: DialogElementType;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            padding: 6px;\r\n                            background-color: white;\r\n        \r\n                            -webkit-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            -moz-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                        }\r\n        \r\n                        button {\r\n                            cursor: pointer;\r\n                        }\r\n        \r\n                        [part=\"actions\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part=\"header\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part=\"button\"]:not(:first-child) {\r\n                            margin-left: 4px;\r\n                        }\r\n        \r\n                        :host([type=\"confirm\"]) [part=\"ok-button\"] {\r\n                            display: none !important;\r\n                        }\r\n        \r\n                        :host([type=\"alert\"]) [part=\"cancel-button\"],\r\n                        :host([type=\"alert\"]) [part=\"confirm-button\"] {\r\n                            display: none !important;\r\n                        }\r\n                    `\r\n                    ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"header\"\r\n                },\r\n                children: [\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button close-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"x\"\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"hr\", {\r\n                attributes: {\r\n                    part: \"separator\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"body\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"hr\", {\r\n                attributes: {\r\n                    part: \"separator\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"actions\",\r\n                },\r\n                children: [\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button cancel-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"Cancel\"\r\n                        ]\r\n                    }),\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button confirm-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"Confirm\"\r\n                        ]\r\n                    }),\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button ok-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"OK\"\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n        );\r\n    }\r\n\r\n    connectedCallback() {\r\n        this.shadowRoot.addEventListener(\"click\", this);\r\n    }\r\n\r\n    handleEvent(event: Event) {\r\n        const {type, target} = event;\r\n        switch (type) {\r\n            case \"click\":\r\n                const {part} = <Element>target;\r\n                if (part.contains(\"close-button\") || part.contains(\"cancel-button\")) {\r\n                    this.cancel();\r\n                }\r\n                else if (part.contains(\"confirm-button\") || part.contains(\"ok-button\")) {\r\n                    this.confirm();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    open(): void {\r\n        this.dispatchEvent(new CustomEvent(\"open\", {bubbles: true}));\r\n    }\r\n\r\n    close(): void {\r\n        this.dispatchEvent(new CustomEvent(\"close\", {bubbles: true}));\r\n    }\r\n\r\n    cancel(): void {\r\n        this.dispatchEvent(new CustomEvent(\"cancel\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n\r\n    confirm(): void {\r\n        this.dispatchEvent(new CustomEvent(\"confirm\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n}\r\n\r\nvar HTMLEDialogElement: HTMLEDialogElementConstructor = HTMLEDialogElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEHandleElement };\r\n\r\ninterface HTMLEHandleElementConstructor {\r\n    prototype: HTMLEHandleElement;\r\n    new(): HTMLEHandleElement;\r\n}\r\n\r\ninterface HTMLEHandleElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    controls: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-handle\": HTMLEHandleElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"move\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-handle\"\r\n})\r\nclass HTMLEHandleElementBase extends HTMLElement implements HTMLEHandleElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                            \r\n                            width: 24px;\r\n                            height: 12px;\r\n                            \r\n                            background-color: rgb(0, 128, 255);\r\n\r\n                            -webkit-mask-image: url(\"assets/dots.png\");\r\n                            mask-image: url(\"assets/dots.png\");\r\n\r\n                            -webkit-mask-repeat: repeat;\r\n                            mask-repeat: repeat;\r\n                            cursor: move;\r\n                        }\r\n                    `\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"controls\": {\r\n                const {controls} = this;\r\n                this.#target = document.getElementById(controls);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        this.#target = document.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            const target = this.#target;\r\n            if (target !== null) {\r\n                const targetComputedStyle = window.getComputedStyle(target);\r\n                const {movementX, movementY} = event;\r\n                const {width: rectWidth, height: rectHeight} = target.getBoundingClientRect();\r\n                const outerElement = target.parentElement ?? document.body;\r\n                const {\r\n                    left: outerRectLeft, right: outerRectRight,\r\n                    top: outerRectTop, bottom: outerRectBottom\r\n                } = outerElement.getBoundingClientRect();\r\n                const left = parseFloat(targetComputedStyle.getPropertyValue(\"left\"));\r\n                const newLeft = Math.max(outerRectLeft, Math.min(Math.trunc(left + movementX), outerRectRight - rectWidth));\r\n                const top = parseFloat(targetComputedStyle.getPropertyValue(\"top\"));\r\n                const newTop = Math.max(outerRectTop, Math.min(Math.trunc(top + movementY), outerRectBottom - rectHeight));\r\n                target.style.setProperty(\"left\", `${newLeft}px`);\r\n                target.style.setProperty(\"top\", `${newTop}px`);\r\n                this.dispatchEvent(new CustomEvent(\"move\"));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEHandleElement: HTMLEHandleElementConstructor = HTMLEHandleElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEHeightSashElement };\r\n\r\ninterface HTMLEHeightSashElementConstructor {\r\n    prototype: HTMLEHeightSashElement;\r\n    new(): HTMLEHeightSashElement;\r\n}\r\n\r\ninterface HTMLEHeightSashElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    controls: string;\r\n    growdir: \"top\" | \"bottom\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-hsash\": HTMLEHeightSashElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"resize\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-hsash\"\r\n})\r\nclass HTMLEHeightSashElementBase extends HTMLElement implements HTMLEHeightSashElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"top\"})\r\n    growdir!: \"top\" | \"bottom\";\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n    #queuedPointerCallback: FrameRequestCallback | null;\r\n    #pointerMovement: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            width: 100%;\r\n        \r\n                            max-height: 4px;\r\n                            height: 4px;\r\n                            min-height: 4px;\r\n        \r\n                            margin-top: -2px;\r\n                            margin-bottom: -2px;\r\n                            \r\n                            background-color: rgb(135, 206, 250);\r\n                            cursor: ns-resize;\r\n        \r\n                            transition-property: opacity;\r\n                            transition-delay: 0.2s;\r\n                            transition-duration: 0.2s;\r\n                            transition-timing-function: ease-out;\r\n                            opacity: 0;\r\n                        }\r\n        \r\n                        :host(:active),\r\n                        :host(:hover) {\r\n                            opacity: 1;\r\n                        }\r\n                    `\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#queuedPointerCallback = null;\r\n        this.#pointerMovement = 0;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        const rootNode = <ShadowRoot | Document>this.getRootNode();\r\n        this.#target = rootNode.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            if (this.#queuedPointerCallback == null) {\r\n                this.#pointerMovement = event.movementY;\r\n                this.#queuedPointerCallback = this.#pointerMoveCallback.bind(this);\r\n                requestAnimationFrame(this.#queuedPointerCallback);\r\n            }\r\n            else {\r\n                this.#pointerMovement += event.movementY;\r\n            }\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const {growdir} = this;\r\n            const movementY = this.#pointerMovement;\r\n            const height = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            const newHeight = Math.trunc(height + (growdir == \"top\" ? -1 : 1) * movementY);\r\n            target.style.setProperty(\"height\", `${newHeight}px`);\r\n            const computedNewHeight = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            target.style.setProperty(\"height\", `${computedNewHeight}px`);\r\n            this.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        this.#queuedPointerCallback = null;\r\n    }\r\n}\r\n\r\nvar HTMLEHeightSashElement: HTMLEHeightSashElementConstructor = HTMLEHeightSashElementBase;","import { CustomElement, AttributeProperty } from \"../Element\";\r\n\r\nexport { HTMLEImportElement };\r\n\r\ninterface HTMLEImportElementConstructor {\r\n    prototype: HTMLEImportElement;\r\n    new(): HTMLEImportElement;\r\n}\r\n\r\ninterface HTMLEImportElement extends HTMLElement {\r\n    src: string;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-import\": HTMLEImportElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"load\": Event;\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-import\"\r\n})\r\nclass HTMLEImportElementBase extends HTMLElement implements HTMLEImportElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    src!: string;\r\n    \r\n    connectedCallback(): void {\r\n        const {src} = this;\r\n        if (src) {\r\n            this.#importRequest(src);\r\n        }\r\n    }\r\n\r\n    async #importRequest(src: string): Promise<void> {\r\n        this.outerHTML = await fetch(src).then((response: Response) => {\r\n            if (response.ok) {\r\n                return response.text();\r\n            }\r\n            else {\r\n                throw new Error(response.statusText);\r\n            }\r\n        });\r\n        this.dispatchEvent(new Event(\"load\", {bubbles: true}));\r\n    }\r\n}\r\n\r\nvar HTMLEImportElement: HTMLEImportElementConstructor = HTMLEImportElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLELoaderElement };\r\n\r\ninterface HTMLELoaderElementConstructor {\r\n    prototype: HTMLELoaderElement;\r\n    new(): HTMLELoaderElement;\r\n}\r\n\r\ninterface HTMLELoaderElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    type: \"bar\" | \"circle\";\r\n    promise: Promise<any> | null;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-loader\": HTMLELoaderElement,\r\n    }\r\n}\r\n\r\nvar barShadowTemplate: HTMLTemplateElement;\r\nvar circleShadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-loader\"\r\n})\r\nclass HTMLELoaderElementBase extends HTMLElement implements HTMLELoaderElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String, defaultValue: \"bar\", observed: true})\r\n    type!: \"bar\" | \"circle\";\r\n    \r\n    #promise: Promise<any> | null;\r\n\r\n    static {\r\n        const commonStyle = element(\"style\", {\r\n            children: [\r\n                /*css*/`\r\n                    :host {\r\n                        display: inline-block;\r\n                        --default-loader-color: rgb(0, 128, 255);\r\n                        --default-animation-duration: 2s;\r\n                    }\r\n                `\r\n            ]\r\n        });\r\n        const barStyle = commonStyle.cloneNode(true);\r\n        const circleStyle = commonStyle.cloneNode(true);\r\n        barStyle.textContent += /*css*/`\r\n            :host {\r\n                display: block;\r\n            }\r\n\r\n            [part=\"bar\"] {\r\n                position: relative;\r\n                display: block;\r\n                overflow: hidden;\r\n                height: 6px;\r\n                width: 100%;\r\n            }\r\n\r\n            [part=\"slider\"] {\r\n                display: flex;\r\n                position: absolute;\r\n                width: 100%;\r\n                height: 100%;\r\n                animation-name: slider;\r\n            }\r\n\r\n            [part=\"slider\"],\r\n            [part=\"cursor\"] {\r\n                border-radius: 4px;\r\n                will-change: transform;\r\n                animation-duration: var(--animation-duration, var(--default-animation-duration));\r\n                animation-timing-function: linear;\r\n                animation-iteration-count: infinite;\r\n            }\r\n\r\n            [part=\"cursor\"] {\r\n                display: block;\r\n                width: 128px;\r\n                background-color: var(--loader-color, var(--default-loader-color));\r\n                animation-name: cursor;\r\n            }\r\n\r\n            [part=\"bar\"]:after {\r\n                animation-name: shine;\r\n                animation-duration: var(--animation-duration, var(--default-animation-duration));\r\n                animation-iteration-count: infinite;\r\n                animation-fill-mode: forwards;  \r\n                content: \"\";\r\n                position: absolute;\r\n                left: -100%;\r\n                width: 100%;\r\n                height: 100%;\r\n                top: 0;\r\n                opacity: 0;\r\n                \r\n                background: rgba(255, 255, 255, 0.13);\r\n                background: linear-gradient(\r\n                    to right, \r\n                    rgba(255, 255, 255, 0) 0%,\r\n                    rgba(255, 255, 255, 0.1) 10%,\r\n                    rgba(255, 255, 255, 0.9) 80%,\r\n                    rgba(255, 255, 255, 0) 100%\r\n                );\r\n            }\r\n\r\n            @keyframes shine {\r\n                25% {\r\n                    opacity: 1;\r\n                    left: -100%;\r\n                }\r\n                100% {\r\n                    opacity: 0;\r\n                    left: 100%;\r\n                }\r\n            }\r\n\r\n            @keyframes slider {\r\n                0% {\r\n                    transform: translateX(0%);\r\n                }\r\n                100% {\r\n                    transform: translateX(100%);\r\n                }\r\n            }\r\n\r\n            @keyframes cursor {\r\n                0% {\r\n                    transform: translateX(-100%);\r\n                }\r\n                100% {\r\n                    transform: translateX(100%);\r\n                }\r\n            }\r\n        `;\r\n        circleStyle.textContent += /*css*/`\r\n            :host {\r\n                display: inline-block;\r\n            }\r\n\r\n            [part=\"circle\"] {\r\n                width: 12px;\r\n                height: 12px;\r\n                border-top: 4px solid var(--loader-color, var(--default-loader-color));\r\n                border-right: 4px solid var(--loader-color, var(--default-loader-color));\r\n                border-left: 4px solid transparent;\r\n                border-bottom: 4px solid transparent;\r\n                border-radius: 50%;\r\n                animation-duration: 1s;\r\n                animation-name: circle;\r\n                animation-timing-function: linear;\r\n                animation-iteration-count: infinite;\r\n            }\r\n\r\n            @keyframes circle {\r\n                0% {\r\n                    transform: rotate(0);\r\n                }\r\n                100% {\r\n                    transform: rotate(360deg);\r\n                }\r\n            }\r\n        `;\r\n        barShadowTemplate = element(\"template\");\r\n        barShadowTemplate.content.append(\r\n            barStyle,\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"bar\"\r\n                },\r\n                children: [\r\n                    element(\"div\", {\r\n                        attributes: {\r\n                            part: \"slider\"\r\n                        },\r\n                        children: [\r\n                            element(\"div\", {\r\n                                attributes: {\r\n                                    part: \"cursor\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n        circleShadowTemplate = element(\"template\");\r\n        circleShadowTemplate.content.append(\r\n            circleStyle,\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"circle\"\r\n                }\r\n            })\r\n        )\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.#updateTemplate();\r\n        this.#promise = null;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"type\": {\r\n                this.#updateTemplate();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    set promise(promise: Promise<any> | null) {\r\n        if (promise) {\r\n            promise.finally(() => {\r\n                this.remove();\r\n            });\r\n        }\r\n        this.#promise = promise;\r\n    }\r\n\r\n    get promise(): Promise<any> | null {\r\n        return this.#promise;\r\n    }\r\n\r\n    #updateTemplate(): void {\r\n        const {type, shadowRoot} = this;\r\n        switch (type) {\r\n            case \"circle\": {\r\n                shadowRoot.replaceChildren(\r\n                    circleShadowTemplate.content.cloneNode(true)\r\n                );\r\n                break;\r\n            }\r\n            case \"bar\": {\r\n                shadowRoot.replaceChildren(\r\n                    barShadowTemplate.content.cloneNode(true)\r\n                );\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLELoaderElement: HTMLELoaderElementConstructor = HTMLELoaderElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEWidthSashElement };\r\n\r\ninterface HTMLEWidthSashElementConstructor {\r\n    prototype: HTMLEWidthSashElement;\r\n    new(): HTMLEWidthSashElement;\r\n}\r\n\r\ninterface HTMLEWidthSashElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    controls: string;\r\n    growdir: \"right\" | \"left\";\r\n    max: boolean;\r\n    setWidth(width: number): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-wsash\": HTMLEWidthSashElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"resize\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-wsash\"\r\n})\r\nclass HTMLEWidthSashElementBase extends HTMLElement implements HTMLEWidthSashElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"right\"})\r\n    growdir!: \"right\" | \"left\";\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    max!: boolean;\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n    #queuedPointerCallback: FrameRequestCallback | null;\r\n    #pointerMovement: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            width: 4px;\r\n                            \r\n                            background-color: transparent;\r\n                            cursor: ew-resize;\r\n        \r\n                            transition-property: opacity;\r\n                            transition-delay: 0.2s;\r\n                            transition-duration: 0.2s;\r\n                            transition-timing-function: ease-out;\r\n                        }\r\n        \r\n                        :host(:active),\r\n                        :host(:hover) {\r\n                            background-color: rgb(135, 206, 250);\r\n                        }\r\n                    `\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#queuedPointerCallback = null;\r\n        this.#pointerMovement = 0;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    setWidth(width: number): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const {max} = this;\r\n            target.style.setProperty(\"width\", `${width}px`);\r\n            if (max) {\r\n                target.style.setProperty(\"max-width\", `${width}px`);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        const rootNode = <ShadowRoot | Document>this.getRootNode();\r\n        this.#target = rootNode.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            if (this.#queuedPointerCallback == null) {\r\n                this.#queuedPointerCallback = this.#pointerMoveCallback.bind(this);\r\n                requestAnimationFrame(this.#queuedPointerCallback);\r\n            }\r\n            this.#pointerMovement += event.movementX;\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const {growdir} = this;\r\n            const movementX = this.#pointerMovement;\r\n            const width = parseFloat(targetComputedStyle.getPropertyValue(\"width\"));\r\n            const newWidth = width + (growdir == \"right\" ? 1 : -1) * movementX;\r\n            this.setWidth(newWidth);\r\n            this.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        this.#pointerMovement = 0;\r\n        this.#queuedPointerCallback = null;\r\n    }\r\n}\r\n\r\nvar HTMLEWidthSashElement: HTMLEWidthSashElementConstructor = HTMLEWidthSashElementBase;","import { areAttributesMatching, AttributeMutationMixin } from \"../elements/Element\";\r\n\r\nexport { AttributeMixinsObserver };\r\n\r\ninterface AttributeMixinsObserverConstructor {\r\n    prototype: AttributeMixinsObserver;\r\n    new(mixins: AttributeMutationMixin[]): AttributeMixinsObserver;\r\n}\r\n\r\ninterface AttributeMixinsObserver {\r\n    observe(target: Node): void;\r\n    trigger(): void;\r\n    disconnect(): void;\r\n}\r\n\r\nclass AttributeMixinsObserverBase implements AttributeMixinsObserver {\r\n    #observer: MutationObserver;\r\n    #mixins: AttributeMutationMixin[];\r\n\r\n    constructor(mixins: AttributeMutationMixin[]) {\r\n        this.#observer = new MutationObserver(\r\n            this.#callback.bind(this)\r\n        );\r\n        this.#mixins = mixins.slice();\r\n    }\r\n\r\n    trigger(): void {\r\n        this.#callback(this.#observer.takeRecords());\r\n    }\r\n\r\n    observe(target: Node): void  {\r\n        this.#observer.observe(target, {\r\n            childList: true,\r\n            subtree: true,\r\n            attributeFilter: this.#mixins.map((mixin => mixin.attributeName))\r\n        });\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#observer.disconnect();\r\n    }\r\n\r\n    #callback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            mutation.addedNodes.forEach((node: Node) => {\r\n                if (node instanceof Element) {\r\n                    this.#attachMatchingAttributeMixinsInSubtree(node);\r\n                }\r\n            });\r\n            mutation.removedNodes.forEach((node: Node) => {\r\n                if (node instanceof Element) {\r\n                    this.#detachMatchingAttributeMixinsInSubtree(node);\r\n                }\r\n            });\r\n            if (mutation.target instanceof Element) {\r\n                const targetElement = mutation.target;\r\n                const attributeName = mutation.attributeName;\r\n                if (attributeName) {\r\n                    const relatedMixins = this.#mixins.filter(mixin => mixin.attributeName == attributeName);\r\n                    relatedMixins.forEach((mixin) => {\r\n                        if (areAttributesMatching(\r\n                                mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                                attributeName!, targetElement.getAttribute(attributeName!)\r\n                            )) {\r\n                                mixin.attach(targetElement);\r\n                        }\r\n                        else {\r\n                            mixin.detach(targetElement);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    #attachMatchingAttributeMixinsInSubtree(element: Element) {\r\n        Array.from(element.attributes).forEach((attr) => {\r\n            let matchingMixins = this.#mixins.filter(\r\n                mixin => areAttributesMatching(\r\n                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                    attr.name, attr.value\r\n                )\r\n            );\r\n            matchingMixins.forEach((mixin) => {\r\n                mixin.attach(element);\r\n            });\r\n        });\r\n        let childIndex = 0;\r\n        const {children} = element;\r\n        while (childIndex < children.length) {\r\n            const child = children.item(childIndex);\r\n            if (child !== null) {\r\n                this.#attachMatchingAttributeMixinsInSubtree(child);\r\n            }\r\n            childIndex++;\r\n        }\r\n    }\r\n\r\n    #detachMatchingAttributeMixinsInSubtree(element: Element) {\r\n        Array.from(element.attributes).forEach((attr) => {\r\n            let matchingMixins = this.#mixins.filter(\r\n                mixin => areAttributesMatching(\r\n                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                    attr.name, attr.value\r\n                )\r\n            );\r\n            matchingMixins.forEach((mixin) => {\r\n                mixin.detach(element);\r\n            });\r\n        });\r\n        let childIndex = 0;\r\n        const {children} = element;\r\n        while (childIndex < children.length) {\r\n            const child = children.item(childIndex);\r\n            if (child !== null) {\r\n                this.#detachMatchingAttributeMixinsInSubtree(child);\r\n            }\r\n            childIndex++;\r\n        }\r\n    }\r\n}\r\n\r\nvar AttributeMixinsObserver: AttributeMixinsObserverConstructor = AttributeMixinsObserverBase;","import { Widget, element } from \"../../elements/Element\";\r\nimport { WidgetFactory } from \"./Widget\";\r\n\r\nexport { separatorWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"separator\": SeparatorWidgetFactory\r\n    }\r\n}\r\n\r\ninterface SeparatorWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar separatorWidget = new (\r\nWidget({\r\n    name: \"separator\"\r\n})(class SeparatorWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"separator\",\r\n                role: \"separator\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n}));","import { element, Widget } from \"../../../elements/Element\";\r\nimport { menuItemWidget } from \"./MenuItemWidget\";\r\nimport { WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuBarWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menubar\": MenuBarWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuBarWidgetFactory extends WidgetFactory {\r\n    setExpanded(menubar: HTMLElement, value: boolean): void;\r\n    getExpanded(menubar: HTMLElement): boolean;\r\n}\r\n\r\nvar menuBarWidget = new (\r\nWidget({\r\n    name: \"menubar\"\r\n})(class MenubarWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menubar\",\r\n                role: \"menubar\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        )\r\n    }\r\n\r\n    create() {\r\n        const menubar = <HTMLElement>this.#template.cloneNode(true);\r\n        menubar.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        menubar.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        menubar.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        menubar.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        menubar.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        return menubar;\r\n    }\r\n\r\n    slot(menubar: HTMLElement) {\r\n        return menubar;\r\n    }\r\n\r\n    setExpanded(menubar: HTMLElement, value: boolean): void {\r\n        menubar.toggleAttribute(\"aria-expanded\", value);\r\n    }\r\n\r\n    getExpanded(menubar: HTMLElement): boolean {\r\n        return menubar.hasAttribute(\"aria-expanded\");\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node) {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"menuitem\") && !menuItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"menuitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getActiveItem(menubar: HTMLElement): HTMLElement | null {\r\n        return menubar.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem:focus-within\"\r\n        );\r\n    }\r\n\r\n    #firstItem(menubar: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menubar;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(menubar: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menubar;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n\r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = menuItemWidget.getMenu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #isClosestMenu(menubar: HTMLElement, target: HTMLElement): boolean {\r\n        return target.closest(\":is(.menubar, .menu)\") == menubar;\r\n    }\r\n\r\n    #nearestItem(menubar: HTMLElement, target: HTMLElement): HTMLElement | null {\r\n        return Array.from(menubar.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem) {\r\n            const expanded = this.getExpanded(menubar);\r\n            const isClosestMenu = this.#isClosestMenu(menubar, targetItem);\r\n            if (isClosestMenu) {\r\n                const isExpanded = !expanded;\r\n                this.setExpanded(menubar, isExpanded);\r\n                if (isExpanded) {\r\n                    if (targetItem !== null && !menuItemWidget.getExpanded(targetItem)) {\r\n                        menuItemWidget.expand(targetItem);\r\n                    }\r\n                    const menu = menuItemWidget.getMenu(targetItem);\r\n                    menu?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    menubar.focus({preventScroll: true})\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && this.getExpanded(menubar)) {\r\n            const nearestItem = this.#nearestItem(menubar, target);\r\n            if (nearestItem) {\r\n                menuItemWidget.expand(nearestItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && !target.contains(<Element>relatedTarget)) {\r\n            const nearestItem = this.#nearestItem(menubar, target);\r\n            if (nearestItem) {\r\n                menuItemWidget.collapse(nearestItem);\r\n            }\r\n        }\r\n        const lostFocusWithin = !menubar.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.setExpanded(menubar, false);\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const activeItem = this.#getActiveItem(menubar);\r\n            const expanded = this.getExpanded(menubar);\r\n            const isClosestMenu = this.#isClosestMenu(menubar, target);\r\n            if (isClosestMenu && target !== activeItem && expanded) {\r\n                const menu = menuItemWidget.getMenu(target);\r\n                if (menu) {\r\n                    menu.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    target.focus({preventScroll: true});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        let activeItem = this.#getActiveItem(menubar);\r\n        const expanded = this.getExpanded(menubar);\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem(menubar) :\r\n                    this.#firstItem(menubar);\r\n                previousItem?.focus({preventScroll: true});\r\n                activeItem = this.#getActiveItem(menubar);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem(menubar) : \r\n                    this.#lastItem(menubar);\r\n                nextItem?.focus({preventScroll: true});\r\n                activeItem = this.#getActiveItem(menubar);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    this.setExpanded(menubar, !expanded);\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.setExpanded(menubar, false);\r\n                    if (activeItem) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    menubar.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}));","import { Widget, element } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menuitemgroup\": MenuItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar menuItemGroupWidget = new (\r\nWidget({\r\n    name: \"menuitemgroup\"\r\n})(class MenuItemGroupWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menuitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement): HTMLElement | null {\r\n        return group;\r\n    }\r\n}));","import { Widget, element } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\nimport { treeItemWidget } from \"./TreeItemWidget\";\r\n\r\nexport { treeItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"treeitemgroup\": TreeItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface TreeItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar treeItemGroupWidget = new (\r\nWidget({\r\n    name: \"treeitemgroup\"\r\n})(class TreeItemGroupWidgetFactoryBase extends WidgetFactory implements TreeItemGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"treeitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n\r\n    slottedCallback(group: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"treeitem\")) {\r\n                treeItemWidget.setPosInSet(child_i, i);\r\n                treeItemWidget.setLevel(child_i, (() => {\r\n                    let level = -1;\r\n                    let closestItem: HTMLElement | null = child_i;\r\n                    while (closestItem !== null && closestItem.matches(\".tree :scope\")) {\r\n                        closestItem = closestItem.parentElement?.closest(\".treeitem\") ?? null;\r\n                        level++;\r\n                    }\r\n                    return level;\r\n                })());\r\n            }\r\n        });\r\n    }\r\n}));","import { element, Widget } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\n\r\nexport { listItemWidget };\r\n\r\ninterface ListItemWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        label?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"listitem\": ListItemWidgetFactory,\r\n    }\r\n}\r\n\r\nvar listItemWidget = new (\r\nWidget({\r\n    name: \"listitem\"\r\n})(class ListItemWidgetFactoryBase extends WidgetFactory implements ListItemWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"li\", {\r\n            attributes: {\r\n                class: \"listitem\",\r\n                role: \"listitem\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        label?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {label, disabled} = init;\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n            this.setSelected(item, false);\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(root: HTMLElement): HTMLElement | null {\r\n        return root;\r\n    }\r\n\r\n    group(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .listitemgroup\");\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(row: HTMLElement, value: boolean): void {\r\n        row.setAttribute(\"aria-selected\", String(value));\r\n        row.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(row: HTMLElement): boolean {\r\n        return JSON.parse(row.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    #label(item: HTMLElement): Node {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n}));","import { element, Widget } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\nimport { listItemWidget } from \"./ListItemWidget\";\r\n\r\nexport  { listWidget };\r\n\r\ninterface ListWidgetFactory extends WidgetFactory {\r\n    create(properties: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement;\r\n    items(list: HTMLElement): HTMLElement[];\r\n    beginSelection(list: HTMLElement): void;\r\n    endSelection(list: HTMLElement): void;\r\n    selectedItems(list: HTMLElement): HTMLElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"list\": ListWidgetFactory,\r\n    }\r\n}\r\n\r\nvar listWidget = new (\r\nWidget({\r\n    name: \"list\"\r\n})(class ListWidgetFactoryBase extends WidgetFactory implements ListWidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"list\",\r\n                role: \"list\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement {\r\n        const list = <HTMLElement>this.#template.cloneNode(true);\r\n        list.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        list.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        list.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        list.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        list.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        list.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        list.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        list.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        list.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        list.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        list.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        list.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, multisectable} = properties;\r\n            if (id !== undefined) {\r\n                list.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                list.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                list.tabIndex = tabIndex;\r\n            }\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(list, multisectable);\r\n            }\r\n        }\r\n        this.#onSelection.set(list, false);\r\n        this.#hasSelectionChanged.set(list, false);\r\n        return list;\r\n    }\r\n\r\n    slot(list: HTMLElement) {\r\n        return list;\r\n    }\r\n\r\n    slottedCallback(list: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"listitem\")) {\r\n                listItemWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n\r\n    setMultiSelectable(tree: HTMLElement, value: boolean): void {\r\n        tree.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(tree: HTMLElement): boolean {\r\n        return JSON.parse(tree.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    #getActiveItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".listitem.active\");\r\n    }\r\n\r\n    #getDropTargetItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".listitem.droptarget\");\r\n    }\r\n\r\n    items(list: HTMLElement): HTMLElement[] {\r\n        return Array.from(list.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .listitemgroup) > .listitem\"\r\n        ));\r\n    }\r\n\r\n    selectedItems(list: HTMLElement): HTMLElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        let item = this.#firstItem(list);\r\n        while (item !== null) {\r\n            const selected = listItemWidget.getSelected(item);\r\n            if (selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(list: HTMLElement): void {\r\n        this.#onSelection.set(list, true);\r\n    }\r\n\r\n    endSelection(list: HTMLElement): void {\r\n        this.#onSelection.set(list, false);\r\n        if (this.#hasSelectionChanged.get(list)) {\r\n            list.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(list, false);\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"listitem\") && !listItemWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"listitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextItem = this.#nextItem(from);\r\n            while (nextItem && nextItem !== to) {\r\n                range.push(nextItem);\r\n                nextItem = this.#nextItem(nextItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousItem = this.#previousItem(from);\r\n            while (previousItem && previousItem !== to) {\r\n                range.push(previousItem);\r\n                previousItem = this.#previousItem(previousItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        selectedItems.forEach((item_i) => {\r\n            if (!items.includes(item_i)) {\r\n                listItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            const selected = listItemWidget.getSelected(item_i);\r\n            if (list.contains(item_i) && !selected) {\r\n                listItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #addToSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        this.beginSelection(list);\r\n        items.forEach((item_i) => {\r\n            if (!listItemWidget.getSelected(item_i)) {\r\n                listItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #removeFromSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                listItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #clearSelection(list: HTMLElement): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        selectedItems.forEach((item_i) => {\r\n            listItemWidget.setSelected(item_i, false);\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #setActiveItem(list: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(list);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            listItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            listItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n    \r\n    #setDropTargetItem(list: HTMLElement, item: HTMLElement | null): void {\r\n        const {classList} = list;\r\n        const dropTargetItem = this.#getDropTargetItem(list);\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            listItemWidget.setDropTarget(dropTargetItem, false);\r\n        }\r\n        if (item !== null) {\r\n            listItemWidget.setDropTarget(item, false);\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    #firstItem(list: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(list: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLElement | null>walker.previousNode();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const nextItem = <HTMLElement | null>walker.nextNode();\r\n        return nextItem;\r\n    }\r\n\r\n    #handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetList, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            this.#setDropTargetItem(targetList, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!targetList.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(targetList, null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            const selectedItems = this.selectedItems(targetTree);\r\n            if (!selectedItems.includes(targetItem)) {\r\n                this.#setSelection(targetTree, targetItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetTree);\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetTree, targetItem);\r\n            targetTree.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetList);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetList, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetList, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(firstItem, lastItem);\r\n                            if (range) {\r\n                                this.#setSelection(targetList, ...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = listItemWidget.getSelected(previousItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetList, previousItem) :\r\n                                this.#addToSelection(targetList, previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetList);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = listItemWidget.getSelected(nextItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetList, nextItem) :\r\n                                this.#addToSelection(targetList, nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetList);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetList);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetList);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(targetList, activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection(targetList);\r\n                this.#setActiveItem(targetList, null);\r\n                targetList.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey, button} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            const selected = listItemWidget.getSelected(targetItem);\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setSelection(targetList, targetItem);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            targetItem.blur();\r\n                            this.#removeFromSelection(targetList, targetItem);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(targetList, targetItem);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const activeItem = this.#getActiveItem(targetList);\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                targetItem\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetList, ...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                }\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(targetList, targetItem);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetList.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetList.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetList) {\r\n            if (this.#onSelection.get(targetList)) {\r\n                this.#hasSelectionChanged.set(targetList, true);\r\n            }\r\n            else {\r\n                targetList.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { Widget, element } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\nimport { listItemWidget } from \"./ListItemWidget\";\r\n\r\nexport { listItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"listitemgroup\": ListItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ListItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar listItemGroupWidget = new (\r\nWidget({\r\n    name: \"listitemgroup\"\r\n})(class ListItemGroupWidgetFactoryBase extends WidgetFactory implements ListItemGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"listitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n\r\n    slottedCallback(group: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"listitem\")) {\r\n                listItemWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { Widget, element } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\n\r\nexport { toolbarItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbaritemgroup\": MenuItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar toolbarItemGroupWidget = new (\r\nWidget({\r\n    name: \"toolbaritemgroup\"\r\n})(class MenuItemGroupWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"toolbaritemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n}));","import { Widget, element } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridCellWidget };\r\n\r\ninterface GridCellWidgetFactory extends WidgetFactory {\r\n    create(init: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        //label?: string;\r\n        disabled?: boolean;\r\n        headers?: string;\r\n    }): HTMLElement;\r\n    getHeaders(item: HTMLElement): string;\r\n    setHeaders(item: HTMLElement, value: string): void;\r\n    //getLabel(item: HTMLElement): string;\r\n    //setLabel(item: HTMLElement, value: string): void;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridcell\": GridCellWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridCellWidget = new (\r\nWidget({\r\n    name: \"gridcell\"\r\n})(class GridCellWidgetFactoryBase extends WidgetFactory implements GridCellWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"td\", {\r\n            attributes: {\r\n                class: \"gridcell\",\r\n                role: \"gridcell\",\r\n                tabindex: -1\r\n            },\r\n            // children: [\r\n            //     element(\"span\", {\r\n            //         attributes: {\r\n            //             class: \"content\"\r\n            //         },\r\n            //         children: [\r\n            //             element(\"span\", {\r\n            //                 attributes: {\r\n            //                     class: \"label\"\r\n            //                 }\r\n            //             })\r\n            //         ]\r\n            //     })\r\n            // ]\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        //label?: string;\r\n        disabled?: boolean;\r\n        headers?: string;\r\n    }): HTMLElement {\r\n        const cell = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {id, classList, tabIndex, /*label,*/ disabled, headers} = init;\r\n            if (id !== undefined) {\r\n                cell.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                cell.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                cell.tabIndex = tabIndex;\r\n            }\r\n            // if (label !== undefined) {\r\n            //     this.setLabel(cell, label);\r\n            // }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(cell, disabled);\r\n            }\r\n            if (headers !== undefined) {\r\n                this.setHeaders(cell, headers);\r\n            }\r\n            this.setSelected(cell, false);\r\n        }\r\n        return cell;\r\n    }\r\n\r\n    slot(cell: HTMLElement): HTMLElement | null {\r\n        return cell;\r\n    }\r\n\r\n    getHeaders(item: HTMLElement): string {\r\n        return item.getAttribute(\"headers\") ?? \"\";\r\n    }\r\n\r\n    setHeaders(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"headers\", value);\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-selected\", String(value));\r\n        item.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .content > .label\")!;\r\n    }\r\n}));","import { element, Widget } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\nimport { gridCellWidget } from \"./GridCellWidget\";\r\n\r\nexport { gridRowWidget };\r\n\r\ninterface GridRowWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        disabled?: boolean\r\n    }): HTMLElement;\r\n    cells(row: HTMLElement): HTMLElement[];\r\n    setPosInSet(row: HTMLElement, value: number): void;\r\n    getPosInSet(row: HTMLElement): number;\r\n    setActive(row: HTMLElement, value: boolean): void;\r\n    getActive(row: HTMLElement): boolean;\r\n    setDropTarget(row: HTMLElement, value: boolean): void;\r\n    getDropTarget(row: HTMLElement): boolean;\r\n    setSelected(row: HTMLElement, value: boolean): void;\r\n    getSelected(row: HTMLElement): boolean;\r\n    setDisabled(row: HTMLElement, value: boolean): void;\r\n    getDisabled(row: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridrow\": GridRowWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridRowWidget = new (\r\nWidget({\r\n    name: \"gridrow\"\r\n})(class GridRowWidgetFactoryBase extends WidgetFactory implements GridRowWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"tr\", {\r\n            attributes: {\r\n                class: \"gridrow\",\r\n                role: \"row\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const row = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {disabled} = init;\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(row, disabled);\r\n            }\r\n            this.setSelected(row, false);\r\n        }\r\n        return row;\r\n    }\r\n\r\n    slot(row: HTMLElement): HTMLElement | null {\r\n        return row;\r\n    }\r\n\r\n    cells(row: HTMLElement): HTMLElement[] {\r\n        return Array.from(row.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridcell\"\r\n        ));\r\n    }\r\n    \r\n    setPosInSet(row: HTMLElement, value: number): void {\r\n        row.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(row: HTMLElement): number {\r\n        const posInSet = row.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(row: HTMLElement, value: boolean): void {\r\n        const {classList} = row;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(row: HTMLElement): boolean {\r\n        const {classList} = row;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(row: HTMLElement, value: boolean): void {\r\n        const {classList} = row;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(row: HTMLElement): boolean {\r\n        const {classList} = row;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(row: HTMLElement, value: boolean): void {\r\n        row.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(row: HTMLElement): boolean {\r\n        return row.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(row: HTMLElement, value: boolean): void {\r\n        row.setAttribute(\"aria-selected\", String(value));\r\n        row.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(row: HTMLElement): boolean {\r\n        return JSON.parse(row.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((item_i, i) => {\r\n            if (item_i instanceof HTMLElement) {\r\n                gridCellWidget.setPosInSet(item_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { element, Widget } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\nimport { gridCellWidget } from \"./GridCellWidget\";\r\nimport { gridRowWidget } from \"./GridRowWidget\";\r\n\r\nexport { gridWidget };\r\n\r\ntype GridSelectBy = \"cell\" | \"row\";\r\n\r\ninterface GridRowWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n        selectby?: GridSelectBy\r\n    }): HTMLElement;\r\n    setSelectBy(item: HTMLElement, value: GridSelectBy): void;\r\n    getSelectBy(item: HTMLElement): GridSelectBy;\r\n    headers(grid: HTMLElement): HTMLElement[];\r\n    cells(grid: HTMLElement): HTMLElement[];\r\n    rows(grid: HTMLElement): HTMLElement[];\r\n    beginSelection(grid: HTMLElement): void;\r\n    endSelection(grid: HTMLElement): void;\r\n    selectedCells(grid: HTMLElement): HTMLElement[];\r\n    selectedRows(grid: HTMLElement): HTMLElement[];\r\n    clearSelection(grid: HTMLElement): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"grid\": GridRowWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridWidget = new (\r\nWidget({\r\n    name: \"grid\"\r\n})(class GridWidgetFactoryBase extends WidgetFactory implements GridRowWidgetFactory {\r\n\r\n    #getActiveRow(grid: HTMLElement): HTMLElement | null {\r\n        return grid.querySelector<HTMLElement>(\".gridrow.active\");\r\n    }\r\n\r\n    #getActiveCell(grid: HTMLElement): HTMLElement | null {\r\n        return grid.querySelector<HTMLElement>(\".gridcell.active\");\r\n    }\r\n\r\n    headers(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridhead > .gridheader\"\r\n        ));\r\n    }\r\n\r\n    rows(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridbody > .gridrow\"\r\n        ));\r\n    }\r\n\r\n    cells(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridbody > .gridrow > .gridcell\"\r\n        ));\r\n    }\r\n\r\n    #template: HTMLElement;\r\n    #rowsWalker: TreeWalker;\r\n    #cellsWalker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"table\", {\r\n            attributes: {\r\n                class: \"grid\",\r\n                role: \"grid\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#cellsWalker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#cellsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#rowsWalker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#rowsWalkerNodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n        selectby?: GridSelectBy;\r\n    }) {\r\n        const grid = <HTMLElement>this.#template.cloneNode(true);\r\n        //grid.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        grid.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        grid.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        grid.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        grid.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        grid.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        grid.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, selectby, multisectable} = properties;\r\n            if (id !== undefined) {\r\n                grid.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                grid.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                grid.tabIndex = tabIndex;\r\n            }\r\n            if (selectby !== undefined) {\r\n                this.setSelectBy(grid, selectby);\r\n            }\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(grid, multisectable);\r\n            }\r\n        }\r\n        return grid;\r\n    }\r\n\r\n    slot(grid: HTMLElement): HTMLElement | null {\r\n        return grid;\r\n    }\r\n\r\n    setMultiSelectable(grid: HTMLElement, value: boolean): void {\r\n        grid.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(grid: HTMLElement): boolean {\r\n        return JSON.parse(grid.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    setSelectBy(grid: HTMLElement, value: GridSelectBy): void {\r\n        grid.setAttribute(\"data-selectby\", value);\r\n    }\r\n\r\n    getSelectBy(grid: HTMLElement): GridSelectBy {\r\n        return <GridSelectBy>grid.getAttribute(\"data-selectby\") ?? \"cell\";\r\n    }\r\n\r\n    beginSelection(grid: HTMLElement): void {\r\n        this.#onSelection.set(grid, true);\r\n    }\r\n\r\n    endSelection(grid: HTMLElement): void {\r\n        this.#onSelection.set(grid, false);\r\n        if (this.#hasSelectionChanged.get(grid)) {\r\n            grid.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(grid, false);\r\n        }\r\n    }\r\n\r\n    clearSelection(grid: HTMLElement): void {\r\n        this.#clearCellsSelection(grid);\r\n        this.#clearRowsSelection(grid);\r\n    }\r\n\r\n    selectedCells(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll(\":scope > .gridbody > .gridrow > .gridcell[aria-selected=true]\"));\r\n    }\r\n\r\n    selectedRows(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll(\":scope > .gridbody > .gridrow[aria-selected=true]\"));\r\n    }\r\n\r\n    #cellsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"gridcell\") && !gridCellWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"gridrow\") || classList.contains(\"gridbody\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #rowsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"gridrow\") && !gridRowWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"gridbody\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getCellsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextCell = this.#nextCell(from);\r\n            while (nextCell && nextCell !== to) {\r\n                range.push(nextCell);\r\n                nextCell = this.#nextCell(nextCell);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousCell = this.#previousCell(from);\r\n            while (previousCell && previousCell !== to) {\r\n                range.push(previousCell);\r\n                previousCell = this.#previousRow(previousCell);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #getRowsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextRow = this.#nextRow(from);\r\n            while (nextRow && nextRow !== to) {\r\n                range.push(nextRow);\r\n                nextRow = this.#nextRow(nextRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousRow = this.#previousRow(from);\r\n            while (previousRow && previousRow !== to) {\r\n                range.push(previousRow);\r\n                previousRow = this.#previousRow(previousRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setCellsSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        selectedCells.forEach((selectedCell_i) => {\r\n            if (!cells.includes(selectedCell_i)) {\r\n                gridCellWidget.setSelected(selectedCell_i, false);\r\n            }\r\n        });\r\n        cells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (!selected) {\r\n                gridCellWidget.setSelected(cell_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #setRowsSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        selectedRows.forEach((selectedRow_i) => {\r\n            if (!rows.includes(selectedRow_i)) {\r\n                gridRowWidget.setSelected(selectedRow_i, false);\r\n            }\r\n        });\r\n        rows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (!selected) {\r\n                gridRowWidget.setSelected(row_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #addCellsToSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        cells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (!selected) {\r\n                gridCellWidget.setSelected(cell_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #addRowsToSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        rows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (!selected) {\r\n                gridRowWidget.setSelected(row_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #removeCellsFromSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        cells.forEach((cell_i) => {\r\n            if (selectedCells.includes(cell_i)) {\r\n                gridCellWidget.setSelected(cell_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #removeRowsFromSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        rows.forEach((row_i) => {\r\n            if (selectedRows.includes(row_i)) {\r\n                gridRowWidget.setSelected(row_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #clearCellsSelection(grid: HTMLElement): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        selectedCells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (selected) {\r\n                gridCellWidget.setSelected(cell_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #clearRowsSelection(grid: HTMLElement): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        selectedRows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (selected) {\r\n                gridRowWidget.setSelected(row_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #setActiveCell(grid: HTMLElement, cell: HTMLElement | null): void {\r\n        const activeCell = this.#getActiveCell(grid);\r\n        if (activeCell !== null && activeCell !== cell) {\r\n            gridCellWidget.setActive(activeCell, false);\r\n            activeCell.tabIndex = -1;\r\n        }\r\n        if (cell !== null) {\r\n            gridCellWidget.setActive(cell, true);\r\n            cell.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #setActiveRow(grid: HTMLElement, row: HTMLElement | null): void {\r\n        const activeRow = this.#getActiveRow(grid);\r\n        if (activeRow !== null && activeRow !== row) {\r\n            gridRowWidget.setActive(activeRow, false);\r\n            activeRow.tabIndex = -1;\r\n        }\r\n        if (row !== null) {\r\n            gridCellWidget.setActive(row, true);\r\n            row.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #firstCell(row: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLElement | null>cellsWalker.firstChild();\r\n    }\r\n\r\n    #lastCell(row: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLElement | null>cellsWalker.lastChild();\r\n    }\r\n\r\n    #previousCell(cell: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLElement | null>cellsWalker.previousNode();\r\n    }\r\n\r\n    #nextCell(cell: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLElement | null>cellsWalker.nextNode();\r\n    }\r\n\r\n    #closestRow(cell: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = cell;\r\n        return <HTMLElement | null>rowsWalker.parentNode();\r\n    }\r\n\r\n    #firstRow(grid: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = grid;\r\n        return <HTMLElement | null>rowsWalker.firstChild();\r\n    }\r\n\r\n    #lastRow(grid: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = grid;\r\n        return <HTMLElement | null>rowsWalker.lastChild();\r\n    }\r\n\r\n    #previousRow(row: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLElement | null>rowsWalker.previousNode();\r\n    }\r\n\r\n    #nextRow(row: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLElement | null>rowsWalker.nextNode();\r\n    }\r\n\r\n    #topCell(cell: HTMLElement): HTMLElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const closestRowCells = gridRowWidget.cells(closestRow);\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const previousRow = this.#previousRow(closestRow);\r\n            if (previousRow) {\r\n                const previousRowCells = gridRowWidget.cells(previousRow);\r\n                return previousRowCells[Math.min(cellIndex, previousRowCells.length)];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #bottomCell(cell: HTMLElement): HTMLElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const closestRowCells = gridRowWidget.cells(closestRow);\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const nextRow = this.#nextRow(closestRow);\r\n            if (nextRow) {\r\n                const nextRowCells = gridRowWidget.cells(nextRow);\r\n                return nextRowCells[Math.min(cellIndex, nextRowCells.length)];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /*#handleContextMenuEvent(event: MouseEvent) {\r\n        const {currentTarget, target} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    const selectedCells = this.selectedCells(targetGrid);\r\n                    if (!selectedCells.includes(targetCell)) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    targetCell.focus({preventScroll: true});\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    const selectedRows = this.selectedRows(targetGrid);\r\n                    if (!selectedRows.includes(targetRow)) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    targetRow.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        event.preventDefault();\r\n    }*/\r\n\r\n    /*#handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            const type = treeitemWidget.getType(targetItem);\r\n            if (type == \"parent\") {\r\n                treeitemWidget.toggle(targetItem, true);\r\n            }\r\n            this.#setDropTargetItem(targetTree, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!targetTree.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(targetTree, null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }*/\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const activeCell = this.#getActiveCell(targetGrid);\r\n                if (activeCell && relatedTarget !== activeCell) {\r\n                    activeCell.focus();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const activeRow = this.#getActiveRow(targetGrid);\r\n                if (activeRow && relatedTarget !== activeRow) {\r\n                    activeRow.focus();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    this.#setActiveCell(targetGrid, targetCell);\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    this.#setActiveRow(targetGrid, targetRow);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetGrid.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetGrid.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const activeCell = this.#getActiveCell(targetGrid);\r\n        const activeRow = this.#getActiveRow(targetGrid);\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        const multiselectable = this.getMultiSelectable(targetGrid);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey && multiselectable) {\r\n                    switch (selectby) {\r\n                        case \"cell\": {\r\n                            const firstRow = this.#firstRow(targetGrid);\r\n                            const firstCell = firstRow ? this.#firstCell(firstRow) : null;\r\n                            const lastRow = this.#lastRow(targetGrid);\r\n                            const lastCell = lastRow ? this.#lastCell(lastRow) : null;\r\n                            if (firstCell && lastCell) {\r\n                                const range = this.#getCellsRange(firstCell, lastCell);\r\n                                if (range) {\r\n                                    this.#setCellsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"row\": {\r\n                            const firstRow = this.#firstRow(targetGrid);\r\n                            const lastRow = this.#lastRow(targetGrid);\r\n                            if (firstRow && lastRow) {\r\n                                const range = this.#getRowsRange(firstRow, lastRow);\r\n                                if (range) {\r\n                                    this.#setRowsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const previousCell = this.#previousCell(activeCell);\r\n                        if (previousCell) {\r\n                            previousCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(previousCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, previousCell) :\r\n                                    this.#addCellsToSelection(targetGrid, previousCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const nextCell = this.#nextCell(activeCell);\r\n                        if (nextCell) {\r\n                            nextCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(nextCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, nextCell) :\r\n                                    this.#addCellsToSelection(targetGrid, nextCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const firstRow = activeRow ?? this.#firstRow(targetGrid);\r\n                        const topCell = activeCell ?\r\n                            this.#topCell(activeCell) :\r\n                            firstRow ?\r\n                            this.#firstCell(firstRow) :\r\n                            null;\r\n                        if (topCell) {\r\n                            topCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(topCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, topCell) :\r\n                                    this.#addCellsToSelection(targetGrid, topCell);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const previousRow = activeRow ?\r\n                            this.#previousRow(activeRow) :\r\n                            this.#firstRow(targetGrid);\r\n                        if (previousRow) {\r\n                            previousRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridRowWidget.getSelected(previousRow);\r\n                                selected ?\r\n                                    this.#removeRowsFromSelection(targetGrid, previousRow) :\r\n                                    this.#addRowsToSelection(targetGrid, previousRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const lastRow = activeRow ?? this.#lastRow(targetGrid);\r\n                        const bottomCell = activeCell ?\r\n                            this.#bottomCell(activeCell) :\r\n                            lastRow ?\r\n                            this.#lastCell(lastRow) :\r\n                            null;\r\n                            if (bottomCell) {\r\n                                bottomCell.focus({preventScroll: true});\r\n                                const {shiftKey} = event;\r\n                                if (shiftKey && multiselectable) {\r\n                                    const selected = gridCellWidget.getSelected(bottomCell);\r\n                                    selected ?\r\n                                        this.#removeCellsFromSelection(targetGrid, bottomCell) :\r\n                                        this.#addCellsToSelection(targetGrid, bottomCell);\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"row\": {\r\n                        const nextRow = activeRow ?\r\n                            this.#nextRow(activeRow) :\r\n                            this.#lastRow(targetGrid);\r\n                        if (nextRow) {\r\n                            nextRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridRowWidget.getSelected(nextRow);\r\n                                selected ?\r\n                                    this.#removeRowsFromSelection(targetGrid, nextRow) :\r\n                                    this.#addRowsToSelection(targetGrid, nextRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const firstCell = this.#firstCell(activeRow);\r\n                            if (firstCell) {\r\n                                firstCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const firstRow = this.#firstRow(targetGrid);\r\n                        if (firstRow) {\r\n                            firstRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const lastCell = this.#lastCell(activeRow);\r\n                            if (lastCell) {\r\n                                lastCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const lastRow = this.#lastRow(targetGrid);\r\n                        if (lastRow) {\r\n                            lastRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeCell) {\r\n                            this.#setCellsSelection(targetGrid, activeCell);\r\n                            activeCell.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        if (activeRow) {\r\n                            this.#setRowsSelection(targetGrid, activeRow);\r\n                            activeRow.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        this.#clearCellsSelection(targetGrid);\r\n                        this.#setActiveCell(targetGrid, null);\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        this.#clearRowsSelection(targetGrid);\r\n                        this.#setActiveRow(targetGrid, null);\r\n                        break;\r\n                    }\r\n                }\r\n                targetGrid.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        const multiselectable = this.getMultiSelectable(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    if (multiselectable) {\r\n                        if (!shiftKey && !ctrlKey) {\r\n                            this.#setCellsSelection(targetGrid, targetCell);\r\n                        }\r\n                        else if (ctrlKey) {\r\n                            const selected = gridCellWidget.getSelected(targetCell);\r\n                            !selected ?\r\n                                this.#addCellsToSelection(targetGrid, targetCell) :\r\n                                this.#removeCellsFromSelection(targetGrid, targetCell);\r\n                            event.stopPropagation();\r\n                        }\r\n                        else if (shiftKey) {\r\n                            const activeCell = this.#getActiveCell(targetGrid);\r\n                            if (activeCell) {\r\n                                const range = this.#getCellsRange(\r\n                                    activeCell,\r\n                                    targetCell\r\n                                );\r\n                                if (range) {\r\n                                    this.#setCellsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.#setCellsSelection(targetGrid, targetCell);\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    if (multiselectable) {\r\n                        if (!shiftKey && !ctrlKey) {\r\n                            this.#setRowsSelection(targetGrid, targetRow);\r\n                        }\r\n                        else if (ctrlKey) {\r\n                            const selected = gridRowWidget.getSelected(targetRow);\r\n                            !selected ?\r\n                                this.#addRowsToSelection(targetGrid, targetRow) :\r\n                                this.#removeRowsFromSelection(targetGrid, targetRow);\r\n                            event.stopPropagation();\r\n                        }\r\n                        else if (shiftKey) {\r\n                            const activeRow = this.#getActiveRow(targetGrid);\r\n                            if (activeRow) {\r\n                                const range = this.#getRowsRange(\r\n                                    activeRow,\r\n                                    targetRow\r\n                                );\r\n                                if (range) {\r\n                                    this.#setRowsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.#setRowsSelection(targetGrid, targetRow);\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetList) {\r\n            if (this.#onSelection.get(targetList)) {\r\n                this.#hasSelectionChanged.set(targetList, true);\r\n            }\r\n            else {\r\n                targetList.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { Widget, element } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\nimport { gridRowWidget } from \"./GridRowWidget\";\r\n\r\nexport { gridBodyWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridbody\": GridBodyWidgetFactory\r\n    }\r\n}\r\n\r\ninterface GridBodyWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar gridBodyWidget = new (\r\nWidget({\r\n    name: \"gridbody\"\r\n})(class GridBodyWidgetFactoryBase extends WidgetFactory implements GridBodyWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"tbody\", {\r\n            attributes: {\r\n                class: \"gridbody\",\r\n                role: \"rowgroup\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(body: HTMLElement) {\r\n        return body;\r\n    }\r\n\r\n    slottedCallback(body: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"gridrow\")) {\r\n                gridRowWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { Widget, element } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridHeadWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridhead\": GridHeadWidgetFactory\r\n    }\r\n}\r\n\r\ninterface GridHeadWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar gridHeadWidget = new (\r\nWidget({\r\n    name: \"gridhead\"\r\n})(class GridHeadWidgetFactoryBase extends WidgetFactory implements GridHeadWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"thead\", {\r\n            attributes: {\r\n                class: \"gridhead\",\r\n                role: \"rowgroup\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(head: HTMLElement) {\r\n        return head;\r\n    }\r\n}));","import { Widget, element } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridHeaderWidget };\r\n\r\ninterface GridHeaderWidgetFactory extends WidgetFactory {\r\n    create(init: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        //label?: string;\r\n    }): HTMLElement;\r\n    //getLabel(item: HTMLElement): string;\r\n    //setLabel(item: HTMLElement, value: string): void;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridheader\": GridHeaderWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridHeaderWidget = new (\r\nWidget({\r\n    name: \"gridheader\"\r\n})(class GridHeaderWidgetFactoryBase extends WidgetFactory implements GridHeaderWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"th\", {\r\n            attributes: {\r\n                class: \"gridheader\",\r\n                scope: \"column\",\r\n                role: \"columnheader\",\r\n                tabindex: -1\r\n            }/*,\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]*/\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        //label?: string;\r\n    }): HTMLElement {\r\n        const header = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {id, classList, tabIndex/*, label*/} = init;\r\n            if (id !== undefined) {\r\n                header.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                header.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                header.tabIndex = tabIndex;\r\n            }\r\n            /*if (label !== undefined) {\r\n                this.setLabel(header, label);\r\n            }*/\r\n        }\r\n        return header;\r\n    }\r\n\r\n    slot(header: HTMLElement): HTMLElement | null {\r\n        return header;\r\n    }\r\n\r\n    /*getLabel(header: HTMLElement): string {\r\n        return this.#label(header).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(header: HTMLElement, value: string): void {\r\n        this.#label(header).textContent = value;\r\n    }*/\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    #label(header: HTMLElement): HTMLElement {\r\n        return header.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n}));","import { element, Widget } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\n\r\nexport { optionWidget };\r\n\r\ninterface OptionWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        label?: string;\r\n        name?: string;\r\n        value?: string;\r\n        selected?: boolean;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    getLabel(option: HTMLElement): string;\r\n    setLabel(option: HTMLElement, value: string): void;\r\n    getValue(option: HTMLElement): string;\r\n    setValue(option: HTMLElement, value: string): void;\r\n    getName(option: HTMLElement): string;\r\n    setName(option: HTMLElement, value: string): void;\r\n    getSelected(option: HTMLElement): boolean;\r\n    setSelected(option: HTMLElement, value: boolean): void;\r\n    setDisabled(option: HTMLElement, value: boolean): void;\r\n    getDisabled(option: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"option\": OptionWidgetFactory\r\n    }\r\n}\r\n\r\nvar optionWidget = new(\r\nWidget({\r\n    name: \"option\"\r\n})(\r\nclass OptionWidgetFactoryBase extends WidgetFactory implements OptionWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"span\", {\r\n            attributes: {\r\n                class: \"option\",\r\n                role: \"option\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(properties?: {\r\n        selected?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const option = <HTMLElement>this.#template.cloneNode(true);\r\n        if (properties !== undefined) {\r\n            const {label, name, value, disabled} = properties;\r\n            let {selected} = properties;\r\n            selected = selected ?? false;\r\n            if (selected !== undefined) {\r\n                this.setSelected(option, selected);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(option, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(option, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(option, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(option, disabled);\r\n            }\r\n        }\r\n        return option;\r\n    }\r\n\r\n    get observedAttributes() {\r\n        return [\"aria-selected\"];\r\n    }\r\n\r\n    attributeChangedCallback(option: HTMLElement, name: string, oldValue: string, newValue: string) {\r\n        switch (name) {\r\n            case \"aria-selected\": {\r\n                if (JSON.parse(newValue) === true) {\r\n                    option.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #label(option: HTMLElement): HTMLElement {\r\n        return option.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n\r\n    getLabel(option: HTMLElement): string {\r\n        return this.#label(option).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(option: HTMLElement, value: string): void {\r\n        this.#label(option).textContent = value;\r\n    }\r\n\r\n    getValue(option: HTMLElement): string {\r\n        return option.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(option: HTMLElement, value: string): void {\r\n        option.setAttribute(\"value\", value);\r\n    }\r\n    \r\n    getName(option: HTMLElement): string {\r\n        return option.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(option: HTMLElement, value: string): void {\r\n        option.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getSelected(option: HTMLElement): boolean {\r\n        return JSON.parse(option.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    setSelected(option: HTMLElement, value: boolean): void {\r\n        option.setAttribute(\"aria-selected\", String(value));\r\n    }\r\n\r\n    getDisabled(option: HTMLElement): boolean {\r\n        return option.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(option: HTMLElement, value: boolean): void {\r\n        option.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n}));","import { element, Widget } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\nimport { optionWidget } from \"./OptionWidget\";\r\n\r\nexport { comboBoxWidget };\r\n\r\ninterface ComboBoxWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        name?: string;\r\n        disabled?: boolean;\r\n        multiselectable?: boolean;\r\n    }): HTMLElement;\r\n    options(combobox: HTMLElement): HTMLElement[];\r\n    getName(combobox: HTMLElement): string;\r\n    setName(combobox: HTMLElement, value: string): void;\r\n    getExpanded(combobox: HTMLElement): boolean;\r\n    setExpanded(combobox: HTMLElement, value: boolean): void;\r\n    setDisabled(combobox: HTMLElement, value: boolean): void;\r\n    getDisabled(combobox: HTMLElement): boolean;\r\n    expand(combobox: HTMLElement): void;\r\n    collapse(combobox: HTMLElement): void;\r\n    toggle(combobox: HTMLElement, force?: boolean): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"combobox\": ComboBoxWidgetFactory\r\n    }\r\n}\r\n\r\nvar comboBoxWidget = new(\r\nWidget({\r\n    name: \"combobox\"\r\n})(\r\nclass ComboBoxWidgetFactoryBase extends WidgetFactory implements ComboBoxWidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #optionsObserver: MutationObserver;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#optionsObserver = new MutationObserver(\r\n            this.#optionsMutationCallback.bind(this)\r\n        );\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"combobox\",\r\n                role: \"combobox\",\r\n                tabindex: 0,\r\n            },\r\n            children: [\r\n                element(\"div\", {\r\n                    attributes: {\r\n                        class: \"content\"\r\n                    },\r\n                    children: [\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"value\"\r\n                            }\r\n                        })\r\n                    ]\r\n                }),\r\n                element(\"div\", {\r\n                    attributes: {\r\n                        class: \"box\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        name?: string;\r\n        disabled?: boolean;\r\n        multiselectable?: boolean;\r\n    }): HTMLElement {\r\n        const combobox = <HTMLElement>this.#template.cloneNode(true);\r\n        this.#optionsObserver.observe(combobox, {\r\n            childList: true,\r\n            subtree: true\r\n        });\r\n        combobox.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        combobox.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        combobox.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        combobox.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.setExpanded(combobox, false);\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, name, disabled, multiselectable} = properties;\r\n            if (id !== undefined) {\r\n                combobox.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                combobox.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                combobox.tabIndex = tabIndex;\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(combobox, name);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(combobox, disabled);\r\n            }\r\n            if (multiselectable !== undefined) {\r\n                this.setMultiSelectable(combobox, multiselectable);\r\n            }\r\n        }\r\n        return combobox;\r\n    }\r\n\r\n    slot(combobox: HTMLElement) {\r\n        return this.#box(combobox);\r\n    }\r\n\r\n    slottedCallback(combobox: HTMLElement, slot: HTMLElement, name: string | null) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement) {\r\n                //gridRowWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n\r\n    #box(combobox: HTMLElement): HTMLElement {\r\n        return combobox.querySelector<HTMLElement>(\":scope > .box\")!;\r\n    }\r\n    \r\n    options(combobox: HTMLElement): HTMLElement[] {\r\n        return Array.from(combobox.querySelectorAll<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option\"\r\n        ));\r\n    }\r\n\r\n    selectedOption(combobox: HTMLElement): HTMLElement | null {\r\n        return combobox.querySelector<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option[aria-selected=true]\"\r\n        );\r\n    }\r\n\r\n    #getActiveOption(combobox: HTMLElement): HTMLElement | null {\r\n        return combobox.querySelector<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option:focus-within\"\r\n        );\r\n    }\r\n\r\n    #value(combobox: HTMLElement): HTMLElement {\r\n        return combobox.querySelector<HTMLElement>(\":scope > .content > .value\")!;\r\n    }\r\n    \r\n    getName(combobox: HTMLElement): string {\r\n        return combobox.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(combobox: HTMLElement, value: string): void {\r\n        combobox.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getDisabled(combobox: HTMLElement): boolean {\r\n        return combobox.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(combobox: HTMLElement, value: boolean): void {\r\n        combobox.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setExpanded(combobox: HTMLElement, value: boolean): void {\r\n        combobox.setAttribute(\"aria-expanded\", String(value));\r\n    }\r\n\r\n    getExpanded(combobox: HTMLElement): boolean {\r\n        return JSON.parse(combobox.getAttribute(\"aria-expanded\") ?? String(false));\r\n    }\r\n\r\n    setMultiSelectable(combobox: HTMLElement, value: boolean): void {\r\n        combobox.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(combobox: HTMLElement): boolean {\r\n        return JSON.parse(combobox.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    expand(combobox: HTMLElement): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        if (!expanded) {\r\n            this.setExpanded(combobox, true);\r\n            this.#positionBox(combobox);\r\n            const selectedOption = this.selectedOption(combobox);\r\n            if (selectedOption) {\r\n                selectedOption.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(combobox: HTMLElement): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        if (expanded) {\r\n            this.setExpanded(combobox, false);\r\n            combobox.focus();\r\n        }\r\n    }\r\n\r\n    toggle(combobox: HTMLElement, force?: boolean): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand(combobox) : this.collapse(combobox);\r\n    }\r\n\r\n    #optionsMutationCallback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            const targetCombobox = (<HTMLElement>target).closest<HTMLElement>(\".combobox\")!;\r\n            if (targetCombobox instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"childList\": {\r\n                        const {addedNodes} = mutation;\r\n                        const selector = \".option[aria-selected=true]\";\r\n                        for (let node of addedNodes) {\r\n                            if (node instanceof HTMLElement) {\r\n                                const selectedOption = node.matches(selector) ? node :\r\n                                    node.querySelector<HTMLElement>(selector);\r\n                                if (selectedOption) {\r\n                                    this.#setSelectedOption(targetCombobox, selectedOption);\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"option\") && !optionWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"optiongroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstOption(combobox: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = this.#box(combobox);\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastOption(combobox: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = this.#box(combobox);\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousOption(option: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextOption(option: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLElement | null>walker.nextNode();\r\n    }\r\n\r\n    #selectOption(combobox: HTMLElement, option: HTMLElement) {\r\n        const selectedOption = this.selectedOption(combobox);\r\n        if (selectedOption) {\r\n            optionWidget.setSelected(selectedOption, false);\r\n        }\r\n        if (option !== selectedOption) {\r\n            optionWidget.setSelected(option, true);\r\n            this.#setSelectedOption(combobox, option);\r\n            combobox.dispatchEvent(new Event(\"change\", {bubbles: true}));\r\n        }\r\n    }\r\n    \r\n    #setSelectedOption(combobox: HTMLElement, option: HTMLElement) {\r\n        this.#value(combobox).textContent = optionWidget.getLabel(option);\r\n    }\r\n\r\n    #positionBox(combobox: HTMLElement): void {\r\n        const box = combobox.querySelector<HTMLElement>(\":scope > .box\")!;\r\n        const {style: optionsStyle} = box;  \r\n        const {bottom, left} = combobox.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        optionsStyle.setProperty(\"top\", `${bottom + scrollY}px`);\r\n        optionsStyle.setProperty(\"left\", `${left + scrollX}px`);\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        this.toggle(targetCombobox);\r\n        const expanded = this.getExpanded(targetCombobox);\r\n        if (expanded) {\r\n            const selectedOption = this.selectedOption(targetCombobox);\r\n            (selectedOption ?? this.options(targetCombobox)[0])?.focus({preventScroll: true});\r\n        }\r\n        else {\r\n            const targetOption = (<HTMLElement>target).closest<HTMLElement>(\".option\");\r\n            if (targetOption) {\r\n                this.#selectOption(targetCombobox, targetOption);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetCombobox.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse(targetCombobox);\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        const expanded = this.getExpanded(targetCombobox);\r\n        const activeOption = this.#getActiveOption(targetCombobox);\r\n        const selectedOption = this.selectedOption(targetCombobox);\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                if (expanded) {\r\n                    const previousOption = activeOption ?\r\n                        this.#previousOption(activeOption) :\r\n                        this.#firstOption(targetCombobox);\r\n                    if (previousOption) {\r\n                        previousOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const previousOption = selectedOption ?\r\n                        this.#previousOption(selectedOption) :\r\n                        this.#firstOption(targetCombobox);\r\n                    if (previousOption) {\r\n                        this.#selectOption(targetCombobox, previousOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (expanded) {\r\n                    const nextOption = activeOption ?\r\n                        this.#nextOption(activeOption) :\r\n                        this.#lastOption(targetCombobox);\r\n                    if (nextOption) {\r\n                        nextOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const nextOption = selectedOption ?\r\n                        this.#nextOption(selectedOption) :\r\n                        this.#lastOption(targetCombobox);\r\n                    if (nextOption) {\r\n                        this.#selectOption(targetCombobox, nextOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstOption = this.#firstOption(targetCombobox);\r\n                if (firstOption) {\r\n                    if (expanded) {\r\n                        firstOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(targetCombobox, firstOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastOption = this.#lastOption(targetCombobox);\r\n                if (lastOption) {\r\n                    if (expanded) {\r\n                        lastOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(targetCombobox, lastOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (expanded) {\r\n                    this.collapse(targetCombobox);\r\n                    if (activeOption) {\r\n                        this.#selectOption(targetCombobox, activeOption);\r\n                    }\r\n                }\r\n                else {\r\n                    this.expand(targetCombobox);\r\n                    selectedOption?.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.collapse(targetCombobox);\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            default: {\r\n                const {length: keyLength} = key;\r\n                if (keyLength == 1) {\r\n                    const keyCode = key.charCodeAt(0);\r\n                    const options = this.options(targetCombobox);\r\n                    const activeIndex = activeOption ? options.indexOf(activeOption) : -1;\r\n                    const matchingOption = options.find(\r\n                        (option_i, i) => optionWidget.getLabel(option_i).toLowerCase().charCodeAt(0) == keyCode && i > activeIndex\r\n                    ) ?? options.find(\r\n                        (option_i) => optionWidget.getLabel(option_i).toLowerCase().charCodeAt(0) == keyCode\r\n                    );\r\n                    if (matchingOption) {\r\n                        matchingOption.focus({preventScroll: true});\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetItem = (<Element>target).closest<HTMLElement>(\".option\");\r\n        if (targetItem) {\r\n            targetItem.focus({preventScroll: true});\r\n        }\r\n    }\r\n}));","import { Widget, element } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\nimport { optionWidget } from \"./OptionWidget\";\r\n\r\nexport { optionGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"optiongroup\": OptionGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface OptionGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar optionGroupWidget = new (\r\nWidget({\r\n    name: \"optiongroup\"\r\n})(class OptionGroupWidgetFactoryBase extends WidgetFactory implements OptionGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"optiongroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n}));","import { ModelObject } from \"../models/Model\";\r\n\r\nexport { View };\r\n\r\ninterface View extends HTMLElement {\r\n    readonly model: ModelObject | null;\r\n    setModel(model: ModelObject): void;\r\n    renderShadow(): Node | undefined;\r\n    renderLight(): Node | undefined;\r\n    refresh(): void;\r\n}\r\n\r\ninterface ViewConstructor {\r\n    prototype: View;\r\n    new(): View;\r\n}\r\n\r\nclass ViewBase extends HTMLElement implements View {\r\n    #model: ModelObject | null;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#model = null;\r\n    }\r\n\r\n    get model(): ModelObject | null {\r\n        return this.#model;\r\n    }\r\n    \r\n    setModel(model: ModelObject): void {\r\n        this.#model = model;\r\n        this.#render();            \r\n    }\r\n\r\n    renderLight(): Node | undefined {\r\n        return;\r\n    }\r\n\r\n    renderShadow(): Node | undefined {\r\n        return;\r\n    }\r\n\r\n    refresh(): void {\r\n        this.#render();\r\n    }\r\n\r\n    #render(): void {\r\n        const {shadowRoot} = this;\r\n        const shadow = this.renderShadow();\r\n        if (shadow) {\r\n            if (shadowRoot) {\r\n                shadowRoot.replaceChildren(shadow);\r\n            }\r\n        }\r\n        const light = this.renderLight();\r\n        if (light) {\r\n            this.replaceChildren(light);\r\n        }\r\n    }\r\n}\r\n\r\nvar View: ViewConstructor = ViewBase;","import { HTMLEListElement } from \"../elements/containers/lists/List\";\r\nimport { HTMLEListItemElement } from \"../elements/containers/lists/ListItem\";\r\nimport { EMenu } from \"../elements/containers/menus/Menu\";\r\nimport { EMenuButton } from \"../elements/containers/menus/MenuButton\";\r\nimport { HTMLEMenuItemElement, EMenuItem } from \"../elements/containers/menus/MenuItem\";\r\nimport { EMenuItemGroup } from \"../elements/containers/menus/MenuItemGroup\";\r\nimport { EToolBarItem } from \"../elements/containers/toolbars/ToolBarItem\";\r\nimport { element, reactiveChildElements, reactiveElement, CustomElement, fragment } from \"../elements/Element\";\r\nimport { ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\n\r\nexport { ListModel };\r\nexport { ListItemModel };\r\nexport { ListView };\r\n\r\nclass ListModel extends ModelObject {\r\n    readonly items: ModelList<ListItemModel>;\r\n    sortFunction: ((item_a: ListItemModel, item_b: ListItemModel) => number) | null;\r\n    \r\n    constructor()\r\n    constructor(init: {items: ListItemModel[], sortFunction?: (item_a: ListItemModel, item_b: ListItemModel) => number})\r\n    constructor(init?: {items: ListItemModel[], sortFunction?: (item_a: ListItemModel, item_b: ListItemModel) => number}) {\r\n        super();\r\n        const sortFunction = init?.sortFunction ?? function(item_a: ListItemModel, item_b: ListItemModel) {\r\n            return item_a.label.localeCompare(item_b.label);\r\n        };\r\n        const items = new ModelList(init?.items ?? []);\r\n        items.setParent(this);\r\n        this.sortFunction = sortFunction;\r\n        this.items = items;\r\n    }\r\n\r\n    getItemByIndex(index: number): ListItemModel | null {\r\n        return this.items.get(index);\r\n    }\r\n}\r\n\r\ninterface TreeItem {\r\n    show(): void;\r\n    hide(): void;\r\n    display(): void;\r\n    remove(): void;\r\n}\r\n\r\nclass ListItemList implements TreeItem {\r\n    #items: ListItemModel[];\r\n\r\n    constructor(items: ListItemModel[]) {\r\n        this.#items = items;\r\n    }\r\n\r\n    static from(items: ListItemModel[]): ListItemList {\r\n        return new ListItemList(items);\r\n    }\r\n\r\n    show(): void {\r\n        const items = this.#items;\r\n        items.forEach(item_i => {\r\n            item_i.show();\r\n        });\r\n    }\r\n\r\n    hide(): void {\r\n        const items = this.#items;\r\n        items.forEach(item_i => {\r\n            item_i.hide();\r\n        });\r\n    }\r\n\r\n    display(): void {\r\n        const items = this.#items;\r\n        const result = items.reduce(\r\n            (result, item_i) => `${result} ${item_i.label}`, \"\"\r\n        );\r\n        console.log(result);\r\n    }\r\n\r\n    remove(): void {\r\n        const items = this.#items;\r\n        const removedItemsGroups = items.reduce((map, item_i) => {\r\n            const {parentNode} = item_i;\r\n            if (parentNode instanceof ListModel) {\r\n                const {items} = parentNode;\r\n                const group = map.get(items);\r\n                if (group) group.push(item_i);\r\n                else map.set(items, [item_i]);\r\n            }\r\n            return map;\r\n        }, new Map<ModelList, ListItemModel[]>());\r\n        Array.from(removedItemsGroups.entries()).forEach(\r\n            ([list_i, children_i]) => {\r\n                list_i.beginChanges();\r\n                children_i.forEach((child_i) => {\r\n                    list_i.remove(child_i);\r\n                });\r\n                list_i.endChanges();\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nclass ListItemModel extends ModelObject implements TreeItem {\r\n    readonly label: string;\r\n\r\n    @ModelProperty()\r\n    visibility: boolean;\r\n    \r\n    constructor(init: {label: string}) {\r\n        super();\r\n        const {label} = init;\r\n        this.label = label;\r\n        this.visibility = true;\r\n    }\r\n\r\n    get index(): number {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof ListModel) {\r\n            return parentNode.items.index(this);\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    show(): void {\r\n        this.visibility = true;\r\n    }\r\n\r\n    hide(): void {\r\n        this.visibility = false;\r\n    }\r\n\r\n    display(): void {\r\n        console.log(this.label);\r\n    }\r\n    \r\n    remove(): void {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof ListModel) {\r\n            const {items} = parentNode;\r\n            if (items) {\r\n                items.remove(this);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface ListViewConstructor {\r\n    prototype: ListView;\r\n    new(): ListView;\r\n    new(model: ListModel): ListView;\r\n}\r\n\r\ninterface ListView extends View {\r\n    model: ListModel;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"v-list\": ListView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"v-list\"\r\n})\r\nclass ListViewBase extends View implements ListView {\r\n    readonly model!: ListModel;\r\n    #listElementMap: WeakMap<ListModel, WeakRef<HTMLEListElement>>;\r\n    #listItemElementsMap: WeakMap<ListItemModel, WeakRef<HTMLEListItemElement>>;\r\n\r\n    constructor()\r\n    constructor(model: ListModel)\r\n    constructor(model?: ListModel) {\r\n        super();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.#listElementMap = new WeakMap();\r\n        this.#listItemElementsMap = new WeakMap();\r\n        this.setModel(model ?? new ListModel());\r\n    }\r\n\r\n    getListElement(): HTMLEListElement | null {\r\n        const {model} = this;\r\n        return this.#listElementMap.get(model)?.deref() ?? null;\r\n    }\r\n\r\n    getListItemElement(model: ListItemModel): HTMLEListItemElement | null {\r\n        return this.#listItemElementsMap.get(model)?.deref()  ?? null;\r\n    }\r\n\r\n    selectedItems(): ListItemModel[] {\r\n        const list = this.getListElement();\r\n        if (list) {\r\n            const {model} = this;\r\n            const selectedElements = list.selectedItems();\r\n            return selectedElements.map(\r\n                item_i => <ListItemModel>model.getItemByIndex(\r\n                    item_i.posinset\r\n                )\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    renderShadow(): Node {\r\n        return fragment(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    renderLight(): Node {\r\n        const {model} = this;\r\n        const listElement = element(\"e-list\", {\r\n            attributes: {\r\n                tabindex: 0\r\n            },\r\n            children: [\r\n                element(\"e-listitemgroup\", {\r\n                    children: reactiveChildElements(\r\n                        model.items, item => this.#renderListItem(item)\r\n                    )\r\n                })\r\n            ],\r\n            listeners: {\r\n                contextmenu: <EventListener>this.#handleContextMenuEvent.bind(this),\r\n                keydown: <EventListener>this.#handleKeyDownEvent.bind(this)\r\n            }\r\n        });\r\n        this.#listElementMap.set(model, new WeakRef(listElement));\r\n        return listElement;\r\n    }\r\n\r\n    #renderListItem(item: ListItemModel): Element {\r\n        const listItemElement = element(\"e-listitem\", {\r\n            attributes: {\r\n                tabindex: -1,\r\n                name: item.label,\r\n                draggable: \"true\"\r\n            },\r\n            dataset: {\r\n                index: item.index\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    children: [\r\n                        item.label\r\n                    ]\r\n                }),\r\n                element(\"e-toolbar\", {\r\n                    attributes: {\r\n                        //slot: \"toolbar\",\r\n                        tabindex: 0\r\n                    },\r\n                    children: [\r\n                        element(\"e-toolbaritemgroup\", {\r\n                            children: [\r\n                                EToolBarItem.menubutton({\r\n                                    name: \"settings\",\r\n                                    label: \"Actions\",\r\n                                    menubutton: new EMenuButton({\r\n                                        menu: reactiveElement(\r\n                                            item,\r\n                                            new EMenu({\r\n                                                children: [\r\n                                                    new EMenuItemGroup({\r\n                                                        items: [\r\n                                                            EMenuItem.button({\r\n                                                                name: \"display\",\r\n                                                                label: \"Display\",\r\n                                                                trigger: () => {\r\n                                                                    item.display();\r\n                                                                }\r\n                                                            }),\r\n                                                            EMenuItem.button({\r\n                                                                name: \"delete\",\r\n                                                                label: \"Delete\",\r\n                                                                trigger: () => {\r\n                                                                    item.remove();\r\n                                                                }\r\n                                                            })\r\n                                                        ]\r\n                                                    }),\r\n                                                    new EMenuItemGroup({\r\n                                                        items: [\r\n                                                            EMenuItem.button({\r\n                                                                name: \"visibility\",\r\n                                                                label: \"Visibility\",\r\n                                                                trigger: () => {\r\n                                                                    item.visibility ?\r\n                                                                    item.hide() :\r\n                                                                    item.show();\r\n                                                                }\r\n                                                            })\r\n                                                        ]\r\n                                                    })\r\n                                                ]\r\n                                            }),\r\n                                            [\"visibility\"],\r\n                                            (menu, property, oldValue, newValue) => {\r\n                                                //const {items} = menu;\r\n                                                switch (property) {\r\n                                                    case \"visibility\": {\r\n                                                        /*const item = <HTMLEMenuItemElement>items.namedItem(\"visibility\");\r\n                                                        item.textContent = newValue ? \"Hide\" : \"Show\";\r\n                                                        item.title = newValue ? \"Hide\" : \"Show\";*/\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        )\r\n                                    })\r\n                                }),\r\n                                reactiveElement(\r\n                                    item,\r\n                                    element(\"e-toolbaritem\", {\r\n                                        attributes: {\r\n                                            name: \"visibility\",\r\n                                            type: \"checkbox\",\r\n                                            tabindex: -1\r\n                                        },\r\n                                        listeners: {\r\n                                            trigger: () => {\r\n                                                item.visibility ?\r\n                                                    item.hide() :\r\n                                                    item.show();\r\n                                            }\r\n                                        }\r\n                                    }),\r\n                                    [\"visibility\"],\r\n                                    (toolbaritem, property, oldValue, newValue) => {\r\n                                        toolbaritem.title = newValue ? \"Hide\" : \"Show\";\r\n                                        toolbaritem.checked = newValue;\r\n                                    }\r\n                                )\r\n                            ]\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        });\r\n        this.#listItemElementsMap.set(item, new WeakRef(listItemElement));\r\n        return listItemElement;\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        const {clientX, clientY, currentTarget, target} = event;\r\n        const {model} = this;\r\n        if (currentTarget instanceof HTMLEListElement && target instanceof HTMLEListItemElement) {\r\n            const activeItem = model.getItemByIndex(\r\n                parseInt(target.dataset.index!)\r\n            )!;\r\n            const menu = element(\"e-menu\", {\r\n                attributes: {\r\n                    tabindex: -1,\r\n                    contextual: true\r\n                },\r\n                children: [\r\n                    element(\"e-menuitemgroup\", {\r\n                        attributes: {\r\n                            tabindex: -1\r\n                        },\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                attributes: {\r\n                                    tabindex: -1\r\n                                },\r\n                                children: [\r\n                                    \"Display\"\r\n                                ],\r\n                                listeners: {\r\n                                    trigger: () => {\r\n                                        ListItemList.from(\r\n                                            this.selectedItems()\r\n                                        ).display();\r\n                                    }\r\n                                }\r\n                            }),\r\n                            element(\"e-menuitem\", {\r\n                                attributes: {\r\n                                    tabindex: -1\r\n                                },\r\n                                children: [\r\n                                    \"Delete\"\r\n                                ],\r\n                                listeners: {\r\n                                    trigger: () => {\r\n                                        ListItemList.from(\r\n                                            this.selectedItems()\r\n                                        ).remove();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    }),\r\n                    element(\"e-menuitemgroup\", {\r\n                        attributes: {\r\n                            tabindex: -1\r\n                        },\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                attributes: {\r\n                                    tabindex: -1,\r\n                                    type: \"checkbox\"\r\n                                },\r\n                                children: [\r\n                                    activeItem.visibility ? \"Hide\" : \"Show\"\r\n                                ],\r\n                                listeners: {\r\n                                    trigger: () => {\r\n                                        const selectedItems = ListItemList.from(\r\n                                            this.selectedItems()\r\n                                        );\r\n                                        activeItem.visibility ?\r\n                                            selectedItems.hide() :\r\n                                            selectedItems.show();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ],\r\n                listeners: {\r\n                    close: () => {\r\n                        target.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            });\r\n            target.append(menu);\r\n            menu.positionContextual(clientX, clientY);\r\n            menu.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        if (currentTarget instanceof HTMLEListElement) {\r\n            switch (key) {\r\n                case \"Delete\": {\r\n                    ListItemList.from(\r\n                        this.selectedItems()\r\n                    ).remove();\r\n                    event.preventDefault();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ListView: ListViewConstructor = ListViewBase;","import { element, reactiveChildElements, CustomElement, fragment, AttributeProperty, reactiveElement, widget } from \"../elements/Element\";\r\nimport { ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\nimport { HTMLEMenuItemElement } from \"../elements/containers/menus/MenuItem\";\r\nimport { gridHeaderWidget } from \"./widgets/grid/GridHeaderWidget\";\r\nimport { gridWidget } from \"./widgets/grid/GridWidget\";\r\nimport { gridRowWidget } from \"./widgets/grid/GridRowWidget\";\r\nimport { menuWidget } from \"./widgets/menu/MenuWidget\";\r\nimport { menuItemWidget } from \"./widgets/menu/MenuItemWidget\";\r\n\r\nexport { GridModel };\r\nexport { GridRowModel };\r\nexport { GridColumnModel };\r\nexport { GridView };\r\n\r\nclass GridModel extends ModelObject {\r\n    readonly rows: ModelList<GridRowModel>;\r\n    readonly columns: ModelList<GridColumnModel>;\r\n\r\n    constructor()\r\n    constructor(init: {rows: GridRowModel[], columns: GridColumnModel[]})\r\n    constructor(init?: {rows: GridRowModel[], columns: GridColumnModel[]}) {\r\n        super();\r\n        const rows = new ModelList(init?.rows ?? []);\r\n        rows.setParent(this);\r\n        this.rows = rows;\r\n        const columns = new ModelList(init?.columns ?? []);\r\n        columns.setParent(this);\r\n        this.columns = columns;\r\n    }\r\n\r\n    getColumnByName(name: string): GridColumnModel | null {\r\n        return Array.from(this.columns.values()).find(\r\n            column_i => column_i.name == name\r\n        ) ?? null;\r\n    }\r\n\r\n    sortByColumn(column: GridColumnModel, sortOrder: number) {\r\n        Array.from(this.columns.values()).forEach((column_i) => {\r\n            column_i.sortorder = column_i === column ? sortOrder : undefined;\r\n        });\r\n        this.rows.sort(\r\n            (row_1, row_2) => {\r\n                const cell_1 = <string>column.extract(row_1).toString();\r\n                const cell_2 = <string>column.extract(row_2).toString();\r\n                return sortOrder * cell_1.localeCompare(cell_2);\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\ntype Constructor = {\r\n    new(...args: any): any;\r\n    prototype: any;\r\n}\r\n\r\ntype GridRowFilter = {\r\n    filter: (row: GridRowModel) => boolean;\r\n}\r\n\r\nclass GridColumnModel<T extends Constructor = Constructor> extends ModelObject {\r\n    readonly name: string;\r\n    readonly label: string;\r\n    readonly type: T;\r\n    readonly extract: (row: GridRowModel) => InstanceType<T>;\r\n    readonly filters: (GridRowFilter & {name: string})[];\r\n\r\n    @ModelProperty()\r\n    sortorder: number | undefined;\r\n\r\n    constructor(init: {\r\n        name: string,\r\n        label: string,\r\n        type: T,\r\n        extract: (row: GridRowModel) => InstanceType<T>,\r\n        filters?: (GridRowFilter & {name: string})[]\r\n    }) {\r\n        super();\r\n        const {name, label, type, extract} = init;\r\n        this.name = name;\r\n        this.label = label;\r\n        this.type = type;\r\n        this.extract = extract;\r\n        this.filters = init.filters ?? [];\r\n        this.sortorder = 1;\r\n    }\r\n}\r\n\r\nclass GridRowModel extends ModelObject {\r\n    @ModelProperty()\r\n    name: string;\r\n\r\n    @ModelProperty()\r\n    age: number;\r\n    \r\n    constructor(init: {name: string, age: number}) {\r\n        super();\r\n        const {name, age} = init;\r\n        this.name = name;\r\n        this.age = age;\r\n    }\r\n}\r\n\r\ninterface GridViewConstructor {\r\n    prototype: GridView;\r\n    new(): GridView;\r\n    new(model: GridModel): GridView;\r\n}\r\n\r\ninterface GridView extends View {\r\n    readonly shadowRoot: ShadowRoot;\r\n    model: GridModel;\r\n    resizable: boolean;\r\n    sortable: boolean;\r\n    setColumnDelegate(delegate: (column: GridColumnModel) => string | Node): void;\r\n    setCellDelegate(delegate: (row: GridRowModel, column: GridColumnModel) => string | Node): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"v-grid\": GridView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"v-grid\"\r\n})\r\nclass GridViewBase extends View implements GridView {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly model!: GridModel;\r\n\r\n    #columnDelegate: (column: GridColumnModel) => string | Node;\r\n    #cellDelegate: (row: GridRowModel, column: GridColumnModel) => string | Node;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    resizable!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    sortable!: boolean;\r\n\r\n    #displayFilters: (GridRowFilter & {name: string})[];\r\n    #searchFilter: GridRowFilter | null;\r\n\r\n    #gridRowElementsMap: WeakMap<GridRowModel, WeakRef<HTMLElement>>\r\n    \r\n    constructor()\r\n    constructor(model: GridModel)\r\n    constructor(model?: GridModel) {\r\n        super();\r\n        this.#displayFilters = [];\r\n        this.#searchFilter = null;\r\n        this.#gridRowElementsMap = new WeakMap();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.setModel(model ?? new GridModel());\r\n        this.#cellDelegate = (row: GridRowModel, column: GridColumnModel) => {\r\n            return element(\"label\", {\r\n                children: [\r\n                    column.extract(row)\r\n                ]\r\n            });\r\n        };\r\n        this.#columnDelegate = (column: GridColumnModel) => {\r\n            return element(\"label\", {\r\n                children: [\r\n                    column.label\r\n                ]\r\n            });\r\n        };\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"resizable\":\r\n            case \"sortable\": {\r\n                this.refresh();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    get gridElement(): HTMLElement {\r\n        return this.getGridElement()!;\r\n    }\r\n\r\n    setColumnDelegate(delegate: (column: GridColumnModel) => string | Node): void {\r\n        this.#columnDelegate = delegate;\r\n    }\r\n\r\n    setCellDelegate(delegate: (row: GridRowModel, column: GridColumnModel) => string | Node): void {\r\n        this.#cellDelegate = delegate;\r\n    }\r\n\r\n    getGridElement(): HTMLElement | null {\r\n        return this.shadowRoot.querySelector(`:scope > .grid`);\r\n    }\r\n\r\n    getRowElement(row: GridRowModel): HTMLElement | null {\r\n        return this.#gridRowElementsMap.get(row)?.deref() ?? null;\r\n    }\r\n\r\n    getColumnHeaderElement(column: GridColumnModel): HTMLElement | null {\r\n        return this.shadowRoot.querySelector(`:scope > .grid > .gridhead > .gridheader[id=${column.name}]`);\r\n    }\r\n    \r\n    getColumnCellsElements(column: GridColumnModel): HTMLElement[] {\r\n        return Array.from(this.shadowRoot.querySelectorAll(`:scope > .grid > .gridbody > .gridrow > .gridcell[headers~=${column.name}]`));\r\n    }\r\n\r\n    renderShadow(): Node {\r\n        const {model} = this;\r\n        return fragment(\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/main.css\"\r\n                }\r\n            }),\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/views/gridview.css\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                children: [\r\n                    element(\"input\", {\r\n                        attributes: {\r\n                            type: \"search\"\r\n                        },\r\n                        listeners: {\r\n                            input: <EventListener>this.#handleSearchInputEvent.bind(this)\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n            widget(\"grid\", {\r\n                properties: {\r\n                    tabIndex: 0,\r\n                    selectby: \"row\",\r\n                    multisectable: true\r\n                },\r\n                slotted: [\r\n                    widget(\"gridhead\", {\r\n                        slotted: reactiveChildElements(\r\n                            model.columns, column => this.#renderGridColumnHeaderCell(column)\r\n                        ),\r\n                        listeners: {\r\n                            contextmenu: <EventListener>this.#handleHeadContextMenuEvent.bind(this),\r\n                            click: <EventListener>this.#handleHeadClickEvent.bind(this)\r\n                        }\r\n                    }),\r\n                    widget(\"gridbody\", {\r\n                        slotted: reactiveChildElements(\r\n                            model.rows, row => this.#renderGridBodyRow(row)\r\n                        )\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    #filter(row: GridRowModel): boolean {\r\n        const displayFilters = this.#displayFilters;\r\n        const searchFilter = this.#searchFilter;\r\n        return (displayFilters.length > 0 ? displayFilters.some(filter_i => filter_i.filter(row)) : true) &&\r\n        (searchFilter ? searchFilter.filter(row) : true);\r\n    }\r\n\r\n    setSearchFilter(filter: GridRowFilter | null): void {\r\n        const {model, gridElement} = this;\r\n        const {rows} = model;\r\n        this.#searchFilter = filter;\r\n        Array.from(rows.values()).forEach((row_i) => {\r\n            const rowElement = this.getRowElement(row_i);\r\n            if (rowElement) {\r\n                rowElement.hidden = !this.#filter(row_i);\r\n            }\r\n        });\r\n        gridWidget.clearSelection(gridElement);\r\n    }\r\n\r\n    addDisplayFilter(filter: (GridRowFilter & {name: string;})): void {\r\n        const {model, gridElement} = this;\r\n        const {rows} = model;\r\n        const displayFilters = this.#displayFilters;\r\n        if (!displayFilters.includes(filter)) {\r\n            displayFilters.push(filter);\r\n            Array.from(rows.values()).forEach((row_i) => {\r\n                const rowElement = this.getRowElement(row_i);\r\n                if (rowElement) {\r\n                    rowElement.hidden = !this.#filter(row_i);\r\n                }\r\n            });\r\n        }\r\n        gridWidget.clearSelection(gridElement);\r\n    }\r\n\r\n    removeDisplayFilter(filter: (GridRowFilter & {name: string;})): void {\r\n        const {model, gridElement} = this;\r\n        const {rows} = model;\r\n        const displayFilters = this.#displayFilters;\r\n        const filterIndex = displayFilters.indexOf(filter);\r\n        if (filterIndex > -1) {\r\n            displayFilters.splice(filterIndex, 1);\r\n            Array.from(rows.values()).forEach((row_i) => {\r\n                const rowElement = this.getRowElement(row_i);\r\n                if (rowElement) {\r\n                    rowElement.hidden = !this.#filter(row_i);\r\n                }\r\n            });\r\n        }\r\n        gridWidget.clearSelection(gridElement);\r\n    }\r\n\r\n    #renderGridColumnHeaderCell(column: GridColumnModel): Element {\r\n        const gridColumnElement = reactiveElement(\r\n            column,\r\n            widget(\"gridheader\", {\r\n                properties: {\r\n                    tabIndex: -1,\r\n                    id: column.name\r\n                },\r\n                slotted: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            class: \"gridheader-content\"\r\n                        },\r\n                        children: (<Node[]>[\r\n                            element(\"span\", {\r\n                                attributes: {\r\n                                    class: \"gridheader-label\"\r\n                                },\r\n                                children: this.#columnDelegate(column)\r\n                            })\r\n                        ]).concat(\r\n                            this.resizable ? [\r\n                                element(\"e-wsash\", {\r\n                                    attributes: {\r\n                                        controls: `${column.name}`\r\n                                    }\r\n                                })\r\n                            ] : []\r\n                        )\r\n                    })\r\n                ]\r\n            }),\r\n            [\"sortorder\"],\r\n            (cell, property, oldValue, newValue) => {\r\n                switch (property) {\r\n                    case \"sortorder\":\r\n                        if (typeof newValue !== \"undefined\") {\r\n                            cell.dataset.sortorder = newValue.toString();\r\n                        }\r\n                        else {\r\n                            delete cell.dataset.sortorder;\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        );\r\n        return gridColumnElement;\r\n    }\r\n\r\n    #renderGridBodyRow(row: GridRowModel): Element {\r\n        const {model} = this;\r\n        const gridRowElement = widget(\"gridrow\", {\r\n            attributes: {\r\n                tabindex: -1\r\n            },\r\n            slotted: reactiveChildElements(\r\n                model.columns, column => this.#renderGridDataCell(row, column)\r\n            )\r\n        });\r\n        this.#gridRowElementsMap.set(row, new WeakRef(gridRowElement));\r\n        return gridRowElement;\r\n    }\r\n\r\n    #renderGridDataCell(row: GridRowModel, column: GridColumnModel): Element {\r\n        const gridCellElement = widget(\"gridcell\", {\r\n            properties: {\r\n                headers: column.name\r\n            },\r\n            slotted: element(\"span\", {\r\n                attributes: {\r\n                    class: \"gridcell-content\"\r\n                },\r\n                children: (<Node[]>[\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            class: \"gridcell-label\"\r\n                        },\r\n                        children: this.#cellDelegate(row, column)\r\n                    })\r\n                ])\r\n            })\r\n        });\r\n        return gridCellElement;\r\n    }\r\n\r\n    #handleHeadContextMenuEvent(event: MouseEvent): void {\r\n        const {clientX, clientY, currentTarget, target} = event;\r\n        const targetHead = <HTMLElement>currentTarget;\r\n        const targetHeader = <HTMLElement>(<HTMLElement>target).closest(\".gridheader\");\r\n        const {model, gridElement} = this;\r\n        if (targetHeader) {\r\n            const column = model.getColumnByName(targetHeader.id)!;\r\n            const menu = widget(\"menu\",  {\r\n                properties: {\r\n                    tabIndex: -1,\r\n                    contextual: true\r\n                },\r\n                slotted: [\r\n                    widget(\"menuitem\",  {\r\n                        properties: {\r\n                            type: \"button\",\r\n                            tabIndex: -1,\r\n                            label: \"Resize Auto\"\r\n                        },\r\n                        listeners: {\r\n                            click: () => {\r\n                                const columnHeaderElement = this.getColumnHeaderElement(column);\r\n                                if (columnHeaderElement) {\r\n                                    const {style} = columnHeaderElement;\r\n                                    const labels = this.getColumnCellsElements(column).map(\r\n                                        cell_i => cell_i.querySelector(\".gridcell-label\")!\r\n                                    );\r\n                                    const maxWidth = labels.reduce(\r\n                                        (maxWidth, label) => Math.max(maxWidth, label.getBoundingClientRect().width), 0\r\n                                    );\r\n                                    style.setProperty(\"width\", `${maxWidth}px`);\r\n                                }\r\n                            }\r\n                        }\r\n                    }),\r\n                    widget(\"menuitem\",  {\r\n                        properties: {\r\n                            type: \"button\",\r\n                            tabIndex: -1,\r\n                            label: \"Resize To Default\"\r\n                        },\r\n                        listeners: {\r\n                            click: () => {\r\n                                const columnHeaderElement = this.getColumnHeaderElement(column);\r\n                                if (columnHeaderElement) {\r\n                                    const {style} = columnHeaderElement;\r\n                                    style.removeProperty(\"width\");\r\n                                }\r\n                            }\r\n                        }\r\n                    }),\r\n                    widget(\"menuitem\",  {\r\n                        properties: {\r\n                            type: \"submenu\",\r\n                            tabIndex: -1,\r\n                            label: \"Sort\",\r\n                        },\r\n                        slotted: [\r\n                            widget(\"menu\",  {\r\n                                attributes: {\r\n                                    tabIndex: -1,\r\n                                },\r\n                                slotted: [\r\n                                    widget(\"menuitem\",  {\r\n                                        properties: {\r\n                                            type: \"radio\",\r\n                                            name: \"sort\",\r\n                                            value: \"1\",\r\n                                            tabIndex: -1,\r\n                                            label: \"Ascending\"\r\n                                        }\r\n                                    }),\r\n                                    widget(\"menuitem\",  {\r\n                                        properties: {\r\n                                            type: \"radio\",\r\n                                            name: \"sort\",\r\n                                            value: \"-1\",\r\n                                            tabIndex: -1,\r\n                                            label: \"Descending\"\r\n                                        }\r\n                                    })\r\n                                ],\r\n                                listeners: {\r\n                                    click: (event) => {\r\n                                        const {target} = event;\r\n                                        const targetItem = <HTMLElement>target;\r\n                                        if (targetItem.classList.contains(\"menuitem\")) {\r\n                                            const sortOrder = menuItemWidget.getValue(targetItem);\r\n                                            model.sortByColumn(column, parseInt(sortOrder));\r\n                                        }\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    }),\r\n                    widget(\"menuitem\",  {\r\n                        properties: {\r\n                            type: \"submenu\",\r\n                            tabIndex: -1,\r\n                            label: \"Filter\"\r\n                        },\r\n                        slotted: [\r\n                            widget(\"menu\",  {\r\n                                properties: {\r\n                                    tabIndex: -1,\r\n                                },\r\n                                slotted: column.filters.map((filter_i, i) =>\r\n                                    widget(\"menuitem\", {\r\n                                        properties: {\r\n                                            tabIndex: -1,\r\n                                            type: \"checkbox\",\r\n                                            checked: this.#displayFilters.includes(filter_i),\r\n                                            label: filter_i.name\r\n                                        },\r\n                                        listeners: {\r\n                                            click: (event) => {\r\n                                                const {currentTarget} = event;\r\n                                                const targetItem = <HTMLElement>currentTarget;\r\n                                                const checked = menuItemWidget.getChecked(targetItem);\r\n                                                if (checked) {\r\n                                                    this.addDisplayFilter(filter_i);\r\n                                                }\r\n                                                else {\r\n                                                    this.removeDisplayFilter(filter_i);\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    })\r\n                                )\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            });\r\n            targetHead.append(menu);\r\n            menuWidget.positionContextual(menu, clientX, clientY);\r\n            menu.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleSearchInputEvent(event: InputEvent) {\r\n        const {target} = event;\r\n        if (target instanceof HTMLInputElement) {\r\n            const {value} = target;\r\n            this.setSearchFilter(value !== \"\" ? {\r\n                filter: (row) => row.name.toLowerCase().includes(value.toLowerCase())\r\n            } : null);\r\n        }\r\n    }\r\n\r\n    #handleHeadClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetIsHeaderLabel = (<HTMLElement>target).matches(\":is(.gridheader-label, .gridheader-label :scope)\");\r\n        if (targetIsHeaderLabel) {\r\n            const targetHeader = <HTMLElement>(<HTMLElement>target).closest(\".gridheader\");\r\n            const {model} = this;\r\n            const {columns} = model;\r\n            if (targetHeader) {\r\n                const targetColumn = Array.from(columns.values()).find(column_i => column_i.name == targetHeader.id);\r\n                if (targetColumn) {\r\n                    const sortorder = targetColumn.sortorder !== undefined ? -targetColumn.sortorder : 1;\r\n                    model.sortByColumn(targetColumn, sortorder);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar GridView: GridViewConstructor = GridViewBase;","//import { MenuItemGroupWidget, MenuItemWidget, MenuWidget, MenuBarWidget } from \"./src/views/MenuBarWidget\";\r\nimport { treeView, TreeItemModel, TreeModel } from \"./src/views/TreeView\";\r\n\r\nimport \"./index\";\r\nimport { ListItemModel, ListModel, ListView } from \"./src/views/ListView\";\r\nimport { GridColumnModel, GridModel, GridRowModel, GridView } from \"./src/views/GridView\";\r\nimport { element, fragment, widget } from \"./src/elements/Element\";\r\nimport { treeItemWidget } from \"./src/views/widgets/tree/TreeItemWidget\";\r\nimport { Editor } from \"./src/Editor\";\r\nimport { comboBoxWidget, menuWidget, optionWidget } from \"./index\";\r\n\r\nexport async function main() {\r\n    \r\n    /*const menubar = new MenuBarWidget([\r\n        new MenuItemWidget({\r\n            label: \"File\",\r\n            name: \"file\",\r\n            type: \"menu\",\r\n            menu: new MenuWidget({\r\n                name: \"File\",\r\n                groups: [\r\n                    new MenuItemGroupWidget({\r\n                        name: \"fileActions\",\r\n                        items: [\r\n                            new MenuItemWidget({\r\n                                label: \"Import file...\",\r\n                                name: \"import\"\r\n                            }),\r\n                            new MenuItemWidget({\r\n                                label: \"Export file...\",\r\n                                name: \"export\",\r\n                                hotkey: new HotKey(Key.B, KeyModifier.Control, KeyModifier.Alt)\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        }),\r\n        new MenuItemWidget({\r\n            label: \"Preferences\",\r\n            name: \"preferences\",\r\n            type: \"menu\",\r\n            menu: new MenuWidget({\r\n                name: \"Preferences\",\r\n                groups: [\r\n                    new MenuItemGroupWidget({\r\n                        name: \"fileActions\",\r\n                        items: [\r\n                            new MenuItemWidget({\r\n                                label: \"Advanced User\",\r\n                                name: \"advanced\",\r\n                                type: \"checkbox\",\r\n                                hotkey: new HotKey(Key.A, KeyModifier.Control, KeyModifier.Alt)\r\n                            }),\r\n                            new MenuItemWidget({\r\n                                label: \"Layout\",\r\n                                name: \"layout\",\r\n                                type: \"submenu\",\r\n                                menu: new MenuWidget({\r\n                                    name: \"Layout\",\r\n                                    groups: [\r\n                                        new MenuItemGroupWidget({\r\n                                            name: \"Layout\",\r\n                                            items: [\r\n                                                new MenuItemWidget({\r\n                                                    label: \"Standard\",\r\n                                                    name: \"standard\",\r\n                                                    type: \"radio\"\r\n                                                }),\r\n                                                new MenuItemWidget({\r\n                                                    label: \"Advanced\",\r\n                                                    name: \"advanced\",\r\n                                                    type: \"radio\"\r\n                                                })\r\n                                            ]\r\n                                        })\r\n                                    ]\r\n                                })\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        })\r\n    ]);*/\r\n\r\n    \r\n    const treeModel = new TreeModel({\r\n        items: [\r\n            new TreeItemModel({\r\n                label: \"TI 0\",\r\n                type: \"parent\",\r\n                items: [\r\n                    new TreeItemModel({\r\n                        label: \"TI 1A\",\r\n                        type: \"parent\",\r\n                        items: [\r\n                            new TreeItemModel({\r\n                                type: \"leaf\",\r\n                                label: \"TI 1AX\"\r\n                            }),\r\n                        ]\r\n                    }),\r\n                    new TreeItemModel({\r\n                        type: \"parent\",\r\n                        label: \"TI 1B\"\r\n                    })\r\n                ]\r\n            }),\r\n            new TreeItemModel({\r\n                label: \"TI 1\",\r\n                type: \"parent\",\r\n                items: [\r\n                    new TreeItemModel({\r\n                        label: \"TI 1A\",\r\n                        type: \"parent\",\r\n                        items: [\r\n                            new TreeItemModel({\r\n                                type: \"leaf\",\r\n                                label: \"TI 1AX\"\r\n                            }),\r\n                        ]\r\n                    }),\r\n                    new TreeItemModel({\r\n                        type: \"parent\",\r\n                        label: \"TI 1B\"\r\n                    })\r\n                ]\r\n            }),\r\n            new TreeItemModel({\r\n                type: \"leaf\",\r\n                label: \"TI 2\"\r\n            }),\r\n            new TreeItemModel({\r\n                type: \"leaf\",\r\n                label: \"TI 3\"\r\n            })\r\n        ],\r\n        sortFunction: (item_a: TreeItemModel, item_b: TreeItemModel) => {\r\n            const {label: aLabel} = item_a;\r\n            const {label: bLabel} = item_b;\r\n            return bLabel.localeCompare(aLabel);\r\n        }\r\n    });\r\n    const treeElement = treeView.create(treeModel);\r\n    document.body.append(treeElement);\r\n    \r\n    treeModel.childItems.append(\r\n        new TreeItemModel({\r\n            label: \"yo\",\r\n            type: \"parent\",\r\n            items: [\r\n                new TreeItemModel({\r\n                    type: \"leaf\",\r\n                    label: \"plop\"\r\n                })\r\n            ]\r\n        })\r\n    );\r\n\r\n    const listView = new ListView();\r\n    listView.setModel(\r\n        new ListModel({\r\n            items: [\r\n                new ListItemModel({\r\n                    label: \"Hey\"\r\n                }),\r\n                new ListItemModel({\r\n                    label: \"Yo\"\r\n                })\r\n            ]\r\n        })\r\n    );\r\n\r\n    //document.body.append(listView);\r\n\r\n    // Menu actions\r\n    // Toolbar actions\r\n    const gridView = new GridView();\r\n    gridView.resizable = true;\r\n    gridView.sortable = true;\r\n    gridView.setColumnDelegate((column) => {\r\n        return fragment(\r\n            element(\"label\", {\r\n                children: [\r\n                    column.label\r\n                ]\r\n            })/*,\r\n            element(\"e-toolbar\", {\r\n                children: [\r\n                    element(\"e-toolbaritem\", {\r\n                        attributes: {\r\n                            type: \"button\"\r\n                        }\r\n                    })\r\n                ]\r\n            })*/\r\n        );\r\n    });\r\n    gridView.setModel(\r\n        new GridModel({\r\n            columns: [\r\n                new GridColumnModel({\r\n                    name: \"name\",\r\n                    label: \"Name\",\r\n                    type: String,\r\n                    extract: (row) => row.name\r\n                }),\r\n                new GridColumnModel({\r\n                    name: \"age\",\r\n                    label: \"Age\",\r\n                    type: Number,\r\n                    extract: (row) => row.age,\r\n                    filters: [{\r\n                        name: \"Minors\",\r\n                        filter: (row) => row.age < 18\r\n                    },{\r\n                        name: \"Majors\",\r\n                        filter: (row) => row.age >= 18\r\n                    }]\r\n                })\r\n            ],\r\n            rows: [\r\n                new GridRowModel({\r\n                    name: \"Denis\",\r\n                    age: 13\r\n                }),\r\n                new GridRowModel({\r\n                    name: \"Jean-Charles\",\r\n                    age: 32\r\n                }),\r\n                new GridRowModel({\r\n                    name: \"Charles\",\r\n                    age: 25\r\n                }),\r\n                new GridRowModel({\r\n                    name: \"Mamagubida\",\r\n                    age: 128\r\n                })\r\n            ]\r\n        })\r\n    );\r\n    document.body.append(gridView);\r\n    \r\n    const menuView = widget(\"menubar\", {\r\n        slotted: [\r\n            widget(\"menuitem\", {\r\n                properties: {\r\n                    label: \"MenuItem 0\",\r\n                    name: \"MenuItem 0\",\r\n                    type: \"menu\",\r\n                    disabled: true\r\n                },\r\n                slotted: [\r\n                    widget(\"menu\", {\r\n                        slotted: [\r\n                            widget(\"menuitem\", {\r\n                                properties: {\r\n                                    label: \"MenuItem 1\",\r\n                                    name: \"MenuItem 1\",\r\n                                    type: \"checkbox\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            widget(\"menuitem\", {\r\n                properties: {\r\n                    label: \"MenuItem 0\",\r\n                    name: \"MenuItem 0\",\r\n                    type: \"menu\"\r\n                },\r\n                slotted: [\r\n                    widget(\"menu\", {\r\n                        slotted: [\r\n                            widget(\"menuitem\", {\r\n                                properties: {\r\n                                    label: \"MenuItem 1\",\r\n                                    name: \"MenuItem 1\",\r\n                                    type: \"checkbox\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            widget(\"menuitem\", {\r\n                properties: {\r\n                    label: \"MenuItem 1\",\r\n                    name: \"MenuItem 1\",\r\n                    type: \"menu\"\r\n                },\r\n                slotted: [\r\n                    widget(\"menu\", {\r\n                        slotted: [\r\n                            widget(\"menuitemgroup\", {\r\n                                slotted: [\r\n                                    widget(\"menuitem\", {\r\n                                        properties: {\r\n                                            label: \"MenuItem 1\",\r\n                                            type: \"checkbox\",\r\n                                            keyshortcut: \"Ctrl+B\",\r\n                                            disabled: true,\r\n                                            checked: true\r\n                                        }\r\n                                    }),\r\n                                    widget(\"menuitem\", {\r\n                                        properties: {\r\n                                            type: \"button\",\r\n                                            label: \"MenuItem 2\",\r\n                                            keyshortcut: \"Ctrl+A\"\r\n                                        }\r\n                                    })\r\n                                ]\r\n                            }),\r\n                            widget(\"separator\"),\r\n                            widget(\"menuitem\", {\r\n                                properties: {\r\n                                    label: \"Submenu\",\r\n                                    type: \"submenu\"\r\n                                },\r\n                                slotted: [\r\n                                    widget(\"menu\", {\r\n                                        slotted: [\r\n                                            widget(\"menuitem\", {\r\n                                                properties: {\r\n                                                    label: \"MenuItem 1\",\r\n                                                    type: \"radio\",\r\n                                                    name: \"radio\",\r\n                                                    value: \"1\"\r\n                                                }\r\n                                            }),\r\n                                            widget(\"menuitem\", {\r\n                                                properties: {\r\n                                                    type: \"radio\",\r\n                                                    label: \"MenuItem 2\",\r\n                                                    name: \"radio\",\r\n                                                    value: \"2\"\r\n                                                }\r\n                                            }),\r\n                                            widget(\"menuitem\", {\r\n                                                properties: {\r\n                                                    type: \"radio\",\r\n                                                    label: \"MenuItem 3\",\r\n                                                    name: \"radio\",\r\n                                                    value: \"3\"\r\n                                                }\r\n                                            })\r\n                                        ]\r\n                                    })\r\n                                ]\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        ]\r\n    })\r\n    document.body.append(menuView);\r\n\r\n\r\n    /*const tree = widget(\"tree\", {\r\n        slotted: [\r\n            widget(\"treeitem\", {\r\n                properties: {\r\n                    label: \"treeitem 0\",\r\n                    type: \"parent\",\r\n                    draggable: true\r\n                    //disabled: true\r\n                },\r\n                slotted: {\r\n                    group: [\r\n                        widget(\"treeitemgroup\", {\r\n                            slotted: [\r\n                                widget(\"treeitem\", {\r\n                                    properties: {\r\n                                        label: \"treeitem 1\",\r\n                                        type: \"leaf\",\r\n                                        draggable: true\r\n                                    }\r\n                                })\r\n                            ]\r\n                        })\r\n                    ]\r\n                },\r\n                listeners: {\r\n                    contextmenu: <EventListener>((event: MouseEvent) => {\r\n                        const {target, clientX, clientY} = event;\r\n                        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n                        const menu = widget(\"menu\", {\r\n                            properties: {\r\n                                contextual: true\r\n                            },\r\n                            slotted: [\r\n                                widget(\"menuitemgroup\", {\r\n                                    slotted: [\r\n                                        widget(\"menuitem\", {\r\n                                            properties: {\r\n                                                label: \"Display\"\r\n                                            },\r\n                                            listeners: {\r\n                                                click: () => {\r\n                                                    console.log(treeItemWidget.getLabel(targetItem));\r\n                                                }\r\n                                            }\r\n                                        }),\r\n                                        widget(\"menuitem\", {\r\n                                            properties: {\r\n                                                label: \"Delete\"\r\n                                            },\r\n                                            listeners: {\r\n                                                click: () => {\r\n                                                    targetItem.remove();\r\n                                                }\r\n                                            }\r\n                                        })\r\n                                    ]\r\n                                }),\r\n                            ]\r\n                        });\r\n                        targetItem.append(menu);\r\n                        menuWidget.positionContextual(menu, clientX, clientY);\r\n                        menu.focus({preventScroll: true});\r\n                        event.preventDefault();\r\n                    })\r\n                }\r\n            }),\r\n            widget(\"treeitem\", {\r\n                properties: {\r\n                    label: \"treeitem 0\",\r\n                    type: \"parent\",\r\n                    draggable: true,\r\n                    disabled: true\r\n                },\r\n                slotted: {\r\n                    group: [\r\n                        widget(\"treeitemgroup\", {\r\n                            slotted: [\r\n                                widget(\"treeitem\", {\r\n                                    properties: {\r\n                                        label: \"treeitem 1\",\r\n                                        type: \"leaf\",\r\n                                        draggable: true\r\n                                    }\r\n                                })\r\n                            ]\r\n                        })\r\n                    ]\r\n                }\r\n            }),\r\n            widget(\"treeitem\", {\r\n                properties: {\r\n                    label: \"treeitem 1\",\r\n                    type: \"leaf\",\r\n                    draggable: true\r\n                },\r\n                slotted: {\r\n                    content: [\r\n                        widget(\"toolbar\", {\r\n                            slotted: [\r\n                                widget(\"toolbaritem\",  {\r\n                                    properties: {\r\n                                        label: \"First item\",\r\n                                        type: \"button\"\r\n                                    }\r\n                                }),\r\n                                widget(\"toolbaritem\",  {\r\n                                    properties: {\r\n                                        label: \"Second item\",\r\n                                        type: \"checkbox\"\r\n                                    }\r\n                                })\r\n                            ]\r\n                        })\r\n                    ]\r\n                }\r\n            })\r\n        ]\r\n    })\r\n    document.body.append(tree);*/\r\n\r\n    document.body.append(\r\n        widget(\"toolbar\", {\r\n            slotted: [\r\n                widget(\"toolbaritem\",  {\r\n                    properties: {\r\n                        label: \"First item\",\r\n                        type: \"menubutton\"\r\n                    },\r\n                    slotted: [\r\n                        widget(\"menu\", {\r\n                            slotted: [\r\n                                widget(\"menuitem\", {\r\n                                    properties: {\r\n                                        label: \"MenuItem 1\",\r\n                                        name: \"MenuItem 1\",\r\n                                        type: \"checkbox\"\r\n                                    }\r\n                                }),\r\n                                widget(\"menuitem\", {\r\n                                    properties: {\r\n                                        label: \"MenuItem 2\",\r\n                                        name: \"MenuItem 2\",\r\n                                        type: \"checkbox\"\r\n                                    }\r\n                                })\r\n                            ]\r\n                        })\r\n                    ]\r\n                }),\r\n                widget(\"toolbaritem\",  {\r\n                    properties: {\r\n                        label: \"Second item\",\r\n                        type: \"checkbox\"\r\n                    }\r\n                }),\r\n                widget(\"toolbaritem\",  {\r\n                    properties: {\r\n                        label: \"Third item\",\r\n                        type: \"checkbox\",\r\n                        disabled: true,\r\n                    }\r\n                }),\r\n                widget(\"toolbaritem\",  {\r\n                    properties: {\r\n                        label: \"Fourth item\",\r\n                        type: \"checkbox\"\r\n                    }\r\n                })\r\n            ]\r\n        })\r\n    );\r\n\r\n    document.body.append(\r\n        widget(\"list\", {\r\n            slotted: [\r\n                widget(\"listitemgroup\",  {\r\n                    slotted: [   \r\n                        widget(\"listitem\",  {\r\n                            properties: {\r\n                                label: \"First item\"\r\n                            }\r\n                        })\r\n                    ]\r\n                }),\r\n                widget(\"listitem\",  {\r\n                    properties: {\r\n                        label: \"Second item\"\r\n                    },\r\n                    slotted: [\r\n                        widget(\"toolbar\", {\r\n                            slotted: [\r\n                                widget(\"toolbaritem\",  {\r\n                                    properties: {\r\n                                        label: \"First item\",\r\n                                        type: \"button\"\r\n                                    }\r\n                                }),\r\n                                widget(\"toolbaritem\",  {\r\n                                    properties: {\r\n                                        label: \"Second item\",\r\n                                        type: \"checkbox\"\r\n                                    }\r\n                                })\r\n                            ]\r\n                        })\r\n                    ]\r\n                }),\r\n                widget(\"listitem\",  {\r\n                    properties: {\r\n                        label: \"Third item\",\r\n                        disabled: true,\r\n                    }\r\n                }),\r\n                widget(\"listitem\",  {\r\n                    properties: {\r\n                        label: \"Fourth item\"\r\n                    }\r\n                })\r\n            ]\r\n        })\r\n    );\r\n\r\n    document.body.append(\r\n        widget(\"grid\", {\r\n            properties: {\r\n                selectby: \"row\",\r\n                multisectable: true\r\n            },\r\n            slotted: {\r\n                headers: [\r\n                    widget(\"gridheader\",  {\r\n                        slotted: \"First header\"\r\n                    }),\r\n                    widget(\"gridheader\",  {\r\n                        slotted: \"Second header\"\r\n                    })\r\n                ],\r\n                rows: [\r\n                    widget(\"gridrow\",  {\r\n                        slotted: [   \r\n                            widget(\"gridcell\",  {\r\n                                slotted: \"First cell\"\r\n                            }),\r\n                            widget(\"gridcell\",  {\r\n                                slotted: \"Second cell\"\r\n                            })\r\n                        ]\r\n                    }),\r\n                    widget(\"gridrow\",  {\r\n                        slotted: [   \r\n                            widget(\"gridcell\",  {\r\n                                slotted: \"Third cell\"\r\n                            }),\r\n                            widget(\"gridcell\",  {\r\n                                slotted: \"Fourth cell\"\r\n                            })\r\n                        ]\r\n                    }),\r\n                    widget(\"gridrow\",  {\r\n                        slotted: [   \r\n                            widget(\"gridcell\",  {\r\n                                slotted: \"Fifth cell\"\r\n                            }),\r\n                            widget(\"gridcell\",  {\r\n                                slotted: \"Sixth cell\"\r\n                            })\r\n                        ]\r\n                    }),\r\n                    widget(\"gridrow\",  {\r\n                        slotted: [   \r\n                            widget(\"gridcell\",  {\r\n                                slotted: \"Heighth cell\"\r\n                            }),\r\n                            widget(\"gridcell\",  {\r\n                                slotted: \"Nineth cell\"\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            }\r\n        })\r\n    );\r\n\r\n    document.body.append(\r\n        widget(\"combobox\", {\r\n            slotted: [\r\n                widget(\"option\",  {\r\n                    properties: {\r\n                        label: \"First option\"\r\n                    }\r\n                }),\r\n                widget(\"option\",  {\r\n                    properties: {\r\n                        label: \"Second option\"\r\n                    }\r\n                }),\r\n                widget(\"option\",  {\r\n                    properties: {\r\n                        label: \"Third option\",\r\n                        selected: true\r\n                    }\r\n                })\r\n            ],\r\n            listeners: {\r\n                change: (event) => {\r\n                    const {currentTarget} = event;\r\n                    const comboBoxTarget = <HTMLElement>currentTarget;\r\n                    console.log(optionWidget.getLabel(comboBoxWidget.selectedOption(comboBoxTarget)!));\r\n                }\r\n            }\r\n        })\r\n    );\r\n    \r\n    const editor = new Editor();\r\n    editor.setup();\r\n\r\n    /*editor.registerCheckboxAction(\"toggleAdvancedUser\", (_, newValue) => {\r\n        console.log(`Advanced user is now ${newValue}`);\r\n    }, {hotkey: new HotKey(Key.ARROW_DOWN, KeyModifier.Alt)});\r\n\r\n    editor.registerRadioAction(\"setLayout\", (_, newValue) => {\r\n        editor.setPair(\"layout\", newValue);\r\n    });\r\n\r\n    editor.registerButtonAction(\"execLayout\", () => {\r\n        const layout = editor.getPair(\"layout\");\r\n        console.log(`Layout is ${layout}`);\r\n    }, {hotkey: new HotKey(Key.ARROW_UP, KeyModifier.Alt)});*/\r\n\r\n\r\n    /*editor.registerRadioAction(\"selectTest\", (oldValue, newValue) => {\r\n        console.log(`Test is ${newValue}`);\r\n    }, {value: \"2\", key: \"test\"});\r\n\r\n    document.addEventListener(\"slotchange\", (event) => {\r\n        console.log(event);\r\n    });*/\r\n    \r\n    /*setTimeout(() => {\r\n        const execLayoutToolBarItem = document.querySelector<HTMLEActionElement>(\"e-toolbaritem[name=execLayout]\");\r\n        if (execLayoutToolBarItem) {\r\n            editor.addPairListener(\"layout\", (oldValue, newValue) => {\r\n                if (newValue !== oldValue) {\r\n                    execLayoutToolBarItem.value = newValue;\r\n                }\r\n            });\r\n        }\r\n    }, 100);\r\n\r\n    const button = element(\"button\", {\r\n        properties: {\r\n            textContent: \"Focus\"\r\n        },\r\n        listeners: {\r\n            click: () => {\r\n                const menuitem = document.querySelector<HTMLEMenuItemElement>(\"e-menuitem#hey\");\r\n                if (menuitem) {\r\n                    menuitem.focus();\r\n                }\r\n            }\r\n        }\r\n    });\r\n    document.body.append(button);\r\n    document.body.append(menubar.element);\r\n    \r\n    editor.executeCheckboxAction(\"toggleAdvancedUser\", true);\r\n    editor.setCheckboxActionValue(\"toggleAdvancedUser\", false);*/\r\n\r\n    //editor.setRadioActionValue(\"selectTest\", \"2\");\r\n\r\n    //editor.executeRadioAction(\"setLayout\", \"other\");\r\n}","import { ActionType, HTMLEActionElement } from \"./elements/containers/actions/Action\";\r\nimport { subtreeNodes } from \"./elements/Element\";\r\nimport { HotKey } from \"./Input\";\r\n\r\nexport { Editor };\r\nexport { EditorBase };\r\n\r\ninterface Action {\r\n    name: string;\r\n    type: ActionType;\r\n    trigger: (oldValue: any, newValue: any) => void;\r\n    key?: string;\r\n    value?: string;\r\n    checked?: boolean;\r\n}\r\n\r\ninterface ButtonAction {\r\n    name: string;\r\n    type: \"button\";\r\n    trigger: () => void;\r\n}\r\n\r\ninterface RadioAction {\r\n    name: string;\r\n    type: \"radio\";\r\n    trigger: (oldValue: string, newValue: string) => void;\r\n    value: string;\r\n    key?: string;\r\n}\r\n\r\ninterface CheckboxAction {\r\n    name: string;\r\n    type: \"checkbox\";\r\n    trigger: (oldValue: boolean, newValue: boolean) => void;\r\n    checked: boolean;\r\n    key?: string;\r\n}\r\n\r\ninterface EditorConstructor {\r\n    prototype: Editor;\r\n    new(): Editor;\r\n}\r\n\r\ninterface Editor {\r\n    /*registerWidget(widget: Widget): void;\r\n    unregisterWidget(widget: Widget): void;*/\r\n    \r\n    /*setPair(key: string, value: any): void;\r\n    getPair<T>(key: string): T;\r\n    addPairListener(key: string, listener: (oldValue: any, newValue: any) => void): void;\r\n    removePairListener(key: string, listener: (oldValue: any, newValue: any) => void): void;*/\r\n\r\n    registerButtonAction(\r\n        name: string,\r\n        trigger: () => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n        }): ButtonAction;\r\n    registerRadioAction(\r\n        name: string,\r\n        trigger: (oldValue: string, newValue: string) => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            value?: string;\r\n        }): RadioAction;\r\n    registerCheckboxAction(\r\n        name: string,\r\n        trigger: (oldValue: boolean, newValue: boolean) => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            checked?: boolean;\r\n        }): CheckboxAction;\r\n    \r\n    executeButtonAction(name: string): void;\r\n    executeCheckboxAction(name: string, newChecked: boolean): void;\r\n    executeRadioAction(name: string, newValue: string): void;\r\n\r\n    setCheckboxActionValue(name: string, checked: boolean): void;\r\n    setRadioActionValue(name: string, value: string): void;\r\n\r\n    unregisterActionElement(action: string, element: HTMLEActionElement): void;\r\n    registerActionElement(action: string, element: HTMLEActionElement): void;\r\n    setup(): void;\r\n}\r\n\r\nclass EditorBase implements Editor {\r\n    //private _widgets: Array<Widget>;\r\n    private _actions: Array<Action>;\r\n    private _actionElements: Array<Array<HTMLEActionElement>>;\r\n    private _hotkeys: Array<HotKey>;\r\n    private _pairs: Map<string, any>;\r\n    private _pairsListeners: Map<string, Array<(oldValue: any, newValue: any) => void>>;\r\n\r\n    private _actionsObserver: MutationObserver;\r\n\r\n    constructor() {\r\n        //this._widgets = new Array();\r\n        this._actions = new Array();\r\n        this._actionElements = new Array();\r\n        this._hotkeys = new Array();\r\n        this._pairs = new Map();\r\n        this._pairsListeners = new Map();\r\n\r\n        this._actionsObserver =  new MutationObserver(this._actionsObserverCallback.bind(this));\r\n    }\r\n\r\n    private _actionsObserverCallback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            mutation.addedNodes.forEach((node: Node) => {\r\n                Array.from(subtreeNodes(node)).forEach((node) => {\r\n                    if (node instanceof HTMLEActionElement) {\r\n                        this.registerActionElement(node.name, node);\r\n                    }\r\n                });\r\n            });\r\n            mutation.removedNodes.forEach((node: Node) => {\r\n                Array.from(subtreeNodes(node)).forEach((node) => {\r\n                    if (node instanceof HTMLEActionElement) {\r\n                        this.unregisterActionElement(node.name, node);\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n    \r\n    public setup(): void {\r\n        document.body.addEventListener(\"keydown\", this);\r\n        document.body.addEventListener(\"trigger\", this);\r\n\r\n        this._actionsObserver.observe(document.body, {\r\n            childList: true,\r\n            subtree: true\r\n        });\r\n    }\r\n\r\n    /*public getPair<T>(key: string): T {\r\n        return this._pairs.get(key) as T;\r\n    }\r\n\r\n    public setPair(key: string, value: any): void {\r\n        const oldValue = this._pairs.get(key);\r\n        this._pairs.set(key, value);\r\n        const listeners = this._pairsListeners.get(key);\r\n        if (typeof listeners !== \"undefined\") {\r\n            listeners.forEach((listener_i) => {\r\n                listener_i(oldValue, value);\r\n            });\r\n        }\r\n    }\r\n\r\n    public addPairListener(key: string, listener: (oldValue: any, newValue: any) => void): void {\r\n        const listeners = this._pairsListeners.get(key);\r\n        if (typeof listeners !== \"undefined\") {\r\n            listeners.push(listener);\r\n        }\r\n        else {\r\n            this._pairsListeners.set(key, [listener]);\r\n        }\r\n    }\r\n\r\n    public removePairListener(name: string, listener: (oldValue: any, newValue: any) => void): void {\r\n        const listeners = this._pairsListeners.get(name);\r\n        if (typeof listeners !== \"undefined\") {\r\n            const listenerIndex = listeners.findIndex(listener_i => listener_i == listener);\r\n            if (listenerIndex > -1) {\r\n                listeners.copyWithin(listenerIndex, listenerIndex + 1);\r\n                listeners.length--;\r\n            }\r\n        }\r\n    }*/\r\n    \r\n    /*public registerWidget(widget: Widget): void {\r\n        widget.element.addEventListener(\"focusin\", this);\r\n        this._widgets.push(widget);\r\n    }\r\n\r\n    public unregisterWidget(widget: Widget): void {\r\n        if (this._widgets.includes(widget)) {\r\n            widget.element.removeEventListener(\"focusin\", this);\r\n            this._widgets.splice(this._widgets.indexOf(widget), 1);\r\n        }\r\n    }*/\r\n\r\n    public handleEvent(event: Event): void {\r\n        const target = event.target;\r\n        switch (event.type) {\r\n            case \"keydown\":\r\n                const actionsIndices = this._hotkeys\r\n                    .map((hotkey_i, i) => hotkey_i.test(event as KeyboardEvent) ? i : -1)\r\n                    .filter(i => i > -1);\r\n                actionsIndices.forEach((index) => {\r\n                    const {name, type, value, checked} = this._actions[index];\r\n                    switch (type) {\r\n                        case \"button\":\r\n                            this.executeButtonAction(name);\r\n                            break;\r\n                        case \"checkbox\":\r\n                            this.executeCheckboxAction(name, checked!);\r\n                            break;\r\n                        case \"radio\":\r\n                            this.executeRadioAction(name, value!);\r\n                            break;\r\n                    }\r\n                });\r\n                break;\r\n            case \"trigger\":\r\n                if (target instanceof HTMLEActionElement) {\r\n                    switch (target.type) {\r\n                        case \"button\":\r\n                            this.executeButtonAction(target.name);\r\n                            break;\r\n                        case \"checkbox\":\r\n                            this.executeCheckboxAction(target.name, target.checked);\r\n                            break;\r\n                        case \"radio\":\r\n                        case \"select\":\r\n                            this.executeRadioAction(target.name, target.value);\r\n                            break;\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    \r\n    public registerButtonAction(\r\n        name: string,\r\n        trigger: () => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n        }): ButtonAction {\r\n            return this.registerAction(name, trigger, \"button\", init);\r\n    }\r\n\r\n    public registerRadioAction(\r\n        name: string,\r\n        trigger: (oldValue: string, newValue: string) => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            value?: string;\r\n        }): RadioAction {\r\n            return this.registerAction(name, trigger, \"radio\", init);\r\n    }\r\n\r\n    public registerCheckboxAction(\r\n        name: string,\r\n        trigger: (oldValue: boolean, newValue: boolean) => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            checked?: boolean;\r\n        }): CheckboxAction {\r\n            return this.registerAction(name, trigger, \"checkbox\", init);\r\n    }\r\n\r\n    public registerAction(\r\n        name: string,\r\n        trigger: () => void,\r\n        type: \"button\",\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n        }): ButtonAction;\r\n    public registerAction(\r\n        name: string,\r\n        trigger: (oldValue: boolean, newValue: boolean) => void,\r\n        type: \"checkbox\",\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            checked?: boolean;\r\n        }): CheckboxAction;\r\n    public registerAction(\r\n        name: string,\r\n        trigger: (oldValue: string, newValue: string) => void,\r\n        type: \"radio\",\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            value?: string;\r\n        }): RadioAction;\r\n    public registerAction(\r\n        name: string,\r\n        trigger: (oldValue: any, newValue: any) => void,\r\n        type: ActionType,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            value?: string;\r\n            checked?: boolean;\r\n        }): Action {\r\n        const hotkey = init?.hotkey;\r\n        const key = init?.key;\r\n        const value = init?.value;\r\n        const checked = init?.checked;\r\n        const action: Action = {name, trigger, key, type};\r\n        if (value ?? false) {\r\n            action.value = value;\r\n        }\r\n        if (key !== undefined && value !== undefined) {\r\n            localStorage.setItem(key, value);\r\n        }\r\n        if (checked ?? false) {\r\n            action.checked = checked;\r\n        }\r\n        const index = this._actions.push(action) - 1;\r\n        if (hotkey) {\r\n            this._hotkeys[index] = hotkey;\r\n        }\r\n        return action;\r\n    }\r\n\r\n    public executeButtonAction(name: string): void {\r\n        this.executeAction(name, \"button\");\r\n    }\r\n\r\n    public executeCheckboxAction(name: string, newChecked: boolean): void {\r\n        this.executeAction(name, \"checkbox\", newChecked);\r\n    }\r\n\r\n    public executeRadioAction(name: string, newValue: string): void {\r\n        this.executeAction(name, \"radio\", newValue);\r\n    }\r\n\r\n    public executeAction(name: string, type: \"button\"): void;\r\n    public executeAction(name: string, type: \"checkbox\", newChecked: boolean): void;\r\n    public executeAction(name: string, type: \"radio\", newValue: string): void;\r\n    public executeAction(name: string, type: ActionType, newValue?: any): void {\r\n        const actionIndex = this._actions.findIndex(\r\n            action_i => action_i.name == name\r\n        );\r\n        if (actionIndex > -1) {\r\n            const action = this._actions[actionIndex];\r\n            let oldValue;\r\n            switch (type) {\r\n                case \"radio\":\r\n                    oldValue = action.value ?? \"\";\r\n                    break;\r\n                case \"checkbox\":\r\n                    oldValue = action.value ?? false;\r\n                    break;\r\n            }\r\n            action.trigger(oldValue, newValue);\r\n            this.setActionValue(name, newValue);\r\n            /*action.value = newValue;\r\n            \r\n            const actionElements = this._actionElements[actionIndex];\r\n            if (actionElements) {\r\n                switch (type) {\r\n                    case \"radio\":\r\n                        actionElements.forEach((actionElement_i) => {\r\n                            if (actionElement_i.type == \"radio\") {\r\n                                actionElement_i.checked = (actionElement_i.value == newValue);\r\n                            }\r\n                            else if (actionElement_i.type == \"select\") {\r\n                                actionElement_i.value = newValue;\r\n                            }\r\n                        });\r\n                        break;\r\n                    case \"checkbox\":\r\n                        actionElements.forEach((actionElement_i) => {\r\n                            actionElement_i.checked = newValue;\r\n                        });\r\n                        break;\r\n                }\r\n            }*/\r\n        }\r\n    }\r\n\r\n    public setCheckboxActionValue(name: string, checked: boolean): void {\r\n        this.setActionValue(name, checked);\r\n    }\r\n\r\n    public setRadioActionValue(name: string, value: string): void {\r\n        this.setActionValue(name, value);\r\n    }\r\n\r\n    public setActionValue(name: string, value?: any): void {\r\n        const actionIndex = this._actions.findIndex(\r\n            action_i => action_i.name == name\r\n        );\r\n        if (actionIndex > -1) {\r\n            const action = this._actions[actionIndex];\r\n            const {type, key} = action;\r\n            action.value = value;\r\n            if (key) {\r\n                localStorage.setItem(key, value);\r\n            }\r\n            \r\n            const actionElements = this._actionElements[actionIndex];\r\n            if (actionElements) {\r\n                switch (type) {\r\n                    case \"radio\":\r\n                        actionElements.forEach((actionElement_i) => {\r\n                            if (actionElement_i.type == \"radio\") {\r\n                                actionElement_i.checked = (actionElement_i.value == value);\r\n                            }\r\n                            else if (actionElement_i.type == \"select\") {\r\n                                actionElement_i.value = value;\r\n                            }\r\n                        });\r\n                        break;\r\n                    case \"checkbox\":\r\n                        actionElements.forEach((actionElement_i) => {\r\n                            actionElement_i.checked = value;\r\n                        });\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public registerActionElement(name: string, element: HTMLEActionElement): void {\r\n        const actionIndex = this._actions.findIndex(action_i => action_i.name == name);\r\n        if (actionIndex > -1) {\r\n            const elements = this._actionElements[actionIndex];\r\n            if (elements) {\r\n                if (!elements.includes(element)) {\r\n                    elements.push(element);\r\n                }\r\n            }\r\n            else {\r\n                this._actionElements[actionIndex] = [element];\r\n            }\r\n\r\n            const action = this._actions[actionIndex];\r\n            const {type, value, checked} = action;\r\n            switch (type) {\r\n                case \"radio\":\r\n                    if (element.type == \"radio\") {\r\n                        element.checked = (element.value == value!);\r\n                    }\r\n                    else if (element.type == \"select\") {\r\n                        element.value = value!;\r\n                    }\r\n                    break;\r\n                case \"checkbox\":\r\n                    element.checked = checked!;\r\n                    break;\r\n            }\r\n\r\n            const hotkey = this._hotkeys[actionIndex];\r\n            if (hotkey) {\r\n                element.hotkey = hotkey.toString();\r\n            }\r\n        }\r\n    }\r\n\r\n    public unregisterActionElement(name: string, element: HTMLEActionElement): void {\r\n        const actionIndex = this._actions.findIndex(action_i => action_i.name == name);\r\n        if (actionIndex > -1) {\r\n            const elements = this._actionElements[actionIndex];\r\n            if (elements) {\r\n                const elementIndex = elements.findIndex(element_i => element_i == element);\r\n                if (elementIndex > -1) {\r\n                    elements.copyWithin(elementIndex, elementIndex + 1);\r\n                    elements.length--;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar Editor: EditorConstructor = EditorBase;"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","slotsMap","WeakMap","slotsObserver","MutationObserver","mutationsList","forEach","mutation","target","type","HTMLElement","slotReferences","slotRef_i","widget","element","slot","slottedCallback","deref","widgetsMap","attributesObserver","attributeName","oldValue","attributeChangedCallback","getAttribute","WidgetFactory","constructor","this","create","Proxy","apply","thisArg","argumentsList","Reflect","observedSlots","Array","isArray","map","slotName_i","slotName","slotElement","slot_i","observe","childList","slotReference","WeakRef","push","set","observedAttributes","attributes","attributeFilter","attributeOldValue","Error","widgets","Map","ModelChangeRecordBase","init","changeType","propertyName","undefined","newValue","removedIndex","removedItems","ModelNodesList","insertedIndex","insertedItems","sortedIndices","PROPERTY_CHANGE","LIST_REMOVE","LIST_INSERT","LIST_SORT","ModelChangeRecord","items","slice","length","item","index","values","ModelEventBase","ModelEventTargetAccessor","setCurrentTarget","event","currentTarget","setTarget","ModelEvent","ModelNodeBase","receiveEvent","callbacks","callback_i","addEventListener","callback","removeEventListener","callbackIndex","findIndex","splice","delete","dispatchEvent","super","setParent","parentNode","isCyclicReference","ancestorNode","TypeError","beginChanges","endChanges","getRecords","property","records","record","ModelNodeRecordsAccessor","triggerChange","node","handleRecord","ModelNode","ModelProperty","ModelObjectPropertiesAccessor","getProperty","setProperty","ModelObjectBase","ModelObject","ModelList","item_i","fromIndex","indexOf","sort","compareFunction","indexedItems","i","indexedItem_a","indexedItem_b","indexedItem_i","prepend","_items","append","insert","Math","abs","remove","clear","removedItem_i","reference","options","properties","propertiesFilter","subtree","filter","record_i","includes","ModelChangeObserver","references","listener","bind","unobserve","disconnect","camelToTrain","str","replace","toLowerCase","AttributeProperty","String","defaultValue","observed","writable","Boolean","hasAttribute","setAttribute","removeAttribute","val","JSON","parse","stringify","Number","parseFloat","CustomElement","elementCtor","name","customElements","define","Widget","subtreeNodes","childNodes","childNodesCount","childIndex","child","fragment","nodes","document","createDocumentFragment","tagName","dataset","children","listeners","createElement","entries","attributeValue","toggleAttribute","elementDataset","keys","datasetEntry_i","from","name_i","listener_i","slotted","NodeList","Node","reactiveElementsMap","reactiveElementsFinalizationRegistry","FinalizationRegistry","heldValue","model","reactiveElement","reactiveElementsMapEntry","reactiveElementsArray","reactiveElementsPropertyObserver","reactiveElement_i","elementRef","react","register","observerOptions","concat","property_i","Set","reactiveChildElementsMap","reactiveChildElementsFinalizationRegistry","list","reactiveChildElement","reactiveChildrenElementsMapEntry","reactiveChildElementsArray","reactiveChildElementsObserver","range","listLength","reactiveChildElements_i","parentRef","mapping","placeholder","parent","firstChild","childrenCount","removeChild","insertedItemsArray","before","removedCount","createRange","removeEndIndex","setStartBefore","setEndAfter","deleteContents","childrenArray","index_i","reactiveChildElements","reactiveChildElementsMapEntry","areAttributesMatching","referenceAttributeType","referenceAttributeName","referenceAttributeValue","RegExp","test","menuItemWidget","class","role","tabindex","cloneNode","button","hasIcon","hasArrow","checkbox","radio","menu","submenu","id","classList","tabIndex","keyshortcut","checked","label","disabled","add","setKeyShortcut","setChecked","setExpanded","setType","setLabel","setName","setValue","setDisabled","hasChildMenu","some","childNode_i","contains","getMenu","querySelector","getKeyShortcut","keyshortcutsPart","labelPart","after","textContent","getLabel","getType","types","type_i","typesFeatures","iconPartTemplate","arrowPartTemplate","oldType","iconPart","arrowPart","getValue","getName","getChecked","getDisabled","getExpanded","toggle","force","expand","collapse","targetItem","closest","focus","preventScroll","style","menuStyle","top","itemTop","bottom","itemBottom","left","itemLeft","right","itemRight","getBoundingClientRect","width","menuWidth","height","menuHeight","scrollY","scrollX","window","clientWidth","clientHeight","body","overflowX","overflowY","closestMenu","closestMenuTop","closestMenuLeft","menuComputedStyle","getComputedStyle","paddingTop","paddingBottom","menuPaddingTop","menuPaddingBottom","menuWidget","createTreeWalker","NodeFilter","SHOW_ELEMENT","contextual","setContextual","positionContextual","x","y","getContextual","querySelectorAll","FILTER_ACCEPT","FILTER_SKIP","FILTER_REJECT","menuitem_i","find","walker","currentNode","lastChild","previousSibling","nextSibling","async","delay","Promise","resolve","reject","timeout","setTimeout","clearTimeout","then","targetMenu","error","radio_i","stopPropagation","relatedTarget","nearestItem","activeItem","preventDefault","composedPath","target_i","catch","clientX","clientY","intersectsWithMouse","containsRelatedTarget","toolbarItemWidget","pressed","setPressed","getTitle","setTitle","getPressed","setActive","getActive","toolbarWidget","toolbar","setOrientation","getOrientation","tree","targetToolbar","previousItem","firstItem","nextItem","lastItem","treeItemWidget","group","draggable","setDraggable","setSelected","setPosInSet","getPosInSet","posInSet","e","setDropTarget","getDropTarget","getDraggable","Event","bubbles","getSelected","setLevel","getLevel","parseInt","getPropertyValue","content","shiftKey","ctrlKey","treeWidget","multisectable","setMultiSelectable","child_i","selectedItems","beginSelection","endSelection","getMultiSelectable","dropTargetItem","to","position","compareDocumentPosition","DOCUMENT_POSITION_FOLLOWING","DOCUMENT_POSITION_PRECEDING","selected","expanded","nextNode","targetTree","blur","parentItem","click","TreeModel","childItems","flattenItems","sortFunction","item_a","item_b","localeCompare","flatMap","treeItem_i","of","getItemByUri","uri","itemsCount","uriLength","itemUri","itemUriLength","startsWith","charAt","flattenedInsertedItems","insertedItem_i","flattenedRemovedItems","TreeItemList","show","hide","display","result","reduce","console","log","removedItemsGroups","TreeItemModel","list_i","children_i","childCount","visibility","treeView","treeElement","dragstart","drop","contextmenu","keydown","focusin","focusout","rootElement","hidden","getModel","treeitem","badge","visibilityItem","dragImageElement","span","dataTransfer","selectedElements","selectedCount","selectedUris","element_i","uri_i","_","uris","uri_j","selectedUrisString","join","lastUri","dropEffect","setData","dragImage","setDragImage","targetUri","targetItemModel","transferedUris","getData","split","transferedItems","targetType","targetParentItem","targetList","sameLabelIndex","item_j","confirm","copyWithin","newElements","count","close","targetElement","matches","itemsList","HTMLEActionElementBase","trigger","enable","disable","Key","KeyModifier","MouseButton","HTMLEActionElement","shadowTemplate","HTMLEGridCellElementBase","attachShadow","mode","HTMLEGridCellElement","HTMLEGridRowGroupElementBase","shadowRoot","assignedElements","posinset","HTMLEGridRowGroupElement","HTMLEMenuItemElementBase","part","selector","propertyKey","getter","withinShadowRoot","HTMLEMenuItemElement","EMenuItem","assign","title","HTMLEMenuItemGroupElementBase","toggleTimeouts","HTMLEMenuItemGroupElement","EMenuItemGroup","radios","HTMLEMenuElementBase","activeIndex","root","previousNode","HTMLEMenuElement","EMenu","HTMLEGridRowElementBase","cells","HTMLEGridCellCollection","cell_i","HTMLEGridRowElement","HTMLEGridBodyElement","namedItem","HTMLEGridRowCollection","HTMLEGridBodyElementBase","rows","HTMLEGridElementBase","clearSelection","selectedCells","selectedRows","toIndex","min","max","nextVisibleRow","previousVisibleRow","selectedCell_i","selectedRow_i","row_i","cell","activeCell","active","closestRow","row","activeRow","cellsWalker","rowsWalker","closestRowCells","cellIndex","previousRow","previousRowCells","nextRow","nextRowCells","selectby","targetCell","targetRow","lastSelectedCell","lastSelectedRow","firstRow","firstCell","lastRow","lastCell","previousCell","nextCell","topCell","bottomCell","HTMLEGridHeadElementBase","HTMLEMenuBarElementBase","Element","isExpanded","HTMLEMenuButtonElementBase","HTMLEMenuButtonElement","EMenuButton","HTMLEOptionElementBase","HTMLEOptionElement","HTMLEOptionGroupElementBase","HTMLEOptionGroupElement","HTMLESelectElementBase","matchingOption","option","selectedIndex","activeOption","descriptionPart","description","selectedOption","valuePart","optionsStyle","selectBottom","selectLeft","previousOption","nextOption","firstOption","lastOption","keyLength","keyCode","charCodeAt","optionsArray","firstMatchIndex","option_i","nextMatchIndex","matchIndex","default","slottedKeyboardListeners","slottedTriggerListeners","HTMLESelectElement","HTMLEToolBarItemElementBase","menubutton","select","selectValue","HTMLEToolBarItemElement","EToolBarItem","HTMLEToolBarItemGroupElementBase","HTMLEToolBarItemGroupElement","HTMLEToolBarElementBase","HTMLEToolBarElement","HTMLETabPanelElementBase","HTMLETabPanelElement","HTMLETabElementBase","connectedCallback","panel","getElementById","controls","CustomEvent","detail","tab","HTMLETabElement","HTMLETabListElementBase","tabs","focusTabAt","activeTab","activateTab","targetIndex","thisTab","thisTabIndex","HTMLETreeItemGroupElementBase","HTMLETreeItemElement","level","closestItem","parentElement","HTMLETreeItemGroupElement","HTMLETreeItemElementBase","HTMLETreeElementBase","getElementsByTagName","nextVisibleItem","previousVisibleItem","selectedItem_i","droptarget","relatedTargetRoot","getRootNode","relatedTargetHost","ShadowRoot","host","HTMLEListItemElementBase","HTMLSpanElement","HTMLEListItemElement","HTMLEListItemGroupElementBase","HTMLEListItemGroupElement","HTMLEListElementBase","lastSelectedItem","HTMLEListElement","HTMLEDraggableElementBase","disconnectedCallback","referee","thisRefIndex","getReference","HTMLEDraggableElement","HTMLEDragzoneElementBase","selectDraggable","selectedDraggables","unselectDraggable","draggables","elem","thisSelectedDraggable","dragged","thisDraggedDraggable","firstIndex","direction","sign","startRangeIndex","endRangeIndex","thisDraggable","HTMLEDragzoneElement","HTMLEDropzoneElementBase","droptest","appendAreaPart","removeDraggables","dragovered","dropIndex","dragzoneId","dragzone","selectedDraggable","HTMLEDropzoneElement","addDraggables","placeholderPart","dataTransferSuccess","newDraggables","insertionPosition","multiple","newDraggable","insertAdjacentElement","appendChild","replaceChild","action","once","predicate","toRemove","atPosition","HTMLEDialogElementBase","handleEvent","cancel","open","HTMLEHandleElementBase","pointerId","releasePointerCapture","setPointerCapture","targetComputedStyle","movementX","movementY","rectWidth","rectHeight","outerElement","outerRectLeft","outerRectRight","outerRectTop","outerRectBottom","newLeft","trunc","newTop","HTMLEHeightSashElementBase","rootNode","requestAnimationFrame","growdir","newHeight","computedNewHeight","HTMLEImportElementBase","src","outerHTML","fetch","response","ok","text","statusText","barShadowTemplate","circleShadowTemplate","HTMLELoaderElementBase","promise","finally","replaceChildren","commonStyle","barStyle","circleStyle","HTMLEWidthSashElementBase","setWidth","newWidth","menubar","listItemWidget","gridCellWidget","headers","setHeaders","getHeaders","gridRowWidget","gridWidget","grid","setSelectBy","getSelectBy","targetGrid","multiselectable","head","scope","header","optionWidget","comboBoxWidget","combobox","targetCombobox","addedNodes","box","targetOption","ViewBase","setModel","renderLight","renderShadow","refresh","shadow","light","View","ListModel","getItemByIndex","ListItemList","ListItemModel","ListViewBase","getListElement","getListItemElement","listElement","listItemElement","toolbaritem","ListView","GridModel","columns","getColumnByName","column_i","sortByColumn","column","sortOrder","sortorder","row_1","row_2","cell_1","extract","toString","cell_2","GridColumnModel","filters","GridRowModel","age","GridViewBase","getGridElement","setColumnDelegate","delegate","setCellDelegate","getRowElement","getColumnHeaderElement","getColumnCellsElements","rel","href","input","setSearchFilter","gridElement","rowElement","addDisplayFilter","displayFilters","removeDisplayFilter","filterIndex","searchFilter","filter_i","resizable","gridRowElement","targetHead","targetHeader","columnHeaderElement","maxWidth","removeProperty","HTMLInputElement","targetColumn","GridView","main","treeModel","aLabel","bLabel","gridView","sortable","menuView","change","comboBoxTarget","_actions","_actionElements","_hotkeys","_pairs","_pairsListeners","_actionsObserver","_actionsObserverCallback","registerActionElement","removedNodes","unregisterActionElement","setup","hotkey_i","executeButtonAction","executeCheckboxAction","executeRadioAction","registerButtonAction","registerAction","registerRadioAction","registerCheckboxAction","hotkey","localStorage","setItem","executeAction","newChecked","actionIndex","action_i","setActionValue","setCheckboxActionValue","setRadioActionValue","actionElements","actionElement_i","elements","elementIndex"],"sourceRoot":""}