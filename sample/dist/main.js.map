{"version":3,"file":"main.js","mappings":"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","sources":["webpack://main/webpack/bootstrap","webpack://main/webpack/runtime/define property getters","webpack://main/webpack/runtime/hasOwnProperty shorthand","webpack://main/webpack/runtime/make namespace object","webpack://main/./src/views/widgets/Widget.ts","webpack://main/./src/models/Model.ts","webpack://main/./src/elements/Snippets.ts","webpack://main/./src/elements/Element.ts","webpack://main/./src/views/View.ts","webpack://main/./src/views/widgets/menu/MenuItemWidget.ts","webpack://main/./src/views/widgets/menu/MenuWidget.ts","webpack://main/./src/views/widgets/toolbar/ToolBarItemWidget.ts","webpack://main/./src/views/widgets/toolbar/ToolBarWidget.ts","webpack://main/./src/views/widgets/tree/TreeItemWidget.ts","webpack://main/./src/views/widgets/tree/TreeWidget.ts","webpack://main/./src/views/TreeeView.ts","webpack://main/./src/elements/containers/actions/Action.ts","webpack://main/./src/Input.ts","webpack://main/./src/elements/containers/grid/GridCell.ts","webpack://main/./src/elements/containers/grid/GridRowGroup.ts","webpack://main/./src/elements/containers/menus/MenuItem.ts","webpack://main/./src/elements/containers/menus/MenuItemGroup.ts","webpack://main/./src/elements/containers/menus/Menu.ts","webpack://main/./src/elements/containers/grid/GridRow.ts","webpack://main/./src/elements/containers/grid/GridCellCollection.ts","webpack://main/./src/elements/containers/grid/GridRowCollection.ts","webpack://main/./src/elements/containers/grid/GridBody.ts","webpack://main/./src/elements/containers/grid/Grid.ts","webpack://main/./src/elements/containers/grid/GridHead.ts","webpack://main/./src/elements/containers/menus/MenuBar.ts","webpack://main/./src/elements/containers/menus/MenuButton.ts","webpack://main/./src/elements/controls/forms/Option.ts","webpack://main/./src/elements/controls/forms/OptionGroup.ts","webpack://main/./src/elements/controls/forms/OptionCollection.ts","webpack://main/./src/elements/controls/forms/Select.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItem.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItemGroup.ts","webpack://main/./src/elements/containers/toolbars/ToolBar.ts","webpack://main/./src/elements/containers/tabs/TabPanel.ts","webpack://main/./src/elements/containers/tabs/Tab.ts","webpack://main/./src/elements/containers/tabs/TabList.ts","webpack://main/./src/elements/containers/trees/TreeItemGroup.ts","webpack://main/./src/elements/containers/trees/TreeItem.ts","webpack://main/./src/elements/containers/trees/Tree.ts","webpack://main/./src/elements/containers/lists/ListItem.ts","webpack://main/./src/elements/containers/lists/ListItemGroup.ts","webpack://main/./src/elements/containers/lists/List.ts","webpack://main/./src/elements/controls/draggable/Draggable.ts","webpack://main/./src/elements/controls/draggable/Dragzone.ts","webpack://main/./src/elements/controls/draggable/Dropzone.ts","webpack://main/./src/elements/controls/dialogs/Dialog.ts","webpack://main/./src/elements/utils/Handle.ts","webpack://main/./src/elements/utils/HeightSash.ts","webpack://main/./src/elements/utils/Import.ts","webpack://main/./src/elements/utils/Loader.ts","webpack://main/./src/elements/utils/WidthSash.ts","webpack://main/./src/observers/AttributeMixinsObserver.ts","webpack://main/./src/views/widgets/SeparatorWidget.ts","webpack://main/./src/views/widgets/menu/MenuBarWidget.ts","webpack://main/./src/views/widgets/menu/MenuItemGroupWidget.ts","webpack://main/./src/views/widgets/tree/TreeItemGroupWidget.ts","webpack://main/./src/views/widgets/list/ListItemWidget.ts","webpack://main/./src/views/widgets/list/ListWidget.ts","webpack://main/./src/views/widgets/list/ListItemGroupWidget.ts","webpack://main/./src/views/widgets/toolbar/ToolBarItemGroupWidget.ts","webpack://main/./src/views/widgets/grid/GridCellWidget.ts","webpack://main/./src/views/widgets/grid/GridRowWidget.ts","webpack://main/./src/views/widgets/grid/GridWidget.ts","webpack://main/./src/views/widgets/grid/GridHeaderWidget.ts","webpack://main/./src/views/widgets/combobox/OptionWidget.ts","webpack://main/./src/views/widgets/combobox/ComboBoxWidget.ts","webpack://main/./src/views/widgets/combobox/OptionGroupWidget.ts","webpack://main/./src/views/ListView.ts","webpack://main/./src/views/GridView.ts","webpack://main/./main.ts","webpack://main/./src/Editor.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export { WidgetFactoryConstructor };\r\n\r\nexport { WidgetFactory };\r\nexport { widgets };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {}\r\n}\r\n\r\ninterface WidgetFactoryConstructor {\r\n    readonly prototype: WidgetFactory;\r\n    new(): WidgetFactory;\r\n}\r\n\r\ninterface WidgetFactory {\r\n    create(init?: object): HTMLElement;\r\n    slot(root: HTMLElement, name: string | null): HTMLElement | null;\r\n}\r\n\r\nvar slotsMap: WeakMap<HTMLElement, {\r\n    widget: WidgetFactory,\r\n    element: WeakRef<HTMLElement>;\r\n    slot: string | null;\r\n}[]> = new WeakMap();\r\nvar slotsObserver = new MutationObserver(\r\n    (mutationsList: MutationRecord[]) => {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            if (target instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"childList\": {\r\n                        const slotReferences = slotsMap.get(target);\r\n                        if (slotReferences) {\r\n                            slotReferences.forEach(slotRef_i => {\r\n                                const {widget, element, slot} = slotRef_i;\r\n                                const slottedCallback = (widget as any)[\"slottedCallback\"];\r\n                                if (typeof slottedCallback == \"function\") {\r\n                                    slottedCallback(element.deref(), target, slot);\r\n                                }\r\n                            });\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n);\r\n\r\nvar widgetsMap: WeakMap<HTMLElement, WidgetFactory> = new WeakMap();\r\nvar attributesObserver = new MutationObserver(\r\n    (mutationsList: MutationRecord[]) => {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            if (target instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"attributes\": {\r\n                        const {attributeName, oldValue} = mutation;\r\n                        const widget = widgetsMap.get(target);\r\n                        if (widget) {\r\n                            const attributeChangedCallback = (widget as any)[\"attributeChangedCallback\"];\r\n                            if (typeof attributeChangedCallback == \"function\") {\r\n                                attributeChangedCallback(target, attributeName, oldValue, target.getAttribute(attributeName!));\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n);\r\n\r\nclass WidgetFactoryBase implements WidgetFactory {\r\n\r\n    constructor() {\r\n        const widget = <WidgetFactory>this;\r\n        this.create = new Proxy(\r\n            this.create, {\r\n                apply: (target, thisArg, argumentsList) => {\r\n                    const element = Reflect.apply(target, thisArg, argumentsList);\r\n                    const observedSlots = <(string | null)[]>(widget as any)[\"observedSlots\"];\r\n                    if (Array.isArray(observedSlots)) {\r\n                        const slots = observedSlots\r\n                            .map(slotName_i => {\r\n                                return {\r\n                                    slotName: slotName_i,\r\n                                    slotElement: widget.slot(element, slotName_i)\r\n                                };\r\n                            });\r\n                        slots.forEach(slot_i => {\r\n                            const {slotElement, slotName} = slot_i;\r\n                            if (slotElement) {\r\n                                slotsObserver.observe(slotElement, {\r\n                                    childList: true\r\n                                });\r\n                                const slotReferences = slotsMap.get(slotElement);\r\n                                const slotReference = {widget, element: new WeakRef(element), slot: slotName};\r\n                                if (Array.isArray(slotReferences)) {\r\n                                    slotReferences.push(slotReference);\r\n                                }\r\n                                else {\r\n                                    slotsMap.set(slotElement, new Array(slotReference));\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                    const observedAttributes = (widget as any)[\"observedAttributes\"];\r\n                    if (Array.isArray(observedAttributes)) {\r\n                        widgetsMap.set(element, widget);\r\n                        attributesObserver.observe(element, {\r\n                            attributes: true,\r\n                            attributeFilter: observedAttributes,\r\n                            attributeOldValue: true\r\n                        });\r\n                    }\r\n                    return element;\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    create(): HTMLElement {\r\n        throw new Error(`create method is not implemented`);\r\n    }\r\n\r\n    slot(): HTMLElement | null {\r\n        return null;\r\n    }\r\n\r\n    get observedSlots(): string[] {\r\n        return [\"\"];\r\n    }\r\n}\r\n\r\nvar WidgetFactory: WidgetFactoryConstructor = WidgetFactoryBase;\r\nvar widgets: Map<string, WidgetFactory> = new Map();","export { ModelChangeRecord };\r\nexport { ModelEvent };\r\nexport { ModelNode };\r\nexport { ModelObject };\r\nexport { ModelProperty };\r\nexport { ModelList };\r\nexport { ModelChangeObserverOptions };\r\nexport { ModelChangeObserver };\r\n\r\ninterface ModelChangeRecordConstructor {\r\n    readonly prototype: ModelChangeRecord;\r\n    new(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ): ModelChangeRecord;\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\ninterface ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly changeType: number;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\nclass ModelChangeRecordBase implements ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList;\r\n    readonly changeType: number;\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n\r\n    constructor(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ) {\r\n        this.target = init.target;\r\n        this.changeType = init.changeType;\r\n        this.propertyName = init.propertyName ?? null;\r\n        this.oldValue = init.oldValue ?? undefined;\r\n        this.newValue = init.newValue ?? undefined;\r\n        this.removedIndex = init.removedIndex ?? 0;\r\n        this.removedItems = new ModelNodesList(init.removedItems ?? []);\r\n        this.insertedIndex = init.insertedIndex ?? 0;\r\n        this.insertedItems = new ModelNodesList(init.insertedItems ?? []);\r\n        this.sortedIndices = init.sortedIndices ?? [];\r\n    }\r\n\r\n    static get PROPERTY_CHANGE(): number {\r\n        return 1;\r\n    }\r\n\r\n    static get LIST_REMOVE(): number {\r\n        return 2;\r\n    }\r\n\r\n    static get LIST_INSERT(): number {\r\n        return 3;\r\n    }\r\n\r\n    static get LIST_SORT(): number {\r\n        return 4;\r\n    }\r\n\r\n    get PROPERTY_CHANGE(): number {\r\n        return ModelChangeRecordBase.PROPERTY_CHANGE;\r\n    }\r\n\r\n    get LIST_REMOVE(): number {\r\n        return ModelChangeRecordBase.LIST_REMOVE;\r\n    }\r\n\r\n    get LIST_INSERT(): number {\r\n        return ModelChangeRecordBase.LIST_INSERT;\r\n    }\r\n\r\n    get LIST_SORT(): number {\r\n        return ModelChangeRecordBase.LIST_SORT;\r\n    }\r\n}\r\n\r\nvar ModelChangeRecord: ModelChangeRecordConstructor = ModelChangeRecordBase;\r\n\r\ninterface ModelNodesListConstructor {\r\n    readonly prototype: ModelNodesList;\r\n    new(items: any[]): ModelNodesList;\r\n}\r\n\r\ninterface ModelNodesList {\r\n    get length(): number;\r\n    item(index: number): ModelNode | null;\r\n    values(): IterableIterator<ModelNode>;\r\n}\r\n\r\nclass ModelNodesListBase implements ModelNodesList {\r\n    #items: ModelNode[];\r\n\r\n    constructor(items: ModelNode[]) {\r\n        this.#items = items.slice();\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    item(index: number): ModelNode | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    values(): IterableIterator<ModelNode> {\r\n        return this.#items.values();\r\n    }\r\n}\r\n\r\nvar ModelNodesList: ModelNodesListConstructor = ModelNodesListBase;\r\n\r\ninterface ModelEventConstructor {\r\n    readonly prototype: ModelEvent;\r\n    new(type: string): ModelEvent;\r\n}\r\n\r\ninterface ModelEvent {\r\n    readonly type: string;\r\n    readonly currentTarget: ModelEventTarget | null;\r\n    readonly target: ModelEventTarget | null;\r\n}\r\n\r\nclass ModelEventBase implements ModelEvent {\r\n    readonly type: string;\r\n\r\n    #currentTarget: ModelEventTarget | null;\r\n    #target: ModelEventTarget | null;\r\n\r\n    constructor(type: string) {\r\n        this.type = type;\r\n        this.#currentTarget = null;\r\n        this.#target = null;\r\n    }\r\n\r\n    get currentTarget(): ModelEventTarget | null {\r\n        return this.#currentTarget;\r\n    }\r\n\r\n    get target(): ModelEventTarget | null {\r\n        return this.#target;\r\n    }\r\n\r\n    static ModelEventTargetAccessor? = new class ModelEventTargetAccessor {\r\n        setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#currentTarget = currentTarget;\r\n            }\r\n        }\r\n\r\n        setTarget(event: ModelEvent, target: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#target = target;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface ModelEventTargetAccessor {\r\n    setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void;\r\n    setTarget(event: ModelEvent, target: ModelEventTarget): void;\r\n}\r\n\r\nvar ModelEventTargetAccessor: ModelEventTargetAccessor = ModelEventBase.ModelEventTargetAccessor!;\r\ndelete ModelEventBase.ModelEventTargetAccessor;\r\n\r\nvar ModelEvent: ModelEventConstructor = ModelEventBase;\r\n\r\ninterface ModelEventTargetConstructor {\r\n    readonly prototype: ModelEventTarget;\r\n    new(): ModelEventTarget;\r\n}\r\n\r\ninterface ModelEventTarget {\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    dispatchEvent(event: ModelEvent): void;\r\n    receiveEvent(event: ModelEvent): void;\r\n}\r\n\r\nclass ModelEventTargetBase implements ModelEventTarget {\r\n    #callbacks: Map<string, ((event: ModelEvent) => void)[]>;\r\n\r\n    constructor() {\r\n        this.#callbacks = new Map();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        const {type} = event;\r\n        const callbacks = this.#callbacks.get(type);\r\n        ModelEventTargetAccessor.setCurrentTarget(event, this);\r\n        if (callbacks) {\r\n            callbacks.forEach((callback_i) => {\r\n                callback_i(event);\r\n            });\r\n        }\r\n    }\r\n\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            callbacks.push(callback);\r\n        }\r\n        else {\r\n            this.#callbacks.set(type, [callback]);\r\n        }\r\n    }\r\n\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            const callbackIndex = callbacks.findIndex(\r\n                callback_i => callback_i == callback\r\n            );\r\n            if (callbackIndex > -1) {\r\n                callbacks.splice(callbackIndex, 1);\r\n            }\r\n            if (callbacks.length == 0) {\r\n                this.#callbacks.delete(type);\r\n            }\r\n        }\r\n    }\r\n\r\n    dispatchEvent(event: ModelEvent): void {\r\n        ModelEventTargetAccessor.setTarget(event, this);\r\n        this.receiveEvent(event);\r\n    }\r\n}\r\n\r\nvar ModelEventTarget: ModelEventTargetConstructor = ModelEventTargetBase;\r\n\r\ninterface ModelNodeConstructor {\r\n    readonly prototype: ModelNode;\r\n    new(): ModelNode;\r\n}\r\n\r\ninterface ModelNode extends ModelEventTarget {\r\n    readonly parentNode: ModelNode | null;\r\n    setParent(parentNode: ModelNode | null): void;\r\n    getRecords(): ModelChangeRecord[];\r\n    beginChanges(): void;\r\n    endChanges(): void;\r\n}\r\n\r\ninterface ModelNodeRecordsAccessor {\r\n    triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void;\r\n    handleRecord(node: ModelNode, record: ModelChangeRecord): void;\r\n}\r\n\r\nclass ModelNodeBase extends ModelEventTargetBase implements ModelNode {\r\n    #parentNode: ModelNode | null;\r\n    #records: ModelChangeRecord[];\r\n    #isRecording: boolean;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#parentNode = null;\r\n        this.#records = [];\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    get parentNode(): ModelNode | null {\r\n        return this.#parentNode;\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        if (parentNode !== null) {\r\n            let isCyclicReference = parentNode == this;\r\n            let {parentNode: ancestorNode} = parentNode;\r\n            while (!isCyclicReference && ancestorNode !== null) {\r\n                ({parentNode: ancestorNode} = ancestorNode);\r\n                isCyclicReference = ancestorNode == this;\r\n            }\r\n            if (!isCyclicReference) {\r\n                this.#parentNode = parentNode;\r\n            }\r\n            else {\r\n                throw new TypeError(\"Failed to set parent on ModelNode: circular reference detected in the hierarchy.\");\r\n            }\r\n        }\r\n        else {\r\n            this.#parentNode = null;\r\n        }\r\n    }\r\n    \r\n    beginChanges(): void {\r\n        this.#isRecording = true;\r\n    }\r\n\r\n    endChanges(): void {\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        this.#records.splice(0);\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    getRecords(): ModelChangeRecord[] {\r\n        return this.#records.slice();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        super.receiveEvent(event);\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            parentNode.receiveEvent(event);\r\n        }\r\n    }\r\n\r\n    #triggerChange(property: string, oldValue: any, newValue: any): void {\r\n        const records = this.#records;\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.PROPERTY_CHANGE,\r\n            propertyName: property,\r\n            oldValue, newValue\r\n        });\r\n        records.push(record);\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        records.splice(0);\r\n    }\r\n\r\n    #handleRecord(record: ModelChangeRecord): void {\r\n        this.#records.push(record);\r\n        if (!this.#isRecording) {\r\n            this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n            this.#records.splice(0);\r\n        }\r\n    }\r\n\r\n    static ModelNodeRecordsAccessor? = new class ModelNodeRecordsAccessor {\r\n        triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#triggerChange(property, oldValue, newValue);\r\n            }\r\n        }\r\n\r\n        handleRecord(node: ModelNode, record: ModelChangeRecord): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#handleRecord(record);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelNodeRecordsAccessor: ModelNodeRecordsAccessor = ModelNodeBase.ModelNodeRecordsAccessor!;\r\ndelete ModelNodeBase.ModelNodeRecordsAccessor;\r\n\r\nvar ModelNode: ModelNodeConstructor = ModelNodeBase;\r\n\r\ninterface ModelPropertyDecorator {\r\n    (\r\n        init?: {\r\n            type: typeof String | typeof Number | typeof Boolean | typeof Date | typeof Object\r\n        }\r\n    ): <Model extends ModelObject>(target: Model, property: string) => void;\r\n}\r\n\r\nconst ModelProperty: ModelPropertyDecorator = function(\r\n    init?: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Date | typeof Object\r\n    }\r\n) {\r\n    return (\r\n        target: ModelObject, property: string\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        /*const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n        if (Array.isArray(observedAttributes)) {\r\n            observedAttributes.push(property);\r\n        }\r\n        else {\r\n            Object.defineProperty(\r\n                constructor, \"observedAttributes\", {\r\n                    value: [property],\r\n                    writable: false\r\n                }\r\n            );\r\n        }*/\r\n        const setter = function(this: ModelObject, value: any) {\r\n            const oldValue = ModelObjectPropertiesAccessor.getProperty(this, property);\r\n            ModelObjectPropertiesAccessor.setProperty(this, property, value);\r\n            if (value !== oldValue) {\r\n                ModelNodeRecordsAccessor.triggerChange(this, property, oldValue, value);\r\n            }\r\n            return true;\r\n        };\r\n        const getter = function(this: ModelObject) {\r\n            return ModelObjectPropertiesAccessor.getProperty(this, property);\r\n        };\r\n        Object.defineProperty(prototype, property, {\r\n            set: setter,\r\n            get: getter,\r\n            enumerable: true\r\n        });\r\n    }\r\n}\r\n\r\ninterface ModelObjectConstructor {\r\n    readonly prototype: ModelObject;\r\n    new(): ModelObject;\r\n}\r\n\r\ninterface ModelObject extends ModelNode {}\r\n\r\ninterface ModelObjectPropertiesAccessor {\r\n    setProperty(node: ModelNode, property: string, value: any): void;\r\n    getProperty(node: ModelNode, property: string,): any;\r\n}\r\n\r\nclass ModelObjectBase extends ModelNodeBase implements ModelObject {\r\n    #properties: Map<string, any>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#properties = new Map();\r\n    }\r\n\r\n    static ModelObjectPropertiesAccessor? = new class ModelPropertiesAccessor {\r\n        setProperty(node: ModelObject, property: string, value: any): void {\r\n            if (node instanceof ModelObjectBase) {\r\n                node.#properties.set(property, value);\r\n            }\r\n        }\r\n\r\n        getProperty(node: ModelObject, property: string): any {\r\n            if (node instanceof ModelObjectBase) {\r\n                return node.#properties.get(property);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelObjectPropertiesAccessor: ModelObjectPropertiesAccessor = ModelObjectBase.ModelObjectPropertiesAccessor!;\r\ndelete ModelObjectBase.ModelObjectPropertiesAccessor;\r\n\r\nvar ModelObject: ModelObjectConstructor = ModelObjectBase;\r\n\r\ninterface ModelListConstructor {\r\n    readonly prototype: ModelList;\r\n    new<Model extends ModelNode>(): ModelList<Model>;\r\n    new<Model extends ModelNode>(items: Model[]): ModelList<Model>;\r\n}\r\n\r\ninterface ModelList<Model extends ModelNode = ModelNode> extends ModelNode {\r\n    readonly parentNode: ModelNode | null;\r\n    readonly length: number;\r\n    index(items: Model): number;\r\n    index(items: Model, fromIndex: number): number;\r\n    get(index: number): Model | null;\r\n    values(): IterableIterator<Model>;\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void;\r\n    insert(index: number, ...items: Model[]): void;\r\n    prepend(...items: Model[]): void;\r\n    append(...items: Model[]): void;\r\n    remove(item: Model): void;\r\n    clear(): void;\r\n}\r\n\r\nclass ModelListBase<Model extends ModelNode = ModelNode> extends ModelNodeBase implements ModelList<Model> {\r\n    #items: Model[];\r\n\r\n    constructor()\r\n    constructor(items: Model[])\r\n    constructor(items?: Model[]) {\r\n        super();\r\n        this.#items = items?.slice() ?? [];\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        super.setParent(parentNode);\r\n        this.#items.forEach((item_i) => {\r\n            item_i.setParent(parentNode);\r\n        });\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    get(index: number): Model | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    index(item: Model, fromIndex?: number): number {\r\n        return this.#items.indexOf(item, fromIndex)\r\n    }\r\n\r\n    values(): IterableIterator<Model> {\r\n        return this.#items.values();\r\n    }\r\n\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void {\r\n        const items = this.#items;\r\n        const indexedItems = items.map(\r\n            (item_i, i) => {\r\n                return {\r\n                    item: item_i,\r\n                    index: i\r\n                };\r\n            }\r\n        );\r\n        indexedItems.sort(\r\n            (indexedItem_a, indexedItem_b) => {\r\n                return compareFunction(\r\n                    indexedItem_a.item, indexedItem_b.item\r\n                )\r\n            }\r\n        );\r\n        this.#items = indexedItems.map(indexedItem_i => indexedItem_i.item);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_SORT,\r\n            sortedIndices: indexedItems.map(indexedItem_i => indexedItem_i.index)\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    prepend(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.splice(0, 0, ...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: 0,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    append(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.push(...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: length,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    insert(index: number, ...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const positiveIndex = Math.abs(index);\r\n        if (positiveIndex <= length) {\r\n            if (index >= 0) {\r\n                const {parentNode} = this;\r\n                items.forEach(item_i => {\r\n                    item_i.setParent(parentNode);\r\n                });\r\n                if (index < length) {\r\n                    _items.splice(index, 0, ...items);\r\n                }\r\n                else {\r\n                    _items.push(...items);\r\n                }\r\n            }\r\n            else if (index < 0) {\r\n                index = length - index;\r\n                const {parentNode} = this;\r\n                if (parentNode) {\r\n                    items.forEach(item_i => {\r\n                        item_i.setParent(parentNode);\r\n                    });\r\n                }\r\n                _items.splice(index, 0, ...items);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_INSERT,\r\n                insertedIndex: index,\r\n                insertedItems: items.slice()\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    remove(item: Model): void {\r\n        const _items = this.#items;\r\n        const index = _items.indexOf(item);\r\n        if (index > -1) {\r\n            const item = _items.splice(index, 1)[0];\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                item.setParent(null);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: index,\r\n                removedItems: [item]\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    clear(): void {\r\n        const items = this.#items;\r\n        const {length} = items;\r\n        if (length > 0) {\r\n            const removedItems = items.splice(0);\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                removedItems.forEach((removedItem_i) => {\r\n                    removedItem_i.setParent(null);\r\n                });\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: 0,\r\n                removedItems: removedItems\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n};\r\n\r\nvar ModelList: ModelListConstructor = ModelListBase!;\r\n\r\ninterface ModelChangeObserverConstructor {\r\n    readonly prototype: ModelChangeObserver;\r\n    new(callback: (records: ModelChangeRecord[]) => void): ModelChangeObserver;\r\n}\r\n\r\ninterface ModelChangeObserver {\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void;\r\n    unobserve(node: ModelNode): void;\r\n    disconnect(): void;\r\n}\r\n\r\ntype ModelChangeObserverOptions = {\r\n    properties?: boolean;\r\n    propertiesFilter?: string[];\r\n    childList?: boolean;\r\n    subtree?: boolean;\r\n}\r\n\r\nclass ModelChangeObserverBase implements ModelChangeObserver {\r\n    #callback: (records: ModelChangeRecord[]) => void;\r\n    #records: ModelChangeRecord[];\r\n    #disconnected: boolean;\r\n\r\n    #references: WeakMap<ModelNode, {\r\n        listener: (event: ModelEvent) => void,\r\n        options: ModelChangeObserverOptions\r\n    }>;\r\n\r\n    constructor(callback: (records: ModelChangeRecord[]) => void) {\r\n        this.#callback = callback;\r\n        this.#records = [];\r\n        this.#disconnected = false;\r\n        this.#references = new WeakMap();\r\n    }\r\n\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void {\r\n        this.#disconnected = false;\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (!reference) {\r\n            const listener = this.#handleModelEvent.bind(this);\r\n            node.addEventListener(\"modelchange\", listener);\r\n            reference = {listener, options};\r\n            references.set(node, reference);\r\n        }\r\n        else {\r\n            references.set(node, reference);\r\n        }\r\n    }\r\n\r\n    unobserve(node: ModelNode): void {\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (reference) {\r\n            const {listener} = reference;\r\n            node.removeEventListener(\"modelchange\", listener);\r\n        }\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#records.splice(0);\r\n        this.#disconnected = true;\r\n    }\r\n\r\n    #trigger(): void {\r\n        const records = this.#records.splice(0);\r\n        if (records.length > 0) {\r\n            this.#callback(records);\r\n        }\r\n    }\r\n\r\n    #handleModelEvent(event: ModelEvent): void {\r\n        if (!this.#disconnected) {\r\n            const {target, currentTarget} = event;\r\n            const reference = this.#references.get(<ModelNode>currentTarget);\r\n            if (reference) {\r\n                const {options} = reference;\r\n                const {properties, propertiesFilter, childList, subtree} = options;\r\n                if (subtree) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n                else if (target == currentTarget) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelChangeObserver: ModelChangeObserverConstructor = ModelChangeObserverBase;","export { getPropertyFromPath };\r\nexport { setPropertyFromPath };\r\nexport { snakeToCamel };\r\nexport { camelToSnake };\r\nexport { trainToCamel };\r\nexport { camelToTrain };\r\n\r\nfunction getPropertyFromPath(src: object, path: string): any {\r\n  const props = path.split(\".\");\r\n  let obj: {[key: string]: any} | undefined  = src;\r\n  props.forEach((prop) => {\r\n    if (prop.includes(\"[\")) {\r\n      const index = parseInt(prop.substring(prop.indexOf(\"[\") + 1, prop.indexOf(\"]\")));\r\n      if (Number.isNaN(index)) {\r\n        console.error(`Wrong indexed path: ${prop}`);\r\n      }\r\n      prop = prop.substring(0, prop.indexOf(\"[\"));\r\n      if (typeof obj == \"object\" && prop in obj && Array.isArray(obj[prop])) {\r\n        obj = obj[prop][index];\r\n      }\r\n    }\r\n    else if (typeof obj == \"object\" && prop in obj) {\r\n      obj = obj[prop];\r\n    }\r\n    else {\r\n      obj = undefined;\r\n    }\r\n  });\r\n  return obj;\r\n}\r\n\r\nfunction setPropertyFromPath(src: object, path: string, value: any): object {\r\n  const props = path.split(\".\");\r\n  let obj: {[key: string]: any} = src;\r\n  if (src == null) {\r\n    console.error(\"Source data can't be null\");\r\n  }\r\n  props.forEach((prop, idx) => {\r\n    if (prop.includes(\"[\")) {\r\n      const index = parseInt(prop.substring(prop.indexOf(\"[\") + 1, prop.indexOf(\"]\")));\r\n      if (Number.isNaN(index)) {\r\n        console.error(`Wrong indexed path: ${prop}`);\r\n      }\r\n      prop = prop.substring(0, prop.indexOf(\"[\"));\r\n      if (!Array.isArray(obj[prop])) {\r\n        obj[prop] = [];\r\n      }\r\n      if (idx == props.length - 1) {\r\n        obj[prop][index] = value;\r\n      }\r\n      else {\r\n        if (typeof obj[prop][index] !== \"object\") {\r\n          obj[prop][index] = {}\r\n        }\r\n        obj = obj[prop][index];\r\n      }\r\n    }\r\n    else {\r\n      if (idx == props.length - 1) {\r\n        obj[prop] = value;\r\n      }\r\n      else {\r\n        if (typeof obj[prop] !== \"object\") {\r\n          obj[prop] = {}\r\n        }\r\n        obj = obj[prop];\r\n      }\r\n    }\r\n  });\r\n  return src;\r\n}\r\n\r\nfunction snakeToCamel(str: string) {\r\n  return str.split('_').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToSnake(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '_').toLowerCase();\r\n}\r\n\r\nfunction trainToCamel(str: string) {\r\n  return str.split('-').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToTrain(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '-').toLowerCase();\r\n}","import { widgets, WidgetFactoryConstructor } from \"../views/widgets/Widget\";\r\nimport { ModelList, ModelNode, ModelChangeRecord, ModelChangeObserver, ModelChangeObserverOptions } from \"../models/Model\";\r\nimport { camelToTrain } from \"./Snippets\";\r\n\r\nexport { subtreeNodes };\r\nexport { ancestorNodes };\r\nexport { CustomElement };\r\nexport { Widget };\r\nexport { widget };\r\nexport { QueryProperty };\r\nexport { QueryAllProperty };\r\nexport { AttributeProperty };\r\nexport { reactiveElement };\r\nexport { reactiveChildElements };\r\nexport { element };\r\nexport { fragment };\r\nexport { textNode };\r\nexport { AttributeMutationMixin };\r\nexport { AttributeType };\r\nexport { areAttributesMatching };\r\nexport { AttributeMutationMixinBase };\r\nexport { trimMultilineIndent };\r\nexport { Stylesheet };\r\n\r\ninterface AttributePropertyDecorator {\r\n    (\r\n        init: {\r\n            type: typeof String;\r\n            observed?: boolean;\r\n            defaultValue?: string | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Number;\r\n            observed?: boolean;\r\n            defaultValue?: number | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Boolean;\r\n            observed?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Object;\r\n            observed?: boolean;\r\n            defaultValue?: any | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n}\r\n\r\nconst AttributeProperty: AttributePropertyDecorator = function(\r\n    init: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Object;\r\n        observed?: boolean;\r\n        defaultValue?: string | number | any | null;\r\n    }\r\n) {\r\n    return <E extends HTMLElement>(\r\n        target: E, property: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = property.toString();\r\n        const attributeName = camelToTrain(propertyName);\r\n        const defaultValue = init.defaultValue ?? null;\r\n        const observed = init.observed ?? false;\r\n        if (observed) {\r\n            const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n            if (Array.isArray(observedAttributes)) {\r\n                observedAttributes.push(attributeName);\r\n            }\r\n            else {\r\n                Object.defineProperty(\r\n                    constructor, \"observedAttributes\", {\r\n                        value: [attributeName],\r\n                        writable: false\r\n                    }\r\n                );\r\n            }\r\n        }\r\n        const {type} = init;\r\n        switch (type) {\r\n            case Boolean: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        return this.hasAttribute(attributeName);\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value) {\r\n                            this.setAttribute(attributeName, \"\");\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Object: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? JSON.parse(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, JSON.stringify(value));\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Number: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? parseFloat(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case String:\r\n            default: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? val : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n    \r\nfunction Stylesheet(text: string): CSSStyleSheet {\r\n    const stylesheet = new CSSStyleSheet();\r\n    (stylesheet as any).replaceSync(text);\r\n    return stylesheet;\r\n}\r\n\r\nfunction trimMultilineIndent(text: string): string {\r\n    const newlineIndex = text.indexOf(\"\\n\");\r\n    text = text.substring(newlineIndex + 1);\r\n    const indentMatch = text.match(/^[\\s]*/);\r\n    if (indentMatch) {\r\n        const indent = text.substring(0, indentMatch[0].length);\r\n        text = text.replaceAll(indent, \"\").trimEnd();\r\n    }\r\n    return text;\r\n}\r\n\r\ninterface CustomElementDecorator {\r\n    (init: {\r\n        name: string;\r\n        options?: ElementDefinitionOptions\r\n    }): <C extends CustomElementConstructor>(elementCtor: C) => C;\r\n}\r\n\r\nconst CustomElement: CustomElementDecorator = function(init: {\r\n    name: string;\r\n    options?: ElementDefinitionOptions\r\n}) {\r\n    return <C extends CustomElementConstructor>(\r\n        elementCtor: C\r\n    ) => {\r\n        const {name, options} = init;\r\n        if (!customElements.get(name)) {\r\n            customElements.define(\r\n                name,\r\n                elementCtor,\r\n                options\r\n            );\r\n        }\r\n        return elementCtor;\r\n    }\r\n}\r\n\r\ninterface WidgetDecorator {\r\n    (init: {\r\n        name: string;\r\n    }): <W extends WidgetFactoryConstructor>(widget: W) => W;\r\n}\r\n\r\nconst Widget: WidgetDecorator = function(init: {\r\n    name: string;\r\n}) {\r\n    return <W extends WidgetFactoryConstructor>(\r\n        widget: W\r\n    ) => {\r\n        const {name} = init;\r\n        widgets.set(\r\n            name,\r\n            new widget()\r\n        );\r\n        return widget;\r\n    }\r\n}\r\n\r\nfunction *subtreeNodes(node: Node): Generator<Node> {\r\n    yield node;\r\n    const childNodes = node.childNodes;\r\n    const childNodesCount = childNodes.length;\r\n    let childIndex = 0;\r\n    while (childIndex < childNodesCount) {\r\n        const child = childNodes.item(childIndex);\r\n        if (child !== null) {\r\n            yield * subtreeNodes(child);\r\n        }\r\n        childIndex++;\r\n    }\r\n}\r\n\r\nfunction *ancestorNodes(node: Node): Generator<Node> {\r\n    const {parentNode} = node;\r\n    if (parentNode) {\r\n        yield parentNode;\r\n        yield *ancestorNodes(parentNode);\r\n    }\r\n}\r\n\r\ninterface QueryPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryProperty: QueryPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = propertyKey.toString();\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return this.shadowRoot!.querySelector(selector);\r\n        } : function(this: HTMLElement) {\r\n            return this.querySelector(selector);\r\n        }\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\ninterface QueryAllPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryAllProperty: QueryAllPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = propertyKey.toString();\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return Array.from(this.shadowRoot!.querySelectorAll(selector));\r\n        } : function(this: HTMLElement) {\r\n            return Array.from(this.querySelectorAll(selector));\r\n        };\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\nfunction fragment(...nodes: (Node | string)[]): DocumentFragment {\r\n    const fragment = document.createDocumentFragment();\r\n    fragment.append(...nodes);\r\n    return fragment;\r\n}\r\n\r\nfunction textNode(text: string): Node {\r\n    return document.createTextNode(text);\r\n}\r\n\r\ninterface HTMLElementInit {\r\n    options?: ElementCreationOptions,\r\n    attributes?: {\r\n        [name: string]: number | string | boolean | undefined\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    children?: (Node | string)[] | NodeList | ReactiveChildElements,\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction element<E extends HTMLElementTagNameMap[K], K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): E;\r\nfunction element(\r\n    tagName: string, init?: HTMLElementInit): HTMLElement;\r\nfunction element<K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): HTMLElementTagNameMap[K] {\r\n    if (init) {\r\n        const {options, attributes, dataset, children, listeners} = init;\r\n        const element = document.createElement(tagName, options);\r\n        if (attributes) {\r\n            Object.keys(attributes).forEach((attributeName) => {\r\n                const attributeValue = attributes[attributeName];\r\n                if (attributeValue !== undefined) {\r\n                    if (typeof attributeValue == \"boolean\") {\r\n                        element.toggleAttribute(camelToTrain(attributeName), attributeValue);\r\n                    }\r\n                    else {\r\n                        element.setAttribute(camelToTrain(attributeName), attributeValue.toString());\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        if (dataset) {\r\n            const {dataset: elementDataset} = element;\r\n            Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                elementDataset[datasetEntry_i] = dataset[datasetEntry_i].toString();\r\n            });\r\n        }\r\n        if (children) {\r\n            if (typeof children == \"function\") {\r\n                element.append(...children(element));\r\n            }\r\n            else {\r\n                element.append(...Array.from(children));\r\n            }\r\n        }\r\n        if (listeners) {\r\n            Object.entries(listeners).forEach(([name_i, listener_i]) => {\r\n                if (Array.isArray(listener_i)) {\r\n                    element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                }\r\n                else {\r\n                    element.addEventListener(name_i, listener_i);\r\n                }\r\n            });\r\n        }\r\n        return element;\r\n    }\r\n    return document.createElement(tagName);\r\n}\r\n\r\ninterface WidgetInit<K extends keyof WidgetNameMap> {\r\n    properties?: Parameters<WidgetNameMap[K][\"create\"]>[0],\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    slotted?: {\r\n        [slot: string]: (Node | string)[] | NodeList | ReactiveChildElements\r\n    } | ((Node | string)[] | NodeList | ReactiveChildElements),\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: K, init?: WidgetInit<K>): ReturnType<WidgetNameMap[K][\"create\"]>;\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: K, init?: WidgetInit<K>): HTMLElement {\r\n    const widget = widgets.get(name);\r\n    if (widget) {\r\n        const element = <HTMLElement>widget.create(init?.properties);\r\n        if (init) {\r\n            const {dataset, slotted, listeners} = init;\r\n            if (dataset) {\r\n                const {dataset: elementDataset} = element;\r\n                Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                    elementDataset[datasetEntry_i] = dataset[datasetEntry_i].toString();\r\n                });\r\n            }\r\n            if (slotted) {\r\n                if (typeof slotted == \"function\" || Array.isArray(slotted) || slotted instanceof NodeList) {\r\n                    const slot = widget.slot(element, null);\r\n                    if (slot) {\r\n                        if (typeof slotted == \"function\") {\r\n                            slot.append(...slotted(element));\r\n                        }\r\n                        else {\r\n                            slot.append(...Array.from(slotted));\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    Object.entries(slotted).forEach(([slot_i, slotted]) => {\r\n                        const slot = widget.slot(element, slot_i);\r\n                        if (slot) {\r\n                            if (typeof slotted == \"function\") {\r\n                                slot.append(...slotted(element));\r\n                            }\r\n                            else {\r\n                                slot.append(...Array.from(slotted));\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            if (listeners) {\r\n                Object.entries(listeners).forEach(([name_i, listener_i]) => {\r\n                    if (Array.isArray(listener_i)) {\r\n                        element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                    }\r\n                    else {\r\n                        element.addEventListener(name_i, listener_i);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return element;\r\n    }\r\n    throw new Error(`Unknown widget ${name}.`);\r\n}\r\n\r\nconst reactiveElementsMap = new WeakMap<ModelNode, {\r\n    observerOptions: ModelChangeObserverOptions,\r\n    reactiveElementsArray: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }[]\r\n}>();\r\n\r\nconst reactiveElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    model: ModelNode,\r\n    reactiveElement: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }\r\n}) => {\r\n    const {model, reactiveElement} = heldValue;\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    if (reactiveElementsMapEntry !== undefined) {\r\n        const {reactiveElementsArray} = reactiveElementsMapEntry;\r\n        reactiveElementsArray.splice(reactiveElementsArray.indexOf(reactiveElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveElementsPropertyObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    records.forEach((record_i) => {\r\n        const {target, propertyName, oldValue, newValue} = record_i;\r\n        const {reactiveElementsArray} = reactiveElementsMap.get(target)!;\r\n        reactiveElementsArray.forEach(reactiveElement_i => {\r\n            const {elementRef, react, properties} = reactiveElement_i;\r\n            const element = elementRef.deref();\r\n            if (element) {\r\n                if (properties.includes(propertyName!)) {\r\n                    react(element, propertyName!, oldValue, newValue);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveElement<M extends ModelNode, E extends Element, K extends string>(\r\n    model: M,\r\n    element: E,\r\n    properties: K[],\r\n    react: (object: E, property: K, oldValue: any, newValue: any) => void\r\n): E;\r\nfunction reactiveElement<M extends ModelNode, E extends Element>(\r\n    model: M,\r\n    element: E,\r\n    properties: string[],\r\n    react: (element: E, property: string, oldValue: any, newValue: any) => void\r\n): E {\r\n    const elementRef = new WeakRef(element);\r\n    const reactiveElement = {elementRef, react, properties};\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    reactiveElementsFinalizationRegistry.register(element, {model, reactiveElement});\r\n    if (!reactiveElementsMapEntry) {\r\n        const observerOptions = {\r\n            properties: true,\r\n            propertiesFilter: properties\r\n        };\r\n        const reactiveElementsArray = [reactiveElement];\r\n        reactiveElementsMap.set(model, {observerOptions, reactiveElementsArray});\r\n        reactiveElementsPropertyObserver.observe(model, observerOptions);\r\n    }\r\n    else {\r\n        const {reactiveElementsArray, observerOptions} = reactiveElementsMapEntry;\r\n        const {propertiesFilter} = observerOptions;\r\n        reactiveElementsArray.push(reactiveElement);\r\n        observerOptions.propertiesFilter = propertiesFilter ?\r\n            propertiesFilter.concat(properties.filter(\r\n                property_i => !propertiesFilter.includes(property_i)\r\n            )) : Array.from(new Set(properties));\r\n    }\r\n    properties.forEach((property_i) => {\r\n        if (property_i in model) {\r\n            const value = Reflect.get(model, property_i, model);\r\n            if (value !== undefined) {\r\n                react(element, <any>property_i, <any>undefined, value);\r\n            }\r\n        }\r\n    });\r\n    return element;\r\n}\r\n\r\ninterface ReactiveChildElements {\r\n    (parent: Node & ParentNode): (Node | string)[]\r\n}\r\n\r\nconst reactiveChildElementsMap = new WeakMap<ModelList, {\r\n    reactiveChildElementsArray: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }[]\r\n}>();\r\n\r\nconst reactiveChildElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    list: ModelList,\r\n    reactiveChildElement: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }\r\n}) => {\r\n    const {list, reactiveChildElement} = heldValue;\r\n    const reactiveChildrenElementsMapEntry = reactiveChildElementsMap.get(list);\r\n    if (reactiveChildrenElementsMapEntry) {\r\n        const {reactiveChildElementsArray} = reactiveChildrenElementsMapEntry;\r\n        reactiveChildElementsArray.splice(reactiveChildElementsArray.indexOf(reactiveChildElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveChildElementsObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    let range: null | Range = null;\r\n    Array.from(records.values()).forEach((record_i) => {\r\n        const {target} = record_i;\r\n        const list = <ModelList>target;\r\n        const {length: listLength} = list;\r\n        const {reactiveChildElementsArray} = reactiveChildElementsMap.get(list)!;\r\n        reactiveChildElementsArray.forEach((reactiveChildElements_i) => {\r\n            const {parentRef, mapping, placeholder} = reactiveChildElements_i;\r\n            const parent = parentRef.deref();\r\n            if (parent) {\r\n                const {firstChild, children} = parent;\r\n                const {length: childrenCount} = children;\r\n                if (placeholder && listLength > 0 && firstChild == placeholder) {\r\n                    parent.removeChild(placeholder);\r\n                }\r\n                const {changeType, LIST_INSERT, LIST_REMOVE, LIST_SORT} = record_i;\r\n                switch (changeType) {\r\n                    case LIST_INSERT: {\r\n                        const {insertedIndex, insertedItems} = record_i;\r\n                        const insertedItemsArray = Array.from(insertedItems.values()).map(mapping);\r\n                        const {length: childrenCount} = children;\r\n                        if (insertedIndex < childrenCount) {\r\n                            children[insertedIndex].before(...insertedItemsArray);\r\n                        }\r\n                        else {\r\n                            parent.append(...insertedItemsArray);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_REMOVE: {\r\n                        const {removedIndex, removedItems} = record_i;\r\n                        const {length: removedCount} = removedItems;\r\n                        range = range ?? document.createRange();\r\n                        const removeEndIndex = removedIndex + (removedCount - 1);\r\n                        if (removeEndIndex < childrenCount) {\r\n                            range.setStartBefore(children[removedIndex]);\r\n                            range.setEndAfter(children[removeEndIndex]);\r\n                            range.deleteContents();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_SORT: {\r\n                        const {sortedIndices} = record_i;\r\n                        const childrenArray = Array.from(children);\r\n                        parent.append(\r\n                            ...sortedIndices.filter(\r\n                                index_i => index_i < childrenCount\r\n                            ).map(\r\n                                index_i => childrenArray[index_i]\r\n                            )\r\n                        );\r\n                        break;\r\n                    }\r\n                }\r\n                if (listLength == 0 && placeholder) {\r\n                    parent.append(placeholder);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveChildElements<Model extends ModelNode>(\r\n    list: ModelList<Model>,\r\n    mapping: (item: Model) => Element,\r\n    placeholder?: Element\r\n): ReactiveChildElements {\r\n    return (parent: Node & ParentNode) => {\r\n        const parentRef = new WeakRef(parent);\r\n        const reactiveChildElementsMapEntry = reactiveChildElementsMap.get(list);\r\n        const reactiveChildElement = {parentRef, mapping, placeholder};\r\n        reactiveChildElementsFinalizationRegistry.register(parent, {list, reactiveChildElement});\r\n        if (!reactiveChildElementsMapEntry) {\r\n            const reactiveChildElementsArray = [reactiveChildElement];\r\n            reactiveChildElementsMap.set(list, {reactiveChildElementsArray});\r\n            reactiveChildElementsObserver.observe(list, {\r\n                childList: true\r\n            });\r\n        }\r\n        else {\r\n            const {reactiveChildElementsArray} = reactiveChildElementsMapEntry;\r\n            reactiveChildElementsArray.push(reactiveChildElement);\r\n        }\r\n        return list.length == 0 && placeholder ?\r\n            [placeholder] : Array.from(list.values()).map(mapping);\r\n    }\r\n}\r\n\r\ninterface AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n    attach(element: Element): void;\r\n    detach(element: Element): void;\r\n}\r\n\r\ntype AttributeType = \"string\" | \"boolean\" | \"list\";\r\n\r\nfunction areAttributesMatching(\r\n    referenceAttributeType: AttributeType,\r\n    referenceAttributeName: string, referenceAttributeValue: string,\r\n    attributeName: string, attributeValue: string | null): boolean {\r\n    if (referenceAttributeName == attributeName) {\r\n        switch (referenceAttributeType) {\r\n            case \"boolean\":\r\n                return referenceAttributeValue == \"\" && attributeValue == \"\";\r\n            case \"string\":\r\n                return referenceAttributeValue !== \"\" && (referenceAttributeValue == attributeValue);\r\n            case \"list\":\r\n                return (referenceAttributeValue !== \"\" && attributeValue !== null) && new RegExp(`${referenceAttributeValue}\\s*?`, \"g\").test(attributeValue );\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nclass AttributeMutationMixinBase implements AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n\r\n    constructor(attributeName: string, attributeType: AttributeType = \"boolean\", attributeValue: string = \"\") {\r\n        this.attributeName = attributeName;\r\n        this.attributeType = attributeType;\r\n        this.attributeValue = attributeValue;\r\n    }\r\n\r\n    attach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n\r\n    detach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n}","import { ModelObject } from \"../models/Model\";\r\n\r\nexport { View };\r\n\r\ninterface View extends HTMLElement {\r\n    readonly model: ModelObject | null;\r\n    setModel(model: ModelObject): void;\r\n    renderShadow(): Node | undefined;\r\n    renderLight(): Node | undefined;\r\n    refresh(): void;\r\n}\r\n\r\ninterface ViewConstructor {\r\n    readonly prototype: View;\r\n    new(): View;\r\n}\r\n\r\nclass ViewBase extends HTMLElement implements View {\r\n    #model: ModelObject | null;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#model = null;\r\n    }\r\n\r\n    get model(): ModelObject | null {\r\n        return this.#model;\r\n    }\r\n    \r\n    setModel(model: ModelObject): void {\r\n        this.#model = model;\r\n        this.#render();            \r\n    }\r\n\r\n    renderLight(): Node | undefined {\r\n        return;\r\n    }\r\n\r\n    renderShadow(): Node | undefined {\r\n        return;\r\n    }\r\n\r\n    refresh(): void {\r\n        this.#render();\r\n    }\r\n\r\n    #render(): void {\r\n        const {shadowRoot} = this;\r\n        const shadow = this.renderShadow();\r\n        if (shadow) {\r\n            if (shadowRoot) {\r\n                shadowRoot.replaceChildren(shadow);\r\n            }\r\n        }\r\n        const light = this.renderLight();\r\n        if (light) {\r\n            this.replaceChildren(light);\r\n        }\r\n    }\r\n}\r\n\r\nvar View: ViewConstructor = ViewBase;","import { Widget, element } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuItemWidget };\r\n\r\ntype MenuItemType = \"button\" | \"radio\" | \"checkbox\" | \"menu\" | \"submenu\";\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menuitem\": MenuItemWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        type?: MenuItemType;\r\n        checked?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void;\r\n    getMenu(item: HTMLElement): HTMLElement | null;\r\n    getKeyShortcut(item: HTMLElement): string | null;\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    getType(item: HTMLElement): MenuItemType | null;\r\n    setType(item: HTMLElement, type: MenuItemType): void;\r\n    getValue(item: HTMLElement): string;\r\n    setValue(item: HTMLElement, value: string): void;\r\n    getName(item: HTMLElement): string;\r\n    setName(item: HTMLElement, value: string): void;\r\n    getChecked(item: HTMLElement): boolean;\r\n    setChecked(item: HTMLElement, value: boolean): void;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setExpanded(item: HTMLElement, value: boolean): void;\r\n    getExpanded(item: HTMLElement): boolean;\r\n    toggle(item: HTMLElement, force?: boolean): void;\r\n    expand(item: HTMLElement): void;\r\n    collapse(item: HTMLElement): void;\r\n}\r\n\r\nvar menuItemWidget = new(\r\nWidget({\r\n    name: \"menuitem\"\r\n})(\r\nclass MenuItemWidgetFactoryBase extends WidgetFactory implements MenuItemWidgetFactory {\r\n    #iconPartTemplate: HTMLElement;\r\n    #arrowPartTemplate : HTMLElement;\r\n    #keyshortcutsPartTemplate: HTMLElement;\r\n    #template: HTMLElement;\r\n    #types: MenuItemType[];\r\n    #typesFeatures: {\r\n        [key in MenuItemType]: {\r\n            role: string,\r\n            hasIcon: boolean,\r\n            hasArrow: boolean\r\n        }\r\n    };\r\n\r\n    constructor() {\r\n        super();\r\n        this.#iconPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"icon\"\r\n            }\r\n        });\r\n        this.#arrowPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"arrow\"\r\n            }\r\n        });\r\n        this.#keyshortcutsPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"keyshortcuts\"\r\n            }\r\n        });\r\n        this.#template = element(\"button\", {\r\n            attributes: {\r\n                class: \"menuitem\",\r\n                role: \"menuitem\",\r\n                type: \"button\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                this.#iconPartTemplate.cloneNode(true),\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n        this.#types = [\"checkbox\", \"radio\", \"menu\", \"submenu\", \"button\"];\r\n        this.#typesFeatures = {\r\n            button: {\r\n                role: \"menuitem\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            checkbox: {\r\n                role: \"menuitemcheckbox\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            radio: {\r\n                role: \"menuitemradio\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            menu: {\r\n                role: \"menuitem\",\r\n                hasIcon: false,\r\n                hasArrow: false\r\n            },\r\n            submenu: {\r\n                role: \"menuitem\",\r\n                hasIcon: true,\r\n                hasArrow: true\r\n            }\r\n        }\r\n    }\r\n\r\n    create(init?: {\r\n        type: MenuItemType;\r\n        checked?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (init !== undefined) {\r\n            const {keyshortcut, checked, type, label, name, value, disabled} = init;\r\n            if (keyshortcut !== undefined) {\r\n                this.setKeyShortcut(item, keyshortcut);\r\n            }\r\n            if (checked !== undefined) {\r\n                this.setChecked(item, checked);\r\n            }\r\n            if (type !== undefined) {\r\n                if (type == \"menu\" || type == \"submenu\") {\r\n                    this.setExpanded(item, false);\r\n                }\r\n                this.setType(item, type);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(item, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(item, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(item: HTMLElement): HTMLElement | null {\r\n        return item;\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void {\r\n        const hasChildMenu = Array.from(slot.childNodes).some(\r\n            childNode_i => childNode_i instanceof HTMLElement && childNode_i.classList.contains(\"menu\")\r\n        );\r\n        item.setAttribute(\"aria-haspopup\", hasChildMenu.toString());\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n\r\n    getMenu(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .menu\");\r\n    }\r\n\r\n    getKeyShortcut(item: HTMLElement): string | null {\r\n        return item.getAttribute(\"aria-keyshortcuts\");\r\n    }\r\n\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void {\r\n        let keyshortcutsPart = item.querySelector(\":scope > .keyshortcuts\");\r\n        if (value !== null) {\r\n            item.setAttribute(\"aria-keyshortcuts\", value);\r\n            if (!keyshortcutsPart) {\r\n                const labelPart = this.#label(item);\r\n                const keyshortcutsPartTemplate = this.#keyshortcutsPartTemplate;\r\n                keyshortcutsPart = <HTMLElement>keyshortcutsPartTemplate.cloneNode(true);\r\n                labelPart.after(keyshortcutsPart);\r\n            }\r\n            keyshortcutsPart.textContent = value;\r\n        }\r\n        else {\r\n            item.removeAttribute(\"aria-keyshortcuts\");\r\n            if (keyshortcutsPart) {\r\n                keyshortcutsPart.remove();\r\n            }\r\n        }\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n    \r\n    getType(item: HTMLElement): MenuItemType | null {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`menuitem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setType(item: HTMLElement, type: MenuItemType): void {\r\n        const typesFeatures = this.#typesFeatures;\r\n        const iconPartTemplate = this.#iconPartTemplate;\r\n        const arrowPartTemplate = this.#arrowPartTemplate;\r\n        const {role, hasIcon, hasArrow} = typesFeatures[type];\r\n        const oldType = this.getType(item);\r\n        const {classList} = item;\r\n        if (oldType) {\r\n            classList.remove(`menuitem-${oldType}`);\r\n        }\r\n        classList.add(`menuitem-${type}`);\r\n        item.setAttribute(\"role\", role);\r\n        const labelPart = this.#label(item);\r\n        const iconPart = item.querySelector(\":scope > .icon\");\r\n        const arrowPart = item.querySelector(\":scope > .arrow\");\r\n        if (hasIcon) {\r\n            if (!iconPart && labelPart) {\r\n                labelPart.before(iconPartTemplate.cloneNode(true));\r\n            }\r\n        }\r\n        else {\r\n            if (iconPart) {\r\n                iconPart.remove();\r\n            }\r\n        }\r\n        if (hasArrow) {\r\n            if (!arrowPart && labelPart) {\r\n                labelPart.after(arrowPartTemplate.cloneNode(true));\r\n            }\r\n        }\r\n        else {\r\n            if (arrowPart) {\r\n                arrowPart.remove();\r\n            }\r\n        }\r\n    }\r\n\r\n    getValue(item: HTMLElement): string {\r\n        return item.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"value\", value);\r\n    }\r\n    \r\n    getName(item: HTMLElement): string {\r\n        return item.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getChecked(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-checked\") ?? false.toString());\r\n    }\r\n\r\n    setChecked(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-checked\", value.toString());\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-expanded\", value.toString());\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-expanded\") ?? false.toString());\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        const expand = force ?? !this.getExpanded(item);\r\n        this.setExpanded(item, expand);\r\n        if (expand) {\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    expand(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (!expanded) {\r\n            this.setExpanded(item, true);\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    collapse(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (expanded) {\r\n            this.setExpanded(item, false);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.setChecked(targetItem, !this.getChecked(targetItem));\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.setChecked(targetItem, true);\r\n                    break;\r\n                }\r\n                case \"menu\":\r\n                case \"submenu\": {\r\n                    this.toggle(targetItem);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(item: HTMLElement): void {\r\n        const menu = this.getMenu(item);\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = item.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const type = this.getType(item);\r\n            if (type == \"menu\") {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const closestMenu = item.closest(\".menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    const overflowX = itemRight + menuWidth - clientWidth;\r\n                    const overflowY = itemTop + menuHeight - clientHeight;\r\n                    menuStyle.setProperty(\"left\", `${\r\n                        overflowX > 0 ?\r\n                        itemLeft - menuWidth - closestMenuLeft :\r\n                        itemRight - closestMenuLeft\r\n                    }px`);\r\n                    const menuComputedStyle = window.getComputedStyle(menu);\r\n                    const {paddingTop, paddingBottom} = menuComputedStyle;\r\n                    const menuPaddingTop = parseFloat(paddingTop);\r\n                    const menuPaddingBottom = parseFloat(paddingBottom);\r\n                    menuStyle.setProperty(\"top\", `${\r\n                        overflowY > 0 ?\r\n                        itemBottom - menuHeight - closestMenuTop + menuPaddingBottom :\r\n                        itemTop - closestMenuTop - menuPaddingTop\r\n                    }px`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}));","import { Widget, element } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\nimport { menuItemWidget } from \"./MenuItemWidget\";\r\n\r\nexport { menuWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menu\": MenuWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        contextual?: boolean;\r\n    }): HTMLElement;\r\n    positionContextual(menu: HTMLElement, x: number, y: number): void;\r\n    getContextual(menu: HTMLElement): boolean;\r\n    setContextual(menu: HTMLElement, value: boolean): void;\r\n    items(menu: HTMLElement): HTMLElement[];\r\n}\r\n\r\nvar mouseOverExpandDelay = 0_200;\r\nvar mouseOutCollapseDelay = 0_400;\r\n\r\nvar menuWidget = new (\r\nWidget({\r\n    name: \"menu\"\r\n})(class MenuWidgetFactoryBase extends WidgetFactory implements MenuWidgetFactory {\r\n\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #toggleTimeouts: WeakMap<HTMLElement, {clear(): void;}>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menu\",\r\n                role: \"menu\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#toggleTimeouts = new WeakMap();\r\n    }\r\n\r\n    create(init?: {\r\n        contextual?: boolean;\r\n    }): HTMLElement {\r\n        const menu = <HTMLElement>this.#template.cloneNode(true);\r\n        menu.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        menu.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        menu.addEventListener(\"mouseout\", this.#handleMouseOutEvent.bind(this));\r\n        menu.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        menu.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        if (init !== undefined) {\r\n            const {contextual} = init;\r\n            if (contextual !== undefined) {\r\n                this.setContextual(menu, contextual);\r\n            }\r\n        }\r\n        return menu;\r\n    }\r\n\r\n    slot(menu: HTMLElement): HTMLElement | null {\r\n        return menu;\r\n    }\r\n\r\n    positionContextual(menu: HTMLElement, x: number, y: number): void {\r\n        const {style} = menu;\r\n        const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        const left = x + scrollX;\r\n        const top = y + scrollY;\r\n        const {clientWidth, clientHeight} = document.body;\r\n        const overflowX = left + menuWidth - clientWidth;\r\n        const overflowY = top + menuHeight - clientHeight;\r\n        style.setProperty(\"left\", `${overflowX > 0 ? left - menuWidth : left}px`);\r\n        style.setProperty(\"top\", `${overflowY > 0 ? top - menuHeight : top}px`);\r\n    }\r\n\r\n    getContextual(menu: HTMLElement): boolean {\r\n        const {classList} = menu;\r\n        return classList.contains(\"menu-contextual\");\r\n    }\r\n\r\n    setContextual(menu: HTMLElement, value: boolean): void {\r\n        const {classList} = menu;\r\n        if (value) {\r\n            classList.add(\"menu-contextual\");\r\n        }\r\n        else {\r\n            classList.remove(\"menu-contextual\");\r\n        }\r\n    }\r\n\r\n    items(menu: HTMLElement): HTMLElement[] {\r\n        return Array.from(menu.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        ));\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"menuitem\") && !menuItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"menuitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #collapseSubmenus(menu: HTMLElement): void {\r\n        menu.querySelectorAll<HTMLElement>(\":is(:scope, :scope > .menuitemgroup) > .menuitem[aria-expanded]\")\r\n            .forEach(menuitem_i => menuItemWidget.collapse(menuitem_i));\r\n    }\r\n\r\n    #isClosestMenu(menu: HTMLElement, target: HTMLElement): boolean {\r\n        return target.closest(\".menu\") == menu;\r\n    }\r\n\r\n    #nearestItem(menu: HTMLElement, target: HTMLElement): HTMLElement | null {\r\n        return Array.from(menu.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #firstItem(menu: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menu;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(menu: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menu;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n\r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = menuItemWidget.getMenu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #getActiveItem(menu: HTMLElement): HTMLElement | null {\r\n        return menu.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem:focus-within\"\r\n        );\r\n    }\r\n\r\n    async #setItemTimeout(item: HTMLElement, delay?: number): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => {\r\n                resolve(undefined);\r\n            }, delay ?? 0);\r\n            this.#toggleTimeouts.set(item, {\r\n                clear: () => {\r\n                    clearTimeout(timeout);\r\n                    reject();\r\n                }\r\n            });\r\n        }).then(() => {\r\n            this.#toggleTimeouts.delete(item);\r\n        });\r\n    }\r\n\r\n    #clearItemTimeout(item: HTMLElement): void {\r\n        const timeout = this.#toggleTimeouts.get(item);\r\n        if (typeof timeout !== \"undefined\") {\r\n            this.#toggleTimeouts.delete(item);\r\n            timeout.clear();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem) {\r\n            const contextual = this.getContextual(targetMenu);\r\n            if (contextual) {\r\n                try {\r\n                    targetMenu.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const isClosestMenu = this.#isClosestMenu(targetMenu, targetItem);\r\n                if (isClosestMenu) {\r\n                    const type = menuItemWidget.getType(targetItem);\r\n                    const name = menuItemWidget.getName(targetItem);\r\n                    const value = menuItemWidget.getValue(targetItem);\r\n                    if (type == \"radio\") {\r\n                        targetMenu.querySelectorAll<HTMLElement>(\r\n                            `:is(:scope, :scope > .menuitemgroup) > .menuitem-radio[name=${name}]`\r\n                        )\r\n                        .forEach((radio_i) => {\r\n                            menuItemWidget.setChecked(radio_i, menuItemWidget.getValue(radio_i) == value);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetMenu.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const contextual = this.getContextual(targetMenu);\r\n            if (contextual) {\r\n                try {\r\n                    targetMenu.remove();\r\n                } catch (error) {\r\n                    undefined;\r\n                }\r\n            }\r\n            else {\r\n                const nearestItem = this.#nearestItem(targetMenu, <HTMLElement>target);\r\n                if (nearestItem) {\r\n                    menuItemWidget.collapse(nearestItem);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetMenu);\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem(targetMenu) :\r\n                    this.#firstItem(targetMenu);\r\n                previousItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem(targetMenu) :\r\n                    this.#firstItem(targetMenu);\r\n                nextItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetMenu);\r\n                firstItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetMenu);\r\n                lastItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const type = menuItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            menuItemWidget.expand(activeItem);\r\n                            const firstChildItem = this.#firstChildItem(activeItem);\r\n                            firstChildItem?.focus({preventScroll: true});\r\n                            event.preventDefault();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    const isTargetClosestMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                    ) == targetMenu;\r\n                    if (!isTargetClosestMenu) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const isTargetClosestMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                    ) == targetMenu;\r\n                    if (!isTargetClosestMenu) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const type = menuItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            const expanded = menuItemWidget.getExpanded(activeItem);\r\n                            if (!expanded) {\r\n                                menuItemWidget.expand(activeItem);\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                                event.stopPropagation();\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOutEvent(event: MouseEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const nearestItem = this.#nearestItem(targetMenu, target);\r\n            if (nearestItem !== null) {\r\n                if (menuItemWidget.getType(nearestItem) == \"submenu\" &&\r\n                    !menuItemWidget.getExpanded(nearestItem)) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                ) == targetMenu;\r\n                if (isTargetClosestMenu) {\r\n                    const activeItem = this.#getActiveItem(targetMenu);\r\n                    if (activeItem !== null &&\r\n                        menuItemWidget.getType(activeItem) == \"submenu\" &&\r\n                        menuItemWidget.getExpanded(activeItem)) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, mouseOutCollapseDelay)\r\n                            .then(() => {\r\n                                menuItemWidget.collapse(activeItem);\r\n                            })\r\n                            .catch(() => undefined);\r\n                    }\r\n                    const {clientX, clientY} = event;\r\n                    const {left, right, top, bottom} = targetMenu.getBoundingClientRect();\r\n                    const intersectsWithMouse = !(\r\n                        left > clientX || right < clientX || top > clientY || bottom < clientY\r\n                    );\r\n                    const containsRelatedTarget = targetMenu.contains(<Node>relatedTarget);\r\n                    if (intersectsWithMouse && containsRelatedTarget) {\r\n                        if (relatedTarget instanceof HTMLElement && relatedTarget.classList.contains(\"menu\") && relatedTarget !== targetMenu) {\r\n                            relatedTarget.focus({preventScroll: true});\r\n                        }\r\n                        else {\r\n                            targetMenu.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    if (!intersectsWithMouse) {\r\n                        targetMenu.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const nearestItem = this.#nearestItem(targetMenu, target); \r\n            if (nearestItem !== null) {\r\n                if (menuItemWidget.getType(nearestItem) == \"submenu\" &&\r\n                    menuItemWidget.getExpanded(nearestItem)) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                ) == targetMenu;\r\n                if (isTargetClosestMenu) {\r\n                    const activeItem = this.#getActiveItem(targetMenu);\r\n                    if (activeItem !== null) {\r\n                        if (menuItemWidget.getType(activeItem) == \"submenu\" &&\r\n                            menuItemWidget.getExpanded(activeItem) && \r\n                            !activeItem.contains(<HTMLElement>target)) {\r\n                            this.#clearItemTimeout(activeItem);\r\n                            this.#setItemTimeout(activeItem, mouseOutCollapseDelay)\r\n                                .then(() => {\r\n                                    menuItemWidget.collapse(activeItem);\r\n                                })\r\n                                .catch(() => undefined);\r\n                        }\r\n                    }\r\n                    nearestItem.focus({preventScroll: true});\r\n                    if (menuItemWidget.getType(nearestItem) == \"submenu\") {\r\n                        if (!menuItemWidget.getExpanded(nearestItem)) {\r\n                            this.#clearItemTimeout(nearestItem);\r\n                            this.#setItemTimeout(nearestItem, mouseOverExpandDelay)\r\n                                .then(() => {\r\n                                    const activeItem = this.#getActiveItem(targetMenu);\r\n                                    this.#collapseSubmenus(targetMenu);\r\n                                    if (activeItem) {\r\n                                        this.#clearItemTimeout(activeItem);\r\n                                        menuItemWidget.expand(activeItem);\r\n                                        menuItemWidget.getMenu(activeItem)?.focus({preventScroll: true});\r\n                                    }\r\n                                })\r\n                                .catch(() => undefined);\r\n                        }\r\n                        else {\r\n                            menuItemWidget.getMenu(nearestItem)?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}));","import { element, Widget } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\n\r\nexport { toolbarItemWidget };\r\n\r\ntype ToolBarItemType = \"button\" | \"checkbox\" | \"radio\" | \"menubutton\";\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbaritem\": ToolBarItemWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ToolBarItemWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        type: ToolBarItemType;\r\n        pressed?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    menu(item: HTMLElement): HTMLElement | null;\r\n    getName(item: HTMLElement): string;\r\n    setName(item: HTMLElement, value: string): void;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setPressed(item: HTMLElement, value: boolean): void;\r\n    getPressed(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    getValue(item: HTMLElement): string;\r\n    setValue(item: HTMLElement, value: string): void;\r\n    getType(item: HTMLElement): ToolBarItemType | null;\r\n    setType(item: HTMLElement, value: ToolBarItemType): void;\r\n}\r\n\r\nvar toolbarItemWidget = new(\r\nWidget({\r\n    name: \"toolbaritem\"\r\n})(\r\nclass ToolBarItemWidgetFactoryBase extends WidgetFactory implements ToolBarItemWidgetFactory {\r\n    #template: HTMLElement;\r\n    #types: ToolBarItemType[];\r\n\r\n    constructor() {\r\n        super();\r\n        this.#types = [\"button\", \"checkbox\", \"radio\", \"menubutton\"];\r\n        this.#template = element(\"button\", {\r\n            attributes: {\r\n                class: \"toolbaritem\",\r\n                role: \"button\",\r\n                type: \"button\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        type?: ToolBarItemType;\r\n        pressed?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }) {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (init !== void 0) {\r\n            const {keyshortcut, pressed, type, label, name, value, disabled} = init;\r\n            if (keyshortcut !== undefined) {\r\n                this.setKeyShortcut(item, keyshortcut);\r\n            }\r\n            if (pressed !== undefined) {\r\n                this.setPressed(item, pressed);\r\n            }\r\n            if (type !== undefined) {\r\n                this.setType(item, type);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(item, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(item, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(item: HTMLElement): HTMLElement | null {\r\n        return item;\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void {\r\n        const hasChildMenu = Array.from(slot.childNodes).some(\r\n            childNode_i => childNode_i instanceof HTMLElement && childNode_i.classList.contains(\"menu\")\r\n        );\r\n        item.setAttribute(\"aria-haspopup\", hasChildMenu.toString());\r\n    }\r\n\r\n    menu(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .menu\");\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-expanded\", value);\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-expanded\");\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    getKeyShortcut(item: HTMLElement): string | null {\r\n        return item.getAttribute(\"aria-keyshortcuts\");\r\n    }\r\n\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void {\r\n        if (value !== null) {\r\n            item.setAttribute(\"aria-keyshortcuts\", value);\r\n        }\r\n        else {\r\n            item.removeAttribute(\"aria-keyshortcuts\");\r\n        }\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        const expand = force ?? !this.getExpanded(item);\r\n        this.setExpanded(item, expand);\r\n        if (expand) {\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    expand(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (!expanded) {\r\n            this.setExpanded(item, true);\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    collapse(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (expanded) {\r\n            this.setExpanded(item, false);\r\n        }\r\n    }\r\n\r\n    getType(item: HTMLElement): ToolBarItemType | null {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`toolbaritem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setType(item: HTMLElement, type: ToolBarItemType): void {\r\n        const oldType = this.getType(item);\r\n        if (type !== oldType) {\r\n            const {classList} = item;\r\n            if (oldType) {\r\n                classList.remove(`toolbaritem-${oldType}`);\r\n            }\r\n            classList.add(`toolbaritem-${type}`);\r\n        }\r\n    }\r\n\r\n    getValue(item: HTMLElement): string {\r\n        return item.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"value\", value);\r\n    }\r\n\r\n    getTitle(item: HTMLElement): string {\r\n        return item.getAttribute(\"title\") ?? \"\";\r\n    }\r\n\r\n    setTitle(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"title\", value);\r\n    }\r\n\r\n    getName(item: HTMLElement): string {\r\n        return item.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getPressed(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-pressed\") ?? false.toString());\r\n    }\r\n\r\n    setPressed(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-pressed\", value.toString());\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetItem = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetItem.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse(targetItem);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.setPressed(targetItem, !this.getPressed(targetItem));\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.setPressed(targetItem, true);\r\n                    break;\r\n                }\r\n                case \"menubutton\": {\r\n                    const menu = this.menu(targetItem);\r\n                    if (menu && !menu.contains(<Node>target)) {\r\n                        this.toggle(targetItem);\r\n                        const expanded = this.getExpanded(targetItem);\r\n                        if (expanded) {\r\n                            menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(item: HTMLElement): void {\r\n        const type = this.getType(item);\r\n        if (type == \"menubutton\") {\r\n            const menu = this.menu(item);\r\n            if (menu !== null) {\r\n                const {style: menuStyle} = menu;\r\n                const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = item.getBoundingClientRect();\r\n                const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n                const {scrollY, scrollX} = window;\r\n                const {clientWidth, clientHeight} = document.body;\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n        }\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n}));\r\n","import { element, Widget } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\nimport { toolbarItemWidget } from \"./ToolBarItemWidget\";\r\n\r\nexport { toolbarWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbar\": ToolBarWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ToolBarWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        tabIndex?: number;\r\n    }): HTMLElement;\r\n    setTabIndex(toolbar: HTMLElement, value: number): void;\r\n    getTabIndex(toolbar: HTMLElement): number;\r\n    setOrientation(toolbar: HTMLElement, value: ToolBarOrientation): void;\r\n    getOrientation(toolbar: HTMLElement): ToolBarOrientation;\r\n}\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\nvar toolbarWidget = new (\r\nWidget({\r\n    name: \"toolbar\"\r\n})(class ToolBarWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"toolbar\",\r\n                role: \"toolbar\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        )\r\n    }\r\n\r\n    create(init?: {\r\n        tabIndex?: number;\r\n    }) {\r\n        const toolbar = <HTMLElement>this.#template.cloneNode(true);\r\n        toolbar.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        toolbar.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        toolbar.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        toolbar.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        toolbar.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (init !== undefined) {\r\n            const {tabIndex} = init;\r\n            if (tabIndex !== undefined) {\r\n                this.setTabIndex(toolbar, tabIndex);\r\n            }\r\n        }\r\n        return toolbar;\r\n    }\r\n\r\n    slot(toolbar: HTMLElement) {\r\n        return toolbar;\r\n    }\r\n\r\n    #getActiveItem(toolbar: HTMLElement): HTMLElement | null {\r\n        return toolbar.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .toolbaritemgroup) > .toolbaritem.active\"\r\n        );\r\n    }\r\n\r\n    items(toolbar: HTMLElement): HTMLElement[] {\r\n        return Array.from(toolbar.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .toolbaritemgroup) > .toolbaritem\"\r\n        ));\r\n    }\r\n\r\n    setTabIndex(toolbar: HTMLElement, value: number): void {\r\n        toolbar.tabIndex = value;\r\n    }\r\n\r\n    getTabIndex(toolbar: HTMLElement): number {\r\n        return toolbar.tabIndex;\r\n    }\r\n\r\n    setOrientation(toolbar: HTMLElement, value: ToolBarOrientation): void {\r\n        toolbar.setAttribute(\"aria-orientation\", value);\r\n    }\r\n\r\n    getOrientation(toolbar: HTMLElement): ToolBarOrientation {\r\n        return <ToolBarOrientation>toolbar.getAttribute(\"aria-orientation\") ?? \"horizontal\";\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node) {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"toolbaritem\") && !toolbarItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"toolbaritemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(toolbar: Element): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = toolbar;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(toolbar: Element): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = toolbar;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLElement | null>walker.previousSibling();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = toolbarItemWidget.menu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #setActiveItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(tree);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            toolbarItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            toolbarItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: Event): void {\r\n        const {currentTarget, target} = event;\r\n        const toolbar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem) {\r\n            const type = toolbarItemWidget.getType(targetItem);\r\n            const name = toolbarItemWidget.getName(targetItem);\r\n            const value = toolbarItemWidget.getType(targetItem);\r\n            if (type == \"radio\") {\r\n                toolbar.querySelectorAll<HTMLElement>(\r\n                    `:is(:scope, :scope > .toolbaritemgroup) > .toolbaritem[type=radio][name=${name}]`\r\n                ).forEach((radio_i) => {\r\n                    toolbarItemWidget.setPressed(radio_i, toolbarItemWidget.getValue(radio_i) == value);\r\n                });\r\n            }\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const focusWithin = targetToolbar.contains(<Node>relatedTarget);\r\n        if (!focusWithin) {\r\n            const activeItem = this.#getActiveItem(targetToolbar);\r\n            if (activeItem) {\r\n                activeItem.focus();\r\n            }\r\n            else {\r\n                const firstItem = this.#firstItem(targetToolbar);\r\n                firstItem?.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetToolbar, targetItem);\r\n            targetToolbar.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetToolbar.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.#setActiveItem(targetToolbar, null);\r\n            targetToolbar.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetToolbar);\r\n        switch (key) {\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const type = toolbarItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"menubutton\": {\r\n                            toolbarItemWidget.expand(activeItem);\r\n                            const firstChildItem = this.#firstChildItem(activeItem);\r\n                            firstChildItem?.focus({preventScroll: true});\r\n                            event.preventDefault();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetToolbar);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetToolbar);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetToolbar);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetToolbar);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    activeItem.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    targetToolbar.focus({preventScroll: true});\r\n                }\r\n                //this.#setActiveItem(targetToolbar, null);\r\n                //targetToolbar.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}));","import { element, Widget } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\n\r\nexport { treeItemWidget };\r\n\r\ntype TreeItemType = \"parent\" | \"leaf\";\r\n\r\ninterface TreeItemWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        type: TreeItemType;\r\n        label?: string;\r\n        disabled?: boolean;\r\n        draggable?: boolean;\r\n    }): HTMLElement;\r\n    group(item: HTMLElement): HTMLElement | null;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setExpanded(item: HTMLElement, value: boolean): void;\r\n    getExpanded(item: HTMLElement): boolean;\r\n    setDraggable(row: HTMLElement, value: boolean): void;\r\n    getDraggable(item: HTMLElement): boolean;\r\n    getType(item: HTMLElement): TreeItemType | null;\r\n    setType(item: HTMLElement, value: TreeItemType): void;\r\n    toggle(item: HTMLElement, force?: boolean): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"treeitem\": TreeItemWidgetFactory,\r\n    }\r\n}\r\n\r\nvar treeItemWidget = new (\r\nWidget({\r\n    name: \"treeitem\"\r\n})(class TreeItemWidgetFactoryBase extends WidgetFactory implements TreeItemWidgetFactory {\r\n    #template: HTMLElement;\r\n    #types: TreeItemType[];\r\n\r\n    constructor() {\r\n        super();\r\n        this.#types = [\"parent\", \"leaf\"];\r\n        this.#template = element(\"li\", {\r\n            attributes: {\r\n                class: \"treeitem\",\r\n                role: \"treeitem\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"content\"\r\n                    },\r\n                    children: [\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"arrow\"\r\n                            }\r\n                        }),\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"label\"\r\n                            }\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    group(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .treeitemgroup\");\r\n    }\r\n\r\n    create(init?: {\r\n        type?: TreeItemType;\r\n        label?: string;\r\n        disabled?: boolean;\r\n        draggable?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (init !== undefined) {\r\n            const {label, disabled, draggable} = init;\r\n            let {type} = init;\r\n            type = type ?? \"leaf\";\r\n            this.setType(item, type);\r\n            if (type === \"parent\") {\r\n                this.setExpanded(item, false);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n            if (draggable !== undefined) {\r\n                this.setDraggable(item, draggable);\r\n            }\r\n            this.setSelected(item, false);\r\n        }\r\n        return item;\r\n    }\r\n\r\n    get observedSlots() {\r\n        return [\"content\", \"group\"];\r\n    }\r\n\r\n    slot(item: HTMLElement, name: string | null) {\r\n        switch (name) {\r\n            case \"content\":\r\n                return this.#content(item);\r\n            case \"group\":\r\n                return item;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #content(item: HTMLElement): HTMLElement {\r\n        const content = item.querySelector<HTMLElement>(\":scope > .content\")!;\r\n        if (!content) throw new Error(\"Missing content.\");\r\n        return content;\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        const label = item.querySelector<HTMLElement>(\":scope > .content > .label\");\r\n        if (!label) throw new Error(\"Missing label.\");\r\n        return label;\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? Number(posInSet) : -1;\r\n    }\r\n\r\n    getType(item: HTMLElement): TreeItemType {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`treeitem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        throw new Error(\"Missing type.\");\r\n    }\r\n\r\n    setType(item: HTMLElement, type: TreeItemType): void {\r\n        const {classList} = item;\r\n        try {\r\n            const oldType = this.getType(item);\r\n            classList.remove(`treeitem-${oldType}`);\r\n        }\r\n        catch (e) {};\r\n        classList.add(`treeitem-${type}`);\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-expanded\", String(value));\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-expanded\") ?? String(false));\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            if (!classList.contains(\"active\")) {\r\n                classList.add(\"active\");\r\n            }\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDraggable(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"draggable\", String(value));\r\n    }\r\n\r\n    getDraggable(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"draggable\") ?? String(false));\r\n    }\r\n\r\n    setSelected(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-selected\", String(value));\r\n        item.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    setLevel(item: HTMLElement, value: number): void {\r\n        item.style.setProperty(\"--level\", String(value));\r\n    }\r\n\r\n    getLevel(item: HTMLElement): number {\r\n        return parseInt(item.style.getPropertyValue(\"--level\"));\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        this.setExpanded(item, force ?? !this.getExpanded(item));\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget, shiftKey, ctrlKey} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            if (type == \"parent\" && !(shiftKey || ctrlKey)) {\r\n                this.toggle(targetItem);\r\n            }\r\n        }\r\n    }\r\n}));","import { element, Widget } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\nimport { treeItemWidget } from \"./TreeItemWidget\";\r\n\r\nexport { treeWidget };\r\n\r\ninterface TreeWidgetFactory extends WidgetFactory {\r\n    create(init: {\r\n        multisectable?: boolean;\r\n        tabIndex?: number;\r\n    }): HTMLElement;\r\n    setTabIndex(tree: HTMLElement, value: number): void;\r\n    getTabIndex(tree: HTMLElement): number;\r\n    items(tree: HTMLElement): HTMLElement[];\r\n    selectedItems(tree: HTMLElement): HTMLElement[];\r\n    beginSelection(tree: HTMLElement): void;\r\n    endSelection(tree: HTMLElement): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"tree\": TreeWidgetFactory,\r\n    }\r\n}\r\n\r\nvar treeWidget = new (\r\nWidget({\r\n    name: \"tree\"\r\n})(class TreeWidgetFactoryBase extends WidgetFactory implements TreeWidgetFactory {\r\n\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"tree\",\r\n                role: \"tree\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(init?: {\r\n        multisectable?: boolean;\r\n        tabIndex?: number;\r\n    }): HTMLElement {\r\n        const tree = <HTMLElement>this.#template.cloneNode(true);\r\n        tree.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        tree.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        tree.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        tree.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        tree.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        tree.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        tree.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        tree.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        tree.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        tree.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        tree.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        this.#onSelection.set(tree, false);\r\n        this.#hasSelectionChanged.set(tree, false);\r\n        if (init !== undefined) {\r\n            const {multisectable, tabIndex} = init;\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(tree, multisectable);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                this.setTabIndex(tree, tabIndex);\r\n            }\r\n        }\r\n        return tree;\r\n    }\r\n\r\n    slot(tree: HTMLElement) {\r\n        return tree;\r\n    }\r\n\r\n    slottedCallback(tree: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"treeitem\")) {\r\n                treeItemWidget.setPosInSet(child_i, i);\r\n                treeItemWidget.setLevel(child_i, 0);\r\n            }\r\n        });\r\n    }\r\n\r\n    items(tree: HTMLElement): HTMLElement[] {\r\n        return Array.from(tree.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .treeitemgroup) > .treeitem\"\r\n        ));\r\n    }\r\n\r\n    selectedItems(tree: HTMLElement): HTMLElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        let item = this.#firstItem(tree);\r\n        while (item !== null) {\r\n            const selected = treeItemWidget.getSelected(item);\r\n            if (selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(tree: HTMLElement): void {\r\n        this.#onSelection.set(tree, true);\r\n    }\r\n\r\n    endSelection(tree: HTMLElement): void {\r\n        this.#onSelection.set(tree, false);\r\n        if (this.#hasSelectionChanged.get(tree)) {\r\n            tree.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(tree, false);\r\n        }\r\n    }\r\n\r\n    setMultiSelectable(tree: HTMLElement, value: boolean): void {\r\n        tree.setAttribute(\"aria-multiselectable\", value.toString());\r\n    }\r\n\r\n    getMultiSelectable(tree: HTMLElement): boolean {\r\n        return JSON.parse(tree.getAttribute(\"aria-multiselectable\") ?? false.toString());\r\n    }\r\n\r\n    setTabIndex(tree: HTMLElement, value: number): void {\r\n        tree.tabIndex = value;\r\n    }\r\n\r\n    getTabIndex(tree: HTMLElement): number {\r\n        return tree.tabIndex;\r\n    }\r\n\r\n    #getActiveItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".treeitem.active\");\r\n    }\r\n\r\n    #getDropTargetItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".treeitem.droptarget\");\r\n    }\r\n\r\n    #setDropTargetItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const {classList} = tree;\r\n        const dropTargetItem = this.#getDropTargetItem(tree);\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            treeItemWidget.setDropTarget(dropTargetItem, false);\r\n        }\r\n        if (item !== null) {\r\n            treeItemWidget.setDropTarget(item, true);\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"treeitem\") && !treeItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"treeitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextItem = this.#nextItem(from);\r\n            while (nextItem && nextItem !== to) {\r\n                range.push(nextItem);\r\n                nextItem = this.#nextItem(nextItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousItem = this.#previousItem(from);\r\n            while (previousItem && previousItem !== to) {\r\n                range.push(previousItem);\r\n                previousItem = this.#previousItem(previousItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        selectedItems.forEach((item_i) => {\r\n            if (!items.includes(item_i)) {\r\n                treeItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            const selected = treeItemWidget.getSelected(item_i);\r\n            if (tree.contains(item_i) && !selected) {\r\n                treeItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #addToSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        this.beginSelection(tree);\r\n        items.forEach((item_i) => {\r\n            if (!treeItemWidget.getSelected(item_i)) {\r\n                treeItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #removeFromSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                treeItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #clearSelection(tree: HTMLElement): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        selectedItems.forEach((item_i) => {\r\n            treeItemWidget.setSelected(item_i, false);\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #setActiveItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(tree);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            treeItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            treeItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #firstItem(tree: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(tree: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousSibling = <HTMLElement | null>walker.previousSibling();\r\n        return previousSibling ?\r\n            this.#deepestItem(previousSibling) :\r\n            <HTMLElement | null>walker.parentNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const type = treeItemWidget.getType(item);\r\n        const expanded = treeItemWidget.getExpanded(item);\r\n        return <HTMLElement | null>(\r\n            type === \"leaf\" ?\r\n                walker.nextNode() :\r\n                expanded ?\r\n                    walker.nextNode() :\r\n                    walker.nextSibling() ??\r\n                    (walker.parentNode(), walker.nextSibling())\r\n        );\r\n    }\r\n\r\n    #deepestItem(item: HTMLElement): HTMLElement {\r\n        const expanded = treeItemWidget.getExpanded(item);\r\n        if (expanded) {\r\n            const walker = this.#walker;\r\n            const lastItem = <HTMLElement>walker.lastChild();\r\n            if (lastItem) {\r\n                return this.#deepestItem(lastItem);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey, button} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        if (targetItem) {\r\n            const selected = treeItemWidget.getSelected(targetItem);\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setSelection(targetTree, targetItem);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            targetItem.blur();\r\n                            this.#removeFromSelection(targetTree, targetItem);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(targetTree, targetItem);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const activeItem = this.#getActiveItem(targetTree);\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                targetItem\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetTree, ...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                }\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(targetTree, targetItem);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            const type = treeItemWidget.getType(targetItem);\r\n            if (type == \"parent\") {\r\n                treeItemWidget.toggle(targetItem, true);\r\n            }\r\n            this.#setDropTargetItem(targetTree, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (!targetTree.contains(<Node>relatedTarget)) {\r\n            this.#setDropTargetItem(targetTree, null);\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const focusWithin = targetTree.contains(<Node>relatedTarget);\r\n        if (!focusWithin) {   \r\n            const activeItem = this.#getActiveItem(targetTree);\r\n            if (activeItem) {\r\n                activeItem.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetTree, targetItem);\r\n            targetTree.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetTree.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetTree.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetTree);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetTree, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetTree, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(\r\n                                firstItem,\r\n                                this.#deepestItem(lastItem)\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetTree, ...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const expanded = treeItemWidget.getExpanded(activeItem);\r\n                    if (expanded) {\r\n                        treeItemWidget.toggle(activeItem);\r\n                    }\r\n                    else {\r\n                        const walker = this.#walker;\r\n                        const parentItem = <HTMLElement>walker.parentNode();\r\n                        if (parentItem) {\r\n                            parentItem.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const expanded = treeItemWidget.getExpanded(activeItem);\r\n                    if (!expanded) {\r\n                        treeItemWidget.toggle(activeItem);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = treeItemWidget.getSelected(previousItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetTree, previousItem) :\r\n                                this.#addToSelection(targetTree, previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetTree);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = treeItemWidget.getSelected(nextItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetTree, nextItem) :\r\n                                this.#addToSelection(targetTree, nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetTree);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetTree);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetTree);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(targetTree, activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection(targetTree);\r\n                this.#setActiveItem(targetTree, null);\r\n                targetTree.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {target} = event;\r\n        const targetTree = <HTMLElement>target;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"treeitem\")) {\r\n            if (this.#onSelection.get(targetTree)) {\r\n                this.#hasSelectionChanged.set(target, true);\r\n            }\r\n            else {\r\n                targetTree.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { element, reactiveChildElements, reactiveElement, CustomElement, fragment, widget } from \"../elements/Element\";\r\nimport { ModelEvent, ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\nimport { menuWidget } from \"./widgets/menu/MenuWidget\";\r\nimport { toolbarItemWidget } from \"./widgets/toolbar/ToolBarItemWidget\";\r\nimport { toolbarWidget } from \"./widgets/toolbar/ToolBarWidget\";\r\nimport { treeItemWidget } from \"./widgets/tree/TreeItemWidget\";\r\nimport { treeWidget } from \"./widgets/tree/TreeWidget\";\r\n\r\nexport { TreeModel };\r\nexport { TreeItemModel };\r\nexport { TreeView };\r\n\r\nclass TreeModel extends ModelObject {\r\n    readonly items: ModelList<TreeItemModel>;\r\n    readonly childItems: ModelList<TreeItemModel>;\r\n    sortFunction: ((item_a: TreeItemModel, item_b: TreeItemModel) => number) | null;\r\n    \r\n    constructor()\r\n    constructor(init: {items: TreeItemModel[], sortFunction?: (item_a: TreeItemModel, item_b: TreeItemModel) => number})\r\n    constructor(init?: {items: TreeItemModel[], sortFunction?: (item_a: TreeItemModel, item_b: TreeItemModel) => number}) {\r\n        super();\r\n        const childItems = new ModelList(init?.items ?? []);\r\n        childItems.setParent(this);\r\n        this.childItems = childItems;\r\n        this.items = new ModelList(this.flattenItems());\r\n        this.sortFunction = init?.sortFunction ??\r\n            function(item_a: TreeItemModel, item_b: TreeItemModel) {\r\n                return item_a.label.localeCompare(item_b.label);\r\n            };\r\n        this.addEventListener(\"modelchange\", this.#handleModelChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleModelChangeEvent(event: ModelEvent): void {\r\n        const {target} = event;\r\n        const {items, sortFunction, flattenItems} = this;\r\n        if (target instanceof ModelList) {\r\n            const records = target.getRecords();\r\n            records.forEach((record_i) => {\r\n                const {insertedItems, removedItems} = record_i;\r\n                const flattenedInsertedItems = (<TreeItemModel[]>Array.from(insertedItems.values())).flatMap(\r\n                    insertedItem_i => Array.of(insertedItem_i, ...flattenItems.call(insertedItem_i))\r\n                );\r\n                const flattenedRemovedItems = (<TreeItemModel[]>Array.from(removedItems.values())).flatMap(\r\n                    removedItem_i => Array.of(removedItem_i, ...flattenItems.call(removedItem_i))\r\n                );\r\n                items.beginChanges();\r\n                items.append(...flattenedInsertedItems);\r\n                flattenedRemovedItems.forEach((removedItem_i) => items.remove(removedItem_i));\r\n                if (sortFunction) items.sort(sortFunction);\r\n                items.endChanges();\r\n            });\r\n        }\r\n    }\r\n\r\n    flattenItems(this: TreeModel | TreeItemModel): TreeItemModel[] {\r\n        const {childItems} = this;\r\n        return Array.from(childItems.values()).flatMap(\r\n            treeItem_i => Array.of(treeItem_i, ...TreeModel.prototype.flattenItems.call(treeItem_i))\r\n        );\r\n    }\r\n\r\n    getItemByUri(this: TreeModel | TreeItemModel, uri: string): TreeItemModel | null {\r\n        const {childItems} = this;\r\n        const {length: itemsCount} = childItems;\r\n        const {length: uriLength} = uri;\r\n        for (let i = 0; i < itemsCount; i++) {\r\n            const item_i = childItems.get(i)!;\r\n            const {uri: itemUri} = item_i;\r\n            const {length: itemUriLength} = itemUri;\r\n            if (uri.startsWith(itemUri)) {\r\n                if (uri.charAt(itemUriLength) == \"/\") {\r\n                    return TreeModel.prototype.getItemByUri.call(item_i, uri);\r\n                }\r\n                else if (itemUriLength == uriLength) {\r\n                    return item_i;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\ninterface TreeItem {\r\n    show(): void;\r\n    hide(): void;\r\n    display(): void;\r\n    remove(): void;\r\n}\r\n\r\nclass TreeItemList implements TreeItem {\r\n    readonly items: TreeItemModel[];\r\n\r\n    constructor(items: TreeItemModel[]) {\r\n        this.items = items;\r\n    }\r\n\r\n    get count(): number {\r\n        return this.items.length;\r\n    }\r\n\r\n    static from(items: TreeItemModel[]): TreeItemList {\r\n        return new TreeItemList(items);\r\n    }\r\n\r\n    static of(...items: TreeItemModel[]): TreeItemList {\r\n        return new TreeItemList(items);\r\n    }\r\n\r\n    show(): void {\r\n        this.items.forEach(item_i => item_i.show());\r\n    }\r\n\r\n    hide(): void {\r\n        this.items.forEach(item_i => item_i.hide());\r\n    }\r\n\r\n    display(): void {\r\n        const result = this.items.reduce(\r\n            (result, item_i) => `${result} ${item_i.label}`, \"\"\r\n        );\r\n        console.log(result);\r\n    }\r\n\r\n    remove(): void {\r\n        const {items} = this;\r\n        const removedItemsGroups = items.reduce((map, item_i) => {\r\n            const {parentNode} = item_i;\r\n            if (parentNode instanceof TreeItemModel || parentNode instanceof TreeModel) {\r\n                const {childItems} = parentNode;\r\n                const group = map.get(childItems);\r\n                if (group) group.push(item_i);\r\n                else map.set(childItems, [item_i]);\r\n            }\r\n            return map;\r\n        }, new Map<ModelList, TreeItemModel[]>());\r\n        Array.from(removedItemsGroups.entries()).forEach(\r\n            ([list_i, children_i]) => {\r\n                list_i.beginChanges();\r\n                children_i.forEach((child_i) => {\r\n                    list_i.remove(child_i);\r\n                });\r\n                list_i.endChanges();\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nclass TreeItemModel extends ModelObject implements TreeItem {\r\n    readonly childItems: ModelList<TreeItemModel>;\r\n    readonly type: \"leaf\" | \"parent\";\r\n    readonly label: string;\r\n\r\n    @ModelProperty(/*{type: Number}*/)\r\n    childCount: number;\r\n\r\n    @ModelProperty(/*{type: Boolean}*/)\r\n    visibility: boolean;\r\n\r\n    get uri(): string {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return `${parentNode.uri}/${this.label}`;\r\n        }\r\n        return this.label;\r\n    }\r\n\r\n    get parentItem(): TreeItemModel | null {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return parentNode;\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    constructor(init: {label: string, type: \"leaf\" | \"parent\", items?: TreeItemModel[]}) {\r\n        super();\r\n        const {label, type} = init;\r\n        const childItems = new ModelList(init.items ?? []);\r\n        childItems.setParent(this);\r\n        this.childItems = childItems;\r\n        this.label = label;\r\n        this.type = type;\r\n        this.childCount = childItems.length;\r\n        this.visibility = true;\r\n        this.addEventListener(\"modelchange\", this.#handleModelChangeEvent.bind(this));\r\n    }\r\n\r\n    show(): void {\r\n        this.visibility = true;\r\n    }\r\n\r\n    hide(): void {\r\n        this.visibility = false;\r\n    }\r\n\r\n    display(): void {\r\n        console.log(this.label);\r\n    }\r\n    \r\n    remove(): void {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel || parentNode instanceof TreeModel) {\r\n            const {childItems} = parentNode;\r\n            if (childItems) {\r\n                childItems.remove(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleModelChangeEvent(event: ModelEvent): void {\r\n        const {target} = event;\r\n        const {childItems} = this;\r\n        if (target == childItems) {\r\n            this.childCount = childItems.length;\r\n        }\r\n    }\r\n}\r\n\r\ninterface TreeViewConstructor {\r\n    readonly prototype: TreeView;\r\n    new(): TreeView;\r\n    new(model: TreeModel): TreeView;\r\n}\r\n\r\ninterface TreeView extends View {\r\n    model: TreeModel;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"v-treee\": TreeView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"v-treee\"\r\n})\r\nclass TreeViewBase extends View implements TreeView {\r\n    readonly model!: TreeModel;\r\n    #treeElement: WeakRef<HTMLElement> | undefined;\r\n    #dragImagesElementsMap: WeakMap<TreeItemModel, WeakRef<Element>>;\r\n    #treeItemElementsMap: WeakMap<TreeItemModel, WeakRef<HTMLElement>>;\r\n    \r\n    constructor()\r\n    constructor(model: TreeModel)\r\n    constructor(model?: TreeModel) {\r\n        super();\r\n        this.#treeItemElementsMap = new WeakMap();\r\n        this.#dragImagesElementsMap = new WeakMap();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.setModel(model ?? new TreeModel());\r\n    }\r\n\r\n    getTreeElement(): HTMLElement | null {\r\n        return this.#treeElement?.deref() ?? null;\r\n    }\r\n\r\n    getTreeItemElement(model: TreeItemModel): HTMLElement | null {\r\n        return this.#treeItemElementsMap.get(model)?.deref() ?? null;\r\n    }\r\n\r\n    getDragImageElement(model: TreeItemModel): Element | null {\r\n        return this.#dragImagesElementsMap.get(model)?.deref() ?? null;\r\n    }\r\n\r\n    selectedItems(): TreeItemModel[] {\r\n        const tree = this.getTreeElement();\r\n        if (tree) {\r\n            const {model} = this;\r\n            const selectedElements = treeWidget.selectedItems(tree);\r\n            return selectedElements.map(\r\n                item_i => <TreeItemModel>model.getItemByUri(item_i.dataset.uri!)\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    renderShadow(): Node {\r\n        const {model} = this;\r\n        const treeElement = widget(\"tree\", {\r\n            properties: {\r\n                tabIndex: 0,\r\n            },\r\n            slotted: reactiveChildElements(\r\n                model.childItems, item => this.#renderTreeItem(item)\r\n            ),\r\n            listeners: {\r\n                dragstart: <EventListener>this.#handleDragStartEvent.bind(this),\r\n                drop: <EventListener>this.#handleDropEvent.bind(this),\r\n                contextmenu: <EventListener>this.#handleContextMenuEvent.bind(this),\r\n                keydown: <EventListener>this.#handleKeyDownEvent.bind(this),\r\n                focusin: <EventListener>this.#handleFocusInEvent.bind(this),\r\n                focusout: <EventListener>this.#handleFocusOutEvent.bind(this),\r\n            }\r\n        });\r\n        this.#treeElement = new WeakRef(treeElement);\r\n        return fragment(\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/main.css\"\r\n                }\r\n            }),\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/views/treeview.css\"\r\n                }\r\n            }),\r\n            treeElement,\r\n            element(\"div\", {\r\n                attributes: {\r\n                    class: \"offscreen\",\r\n                    hidden: true\r\n                },\r\n                children: reactiveChildElements(model.items,\r\n                    item => this.#renderTreeItemDragImage(item)\r\n                )\r\n            })\r\n        );\r\n    }\r\n\r\n    #renderTreeItem(item: TreeItemModel): Element {\r\n        const treeItemElement = reactiveElement(\r\n            item,\r\n            widget(\"treeitem\", {\r\n                properties: {\r\n                    type: item.type,\r\n                    draggable: true,\r\n                    label: item.label\r\n                },\r\n                dataset: {\r\n                    uri: item.uri\r\n                },\r\n                slotted: {\r\n                    group:\r\n                        <Node[]>((item.type == \"parent\") ? [\r\n                        widget(\"treeitemgroup\", {\r\n                            slotted: reactiveChildElements(item.childItems,\r\n                                item => this.#renderTreeItem(item)\r\n                            )\r\n                        })\r\n                    ] : []),\r\n                    content: <Node[]>\r\n                        ([\r\n                            element(\"span\", {\r\n                                attributes: {\r\n                                    class: \"label\"\r\n                                }\r\n                            })\r\n                        ]).concat((item.type == \"parent\") ? [\r\n                            element(\"span\", {\r\n                                attributes: {\r\n                                    class: \"badge\"\r\n                                }\r\n                            })\r\n                        ] : []).concat([\r\n                            widget(\"toolbar\", {\r\n                                properties: {\r\n                                    tabIndex: -1\r\n                                },\r\n                                slotted: [\r\n                                    widget(\"toolbaritem\", {\r\n                                        properties: {\r\n                                            name: \"visibility\",\r\n                                            type: \"checkbox\",\r\n                                            label: \"Visibility\"\r\n                                        },\r\n                                        listeners: {\r\n                                            click: () => {\r\n                                                item.visibility ?\r\n                                                    item.hide() :\r\n                                                    item.show();\r\n                                            }\r\n                                        }\r\n                                    })\r\n                                ]\r\n                            })\r\n                        ])\r\n                }\r\n            }),\r\n            [\"label\", \"childCount\", \"visibility\"],\r\n            (treeitem, property, oldValue, newValue) => {\r\n                switch (property) {\r\n                    case \"label\": {\r\n                        treeItemWidget.setLabel(treeitem, newValue);\r\n                        break;\r\n                    }\r\n                    case \"childCount\": {\r\n                        const badge = treeitem.querySelector<HTMLElement>(\":scope > .content > .badge\");\r\n                        if (badge) {\r\n                            badge.textContent = `(${newValue})`;\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"visibility\": {\r\n                        const toolbar = treeitem.querySelector<HTMLElement>(\":scope > .content > .toolbar\");\r\n                        if (toolbar) {\r\n                            const visibilityItem = toolbarWidget.slot(toolbar)\r\n                                ?.querySelector<HTMLElement>(\".toolbaritem[name=visibility]\");\r\n                            if (visibilityItem) {\r\n                                const label = newValue ? \"Hide\" : \"Show\";\r\n                                toolbarItemWidget.setLabel(visibilityItem, label);\r\n                                toolbarItemWidget.setTitle(visibilityItem, label);\r\n                                toolbarItemWidget.setPressed(visibilityItem, newValue);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        );\r\n        this.#treeItemElementsMap.set(item, new WeakRef(treeItemElement));\r\n        return treeItemElement;\r\n    }\r\n\r\n    #renderTreeItemDragImage(item: TreeItemModel): Element {\r\n        const dragImageElement = reactiveElement(\r\n            item,\r\n            element(\"span\", {\r\n                attributes: {\r\n                    class: \"dragimage\"\r\n                }\r\n            }),\r\n            [\"label\"],\r\n            (span, property, oldValue, newValue) => {\r\n                span.textContent = newValue;\r\n            }\r\n        );\r\n        this.#dragImagesElementsMap.set(item, new WeakRef(dragImageElement));\r\n        return dragImageElement;\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const {model} = this;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n        if (targetItem) {\r\n            const {dataTransfer} = event;\r\n            const selectedElements = treeWidget.selectedItems(targetTree);\r\n            const {length: selectedCount} = selectedElements;\r\n            if (selectedCount > 0) {\r\n                const selectedUris = \r\n                    selectedElements\r\n                    .map((element_i) =>\r\n                        element_i.dataset.uri!\r\n                    )\r\n                    .filter(\r\n                        (uri_i, _, uris) => !uris.some(\r\n                            uri_j => uri_i.startsWith(`${uri_j}/`)\r\n                        )\r\n                    );\r\n                const selectedUrisString = selectedUris.join(\"\\n\");\r\n                const lastUri = selectedUris[selectedUris.length - 1];\r\n                const lastItem = model.getItemByUri(lastUri);\r\n                if (lastItem && dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", selectedUrisString);\r\n                    const dragImage = this.getDragImageElement(lastItem);\r\n                    if (dragImage) {\r\n                        dataTransfer.setDragImage(dragImage, -16, 0);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const {model} = this;\r\n        const {sortFunction} = model;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n        if (targetItem) {\r\n            const {dataTransfer} = event;\r\n            if (dataTransfer) {\r\n                const targetUri = targetItem.dataset.uri!;\r\n                const targetItemModel = model.getItemByUri(targetUri)!;\r\n                const transferedUris = dataTransfer.getData(\"text/plain\").split(\"\\n\");\r\n                const targetIsWithin = transferedUris.some(uri_i => targetUri.startsWith(`${uri_i}/`) || uri_i == targetUri);\r\n                if (!targetIsWithin) {\r\n                    const transferedItems = <TreeItemModel[]>transferedUris.map(\r\n                        uri_i => model.getItemByUri(uri_i)\r\n                    ).filter(\r\n                        item_i => item_i !== null\r\n                    );\r\n                    const {type: targetType, parentItem: targetParentItem} = targetItemModel;\r\n                    const targetList = targetType == \"parent\" ?\r\n                        targetItemModel.childItems :\r\n                        targetParentItem ?\r\n                        targetParentItem.childItems :\r\n                        model.childItems;\r\n                    const targetItems = Array.from(targetList.values());\r\n                    targetItems.forEach((item_i) => {\r\n                        const sameLabelIndex = transferedItems.findIndex(item_j => item_j.label == item_i.label);\r\n                        if (sameLabelIndex > -1) {\r\n                            const doReplace = confirm(`Replace ${item_i.label}?`);\r\n                            if (doReplace) {\r\n                                targetList.remove(item_i);\r\n                            }\r\n                            else {\r\n                                transferedItems.copyWithin(sameLabelIndex, sameLabelIndex + 1);\r\n                                transferedItems.length--;\r\n                            }\r\n                        }\r\n                    });\r\n                    TreeItemList.from(transferedItems).remove();\r\n                    if (sortFunction) {\r\n                        targetList.beginChanges();\r\n                        targetList.append(...transferedItems);\r\n                        targetList.sort(sortFunction);\r\n                        targetList.endChanges();\r\n                    }\r\n                    else {\r\n                        targetList.insert(treeItemWidget.getPosInSet(targetItem), ...transferedItems);\r\n                    }\r\n                    const newElements = transferedItems.map(\r\n                        item_i => this.getTreeItemElement(item_i)!\r\n                    );\r\n                    treeWidget.beginSelection(targetTree);\r\n                    newElements.forEach((element_i) => {\r\n                        treeItemWidget.setSelected(element_i, true);\r\n                    });\r\n                    treeWidget.endSelection(targetTree);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        const {clientX, clientY, currentTarget, target} = event;\r\n        const {model} = this;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n        if (targetItem) {\r\n            const activeItem = model.getItemByUri(targetItem.dataset.uri!)!;\r\n            const menu = widget(\"menu\", {\r\n                properties: {\r\n                    contextual: true\r\n                },\r\n                slotted: [\r\n                    widget(\"menuitemgroup\", {\r\n                        slotted: [\r\n                            widget(\"menuitem\", {\r\n                                properties: {\r\n                                    label: \"Display\"\r\n                                },\r\n                                listeners: {\r\n                                    click: () => {\r\n                                        TreeItemList.from(\r\n                                            this.selectedItems()\r\n                                        ).display();\r\n                                    }\r\n                                }\r\n                            }),\r\n                            widget(\"menuitem\", {\r\n                                properties: {\r\n                                    label: \"Delete\"\r\n                                },\r\n                                listeners: {\r\n                                    click: () => {\r\n                                        const itemsList = TreeItemList.from(this.selectedItems());\r\n                                        const {count} = itemsList;\r\n                                        const doRemove = confirm(`Remove ${count} items?`);\r\n                                        if (doRemove) {\r\n                                            itemsList.remove();\r\n                                        }\r\n                                        targetTree.focus();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    }),\r\n                    widget(\"menuitemgroup\", {\r\n                        slotted: [\r\n                            widget(\"menuitem\", {\r\n                                properties: {\r\n                                    type: \"checkbox\",\r\n                                    label: activeItem.visibility ? \"Hide\" : \"Show\"\r\n                                },\r\n                                listeners: {\r\n                                    click: () => {\r\n                                        const selectedItems = TreeItemList.from(\r\n                                            this.selectedItems()\r\n                                        );\r\n                                        activeItem.visibility ?\r\n                                            selectedItems.hide() :\r\n                                            selectedItems.show();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ],\r\n                listeners: {\r\n                    close: () => {\r\n                        targetItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            });\r\n            targetTree.append(menu);\r\n            menuWidget.positionContextual(menu, clientX, clientY);\r\n            menu.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetElement = <HTMLElement>target;\r\n        if (targetElement.matches(\".treeitem\")) {\r\n            const targetItem = targetElement;\r\n            const toolbar = targetItem.querySelector<HTMLElement>(\".toolbar\");\r\n            if (toolbar) {\r\n                toolbar.tabIndex = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetElement = <HTMLElement>target;\r\n        if (targetElement.matches(\".treeitem\")) {\r\n            const targetItem = targetElement;\r\n            const toolbar = targetItem.querySelector<HTMLElement>(\".toolbar\");\r\n            if (toolbar) {\r\n                toolbar.tabIndex = -1;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        switch (key) {\r\n            case \"Delete\": {\r\n                const itemsList = TreeItemList.from(this.selectedItems());\r\n                const {count} = itemsList;\r\n                const doRemove = confirm(`Remove ${count} items?`);\r\n                if (doRemove) {\r\n                    itemsList.remove();\r\n                }\r\n                targetTree.focus();\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar TreeView: TreeViewConstructor = TreeViewBase;","import { AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEActionElement };\r\nexport { ActionType };\r\n\r\ninterface HTMLEActionElementConstructor {\r\n    readonly prototype: HTMLEActionElement;\r\n    new(): HTMLEActionElement;\r\n}\r\n\r\ninterface HTMLEActionElement extends HTMLElement {\r\n    name: string;\r\n    value: string;\r\n    checked: boolean;\r\n    type: string;\r\n    disabled: boolean;\r\n    hotkey: string;\r\n\r\n    trigger(): void;\r\n    enable(): void;\r\n    disable(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"trigger\": Event;\r\n    }\r\n}\r\n\r\ntype ActionType = \"button\" | \"checkbox\" | \"radio\" | \"select\";\r\n\r\nclass HTMLEActionElementBase extends HTMLElement implements HTMLEActionElement {\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    hotkey!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"button\"})\r\n    type!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    checked!: boolean;\r\n\r\n    trigger(): void {\r\n        if (!this.disabled) {\r\n            switch (this.type) {\r\n                case \"checkbox\":\r\n                    this.checked = !this.checked;\r\n                    break;\r\n                case \"radio\":\r\n                    this.checked = true;\r\n                    break;\r\n            }\r\n            this.dispatchEvent(new Event(\"trigger\", {\r\n                bubbles: true\r\n            }));\r\n        }\r\n    }\r\n\r\n    enable(): void {\r\n        this.disabled = false;\r\n    }\r\n\r\n    disable(): void {\r\n        this.disabled = true;\r\n    }\r\n}\r\n\r\nvar HTMLEActionElement: HTMLEActionElementConstructor = HTMLEActionElementBase;","export { Key };\r\nexport { KeyModifier };\r\nexport { HotKey };\r\nexport { MouseButton };\r\n\r\nenum Key {\r\n    A = \"a\",\r\n    B = \"b\",\r\n    C = \"c\",\r\n    D = \"d\",\r\n    E = \"e\",\r\n    F = \"f\",\r\n    G = \"g\",\r\n    H = \"h\",\r\n    I = \"i\",\r\n    J = \"j\",\r\n    K = \"k\",\r\n    L = \"l\",\r\n    M = \"m\",\r\n    O = \"o\",\r\n    P = \"p\",\r\n    Q = \"q\",\r\n    R = \"r\",\r\n    S = \"s\",\r\n    T = \"t\",\r\n    U = \"u\",\r\n    V = \"v\",\r\n    W = \"w\",\r\n    X = \"x\",\r\n    Y = \"y\",\r\n    Z = \"z\",\r\n    ENTER = \"Enter\",\r\n    BACKSPACE = \"Backspace\",\r\n    ARROW_DOWN = \"ArrowDown\",\r\n    ARROW_LEFT = \"ArrowLeft\",\r\n    ARROW_RIGHT = \"ArrowRight\",\r\n    ARROW_UP = \"ArrowUp\",\r\n    SHIFT = \"Shift\"\r\n}\r\n\r\nenum KeyModifier {\r\n    Alt = \"Alt\",\r\n    Control = \"Control\",\r\n    Shift = \"Shift\"\r\n}\r\n\r\nenum MouseButton {\r\n    LEFT = 1,\r\n    WHEEL = 2,\r\n    RIGHT = 3,\r\n    FORWARD = 4,\r\n    BACK = 5\r\n}\r\n\r\nclass HotKey {\r\n    readonly key: Key;\r\n    readonly mod1?: KeyModifier;\r\n    readonly mod2?: KeyModifier;\r\n\r\n    constructor(key: Key, mod1?: KeyModifier, mod2?: KeyModifier) {\r\n        this.key = key;\r\n        this.mod1 = mod1;\r\n        this.mod2 = mod2;\r\n    }\r\n\r\n    toString(): string {\r\n        return `${this.mod1 ? `${this.#modifierString(this.mod1)}+` : \"\"}${this.mod2 ? `${this.#modifierString(this.mod2)}+` : \"\"}${(this.key.length == 1) ? this.key.toUpperCase() : this.key}`;\r\n    }\r\n\r\n    test(event: KeyboardEvent): boolean {\r\n        return (!this.mod1 || this.#testModifier(this.mod1, event)) && (!this.mod2 || this.#testModifier(this.mod2, event)) && event.key == this.key;\r\n    }\r\n\r\n    #modifierString(mod: KeyModifier): string {\r\n        switch (mod) {\r\n            case KeyModifier.Control:\r\n                return \"Ctrl\";\r\n            default:\r\n                return mod;\r\n        }\r\n    }\r\n\r\n    #testModifier(mod: KeyModifier, event: KeyboardEvent): boolean {\r\n        switch (mod) {\r\n            case \"Alt\":\r\n                return event.altKey;\r\n            case \"Control\":\r\n                return event.ctrlKey;\r\n            case \"Shift\":\r\n                return event.shiftKey;\r\n            default:\r\n                return true;\r\n        }\r\n    }\r\n}","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEGridCellElement };\r\n\r\ninterface HTMLEGridCellElementConstructor {\r\n    readonly prototype: HTMLEGridCellElement;\r\n    new(): HTMLEGridCellElement;\r\n}\r\n\r\ninterface HTMLEGridCellElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n    headers: string;\r\n    posinset: number;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridcell\": HTMLEGridCellElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridcell\"\r\n})\r\nclass HTMLEGridCellElementBase extends HTMLElement implements HTMLEGridCellElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    headers!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridCellElement: HTMLEGridCellElementConstructor = HTMLEGridCellElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\n\r\nexport { HTMLEGridRowGroupElement };\r\n\r\ninterface HTMLEGridRowGroupElementConstructor {\r\n    readonly prototype: HTMLEGridRowGroupElement;\r\n    new(): HTMLEGridRowGroupElement;\r\n}\r\n\r\ninterface HTMLEGridRowGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrowgroup\": HTMLEGridRowGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrowgroup\"\r\n})\r\nclass HTMLEGridRowGroupElementBase extends HTMLElement implements HTMLEGridRowGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                            /*display: flex;\r\n                            flex-direction: column;*/\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowGroupElement: HTMLEGridRowGroupElementConstructor = HTMLEGridRowGroupElementBase;","import { CustomElement, AttributeProperty, QueryProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\n\r\nexport { HTMLEMenuItemElement };\r\nexport { EMenuItem };\r\n\r\ninterface HTMLEMenuItemElementConstructor {\r\n    readonly prototype: HTMLEMenuItemElement;\r\n    new(): HTMLEMenuItemElement;\r\n}\r\n\r\ninterface HTMLEMenuItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    value: string;\r\n    hotkey: string;\r\n    disabled: boolean;\r\n    checked: boolean;\r\n    expanded: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitem\": HTMLEMenuItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitem\"\r\n})\r\nclass HTMLEMenuItemElementBase extends HTMLElement implements HTMLEMenuItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    hotkey!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    checked!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"button\", observed: true})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"icon\"\r\n                }\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"label\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"arrow\"\r\n                }\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n    }\r\n\r\n    @QueryProperty({selector: \":scope > e-menu[slot=menu]\"})\r\n    readonly menu!: HTMLEMenuElement | null;\r\n\r\n    toggle(force?: boolean): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                const expand = force ?? !expanded;\r\n                this.expanded = expand;\r\n                if (expand) {\r\n                    this.#positionMenu();\r\n                }\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {type} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (!this.expanded) {\r\n                    this.expanded = true;\r\n                    this.#positionMenu();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {type} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (this.expanded) {\r\n                    this.expanded = false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const {type} = this;\r\n            if (type == \"menu\") {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const closestMenu = this.closest(\"e-menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    const overflowX = itemRight + menuWidth - clientWidth;\r\n                    const overflowY = itemTop + menuHeight - clientHeight;\r\n                    menuStyle.setProperty(\"left\", `${\r\n                        overflowX > 0 ?\r\n                        itemLeft - menuWidth - closestMenuLeft :\r\n                        itemRight - closestMenuLeft\r\n                    }px`);\r\n                    const menuComputedStyle = window.getComputedStyle(menu);\r\n                    const {paddingTop, paddingBottom} = menuComputedStyle;\r\n                    const menuPaddingTop = parseFloat(paddingTop);\r\n                    const menuPaddingBottom = parseFloat(paddingBottom);\r\n                    menuStyle.setProperty(\"top\", `${\r\n                        overflowY > 0 ?\r\n                        itemBottom - menuHeight - closestMenuTop + menuPaddingBottom :\r\n                        itemTop - closestMenuTop - menuPaddingTop\r\n                    }px`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target == this) {\r\n            const {type} = this;\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.checked = !this.checked;\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.checked = true;\r\n                    break;\r\n                }\r\n                case \"menu\":\r\n                case \"submenu\": {\r\n                    this.toggle();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemElement: HTMLEMenuItemElementConstructor = HTMLEMenuItemElementBase;\r\n\r\ninterface EMenuItemConstructor {\r\n    readonly prototype: HTMLEMenuItemElement;\r\n    new(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    button(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    checkbox(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    radio(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    menu(init: {\r\n        name: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    submenu(init: {\r\n        name: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n}\r\n\r\nvar EMenuItem = <EMenuItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menu} = init;\r\n        if (menu) {\r\n            menu.slot = \"menu\";\r\n        }\r\n        return element(\"e-menuitem\", {\r\n            attributes: {\r\n                tabindex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type\r\n            },\r\n            children: menu ? [\r\n                label,\r\n                menu\r\n            ] : [\r\n                label\r\n            ],\r\n            listeners: {\r\n                trigger: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemElement.prototype,\r\n        button(init: {\r\n            name: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menu(init: {\r\n            name: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"menu\"\r\n            });\r\n        },\r\n        submenu(init: {\r\n            name: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"submenu\"\r\n            });\r\n        }\r\n    }\r\n);","import { element, CustomElement, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuItemElement, EMenuItem } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuItemGroupElement };\r\nexport { EMenuItemGroup };\r\n\r\ninterface HTMLEMenuItemGroupElementConstructor {\r\n    readonly prototype: HTMLEMenuItemGroupElement;\r\n    new(): HTMLEMenuItemGroupElement;\r\n}\r\n\r\ninterface HTMLEMenuItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    label: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitemgroup\": HTMLEMenuItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitemgroup\"\r\n})\r\nclass HTMLEMenuItemGroupElementBase extends HTMLElement implements HTMLEMenuItemGroupElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            flex-direction: column;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEMenuItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEMenuItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            //item_i.index = i;\r\n        });\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\":\r\n                const label = this.shadowRoot.querySelector(\"[part=label]\");\r\n                if (label) {\r\n                    label.textContent = newValue;\r\n                }\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemGroupElement: HTMLEMenuItemGroupElementConstructor = HTMLEMenuItemGroupElementBase;\r\n\r\ninterface EMenuItemGroupConstructor {\r\n    readonly prototype: HTMLEMenuItemGroupElement;\r\n    new(init: {\r\n        name?: string;\r\n        items: HTMLEMenuItemElement[];\r\n    }): HTMLEMenuItemGroupElement;\r\n    radios(init: {name: string, items: {label: string, value: string}[]}): HTMLEMenuItemGroupElement;\r\n}\r\n\r\nvar EMenuItemGroup = <EMenuItemGroupConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string,\r\n        items: HTMLEMenuItemElement[]\r\n    }) {\r\n        const {name, items} = init;\r\n        return element(\"e-menuitemgroup\", {\r\n            attributes: {\r\n                name: name\r\n            },\r\n            children: items\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemGroupElement.prototype,\r\n        radios: (init: {\r\n            name: string,\r\n            items: {\r\n                label: string,\r\n                value: string\r\n            }[]\r\n        }) => {\r\n            const {name, items} = init;\r\n            return element(\"e-menuitemgroup\", {\r\n                attributes: {\r\n                    name: name\r\n                },\r\n                children: items.map(\r\n                    ({label, value}) => new EMenuItem({name, label, type: \"radio\", value})\r\n                )\r\n            });\r\n        }\r\n    }\r\n);","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuElement };\r\nexport { EMenu };\r\n\r\ninterface HTMLEMenuElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    items(): HTMLEMenuItemElement[];\r\n    name: string;\r\n    contextual: boolean;\r\n    positionContextual(x: number, y: number): void;\r\n}\r\n\r\ninterface HTMLEMenuElementConstructor {\r\n    readonly prototype: HTMLEMenuElement;\r\n    new(): HTMLEMenuElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menu\": HTMLEMenuElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar toggleTimeouts: WeakMap<HTMLEMenuItemElement, {clear(): void;}>;\r\n\r\n@CustomElement({\r\n    name: \"e-menu\"\r\n})\r\nclass HTMLEMenuElementBase extends HTMLElement implements HTMLEMenuElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    items(): HTMLEMenuItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        ));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        const {activeIndex} = this;\r\n        return this.querySelector<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem:focus-within\"\r\n        ) ?? activeIndex > -1 ? this.items()[activeIndex] ?? null : null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    contextual!: boolean;\r\n\r\n    #walker: TreeWalker;\r\n    #activeIndex: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        toggleTimeouts = new WeakMap();\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        this.#activeIndex = -1;\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"mouseout\", this.#handleMouseOutEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    positionContextual(x: number, y: number): void {\r\n        const {style} = this;\r\n        const {width: menuWidth, height: menuHeight} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        const left = x + scrollX;\r\n        const top = y + scrollY;\r\n        const {clientWidth, clientHeight} = document.body;\r\n        const overflowX = left + menuWidth - clientWidth;\r\n        const overflowY = top + menuHeight - clientHeight;\r\n        style.setProperty(\"left\", `${overflowX > 0 ? left - menuWidth : left}px`);\r\n        style.setProperty(\"top\", `${overflowY > 0 ? top - menuHeight : top}px`);\r\n    }\r\n\r\n    #collapseSubmenus(): void {\r\n        this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem[expanded]\"\r\n        )\r\n        .forEach((item_i) => {\r\n            item_i.collapse();\r\n        });\r\n    }\r\n\r\n    #isClosestMenu(target: Element): boolean {\r\n        return target.closest(\":is(e-menu)\") == this;\r\n    }\r\n\r\n    #nearestItem(target: Element): HTMLEMenuItemElement | null {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextNode();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        return menu instanceof HTMLEMenuElementBase ?\r\n            menu.#firstItem() :\r\n            null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        if (item !== null) {\r\n            this.#activeIndex = this.items().indexOf(item);\r\n        }\r\n    }\r\n\r\n    async #setItemTimeout(item: HTMLEMenuItemElement, delay?: number): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => {\r\n                resolve(undefined);\r\n            }, delay ?? 0);\r\n            toggleTimeouts.set(item, {\r\n                clear: () => {\r\n                    clearTimeout(timeout);\r\n                    reject();\r\n                }\r\n            });\r\n        }).then(() => {\r\n            toggleTimeouts.delete(item);\r\n        });\r\n    }\r\n\r\n    #clearItemTimeout(item: HTMLEMenuItemElement): void {\r\n        const timeout = toggleTimeouts.get(item);\r\n        if (typeof timeout !== \"undefined\") {\r\n            toggleTimeouts.delete(item);\r\n            timeout.clear();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const {contextual} = this;\r\n            if (contextual) {\r\n                try {\r\n                    this.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const isClosestMenu = this.#isClosestMenu(target);\r\n                if (isClosestMenu) {\r\n                    const {type, name, value} = target;\r\n                    if (type == \"radio\") {\r\n                        this.querySelectorAll<HTMLEMenuItemElement>(\r\n                            `:is(:scope, :scope > e-menuitemgroup) > e-menuitem[type=radio][name=${name}]`\r\n                        )\r\n                        .forEach((radio_i) => {\r\n                            radio_i.checked = radio_i.value == value;\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem) {\r\n                this.#setActiveItem(nearestItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const {contextual} = this;\r\n            if (contextual) {\r\n                try {\r\n                    this.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const {activeItem} = this;\r\n                if (activeItem?.expanded) {\r\n                    activeItem.collapse();\r\n                }\r\n                this.#setActiveItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.#firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem() :\r\n                    this.#firstItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                firstItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                lastItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            activeItem.expand();\r\n                            if (activeItem.expanded) {\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            if (!activeItem.expanded) {\r\n                                activeItem.expand();\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                                event.stopPropagation();\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOutEvent(event: MouseEvent): void {\r\n        const {target, relatedTarget} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem !== null) {\r\n                if (nearestItem.type == \"submenu\" &&\r\n                    !nearestItem.expanded) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLEMenuElement\r\n                ) == this;\r\n                if (isTargetClosestMenu) {\r\n                    const {activeItem} = this;\r\n                    if (activeItem?.type == \"submenu\" &&\r\n                        activeItem.expanded) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, 400)\r\n                            .then(() => {\r\n                                activeItem.collapse();\r\n                            })\r\n                            .catch(() => undefined);\r\n                    }\r\n                    const {clientX, clientY} = event;\r\n                    const {left, right, top, bottom} = this.getBoundingClientRect();\r\n                    const intersectsWithMouse = !(\r\n                        left > clientX || right < clientX || top > clientY || bottom < clientY\r\n                    );\r\n                    const containsRelatedTarget = this.contains(<Node>relatedTarget);\r\n                    if (intersectsWithMouse && containsRelatedTarget) {\r\n                        if (relatedTarget instanceof HTMLEMenuElement && relatedTarget !== this) {\r\n                            relatedTarget.focus({preventScroll: true});\r\n                        }\r\n                        else {\r\n                            this.focus({preventScroll: true});\r\n                            this.#setActiveItem(null);\r\n                        }\r\n                    }\r\n                    if (!intersectsWithMouse) {\r\n                        this.focus({preventScroll: true});\r\n                        this.#setActiveItem(null);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem !== null) {\r\n                if (nearestItem.type == \"submenu\" && nearestItem.expanded) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLEMenuElement\r\n                ) == this;\r\n                if (isTargetClosestMenu) {\r\n                    const {activeItem} = this;\r\n                    if (activeItem?.type == \"submenu\" &&\r\n                        activeItem.expanded && \r\n                        !activeItem.contains(<Node>target)) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, 400)\r\n                            .then(() => {\r\n                                activeItem.collapse();\r\n                            })\r\n                            .catch(() => undefined);\r\n                    }\r\n                    this.#setActiveItem(nearestItem);\r\n                    nearestItem.focus({preventScroll: true});\r\n                    if (nearestItem.type == \"submenu\") {\r\n                        if (!nearestItem.expanded) {\r\n                            this.#clearItemTimeout(nearestItem);\r\n                            this.#setItemTimeout(nearestItem, 200)\r\n                                .then(() => {\r\n                                    const {activeItem} = this;\r\n                                    this.#collapseSubmenus();\r\n                                    if (activeItem) {\r\n                                        this.#clearItemTimeout(activeItem);\r\n                                        activeItem.expand();\r\n                                        activeItem.menu?.focus({preventScroll: true});\r\n                                    }\r\n                                })\r\n                                .catch(() => undefined);\r\n                        }\r\n                        else {\r\n                            nearestItem.menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuElement: HTMLEMenuElementConstructor = HTMLEMenuElementBase;\r\n\r\ninterface EMenuConstructor {\r\n    readonly prototype: HTMLEMenuElement;\r\n    new(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }): HTMLEMenuElement;\r\n}\r\n\r\nvar EMenu = <EMenuConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }) {\r\n        const {name, children} = init;\r\n        return element(\"e-menu\", {\r\n            attributes: {\r\n                name: name,\r\n                tabindex: -1,\r\n            },\r\n            children: children\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuElement.prototype,\r\n    }\r\n);","import { AttributeProperty, CustomElement, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\n\r\nexport { HTMLEGridRowElement };\r\n\r\ninterface HTMLEGridRowElementConstructor {\r\n    readonly prototype: HTMLEGridRowElement;\r\n    new(): HTMLEGridRowElement;\r\n}\r\n\r\ninterface HTMLEGridRowElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    active: boolean;\r\n    selected: boolean;\r\n    posinset: number;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrow\": HTMLEGridRowElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrow\"\r\n})\r\nclass HTMLEGridRowElementBase extends HTMLElement implements HTMLEGridRowElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    #menu: HTMLEMenuElement | null;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row;\r\n                        }\r\n\r\n                        :host([droptarget]) {\r\n                            background-color: gainsboro;\r\n                        }\r\n                        \r\n                        :host(:hover) {\r\n                            background-color: rgba(135, 206, 250, 0.2);\r\n                        }\r\n\r\n                        :host([active]) {\r\n                            outline: 1px solid rgb(135, 206, 250);\r\n                            outline-offset: -1px;\r\n                        }\r\n\r\n                        :host([selected]) {\r\n                            background-color: rgba(135, 206, 250, 0.4);\r\n                            outline: 1px solid rgb(135, 206, 250);\r\n                            outline-offset: -1px;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\"),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#menu = null;\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"menu\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#menu = element instanceof HTMLEMenuElement ? element : null;\r\n                break;\r\n            }\r\n            default: {\r\n                const assignedCells = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n                    .assignedElements()\r\n                    .filter(\r\n                        element_i => element_i instanceof HTMLEGridCellElement\r\n                    );\r\n                assignedCells.forEach((cell_i, i) => {\r\n                    cell_i.posinset = i;\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowElement: HTMLEGridRowElementConstructor = HTMLEGridRowElementBase;","import { HTMLEGridElement } from \"./Grid\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\n\r\nexport { HTMLEGridCellCollection };\r\n\r\ninterface HTMLEGridCellCollectionConstructor {\r\n    readonly prototype: HTMLEGridCellCollection;\r\n    new(root: HTMLElement): HTMLEGridCellCollection;\r\n}\r\n\r\ninterface HTMLEGridCellCollection {\r\n    length: number;\r\n    item(index: number): HTMLEGridCellElement | null;\r\n    namedItem(name: string): HTMLEGridCellElement | null;\r\n    values(): IterableIterator<HTMLEGridCellElement>;\r\n}\r\n\r\nclass HTMLEGridCellCollectionBase implements HTMLEGridCellCollection {\r\n    #walker: TreeWalker;\r\n\r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridCellElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEGridCellElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEGridCellElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEGridCellElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEGridCellElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEGridCellElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEGridCellElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEGridCellElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEGridCellElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridCellCollection: HTMLEGridCellCollectionConstructor =  HTMLEGridCellCollectionBase;","import { HTMLEGridElement } from \"./Grid\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\n\r\nexport { HTMLEGridRowCollection };\r\n\r\ninterface HTMLEGridRowCollectionConstructor {\r\n    readonly prototype: HTMLEGridRowCollection;\r\n    new(root: HTMLElement): HTMLEGridRowCollection;\r\n}\r\n\r\ninterface HTMLEGridRowCollection {\r\n    length: number;\r\n    item(index: number): HTMLEGridRowElement | null;\r\n    namedItem(name: string): HTMLEGridRowElement | null;\r\n    values(): IterableIterator<HTMLEGridRowElement>;\r\n}\r\n\r\nclass HTMLEGridRowCollectionBase implements HTMLEGridRowCollection {\r\n    #walker: TreeWalker;\r\n    \r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEGridRowElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEGridRowElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEGridRowElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEGridRowElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEGridRowElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEGridRowElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEGridRowElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEGridRowElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowCollection: HTMLEGridRowCollectionConstructor =  HTMLEGridRowCollectionBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\n\r\nexport { HTMLEGridBodyElement };\r\n\r\ninterface HTMLEGridBodyElementConstructor {\r\n    readonly prototype: HTMLEGridBodyElement;\r\n    new(): HTMLEGridBodyElement;\r\n}\r\n\r\ninterface HTMLEGridBodyElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridbody\": HTMLEGridBodyElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridbody\"\r\n})\r\nclass HTMLEGridBodyElementBase extends HTMLElement implements HTMLEGridBodyElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridBodyElement: HTMLEGridBodyElementConstructor = HTMLEGridBodyElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridHeadElement } from \"./GridHead\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\n\r\nexport { HTMLEGridElement };\r\n\r\ninterface HTMLEGridElementConstructor {\r\n    readonly prototype: HTMLEGridElement;\r\n    new(): HTMLEGridElement;\r\n}\r\n\r\ninterface HTMLEGridElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly body: HTMLEGridBodyElement | null;\r\n    readonly head: HTMLEGridHeadElement | null\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n    readonly activeCell: HTMLEGridCellElement | null;\r\n    readonly activeCellIndex: number;\r\n    readonly activeRow: HTMLEGridRowElement | null;\r\n    readonly activeRowIndex: number;\r\n    selectby: \"cell\" | \"row\";\r\n    name: string;\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    clearSelection(): void;\r\n    selectedCells(): HTMLEGridCellElement[];\r\n    selectedRows(): HTMLEGridRowElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-grid\": HTMLEGridElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-grid\"\r\n})\r\nclass HTMLEGridElementBase extends HTMLElement implements HTMLEGridElement {\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    get activeCellIndex(): number {\r\n        return this.#activeCellIndex;\r\n    }\r\n\r\n    get activeCell(): HTMLEGridCellElement | null {\r\n        return this.cells.item(this.#activeCellIndex) ?? null;\r\n    }\r\n\r\n    get activeRowIndex(): number {\r\n        return this.#activeRowIndex;\r\n    }\r\n\r\n    get activeRow(): HTMLEGridRowElement | null {\r\n        return this.rows.item(this.#activeRowIndex) ?? null;\r\n    }\r\n\r\n    get body(): HTMLEGridBodyElement | null {\r\n        return this.querySelector<HTMLEGridBodyElement>(\":scope > e-gridbody\");\r\n    }\r\n\r\n    get head(): HTMLEGridHeadElement | null {\r\n        return this.querySelector<HTMLEGridHeadElement>(\":scope > e-gridhead\");\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"cell\"})\r\n    selectby!: \"cell\" | \"row\";\r\n\r\n    #activeCellIndex: number;\r\n    #activeRowIndex: number;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #cellsWalker: TreeWalker;\r\n    #rowsWalker: TreeWalker;\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#cellsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#cellsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#rowsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#rowsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeCellIndex = -1;\r\n        this.#activeRowIndex = -1;\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.#clearCellsSelection();\r\n        this.#clearRowsSelection();\r\n    }\r\n\r\n    selectedCells(): HTMLEGridCellElement[] {\r\n        return Array.from(this.querySelectorAll(\"e-gridcell[selected]\"));\r\n    }\r\n\r\n    selectedRows(): HTMLEGridRowElement[] {\r\n        return Array.from(this.querySelectorAll(\"e-gridrow[selected]\"));\r\n    }\r\n\r\n    #cellsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridCellElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #rowsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridRowElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getCellsRange(from: HTMLEGridCellElement, to: HTMLEGridCellElement): HTMLEGridCellElement[] {\r\n        const cells = Array.from(this.cells.values());\r\n        const fromIndex = cells.indexOf(from);\r\n        const toIndex = cells.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return cells.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #getRowsRange(from: HTMLEGridRowElement, to: HTMLEGridRowElement): HTMLEGridRowElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleRow = this.#nextRow(from);\r\n            while (nextVisibleRow && nextVisibleRow !== to) {\r\n                range.push(nextVisibleRow);\r\n                nextVisibleRow = this.#nextRow(nextVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleRow = this.#previousRow(from);\r\n            while (previousVisibleRow && previousVisibleRow !== to) {\r\n                range.push(previousVisibleRow);\r\n                previousVisibleRow = this.#previousRow(previousVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setCellsSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((selectedCell_i) => {\r\n            if (!cells.includes(selectedCell_i)) {\r\n                selectedCell_i.selected = false;\r\n            }\r\n        });\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setRowsSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((selectedRow_i) => {\r\n            if (!rows.includes(selectedRow_i)) {\r\n                selectedRow_i.selected = false;\r\n            }\r\n        });\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addCellsToSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addRowsToSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeCellsFromSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        cells.forEach((cell_i) => {\r\n            if (selectedCells.includes(cell_i)) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeRowsFromSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        rows.forEach((row_i) => {\r\n            if (selectedRows.includes(row_i)) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearCellsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((cell_i) => {\r\n            if (cell_i.selected) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearRowsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((row_i) => {\r\n            if (row_i.selected) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveCell(cell: HTMLEGridCellElement | null): void {\r\n        const {activeCell, cells} = this;\r\n        if (activeCell !== null && activeCell !== cell) {\r\n            activeCell.active = false;\r\n            activeCell.tabIndex = -1;\r\n        }\r\n        else if (cell !== null) {\r\n            const cellsWalker = this.#cellsWalker;\r\n            cellsWalker.currentNode = cell;\r\n            cell.active = true;\r\n            cell.tabIndex = 0;\r\n            const closestRow = this.#closestRow(cell);\r\n            if (closestRow) {\r\n                this.#setActiveRow(closestRow);\r\n            }\r\n            this.#activeCellIndex = Array.from(cells.values()).indexOf(cell);\r\n        }\r\n        else {\r\n            this.#activeCellIndex = -1;\r\n        }\r\n    }\r\n\r\n    #setActiveRow(row: HTMLEGridRowElement | null): void {\r\n        const {activeRow, rows} = this;\r\n        if (activeRow !== null && activeRow !== row) {\r\n            activeRow.active = false;\r\n            activeRow.tabIndex = -1;\r\n        }\r\n        else if (row !== null) {\r\n            const rowsWalker = this.#rowsWalker;\r\n            rowsWalker.currentNode = row;\r\n            row.active = true;\r\n            row.tabIndex = 0;\r\n            this.#activeRowIndex = Array.from(rows.values()).indexOf(row);\r\n        }\r\n        else {\r\n            this.#activeRowIndex = -1;\r\n        }\r\n    }\r\n\r\n    #firstCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.firstChild();\r\n    }\r\n\r\n    #lastCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.lastChild();\r\n    }\r\n\r\n    #previousCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.previousNode();\r\n    }\r\n\r\n    #nextCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.nextNode();\r\n    }\r\n\r\n    #closestRow(cell: HTMLEGridCellElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = cell;\r\n        return <HTMLEGridRowElement | null>rowsWalker.parentNode();\r\n    }\r\n\r\n    #firstRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.firstChild();\r\n    }\r\n\r\n    #lastRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.lastChild();\r\n    }\r\n\r\n    #previousRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.previousNode();\r\n    }\r\n\r\n    #nextRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.nextNode();\r\n    }\r\n\r\n    #topCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const {cells: closestRowCells} = closestRow;\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const previousRow = this.#previousRow(closestRow);\r\n            if (previousRow) {\r\n                const {cells: previousRowCells} = previousRow;\r\n                return previousRowCells.item(\r\n                    Math.min(cellIndex, previousRowCells.length)\r\n                );\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #bottomCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const {cells: closestRowCells} = closestRow;\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const nextRow = this.#nextRow(closestRow);\r\n            if (nextRow) {\r\n                const {cells: nextRowCells} = nextRow;\r\n                return nextRowCells.item(\r\n                    Math.min(cellIndex, nextRowCells.length)\r\n                );\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent) {\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const composedPath = event.composedPath();\r\n                const targetCell = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridCellElement\r\n                ) : null;\r\n                if (targetCell instanceof HTMLEGridCellElement) {\r\n                    const selectedCells = this.selectedCells();\r\n                    if (!selectedCells.includes(targetCell)) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    targetCell.focus({preventScroll: true});\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const composedPath = event.composedPath();\r\n                const targetRow = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridRowElement\r\n                ) : null;\r\n                if (targetRow instanceof HTMLEGridRowElement) {\r\n                    const selectedRows = this.selectedRows();\r\n                    if (!selectedRows.includes(targetRow)) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    targetRow.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {ctrlKey, shiftKey} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const composedPath = event.composedPath();\r\n                const targetCell = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridCellElement\r\n                ) : null;\r\n                const selectedCells = this.selectedCells();\r\n                if (targetCell instanceof HTMLEGridCellElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetCell.selected ?\r\n                            this.#addCellsToSelection(targetCell) :\r\n                            this.#removeCellsFromSelection(targetCell);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedCell = selectedCells[selectedCells.length - 1];\r\n                        if (lastSelectedCell) {\r\n                            const range = this.#getCellsRange(\r\n                                lastSelectedCell,\r\n                                targetCell\r\n                            );\r\n                            if (range) {\r\n                                selectedCells.includes(targetCell) ?\r\n                                    this.#removeCellsFromSelection(...range) :\r\n                                    this.#addCellsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setCellsSelection(targetCell);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const selectedRows = this.selectedRows();\r\n                const composedPath = event.composedPath();\r\n                const targetRow = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridRowElement\r\n                ) : null;\r\n                if (targetRow instanceof HTMLEGridRowElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetRow.selected ?\r\n                            this.#addRowsToSelection(targetRow) :\r\n                            this.#removeRowsFromSelection(targetRow);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedRow = selectedRows[selectedRows.length - 1];\r\n                        if (lastSelectedRow) {\r\n                            const range = this.#getRowsRange(\r\n                                lastSelectedRow,\r\n                                targetRow\r\n                            );\r\n                            if (range) {\r\n                                selectedRows.includes(targetRow) ?\r\n                                    this.#removeRowsFromSelection(...range) :\r\n                                    this.#addRowsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setRowsSelection(targetRow);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {selectby, activeCell, activeRow} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    switch (selectby) {\r\n                        case \"cell\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const firstCell = firstRow ? this.#firstCell(firstRow) : null;\r\n                            const lastRow = this.#lastRow();\r\n                            const lastCell = lastRow ? this.#lastCell(lastRow) : null;\r\n                            if (firstCell && lastCell) {\r\n                                const range = this.#getCellsRange(firstCell, lastCell);\r\n                                if (range) {\r\n                                    this.#setCellsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"row\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const lastRow = this.#lastRow();\r\n                            if (firstRow && lastRow) {\r\n                                const range = this.#getRowsRange(firstRow, lastRow);\r\n                                if (range) {\r\n                                    this.#setRowsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const previousCell = this.#previousCell(activeCell);\r\n                        if (previousCell) {\r\n                            previousCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousCell.selected ?\r\n                                    this.#removeCellsFromSelection(previousCell) :\r\n                                    this.#addCellsToSelection(previousCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const nextCell = this.#nextCell(activeCell);\r\n                        if (nextCell) {\r\n                            nextCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextCell.selected ?\r\n                                    this.#removeCellsFromSelection(nextCell) :\r\n                                    this.#addCellsToSelection(nextCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const firstRow = activeRow ?? this.#firstRow();\r\n                        const topCell = activeCell ?\r\n                            this.#topCell(activeCell) :\r\n                            firstRow ?\r\n                            this.#firstCell(firstRow) :\r\n                            null;\r\n                        if (topCell) {\r\n                            topCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                topCell.selected ?\r\n                                    this.#removeCellsFromSelection(topCell) :\r\n                                    this.#addCellsToSelection(topCell);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const previousRow = activeRow ?\r\n                            this.#previousRow(activeRow) :\r\n                            this.#firstRow();\r\n                        if (previousRow) {\r\n                            previousRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousRow.selected ?\r\n                                    this.#removeRowsFromSelection(previousRow) :\r\n                                    this.#addRowsToSelection(previousRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const lastRow = activeRow ?? this.#lastRow();\r\n                        const bottomCell = activeCell ?\r\n                            this.#bottomCell(activeCell) :\r\n                            lastRow ?\r\n                            this.#lastCell(lastRow) :\r\n                            null;\r\n                            if (bottomCell) {\r\n                                bottomCell.focus({preventScroll: true});\r\n                                const {shiftKey} = event;\r\n                                if (shiftKey) {\r\n                                    bottomCell.selected ?\r\n                                        this.#removeCellsFromSelection(bottomCell) :\r\n                                        this.#addCellsToSelection(bottomCell);\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"row\": {\r\n                        const nextRow = activeRow ?\r\n                            this.#nextRow(activeRow) :\r\n                            this.#lastRow();\r\n                        if (nextRow) {\r\n                            nextRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextRow.selected ?\r\n                                    this.#removeRowsFromSelection(nextRow) :\r\n                                    this.#addRowsToSelection(nextRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const firstCell = this.#firstCell(activeRow);\r\n                            if (firstCell) {\r\n                                firstCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const firstRow = this.#firstRow();\r\n                        if (firstRow) {\r\n                            firstRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const lastCell = this.#lastCell(activeRow);\r\n                            if (lastCell) {\r\n                                lastCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const lastRow = this.#lastRow();\r\n                        if (lastRow) {\r\n                            lastRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeCell) {\r\n                            this.#setCellsSelection(activeCell);\r\n                            activeCell.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        if (activeRow) {\r\n                            this.#setRowsSelection(activeRow);\r\n                            activeRow.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        this.#clearCellsSelection();\r\n                        this.#setActiveCell(null);\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        this.#clearRowsSelection();\r\n                        this.#setActiveRow(null);\r\n                        break;\r\n                    }\r\n                }\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const {activeCell} = this;\r\n                if (activeCell && relatedTarget !== activeCell) {\r\n                    activeCell.focus();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const {activeRow} = this;\r\n                if (activeRow && relatedTarget !== activeRow) {\r\n                    activeRow.focus();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                if (target instanceof HTMLEGridCellElement) {\r\n                    this.#setActiveCell(target);\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                if (target instanceof HTMLEGridRowElement) {\r\n                    this.#setActiveRow(target);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedRows = <HTMLEGridRowElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridRowElement\r\n            );\r\n            assignedRows.forEach((row_i, i) => {\r\n                row_i.posinset = i;\r\n            });\r\n    }\r\n}\r\n\r\nvar HTMLEGridElement: HTMLEGridElementConstructor = HTMLEGridElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\n\r\nexport { HTMLEGridHeadElement };\r\n\r\ninterface HTMLEGridHeadElementConstructor {\r\n    readonly prototype: HTMLEGridHeadElement;\r\n    new(): HTMLEGridHeadElement;\r\n}\r\n\r\ninterface HTMLEGridHeadElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridhead\": HTMLEGridHeadElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridhead\"\r\n})\r\nclass HTMLEGridHeadElementBase extends HTMLElement implements HTMLEGridHeadElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                        }\r\n                    `\r\n                    ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridHeadElement: HTMLEGridHeadElementConstructor = HTMLEGridHeadElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuBarElement };\r\n\r\ninterface HTMLEMenuBarElementConstructor {\r\n    readonly prototype: HTMLEMenuBarElement;\r\n    new(): HTMLEMenuBarElement;\r\n}\r\n\r\ninterface HTMLEMenuBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    items(): HTMLEMenuItemElement[];\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    expanded: boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menubar\": HTMLEMenuBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menubar\"\r\n})\r\nclass HTMLEMenuBarElementBase extends HTMLElement implements HTMLEMenuBarElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    #activeIndex: number;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    items(): HTMLEMenuItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        ));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        const {activeIndex} = this;\r\n        return this.querySelector<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem:focus-within\"\r\n        ) ?? activeIndex > -1 ? this.items()[activeIndex] ?? null : null;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLEMenuItemElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        const {activeItem, expanded} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.collapse();\r\n        }\r\n        if (item !== null) {\r\n            if (expanded) {\r\n                item.expand();\r\n            }\r\n            this.#activeIndex = this.items().indexOf(item);\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    get #items(): HTMLEMenuItemElement[] {\r\n        return Array.from(\r\n            this.querySelectorAll(\":is(:scope, :scope > e-menuitemgroup) > e-menuitem\")\r\n        );\r\n    }\r\n\r\n    #isClosestMenu(target: Element): boolean {\r\n        return target.closest(\":is(e-menubar, e-menu)\") == this;\r\n    }\r\n\r\n    #nearestItem(target: Element): HTMLEMenuItemElement | null {\r\n        return this.#items.find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n    \r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof Element) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            this.#setActiveItem(nearestItem);\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, relatedTarget} = event;\r\n        if (target instanceof HTMLElement && !target.contains(<Element>relatedTarget)) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem) {\r\n                nearestItem.collapse();\r\n            }\r\n        }\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.expanded = false;\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {expanded, activeItem} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu && target !== activeItem && expanded) {\r\n                const {menu} = target;\r\n                if (menu) {\r\n                    target.expand();\r\n                    menu.focus({preventScroll: true});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {expanded, activeItem} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu) {\r\n                const isExpanded = !expanded;\r\n                this.expanded = isExpanded;\r\n                if (isExpanded) {\r\n                    if (activeItem && !activeItem.expanded) {\r\n                        activeItem.expand();\r\n                    }\r\n                    const {menu} = target;\r\n                    menu?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true})\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded} = this;\r\n        let {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.#firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem() : \r\n                    this.#lastItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    this.expanded = !expanded;\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.expanded = false;\r\n                    if (activeItem) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /*#handleTriggerEvent(): void {\r\n        const {activeItem} = this;\r\n        if (activeItem?.expanded) {\r\n            activeItem.collapse();\r\n        }\r\n        this.expanded = false;\r\n        this.focus({preventScroll: true});\r\n    }*/\r\n}\r\n\r\nvar HTMLEMenuBarElement: HTMLEMenuBarElementConstructor = HTMLEMenuBarElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuButtonElement };\r\nexport { EMenuButton };\r\n\r\ninterface HTMLEMenuButtonElementConstructor {\r\n    readonly prototype: HTMLEMenuButtonElement;\r\n    new(): HTMLEMenuButtonElement;\r\n}\r\n\r\ninterface HTMLEMenuButtonElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    readonly firstItem: HTMLEMenuItemElement | null;\r\n    name: string;\r\n    disabled: boolean;\r\n    expanded: boolean;\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-menubutton\"\r\n})\r\nclass HTMLEMenuButtonElementBase extends HTMLElement implements HTMLEMenuButtonElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    #menu: HTMLEMenuElement | null;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#menu = null;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"icon\"\r\n                        }\r\n                    }),\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"label\"\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n\r\n\r\n    toggle(force?: boolean): void {\r\n        const expand = force ?? !this.expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n\r\n    expand(): void {\r\n        if (!this.expanded) {\r\n            this.expanded = true;\r\n            this.#positionMenu();\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        if (this.expanded) {\r\n            this.expanded = false;\r\n        }\r\n    }\r\n\r\n    get firstItem(): HTMLEMenuItemElement | null {\r\n        return this.querySelector<HTMLEMenuItemElement>(\r\n            \":scope > :is(e-menu, e-menu > e-menuitemgroup) > e-menuitem\"\r\n        );\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const overflowX = itemRight + menuWidth - clientWidth;\r\n            const overflowY = itemTop + menuHeight - clientHeight;\r\n            menuStyle.setProperty(\"left\", `${\r\n                overflowX > 0 ?\r\n                scrollX + itemRight - menuWidth :\r\n                scrollX + itemLeft\r\n            }px`);\r\n            menuStyle.setProperty(\"top\", `${\r\n                overflowY > 0 ?\r\n                scrollY + itemTop - menuHeight :\r\n                scrollY + itemBottom\r\n            }px`);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target == this) {\r\n            this.toggle();\r\n            const {expanded} = this;\r\n            if (expanded) {\r\n                this.menu?.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded} = this;\r\n        switch (key) {\r\n            case \"ArrowDown\":\r\n            case \"Enter\":\r\n                if (!expanded) {\r\n                    this.expand();\r\n                    this.firstItem?.focus({preventScroll: true});\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            case \"Escape\":\r\n                if (expanded) {\r\n                    this.collapse();\r\n                    this.focus({preventScroll: true});\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n        this.#menu = (element instanceof HTMLEMenuElement) ? element : null;\r\n    }\r\n\r\n    #handleTriggerEvent(): void {\r\n        this.collapse();\r\n        this.focus({preventScroll: true});\r\n    }\r\n}\r\n\r\nvar HTMLEMenuButtonElement: HTMLEMenuButtonElementConstructor = HTMLEMenuButtonElementBase;\r\n\r\ninterface EMenuButtonConstructor {\r\n    readonly prototype: HTMLEMenuButtonElement;\r\n    new(init: {\r\n        menu: HTMLEMenuElement\r\n    }): HTMLEMenuButtonElement;\r\n}\r\n\r\nvar EMenuButton = <EMenuButtonConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        menu: HTMLEMenuElement\r\n    }) {\r\n        const {menu} = init;\r\n        menu.slot = \"menu\";\r\n        return element(\"e-menubutton\", {\r\n            attributes: {\r\n                tabindex: -1\r\n            },\r\n            children: [menu]\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuButtonElement.prototype,\r\n    }\r\n);","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionElement };\r\n\r\ninterface HTMLEOptionElementConstructor {\r\n    readonly prototype: HTMLEOptionElement;\r\n    new(): HTMLEOptionElement;\r\n}\r\n\r\ninterface HTMLEOptionElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    active: boolean;\r\n    value: string;\r\n    label: string;\r\n    description: string;\r\n    disabled: boolean;\r\n    selected: boolean;\r\n    default: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-option\": HTMLEOptionElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-option\"\r\n})\r\nclass HTMLEOptionElementBase extends HTMLElement implements HTMLEOptionElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n    \r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n        \r\n    @AttributeProperty({type: String})\r\n    description!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    default!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            user-select: none;\r\n                            white-space: nowrap;\r\n                            padding: 2px 12px;\r\n                        }\r\n                        \r\n                        :host([active]) {\r\n                            color: black;\r\n                            background-color: lightgray;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            color: lightgray;\r\n                        }\r\n\r\n                        :host::before {\r\n                            display: flex;\r\n                            content: \"\";\r\n                            width: 18px;\r\n                            height: 18px;\r\n                            margin-right: 6px;\r\n\r\n                            mask-size: 18px 18px;\r\n                            -webkit-mask-size: 18px 18px;\r\n                            background-color: var(--icon-color, none);\r\n                            -webkit-mask-image: var(--icon-image, none);\r\n                            mask-image: var(--icon-image, none);\r\n                        }\r\n\r\n                        [part=\"label\"] {\r\n                            flex: auto;\r\n                            text-align: left;\r\n                        }\r\n\r\n                        :host([default])::after {\r\n                            display: inline-block;\r\n                            content: \"(default)\";\r\n                            margin-left: 24px;\r\n                            text-align: right;\r\n                        }\r\n\r\n                        [part=\"content\"] {\r\n                            flex: auto;\r\n                            display: flex;\r\n                            overflow: hidden;\r\n                            pointer-events: none;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"label\"\r\n                        }\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector<HTMLElement>(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEOptionElement: HTMLEOptionElementConstructor = HTMLEOptionElementBase;","import { CustomElement, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionGroupElement };\r\n\r\ninterface HTMLEOptionGroupElementConstructor {\r\n    readonly prototype: HTMLEOptionGroupElement;\r\n    new(): HTMLEOptionGroupElement;\r\n}\r\n\r\ninterface HTMLEOptionGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-optiongroup\": HTMLEOptionGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-optiongroup\"\r\n})\r\nclass HTMLEOptionGroupElementBase extends HTMLElement implements HTMLEOptionGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n}\r\n\r\nvar HTMLEOptionGroupElement: HTMLEOptionGroupElementConstructor = HTMLEOptionGroupElementBase;","import { HTMLEOptionElement } from \"./Option\";\r\nimport { HTMLEOptionGroupElement } from \"./OptionGroup\";\r\nimport { HTMLESelectElement } from \"./Select\";\r\n\r\nexport { HTMLEOptionCollection };\r\n\r\ninterface HTMLEOptionCollectionConstructor {\r\n    readonly prototype: HTMLEOptionCollection;\r\n    new(root: HTMLESelectElement): HTMLEOptionCollection;\r\n}\r\n\r\ninterface HTMLEOptionCollection {\r\n    length: number;\r\n    item(index: number): HTMLEOptionElement | null;\r\n    namedItem(name: string): HTMLEOptionElement | null;\r\n    values(): IterableIterator<HTMLEOptionElement>;\r\n}\r\n\r\nclass HTMLEOptionCollectionBase implements HTMLEOptionCollection {\r\n    #walker: TreeWalker;\r\n\r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    get value(): string {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        while (currentNode !== null) {\r\n            if (currentNode.selected) {\r\n                return currentNode.value;\r\n            }\r\n            currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    constructor(root: HTMLESelectElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEOptionElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEOptionGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEOptionElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEOptionElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEOptionElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        let currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEOptionElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEOptionElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEOptionElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEOptionCollection: HTMLEOptionCollectionConstructor =  HTMLEOptionCollectionBase;","import { HTMLEActionElement } from \"../../containers/actions/Action\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEOptionElement } from \"./Option\";\r\nimport { HTMLEOptionCollection } from \"./OptionCollection\";\r\nimport { HTMLEOptionGroupElement } from \"./OptionGroup\";\r\n\r\nexport { HTMLESelectElement };\r\n\r\ninterface HTMLESelectElement extends HTMLEActionElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly options: HTMLEOptionCollection;\r\n    readonly activeIndex: number;\r\n    readonly activeOption: HTMLEOptionElement | null;\r\n    readonly selectedIndex: number;\r\n    readonly selectedOption: HTMLEOptionElement | null;\r\n    name: string;\r\n    label: string;\r\n    value: string;\r\n    expanded: boolean;\r\n    expand(): void;\r\n    collapse(): void;\r\n    toggle(force?: boolean): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ninterface HTMLESelectElementConstructor {\r\n    readonly prototype: HTMLESelectElement;\r\n    new(): HTMLESelectElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-select\": HTMLESelectElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-select\"\r\n})\r\nclass HTMLESelectElementBase extends HTMLEActionElement implements HTMLESelectElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly options: HTMLEOptionCollection;\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get selectedIndex(): number {\r\n        return this.#selectedIndex;\r\n    }\r\n\r\n    get activeOption(): HTMLEOptionElement | null {\r\n        return this.options.item(this.#activeIndex) ?? null;\r\n    }\r\n\r\n    get selectedOption(): HTMLEOptionElement | null {\r\n        return this.options.item(this.#selectedIndex) ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"select\", observed: true})\r\n    type!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    #walker: TreeWalker;\r\n    #activeIndex: number;\r\n    #selectedIndex: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"label\", {\r\n                        attributes: {\r\n                            part: \"label\"\r\n                        }\r\n                    }),\r\n                    element(\"output\", {\r\n                        attributes: {\r\n                            part: \"value\"\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"options\"\r\n                },\r\n                children: [\r\n                    element(\"slot\"),\r\n                    element(\"hr\", {\r\n                        attributes: {\r\n                            part: \"separator\"\r\n                        }\r\n                    }),\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"description\"\r\n                        }\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        this.#selectedIndex = -1;\r\n        this.options = new HTMLEOptionCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"value\": {\r\n                const {options} = this;\r\n                const matchingOption = Array.from(options.values()).find(option => option.value == newValue);\r\n                if (matchingOption) {\r\n                    this.#setSelectedOption(matchingOption);\r\n                    this.dispatchEvent(new Event(\"change\", {bubbles: true}));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {expanded, options} = this;\r\n        if (!expanded) {\r\n            this.expanded = true;\r\n            const {selectedIndex} = this;\r\n            this.#positionOptions();\r\n            const option = options.item(selectedIndex);\r\n            if (option) {\r\n                option.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {expanded} = this;\r\n        if (expanded) {\r\n            this.expanded = false;\r\n            this.focus();\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {expanded} = this;\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEOptionElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEOptionGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEOptionElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEOptionElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousOption(item: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEOptionElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextOption(item: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEOptionElement | null>walker.nextNode();\r\n    }\r\n\r\n    #selectOption(option: HTMLEOptionElement): void {\r\n        if (option && !option.disabled) {\r\n            this.value = option.value;\r\n        }\r\n    }\r\n\r\n    #setActiveOption(option: HTMLEOptionElement | null): void {\r\n        const {options, activeOption} = this;\r\n        if (activeOption !== null && activeOption !== option) {\r\n            activeOption.active = false;\r\n        }\r\n        if (option !== null) {\r\n            if (!option.disabled) {\r\n                const {shadowRoot} = this;\r\n                const descriptionPart = shadowRoot.querySelector(\"[part='description']\");\r\n                if (descriptionPart) {\r\n                    descriptionPart.textContent = option.description;\r\n                }\r\n                this.#activeIndex = Array.from(options.values()).indexOf(option);\r\n            }\r\n            option.active = true;\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    #setSelectedOption(option: HTMLEOptionElement | null): void {\r\n        const {options} = this;\r\n        if (option !== null) {\r\n            if (!option.disabled) {\r\n                const {shadowRoot, selectedOption} = this;\r\n                const valuePart = shadowRoot.querySelector(\"[part='value']\");\r\n                if (valuePart) {\r\n                    valuePart.textContent = option.label;\r\n                }\r\n                option.selected = true;\r\n                if (selectedOption) {\r\n                    selectedOption.selected = false;\r\n                }\r\n                this.#selectedIndex = Array.from(options.values()).indexOf(option);\r\n            }\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    #positionOptions(): void {\r\n        const {shadowRoot} = this;\r\n        const options = shadowRoot.querySelector<HTMLElement>(\"[part=options]\")!;\r\n        const {style: optionsStyle} = options;  \r\n        const {bottom: selectBottom, left: selectLeft} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        optionsStyle.setProperty(\"top\", `${selectBottom + scrollY}px`);\r\n        optionsStyle.setProperty(\"left\", `${selectLeft + scrollX}px`);\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEOptionElement) {\r\n            this.#selectOption(target);\r\n            this.collapse();\r\n        }\r\n        else {\r\n            if (target == this) {\r\n                this.toggle();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {expanded} = this;\r\n        if (target instanceof HTMLEOptionElement) {\r\n            if (!expanded) {\r\n                this.expand();\r\n            }\r\n            this.#setActiveOption(target);\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {expanded} = this;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            if (expanded) {\r\n                this.collapse();\r\n            }\r\n            this.#setActiveOption(null);\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {options, activeOption, selectedOption, selectedIndex, expanded} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                if (expanded && activeOption !== null) {\r\n                    const previousOption = this.#previousOption(activeOption) ?? this.#firstOption();\r\n                    if (previousOption) {\r\n                        previousOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else if (!expanded && selectedOption !== null) {\r\n                    const previousOption = this.#previousOption(selectedOption) ?? this.#firstOption();\r\n                    if (previousOption) {\r\n                        this.#selectOption(previousOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (expanded && activeOption !== null) {\r\n                    const nextOption = this.#nextOption(activeOption) ?? this.#lastOption();\r\n                    if (nextOption) {\r\n                        nextOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else if (!expanded && selectedOption !== null) {\r\n                    const nextOption = this.#nextOption(selectedOption) ?? this.#lastOption();\r\n                    if (nextOption) {\r\n                        this.#selectOption(nextOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstOption = this.#firstOption();\r\n                if (firstOption !== null) {\r\n                    if (expanded) {\r\n                        firstOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(firstOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastOption = this.#lastOption();\r\n                if (lastOption !== null) {\r\n                    if (expanded) {\r\n                        lastOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(lastOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (expanded) {\r\n                    this.collapse();\r\n                    if (activeOption !== null) {\r\n                        this.#selectOption(activeOption);\r\n                    }\r\n                }\r\n                else {\r\n                    const option = options.item(selectedIndex);\r\n                    if (option !== null) {\r\n                        option.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.collapse();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            default: {\r\n                const {activeIndex} = this;\r\n                const {length: keyLength} = key;\r\n                if (keyLength == 1) {\r\n                    const keyCode = key.charCodeAt(0);\r\n                    const optionsArray = Array.from(options.values());\r\n                    const firstMatchIndex = optionsArray.findIndex(\r\n                        option_i => option_i.label.toLowerCase().charCodeAt(0) == keyCode\r\n                    );\r\n                    const nextMatchIndex = optionsArray.findIndex(\r\n                        (option_i, i) => option_i.label.toLowerCase().charCodeAt(0) == keyCode && i > activeIndex\r\n                    );\r\n                    const matchIndex = nextMatchIndex > -1 ?\r\n                        nextMatchIndex :\r\n                        firstMatchIndex;\r\n                    const option = options.item(matchIndex);\r\n                    if (option !== null) {\r\n                        option.focus({preventScroll: true});\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEOptionElement) {\r\n            target.focus({preventScroll: true});\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const options = <HTMLEOptionElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEOptionElement\r\n            );\r\n        if (options.length > 0) {\r\n            let selectedOption: HTMLEOptionElement | null = null;\r\n            let {value} = this;\r\n            if (value) {\r\n                selectedOption = options.find(option => option.value == value) ?? null;\r\n            }\r\n            if (selectedOption == null) {\r\n                selectedOption = options.find(option => option.selected) ?? null;\r\n            }\r\n            if (selectedOption == null) {\r\n                selectedOption = options.find(option => option.default) ?? null;\r\n            }\r\n            if (selectedOption == null) {\r\n                selectedOption = this.#firstOption();\r\n            }\r\n            options.forEach(option_i => {\r\n                option_i.selected = option_i == selectedOption\r\n            });\r\n            if (selectedOption !== null) {\r\n                this.#setSelectedOption(selectedOption);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLESelectElement: HTMLESelectElementConstructor = HTMLESelectElementBase;","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEActionElement } from \"../actions/Action\";\r\nimport { HTMLEMenuButtonElement } from \"../menus/MenuButton\";\r\n\r\nexport { HTMLEToolBarItemElement };\r\nexport { EToolBarItem };\r\n\r\ninterface HTMLEToolBarItemElementConstructor {\r\n    readonly prototype: HTMLEToolBarItemElement;\r\n    new(): HTMLEToolBarItemElement;\r\n}\r\n\r\ninterface HTMLEToolBarItemElement extends HTMLEActionElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menubutton: HTMLEMenuButtonElement | null;\r\n    readonly select: HTMLESelectElement | null;\r\n    name: string;\r\n    label: string;\r\n    active: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritem\": HTMLEToolBarItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar slottedKeyboardListeners: WeakMap<HTMLElement, EventListener>;\r\nvar slottedTriggerListeners: WeakMap<HTMLElement, EventListener>;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritem\"\r\n})\r\nclass HTMLEToolBarItemElementBase extends HTMLEActionElement implements HTMLEToolBarItemElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get menubutton(): HTMLEMenuButtonElement | null {\r\n        return this.#menubutton;\r\n    }\r\n    \r\n    get select(): HTMLESelectElement | null {\r\n        return this.#select;\r\n    }\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n    \r\n    #menubutton: HTMLEMenuButtonElement | null;\r\n    #select: HTMLESelectElement | null;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"icon\"\r\n                        }\r\n                    }),\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"label\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\", {\r\n                        attributes: {\r\n                            name: \"select\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\", {\r\n                        attributes: {\r\n                            name: \"menubutton\"\r\n                        }\r\n                    })\r\n                ]\r\n            })\r\n        )\r\n        slottedKeyboardListeners = new WeakMap();\r\n        slottedTriggerListeners = new WeakMap();\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#menubutton = null;\r\n        this.#select = null;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    toggle(): void {\r\n        const {type} = this;\r\n        switch (type) {\r\n            case \"menubutton\": {\r\n                const {menubutton} = this;\r\n                if (menubutton) {\r\n                    menubutton.toggle();\r\n                    if (menubutton.expanded) {\r\n                        menubutton.firstItem?.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"select\": {\r\n                const {select} = this;\r\n                if (select) {\r\n                    select.toggle();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector<HTMLSpanElement>(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"value\": {\r\n                const {type} = this;\r\n                if (type == \"select\") {\r\n                    this.#updateSelectValue();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #updateSelectValue(): void {\r\n        const {select} = this;\r\n        if (select) {\r\n            const {value} = this;\r\n            const {value: selectValue} = select;\r\n            if (selectValue !== value) {\r\n                select.value = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    #addSlottedKeyboardHandler(element: HTMLElement): void {\r\n        const listener = <EventListener>this.#handleSlottedKeyboardEvent.bind(this);\r\n        slottedKeyboardListeners.set(element, listener);\r\n        element.addEventListener(\"keydown\", listener);\r\n    }\r\n\r\n    #removeSlottedKeyboardHandler(element: HTMLElement): void {\r\n        const listener = slottedKeyboardListeners.get(element);\r\n        if (listener) {\r\n            element.removeEventListener(\"keydown\", listener);\r\n        }\r\n    }\r\n\r\n    #addSlottedTriggerHandler(element: HTMLElement): void {\r\n        const listener = <EventListener>this.#handleSlottedTriggerEvent.bind(this);\r\n        slottedTriggerListeners.set(element, listener);\r\n        element.addEventListener(\"trigger\", listener);\r\n    }\r\n\r\n    #removeSlottedTriggerHandler(element: HTMLElement): void {\r\n        const listener = slottedTriggerListeners.get(element);\r\n        if (listener) {\r\n            element.removeEventListener(\"trigger\", listener);\r\n        }\r\n    }\r\n\r\n    #handleSlottedKeyboardEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        switch (key) {\r\n            case \"Enter\":\r\n            case \"Escape\": {\r\n                this.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlottedTriggerEvent(event: KeyboardEvent): void {\r\n        this.focus({preventScroll: true});\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target;\r\n        switch (slotName) {\r\n            case \"menubutton\": {\r\n                let menubutton = this.#menubutton;\r\n                if (menubutton !== null) {\r\n                    this.#removeSlottedTriggerHandler(menubutton);\r\n                    this.#removeSlottedKeyboardHandler(menubutton);\r\n                }\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                menubutton = element instanceof HTMLEMenuButtonElement ? element : null;\r\n                if (menubutton !== null) {\r\n                    this.#addSlottedTriggerHandler(menubutton);\r\n                    this.#addSlottedKeyboardHandler(menubutton);\r\n                }\r\n                this.#menubutton = menubutton;\r\n                break;\r\n            }\r\n            case \"select\": {\r\n                let select = this.#select;\r\n                if (select !== null) {\r\n                    this.#removeSlottedKeyboardHandler(select);\r\n                }\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                select = element instanceof HTMLESelectElement ? element : null;\r\n                if (select !== null) {\r\n                    this.#addSlottedKeyboardHandler(select);\r\n                }\r\n                this.#select = select;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemElement: HTMLEToolBarItemElementConstructor = HTMLEToolBarItemElementBase;\r\n\r\ninterface EToolBarItemConstructor {\r\n    readonly prototype: HTMLEToolBarItemElement;\r\n    new(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n    button(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    checkbox(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    radio(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    menubutton(init: {\r\n        name: string;\r\n        label: string;\r\n        menubutton: HTMLEMenuButtonElement;\r\n    }): HTMLEToolBarItemElement;\r\n    select(init: {\r\n        name: string;\r\n        label: string;\r\n        select: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n}\r\n\r\nvar EToolBarItem = <EToolBarItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menubutton, select} = init;\r\n        if (menubutton) {\r\n            menubutton.slot = \"menubutton\";\r\n        }\r\n        if (select) {\r\n            select.slot = \"select\";\r\n        }\r\n        return element(\"e-toolbaritem\", {\r\n            attributes: {\r\n                tabindex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type\r\n            },\r\n            children: menubutton ? [menubutton] : select ? [select] : undefined,\r\n            listeners: {\r\n                trigger: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEToolBarItemElement.prototype,\r\n        button(init: {\r\n            name: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menubutton(init: {\r\n            name: string;\r\n            label: string;\r\n            menubutton: HTMLEMenuButtonElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"menubutton\"\r\n            });\r\n        },\r\n        select(init: {\r\n            name: string;\r\n            label: string;\r\n            select: HTMLESelectElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"select\"\r\n            });\r\n        },\r\n    }\r\n);","\r\nimport { element, CustomElement, AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEToolBarItemGroupElement };\r\n\r\ninterface HTMLEToolBarItemGroupElementConstructor {\r\n    readonly prototype: HTMLEToolBarItemGroupElement;\r\n    new(): HTMLEToolBarItemGroupElement;\r\n}\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\ninterface HTMLEToolBarItemGroupElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n    disabled: boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritemgroup\": HTMLEToolBarItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritemgroup\"\r\n})\r\nclass HTMLEToolBarItemGroupElementBase extends HTMLElement implements HTMLEToolBarItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    disabled!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            width: max-content;\r\n                            flex-direction: row;\r\n                        }\r\n\r\n                        /*:host([orientation=\"vertical\"]) {\r\n                            flex-direction: column;\r\n                        }\r\n\r\n                        :host([orientation=\"horizontal\"]) {\r\n                            flex-direction: row;\r\n                        }*/\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const label = this.shadowRoot.querySelector<HTMLLabelElement>(\"[part='label']\");\r\n                if (label) {\r\n                    label.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"disabled\": {\r\n                /*this.items.forEach((item) => {\r\n                    item.disabled = newValue !== null;\r\n                });*/\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemGroupElement: HTMLEToolBarItemGroupElementConstructor = HTMLEToolBarItemGroupElementBase;","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEToolBarItemElement } from \"./ToolBarItem\";\r\nimport { HTMLEToolBarItemGroupElement } from \"./ToolBarItemGroup\";\r\n\r\nexport { HTMLEToolBarElement };\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\ninterface HTMLEToolBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    items(): HTMLEToolBarItemElement[];\r\n    readonly activeItem: HTMLEToolBarItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n}\r\n\r\ninterface HTMLEToolbarElementConstructor {\r\n    readonly prototype: HTMLEToolBarElement;\r\n    new(): HTMLEToolBarElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbar\": HTMLEToolBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbar\"\r\n})\r\nclass HTMLEToolBarElementBase extends HTMLElement implements HTMLEToolBarElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get activeItem(): HTMLEToolBarItemElement | null {\r\n        return this.querySelector<HTMLEToolBarItemElement>(\r\n            \"e-toolbaritem[active]\"\r\n        );\r\n    }\r\n\r\n    items(): HTMLEToolBarItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEToolBarItemElement>(\r\n            \":is(:scope, :scope > e-toolbaritemgroup) > e-toolbaritem\"\r\n        ));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    orientation!: ToolBarOrientation;\r\n\r\n    #walker: TreeWalker;\r\n    #activeIndex: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#activeIndex = -1;\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"change\", this.#handleChangeEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEToolBarItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEToolBarItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEToolBarItemElement | null>walker.previousSibling();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEToolBarItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEToolBarItemElement | null): void {\r\n        const {activeItem} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n            this.#activeIndex = this.items().indexOf(item);\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLESelectElement) {\r\n            const item = target.closest(\"e-toolbaritem\");\r\n            if (item !== null) {\r\n                const {select, type} = item;\r\n                if (target == select && select && type == \"select\") {\r\n                    const {value} = item;\r\n                    const {value: selectValue} = select;\r\n                    if (value !== selectValue) {\r\n                        item.value = selectValue;\r\n                        item.trigger();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEToolBarItemElement) {\r\n            const {type} = target;\r\n            switch (type) {\r\n                /*case \"menubutton\": {\r\n                    const {menubutton} = target;\r\n                    if (menubutton) {\r\n                        const {expanded} = menubutton;\r\n                        if (!expanded) {\r\n                            menubutton.expand();\r\n                            menubutton.menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                case \"select\": {\r\n                    const {select} = target;\r\n                    if (select) {\r\n                        select.toggle();\r\n                    }\r\n                    break;\r\n                }*/\r\n                default: {\r\n                    target.trigger();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const activeItem = this.items().find(\r\n            item_i => item_i.contains(<Node>target)\r\n        ) ?? null;\r\n        this.#setActiveItem(activeItem);\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.#setActiveItem(null);\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"menubutton\": {\r\n                            const {menubutton} = activeItem;\r\n                            if (menubutton) {\r\n                                const {expanded} = menubutton;\r\n                                if (!expanded) {\r\n                                    menubutton.expand();\r\n                                    menubutton.firstItem?.focus({preventScroll: true});\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"select\": {\r\n                            const {select} = activeItem;\r\n                            if (select) {\r\n                                select.expand();\r\n                            }\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            activeItem.trigger();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"select\": {\r\n                            activeItem.select?.expand();\r\n                            event.stopPropagation();\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    activeItem.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleTriggerEvent(event: Event): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEToolBarItemElement) {\r\n            const {type, name, value} = target;\r\n            if (type == \"radio\") {\r\n                this.querySelectorAll<HTMLEToolBarItemElement>(\r\n                    `:is(:scope, :scope > e-toolbaritemgroup) > e-toolbaritem[type=radio][name=${name}]`\r\n                ).forEach((radio_i) => {\r\n                    radio_i.checked = radio_i.value == value;\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarElement: HTMLEToolbarElementConstructor = HTMLEToolBarElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLETabPanelElement };\r\n\r\ninterface HTMLETabPanelElementConstructor {\r\n    readonly prototype: HTMLETabPanelElement;\r\n    new(): HTMLETabPanelElement;\r\n}\r\n\r\ninterface HTMLETabPanelElement extends HTMLElement {\r\n    name: string;\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tabpanel\"\r\n})\r\nclass HTMLETabPanelElementBase extends HTMLElement implements HTMLETabPanelElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n        \r\n                        :host([hidden]) {\r\n                            display: none;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n}\r\n\r\nvar HTMLETabPanelElement: HTMLETabPanelElementConstructor = HTMLETabPanelElementBase;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tabpanel\": HTMLETabPanelElement,\r\n    }\r\n}","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLETabPanelElement } from \"./TabPanel\";\r\n\r\nexport { ETabChangeEvent };\r\nexport { HTMLETabElement };\r\n\r\ninterface HTMLETabElementConstructor {\r\n    readonly prototype: HTMLETabElement;\r\n    new(): HTMLETabElement;\r\n}\r\n\r\ninterface HTMLETabElement extends HTMLElement {\r\n    name: string;\r\n    active: boolean;\r\n    disabled: boolean;\r\n    controls: string;\r\n    panel: HTMLETabPanelElement | null;\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ntype ETabChangeEvent = CustomEvent<{\r\n    tab: HTMLETabElement;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_tabchange\": ETabChangeEvent,\r\n    }\r\n\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tab\": HTMLETabElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tab\"\r\n})\r\nclass HTMLETabElementBase extends HTMLElement implements HTMLETabElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    #panel: HTMLETabPanelElement | null;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            user-select: none;\r\n                            white-space: nowrap;\r\n\r\n                            padding: 2px 6px;\r\n                            cursor: pointer;\r\n                        }\r\n                        \r\n                        :host([disabled]) {\r\n                            color: lightgray;\r\n                            pointer-events: none;\r\n                        }\r\n        \r\n                        :host([active]) {\r\n                            background-color: lightgray;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n        this.#panel = null;\r\n    }\r\n\r\n    get panel(): HTMLETabPanelElement | null {\r\n        return this.#panel;\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const panel = document.getElementById(this.controls);\r\n        if (panel !== this.#panel && panel instanceof HTMLETabPanelElement) {\r\n            this.#panel = panel;\r\n        }\r\n        if (panel)  {\r\n            panel.hidden = !this.active;\r\n        }\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"active\":\r\n                if (this.active) {\r\n                    this.dispatchEvent(new CustomEvent(\"e_tabchange\", {detail: {tab: this}, bubbles: true}));\r\n                }\r\n                const panel = document.getElementById(this.controls);\r\n                if (panel !== this.panel && panel instanceof HTMLETabPanelElement) {\r\n                    this.#panel = panel;\r\n                }\r\n                if (panel)  {\r\n                    panel.hidden = !this.active;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabElement: HTMLETabElementConstructor = HTMLETabElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLETabElement } from \"./Tab\";\r\n\r\nexport { HTMLETabListElement };\r\n\r\ninterface HTMLETabListElementConstructor {\r\n    readonly prototype: HTMLETabListElement;\r\n    new(): HTMLETabListElement;\r\n}\r\n\r\ninterface HTMLETabListElement extends HTMLElement {\r\n    readonly activeTab: HTMLETabElement | null;\r\n    tabs: HTMLETabElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tablist\": HTMLETabListElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tablist\"\r\n})\r\nclass HTMLETabListElementBase extends HTMLElement implements HTMLETabListElement {\r\n\r\n    tabs: HTMLETabElement[];\r\n\r\n    #activeIndex: number;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                            position: relative;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n        \r\n        this.tabs = [];\r\n        this.#activeIndex = 1;\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeTab(): HTMLETabElement | null {\r\n        return this.tabs[this.#activeIndex] || null;\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n        const slot = this.shadowRoot!.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", (event) => {\r\n\r\n                const tabs = <HTMLETabElement[]>(<HTMLSlotElement>event.target)\r\n                    .assignedElements()\r\n                    .filter(tab => tab instanceof HTMLETabElement);\r\n                this.tabs = tabs;\r\n                this.#activeIndex = this.tabs.findIndex(tab => tab.active);\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event) => {\r\n            switch (event.key) {\r\n                case \"ArrowUp\":\r\n                    this.focusTabAt((this.activeIndex <= 0) ? this.tabs.length - 1 : this.activeIndex - 1);\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    this.focusTabAt((this.activeIndex >= this.tabs.length - 1) ? 0 : this.activeIndex + 1);\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"Enter\":\r\n                    if (this.activeTab) {\r\n                        this.activateTab(this.activeTab);\r\n                    }\r\n                    break;\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"click\", (event) => {\r\n            const target = event.target;\r\n            if (target instanceof HTMLETabElement) {\r\n                target.active = true;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"e_tabchange\", (event) => {\r\n            const targetIndex = this.tabs.indexOf(event.detail.tab);\r\n            this.#activeIndex = targetIndex;\r\n            this.tabs.forEach((thisTab, thisTabIndex) => {\r\n                if (thisTabIndex !== targetIndex) {\r\n                    thisTab.active = false;\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    focusTabAt(index: number): void {\r\n        const tab = this.tabs[index];\r\n        if (tab) {\r\n            this.#activeIndex = index;\r\n            tab.focus();\r\n        }\r\n    }\r\n\r\n    activateTab(tab: HTMLETabElement) {\r\n        if (this.tabs.includes(tab)) {\r\n            tab.active = true;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabListElement: HTMLETabListElementConstructor = HTMLETabListElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLETreeElement } from \"./Tree\";\r\nimport { HTMLETreeItemElement } from \"./TreeItem\";\r\n\r\nexport { HTMLETreeItemGroupElement };\r\n\r\ninterface HTMLETreeItemGroupElementConstructor {\r\n    readonly prototype: HTMLETreeItemGroupElement;\r\n    new(): HTMLETreeItemGroupElement;\r\n}\r\n\r\ninterface HTMLETreeItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitemgroup\": HTMLETreeItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-treeitemgroup\"\r\n})\r\nclass HTMLETreeItemGroupElementBase extends HTMLElement implements HTMLETreeItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLETreeItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLETreeItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n            item_i.level = (() => {\r\n                let level = -1;\r\n                let closestItem: HTMLETreeItemElement | null = item_i;\r\n                while (closestItem !== null && closestItem.matches(\"e-tree :scope\")) {\r\n                    closestItem = closestItem.parentElement?.closest(\"e-treeitem\") ?? null;\r\n                    level++;\r\n                }\r\n                return level;\r\n            })();\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemGroupElement: HTMLETreeItemGroupElementConstructor = HTMLETreeItemGroupElementBase;","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\nimport { HTMLETreeElement } from \"./Tree\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeItemElement };\r\n\r\ninterface HTMLETreeItemElementConstructor {\r\n    readonly prototype: HTMLETreeItemElement;\r\n    new(): HTMLETreeItemElement;\r\n}\r\n\r\ninterface HTMLETreeItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly group: HTMLETreeItemGroupElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    expanded: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    level: number;\r\n    type: \"leaf\" | \"parent\";\r\n    toggle(force?: boolean): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitem\": HTMLETreeItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-treeitem\"\r\n})\r\nclass HTMLETreeItemElementBase extends HTMLElement implements HTMLETreeItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get group(): HTMLETreeItemGroupElement | null {\r\n        return this.#group;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    expanded!: boolean;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number, observed: true})\r\n    level!: number;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"leaf\"})\r\n    type!: \"leaf\" | \"parent\";\r\n\r\n    #group: HTMLETreeItemGroupElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"arrow\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"group\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.#group = null;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"expanded\": {\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const labelPart = this.shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"level\": {\r\n                this.style.setProperty(\"--level\", `${this.level}`);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        this.expanded = force ?? !this.expanded;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, shiftKey, ctrlKey} = event;\r\n        const {type} = this;\r\n        if (this == target && type == \"parent\" && !(shiftKey || ctrlKey)) {\r\n            this.toggle();\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target;\r\n        switch (slotName) {\r\n            case \"group\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#group = element instanceof HTMLETreeItemGroupElement ? element : null;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemElement: HTMLETreeItemElementConstructor = HTMLETreeItemElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLETreeItemElement } from \"./TreeItem\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeElement };\r\n\r\ninterface HTMLETreeElementConstructor {\r\n    readonly prototype: HTMLETreeElement;\r\n    new(): HTMLETreeElement;\r\n}\r\n\r\ninterface HTMLETreeElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLETreeItemElement>;\r\n    readonly activeItem: HTMLETreeItemElement | null;\r\n    readonly dropTargetItem: HTMLETreeItemElement | null;\r\n    droptarget: boolean;\r\n    name: string;\r\n    selectedItems(): HTMLETreeItemElement[];\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tree\": HTMLETreeElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-tree\"\r\n})\r\nclass HTMLETreeElementBase extends HTMLElement implements HTMLETreeElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLETreeItemElement>;\r\n\r\n    get activeItem(): HTMLETreeItemElement | null {\r\n        return this.querySelector<HTMLETreeItemElement>(\r\n            \"e-treeitem[active]\"\r\n        );\r\n    }\r\n\r\n    get dropTargetItem(): HTMLETreeItemElement | null {\r\n        return this.querySelector<HTMLETreeItemElement>(\r\n            \"e-treeitem[droptarget]\"\r\n        );\r\n    }\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.items = this.getElementsByTagName(\"e-treeitem\");\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    selectedItems(): HTMLETreeItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.#firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLETreeItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLETreeItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLETreeItemElement, to: HTMLETreeItemElement): HTMLETreeItemElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleItem = this.#nextItem(from);\r\n            while (nextVisibleItem && nextVisibleItem !== to) {\r\n                range.push(nextVisibleItem);\r\n                nextVisibleItem = this.#nextItem(nextVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleItem = this.#previousItem(from);\r\n            while (previousVisibleItem && previousVisibleItem !== to) {\r\n                range.push(previousVisibleItem);\r\n                previousVisibleItem = this.#previousItem(previousVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLETreeItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((item_i) => {\r\n            item_i.selected = false;\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLETreeItemElement | null): void {\r\n        const {activeItem} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = item;\r\n            item.active = true;\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n    \r\n    #setDropTargetItem(item: HTMLETreeItemElement | null): void {\r\n        const {dropTargetItem} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n        }\r\n    }\r\n\r\n    #firstItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousSibling = <HTMLETreeItemElement | null>walker.previousSibling();\r\n        return previousSibling ?\r\n            this.#deepestItem(previousSibling) :\r\n            <HTMLETreeItemElement | null>walker.parentNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const {type, expanded} = item;\r\n        return <HTMLETreeItemElement | null>(\r\n            type === \"leaf\" ?\r\n                walker.nextNode() :\r\n                expanded ?\r\n                    walker.nextNode() :\r\n                    walker.nextSibling() ??\r\n                    (walker.parentNode(), walker.nextSibling())\r\n        );\r\n    }\r\n\r\n    #deepestItem(item: HTMLETreeItemElement): HTMLETreeItemElement {\r\n        if (item.expanded) {\r\n            const walker = this.#walker;\r\n            const lastItem = <HTMLETreeItemElement>walker.lastChild();\r\n            if (lastItem) {\r\n                return this.#deepestItem(lastItem);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey, button} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const {selected} = target;\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setSelection(target);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            target.blur();\r\n                        }\r\n                        (!selected) ?\r\n                            this.#addToSelection(target) :\r\n                            this.#removeFromSelection(target);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const {activeItem} = this\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                target\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(target);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const {type} = target;\r\n            if (type == \"parent\") {\r\n                target.toggle(true);\r\n            }\r\n            this.#setDropTargetItem(target);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!this.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        const {root} = walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? root, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? root, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(\r\n                                firstItem,\r\n                                this.#deepestItem(lastItem)\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    if (activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                    else {\r\n                        const walker = this.#walker;\r\n                        const parentItem = <HTMLETreeItemElement>walker.parentNode();\r\n                        if (parentItem) {\r\n                            parentItem.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    if (!activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.#setActiveItem(null);\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            this.#setActiveItem(target);\r\n            this.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLETreeItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLETreeItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n            item_i.level = 0;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLETreeElement: HTMLETreeElementConstructor = HTMLETreeElementBase;","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEToolBarElement } from \"../toolbars/ToolBar\";\r\n\r\nexport { HTMLEListItemElement };\r\n\r\ninterface HTMLEListItemElementConstructor {\r\n    readonly prototype: HTMLEListItemElement;\r\n    new(): HTMLEListItemElement;\r\n}\r\n\r\ninterface HTMLEListItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly badge: HTMLSpanElement | null;\r\n    readonly toolbar: HTMLEToolBarElement | null;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitem\": HTMLEListItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-listitem\"\r\n})\r\nclass HTMLEListItemElementBase extends HTMLElement implements HTMLEListItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    get badge(): HTMLElement | null {\r\n        return this.#badge;\r\n    }\r\n\r\n    get toolbar(): HTMLEToolBarElement | null {\r\n        return this.#toolbar;\r\n    }\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    #badge: HTMLElement | null;\r\n    #toolbar: HTMLEToolBarElement | null;\r\n    #menu: HTMLEMenuElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#badge = null;\r\n        this.#menu = null;\r\n        this.#toolbar = null;\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this))\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"toolbar\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#toolbar = element instanceof HTMLEToolBarElement ? element : null;\r\n                break;\r\n            }\r\n            case \"badge\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#badge = element instanceof HTMLSpanElement ? element : null;\r\n                break;\r\n            }\r\n            case \"menu\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#menu = element instanceof HTMLEMenuElement ? element : null;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEListItemElement: HTMLEListItemElementConstructor = HTMLEListItemElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEListItemElement } from \"./ListItem\";\r\n\r\nexport { HTMLEListItemGroupElement };\r\n\r\ninterface HTMLEListItemGroupElementConstructor {\r\n    readonly prototype: HTMLEListItemGroupElement;\r\n    new(): HTMLEListItemGroupElement;\r\n}\r\n\r\ninterface HTMLEListItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitemgroup\": HTMLEListItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-listitemgroup\"\r\n})\r\nclass HTMLEListItemGroupElementBase extends HTMLElement implements HTMLEListItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEListItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEListItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEListItemGroupElement: HTMLEListItemGroupElementConstructor = HTMLEListItemGroupElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEListItemElement } from \"./ListItem\";\r\nimport { HTMLEListItemGroupElement } from \"./ListItemGroup\";\r\n\r\nexport { HTMLEListElement };\r\n\r\ninterface HTMLEListElementConstructor {\r\n    readonly prototype: HTMLEListElement;\r\n    new(): HTMLEListElement;\r\n}\r\n\r\ninterface HTMLEListElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEListItemElement>;\r\n    readonly activeItem: HTMLEListItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    droptarget: boolean;\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    selectedItems(): HTMLEListItemElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-list\": HTMLEListElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-list\"\r\n})\r\nclass HTMLEListElementBase extends HTMLElement implements HTMLEListElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEListItemElement>;\r\n\r\n    get dropTargetItem(): HTMLEListItemElement | null {\r\n        return this.items[this.#dropTargetIndex] ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    #dropTargetIndex: number;\r\n    #activeIndex: number;\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        this.#dropTargetIndex = -1;\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.items = this.getElementsByTagName(\"e-listitem\");\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEListItemElement | null {\r\n        return this.items[this.activeIndex] ?? null;\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    selectedItems(): HTMLEListItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.#firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEListItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEListItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLEListItemElement, to: HTMLEListItemElement): HTMLEListItemElement[] {\r\n        const items = Array.from(this.items);\r\n        const fromIndex = items.indexOf(from);\r\n        const toIndex = items.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return items.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        selectedItems.forEach((item_i) => {\r\n            if (item_i.selected) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEListItemElement | null): void {\r\n        const {activeItem, items} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n            item.tabIndex = 0;\r\n            this.#activeIndex = Array.from(items).indexOf(item);\r\n        }\r\n    }\r\n\r\n    #setDropTargetItem(item: HTMLEListItemElement | null): void {\r\n        const {dropTargetItem, items} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n            this.#dropTargetIndex = Array.from(items).indexOf(item);\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n            this.#dropTargetIndex = -1;\r\n        }\r\n    }\r\n\r\n    #firstItem(): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLEListItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLEListItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEListItemElement): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEListItemElement | null>walker.previousNode();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEListItemElement): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const nextItem = <HTMLEListItemElement | null>walker.nextNode();\r\n        return nextItem;\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent) {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n            target.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey} = event;\r\n        const selectedItems = this.selectedItems();\r\n        if (target instanceof HTMLEListItemElement) {\r\n            if (!shiftKey && !ctrlKey) {\r\n                this.#setSelection(target);\r\n            }\r\n            else if (ctrlKey) {\r\n                (!target.selected) ?\r\n                    this.#addToSelection(target) :\r\n                    this.#removeFromSelection(target);\r\n                event.stopPropagation();\r\n            }\r\n            else if (shiftKey) {\r\n                const lastSelectedItem = selectedItems[selectedItems.length - 1];\r\n                if (lastSelectedItem) {\r\n                    const range = this.#getItemsRange(\r\n                        lastSelectedItem,\r\n                        target\r\n                    );\r\n                    if (range) {\r\n                        if (selectedItems.includes(target)) {\r\n                            this.#removeFromSelection(...range);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(...range);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.#setSelection(target);\r\n                }\r\n                event.stopPropagation();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            this.#setDropTargetItem(target);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n    \r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n        const relatedTargetHost =\r\n            relatedTargetRoot instanceof ShadowRoot ?\r\n            relatedTargetRoot.host :\r\n            relatedTarget;\r\n        if (!this.contains(<Node>relatedTargetHost)) {\r\n            this.#setDropTargetItem(null);\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    const walker = this.#walker;\r\n                    const {root} = walker;\r\n                    const firstItem = <HTMLEListItemElement>(\r\n                        walker.currentNode = walker.parentNode() ?? root, walker.firstChild()\r\n                    );\r\n                    const lastItem = <HTMLEListItemElement>(\r\n                        walker.currentNode = walker.parentNode() ?? root, walker.lastChild()\r\n                    );\r\n                    const range = this.#getItemsRange(\r\n                        firstItem,\r\n                        lastItem\r\n                    );\r\n                    if (range) {\r\n                        this.#setSelection(...range);\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                const {activeItem} = this;\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.#setActiveItem(null);\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            this.#setActiveItem(target);\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (!this.#onSelection) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEListItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEListItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEListElement: HTMLEListElementConstructor = HTMLEListElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEDraggableElement };\r\n\r\ninterface HTMLEDraggableElementConstructor {\r\n    readonly prototype: HTMLEDraggableElement;\r\n    new(): HTMLEDraggableElement;\r\n}\r\n\r\ninterface HTMLEDraggableElement extends HTMLElement {\r\n    readonly referee: this | null;\r\n    readonly references: this[];\r\n    selected: boolean;\r\n    dragged: boolean;\r\n    dragovered: boolean;\r\n\r\n    connectedCallback(): void;\r\n    disconnectedCallback(): void;\r\n    getReference(): this;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-draggable\": HTMLEDraggableElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-draggable\"\r\n})\r\nclass HTMLEDraggableElementBase extends HTMLElement implements HTMLEDraggableElement {\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    dragovered!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    dragged!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    #referee: this | null;\r\n    readonly references: this[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            padding: 3px 4px;\r\n                            cursor: pointer;\r\n                            white-space: nowrap;\r\n                            border-radius: 4px;\r\n                            border: 1px solid black;\r\n                            user-select: none;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                            color: lightgray;\r\n                            border-color: lightgray;\r\n                        }\r\n        \r\n                        :host([selected]:active) {\r\n                            cursor: grabbing;\r\n                        }\r\n                        \r\n                        :host([selected]) {\r\n                            cursor: grab;\r\n                            font-weight: bold;\r\n                            outline: 1px auto black;\r\n                        }\r\n        \r\n                        :host([dragovered]) {\r\n                            border-style: dotted;\r\n                        }\r\n                        \r\n                        [part=\"container\"] {\r\n                            display: flex;\r\n                            align-items: center;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"container\"\r\n                },\r\n                children: [\r\n                    element(\"slot\", {\r\n                        children: [\r\n                            \"&nbsp;\"\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.references = [];\r\n        this.#referee = null;\r\n    }\r\n\r\n    get referee(): this | null {\r\n        return this.#referee;\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n        this.draggable = true;\r\n    }\r\n\r\n    disconnectedCallback(): void {\r\n        if (this.referee) {\r\n            const thisRefIndex = this.referee.references.indexOf(this);\r\n            if (thisRefIndex > -1) {\r\n                this.referee.references.splice(thisRefIndex, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    getReference(): this {\r\n        const reference = <this>this.cloneNode(true);\r\n        reference.#referee = this;\r\n        return reference;\r\n    }\r\n}\r\n\r\nvar HTMLEDraggableElement: HTMLEDraggableElementConstructor = HTMLEDraggableElementBase","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\n\r\nexport { HTMLEDragzoneElement };\r\n\r\ninterface HTMLEDragzoneElementConstructor {\r\n    readonly prototype: HTMLEDragzoneElement;\r\n    new(): HTMLEDragzoneElement\r\n}\r\n\r\ninterface HTMLEDragzoneElement extends HTMLElement {\r\n    readonly draggables: HTMLEDraggableElement[];\r\n    readonly selectedDraggables: HTMLEDraggableElement[];\r\n    disabled: boolean;\r\n    selectDraggable(draggable: HTMLEDraggableElement): void;\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void;\r\n    clearSelection(): void;\r\n    connectedCallback(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dragzone\": HTMLEDragzoneElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dragzone\"\r\n})\r\nclass HTMLEDragzoneElementBase extends HTMLElement implements HTMLEDragzoneElement {\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    #draggables: HTMLEDraggableElement[];\r\n    #selectedDraggables: HTMLEDraggableElement[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                        }\r\n        \r\n                        [part=\"container\"] {\r\n                            position: relative;\r\n                            display: flex;\r\n                            flex-direction: column;\r\n                            padding-left: 2px;\r\n                            padding-right: 2px;\r\n                        }\r\n        \r\n                        ::slotted(*) {\r\n                            margin-top: 2px;\r\n                            margin-bottom: 2px;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"container\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n        this.#draggables = [];\r\n        this.#selectedDraggables = [];\r\n    }\r\n\r\n    get draggables(): HTMLEDraggableElement[] {\r\n        return this.#draggables;\r\n    }\r\n\r\n    get selectedDraggables(): HTMLEDraggableElement[] {\r\n        return this.#selectedDraggables;\r\n    }\r\n\r\n    selectDraggable(draggable: HTMLEDraggableElement): void {\r\n        if (!this.selectedDraggables.includes(draggable)) {\r\n            this.selectedDraggables.push(draggable);\r\n        }\r\n        if (!draggable.selected) {\r\n            draggable.selected = true;\r\n        }\r\n    }\r\n\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void {\r\n        const index = this.selectedDraggables.indexOf(draggable);\r\n        if (index > -1) {\r\n            if (draggable.selected) {\r\n                draggable.selected = false;\r\n            }\r\n            this.selectedDraggables.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.selectedDraggables.forEach((draggable) => {\r\n            draggable.selected = false;\r\n        });\r\n        this.#selectedDraggables = [];\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const draggables = slot.assignedElements().filter(\r\n                    elem => elem instanceof HTMLEDraggableElement\r\n                ) as HTMLEDraggableElement[];\r\n                this.#draggables = draggables;\r\n                this.draggables.forEach((draggable) => {\r\n                    draggable.draggable = true;\r\n                });\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Escape\":\r\n                    this.clearSelection();\r\n                    this.focus();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragstart\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                this.selectedDraggables.forEach((thisSelectedDraggable) => {\r\n                    thisSelectedDraggable.dragged = true;\r\n                });\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", this.id);\r\n                }\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event) => {\r\n            const dataTransfer = event.dataTransfer;\r\n            if (dataTransfer) {\r\n                dataTransfer.dropEffect = \"none\";\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"dragend\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                const thisDraggedDraggables = this.draggables.filter(draggable => draggable.dragged);\r\n                thisDraggedDraggables.forEach((thisDraggedDraggable) => {\r\n                    thisDraggedDraggable.dragged = false;\r\n                });\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            if (!this.contains(relatedTarget)) {\r\n                this.clearSelection();\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button == 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        if (!target.selected) {\r\n                            this.clearSelection();\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                    else if (event.ctrlKey) {\r\n                        (!target.selected) ?\r\n                            this.selectDraggable(target) :\r\n                            this.unselectDraggable(target);\r\n                    }\r\n                    else if (event.shiftKey) {\r\n                        if (this.selectedDraggables.length > 0) {\r\n                            const targetIndex = this.draggables.indexOf(target);\r\n                            const firstIndex = this.draggables.indexOf(this.selectedDraggables[0]);\r\n                            const direction = Math.sign(targetIndex - firstIndex);\r\n                            const fromIndex = (direction > 0) ? 0 : this.draggables.length - 1;\r\n                            const toIndex = (direction > 0) ? this.draggables.length - 1 : 0;\r\n                            const startRangeIndex = (direction > 0) ? firstIndex : targetIndex;\r\n                            const endRangeIndex = (direction > 0) ? targetIndex : firstIndex;\r\n                            for (let index = fromIndex; index !== (toIndex + direction); index += direction) {\r\n                                (index >= startRangeIndex && index <= endRangeIndex) ? \r\n                                    this.selectDraggable(this.draggables[index]) :\r\n                                    this.unselectDraggable(this.draggables[index]);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.clearSelection();\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mouseup\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button == 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        this.draggables.forEach((thisDraggable) => {\r\n                            if (thisDraggable !== target) {\r\n                                this.unselectDraggable(thisDraggable);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEDragzoneElement: HTMLEDragzoneElementConstructor = HTMLEDragzoneElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\nimport { HTMLEDragzoneElement } from \"./Dragzone\";\r\n\r\nexport { HTMLEDropzoneElement };\r\nexport { EDataChangeEvent };\r\n\r\ninterface HTMLEDropzoneElementConstructor {\r\n    readonly prototype: HTMLEDropzoneElement;\r\n    new(): HTMLEDropzoneElement;\r\n}\r\n\r\ninterface HTMLEDropzoneElement extends HTMLEDragzoneElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    dragovered: DropzoneDragoveredType | null;\r\n    name: string;\r\n    multiple: boolean;\r\n    placeholder: string;\r\n\r\n    droptest: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => void) | null;\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): void;\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean): void;\r\n\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ntype DropzoneDragoveredType = \"self\" | \"draggable\" | \"appendarea\";\r\n\r\ntype EDataChangeEvent = CustomEvent<{\r\n    action: \"insert\" | \"remove\";\r\n    draggables: HTMLEDraggableElement[];\r\n    position: number;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dropzone\": HTMLEDropzoneElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"e_datachange\": EDataChangeEvent,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dropzone\"\r\n})\r\nclass HTMLEDropzoneElementBase extends HTMLEDragzoneElement implements HTMLEDropzoneElement {\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    dragovered!: DropzoneDragoveredType | null;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    placeholder!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    multiple!: boolean;\r\n\r\n    droptest!: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => boolean) | null;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.shadowRoot!.querySelector(\"style\")!.append(/*css*/`\r\n            :host {\r\n                border: 1px dashed gray;\r\n            }\r\n\r\n            :host(:not([multiple]):not(:empty)) [part=\"appendarea\"],\r\n            :host(:not(:empty):not([dragovered])) [part=\"appendarea\"] {\r\n                display: none !important;\r\n            }\r\n\r\n            [part=\"appendarea\"] {\r\n                display: block;\r\n                margin: 2px;\r\n                border-radius: 4px;\r\n                border: 1px dotted black;\r\n            }\r\n\r\n            :host(:not([dragovered=\"appendarea\"])) [part=\"appendarea\"] {\r\n                border-color: transparent;\r\n            }\r\n            \r\n            [part=\"placeholder\"] {\r\n                display: inline-block;\r\n                color: grey;\r\n                pointer-events: none;\r\n                user-select: none;\r\n            }\r\n        `);\r\n\r\n        this.shadowRoot.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"appendarea\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"placeholder\"\r\n                        },\r\n                        children: [\r\n                            \"&nbsp;\"\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.droptest = null;\r\n    }\r\n    \r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        const appendAreaPart = this.shadowRoot!.querySelector<HTMLDivElement>(\"[part='appendarea']\");\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Delete\":\r\n                    if (this == event.target) {\r\n                        this.removeDraggables();\r\n                    }\r\n                    else {\r\n                        this.removeDraggables(draggable => draggable.selected);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragover\", (event: DragEvent) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragover\", (event) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragenter\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                target.dragovered = true;\r\n                this.dragovered = \"draggable\";\r\n            }\r\n            else {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragenter\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"appendarea\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event: DragEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                if (target == this) {\r\n                    if (appendAreaPart) {\r\n                        this.dragovered = \"self\";\r\n                    }\r\n                    if (!this.draggables.includes(relatedTarget)) {\r\n                        this.dragovered = null;\r\n                    }\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                }\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragleave\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n        \r\n        this.addEventListener(\"drop\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                let dropIndex = this.draggables.length;\r\n                if (target == this) {\r\n                    this.dragovered = null;\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                    dropIndex = this.draggables.indexOf(target);\r\n                }\r\n\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    const dragzoneId = dataTransfer.getData(\"text/plain\");\r\n                    const dragzone = document.getElementById(dragzoneId);\r\n                    if (dragzone instanceof HTMLEDragzoneElement) {\r\n                        const selectedDraggables = dragzone.selectedDraggables;\r\n                        if (selectedDraggables) {\r\n                            selectedDraggables.forEach((selectedDraggable) => {\r\n                                selectedDraggable.dragged = false;\r\n                            });\r\n                            if (dragzone instanceof HTMLEDropzoneElement) {\r\n                                dragzone.removeDraggables((draggable) => selectedDraggables.includes(draggable));\r\n                            }\r\n                            dragzone.clearSelection();\r\n                            this.addDraggables(selectedDraggables, dropIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.dragovered = null;\r\n            event.preventDefault();\r\n        });\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"placeholder\": {\r\n                const placeholderPart = this.shadowRoot.querySelector(\"[part='placeholder']\");\r\n                if (placeholderPart) {\r\n                    placeholderPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): HTMLEDraggableElement[] | null {\r\n        if (draggables.length > 0) {\r\n            let dataTransferSuccess = true;\r\n            if (this.droptest) {\r\n                dataTransferSuccess = this.droptest(this, draggables);\r\n            }\r\n            \r\n            let newDraggables: HTMLEDraggableElement[] = [];\r\n            let insertionPosition = -1;\r\n            if (dataTransferSuccess) {\r\n                if (this.multiple) {\r\n                    draggables.forEach((draggable) => {\r\n                        let newDraggable = draggable.getReference();\r\n                        if (position > -1 && position < this.draggables.length) {\r\n                            this.draggables[position].insertAdjacentElement(\"beforebegin\", newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? position : insertionPosition;\r\n                        }\r\n                        else {\r\n                            this.appendChild(newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? this.draggables.length - 1 : insertionPosition;\r\n                        }\r\n                        newDraggables.push(newDraggable);\r\n                    });\r\n                }\r\n                else {\r\n                    let newDraggable = draggables[0].getReference();\r\n                    if (this.draggables.length > 0) {\r\n                        this.replaceChild(newDraggable, this.draggables[0]);\r\n                    }\r\n                    else {\r\n                        this.appendChild(newDraggable);\r\n                    }\r\n                    newDraggables.push(newDraggable);\r\n                    insertionPosition = 0;\r\n                }\r\n            }\r\n            \r\n            const slot = this.shadowRoot?.querySelector(\"slot\");\r\n            if (slot) {\r\n                slot.addEventListener(\"slotchange\", () => {\r\n                    this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                        bubbles: true,\r\n                        detail: {\r\n                            action: \"insert\",\r\n                            draggables: newDraggables,\r\n                            position: insertionPosition\r\n                        }\r\n                    }));\r\n                }, {once: true});\r\n            }\r\n            return newDraggables;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean = () => true) {\r\n        let toRemove = this.draggables.filter(\r\n            (value: HTMLEDraggableElement, index: number) => {\r\n                return predicate(value, index);\r\n            }\r\n        );\r\n        let atPosition = this.draggables.indexOf(toRemove[0]);\r\n        toRemove.forEach((draggable) => {\r\n            draggable.remove(); \r\n        });\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                    bubbles: true,\r\n                    detail: {\r\n                        action: \"remove\",\r\n                        draggables: toRemove,\r\n                        position: atPosition\r\n                    }\r\n                }));\r\n            }, {once: true});\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEDropzoneElement: HTMLEDropzoneElementConstructor = HTMLEDropzoneElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEDialogElement };\r\n\r\ninterface HTMLEDialogElementConstructor {\r\n    readonly prototype: HTMLEDialogElement;\r\n    new(): HTMLEDialogElement;\r\n}\r\n\r\ntype DialogElementType = \"confirm\" | \"alert\";\r\n\r\ninterface HTMLEDialogElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: DialogElementType;\r\n    open(): void;\r\n    close(): void;\r\n    cancel(): void;\r\n    confirm(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dialog\": HTMLEDialogElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"open\": Event,\r\n        \"close\": Event,\r\n        \"cancel\": Event,\r\n        \"confirm\": Event,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dialog\"\r\n})\r\nclass HTMLEDialogElementBase extends HTMLElement implements HTMLEDialogElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: DialogElementType;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            padding: 6px;\r\n                            background-color: white;\r\n        \r\n                            -webkit-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            -moz-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                        }\r\n        \r\n                        button {\r\n                            cursor: pointer;\r\n                        }\r\n        \r\n                        [part=\"actions\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part=\"header\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part=\"button\"]:not(:first-child) {\r\n                            margin-left: 4px;\r\n                        }\r\n        \r\n                        :host([type=\"confirm\"]) [part=\"ok-button\"] {\r\n                            display: none !important;\r\n                        }\r\n        \r\n                        :host([type=\"alert\"]) [part=\"cancel-button\"],\r\n                        :host([type=\"alert\"]) [part=\"confirm-button\"] {\r\n                            display: none !important;\r\n                        }\r\n                    `\r\n                    ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"header\"\r\n                },\r\n                children: [\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button close-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"x\"\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"hr\", {\r\n                attributes: {\r\n                    part: \"separator\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"body\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"hr\", {\r\n                attributes: {\r\n                    part: \"separator\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"actions\",\r\n                },\r\n                children: [\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button cancel-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"Cancel\"\r\n                        ]\r\n                    }),\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button confirm-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"Confirm\"\r\n                        ]\r\n                    }),\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button ok-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"OK\"\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n        );\r\n    }\r\n\r\n    connectedCallback() {\r\n        this.shadowRoot.addEventListener(\"click\", this);\r\n    }\r\n\r\n    handleEvent(event: Event) {\r\n        const {type, target} = event;\r\n        switch (type) {\r\n            case \"click\":\r\n                const {part} = <Element>target;\r\n                if (part.contains(\"close-button\") || part.contains(\"cancel-button\")) {\r\n                    this.cancel();\r\n                }\r\n                else if (part.contains(\"confirm-button\") || part.contains(\"ok-button\")) {\r\n                    this.confirm();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    open(): void {\r\n        this.dispatchEvent(new CustomEvent(\"open\", {bubbles: true}));\r\n    }\r\n\r\n    close(): void {\r\n        this.dispatchEvent(new CustomEvent(\"close\", {bubbles: true}));\r\n    }\r\n\r\n    cancel(): void {\r\n        this.dispatchEvent(new CustomEvent(\"cancel\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n\r\n    confirm(): void {\r\n        this.dispatchEvent(new CustomEvent(\"confirm\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n}\r\n\r\nvar HTMLEDialogElement: HTMLEDialogElementConstructor = HTMLEDialogElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEHandleElement };\r\n\r\ninterface HTMLEHandleElementConstructor {\r\n    readonly prototype: HTMLEHandleElement;\r\n    new(): HTMLEHandleElement;\r\n}\r\n\r\ninterface HTMLEHandleElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    controls: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-handle\": HTMLEHandleElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"move\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-handle\"\r\n})\r\nclass HTMLEHandleElementBase extends HTMLElement implements HTMLEHandleElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                            \r\n                            width: 24px;\r\n                            height: 12px;\r\n                            \r\n                            background-color: rgb(0, 128, 255);\r\n\r\n                            -webkit-mask-image: url(\"assets/dots.png\");\r\n                            mask-image: url(\"assets/dots.png\");\r\n\r\n                            -webkit-mask-repeat: repeat;\r\n                            mask-repeat: repeat;\r\n                            cursor: move;\r\n                        }\r\n                    `\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"controls\": {\r\n                const {controls} = this;\r\n                this.#target = document.getElementById(controls);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        this.#target = document.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            const target = this.#target;\r\n            if (target !== null) {\r\n                const targetComputedStyle = window.getComputedStyle(target);\r\n                const {movementX, movementY} = event;\r\n                const {width: rectWidth, height: rectHeight} = target.getBoundingClientRect();\r\n                const outerElement = target.parentElement ?? document.body;\r\n                const {\r\n                    left: outerRectLeft, right: outerRectRight,\r\n                    top: outerRectTop, bottom: outerRectBottom\r\n                } = outerElement.getBoundingClientRect();\r\n                const left = parseFloat(targetComputedStyle.getPropertyValue(\"left\"));\r\n                const newLeft = Math.max(outerRectLeft, Math.min(Math.trunc(left + movementX), outerRectRight - rectWidth));\r\n                const top = parseFloat(targetComputedStyle.getPropertyValue(\"top\"));\r\n                const newTop = Math.max(outerRectTop, Math.min(Math.trunc(top + movementY), outerRectBottom - rectHeight));\r\n                target.style.setProperty(\"left\", `${newLeft}px`);\r\n                target.style.setProperty(\"top\", `${newTop}px`);\r\n                this.dispatchEvent(new CustomEvent(\"move\"));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEHandleElement: HTMLEHandleElementConstructor = HTMLEHandleElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEHeightSashElement };\r\n\r\ninterface HTMLEHeightSashElementConstructor {\r\n    readonly prototype: HTMLEHeightSashElement;\r\n    new(): HTMLEHeightSashElement;\r\n}\r\n\r\ninterface HTMLEHeightSashElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    controls: string;\r\n    growdir: \"top\" | \"bottom\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-hsash\": HTMLEHeightSashElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"resize\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-hsash\"\r\n})\r\nclass HTMLEHeightSashElementBase extends HTMLElement implements HTMLEHeightSashElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"top\"})\r\n    growdir!: \"top\" | \"bottom\";\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n    #queuedPointerCallback: FrameRequestCallback | null;\r\n    #pointerMovement: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            width: 100%;\r\n        \r\n                            max-height: 4px;\r\n                            height: 4px;\r\n                            min-height: 4px;\r\n        \r\n                            margin-top: -2px;\r\n                            margin-bottom: -2px;\r\n                            \r\n                            background-color: rgb(135, 206, 250);\r\n                            cursor: ns-resize;\r\n        \r\n                            transition-property: opacity;\r\n                            transition-delay: 0.2s;\r\n                            transition-duration: 0.2s;\r\n                            transition-timing-function: ease-out;\r\n                            opacity: 0;\r\n                        }\r\n        \r\n                        :host(:active),\r\n                        :host(:hover) {\r\n                            opacity: 1;\r\n                        }\r\n                    `\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#queuedPointerCallback = null;\r\n        this.#pointerMovement = 0;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        const rootNode = <ShadowRoot | Document>this.getRootNode();\r\n        this.#target = rootNode.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            if (this.#queuedPointerCallback == null) {\r\n                this.#pointerMovement = event.movementY;\r\n                this.#queuedPointerCallback = this.#pointerMoveCallback.bind(this);\r\n                requestAnimationFrame(this.#queuedPointerCallback);\r\n            }\r\n            else {\r\n                this.#pointerMovement += event.movementY;\r\n            }\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const {growdir} = this;\r\n            const movementY = this.#pointerMovement;\r\n            const height = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            const newHeight = Math.trunc(height + (growdir == \"top\" ? -1 : 1) * movementY);\r\n            target.style.setProperty(\"height\", `${newHeight}px`);\r\n            const computedNewHeight = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            target.style.setProperty(\"height\", `${computedNewHeight}px`);\r\n            this.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        this.#queuedPointerCallback = null;\r\n    }\r\n}\r\n\r\nvar HTMLEHeightSashElement: HTMLEHeightSashElementConstructor = HTMLEHeightSashElementBase;","import { CustomElement, AttributeProperty } from \"../Element\";\r\n\r\nexport { HTMLEImportElement };\r\n\r\ninterface HTMLEImportElementConstructor {\r\n    readonly prototype: HTMLEImportElement;\r\n    new(): HTMLEImportElement;\r\n}\r\n\r\ninterface HTMLEImportElement extends HTMLElement {\r\n    src: string;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-import\": HTMLEImportElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"load\": Event;\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-import\"\r\n})\r\nclass HTMLEImportElementBase extends HTMLElement implements HTMLEImportElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    src!: string;\r\n    \r\n    connectedCallback(): void {\r\n        const {src} = this;\r\n        if (src) {\r\n            this.#importRequest(src);\r\n        }\r\n    }\r\n\r\n    async #importRequest(src: string): Promise<void> {\r\n        this.outerHTML = await fetch(src).then((response: Response) => {\r\n            if (response.ok) {\r\n                return response.text();\r\n            }\r\n            else {\r\n                throw new Error(response.statusText);\r\n            }\r\n        });\r\n        this.dispatchEvent(new Event(\"load\", {bubbles: true}));\r\n    }\r\n}\r\n\r\nvar HTMLEImportElement: HTMLEImportElementConstructor = HTMLEImportElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLELoaderElement };\r\n\r\ninterface HTMLELoaderElementConstructor {\r\n    readonly prototype: HTMLELoaderElement;\r\n    new(): HTMLELoaderElement;\r\n}\r\n\r\ninterface HTMLELoaderElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    type: \"bar\" | \"circle\";\r\n    promise: Promise<any> | null;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-loader\": HTMLELoaderElement,\r\n    }\r\n}\r\n\r\nvar barShadowTemplate: HTMLTemplateElement;\r\nvar circleShadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-loader\"\r\n})\r\nclass HTMLELoaderElementBase extends HTMLElement implements HTMLELoaderElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String, defaultValue: \"bar\", observed: true})\r\n    type!: \"bar\" | \"circle\";\r\n    \r\n    #promise: Promise<any> | null;\r\n\r\n    static {\r\n        const commonStyle = element(\"style\", {\r\n            children: [\r\n                /*css*/`\r\n                    :host {\r\n                        display: inline-block;\r\n                        --default-loader-color: rgb(0, 128, 255);\r\n                        --default-animation-duration: 2s;\r\n                    }\r\n                `\r\n            ]\r\n        });\r\n        const barStyle = commonStyle.cloneNode(true);\r\n        const circleStyle = commonStyle.cloneNode(true);\r\n        barStyle.textContent += /*css*/`\r\n            :host {\r\n                display: block;\r\n            }\r\n\r\n            [part=\"bar\"] {\r\n                position: relative;\r\n                display: block;\r\n                overflow: hidden;\r\n                height: 6px;\r\n                width: 100%;\r\n            }\r\n\r\n            [part=\"slider\"] {\r\n                display: flex;\r\n                position: absolute;\r\n                width: 100%;\r\n                height: 100%;\r\n                animation-name: slider;\r\n            }\r\n\r\n            [part=\"slider\"],\r\n            [part=\"cursor\"] {\r\n                border-radius: 4px;\r\n                will-change: transform;\r\n                animation-duration: var(--animation-duration, var(--default-animation-duration));\r\n                animation-timing-function: linear;\r\n                animation-iteration-count: infinite;\r\n            }\r\n\r\n            [part=\"cursor\"] {\r\n                display: block;\r\n                width: 128px;\r\n                background-color: var(--loader-color, var(--default-loader-color));\r\n                animation-name: cursor;\r\n            }\r\n\r\n            [part=\"bar\"]:after {\r\n                animation-name: shine;\r\n                animation-duration: var(--animation-duration, var(--default-animation-duration));\r\n                animation-iteration-count: infinite;\r\n                animation-fill-mode: forwards;  \r\n                content: \"\";\r\n                position: absolute;\r\n                left: -100%;\r\n                width: 100%;\r\n                height: 100%;\r\n                top: 0;\r\n                opacity: 0;\r\n                \r\n                background: rgba(255, 255, 255, 0.13);\r\n                background: linear-gradient(\r\n                    to right, \r\n                    rgba(255, 255, 255, 0) 0%,\r\n                    rgba(255, 255, 255, 0.1) 10%,\r\n                    rgba(255, 255, 255, 0.9) 80%,\r\n                    rgba(255, 255, 255, 0) 100%\r\n                );\r\n            }\r\n\r\n            @keyframes shine {\r\n                25% {\r\n                    opacity: 1;\r\n                    left: -100%;\r\n                }\r\n                100% {\r\n                    opacity: 0;\r\n                    left: 100%;\r\n                }\r\n            }\r\n\r\n            @keyframes slider {\r\n                0% {\r\n                    transform: translateX(0%);\r\n                }\r\n                100% {\r\n                    transform: translateX(100%);\r\n                }\r\n            }\r\n\r\n            @keyframes cursor {\r\n                0% {\r\n                    transform: translateX(-100%);\r\n                }\r\n                100% {\r\n                    transform: translateX(100%);\r\n                }\r\n            }\r\n        `;\r\n        circleStyle.textContent += /*css*/`\r\n            :host {\r\n                display: inline-block;\r\n            }\r\n\r\n            [part=\"circle\"] {\r\n                width: 12px;\r\n                height: 12px;\r\n                border-top: 4px solid var(--loader-color, var(--default-loader-color));\r\n                border-right: 4px solid var(--loader-color, var(--default-loader-color));\r\n                border-left: 4px solid transparent;\r\n                border-bottom: 4px solid transparent;\r\n                border-radius: 50%;\r\n                animation-duration: 1s;\r\n                animation-name: circle;\r\n                animation-timing-function: linear;\r\n                animation-iteration-count: infinite;\r\n            }\r\n\r\n            @keyframes circle {\r\n                0% {\r\n                    transform: rotate(0);\r\n                }\r\n                100% {\r\n                    transform: rotate(360deg);\r\n                }\r\n            }\r\n        `;\r\n        barShadowTemplate = element(\"template\");\r\n        barShadowTemplate.content.append(\r\n            barStyle,\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"bar\"\r\n                },\r\n                children: [\r\n                    element(\"div\", {\r\n                        attributes: {\r\n                            part: \"slider\"\r\n                        },\r\n                        children: [\r\n                            element(\"div\", {\r\n                                attributes: {\r\n                                    part: \"cursor\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n        circleShadowTemplate = element(\"template\");\r\n        circleShadowTemplate.content.append(\r\n            circleStyle,\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"circle\"\r\n                }\r\n            })\r\n        )\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.#updateTemplate();\r\n        this.#promise = null;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"type\": {\r\n                this.#updateTemplate();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    set promise(promise: Promise<any> | null) {\r\n        if (promise) {\r\n            promise.finally(() => {\r\n                this.remove();\r\n            });\r\n        }\r\n        this.#promise = promise;\r\n    }\r\n\r\n    get promise(): Promise<any> | null {\r\n        return this.#promise;\r\n    }\r\n\r\n    #updateTemplate(): void {\r\n        const {type, shadowRoot} = this;\r\n        switch (type) {\r\n            case \"circle\": {\r\n                shadowRoot.replaceChildren(\r\n                    circleShadowTemplate.content.cloneNode(true)\r\n                );\r\n                break;\r\n            }\r\n            case \"bar\": {\r\n                shadowRoot.replaceChildren(\r\n                    barShadowTemplate.content.cloneNode(true)\r\n                );\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLELoaderElement: HTMLELoaderElementConstructor = HTMLELoaderElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEWidthSashElement };\r\n\r\ninterface HTMLEWidthSashElementConstructor {\r\n    readonly prototype: HTMLEWidthSashElement;\r\n    new(): HTMLEWidthSashElement;\r\n}\r\n\r\ninterface HTMLEWidthSashElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    controls: string;\r\n    growdir: \"right\" | \"left\";\r\n    max: boolean;\r\n    setWidth(width: number): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-wsash\": HTMLEWidthSashElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"resize\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-wsash\"\r\n})\r\nclass HTMLEWidthSashElementBase extends HTMLElement implements HTMLEWidthSashElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"right\"})\r\n    growdir!: \"right\" | \"left\";\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    max!: boolean;\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n    #queuedPointerCallback: FrameRequestCallback | null;\r\n    #pointerMovement: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            width: 4px;\r\n                            \r\n                            background-color: rgb(135, 206, 250);\r\n                            cursor: ew-resize;\r\n        \r\n                            transition-property: opacity;\r\n                            transition-delay: 0.2s;\r\n                            transition-duration: 0.2s;\r\n                            transition-timing-function: ease-out;\r\n                            opacity: 0;\r\n                        }\r\n        \r\n                        :host(:active),\r\n                        :host(:hover) {\r\n                            opacity: 1;\r\n                        }\r\n                    `\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#queuedPointerCallback = null;\r\n        this.#pointerMovement = 0;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    setWidth(width: number): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const {max} = this;\r\n            target.style.setProperty(\"width\", `${width}px`);\r\n            if (max) {\r\n                target.style.setProperty(\"max-width\", `${width}px`);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        const rootNode = <ShadowRoot | Document>this.getRootNode();\r\n        this.#target = rootNode.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            if (this.#queuedPointerCallback == null) {\r\n                this.#queuedPointerCallback = this.#pointerMoveCallback.bind(this);\r\n                requestAnimationFrame(this.#queuedPointerCallback);\r\n            }\r\n            this.#pointerMovement += event.movementX;\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const {growdir} = this;\r\n            const movementX = this.#pointerMovement;\r\n            const width = parseFloat(targetComputedStyle.getPropertyValue(\"width\"));\r\n            const newWidth = width + (growdir == \"right\" ? 1 : -1) * movementX;\r\n            this.setWidth(newWidth);\r\n            this.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        this.#pointerMovement = 0;\r\n        this.#queuedPointerCallback = null;\r\n    }\r\n}\r\n\r\nvar HTMLEWidthSashElement: HTMLEWidthSashElementConstructor = HTMLEWidthSashElementBase;","import { areAttributesMatching, AttributeMutationMixin } from \"../elements/Element\";\r\n\r\nexport { AttributeMixinsObserver };\r\n\r\ninterface AttributeMixinsObserverConstructor {\r\n    readonly prototype: AttributeMixinsObserver;\r\n    new(mixins: AttributeMutationMixin[]): AttributeMixinsObserver;\r\n}\r\n\r\ninterface AttributeMixinsObserver {\r\n    observe(target: Node): void;\r\n    trigger(): void;\r\n    disconnect(): void;\r\n}\r\n\r\nclass AttributeMixinsObserverBase implements AttributeMixinsObserver {\r\n    #observer: MutationObserver;\r\n    #mixins: AttributeMutationMixin[];\r\n\r\n    constructor(mixins: AttributeMutationMixin[]) {\r\n        this.#observer = new MutationObserver(\r\n            this.#callback.bind(this)\r\n        );\r\n        this.#mixins = mixins.slice();\r\n    }\r\n\r\n    trigger(): void {\r\n        this.#callback(this.#observer.takeRecords());\r\n    }\r\n\r\n    observe(target: Node): void  {\r\n        this.#observer.observe(target, {\r\n            childList: true,\r\n            subtree: true,\r\n            attributeFilter: this.#mixins.map((mixin => mixin.attributeName))\r\n        });\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#observer.disconnect();\r\n    }\r\n\r\n    #callback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            mutation.addedNodes.forEach((node: Node) => {\r\n                if (node instanceof Element) {\r\n                    this.#attachMatchingAttributeMixinsInSubtree(node);\r\n                }\r\n            });\r\n            mutation.removedNodes.forEach((node: Node) => {\r\n                if (node instanceof Element) {\r\n                    this.#detachMatchingAttributeMixinsInSubtree(node);\r\n                }\r\n            });\r\n            if (mutation.target instanceof Element) {\r\n                const targetElement = mutation.target;\r\n                const attributeName = mutation.attributeName;\r\n                if (attributeName) {\r\n                    const relatedMixins = this.#mixins.filter(mixin => mixin.attributeName == attributeName);\r\n                    relatedMixins.forEach((mixin) => {\r\n                        if (areAttributesMatching(\r\n                                mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                                attributeName!, targetElement.getAttribute(attributeName!)\r\n                            )) {\r\n                                mixin.attach(targetElement);\r\n                        }\r\n                        else {\r\n                            mixin.detach(targetElement);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    #attachMatchingAttributeMixinsInSubtree(element: Element) {\r\n        Array.from(element.attributes).forEach((attr) => {\r\n            let matchingMixins = this.#mixins.filter(\r\n                mixin => areAttributesMatching(\r\n                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                    attr.name, attr.value\r\n                )\r\n            );\r\n            matchingMixins.forEach((mixin) => {\r\n                mixin.attach(element);\r\n            });\r\n        });\r\n        let childIndex = 0;\r\n        const {children} = element;\r\n        while (childIndex < children.length) {\r\n            const child = children.item(childIndex);\r\n            if (child !== null) {\r\n                this.#attachMatchingAttributeMixinsInSubtree(child);\r\n            }\r\n            childIndex++;\r\n        }\r\n    }\r\n\r\n    #detachMatchingAttributeMixinsInSubtree(element: Element) {\r\n        Array.from(element.attributes).forEach((attr) => {\r\n            let matchingMixins = this.#mixins.filter(\r\n                mixin => areAttributesMatching(\r\n                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                    attr.name, attr.value\r\n                )\r\n            );\r\n            matchingMixins.forEach((mixin) => {\r\n                mixin.detach(element);\r\n            });\r\n        });\r\n        let childIndex = 0;\r\n        const {children} = element;\r\n        while (childIndex < children.length) {\r\n            const child = children.item(childIndex);\r\n            if (child !== null) {\r\n                this.#detachMatchingAttributeMixinsInSubtree(child);\r\n            }\r\n            childIndex++;\r\n        }\r\n    }\r\n}\r\n\r\nvar AttributeMixinsObserver: AttributeMixinsObserverConstructor = AttributeMixinsObserverBase;","import { Widget, element } from \"../../elements/Element\";\r\nimport { WidgetFactory } from \"./Widget\";\r\n\r\nexport { separatorWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"separator\": SeparatorWidgetFactory\r\n    }\r\n}\r\n\r\ninterface SeparatorWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar separatorWidget = new (\r\nWidget({\r\n    name: \"separator\"\r\n})(class SeparatorWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"separator\",\r\n                role: \"separator\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n}));","import { element, Widget } from \"../../../elements/Element\";\r\nimport { menuItemWidget } from \"./MenuItemWidget\";\r\nimport { WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuBarWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menubar\": MenuBarWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuBarWidgetFactory extends WidgetFactory {\r\n    setExpanded(menubar: HTMLElement, value: boolean): void;\r\n    getExpanded(menubar: HTMLElement): boolean;\r\n}\r\n\r\nvar menuBarWidget = new (\r\nWidget({\r\n    name: \"menubar\"\r\n})(class MenubarWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menubar\",\r\n                role: \"menubar\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        )\r\n    }\r\n\r\n    create() {\r\n        const menubar = <HTMLElement>this.#template.cloneNode(true);\r\n        menubar.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        menubar.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        menubar.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        menubar.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        menubar.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        return menubar;\r\n    }\r\n\r\n    slot(menubar: HTMLElement) {\r\n        return menubar;\r\n    }\r\n\r\n    setExpanded(menubar: HTMLElement, value: boolean): void {\r\n        menubar.toggleAttribute(\"aria-expanded\", value);\r\n    }\r\n\r\n    getExpanded(menubar: HTMLElement): boolean {\r\n        return menubar.hasAttribute(\"aria-expanded\");\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node) {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"menuitem\") && !menuItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"menuitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getActiveItem(menubar: HTMLElement): HTMLElement | null {\r\n        return menubar.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem:focus-within\"\r\n        );\r\n    }\r\n\r\n    #firstItem(menubar: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menubar;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(menubar: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menubar;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n\r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = menuItemWidget.getMenu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #isClosestMenu(menubar: HTMLElement, target: HTMLElement): boolean {\r\n        return target.closest(\":is(.menubar, .menu)\") == menubar;\r\n    }\r\n\r\n    #nearestItem(menubar: HTMLElement, target: HTMLElement): HTMLElement | null {\r\n        return Array.from(menubar.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem) {\r\n            const expanded = this.getExpanded(menubar);\r\n            const isClosestMenu = this.#isClosestMenu(menubar, targetItem);\r\n            if (isClosestMenu) {\r\n                const isExpanded = !expanded;\r\n                this.setExpanded(menubar, isExpanded);\r\n                if (isExpanded) {\r\n                    if (targetItem !== null && !menuItemWidget.getExpanded(targetItem)) {\r\n                        menuItemWidget.expand(targetItem);\r\n                    }\r\n                    const menu = menuItemWidget.getMenu(targetItem);\r\n                    menu?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    menubar.focus({preventScroll: true})\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && this.getExpanded(menubar)) {\r\n            const nearestItem = this.#nearestItem(menubar, target);\r\n            if (nearestItem) {\r\n                menuItemWidget.expand(nearestItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && !target.contains(<Element>relatedTarget)) {\r\n            const nearestItem = this.#nearestItem(menubar, target);\r\n            if (nearestItem) {\r\n                menuItemWidget.collapse(nearestItem);\r\n            }\r\n        }\r\n        const lostFocusWithin = !menubar.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.setExpanded(menubar, false);\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const activeItem = this.#getActiveItem(menubar);\r\n            const expanded = this.getExpanded(menubar);\r\n            const isClosestMenu = this.#isClosestMenu(menubar, target);\r\n            if (isClosestMenu && target !== activeItem && expanded) {\r\n                const menu = menuItemWidget.getMenu(target);\r\n                if (menu) {\r\n                    menu.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    target.focus({preventScroll: true});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        let activeItem = this.#getActiveItem(menubar);\r\n        const expanded = this.getExpanded(menubar);\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem(menubar) :\r\n                    this.#firstItem(menubar);\r\n                previousItem?.focus({preventScroll: true});\r\n                activeItem = this.#getActiveItem(menubar);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem(menubar) : \r\n                    this.#lastItem(menubar);\r\n                nextItem?.focus({preventScroll: true});\r\n                activeItem = this.#getActiveItem(menubar);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    this.setExpanded(menubar, !expanded);\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.setExpanded(menubar, false);\r\n                    if (activeItem) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    menubar.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}));","import { Widget, element } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menuitemgroup\": MenuItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar menuItemGroupWidget = new (\r\nWidget({\r\n    name: \"menuitemgroup\"\r\n})(class MenuItemGroupWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menuitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement): HTMLElement | null {\r\n        return group;\r\n    }\r\n}));","import { Widget, element } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\nimport { treeItemWidget } from \"./TreeItemWidget\";\r\n\r\nexport { treeItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"treeitemgroup\": TreeItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface TreeItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar treeItemGroupWidget = new (\r\nWidget({\r\n    name: \"treeitemgroup\"\r\n})(class TreeItemGroupWidgetFactoryBase extends WidgetFactory implements TreeItemGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"treeitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n\r\n    slottedCallback(group: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"treeitem\")) {\r\n                treeItemWidget.setPosInSet(child_i, i);\r\n                treeItemWidget.setLevel(child_i, (() => {\r\n                    let level = -1;\r\n                    let closestItem: HTMLElement | null = child_i;\r\n                    while (closestItem !== null && closestItem.matches(\".tree :scope\")) {\r\n                        closestItem = closestItem.parentElement?.closest(\".treeitem\") ?? null;\r\n                        level++;\r\n                    }\r\n                    return level;\r\n                })());\r\n            }\r\n        });\r\n    }\r\n}));","import { element, Widget } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\n\r\nexport { listItemWidget };\r\n\r\ninterface ListItemWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        label?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"listitem\": ListItemWidgetFactory,\r\n    }\r\n}\r\n\r\nvar listItemWidget = new (\r\nWidget({\r\n    name: \"listitem\"\r\n})(class ListItemWidgetFactoryBase extends WidgetFactory implements ListItemWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"li\", {\r\n            attributes: {\r\n                class: \"listitem\",\r\n                role: \"listitem\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        label?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {label, disabled} = init;\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n            this.setSelected(item, false);\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(root: HTMLElement): HTMLElement | null {\r\n        return root;\r\n    }\r\n\r\n    group(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .listitemgroup\");\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", value.toString());\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(row: HTMLElement, value: boolean): void {\r\n        row.setAttribute(\"aria-selected\", value.toString());\r\n        row.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(row: HTMLElement): boolean {\r\n        return JSON.parse(row.getAttribute(\"aria-selected\") ?? false.toString());\r\n    }\r\n\r\n    #label(item: HTMLElement): Node {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n}));","import { element, Widget } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\nimport { listItemWidget } from \"./ListItemWidget\";\r\n\r\nexport  { listWidget };\r\n\r\ninterface ListWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n    items(list: HTMLElement): HTMLElement[];\r\n    beginSelection(list: HTMLElement): void;\r\n    endSelection(list: HTMLElement): void;\r\n    selectedItems(list: HTMLElement): HTMLElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"list\": ListWidgetFactory,\r\n    }\r\n}\r\n\r\nvar listWidget = new (\r\nWidget({\r\n    name: \"list\"\r\n})(class ListWidgetFactoryBase extends WidgetFactory implements ListWidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"list\",\r\n                role: \"list\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(init?: {\r\n        multisectable?: boolean;\r\n    }): HTMLElement {\r\n        const list = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {multisectable} = init;\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(list, multisectable);\r\n            }\r\n        }\r\n        list.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        list.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        list.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        list.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        list.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        list.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        list.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        list.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        list.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        list.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        list.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        list.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        this.#onSelection.set(list, false);\r\n        this.#hasSelectionChanged.set(list, false);\r\n        return list;\r\n    }\r\n\r\n    slot(list: HTMLElement) {\r\n        return list;\r\n    }\r\n\r\n    slottedCallback(list: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"listitem\")) {\r\n                listItemWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n\r\n    setMultiSelectable(tree: HTMLElement, value: boolean): void {\r\n        tree.setAttribute(\"aria-multiselectable\", value.toString());\r\n    }\r\n\r\n    getMultiSelectable(tree: HTMLElement): boolean {\r\n        return JSON.parse(tree.getAttribute(\"aria-multiselectable\") ?? false.toString());\r\n    }\r\n\r\n    #getActiveItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".listitem.active\");\r\n    }\r\n\r\n    #getDropTargetItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".listitem.droptarget\");\r\n    }\r\n\r\n    items(list: HTMLElement): HTMLElement[] {\r\n        return Array.from(list.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .listitemgroup) > .listitem\"\r\n        ));\r\n    }\r\n\r\n    selectedItems(list: HTMLElement): HTMLElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        let item = this.#firstItem(list);\r\n        while (item !== null) {\r\n            const selected = listItemWidget.getSelected(item);\r\n            if (selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(list: HTMLElement): void {\r\n        this.#onSelection.set(list, true);\r\n    }\r\n\r\n    endSelection(list: HTMLElement): void {\r\n        this.#onSelection.set(list, false);\r\n        if (this.#hasSelectionChanged.get(list)) {\r\n            list.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(list, false);\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"listitem\") && !listItemWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"listitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextItem = this.#nextItem(from);\r\n            while (nextItem && nextItem !== to) {\r\n                range.push(nextItem);\r\n                nextItem = this.#nextItem(nextItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousItem = this.#previousItem(from);\r\n            while (previousItem && previousItem !== to) {\r\n                range.push(previousItem);\r\n                previousItem = this.#previousItem(previousItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        selectedItems.forEach((item_i) => {\r\n            if (!items.includes(item_i)) {\r\n                listItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            const selected = listItemWidget.getSelected(item_i);\r\n            if (list.contains(item_i) && !selected) {\r\n                listItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #addToSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        this.beginSelection(list);\r\n        items.forEach((item_i) => {\r\n            if (!listItemWidget.getSelected(item_i)) {\r\n                listItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #removeFromSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                listItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #clearSelection(list: HTMLElement): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        selectedItems.forEach((item_i) => {\r\n            listItemWidget.setSelected(item_i, false);\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #setActiveItem(list: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(list);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            listItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            listItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n    \r\n    #setDropTargetItem(list: HTMLElement, item: HTMLElement | null): void {\r\n        const {classList} = list;\r\n        const dropTargetItem = this.#getDropTargetItem(list);\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            listItemWidget.setDropTarget(dropTargetItem, false);\r\n        }\r\n        if (item !== null) {\r\n            listItemWidget.setDropTarget(item, false);\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    #firstItem(list: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(list: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLElement | null>walker.previousNode();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const nextItem = <HTMLElement | null>walker.nextNode();\r\n        return nextItem;\r\n    }\r\n\r\n    #handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetList, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            this.#setDropTargetItem(targetList, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!targetList.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(targetList, null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            const selectedItems = this.selectedItems(targetTree);\r\n            if (!selectedItems.includes(targetItem)) {\r\n                this.#setSelection(targetTree, targetItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetTree);\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetTree, targetItem);\r\n            targetTree.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetList);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetList, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetList, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(firstItem, lastItem);\r\n                            if (range) {\r\n                                this.#setSelection(targetList, ...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = listItemWidget.getSelected(previousItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetList, previousItem) :\r\n                                this.#addToSelection(targetList, previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetList);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = listItemWidget.getSelected(nextItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetList, nextItem) :\r\n                                this.#addToSelection(targetList, nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetList);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetList);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetList);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(targetList, activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection(targetList);\r\n                this.#setActiveItem(targetList, null);\r\n                targetList.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey, button} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            const selected = listItemWidget.getSelected(targetItem);\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setSelection(targetList, targetItem);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            targetItem.blur();\r\n                            this.#removeFromSelection(targetList, targetItem);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(targetList, targetItem);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const activeItem = this.#getActiveItem(targetList);\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                targetItem\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetList, ...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                }\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(targetList, targetItem);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetList.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetList.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetList) {\r\n            if (this.#onSelection.get(targetList)) {\r\n                this.#hasSelectionChanged.set(targetList, true);\r\n            }\r\n            else {\r\n                targetList.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { Widget, element } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\nimport { listItemWidget } from \"./ListItemWidget\";\r\n\r\nexport { listItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"listitemgroup\": ListItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ListItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar listItemGroupWidget = new (\r\nWidget({\r\n    name: \"listitemgroup\"\r\n})(class ListItemGroupWidgetFactoryBase extends WidgetFactory implements ListItemGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"listitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n\r\n    slottedCallback(group: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"listitem\")) {\r\n                listItemWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { Widget, element } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\n\r\nexport { toolbarItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbaritemgroup\": MenuItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar toolbarItemGroupWidget = new (\r\nWidget({\r\n    name: \"toolbaritemgroup\"\r\n})(class MenuItemGroupWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"toolbaritemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n}));","import { Widget, element } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridCellWidget };\r\n\r\ninterface GridCellWidgetFactory extends WidgetFactory {\r\n    create(init: {\r\n        label?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    getHeaders(item: HTMLElement): string;\r\n    setHeaders(item: HTMLElement, value: string): void;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridcell\": GridCellWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridCellWidget = new (\r\nWidget({\r\n    name: \"gridcell\"\r\n})(class GridCellWidgetFactoryBase extends WidgetFactory implements GridCellWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"td\", {\r\n            attributes: {\r\n                class: \"gridcell\",\r\n                role: \"gridcell\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"content\"\r\n                    },\r\n                    children: [\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"label\"\r\n                            }\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        label?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const cell = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {label, disabled} = init;\r\n            if (label !== undefined) {\r\n                this.setLabel(cell, label);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(cell, disabled);\r\n            }\r\n            this.setSelected(cell, false);\r\n        }\r\n        return cell;\r\n    }\r\n\r\n    slot(cell: HTMLElement): HTMLElement | null {\r\n        return cell;\r\n    }\r\n\r\n    getHeaders(item: HTMLElement): string {\r\n        return item.getAttribute(\"headers\") ?? \"\";\r\n    }\r\n\r\n    setHeaders(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"headers\", value);\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", value.toString());\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-selected\", value.toString());\r\n        item.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-selected\") ?? false.toString());\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .content > .label\")!;\r\n    }\r\n}));","import { element, Widget } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\nimport { gridCellWidget } from \"./GridCellWidget\";\r\n\r\nexport { gridRowWidget };\r\n\r\ninterface GridRowWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        disabled?: boolean\r\n    }): HTMLElement;\r\n    cells(row: HTMLElement): HTMLElement[];\r\n    setPosInSet(row: HTMLElement, value: number): void;\r\n    getPosInSet(row: HTMLElement): number;\r\n    setActive(row: HTMLElement, value: boolean): void;\r\n    getActive(row: HTMLElement): boolean;\r\n    setDropTarget(row: HTMLElement, value: boolean): void;\r\n    getDropTarget(row: HTMLElement): boolean;\r\n    setSelected(row: HTMLElement, value: boolean): void;\r\n    getSelected(row: HTMLElement): boolean;\r\n    setDisabled(row: HTMLElement, value: boolean): void;\r\n    getDisabled(row: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridrow\": GridRowWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridRowWidget = new (\r\nWidget({\r\n    name: \"gridrow\"\r\n})(class GridRowWidgetFactoryBase extends WidgetFactory implements GridRowWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"tr\", {\r\n            attributes: {\r\n                class: \"gridrow\",\r\n                role: \"row\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const row = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {disabled} = init;\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(row, disabled);\r\n            }\r\n            this.setSelected(row, false);\r\n        }\r\n        return row;\r\n    }\r\n\r\n    slot(row: HTMLElement): HTMLElement | null {\r\n        return row;\r\n    }\r\n\r\n    cells(row: HTMLElement): HTMLElement[] {\r\n        return Array.from(row.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridcell\"\r\n        ));\r\n    }\r\n    \r\n    setPosInSet(row: HTMLElement, value: number): void {\r\n        row.setAttribute(\"aria-posinset\", value.toString());\r\n    }\r\n\r\n    getPosInSet(row: HTMLElement): number {\r\n        const posInSet = row.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(row: HTMLElement, value: boolean): void {\r\n        const {classList} = row;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(row: HTMLElement): boolean {\r\n        const {classList} = row;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(row: HTMLElement, value: boolean): void {\r\n        const {classList} = row;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(row: HTMLElement): boolean {\r\n        const {classList} = row;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(row: HTMLElement, value: boolean): void {\r\n        row.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(row: HTMLElement): boolean {\r\n        return row.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(row: HTMLElement, value: boolean): void {\r\n        row.setAttribute(\"aria-selected\", value.toString());\r\n        row.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(row: HTMLElement): boolean {\r\n        return JSON.parse(row.getAttribute(\"aria-selected\") ?? false.toString());\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((item_i, i) => {\r\n            if (item_i instanceof HTMLElement) {\r\n                gridCellWidget.setPosInSet(item_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { element, Widget } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\nimport { gridCellWidget } from \"./GridCellWidget\";\r\nimport { gridRowWidget } from \"./GridRowWidget\";\r\n\r\nexport { gridWidget };\r\n\r\ntype GridSelectBy = \"cell\" | \"row\";\r\n\r\ninterface GridRowWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        multisectable?: boolean;\r\n        selectby?: GridSelectBy\r\n    }): HTMLElement;\r\n    setSelectBy(item: HTMLElement, value: GridSelectBy): void;\r\n    getSelectBy(item: HTMLElement): GridSelectBy;\r\n    headers(grid: HTMLElement): HTMLElement[];\r\n    cells(grid: HTMLElement): HTMLElement[];\r\n    rows(grid: HTMLElement): HTMLElement[];\r\n    beginSelection(grid: HTMLElement): void;\r\n    endSelection(grid: HTMLElement): void;\r\n    selectedCells(grid: HTMLElement): HTMLElement[];\r\n    selectedRows(grid: HTMLElement): HTMLElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"grid\": GridRowWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridWidget = new (\r\nWidget({\r\n    name: \"grid\"\r\n})(class GridWidgetFactoryBase extends WidgetFactory implements GridRowWidgetFactory {\r\n\r\n    #getActiveRow(grid: HTMLElement): HTMLElement | null {\r\n        return grid.querySelector<HTMLElement>(\".gridrow.active\");\r\n    }\r\n\r\n    #getActiveCell(grid: HTMLElement): HTMLElement | null {\r\n        return grid.querySelector<HTMLElement>(\".gridcell.active\");\r\n    }\r\n\r\n    headers(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridhead > .gridheader\"\r\n        ));\r\n    }\r\n\r\n    rows(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridbody > .gridrow\"\r\n        ));\r\n    }\r\n\r\n    cells(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridbody > .gridrow > .gridcell\"\r\n        ));\r\n    }\r\n\r\n    #template: HTMLElement;\r\n    #rowsWalker: TreeWalker;\r\n    #cellsWalker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"table\", {\r\n            attributes: {\r\n                class: \"grid\",\r\n                role: \"grid\",\r\n                tabindex: 0\r\n            },\r\n            children: [\r\n                element(\"thead\", {\r\n                    attributes: {\r\n                        class: \"gridhead\",\r\n                        role: \"row\"\r\n                    }\r\n                }),\r\n                element(\"tbody\", {\r\n                    attributes: {\r\n                        class: \"gridbody\",\r\n                        role: \"rowgroup\"\r\n                    }\r\n                }),\r\n            ]\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#cellsWalker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#cellsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#rowsWalker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#rowsWalkerNodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(init?: {\r\n        multisectable?: boolean;\r\n        selectby?: GridSelectBy;\r\n    }) {\r\n        const grid = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {selectby, multisectable} = init;\r\n            if (selectby !== undefined) {\r\n                this.setSelectBy(grid, selectby);\r\n            }\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(grid, multisectable);\r\n            }\r\n        }\r\n        grid.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        grid.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        grid.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        grid.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        grid.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        grid.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        grid.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        return grid;\r\n    }\r\n\r\n    slot(grid: HTMLElement, name: string | null): HTMLElement | null {\r\n        switch (name) {\r\n            case \"headers\":\r\n                return grid.querySelector(\":scope > .gridhead\");\r\n            case \"rows\":\r\n            default:\r\n                return grid.querySelector(\":scope > .gridbody\");\r\n        }\r\n    }\r\n\r\n    slottedCallback(grid: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement) {\r\n                gridRowWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n\r\n    setMultiSelectable(grid: HTMLElement, value: boolean): void {\r\n        grid.setAttribute(\"aria-multiselectable\", value.toString());\r\n    }\r\n\r\n    getMultiSelectable(grid: HTMLElement): boolean {\r\n        return JSON.parse(grid.getAttribute(\"aria-multiselectable\") ?? false.toString());\r\n    }\r\n\r\n    setSelectBy(grid: HTMLElement, value: GridSelectBy): void {\r\n        grid.setAttribute(\"data-selectby\", value);\r\n    }\r\n\r\n    getSelectBy(grid: HTMLElement): GridSelectBy {\r\n        return <GridSelectBy>grid.getAttribute(\"data-selectby\") ?? \"cell\";\r\n    }\r\n\r\n    beginSelection(grid: HTMLElement): void {\r\n        this.#onSelection.set(grid, true);\r\n    }\r\n\r\n    endSelection(grid: HTMLElement): void {\r\n        this.#onSelection.set(grid, false);\r\n        if (this.#hasSelectionChanged.get(grid)) {\r\n            grid.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(grid, false);\r\n        }\r\n    }\r\n\r\n    #clearSelection(grid: HTMLElement): void {\r\n        this.#clearCellsSelection(grid);\r\n        this.#clearRowsSelection(grid);\r\n    }\r\n\r\n    selectedCells(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll(\":scope > .gridbody > .gridrow > .gridcell[aria-selected=true]\"));\r\n    }\r\n\r\n    selectedRows(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll(\":scope > .gridbody > .gridrow[aria-selected=true]\"));\r\n    }\r\n\r\n    #cellsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"gridcell\") && !gridCellWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"gridrow\") || classList.contains(\"gridbody\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #rowsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"gridrow\") && !gridRowWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"gridbody\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getCellsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextCell = this.#nextCell(from);\r\n            while (nextCell && nextCell !== to) {\r\n                range.push(nextCell);\r\n                nextCell = this.#nextCell(nextCell);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousCell = this.#previousCell(from);\r\n            while (previousCell && previousCell !== to) {\r\n                range.push(previousCell);\r\n                previousCell = this.#previousRow(previousCell);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #getRowsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextRow = this.#nextRow(from);\r\n            while (nextRow && nextRow !== to) {\r\n                range.push(nextRow);\r\n                nextRow = this.#nextRow(nextRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousRow = this.#previousRow(from);\r\n            while (previousRow && previousRow !== to) {\r\n                range.push(previousRow);\r\n                previousRow = this.#previousRow(previousRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setCellsSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        selectedCells.forEach((selectedCell_i) => {\r\n            if (!cells.includes(selectedCell_i)) {\r\n                gridCellWidget.setSelected(selectedCell_i, false);\r\n            }\r\n        });\r\n        cells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (!selected) {\r\n                gridCellWidget.setSelected(cell_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #setRowsSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        selectedRows.forEach((selectedRow_i) => {\r\n            if (!rows.includes(selectedRow_i)) {\r\n                gridRowWidget.setSelected(selectedRow_i, false);\r\n            }\r\n        });\r\n        rows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (!selected) {\r\n                gridRowWidget.setSelected(row_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #addCellsToSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        cells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (!selected) {\r\n                gridCellWidget.setSelected(cell_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #addRowsToSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        rows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (!selected) {\r\n                gridRowWidget.setSelected(row_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #removeCellsFromSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        cells.forEach((cell_i) => {\r\n            if (selectedCells.includes(cell_i)) {\r\n                gridCellWidget.setSelected(cell_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #removeRowsFromSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        rows.forEach((row_i) => {\r\n            if (selectedRows.includes(row_i)) {\r\n                gridRowWidget.setSelected(row_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #clearCellsSelection(grid: HTMLElement): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        selectedCells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (selected) {\r\n                gridCellWidget.setSelected(cell_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #clearRowsSelection(grid: HTMLElement): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        selectedRows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (selected) {\r\n                gridRowWidget.setSelected(row_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #setActiveCell(grid: HTMLElement, cell: HTMLElement | null): void {\r\n        const activeCell = this.#getActiveCell(grid);\r\n        if (activeCell !== null && activeCell !== cell) {\r\n            gridCellWidget.setActive(activeCell, false);\r\n            activeCell.tabIndex = -1;\r\n        }\r\n        if (cell !== null) {\r\n            gridCellWidget.setActive(cell, true);\r\n            cell.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #setActiveRow(grid: HTMLElement, row: HTMLElement | null): void {\r\n        const activeRow = this.#getActiveRow(grid);\r\n        if (activeRow !== null && activeRow !== row) {\r\n            gridRowWidget.setActive(activeRow, false);\r\n            activeRow.tabIndex = -1;\r\n        }\r\n        if (row !== null) {\r\n            gridCellWidget.setActive(row, true);\r\n            row.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #firstCell(row: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLElement | null>cellsWalker.firstChild();\r\n    }\r\n\r\n    #lastCell(row: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLElement | null>cellsWalker.lastChild();\r\n    }\r\n\r\n    #previousCell(cell: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLElement | null>cellsWalker.previousNode();\r\n    }\r\n\r\n    #nextCell(cell: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLElement | null>cellsWalker.nextNode();\r\n    }\r\n\r\n    #closestRow(cell: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = cell;\r\n        return <HTMLElement | null>rowsWalker.parentNode();\r\n    }\r\n\r\n    #firstRow(grid: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = grid;\r\n        return <HTMLElement | null>rowsWalker.firstChild();\r\n    }\r\n\r\n    #lastRow(grid: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = grid;\r\n        return <HTMLElement | null>rowsWalker.lastChild();\r\n    }\r\n\r\n    #previousRow(row: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLElement | null>rowsWalker.previousNode();\r\n    }\r\n\r\n    #nextRow(row: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLElement | null>rowsWalker.nextNode();\r\n    }\r\n\r\n    #topCell(cell: HTMLElement): HTMLElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const closestRowCells = gridRowWidget.cells(closestRow);\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const previousRow = this.#previousRow(closestRow);\r\n            if (previousRow) {\r\n                const previousRowCells = gridRowWidget.cells(previousRow);\r\n                return previousRowCells[Math.min(cellIndex, previousRowCells.length)];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #bottomCell(cell: HTMLElement): HTMLElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const closestRowCells = gridRowWidget.cells(closestRow);\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const nextRow = this.#nextRow(closestRow);\r\n            if (nextRow) {\r\n                const nextRowCells = gridRowWidget.cells(nextRow);\r\n                return nextRowCells[Math.min(cellIndex, nextRowCells.length)];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent) {\r\n        const {currentTarget, target} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    const selectedCells = this.selectedCells(targetGrid);\r\n                    if (!selectedCells.includes(targetCell)) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    targetCell.focus({preventScroll: true});\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    const selectedRows = this.selectedRows(targetGrid);\r\n                    if (!selectedRows.includes(targetRow)) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    targetRow.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    /*#handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            const type = treeitemWidget.getType(targetItem);\r\n            if (type == \"parent\") {\r\n                treeitemWidget.toggle(targetItem, true);\r\n            }\r\n            this.#setDropTargetItem(targetTree, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!targetTree.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(targetTree, null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }*/\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const activeCell = this.#getActiveCell(targetGrid);\r\n                if (activeCell && relatedTarget !== activeCell) {\r\n                    activeCell.focus();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const activeRow = this.#getActiveRow(targetGrid);\r\n                if (activeRow && relatedTarget !== activeRow) {\r\n                    activeRow.focus();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    this.#setActiveCell(targetGrid, targetCell);\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    this.#setActiveRow(targetGrid, targetRow);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetGrid.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetGrid.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const activeCell = this.#getActiveCell(targetGrid);\r\n        const activeRow = this.#getActiveRow(targetGrid);\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        const multiselectable = this.getMultiSelectable(targetGrid);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey && multiselectable) {\r\n                    switch (selectby) {\r\n                        case \"cell\": {\r\n                            const firstRow = this.#firstRow(targetGrid);\r\n                            const firstCell = firstRow ? this.#firstCell(firstRow) : null;\r\n                            const lastRow = this.#lastRow(targetGrid);\r\n                            const lastCell = lastRow ? this.#lastCell(lastRow) : null;\r\n                            if (firstCell && lastCell) {\r\n                                const range = this.#getCellsRange(firstCell, lastCell);\r\n                                if (range) {\r\n                                    this.#setCellsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"row\": {\r\n                            const firstRow = this.#firstRow(targetGrid);\r\n                            const lastRow = this.#lastRow(targetGrid);\r\n                            if (firstRow && lastRow) {\r\n                                const range = this.#getRowsRange(firstRow, lastRow);\r\n                                if (range) {\r\n                                    this.#setRowsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const previousCell = this.#previousCell(activeCell);\r\n                        if (previousCell) {\r\n                            previousCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(previousCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, previousCell) :\r\n                                    this.#addCellsToSelection(targetGrid, previousCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const nextCell = this.#nextCell(activeCell);\r\n                        if (nextCell) {\r\n                            nextCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(nextCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, nextCell) :\r\n                                    this.#addCellsToSelection(targetGrid, nextCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const firstRow = activeRow ?? this.#firstRow(targetGrid);\r\n                        const topCell = activeCell ?\r\n                            this.#topCell(activeCell) :\r\n                            firstRow ?\r\n                            this.#firstCell(firstRow) :\r\n                            null;\r\n                        if (topCell) {\r\n                            topCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(topCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, topCell) :\r\n                                    this.#addCellsToSelection(targetGrid, topCell);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const previousRow = activeRow ?\r\n                            this.#previousRow(activeRow) :\r\n                            this.#firstRow(targetGrid);\r\n                        if (previousRow) {\r\n                            previousRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridRowWidget.getSelected(previousRow);\r\n                                selected ?\r\n                                    this.#removeRowsFromSelection(targetGrid, previousRow) :\r\n                                    this.#addRowsToSelection(targetGrid, previousRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const lastRow = activeRow ?? this.#lastRow(targetGrid);\r\n                        const bottomCell = activeCell ?\r\n                            this.#bottomCell(activeCell) :\r\n                            lastRow ?\r\n                            this.#lastCell(lastRow) :\r\n                            null;\r\n                            if (bottomCell) {\r\n                                bottomCell.focus({preventScroll: true});\r\n                                const {shiftKey} = event;\r\n                                if (shiftKey && multiselectable) {\r\n                                    const selected = gridCellWidget.getSelected(bottomCell);\r\n                                    selected ?\r\n                                        this.#removeCellsFromSelection(targetGrid, bottomCell) :\r\n                                        this.#addCellsToSelection(targetGrid, bottomCell);\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"row\": {\r\n                        const nextRow = activeRow ?\r\n                            this.#nextRow(activeRow) :\r\n                            this.#lastRow(targetGrid);\r\n                        if (nextRow) {\r\n                            nextRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridRowWidget.getSelected(nextRow);\r\n                                selected ?\r\n                                    this.#removeRowsFromSelection(targetGrid, nextRow) :\r\n                                    this.#addRowsToSelection(targetGrid, nextRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const firstCell = this.#firstCell(activeRow);\r\n                            if (firstCell) {\r\n                                firstCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const firstRow = this.#firstRow(targetGrid);\r\n                        if (firstRow) {\r\n                            firstRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const lastCell = this.#lastCell(activeRow);\r\n                            if (lastCell) {\r\n                                lastCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const lastRow = this.#lastRow(targetGrid);\r\n                        if (lastRow) {\r\n                            lastRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeCell) {\r\n                            this.#setCellsSelection(targetGrid, activeCell);\r\n                            activeCell.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        if (activeRow) {\r\n                            this.#setRowsSelection(targetGrid, activeRow);\r\n                            activeRow.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        this.#clearCellsSelection(targetGrid);\r\n                        this.#setActiveCell(targetGrid, null);\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        this.#clearRowsSelection(targetGrid);\r\n                        this.#setActiveRow(targetGrid, null);\r\n                        break;\r\n                    }\r\n                }\r\n                targetGrid.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        const multiselectable = this.getMultiSelectable(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    if (multiselectable) {\r\n                        if (!shiftKey && !ctrlKey) {\r\n                            this.#setCellsSelection(targetGrid, targetCell);\r\n                        }\r\n                        else if (ctrlKey) {\r\n                            const selected = gridCellWidget.getSelected(targetCell);\r\n                            !selected ?\r\n                                this.#addCellsToSelection(targetGrid, targetCell) :\r\n                                this.#removeCellsFromSelection(targetGrid, targetCell);\r\n                            event.stopPropagation();\r\n                        }\r\n                        else if (shiftKey) {\r\n                            const activeCell = this.#getActiveCell(targetGrid);\r\n                            if (activeCell) {\r\n                                const range = this.#getCellsRange(\r\n                                    activeCell,\r\n                                    targetCell\r\n                                );\r\n                                if (range) {\r\n                                    this.#setCellsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.#setCellsSelection(targetGrid, targetCell);\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    if (multiselectable) {\r\n                        if (!shiftKey && !ctrlKey) {\r\n                            this.#setRowsSelection(targetGrid, targetRow);\r\n                        }\r\n                        else if (ctrlKey) {\r\n                            const selected = gridRowWidget.getSelected(targetRow);\r\n                            !selected ?\r\n                                this.#addRowsToSelection(targetGrid, targetRow) :\r\n                                this.#removeRowsFromSelection(targetGrid, targetRow);\r\n                            event.stopPropagation();\r\n                        }\r\n                        else if (shiftKey) {\r\n                            const activeRow = this.#getActiveRow(targetGrid);\r\n                            if (activeRow) {\r\n                                const range = this.#getRowsRange(\r\n                                    activeRow,\r\n                                    targetRow\r\n                                );\r\n                                if (range) {\r\n                                    this.#setRowsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.#setRowsSelection(targetGrid, targetRow);\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetList) {\r\n            if (this.#onSelection.get(targetList)) {\r\n                this.#hasSelectionChanged.set(targetList, true);\r\n            }\r\n            else {\r\n                targetList.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { Widget, element } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridcellWidget };\r\n\r\ninterface GridHeaderWidgetFactory extends WidgetFactory {\r\n    create(init: {\r\n        label?: string;\r\n    }): HTMLElement;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridheader\": GridHeaderWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridcellWidget = new (\r\nWidget({\r\n    name: \"gridheader\"\r\n})(class GridHeaderWidgetFactoryBase extends WidgetFactory implements GridHeaderWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"th\", {\r\n            attributes: {\r\n                class: \"gridheader\",\r\n                scope: \"column\",\r\n                role: \"columnheader\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        label?: string;\r\n    }): HTMLElement {\r\n        const header = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {label} = init;\r\n            if (label !== undefined) {\r\n                this.setLabel(header, label);\r\n            }\r\n        }\r\n        return header;\r\n    }\r\n\r\n    getLabel(header: HTMLElement): string {\r\n        return this.#label(header).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(header: HTMLElement, value: string): void {\r\n        this.#label(header).textContent = value;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    #label(header: HTMLElement): HTMLElement {\r\n        return header.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n}));","import { element, Widget } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\n\r\nexport { optionWidget };\r\n\r\ninterface OptionWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        label?: string;\r\n        name?: string;\r\n        value?: string;\r\n        selected?: boolean;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    getLabel(option: HTMLElement): string;\r\n    setLabel(option: HTMLElement, value: string): void;\r\n    getValue(option: HTMLElement): string;\r\n    setValue(option: HTMLElement, value: string): void;\r\n    getName(option: HTMLElement): string;\r\n    setName(option: HTMLElement, value: string): void;\r\n    getSelected(option: HTMLElement): boolean;\r\n    setSelected(option: HTMLElement, value: boolean): void;\r\n    setDisabled(option: HTMLElement, value: boolean): void;\r\n    getDisabled(option: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"option\": OptionWidgetFactory\r\n    }\r\n}\r\n\r\nvar optionWidget = new(\r\nWidget({\r\n    name: \"option\"\r\n})(\r\nclass OptionWidgetFactoryBase extends WidgetFactory implements OptionWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"span\", {\r\n            attributes: {\r\n                class: \"option\",\r\n                role: \"option\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        selected?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const option = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {label, name, value, disabled} = init;\r\n            let {selected} = init;\r\n            selected = selected ?? false;\r\n            if (selected !== undefined) {\r\n                this.setSelected(option, selected);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(option, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(option, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(option, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(option, disabled);\r\n            }\r\n        }\r\n        return option;\r\n    }\r\n\r\n    get observedAttributes() {\r\n        return [\"aria-selected\"];\r\n    }\r\n\r\n    attributeChangedCallback(option: HTMLElement, name: string, oldValue: string, newValue: string) {\r\n        switch (name) {\r\n            case \"aria-selected\": {\r\n                if (JSON.parse(newValue) === true) {\r\n                    option.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #label(option: HTMLElement): HTMLElement {\r\n        return option.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n\r\n    getLabel(option: HTMLElement): string {\r\n        return this.#label(option).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(option: HTMLElement, value: string): void {\r\n        this.#label(option).textContent = value;\r\n    }\r\n\r\n    getValue(option: HTMLElement): string {\r\n        return option.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(option: HTMLElement, value: string): void {\r\n        option.setAttribute(\"value\", value);\r\n    }\r\n    \r\n    getName(option: HTMLElement): string {\r\n        return option.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(option: HTMLElement, value: string): void {\r\n        option.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getSelected(option: HTMLElement): boolean {\r\n        return JSON.parse(option.getAttribute(\"aria-selected\") ?? false.toString());\r\n    }\r\n\r\n    setSelected(option: HTMLElement, value: boolean): void {\r\n        option.setAttribute(\"aria-selected\", value.toString());\r\n    }\r\n\r\n    getDisabled(option: HTMLElement): boolean {\r\n        return option.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(option: HTMLElement, value: boolean): void {\r\n        option.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n}));","import { element, Widget } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\nimport { optionWidget } from \"./OptionWidget\";\r\n\r\nexport { comboBoxWidget };\r\n\r\ninterface ComboBoxWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        name?: string;\r\n        disabled?: boolean;\r\n        multiselectable?: boolean;\r\n    }): HTMLElement;\r\n    options(combobox: HTMLElement): HTMLElement[];\r\n    getName(combobox: HTMLElement): string;\r\n    setName(combobox: HTMLElement, value: string): void;\r\n    getExpanded(combobox: HTMLElement): boolean;\r\n    setExpanded(combobox: HTMLElement, value: boolean): void;\r\n    setDisabled(combobox: HTMLElement, value: boolean): void;\r\n    getDisabled(combobox: HTMLElement): boolean;\r\n    expand(combobox: HTMLElement): void;\r\n    collapse(combobox: HTMLElement): void;\r\n    toggle(combobox: HTMLElement, force?: boolean): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"combobox\": ComboBoxWidgetFactory\r\n    }\r\n}\r\n\r\nvar comboBoxWidget = new(\r\nWidget({\r\n    name: \"combobox\"\r\n})(\r\nclass ComboBoxWidgetFactoryBase extends WidgetFactory implements ComboBoxWidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #optionsObserver: MutationObserver;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#optionsObserver = new MutationObserver(\r\n            this.#optionsMutationCallback.bind(this)\r\n        );\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"combobox\",\r\n                role: \"combobox\",\r\n                tabindex: 0,\r\n            },\r\n            children: [\r\n                element(\"div\", {\r\n                    attributes: {\r\n                        class: \"content\"\r\n                    },\r\n                    children: [\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"value\"\r\n                            }\r\n                        })\r\n                    ]\r\n                }),\r\n                element(\"div\", {\r\n                    attributes: {\r\n                        class: \"box\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        name?: string;\r\n        disabled?: boolean;\r\n        multiselectable?: boolean;\r\n    }): HTMLElement {\r\n        const combobox = <HTMLElement>this.#template.cloneNode(true);\r\n        this.#optionsObserver.observe(combobox, {\r\n            childList: true,\r\n            subtree: true\r\n        });\r\n        combobox.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        combobox.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        combobox.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        combobox.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.setExpanded(combobox, false);\r\n        if (init !== undefined) {\r\n            const {name, disabled, multiselectable} = init;\r\n            if (name !== undefined) {\r\n                this.setName(combobox, name);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(combobox, disabled);\r\n            }\r\n            if (multiselectable !== undefined) {\r\n                this.setMultiSelectable(combobox, multiselectable);\r\n            }\r\n        }\r\n        return combobox;\r\n    }\r\n\r\n    slot(combobox: HTMLElement) {\r\n        return this.#box(combobox);\r\n    }\r\n\r\n    slottedCallback(combobox: HTMLElement, slot: HTMLElement, name: string | null) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement) {\r\n                //gridRowWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n\r\n    #box(combobox: HTMLElement): HTMLElement {\r\n        return combobox.querySelector<HTMLElement>(\":scope > .box\")!;\r\n    }\r\n    \r\n    options(combobox: HTMLElement): HTMLElement[] {\r\n        return Array.from(combobox.querySelectorAll<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option\"\r\n        ));\r\n    }\r\n\r\n    selectedOption(combobox: HTMLElement): HTMLElement | null {\r\n        return combobox.querySelector<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option[aria-selected=true]\"\r\n        );\r\n    }\r\n\r\n    #getActiveOption(combobox: HTMLElement): HTMLElement | null {\r\n        return combobox.querySelector<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option:focus-within\"\r\n        );\r\n    }\r\n\r\n    #value(combobox: HTMLElement): HTMLElement {\r\n        return combobox.querySelector<HTMLElement>(\":scope > .content > .value\")!;\r\n    }\r\n    \r\n    getName(combobox: HTMLElement): string {\r\n        return combobox.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(combobox: HTMLElement, value: string): void {\r\n        combobox.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getDisabled(combobox: HTMLElement): boolean {\r\n        return combobox.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(combobox: HTMLElement, value: boolean): void {\r\n        combobox.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setExpanded(combobox: HTMLElement, value: boolean): void {\r\n        combobox.setAttribute(\"aria-expanded\", value.toString());\r\n    }\r\n\r\n    getExpanded(combobox: HTMLElement): boolean {\r\n        return JSON.parse(combobox.getAttribute(\"aria-expanded\") ?? false.toString());\r\n    }\r\n\r\n    setMultiSelectable(combobox: HTMLElement, value: boolean): void {\r\n        combobox.setAttribute(\"aria-multiselectable\", value.toString());\r\n    }\r\n\r\n    getMultiSelectable(combobox: HTMLElement): boolean {\r\n        return JSON.parse(combobox.getAttribute(\"aria-multiselectable\") ?? false.toString());\r\n    }\r\n\r\n    expand(combobox: HTMLElement): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        if (!expanded) {\r\n            this.setExpanded(combobox, true);\r\n            this.#positionBox(combobox);\r\n            const selectedOption = this.selectedOption(combobox);\r\n            if (selectedOption) {\r\n                selectedOption.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(combobox: HTMLElement): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        if (expanded) {\r\n            this.setExpanded(combobox, false);\r\n            combobox.focus();\r\n        }\r\n    }\r\n\r\n    toggle(combobox: HTMLElement, force?: boolean): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand(combobox) : this.collapse(combobox);\r\n    }\r\n\r\n    #optionsMutationCallback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            const targetCombobox = (<HTMLElement>target).closest<HTMLElement>(\".combobox\")!;\r\n            if (targetCombobox instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"childList\": {\r\n                        const {addedNodes} = mutation;\r\n                        const selector = \".option[aria-selected=true]\";\r\n                        for (let node of addedNodes) {\r\n                            if (node instanceof HTMLElement) {\r\n                                const selectedOption = node.matches(selector) ? node :\r\n                                    node.querySelector<HTMLElement>(selector);\r\n                                if (selectedOption) {\r\n                                    this.#setSelectedOption(targetCombobox, selectedOption);\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"option\") && !optionWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"optiongroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstOption(combobox: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = this.#box(combobox);\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastOption(combobox: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = this.#box(combobox);\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousOption(option: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextOption(option: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLElement | null>walker.nextNode();\r\n    }\r\n\r\n    #selectOption(combobox: HTMLElement, option: HTMLElement) {\r\n        const selectedOption = this.selectedOption(combobox);\r\n        if (selectedOption) {\r\n            optionWidget.setSelected(selectedOption, false);\r\n        }\r\n        if (option !== selectedOption) {\r\n            optionWidget.setSelected(option, true);\r\n            this.#setSelectedOption(combobox, option);\r\n            combobox.dispatchEvent(new Event(\"change\", {bubbles: true}));\r\n        }\r\n    }\r\n    \r\n    #setSelectedOption(combobox: HTMLElement, option: HTMLElement) {\r\n        this.#value(combobox).textContent = optionWidget.getLabel(option);\r\n    }\r\n\r\n    #positionBox(combobox: HTMLElement): void {\r\n        const box = combobox.querySelector<HTMLElement>(\":scope > .box\")!;\r\n        const {style: optionsStyle} = box;  \r\n        const {bottom, left} = combobox.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        optionsStyle.setProperty(\"top\", `${bottom + scrollY}px`);\r\n        optionsStyle.setProperty(\"left\", `${left + scrollX}px`);\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        this.toggle(targetCombobox);\r\n        const expanded = this.getExpanded(targetCombobox);\r\n        if (expanded) {\r\n            const selectedOption = this.selectedOption(targetCombobox);\r\n            (selectedOption ?? this.options(targetCombobox)[0])?.focus({preventScroll: true});\r\n        }\r\n        else {\r\n            const targetOption = (<HTMLElement>target).closest<HTMLElement>(\".option\");\r\n            if (targetOption) {\r\n                this.#selectOption(targetCombobox, targetOption);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetCombobox.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse(targetCombobox);\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        const expanded = this.getExpanded(targetCombobox);\r\n        const activeOption = this.#getActiveOption(targetCombobox);\r\n        const selectedOption = this.selectedOption(targetCombobox);\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                if (expanded) {\r\n                    const previousOption = activeOption ?\r\n                        this.#previousOption(activeOption) :\r\n                        this.#firstOption(targetCombobox);\r\n                    if (previousOption) {\r\n                        previousOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const previousOption = selectedOption ?\r\n                        this.#previousOption(selectedOption) :\r\n                        this.#firstOption(targetCombobox);\r\n                    if (previousOption) {\r\n                        this.#selectOption(targetCombobox, previousOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (expanded) {\r\n                    const nextOption = activeOption ?\r\n                        this.#nextOption(activeOption) :\r\n                        this.#lastOption(targetCombobox);\r\n                    if (nextOption) {\r\n                        nextOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const nextOption = selectedOption ?\r\n                        this.#nextOption(selectedOption) :\r\n                        this.#lastOption(targetCombobox);\r\n                    if (nextOption) {\r\n                        this.#selectOption(targetCombobox, nextOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstOption = this.#firstOption(targetCombobox);\r\n                if (firstOption) {\r\n                    if (expanded) {\r\n                        firstOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(targetCombobox, firstOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastOption = this.#lastOption(targetCombobox);\r\n                if (lastOption) {\r\n                    if (expanded) {\r\n                        lastOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(targetCombobox, lastOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (expanded) {\r\n                    this.collapse(targetCombobox);\r\n                    if (activeOption) {\r\n                        this.#selectOption(targetCombobox, activeOption);\r\n                    }\r\n                }\r\n                else {\r\n                    this.expand(targetCombobox);\r\n                    selectedOption?.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.collapse(targetCombobox);\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            default: {\r\n                const {length: keyLength} = key;\r\n                if (keyLength == 1) {\r\n                    const keyCode = key.charCodeAt(0);\r\n                    const options = this.options(targetCombobox);\r\n                    const activeIndex = activeOption ? options.indexOf(activeOption) : -1;\r\n                    const matchingOption = options.find(\r\n                        (option_i, i) => optionWidget.getLabel(option_i).toLowerCase().charCodeAt(0) == keyCode && i > activeIndex\r\n                    ) ?? options.find(\r\n                        (option_i) => optionWidget.getLabel(option_i).toLowerCase().charCodeAt(0) == keyCode\r\n                    );\r\n                    if (matchingOption) {\r\n                        matchingOption.focus({preventScroll: true});\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetItem = (<Element>target).closest<HTMLElement>(\".option\");\r\n        if (targetItem) {\r\n            targetItem.focus({preventScroll: true});\r\n        }\r\n    }\r\n}));","import { Widget, element } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\nimport { optionWidget } from \"./OptionWidget\";\r\n\r\nexport { optionGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"optiongroup\": OptionGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface OptionGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar optionGroupWidget = new (\r\nWidget({\r\n    name: \"optiongroup\"\r\n})(class OptionGroupWidgetFactoryBase extends WidgetFactory implements OptionGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"optiongroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n}));","import { HTMLEListElement } from \"../elements/containers/lists/List\";\r\nimport { HTMLEListItemElement } from \"../elements/containers/lists/ListItem\";\r\nimport { EMenu } from \"../elements/containers/menus/Menu\";\r\nimport { EMenuButton } from \"../elements/containers/menus/MenuButton\";\r\nimport { HTMLEMenuItemElement, EMenuItem } from \"../elements/containers/menus/MenuItem\";\r\nimport { EMenuItemGroup } from \"../elements/containers/menus/MenuItemGroup\";\r\nimport { EToolBarItem } from \"../elements/containers/toolbars/ToolBarItem\";\r\nimport { element, reactiveChildElements, reactiveElement, CustomElement, fragment } from \"../elements/Element\";\r\nimport { ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\n\r\nexport { ListModel };\r\nexport { ListItemModel };\r\nexport { ListView };\r\n\r\nclass ListModel extends ModelObject {\r\n    readonly items: ModelList<ListItemModel>;\r\n    sortFunction: ((item_a: ListItemModel, item_b: ListItemModel) => number) | null;\r\n    \r\n    constructor()\r\n    constructor(init: {items: ListItemModel[], sortFunction?: (item_a: ListItemModel, item_b: ListItemModel) => number})\r\n    constructor(init?: {items: ListItemModel[], sortFunction?: (item_a: ListItemModel, item_b: ListItemModel) => number}) {\r\n        super();\r\n        const sortFunction = init?.sortFunction ?? function(item_a: ListItemModel, item_b: ListItemModel) {\r\n            return item_a.label.localeCompare(item_b.label);\r\n        };\r\n        const items = new ModelList(init?.items ?? []);\r\n        items.setParent(this);\r\n        this.sortFunction = sortFunction;\r\n        this.items = items;\r\n    }\r\n\r\n    getItemByIndex(index: number): ListItemModel | null {\r\n        return this.items.get(index);\r\n    }\r\n}\r\n\r\ninterface TreeItem {\r\n    show(): void;\r\n    hide(): void;\r\n    display(): void;\r\n    remove(): void;\r\n}\r\n\r\nclass ListItemList implements TreeItem {\r\n    #items: ListItemModel[];\r\n\r\n    constructor(items: ListItemModel[]) {\r\n        this.#items = items;\r\n    }\r\n\r\n    static from(items: ListItemModel[]): ListItemList {\r\n        return new ListItemList(items);\r\n    }\r\n\r\n    show(): void {\r\n        const items = this.#items;\r\n        items.forEach(item_i => {\r\n            item_i.show();\r\n        });\r\n    }\r\n\r\n    hide(): void {\r\n        const items = this.#items;\r\n        items.forEach(item_i => {\r\n            item_i.hide();\r\n        });\r\n    }\r\n\r\n    display(): void {\r\n        const items = this.#items;\r\n        const result = items.reduce(\r\n            (result, item_i) => `${result} ${item_i.label}`, \"\"\r\n        );\r\n        console.log(result);\r\n    }\r\n\r\n    remove(): void {\r\n        const items = this.#items;\r\n        const removedItemsGroups = items.reduce((map, item_i) => {\r\n            const {parentNode} = item_i;\r\n            if (parentNode instanceof ListModel) {\r\n                const {items} = parentNode;\r\n                const group = map.get(items);\r\n                if (group) group.push(item_i);\r\n                else map.set(items, [item_i]);\r\n            }\r\n            return map;\r\n        }, new Map<ModelList, ListItemModel[]>());\r\n        Array.from(removedItemsGroups.entries()).forEach(\r\n            ([list_i, children_i]) => {\r\n                list_i.beginChanges();\r\n                children_i.forEach((child_i) => {\r\n                    list_i.remove(child_i);\r\n                });\r\n                list_i.endChanges();\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nclass ListItemModel extends ModelObject implements TreeItem {\r\n    readonly label: string;\r\n\r\n    @ModelProperty()\r\n    visibility: boolean;\r\n    \r\n    constructor(init: {label: string}) {\r\n        super();\r\n        const {label} = init;\r\n        this.label = label;\r\n        this.visibility = true;\r\n    }\r\n\r\n    get index(): number {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof ListModel) {\r\n            return parentNode.items.index(this);\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    show(): void {\r\n        this.visibility = true;\r\n    }\r\n\r\n    hide(): void {\r\n        this.visibility = false;\r\n    }\r\n\r\n    display(): void {\r\n        console.log(this.label);\r\n    }\r\n    \r\n    remove(): void {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof ListModel) {\r\n            const {items} = parentNode;\r\n            if (items) {\r\n                items.remove(this);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface ListViewConstructor {\r\n    readonly prototype: ListView;\r\n    new(): ListView;\r\n    new(model: ListModel): ListView;\r\n}\r\n\r\ninterface ListView extends View {\r\n    model: ListModel;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"v-list\": ListView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"v-list\"\r\n})\r\nclass ListViewBase extends View implements ListView {\r\n    readonly model!: ListModel;\r\n    #listElementMap: WeakMap<ListModel, WeakRef<HTMLEListElement>>;\r\n    #listItemElementsMap: WeakMap<ListItemModel, WeakRef<HTMLEListItemElement>>;\r\n\r\n    constructor()\r\n    constructor(model: ListModel)\r\n    constructor(model?: ListModel) {\r\n        super();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.#listElementMap = new WeakMap();\r\n        this.#listItemElementsMap = new WeakMap();\r\n        this.setModel(model ?? new ListModel());\r\n    }\r\n\r\n    getListElement(): HTMLEListElement | null {\r\n        const {model} = this;\r\n        return this.#listElementMap.get(model)?.deref() ?? null;\r\n    }\r\n\r\n    getListItemElement(model: ListItemModel): HTMLEListItemElement | null {\r\n        return this.#listItemElementsMap.get(model)?.deref()  ?? null;\r\n    }\r\n\r\n    selectedItems(): ListItemModel[] {\r\n        const list = this.getListElement();\r\n        if (list) {\r\n            const {model} = this;\r\n            const selectedElements = list.selectedItems();\r\n            return selectedElements.map(\r\n                item_i => <ListItemModel>model.getItemByIndex(\r\n                    item_i.posinset\r\n                )\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    renderShadow(): Node {\r\n        return fragment(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    renderLight(): Node {\r\n        const {model} = this;\r\n        const listElement = element(\"e-list\", {\r\n            attributes: {\r\n                tabindex: 0\r\n            },\r\n            children: [\r\n                element(\"e-listitemgroup\", {\r\n                    children: reactiveChildElements(\r\n                        model.items, item => this.#renderListItem(item)\r\n                    )\r\n                })\r\n            ],\r\n            listeners: {\r\n                contextmenu: <EventListener>this.#handleContextMenuEvent.bind(this),\r\n                keydown: <EventListener>this.#handleKeyDownEvent.bind(this)\r\n            }\r\n        });\r\n        this.#listElementMap.set(model, new WeakRef(listElement));\r\n        return listElement;\r\n    }\r\n\r\n    #renderListItem(item: ListItemModel): Element {\r\n        const listItemElement = element(\"e-listitem\", {\r\n            attributes: {\r\n                tabindex: -1,\r\n                name: item.label,\r\n                draggable: \"true\"\r\n            },\r\n            dataset: {\r\n                index: item.index\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    children: [\r\n                        item.label\r\n                    ]\r\n                }),\r\n                element(\"e-toolbar\", {\r\n                    attributes: {\r\n                        //slot: \"toolbar\",\r\n                        tabindex: 0\r\n                    },\r\n                    children: [\r\n                        element(\"e-toolbaritemgroup\", {\r\n                            children: [\r\n                                EToolBarItem.menubutton({\r\n                                    name: \"settings\",\r\n                                    label: \"Actions\",\r\n                                    menubutton: new EMenuButton({\r\n                                        menu: reactiveElement(\r\n                                            item,\r\n                                            new EMenu({\r\n                                                children: [\r\n                                                    new EMenuItemGroup({\r\n                                                        items: [\r\n                                                            EMenuItem.button({\r\n                                                                name: \"display\",\r\n                                                                label: \"Display\",\r\n                                                                trigger: () => {\r\n                                                                    item.display();\r\n                                                                }\r\n                                                            }),\r\n                                                            EMenuItem.button({\r\n                                                                name: \"delete\",\r\n                                                                label: \"Delete\",\r\n                                                                trigger: () => {\r\n                                                                    item.remove();\r\n                                                                }\r\n                                                            })\r\n                                                        ]\r\n                                                    }),\r\n                                                    new EMenuItemGroup({\r\n                                                        items: [\r\n                                                            EMenuItem.button({\r\n                                                                name: \"visibility\",\r\n                                                                label: \"Visibility\",\r\n                                                                trigger: () => {\r\n                                                                    item.visibility ?\r\n                                                                    item.hide() :\r\n                                                                    item.show();\r\n                                                                }\r\n                                                            })\r\n                                                        ]\r\n                                                    })\r\n                                                ]\r\n                                            }),\r\n                                            [\"visibility\"],\r\n                                            (menu, property, oldValue, newValue) => {\r\n                                                //const {items} = menu;\r\n                                                switch (property) {\r\n                                                    case \"visibility\": {\r\n                                                        /*const item = <HTMLEMenuItemElement>items.namedItem(\"visibility\");\r\n                                                        item.textContent = newValue ? \"Hide\" : \"Show\";\r\n                                                        item.title = newValue ? \"Hide\" : \"Show\";*/\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        )\r\n                                    })\r\n                                }),\r\n                                reactiveElement(\r\n                                    item,\r\n                                    element(\"e-toolbaritem\", {\r\n                                        attributes: {\r\n                                            name: \"visibility\",\r\n                                            type: \"checkbox\",\r\n                                            tabindex: -1\r\n                                        },\r\n                                        listeners: {\r\n                                            trigger: () => {\r\n                                                item.visibility ?\r\n                                                    item.hide() :\r\n                                                    item.show();\r\n                                            }\r\n                                        }\r\n                                    }),\r\n                                    [\"visibility\"],\r\n                                    (toolbaritem, property, oldValue, newValue) => {\r\n                                        toolbaritem.title = newValue ? \"Hide\" : \"Show\";\r\n                                        toolbaritem.checked = newValue;\r\n                                    }\r\n                                )\r\n                            ]\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        });\r\n        this.#listItemElementsMap.set(item, new WeakRef(listItemElement));\r\n        return listItemElement;\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        const {clientX, clientY, currentTarget, target} = event;\r\n        const {model} = this;\r\n        if (currentTarget instanceof HTMLEListElement && target instanceof HTMLEListItemElement) {\r\n            const activeItem = model.getItemByIndex(\r\n                parseInt(target.dataset.index!)\r\n            )!;\r\n            const menu = element(\"e-menu\", {\r\n                attributes: {\r\n                    tabindex: -1,\r\n                    contextual: true\r\n                },\r\n                children: [\r\n                    element(\"e-menuitemgroup\", {\r\n                        attributes: {\r\n                            tabindex: -1\r\n                        },\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                attributes: {\r\n                                    tabindex: -1\r\n                                },\r\n                                children: [\r\n                                    \"Display\"\r\n                                ],\r\n                                listeners: {\r\n                                    trigger: () => {\r\n                                        ListItemList.from(\r\n                                            this.selectedItems()\r\n                                        ).display();\r\n                                    }\r\n                                }\r\n                            }),\r\n                            element(\"e-menuitem\", {\r\n                                attributes: {\r\n                                    tabindex: -1\r\n                                },\r\n                                children: [\r\n                                    \"Delete\"\r\n                                ],\r\n                                listeners: {\r\n                                    trigger: () => {\r\n                                        ListItemList.from(\r\n                                            this.selectedItems()\r\n                                        ).remove();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    }),\r\n                    element(\"e-menuitemgroup\", {\r\n                        attributes: {\r\n                            tabindex: -1\r\n                        },\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                attributes: {\r\n                                    tabindex: -1,\r\n                                    type: \"checkbox\"\r\n                                },\r\n                                children: [\r\n                                    activeItem.visibility ? \"Hide\" : \"Show\"\r\n                                ],\r\n                                listeners: {\r\n                                    trigger: () => {\r\n                                        const selectedItems = ListItemList.from(\r\n                                            this.selectedItems()\r\n                                        );\r\n                                        activeItem.visibility ?\r\n                                            selectedItems.hide() :\r\n                                            selectedItems.show();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ],\r\n                listeners: {\r\n                    close: () => {\r\n                        target.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            });\r\n            target.append(menu);\r\n            menu.positionContextual(clientX, clientY);\r\n            menu.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        if (currentTarget instanceof HTMLEListElement) {\r\n            switch (key) {\r\n                case \"Delete\": {\r\n                    ListItemList.from(\r\n                        this.selectedItems()\r\n                    ).remove();\r\n                    event.preventDefault();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ListView: ListViewConstructor = ListViewBase;","import { HTMLEGridElement } from \"../elements/containers/grid/Grid\";\r\nimport { HTMLEGridCellElement } from \"../elements/containers/grid/GridCell\";\r\nimport { HTMLEGridRowElement } from \"../elements/containers/grid/GridRow\";\r\nimport { element, reactiveChildElements, CustomElement, fragment, AttributeProperty, reactiveElement } from \"../elements/Element\";\r\nimport { ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\nimport { HTMLEMenuItemElement } from \"../elements/containers/menus/MenuItem\";\r\n\r\nexport { GridModel };\r\nexport { GridRowModel };\r\nexport { GridColumnModel };\r\nexport { GridView };\r\n\r\nclass GridModel extends ModelObject {\r\n    readonly rows: ModelList<GridRowModel>;\r\n    readonly columns: ModelList<GridColumnModel>;\r\n\r\n    constructor()\r\n    constructor(init: {rows: GridRowModel[], columns: GridColumnModel[]})\r\n    constructor(init?: {rows: GridRowModel[], columns: GridColumnModel[]}) {\r\n        super();\r\n        const rows = new ModelList(init?.rows ?? []);\r\n        rows.setParent(this);\r\n        this.rows = rows;\r\n        const columns = new ModelList(init?.columns ?? []);\r\n        columns.setParent(this);\r\n        this.columns = columns;\r\n    }\r\n\r\n    getColumnByName(name: string): GridColumnModel | null {\r\n        return Array.from(this.columns.values()).find(\r\n            column_i => column_i.name == name\r\n        ) ?? null;\r\n    }\r\n\r\n    sortByColumn(column: GridColumnModel, sortOrder: number) {\r\n        Array.from(this.columns.values()).forEach((column_i) => {\r\n            column_i.sortorder = column_i == column ? sortOrder : undefined;\r\n        });\r\n        this.rows.sort(\r\n            (row_1, row_2) => {\r\n                const cell_1 = <string>column.extract(row_1).toString();\r\n                const cell_2 = <string>column.extract(row_2).toString();\r\n                return sortOrder * cell_1.localeCompare(cell_2);\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\ntype Constructor = {\r\n    new(...args: any): any;\r\n    readonly prototype: any;\r\n}\r\n\r\ntype GridRowFilter = {\r\n    filter: (row: GridRowModel) => boolean;\r\n}\r\n\r\nclass GridColumnModel<T extends Constructor = Constructor> extends ModelObject {\r\n    readonly name: string;\r\n    readonly label: string;\r\n    readonly type: T;\r\n    readonly extract: (row: GridRowModel) => InstanceType<T>;\r\n    readonly filters: (GridRowFilter & {name: string})[];\r\n\r\n    @ModelProperty()\r\n    sortorder: number | undefined;\r\n\r\n    constructor(init: {\r\n        name: string,\r\n        label: string,\r\n        type: T,\r\n        extract: (row: GridRowModel) => InstanceType<T>,\r\n        filters?: (GridRowFilter & {name: string})[]\r\n    }) {\r\n        super();\r\n        const {name, label, type, extract} = init;\r\n        this.name = name;\r\n        this.label = label;\r\n        this.type = type;\r\n        this.extract = extract;\r\n        this.filters = init.filters ?? [];\r\n        this.sortorder = 1;\r\n    }\r\n}\r\n\r\nclass GridRowModel extends ModelObject {\r\n    @ModelProperty()\r\n    name: string;\r\n\r\n    @ModelProperty()\r\n    age: number;\r\n    \r\n    constructor(init: {name: string, age: number}) {\r\n        super();\r\n        const {name, age} = init;\r\n        this.name = name;\r\n        this.age = age;\r\n    }\r\n}\r\n\r\ninterface GridViewConstructor {\r\n    readonly prototype: GridView;\r\n    new(): GridView;\r\n    new(model: GridModel): GridView;\r\n}\r\n\r\ninterface GridView extends View {\r\n    readonly shadowRoot: ShadowRoot;\r\n    model: GridModel;\r\n    resizable: boolean;\r\n    sortable: boolean;\r\n    setColumnDelegate(delegate: (column: GridColumnModel) => string | Node): void;\r\n    setCellDelegate(delegate: (row: GridRowModel, column: GridColumnModel) => string | Node): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"v-grid\": GridView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"v-grid\"\r\n})\r\nclass GridViewBase extends View implements GridView {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly model!: GridModel;\r\n\r\n    #columnDelegate: (column: GridColumnModel) => string | Node;\r\n    #cellDelegate: (row: GridRowModel, column: GridColumnModel) => string | Node;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    resizable!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    sortable!: boolean;\r\n\r\n    #displayFilters: (GridRowFilter & {name: string})[];\r\n    #searchFilter: GridRowFilter | null;\r\n\r\n    #gridRowElementsMap: WeakMap<GridRowModel, WeakRef<HTMLEGridRowElement>>\r\n    \r\n    constructor()\r\n    constructor(model: GridModel)\r\n    constructor(model?: GridModel) {\r\n        super();\r\n        this.#displayFilters = [];\r\n        this.#searchFilter = null;\r\n        this.#gridRowElementsMap = new WeakMap();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.setModel(model ?? new GridModel());\r\n        this.#cellDelegate = (row: GridRowModel, column: GridColumnModel) => {\r\n            return element(\"label\", {\r\n                children: [\r\n                    column.extract(row)\r\n                ]\r\n            });\r\n        };\r\n        this.#columnDelegate = (column: GridColumnModel) => {\r\n            return element(\"label\", {\r\n                children: [\r\n                    column.label\r\n                ]\r\n            });\r\n        };\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"resizable\":\r\n            case \"sortable\": {\r\n                this.refresh();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    get gridElement(): HTMLEGridElement {\r\n        return this.getGridElement()!;\r\n    }\r\n\r\n    setColumnDelegate(delegate: (column: GridColumnModel) => string | Node): void {\r\n        this.#columnDelegate = delegate;\r\n    }\r\n\r\n    setCellDelegate(delegate: (row: GridRowModel, column: GridColumnModel) => string | Node): void {\r\n        this.#cellDelegate = delegate;\r\n    }\r\n\r\n    getGridElement(): HTMLEGridElement | null {\r\n        return this.shadowRoot.querySelector(`:scope > e-grid`);\r\n    }\r\n\r\n    getRowElement(row: GridRowModel): HTMLEGridRowElement | null {\r\n        return this.#gridRowElementsMap.get(row)?.deref() ?? null;\r\n    }\r\n\r\n    getColumnHeaderElement(column: GridColumnModel): HTMLEGridCellElement | null {\r\n        return this.shadowRoot.querySelector(`:scope > e-grid > e-gridhead > e-gridrow > e-gridcell[type=columnheader][name=${column.name}]`);\r\n    }\r\n\r\n    getColumnDataElements(column: GridColumnModel): HTMLEGridCellElement[] {\r\n        return Array.from(this.shadowRoot.querySelectorAll(`:scope > e-grid > e-gridbody > e-gridrow > e-gridcell[headers~=${column.name}]`));\r\n    }\r\n\r\n    renderShadow(): Node {\r\n        const {model} = this;\r\n        return fragment(\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/main.css\"\r\n                }\r\n            }),\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/views/gridview.css\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                children: [\r\n                    element(\"input\", {\r\n                        attributes: {\r\n                            type: \"search\"\r\n                        },\r\n                        listeners: {\r\n                            input: <EventListener>this.#handleSearchInputEvent.bind(this)\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"e-grid\", {\r\n                attributes: {\r\n                    tabindex: 0,\r\n                    selectby: \"row\"\r\n                },\r\n                children: [\r\n                    element(\"e-gridhead\", {\r\n                        children: [\r\n                            element(\"e-gridrow\", {\r\n                                children: reactiveChildElements(\r\n                                    model.columns, column => this.#renderGridColumnHeaderCell(column)\r\n                                )\r\n                            })\r\n                        ]\r\n                    }),\r\n                    element(\"e-gridbody\", {\r\n                        children: reactiveChildElements(\r\n                            model.rows, row => this.#renderGridBodyRow(row)\r\n                        )\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    setSearchFilter(filter: GridRowFilter | null): void {\r\n        this.#searchFilter = filter;\r\n        Array.from(this.model.rows.values()).forEach((row_i) => {\r\n            const rowElement = this.getRowElement(row_i);\r\n            if (rowElement) {\r\n                rowElement.hidden =\r\n                    !this.#displayFilters.some(filter_i => filter_i.filter(row_i))\r\n                    && !(filter?.filter(row_i) ?? true);\r\n            }\r\n        });\r\n        const {gridElement} = this;\r\n        gridElement.beginSelection();\r\n        gridElement.selectedRows().forEach(selectedRow_i => selectedRow_i.selected = false);\r\n        gridElement.endSelection();\r\n    }\r\n\r\n    addDisplayFilter(filter: (GridRowFilter & {name: string;})): void {\r\n        const displayFilters = this.#displayFilters;\r\n        if (!displayFilters.includes(filter)) {\r\n            this.#displayFilters.push(filter);\r\n            Array.from(this.model.rows.values()).forEach((row_i) => {\r\n                const rowElement = this.getRowElement(row_i);\r\n                if (rowElement) {\r\n                    rowElement.hidden = !this.#displayFilters.some(filter_i => filter_i.filter(row_i));\r\n                }\r\n            });\r\n        }\r\n        const {gridElement} = this;\r\n        gridElement.beginSelection();\r\n        gridElement.selectedRows().forEach(selectedRow_i => selectedRow_i.selected = false);\r\n        gridElement.endSelection();\r\n    }\r\n\r\n    removeDisplayFilter(filter: (GridRowFilter & {name: string;})): void {\r\n        const displayFilters = this.#displayFilters;\r\n        const filterIndex = displayFilters.indexOf(filter);\r\n        if (filterIndex > -1) {\r\n            displayFilters.splice(filterIndex, 1);\r\n            Array.from(this.model.rows.values()).forEach((row_i) => {\r\n                const rowElement = this.getRowElement(row_i);\r\n                if (rowElement) {\r\n                    rowElement.hidden = !this.#displayFilters.every(filter_i => filter_i.filter(row_i));\r\n                }\r\n            });\r\n        }\r\n        const {gridElement} = this;\r\n        gridElement.beginSelection();\r\n        gridElement.selectedRows().forEach(selectedRow_i => selectedRow_i.selected = false);\r\n        gridElement.endSelection();\r\n    }\r\n\r\n    #renderGridColumnHeaderCell(column: GridColumnModel): Element {\r\n        const {model} = this;\r\n        const gridColumnElement = reactiveElement(\r\n            column,\r\n            element(\"e-gridcell\", {\r\n                attributes: {\r\n                    tabindex: -1,\r\n                    name: column.name,\r\n                    id: this.resizable ? `${column.name}-columnheader` : undefined,\r\n                    type: \"columnheader\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            class: \"gridcell-content\"\r\n                        },\r\n                        children: (<Node[]>[\r\n                            element(\"label\", {\r\n                                attributes: {\r\n                                    class: \"gridcell-label\"\r\n                                },\r\n                                children: [\r\n                                    column.label\r\n                                ],\r\n                                listeners: {\r\n                                    click: <EventListener>this.#handleColumnLabelClickEvent.bind(this)\r\n                                }\r\n                            }),\r\n                            element(\"e-toolbar\", {\r\n                                attributes: {\r\n                                    tabindex: -1,\r\n                                },\r\n                                children: [\r\n                                    element(\"e-toolbaritem\", {\r\n                                        attributes: {\r\n                                            type: \"menubutton\",\r\n                                            tabindex: -1,\r\n                                        },\r\n                                        children: [\r\n                                            element(\"e-menubutton\",  {\r\n                                                attributes: {\r\n                                                    slot: \"menubutton\",\r\n                                                    tabindex: -1,\r\n                                                },\r\n                                                children: [\r\n                                                    element(\"e-menu\",  {\r\n                                                        attributes: {\r\n                                                            slot: \"menu\",\r\n                                                            tabindex: -1,\r\n                                                        },\r\n                                                        children: [\r\n                                                            element(\"e-menuitem\",  {\r\n                                                                attributes: {\r\n                                                                    type: \"button\",\r\n                                                                    tabindex: -1,\r\n                                                                },\r\n                                                                children: [\r\n                                                                    \"Resize Column\"\r\n                                                                ],\r\n                                                                listeners: {\r\n                                                                    trigger: () => {\r\n                                                                        const columnHeaderElement = this.getColumnHeaderElement(column);\r\n                                                                        if (columnHeaderElement) {\r\n                                                                            const {style} = columnHeaderElement;\r\n                                                                            style.removeProperty(\"width\");\r\n                                                                            style.removeProperty(\"max-width\");\r\n                                                                            this.getColumnDataElements(column).forEach(\r\n                                                                                cell_i => cell_i.style.maxWidth = \"unset\"\r\n                                                                            );\r\n                                                                        }\r\n                                                                    }\r\n                                                                }\r\n                                                            }),\r\n                                                            element(\"e-menuitem\",  {\r\n                                                                attributes: {\r\n                                                                    type: \"submenu\",\r\n                                                                    tabindex: -1,\r\n                                                                },\r\n                                                                children: [\r\n                                                                    \"Sort\",\r\n                                                                    reactiveElement(\r\n                                                                        column,\r\n                                                                        element(\"e-menu\",  {\r\n                                                                            attributes: {\r\n                                                                                slot: \"menu\",\r\n                                                                                tabindex: -1,\r\n                                                                            },\r\n                                                                            children: [\r\n                                                                                element(\"e-menuitem\",  {\r\n                                                                                    attributes: {\r\n                                                                                        type: \"radio\",\r\n                                                                                        name: \"sort\",\r\n                                                                                        value: \"1\",\r\n                                                                                        tabindex: -1,\r\n                                                                                    },\r\n                                                                                    children: [\r\n                                                                                        \"Ascending\"\r\n                                                                                    ]\r\n                                                                                }),\r\n                                                                                element(\"e-menuitem\",  {\r\n                                                                                    attributes: {\r\n                                                                                        type: \"radio\",\r\n                                                                                        name: \"sort\",\r\n                                                                                        value: \"-1\",\r\n                                                                                        tabindex: -1,\r\n                                                                                    },\r\n                                                                                    children: [\r\n                                                                                        \"Descending\"\r\n                                                                                    ]\r\n                                                                                })\r\n                                                                            ],\r\n                                                                            listeners: {\r\n                                                                                trigger: (event) => {\r\n                                                                                    const {target} = event;\r\n                                                                                    const sortOrder = (<HTMLEMenuItemElement>target).value;\r\n                                                                                    model.sortByColumn(column, parseInt(sortOrder));\r\n                                                                                }\r\n                                                                            }\r\n                                                                        }),\r\n                                                                        [\"sortorder\"],\r\n                                                                        (menu, property, oldValue, newValue) => {\r\n                                                                            menu.querySelectorAll<HTMLEMenuItemElement>(\"e-menuitem[name^=sort]\")\r\n                                                                            .forEach(sortRadioItem_i => {\r\n                                                                                sortRadioItem_i.checked = parseInt(sortRadioItem_i.value) === newValue;\r\n                                                                            });\r\n                                                                        }\r\n                                                                    )\r\n                                                                ]\r\n                                                            }),\r\n                                                            element(\"e-menuitem\",  {\r\n                                                                attributes: {\r\n                                                                    type: \"submenu\",\r\n                                                                    tabindex: -1,\r\n                                                                },\r\n                                                                children: [\r\n                                                                    \"Filter\",\r\n                                                                    element(\"e-menu\",  {\r\n                                                                        attributes: {\r\n                                                                            slot: \"menu\",\r\n                                                                            tabindex: -1,\r\n                                                                        },\r\n                                                                        children: column.filters.map((filter_i, i) =>\r\n                                                                            element(\"e-menuitem\", {\r\n                                                                                attributes: {\r\n                                                                                    tabindex: -1,\r\n                                                                                    type: \"checkbox\",\r\n                                                                                    checked: this.#displayFilters.includes(filter_i)\r\n                                                                                },\r\n                                                                                children: [\r\n                                                                                    filter_i.name\r\n                                                                                ],\r\n                                                                                listeners: {\r\n                                                                                    trigger: (event) => {\r\n                                                                                        const {currentTarget} = event;\r\n                                                                                        if (currentTarget instanceof HTMLEMenuItemElement) {\r\n                                                                                            const {checked} = currentTarget;\r\n                                                                                            if (checked) {\r\n                                                                                                this.addDisplayFilter(filter_i);\r\n                                                                                            }\r\n                                                                                            else {\r\n                                                                                                this.removeDisplayFilter(filter_i);\r\n                                                                                            }\r\n                                                                                        }\r\n                                                                                    }\r\n                                                                                }\r\n                                                                            })\r\n                                                                        )\r\n                                                                    })\r\n                                                                ]\r\n                                                            })\r\n                                                        ]\r\n                                                    })\r\n                                                ]\r\n                                            })\r\n                                        ]\r\n                                    })\r\n                                ]\r\n                            })\r\n                        ]).concat(\r\n                            this.resizable ? [\r\n                                element(\"e-wsash\", {\r\n                                    attributes: {\r\n                                        controls: `${column.name}-columnheader`\r\n                                    },\r\n                                    listeners: {\r\n                                        resize: () => {\r\n                                            this.getColumnDataElements(column).forEach(\r\n                                                cell_i => cell_i.style.removeProperty(\"max-width\")\r\n                                            );\r\n                                        }\r\n                                    }\r\n                                })\r\n                            ] : []\r\n                        )\r\n                    })\r\n                ]\r\n            }),\r\n            [\"sortorder\"],\r\n            (cell, property, oldValue, newValue) => {\r\n                switch (property) {\r\n                    case \"sortorder\":\r\n                        if (typeof newValue !== \"undefined\") {\r\n                            cell.dataset.sortorder = newValue.toString();\r\n                        }\r\n                        else {\r\n                            delete cell.dataset.sortorder;\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        );\r\n        return gridColumnElement;\r\n    }\r\n\r\n    #renderGridBodyRow(row: GridRowModel): Element {\r\n        const {model} = this;\r\n        const gridRowElement = element(\"e-gridrow\", {\r\n            attributes: {\r\n                tabindex: -1\r\n            },\r\n            children: reactiveChildElements(\r\n                model.columns, column => this.#renderGridDataCell(row, column)\r\n            )\r\n        });\r\n        this.#gridRowElementsMap.set(row, new WeakRef(gridRowElement));\r\n        return gridRowElement;\r\n    }\r\n\r\n    #renderGridDataCell(row: GridRowModel, column: GridColumnModel): Element {\r\n        const gridCellElement = element(\"e-gridcell\", {\r\n            attributes: {\r\n                type: \"gridcell\",\r\n                headers: column.name\r\n            },\r\n            children: [\r\n                this.#cellDelegate(row, column)\r\n            ]\r\n        });\r\n        return gridCellElement;\r\n    }\r\n\r\n    #handleSearchInputEvent(event: InputEvent) {\r\n        const {target} = event;\r\n        if (target instanceof HTMLInputElement) {\r\n            const {value} = target;\r\n            this.setSearchFilter(value !== \"\" ? {\r\n                filter: (row) => row.name.toLowerCase().startsWith(value.toLowerCase())\r\n            } : null);\r\n        }\r\n    }\r\n\r\n    #handleColumnLabelClickEvent(event: MouseEvent): void {\r\n        const {currentTarget} = event;\r\n        const {model} = this;\r\n        const {columns} = model;\r\n        if (currentTarget instanceof Element) {\r\n            const targetCell = currentTarget.closest(\"e-gridcell\");\r\n            if (targetCell) {\r\n                const targetColumn = Array.from(columns.values()).find(column_i => column_i.name == targetCell.name);\r\n                if (targetColumn) {\r\n                    const sortorder = targetColumn.sortorder !== undefined ? -targetColumn.sortorder : 1;\r\n                    model.sortByColumn(targetColumn, sortorder);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar GridView: GridViewConstructor = GridViewBase;","//import { MenuItemGroupWidget, MenuItemWidget, MenuWidget, MenuBarWidget } from \"./src/views/MenuBarWidget\";\r\nimport { TreeItemModel, TreeModel, TreeView } from \"./src/views/TreeeView\";\r\n\r\nimport \"./index\";\r\nimport { ListItemModel, ListModel, ListView } from \"./src/views/ListView\";\r\nimport { GridColumnModel, GridModel, GridRowModel, GridView } from \"./src/views/GridView\";\r\nimport { element, fragment, widget } from \"./src/elements/Element\";\r\nimport { treeItemWidget } from \"./src/views/widgets/tree/TreeItemWidget\";\r\nimport { Editor } from \"./src/Editor\";\r\nimport { comboBoxWidget, menuWidget, optionWidget } from \"./index\";\r\n\r\nexport async function main() {\r\n    \r\n    /*const menubar = new MenuBarWidget([\r\n        new MenuItemWidget({\r\n            label: \"File\",\r\n            name: \"file\",\r\n            type: \"menu\",\r\n            menu: new MenuWidget({\r\n                name: \"File\",\r\n                groups: [\r\n                    new MenuItemGroupWidget({\r\n                        name: \"fileActions\",\r\n                        items: [\r\n                            new MenuItemWidget({\r\n                                label: \"Import file...\",\r\n                                name: \"import\"\r\n                            }),\r\n                            new MenuItemWidget({\r\n                                label: \"Export file...\",\r\n                                name: \"export\",\r\n                                hotkey: new HotKey(Key.B, KeyModifier.Control, KeyModifier.Alt)\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        }),\r\n        new MenuItemWidget({\r\n            label: \"Preferences\",\r\n            name: \"preferences\",\r\n            type: \"menu\",\r\n            menu: new MenuWidget({\r\n                name: \"Preferences\",\r\n                groups: [\r\n                    new MenuItemGroupWidget({\r\n                        name: \"fileActions\",\r\n                        items: [\r\n                            new MenuItemWidget({\r\n                                label: \"Advanced User\",\r\n                                name: \"advanced\",\r\n                                type: \"checkbox\",\r\n                                hotkey: new HotKey(Key.A, KeyModifier.Control, KeyModifier.Alt)\r\n                            }),\r\n                            new MenuItemWidget({\r\n                                label: \"Layout\",\r\n                                name: \"layout\",\r\n                                type: \"submenu\",\r\n                                menu: new MenuWidget({\r\n                                    name: \"Layout\",\r\n                                    groups: [\r\n                                        new MenuItemGroupWidget({\r\n                                            name: \"Layout\",\r\n                                            items: [\r\n                                                new MenuItemWidget({\r\n                                                    label: \"Standard\",\r\n                                                    name: \"standard\",\r\n                                                    type: \"radio\"\r\n                                                }),\r\n                                                new MenuItemWidget({\r\n                                                    label: \"Advanced\",\r\n                                                    name: \"advanced\",\r\n                                                    type: \"radio\"\r\n                                                })\r\n                                            ]\r\n                                        })\r\n                                    ]\r\n                                })\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        })\r\n    ]);*/\r\n\r\n    const treeView = new TreeView();\r\n    const treeModel = new TreeModel({\r\n        items: [\r\n            new TreeItemModel({\r\n                label: \"TI 0\",\r\n                type: \"parent\",\r\n                items: [\r\n                    new TreeItemModel({\r\n                        label: \"TI 1A\",\r\n                        type: \"parent\",\r\n                        items: [\r\n                            new TreeItemModel({\r\n                                type: \"leaf\",\r\n                                label: \"TI 1AX\"\r\n                            }),\r\n                        ]\r\n                    }),\r\n                    new TreeItemModel({\r\n                        type: \"parent\",\r\n                        label: \"TI 1B\"\r\n                    })\r\n                ]\r\n            }),\r\n            new TreeItemModel({\r\n                label: \"TI 1\",\r\n                type: \"parent\",\r\n                items: [\r\n                    new TreeItemModel({\r\n                        label: \"TI 1A\",\r\n                        type: \"parent\",\r\n                        items: [\r\n                            new TreeItemModel({\r\n                                type: \"leaf\",\r\n                                label: \"TI 1AX\"\r\n                            }),\r\n                        ]\r\n                    }),\r\n                    new TreeItemModel({\r\n                        type: \"parent\",\r\n                        label: \"TI 1B\"\r\n                    })\r\n                ]\r\n            }),\r\n            new TreeItemModel({\r\n                type: \"leaf\",\r\n                label: \"TI 2\"\r\n            }),\r\n            new TreeItemModel({\r\n                type: \"leaf\",\r\n                label: \"TI 3\"\r\n            })\r\n        ],\r\n        sortFunction: (item_a: TreeItemModel, item_b: TreeItemModel) => {\r\n            const {label: aLabel} = item_a;\r\n            const {label: bLabel} = item_b;\r\n            return bLabel.localeCompare(aLabel);\r\n        }\r\n    });\r\n    treeView.setModel(treeModel);\r\n    document.body.append(treeView);\r\n    \r\n    treeModel.childItems.append(\r\n        new TreeItemModel({\r\n            label: \"yo\",\r\n            type: \"parent\",\r\n            items: [\r\n                new TreeItemModel({\r\n                    type: \"leaf\",\r\n                    label: \"plop\"\r\n                })\r\n            ]\r\n        })\r\n    );\r\n\r\n    const listView = new ListView();\r\n    listView.setModel(\r\n        new ListModel({\r\n            items: [\r\n                new ListItemModel({\r\n                    label: \"Hey\"\r\n                }),\r\n                new ListItemModel({\r\n                    label: \"Yo\"\r\n                })\r\n            ]\r\n        })\r\n    );\r\n\r\n    //document.body.append(listView);\r\n\r\n    // Menu actions\r\n    // Toolbar actions\r\n    const gridView = new GridView();\r\n    gridView.resizable = true;\r\n    gridView.sortable = true;\r\n    gridView.setColumnDelegate((column) => {\r\n        return fragment(\r\n            element(\"label\", {\r\n                children: [\r\n                    column.label\r\n                ]\r\n            })/*,\r\n            element(\"e-toolbar\", {\r\n                children: [\r\n                    element(\"e-toolbaritem\", {\r\n                        attributes: {\r\n                            type: \"button\"\r\n                        }\r\n                    })\r\n                ]\r\n            })*/\r\n        );\r\n    });\r\n    gridView.setModel(\r\n        new GridModel({\r\n            columns: [\r\n                new GridColumnModel({\r\n                    name: \"name\",\r\n                    label: \"Name\",\r\n                    type: String,\r\n                    extract: (row) => row.name\r\n                }),\r\n                new GridColumnModel({\r\n                    name: \"age\",\r\n                    label: \"Age\",\r\n                    type: Number,\r\n                    extract: (row) => row.age,\r\n                    filters: [{\r\n                        name: \"Minors\",\r\n                        filter: (row) => row.age < 18\r\n                    },{\r\n                        name: \"Majors\",\r\n                        filter: (row) => row.age >= 18\r\n                    }]\r\n                })\r\n            ],\r\n            rows: [\r\n                new GridRowModel({\r\n                    name: \"Denis\",\r\n                    age: 13\r\n                }),\r\n                new GridRowModel({\r\n                    name: \"Jean-Charles\",\r\n                    age: 32\r\n                }),\r\n                new GridRowModel({\r\n                    name: \"Charles\",\r\n                    age: 25\r\n                })\r\n            ]\r\n        })\r\n    );\r\n\r\n    //document.body.append(gridView);\r\n    \r\n    const menuView = widget(\"menubar\", {\r\n        slotted: [\r\n            widget(\"menuitem\", {\r\n                properties: {\r\n                    label: \"MenuItem 0\",\r\n                    name: \"MenuItem 0\",\r\n                    type: \"menu\",\r\n                    disabled: true\r\n                },\r\n                slotted: [\r\n                    widget(\"menu\", {\r\n                        slotted: [\r\n                            widget(\"menuitem\", {\r\n                                properties: {\r\n                                    label: \"MenuItem 1\",\r\n                                    name: \"MenuItem 1\",\r\n                                    type: \"checkbox\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            widget(\"menuitem\", {\r\n                properties: {\r\n                    label: \"MenuItem 0\",\r\n                    name: \"MenuItem 0\",\r\n                    type: \"menu\"\r\n                },\r\n                slotted: [\r\n                    widget(\"menu\", {\r\n                        slotted: [\r\n                            widget(\"menuitem\", {\r\n                                properties: {\r\n                                    label: \"MenuItem 1\",\r\n                                    name: \"MenuItem 1\",\r\n                                    type: \"checkbox\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            widget(\"menuitem\", {\r\n                properties: {\r\n                    label: \"MenuItem 1\",\r\n                    name: \"MenuItem 1\",\r\n                    type: \"menu\"\r\n                },\r\n                slotted: [\r\n                    widget(\"menu\", {\r\n                        slotted: [\r\n                            widget(\"menuitemgroup\", {\r\n                                slotted: [\r\n                                    widget(\"menuitem\", {\r\n                                        properties: {\r\n                                            label: \"MenuItem 1\",\r\n                                            type: \"checkbox\",\r\n                                            keyshortcut: \"Ctrl+B\",\r\n                                            disabled: true,\r\n                                            checked: true\r\n                                        }\r\n                                    }),\r\n                                    widget(\"menuitem\", {\r\n                                        properties: {\r\n                                            type: \"button\",\r\n                                            label: \"MenuItem 2\",\r\n                                            keyshortcut: \"Ctrl+A\"\r\n                                        }\r\n                                    })\r\n                                ]\r\n                            }),\r\n                            widget(\"separator\"),\r\n                            widget(\"menuitem\", {\r\n                                properties: {\r\n                                    label: \"Submenu\",\r\n                                    type: \"submenu\"\r\n                                },\r\n                                slotted: [\r\n                                    widget(\"menu\", {\r\n                                        slotted: [\r\n                                            widget(\"menuitem\", {\r\n                                                properties: {\r\n                                                    label: \"MenuItem 1\",\r\n                                                    type: \"radio\",\r\n                                                    name: \"radio\",\r\n                                                    value: \"1\"\r\n                                                }\r\n                                            }),\r\n                                            widget(\"menuitem\", {\r\n                                                properties: {\r\n                                                    type: \"radio\",\r\n                                                    label: \"MenuItem 2\",\r\n                                                    name: \"radio\",\r\n                                                    value: \"2\"\r\n                                                }\r\n                                            }),\r\n                                            widget(\"menuitem\", {\r\n                                                properties: {\r\n                                                    type: \"radio\",\r\n                                                    label: \"MenuItem 3\",\r\n                                                    name: \"radio\",\r\n                                                    value: \"3\"\r\n                                                }\r\n                                            })\r\n                                        ]\r\n                                    })\r\n                                ]\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        ]\r\n    })\r\n    document.body.append(menuView);\r\n\r\n\r\n    const tree = widget(\"tree\", {\r\n        slotted: [\r\n            widget(\"treeitem\", {\r\n                properties: {\r\n                    label: \"treeitem 0\",\r\n                    type: \"parent\",\r\n                    draggable: true\r\n                    //disabled: true\r\n                },\r\n                slotted: {\r\n                    group: [\r\n                        widget(\"treeitemgroup\", {\r\n                            slotted: [\r\n                                widget(\"treeitem\", {\r\n                                    properties: {\r\n                                        label: \"treeitem 1\",\r\n                                        type: \"leaf\",\r\n                                        draggable: true\r\n                                    }\r\n                                })\r\n                            ]\r\n                        })\r\n                    ]\r\n                },\r\n                listeners: {\r\n                    contextmenu: <EventListener>((event: MouseEvent) => {\r\n                        const {target, clientX, clientY} = event;\r\n                        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n                        const menu = widget(\"menu\", {\r\n                            properties: {\r\n                                contextual: true\r\n                            },\r\n                            slotted: [\r\n                                widget(\"menuitemgroup\", {\r\n                                    slotted: [\r\n                                        widget(\"menuitem\", {\r\n                                            properties: {\r\n                                                label: \"Display\"\r\n                                            },\r\n                                            listeners: {\r\n                                                click: () => {\r\n                                                    console.log(treeItemWidget.getLabel(targetItem));\r\n                                                }\r\n                                            }\r\n                                        }),\r\n                                        widget(\"menuitem\", {\r\n                                            properties: {\r\n                                                label: \"Delete\"\r\n                                            },\r\n                                            listeners: {\r\n                                                click: () => {\r\n                                                    targetItem.remove();\r\n                                                }\r\n                                            }\r\n                                        })\r\n                                    ]\r\n                                }),\r\n                            ]\r\n                        });\r\n                        targetItem.append(menu);\r\n                        menuWidget.positionContextual(menu, clientX, clientY);\r\n                        menu.focus({preventScroll: true});\r\n                        event.preventDefault();\r\n                    })\r\n                }\r\n            }),\r\n            widget(\"treeitem\", {\r\n                properties: {\r\n                    label: \"treeitem 0\",\r\n                    type: \"parent\",\r\n                    draggable: true,\r\n                    disabled: true\r\n                },\r\n                slotted: {\r\n                    group: [\r\n                        widget(\"treeitemgroup\", {\r\n                            slotted: [\r\n                                widget(\"treeitem\", {\r\n                                    properties: {\r\n                                        label: \"treeitem 1\",\r\n                                        type: \"leaf\",\r\n                                        draggable: true\r\n                                    }\r\n                                })\r\n                            ]\r\n                        })\r\n                    ]\r\n                }\r\n            }),\r\n            widget(\"treeitem\", {\r\n                properties: {\r\n                    label: \"treeitem 1\",\r\n                    type: \"leaf\",\r\n                    draggable: true\r\n                },\r\n                slotted: {\r\n                    content: [\r\n                        widget(\"toolbar\", {\r\n                            slotted: [\r\n                                widget(\"toolbaritem\",  {\r\n                                    properties: {\r\n                                        label: \"First item\",\r\n                                        type: \"button\"\r\n                                    }\r\n                                }),\r\n                                widget(\"toolbaritem\",  {\r\n                                    properties: {\r\n                                        label: \"Second item\",\r\n                                        type: \"checkbox\"\r\n                                    }\r\n                                })\r\n                            ]\r\n                        })\r\n                    ]\r\n                }\r\n            })\r\n        ]\r\n    })\r\n    document.body.append(tree);\r\n\r\n    document.body.append(\r\n        widget(\"toolbar\", {\r\n            slotted: [\r\n                widget(\"toolbaritem\",  {\r\n                    properties: {\r\n                        label: \"First item\",\r\n                        type: \"menubutton\"\r\n                    },\r\n                    slotted: [\r\n                        widget(\"menu\", {\r\n                            slotted: [\r\n                                widget(\"menuitem\", {\r\n                                    properties: {\r\n                                        label: \"MenuItem 1\",\r\n                                        name: \"MenuItem 1\",\r\n                                        type: \"checkbox\"\r\n                                    }\r\n                                }),\r\n                                widget(\"menuitem\", {\r\n                                    properties: {\r\n                                        label: \"MenuItem 2\",\r\n                                        name: \"MenuItem 2\",\r\n                                        type: \"checkbox\"\r\n                                    }\r\n                                })\r\n                            ]\r\n                        })\r\n                    ]\r\n                }),\r\n                widget(\"toolbaritem\",  {\r\n                    properties: {\r\n                        label: \"Second item\",\r\n                        type: \"checkbox\"\r\n                    }\r\n                }),\r\n                widget(\"toolbaritem\",  {\r\n                    properties: {\r\n                        label: \"Third item\",\r\n                        type: \"checkbox\",\r\n                        disabled: true,\r\n                    }\r\n                }),\r\n                widget(\"toolbaritem\",  {\r\n                    properties: {\r\n                        label: \"Fourth item\",\r\n                        type: \"checkbox\"\r\n                    }\r\n                })\r\n            ]\r\n        })\r\n    );\r\n\r\n    document.body.append(\r\n        widget(\"list\", {\r\n            slotted: [\r\n                widget(\"listitemgroup\",  {\r\n                    slotted: [   \r\n                        widget(\"listitem\",  {\r\n                            properties: {\r\n                                label: \"First item\"\r\n                            }\r\n                        })\r\n                    ]\r\n                }),\r\n                widget(\"listitem\",  {\r\n                    properties: {\r\n                        label: \"Second item\"\r\n                    },\r\n                    slotted: [\r\n                        widget(\"toolbar\", {\r\n                            slotted: [\r\n                                widget(\"toolbaritem\",  {\r\n                                    properties: {\r\n                                        label: \"First item\",\r\n                                        type: \"button\"\r\n                                    }\r\n                                }),\r\n                                widget(\"toolbaritem\",  {\r\n                                    properties: {\r\n                                        label: \"Second item\",\r\n                                        type: \"checkbox\"\r\n                                    }\r\n                                })\r\n                            ]\r\n                        })\r\n                    ]\r\n                }),\r\n                widget(\"listitem\",  {\r\n                    properties: {\r\n                        label: \"Third item\",\r\n                        disabled: true,\r\n                    }\r\n                }),\r\n                widget(\"listitem\",  {\r\n                    properties: {\r\n                        label: \"Fourth item\"\r\n                    }\r\n                })\r\n            ]\r\n        })\r\n    );\r\n\r\n    document.body.append(\r\n        widget(\"grid\", {\r\n            properties: {\r\n                selectby: \"row\",\r\n                multisectable: true\r\n            },\r\n            slotted: {\r\n                headers: [\r\n                    widget(\"gridheader\",  {\r\n                        properties: {\r\n                            label: \"First header\"\r\n                        }\r\n                    }),\r\n                    widget(\"gridheader\",  {\r\n                        properties: {\r\n                            label: \"Second header\"\r\n                        }\r\n                    })\r\n                ],\r\n                rows: [\r\n                    widget(\"gridrow\",  {\r\n                        slotted: [   \r\n                            widget(\"gridcell\",  {\r\n                                properties: {\r\n                                    label: \"First cell\"\r\n                                }\r\n                            }),\r\n                            widget(\"gridcell\",  {\r\n                                properties: {\r\n                                    label: \"Second cell\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    }),\r\n                    widget(\"gridrow\",  {\r\n                        slotted: [   \r\n                            widget(\"gridcell\",  {\r\n                                properties: {\r\n                                    label: \"Third cell\"\r\n                                }\r\n                            }),\r\n                            widget(\"gridcell\",  {\r\n                                properties: {\r\n                                    label: \"Fourth cell\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    }),\r\n                    widget(\"gridrow\",  {\r\n                        slotted: [   \r\n                            widget(\"gridcell\",  {\r\n                                properties: {\r\n                                    label: \"Fifth cell\"\r\n                                }\r\n                            }),\r\n                            widget(\"gridcell\",  {\r\n                                properties: {\r\n                                    label: \"Sixth cell\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    }),\r\n                    widget(\"gridrow\",  {\r\n                        slotted: [   \r\n                            widget(\"gridcell\",  {\r\n                                properties: {\r\n                                    label: \"Heighth cell\"\r\n                                }\r\n                            }),\r\n                            widget(\"gridcell\",  {\r\n                                properties: {\r\n                                    label: \"Nineth cell\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            }\r\n        })\r\n    );\r\n\r\n    document.body.append(\r\n        widget(\"combobox\", {\r\n            slotted: [\r\n                widget(\"option\",  {\r\n                    properties: {\r\n                        label: \"First option\"\r\n                    }\r\n                }),\r\n                widget(\"option\",  {\r\n                    properties: {\r\n                        label: \"Second option\"\r\n                    }\r\n                }),\r\n                widget(\"option\",  {\r\n                    properties: {\r\n                        label: \"Third option\",\r\n                        selected: true\r\n                    }\r\n                })\r\n            ],\r\n            listeners: {\r\n                change: (event) => {\r\n                    const {currentTarget} = event;\r\n                    const comboBoxTarget = <HTMLElement>currentTarget;\r\n                    console.log(optionWidget.getLabel(comboBoxWidget.selectedOption(comboBoxTarget)!));\r\n                }\r\n            }\r\n        })\r\n    );\r\n    \r\n    const editor = new Editor();\r\n    editor.setup();\r\n\r\n    /*editor.registerCheckboxAction(\"toggleAdvancedUser\", (_, newValue) => {\r\n        console.log(`Advanced user is now ${newValue}`);\r\n    }, {hotkey: new HotKey(Key.ARROW_DOWN, KeyModifier.Alt)});\r\n\r\n    editor.registerRadioAction(\"setLayout\", (_, newValue) => {\r\n        editor.setPair(\"layout\", newValue);\r\n    });\r\n\r\n    editor.registerButtonAction(\"execLayout\", () => {\r\n        const layout = editor.getPair(\"layout\");\r\n        console.log(`Layout is ${layout}`);\r\n    }, {hotkey: new HotKey(Key.ARROW_UP, KeyModifier.Alt)});*/\r\n\r\n\r\n    /*editor.registerRadioAction(\"selectTest\", (oldValue, newValue) => {\r\n        console.log(`Test is ${newValue}`);\r\n    }, {value: \"2\", key: \"test\"});\r\n\r\n    document.addEventListener(\"slotchange\", (event) => {\r\n        console.log(event);\r\n    });*/\r\n    \r\n    /*setTimeout(() => {\r\n        const execLayoutToolBarItem = document.querySelector<HTMLEActionElement>(\"e-toolbaritem[name=execLayout]\");\r\n        if (execLayoutToolBarItem) {\r\n            editor.addPairListener(\"layout\", (oldValue, newValue) => {\r\n                if (newValue !== oldValue) {\r\n                    execLayoutToolBarItem.value = newValue;\r\n                }\r\n            });\r\n        }\r\n    }, 100);\r\n\r\n    const button = element(\"button\", {\r\n        properties: {\r\n            textContent: \"Focus\"\r\n        },\r\n        listeners: {\r\n            click: () => {\r\n                const menuitem = document.querySelector<HTMLEMenuItemElement>(\"e-menuitem#hey\");\r\n                if (menuitem) {\r\n                    menuitem.focus();\r\n                }\r\n            }\r\n        }\r\n    });\r\n    document.body.append(button);\r\n    document.body.append(menubar.element);\r\n    \r\n    editor.executeCheckboxAction(\"toggleAdvancedUser\", true);\r\n    editor.setCheckboxActionValue(\"toggleAdvancedUser\", false);*/\r\n\r\n    //editor.setRadioActionValue(\"selectTest\", \"2\");\r\n\r\n    //editor.executeRadioAction(\"setLayout\", \"other\");\r\n}","import { ActionType, HTMLEActionElement } from \"./elements/containers/actions/Action\";\r\nimport { subtreeNodes } from \"./elements/Element\";\r\nimport { HotKey } from \"./Input\";\r\n\r\nexport { Editor };\r\nexport { EditorBase };\r\n\r\ninterface Action {\r\n    name: string;\r\n    type: ActionType;\r\n    trigger: (oldValue: any, newValue: any) => void;\r\n    key?: string;\r\n    value?: string;\r\n    checked?: boolean;\r\n}\r\n\r\ninterface ButtonAction {\r\n    name: string;\r\n    type: \"button\";\r\n    trigger: () => void;\r\n}\r\n\r\ninterface RadioAction {\r\n    name: string;\r\n    type: \"radio\";\r\n    trigger: (oldValue: string, newValue: string) => void;\r\n    value: string;\r\n    key?: string;\r\n}\r\n\r\ninterface CheckboxAction {\r\n    name: string;\r\n    type: \"checkbox\";\r\n    trigger: (oldValue: boolean, newValue: boolean) => void;\r\n    checked: boolean;\r\n    key?: string;\r\n}\r\n\r\ninterface EditorConstructor {\r\n    readonly prototype: Editor;\r\n    new(): Editor;\r\n}\r\n\r\ninterface Editor {\r\n    /*registerWidget(widget: Widget): void;\r\n    unregisterWidget(widget: Widget): void;*/\r\n    \r\n    /*setPair(key: string, value: any): void;\r\n    getPair<T>(key: string): T;\r\n    addPairListener(key: string, listener: (oldValue: any, newValue: any) => void): void;\r\n    removePairListener(key: string, listener: (oldValue: any, newValue: any) => void): void;*/\r\n\r\n    registerButtonAction(\r\n        name: string,\r\n        trigger: () => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n        }): ButtonAction;\r\n    registerRadioAction(\r\n        name: string,\r\n        trigger: (oldValue: string, newValue: string) => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            value?: string;\r\n        }): RadioAction;\r\n    registerCheckboxAction(\r\n        name: string,\r\n        trigger: (oldValue: boolean, newValue: boolean) => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            checked?: boolean;\r\n        }): CheckboxAction;\r\n    \r\n    executeButtonAction(name: string): void;\r\n    executeCheckboxAction(name: string, newChecked: boolean): void;\r\n    executeRadioAction(name: string, newValue: string): void;\r\n\r\n    setCheckboxActionValue(name: string, checked: boolean): void;\r\n    setRadioActionValue(name: string, value: string): void;\r\n\r\n    unregisterActionElement(action: string, element: HTMLEActionElement): void;\r\n    registerActionElement(action: string, element: HTMLEActionElement): void;\r\n    setup(): void;\r\n}\r\n\r\nclass EditorBase implements Editor {\r\n    //private _widgets: Array<Widget>;\r\n    private _actions: Array<Action>;\r\n    private _actionElements: Array<Array<HTMLEActionElement>>;\r\n    private _hotkeys: Array<HotKey>;\r\n    private _pairs: Map<string, any>;\r\n    private _pairsListeners: Map<string, Array<(oldValue: any, newValue: any) => void>>;\r\n\r\n    private _actionsObserver: MutationObserver;\r\n\r\n    constructor() {\r\n        //this._widgets = new Array();\r\n        this._actions = new Array();\r\n        this._actionElements = new Array();\r\n        this._hotkeys = new Array();\r\n        this._pairs = new Map();\r\n        this._pairsListeners = new Map();\r\n\r\n        this._actionsObserver =  new MutationObserver(this._actionsObserverCallback.bind(this));\r\n    }\r\n\r\n    private _actionsObserverCallback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            mutation.addedNodes.forEach((node: Node) => {\r\n                Array.from(subtreeNodes(node)).forEach((node) => {\r\n                    if (node instanceof HTMLEActionElement) {\r\n                        this.registerActionElement(node.name, node);\r\n                    }\r\n                });\r\n            });\r\n            mutation.removedNodes.forEach((node: Node) => {\r\n                Array.from(subtreeNodes(node)).forEach((node) => {\r\n                    if (node instanceof HTMLEActionElement) {\r\n                        this.unregisterActionElement(node.name, node);\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n    \r\n    public setup(): void {\r\n        document.body.addEventListener(\"keydown\", this);\r\n        document.body.addEventListener(\"trigger\", this);\r\n\r\n        this._actionsObserver.observe(document.body, {\r\n            childList: true,\r\n            subtree: true\r\n        });\r\n    }\r\n\r\n    /*public getPair<T>(key: string): T {\r\n        return this._pairs.get(key) as T;\r\n    }\r\n\r\n    public setPair(key: string, value: any): void {\r\n        const oldValue = this._pairs.get(key);\r\n        this._pairs.set(key, value);\r\n        const listeners = this._pairsListeners.get(key);\r\n        if (typeof listeners !== \"undefined\") {\r\n            listeners.forEach((listener_i) => {\r\n                listener_i(oldValue, value);\r\n            });\r\n        }\r\n    }\r\n\r\n    public addPairListener(key: string, listener: (oldValue: any, newValue: any) => void): void {\r\n        const listeners = this._pairsListeners.get(key);\r\n        if (typeof listeners !== \"undefined\") {\r\n            listeners.push(listener);\r\n        }\r\n        else {\r\n            this._pairsListeners.set(key, [listener]);\r\n        }\r\n    }\r\n\r\n    public removePairListener(name: string, listener: (oldValue: any, newValue: any) => void): void {\r\n        const listeners = this._pairsListeners.get(name);\r\n        if (typeof listeners !== \"undefined\") {\r\n            const listenerIndex = listeners.findIndex(listener_i => listener_i == listener);\r\n            if (listenerIndex > -1) {\r\n                listeners.copyWithin(listenerIndex, listenerIndex + 1);\r\n                listeners.length--;\r\n            }\r\n        }\r\n    }*/\r\n    \r\n    /*public registerWidget(widget: Widget): void {\r\n        widget.element.addEventListener(\"focusin\", this);\r\n        this._widgets.push(widget);\r\n    }\r\n\r\n    public unregisterWidget(widget: Widget): void {\r\n        if (this._widgets.includes(widget)) {\r\n            widget.element.removeEventListener(\"focusin\", this);\r\n            this._widgets.splice(this._widgets.indexOf(widget), 1);\r\n        }\r\n    }*/\r\n\r\n    public handleEvent(event: Event): void {\r\n        const target = event.target;\r\n        switch (event.type) {\r\n            case \"keydown\":\r\n                const actionsIndices = this._hotkeys\r\n                    .map((hotkey_i, i) => hotkey_i.test(event as KeyboardEvent) ? i : -1)\r\n                    .filter(i => i > -1);\r\n                actionsIndices.forEach((index) => {\r\n                    const {name, type, value, checked} = this._actions[index];\r\n                    switch (type) {\r\n                        case \"button\":\r\n                            this.executeButtonAction(name);\r\n                            break;\r\n                        case \"checkbox\":\r\n                            this.executeCheckboxAction(name, checked!);\r\n                            break;\r\n                        case \"radio\":\r\n                            this.executeRadioAction(name, value!);\r\n                            break;\r\n                    }\r\n                });\r\n                break;\r\n            case \"trigger\":\r\n                if (target instanceof HTMLEActionElement) {\r\n                    switch (target.type) {\r\n                        case \"button\":\r\n                            this.executeButtonAction(target.name);\r\n                            break;\r\n                        case \"checkbox\":\r\n                            this.executeCheckboxAction(target.name, target.checked);\r\n                            break;\r\n                        case \"radio\":\r\n                        case \"select\":\r\n                            this.executeRadioAction(target.name, target.value);\r\n                            break;\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    \r\n    public registerButtonAction(\r\n        name: string,\r\n        trigger: () => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n        }): ButtonAction {\r\n            return this.registerAction(name, trigger, \"button\", init);\r\n    }\r\n\r\n    public registerRadioAction(\r\n        name: string,\r\n        trigger: (oldValue: string, newValue: string) => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            value?: string;\r\n        }): RadioAction {\r\n            return this.registerAction(name, trigger, \"radio\", init);\r\n    }\r\n\r\n    public registerCheckboxAction(\r\n        name: string,\r\n        trigger: (oldValue: boolean, newValue: boolean) => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            checked?: boolean;\r\n        }): CheckboxAction {\r\n            return this.registerAction(name, trigger, \"checkbox\", init);\r\n    }\r\n\r\n    public registerAction(\r\n        name: string,\r\n        trigger: () => void,\r\n        type: \"button\",\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n        }): ButtonAction;\r\n    public registerAction(\r\n        name: string,\r\n        trigger: (oldValue: boolean, newValue: boolean) => void,\r\n        type: \"checkbox\",\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            checked?: boolean;\r\n        }): CheckboxAction;\r\n    public registerAction(\r\n        name: string,\r\n        trigger: (oldValue: string, newValue: string) => void,\r\n        type: \"radio\",\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            value?: string;\r\n        }): RadioAction;\r\n    public registerAction(\r\n        name: string,\r\n        trigger: (oldValue: any, newValue: any) => void,\r\n        type: ActionType,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            value?: string;\r\n            checked?: boolean;\r\n        }): Action {\r\n        const hotkey = init?.hotkey;\r\n        const key = init?.key;\r\n        const value = init?.value;\r\n        const checked = init?.checked;\r\n        const action: Action = {name, trigger, key, type};\r\n        if (value ?? false) {\r\n            action.value = value;\r\n        }\r\n        if (key !== undefined && value !== undefined) {\r\n            localStorage.setItem(key, value);\r\n        }\r\n        if (checked ?? false) {\r\n            action.checked = checked;\r\n        }\r\n        const index = this._actions.push(action) - 1;\r\n        if (hotkey) {\r\n            this._hotkeys[index] = hotkey;\r\n        }\r\n        return action;\r\n    }\r\n\r\n    public executeButtonAction(name: string): void {\r\n        this.executeAction(name, \"button\");\r\n    }\r\n\r\n    public executeCheckboxAction(name: string, newChecked: boolean): void {\r\n        this.executeAction(name, \"checkbox\", newChecked);\r\n    }\r\n\r\n    public executeRadioAction(name: string, newValue: string): void {\r\n        this.executeAction(name, \"radio\", newValue);\r\n    }\r\n\r\n    public executeAction(name: string, type: \"button\"): void;\r\n    public executeAction(name: string, type: \"checkbox\", newChecked: boolean): void;\r\n    public executeAction(name: string, type: \"radio\", newValue: string): void;\r\n    public executeAction(name: string, type: ActionType, newValue?: any): void {\r\n        const actionIndex = this._actions.findIndex(\r\n            action_i => action_i.name == name\r\n        );\r\n        if (actionIndex > -1) {\r\n            const action = this._actions[actionIndex];\r\n            let oldValue;\r\n            switch (type) {\r\n                case \"radio\":\r\n                    oldValue = action.value ?? \"\";\r\n                    break;\r\n                case \"checkbox\":\r\n                    oldValue = action.value ?? false;\r\n                    break;\r\n            }\r\n            action.trigger(oldValue, newValue);\r\n            this.setActionValue(name, newValue);\r\n            /*action.value = newValue;\r\n            \r\n            const actionElements = this._actionElements[actionIndex];\r\n            if (actionElements) {\r\n                switch (type) {\r\n                    case \"radio\":\r\n                        actionElements.forEach((actionElement_i) => {\r\n                            if (actionElement_i.type == \"radio\") {\r\n                                actionElement_i.checked = (actionElement_i.value == newValue);\r\n                            }\r\n                            else if (actionElement_i.type == \"select\") {\r\n                                actionElement_i.value = newValue;\r\n                            }\r\n                        });\r\n                        break;\r\n                    case \"checkbox\":\r\n                        actionElements.forEach((actionElement_i) => {\r\n                            actionElement_i.checked = newValue;\r\n                        });\r\n                        break;\r\n                }\r\n            }*/\r\n        }\r\n    }\r\n\r\n    public setCheckboxActionValue(name: string, checked: boolean): void {\r\n        this.setActionValue(name, checked);\r\n    }\r\n\r\n    public setRadioActionValue(name: string, value: string): void {\r\n        this.setActionValue(name, value);\r\n    }\r\n\r\n    public setActionValue(name: string, value?: any): void {\r\n        const actionIndex = this._actions.findIndex(\r\n            action_i => action_i.name == name\r\n        );\r\n        if (actionIndex > -1) {\r\n            const action = this._actions[actionIndex];\r\n            const {type, key} = action;\r\n            action.value = value;\r\n            if (key) {\r\n                localStorage.setItem(key, value);\r\n            }\r\n            \r\n            const actionElements = this._actionElements[actionIndex];\r\n            if (actionElements) {\r\n                switch (type) {\r\n                    case \"radio\":\r\n                        actionElements.forEach((actionElement_i) => {\r\n                            if (actionElement_i.type == \"radio\") {\r\n                                actionElement_i.checked = (actionElement_i.value == value);\r\n                            }\r\n                            else if (actionElement_i.type == \"select\") {\r\n                                actionElement_i.value = value;\r\n                            }\r\n                        });\r\n                        break;\r\n                    case \"checkbox\":\r\n                        actionElements.forEach((actionElement_i) => {\r\n                            actionElement_i.checked = value;\r\n                        });\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public registerActionElement(name: string, element: HTMLEActionElement): void {\r\n        const actionIndex = this._actions.findIndex(action_i => action_i.name == name);\r\n        if (actionIndex > -1) {\r\n            const elements = this._actionElements[actionIndex];\r\n            if (elements) {\r\n                if (!elements.includes(element)) {\r\n                    elements.push(element);\r\n                }\r\n            }\r\n            else {\r\n                this._actionElements[actionIndex] = [element];\r\n            }\r\n\r\n            const action = this._actions[actionIndex];\r\n            const {type, value, checked} = action;\r\n            switch (type) {\r\n                case \"radio\":\r\n                    if (element.type == \"radio\") {\r\n                        element.checked = (element.value == value!);\r\n                    }\r\n                    else if (element.type == \"select\") {\r\n                        element.value = value!;\r\n                    }\r\n                    break;\r\n                case \"checkbox\":\r\n                    element.checked = checked!;\r\n                    break;\r\n            }\r\n\r\n            const hotkey = this._hotkeys[actionIndex];\r\n            if (hotkey) {\r\n                element.hotkey = hotkey.toString();\r\n            }\r\n        }\r\n    }\r\n\r\n    public unregisterActionElement(name: string, element: HTMLEActionElement): void {\r\n        const actionIndex = this._actions.findIndex(action_i => action_i.name == name);\r\n        if (actionIndex > -1) {\r\n            const elements = this._actionElements[actionIndex];\r\n            if (elements) {\r\n                const elementIndex = elements.findIndex(element_i => element_i == element);\r\n                if (elementIndex > -1) {\r\n                    elements.copyWithin(elementIndex, elementIndex + 1);\r\n                    elements.length--;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar Editor: EditorConstructor = EditorBase;"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","slotsMap","WeakMap","slotsObserver","MutationObserver","mutationsList","forEach","mutation","target","type","HTMLElement","slotReferences","slotRef_i","widget","element","slot","slottedCallback","deref","widgetsMap","attributesObserver","attributeName","oldValue","attributeChangedCallback","getAttribute","WidgetFactory","constructor","this","create","Proxy","apply","thisArg","argumentsList","Reflect","observedSlots","Array","isArray","map","slotName_i","slotName","slotElement","slot_i","observe","childList","slotReference","WeakRef","push","set","observedAttributes","attributes","attributeFilter","attributeOldValue","Error","widgets","Map","ModelChangeRecordBase","init","changeType","propertyName","undefined","newValue","removedIndex","removedItems","ModelNodesList","insertedIndex","insertedItems","sortedIndices","PROPERTY_CHANGE","LIST_REMOVE","LIST_INSERT","LIST_SORT","ModelChangeRecord","items","slice","length","item","index","values","ModelEventBase","ModelEventTargetAccessor","setCurrentTarget","event","currentTarget","setTarget","ModelEvent","ModelNodeBase","receiveEvent","callbacks","callback_i","addEventListener","callback","removeEventListener","callbackIndex","findIndex","splice","delete","dispatchEvent","super","setParent","parentNode","isCyclicReference","ancestorNode","TypeError","beginChanges","endChanges","getRecords","property","records","record","ModelNodeRecordsAccessor","triggerChange","node","handleRecord","ModelNode","ModelProperty","ModelObjectPropertiesAccessor","getProperty","setProperty","ModelObjectBase","ModelObject","ModelList","item_i","fromIndex","indexOf","sort","compareFunction","indexedItems","i","indexedItem_a","indexedItem_b","indexedItem_i","prepend","_items","append","insert","Math","abs","remove","clear","removedItem_i","reference","options","properties","propertiesFilter","subtree","filter","record_i","includes","ModelChangeObserver","references","listener","bind","unobserve","disconnect","camelToTrain","str","replace","toLowerCase","AttributeProperty","toString","defaultValue","observed","writable","Boolean","hasAttribute","setAttribute","removeAttribute","val","JSON","parse","stringify","Number","parseFloat","String","CustomElement","elementCtor","name","customElements","define","Widget","subtreeNodes","childNodes","childNodesCount","childIndex","child","fragment","nodes","document","createDocumentFragment","tagName","dataset","children","listeners","createElement","keys","attributeValue","toggleAttribute","elementDataset","datasetEntry_i","from","entries","name_i","listener_i","slotted","NodeList","reactiveElementsMap","reactiveElementsFinalizationRegistry","FinalizationRegistry","heldValue","model","reactiveElement","reactiveElementsMapEntry","reactiveElementsArray","reactiveElementsPropertyObserver","reactiveElement_i","elementRef","react","register","observerOptions","concat","property_i","Set","reactiveChildElementsMap","reactiveChildElementsFinalizationRegistry","list","reactiveChildElement","reactiveChildrenElementsMapEntry","reactiveChildElementsArray","reactiveChildElementsObserver","range","listLength","reactiveChildElements_i","parentRef","mapping","placeholder","parent","firstChild","childrenCount","removeChild","insertedItemsArray","before","removedCount","createRange","removeEndIndex","setStartBefore","setEndAfter","deleteContents","childrenArray","index_i","reactiveChildElements","reactiveChildElementsMapEntry","areAttributesMatching","referenceAttributeType","referenceAttributeName","referenceAttributeValue","RegExp","test","ViewBase","setModel","renderLight","renderShadow","refresh","shadowRoot","shadow","replaceChildren","light","View","menuItemWidget","class","role","tabindex","cloneNode","button","hasIcon","hasArrow","checkbox","radio","menu","submenu","keyshortcut","checked","label","disabled","setKeyShortcut","setChecked","setExpanded","setType","setLabel","setName","setValue","setDisabled","hasChildMenu","some","childNode_i","classList","contains","getMenu","querySelector","getKeyShortcut","keyshortcutsPart","labelPart","after","textContent","getLabel","getType","types","type_i","typesFeatures","iconPartTemplate","arrowPartTemplate","oldType","add","iconPart","arrowPart","getValue","getName","getChecked","getDisabled","getExpanded","toggle","force","expand","collapse","targetItem","closest","style","menuStyle","top","itemTop","bottom","itemBottom","left","itemLeft","right","itemRight","getBoundingClientRect","width","menuWidth","height","menuHeight","scrollY","scrollX","window","clientWidth","clientHeight","body","overflowX","overflowY","closestMenu","closestMenuTop","closestMenuLeft","menuComputedStyle","getComputedStyle","paddingTop","paddingBottom","menuPaddingTop","menuPaddingBottom","menuWidget","createTreeWalker","NodeFilter","SHOW_ELEMENT","contextual","setContextual","positionContextual","x","y","getContextual","querySelectorAll","FILTER_ACCEPT","FILTER_SKIP","FILTER_REJECT","menuitem_i","find","walker","currentNode","lastChild","previousSibling","nextSibling","async","delay","Promise","resolve","reject","timeout","setTimeout","clearTimeout","then","targetMenu","error","radio_i","stopPropagation","relatedTarget","nearestItem","activeItem","focus","preventScroll","preventDefault","composedPath","target_i","catch","clientX","clientY","intersectsWithMouse","containsRelatedTarget","toolbarItemWidget","pressed","setPressed","getTitle","setTitle","getPressed","setActive","getActive","toolbarWidget","toolbar","tabIndex","setTabIndex","getTabIndex","setOrientation","getOrientation","tree","targetToolbar","previousItem","firstItem","nextItem","lastItem","treeItemWidget","group","draggable","setDraggable","setSelected","setPosInSet","getPosInSet","posInSet","e","setDropTarget","getDropTarget","getDraggable","Event","bubbles","getSelected","setLevel","getLevel","parseInt","getPropertyValue","content","shiftKey","ctrlKey","treeWidget","multisectable","setMultiSelectable","child_i","selectedItems","beginSelection","endSelection","getMultiSelectable","dropTargetItem","to","position","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","DOCUMENT_POSITION_PRECEDING","selected","expanded","nextNode","targetTree","blur","parentItem","click","TreeModel","childItems","flattenItems","sortFunction","item_a","item_b","localeCompare","flatMap","treeItem_i","of","getItemByUri","uri","itemsCount","uriLength","itemUri","itemUriLength","startsWith","charAt","flattenedInsertedItems","insertedItem_i","flattenedRemovedItems","TreeItemList","show","hide","display","result","reduce","console","log","removedItemsGroups","TreeItemModel","list_i","children_i","childCount","visibility","TreeViewBase","attachShadow","mode","getTreeElement","getTreeItemElement","getDragImageElement","treeElement","dragstart","drop","contextmenu","keydown","focusin","focusout","rel","href","hidden","treeItemElement","treeitem","badge","visibilityItem","dragImageElement","span","dataTransfer","selectedElements","selectedCount","selectedUris","element_i","uri_i","_","uris","uri_j","selectedUrisString","join","lastUri","dropEffect","setData","dragImage","setDragImage","targetUri","targetItemModel","transferedUris","getData","split","transferedItems","targetType","targetParentItem","targetList","sameLabelIndex","item_j","confirm","copyWithin","newElements","itemsList","count","close","targetElement","matches","TreeView","HTMLEActionElementBase","trigger","enable","disable","Key","KeyModifier","MouseButton","HTMLEActionElement","shadowTemplate","HTMLEGridCellElementBase","HTMLEGridCellElement","HTMLEGridRowGroupElementBase","assignedElements","posinset","HTMLEGridRowGroupElement","HTMLEMenuItemElementBase","part","selector","propertyKey","getter","withinShadowRoot","HTMLEMenuItemElement","EMenuItem","assign","title","HTMLEMenuItemGroupElementBase","toggleTimeouts","HTMLEMenuItemGroupElement","EMenuItemGroup","radios","HTMLEMenuElementBase","activeIndex","root","previousNode","HTMLEMenuElement","EMenu","HTMLEGridRowElementBase","cells","HTMLEGridCellCollection","cell_i","HTMLEGridRowElement","HTMLEGridBodyElement","namedItem","HTMLEGridRowCollection","HTMLEGridBodyElementBase","rows","HTMLEGridElementBase","clearSelection","selectedCells","selectedRows","toIndex","min","max","nextVisibleRow","previousVisibleRow","selectedCell_i","selectedRow_i","row_i","cell","activeCell","active","closestRow","row","activeRow","cellsWalker","rowsWalker","closestRowCells","cellIndex","previousRow","previousRowCells","nextRow","nextRowCells","selectby","targetCell","targetRow","lastSelectedCell","lastSelectedRow","firstRow","firstCell","lastRow","lastCell","previousCell","nextCell","topCell","bottomCell","HTMLEGridHeadElementBase","HTMLEMenuBarElementBase","Element","isExpanded","HTMLEMenuButtonElementBase","HTMLEMenuButtonElement","EMenuButton","HTMLEOptionElementBase","HTMLEOptionElement","HTMLEOptionGroupElementBase","HTMLEOptionGroupElement","HTMLESelectElementBase","matchingOption","option","selectedIndex","activeOption","descriptionPart","description","selectedOption","valuePart","optionsStyle","selectBottom","selectLeft","previousOption","nextOption","firstOption","lastOption","keyLength","keyCode","charCodeAt","optionsArray","firstMatchIndex","option_i","nextMatchIndex","matchIndex","default","slottedKeyboardListeners","slottedTriggerListeners","HTMLESelectElement","HTMLEToolBarItemElementBase","menubutton","select","selectValue","HTMLEToolBarItemElement","EToolBarItem","HTMLEToolBarItemGroupElementBase","HTMLEToolBarItemGroupElement","HTMLEToolBarElementBase","HTMLEToolBarElement","HTMLETabPanelElementBase","HTMLETabPanelElement","HTMLETabElementBase","connectedCallback","panel","getElementById","controls","CustomEvent","detail","tab","HTMLETabElement","HTMLETabListElementBase","tabs","focusTabAt","activeTab","activateTab","targetIndex","thisTab","thisTabIndex","HTMLETreeItemGroupElementBase","HTMLETreeItemElement","level","closestItem","parentElement","HTMLETreeItemGroupElement","HTMLETreeItemElementBase","HTMLETreeElementBase","getElementsByTagName","nextVisibleItem","previousVisibleItem","selectedItem_i","droptarget","relatedTargetRoot","getRootNode","relatedTargetHost","ShadowRoot","host","HTMLEListItemElementBase","HTMLSpanElement","HTMLEListItemElement","HTMLEListItemGroupElementBase","HTMLEListItemGroupElement","HTMLEListElementBase","lastSelectedItem","HTMLEListElement","HTMLEDraggableElementBase","disconnectedCallback","referee","thisRefIndex","getReference","HTMLEDraggableElement","HTMLEDragzoneElementBase","selectDraggable","selectedDraggables","unselectDraggable","draggables","elem","thisSelectedDraggable","dragged","id","thisDraggedDraggable","firstIndex","direction","sign","startRangeIndex","endRangeIndex","thisDraggable","HTMLEDragzoneElement","HTMLEDropzoneElementBase","droptest","appendAreaPart","removeDraggables","dragovered","dropIndex","dragzoneId","dragzone","selectedDraggable","HTMLEDropzoneElement","addDraggables","placeholderPart","dataTransferSuccess","newDraggables","insertionPosition","multiple","newDraggable","insertAdjacentElement","appendChild","replaceChild","action","once","predicate","toRemove","atPosition","HTMLEDialogElementBase","handleEvent","cancel","open","HTMLEHandleElementBase","pointerId","releasePointerCapture","setPointerCapture","targetComputedStyle","movementX","movementY","rectWidth","rectHeight","outerElement","outerRectLeft","outerRectRight","outerRectTop","outerRectBottom","newLeft","trunc","newTop","HTMLEHeightSashElementBase","rootNode","requestAnimationFrame","growdir","newHeight","computedNewHeight","HTMLEImportElementBase","src","outerHTML","fetch","response","ok","text","statusText","barShadowTemplate","circleShadowTemplate","HTMLELoaderElementBase","promise","finally","commonStyle","barStyle","circleStyle","HTMLEWidthSashElementBase","setWidth","newWidth","menubar","listItemWidget","gridCellWidget","getHeaders","setHeaders","gridRowWidget","headers","grid","setSelectBy","getSelectBy","targetGrid","multiselectable","scope","header","optionWidget","comboBoxWidget","combobox","targetCombobox","addedNodes","box","targetOption","ListModel","getItemByIndex","ListItemList","ListItemModel","ListViewBase","getListElement","getListItemElement","listElement","listItemElement","toolbaritem","ListView","GridModel","columns","getColumnByName","column_i","sortByColumn","column","sortOrder","sortorder","row_1","row_2","cell_1","extract","cell_2","GridColumnModel","filters","GridRowModel","age","GridViewBase","getGridElement","setColumnDelegate","delegate","setCellDelegate","getRowElement","getColumnHeaderElement","getColumnDataElements","input","setSearchFilter","rowElement","filter_i","gridElement","addDisplayFilter","removeDisplayFilter","displayFilters","filterIndex","every","resizable","columnHeaderElement","removeProperty","maxWidth","sortRadioItem_i","resize","gridRowElement","HTMLInputElement","targetColumn","GridView","main","treeView","treeModel","aLabel","bLabel","gridView","sortable","menuView","change","comboBoxTarget","_actions","_actionElements","_hotkeys","_pairs","_pairsListeners","_actionsObserver","_actionsObserverCallback","registerActionElement","removedNodes","unregisterActionElement","setup","hotkey_i","executeButtonAction","executeCheckboxAction","executeRadioAction","registerButtonAction","registerAction","registerRadioAction","registerCheckboxAction","hotkey","localStorage","setItem","executeAction","newChecked","actionIndex","action_i","setActionValue","setCheckboxActionValue","setRadioActionValue","actionElements","actionElement_i","elements","elementIndex"],"sourceRoot":""}