{"version":3,"file":"main.js","mappings":"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","sources":["webpack://main/webpack/bootstrap","webpack://main/webpack/runtime/define property getters","webpack://main/webpack/runtime/hasOwnProperty shorthand","webpack://main/webpack/runtime/make namespace object","webpack://main/./src/views/widgets/Widget.ts","webpack://main/./src/models/Model.ts","webpack://main/./src/elements/Snippets.ts","webpack://main/./src/elements/Element.ts","webpack://main/./src/elements/containers/trees/TreeItemGroup.ts","webpack://main/./src/elements/containers/trees/TreeItem.ts","webpack://main/./src/elements/containers/trees/Tree.ts","webpack://main/./src/views/View.ts","webpack://main/./src/views/TreeView.ts","webpack://main/./src/elements/containers/actions/Action.ts","webpack://main/./src/Input.ts","webpack://main/./src/elements/containers/grid/GridCell.ts","webpack://main/./src/elements/containers/grid/GridRowGroup.ts","webpack://main/./src/elements/containers/menus/MenuItem.ts","webpack://main/./src/elements/containers/menus/MenuItemGroup.ts","webpack://main/./src/elements/containers/menus/Menu.ts","webpack://main/./src/elements/containers/grid/GridRow.ts","webpack://main/./src/elements/containers/grid/GridCellCollection.ts","webpack://main/./src/elements/containers/grid/GridRowCollection.ts","webpack://main/./src/elements/containers/grid/GridBody.ts","webpack://main/./src/elements/containers/grid/GridHead.ts","webpack://main/./src/elements/containers/grid/Grid.ts","webpack://main/./src/elements/containers/menus/MenuBar.ts","webpack://main/./src/elements/containers/menus/MenuButton.ts","webpack://main/./src/elements/controls/forms/Option.ts","webpack://main/./src/elements/controls/forms/OptionGroup.ts","webpack://main/./src/elements/controls/forms/OptionCollection.ts","webpack://main/./src/elements/controls/forms/Select.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItem.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItemGroup.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItemCollection.ts","webpack://main/./src/elements/containers/toolbars/ToolBar.ts","webpack://main/./src/elements/containers/tabs/TabPanel.ts","webpack://main/./src/elements/containers/tabs/Tab.ts","webpack://main/./src/elements/containers/tabs/TabList.ts","webpack://main/./src/elements/containers/lists/ListItem.ts","webpack://main/./src/elements/containers/lists/ListItemGroup.ts","webpack://main/./src/elements/containers/lists/List.ts","webpack://main/./src/elements/controls/draggable/Draggable.ts","webpack://main/./src/elements/controls/draggable/Dragzone.ts","webpack://main/./src/elements/controls/draggable/Dropzone.ts","webpack://main/./src/elements/controls/dialogs/Dialog.ts","webpack://main/./src/elements/utils/Handle.ts","webpack://main/./src/elements/utils/HeightSash.ts","webpack://main/./src/elements/utils/Import.ts","webpack://main/./src/elements/utils/Loader.ts","webpack://main/./src/elements/utils/WidthSash.ts","webpack://main/./src/observers/AttributeMixinsObserver.ts","webpack://main/./src/views/widgets/SeparatorWidget.ts","webpack://main/./src/views/widgets/menu/MenuItemWidget.ts","webpack://main/./src/views/widgets/menu/MenuBarWidget.ts","webpack://main/./src/views/widgets/menu/MenuWidget.ts","webpack://main/./src/views/widgets/menu/MenuItemGroupWidget.ts","webpack://main/./src/views/widgets/tree/TreeItemWidget.ts","webpack://main/./src/views/widgets/tree/TreeWidget.ts","webpack://main/./src/views/widgets/tree/TreeItemGroupWidget.ts","webpack://main/./src/views/ListView.ts","webpack://main/./src/views/GridView.ts","webpack://main/./main.ts","webpack://main/./src/Editor.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export { WidgetFactoryConstructor };\r\n\r\nexport { WidgetFactory };\r\nexport { widgets };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {}\r\n}\r\n\r\ninterface WidgetFactoryConstructor {\r\n    readonly prototype: WidgetFactory;\r\n    new(): WidgetFactory;\r\n}\r\n\r\ninterface WidgetFactory {\r\n    create(init?: object): HTMLElement;\r\n    slot(root: HTMLElement, name: string | null): HTMLElement | null;\r\n    get slots(): string[];\r\n}\r\n\r\nvar slotsMap: WeakMap<HTMLElement, [WidgetFactory, WeakRef<HTMLElement>][]> = new WeakMap();\r\nvar slotsObserver = new MutationObserver(\r\n    (mutationsList: MutationRecord[]) => {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            if (target instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"childList\": {\r\n                        const slotReferences = slotsMap.get(target);\r\n                        if (slotReferences) {\r\n                            slotReferences.forEach(slotRef_i => {\r\n                                const [widget, elementRef] = slotRef_i;\r\n                                const slottedCallback = (widget as any)[\"slottedCallback\"];\r\n                                if (typeof slottedCallback == \"function\") {\r\n                                    slottedCallback(elementRef.deref(), target);\r\n                                }\r\n                            });\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n);\r\n\r\nclass WidgetFactoryBase implements WidgetFactory {\r\n\r\n    constructor() {\r\n        const widget = <WidgetFactory>this;\r\n        this.create = new Proxy(\r\n            this.create, {\r\n                apply: (target, thisArg, argumentsList) => {\r\n                    const root = Reflect.apply(target, thisArg, argumentsList);\r\n                    const slots =(<(string | null)[]>widget.slots).concat(null).map(slot_i => {\r\n                        return widget.slot(root, slot_i);\r\n                    });\r\n                    slots.forEach(slot_i => {\r\n                        if (slot_i) {\r\n                            slotsObserver.observe(slot_i, {\r\n                                childList: true\r\n                            });\r\n                            const slotReferences = slotsMap.get(slot_i);\r\n                            if (Array.isArray(slotReferences)) {\r\n                                slotReferences.push([widget, new WeakRef(root)]);\r\n                            }\r\n                            else {\r\n                                slotsMap.set(slot_i, new Array([widget, new WeakRef(root)]));\r\n                            }\r\n                        }\r\n                    });\r\n                    return root;\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    create(): HTMLElement {\r\n        throw new Error(`create method is not implemented`);\r\n    }\r\n\r\n    slot(root: HTMLElement): HTMLElement {\r\n        return root;\r\n    }\r\n\r\n    get slots(): string[] {\r\n        return [];\r\n    }\r\n}\r\n\r\nvar WidgetFactory: WidgetFactoryConstructor = WidgetFactoryBase;\r\nvar widgets: Map<string, WidgetFactory> = new Map();","export { ModelChangeRecord };\r\nexport { ModelEvent };\r\nexport { ModelNode };\r\nexport { ModelObject };\r\nexport { ModelProperty };\r\nexport { ModelList };\r\nexport { ModelChangeObserverOptions };\r\nexport { ModelChangeObserver };\r\n\r\ninterface ModelChangeRecordConstructor {\r\n    readonly prototype: ModelChangeRecord;\r\n    new(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ): ModelChangeRecord;\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\ninterface ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly changeType: number;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\nclass ModelChangeRecordBase implements ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList;\r\n    readonly changeType: number;\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n\r\n    constructor(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ) {\r\n        this.target = init.target;\r\n        this.changeType = init.changeType;\r\n        this.propertyName = init.propertyName ?? null;\r\n        this.oldValue = init.oldValue ?? void 0;\r\n        this.newValue = init.newValue ?? void 0;\r\n        this.removedIndex = init.removedIndex ?? 0;\r\n        this.removedItems = new ModelNodesList(init.removedItems ?? []);\r\n        this.insertedIndex = init.insertedIndex ?? 0;\r\n        this.insertedItems = new ModelNodesList(init.insertedItems ?? []);\r\n        this.sortedIndices = init.sortedIndices ?? [];\r\n    }\r\n\r\n    static get PROPERTY_CHANGE(): number {\r\n        return 1;\r\n    }\r\n\r\n    static get LIST_REMOVE(): number {\r\n        return 2;\r\n    }\r\n\r\n    static get LIST_INSERT(): number {\r\n        return 3;\r\n    }\r\n\r\n    static get LIST_SORT(): number {\r\n        return 4;\r\n    }\r\n\r\n    get PROPERTY_CHANGE(): number {\r\n        return ModelChangeRecordBase.PROPERTY_CHANGE;\r\n    }\r\n\r\n    get LIST_REMOVE(): number {\r\n        return ModelChangeRecordBase.LIST_REMOVE;\r\n    }\r\n\r\n    get LIST_INSERT(): number {\r\n        return ModelChangeRecordBase.LIST_INSERT;\r\n    }\r\n\r\n    get LIST_SORT(): number {\r\n        return ModelChangeRecordBase.LIST_SORT;\r\n    }\r\n}\r\n\r\nvar ModelChangeRecord: ModelChangeRecordConstructor = ModelChangeRecordBase;\r\n\r\ninterface ModelNodesListConstructor {\r\n    readonly prototype: ModelNodesList;\r\n    new(items: any[]): ModelNodesList;\r\n}\r\n\r\ninterface ModelNodesList {\r\n    get length(): number;\r\n    item(index: number): ModelNode | null;\r\n    values(): IterableIterator<ModelNode>;\r\n}\r\n\r\nclass ModelNodesListBase implements ModelNodesList {\r\n    #items: ModelNode[];\r\n\r\n    constructor(items: ModelNode[]) {\r\n        this.#items = items.slice();\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    item(index: number): ModelNode | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    values(): IterableIterator<ModelNode> {\r\n        return this.#items.values();\r\n    }\r\n}\r\n\r\nvar ModelNodesList: ModelNodesListConstructor = ModelNodesListBase;\r\n\r\ninterface ModelEventConstructor {\r\n    readonly prototype: ModelEvent;\r\n    new(type: string): ModelEvent;\r\n}\r\n\r\ninterface ModelEvent {\r\n    readonly type: string;\r\n    readonly currentTarget: ModelEventTarget | null;\r\n    readonly target: ModelEventTarget | null;\r\n}\r\n\r\nclass ModelEventBase implements ModelEvent {\r\n    readonly type: string;\r\n\r\n    #currentTarget: ModelEventTarget | null;\r\n    #target: ModelEventTarget | null;\r\n\r\n    constructor(type: string) {\r\n        this.type = type;\r\n        this.#currentTarget = null;\r\n        this.#target = null;\r\n    }\r\n\r\n    get currentTarget(): ModelEventTarget | null {\r\n        return this.#currentTarget;\r\n    }\r\n\r\n    get target(): ModelEventTarget | null {\r\n        return this.#target;\r\n    }\r\n\r\n    static ModelEventTargetAccessor? = new class ModelEventTargetAccessor {\r\n        setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#currentTarget = currentTarget;\r\n            }\r\n        }\r\n\r\n        setTarget(event: ModelEvent, target: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#target = target;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface ModelEventTargetAccessor {\r\n    setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void;\r\n    setTarget(event: ModelEvent, target: ModelEventTarget): void;\r\n}\r\n\r\nvar ModelEventTargetAccessor: ModelEventTargetAccessor = ModelEventBase.ModelEventTargetAccessor!;\r\ndelete ModelEventBase.ModelEventTargetAccessor;\r\n\r\nvar ModelEvent: ModelEventConstructor = ModelEventBase;\r\n\r\ninterface ModelEventTargetConstructor {\r\n    readonly prototype: ModelEventTarget;\r\n    new(): ModelEventTarget;\r\n}\r\n\r\ninterface ModelEventTarget {\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    dispatchEvent(event: ModelEvent): void;\r\n    receiveEvent(event: ModelEvent): void;\r\n}\r\n\r\nclass ModelEventTargetBase implements ModelEventTarget {\r\n    #callbacks: Map<string, ((event: ModelEvent) => void)[]>;\r\n\r\n    constructor() {\r\n        this.#callbacks = new Map();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        const {type} = event;\r\n        const callbacks = this.#callbacks.get(type);\r\n        ModelEventTargetAccessor.setCurrentTarget(event, this);\r\n        if (callbacks) {\r\n            callbacks.forEach((callback_i) => {\r\n                callback_i(event);\r\n            });\r\n        }\r\n    }\r\n\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            callbacks.push(callback);\r\n        }\r\n        else {\r\n            this.#callbacks.set(type, [callback]);\r\n        }\r\n    }\r\n\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            const callbackIndex = callbacks.findIndex(\r\n                callback_i => callback_i == callback\r\n            );\r\n            if (callbackIndex > -1) {\r\n                callbacks.splice(callbackIndex, 1);\r\n            }\r\n            if (callbacks.length == 0) {\r\n                this.#callbacks.delete(type);\r\n            }\r\n        }\r\n    }\r\n\r\n    dispatchEvent(event: ModelEvent): void {\r\n        ModelEventTargetAccessor.setTarget(event, this);\r\n        this.receiveEvent(event);\r\n    }\r\n}\r\n\r\nvar ModelEventTarget: ModelEventTargetConstructor = ModelEventTargetBase;\r\n\r\ninterface ModelNodeConstructor {\r\n    readonly prototype: ModelNode;\r\n    new(): ModelNode;\r\n}\r\n\r\ninterface ModelNode extends ModelEventTarget {\r\n    readonly parentNode: ModelNode | null;\r\n    setParent(parentNode: ModelNode | null): void;\r\n    getRecords(): ModelChangeRecord[];\r\n    beginChanges(): void;\r\n    endChanges(): void;\r\n}\r\n\r\ninterface ModelNodeRecordsAccessor {\r\n    triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void;\r\n    handleRecord(node: ModelNode, record: ModelChangeRecord): void;\r\n}\r\n\r\nclass ModelNodeBase extends ModelEventTargetBase implements ModelNode {\r\n    #parentNode: ModelNode | null;\r\n    #records: ModelChangeRecord[];\r\n    #isRecording: boolean;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#parentNode = null;\r\n        this.#records = [];\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    get parentNode(): ModelNode | null {\r\n        return this.#parentNode;\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        if (parentNode !== null) {\r\n            let isCyclicReference = parentNode == this;\r\n            let {parentNode: ancestorNode} = parentNode;\r\n            while (!isCyclicReference && ancestorNode !== null) {\r\n                ({parentNode: ancestorNode} = ancestorNode);\r\n                isCyclicReference = ancestorNode == this;\r\n            }\r\n            if (!isCyclicReference) {\r\n                this.#parentNode = parentNode;\r\n            }\r\n            else {\r\n                throw new TypeError(\"Failed to set parent on ModelNode: circular reference detected in the hierarchy.\");\r\n            }\r\n        }\r\n        else {\r\n            this.#parentNode = null;\r\n        }\r\n    }\r\n    \r\n    beginChanges(): void {\r\n        this.#isRecording = true;\r\n    }\r\n\r\n    endChanges(): void {\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        this.#records.splice(0);\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    getRecords(): ModelChangeRecord[] {\r\n        return this.#records.slice();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        super.receiveEvent(event);\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            parentNode.receiveEvent(event);\r\n        }\r\n    }\r\n\r\n    #triggerChange(property: string, oldValue: any, newValue: any): void {\r\n        const records = this.#records;\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.PROPERTY_CHANGE,\r\n            propertyName: property,\r\n            oldValue, newValue\r\n        });\r\n        records.push(record);\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        records.splice(0);\r\n    }\r\n\r\n    #handleRecord(record: ModelChangeRecord): void {\r\n        this.#records.push(record);\r\n        if (!this.#isRecording) {\r\n            this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n            this.#records.splice(0);\r\n        }\r\n    }\r\n\r\n    static ModelNodeRecordsAccessor? = new class ModelNodeRecordsAccessor {\r\n        triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#triggerChange(property, oldValue, newValue);\r\n            }\r\n        }\r\n\r\n        handleRecord(node: ModelNode, record: ModelChangeRecord): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#handleRecord(record);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelNodeRecordsAccessor: ModelNodeRecordsAccessor = ModelNodeBase.ModelNodeRecordsAccessor!;\r\ndelete ModelNodeBase.ModelNodeRecordsAccessor;\r\n\r\nvar ModelNode: ModelNodeConstructor = ModelNodeBase;\r\n\r\ninterface ModelPropertyDecorator {\r\n    (\r\n        init?: {\r\n            type: typeof String | typeof Number | typeof Boolean | typeof Date | typeof Object\r\n        }\r\n    ): <Model extends ModelObject>(target: Model, property: string) => void;\r\n}\r\n\r\nconst ModelProperty: ModelPropertyDecorator = function(\r\n    init?: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Date | typeof Object\r\n    }\r\n) {\r\n    return (\r\n        target: ModelObject, property: string\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        /*const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n        if (Array.isArray(observedAttributes)) {\r\n            observedAttributes.push(property);\r\n        }\r\n        else {\r\n            Object.defineProperty(\r\n                constructor, \"observedAttributes\", {\r\n                    value: [property],\r\n                    writable: false\r\n                }\r\n            );\r\n        }*/\r\n        const setter = function(this: ModelObject, value: any) {\r\n            const oldValue = ModelObjectPropertiesAccessor.getProperty(this, property);\r\n            ModelObjectPropertiesAccessor.setProperty(this, property, value);\r\n            if (value !== oldValue) {\r\n                ModelNodeRecordsAccessor.triggerChange(this, property, oldValue, value);\r\n            }\r\n            return true;\r\n        };\r\n        const getter = function(this: ModelObject) {\r\n            return ModelObjectPropertiesAccessor.getProperty(this, property);\r\n        };\r\n        Object.defineProperty(prototype, property, {\r\n            set: setter,\r\n            get: getter,\r\n            enumerable: true\r\n        });\r\n    }\r\n}\r\n\r\ninterface ModelObjectConstructor {\r\n    readonly prototype: ModelObject;\r\n    new(): ModelObject;\r\n}\r\n\r\ninterface ModelObject extends ModelNode {}\r\n\r\ninterface ModelObjectPropertiesAccessor {\r\n    setProperty(node: ModelNode, property: string, value: any): void;\r\n    getProperty(node: ModelNode, property: string,): any;\r\n}\r\n\r\nclass ModelObjectBase extends ModelNodeBase implements ModelObject {\r\n    #properties: Map<string, any>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#properties = new Map();\r\n    }\r\n\r\n    static ModelObjectPropertiesAccessor? = new class ModelPropertiesAccessor {\r\n        setProperty(node: ModelObject, property: string, value: any): void {\r\n            if (node instanceof ModelObjectBase) {\r\n                node.#properties.set(property, value);\r\n            }\r\n        }\r\n\r\n        getProperty(node: ModelObject, property: string): any {\r\n            if (node instanceof ModelObjectBase) {\r\n                return node.#properties.get(property);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelObjectPropertiesAccessor: ModelObjectPropertiesAccessor = ModelObjectBase.ModelObjectPropertiesAccessor!;\r\ndelete ModelObjectBase.ModelObjectPropertiesAccessor;\r\n\r\nvar ModelObject: ModelObjectConstructor = ModelObjectBase;\r\n\r\ninterface ModelListConstructor {\r\n    readonly prototype: ModelList;\r\n    new<Model extends ModelNode>(): ModelList<Model>;\r\n    new<Model extends ModelNode>(items: Model[]): ModelList<Model>;\r\n}\r\n\r\ninterface ModelList<Model extends ModelNode = ModelNode> extends ModelNode {\r\n    readonly parentNode: ModelNode | null;\r\n    readonly length: number;\r\n    index(items: Model): number;\r\n    index(items: Model, fromIndex: number): number;\r\n    get(index: number): Model | null;\r\n    values(): IterableIterator<Model>;\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void;\r\n    insert(index: number, ...items: Model[]): void;\r\n    prepend(...items: Model[]): void;\r\n    append(...items: Model[]): void;\r\n    remove(item: Model): void;\r\n    clear(): void;\r\n}\r\n\r\nclass ModelListBase<Model extends ModelNode = ModelNode> extends ModelNodeBase implements ModelList<Model> {\r\n    #items: Model[];\r\n\r\n    constructor()\r\n    constructor(items: Model[])\r\n    constructor(items?: Model[]) {\r\n        super();\r\n        this.#items = items?.slice() ?? [];\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        super.setParent(parentNode);\r\n        this.#items.forEach((item_i) => {\r\n            item_i.setParent(parentNode);\r\n        });\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    get(index: number): Model | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    index(item: Model, fromIndex?: number): number {\r\n        return this.#items.indexOf(item, fromIndex)\r\n    }\r\n\r\n    values(): IterableIterator<Model> {\r\n        return this.#items.values();\r\n    }\r\n\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void {\r\n        const items = this.#items;\r\n        const indexedItems = items.map(\r\n            (item_i, i) => {\r\n                return {\r\n                    item: item_i,\r\n                    index: i\r\n                };\r\n            }\r\n        );\r\n        indexedItems.sort(\r\n            (indexedItem_a, indexedItem_b) => {\r\n                return compareFunction(\r\n                    indexedItem_a.item, indexedItem_b.item\r\n                )\r\n            }\r\n        );\r\n        this.#items = indexedItems.map(indexedItem_i => indexedItem_i.item);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_SORT,\r\n            sortedIndices: indexedItems.map(indexedItem_i => indexedItem_i.index)\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    prepend(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.splice(0, 0, ...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: 0,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    append(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.push(...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: length,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    insert(index: number, ...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const positiveIndex = Math.abs(index);\r\n        if (positiveIndex <= length) {\r\n            if (index >= 0) {\r\n                const {parentNode} = this;\r\n                items.forEach(item_i => {\r\n                    item_i.setParent(parentNode);\r\n                });\r\n                if (index < length) {\r\n                    _items.splice(index, 0, ...items);\r\n                }\r\n                else {\r\n                    _items.push(...items);\r\n                }\r\n            }\r\n            else if (index < 0) {\r\n                index = length - index;\r\n                const {parentNode} = this;\r\n                if (parentNode) {\r\n                    items.forEach(item_i => {\r\n                        item_i.setParent(parentNode);\r\n                    });\r\n                }\r\n                _items.splice(index, 0, ...items);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_INSERT,\r\n                insertedIndex: index,\r\n                insertedItems: items.slice()\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    remove(item: Model): void {\r\n        const _items = this.#items;\r\n        const index = _items.indexOf(item);\r\n        if (index > -1) {\r\n            const item = _items.splice(index, 1)[0];\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                item.setParent(null);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: index,\r\n                removedItems: [item]\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    clear(): void {\r\n        const items = this.#items;\r\n        const {length} = items;\r\n        if (length > 0) {\r\n            const removedItems = items.splice(0);\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                removedItems.forEach((removedItem_i) => {\r\n                    removedItem_i.setParent(null);\r\n                });\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: 0,\r\n                removedItems: removedItems\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n};\r\n\r\nvar ModelList: ModelListConstructor = ModelListBase!;\r\n\r\ninterface ModelChangeObserverConstructor {\r\n    readonly prototype: ModelChangeObserver;\r\n    new(callback: (records: ModelChangeRecord[]) => void): ModelChangeObserver;\r\n}\r\n\r\ninterface ModelChangeObserver {\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void;\r\n    unobserve(node: ModelNode): void;\r\n    disconnect(): void;\r\n}\r\n\r\ntype ModelChangeObserverOptions = {\r\n    properties?: boolean;\r\n    propertiesFilter?: string[];\r\n    childList?: boolean;\r\n    subtree?: boolean;\r\n}\r\n\r\nclass ModelChangeObserverBase implements ModelChangeObserver {\r\n    #callback: (records: ModelChangeRecord[]) => void;\r\n    #records: ModelChangeRecord[];\r\n    #disconnected: boolean;\r\n\r\n    #references: WeakMap<ModelNode, {\r\n        listener: (event: ModelEvent) => void,\r\n        options: ModelChangeObserverOptions\r\n    }>;\r\n\r\n    constructor(callback: (records: ModelChangeRecord[]) => void) {\r\n        this.#callback = callback;\r\n        this.#records = [];\r\n        this.#disconnected = false;\r\n        this.#references = new WeakMap();\r\n    }\r\n\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void {\r\n        this.#disconnected = false;\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (!reference) {\r\n            const listener = this.#handleModelEvent.bind(this);\r\n            node.addEventListener(\"modelchange\", listener);\r\n            reference = {listener, options};\r\n            references.set(node, reference);\r\n        }\r\n        else {\r\n            references.set(node, reference);\r\n        }\r\n    }\r\n\r\n    unobserve(node: ModelNode): void {\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (reference) {\r\n            const {listener} = reference;\r\n            node.removeEventListener(\"modelchange\", listener);\r\n        }\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#records.splice(0);\r\n        this.#disconnected = true;\r\n    }\r\n\r\n    #trigger(): void {\r\n        const records = this.#records.splice(0);\r\n        if (records.length > 0) {\r\n            this.#callback(records);\r\n        }\r\n    }\r\n\r\n    #handleModelEvent(event: ModelEvent): void {\r\n        if (!this.#disconnected) {\r\n            const {target, currentTarget} = event;\r\n            const reference = this.#references.get(<ModelNode>currentTarget);\r\n            if (reference) {\r\n                const {options} = reference;\r\n                const {properties, propertiesFilter, childList, subtree} = options;\r\n                if (subtree) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n                else if (target == currentTarget) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelChangeObserver: ModelChangeObserverConstructor = ModelChangeObserverBase;","export { getPropertyFromPath };\r\nexport { setPropertyFromPath };\r\nexport { snakeToCamel };\r\nexport { camelToSnake };\r\nexport { trainToCamel };\r\nexport { camelToTrain };\r\n\r\nfunction getPropertyFromPath(src: object, path: string): any {\r\n  const props = path.split(\".\");\r\n  let obj: {[key: string]: any} | undefined  = src;\r\n  props.forEach((prop) => {\r\n    if (prop.includes(\"[\")) {\r\n      const index = parseInt(prop.substring(prop.indexOf(\"[\") + 1, prop.indexOf(\"]\")));\r\n      if (Number.isNaN(index)) {\r\n        console.error(`Wrong indexed path: ${prop}`);\r\n      }\r\n      prop = prop.substring(0, prop.indexOf(\"[\"));\r\n      if (typeof obj == \"object\" && prop in obj && Array.isArray(obj[prop])) {\r\n        obj = obj[prop][index];\r\n      }\r\n    }\r\n    else if (typeof obj == \"object\" && prop in obj) {\r\n      obj = obj[prop];\r\n    }\r\n    else {\r\n      obj = void 0;\r\n    }\r\n  });\r\n  return obj;\r\n}\r\n\r\nfunction setPropertyFromPath(src: object, path: string, value: any): object {\r\n  const props = path.split(\".\");\r\n  let obj: {[key: string]: any} = src;\r\n  if (src == null) {\r\n    console.error(\"Source data can't be null\");\r\n  }\r\n  props.forEach((prop, idx) => {\r\n    if (prop.includes(\"[\")) {\r\n      const index = parseInt(prop.substring(prop.indexOf(\"[\") + 1, prop.indexOf(\"]\")));\r\n      if (Number.isNaN(index)) {\r\n        console.error(`Wrong indexed path: ${prop}`);\r\n      }\r\n      prop = prop.substring(0, prop.indexOf(\"[\"));\r\n      if (!Array.isArray(obj[prop])) {\r\n        obj[prop] = [];\r\n      }\r\n      if (idx == props.length - 1) {\r\n        obj[prop][index] = value;\r\n      }\r\n      else {\r\n        if (typeof obj[prop][index] !== \"object\") {\r\n          obj[prop][index] = {}\r\n        }\r\n        obj = obj[prop][index];\r\n      }\r\n    }\r\n    else {\r\n      if (idx == props.length - 1) {\r\n        obj[prop] = value;\r\n      }\r\n      else {\r\n        if (typeof obj[prop] !== \"object\") {\r\n          obj[prop] = {}\r\n        }\r\n        obj = obj[prop];\r\n      }\r\n    }\r\n  });\r\n  return src;\r\n}\r\n\r\nfunction snakeToCamel(str: string) {\r\n  return str.split('_').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToSnake(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '_').toLowerCase();\r\n}\r\n\r\nfunction trainToCamel(str: string) {\r\n  return str.split('-').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToTrain(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '-').toLowerCase();\r\n}","import { widgets, WidgetFactoryConstructor } from \"../views/widgets/Widget\";\r\nimport { ModelList, ModelNode, ModelChangeRecord, ModelChangeObserver, ModelChangeObserverOptions } from \"../models/Model\";\r\nimport { camelToTrain } from \"./Snippets\";\r\n\r\nexport { subtreeNodes };\r\nexport { ancestorNodes };\r\nexport { CustomElement };\r\nexport { Widget };\r\nexport { widget };\r\nexport { QueryProperty };\r\nexport { QueryAllProperty };\r\nexport { AttributeProperty };\r\nexport { reactiveElement };\r\nexport { reactiveChildElements };\r\nexport { element };\r\nexport { Fragment };\r\nexport { TextNode };\r\nexport { AttributeMutationMixin };\r\nexport { AttributeType };\r\nexport { areAttributesMatching };\r\nexport { AttributeMutationMixinBase };\r\nexport { trimMultilineIndent };\r\nexport { Stylesheet };\r\n\r\ninterface AttributePropertyDecorator {\r\n    (\r\n        init: {\r\n            type: typeof String;\r\n            observed?: boolean;\r\n            defaultValue?: string | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Number;\r\n            observed?: boolean;\r\n            defaultValue?: number | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Boolean;\r\n            observed?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Object;\r\n            observed?: boolean;\r\n            defaultValue?: any | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n}\r\n\r\nconst AttributeProperty: AttributePropertyDecorator = function(\r\n    init: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Object;\r\n        observed?: boolean;\r\n        defaultValue?: string | number | any | null;\r\n    }\r\n) {\r\n    return <E extends HTMLElement>(\r\n        target: E, property: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = property.toString();\r\n        const attributeName = camelToTrain(propertyName);\r\n        const defaultValue = init.defaultValue ?? null;\r\n        const observed = init.observed ?? false;\r\n        if (observed) {\r\n            const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n            if (Array.isArray(observedAttributes)) {\r\n                observedAttributes.push(attributeName);\r\n            }\r\n            else {\r\n                Object.defineProperty(\r\n                    constructor, \"observedAttributes\", {\r\n                        value: [attributeName],\r\n                        writable: false\r\n                    }\r\n                );\r\n            }\r\n        }\r\n        const {type} = init;\r\n        switch (type) {\r\n            case Boolean: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        return this.hasAttribute(attributeName);\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value) {\r\n                            this.setAttribute(attributeName, \"\");\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Object: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? JSON.parse(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, JSON.stringify(value));\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Number: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? parseFloat(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case String:\r\n            default: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? val : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n    \r\nfunction Stylesheet(text: string): CSSStyleSheet {\r\n    const stylesheet = new CSSStyleSheet();\r\n    (stylesheet as any).replaceSync(text);\r\n    return stylesheet;\r\n}\r\n\r\nfunction trimMultilineIndent(text: string): string {\r\n    const newlineIndex = text.indexOf(\"\\n\");\r\n    text = text.substring(newlineIndex + 1);\r\n    const indentMatch = text.match(/^[\\s]*/);\r\n    if (indentMatch) {\r\n        const indent = text.substring(0, indentMatch[0].length);\r\n        text = text.replaceAll(indent, \"\").trimEnd();\r\n    }\r\n    return text;\r\n}\r\n\r\ninterface CustomElementDecorator {\r\n    (init: {\r\n        name: string;\r\n        options?: ElementDefinitionOptions\r\n    }): <C extends CustomElementConstructor>(elementCtor: C) => C;\r\n}\r\n\r\nconst CustomElement: CustomElementDecorator = function(init: {\r\n    name: string;\r\n    options?: ElementDefinitionOptions\r\n}) {\r\n    return <C extends CustomElementConstructor>(\r\n        elementCtor: C\r\n    ) => {\r\n        const {name, options} = init;\r\n        if (!customElements.get(name)) {\r\n            customElements.define(\r\n                name,\r\n                elementCtor,\r\n                options\r\n            );\r\n        }\r\n        return elementCtor;\r\n    }\r\n}\r\n\r\ninterface WidgetDecorator {\r\n    (init: {\r\n        name: string;\r\n    }): <W extends WidgetFactoryConstructor>(widget: W) => W;\r\n}\r\n\r\nconst Widget: WidgetDecorator = function(init: {\r\n    name: string;\r\n}) {\r\n    return <W extends WidgetFactoryConstructor>(\r\n        widget: W\r\n    ) => {\r\n        const {name} = init;\r\n        widgets.set(\r\n            name,\r\n            new widget()\r\n        );\r\n        return widget;\r\n    }\r\n}\r\n\r\nfunction *subtreeNodes(node: Node): Generator<Node> {\r\n    yield node;\r\n    const childNodes = node.childNodes;\r\n    const childNodesCount = childNodes.length;\r\n    let childIndex = 0;\r\n    while (childIndex < childNodesCount) {\r\n        const child = childNodes.item(childIndex);\r\n        if (child !== null) {\r\n            yield * subtreeNodes(child);\r\n        }\r\n        childIndex++;\r\n    }\r\n}\r\n\r\nfunction *ancestorNodes(node: Node): Generator<Node> {\r\n    const {parentNode} = node;\r\n    if (parentNode) {\r\n        yield parentNode;\r\n        yield *ancestorNodes(parentNode);\r\n    }\r\n}\r\n\r\ninterface QueryPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryProperty: QueryPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = propertyKey.toString();\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return this.shadowRoot!.querySelector(selector);\r\n        } : function(this: HTMLElement) {\r\n            return this.querySelector(selector);\r\n        }\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\ninterface QueryAllPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryAllProperty: QueryAllPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = propertyKey.toString();\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return Array.from(this.shadowRoot!.querySelectorAll(selector));\r\n        } : function(this: HTMLElement) {\r\n            return Array.from(this.querySelectorAll(selector));\r\n        };\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\nfunction Fragment(...nodes: (Node | string)[]): DocumentFragment {\r\n    const fragment = document.createDocumentFragment();\r\n    fragment.append(...nodes);\r\n    return fragment;\r\n}\r\n\r\nfunction TextNode(text: string): Node {\r\n    return document.createTextNode(text);\r\n}\r\n\r\ninterface HTMLElementInit {\r\n    options?: ElementCreationOptions,\r\n    attributes?: {\r\n        [name: string]: number | string | boolean | undefined\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    children?: (Node | string)[] | NodeList | ReactiveChildElements,\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction element<E extends HTMLElementTagNameMap[K], K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): E;\r\nfunction element(\r\n    tagName: string, init?: HTMLElementInit): HTMLElement;\r\nfunction element<K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): HTMLElementTagNameMap[K] {\r\n    if (init) {\r\n        const {options, attributes, dataset, children, listeners} = init;\r\n        const element = document.createElement(tagName, options);\r\n        if (attributes) {\r\n            Object.keys(attributes).forEach((attributeName) => {\r\n                const attributeValue = attributes[attributeName];\r\n                if (attributeValue !== void 0) {\r\n                    if (typeof attributeValue == \"boolean\") {\r\n                        element.toggleAttribute(camelToTrain(attributeName), attributeValue);\r\n                    }\r\n                    else {\r\n                        element.setAttribute(camelToTrain(attributeName), attributeValue.toString());\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        if (dataset) {\r\n            const {dataset: elementDataset} = element;\r\n            Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                elementDataset[datasetEntry_i] = dataset[datasetEntry_i].toString();\r\n            });\r\n        }\r\n        if (children) {\r\n            if (typeof children == \"function\") {\r\n                element.append(...children(element));\r\n            }\r\n            else {\r\n                element.append(...Array.from(children));\r\n            }\r\n        }\r\n        if (listeners) {\r\n            Object.entries(listeners).forEach(([name_i, listener_i]) => {\r\n                if (Array.isArray(listener_i)) {\r\n                    element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                }\r\n                else {\r\n                    element.addEventListener(name_i, listener_i);\r\n                }\r\n            });\r\n        }\r\n        return element;\r\n    }\r\n    return document.createElement(tagName);\r\n}\r\n\r\ninterface WidgetInit<K extends keyof WidgetNameMap> {\r\n    properties?: Parameters<WidgetNameMap[K][\"create\"]>[0],\r\n    attributes?: {\r\n        [name: string]: number | string | boolean | undefined\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    slotted?: {\r\n        [slot: string]: (Node | string)[] | NodeList | ReactiveChildElements\r\n    } | ((Node | string)[] | NodeList | ReactiveChildElements),\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: K, init?: WidgetInit<K>): ReturnType<WidgetNameMap[K][\"create\"]>;\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: string, init?: WidgetInit<K>): HTMLElement\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: K, init?: WidgetInit<K>): HTMLElement {\r\n    const widget = widgets.get(name);\r\n    if (widget) {\r\n        const element = <HTMLElement>widget.create(init?.properties);\r\n        if (init) {\r\n            const {attributes, dataset, slotted, listeners} = init;\r\n            if (attributes) {\r\n                Object.keys(attributes).forEach((attributeName) => {\r\n                    const attributeValue = attributes[attributeName];\r\n                    if (attributeValue !== void 0) {\r\n                        if (typeof attributeValue == \"boolean\") {\r\n                            element.toggleAttribute(camelToTrain(attributeName), attributeValue);\r\n                        }\r\n                        else {\r\n                            element.setAttribute(camelToTrain(attributeName), attributeValue.toString());\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            if (dataset) {\r\n                const {dataset: elementDataset} = element;\r\n                Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                    elementDataset[datasetEntry_i] = dataset[datasetEntry_i].toString();\r\n                });\r\n            }\r\n            if (slotted) {\r\n                if (typeof slotted == \"function\" || Array.isArray(slotted) || slotted instanceof NodeList) {\r\n                    const slot = widget.slot(element, null);\r\n                    if (slot) {\r\n                        if (typeof slotted == \"function\") {\r\n                            slot.append(...slotted(element));\r\n                        }\r\n                        else {\r\n                            slot.append(...Array.from(slotted));\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    Object.entries(slotted).forEach(([slot_i, slotted]) => {\r\n                        const slot = widget.slot(element, slot_i);\r\n                        if (slot) {\r\n                            if (typeof slotted == \"function\") {\r\n                                slot.append(...slotted(element));\r\n                            }\r\n                            else {\r\n                                slot.append(...Array.from(slotted));\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            if (listeners) {\r\n                Object.entries(listeners).forEach(([name_i, listener_i]) => {\r\n                    if (Array.isArray(listener_i)) {\r\n                        element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                    }\r\n                    else {\r\n                        element.addEventListener(name_i, listener_i);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return element;\r\n    }\r\n    throw new Error(`Unknown widget ${name}`);\r\n}\r\n\r\nconst reactiveElementsMap = new WeakMap<ModelNode, {\r\n    observerOptions: ModelChangeObserverOptions,\r\n    reactiveElementsArray: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }[]\r\n}>();\r\n\r\nconst reactiveElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    model: ModelNode,\r\n    reactiveElement: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }\r\n}) => {\r\n    const {model, reactiveElement} = heldValue;\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    if (reactiveElementsMapEntry !== void 0) {\r\n        const {reactiveElementsArray} = reactiveElementsMapEntry;\r\n        reactiveElementsArray.splice(reactiveElementsArray.indexOf(reactiveElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveElementsPropertyObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    records.forEach((record_i) => {\r\n        const {target, propertyName, oldValue, newValue} = record_i;\r\n        const {reactiveElementsArray} = reactiveElementsMap.get(target)!;\r\n        reactiveElementsArray.forEach(reactiveElement_i => {\r\n            const {elementRef, react, properties} = reactiveElement_i;\r\n            const element = elementRef.deref();\r\n            if (element) {\r\n                if (properties.includes(propertyName!)) {\r\n                    react(element, propertyName!, oldValue, newValue);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveElement<M extends ModelNode, E extends Element, K extends string>(\r\n    model: M,\r\n    element: E,\r\n    properties: K[],\r\n    react: (object: E, property: K, oldValue: any, newValue: any) => void\r\n): E;\r\nfunction reactiveElement<M extends ModelNode, E extends Element>(\r\n    model: M,\r\n    element: E,\r\n    properties: string[],\r\n    react: (element: E, property: string, oldValue: any, newValue: any) => void\r\n): E {\r\n    const elementRef = new WeakRef(element);\r\n    const reactiveElement = {elementRef, react, properties};\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    reactiveElementsFinalizationRegistry.register(element, {model, reactiveElement});\r\n    if (!reactiveElementsMapEntry) {\r\n        const observerOptions = {\r\n            properties: true,\r\n            propertiesFilter: properties\r\n        };\r\n        const reactiveElementsArray = [reactiveElement];\r\n        reactiveElementsMap.set(model, {observerOptions, reactiveElementsArray});\r\n        reactiveElementsPropertyObserver.observe(model, observerOptions);\r\n    }\r\n    else {\r\n        const {reactiveElementsArray, observerOptions} = reactiveElementsMapEntry;\r\n        const {propertiesFilter} = observerOptions;\r\n        reactiveElementsArray.push(reactiveElement);\r\n        observerOptions.propertiesFilter = propertiesFilter ?\r\n            propertiesFilter.concat(properties.filter(\r\n                property_i => !propertiesFilter.includes(property_i)\r\n            )) : Array.from(new Set(properties));\r\n    }\r\n    properties.forEach((property_i) => {\r\n        if (property_i in model) {\r\n            const value = Reflect.get(model, property_i, model);\r\n            if (value !== void 0) {\r\n                react(element, <any>property_i, <any>void 0, value);\r\n            }\r\n        }\r\n    });\r\n    return element;\r\n}\r\n\r\ninterface ReactiveChildElements {\r\n    (parent: Node & ParentNode): (Node | string)[]\r\n}\r\n\r\nconst reactiveChildElementsMap = new WeakMap<ModelList, {\r\n    reactiveChildElementsArray: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }[]\r\n}>();\r\n\r\nconst reactiveChildElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    list: ModelList,\r\n    reactiveChildElement: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }\r\n}) => {\r\n    const {list, reactiveChildElement} = heldValue;\r\n    const reactiveChildrenElementsMapEntry = reactiveChildElementsMap.get(list);\r\n    if (reactiveChildrenElementsMapEntry) {\r\n        const {reactiveChildElementsArray} = reactiveChildrenElementsMapEntry;\r\n        reactiveChildElementsArray.splice(reactiveChildElementsArray.indexOf(reactiveChildElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveChildElementsObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    let range: null | Range = null;\r\n    Array.from(records.values()).forEach((record_i) => {\r\n        const {target} = record_i;\r\n        const list = <ModelList>target;\r\n        const {length: listLength} = list;\r\n        const {reactiveChildElementsArray} = reactiveChildElementsMap.get(list)!;\r\n        reactiveChildElementsArray.forEach((reactiveChildElements_i) => {\r\n            const {parentRef, mapping, placeholder} = reactiveChildElements_i;\r\n            const parent = parentRef.deref();\r\n            if (parent) {\r\n                const {firstChild, children} = parent;\r\n                const {length: childrenCount} = children;\r\n                if (placeholder && listLength > 0 && firstChild == placeholder) {\r\n                    parent.removeChild(placeholder);\r\n                }\r\n                const {changeType, LIST_INSERT, LIST_REMOVE, LIST_SORT} = record_i;\r\n                switch (changeType) {\r\n                    case LIST_INSERT: {\r\n                        const {insertedIndex, insertedItems} = record_i;\r\n                        const insertedItemsArray = Array.from(insertedItems.values()).map(mapping);\r\n                        const {length: childrenCount} = children;\r\n                        if (insertedIndex < childrenCount) {\r\n                            children[insertedIndex].before(...insertedItemsArray);\r\n                        }\r\n                        else {\r\n                            parent.append(...insertedItemsArray);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_REMOVE: {\r\n                        const {removedIndex, removedItems} = record_i;\r\n                        const {length: removedCount} = removedItems;\r\n                        range = range ?? document.createRange();\r\n                        const removeEndIndex = removedIndex + (removedCount - 1);\r\n                        if (removeEndIndex < childrenCount) {\r\n                            range.setStartBefore(children[removedIndex]);\r\n                            range.setEndAfter(children[removeEndIndex]);\r\n                            range.deleteContents();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_SORT: {\r\n                        const {sortedIndices} = record_i;\r\n                        const childrenArray = Array.from(children);\r\n                        parent.append(\r\n                            ...sortedIndices.filter(\r\n                                index_i => index_i < childrenCount\r\n                            ).map(\r\n                                index_i => childrenArray[index_i]\r\n                            )\r\n                        );\r\n                        break;\r\n                    }\r\n                }\r\n                if (listLength == 0 && placeholder) {\r\n                    parent.append(placeholder);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveChildElements<Model extends ModelNode>(\r\n    list: ModelList<Model>,\r\n    mapping: (item: Model) => Element,\r\n    placeholder?: Element\r\n): ReactiveChildElements {\r\n    return (parent: Node & ParentNode) => {\r\n        const parentRef = new WeakRef(parent);\r\n        const reactiveChildElementsMapEntry = reactiveChildElementsMap.get(list);\r\n        const reactiveChildElement = {parentRef, mapping, placeholder};\r\n        reactiveChildElementsFinalizationRegistry.register(parent, {list, reactiveChildElement});\r\n        if (!reactiveChildElementsMapEntry) {\r\n            const reactiveChildElementsArray = [reactiveChildElement];\r\n            reactiveChildElementsMap.set(list, {reactiveChildElementsArray});\r\n            reactiveChildElementsObserver.observe(list, {\r\n                childList: true\r\n            });\r\n        }\r\n        else {\r\n            const {reactiveChildElementsArray} = reactiveChildElementsMapEntry;\r\n            reactiveChildElementsArray.push(reactiveChildElement);\r\n        }\r\n        return list.length == 0 && placeholder ?\r\n            [placeholder] : Array.from(list.values()).map(mapping);\r\n    }\r\n}\r\n\r\ninterface AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n    attach(element: Element): void;\r\n    detach(element: Element): void;\r\n}\r\n\r\ntype AttributeType = \"string\" | \"boolean\" | \"list\";\r\n\r\nfunction areAttributesMatching(\r\n    referenceAttributeType: AttributeType,\r\n    referenceAttributeName: string, referenceAttributeValue: string,\r\n    attributeName: string, attributeValue: string | null): boolean {\r\n    if (referenceAttributeName == attributeName) {\r\n        switch (referenceAttributeType) {\r\n            case \"boolean\":\r\n                return referenceAttributeValue == \"\" && attributeValue == \"\";\r\n            case \"string\":\r\n                return referenceAttributeValue !== \"\" && (referenceAttributeValue == attributeValue);\r\n            case \"list\":\r\n                return (referenceAttributeValue !== \"\" && attributeValue !== null) && new RegExp(`${referenceAttributeValue}\\s*?`, \"g\").test(attributeValue );\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nclass AttributeMutationMixinBase implements AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n\r\n    constructor(attributeName: string, attributeType: AttributeType = \"boolean\", attributeValue: string = \"\") {\r\n        this.attributeName = attributeName;\r\n        this.attributeType = attributeType;\r\n        this.attributeValue = attributeValue;\r\n    }\r\n\r\n    attach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n\r\n    detach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n}","import { Fragment } from \"../../../../lib\";\r\nimport { CustomElement, element } from \"../../Element\";\r\nimport { HTMLETreeElement } from \"./Tree\";\r\nimport { HTMLETreeItemElement } from \"./TreeItem\";\r\n\r\nexport { HTMLETreeItemGroupElement };\r\n\r\ninterface HTMLETreeItemGroupElementConstructor {\r\n    readonly prototype: HTMLETreeItemGroupElement;\r\n    new(): HTMLETreeItemGroupElement;\r\n}\r\n\r\ninterface HTMLETreeItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitemgroup\": HTMLETreeItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-treeitemgroup\"\r\n})\r\nclass HTMLETreeItemGroupElementBase extends HTMLElement implements HTMLETreeItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLETreeItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLETreeItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n            item_i.level = (() => {\r\n                let level = -1;\r\n                let closestItem: HTMLETreeItemElement | null = item_i;\r\n                while (closestItem !== null && closestItem.matches(\"e-tree :scope\")) {\r\n                    closestItem = closestItem.parentElement?.closest(\"e-treeitem\") ?? null;\r\n                    level++;\r\n                }\r\n                return level;\r\n            })();\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemGroupElement: HTMLETreeItemGroupElementConstructor = HTMLETreeItemGroupElementBase;","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\nimport { HTMLETreeElement } from \"./Tree\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeItemElement };\r\n\r\ninterface HTMLETreeItemElementConstructor {\r\n    readonly prototype: HTMLETreeItemElement;\r\n    new(): HTMLETreeItemElement;\r\n}\r\n\r\ninterface HTMLETreeItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly group: HTMLETreeItemGroupElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    expanded: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    level: number;\r\n    type: \"leaf\" | \"parent\";\r\n    toggle(force?: boolean): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitem\": HTMLETreeItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-treeitem\"\r\n})\r\nclass HTMLETreeItemElementBase extends HTMLElement implements HTMLETreeItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get group(): HTMLETreeItemGroupElement | null {\r\n        return this.#group;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    expanded!: boolean;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number, observed: true})\r\n    level!: number;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"leaf\"})\r\n    type!: \"leaf\" | \"parent\";\r\n\r\n    #group: HTMLETreeItemGroupElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"arrow\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"group\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.#group = null;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"expanded\": {\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const labelPart = this.shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"level\": {\r\n                this.style.setProperty(\"--level\", `${this.level}`);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        this.expanded = force ?? !this.expanded;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, shiftKey, ctrlKey} = event;\r\n        const {type} = this;\r\n        if (this == target && type == \"parent\" && !(shiftKey || ctrlKey)) {\r\n            this.toggle();\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target;\r\n        switch (slotName) {\r\n            case \"group\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#group = element instanceof HTMLETreeItemGroupElement ? element : null;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemElement: HTMLETreeItemElementConstructor = HTMLETreeItemElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLETreeItemElement } from \"./TreeItem\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeElement };\r\n\r\ninterface HTMLETreeElementConstructor {\r\n    readonly prototype: HTMLETreeElement;\r\n    new(): HTMLETreeElement;\r\n}\r\n\r\ninterface HTMLETreeElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLETreeItemElement>;\r\n    readonly activeItem: HTMLETreeItemElement | null;\r\n    readonly dropTargetItem: HTMLETreeItemElement | null;\r\n    droptarget: boolean;\r\n    name: string;\r\n    selectedItems(): HTMLETreeItemElement[];\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tree\": HTMLETreeElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-tree\"\r\n})\r\nclass HTMLETreeElementBase extends HTMLElement implements HTMLETreeElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLETreeItemElement>;\r\n\r\n    get activeItem(): HTMLETreeItemElement | null {\r\n        return this.querySelector<HTMLETreeItemElement>(\r\n            \"e-treeitem[active]\"\r\n        );\r\n    }\r\n\r\n    get dropTargetItem(): HTMLETreeItemElement | null {\r\n        return this.querySelector<HTMLETreeItemElement>(\r\n            \"e-treeitem[droptarget]\"\r\n        );\r\n    }\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.items = this.getElementsByTagName(\"e-treeitem\");\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this), true);\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    selectedItems(): HTMLETreeItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.#firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLETreeItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLETreeItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLETreeItemElement, to: HTMLETreeItemElement): HTMLETreeItemElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleItem = this.#nextItem(from);\r\n            while (nextVisibleItem && nextVisibleItem !== to) {\r\n                range.push(nextVisibleItem);\r\n                nextVisibleItem = this.#nextItem(nextVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleItem = this.#previousItem(from);\r\n            while (previousVisibleItem && previousVisibleItem !== to) {\r\n                range.push(previousVisibleItem);\r\n                previousVisibleItem = this.#previousItem(previousVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLETreeItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((item_i) => {\r\n            item_i.selected = false;\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLETreeItemElement | null): void {\r\n        const {activeItem} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = item;\r\n            item.active = true;\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n    \r\n    #setDropTargetItem(item: HTMLETreeItemElement | null): void {\r\n        const {dropTargetItem} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n        }\r\n    }\r\n\r\n    #firstItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousSibling = <HTMLETreeItemElement | null>walker.previousSibling();\r\n        return previousSibling ?\r\n            this.#deepestItem(previousSibling) :\r\n            <HTMLETreeItemElement | null>walker.parentNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const {type, expanded} = item;\r\n        return <HTMLETreeItemElement | null>(\r\n            type === \"leaf\" ?\r\n                walker.nextNode() :\r\n                expanded ?\r\n                    walker.nextNode() :\r\n                    walker.nextSibling() ??\r\n                    (walker.parentNode(), walker.nextSibling())\r\n        );\r\n    }\r\n\r\n    #deepestItem(item: HTMLETreeItemElement): HTMLETreeItemElement {\r\n        if (item.expanded) {\r\n            const walker = this.#walker;\r\n            const lastItem = <HTMLETreeItemElement>walker.lastChild();\r\n            if (lastItem) {\r\n                return this.#deepestItem(lastItem);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey} = event;\r\n        const selectedItems = this.selectedItems();\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            if (!shiftKey && !ctrlKey) {\r\n                this.#setSelection(target);\r\n            }\r\n            else if (ctrlKey) {\r\n                const {selected} = target;\r\n                if (selected) {\r\n                    target.blur();\r\n                }\r\n                (!selected) ?\r\n                    this.#addToSelection(target) :\r\n                    this.#removeFromSelection(target);\r\n                event.stopPropagation();\r\n            }\r\n            else if (shiftKey) {\r\n                const lastSelectedItem = selectedItems[selectedItems.length - 1];\r\n                if (lastSelectedItem) {\r\n                    const range = this.#getItemsRange(\r\n                        lastSelectedItem,\r\n                        target\r\n                    );\r\n                    if (range) {\r\n                        if (selectedItems.includes(target)) {\r\n                            this.#removeFromSelection(...range);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(...range);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.#setSelection(target);\r\n                }\r\n                event.stopPropagation();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const {type} = target;\r\n            if (type == \"parent\") {\r\n                target.toggle(true);\r\n            }\r\n            this.#setDropTargetItem(target);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!this.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        const {root} = walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? root, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? root, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(\r\n                                firstItem,\r\n                                this.#deepestItem(lastItem)\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    if (activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                    else {\r\n                        const walker = this.#walker;\r\n                        const parentItem = <HTMLETreeItemElement>walker.parentNode();\r\n                        if (parentItem) {\r\n                            parentItem.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    if (!activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.#setActiveItem(null);\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            this.#setActiveItem(target);\r\n            this.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLETreeItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLETreeItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n            item_i.level = 0;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLETreeElement: HTMLETreeElementConstructor = HTMLETreeElementBase;","import { ModelObject } from \"../models/Model\";\r\n\r\nexport { View };\r\n\r\ninterface View extends HTMLElement {\r\n    readonly model: ModelObject | null;\r\n    setModel(model: ModelObject): void;\r\n    renderShadow(): Node | undefined;\r\n    renderLight(): Node | undefined;\r\n    refresh(): void;\r\n}\r\n\r\ninterface ViewConstructor {\r\n    readonly prototype: View;\r\n    new(): View;\r\n}\r\n\r\nclass ViewBase extends HTMLElement implements View {\r\n    #model: ModelObject | null;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#model = null;\r\n    }\r\n\r\n    get model(): ModelObject | null {\r\n        return this.#model;\r\n    }\r\n    \r\n    setModel(model: ModelObject): void {\r\n        this.#model = model;\r\n        this.#render();            \r\n    }\r\n\r\n    renderLight(): Node | undefined {\r\n        return;\r\n    }\r\n\r\n    renderShadow(): Node | undefined {\r\n        return;\r\n    }\r\n\r\n    refresh(): void {\r\n        this.#render();\r\n    }\r\n\r\n    #render(): void {\r\n        const {shadowRoot} = this;\r\n        const shadow = this.renderShadow();\r\n        if (shadow) {\r\n            if (shadowRoot) {\r\n                shadowRoot.replaceChildren(shadow);\r\n            }\r\n        }\r\n        const light = this.renderLight();\r\n        if (light) {\r\n            this.replaceChildren(light);\r\n        }\r\n    }\r\n}\r\n\r\nvar View: ViewConstructor = ViewBase;","import { HTMLEToolBarElement } from \"../..\";\r\nimport { HTMLEToolBarItemElement } from \"../elements/containers/toolbars/ToolBarItem\";\r\nimport { HTMLETreeElement } from \"../elements/containers/trees/Tree\";\r\nimport { HTMLETreeItemElement } from \"../elements/containers/trees/TreeItem\";\r\nimport { element, reactiveChildElements, reactiveElement, CustomElement, Fragment, TextNode } from \"../elements/Element\";\r\nimport { ModelEvent, ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\n\r\nexport { TreeModel };\r\nexport { TreeItemModel };\r\nexport { TreeView };\r\n\r\nclass TreeModel extends ModelObject {\r\n    readonly items: ModelList<TreeItemModel>;\r\n    readonly childItems: ModelList<TreeItemModel>;\r\n    sortFunction: ((item_a: TreeItemModel, item_b: TreeItemModel) => number) | null;\r\n    \r\n    constructor()\r\n    constructor(init: {items: TreeItemModel[], sortFunction?: (item_a: TreeItemModel, item_b: TreeItemModel) => number})\r\n    constructor(init?: {items: TreeItemModel[], sortFunction?: (item_a: TreeItemModel, item_b: TreeItemModel) => number}) {\r\n        super();\r\n        const childItems = new ModelList(init?.items ?? []);\r\n        childItems.setParent(this);\r\n        this.childItems = childItems;\r\n        this.items = new ModelList(this.flattenItems());\r\n        this.sortFunction = init?.sortFunction ??\r\n            function(item_a: TreeItemModel, item_b: TreeItemModel) {\r\n                return item_a.label.localeCompare(item_b.label);\r\n            };\r\n        this.addEventListener(\"modelchange\", this.#handleModelChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleModelChangeEvent(event: ModelEvent): void {\r\n        const {target} = event;\r\n        const {items, sortFunction, flattenItems} = this;\r\n        if (target instanceof ModelList) {\r\n            const records = target.getRecords();\r\n            records.forEach((record_i) => {\r\n                const {insertedItems, removedItems} = record_i;\r\n                const flattenedInsertedItems = (<TreeItemModel[]>Array.from(insertedItems.values())).flatMap(\r\n                    insertedItem_i => Array.of(insertedItem_i, ...flattenItems.call(insertedItem_i))\r\n                );\r\n                const flattenedRemovedItems = (<TreeItemModel[]>Array.from(removedItems.values())).flatMap(\r\n                    removedItem_i => Array.of(removedItem_i, ...flattenItems.call(removedItem_i))\r\n                );\r\n                items.beginChanges();\r\n                items.append(...flattenedInsertedItems);\r\n                flattenedRemovedItems.forEach((removedItem_i) => items.remove(removedItem_i));\r\n                if (sortFunction) items.sort(sortFunction);\r\n                items.endChanges();\r\n            });\r\n        }\r\n    }\r\n\r\n    flattenItems(this: TreeModel | TreeItemModel): TreeItemModel[] {\r\n        const {childItems} = this;\r\n        return Array.from(childItems.values()).flatMap(\r\n            treeItem_i => Array.of(treeItem_i, ...TreeModel.prototype.flattenItems.call(treeItem_i))\r\n        );\r\n    }\r\n\r\n    getItemByUri(this: TreeModel | TreeItemModel, uri: string): TreeItemModel | null {\r\n        const {childItems} = this;\r\n        const {length: itemsCount} = childItems;\r\n        const {length: uriLength} = uri;\r\n        for (let i = 0; i < itemsCount; i++) {\r\n            const item_i = childItems.get(i)!;\r\n            const {uri: itemUri} = item_i;\r\n            const {length: itemUriLength} = itemUri;\r\n            if (uri.startsWith(itemUri)) {\r\n                if (uri.charAt(itemUriLength) == \"/\") {\r\n                    return TreeModel.prototype.getItemByUri.call(item_i, uri);\r\n                }\r\n                else if (itemUriLength == uriLength) {\r\n                    return item_i;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\ninterface TreeItem {\r\n    show(): void;\r\n    hide(): void;\r\n    display(): void;\r\n    remove(): void;\r\n}\r\n\r\nclass TreeItemList implements TreeItem {\r\n    #items: TreeItemModel[];\r\n\r\n    constructor(items: TreeItemModel[]) {\r\n        this.#items = items;\r\n    }\r\n\r\n    static from(items: TreeItemModel[]): TreeItemList {\r\n        return new TreeItemList(items);\r\n    }\r\n\r\n    static of(...items: TreeItemModel[]): TreeItemList {\r\n        return new TreeItemList(items);\r\n    }\r\n\r\n    show(): void {\r\n        console.log(this.#items);\r\n        this.#items.forEach(item_i => item_i.show());\r\n    }\r\n\r\n    hide(): void {\r\n        this.#items.forEach(item_i => item_i.hide());\r\n    }\r\n\r\n    display(): void {\r\n        const items = this.#items;\r\n        const result = items.reduce(\r\n            (result, item_i) => `${result} ${item_i.label}`, \"\"\r\n        );\r\n        console.log(result);\r\n    }\r\n\r\n    remove(): void {\r\n        const items = this.#items;\r\n        const removedItemsGroups = items.reduce((map, item_i) => {\r\n            const {parentNode} = item_i;\r\n            if (parentNode instanceof TreeItemModel || parentNode instanceof TreeModel) {\r\n                const {childItems} = parentNode;\r\n                const group = map.get(childItems);\r\n                if (group) group.push(item_i);\r\n                else map.set(childItems, [item_i]);\r\n            }\r\n            return map;\r\n        }, new Map<ModelList, TreeItemModel[]>());\r\n        Array.from(removedItemsGroups.entries()).forEach(\r\n            ([list_i, children_i]) => {\r\n                list_i.beginChanges();\r\n                children_i.forEach((child_i) => {\r\n                    \r\n                    list_i.remove(child_i);\r\n                });\r\n                list_i.endChanges();\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nclass TreeItemModel extends ModelObject implements TreeItem {\r\n    readonly childItems: ModelList<TreeItemModel>;\r\n    readonly type: \"leaf\" | \"parent\";\r\n    readonly label: string;\r\n\r\n    @ModelProperty(/*{type: Number}*/)\r\n    childCount: number;\r\n\r\n    @ModelProperty(/*{type: Boolean}*/)\r\n    visibility: boolean;\r\n\r\n    get uri(): string {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return `${parentNode.uri}/${this.label}`;\r\n        }\r\n        return this.label;\r\n    }\r\n\r\n    get parentItem(): TreeItemModel | null {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return parentNode;\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    constructor(init: {label: string, type: \"leaf\" | \"parent\", items?: TreeItemModel[]}) {\r\n        super();\r\n        const {label, type} = init;\r\n        const childItems = new ModelList(init.items ?? []);\r\n        childItems.setParent(this);\r\n        this.childItems = childItems;\r\n        this.label = label;\r\n        this.type = type;\r\n        this.childCount = childItems.length;\r\n        this.visibility = true;\r\n        this.addEventListener(\"modelchange\", this.#handleModelChangeEvent.bind(this));\r\n    }\r\n\r\n    show(): void {\r\n        this.visibility = true;\r\n    }\r\n\r\n    hide(): void {\r\n        this.visibility = false;\r\n    }\r\n\r\n    display(): void {\r\n        console.log(this.label);\r\n    }\r\n    \r\n    remove(): void {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel || parentNode instanceof TreeModel) {\r\n            const {childItems} = parentNode;\r\n            if (childItems) {\r\n                childItems.remove(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleModelChangeEvent(event: ModelEvent): void {\r\n        const {target} = event;\r\n        const {childItems} = this;\r\n        if (target == childItems) {\r\n            this.childCount = childItems.length;\r\n        }\r\n    }\r\n}\r\n\r\ninterface TreeViewConstructor {\r\n    readonly prototype: TreeView;\r\n    new(): TreeView;\r\n    new(model: TreeModel): TreeView;\r\n}\r\n\r\ninterface TreeView extends View {\r\n    model: TreeModel;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"v-tree\": TreeView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"v-tree\"\r\n})\r\nclass TreeViewBase extends View implements TreeView {\r\n    readonly model!: TreeModel;\r\n    #treeElement: WeakRef<HTMLETreeElement> | undefined;\r\n    #dragImagesElementsMap: WeakMap<TreeItemModel, WeakRef<Element>>;\r\n    #treeItemElementsMap: WeakMap<TreeItemModel, WeakRef<HTMLETreeItemElement>>;\r\n    \r\n    constructor()\r\n    constructor(model: TreeModel)\r\n    constructor(model?: TreeModel) {\r\n        super();\r\n        this.#treeItemElementsMap = new WeakMap();\r\n        this.#dragImagesElementsMap = new WeakMap();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.setModel(model ?? new TreeModel());\r\n    }\r\n\r\n    getTreeElement(): HTMLETreeElement | null {\r\n        return this.#treeElement?.deref() ?? null;\r\n    }\r\n\r\n    getTreeItemElement(model: TreeItemModel): HTMLETreeItemElement | null {\r\n        return this.#treeItemElementsMap.get(model)?.deref() ?? null;\r\n    }\r\n\r\n    getDragImageElement(model: TreeItemModel): Element | null {\r\n        return this.#dragImagesElementsMap.get(model)?.deref() ?? null;\r\n    }\r\n\r\n    selectedItems(): TreeItemModel[] {\r\n        const tree = this.getTreeElement();\r\n        if (tree) {\r\n            const {model} = this;\r\n            const selectedElements = tree.selectedItems();\r\n            return selectedElements.map(\r\n                item_i => <TreeItemModel>model.getItemByUri(item_i.dataset.uri!)\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    renderShadow(): Node {\r\n        const {model} = this;\r\n        const treeElement = element(\"e-tree\", {\r\n            attributes: {\r\n                tabindex: 0,\r\n            },\r\n            children: reactiveChildElements(\r\n                model.childItems, item => this.#renderTreeItem(item)\r\n            ),\r\n            listeners: {\r\n                dragstart: <EventListener>this.#handleDragStartEvent.bind(this),\r\n                drop: <EventListener>this.#handleDropEvent.bind(this),\r\n                contextmenu: <EventListener>this.#handleContextMenuEvent.bind(this),\r\n                keydown: <EventListener>this.#handleKeyDownEvent.bind(this)\r\n            }\r\n        });\r\n        this.#treeElement = new WeakRef(treeElement);\r\n        return Fragment(\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/main.css\"\r\n                }\r\n            }),\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/views/treeview.css\"\r\n                }\r\n            }),\r\n            treeElement,\r\n            element(\"div\", {\r\n                attributes: {\r\n                    class: \"offscreen\",\r\n                    hidden: true\r\n                },\r\n                children: reactiveChildElements(model.items,\r\n                    item => this.#renderTreeItemDragImage(item)\r\n                )\r\n            })\r\n        );\r\n    }\r\n\r\n    #renderTreeItem(item: TreeItemModel): Element {\r\n        const treeItemElement = reactiveElement(\r\n            item,\r\n            element(\"e-treeitem\", {\r\n                attributes: {\r\n                    tabindex: -1,\r\n                    label: item.label,\r\n                    type: item.type,\r\n                    draggable: \"true\"\r\n                },\r\n                dataset: {\r\n                    uri: item.uri\r\n                },\r\n                children:\r\n                    ((item.type == \"parent\") ? [\r\n                        element(\"e-treeitemgroup\", {\r\n                            attributes: {\r\n                                slot: \"group\"\r\n                            },\r\n                            children: reactiveChildElements(item.childItems,\r\n                                item => this.#renderTreeItem(item)\r\n                            )\r\n                        })\r\n                    ] : []).concat([\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"label\"\r\n                            }\r\n                        })\r\n                    ]).concat((item.type == \"parent\") ? [\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"badge\"\r\n                            }\r\n                        })\r\n                    ] : []).concat([\r\n                        element(\"e-toolbar\", {\r\n                            attributes: {\r\n                                tabindex: 0\r\n                            },\r\n                            children: [\r\n                                element(\"e-toolbaritem\", {\r\n                                    attributes: {\r\n                                        name: \"visibility\",\r\n                                        type: \"checkbox\",\r\n                                        tabindex: -1\r\n                                    },\r\n                                    listeners: {\r\n                                        trigger: () => {\r\n                                            item.visibility ?\r\n                                                item.hide() :\r\n                                                item.show();\r\n                                        }\r\n                                    }\r\n                                })\r\n                            ]\r\n                        })\r\n                    ])\r\n            }),\r\n            [\"label\", \"childCount\", \"visibility\"],\r\n            (treeitem, property, oldValue, newValue) => {\r\n                switch (property) {\r\n                    case \"label\":\r\n                        const label = treeitem.querySelector(\":scope > .label\");\r\n                        if (label) {\r\n                            label.textContent = newValue;\r\n                        }\r\n                        break;\r\n                    case \"childCount\":\r\n                        const badge = treeitem.querySelector(\":scope > .badge\");\r\n                        if (badge) {\r\n                            badge.textContent = `(${newValue})`;\r\n                        }\r\n                        break;\r\n                    case \"visibility\": {\r\n                        const toolbar = treeitem.querySelector<HTMLEToolBarElement>(\":scope > e-toolbar\");\r\n                        if (toolbar) {\r\n                            const visibilityItem = <HTMLEToolBarItemElement>toolbar.items.namedItem(\"visibility\");\r\n                            if (visibilityItem) {\r\n                                visibilityItem.title = newValue ? \"Hide\" : \"Show\";\r\n                                visibilityItem.checked = newValue;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        );\r\n        this.#treeItemElementsMap.set(item, new WeakRef(treeItemElement));\r\n        return treeItemElement;\r\n    }\r\n\r\n    #renderTreeItemDragImage(item: TreeItemModel): Element {\r\n        const dragImageElement = reactiveElement(\r\n            item,\r\n            element(\"span\", {\r\n                attributes: {\r\n                    class: \"dragimage\"\r\n                }\r\n            }),\r\n            [\"label\"],\r\n            (span, property, oldValue, newValue) => {\r\n                span.textContent = newValue;\r\n            }\r\n        );\r\n        this.#dragImagesElementsMap.set(item, new WeakRef(dragImageElement));\r\n        return dragImageElement;\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const {model} = this;\r\n        if (currentTarget instanceof HTMLETreeElement && target instanceof HTMLETreeItemElement) {\r\n            const {dataTransfer} = event;\r\n            const selectedElements = currentTarget.selectedItems();\r\n            const {length: selectedCount} = selectedElements;\r\n            if (selectedCount > 0) {\r\n                const selectedUris = \r\n                    selectedElements\r\n                    .map((element_i) =>\r\n                        element_i.dataset.uri!\r\n                    )\r\n                    .filter(\r\n                        (uri_i, _, uris) => !uris.some(\r\n                            uri_j => uri_i.startsWith(`${uri_j}/`)\r\n                        )\r\n                    );\r\n                const selectedUrisString = selectedUris.join(\"\\n\");\r\n                const lastUri = selectedUris[selectedUris.length - 1];\r\n                const lastItem = model.getItemByUri(lastUri);\r\n                if (lastItem && dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", selectedUrisString);\r\n                    const dragImage = this.getDragImageElement(lastItem);\r\n                    if (dragImage) {\r\n                        dataTransfer.setDragImage(dragImage, -16, 0);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const {model} = this;\r\n        const {sortFunction} = model;\r\n        if (currentTarget instanceof HTMLETreeElement && target instanceof HTMLETreeItemElement) {\r\n            const {dataTransfer} = event;\r\n            if (dataTransfer) {\r\n                const targetUri = target.dataset.uri!;\r\n                const targetItem = model.getItemByUri(targetUri)!;\r\n                const transferedUris = dataTransfer.getData(\"text/plain\").split(\"\\n\");\r\n                const targetIsWithin = transferedUris.some(uri_i => targetUri.startsWith(`${uri_i}/`) || uri_i == targetUri);\r\n                if (!targetIsWithin) {\r\n                    const transferedItems = <TreeItemModel[]>transferedUris.map(\r\n                        uri_i => model.getItemByUri(uri_i)\r\n                    ).filter(\r\n                        item_i => item_i !== null\r\n                    );\r\n                    //TODO: handle items with same label (replace or cancel)\r\n                    const {type: targetType, parentItem: targetParentItem} = targetItem;\r\n                    const targetList = targetType == \"parent\" ?\r\n                        targetItem.childItems :\r\n                        targetParentItem ?\r\n                        targetParentItem.childItems :\r\n                        model.childItems;\r\n                    TreeItemList.from(transferedItems).remove();\r\n                    if (sortFunction) {\r\n                        targetList.beginChanges();\r\n                        targetList.append(...transferedItems);\r\n                        targetList.sort(sortFunction);\r\n                        targetList.endChanges();\r\n                    }\r\n                    else {\r\n                        targetList.insert(target.posinset, ...transferedItems);\r\n                    }\r\n                    const newElements = transferedItems.map(\r\n                        item_i => this.getTreeItemElement(item_i)!\r\n                    );\r\n                    currentTarget.beginSelection();\r\n                    newElements.forEach(\r\n                        (element_i) => {\r\n                            element_i.selected = true;\r\n                        }\r\n                    );\r\n                    currentTarget.endSelection();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        const {clientX, clientY, currentTarget, target} = event;\r\n        const {model} = this;\r\n        if (currentTarget instanceof HTMLETreeElement && target instanceof HTMLETreeItemElement) {\r\n            const activeItem = model.getItemByUri(target.dataset.uri!)!;\r\n            const menu = element(\"e-menu\", {\r\n                attributes: {\r\n                    tabindex: -1,\r\n                    contextual: true\r\n                },\r\n                children: [\r\n                    element(\"e-menuitemgroup\", {\r\n                        attributes: {\r\n                            tabindex: -1\r\n                        },\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                attributes: {\r\n                                    tabindex: -1\r\n                                },\r\n                                children: [\r\n                                    \"Display\"\r\n                                ],\r\n                                listeners: {\r\n                                    trigger: () => {\r\n                                        TreeItemList.from(\r\n                                            this.selectedItems()\r\n                                        ).display();\r\n                                    }\r\n                                }\r\n                            }),\r\n                            element(\"e-menuitem\", {\r\n                                attributes: {\r\n                                    tabindex: -1\r\n                                },\r\n                                children: [\r\n                                    \"Delete\"\r\n                                ],\r\n                                listeners: {\r\n                                    trigger: () => {\r\n                                        TreeItemList.from(\r\n                                            this.selectedItems()\r\n                                        ).remove();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    }),\r\n                    element(\"e-menuitemgroup\", {\r\n                        attributes: {\r\n                            tabindex: -1\r\n                        },\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                attributes: {\r\n                                    tabindex: -1,\r\n                                    type: \"checkbox\"\r\n                                },\r\n                                children: [\r\n                                    activeItem.visibility ? \"Hide\" : \"Show\"\r\n                                ],\r\n                                listeners: {\r\n                                    trigger: () => {\r\n                                        const selectedItems = TreeItemList.from(\r\n                                            this.selectedItems()\r\n                                        );\r\n                                        activeItem.visibility ?\r\n                                            selectedItems.hide() :\r\n                                            selectedItems.show();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ],\r\n                listeners: {\r\n                    close: () => {\r\n                        target.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            });\r\n            document.body.append(menu);\r\n            menu.positionContextual(clientX, clientY);\r\n            menu.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        if (currentTarget instanceof HTMLETreeElement) {\r\n            switch (key) {\r\n                case \"Delete\": {\r\n                    TreeItemList.from(\r\n                        this.selectedItems()\r\n                    ).remove();\r\n                    event.preventDefault();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar TreeView: TreeViewConstructor = TreeViewBase;","import { AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEActionElement };\r\nexport { ActionType };\r\n\r\ninterface HTMLEActionElementConstructor {\r\n    readonly prototype: HTMLEActionElement;\r\n    new(): HTMLEActionElement;\r\n}\r\n\r\ninterface HTMLEActionElement extends HTMLElement {\r\n    name: string;\r\n    value: string;\r\n    checked: boolean;\r\n    type: string;\r\n    disabled: boolean;\r\n    hotkey: string;\r\n\r\n    trigger(): void;\r\n    enable(): void;\r\n    disable(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"trigger\": Event;\r\n    }\r\n}\r\n\r\ntype ActionType = \"button\" | \"checkbox\" | \"radio\" | \"select\";\r\n\r\nclass HTMLEActionElementBase extends HTMLElement implements HTMLEActionElement {\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    hotkey!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"button\"})\r\n    type!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    checked!: boolean;\r\n\r\n    trigger(): void {\r\n        if (!this.disabled) {\r\n            switch (this.type) {\r\n                case \"checkbox\":\r\n                    this.checked = !this.checked;\r\n                    break;\r\n                case \"radio\":\r\n                    this.checked = true;\r\n                    break;\r\n            }\r\n            this.dispatchEvent(new Event(\"trigger\", {\r\n                bubbles: true\r\n            }));\r\n        }\r\n    }\r\n\r\n    enable(): void {\r\n        this.disabled = false;\r\n    }\r\n\r\n    disable(): void {\r\n        this.disabled = true;\r\n    }\r\n}\r\n\r\nvar HTMLEActionElement: HTMLEActionElementConstructor = HTMLEActionElementBase;","export { Key };\r\nexport { KeyModifier };\r\nexport { HotKey };\r\nexport { MouseButton };\r\n\r\nenum Key {\r\n    A = \"a\",\r\n    B = \"b\",\r\n    C = \"c\",\r\n    D = \"d\",\r\n    E = \"e\",\r\n    F = \"f\",\r\n    G = \"g\",\r\n    H = \"h\",\r\n    I = \"i\",\r\n    J = \"j\",\r\n    K = \"k\",\r\n    L = \"l\",\r\n    M = \"m\",\r\n    O = \"o\",\r\n    P = \"p\",\r\n    Q = \"q\",\r\n    R = \"r\",\r\n    S = \"s\",\r\n    T = \"t\",\r\n    U = \"u\",\r\n    V = \"v\",\r\n    W = \"w\",\r\n    X = \"x\",\r\n    Y = \"y\",\r\n    Z = \"z\",\r\n    ENTER = \"Enter\",\r\n    BACKSPACE = \"Backspace\",\r\n    ARROW_DOWN = \"ArrowDown\",\r\n    ARROW_LEFT = \"ArrowLeft\",\r\n    ARROW_RIGHT = \"ArrowRight\",\r\n    ARROW_UP = \"ArrowUp\",\r\n    SHIFT = \"Shift\"\r\n}\r\n\r\nenum KeyModifier {\r\n    Alt = \"Alt\",\r\n    Control = \"Control\",\r\n    Shift = \"Shift\"\r\n}\r\n\r\nenum MouseButton {\r\n    LEFT = 1,\r\n    WHEEL = 2,\r\n    RIGHT = 3,\r\n    FORWARD = 4,\r\n    BACK = 5\r\n}\r\n\r\nclass HotKey {\r\n    readonly key: Key;\r\n    readonly mod1?: KeyModifier;\r\n    readonly mod2?: KeyModifier;\r\n\r\n    constructor(key: Key, mod1?: KeyModifier, mod2?: KeyModifier) {\r\n        this.key = key;\r\n        this.mod1 = mod1;\r\n        this.mod2 = mod2;\r\n    }\r\n\r\n    toString(): string {\r\n        return `${this.mod1 ? `${this.#modifierString(this.mod1)}+` : \"\"}${this.mod2 ? `${this.#modifierString(this.mod2)}+` : \"\"}${(this.key.length == 1) ? this.key.toUpperCase() : this.key}`;\r\n    }\r\n\r\n    test(event: KeyboardEvent): boolean {\r\n        return (!this.mod1 || this.#testModifier(this.mod1, event)) && (!this.mod2 || this.#testModifier(this.mod2, event)) && event.key == this.key;\r\n    }\r\n\r\n    #modifierString(mod: KeyModifier): string {\r\n        switch (mod) {\r\n            case KeyModifier.Control:\r\n                return \"Ctrl\";\r\n            default:\r\n                return mod;\r\n        }\r\n    }\r\n\r\n    #testModifier(mod: KeyModifier, event: KeyboardEvent): boolean {\r\n        switch (mod) {\r\n            case \"Alt\":\r\n                return event.altKey;\r\n            case \"Control\":\r\n                return event.ctrlKey;\r\n            case \"Shift\":\r\n                return event.shiftKey;\r\n            default:\r\n                return true;\r\n        }\r\n    }\r\n}","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEGridCellElement };\r\n\r\ninterface HTMLEGridCellElementConstructor {\r\n    readonly prototype: HTMLEGridCellElement;\r\n    new(): HTMLEGridCellElement;\r\n}\r\n\r\ninterface HTMLEGridCellElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n    headers: string;\r\n    posinset: number;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridcell\": HTMLEGridCellElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridcell\"\r\n})\r\nclass HTMLEGridCellElementBase extends HTMLElement implements HTMLEGridCellElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    headers!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridCellElement: HTMLEGridCellElementConstructor = HTMLEGridCellElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\n\r\nexport { HTMLEGridRowGroupElement };\r\n\r\ninterface HTMLEGridRowGroupElementConstructor {\r\n    readonly prototype: HTMLEGridRowGroupElement;\r\n    new(): HTMLEGridRowGroupElement;\r\n}\r\n\r\ninterface HTMLEGridRowGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrowgroup\": HTMLEGridRowGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrowgroup\"\r\n})\r\nclass HTMLEGridRowGroupElementBase extends HTMLElement implements HTMLEGridRowGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                            /*display: flex;\r\n                            flex-direction: column;*/\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowGroupElement: HTMLEGridRowGroupElementConstructor = HTMLEGridRowGroupElementBase;","import { CustomElement, AttributeProperty, QueryProperty, element } from \"../../Element\";\r\nimport { HTMLEActionElement } from \"../actions/Action\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\n\r\nexport { HTMLEMenuItemElement };\r\nexport { EMenuItem };\r\n\r\ninterface HTMLEMenuItemElementConstructor {\r\n    readonly prototype: HTMLEMenuItemElement;\r\n    new(): HTMLEMenuItemElement;\r\n}\r\n\r\ninterface HTMLEMenuItemElement extends HTMLEActionElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    active: boolean;\r\n    index: number;\r\n    expanded: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitem\": HTMLEMenuItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitem\"\r\n})\r\nclass HTMLEMenuItemElementBase extends HTMLEActionElement implements HTMLEMenuItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Number})\r\n    index!: number;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"button\", observed: true})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"icon\"\r\n                }\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"label\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"arrow\"\r\n                }\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n    \r\n    @QueryProperty({selector: \"e-menu[slot=menu]\"})\r\n    readonly menu!: HTMLEMenuElement | null;\r\n\r\n    toggle(force?: boolean): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                const expand = force ?? !expanded;\r\n                this.expanded = expand;\r\n                if (expand) {\r\n                    this.#positionMenu();\r\n                }\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {type} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (!this.expanded) {\r\n                    this.expanded = true;\r\n                    this.#positionMenu();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {type} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (this.expanded) {\r\n                    this.expanded = false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const {type} = this;\r\n            if (type == \"menu\") {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const closestMenu = this.closest(\"e-menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    const overflowX = itemRight + menuWidth - clientWidth;\r\n                    const overflowY = itemTop + menuHeight - clientHeight;\r\n                    menuStyle.setProperty(\"left\", `${\r\n                        overflowX > 0 ?\r\n                        itemLeft - menuWidth - closestMenuLeft :\r\n                        itemRight - closestMenuLeft\r\n                    }px`);\r\n                    const menuComputedStyle = window.getComputedStyle(menu);\r\n                    const {paddingTop, paddingBottom} = menuComputedStyle;\r\n                    const menuPaddingTop = parseFloat(paddingTop);\r\n                    const menuPaddingBottom = parseFloat(paddingBottom);\r\n                    menuStyle.setProperty(\"top\", `${\r\n                        overflowY > 0 ?\r\n                        itemBottom - menuHeight - closestMenuTop + menuPaddingBottom :\r\n                        itemTop - closestMenuTop - menuPaddingTop\r\n                    }px`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemElement: HTMLEMenuItemElementConstructor = HTMLEMenuItemElementBase;\r\n\r\ninterface EMenuItemConstructor {\r\n    readonly prototype: HTMLEMenuItemElement;\r\n    new(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    button(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    checkbox(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    radio(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    menu(init: {\r\n        name: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    submenu(init: {\r\n        name: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n}\r\n\r\nvar EMenuItem = <EMenuItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menu} = init;\r\n        if (menu) {\r\n            menu.slot = \"menu\";\r\n        }\r\n        return element(\"e-menuitem\", {\r\n            attributes: {\r\n                tabindex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type\r\n            },\r\n            children: menu ? [\r\n                label,\r\n                menu\r\n            ] : [\r\n                label\r\n            ],\r\n            listeners: {\r\n                trigger: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemElement.prototype,\r\n        button(init: {\r\n            name: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menu(init: {\r\n            name: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"menu\"\r\n            });\r\n        },\r\n        submenu(init: {\r\n            name: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"submenu\"\r\n            });\r\n        }\r\n    }\r\n);","import { element, CustomElement, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuItemElement, EMenuItem } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuItemGroupElement };\r\nexport { EMenuItemGroup };\r\n\r\ninterface HTMLEMenuItemGroupElementConstructor {\r\n    readonly prototype: HTMLEMenuItemGroupElement;\r\n    new(): HTMLEMenuItemGroupElement;\r\n}\r\n\r\ninterface HTMLEMenuItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    label: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitemgroup\": HTMLEMenuItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitemgroup\"\r\n})\r\nclass HTMLEMenuItemGroupElementBase extends HTMLElement implements HTMLEMenuItemGroupElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            flex-direction: column;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEMenuItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEMenuItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.index = i;\r\n        });\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\":\r\n                const label = this.shadowRoot.querySelector(\"[part=label]\");\r\n                if (label) {\r\n                    label.textContent = newValue;\r\n                }\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemGroupElement: HTMLEMenuItemGroupElementConstructor = HTMLEMenuItemGroupElementBase;\r\n\r\ninterface EMenuItemGroupConstructor {\r\n    readonly prototype: HTMLEMenuItemGroupElement;\r\n    new(init: {\r\n        name?: string;\r\n        items: HTMLEMenuItemElement[];\r\n    }): HTMLEMenuItemGroupElement;\r\n    radios(init: {name: string, items: {label: string, value: string}[]}): HTMLEMenuItemGroupElement;\r\n}\r\n\r\nvar EMenuItemGroup = <EMenuItemGroupConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string,\r\n        items: HTMLEMenuItemElement[]\r\n    }) {\r\n        const {name, items} = init;\r\n        return element(\"e-menuitemgroup\", {\r\n            attributes: {\r\n                name: name\r\n            },\r\n            children: items\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemGroupElement.prototype,\r\n        radios: (init: {\r\n            name: string,\r\n            items: {\r\n                label: string,\r\n                value: string\r\n            }[]\r\n        }) => {\r\n            const {name, items} = init;\r\n            return element(\"e-menuitemgroup\", {\r\n                attributes: {\r\n                    name: name\r\n                },\r\n                children: items.map(\r\n                    ({label, value}) => new EMenuItem({name, label, type: \"radio\", value})\r\n                )\r\n            });\r\n        }\r\n    }\r\n);","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuElement };\r\nexport { EMenu };\r\n\r\ninterface HTMLEMenuElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    readonly items: HTMLCollectionOf<HTMLEMenuItemElement>;\r\n    name: string;\r\n    contextual: boolean;\r\n    positionContextual(x: number, y: number): void;\r\n}\r\n\r\ninterface HTMLEMenuElementConstructor {\r\n    readonly prototype: HTMLEMenuElement;\r\n    new(): HTMLEMenuElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menu\": HTMLEMenuElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar toggleTimeouts: WeakMap<HTMLEMenuItemElement, {clear(): void;}>;\r\n\r\n@CustomElement({\r\n    name: \"e-menu\"\r\n})\r\nclass HTMLEMenuElementBase extends HTMLElement implements HTMLEMenuElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEMenuItemElement>;\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        return this.querySelector<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem[active]\"\r\n        );\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    contextual!: boolean;\r\n\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        toggleTimeouts = new WeakMap();\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.items = this.getElementsByTagName(\"e-menuitem\");\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"mouseout\", this.#handleMouseOutEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n    }\r\n\r\n    positionContextual(x: number, y: number): void {\r\n        const {style} = this;\r\n        const {width: menuWidth, height: menuHeight} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        const left = x + scrollX;\r\n        const top = y + scrollY;\r\n        const {clientWidth, clientHeight} = document.body;\r\n        const overflowX = left + menuWidth - clientWidth;\r\n        const overflowY = top + menuHeight - clientHeight;\r\n        style.setProperty(\"left\", `${overflowX > 0 ? left - menuWidth : left}px`);\r\n        style.setProperty(\"top\", `${overflowY > 0 ? top - menuHeight : top}px`);\r\n    }\r\n\r\n    #collapseSubmenus(): void {\r\n        this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem[expanded]\"\r\n        )\r\n        .forEach((item_i) => {\r\n            item_i.collapse();\r\n        });\r\n    }\r\n\r\n    #isClosestMenu(target: Element): boolean {\r\n        return target.closest(\":is(e-menu)\") == this;\r\n    }\r\n\r\n    #nearestItem(target: Element): HTMLEMenuItemElement | null {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextNode();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        return menu instanceof HTMLEMenuElementBase ?\r\n            menu.#firstItem() :\r\n            null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        const {activeItem} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu) {\r\n                target.trigger();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem) {\r\n                this.#setActiveItem(nearestItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const {contextual} = this;\r\n            if (contextual) {\r\n                try {\r\n                    this.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const {activeItem} = this;\r\n                if (activeItem?.expanded) {\r\n                    activeItem.collapse();\r\n                }\r\n                this.#setActiveItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    async #setItemTimeout(item: HTMLEMenuItemElement, delay?: number): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => {\r\n                resolve(void 0);\r\n            }, delay ?? 0);\r\n            toggleTimeouts.set(item, {\r\n                clear: () => {\r\n                    clearTimeout(timeout);\r\n                    reject();\r\n                }\r\n            });\r\n        }).then(() => {\r\n            toggleTimeouts.delete(item);\r\n        });\r\n    }\r\n\r\n    #clearItemTimeout(item: HTMLEMenuItemElement): void {\r\n        const timeout = toggleTimeouts.get(item);\r\n        if (typeof timeout !== \"undefined\") {\r\n            toggleTimeouts.delete(item);\r\n            timeout.clear();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.#firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem() :\r\n                    this.#firstItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                firstItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                lastItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            activeItem.expand();\r\n                            if (activeItem.expanded) {\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                            }\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            activeItem.trigger();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            if (!activeItem.expanded) {\r\n                                activeItem.expand();\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                                event.stopPropagation();\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOutEvent(event: MouseEvent): void {\r\n        const {target, relatedTarget} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem !== null) {\r\n                if (nearestItem.type == \"submenu\" &&\r\n                    !nearestItem.expanded) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLEMenuElement\r\n                ) == this;\r\n                if (isTargetClosestMenu) {\r\n                    const {activeItem} = this;\r\n                    if (activeItem?.type == \"submenu\" &&\r\n                        activeItem.expanded) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, 400)\r\n                            .then(() => {\r\n                                activeItem.collapse();\r\n                            })\r\n                            .catch(() => void 0);\r\n                    }\r\n                    const {clientX, clientY} = event;\r\n                    const {left, right, top, bottom} = this.getBoundingClientRect();\r\n                    const intersectsWithMouse = !(\r\n                        left > clientX || right < clientX || top > clientY || bottom < clientY\r\n                    );\r\n                    const containsRelatedTarget = this.contains(<Node>relatedTarget);\r\n                    if (intersectsWithMouse && containsRelatedTarget) {\r\n                        if (relatedTarget instanceof HTMLEMenuElement && relatedTarget !== this) {\r\n                            relatedTarget.focus({preventScroll: true});\r\n                        }\r\n                        else {\r\n                            this.focus({preventScroll: true});\r\n                            this.#setActiveItem(null);\r\n                        }\r\n                    }\r\n                    if (!intersectsWithMouse) {\r\n                        this.focus({preventScroll: true});\r\n                        this.#setActiveItem(null);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem !== null) {\r\n                if (nearestItem.type == \"submenu\" && nearestItem.expanded) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLEMenuElement\r\n                ) == this;\r\n                if (isTargetClosestMenu) {\r\n                    const {activeItem} = this;\r\n                    if (activeItem?.type == \"submenu\" &&\r\n                        activeItem.expanded && \r\n                        !activeItem.contains(<Node>target)) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, 400)\r\n                            .then(() => {\r\n                                activeItem.collapse();\r\n                            })\r\n                            .catch(() => void 0);\r\n                    }\r\n                    this.#setActiveItem(nearestItem);\r\n                    nearestItem.focus({preventScroll: true});\r\n                    if (nearestItem.type == \"submenu\") {\r\n                        if (!nearestItem.expanded) {\r\n                            this.#clearItemTimeout(nearestItem);\r\n                            this.#setItemTimeout(nearestItem, 200)\r\n                                .then(() => {\r\n                                    const {activeItem} = this;\r\n                                    this.#collapseSubmenus();\r\n                                    if (activeItem) {\r\n                                        this.#clearItemTimeout(activeItem);\r\n                                        activeItem.expand();\r\n                                        activeItem.menu?.focus({preventScroll: true});\r\n                                    }\r\n                                })\r\n                                .catch(() => void 0);\r\n                        }\r\n                        else {\r\n                            nearestItem.menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleTriggerEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {contextual} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu) {\r\n                const {type, name, value} = target;\r\n                if (type == \"radio\") {\r\n                    this.querySelectorAll<HTMLEMenuItemElement>(\r\n                        `:is(:scope, :scope > e-menuitemgroup) > e-menuitem[type=radio][name=${name}]`\r\n                    )\r\n                    .forEach((radio_i) => {\r\n                        radio_i.checked = radio_i.value == value;\r\n                    });\r\n                }\r\n            }\r\n            if (contextual) {\r\n                try {\r\n                    this.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuElement: HTMLEMenuElementConstructor = HTMLEMenuElementBase;\r\n\r\ninterface EMenuConstructor {\r\n    readonly prototype: HTMLEMenuElement;\r\n    new(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }): HTMLEMenuElement;\r\n}\r\n\r\nvar EMenu = <EMenuConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }) {\r\n        const {name, children} = init;\r\n        return element(\"e-menu\", {\r\n            attributes: {\r\n                name: name,\r\n                tabindex: -1,\r\n            },\r\n            children: children\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuElement.prototype,\r\n    }\r\n);","import { AttributeProperty, CustomElement, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\n\r\nexport { HTMLEGridRowElement };\r\n\r\ninterface HTMLEGridRowElementConstructor {\r\n    readonly prototype: HTMLEGridRowElement;\r\n    new(): HTMLEGridRowElement;\r\n}\r\n\r\ninterface HTMLEGridRowElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    active: boolean;\r\n    selected: boolean;\r\n    posinset: number;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrow\": HTMLEGridRowElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrow\"\r\n})\r\nclass HTMLEGridRowElementBase extends HTMLElement implements HTMLEGridRowElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    #menu: HTMLEMenuElement | null;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row;\r\n                        }\r\n\r\n                        :host([droptarget]) {\r\n                            background-color: gainsboro;\r\n                        }\r\n                        \r\n                        :host(:hover) {\r\n                            background-color: rgba(135, 206, 250, 0.2);\r\n                        }\r\n\r\n                        :host([active]) {\r\n                            outline: 1px solid rgb(135, 206, 250);\r\n                            outline-offset: -1px;\r\n                        }\r\n\r\n                        :host([selected]) {\r\n                            background-color: rgba(135, 206, 250, 0.4);\r\n                            outline: 1px solid rgb(135, 206, 250);\r\n                            outline-offset: -1px;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\"),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#menu = null;\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"menu\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#menu = element instanceof HTMLEMenuElement ? element : null;\r\n                break;\r\n            }\r\n            default: {\r\n                const assignedCells = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n                    .assignedElements()\r\n                    .filter(\r\n                        element_i => element_i instanceof HTMLEGridCellElement\r\n                    );\r\n                assignedCells.forEach((cell_i, i) => {\r\n                    cell_i.posinset = i;\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowElement: HTMLEGridRowElementConstructor = HTMLEGridRowElementBase;","import { HTMLEGridElement } from \"./Grid\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\n\r\nexport { HTMLEGridCellCollection };\r\n\r\ninterface HTMLEGridCellCollectionConstructor {\r\n    readonly prototype: HTMLEGridCellCollection;\r\n    new(root: HTMLElement): HTMLEGridCellCollection;\r\n}\r\n\r\ninterface HTMLEGridCellCollection {\r\n    length: number;\r\n    item(index: number): HTMLEGridCellElement | null;\r\n    namedItem(name: string): HTMLEGridCellElement | null;\r\n    values(): IterableIterator<HTMLEGridCellElement>;\r\n}\r\n\r\nclass HTMLEGridCellCollectionBase implements HTMLEGridCellCollection {\r\n    #walker: TreeWalker;\r\n\r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridCellElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEGridCellElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEGridCellElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEGridCellElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEGridCellElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEGridCellElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEGridCellElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEGridCellElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEGridCellElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridCellCollection: HTMLEGridCellCollectionConstructor =  HTMLEGridCellCollectionBase;","import { HTMLEGridElement } from \"./Grid\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\n\r\nexport { HTMLEGridRowCollection };\r\n\r\ninterface HTMLEGridRowCollectionConstructor {\r\n    readonly prototype: HTMLEGridRowCollection;\r\n    new(root: HTMLElement): HTMLEGridRowCollection;\r\n}\r\n\r\ninterface HTMLEGridRowCollection {\r\n    length: number;\r\n    item(index: number): HTMLEGridRowElement | null;\r\n    namedItem(name: string): HTMLEGridRowElement | null;\r\n    values(): IterableIterator<HTMLEGridRowElement>;\r\n}\r\n\r\nclass HTMLEGridRowCollectionBase implements HTMLEGridRowCollection {\r\n    #walker: TreeWalker;\r\n    \r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEGridRowElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEGridRowElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEGridRowElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEGridRowElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEGridRowElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEGridRowElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEGridRowElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEGridRowElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowCollection: HTMLEGridRowCollectionConstructor =  HTMLEGridRowCollectionBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\n\r\nexport { HTMLEGridBodyElement };\r\n\r\ninterface HTMLEGridBodyElementConstructor {\r\n    readonly prototype: HTMLEGridBodyElement;\r\n    new(): HTMLEGridBodyElement;\r\n}\r\n\r\ninterface HTMLEGridBodyElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridbody\": HTMLEGridBodyElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridbody\"\r\n})\r\nclass HTMLEGridBodyElementBase extends HTMLElement implements HTMLEGridBodyElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridBodyElement: HTMLEGridBodyElementConstructor = HTMLEGridBodyElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\n\r\nexport { HTMLEGridHeadElement };\r\n\r\ninterface HTMLEGridHeadElementConstructor {\r\n    readonly prototype: HTMLEGridHeadElement;\r\n    new(): HTMLEGridHeadElement;\r\n}\r\n\r\ninterface HTMLEGridHeadElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridhead\": HTMLEGridHeadElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridhead\"\r\n})\r\nclass HTMLEGridHeadElementBase extends HTMLElement implements HTMLEGridHeadElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                        }\r\n                    `\r\n                    ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridHeadElement: HTMLEGridHeadElementConstructor = HTMLEGridHeadElementBase;","import { CustomElement, AttributeProperty, trimMultilineIndent, Stylesheet, element } from \"../../Element\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridHeadElement } from \"./GridHead\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\n\r\nexport { HTMLEGridElement };\r\n\r\ninterface HTMLEGridElementConstructor {\r\n    readonly prototype: HTMLEGridElement;\r\n    new(): HTMLEGridElement;\r\n}\r\n\r\ninterface HTMLEGridElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly body: HTMLEGridBodyElement | null;\r\n    readonly head: HTMLEGridHeadElement | null\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n    readonly activeCell: HTMLEGridCellElement | null;\r\n    readonly activeCellIndex: number;\r\n    readonly activeRow: HTMLEGridRowElement | null;\r\n    readonly activeRowIndex: number;\r\n    selectby: \"cell\" | \"row\";\r\n    name: string;\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    clearSelection(): void;\r\n    selectedCells(): HTMLEGridCellElement[];\r\n    selectedRows(): HTMLEGridRowElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-grid\": HTMLEGridElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-grid\"\r\n})\r\nclass HTMLEGridElementBase extends HTMLElement implements HTMLEGridElement {\r\n\r\n    static {\r\n    }\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    get activeCellIndex(): number {\r\n        return this.#activeCellIndex;\r\n    }\r\n\r\n    get activeCell(): HTMLEGridCellElement | null {\r\n        return this.cells.item(this.#activeCellIndex) ?? null;\r\n    }\r\n\r\n    get activeRowIndex(): number {\r\n        return this.#activeRowIndex;\r\n    }\r\n\r\n    get activeRow(): HTMLEGridRowElement | null {\r\n        return this.rows.item(this.#activeRowIndex) ?? null;\r\n    }\r\n\r\n    get body(): HTMLEGridBodyElement | null {\r\n        return <HTMLEGridBodyElement>Array.from(this.childNodes).find(\r\n            node_i => node_i instanceof HTMLEGridBodyElement\r\n        ) ?? null;\r\n    }\r\n\r\n    get head(): HTMLEGridHeadElement | null {\r\n        return <HTMLEGridHeadElement>Array.from(this.childNodes).find(\r\n            node_i => node_i instanceof HTMLEGridHeadElement\r\n        ) ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"cell\"})\r\n    selectby!: \"cell\" | \"row\";\r\n\r\n    #activeCellIndex: number;\r\n    #activeRowIndex: number;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #cellsWalker: TreeWalker;\r\n    #rowsWalker: TreeWalker;\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#cellsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#cellsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#rowsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#rowsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeCellIndex = -1;\r\n        this.#activeRowIndex = -1;\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.#clearCellsSelection();\r\n        this.#clearRowsSelection();\r\n    }\r\n\r\n    selectedCells(): HTMLEGridCellElement[] {\r\n        /*const selectedCells = <HTMLEGridCellElement[]>[];\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cellsWalker.root;\r\n        let cell = <HTMLEGridCellElement | null>cellsWalker.firstChild();\r\n        while (cell !== null) {\r\n            if (cell.selected) {\r\n                selectedCells.push(cell);\r\n            }\r\n            cell = <HTMLEGridCellElement | null>cellsWalker.nextNode();\r\n        }\r\n        return selectedCells;*/\r\n        return Array.from(this.querySelectorAll(\"e-gridcell[selected]\"));\r\n    }\r\n\r\n    selectedRows(): HTMLEGridRowElement[] {\r\n        /*const selectedRows = <HTMLEGridRowElement[]>[];\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = rowsWalker.root;\r\n        let row = <HTMLEGridRowElement | null>rowsWalker.firstChild();\r\n        while (row !== null) {\r\n            if (row.selected) {\r\n                selectedRows.push(row);\r\n            }\r\n            row = <HTMLEGridRowElement | null>rowsWalker.nextNode();\r\n        }\r\n        return selectedRows;*/\r\n        return Array.from(this.querySelectorAll(\"e-gridrow[selected]\"));\r\n    }\r\n\r\n    #cellsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridCellElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #rowsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridRowElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getCellsRange(from: HTMLEGridCellElement, to: HTMLEGridCellElement): HTMLEGridCellElement[] {\r\n        const cells = Array.from(this.cells.values());\r\n        const fromIndex = cells.indexOf(from);\r\n        const toIndex = cells.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return cells.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #getRowsRange(from: HTMLEGridRowElement, to: HTMLEGridRowElement): HTMLEGridRowElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleRow = this.#nextRow(from);\r\n            while (nextVisibleRow && nextVisibleRow !== to) {\r\n                range.push(nextVisibleRow);\r\n                nextVisibleRow = this.#nextRow(nextVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleRow = this.#previousRow(from);\r\n            while (previousVisibleRow && previousVisibleRow !== to) {\r\n                range.push(previousVisibleRow);\r\n                previousVisibleRow = this.#previousRow(previousVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setCellsSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((selectedCell_i) => {\r\n            if (!cells.includes(selectedCell_i)) {\r\n                selectedCell_i.selected = false;\r\n            }\r\n        });\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setRowsSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((selectedRow_i) => {\r\n            if (!rows.includes(selectedRow_i)) {\r\n                selectedRow_i.selected = false;\r\n            }\r\n        });\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addCellsToSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addRowsToSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeCellsFromSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        cells.forEach((cell_i) => {\r\n            if (selectedCells.includes(cell_i)) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeRowsFromSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        rows.forEach((row_i) => {\r\n            if (selectedRows.includes(row_i)) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearCellsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((cell_i) => {\r\n            if (cell_i.selected) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearRowsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((row_i) => {\r\n            if (row_i.selected) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveCell(cell: HTMLEGridCellElement | null): void {\r\n        const {activeCell, cells} = this;\r\n        if (activeCell !== null && activeCell !== cell) {\r\n            activeCell.active = false;\r\n            activeCell.tabIndex = -1;\r\n        }\r\n        else if (cell !== null) {\r\n            const cellsWalker = this.#cellsWalker;\r\n            cellsWalker.currentNode = cell;\r\n            cell.active = true;\r\n            cell.tabIndex = 0;\r\n            const closestRow = this.#closestRow(cell);\r\n            if (closestRow) {\r\n                this.#setActiveRow(closestRow);\r\n            }\r\n            this.#activeCellIndex = Array.from(cells.values()).indexOf(cell);\r\n        }\r\n        else {\r\n            this.#activeCellIndex = -1;\r\n        }\r\n    }\r\n\r\n    #setActiveRow(row: HTMLEGridRowElement | null): void {\r\n        const {activeRow, rows} = this;\r\n        if (activeRow !== null && activeRow !== row) {\r\n            activeRow.active = false;\r\n            activeRow.tabIndex = -1;\r\n        }\r\n        else if (row !== null) {\r\n            const rowsWalker = this.#rowsWalker;\r\n            rowsWalker.currentNode = row;\r\n            row.active = true;\r\n            row.tabIndex = 0;\r\n            this.#activeRowIndex = Array.from(rows.values()).indexOf(row);\r\n        }\r\n        else {\r\n            this.#activeRowIndex = -1;\r\n        }\r\n    }\r\n\r\n    #firstCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.firstChild();\r\n    }\r\n\r\n    #lastCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.lastChild();\r\n    }\r\n\r\n    #previousCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.previousNode();\r\n    }\r\n\r\n    #nextCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.nextNode();\r\n    }\r\n\r\n    #closestRow(cell: HTMLEGridCellElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = cell;\r\n        return <HTMLEGridRowElement | null>rowsWalker.parentNode();\r\n    }\r\n\r\n    #firstRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.firstChild();\r\n    }\r\n\r\n    #lastRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.lastChild();\r\n    }\r\n\r\n    #previousRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.previousNode();\r\n    }\r\n\r\n    #nextRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.nextNode();\r\n    }\r\n\r\n    #topCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const {cells: closestRowCells} = closestRow;\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const previousRow = this.#previousRow(closestRow);\r\n            if (previousRow) {\r\n                const {cells: previousRowCells} = previousRow;\r\n                return previousRowCells.item(\r\n                    Math.min(cellIndex, previousRowCells.length)\r\n                );\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #bottomCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const {cells: closestRowCells} = closestRow;\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const nextRow = this.#nextRow(closestRow);\r\n            if (nextRow) {\r\n                const {cells: nextRowCells} = nextRow;\r\n                return nextRowCells.item(\r\n                    Math.min(cellIndex, nextRowCells.length)\r\n                );\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent) {\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const composedPath = event.composedPath();\r\n                const targetCell = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridCellElement\r\n                ) : null;\r\n                if (targetCell instanceof HTMLEGridCellElement) {\r\n                    const selectedCells = this.selectedCells();\r\n                    if (!selectedCells.includes(targetCell)) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    targetCell.focus({preventScroll: true});\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const composedPath = event.composedPath();\r\n                const targetRow = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridRowElement\r\n                ) : null;\r\n                if (targetRow instanceof HTMLEGridRowElement) {\r\n                    const selectedRows = this.selectedRows();\r\n                    if (!selectedRows.includes(targetRow)) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    targetRow.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {ctrlKey, shiftKey} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const composedPath = event.composedPath();\r\n                const targetCell = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridCellElement\r\n                ) : null;\r\n                const selectedCells = this.selectedCells();\r\n                if (targetCell instanceof HTMLEGridCellElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetCell.selected ?\r\n                            this.#addCellsToSelection(targetCell) :\r\n                            this.#removeCellsFromSelection(targetCell);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedCell = selectedCells[selectedCells.length - 1];\r\n                        if (lastSelectedCell) {\r\n                            const range = this.#getCellsRange(\r\n                                lastSelectedCell,\r\n                                targetCell\r\n                            );\r\n                            if (range) {\r\n                                selectedCells.includes(targetCell) ?\r\n                                    this.#removeCellsFromSelection(...range) :\r\n                                    this.#addCellsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setCellsSelection(targetCell);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const selectedRows = this.selectedRows();\r\n                const composedPath = event.composedPath();\r\n                const targetRow = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridRowElement\r\n                ) : null;\r\n                if (targetRow instanceof HTMLEGridRowElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetRow.selected ?\r\n                            this.#addRowsToSelection(targetRow) :\r\n                            this.#removeRowsFromSelection(targetRow);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedRow = selectedRows[selectedRows.length - 1];\r\n                        if (lastSelectedRow) {\r\n                            const range = this.#getRowsRange(\r\n                                lastSelectedRow,\r\n                                targetRow\r\n                            );\r\n                            if (range) {\r\n                                selectedRows.includes(targetRow) ?\r\n                                    this.#removeRowsFromSelection(...range) :\r\n                                    this.#addRowsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setRowsSelection(targetRow);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {selectby, activeCell, activeRow} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    switch (selectby) {\r\n                        case \"cell\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const firstCell = firstRow ? this.#firstCell(firstRow) : null;\r\n                            const lastRow = this.#lastRow();\r\n                            const lastCell = lastRow ? this.#lastCell(lastRow) : null;\r\n                            if (firstCell && lastCell) {\r\n                                const range = this.#getCellsRange(firstCell, lastCell);\r\n                                if (range) {\r\n                                    this.#setCellsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"row\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const lastRow = this.#lastRow();\r\n                            if (firstRow && lastRow) {\r\n                                const range = this.#getRowsRange(firstRow, lastRow);\r\n                                if (range) {\r\n                                    this.#setRowsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const previousCell = this.#previousCell(activeCell);\r\n                        if (previousCell) {\r\n                            previousCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousCell.selected ?\r\n                                    this.#removeCellsFromSelection(previousCell) :\r\n                                    this.#addCellsToSelection(previousCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const nextCell = this.#nextCell(activeCell);\r\n                        if (nextCell) {\r\n                            nextCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextCell.selected ?\r\n                                    this.#removeCellsFromSelection(nextCell) :\r\n                                    this.#addCellsToSelection(nextCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const firstRow = activeRow ?? this.#firstRow();\r\n                        const topCell = activeCell ?\r\n                            this.#topCell(activeCell) :\r\n                            firstRow ?\r\n                            this.#firstCell(firstRow) :\r\n                            null;\r\n                        if (topCell) {\r\n                            topCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                topCell.selected ?\r\n                                    this.#removeCellsFromSelection(topCell) :\r\n                                    this.#addCellsToSelection(topCell);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const previousRow = activeRow ?\r\n                            this.#previousRow(activeRow) :\r\n                            this.#firstRow();\r\n                        if (previousRow) {\r\n                            previousRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousRow.selected ?\r\n                                    this.#removeRowsFromSelection(previousRow) :\r\n                                    this.#addRowsToSelection(previousRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const lastRow = activeRow ?? this.#lastRow();\r\n                        const bottomCell = activeCell ?\r\n                            this.#bottomCell(activeCell) :\r\n                            lastRow ?\r\n                            this.#lastCell(lastRow) :\r\n                            null;\r\n                            if (bottomCell) {\r\n                                bottomCell.focus({preventScroll: true});\r\n                                const {shiftKey} = event;\r\n                                if (shiftKey) {\r\n                                    bottomCell.selected ?\r\n                                        this.#removeCellsFromSelection(bottomCell) :\r\n                                        this.#addCellsToSelection(bottomCell);\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"row\": {\r\n                        const nextRow = activeRow ?\r\n                            this.#nextRow(activeRow) :\r\n                            this.#lastRow();\r\n                        if (nextRow) {\r\n                            nextRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextRow.selected ?\r\n                                    this.#removeRowsFromSelection(nextRow) :\r\n                                    this.#addRowsToSelection(nextRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const firstCell = this.#firstCell(activeRow);\r\n                            if (firstCell) {\r\n                                firstCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const firstRow = this.#firstRow();\r\n                        if (firstRow) {\r\n                            firstRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const lastCell = this.#lastCell(activeRow);\r\n                            if (lastCell) {\r\n                                lastCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const lastRow = this.#lastRow();\r\n                        if (lastRow) {\r\n                            lastRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeCell) {\r\n                            this.#setCellsSelection(activeCell);\r\n                            activeCell.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        if (activeRow) {\r\n                            this.#setRowsSelection(activeRow);\r\n                            activeRow.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        this.#clearCellsSelection();\r\n                        this.#setActiveCell(null);\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        this.#clearRowsSelection();\r\n                        this.#setActiveRow(null);\r\n                        break;\r\n                    }\r\n                }\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const {activeCell} = this;\r\n                if (activeCell && relatedTarget !== activeCell) {\r\n                    activeCell.focus();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const {activeRow} = this;\r\n                if (activeRow && relatedTarget !== activeRow) {\r\n                    activeRow.focus();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                if (target instanceof HTMLEGridCellElement) {\r\n                    this.#setActiveCell(target);\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                if (target instanceof HTMLEGridRowElement) {\r\n                    this.#setActiveRow(target);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedRows = <HTMLEGridRowElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridRowElement\r\n            );\r\n            assignedRows.forEach((row_i, i) => {\r\n                row_i.posinset = i;\r\n            });\r\n    }\r\n}\r\n\r\nvar HTMLEGridElement: HTMLEGridElementConstructor = HTMLEGridElementBase;","import { NodeCollection } from \"../../../observers/NodeCollection\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemCollection } from \"./MenuItemCollection\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuBarElement };\r\n\r\ninterface HTMLEMenuBarElementConstructor {\r\n    readonly prototype: HTMLEMenuBarElement;\r\n    new(): HTMLEMenuBarElement;\r\n}\r\n\r\ninterface HTMLEMenuBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEMenuItemElement>;\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    expanded: boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menubar\": HTMLEMenuBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menubar\"\r\n})\r\nclass HTMLEMenuBarElementBase extends HTMLElement implements HTMLEMenuBarElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEMenuItemElement>;\r\n\r\n    #activeIndex: number;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        //this.items = new NodeCollection<HTMLEMenuItemElement>(this, this.#walkerNodeFilter.bind(this));\r\n        this.items = this.getElementsByTagName(\"e-menuitem\");\r\n        this.#activeIndex = -1;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        return this.items.item(this.#activeIndex) ?? null;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLEMenuItemElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        const {activeItem, expanded, items} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.collapse();\r\n            activeItem.active = false;\r\n        }\r\n        if (item !== null) {\r\n            if (expanded) {\r\n                item.expand();\r\n            }\r\n            item.active = true;\r\n            this.#activeIndex = Array.from(items).indexOf(item);\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    get #items(): HTMLEMenuItemElement[] {\r\n        return Array.from(\r\n            this.querySelectorAll(\":is(:scope, :scope > e-menuitemgroup) > e-menuitem\")\r\n        );\r\n    }\r\n\r\n    #isClosestMenu(target: Element): boolean {\r\n        return target.closest(\":is(e-menubar, e-menu)\") == this;\r\n    }\r\n\r\n    #nearestItem(target: Element): HTMLEMenuItemElement | null {\r\n        return this.#items.find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n    \r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof Element) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            this.#setActiveItem(nearestItem);\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const {activeItem} = this;\r\n            if (activeItem?.expanded) {\r\n                activeItem.collapse();\r\n            }\r\n            this.#setActiveItem(null);\r\n            this.expanded = false;\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {expanded, activeItem} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu && target !== activeItem && expanded) {\r\n                const {menu} = target;\r\n                if (menu) {\r\n                    target.expand();\r\n                    menu.focus({preventScroll: true});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {expanded, activeItem} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu) {\r\n                const isExpanded = !expanded;\r\n                this.expanded = isExpanded;\r\n                if (isExpanded) {\r\n                    if (activeItem && !activeItem.expanded) {\r\n                        activeItem.expand();\r\n                    }\r\n                    const {menu} = target;\r\n                    menu?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true})\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded} = this;\r\n        let {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.#firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem() : \r\n                    this.#lastItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.expanded = !expanded;\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.expanded = false;\r\n                    if (activeItem) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleTriggerEvent(): void {\r\n        const {activeItem} = this;\r\n        if (activeItem?.expanded) {\r\n            activeItem.collapse();\r\n        }\r\n        this.expanded = false;\r\n        this.focus({preventScroll: true});\r\n    }\r\n}\r\n\r\nvar HTMLEMenuBarElement: HTMLEMenuBarElementConstructor = HTMLEMenuBarElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\n\r\nexport { HTMLEMenuButtonElement };\r\nexport { EMenuButton };\r\n\r\ninterface HTMLEMenuButtonElementConstructor {\r\n    readonly prototype: HTMLEMenuButtonElement;\r\n    new(): HTMLEMenuButtonElement;\r\n}\r\n\r\ninterface HTMLEMenuButtonElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    disabled: boolean;\r\n    expanded: boolean;\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-menubutton\"\r\n})\r\nclass HTMLEMenuButtonElementBase extends HTMLElement implements HTMLEMenuButtonElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    #menu: HTMLEMenuElement | null;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#menu = null;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"icon\"\r\n                        }\r\n                    }),\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"label\"\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const expand = force ?? !this.expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n\r\n    expand(): void {\r\n        if (!this.expanded) {\r\n            this.expanded = true;\r\n            this.#positionMenu();\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        if (this.expanded) {\r\n            this.expanded = false;\r\n        }\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const overflowX = itemRight + menuWidth - clientWidth;\r\n            const overflowY = itemTop + menuHeight - clientHeight;\r\n            menuStyle.setProperty(\"left\", `${\r\n                overflowX > 0 ?\r\n                scrollX + itemRight - menuWidth :\r\n                scrollX + itemLeft\r\n            }px`);\r\n            menuStyle.setProperty(\"top\", `${\r\n                overflowY > 0 ?\r\n                scrollY + itemTop - menuHeight :\r\n                scrollY + itemBottom\r\n            }px`);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target == this) {\r\n            this.toggle();\r\n            const {expanded} = this;\r\n            if (expanded) {\r\n                this.menu?.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded} = this;\r\n        switch (key) {\r\n            case \"ArrowDown\":\r\n            case \"Enter\":\r\n                if (!expanded) {\r\n                    this.expand();\r\n                    this.menu?.items.item(0)?.focus({preventScroll: true});\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            case \"Escape\":\r\n                if (expanded) {\r\n                    this.collapse();\r\n                    this.focus({preventScroll: true});\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n        this.#menu = (element instanceof HTMLEMenuElement) ? element : null;\r\n    }\r\n\r\n    #handleTriggerEvent(): void {\r\n        this.collapse();\r\n        this.focus({preventScroll: true});\r\n    }\r\n}\r\n\r\nvar HTMLEMenuButtonElement: HTMLEMenuButtonElementConstructor = HTMLEMenuButtonElementBase;\r\n\r\ninterface EMenuButtonConstructor {\r\n    readonly prototype: HTMLEMenuButtonElement;\r\n    new(init: {\r\n        menu: HTMLEMenuElement\r\n    }): HTMLEMenuButtonElement;\r\n}\r\n\r\nvar EMenuButton = <EMenuButtonConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        menu: HTMLEMenuElement\r\n    }) {\r\n        const {menu} = init;\r\n        menu.slot = \"menu\";\r\n        return element(\"e-menubutton\", {\r\n            attributes: {\r\n                tabindex: -1\r\n            },\r\n            children: [menu]\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuButtonElement.prototype,\r\n    }\r\n);","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionElement };\r\n\r\ninterface HTMLEOptionElementConstructor {\r\n    readonly prototype: HTMLEOptionElement;\r\n    new(): HTMLEOptionElement;\r\n}\r\n\r\ninterface HTMLEOptionElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    active: boolean;\r\n    value: string;\r\n    label: string;\r\n    description: string;\r\n    disabled: boolean;\r\n    selected: boolean;\r\n    default: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-option\": HTMLEOptionElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-option\"\r\n})\r\nclass HTMLEOptionElementBase extends HTMLElement implements HTMLEOptionElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n    \r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n        \r\n    @AttributeProperty({type: String})\r\n    description!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    default!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            user-select: none;\r\n                            white-space: nowrap;\r\n                            padding: 2px 12px;\r\n                        }\r\n                        \r\n                        :host([active]) {\r\n                            color: black;\r\n                            background-color: lightgray;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            color: lightgray;\r\n                        }\r\n\r\n                        :host::before {\r\n                            display: flex;\r\n                            content: \"\";\r\n                            width: 18px;\r\n                            height: 18px;\r\n                            margin-right: 6px;\r\n\r\n                            mask-size: 18px 18px;\r\n                            -webkit-mask-size: 18px 18px;\r\n                            background-color: var(--icon-color, none);\r\n                            -webkit-mask-image: var(--icon-image, none);\r\n                            mask-image: var(--icon-image, none);\r\n                        }\r\n\r\n                        [part=\"label\"] {\r\n                            flex: auto;\r\n                            text-align: left;\r\n                        }\r\n\r\n                        :host([default])::after {\r\n                            display: inline-block;\r\n                            content: \"(default)\";\r\n                            margin-left: 24px;\r\n                            text-align: right;\r\n                        }\r\n\r\n                        [part=\"content\"] {\r\n                            flex: auto;\r\n                            display: flex;\r\n                            overflow: hidden;\r\n                            pointer-events: none;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"label\"\r\n                        }\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector<HTMLElement>(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEOptionElement: HTMLEOptionElementConstructor = HTMLEOptionElementBase;","import { CustomElement, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionGroupElement };\r\n\r\ninterface HTMLEOptionGroupElementConstructor {\r\n    readonly prototype: HTMLEOptionGroupElement;\r\n    new(): HTMLEOptionGroupElement;\r\n}\r\n\r\ninterface HTMLEOptionGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-optiongroup\": HTMLEOptionGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-optiongroup\"\r\n})\r\nclass HTMLEOptionGroupElementBase extends HTMLElement implements HTMLEOptionGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n}\r\n\r\nvar HTMLEOptionGroupElement: HTMLEOptionGroupElementConstructor = HTMLEOptionGroupElementBase;","import { HTMLEOptionElement } from \"./Option\";\r\nimport { HTMLEOptionGroupElement } from \"./OptionGroup\";\r\nimport { HTMLESelectElement } from \"./Select\";\r\n\r\nexport { HTMLEOptionCollection };\r\n\r\ninterface HTMLEOptionCollectionConstructor {\r\n    readonly prototype: HTMLEOptionCollection;\r\n    new(root: HTMLESelectElement): HTMLEOptionCollection;\r\n}\r\n\r\ninterface HTMLEOptionCollection {\r\n    length: number;\r\n    item(index: number): HTMLEOptionElement | null;\r\n    namedItem(name: string): HTMLEOptionElement | null;\r\n    values(): IterableIterator<HTMLEOptionElement>;\r\n}\r\n\r\nclass HTMLEOptionCollectionBase implements HTMLEOptionCollection {\r\n    #walker: TreeWalker;\r\n\r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    get value(): string {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        while (currentNode !== null) {\r\n            if (currentNode.selected) {\r\n                return currentNode.value;\r\n            }\r\n            currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    constructor(root: HTMLESelectElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEOptionElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEOptionGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEOptionElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEOptionElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEOptionElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        let currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEOptionElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEOptionElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEOptionElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEOptionCollection: HTMLEOptionCollectionConstructor =  HTMLEOptionCollectionBase;","import { HTMLEActionElement } from \"../../containers/actions/Action\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEOptionElement } from \"./Option\";\r\nimport { HTMLEOptionCollection } from \"./OptionCollection\";\r\nimport { HTMLEOptionGroupElement } from \"./OptionGroup\";\r\n\r\nexport { HTMLESelectElement };\r\n\r\ninterface HTMLESelectElement extends HTMLEActionElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly options: HTMLEOptionCollection;\r\n    readonly activeIndex: number;\r\n    readonly activeOption: HTMLEOptionElement | null;\r\n    readonly selectedIndex: number;\r\n    readonly selectedOption: HTMLEOptionElement | null;\r\n    name: string;\r\n    label: string;\r\n    value: string;\r\n    expanded: boolean;\r\n    expand(): void;\r\n    collapse(): void;\r\n    toggle(force?: boolean): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ninterface HTMLESelectElementConstructor {\r\n    readonly prototype: HTMLESelectElement;\r\n    new(): HTMLESelectElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-select\": HTMLESelectElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-select\"\r\n})\r\nclass HTMLESelectElementBase extends HTMLEActionElement implements HTMLESelectElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly options: HTMLEOptionCollection;\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get selectedIndex(): number {\r\n        return this.#selectedIndex;\r\n    }\r\n\r\n    get activeOption(): HTMLEOptionElement | null {\r\n        return this.options.item(this.#activeIndex) ?? null;\r\n    }\r\n\r\n    get selectedOption(): HTMLEOptionElement | null {\r\n        return this.options.item(this.#selectedIndex) ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"select\", observed: true})\r\n    type!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    #walker: TreeWalker;\r\n    #activeIndex: number;\r\n    #selectedIndex: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"label\", {\r\n                        attributes: {\r\n                            part: \"label\"\r\n                        }\r\n                    }),\r\n                    element(\"output\", {\r\n                        attributes: {\r\n                            part: \"value\"\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"options\"\r\n                },\r\n                children: [\r\n                    element(\"slot\"),\r\n                    element(\"hr\", {\r\n                        attributes: {\r\n                            part: \"separator\"\r\n                        }\r\n                    }),\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"description\"\r\n                        }\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        this.#selectedIndex = -1;\r\n        this.options = new HTMLEOptionCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"value\": {\r\n                const {options} = this;\r\n                const matchingOption = Array.from(options.values()).find(option => option.value == newValue);\r\n                if (matchingOption) {\r\n                    this.#setSelectedOption(matchingOption);\r\n                    this.dispatchEvent(new Event(\"change\", {bubbles: true}));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {expanded, options} = this;\r\n        if (!expanded) {\r\n            this.expanded = true;\r\n            const {selectedIndex} = this;\r\n            this.#positionOptions();\r\n            const option = options.item(selectedIndex);\r\n            if (option) {\r\n                option.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {expanded} = this;\r\n        if (expanded) {\r\n            this.expanded = false;\r\n            this.focus();\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {expanded} = this;\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEOptionElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEOptionGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEOptionElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEOptionElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousOption(item: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEOptionElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextOption(item: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEOptionElement | null>walker.nextNode();\r\n    }\r\n\r\n    #selectOption(option: HTMLEOptionElement): void {\r\n        if (option && !option.disabled) {\r\n            this.value = option.value;\r\n        }\r\n    }\r\n\r\n    #setActiveOption(option: HTMLEOptionElement | null): void {\r\n        const {options, activeOption} = this;\r\n        if (activeOption !== null && activeOption !== option) {\r\n            activeOption.active = false;\r\n        }\r\n        if (option !== null) {\r\n            if (!option.disabled) {\r\n                const {shadowRoot} = this;\r\n                const descriptionPart = shadowRoot.querySelector(\"[part='description']\");\r\n                if (descriptionPart) {\r\n                    descriptionPart.textContent = option.description;\r\n                }\r\n                this.#activeIndex = Array.from(options.values()).indexOf(option);\r\n            }\r\n            option.active = true;\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    #setSelectedOption(option: HTMLEOptionElement | null): void {\r\n        const {options} = this;\r\n        if (option !== null) {\r\n            if (!option.disabled) {\r\n                const {shadowRoot, selectedOption} = this;\r\n                const valuePart = shadowRoot.querySelector(\"[part='value']\");\r\n                if (valuePart) {\r\n                    valuePart.textContent = option.label;\r\n                }\r\n                option.selected = true;\r\n                if (selectedOption) {\r\n                    selectedOption.selected = false;\r\n                }\r\n                this.#selectedIndex = Array.from(options.values()).indexOf(option);\r\n            }\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    #positionOptions(): void {\r\n        const {shadowRoot} = this;\r\n        const options = shadowRoot.querySelector<HTMLElement>(\"[part=options]\")!;\r\n        const {style: optionsStyle} = options;  \r\n        const {bottom: selectBottom, left: selectLeft} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        optionsStyle.setProperty(\"top\", `${selectBottom + scrollY}px`);\r\n        optionsStyle.setProperty(\"left\", `${selectLeft + scrollX}px`);\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEOptionElement) {\r\n            this.#selectOption(target);\r\n            this.collapse();\r\n        }\r\n        else {\r\n            if (target == this) {\r\n                this.toggle();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {expanded} = this;\r\n        if (target instanceof HTMLEOptionElement) {\r\n            if (!expanded) {\r\n                this.expand();\r\n            }\r\n            this.#setActiveOption(target);\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {expanded} = this;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            if (expanded) {\r\n                this.collapse();\r\n            }\r\n            this.#setActiveOption(null);\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {options, activeOption, selectedOption, selectedIndex, expanded} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                if (expanded && activeOption !== null) {\r\n                    const previousOption = this.#previousOption(activeOption) ?? this.#firstOption();\r\n                    if (previousOption) {\r\n                        previousOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else if (!expanded && selectedOption !== null) {\r\n                    const previousOption = this.#previousOption(selectedOption) ?? this.#firstOption();\r\n                    if (previousOption) {\r\n                        this.#selectOption(previousOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (expanded && activeOption !== null) {\r\n                    const nextOption = this.#nextOption(activeOption) ?? this.#lastOption();\r\n                    if (nextOption) {\r\n                        nextOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else if (!expanded && selectedOption !== null) {\r\n                    const nextOption = this.#nextOption(selectedOption) ?? this.#lastOption();\r\n                    if (nextOption) {\r\n                        this.#selectOption(nextOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstOption = this.#firstOption();\r\n                if (firstOption !== null) {\r\n                    if (expanded) {\r\n                        firstOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(firstOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastOption = this.#lastOption();\r\n                if (lastOption !== null) {\r\n                    if (expanded) {\r\n                        lastOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(lastOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (expanded) {\r\n                    this.collapse();\r\n                    if (activeOption !== null) {\r\n                        this.#selectOption(activeOption);\r\n                    }\r\n                }\r\n                else {\r\n                    const option = options.item(selectedIndex);\r\n                    if (option !== null) {\r\n                        option.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.collapse();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            default: {\r\n                const {activeIndex} = this;\r\n                const {length: keyLength} = key;\r\n                if (keyLength == 1) {\r\n                    const keyCode = key.charCodeAt(0);\r\n                    const optionsArray = Array.from(options.values());\r\n                    const firstMatchIndex = optionsArray.findIndex(\r\n                        option_i => option_i.label.toLowerCase().charCodeAt(0) == keyCode\r\n                    );\r\n                    const nextMatchIndex = optionsArray.findIndex(\r\n                        (option_i, i) => option_i.label.toLowerCase().charCodeAt(0) == keyCode && i > activeIndex\r\n                    );\r\n                    const matchIndex = nextMatchIndex > -1 ?\r\n                        nextMatchIndex :\r\n                        firstMatchIndex;\r\n                    const option = options.item(matchIndex);\r\n                    if (option !== null) {\r\n                        option.focus({preventScroll: true});\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEOptionElement) {\r\n            target.focus({preventScroll: true});\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const options = <HTMLEOptionElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEOptionElement\r\n            );\r\n        if (options.length > 0) {\r\n            let selectedOption: HTMLEOptionElement | null = null;\r\n            let {value} = this;\r\n            if (value) {\r\n                selectedOption = options.find(option => option.value == value) ?? null;\r\n            }\r\n            if (selectedOption == null) {\r\n                selectedOption = options.find(option => option.selected) ?? null;\r\n            }\r\n            if (selectedOption == null) {\r\n                selectedOption = options.find(option => option.default) ?? null;\r\n            }\r\n            if (selectedOption == null) {\r\n                selectedOption = this.#firstOption();\r\n            }\r\n            options.forEach(option_i => {\r\n                option_i.selected = option_i == selectedOption\r\n            });\r\n            if (selectedOption !== null) {\r\n                this.#setSelectedOption(selectedOption);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLESelectElement: HTMLESelectElementConstructor = HTMLESelectElementBase;","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEActionElement } from \"../actions/Action\";\r\nimport { HTMLEMenuButtonElement } from \"../menus/MenuButton\";\r\n\r\nexport { HTMLEToolBarItemElement };\r\nexport { EToolBarItem };\r\n\r\ninterface HTMLEToolBarItemElementConstructor {\r\n    readonly prototype: HTMLEToolBarItemElement;\r\n    new(): HTMLEToolBarItemElement;\r\n}\r\n\r\ninterface HTMLEToolBarItemElement extends HTMLEActionElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menubutton: HTMLEMenuButtonElement | null;\r\n    readonly select: HTMLESelectElement | null;\r\n    name: string;\r\n    label: string;\r\n    active: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritem\": HTMLEToolBarItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar slottedKeyboardListeners: WeakMap<HTMLElement, EventListener>;\r\nvar slottedTriggerListeners: WeakMap<HTMLElement, EventListener>;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritem\"\r\n})\r\nclass HTMLEToolBarItemElementBase extends HTMLEActionElement implements HTMLEToolBarItemElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get menubutton(): HTMLEMenuButtonElement | null {\r\n        return this.#menubutton;\r\n    }\r\n    \r\n    get select(): HTMLESelectElement | null {\r\n        return this.#select;\r\n    }\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n    \r\n    #menubutton: HTMLEMenuButtonElement | null;\r\n    #select: HTMLESelectElement | null;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"icon\"\r\n                        }\r\n                    }),\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"label\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\", {\r\n                        attributes: {\r\n                            name: \"select\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\", {\r\n                        attributes: {\r\n                            name: \"menubutton\"\r\n                        }\r\n                    })\r\n                ]\r\n            })\r\n        )\r\n        slottedKeyboardListeners = new WeakMap();\r\n        slottedTriggerListeners = new WeakMap();\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#menubutton = null;\r\n        this.#select = null;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    toggle(): void {\r\n        const {type} = this;\r\n        switch (type) {\r\n            case \"menubutton\": {\r\n                const {menubutton} = this;\r\n                if (menubutton) {\r\n                    menubutton.toggle();\r\n                    if (menubutton.expanded) {\r\n                        menubutton.menu?.items.item(0)?.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"select\": {\r\n                const {select} = this;\r\n                if (select) {\r\n                    select.toggle();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector<HTMLSpanElement>(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"value\": {\r\n                const {type} = this;\r\n                if (type == \"select\") {\r\n                    this.#updateSelectValue();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #updateSelectValue(): void {\r\n        const {select} = this;\r\n        if (select) {\r\n            const {value} = this;\r\n            const {value: selectValue} = select;\r\n            if (selectValue !== value) {\r\n                select.value = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    #addSlottedKeyboardHandler(element: HTMLElement): void {\r\n        const listener = <EventListener>this.#handleSlottedKeyboardEvent.bind(this);\r\n        slottedKeyboardListeners.set(element, listener);\r\n        element.addEventListener(\"keydown\", listener);\r\n    }\r\n\r\n    #removeSlottedKeyboardHandler(element: HTMLElement): void {\r\n        const listener = slottedKeyboardListeners.get(element);\r\n        if (listener) {\r\n            element.removeEventListener(\"keydown\", listener);\r\n        }\r\n    }\r\n\r\n    #addSlottedTriggerHandler(element: HTMLElement): void {\r\n        const listener = <EventListener>this.#handleSlottedTriggerEvent.bind(this);\r\n        slottedTriggerListeners.set(element, listener);\r\n        element.addEventListener(\"trigger\", listener);\r\n    }\r\n\r\n    #removeSlottedTriggerHandler(element: HTMLElement): void {\r\n        const listener = slottedTriggerListeners.get(element);\r\n        if (listener) {\r\n            element.removeEventListener(\"trigger\", listener);\r\n        }\r\n    }\r\n\r\n    #handleSlottedKeyboardEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        switch (key) {\r\n            case \"Enter\":\r\n            case \"Escape\": {\r\n                this.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlottedTriggerEvent(event: KeyboardEvent): void {\r\n        this.focus({preventScroll: true});\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target;\r\n        switch (slotName) {\r\n            case \"menubutton\": {\r\n                let menubutton = this.#menubutton;\r\n                if (menubutton !== null) {\r\n                    this.#removeSlottedTriggerHandler(menubutton);\r\n                    this.#removeSlottedKeyboardHandler(menubutton);\r\n                }\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                menubutton = element instanceof HTMLEMenuButtonElement ? element : null;\r\n                if (menubutton !== null) {\r\n                    this.#addSlottedTriggerHandler(menubutton);\r\n                    this.#addSlottedKeyboardHandler(menubutton);\r\n                }\r\n                this.#menubutton = menubutton;\r\n                break;\r\n            }\r\n            case \"select\": {\r\n                let select = this.#select;\r\n                if (select !== null) {\r\n                    this.#removeSlottedKeyboardHandler(select);\r\n                }\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                select = element instanceof HTMLESelectElement ? element : null;\r\n                if (select !== null) {\r\n                    this.#addSlottedKeyboardHandler(select);\r\n                }\r\n                this.#select = select;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemElement: HTMLEToolBarItemElementConstructor = HTMLEToolBarItemElementBase;\r\n\r\ninterface EToolBarItemConstructor {\r\n    readonly prototype: HTMLEToolBarItemElement;\r\n    new(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n    button(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    checkbox(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    radio(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    menubutton(init: {\r\n        name: string;\r\n        label: string;\r\n        menubutton: HTMLEMenuButtonElement;\r\n    }): HTMLEToolBarItemElement;\r\n    select(init: {\r\n        name: string;\r\n        label: string;\r\n        select: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n}\r\n\r\nvar EToolBarItem = <EToolBarItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menubutton, select} = init;\r\n        if (menubutton) {\r\n            menubutton.slot = \"menubutton\";\r\n        }\r\n        if (select) {\r\n            select.slot = \"select\";\r\n        }\r\n        return element(\"e-toolbaritem\", {\r\n            attributes: {\r\n                tabindex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type\r\n            },\r\n            children: menubutton ? [menubutton] : select ? [select] : void 0,\r\n            listeners: {\r\n                trigger: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEToolBarItemElement.prototype,\r\n        button(init: {\r\n            name: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menubutton(init: {\r\n            name: string;\r\n            label: string;\r\n            menubutton: HTMLEMenuButtonElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"menubutton\"\r\n            });\r\n        },\r\n        select(init: {\r\n            name: string;\r\n            label: string;\r\n            select: HTMLESelectElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"select\"\r\n            });\r\n        },\r\n    }\r\n);","\r\nimport { element, CustomElement, AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEToolBarItemGroupElement };\r\n\r\ninterface HTMLEToolBarItemGroupElementConstructor {\r\n    readonly prototype: HTMLEToolBarItemGroupElement;\r\n    new(): HTMLEToolBarItemGroupElement;\r\n}\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\ninterface HTMLEToolBarItemGroupElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n    disabled: boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritemgroup\": HTMLEToolBarItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritemgroup\"\r\n})\r\nclass HTMLEToolBarItemGroupElementBase extends HTMLElement implements HTMLEToolBarItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    disabled!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            width: max-content;\r\n                            flex-direction: row;\r\n                        }\r\n\r\n                        /*:host([orientation=\"vertical\"]) {\r\n                            flex-direction: column;\r\n                        }\r\n\r\n                        :host([orientation=\"horizontal\"]) {\r\n                            flex-direction: row;\r\n                        }*/\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const label = this.shadowRoot.querySelector<HTMLLabelElement>(\"[part='label']\");\r\n                if (label) {\r\n                    label.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"disabled\": {\r\n                /*this.items.forEach((item) => {\r\n                    item.disabled = newValue !== null;\r\n                });*/\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemGroupElement: HTMLEToolBarItemGroupElementConstructor = HTMLEToolBarItemGroupElementBase;","import { HTMLEToolBarElement } from \"./ToolBar\";\r\nimport { HTMLEToolBarItemElement } from \"./ToolBarItem\";\r\nimport { HTMLEToolBarItemGroupElement } from \"./ToolBarItemGroup\";\r\n\r\nexport { HTMLEToolBarItemRadioList };\r\nexport { HTMLEToolBarItemCollection };\r\n\r\ninterface HTMLEToolBarItemCollectionConstructor {\r\n    readonly prototype: HTMLEToolBarItemCollection;\r\n    new(root: HTMLEToolBarElement): HTMLEToolBarItemCollection;\r\n}\r\n\r\ninterface HTMLEToolBarItemCollection {\r\n    length: number;\r\n    item(index: number): HTMLEToolBarItemElement | null;\r\n    namedItem(name: string): HTMLEToolBarItemElement | HTMLEToolBarItemRadioList | null;\r\n    values(): IterableIterator<HTMLEToolBarItemElement>;\r\n}\r\n\r\ninterface HTMLEToolBarItemRadioListConstructor {\r\n    readonly prototype: HTMLEToolBarItemRadioList;\r\n    new(root: HTMLEToolBarElement, name: string): HTMLEToolBarItemRadioList;\r\n}\r\n\r\ninterface HTMLEToolBarItemRadioList {\r\n    value: string;\r\n    values(): IterableIterator<HTMLEToolBarItemElement>;\r\n}\r\n\r\nclass HTMLEToolBarItemCollectionBase implements HTMLEToolBarItemCollection {\r\n    #walker: TreeWalker;\r\n\r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLEToolBarElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEToolBarItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEToolBarItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEToolBarItemElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEToolBarItemElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEToolBarItemElement | HTMLEToolBarItemRadioList | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEToolBarItemElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEToolBarItemElement | null>walker.nextNode();\r\n        }\r\n        if (currentNode && currentNode.type == \"radio\") {\r\n            return new HTMLEToolBarItemRadioList(<HTMLEToolBarElement>walker.root, name);\r\n        }\r\n        return <HTMLEToolBarItemElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEToolBarItemElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEToolBarItemElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n\r\n    static HTMLEToolBarItemRadioListBase? = class HTMLEToolBarItemRadioListBase implements HTMLEToolBarItemRadioList {\r\n        #walker: TreeWalker;\r\n        #name: string;\r\n\r\n        get value(): string {\r\n            const name = this.#name;\r\n            const walker = this.#walker;\r\n            walker.currentNode = walker.root;\r\n            let currentNode = <HTMLEToolBarItemElement | null>walker.nextNode();\r\n            while (currentNode !== null) {\r\n                if (currentNode.name == name && currentNode.type == \"radio\" && currentNode.checked) {\r\n                    return currentNode.value;\r\n                }\r\n                currentNode = <HTMLEToolBarItemElement | null>walker.nextNode();\r\n            }\r\n            return \"\";\r\n        }\r\n\r\n        constructor(root: HTMLEToolBarElement, name: string) {\r\n            this.#walker = document.createTreeWalker(\r\n                root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n            );\r\n            this.#name = name;\r\n        }\r\n        \r\n        #nodeFilter(node: Node): number {\r\n            if (node instanceof HTMLEToolBarItemElement) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            if (node instanceof HTMLEToolBarItemGroupElement) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n            return NodeFilter.FILTER_REJECT;\r\n        }\r\n\r\n        *values(): IterableIterator<HTMLEToolBarItemElement> {\r\n            const name = this.#name;\r\n            const walker = this.#walker;\r\n            walker.currentNode = walker.root;\r\n            let currentNode = <HTMLEToolBarItemElement | null>walker.nextNode();\r\n            while (currentNode !== null) {\r\n                const {name: itemName, type: itemType} = currentNode;\r\n                if (itemName == name && itemType == \"radio\") {\r\n                    yield currentNode;\r\n                }\r\n                currentNode = <HTMLEToolBarItemElement | null>walker.nextNode();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemCollection: HTMLEToolBarItemCollectionConstructor =  HTMLEToolBarItemCollectionBase;\r\nvar HTMLEToolBarItemRadioList: HTMLEToolBarItemRadioListConstructor = HTMLEToolBarItemCollectionBase.HTMLEToolBarItemRadioListBase!;\r\ndelete HTMLEToolBarItemCollectionBase.HTMLEToolBarItemRadioListBase;","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEToolBarItemElement } from \"./ToolBarItem\";\r\nimport { HTMLEToolBarItemCollection, HTMLEToolBarItemRadioList } from \"./ToolBarItemCollection\";\r\nimport { HTMLEToolBarItemGroupElement } from \"./ToolBarItemGroup\";\r\n\r\nexport { HTMLEToolBarElement };\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\ninterface HTMLEToolBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLEToolBarItemCollection;\r\n    readonly activeItem: HTMLEToolBarItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n}\r\n\r\ninterface HTMLEToolbarElementConstructor {\r\n    readonly prototype: HTMLEToolBarElement;\r\n    new(): HTMLEToolBarElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbar\": HTMLEToolBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbar\"\r\n})\r\nclass HTMLEToolBarElementBase extends HTMLElement implements HTMLEToolBarElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLEToolBarItemCollection;\r\n\r\n    get activeItem(): HTMLEToolBarItemElement | null {\r\n        return this.items.item(this.#activeIndex) ?? null;\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    orientation!: ToolBarOrientation;\r\n\r\n    #walker: TreeWalker;\r\n    #activeIndex: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#activeIndex = -1;\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        this.items = new HTMLEToolBarItemCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"change\", this.#handleChangeEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEToolBarItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEToolBarItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEToolBarItemElement | null>walker.previousSibling();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEToolBarItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEToolBarItemElement | null): void {\r\n        const {activeItem, items} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n            this.#activeIndex = Array.from(items.values()).indexOf(item);\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLESelectElement) {\r\n            const item = target.closest(\"e-toolbaritem\");\r\n            if (item !== null) {\r\n                const {select, type} = item;\r\n                if (target == select && select && type == \"select\") {\r\n                    const {value} = item;\r\n                    const {value: selectValue} = select;\r\n                    if (value !== selectValue) {\r\n                        item.value = selectValue;\r\n                        item.trigger();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEToolBarItemElement) {\r\n            const {type} = target;\r\n            switch (type) {\r\n                /*case \"menubutton\": {\r\n                    const {menubutton} = target;\r\n                    if (menubutton) {\r\n                        const {expanded} = menubutton;\r\n                        if (!expanded) {\r\n                            menubutton.expand();\r\n                            menubutton.menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                case \"select\": {\r\n                    const {select} = target;\r\n                    if (select) {\r\n                        select.toggle();\r\n                    }\r\n                    break;\r\n                }*/\r\n                default: {\r\n                    target.trigger();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {items} = this;\r\n        const activeItem = Array.from(items.values()).find(\r\n            item_i => item_i.contains(<Node>target)\r\n        ) ?? null;\r\n        this.#setActiveItem(activeItem);\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.#setActiveItem(null);\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"menubutton\": {\r\n                            const {menubutton} = activeItem;\r\n                            if (menubutton) {\r\n                                const {expanded} = menubutton;\r\n                                if (!expanded) {\r\n                                    menubutton.expand();\r\n                                    menubutton.menu?.items.item(0)?.focus({preventScroll: true});\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"select\": {\r\n                            const {select} = activeItem;\r\n                            if (select) {\r\n                                select.expand();\r\n                            }\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            activeItem.trigger();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"select\": {\r\n                            activeItem.select?.expand();\r\n                            event.stopPropagation();\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    activeItem.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleTriggerEvent(event: Event): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEToolBarItemElement) {\r\n            const {type, name, value} = target;\r\n            if (type == \"radio\") {\r\n                Array.from(new HTMLEToolBarItemRadioList(this, name).values()).forEach((radio_i) => {\r\n                    radio_i.checked = radio_i.value == value;\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarElement: HTMLEToolbarElementConstructor = HTMLEToolBarElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLETabPanelElement };\r\n\r\ninterface HTMLETabPanelElementConstructor {\r\n    readonly prototype: HTMLETabPanelElement;\r\n    new(): HTMLETabPanelElement;\r\n}\r\n\r\ninterface HTMLETabPanelElement extends HTMLElement {\r\n    name: string;\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tabpanel\"\r\n})\r\nclass HTMLETabPanelElementBase extends HTMLElement implements HTMLETabPanelElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n        \r\n                        :host([hidden]) {\r\n                            display: none;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n}\r\n\r\nvar HTMLETabPanelElement: HTMLETabPanelElementConstructor = HTMLETabPanelElementBase;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tabpanel\": HTMLETabPanelElement,\r\n    }\r\n}","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLETabPanelElement } from \"./TabPanel\";\r\n\r\nexport { ETabChangeEvent };\r\nexport { HTMLETabElement };\r\n\r\ninterface HTMLETabElementConstructor {\r\n    readonly prototype: HTMLETabElement;\r\n    new(): HTMLETabElement;\r\n}\r\n\r\ninterface HTMLETabElement extends HTMLElement {\r\n    name: string;\r\n    active: boolean;\r\n    disabled: boolean;\r\n    controls: string;\r\n    panel: HTMLETabPanelElement | null;\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ntype ETabChangeEvent = CustomEvent<{\r\n    tab: HTMLETabElement;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_tabchange\": ETabChangeEvent,\r\n    }\r\n\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tab\": HTMLETabElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tab\"\r\n})\r\nclass HTMLETabElementBase extends HTMLElement implements HTMLETabElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    #panel: HTMLETabPanelElement | null;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            user-select: none;\r\n                            white-space: nowrap;\r\n\r\n                            padding: 2px 6px;\r\n                            cursor: pointer;\r\n                        }\r\n                        \r\n                        :host([disabled]) {\r\n                            color: lightgray;\r\n                            pointer-events: none;\r\n                        }\r\n        \r\n                        :host([active]) {\r\n                            background-color: lightgray;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n        this.#panel = null;\r\n    }\r\n\r\n    get panel(): HTMLETabPanelElement | null {\r\n        return this.#panel;\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const panel = document.getElementById(this.controls);\r\n        if (panel !== this.#panel && panel instanceof HTMLETabPanelElement) {\r\n            this.#panel = panel;\r\n        }\r\n        if (panel)  {\r\n            panel.hidden = !this.active;\r\n        }\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"active\":\r\n                if (this.active) {\r\n                    this.dispatchEvent(new CustomEvent(\"e_tabchange\", {detail: {tab: this}, bubbles: true}));\r\n                }\r\n                const panel = document.getElementById(this.controls);\r\n                if (panel !== this.panel && panel instanceof HTMLETabPanelElement) {\r\n                    this.#panel = panel;\r\n                }\r\n                if (panel)  {\r\n                    panel.hidden = !this.active;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabElement: HTMLETabElementConstructor = HTMLETabElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLETabElement } from \"./Tab\";\r\n\r\nexport { HTMLETabListElement };\r\n\r\ninterface HTMLETabListElementConstructor {\r\n    readonly prototype: HTMLETabListElement;\r\n    new(): HTMLETabListElement;\r\n}\r\n\r\ninterface HTMLETabListElement extends HTMLElement {\r\n    readonly activeTab: HTMLETabElement | null;\r\n    tabs: HTMLETabElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tablist\": HTMLETabListElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tablist\"\r\n})\r\nclass HTMLETabListElementBase extends HTMLElement implements HTMLETabListElement {\r\n\r\n    tabs: HTMLETabElement[];\r\n\r\n    #activeIndex: number;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                            position: relative;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n        \r\n        this.tabs = [];\r\n        this.#activeIndex = 1;\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeTab(): HTMLETabElement | null {\r\n        return this.tabs[this.#activeIndex] || null;\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n        const slot = this.shadowRoot!.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", (event) => {\r\n\r\n                const tabs = <HTMLETabElement[]>(<HTMLSlotElement>event.target)\r\n                    .assignedElements()\r\n                    .filter(tab => tab instanceof HTMLETabElement);\r\n                this.tabs = tabs;\r\n                this.#activeIndex = this.tabs.findIndex(tab => tab.active);\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event) => {\r\n            switch (event.key) {\r\n                case \"ArrowUp\":\r\n                    this.focusTabAt((this.activeIndex <= 0) ? this.tabs.length - 1 : this.activeIndex - 1);\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    this.focusTabAt((this.activeIndex >= this.tabs.length - 1) ? 0 : this.activeIndex + 1);\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"Enter\":\r\n                    if (this.activeTab) {\r\n                        this.activateTab(this.activeTab);\r\n                    }\r\n                    break;\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"click\", (event) => {\r\n            const target = event.target;\r\n            if (target instanceof HTMLETabElement) {\r\n                target.active = true;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"e_tabchange\", (event) => {\r\n            const targetIndex = this.tabs.indexOf(event.detail.tab);\r\n            this.#activeIndex = targetIndex;\r\n            this.tabs.forEach((thisTab, thisTabIndex) => {\r\n                if (thisTabIndex !== targetIndex) {\r\n                    thisTab.active = false;\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    focusTabAt(index: number): void {\r\n        const tab = this.tabs[index];\r\n        if (tab) {\r\n            this.#activeIndex = index;\r\n            tab.focus();\r\n        }\r\n    }\r\n\r\n    activateTab(tab: HTMLETabElement) {\r\n        if (this.tabs.includes(tab)) {\r\n            tab.active = true;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabListElement: HTMLETabListElementConstructor = HTMLETabListElementBase;","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEToolBarElement } from \"../toolbars/ToolBar\";\r\n\r\nexport { HTMLEListItemElement };\r\n\r\ninterface HTMLEListItemElementConstructor {\r\n    readonly prototype: HTMLEListItemElement;\r\n    new(): HTMLEListItemElement;\r\n}\r\n\r\ninterface HTMLEListItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly badge: HTMLSpanElement | null;\r\n    readonly toolbar: HTMLEToolBarElement | null;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitem\": HTMLEListItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-listitem\"\r\n})\r\nclass HTMLEListItemElementBase extends HTMLElement implements HTMLEListItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    get badge(): HTMLElement | null {\r\n        return this.#badge;\r\n    }\r\n\r\n    get toolbar(): HTMLEToolBarElement | null {\r\n        return this.#toolbar;\r\n    }\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    #badge: HTMLElement | null;\r\n    #toolbar: HTMLEToolBarElement | null;\r\n    #menu: HTMLEMenuElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#badge = null;\r\n        this.#menu = null;\r\n        this.#toolbar = null;\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this))\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"toolbar\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#toolbar = element instanceof HTMLEToolBarElement ? element : null;\r\n                break;\r\n            }\r\n            case \"badge\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#badge = element instanceof HTMLSpanElement ? element : null;\r\n                break;\r\n            }\r\n            case \"menu\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#menu = element instanceof HTMLEMenuElement ? element : null;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEListItemElement: HTMLEListItemElementConstructor = HTMLEListItemElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEListItemElement } from \"./ListItem\";\r\n\r\nexport { HTMLEListItemGroupElement };\r\n\r\ninterface HTMLEListItemGroupElementConstructor {\r\n    readonly prototype: HTMLEListItemGroupElement;\r\n    new(): HTMLEListItemGroupElement;\r\n}\r\n\r\ninterface HTMLEListItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitemgroup\": HTMLEListItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-listitemgroup\"\r\n})\r\nclass HTMLEListItemGroupElementBase extends HTMLElement implements HTMLEListItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEListItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEListItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEListItemGroupElement: HTMLEListItemGroupElementConstructor = HTMLEListItemGroupElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEListItemElement } from \"./ListItem\";\r\nimport { HTMLEListItemGroupElement } from \"./ListItemGroup\";\r\n\r\nexport { HTMLEListElement };\r\n\r\ninterface HTMLEListElementConstructor {\r\n    readonly prototype: HTMLEListElement;\r\n    new(): HTMLEListElement;\r\n}\r\n\r\ninterface HTMLEListElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEListItemElement>;\r\n    readonly activeItem: HTMLEListItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    droptarget: boolean;\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    selectedItems(): HTMLEListItemElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-list\": HTMLEListElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-list\"\r\n})\r\nclass HTMLEListElementBase extends HTMLElement implements HTMLEListElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEListItemElement>;\r\n\r\n    get dropTargetItem(): HTMLEListItemElement | null {\r\n        return this.items[this.#dropTargetIndex] ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    #dropTargetIndex: number;\r\n    #activeIndex: number;\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        this.#dropTargetIndex = -1;\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.items = this.getElementsByTagName(\"e-listitem\");\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEListItemElement | null {\r\n        return this.items[this.activeIndex] ?? null;\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    selectedItems(): HTMLEListItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.#firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEListItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEListItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLEListItemElement, to: HTMLEListItemElement): HTMLEListItemElement[] {\r\n        const items = Array.from(this.items);\r\n        const fromIndex = items.indexOf(from);\r\n        const toIndex = items.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return items.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        selectedItems.forEach((item_i) => {\r\n            if (item_i.selected) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEListItemElement | null): void {\r\n        const {activeItem, items} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n            item.tabIndex = 0;\r\n            this.#activeIndex = Array.from(items).indexOf(item);\r\n        }\r\n    }\r\n\r\n    #setDropTargetItem(item: HTMLEListItemElement | null): void {\r\n        const {dropTargetItem, items} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n            this.#dropTargetIndex = Array.from(items).indexOf(item);\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n            this.#dropTargetIndex = -1;\r\n        }\r\n    }\r\n\r\n    #firstItem(): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLEListItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLEListItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEListItemElement): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEListItemElement | null>walker.previousNode();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEListItemElement): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const nextItem = <HTMLEListItemElement | null>walker.nextNode();\r\n        return nextItem;\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent) {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n            target.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey} = event;\r\n        const selectedItems = this.selectedItems();\r\n        if (target instanceof HTMLEListItemElement) {\r\n            if (!shiftKey && !ctrlKey) {\r\n                this.#setSelection(target);\r\n            }\r\n            else if (ctrlKey) {\r\n                (!target.selected) ?\r\n                    this.#addToSelection(target) :\r\n                    this.#removeFromSelection(target);\r\n                event.stopPropagation();\r\n            }\r\n            else if (shiftKey) {\r\n                const lastSelectedItem = selectedItems[selectedItems.length - 1];\r\n                if (lastSelectedItem) {\r\n                    const range = this.#getItemsRange(\r\n                        lastSelectedItem,\r\n                        target\r\n                    );\r\n                    if (range) {\r\n                        if (selectedItems.includes(target)) {\r\n                            this.#removeFromSelection(...range);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(...range);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.#setSelection(target);\r\n                }\r\n                event.stopPropagation();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            this.#setDropTargetItem(target);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n    \r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n        const relatedTargetHost =\r\n            relatedTargetRoot instanceof ShadowRoot ?\r\n            relatedTargetRoot.host :\r\n            relatedTarget;\r\n        if (!this.contains(<Node>relatedTargetHost)) {\r\n            this.#setDropTargetItem(null);\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    const walker = this.#walker;\r\n                    const {root} = walker;\r\n                    const firstItem = <HTMLEListItemElement>(\r\n                        walker.currentNode = walker.parentNode() ?? root, walker.firstChild()\r\n                    );\r\n                    const lastItem = <HTMLEListItemElement>(\r\n                        walker.currentNode = walker.parentNode() ?? root, walker.lastChild()\r\n                    );\r\n                    const range = this.#getItemsRange(\r\n                        firstItem,\r\n                        lastItem\r\n                    );\r\n                    if (range) {\r\n                        this.#setSelection(...range);\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                const {activeItem} = this;\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.#setActiveItem(null);\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            this.#setActiveItem(target);\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (!this.#onSelection) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEListItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEListItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEListElement: HTMLEListElementConstructor = HTMLEListElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEDraggableElement };\r\n\r\ninterface HTMLEDraggableElementConstructor {\r\n    readonly prototype: HTMLEDraggableElement;\r\n    new(): HTMLEDraggableElement;\r\n}\r\n\r\ninterface HTMLEDraggableElement extends HTMLElement {\r\n    readonly referee: this | null;\r\n    readonly references: this[];\r\n    selected: boolean;\r\n    dragged: boolean;\r\n    dragovered: boolean;\r\n\r\n    connectedCallback(): void;\r\n    disconnectedCallback(): void;\r\n    getReference(): this;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-draggable\": HTMLEDraggableElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-draggable\"\r\n})\r\nclass HTMLEDraggableElementBase extends HTMLElement implements HTMLEDraggableElement {\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    dragovered!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    dragged!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    #referee: this | null;\r\n    readonly references: this[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            padding: 3px 4px;\r\n                            cursor: pointer;\r\n                            white-space: nowrap;\r\n                            border-radius: 4px;\r\n                            border: 1px solid black;\r\n                            user-select: none;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                            color: lightgray;\r\n                            border-color: lightgray;\r\n                        }\r\n        \r\n                        :host([selected]:active) {\r\n                            cursor: grabbing;\r\n                        }\r\n                        \r\n                        :host([selected]) {\r\n                            cursor: grab;\r\n                            font-weight: bold;\r\n                            outline: 1px auto black;\r\n                        }\r\n        \r\n                        :host([dragovered]) {\r\n                            border-style: dotted;\r\n                        }\r\n                        \r\n                        [part=\"container\"] {\r\n                            display: flex;\r\n                            align-items: center;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"container\"\r\n                },\r\n                children: [\r\n                    element(\"slot\", {\r\n                        children: [\r\n                            \"&nbsp;\"\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.references = [];\r\n        this.#referee = null;\r\n    }\r\n\r\n    get referee(): this | null {\r\n        return this.#referee;\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n        this.draggable = true;\r\n    }\r\n\r\n    disconnectedCallback(): void {\r\n        if (this.referee) {\r\n            const thisRefIndex = this.referee.references.indexOf(this);\r\n            if (thisRefIndex > -1) {\r\n                this.referee.references.splice(thisRefIndex, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    getReference(): this {\r\n        const reference = <this>this.cloneNode(true);\r\n        reference.#referee = this;\r\n        return reference;\r\n    }\r\n}\r\n\r\nvar HTMLEDraggableElement: HTMLEDraggableElementConstructor = HTMLEDraggableElementBase","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\n\r\nexport { HTMLEDragzoneElement };\r\n\r\ninterface HTMLEDragzoneElementConstructor {\r\n    readonly prototype: HTMLEDragzoneElement;\r\n    new(): HTMLEDragzoneElement\r\n}\r\n\r\ninterface HTMLEDragzoneElement extends HTMLElement {\r\n    readonly draggables: HTMLEDraggableElement[];\r\n    readonly selectedDraggables: HTMLEDraggableElement[];\r\n    disabled: boolean;\r\n    selectDraggable(draggable: HTMLEDraggableElement): void;\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void;\r\n    clearSelection(): void;\r\n    connectedCallback(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dragzone\": HTMLEDragzoneElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dragzone\"\r\n})\r\nclass HTMLEDragzoneElementBase extends HTMLElement implements HTMLEDragzoneElement {\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    #draggables: HTMLEDraggableElement[];\r\n    #selectedDraggables: HTMLEDraggableElement[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                        }\r\n        \r\n                        [part=\"container\"] {\r\n                            position: relative;\r\n                            display: flex;\r\n                            flex-direction: column;\r\n                            padding-left: 2px;\r\n                            padding-right: 2px;\r\n                        }\r\n        \r\n                        ::slotted(*) {\r\n                            margin-top: 2px;\r\n                            margin-bottom: 2px;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"container\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n        this.#draggables = [];\r\n        this.#selectedDraggables = [];\r\n    }\r\n\r\n    get draggables(): HTMLEDraggableElement[] {\r\n        return this.#draggables;\r\n    }\r\n\r\n    get selectedDraggables(): HTMLEDraggableElement[] {\r\n        return this.#selectedDraggables;\r\n    }\r\n\r\n    selectDraggable(draggable: HTMLEDraggableElement): void {\r\n        if (!this.selectedDraggables.includes(draggable)) {\r\n            this.selectedDraggables.push(draggable);\r\n        }\r\n        if (!draggable.selected) {\r\n            draggable.selected = true;\r\n        }\r\n    }\r\n\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void {\r\n        const index = this.selectedDraggables.indexOf(draggable);\r\n        if (index > -1) {\r\n            if (draggable.selected) {\r\n                draggable.selected = false;\r\n            }\r\n            this.selectedDraggables.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.selectedDraggables.forEach((draggable) => {\r\n            draggable.selected = false;\r\n        });\r\n        this.#selectedDraggables = [];\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const draggables = slot.assignedElements().filter(\r\n                    elem => elem instanceof HTMLEDraggableElement\r\n                ) as HTMLEDraggableElement[];\r\n                this.#draggables = draggables;\r\n                this.draggables.forEach((draggable) => {\r\n                    draggable.draggable = true;\r\n                });\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Escape\":\r\n                    this.clearSelection();\r\n                    this.focus();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragstart\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                this.selectedDraggables.forEach((thisSelectedDraggable) => {\r\n                    thisSelectedDraggable.dragged = true;\r\n                });\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", this.id);\r\n                }\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event) => {\r\n            const dataTransfer = event.dataTransfer;\r\n            if (dataTransfer) {\r\n                dataTransfer.dropEffect = \"none\";\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"dragend\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                const thisDraggedDraggables = this.draggables.filter(draggable => draggable.dragged);\r\n                thisDraggedDraggables.forEach((thisDraggedDraggable) => {\r\n                    thisDraggedDraggable.dragged = false;\r\n                });\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            if (!this.contains(relatedTarget)) {\r\n                this.clearSelection();\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button == 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        if (!target.selected) {\r\n                            this.clearSelection();\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                    else if (event.ctrlKey) {\r\n                        (!target.selected) ?\r\n                            this.selectDraggable(target) :\r\n                            this.unselectDraggable(target);\r\n                    }\r\n                    else if (event.shiftKey) {\r\n                        if (this.selectedDraggables.length > 0) {\r\n                            const targetIndex = this.draggables.indexOf(target);\r\n                            const firstIndex = this.draggables.indexOf(this.selectedDraggables[0]);\r\n                            const direction = Math.sign(targetIndex - firstIndex);\r\n                            const fromIndex = (direction > 0) ? 0 : this.draggables.length - 1;\r\n                            const toIndex = (direction > 0) ? this.draggables.length - 1 : 0;\r\n                            const startRangeIndex = (direction > 0) ? firstIndex : targetIndex;\r\n                            const endRangeIndex = (direction > 0) ? targetIndex : firstIndex;\r\n                            for (let index = fromIndex; index !== (toIndex + direction); index += direction) {\r\n                                (index >= startRangeIndex && index <= endRangeIndex) ? \r\n                                    this.selectDraggable(this.draggables[index]) :\r\n                                    this.unselectDraggable(this.draggables[index]);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.clearSelection();\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mouseup\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button == 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        this.draggables.forEach((thisDraggable) => {\r\n                            if (thisDraggable !== target) {\r\n                                this.unselectDraggable(thisDraggable);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEDragzoneElement: HTMLEDragzoneElementConstructor = HTMLEDragzoneElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\nimport { HTMLEDragzoneElement } from \"./Dragzone\";\r\n\r\nexport { HTMLEDropzoneElement };\r\nexport { EDataChangeEvent };\r\n\r\ninterface HTMLEDropzoneElementConstructor {\r\n    readonly prototype: HTMLEDropzoneElement;\r\n    new(): HTMLEDropzoneElement;\r\n}\r\n\r\ninterface HTMLEDropzoneElement extends HTMLEDragzoneElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    dragovered: DropzoneDragoveredType | null;\r\n    name: string;\r\n    multiple: boolean;\r\n    placeholder: string;\r\n\r\n    droptest: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => void) | null;\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): void;\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean): void;\r\n\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ntype DropzoneDragoveredType = \"self\" | \"draggable\" | \"appendarea\";\r\n\r\ntype EDataChangeEvent = CustomEvent<{\r\n    action: \"insert\" | \"remove\";\r\n    draggables: HTMLEDraggableElement[];\r\n    position: number;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dropzone\": HTMLEDropzoneElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"e_datachange\": EDataChangeEvent,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dropzone\"\r\n})\r\nclass HTMLEDropzoneElementBase extends HTMLEDragzoneElement implements HTMLEDropzoneElement {\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    dragovered!: DropzoneDragoveredType | null;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    placeholder!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    multiple!: boolean;\r\n\r\n    droptest!: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => boolean) | null;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.shadowRoot!.querySelector(\"style\")!.append(/*css*/`\r\n            :host {\r\n                border: 1px dashed gray;\r\n            }\r\n\r\n            :host(:not([multiple]):not(:empty)) [part=\"appendarea\"],\r\n            :host(:not(:empty):not([dragovered])) [part=\"appendarea\"] {\r\n                display: none !important;\r\n            }\r\n\r\n            [part=\"appendarea\"] {\r\n                display: block;\r\n                margin: 2px;\r\n                border-radius: 4px;\r\n                border: 1px dotted black;\r\n            }\r\n\r\n            :host(:not([dragovered=\"appendarea\"])) [part=\"appendarea\"] {\r\n                border-color: transparent;\r\n            }\r\n            \r\n            [part=\"placeholder\"] {\r\n                display: inline-block;\r\n                color: grey;\r\n                pointer-events: none;\r\n                user-select: none;\r\n            }\r\n        `);\r\n\r\n        this.shadowRoot.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"appendarea\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"placeholder\"\r\n                        },\r\n                        children: [\r\n                            \"&nbsp;\"\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.droptest = null;\r\n    }\r\n    \r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        const appendAreaPart = this.shadowRoot!.querySelector<HTMLDivElement>(\"[part='appendarea']\");\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Delete\":\r\n                    if (this == event.target) {\r\n                        this.removeDraggables();\r\n                    }\r\n                    else {\r\n                        this.removeDraggables(draggable => draggable.selected);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragover\", (event: DragEvent) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragover\", (event) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragenter\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                target.dragovered = true;\r\n                this.dragovered = \"draggable\";\r\n            }\r\n            else {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragenter\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"appendarea\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event: DragEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                if (target == this) {\r\n                    if (appendAreaPart) {\r\n                        this.dragovered = \"self\";\r\n                    }\r\n                    if (!this.draggables.includes(relatedTarget)) {\r\n                        this.dragovered = null;\r\n                    }\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                }\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragleave\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n        \r\n        this.addEventListener(\"drop\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                let dropIndex = this.draggables.length;\r\n                if (target == this) {\r\n                    this.dragovered = null;\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                    dropIndex = this.draggables.indexOf(target);\r\n                }\r\n\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    const dragzoneId = dataTransfer.getData(\"text/plain\");\r\n                    const dragzone = document.getElementById(dragzoneId);\r\n                    if (dragzone instanceof HTMLEDragzoneElement) {\r\n                        const selectedDraggables = dragzone.selectedDraggables;\r\n                        if (selectedDraggables) {\r\n                            selectedDraggables.forEach((selectedDraggable) => {\r\n                                selectedDraggable.dragged = false;\r\n                            });\r\n                            if (dragzone instanceof HTMLEDropzoneElement) {\r\n                                dragzone.removeDraggables((draggable) => selectedDraggables.includes(draggable));\r\n                            }\r\n                            dragzone.clearSelection();\r\n                            this.addDraggables(selectedDraggables, dropIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.dragovered = null;\r\n            event.preventDefault();\r\n        });\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"placeholder\": {\r\n                const placeholderPart = this.shadowRoot.querySelector(\"[part='placeholder']\");\r\n                if (placeholderPart) {\r\n                    placeholderPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): HTMLEDraggableElement[] | null {\r\n        if (draggables.length > 0) {\r\n            let dataTransferSuccess = true;\r\n            if (this.droptest) {\r\n                dataTransferSuccess = this.droptest(this, draggables);\r\n            }\r\n            \r\n            let newDraggables: HTMLEDraggableElement[] = [];\r\n            let insertionPosition = -1;\r\n            if (dataTransferSuccess) {\r\n                if (this.multiple) {\r\n                    draggables.forEach((draggable) => {\r\n                        let newDraggable = draggable.getReference();\r\n                        if (position > -1 && position < this.draggables.length) {\r\n                            this.draggables[position].insertAdjacentElement(\"beforebegin\", newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? position : insertionPosition;\r\n                        }\r\n                        else {\r\n                            this.appendChild(newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? this.draggables.length - 1 : insertionPosition;\r\n                        }\r\n                        newDraggables.push(newDraggable);\r\n                    });\r\n                }\r\n                else {\r\n                    let newDraggable = draggables[0].getReference();\r\n                    if (this.draggables.length > 0) {\r\n                        this.replaceChild(newDraggable, this.draggables[0]);\r\n                    }\r\n                    else {\r\n                        this.appendChild(newDraggable);\r\n                    }\r\n                    newDraggables.push(newDraggable);\r\n                    insertionPosition = 0;\r\n                }\r\n            }\r\n            \r\n            const slot = this.shadowRoot?.querySelector(\"slot\");\r\n            if (slot) {\r\n                slot.addEventListener(\"slotchange\", () => {\r\n                    this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                        bubbles: true,\r\n                        detail: {\r\n                            action: \"insert\",\r\n                            draggables: newDraggables,\r\n                            position: insertionPosition\r\n                        }\r\n                    }));\r\n                }, {once: true});\r\n            }\r\n            return newDraggables;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean = () => true) {\r\n        let toRemove = this.draggables.filter(\r\n            (value: HTMLEDraggableElement, index: number) => {\r\n                return predicate(value, index);\r\n            }\r\n        );\r\n        let atPosition = this.draggables.indexOf(toRemove[0]);\r\n        toRemove.forEach((draggable) => {\r\n            draggable.remove(); \r\n        });\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                    bubbles: true,\r\n                    detail: {\r\n                        action: \"remove\",\r\n                        draggables: toRemove,\r\n                        position: atPosition\r\n                    }\r\n                }));\r\n            }, {once: true});\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEDropzoneElement: HTMLEDropzoneElementConstructor = HTMLEDropzoneElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEDialogElement };\r\n\r\ninterface HTMLEDialogElementConstructor {\r\n    readonly prototype: HTMLEDialogElement;\r\n    new(): HTMLEDialogElement;\r\n}\r\n\r\ntype DialogElementType = \"confirm\" | \"alert\";\r\n\r\ninterface HTMLEDialogElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: DialogElementType;\r\n    open(): void;\r\n    close(): void;\r\n    cancel(): void;\r\n    confirm(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dialog\": HTMLEDialogElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"open\": Event,\r\n        \"close\": Event,\r\n        \"cancel\": Event,\r\n        \"confirm\": Event,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dialog\"\r\n})\r\nclass HTMLEDialogElementBase extends HTMLElement implements HTMLEDialogElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: DialogElementType;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            padding: 6px;\r\n                            background-color: white;\r\n        \r\n                            -webkit-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            -moz-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                        }\r\n        \r\n                        button {\r\n                            cursor: pointer;\r\n                        }\r\n        \r\n                        [part=\"actions\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part=\"header\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part=\"button\"]:not(:first-child) {\r\n                            margin-left: 4px;\r\n                        }\r\n        \r\n                        :host([type=\"confirm\"]) [part=\"ok-button\"] {\r\n                            display: none !important;\r\n                        }\r\n        \r\n                        :host([type=\"alert\"]) [part=\"cancel-button\"],\r\n                        :host([type=\"alert\"]) [part=\"confirm-button\"] {\r\n                            display: none !important;\r\n                        }\r\n                    `\r\n                    ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"header\"\r\n                },\r\n                children: [\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button close-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"x\"\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"hr\", {\r\n                attributes: {\r\n                    part: \"separator\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"body\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"hr\", {\r\n                attributes: {\r\n                    part: \"separator\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"actions\",\r\n                },\r\n                children: [\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button cancel-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"Cancel\"\r\n                        ]\r\n                    }),\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button confirm-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"Confirm\"\r\n                        ]\r\n                    }),\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button ok-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"OK\"\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n        );\r\n    }\r\n\r\n    connectedCallback() {\r\n        this.shadowRoot.addEventListener(\"click\", this);\r\n    }\r\n\r\n    handleEvent(event: Event) {\r\n        const {type, target} = event;\r\n        switch (type) {\r\n            case \"click\":\r\n                const {part} = <Element>target;\r\n                if (part.contains(\"close-button\") || part.contains(\"cancel-button\")) {\r\n                    this.cancel();\r\n                }\r\n                else if (part.contains(\"confirm-button\") || part.contains(\"ok-button\")) {\r\n                    this.confirm();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    open(): void {\r\n        this.dispatchEvent(new CustomEvent(\"open\", {bubbles: true}));\r\n    }\r\n\r\n    close(): void {\r\n        this.dispatchEvent(new CustomEvent(\"close\", {bubbles: true}));\r\n    }\r\n\r\n    cancel(): void {\r\n        this.dispatchEvent(new CustomEvent(\"cancel\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n\r\n    confirm(): void {\r\n        this.dispatchEvent(new CustomEvent(\"confirm\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n}\r\n\r\nvar HTMLEDialogElement: HTMLEDialogElementConstructor = HTMLEDialogElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEHandleElement };\r\n\r\ninterface HTMLEHandleElementConstructor {\r\n    readonly prototype: HTMLEHandleElement;\r\n    new(): HTMLEHandleElement;\r\n}\r\n\r\ninterface HTMLEHandleElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    controls: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-handle\": HTMLEHandleElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"move\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-handle\"\r\n})\r\nclass HTMLEHandleElementBase extends HTMLElement implements HTMLEHandleElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                            \r\n                            width: 24px;\r\n                            height: 12px;\r\n                            \r\n                            background-color: rgb(0, 128, 255);\r\n\r\n                            -webkit-mask-image: url(\"assets/dots.png\");\r\n                            mask-image: url(\"assets/dots.png\");\r\n\r\n                            -webkit-mask-repeat: repeat;\r\n                            mask-repeat: repeat;\r\n                            cursor: move;\r\n                        }\r\n                    `\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"controls\": {\r\n                const {controls} = this;\r\n                this.#target = document.getElementById(controls);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        this.#target = document.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            const target = this.#target;\r\n            if (target !== null) {\r\n                const targetComputedStyle = window.getComputedStyle(target);\r\n                const {movementX, movementY} = event;\r\n                const {width: rectWidth, height: rectHeight} = target.getBoundingClientRect();\r\n                const outerElement = target.parentElement ?? document.body;\r\n                const {\r\n                    left: outerRectLeft, right: outerRectRight,\r\n                    top: outerRectTop, bottom: outerRectBottom\r\n                } = outerElement.getBoundingClientRect();\r\n                const left = parseFloat(targetComputedStyle.getPropertyValue(\"left\"));\r\n                const newLeft = Math.max(outerRectLeft, Math.min(Math.trunc(left + movementX), outerRectRight - rectWidth));\r\n                const top = parseFloat(targetComputedStyle.getPropertyValue(\"top\"));\r\n                const newTop = Math.max(outerRectTop, Math.min(Math.trunc(top + movementY), outerRectBottom - rectHeight));\r\n                target.style.setProperty(\"left\", `${newLeft}px`);\r\n                target.style.setProperty(\"top\", `${newTop}px`);\r\n                this.dispatchEvent(new CustomEvent(\"move\"));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEHandleElement: HTMLEHandleElementConstructor = HTMLEHandleElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEHeightSashElement };\r\n\r\ninterface HTMLEHeightSashElementConstructor {\r\n    readonly prototype: HTMLEHeightSashElement;\r\n    new(): HTMLEHeightSashElement;\r\n}\r\n\r\ninterface HTMLEHeightSashElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    controls: string;\r\n    growdir: \"top\" | \"bottom\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-hsash\": HTMLEHeightSashElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"resize\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-hsash\"\r\n})\r\nclass HTMLEHeightSashElementBase extends HTMLElement implements HTMLEHeightSashElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"top\"})\r\n    growdir!: \"top\" | \"bottom\";\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n    #queuedPointerCallback: FrameRequestCallback | null;\r\n    #pointerMovement: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            width: 100%;\r\n        \r\n                            max-height: 4px;\r\n                            height: 4px;\r\n                            min-height: 4px;\r\n        \r\n                            margin-top: -2px;\r\n                            margin-bottom: -2px;\r\n                            \r\n                            background-color: rgb(135, 206, 250);\r\n                            cursor: ns-resize;\r\n        \r\n                            transition-property: opacity;\r\n                            transition-delay: 0.2s;\r\n                            transition-duration: 0.2s;\r\n                            transition-timing-function: ease-out;\r\n                            opacity: 0;\r\n                        }\r\n        \r\n                        :host(:active),\r\n                        :host(:hover) {\r\n                            opacity: 1;\r\n                        }\r\n                    `\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#queuedPointerCallback = null;\r\n        this.#pointerMovement = 0;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        const rootNode = <ShadowRoot | Document>this.getRootNode();\r\n        this.#target = rootNode.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            if (this.#queuedPointerCallback == null) {\r\n                this.#pointerMovement = event.movementY;\r\n                this.#queuedPointerCallback = this.#pointerMoveCallback.bind(this);\r\n                requestAnimationFrame(this.#queuedPointerCallback);\r\n            }\r\n            else {\r\n                this.#pointerMovement += event.movementY;\r\n            }\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const {growdir} = this;\r\n            const movementY = this.#pointerMovement;\r\n            const height = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            const newHeight = Math.trunc(height + (growdir == \"top\" ? -1 : 1) * movementY);\r\n            target.style.setProperty(\"height\", `${newHeight}px`);\r\n            const computedNewHeight = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            target.style.setProperty(\"height\", `${computedNewHeight}px`);\r\n            this.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        this.#queuedPointerCallback = null;\r\n    }\r\n}\r\n\r\nvar HTMLEHeightSashElement: HTMLEHeightSashElementConstructor = HTMLEHeightSashElementBase;","import { CustomElement, AttributeProperty } from \"../Element\";\r\n\r\nexport { HTMLEImportElement };\r\n\r\ninterface HTMLEImportElementConstructor {\r\n    readonly prototype: HTMLEImportElement;\r\n    new(): HTMLEImportElement;\r\n}\r\n\r\ninterface HTMLEImportElement extends HTMLElement {\r\n    src: string;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-import\": HTMLEImportElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"load\": Event;\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-import\"\r\n})\r\nclass HTMLEImportElementBase extends HTMLElement implements HTMLEImportElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    src!: string;\r\n    \r\n    connectedCallback(): void {\r\n        const {src} = this;\r\n        if (src) {\r\n            this.#importRequest(src);\r\n        }\r\n    }\r\n\r\n    async #importRequest(src: string): Promise<void> {\r\n        this.outerHTML = await fetch(src).then((response: Response) => {\r\n            if (response.ok) {\r\n                return response.text();\r\n            }\r\n            else {\r\n                throw new Error(response.statusText);\r\n            }\r\n        });\r\n        this.dispatchEvent(new Event(\"load\", {bubbles: true}));\r\n    }\r\n}\r\n\r\nvar HTMLEImportElement: HTMLEImportElementConstructor = HTMLEImportElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLELoaderElement };\r\n\r\ninterface HTMLELoaderElementConstructor {\r\n    readonly prototype: HTMLELoaderElement;\r\n    new(): HTMLELoaderElement;\r\n}\r\n\r\ninterface HTMLELoaderElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    type: \"bar\" | \"circle\";\r\n    promise: Promise<any> | null;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-loader\": HTMLELoaderElement,\r\n    }\r\n}\r\n\r\nvar barShadowTemplate: HTMLTemplateElement;\r\nvar circleShadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-loader\"\r\n})\r\nclass HTMLELoaderElementBase extends HTMLElement implements HTMLELoaderElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String, defaultValue: \"bar\", observed: true})\r\n    type!: \"bar\" | \"circle\";\r\n    \r\n    #promise: Promise<any> | null;\r\n\r\n    static {\r\n        const commonStyle = element(\"style\", {\r\n            children: [\r\n                /*css*/`\r\n                    :host {\r\n                        display: inline-block;\r\n                        --default-loader-color: rgb(0, 128, 255);\r\n                        --default-animation-duration: 2s;\r\n                    }\r\n                `\r\n            ]\r\n        });\r\n        const barStyle = commonStyle.cloneNode(true);\r\n        const circleStyle = commonStyle.cloneNode(true);\r\n        barStyle.textContent += /*css*/`\r\n            :host {\r\n                display: block;\r\n            }\r\n\r\n            [part=\"bar\"] {\r\n                position: relative;\r\n                display: block;\r\n                overflow: hidden;\r\n                height: 6px;\r\n                width: 100%;\r\n            }\r\n\r\n            [part=\"slider\"] {\r\n                display: flex;\r\n                position: absolute;\r\n                width: 100%;\r\n                height: 100%;\r\n                animation-name: slider;\r\n            }\r\n\r\n            [part=\"slider\"],\r\n            [part=\"cursor\"] {\r\n                border-radius: 4px;\r\n                will-change: transform;\r\n                animation-duration: var(--animation-duration, var(--default-animation-duration));\r\n                animation-timing-function: linear;\r\n                animation-iteration-count: infinite;\r\n            }\r\n\r\n            [part=\"cursor\"] {\r\n                display: block;\r\n                width: 128px;\r\n                background-color: var(--loader-color, var(--default-loader-color));\r\n                animation-name: cursor;\r\n            }\r\n\r\n            [part=\"bar\"]:after {\r\n                animation-name: shine;\r\n                animation-duration: var(--animation-duration, var(--default-animation-duration));\r\n                animation-iteration-count: infinite;\r\n                animation-fill-mode: forwards;  \r\n                content: \"\";\r\n                position: absolute;\r\n                left: -100%;\r\n                width: 100%;\r\n                height: 100%;\r\n                top: 0;\r\n                opacity: 0;\r\n                \r\n                background: rgba(255, 255, 255, 0.13);\r\n                background: linear-gradient(\r\n                    to right, \r\n                    rgba(255, 255, 255, 0) 0%,\r\n                    rgba(255, 255, 255, 0.1) 10%,\r\n                    rgba(255, 255, 255, 0.9) 80%,\r\n                    rgba(255, 255, 255, 0) 100%\r\n                );\r\n            }\r\n\r\n            @keyframes shine {\r\n                25% {\r\n                    opacity: 1;\r\n                    left: -100%;\r\n                }\r\n                100% {\r\n                    opacity: 0;\r\n                    left: 100%;\r\n                }\r\n            }\r\n\r\n            @keyframes slider {\r\n                0% {\r\n                    transform: translateX(0%);\r\n                }\r\n                100% {\r\n                    transform: translateX(100%);\r\n                }\r\n            }\r\n\r\n            @keyframes cursor {\r\n                0% {\r\n                    transform: translateX(-100%);\r\n                }\r\n                100% {\r\n                    transform: translateX(100%);\r\n                }\r\n            }\r\n        `;\r\n        circleStyle.textContent += /*css*/`\r\n            :host {\r\n                display: inline-block;\r\n            }\r\n\r\n            [part=\"circle\"] {\r\n                width: 12px;\r\n                height: 12px;\r\n                border-top: 4px solid var(--loader-color, var(--default-loader-color));\r\n                border-right: 4px solid var(--loader-color, var(--default-loader-color));\r\n                border-left: 4px solid transparent;\r\n                border-bottom: 4px solid transparent;\r\n                border-radius: 50%;\r\n                animation-duration: 1s;\r\n                animation-name: circle;\r\n                animation-timing-function: linear;\r\n                animation-iteration-count: infinite;\r\n            }\r\n\r\n            @keyframes circle {\r\n                0% {\r\n                    transform: rotate(0);\r\n                }\r\n                100% {\r\n                    transform: rotate(360deg);\r\n                }\r\n            }\r\n        `;\r\n        barShadowTemplate = element(\"template\");\r\n        barShadowTemplate.content.append(\r\n            barStyle,\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"bar\"\r\n                },\r\n                children: [\r\n                    element(\"div\", {\r\n                        attributes: {\r\n                            part: \"slider\"\r\n                        },\r\n                        children: [\r\n                            element(\"div\", {\r\n                                attributes: {\r\n                                    part: \"cursor\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n        circleShadowTemplate = element(\"template\");\r\n        circleShadowTemplate.content.append(\r\n            circleStyle,\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"circle\"\r\n                }\r\n            })\r\n        )\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.#updateTemplate();\r\n        this.#promise = null;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"type\": {\r\n                this.#updateTemplate();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    set promise(promise: Promise<any> | null) {\r\n        if (promise) {\r\n            promise.finally(() => {\r\n                this.remove();\r\n            });\r\n        }\r\n        this.#promise = promise;\r\n    }\r\n\r\n    get promise(): Promise<any> | null {\r\n        return this.#promise;\r\n    }\r\n\r\n    #updateTemplate(): void {\r\n        const {type, shadowRoot} = this;\r\n        switch (type) {\r\n            case \"circle\": {\r\n                shadowRoot.replaceChildren(\r\n                    circleShadowTemplate.content.cloneNode(true)\r\n                );\r\n                break;\r\n            }\r\n            case \"bar\": {\r\n                shadowRoot.replaceChildren(\r\n                    barShadowTemplate.content.cloneNode(true)\r\n                );\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLELoaderElement: HTMLELoaderElementConstructor = HTMLELoaderElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEWidthSashElement };\r\n\r\ninterface HTMLEWidthSashElementConstructor {\r\n    readonly prototype: HTMLEWidthSashElement;\r\n    new(): HTMLEWidthSashElement;\r\n}\r\n\r\ninterface HTMLEWidthSashElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    controls: string;\r\n    growdir: \"right\" | \"left\";\r\n    max: boolean;\r\n    setWidth(width: number): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-wsash\": HTMLEWidthSashElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"resize\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-wsash\"\r\n})\r\nclass HTMLEWidthSashElementBase extends HTMLElement implements HTMLEWidthSashElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"right\"})\r\n    growdir!: \"right\" | \"left\";\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    max!: boolean;\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n    #queuedPointerCallback: FrameRequestCallback | null;\r\n    #pointerMovement: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            width: 4px;\r\n                            \r\n                            background-color: rgb(135, 206, 250);\r\n                            cursor: ew-resize;\r\n        \r\n                            transition-property: opacity;\r\n                            transition-delay: 0.2s;\r\n                            transition-duration: 0.2s;\r\n                            transition-timing-function: ease-out;\r\n                            opacity: 0;\r\n                        }\r\n        \r\n                        :host(:active),\r\n                        :host(:hover) {\r\n                            opacity: 1;\r\n                        }\r\n                    `\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#queuedPointerCallback = null;\r\n        this.#pointerMovement = 0;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    setWidth(width: number): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const {max} = this;\r\n            target.style.setProperty(\"width\", `${width}px`);\r\n            if (max) {\r\n                target.style.setProperty(\"max-width\", `${width}px`);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        const rootNode = <ShadowRoot | Document>this.getRootNode();\r\n        this.#target = rootNode.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            if (this.#queuedPointerCallback == null) {\r\n                this.#queuedPointerCallback = this.#pointerMoveCallback.bind(this);\r\n                requestAnimationFrame(this.#queuedPointerCallback);\r\n            }\r\n            this.#pointerMovement += event.movementX;\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const {growdir} = this;\r\n            const movementX = this.#pointerMovement;\r\n            const width = parseFloat(targetComputedStyle.getPropertyValue(\"width\"));\r\n            const newWidth = width + (growdir == \"right\" ? 1 : -1) * movementX;\r\n            this.setWidth(newWidth);\r\n            this.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        this.#pointerMovement = 0;\r\n        this.#queuedPointerCallback = null;\r\n    }\r\n}\r\n\r\nvar HTMLEWidthSashElement: HTMLEWidthSashElementConstructor = HTMLEWidthSashElementBase;","import { areAttributesMatching, AttributeMutationMixin } from \"../elements/Element\";\r\n\r\nexport { AttributeMixinsObserver };\r\n\r\ninterface AttributeMixinsObserverConstructor {\r\n    readonly prototype: AttributeMixinsObserver;\r\n    new(mixins: AttributeMutationMixin[]): AttributeMixinsObserver;\r\n}\r\n\r\ninterface AttributeMixinsObserver {\r\n    observe(target: Node): void;\r\n    trigger(): void;\r\n    disconnect(): void;\r\n}\r\n\r\nclass AttributeMixinsObserverBase implements AttributeMixinsObserver {\r\n    #observer: MutationObserver;\r\n    #mixins: AttributeMutationMixin[];\r\n\r\n    constructor(mixins: AttributeMutationMixin[]) {\r\n        this.#observer = new MutationObserver(\r\n            this.#callback.bind(this)\r\n        );\r\n        this.#mixins = mixins.slice();\r\n    }\r\n\r\n    trigger(): void {\r\n        this.#callback(this.#observer.takeRecords());\r\n    }\r\n\r\n    observe(target: Node): void  {\r\n        this.#observer.observe(target, {\r\n            childList: true,\r\n            subtree: true,\r\n            attributeFilter: this.#mixins.map((mixin => mixin.attributeName))\r\n        });\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#observer.disconnect();\r\n    }\r\n\r\n    #callback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            mutation.addedNodes.forEach((node: Node) => {\r\n                if (node instanceof Element) {\r\n                    this.#attachMatchingAttributeMixinsInSubtree(node);\r\n                }\r\n            });\r\n            mutation.removedNodes.forEach((node: Node) => {\r\n                if (node instanceof Element) {\r\n                    this.#detachMatchingAttributeMixinsInSubtree(node);\r\n                }\r\n            });\r\n            if (mutation.target instanceof Element) {\r\n                const targetElement = mutation.target;\r\n                const attributeName = mutation.attributeName;\r\n                if (attributeName) {\r\n                    const relatedMixins = this.#mixins.filter(mixin => mixin.attributeName == attributeName);\r\n                    relatedMixins.forEach((mixin) => {\r\n                        if (areAttributesMatching(\r\n                                mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                                attributeName!, targetElement.getAttribute(attributeName!)\r\n                            )) {\r\n                                mixin.attach(targetElement);\r\n                        }\r\n                        else {\r\n                            mixin.detach(targetElement);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    #attachMatchingAttributeMixinsInSubtree(element: Element) {\r\n        Array.from(element.attributes).forEach((attr) => {\r\n            let matchingMixins = this.#mixins.filter(\r\n                mixin => areAttributesMatching(\r\n                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                    attr.name, attr.value\r\n                )\r\n            );\r\n            matchingMixins.forEach((mixin) => {\r\n                mixin.attach(element);\r\n            });\r\n        });\r\n        let childIndex = 0;\r\n        const {children} = element;\r\n        while (childIndex < children.length) {\r\n            const child = children.item(childIndex);\r\n            if (child !== null) {\r\n                this.#attachMatchingAttributeMixinsInSubtree(child);\r\n            }\r\n            childIndex++;\r\n        }\r\n    }\r\n\r\n    #detachMatchingAttributeMixinsInSubtree(element: Element) {\r\n        Array.from(element.attributes).forEach((attr) => {\r\n            let matchingMixins = this.#mixins.filter(\r\n                mixin => areAttributesMatching(\r\n                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                    attr.name, attr.value\r\n                )\r\n            );\r\n            matchingMixins.forEach((mixin) => {\r\n                mixin.detach(element);\r\n            });\r\n        });\r\n        let childIndex = 0;\r\n        const {children} = element;\r\n        while (childIndex < children.length) {\r\n            const child = children.item(childIndex);\r\n            if (child !== null) {\r\n                this.#detachMatchingAttributeMixinsInSubtree(child);\r\n            }\r\n            childIndex++;\r\n        }\r\n    }\r\n}\r\n\r\nvar AttributeMixinsObserver: AttributeMixinsObserverConstructor = AttributeMixinsObserverBase;","import { Widget, element } from \"../../elements/Element\";\r\nimport { WidgetFactory } from \"./Widget\";\r\n\r\nexport { separatorWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"separator\": SeparatorWidgetFactory\r\n    }\r\n}\r\n\r\ninterface SeparatorWidgetFactory extends WidgetFactory {\r\n\r\n}\r\n\r\nvar separatorWidget = new (\r\nWidget({\r\n    name: \"separator\"\r\n})(class SeparatorWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"separator\",\r\n                role: \"separator\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n}));","import { Widget, element } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuItemWidget };\r\n\r\ntype MenuItemType = \"button\" | \"radio\" | \"checkbox\" | \"menu\" | \"submenu\";\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menuitem\": MenuItemWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        type?: MenuItemType;\r\n        checked?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void;\r\n    getMenu(item: HTMLElement): HTMLElement | null;\r\n    getKeyShortcut(item: HTMLElement): string | null;\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    getType(item: HTMLElement): MenuItemType | null;\r\n    setType(item: HTMLElement, type: MenuItemType): void;\r\n    getValue(item: HTMLElement): string;\r\n    setValue(item: HTMLElement, value: string): void;\r\n    getName(item: HTMLElement): string;\r\n    setName(item: HTMLElement, value: string): void;\r\n    getChecked(item: HTMLElement): boolean;\r\n    setChecked(item: HTMLElement, value: boolean): void;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setExpanded(item: HTMLElement, value: boolean): void;\r\n    getExpanded(item: HTMLElement): boolean;\r\n    trigger(item: HTMLElement): void;\r\n    toggle(item: HTMLElement, force?: boolean): void;\r\n    expand(item: HTMLElement): void;\r\n    collapse(item: HTMLElement): void;\r\n}\r\n\r\nvar menuItemWidget = new(\r\nWidget({\r\n    name: \"menuitem\"\r\n})(\r\nclass MenuItemWidgetFactoryBase extends WidgetFactory implements MenuItemWidgetFactory {\r\n    #iconPartTemplate: HTMLElement;\r\n    #arrowPartTemplate : HTMLElement;\r\n    #keyshortcutsPartTemplate: HTMLElement;\r\n    #template: HTMLElement;\r\n    #types: MenuItemType[];\r\n    #typesFeatures: {\r\n        [key in MenuItemType]: {\r\n            role: string,\r\n            hasIcon: boolean,\r\n            hasArrow: boolean\r\n        }\r\n    };\r\n\r\n    constructor() {\r\n        super();\r\n        this.#iconPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"icon\"\r\n            }\r\n        });\r\n        this.#arrowPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"arrow\"\r\n            }\r\n        });\r\n        this.#keyshortcutsPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"keyshortcuts\"\r\n            }\r\n        });\r\n        this.#template = element(\"button\", {\r\n            attributes: {\r\n                class: \"menuitem\",\r\n                role: \"menuitem\",\r\n                type: \"button\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                this.#iconPartTemplate.cloneNode(true),\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n        this.#types = [\"checkbox\", \"radio\", \"menu\", \"submenu\", \"button\"];\r\n        this.#typesFeatures = {\r\n            button: {\r\n                role: \"menuitem\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            checkbox: {\r\n                role: \"menuitemcheckbox\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            radio: {\r\n                role: \"menuitemradio\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            menu: {\r\n                role: \"menuitem\",\r\n                hasIcon: false,\r\n                hasArrow: false\r\n            },\r\n            submenu: {\r\n                role: \"menuitem\",\r\n                hasIcon: true,\r\n                hasArrow: true\r\n            }\r\n        }\r\n    }\r\n\r\n    create(init?: {\r\n        type: MenuItemType;\r\n        checked?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (init !== void 0) {\r\n            const {keyshortcut, checked, type, label, name, value, disabled} = init;\r\n            if (keyshortcut !== void 0) {\r\n                this.setKeyShortcut(item, keyshortcut);\r\n            }\r\n            if (checked !== void 0) {\r\n                this.setChecked(item, checked);\r\n            }\r\n            if (type !== void 0) {\r\n                this.setType(item, type);\r\n            }\r\n            if (label !== void 0) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (name !== void 0) {\r\n                this.setName(item, name);\r\n            }\r\n            if (value !== void 0) {\r\n                this.setValue(item, value);\r\n            }\r\n            if (disabled !== void 0) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(root: HTMLElement, name: string | null): HTMLElement | null {\r\n        return root;\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void {\r\n        const hasChildMenu = Array.from(slot.childNodes).some(\r\n            childNode_i => childNode_i instanceof HTMLElement && childNode_i.classList.contains(\"menu\")\r\n        );\r\n        item.setAttribute(\"aria-haspopup\", hasChildMenu.toString());\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        const label = item.querySelector<HTMLElement>(\":scope > .label\");\r\n        if (!label) {\r\n            throw new Error(`No label found.`);\r\n        }\r\n        return label;\r\n    }\r\n\r\n    getMenu(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .menu\");\r\n    }\r\n\r\n    getKeyShortcut(item: HTMLElement): string | null {\r\n        return item.getAttribute(\"aria-keyshortcuts\");\r\n    }\r\n\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void {\r\n        let keyshortcutsPart = item.querySelector(\":scope > .keyshortcuts\");\r\n        if (value !== null) {\r\n            item.setAttribute(\"aria-keyshortcuts\", value);\r\n            if (!keyshortcutsPart) {\r\n                const labelPart = this.#label(item);\r\n                const keyshortcutsPartTemplate = this.#keyshortcutsPartTemplate;\r\n                keyshortcutsPart = <HTMLElement>keyshortcutsPartTemplate.cloneNode(true);\r\n                labelPart.after(keyshortcutsPart);\r\n            }\r\n            keyshortcutsPart.textContent = value;\r\n        }\r\n        else {\r\n            item.removeAttribute(\"aria-keyshortcuts\");\r\n            if (keyshortcutsPart) {\r\n                keyshortcutsPart.remove();\r\n            }\r\n        }\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n    \r\n    getType(item: HTMLElement): MenuItemType | null {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`menuitem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setType(item: HTMLElement, type: MenuItemType): void {\r\n        const typesFeatures = this.#typesFeatures;\r\n        const iconPartTemplate = this.#iconPartTemplate;\r\n        const arrowPartTemplate = this.#arrowPartTemplate;\r\n        const {role, hasIcon, hasArrow} = typesFeatures[type];\r\n        const oldType = this.getType(item);\r\n        const {classList} = item;\r\n        if (oldType) {\r\n            classList.remove(`menuitem-${oldType}`);\r\n        }\r\n        classList.add(`menuitem-${type}`);\r\n        item.setAttribute(\"role\", role);\r\n        const labelPart = this.#label(item);\r\n        const iconPart = item.querySelector(\":scope > .icon\");\r\n        const arrowPart = item.querySelector(\":scope > .arrow\");\r\n        if (hasIcon) {\r\n            if (!iconPart && labelPart) {\r\n                labelPart.before(iconPartTemplate.cloneNode(true));\r\n            }\r\n        }\r\n        else {\r\n            if (iconPart) {\r\n                iconPart.remove();\r\n            }\r\n        }\r\n        if (hasArrow) {\r\n            if (!arrowPart && labelPart) {\r\n                labelPart.after(arrowPartTemplate.cloneNode(true));\r\n            }\r\n        }\r\n        else {\r\n            if (arrowPart) {\r\n                arrowPart.remove();\r\n            }\r\n        }\r\n    }\r\n\r\n    getValue(item: HTMLElement): string {\r\n        return item.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"value\", value);\r\n    }\r\n    \r\n    getName(item: HTMLElement): string {\r\n        return item.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getChecked(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-checked\") ?? false.toString());\r\n    }\r\n\r\n    setChecked(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-checked\", value.toString());\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-expanded\", value);\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-expanded\");\r\n    }\r\n\r\n    trigger(item: HTMLElement): void {\r\n        const disabled = this.getDisabled(item);\r\n        if (!disabled) {\r\n            const type = this.getType(item);\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.setChecked(item, !this.getChecked(item));\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.setChecked(item, true);\r\n                    break;\r\n                }\r\n                case \"menu\":\r\n                case \"submenu\": {\r\n                    this.toggle(item);\r\n                    break;\r\n                }\r\n            }\r\n            item.dispatchEvent(new Event(\"trigger\", {\r\n                bubbles: true\r\n            }));\r\n        }\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        const disabled = this.getDisabled(item);\r\n        if (!disabled) {\r\n            const expand = force ?? !this.getExpanded(item);\r\n            this.setExpanded(item, expand);\r\n            if (expand) {\r\n                this.#positionMenu(item);\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(item: HTMLElement): void {\r\n        const disabled = this.getDisabled(item);\r\n        if (!disabled) {\r\n            const expanded = this.getExpanded(item);\r\n            if (!expanded) {\r\n                this.setExpanded(item, true);\r\n                this.#positionMenu(item);\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(item: HTMLElement): void {\r\n        const disabled = this.getDisabled(item);\r\n        if (!disabled) {\r\n            const expanded = this.getExpanded(item);\r\n            if (expanded) {\r\n                this.setExpanded(item, false);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        if (target == currentTarget) {\r\n            this.trigger(<HTMLElement>currentTarget);\r\n        }\r\n    }\r\n\r\n    #positionMenu(item: HTMLElement): void {\r\n        const menu = this.getMenu(item);\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = item.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const type = this.getType(item);\r\n            if (type == \"menu\") {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const closestMenu = item.closest(\".menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    const overflowX = itemRight + menuWidth - clientWidth;\r\n                    const overflowY = itemTop + menuHeight - clientHeight;\r\n                    menuStyle.setProperty(\"left\", `${\r\n                        overflowX > 0 ?\r\n                        itemLeft - menuWidth - closestMenuLeft :\r\n                        itemRight - closestMenuLeft\r\n                    }px`);\r\n                    const menuComputedStyle = window.getComputedStyle(menu);\r\n                    const {paddingTop, paddingBottom} = menuComputedStyle;\r\n                    const menuPaddingTop = parseFloat(paddingTop);\r\n                    const menuPaddingBottom = parseFloat(paddingBottom);\r\n                    menuStyle.setProperty(\"top\", `${\r\n                        overflowY > 0 ?\r\n                        itemBottom - menuHeight - closestMenuTop + menuPaddingBottom :\r\n                        itemTop - closestMenuTop - menuPaddingTop\r\n                    }px`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}));","import { element, Widget } from \"../../../elements/Element\";\r\nimport { menuItemWidget } from \"./MenuItemWidget\";\r\nimport { WidgetFactory } from \"../Widget\";\r\n\r\nexport { menubarWidget };\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menubar\": MenuBarWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuBarWidgetFactory extends WidgetFactory {\r\n    setExpanded(menubar: HTMLElement, value: boolean): void;\r\n    getExpanded(menubar: HTMLElement): boolean;\r\n}\r\n\r\nvar menubarWidget = new (\r\nWidget({\r\n    name: \"menubar\"\r\n})(class MenubarWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menubar\",\r\n                role: \"menubar\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        )\r\n    }\r\n\r\n    create() {\r\n        const menubar = <HTMLElement>this.#template.cloneNode(true);\r\n        menubar.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        menubar.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        menubar.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        menubar.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        menubar.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        menubar.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n        return menubar;\r\n    }\r\n\r\n    setExpanded(menubar: HTMLElement, value: boolean): void {\r\n        menubar.toggleAttribute(\"aria-expanded\", value);\r\n    }\r\n\r\n    getExpanded(menubar: HTMLElement): boolean {\r\n        return menubar.hasAttribute(\"aria-expanded\");\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node) {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"menuitem\")) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"menuitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getActiveItem(menubar: HTMLElement): HTMLElement | null {\r\n        return menubar.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem:focus-within\"\r\n        );\r\n    }\r\n\r\n    #firstItem(menubar: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menubar;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(menubar: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menubar;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n\r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = menuItemWidget.getMenu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #isClosestMenu(menubar: HTMLElement, target: HTMLElement): boolean {\r\n        return target.closest(\":is(.menubar, .menu)\") == menubar;\r\n    }\r\n\r\n    #nearestItem(menubar: HTMLElement, target: HTMLElement): HTMLElement | null {\r\n        return Array.from(menubar.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && this.getExpanded(menubar)) {\r\n            const nearestItem = this.#nearestItem(menubar, target);\r\n            if (nearestItem) {\r\n                menuItemWidget.expand(nearestItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && !target.contains(<Element>relatedTarget)) {\r\n            const nearestItem = this.#nearestItem(menubar, target);\r\n            if (nearestItem) {\r\n                menuItemWidget.collapse(nearestItem);\r\n            }\r\n        }\r\n        const lostFocusWithin = !menubar.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.setExpanded(menubar, false);\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const activeItem = this.#getActiveItem(menubar);\r\n            const expanded = this.getExpanded(menubar);\r\n            const isClosestMenu = this.#isClosestMenu(menubar, target);\r\n            if (isClosestMenu && target !== activeItem && expanded) {\r\n                const menu = menuItemWidget.getMenu(target);\r\n                if (menu) {\r\n                    menu.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    target.focus({preventScroll: true});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(menubar);\r\n        const expanded = this.getExpanded(menubar);\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const isClosestMenu = this.#isClosestMenu(menubar, target);\r\n            if (isClosestMenu) {\r\n                const isExpanded = !expanded;\r\n                this.setExpanded(menubar, isExpanded);\r\n                if (isExpanded) {\r\n                    if (activeItem !== null && !menuItemWidget.getExpanded(activeItem)) {\r\n                        menuItemWidget.expand(activeItem);\r\n                    }\r\n                    const menu = menuItemWidget.getMenu(target);\r\n                    menu?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    menubar.focus({preventScroll: true})\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        let activeItem = this.#getActiveItem(menubar);\r\n        const expanded = this.getExpanded(menubar);\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem(menubar) :\r\n                    this.#firstItem(menubar);\r\n                previousItem?.focus({preventScroll: true});\r\n                activeItem = this.#getActiveItem(menubar);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem(menubar) : \r\n                    this.#lastItem(menubar);\r\n                nextItem?.focus({preventScroll: true});\r\n                activeItem = this.#getActiveItem(menubar);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    this.setExpanded(menubar, !expanded);\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.setExpanded(menubar, false);\r\n                    if (activeItem) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    menubar.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleTriggerEvent(event: Event): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        const expanded = this.getExpanded(menubar);\r\n        if (expanded && target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const targetType = menuItemWidget.getType(target);\r\n            const activeItem = this.#getActiveItem(menubar);\r\n            if (target !== activeItem && targetType !== \"menu\" && targetType !== \"submenu\") {\r\n                menuItemWidget.collapse(target);\r\n                this.setExpanded(menubar, false);\r\n                menubar.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n}));","import { Widget, element } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\nimport { menuItemWidget } from \"./MenuItemWidget\";\r\n\r\nexport { menuWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menu\": MenuWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        contextual?: boolean;\r\n    }): HTMLElement;\r\n    positionContextual(menu: HTMLElement, x: number, y: number): void;\r\n    getContextual(menu: HTMLElement): boolean;\r\n    setContextual(menu: HTMLElement, value: boolean): void;\r\n    items(menu: HTMLElement): HTMLElement[];\r\n}\r\n\r\nvar mouseOverExpandDelay = 0_200;\r\nvar mouseOutCollapseDelay = 0_400;\r\n\r\nvar menuWidget = new (\r\nWidget({\r\n    name: \"menu\"\r\n})(class MenuWidgetFactoryBase extends WidgetFactory implements MenuWidgetFactory {\r\n\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #toggleTimeouts: WeakMap<HTMLElement, {clear(): void;}>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menu\",\r\n                role: \"menu\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#toggleTimeouts = new WeakMap();\r\n    }\r\n\r\n    create(init?: {\r\n        contextual?: boolean;\r\n    }): HTMLElement {\r\n        const menu = <HTMLElement>this.#template.cloneNode(true);\r\n        menu.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        menu.addEventListener(\"mouseout\", this.#handleMouseOutEvent.bind(this));\r\n        menu.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        menu.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        menu.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n        if (init !== void 0) {\r\n            const {contextual} = init;\r\n            if (contextual !== void 0) {\r\n                this.setContextual(menu, contextual);\r\n            }\r\n        }\r\n        return menu;\r\n    };\r\n\r\n    positionContextual(menu: HTMLElement, x: number, y: number): void {\r\n        const {style} = menu;\r\n        const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        const left = x + scrollX;\r\n        const top = y + scrollY;\r\n        const {clientWidth, clientHeight} = document.body;\r\n        const overflowX = left + menuWidth - clientWidth;\r\n        const overflowY = top + menuHeight - clientHeight;\r\n        style.setProperty(\"left\", `${overflowX > 0 ? left - menuWidth : left}px`);\r\n        style.setProperty(\"top\", `${overflowY > 0 ? top - menuHeight : top}px`);\r\n    }\r\n\r\n    getContextual(menu: HTMLElement): boolean {\r\n        const {classList} = menu;\r\n        return classList.contains(\"menu-contextual\");\r\n    }\r\n\r\n    setContextual(menu: HTMLElement, value: boolean): void {\r\n        const {classList} = menu;\r\n        if (value) {\r\n            classList.add(\"menu-contextual\");\r\n        }\r\n        else {\r\n            classList.remove(\"menu-contextual\");\r\n        }\r\n    }\r\n\r\n    items(menu: HTMLElement): HTMLElement[] {\r\n        return Array.from(menu.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        ));\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"menuitem\")) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"menuitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #collapseSubmenus(menu: HTMLElement): void {\r\n        menu.querySelectorAll<HTMLElement>(\":is(:scope, :scope > .menuitemgroup) > .menuitem[aria-expanded]\")\r\n            .forEach(menuitem_i => menuItemWidget.collapse(menuitem_i));\r\n    }\r\n\r\n    #isClosestMenu(menu: HTMLElement, target: HTMLElement): boolean {\r\n        return target.closest(\".menu\") == menu;\r\n    }\r\n\r\n    #nearestItem(menu: HTMLElement, target: HTMLElement): HTMLElement | null {\r\n        return Array.from(menu.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #firstItem(menu: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menu;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(menu: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menu;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n\r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = menuItemWidget.getMenu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #getActiveItem(menu: HTMLElement): HTMLElement | null {\r\n        return menu.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem:focus-within\"\r\n        );\r\n    }\r\n\r\n    async #setItemTimeout(item: HTMLElement, delay?: number): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => {\r\n                resolve(void 0);\r\n            }, delay ?? 0);\r\n            this.#toggleTimeouts.set(item, {\r\n                clear: () => {\r\n                    clearTimeout(timeout);\r\n                    reject();\r\n                }\r\n            });\r\n        }).then(() => {\r\n            this.#toggleTimeouts.delete(item);\r\n        });\r\n    }\r\n\r\n    #clearItemTimeout(item: HTMLElement): void {\r\n        const timeout = this.#toggleTimeouts.get(item);\r\n        if (typeof timeout !== \"undefined\") {\r\n            this.#toggleTimeouts.delete(item);\r\n            timeout.clear();\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const menu = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !menu.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin && target instanceof HTMLElement) {\r\n            const contextual = this.getContextual(menu);\r\n            if (contextual) {\r\n                try {\r\n                    menu.remove();\r\n                } catch (error) {};\r\n            }\r\n            else {\r\n                const nearestItem = this.#nearestItem(menu, target);\r\n                if (nearestItem) {\r\n                    menuItemWidget.collapse(nearestItem);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const menu = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(menu);\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem(menu) :\r\n                    this.#firstItem(menu);\r\n                previousItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem(menu) :\r\n                    this.#lastItem(menu);\r\n                nextItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(menu);\r\n                firstItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(menu);\r\n                lastItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const type = menuItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            menuItemWidget.expand(activeItem);\r\n                            const firstChildItem = this.#firstChildItem(activeItem);\r\n                            firstChildItem?.focus({preventScroll: true});\r\n                            event.preventDefault();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                    \r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                    ) == menu;\r\n                    if (!isClosestTargetMenu) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                    ) == menu;\r\n                    if (!isClosestTargetMenu) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const type = menuItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            const expanded = menuItemWidget.getExpanded(activeItem);\r\n                            if (!expanded) {\r\n                                menuItemWidget.expand(activeItem);\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                                event.stopPropagation();\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOutEvent(event: MouseEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const menu = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const nearestItem = this.#nearestItem(menu, target);\r\n            if (nearestItem !== null) {\r\n                if (menuItemWidget.getType(nearestItem) == \"submenu\" &&\r\n                    !menuItemWidget.getExpanded(nearestItem)) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                ) == menu;\r\n                if (isTargetClosestMenu) {\r\n                    const activeItem = this.#getActiveItem(menu);\r\n                    if (activeItem !== null &&\r\n                        menuItemWidget.getType(activeItem) == \"submenu\" &&\r\n                        menuItemWidget.getExpanded(activeItem)) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, mouseOutCollapseDelay)\r\n                            .then(() => {\r\n                                menuItemWidget.collapse(activeItem);\r\n                            })\r\n                            .catch(() => void 0);\r\n                    }\r\n                    const {clientX, clientY} = event;\r\n                    const {left, right, top, bottom} = menu.getBoundingClientRect();\r\n                    const intersectsWithMouse = !(\r\n                        left > clientX || right < clientX || top > clientY || bottom < clientY\r\n                    );\r\n                    const containsRelatedTarget = menu.contains(<Node>relatedTarget);\r\n                    if (intersectsWithMouse && containsRelatedTarget) {\r\n                        if (relatedTarget instanceof HTMLElement && relatedTarget.classList.contains(\"menu\") && relatedTarget !== menu) {\r\n                            relatedTarget.focus({preventScroll: true});\r\n                        }\r\n                        else {\r\n                            menu.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    if (!intersectsWithMouse) {\r\n                        menu.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menu = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const nearestItem = this.#nearestItem(menu, target); \r\n            if (nearestItem !== null) {\r\n                if (menuItemWidget.getType(nearestItem) == \"submenu\" &&\r\n                    menuItemWidget.getExpanded(nearestItem)) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                ) == menu;\r\n                if (isTargetClosestMenu) {\r\n                    const activeItem = this.#getActiveItem(menu);\r\n                    if (activeItem !== null) {\r\n                        if (menuItemWidget.getType(activeItem) == \"submenu\" &&\r\n                            menuItemWidget.getExpanded(activeItem) && \r\n                            !activeItem.contains(<HTMLElement>target)) {\r\n                            this.#clearItemTimeout(activeItem);\r\n                            this.#setItemTimeout(activeItem, mouseOutCollapseDelay)\r\n                                .then(() => {\r\n                                    menuItemWidget.collapse(activeItem);\r\n                                })\r\n                                .catch(() => void 0);\r\n                        }\r\n                    }\r\n                    nearestItem.focus({preventScroll: true});\r\n                    if (menuItemWidget.getType(nearestItem) == \"submenu\") {\r\n                        if (!menuItemWidget.getExpanded(nearestItem)) {\r\n                            this.#clearItemTimeout(nearestItem);\r\n                            this.#setItemTimeout(nearestItem, mouseOverExpandDelay)\r\n                                .then(() => {\r\n                                    const activeItem = this.#getActiveItem(menu);\r\n                                    this.#collapseSubmenus(menu);\r\n                                    if (activeItem) {\r\n                                        this.#clearItemTimeout(activeItem);\r\n                                        menuItemWidget.expand(activeItem);\r\n                                        menuItemWidget.getMenu(activeItem)?.focus({preventScroll: true});\r\n                                    }\r\n                                })\r\n                                .catch(() => void 0);\r\n                        }\r\n                        else {\r\n                            menuItemWidget.getMenu(nearestItem)?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleTriggerEvent(event: Event): void {\r\n        const {target, currentTarget} = event;\r\n        const menu = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const contextual = this.getContextual(menu);\r\n            if (contextual) {\r\n                try {\r\n                    menu.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const isClosestMenu = this.#isClosestMenu(menu, target);\r\n                if (isClosestMenu) {\r\n                    const type = menuItemWidget.getType(target);\r\n                    const name = menuItemWidget.getName(target);\r\n                    const value = menuItemWidget.getValue(target);\r\n                    if (type == \"radio\") {\r\n                        menu.querySelectorAll<HTMLElement>(\r\n                            `:is(:scope, :scope > .menuitemgroup) > .menuitem-radio[name=${name}]`\r\n                        )\r\n                        .forEach((radio_i) => {\r\n                            menuItemWidget.setChecked(radio_i, menuItemWidget.getValue(radio_i) == value);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}));","import { Widget, element } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menuitemgroup\": MenuItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar menuItemGroupWidget = new (\r\nWidget({\r\n    name: \"menuitemgroup\"\r\n})(class MenuItemGroupWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menuitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n}));","import { element, Widget } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\n\r\nexport { treeitemWidget };\r\n\r\ntype TreeItemType = \"parent\" | \"leaf\";\r\n\r\ninterface TreeItemWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        type: TreeItemType;\r\n        label?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    getGroup(item: HTMLElement): HTMLElement | null;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setExpanded(item: HTMLElement, value: boolean): void;\r\n    getExpanded(item: HTMLElement): boolean;\r\n    getType(item: HTMLElement): TreeItemType | null;\r\n    setType(item: HTMLElement, value: TreeItemType): void;\r\n    toggle(item: HTMLElement, force?: boolean): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"treeitem\": TreeItemWidgetFactory,\r\n    }\r\n}\r\n\r\nvar treeitemWidget = new (\r\nWidget({\r\n    name: \"treeitem\"\r\n})(class TreeItemWidgetFactoryBase extends WidgetFactory implements TreeItemWidgetFactory {\r\n    #arrowPartTemplate : HTMLElement;\r\n    #template: HTMLElement;\r\n    #types: TreeItemType[];\r\n    #typesFeatures: {\r\n        [key in TreeItemType]: {\r\n            role: string,\r\n            hasArrow: boolean\r\n        }\r\n    };\r\n\r\n    constructor() {\r\n        super();\r\n        this.#arrowPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"arrow\"\r\n            }\r\n        });\r\n        this.#template = element(\"li\", {\r\n            attributes: {\r\n                class: \"treeitem\",\r\n                role: \"treeitem\",\r\n                type: \"treeitem-leaf\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"content\"\r\n                    },\r\n                    children: [\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"label\"\r\n                            }\r\n                        }),\r\n                        element(\"slot\")\r\n                    ]\r\n                }),\r\n                element(\"slot\", {\r\n                    attributes: {\r\n                        name: \"group\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n        this.#types = [\"parent\", \"leaf\"];\r\n        this.#typesFeatures = {\r\n            parent: {\r\n                role: \"treeitem\",\r\n                hasArrow: true\r\n            },\r\n            leaf: {\r\n                role: \"treeitem\",\r\n                hasArrow: false\r\n            }\r\n        };\r\n    }\r\n\r\n    getGroup(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .treeitemgroup\");\r\n    }\r\n\r\n    create(init?: {\r\n        type: TreeItemType;\r\n        label?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (init !== void 0) {\r\n            const {type, label, disabled} = init;\r\n            if (type !== void 0) {\r\n                this.setType(item, type);\r\n            }\r\n            if (label !== void 0) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (disabled !== void 0) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    #content(item: HTMLElement): HTMLElement {\r\n        const content = item.querySelector<HTMLElement>(\":scope > .content\");\r\n        if (!content) {\r\n            throw new Error(`No content found.`);\r\n        }\r\n        return content;\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        const label = item.querySelector<HTMLElement>(\":scope > .content > .label\");\r\n        if (!label) {\r\n            throw new Error(`No label found.`);\r\n        }\r\n        return label;\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", value.toString());\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    getType(item: HTMLElement): TreeItemType | null {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`treeitem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setType(item: HTMLElement, type: TreeItemType): void {\r\n        const typesFeatures = this.#typesFeatures;\r\n        const arrowPartTemplate = this.#arrowPartTemplate;\r\n        const {role, hasArrow} = typesFeatures[type];\r\n        const oldType = this.getType(item);\r\n        const {classList} = item;\r\n        if (oldType) {\r\n            classList.remove(`treeitem-${oldType}`);\r\n        }\r\n        classList.add(`treeitem-${type}`);\r\n        item.setAttribute(\"role\", role);\r\n        const contentPart = this.#content(item);\r\n        const arrowPart = item.querySelector(\":scope > .arrow\");\r\n        if (hasArrow) {\r\n            if (!arrowPart && contentPart) {\r\n                contentPart.prepend(arrowPartTemplate.cloneNode(true));\r\n            }\r\n        }\r\n        else {\r\n            if (arrowPart) {\r\n                arrowPart.remove();\r\n            }\r\n        }\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-expanded\", value);\r\n        item.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-expanded\");\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            if (!classList.contains(\"active\")) {\r\n                classList.add(\"active\");\r\n            }\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            if (!classList.contains(\"droptarget\")) {\r\n                classList.add(\"droptarget\");\r\n            }\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-selected\", value);\r\n        item.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-selected\");\r\n    }\r\n\r\n    setLevel(item: HTMLElement, value: number): void {\r\n        item.style.setProperty(\"--level\", value.toString());\r\n    }\r\n\r\n    getLevel(item: HTMLElement): number {\r\n        return parseInt(item.style.getPropertyValue(\"--level\"));\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        this.setExpanded(item, force ?? !this.getExpanded(item));\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget, shiftKey, ctrlKey} = event;\r\n        const targetClosestItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n        if (targetClosestItem == currentTarget) {\r\n            const type = this.getType(targetClosestItem);\r\n            if (type == \"parent\" && !(shiftKey || ctrlKey)) {\r\n                this.toggle(targetClosestItem);\r\n            }\r\n        }\r\n    }\r\n}));","import { element, Widget } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\nimport { treeitemWidget } from \"./TreeItemWidget\";\r\n\r\nexport { treeWidget };\r\n\r\ninterface TreeWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n    items(tree: HTMLElement): HTMLElement[];\r\n    selectedItems(tree: HTMLElement): HTMLElement[];\r\n    beginSelection(tree: HTMLElement): void;\r\n    endSelection(tree: HTMLElement): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"tree\": TreeWidgetFactory,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\nvar treeWidget = new (\r\nWidget({\r\n    name: \"tree\"\r\n})(class TreeWidgetFactoryBase extends WidgetFactory implements TreeWidgetFactory {\r\n\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"tree\",\r\n                role: \"tree\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(): HTMLElement {\r\n        const tree = <HTMLElement>this.#template.cloneNode(true);\r\n        tree.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        tree.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this), true);\r\n        tree.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        tree.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        tree.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        tree.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        tree.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        tree.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        tree.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        tree.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        tree.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        tree.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        tree.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        this.#onSelection.set(tree, false);\r\n        this.#hasSelectionChanged.set(tree, false);\r\n        return tree;\r\n    }\r\n\r\n    #getActiveItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\r\n            \".treeitem.active\"\r\n        );\r\n    }\r\n\r\n    #getDropTargetItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\r\n            \".treeitem.droptarget\"\r\n        );\r\n    }\r\n    \r\n    #getDropTarget(tree: HTMLElement): boolean {\r\n        const {classList} = tree;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    #setDropTarget(tree: HTMLElement, droptarget: boolean): void {\r\n        const {classList} = tree;\r\n        if (droptarget) {\r\n            if (!classList.contains(\"droptarget\")) {\r\n                classList.add(\"droptarget\");\r\n            }\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    items(menu: HTMLElement): HTMLElement[] {\r\n        return Array.from(menu.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .treeitemgroup) > .treeitem\"\r\n        ));\r\n    }\r\n\r\n    selectedItems(tree: HTMLElement): HTMLElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        let item = this.#firstItem(tree);\r\n        while (item !== null) {\r\n            const selected = treeitemWidget.getSelected(item);\r\n            if (selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(tree: HTMLElement): void {\r\n        this.#onSelection.set(tree, true);\r\n    }\r\n\r\n    endSelection(tree: HTMLElement): void {\r\n        this.#onSelection.set(tree, false);\r\n        if (this.#hasSelectionChanged.get(tree)) {\r\n            tree.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(tree, false);\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"treeitem\")) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"treeitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleItem = this.#nextItem(from);\r\n            while (nextVisibleItem && nextVisibleItem !== to) {\r\n                range.push(nextVisibleItem);\r\n                nextVisibleItem = this.#nextItem(nextVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleItem = this.#previousItem(from);\r\n            while (previousVisibleItem && previousVisibleItem !== to) {\r\n                range.push(previousVisibleItem);\r\n                previousVisibleItem = this.#previousItem(previousVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        selectedItems.forEach((item_i) => {\r\n            if (!items.includes(item_i)) {\r\n                treeitemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            const selected = treeitemWidget.getSelected(item_i);\r\n            if (tree.contains(item_i) && !selected) {\r\n                treeitemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #addToSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        this.beginSelection(tree);\r\n        items.forEach((item_i) => {\r\n            if (!treeitemWidget.getSelected(item_i)) {\r\n                treeitemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #removeFromSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                treeitemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #clearSelection(tree: HTMLElement): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        selectedItems.forEach((item_i) => {\r\n            treeitemWidget.setSelected(item_i, false);\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #setActiveItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(tree);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            treeitemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = item;\r\n            treeitemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n    \r\n    #setDropTargetItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const dropTargetItem = this.#getDropTargetItem(tree);\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            treeitemWidget.setDropTarget(dropTargetItem, false);\r\n        }\r\n        if (item !== null) {\r\n            this.#setDropTarget(tree, true);\r\n            treeitemWidget.setDropTarget(item, false);\r\n        }\r\n        else {\r\n            this.#setDropTarget(tree, false);\r\n        }\r\n    }\r\n\r\n    #firstItem(tree: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(tree: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousSibling = <HTMLElement | null>walker.previousSibling();\r\n        return previousSibling ?\r\n            this.#deepestItem(previousSibling) :\r\n            <HTMLElement | null>walker.parentNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const type = treeitemWidget.getType(item);\r\n        const expanded = treeitemWidget.getExpanded(item);\r\n        return <HTMLElement | null>(\r\n            type === \"leaf\" ?\r\n                walker.nextNode() :\r\n                expanded ?\r\n                    walker.nextNode() :\r\n                    walker.nextSibling() ??\r\n                    (walker.parentNode(), walker.nextSibling())\r\n        );\r\n    }\r\n\r\n    #deepestItem(item: HTMLElement): HTMLElement {\r\n        const expanded = treeitemWidget.getExpanded(item);\r\n        if (expanded) {\r\n            const walker = this.#walker;\r\n            const lastItem = <HTMLElement>walker.lastChild();\r\n            if (lastItem) {\r\n                return this.#deepestItem(lastItem);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const selectedItems = this.selectedItems(targetTree);\r\n        if (targetItem) {\r\n            if (!shiftKey && !ctrlKey) {\r\n                this.#setSelection(targetTree, targetItem);\r\n            }\r\n            else if (ctrlKey) {\r\n                const selected = treeitemWidget.getSelected(targetItem);\r\n                if (selected) {\r\n                    targetItem.blur();\r\n                }\r\n                (!selected) ?\r\n                    this.#addToSelection(targetTree, targetItem) :\r\n                    this.#removeFromSelection(targetTree, targetItem);\r\n                event.stopPropagation();\r\n            }\r\n            else if (shiftKey) {\r\n                const lastSelectedItem = selectedItems[selectedItems.length - 1];\r\n                if (lastSelectedItem) {\r\n                    const range = this.#getItemsRange(\r\n                        lastSelectedItem,\r\n                        targetItem\r\n                    );\r\n                    if (range) {\r\n                        if (selectedItems.includes(targetItem)) {\r\n                            this.#removeFromSelection(targetTree, ...range);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(targetTree, ...range);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.#setSelection(targetTree, targetItem);\r\n                }\r\n                event.stopPropagation();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            const selectedItems = this.selectedItems(targetTree);\r\n            if (!selectedItems.includes(targetItem)) {\r\n                this.#setSelection(targetTree, targetItem);\r\n            }\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            const type = treeitemWidget.getType(targetItem);\r\n            if (type == \"parent\") {\r\n                treeitemWidget.toggle(targetItem, true);\r\n            }\r\n            this.#setDropTargetItem(targetTree, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!targetTree.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(targetTree, null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"treeitem\")) {\r\n            const selectedItems = this.selectedItems(targetTree);\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(targetTree, target);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetTree);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetTree, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetTree, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(\r\n                                firstItem,\r\n                                this.#deepestItem(lastItem)\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetTree, ...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const expanded = treeitemWidget.getExpanded(activeItem);\r\n                    if (expanded) {\r\n                        treeitemWidget.toggle(activeItem);\r\n                    }\r\n                    else {\r\n                        const walker = this.#walker;\r\n                        const parentItem = <HTMLElement>walker.parentNode();\r\n                        if (parentItem) {\r\n                            parentItem.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const expanded = treeitemWidget.getExpanded(activeItem);\r\n                    if (!expanded) {\r\n                        treeitemWidget.toggle(activeItem);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = treeitemWidget.getSelected(previousItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetTree, previousItem) :\r\n                                this.#addToSelection(targetTree, previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetTree);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = treeitemWidget.getSelected(nextItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetTree, nextItem) :\r\n                                this.#addToSelection(targetTree, nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetTree);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetTree);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetTree);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(targetTree, activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection(targetTree);\r\n                this.#setActiveItem(targetTree, null);\r\n                targetTree.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetTree);\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"treeitem\")) {\r\n            this.#setActiveItem(targetTree, target);\r\n            targetTree.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetTree.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetTree.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {target} = event;\r\n        const targetTree = <HTMLElement>target;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"treeitem\")) {\r\n            if (this.#onSelection.get(targetTree)) {\r\n                this.#hasSelectionChanged.set(target, true);\r\n            }\r\n            else {\r\n                targetTree.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            treeitemWidget.setPosInSet(item_i, i);\r\n            treeitemWidget.setLevel(item_i, 0);\r\n        });\r\n    }\r\n}));","import { Widget, element } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\n\r\nexport { treeItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"treeitemgroup\": TreeItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface TreeItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar treeItemGroupWidget = new (\r\nWidget({\r\n    name: \"treeitemgroup\"\r\n})(class TreeItemGroupWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"treeitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n}));","import { HTMLEListElement } from \"../elements/containers/lists/List\";\r\nimport { HTMLEListItemElement } from \"../elements/containers/lists/ListItem\";\r\nimport { EMenu } from \"../elements/containers/menus/Menu\";\r\nimport { EMenuButton } from \"../elements/containers/menus/MenuButton\";\r\nimport { HTMLEMenuItemElement, EMenuItem } from \"../elements/containers/menus/MenuItem\";\r\nimport { EMenuItemGroup } from \"../elements/containers/menus/MenuItemGroup\";\r\nimport { EToolBarItem } from \"../elements/containers/toolbars/ToolBarItem\";\r\nimport { element, reactiveChildElements, reactiveElement, CustomElement, Fragment } from \"../elements/Element\";\r\nimport { ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\n\r\nexport { ListModel };\r\nexport { ListItemModel };\r\nexport { ListView };\r\n\r\nclass ListModel extends ModelObject {\r\n    readonly items: ModelList<ListItemModel>;\r\n    sortFunction: ((item_a: ListItemModel, item_b: ListItemModel) => number) | null;\r\n    \r\n    constructor()\r\n    constructor(init: {items: ListItemModel[], sortFunction?: (item_a: ListItemModel, item_b: ListItemModel) => number})\r\n    constructor(init?: {items: ListItemModel[], sortFunction?: (item_a: ListItemModel, item_b: ListItemModel) => number}) {\r\n        super();\r\n        const sortFunction = init?.sortFunction ?? function(item_a: ListItemModel, item_b: ListItemModel) {\r\n            return item_a.label.localeCompare(item_b.label);\r\n        };\r\n        const items = new ModelList(init?.items ?? []);\r\n        items.setParent(this);\r\n        this.sortFunction = sortFunction;\r\n        this.items = items;\r\n    }\r\n\r\n    getItemByIndex(index: number): ListItemModel | null {\r\n        return this.items.get(index);\r\n    }\r\n}\r\n\r\ninterface TreeItem {\r\n    show(): void;\r\n    hide(): void;\r\n    display(): void;\r\n    remove(): void;\r\n}\r\n\r\nclass ListItemList implements TreeItem {\r\n    #items: ListItemModel[];\r\n\r\n    constructor(items: ListItemModel[]) {\r\n        this.#items = items;\r\n    }\r\n\r\n    static from(items: ListItemModel[]): ListItemList {\r\n        return new ListItemList(items);\r\n    }\r\n\r\n    show(): void {\r\n        const items = this.#items;\r\n        items.forEach(item_i => {\r\n            item_i.show();\r\n        });\r\n    }\r\n\r\n    hide(): void {\r\n        const items = this.#items;\r\n        items.forEach(item_i => {\r\n            item_i.hide();\r\n        });\r\n    }\r\n\r\n    display(): void {\r\n        const items = this.#items;\r\n        const result = items.reduce(\r\n            (result, item_i) => `${result} ${item_i.label}`, \"\"\r\n        );\r\n        console.log(result);\r\n    }\r\n\r\n    remove(): void {\r\n        const items = this.#items;\r\n        const removedItemsGroups = items.reduce((map, item_i) => {\r\n            const {parentNode} = item_i;\r\n            if (parentNode instanceof ListModel) {\r\n                const {items} = parentNode;\r\n                const group = map.get(items);\r\n                if (group) group.push(item_i);\r\n                else map.set(items, [item_i]);\r\n            }\r\n            return map;\r\n        }, new Map<ModelList, ListItemModel[]>());\r\n        Array.from(removedItemsGroups.entries()).forEach(\r\n            ([list_i, children_i]) => {\r\n                list_i.beginChanges();\r\n                children_i.forEach((child_i) => {\r\n                    list_i.remove(child_i);\r\n                });\r\n                list_i.endChanges();\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nclass ListItemModel extends ModelObject implements TreeItem {\r\n    readonly label: string;\r\n\r\n    @ModelProperty()\r\n    visibility: boolean;\r\n    \r\n    constructor(init: {label: string}) {\r\n        super();\r\n        const {label} = init;\r\n        this.label = label;\r\n        this.visibility = true;\r\n    }\r\n\r\n    get index(): number {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof ListModel) {\r\n            return parentNode.items.index(this);\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    show(): void {\r\n        this.visibility = true;\r\n    }\r\n\r\n    hide(): void {\r\n        this.visibility = false;\r\n    }\r\n\r\n    display(): void {\r\n        console.log(this.label);\r\n    }\r\n    \r\n    remove(): void {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof ListModel) {\r\n            const {items} = parentNode;\r\n            if (items) {\r\n                items.remove(this);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface ListViewConstructor {\r\n    readonly prototype: ListView;\r\n    new(): ListView;\r\n    new(model: ListModel): ListView;\r\n}\r\n\r\ninterface ListView extends View {\r\n    model: ListModel;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"v-list\": ListView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"v-list\"\r\n})\r\nclass ListViewBase extends View implements ListView {\r\n    readonly model!: ListModel;\r\n    #listElementMap: WeakMap<ListModel, WeakRef<HTMLEListElement>>;\r\n    #listItemElementsMap: WeakMap<ListItemModel, WeakRef<HTMLEListItemElement>>;\r\n\r\n    constructor()\r\n    constructor(model: ListModel)\r\n    constructor(model?: ListModel) {\r\n        super();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.#listElementMap = new WeakMap();\r\n        this.#listItemElementsMap = new WeakMap();\r\n        this.setModel(model ?? new ListModel());\r\n    }\r\n\r\n    getListElement(): HTMLEListElement | null {\r\n        const {model} = this;\r\n        return this.#listElementMap.get(model)?.deref() ?? null;\r\n    }\r\n\r\n    getListItemElement(model: ListItemModel): HTMLEListItemElement | null {\r\n        return this.#listItemElementsMap.get(model)?.deref()  ?? null;\r\n    }\r\n\r\n    selectedItems(): ListItemModel[] {\r\n        const list = this.getListElement();\r\n        if (list) {\r\n            const {model} = this;\r\n            const selectedElements = list.selectedItems();\r\n            return selectedElements.map(\r\n                item_i => <ListItemModel>model.getItemByIndex(\r\n                    item_i.posinset\r\n                )\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    renderShadow(): Node {\r\n        return Fragment(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    renderLight(): Node {\r\n        const {model} = this;\r\n        const listElement = element(\"e-list\", {\r\n            attributes: {\r\n                tabindex: 0\r\n            },\r\n            children: [\r\n                element(\"e-listitemgroup\", {\r\n                    children: reactiveChildElements(\r\n                        model.items, item => this.#renderListItem(item)\r\n                    )\r\n                })\r\n            ],\r\n            listeners: {\r\n                contextmenu: <EventListener>this.#handleContextMenuEvent.bind(this),\r\n                keydown: <EventListener>this.#handleKeyDownEvent.bind(this)\r\n            }\r\n        });\r\n        this.#listElementMap.set(model, new WeakRef(listElement));\r\n        return listElement;\r\n    }\r\n\r\n    #renderListItem(item: ListItemModel): Element {\r\n        const listItemElement = element(\"e-listitem\", {\r\n            attributes: {\r\n                tabindex: -1,\r\n                name: item.label,\r\n                draggable: \"true\"\r\n            },\r\n            dataset: {\r\n                index: item.index\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    children: [\r\n                        item.label\r\n                    ]\r\n                }),\r\n                element(\"e-toolbar\", {\r\n                    attributes: {\r\n                        //slot: \"toolbar\",\r\n                        tabindex: 0\r\n                    },\r\n                    children: [\r\n                        element(\"e-toolbaritemgroup\", {\r\n                            children: [\r\n                                EToolBarItem.menubutton({\r\n                                    name: \"settings\",\r\n                                    label: \"Actions\",\r\n                                    menubutton: new EMenuButton({\r\n                                        menu: reactiveElement(\r\n                                            item,\r\n                                            new EMenu({\r\n                                                children: [\r\n                                                    new EMenuItemGroup({\r\n                                                        items: [\r\n                                                            EMenuItem.button({\r\n                                                                name: \"display\",\r\n                                                                label: \"Display\",\r\n                                                                trigger: () => {\r\n                                                                    item.display();\r\n                                                                }\r\n                                                            }),\r\n                                                            EMenuItem.button({\r\n                                                                name: \"delete\",\r\n                                                                label: \"Delete\",\r\n                                                                trigger: () => {\r\n                                                                    item.remove();\r\n                                                                }\r\n                                                            })\r\n                                                        ]\r\n                                                    }),\r\n                                                    new EMenuItemGroup({\r\n                                                        items: [\r\n                                                            EMenuItem.button({\r\n                                                                name: \"visibility\",\r\n                                                                label: \"Visibility\",\r\n                                                                trigger: () => {\r\n                                                                    item.visibility ?\r\n                                                                    item.hide() :\r\n                                                                    item.show();\r\n                                                                }\r\n                                                            })\r\n                                                        ]\r\n                                                    })\r\n                                                ]\r\n                                            }),\r\n                                            [\"visibility\"],\r\n                                            (menu, property, oldValue, newValue) => {\r\n                                                //const {items} = menu;\r\n                                                switch (property) {\r\n                                                    case \"visibility\": {\r\n                                                        /*const item = <HTMLEMenuItemElement>items.namedItem(\"visibility\");\r\n                                                        item.textContent = newValue ? \"Hide\" : \"Show\";\r\n                                                        item.title = newValue ? \"Hide\" : \"Show\";*/\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        )\r\n                                    })\r\n                                }),\r\n                                reactiveElement(\r\n                                    item,\r\n                                    element(\"e-toolbaritem\", {\r\n                                        attributes: {\r\n                                            name: \"visibility\",\r\n                                            type: \"checkbox\",\r\n                                            tabindex: -1\r\n                                        },\r\n                                        listeners: {\r\n                                            trigger: () => {\r\n                                                item.visibility ?\r\n                                                    item.hide() :\r\n                                                    item.show();\r\n                                            }\r\n                                        }\r\n                                    }),\r\n                                    [\"visibility\"],\r\n                                    (toolbaritem, property, oldValue, newValue) => {\r\n                                        toolbaritem.title = newValue ? \"Hide\" : \"Show\";\r\n                                        toolbaritem.checked = newValue;\r\n                                    }\r\n                                )\r\n                            ]\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        });\r\n        this.#listItemElementsMap.set(item, new WeakRef(listItemElement));\r\n        return listItemElement;\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        const {clientX, clientY, currentTarget, target} = event;\r\n        const {model} = this;\r\n        if (currentTarget instanceof HTMLEListElement && target instanceof HTMLEListItemElement) {\r\n            const activeItem = model.getItemByIndex(\r\n                parseInt(target.dataset.index!)\r\n            )!;\r\n            const menu = element(\"e-menu\", {\r\n                attributes: {\r\n                    tabindex: -1,\r\n                    contextual: true\r\n                },\r\n                children: [\r\n                    element(\"e-menuitemgroup\", {\r\n                        attributes: {\r\n                            tabindex: -1\r\n                        },\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                attributes: {\r\n                                    tabindex: -1\r\n                                },\r\n                                children: [\r\n                                    \"Display\"\r\n                                ],\r\n                                listeners: {\r\n                                    trigger: () => {\r\n                                        ListItemList.from(\r\n                                            this.selectedItems()\r\n                                        ).display();\r\n                                    }\r\n                                }\r\n                            }),\r\n                            element(\"e-menuitem\", {\r\n                                attributes: {\r\n                                    tabindex: -1\r\n                                },\r\n                                children: [\r\n                                    \"Delete\"\r\n                                ],\r\n                                listeners: {\r\n                                    trigger: () => {\r\n                                        ListItemList.from(\r\n                                            this.selectedItems()\r\n                                        ).remove();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    }),\r\n                    element(\"e-menuitemgroup\", {\r\n                        attributes: {\r\n                            tabindex: -1\r\n                        },\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                attributes: {\r\n                                    tabindex: -1,\r\n                                    type: \"checkbox\"\r\n                                },\r\n                                children: [\r\n                                    activeItem.visibility ? \"Hide\" : \"Show\"\r\n                                ],\r\n                                listeners: {\r\n                                    trigger: () => {\r\n                                        const selectedItems = ListItemList.from(\r\n                                            this.selectedItems()\r\n                                        );\r\n                                        activeItem.visibility ?\r\n                                            selectedItems.hide() :\r\n                                            selectedItems.show();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ],\r\n                listeners: {\r\n                    close: () => {\r\n                        target.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            });\r\n            target.append(menu);\r\n            menu.positionContextual(clientX, clientY);\r\n            menu.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        if (currentTarget instanceof HTMLEListElement) {\r\n            switch (key) {\r\n                case \"Delete\": {\r\n                    ListItemList.from(\r\n                        this.selectedItems()\r\n                    ).remove();\r\n                    event.preventDefault();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ListView: ListViewConstructor = ListViewBase;","import { HTMLEGridElement } from \"../elements/containers/grid/Grid\";\r\nimport { HTMLEGridCellElement } from \"../elements/containers/grid/GridCell\";\r\nimport { HTMLEGridRowElement } from \"../elements/containers/grid/GridRow\";\r\nimport { element, reactiveChildElements, CustomElement, Fragment, AttributeProperty, trimMultilineIndent, reactiveElement } from \"../elements/Element\";\r\nimport { HTMLEWidthSashElement } from \"../elements/utils/WidthSash\";\r\nimport { ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\nimport { HTMLEMenuItemElement } from \"../elements/containers/menus/MenuItem\";\r\nimport { HTMLEMenuItemRadioList } from \"../elements/containers/menus/MenuItemCollection\";\r\n\r\nexport { GridModel };\r\nexport { GridRowModel };\r\nexport { GridColumnModel };\r\nexport { GridView };\r\n\r\nclass GridModel extends ModelObject {\r\n    readonly rows: ModelList<GridRowModel>;\r\n    readonly columns: ModelList<GridColumnModel>;\r\n\r\n    constructor()\r\n    constructor(init: {rows: GridRowModel[], columns: GridColumnModel[]})\r\n    constructor(init?: {rows: GridRowModel[], columns: GridColumnModel[]}) {\r\n        super();\r\n        const rows = new ModelList(init?.rows ?? []);\r\n        rows.setParent(this);\r\n        this.rows = rows;\r\n        const columns = new ModelList(init?.columns ?? []);\r\n        columns.setParent(this);\r\n        this.columns = columns;\r\n    }\r\n\r\n    getColumnByName(name: string): GridColumnModel | null {\r\n        return Array.from(this.columns.values()).find(\r\n            column_i => column_i.name == name\r\n        ) ?? null;\r\n    }\r\n\r\n    sortByColumn(column: GridColumnModel, sortOrder: number) {\r\n        Array.from(this.columns.values()).forEach((column_i) => {\r\n            column_i.sortorder = column_i == column ? sortOrder : void 0;\r\n        });\r\n        this.rows.sort(\r\n            (row_1, row_2) => {\r\n                const cell_1 = <string>column.extract(row_1).toString();\r\n                const cell_2 = <string>column.extract(row_2).toString();\r\n                return sortOrder * cell_1.localeCompare(cell_2);\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\ntype Constructor = {\r\n    new(...args: any): any;\r\n    readonly prototype: any;\r\n}\r\n\r\ntype GridRowFilter = {\r\n    filter: (row: GridRowModel) => boolean;\r\n}\r\n\r\nclass GridColumnModel<T extends Constructor = Constructor> extends ModelObject {\r\n    readonly name: string;\r\n    readonly label: string;\r\n    readonly type: T;\r\n    readonly extract: (row: GridRowModel) => InstanceType<T>;\r\n    readonly filters: (GridRowFilter & {name: string})[];\r\n\r\n    @ModelProperty()\r\n    sortorder: number | undefined;\r\n\r\n    constructor(init: {\r\n        name: string,\r\n        label: string,\r\n        type: T,\r\n        extract: (row: GridRowModel) => InstanceType<T>,\r\n        filters?: (GridRowFilter & {name: string})[]\r\n    }) {\r\n        super();\r\n        const {name, label, type, extract} = init;\r\n        this.name = name;\r\n        this.label = label;\r\n        this.type = type;\r\n        this.extract = extract;\r\n        this.filters = init.filters ?? [];\r\n        this.sortorder = 1;\r\n    }\r\n}\r\n\r\nclass GridRowModel extends ModelObject {\r\n    @ModelProperty()\r\n    name: string;\r\n\r\n    @ModelProperty()\r\n    age: number;\r\n    \r\n    constructor(init: {name: string, age: number}) {\r\n        super();\r\n        const {name, age} = init;\r\n        this.name = name;\r\n        this.age = age;\r\n    }\r\n}\r\n\r\ninterface GridViewConstructor {\r\n    readonly prototype: GridView;\r\n    new(): GridView;\r\n    new(model: GridModel): GridView;\r\n}\r\n\r\ninterface GridView extends View {\r\n    readonly shadowRoot: ShadowRoot;\r\n    model: GridModel;\r\n    resizable: boolean;\r\n    sortable: boolean;\r\n    setColumnDelegate(delegate: (column: GridColumnModel) => string | Node): void;\r\n    setCellDelegate(delegate: (row: GridRowModel, column: GridColumnModel) => string | Node): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"v-grid\": GridView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"v-grid\"\r\n})\r\nclass GridViewBase extends View implements GridView {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly model!: GridModel;\r\n\r\n    #columnDelegate: (column: GridColumnModel) => string | Node;\r\n    #cellDelegate: (row: GridRowModel, column: GridColumnModel) => string | Node;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    resizable!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    sortable!: boolean;\r\n\r\n    #displayFilters: (GridRowFilter & {name: string})[];\r\n    #searchFilter: GridRowFilter | null;\r\n\r\n    #gridRowElementsMap: WeakMap<GridRowModel, WeakRef<HTMLEGridRowElement>>\r\n    \r\n    constructor()\r\n    constructor(model: GridModel)\r\n    constructor(model?: GridModel) {\r\n        super();\r\n        this.#displayFilters = [];\r\n        this.#searchFilter = null;\r\n        this.#gridRowElementsMap = new WeakMap();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.setModel(model ?? new GridModel());\r\n        this.#cellDelegate = (row: GridRowModel, column: GridColumnModel) => {\r\n            return element(\"label\", {\r\n                children: [\r\n                    column.extract(row)\r\n                ]\r\n            });\r\n        };\r\n        this.#columnDelegate = (column: GridColumnModel) => {\r\n            return element(\"label\", {\r\n                children: [\r\n                    column.label\r\n                ]\r\n            });\r\n        };\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"resizable\":\r\n            case \"sortable\": {\r\n                this.refresh();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    get gridElement(): HTMLEGridElement {\r\n        return this.getGridElement()!;\r\n    }\r\n\r\n    setColumnDelegate(delegate: (column: GridColumnModel) => string | Node): void {\r\n        this.#columnDelegate = delegate;\r\n    }\r\n\r\n    setCellDelegate(delegate: (row: GridRowModel, column: GridColumnModel) => string | Node): void {\r\n        this.#cellDelegate = delegate;\r\n    }\r\n\r\n    getGridElement(): HTMLEGridElement | null {\r\n        return this.shadowRoot.querySelector(`:scope > e-grid`);\r\n    }\r\n\r\n    getRowElement(row: GridRowModel): HTMLEGridRowElement | null {\r\n        return this.#gridRowElementsMap.get(row)?.deref() ?? null;\r\n    }\r\n\r\n    getColumnHeaderElement(column: GridColumnModel): HTMLEGridCellElement | null {\r\n        return this.shadowRoot.querySelector(`:scope > e-grid > e-gridhead > e-gridrow > e-gridcell[type=columnheader][name=${column.name}]`);\r\n    }\r\n\r\n    getColumnDataElements(column: GridColumnModel): HTMLEGridCellElement[] {\r\n        return Array.from(this.shadowRoot.querySelectorAll(`:scope > e-grid > e-gridbody > e-gridrow > e-gridcell[headers~=${column.name}]`));\r\n    }\r\n\r\n    renderShadow(): Node {\r\n        const {model} = this;\r\n        return Fragment(\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/main.css\"\r\n                }\r\n            }),\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/views/gridview.css\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                children: [\r\n                    element(\"input\", {\r\n                        attributes: {\r\n                            type: \"search\"\r\n                        },\r\n                        listeners: {\r\n                            input: <EventListener>this.#handleSearchInputEvent.bind(this)\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"e-grid\", {\r\n                attributes: {\r\n                    tabindex: 0,\r\n                    selectby: \"row\"\r\n                },\r\n                children: [\r\n                    element(\"e-gridhead\", {\r\n                        children: [\r\n                            element(\"e-gridrow\", {\r\n                                children: reactiveChildElements(\r\n                                    model.columns, column => this.#renderGridColumnHeaderCell(column)\r\n                                )\r\n                            })\r\n                        ]\r\n                    }),\r\n                    element(\"e-gridbody\", {\r\n                        children: reactiveChildElements(\r\n                            model.rows, row => this.#renderGridBodyRow(row)\r\n                        )\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    setSearchFilter(filter: GridRowFilter | null): void {\r\n        this.#searchFilter = filter;\r\n        Array.from(this.model.rows.values()).forEach((row_i) => {\r\n            const rowElement = this.getRowElement(row_i);\r\n            if (rowElement) {\r\n                rowElement.hidden =\r\n                    !this.#displayFilters.some(filter_i => filter_i.filter(row_i))\r\n                    && !(filter?.filter(row_i) ?? true);\r\n            }\r\n        });\r\n        const {gridElement} = this;\r\n        gridElement.beginSelection();\r\n        gridElement.selectedRows().forEach(selectedRow_i => selectedRow_i.selected = false);\r\n        gridElement.endSelection();\r\n    }\r\n\r\n    addDisplayFilter(filter: (GridRowFilter & {name: string;})): void {\r\n        const displayFilters = this.#displayFilters;\r\n        if (!displayFilters.includes(filter)) {\r\n            this.#displayFilters.push(filter);\r\n            Array.from(this.model.rows.values()).forEach((row_i) => {\r\n                const rowElement = this.getRowElement(row_i);\r\n                if (rowElement) {\r\n                    rowElement.hidden = !this.#displayFilters.some(filter_i => filter_i.filter(row_i));\r\n                }\r\n            });\r\n        }\r\n        const {gridElement} = this;\r\n        gridElement.beginSelection();\r\n        gridElement.selectedRows().forEach(selectedRow_i => selectedRow_i.selected = false);\r\n        gridElement.endSelection();\r\n    }\r\n\r\n    removeDisplayFilter(filter: (GridRowFilter & {name: string;})): void {\r\n        const displayFilters = this.#displayFilters;\r\n        const filterIndex = displayFilters.indexOf(filter);\r\n        if (filterIndex > -1) {\r\n            displayFilters.splice(filterIndex, 1);\r\n            Array.from(this.model.rows.values()).forEach((row_i) => {\r\n                const rowElement = this.getRowElement(row_i);\r\n                if (rowElement) {\r\n                    rowElement.hidden = !this.#displayFilters.every(filter_i => filter_i.filter(row_i));\r\n                }\r\n            });\r\n        }\r\n        const {gridElement} = this;\r\n        gridElement.beginSelection();\r\n        gridElement.selectedRows().forEach(selectedRow_i => selectedRow_i.selected = false);\r\n        gridElement.endSelection();\r\n    }\r\n\r\n    #renderGridColumnHeaderCell(column: GridColumnModel): Element {\r\n        const {model} = this;\r\n        const gridColumnElement = reactiveElement(\r\n            column,\r\n            element(\"e-gridcell\", {\r\n                attributes: {\r\n                    tabindex: -1,\r\n                    name: column.name,\r\n                    id: this.resizable ? `${column.name}-columnheader` : void 0,\r\n                    type: \"columnheader\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            class: \"gridcell-content\"\r\n                        },\r\n                        children: (<Node[]>[\r\n                            element(\"label\", {\r\n                                attributes: {\r\n                                    class: \"gridcell-label\"\r\n                                },\r\n                                children: [\r\n                                    column.label\r\n                                ],\r\n                                listeners: {\r\n                                    click: <EventListener>this.#handleColumnLabelClickEvent.bind(this)\r\n                                }\r\n                            }),\r\n                            element(\"e-toolbar\", {\r\n                                attributes: {\r\n                                    tabindex: -1,\r\n                                },\r\n                                children: [\r\n                                    element(\"e-toolbaritem\", {\r\n                                        attributes: {\r\n                                            type: \"menubutton\",\r\n                                            tabindex: -1,\r\n                                        },\r\n                                        children: [\r\n                                            element(\"e-menubutton\",  {\r\n                                                attributes: {\r\n                                                    slot: \"menubutton\",\r\n                                                    tabindex: -1,\r\n                                                },\r\n                                                children: [\r\n                                                    element(\"e-menu\",  {\r\n                                                        attributes: {\r\n                                                            slot: \"menu\",\r\n                                                            tabindex: -1,\r\n                                                        },\r\n                                                        children: [\r\n                                                            element(\"e-menuitem\",  {\r\n                                                                attributes: {\r\n                                                                    type: \"button\",\r\n                                                                    tabindex: -1,\r\n                                                                },\r\n                                                                children: [\r\n                                                                    \"Resize Column\"\r\n                                                                ],\r\n                                                                listeners: {\r\n                                                                    trigger: () => {\r\n                                                                        const columnHeaderElement = this.getColumnHeaderElement(column);\r\n                                                                        if (columnHeaderElement) {\r\n                                                                            columnHeaderElement.style.removeProperty(\"width\");\r\n                                                                            columnHeaderElement.style.removeProperty(\"max-width\");\r\n                                                                            this.getColumnDataElements(column).forEach(\r\n                                                                                cell_i => cell_i.style.maxWidth = \"unset\"\r\n                                                                            );\r\n                                                                        }\r\n                                                                    }\r\n                                                                }\r\n                                                            }),\r\n                                                            element(\"e-menuitem\",  {\r\n                                                                attributes: {\r\n                                                                    type: \"submenu\",\r\n                                                                    tabindex: -1,\r\n                                                                },\r\n                                                                children: [\r\n                                                                    \"Sort\",\r\n                                                                    reactiveElement(\r\n                                                                        column,\r\n                                                                        element(\"e-menu\",  {\r\n                                                                            attributes: {\r\n                                                                                slot: \"menu\",\r\n                                                                                tabindex: -1,\r\n                                                                            },\r\n                                                                            children: [\r\n                                                                                element(\"e-menuitem\",  {\r\n                                                                                    attributes: {\r\n                                                                                        type: \"radio\",\r\n                                                                                        name: \"sort\",\r\n                                                                                        value: \"1\",\r\n                                                                                        tabindex: -1,\r\n                                                                                    },\r\n                                                                                    children: [\r\n                                                                                        \"Ascending\"\r\n                                                                                    ]\r\n                                                                                }),\r\n                                                                                element(\"e-menuitem\",  {\r\n                                                                                    attributes: {\r\n                                                                                        type: \"radio\",\r\n                                                                                        name: \"sort\",\r\n                                                                                        value: \"-1\",\r\n                                                                                        tabindex: -1,\r\n                                                                                    },\r\n                                                                                    children: [\r\n                                                                                        \"Descending\"\r\n                                                                                    ]\r\n                                                                                })\r\n                                                                            ],\r\n                                                                            listeners: {\r\n                                                                                trigger: (event) => {\r\n                                                                                    const {target} = event;\r\n                                                                                    const sortOrder = (<HTMLEMenuItemElement>target).value;\r\n                                                                                    model.sortByColumn(column, parseInt(sortOrder));\r\n                                                                                }\r\n                                                                            }\r\n                                                                        }),\r\n                                                                        [\"sortorder\"],\r\n                                                                        (menu, property, oldValue, newValue) => {\r\n                                                                            menu.querySelectorAll<HTMLEMenuItemElement>(\"e-menuitem[name^=sort]\")\r\n                                                                            .forEach(sortRadioItem_i => {\r\n                                                                                sortRadioItem_i.checked = parseInt(sortRadioItem_i.value) === newValue;\r\n                                                                            });\r\n                                                                        }\r\n                                                                    )\r\n                                                                ]\r\n                                                            }),\r\n                                                            element(\"e-menuitem\",  {\r\n                                                                attributes: {\r\n                                                                    type: \"submenu\",\r\n                                                                    tabindex: -1,\r\n                                                                },\r\n                                                                children: [\r\n                                                                    \"Filter\",\r\n                                                                    element(\"e-menu\",  {\r\n                                                                        attributes: {\r\n                                                                            slot: \"menu\",\r\n                                                                            tabindex: -1,\r\n                                                                        },\r\n                                                                        children: column.filters.map((filter_i, i) =>\r\n                                                                            element(\"e-menuitem\", {\r\n                                                                                attributes: {\r\n                                                                                    tabindex: -1,\r\n                                                                                    type: \"checkbox\",\r\n                                                                                    checked: this.#displayFilters.includes(filter_i)\r\n                                                                                },\r\n                                                                                children: [\r\n                                                                                    filter_i.name\r\n                                                                                ],\r\n                                                                                listeners: {\r\n                                                                                    trigger: (event) => {\r\n                                                                                        const {currentTarget} = event;\r\n                                                                                        if (currentTarget instanceof HTMLEMenuItemElement) {\r\n                                                                                            const {checked} = currentTarget;\r\n                                                                                            if (checked) {\r\n                                                                                                this.addDisplayFilter(filter_i);\r\n                                                                                            }\r\n                                                                                            else {\r\n                                                                                                this.removeDisplayFilter(filter_i);\r\n                                                                                            }\r\n                                                                                        }\r\n                                                                                    }\r\n                                                                                }\r\n                                                                            })\r\n                                                                        )\r\n                                                                    })\r\n                                                                ]\r\n                                                            })\r\n                                                        ]\r\n                                                    })\r\n                                                ]\r\n                                            })\r\n                                        ]\r\n                                    })\r\n                                ]\r\n                            })\r\n                        ]).concat(\r\n                            this.resizable ? [\r\n                                element(\"e-wsash\", {\r\n                                    attributes: {\r\n                                        controls: `${column.name}-columnheader`\r\n                                    },\r\n                                    listeners: {\r\n                                        resize: () => {\r\n                                            this.getColumnDataElements(column).forEach(\r\n                                                cell_i => cell_i.style.removeProperty(\"max-width\")\r\n                                            );\r\n                                        }\r\n                                    }\r\n                                })\r\n                            ] : []\r\n                        )\r\n                    })\r\n                ]\r\n            }),\r\n            [\"sortorder\"],\r\n            (cell, property, oldValue, newValue) => {\r\n                switch (property) {\r\n                    case \"sortorder\":\r\n                        if (typeof newValue !== \"undefined\") {\r\n                            cell.dataset.sortorder = newValue.toString();\r\n                        }\r\n                        else {\r\n                            delete cell.dataset.sortorder;\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        );\r\n        return gridColumnElement;\r\n    }\r\n\r\n    #renderGridBodyRow(row: GridRowModel): Element {\r\n        const {model} = this;\r\n        const gridRowElement = element(\"e-gridrow\", {\r\n            attributes: {\r\n                tabindex: -1\r\n            },\r\n            children: reactiveChildElements(\r\n                model.columns, column => this.#renderGridDataCell(row, column)\r\n            )\r\n        });\r\n        this.#gridRowElementsMap.set(row, new WeakRef(gridRowElement));\r\n        return gridRowElement;\r\n    }\r\n\r\n    #renderGridDataCell(row: GridRowModel, column: GridColumnModel): Element {\r\n        const gridCellElement = element(\"e-gridcell\", {\r\n            attributes: {\r\n                type: \"gridcell\",\r\n                headers: column.name\r\n            },\r\n            children: [\r\n                this.#cellDelegate(row, column)\r\n            ]\r\n        });\r\n        return gridCellElement;\r\n    }\r\n\r\n    #handleSearchInputEvent(event: InputEvent) {\r\n        const {target} = event;\r\n        if (target instanceof HTMLInputElement) {\r\n            const {value} = target;\r\n            this.setSearchFilter(value !== \"\" ? {\r\n                filter: (row) => row.name.toLowerCase().startsWith(value.toLowerCase())\r\n            } : null);\r\n        }\r\n    }\r\n\r\n    #handleColumnLabelClickEvent(event: MouseEvent): void {\r\n        const {currentTarget} = event;\r\n        const {model} = this;\r\n        const {columns} = model;\r\n        if (currentTarget instanceof Element) {\r\n            const targetCell = currentTarget.closest(\"e-gridcell\");\r\n            if (targetCell) {\r\n                const targetColumn = Array.from(columns.values()).find(column_i => column_i.name == targetCell.name);\r\n                if (targetColumn) {\r\n                    const sortorder = typeof targetColumn.sortorder !== \"undefined\" ? -targetColumn.sortorder : 1;\r\n                    model.sortByColumn(targetColumn, sortorder);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar GridView: GridViewConstructor = GridViewBase;","//import { MenuItemGroupWidget, MenuItemWidget, MenuWidget, MenuBarWidget } from \"./src/views/MenuBarWidget\";\r\nimport { TreeItemModel, TreeModel, TreeView } from \"./src/views/TreeView\";\r\nimport { Editor, HotKey, Key, KeyModifier, menuWidget } from \"./index\";\r\n\r\nimport \"./index\";\r\nimport { ListItemModel, ListModel, ListView } from \"./src/views/ListView\";\r\nimport { GridColumnModel, GridModel, GridRowModel, GridView } from \"./src/views/GridView\";\r\nimport { element, Fragment, widget } from \"./src/elements/Element\";\r\n\r\nexport async function main() {\r\n    \r\n    /*const menubar = new MenuBarWidget([\r\n        new MenuItemWidget({\r\n            label: \"File\",\r\n            name: \"file\",\r\n            type: \"menu\",\r\n            menu: new MenuWidget({\r\n                name: \"File\",\r\n                groups: [\r\n                    new MenuItemGroupWidget({\r\n                        name: \"fileActions\",\r\n                        items: [\r\n                            new MenuItemWidget({\r\n                                label: \"Import file...\",\r\n                                name: \"import\"\r\n                            }),\r\n                            new MenuItemWidget({\r\n                                label: \"Export file...\",\r\n                                name: \"export\",\r\n                                hotkey: new HotKey(Key.B, KeyModifier.Control, KeyModifier.Alt)\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        }),\r\n        new MenuItemWidget({\r\n            label: \"Preferences\",\r\n            name: \"preferences\",\r\n            type: \"menu\",\r\n            menu: new MenuWidget({\r\n                name: \"Preferences\",\r\n                groups: [\r\n                    new MenuItemGroupWidget({\r\n                        name: \"fileActions\",\r\n                        items: [\r\n                            new MenuItemWidget({\r\n                                label: \"Advanced User\",\r\n                                name: \"advanced\",\r\n                                type: \"checkbox\",\r\n                                hotkey: new HotKey(Key.A, KeyModifier.Control, KeyModifier.Alt)\r\n                            }),\r\n                            new MenuItemWidget({\r\n                                label: \"Layout\",\r\n                                name: \"layout\",\r\n                                type: \"submenu\",\r\n                                menu: new MenuWidget({\r\n                                    name: \"Layout\",\r\n                                    groups: [\r\n                                        new MenuItemGroupWidget({\r\n                                            name: \"Layout\",\r\n                                            items: [\r\n                                                new MenuItemWidget({\r\n                                                    label: \"Standard\",\r\n                                                    name: \"standard\",\r\n                                                    type: \"radio\"\r\n                                                }),\r\n                                                new MenuItemWidget({\r\n                                                    label: \"Advanced\",\r\n                                                    name: \"advanced\",\r\n                                                    type: \"radio\"\r\n                                                })\r\n                                            ]\r\n                                        })\r\n                                    ]\r\n                                })\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        })\r\n    ]);*/\r\n\r\n    const treeView = new TreeView();\r\n    const treeModel = new TreeModel({\r\n        items: [\r\n            new TreeItemModel({\r\n                label: \"TI 0\",\r\n                type: \"parent\",\r\n                items: [\r\n                    new TreeItemModel({\r\n                        label: \"TI 1A\",\r\n                        type: \"parent\",\r\n                        items: [\r\n                            new TreeItemModel({\r\n                                type: \"leaf\",\r\n                                label: \"TI 1AX\"\r\n                            }),\r\n                        ]\r\n                    }),\r\n                    new TreeItemModel({\r\n                        type: \"parent\",\r\n                        label: \"TI 1B\"\r\n                    })\r\n                ]\r\n            }),\r\n            new TreeItemModel({\r\n                label: \"TI 1\",\r\n                type: \"parent\",\r\n                items: [\r\n                    new TreeItemModel({\r\n                        label: \"TI 1A\",\r\n                        type: \"parent\",\r\n                        items: [\r\n                            new TreeItemModel({\r\n                                type: \"leaf\",\r\n                                label: \"TI 1AX\"\r\n                            }),\r\n                        ]\r\n                    }),\r\n                    new TreeItemModel({\r\n                        type: \"parent\",\r\n                        label: \"TI 1B\"\r\n                    })\r\n                ]\r\n            }),\r\n            new TreeItemModel({\r\n                type: \"leaf\",\r\n                label: \"TI 2\"\r\n            }),\r\n            new TreeItemModel({\r\n                type: \"leaf\",\r\n                label: \"TI 3\"\r\n            })\r\n        ],\r\n        sortFunction: (item_a: TreeItemModel, item_b: TreeItemModel) => {\r\n            const {label: aLabel} = item_a;\r\n            const {label: bLabel} = item_b;\r\n            return bLabel.localeCompare(aLabel);\r\n        }\r\n    });\r\n    treeView.setModel(treeModel);\r\n    document.body.append(treeView);\r\n    \r\n    treeModel.childItems.append(\r\n        new TreeItemModel({\r\n            label: \"yo\",\r\n            type: \"parent\",\r\n            items: [\r\n                new TreeItemModel({\r\n                    type: \"leaf\",\r\n                    label: \"plop\"\r\n                })\r\n            ]\r\n        })\r\n    );\r\n\r\n    const listView = new ListView();\r\n    listView.setModel(\r\n        new ListModel({\r\n            items: [\r\n                new ListItemModel({\r\n                    label: \"Hey\"\r\n                }),\r\n                new ListItemModel({\r\n                    label: \"Yo\"\r\n                })\r\n            ]\r\n        })\r\n    );\r\n\r\n    document.body.append(listView);\r\n\r\n    // Menu actions\r\n    // Toolbar actions\r\n    const gridView = new GridView();\r\n    gridView.resizable = true;\r\n    gridView.sortable = true;\r\n    gridView.setColumnDelegate((column) => {\r\n        return Fragment(\r\n            element(\"label\", {\r\n                children: [\r\n                    column.label\r\n                ]\r\n            })/*,\r\n            element(\"e-toolbar\", {\r\n                children: [\r\n                    element(\"e-toolbaritem\", {\r\n                        attributes: {\r\n                            type: \"button\"\r\n                        }\r\n                    })\r\n                ]\r\n            })*/\r\n        );\r\n    });\r\n    gridView.setModel(\r\n        new GridModel({\r\n            columns: [\r\n                new GridColumnModel({\r\n                    name: \"name\",\r\n                    label: \"Name\",\r\n                    type: String,\r\n                    extract: (row) => row.name\r\n                }),\r\n                new GridColumnModel({\r\n                    name: \"age\",\r\n                    label: \"Age\",\r\n                    type: Number,\r\n                    extract: (row) => row.age,\r\n                    filters: [{\r\n                        name: \"Minors\",\r\n                        filter: (row) => row.age < 18\r\n                    },{\r\n                        name: \"Majors\",\r\n                        filter: (row) => row.age >= 18\r\n                    }]\r\n                })\r\n            ],\r\n            rows: [\r\n                new GridRowModel({\r\n                    name: \"Denis\",\r\n                    age: 13\r\n                }),\r\n                new GridRowModel({\r\n                    name: \"Jean-Charles\",\r\n                    age: 32\r\n                }),\r\n                new GridRowModel({\r\n                    name: \"Charles\",\r\n                    age: 25\r\n                })\r\n            ]\r\n        })\r\n    );\r\n\r\n    document.body.append(gridView);\r\n    \r\n    const menuView = widget(\"menubar\", {\r\n        slotted: [\r\n            widget(\"menuitem\", {\r\n                properties: {\r\n                    label: \"MenuItem 0\",\r\n                    name: \"MenuItem 0\",\r\n                    type: \"menu\",\r\n                    disabled: true\r\n                },\r\n                slotted: [\r\n                    widget(\"menu\", {\r\n                        slotted: [\r\n                            widget(\"menuitem\", {\r\n                                properties: {\r\n                                    label: \"MenuItem 1\",\r\n                                    name: \"MenuItem 1\",\r\n                                    type: \"checkbox\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            widget(\"menuitem\", {\r\n                properties: {\r\n                    label: \"MenuItem 1\",\r\n                    name: \"MenuItem 1\",\r\n                    type: \"menu\"\r\n                },\r\n                slotted: [\r\n                    widget(\"menu\", {\r\n                        slotted: [\r\n                            widget(\"menuitemgroup\", {\r\n                                slotted: [\r\n                                    widget(\"menuitem\", {\r\n                                        properties: {\r\n                                            label: \"MenuItem 1\",\r\n                                            type: \"checkbox\",\r\n                                            keyshortcut: \"Ctrl+B\",\r\n                                            disabled: true,\r\n                                            checked: true\r\n                                        }\r\n                                    }),\r\n                                    widget(\"menuitem\", {\r\n                                        properties: {\r\n                                            type: \"button\",\r\n                                            label: \"MenuItem 2\",\r\n                                            keyshortcut: \"Ctrl+A\"\r\n                                        }\r\n                                    })\r\n                                ]\r\n                            }),\r\n                            widget(\"separator\"),\r\n                            widget(\"menuitem\", {\r\n                                properties: {\r\n                                    label: \"Submenu\",\r\n                                    type: \"submenu\"\r\n                                },\r\n                                slotted: [\r\n                                    widget(\"menu\", {\r\n                                        slotted: [\r\n                                            widget(\"menuitem\", {\r\n                                                properties: {\r\n                                                    label: \"MenuItem 1\",\r\n                                                    type: \"radio\",\r\n                                                    name: \"radio\",\r\n                                                    value: \"1\"\r\n                                                }\r\n                                            }),\r\n                                            widget(\"menuitem\", {\r\n                                                properties: {\r\n                                                    type: \"radio\",\r\n                                                    label: \"MenuItem 2\",\r\n                                                    name: \"radio\",\r\n                                                    value: \"2\"\r\n                                                }\r\n                                            })\r\n                                        ]\r\n                                    })\r\n                                ]\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        ]\r\n    })\r\n    document.body.append(menuView);\r\n\r\n\r\n    const tree = widget(\"tree\", {\r\n        slotted: [\r\n            widget(\"treeitem\", {\r\n                properties: {\r\n                    label: \"treeitem 0\",\r\n                    type: \"parent\",\r\n                    disabled: true\r\n                },\r\n                slotted: [\r\n                    widget(\"treeitemgroup\", {\r\n                        slotted: [\r\n                            widget(\"treeitem\", {\r\n                                properties: {\r\n                                    label: \"treeitem 1\",\r\n                                    type: \"leaf\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            widget(\"treeitem\", {\r\n                properties: {\r\n                    label: \"treeitem 1\",\r\n                    name: \"treeitem 1\",\r\n                    type: \"leaf\"\r\n                }\r\n            })\r\n        ]\r\n    })\r\n    document.body.append(tree);\r\n    \r\n    const editor = new Editor();\r\n    editor.setup();\r\n\r\n    /*editor.registerCheckboxAction(\"toggleAdvancedUser\", (_, newValue) => {\r\n        console.log(`Advanced user is now ${newValue}`);\r\n    }, {hotkey: new HotKey(Key.ARROW_DOWN, KeyModifier.Alt)});\r\n\r\n    editor.registerRadioAction(\"setLayout\", (_, newValue) => {\r\n        editor.setPair(\"layout\", newValue);\r\n    });\r\n\r\n    editor.registerButtonAction(\"execLayout\", () => {\r\n        const layout = editor.getPair(\"layout\");\r\n        console.log(`Layout is ${layout}`);\r\n    }, {hotkey: new HotKey(Key.ARROW_UP, KeyModifier.Alt)});*/\r\n\r\n\r\n    /*editor.registerRadioAction(\"selectTest\", (oldValue, newValue) => {\r\n        console.log(`Test is ${newValue}`);\r\n    }, {value: \"2\", key: \"test\"});\r\n\r\n    document.addEventListener(\"slotchange\", (event) => {\r\n        console.log(event);\r\n    });*/\r\n    \r\n    /*setTimeout(() => {\r\n        const execLayoutToolBarItem = document.querySelector<HTMLEActionElement>(\"e-toolbaritem[name=execLayout]\");\r\n        if (execLayoutToolBarItem) {\r\n            editor.addPairListener(\"layout\", (oldValue, newValue) => {\r\n                if (newValue !== oldValue) {\r\n                    execLayoutToolBarItem.value = newValue;\r\n                }\r\n            });\r\n        }\r\n    }, 100);\r\n\r\n    const button = element(\"button\", {\r\n        properties: {\r\n            textContent: \"Focus\"\r\n        },\r\n        listeners: {\r\n            click: () => {\r\n                const menuitem = document.querySelector<HTMLEMenuItemElement>(\"e-menuitem#hey\");\r\n                if (menuitem) {\r\n                    menuitem.focus();\r\n                }\r\n            }\r\n        }\r\n    });\r\n    document.body.append(button);\r\n    document.body.append(menubar.element);\r\n    \r\n    editor.executeCheckboxAction(\"toggleAdvancedUser\", true);\r\n    editor.setCheckboxActionValue(\"toggleAdvancedUser\", false);*/\r\n\r\n    //editor.setRadioActionValue(\"selectTest\", \"2\");\r\n\r\n    //editor.executeRadioAction(\"setLayout\", \"other\");\r\n}","import { ActionType, HTMLEActionElement } from \"./elements/containers/actions/Action\";\r\nimport { subtreeNodes } from \"./elements/Element\";\r\nimport { HotKey } from \"./Input\";\r\n\r\nexport { Editor };\r\nexport { EditorBase };\r\n\r\ninterface Action {\r\n    name: string;\r\n    type: ActionType;\r\n    trigger: (oldValue: any, newValue: any) => void;\r\n    key?: string;\r\n    value?: string;\r\n    checked?: boolean;\r\n}\r\n\r\ninterface ButtonAction {\r\n    name: string;\r\n    type: \"button\";\r\n    trigger: () => void;\r\n}\r\n\r\ninterface RadioAction {\r\n    name: string;\r\n    type: \"radio\";\r\n    trigger: (oldValue: string, newValue: string) => void;\r\n    value: string;\r\n    key?: string;\r\n}\r\n\r\ninterface CheckboxAction {\r\n    name: string;\r\n    type: \"checkbox\";\r\n    trigger: (oldValue: boolean, newValue: boolean) => void;\r\n    checked: boolean;\r\n    key?: string;\r\n}\r\n\r\ninterface EditorConstructor {\r\n    readonly prototype: Editor;\r\n    new(): Editor;\r\n}\r\n\r\ninterface Editor {\r\n    /*registerWidget(widget: Widget): void;\r\n    unregisterWidget(widget: Widget): void;*/\r\n    \r\n    /*setPair(key: string, value: any): void;\r\n    getPair<T>(key: string): T;\r\n    addPairListener(key: string, listener: (oldValue: any, newValue: any) => void): void;\r\n    removePairListener(key: string, listener: (oldValue: any, newValue: any) => void): void;*/\r\n\r\n    registerButtonAction(\r\n        name: string,\r\n        trigger: () => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n        }): ButtonAction;\r\n    registerRadioAction(\r\n        name: string,\r\n        trigger: (oldValue: string, newValue: string) => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            value?: string;\r\n        }): RadioAction;\r\n    registerCheckboxAction(\r\n        name: string,\r\n        trigger: (oldValue: boolean, newValue: boolean) => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            checked?: boolean;\r\n        }): CheckboxAction;\r\n    \r\n    executeButtonAction(name: string): void;\r\n    executeCheckboxAction(name: string, newChecked: boolean): void;\r\n    executeRadioAction(name: string, newValue: string): void;\r\n\r\n    setCheckboxActionValue(name: string, checked: boolean): void;\r\n    setRadioActionValue(name: string, value: string): void;\r\n\r\n    unregisterActionElement(action: string, element: HTMLEActionElement): void;\r\n    registerActionElement(action: string, element: HTMLEActionElement): void;\r\n    setup(): void;\r\n}\r\n\r\nclass EditorBase implements Editor {\r\n    //private _widgets: Array<Widget>;\r\n    private _actions: Array<Action>;\r\n    private _actionElements: Array<Array<HTMLEActionElement>>;\r\n    private _hotkeys: Array<HotKey>;\r\n    private _pairs: Map<string, any>;\r\n    private _pairsListeners: Map<string, Array<(oldValue: any, newValue: any) => void>>;\r\n\r\n    private _actionsObserver: MutationObserver;\r\n\r\n    constructor() {\r\n        //this._widgets = new Array();\r\n        this._actions = new Array();\r\n        this._actionElements = new Array();\r\n        this._hotkeys = new Array();\r\n        this._pairs = new Map();\r\n        this._pairsListeners = new Map();\r\n\r\n        this._actionsObserver =  new MutationObserver(this._actionsObserverCallback.bind(this));\r\n    }\r\n\r\n    private _actionsObserverCallback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            mutation.addedNodes.forEach((node: Node) => {\r\n                Array.from(subtreeNodes(node)).forEach((node) => {\r\n                    if (node instanceof HTMLEActionElement) {\r\n                        this.registerActionElement(node.name, node);\r\n                    }\r\n                });\r\n            });\r\n            mutation.removedNodes.forEach((node: Node) => {\r\n                Array.from(subtreeNodes(node)).forEach((node) => {\r\n                    if (node instanceof HTMLEActionElement) {\r\n                        this.unregisterActionElement(node.name, node);\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n    \r\n    public setup(): void {\r\n        document.body.addEventListener(\"keydown\", this);\r\n        document.body.addEventListener(\"trigger\", this);\r\n\r\n        this._actionsObserver.observe(document.body, {\r\n            childList: true,\r\n            subtree: true\r\n        });\r\n    }\r\n\r\n    /*public getPair<T>(key: string): T {\r\n        return this._pairs.get(key) as T;\r\n    }\r\n\r\n    public setPair(key: string, value: any): void {\r\n        const oldValue = this._pairs.get(key);\r\n        this._pairs.set(key, value);\r\n        const listeners = this._pairsListeners.get(key);\r\n        if (typeof listeners !== \"undefined\") {\r\n            listeners.forEach((listener_i) => {\r\n                listener_i(oldValue, value);\r\n            });\r\n        }\r\n    }\r\n\r\n    public addPairListener(key: string, listener: (oldValue: any, newValue: any) => void): void {\r\n        const listeners = this._pairsListeners.get(key);\r\n        if (typeof listeners !== \"undefined\") {\r\n            listeners.push(listener);\r\n        }\r\n        else {\r\n            this._pairsListeners.set(key, [listener]);\r\n        }\r\n    }\r\n\r\n    public removePairListener(name: string, listener: (oldValue: any, newValue: any) => void): void {\r\n        const listeners = this._pairsListeners.get(name);\r\n        if (typeof listeners !== \"undefined\") {\r\n            const listenerIndex = listeners.findIndex(listener_i => listener_i == listener);\r\n            if (listenerIndex > -1) {\r\n                listeners.copyWithin(listenerIndex, listenerIndex + 1);\r\n                listeners.length--;\r\n            }\r\n        }\r\n    }*/\r\n    \r\n    /*public registerWidget(widget: Widget): void {\r\n        widget.element.addEventListener(\"focusin\", this);\r\n        this._widgets.push(widget);\r\n    }\r\n\r\n    public unregisterWidget(widget: Widget): void {\r\n        if (this._widgets.includes(widget)) {\r\n            widget.element.removeEventListener(\"focusin\", this);\r\n            this._widgets.splice(this._widgets.indexOf(widget), 1);\r\n        }\r\n    }*/\r\n\r\n    public handleEvent(event: Event): void {\r\n        const target = event.target;\r\n        switch (event.type) {\r\n            case \"keydown\":\r\n                const actionsIndices = this._hotkeys\r\n                    .map((hotkey_i, i) => hotkey_i.test(event as KeyboardEvent) ? i : -1)\r\n                    .filter(i => i > -1);\r\n                actionsIndices.forEach((index) => {\r\n                    const {name, type, value, checked} = this._actions[index];\r\n                    switch (type) {\r\n                        case \"button\":\r\n                            this.executeButtonAction(name);\r\n                            break;\r\n                        case \"checkbox\":\r\n                            this.executeCheckboxAction(name, checked!);\r\n                            break;\r\n                        case \"radio\":\r\n                            this.executeRadioAction(name, value!);\r\n                            break;\r\n                    }\r\n                });\r\n                break;\r\n            case \"trigger\":\r\n                if (target instanceof HTMLEActionElement) {\r\n                    switch (target.type) {\r\n                        case \"button\":\r\n                            this.executeButtonAction(target.name);\r\n                            break;\r\n                        case \"checkbox\":\r\n                            this.executeCheckboxAction(target.name, target.checked);\r\n                            break;\r\n                        case \"radio\":\r\n                        case \"select\":\r\n                            this.executeRadioAction(target.name, target.value);\r\n                            break;\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    \r\n    public registerButtonAction(\r\n        name: string,\r\n        trigger: () => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n        }): ButtonAction {\r\n            return this.registerAction(name, trigger, \"button\", init);\r\n    }\r\n\r\n    public registerRadioAction(\r\n        name: string,\r\n        trigger: (oldValue: string, newValue: string) => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            value?: string;\r\n        }): RadioAction {\r\n            return this.registerAction(name, trigger, \"radio\", init);\r\n    }\r\n\r\n    public registerCheckboxAction(\r\n        name: string,\r\n        trigger: (oldValue: boolean, newValue: boolean) => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            checked?: boolean;\r\n        }): CheckboxAction {\r\n            return this.registerAction(name, trigger, \"checkbox\", init);\r\n    }\r\n\r\n    public registerAction(\r\n        name: string,\r\n        trigger: () => void,\r\n        type: \"button\",\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n        }): ButtonAction;\r\n    public registerAction(\r\n        name: string,\r\n        trigger: (oldValue: boolean, newValue: boolean) => void,\r\n        type: \"checkbox\",\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            checked?: boolean;\r\n        }): CheckboxAction;\r\n    public registerAction(\r\n        name: string,\r\n        trigger: (oldValue: string, newValue: string) => void,\r\n        type: \"radio\",\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            value?: string;\r\n        }): RadioAction;\r\n    public registerAction(\r\n        name: string,\r\n        trigger: (oldValue: any, newValue: any) => void,\r\n        type: ActionType,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            value?: string;\r\n            checked?: boolean;\r\n        }): Action {\r\n        const hotkey = init?.hotkey;\r\n        const key = init?.key;\r\n        const value = init?.value;\r\n        const checked = init?.checked;\r\n        const action: Action = {name, trigger, key, type};\r\n        if (value ?? false) {\r\n            action.value = value;\r\n        }\r\n        if (key !== void 0 && value !== void 0) {\r\n            localStorage.setItem(key, value);\r\n        }\r\n        if (checked ?? false) {\r\n            action.checked = checked;\r\n        }\r\n        const index = this._actions.push(action) - 1;\r\n        if (hotkey) {\r\n            this._hotkeys[index] = hotkey;\r\n        }\r\n        return action;\r\n    }\r\n\r\n    public executeButtonAction(name: string): void {\r\n        this.executeAction(name, \"button\");\r\n    }\r\n\r\n    public executeCheckboxAction(name: string, newChecked: boolean): void {\r\n        this.executeAction(name, \"checkbox\", newChecked);\r\n    }\r\n\r\n    public executeRadioAction(name: string, newValue: string): void {\r\n        this.executeAction(name, \"radio\", newValue);\r\n    }\r\n\r\n    public executeAction(name: string, type: \"button\"): void;\r\n    public executeAction(name: string, type: \"checkbox\", newChecked: boolean): void;\r\n    public executeAction(name: string, type: \"radio\", newValue: string): void;\r\n    public executeAction(name: string, type: ActionType, newValue?: any): void {\r\n        const actionIndex = this._actions.findIndex(\r\n            action_i => action_i.name == name\r\n        );\r\n        if (actionIndex > -1) {\r\n            const action = this._actions[actionIndex];\r\n            let oldValue;\r\n            switch (type) {\r\n                case \"radio\":\r\n                    oldValue = action.value ?? \"\";\r\n                    break;\r\n                case \"checkbox\":\r\n                    oldValue = action.value ?? false;\r\n                    break;\r\n            }\r\n            action.trigger(oldValue, newValue);\r\n            this.setActionValue(name, newValue);\r\n            /*action.value = newValue;\r\n            \r\n            const actionElements = this._actionElements[actionIndex];\r\n            if (actionElements) {\r\n                switch (type) {\r\n                    case \"radio\":\r\n                        actionElements.forEach((actionElement_i) => {\r\n                            if (actionElement_i.type == \"radio\") {\r\n                                actionElement_i.checked = (actionElement_i.value == newValue);\r\n                            }\r\n                            else if (actionElement_i.type == \"select\") {\r\n                                actionElement_i.value = newValue;\r\n                            }\r\n                        });\r\n                        break;\r\n                    case \"checkbox\":\r\n                        actionElements.forEach((actionElement_i) => {\r\n                            actionElement_i.checked = newValue;\r\n                        });\r\n                        break;\r\n                }\r\n            }*/\r\n        }\r\n    }\r\n\r\n    public setCheckboxActionValue(name: string, checked: boolean): void {\r\n        this.setActionValue(name, checked);\r\n    }\r\n\r\n    public setRadioActionValue(name: string, value: string): void {\r\n        this.setActionValue(name, value);\r\n    }\r\n\r\n    public setActionValue(name: string, value?: any): void {\r\n        const actionIndex = this._actions.findIndex(\r\n            action_i => action_i.name == name\r\n        );\r\n        if (actionIndex > -1) {\r\n            const action = this._actions[actionIndex];\r\n            const {type, key} = action;\r\n            action.value = value;\r\n            if (key) {\r\n                localStorage.setItem(key, value);\r\n            }\r\n            \r\n            const actionElements = this._actionElements[actionIndex];\r\n            if (actionElements) {\r\n                switch (type) {\r\n                    case \"radio\":\r\n                        actionElements.forEach((actionElement_i) => {\r\n                            if (actionElement_i.type == \"radio\") {\r\n                                actionElement_i.checked = (actionElement_i.value == value);\r\n                            }\r\n                            else if (actionElement_i.type == \"select\") {\r\n                                actionElement_i.value = value;\r\n                            }\r\n                        });\r\n                        break;\r\n                    case \"checkbox\":\r\n                        actionElements.forEach((actionElement_i) => {\r\n                            actionElement_i.checked = value;\r\n                        });\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public registerActionElement(name: string, element: HTMLEActionElement): void {\r\n        const actionIndex = this._actions.findIndex(action_i => action_i.name == name);\r\n        if (actionIndex > -1) {\r\n            const elements = this._actionElements[actionIndex];\r\n            if (elements) {\r\n                if (!elements.includes(element)) {\r\n                    elements.push(element);\r\n                }\r\n            }\r\n            else {\r\n                this._actionElements[actionIndex] = [element];\r\n            }\r\n\r\n            const action = this._actions[actionIndex];\r\n            const {type, value, checked} = action;\r\n            switch (type) {\r\n                case \"radio\":\r\n                    if (element.type == \"radio\") {\r\n                        element.checked = (element.value == value!);\r\n                    }\r\n                    else if (element.type == \"select\") {\r\n                        element.value = value!;\r\n                    }\r\n                    break;\r\n                case \"checkbox\":\r\n                    element.checked = checked!;\r\n                    break;\r\n            }\r\n\r\n            const hotkey = this._hotkeys[actionIndex];\r\n            if (hotkey) {\r\n                element.hotkey = hotkey.toString();\r\n            }\r\n        }\r\n    }\r\n\r\n    public unregisterActionElement(name: string, element: HTMLEActionElement): void {\r\n        const actionIndex = this._actions.findIndex(action_i => action_i.name == name);\r\n        if (actionIndex > -1) {\r\n            const elements = this._actionElements[actionIndex];\r\n            if (elements) {\r\n                const elementIndex = elements.findIndex(element_i => element_i == element);\r\n                if (elementIndex > -1) {\r\n                    elements.copyWithin(elementIndex, elementIndex + 1);\r\n                    elements.length--;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar Editor: EditorConstructor = EditorBase;"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","slotsMap","WeakMap","slotsObserver","MutationObserver","mutationsList","forEach","mutation","target","type","HTMLElement","slotReferences","slotRef_i","widget","elementRef","slottedCallback","deref","WidgetFactory","constructor","this","create","Proxy","apply","thisArg","argumentsList","root","Reflect","slots","concat","map","slot_i","slot","observe","childList","Array","isArray","push","WeakRef","set","Error","widgets","Map","ModelChangeRecordBase","init","changeType","propertyName","oldValue","newValue","removedIndex","removedItems","ModelNodesList","insertedIndex","insertedItems","sortedIndices","PROPERTY_CHANGE","LIST_REMOVE","LIST_INSERT","LIST_SORT","ModelChangeRecord","items","slice","length","item","index","values","ModelEventBase","ModelEventTargetAccessor","setCurrentTarget","event","currentTarget","setTarget","ModelEvent","ModelNodeBase","receiveEvent","callbacks","callback_i","addEventListener","callback","removeEventListener","callbackIndex","findIndex","splice","delete","dispatchEvent","super","setParent","parentNode","isCyclicReference","ancestorNode","TypeError","beginChanges","endChanges","getRecords","property","records","record","ModelNodeRecordsAccessor","triggerChange","node","handleRecord","ModelNode","ModelProperty","ModelObjectPropertiesAccessor","getProperty","setProperty","ModelObjectBase","ModelObject","ModelList","item_i","fromIndex","indexOf","sort","compareFunction","indexedItems","i","indexedItem_a","indexedItem_b","indexedItem_i","prepend","_items","append","insert","Math","abs","remove","clear","removedItem_i","reference","options","properties","propertiesFilter","subtree","filter","record_i","includes","ModelChangeObserver","references","listener","bind","unobserve","disconnect","camelToTrain","str","replace","toLowerCase","AttributeProperty","toString","attributeName","defaultValue","observed","observedAttributes","writable","Boolean","hasAttribute","setAttribute","removeAttribute","val","getAttribute","JSON","parse","stringify","Number","parseFloat","String","CustomElement","elementCtor","name","customElements","define","Widget","subtreeNodes","childNodes","childNodesCount","childIndex","child","Fragment","nodes","fragment","document","createDocumentFragment","tagName","attributes","dataset","children","listeners","element","createElement","keys","attributeValue","toggleAttribute","elementDataset","datasetEntry_i","from","entries","name_i","listener_i","slotted","NodeList","reactiveElementsMap","reactiveElementsFinalizationRegistry","FinalizationRegistry","heldValue","model","reactiveElement","reactiveElementsMapEntry","reactiveElementsArray","reactiveElementsPropertyObserver","reactiveElement_i","react","register","observerOptions","property_i","Set","reactiveChildElementsMap","reactiveChildElementsFinalizationRegistry","list","reactiveChildElement","reactiveChildrenElementsMapEntry","reactiveChildElementsArray","reactiveChildElementsObserver","range","listLength","reactiveChildElements_i","parentRef","mapping","placeholder","parent","firstChild","childrenCount","removeChild","insertedItemsArray","before","removedCount","createRange","removeEndIndex","setStartBefore","setEndAfter","deleteContents","childrenArray","index_i","reactiveChildElements","reactiveChildElementsMapEntry","areAttributesMatching","referenceAttributeType","referenceAttributeName","referenceAttributeValue","RegExp","test","shadowTemplate","HTMLETreeItemGroupElementBase","shadowRoot","attachShadow","mode","content","cloneNode","assignedElements","element_i","HTMLETreeItemElement","posinset","level","closestItem","matches","parentElement","closest","HTMLETreeItemGroupElement","HTMLETreeItemElementBase","attributeChangedCallback","Event","bubbles","labelPart","querySelector","textContent","style","toggle","force","expanded","shiftKey","ctrlKey","slotName","part","HTMLETreeElementBase","createTreeWalker","NodeFilter","SHOW_ELEMENT","getElementsByTagName","selectedItems","walker","currentNode","selected","beginSelection","endSelection","FILTER_ACCEPT","FILTER_SKIP","FILTER_REJECT","to","position","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","nextVisibleItem","DOCUMENT_POSITION_PRECEDING","previousVisibleItem","selectedItem_i","contains","activeItem","active","tabIndex","dropTargetItem","droptarget","lastChild","previousSibling","nextNode","nextSibling","lastItem","blur","stopPropagation","lastSelectedItem","preventDefault","relatedTarget","relatedTargetRoot","getRootNode","relatedTargetHost","ShadowRoot","host","firstItem","parentItem","focus","preventScroll","previousItem","nextItem","click","HTMLETreeElement","ViewBase","setModel","renderLight","renderShadow","refresh","shadow","replaceChildren","light","View","TreeModel","childItems","flattenItems","sortFunction","item_a","item_b","label","localeCompare","flatMap","treeItem_i","of","getItemByUri","uri","itemsCount","uriLength","itemUri","itemUriLength","startsWith","charAt","flattenedInsertedItems","insertedItem_i","flattenedRemovedItems","TreeItemList","show","console","log","hide","display","result","reduce","removedItemsGroups","TreeItemModel","group","list_i","children_i","child_i","childCount","visibility","TreeViewBase","getTreeElement","getTreeItemElement","getDragImageElement","tree","treeElement","tabindex","dragstart","drop","contextmenu","keydown","rel","href","class","hidden","treeItemElement","draggable","trigger","treeitem","badge","toolbar","visibilityItem","namedItem","title","checked","dragImageElement","span","dataTransfer","selectedElements","selectedCount","selectedUris","uri_i","_","uris","some","uri_j","selectedUrisString","join","lastUri","dropEffect","setData","dragImage","setDragImage","targetUri","targetItem","transferedUris","getData","split","transferedItems","targetType","targetParentItem","targetList","newElements","clientX","clientY","menu","contextual","close","body","positionContextual","TreeView","HTMLEActionElementBase","disabled","enable","disable","Key","KeyModifier","MouseButton","HTMLEActionElement","HTMLEGridCellElementBase","HTMLEGridCellElement","HTMLEGridRowGroupElementBase","HTMLEGridRowGroupElement","HTMLEMenuItemElementBase","expand","collapse","menuStyle","top","itemTop","bottom","itemBottom","left","itemLeft","right","itemRight","getBoundingClientRect","width","menuWidth","height","menuHeight","scrollY","scrollX","window","clientWidth","clientHeight","overflowX","overflowY","closestMenu","closestMenuTop","closestMenuLeft","menuComputedStyle","getComputedStyle","paddingTop","paddingBottom","menuPaddingTop","menuPaddingBottom","selector","propertyKey","getter","withinShadowRoot","HTMLEMenuItemElement","EMenuItem","assign","button","checkbox","radio","submenu","HTMLEMenuItemGroupElementBase","toggleTimeouts","HTMLEMenuItemGroupElement","EMenuItemGroup","radios","HTMLEMenuElementBase","x","y","querySelectorAll","find","previousNode","nearestItem","error","async","delay","Promise","resolve","reject","timeout","setTimeout","clearTimeout","then","composedPath","target_i","HTMLEMenuElement","catch","intersectsWithMouse","containsRelatedTarget","radio_i","EMenu","HTMLEGridRowElementBase","cells","HTMLEGridCellCollection","cell_i","HTMLEGridRowElement","HTMLEGridBodyElement","HTMLEGridRowCollection","HTMLEGridBodyElementBase","rows","HTMLEGridHeadElementBase","HTMLEGridHeadElement","HTMLEGridElementBase","node_i","clearSelection","selectedCells","selectedRows","toIndex","min","max","nextVisibleRow","previousVisibleRow","selectedCell_i","selectedRow_i","row_i","cell","activeCell","closestRow","row","activeRow","cellsWalker","rowsWalker","closestRowCells","cellIndex","previousRow","previousRowCells","nextRow","nextRowCells","selectby","targetCell","targetRow","lastSelectedCell","lastSelectedRow","firstRow","firstCell","lastRow","lastCell","previousCell","nextCell","topCell","bottomCell","HTMLEMenuBarElementBase","Element","isExpanded","HTMLEMenuButtonElementBase","HTMLEMenuButtonElement","EMenuButton","HTMLEOptionElementBase","HTMLEOptionElement","HTMLEOptionGroupElementBase","HTMLEOptionGroupElement","HTMLESelectElementBase","matchingOption","option","selectedIndex","activeOption","descriptionPart","description","selectedOption","valuePart","optionsStyle","selectBottom","selectLeft","previousOption","nextOption","firstOption","lastOption","activeIndex","keyLength","keyCode","charCodeAt","optionsArray","firstMatchIndex","option_i","nextMatchIndex","matchIndex","default","slottedKeyboardListeners","slottedTriggerListeners","HTMLESelectElement","HTMLEToolBarItemElementBase","menubutton","select","selectValue","HTMLEToolBarItemElement","EToolBarItem","HTMLEToolBarItemGroupElementBase","HTMLEToolBarItemGroupElement","HTMLEToolBarItemCollectionBase","HTMLEToolBarItemRadioList","HTMLEToolBarItemRadioListBase","itemName","itemType","HTMLEToolBarItemCollection","HTMLEToolBarElementBase","HTMLEToolBarElement","HTMLETabPanelElementBase","HTMLETabPanelElement","HTMLETabElementBase","connectedCallback","panel","getElementById","controls","CustomEvent","detail","tab","HTMLETabElement","HTMLETabListElementBase","tabs","focusTabAt","activeTab","activateTab","targetIndex","thisTab","thisTabIndex","HTMLEListItemElementBase","HTMLSpanElement","HTMLEListItemElement","HTMLEListItemGroupElementBase","HTMLEListItemGroupElement","HTMLEListElementBase","HTMLEListElement","HTMLEDraggableElementBase","disconnectedCallback","referee","thisRefIndex","getReference","HTMLEDraggableElement","HTMLEDragzoneElementBase","selectDraggable","selectedDraggables","unselectDraggable","draggables","elem","thisSelectedDraggable","dragged","id","thisDraggedDraggable","firstIndex","direction","sign","startRangeIndex","endRangeIndex","thisDraggable","HTMLEDragzoneElement","HTMLEDropzoneElementBase","droptest","appendAreaPart","removeDraggables","dragovered","dropIndex","dragzoneId","dragzone","selectedDraggable","HTMLEDropzoneElement","addDraggables","placeholderPart","dataTransferSuccess","newDraggables","insertionPosition","multiple","newDraggable","insertAdjacentElement","appendChild","replaceChild","action","once","predicate","toRemove","atPosition","HTMLEDialogElementBase","handleEvent","cancel","confirm","open","HTMLEHandleElementBase","pointerId","releasePointerCapture","setPointerCapture","targetComputedStyle","movementX","movementY","rectWidth","rectHeight","outerElement","outerRectLeft","outerRectRight","outerRectTop","outerRectBottom","getPropertyValue","newLeft","trunc","newTop","HTMLEHeightSashElementBase","rootNode","requestAnimationFrame","growdir","newHeight","computedNewHeight","HTMLEImportElementBase","src","outerHTML","fetch","response","ok","text","statusText","barShadowTemplate","circleShadowTemplate","HTMLELoaderElementBase","promise","finally","commonStyle","barStyle","circleStyle","HTMLEWidthSashElementBase","setWidth","newWidth","role","menuItemWidget","hasIcon","hasArrow","keyshortcut","setKeyShortcut","setChecked","setType","setLabel","setName","setValue","setDisabled","hasChildMenu","childNode_i","classList","getMenu","getKeyShortcut","keyshortcutsPart","after","getLabel","getType","types","type_i","typesFeatures","iconPartTemplate","arrowPartTemplate","oldType","add","iconPart","arrowPart","getValue","getName","getChecked","getDisabled","setExpanded","getExpanded","menubar","setContextual","getContextual","menuitem_i","treeitemWidget","leaf","getGroup","setPosInSet","getPosInSet","posInSet","parseInt","contentPart","setActive","getActive","setDropTarget","getDropTarget","setSelected","getSelected","setLevel","getLevel","targetClosestItem","targetTree","ListModel","getItemByIndex","ListItemList","ListItemModel","ListViewBase","getListElement","getListItemElement","listElement","listItemElement","toolbaritem","ListView","GridModel","columns","getColumnByName","column_i","sortByColumn","column","sortOrder","sortorder","row_1","row_2","cell_1","extract","cell_2","GridColumnModel","filters","GridRowModel","age","GridViewBase","getGridElement","setColumnDelegate","delegate","setCellDelegate","getRowElement","getColumnHeaderElement","getColumnDataElements","input","setSearchFilter","rowElement","filter_i","gridElement","addDisplayFilter","removeDisplayFilter","displayFilters","filterIndex","every","resizable","columnHeaderElement","removeProperty","maxWidth","sortRadioItem_i","resize","gridRowElement","headers","HTMLInputElement","targetColumn","GridView","main","treeView","treeModel","aLabel","bLabel","listView","gridView","sortable","menuView","_actions","_actionElements","_hotkeys","_pairs","_pairsListeners","_actionsObserver","_actionsObserverCallback","addedNodes","registerActionElement","removedNodes","unregisterActionElement","setup","hotkey_i","executeButtonAction","executeCheckboxAction","executeRadioAction","registerButtonAction","registerAction","registerRadioAction","registerCheckboxAction","hotkey","localStorage","setItem","executeAction","newChecked","actionIndex","action_i","setActionValue","setCheckboxActionValue","setRadioActionValue","actionElements","actionElement_i","elements","elementIndex","copyWithin"],"sourceRoot":""}