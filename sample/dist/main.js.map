{"version":3,"file":"main.js","mappings":"4BACA,IAAIA,EAAsB,CCA1B,EAAwB,CAACC,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXF,EAAoBI,EAAEF,EAAYC,KAASH,EAAoBI,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,MCJ3E,EAAwB,CAACM,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClF,EAAyBT,IACH,oBAAXa,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeL,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAeL,EAAS,aAAc,CAAEe,OAAO,M,uCCevD,I,sCAAIC,EAA0E,IAAIC,QAC9EC,EAAgB,IAAIC,kBACnBC,IACGA,EAAcC,SAASC,IACnB,MAAM,OAACC,EAAM,KAAEC,GAAQF,EACvB,GAAIC,aAAkBE,YAClB,OAAQD,GACJ,IAAK,YAAa,CACd,MAAME,EAAiBV,EAAST,IAAIgB,GAChCG,GACAA,EAAeL,SAAQM,IACnB,MAAOC,EAAQC,GAAcF,EACvBG,EAAmBF,EAAgC,gBAC3B,mBAAnBE,GACPA,EAAgBD,EAAWE,QAASR,MAIhD,cAQpBS,EAAmD,IAAIf,QACvDgB,EAAqB,IAAId,kBACxBC,IACGA,EAAcC,SAASC,IACnB,MAAM,OAACC,EAAM,KAAEC,GAAQF,EACvB,GAAIC,aAAkBE,YAClB,OAAQD,GACJ,IAAK,aAAc,CACf,MAAM,cAACU,EAAa,SAAEC,GAAYb,EAC5BM,EAASI,EAAYzB,IAAIgB,GAC/B,GAAIK,EAAQ,CACR,MAAMQ,EAA4BR,EAAyC,yBACpC,mBAA5BQ,GACPA,EAAyBb,EAAQW,EAAeC,EAAUZ,EAAOc,aAAaH,IAGtF,cA6DpBI,EArDJ,MAEIC,cACI,MAAMX,EAAwBY,KAC9BA,KAAKC,OAAS,IAAIC,MACdF,KAAKC,OAAQ,CACTE,MAAO,CAACpB,EAAQqB,EAASC,KACrB,MAAMC,EAAUC,QAAQJ,MAAMpB,EAAQqB,EAASC,GACdjB,EAAOoB,MAAOC,OAAO,MAAMC,KAAIC,GACrDvB,EAAOwB,KAAKN,EAASK,KAE1B9B,SAAQ8B,IACV,GAAIA,EAAQ,CACRjC,EAAcmC,QAAQF,EAAQ,CAC1BG,WAAW,IAEf,MAAM5B,EAAiBV,EAAST,IAAI4C,GAChCI,MAAMC,QAAQ9B,GACdA,EAAe+B,KAAK,CAAC7B,EAAQ,IAAI8B,QAAQZ,KAGzC9B,EAAS2C,IAAIR,EAAQ,IAAII,MAAM,CAAC3B,EAAQ,IAAI8B,QAAQZ,UAIhE,MAAMc,EAAsBhC,EAAmC,mBAS/D,OARI2B,MAAMC,QAAQI,KACd5B,EAAY2B,IAAIb,EAASlB,GACzBK,EAAmBoB,QAAQP,EAAS,CAChCe,YAAY,EACZC,gBAAiBF,EACjBG,mBAAmB,KAGpBjB,KAMvBL,SACI,MAAM,IAAIuB,MAAM,oCAGpBZ,KAAKa,GACD,OAAOA,EAGX,YACI,MAAO,KAKXC,EAAsC,IAAIC,I,opBC5E9C,MAAMC,EAYF7B,YACI8B,GAaA7B,KAAKjB,OAAS8C,EAAK9C,OACnBiB,KAAK8B,WAAaD,EAAKC,WACvB9B,KAAK+B,aAAeF,EAAKE,cAAgB,KACzC/B,KAAKL,SAAWkC,EAAKlC,eAAY,EACjCK,KAAKgC,SAAWH,EAAKG,eAAY,EACjChC,KAAKiC,aAAeJ,EAAKI,cAAgB,EACzCjC,KAAKkC,aAAe,IAAIC,EAAeN,EAAKK,cAAgB,IAC5DlC,KAAKoC,cAAgBP,EAAKO,eAAiB,EAC3CpC,KAAKqC,cAAgB,IAAIF,EAAeN,EAAKQ,eAAiB,IAC9DrC,KAAKsC,cAAgBT,EAAKS,eAAiB,GAG/C,6BACI,OAAO,EAGX,yBACI,OAAO,EAGX,yBACI,OAAO,EAGX,uBACI,OAAO,EAGX,sBACI,OAAOV,EAAsBW,gBAGjC,kBACI,OAAOX,EAAsBY,YAGjC,kBACI,OAAOZ,EAAsBa,YAGjC,gBACI,OAAOb,EAAsBc,WAIrC,IAAIC,EAAkDf,E,cAiCtD,IAAIO,EApBJ,MAGIpC,YAAY6C,GAFZ,mBAGI,EAAA5C,KAAI,EAAU4C,EAAMC,QAAO,KAG/B,aACI,OAAO,EAAA7C,KAAI,OAAQ8C,OAGvBC,KAAKC,GACD,OAAO,EAAAhD,KAAI,OAAQgD,IAAU,KAGjCC,SACI,OAAO,EAAAjD,KAAI,OAAQiD,WAiB3B,MAAMC,EAMFnD,YAAYf,GAHZ,mBACA,mBAGIgB,KAAKhB,KAAOA,EACZ,EAAAgB,KAAI,EAAkB,KAAI,KAC1B,EAAAA,KAAI,EAAW,KAAI,KAGvB,oBACI,OAAO,EAAAA,KAAI,OAGf,aACI,OAAO,EAAAA,KAAI,Q,4BAGR,EAAAmD,yBAA4B,IAAI,MACnCC,iBAAiBC,EAAmBC,GAC5BD,aAAiBH,GACjB,EAAAG,EAAK,EAAkBC,EAAa,KAI5CC,UAAUF,EAAmBtE,GACrBsE,aAAiBH,GACjB,EAAAG,EAAK,EAAWtE,EAAM,OAWtC,IAAIoE,EAAqDD,EAAeC,gCACjED,EAAeC,yBAEtB,IAAIK,EAAoCN,E,cAmFxC,MAAMO,UArEN,MAGI1D,cAFA,mBAGI,EAAAC,KAAI,EAAc,IAAI2B,IAAK,KAG/B+B,aAAaL,GACT,MAAM,KAACrE,GAAQqE,EACTM,EAAY,EAAA3D,KAAI,OAAYjC,IAAIiB,GACtCmE,EAAyBC,iBAAiBC,EAAOrD,MAC7C2D,GACAA,EAAU9E,SAAS+E,IACfA,EAAWP,MAKvBQ,iBAAiB7E,EAAc8E,GAC3B,MAAMH,EAAY,EAAA3D,KAAI,OAAYjC,IAAIiB,GAClC2E,EACAA,EAAU1C,KAAK6C,GAGf,EAAA9D,KAAI,OAAYmB,IAAInC,EAAM,CAAC8E,IAInCC,oBAAoB/E,EAAc8E,GAC9B,MAAMH,EAAY,EAAA3D,KAAI,OAAYjC,IAAIiB,GACtC,GAAI2E,EAAW,CACX,MAAMK,EAAgBL,EAAUM,WAC5BL,GAAcA,GAAcE,IAE5BE,GAAiB,GACjBL,EAAUO,OAAOF,EAAe,GAEZ,GAApBL,EAAUb,QACV,EAAA9C,KAAI,OAAYmE,OAAOnF,IAKnCoF,cAAcf,GACVF,EAAyBI,UAAUF,EAAOrD,MAC1CA,KAAK0D,aAAaL,KA6BtBtD,cACIsE,Q,YALJ,mBACA,mBACA,mBAII,EAAArE,KAAI,EAAe,KAAI,KACvB,EAAAA,KAAI,EAAY,GAAE,KAClB,EAAAA,KAAI,GAAgB,EAAK,KAG7B,iBACI,OAAO,EAAAA,KAAI,OAGfsE,UAAUC,GACN,GAAmB,OAAfA,EAAqB,CACrB,IAAIC,EAAoBD,GAAcvE,MACjCuE,WAAYE,GAAgBF,EACjC,MAAQC,GAAsC,OAAjBC,KACvBF,WAAYE,GAAgBA,GAC9BD,EAAoBC,GAAgBzE,KAExC,GAAKwE,EAID,MAAM,IAAIE,UAAU,oFAHpB,EAAA1E,KAAI,EAAeuE,EAAU,UAOjC,EAAAvE,KAAI,EAAe,KAAI,KAI/B2E,eACI,EAAA3E,KAAI,GAAgB,EAAI,KAG5B4E,aACI5E,KAAKoE,cAAc,IAAIZ,EAAW,gBAClC,EAAAxD,KAAI,OAAUkE,OAAO,GACrB,EAAAlE,KAAI,GAAgB,EAAK,KAG7B6E,aACI,OAAO,EAAA7E,KAAI,OAAU6C,QAGzBa,aAAaL,GACTgB,MAAMX,aAAaL,GACnB,MAAM,WAACkB,GAAcvE,KACjBuE,GACAA,EAAWb,aAAaL,I,mEAIjByB,EAAkBnF,EAAeqC,GAC5C,MAAM+C,EAAU,EAAA/E,KAAI,OACdgF,EAAS,IAAIrC,EAAkB,CACjC5D,OAAQiB,KACR8B,WAAYa,EAAkBJ,gBAC9BR,aAAc+C,EACdnF,SAAAA,EAAUqC,SAAAA,IAEd+C,EAAQ9D,KAAK+D,GACbhF,KAAKoE,cAAc,IAAIZ,EAAW,gBAClCuB,EAAQb,OAAO,IAClB,WAEac,GACV,EAAAhF,KAAI,OAAUiB,KAAK+D,GACd,EAAAhF,KAAI,SACLA,KAAKoE,cAAc,IAAIZ,EAAW,gBAClC,EAAAxD,KAAI,OAAUkE,OAAO,KAItB,EAAAe,yBAA4B,IAAI,MACnCC,cAAcC,EAAiBL,EAAkBnF,EAAeqC,GACxDmD,aAAgB1B,GAChB,EAAA0B,EAAI,SAAe,KAAnBA,EAAoBL,EAAUnF,EAAUqC,GAIhDoD,aAAaD,EAAiBH,GACtBG,aAAgB1B,GAChB,EAAA0B,EAAI,SAAc,KAAlBA,EAAmBH,KAMnC,IAAIC,EAAqDxB,EAAcwB,gCAChExB,EAAcwB,yBAErB,IAAII,EAAkC5B,EAUtC,MAAM6B,EAAwC,SAC1CzD,GAIA,MAAO,CACH9C,EAAqB+F,KAErB,MAAM,YAAC/E,GAAehB,GAChB,UAACb,GAAa6B,EAwBpBnC,OAAOC,eAAeK,EAAW4G,EAAU,CACvC3D,IAZW,SAA4B5C,GACvC,MAAMoB,EAAW4F,EAA8BC,YAAYxF,KAAM8E,GAKjE,OAJAS,EAA8BE,YAAYzF,KAAM8E,EAAUvG,GACtDA,IAAUoB,GACVsF,EAAyBC,cAAclF,KAAM8E,EAAUnF,EAAUpB,IAE9D,GAOPR,IALW,WACX,OAAOwH,EAA8BC,YAAYxF,KAAM8E,IAKvDhH,YAAY,MAiBxB,MAAM4H,UAAwBjC,EAG1B1D,cACIsE,QAHJ,mBAII,EAAArE,KAAI,EAAe,IAAI2B,IAAK,M,cAGzB,EAAA4D,8BAAiC,IAAI,MACxCE,YAAYN,EAAmBL,EAAkBvG,GACzC4G,aAAgBO,GAChB,EAAAP,EAAI,OAAahE,IAAI2D,EAAUvG,GAIvCiH,YAAYL,EAAmBL,GAC3B,GAAIK,aAAgBO,EAChB,OAAO,EAAAP,EAAI,OAAapH,IAAI+G,KAM5C,IAAIS,EAA+DG,EAAgBH,qCAC5EG,EAAgBH,8BAEvB,IAAII,EAAsCD,E,cAqM1C,IAAIE,EA9KJ,cAAiEnC,EAK7D1D,YAAY6C,GACRyB,QALJ,mBAMI,EAAArE,KAAI,EAAU4C,GAAOC,SAAW,GAAE,KAGtCyB,UAAUC,GACNF,MAAMC,UAAUC,GAChB,EAAAvE,KAAI,OAAQnB,SAASgH,IACjBA,EAAOvB,UAAUC,MAIzB,aACI,OAAO,EAAAvE,KAAI,OAAQ8C,OAGvB/E,IAAIiF,GACA,OAAO,EAAAhD,KAAI,OAAQgD,IAAU,KAGjCA,MAAMD,EAAa+C,GACf,OAAO,EAAA9F,KAAI,OAAQ+F,QAAQhD,EAAM+C,GAGrC7C,SACI,OAAO,EAAAjD,KAAI,OAAQiD,SAGvB+C,KAAKC,GACD,MACMC,EADQ,EAAAlG,KAAI,OACSU,KACvB,CAACmF,EAAQM,KACE,CACHpD,KAAM8C,EACN7C,MAAOmD,MAInBD,EAAaF,MACT,CAACI,EAAeC,IACLJ,EACHG,EAAcrD,KAAMsD,EAActD,QAI9C,EAAA/C,KAAI,EAAUkG,EAAaxF,KAAI4F,GAAiBA,EAAcvD,OAAK,KACnE,MAAMiC,EAAS,IAAIrC,EAAkB,CACjC5D,OAAQiB,KACR8B,WAAYa,EAAkBD,UAC9BJ,cAAe4D,EAAaxF,KAAI4F,GAAiBA,EAActD,UAEnEiC,EAAyBG,aAAapF,KAAMgF,GAGhDuB,WAAW3D,GACP,MAAM4D,EAAS,EAAAxG,KAAI,QACb,WAACuE,GAAcvE,KACjBuE,GACA3B,EAAM/D,SAAQgH,IACVA,EAAOvB,UAAUC,MAGzBiC,EAAOtC,OAAO,EAAG,KAAMtB,GACvB,MAAMoC,EAAS,IAAIrC,EAAkB,CACjC5D,OAAQiB,KACR8B,WAAYa,EAAkBF,YAC9BL,cAAe,EACfC,cAAeO,IAEnBqC,EAAyBG,aAAapF,KAAMgF,GAGhDyB,UAAU7D,GACN,MAAM4D,EAAS,EAAAxG,KAAI,QACb,OAAC8C,GAAU0D,GACX,WAACjC,GAAcvE,KACjBuE,GACA3B,EAAM/D,SAAQgH,IACVA,EAAOvB,UAAUC,MAGzBiC,EAAOvF,QAAQ2B,GACf,MAAMoC,EAAS,IAAIrC,EAAkB,CACjC5D,OAAQiB,KACR8B,WAAYa,EAAkBF,YAC9BL,cAAeU,EACfT,cAAeO,IAEnBqC,EAAyBG,aAAapF,KAAMgF,GAGhD0B,OAAO1D,KAAkBJ,GACrB,MAAM4D,EAAS,EAAAxG,KAAI,QACb,OAAC8C,GAAU0D,EAEjB,GADsBG,KAAKC,IAAI5D,IACVF,EAAQ,CACzB,GAAIE,GAAS,EAAG,CACZ,MAAM,WAACuB,GAAcvE,KACrB4C,EAAM/D,SAAQgH,IACVA,EAAOvB,UAAUC,MAEjBvB,EAAQF,EACR0D,EAAOtC,OAAOlB,EAAO,KAAMJ,GAG3B4D,EAAOvF,QAAQ2B,QAGlB,GAAII,EAAQ,EAAG,CAChBA,EAAQF,EAASE,EACjB,MAAM,WAACuB,GAAcvE,KACjBuE,GACA3B,EAAM/D,SAAQgH,IACVA,EAAOvB,UAAUC,MAGzBiC,EAAOtC,OAAOlB,EAAO,KAAMJ,GAE/B,MAAMoC,EAAS,IAAIrC,EAAkB,CACjC5D,OAAQiB,KACR8B,WAAYa,EAAkBF,YAC9BL,cAAeY,EACfX,cAAeO,EAAMC,UAEzBoC,EAAyBG,aAAapF,KAAMgF,IAIpD6B,OAAO9D,GACH,MAAMyD,EAAS,EAAAxG,KAAI,OACbgD,EAAQwD,EAAOT,QAAQhD,GAC7B,GAAIC,GAAS,EAAG,CACZ,MAAMD,EAAOyD,EAAOtC,OAAOlB,EAAO,GAAG,IAC/B,WAACuB,GAAcvE,KACjBuE,GACAxB,EAAKuB,UAAU,MAEnB,MAAMU,EAAS,IAAIrC,EAAkB,CACjC5D,OAAQiB,KACR8B,WAAYa,EAAkBH,YAC9BP,aAAce,EACdd,aAAc,CAACa,KAEnBkC,EAAyBG,aAAapF,KAAMgF,IAIpD8B,QACI,MAAMlE,EAAQ,EAAA5C,KAAI,QACZ,OAAC8C,GAAUF,EACjB,GAAIE,EAAS,EAAG,CACZ,MAAMZ,EAAeU,EAAMsB,OAAO,IAC5B,WAACK,GAAcvE,KACjBuE,GACArC,EAAarD,SAASkI,IAClBA,EAAczC,UAAU,SAGhC,MAAMU,EAAS,IAAIrC,EAAkB,CACjC5D,OAAQiB,KACR8B,WAAYa,EAAkBH,YAC9BP,aAAc,EACdC,aAAcA,IAElB+C,EAAyBG,aAAapF,KAAMgF,M,mFAwEhD,MAAMD,EAAU,EAAA/E,KAAI,OAAUkE,OAAO,GACjCa,EAAQjC,OAAS,GACjB,EAAA9C,KAAI,OAAU,KAAdA,KAAe+E,IAEtB,WAEiB1B,GACd,IAAK,EAAArD,KAAI,OAAgB,CACrB,MAAM,OAACjB,EAAM,cAAEuE,GAAiBD,EAC1B2D,EAAY,EAAAhH,KAAI,OAAajC,IAAeuF,GAClD,GAAI0D,EAAW,CACX,MAAM,QAACC,GAAWD,GACZ,WAACE,EAAU,iBAAEC,EAAgB,UAAErG,EAAS,QAAEsG,GAAWH,EACvDG,EACIF,GAAcnI,aAAkBsG,GAC5B8B,EACA,EAAAnH,KAAI,OAAUiB,QACPlC,EAAO8F,aACLwC,QAAOC,IACJ,MAAM,aAACvF,GAAgBuF,EACvB,OAAOH,EAAiBI,SACpBxF,OAMhB,EAAA/B,KAAI,OAAUiB,QACPlC,EAAO8F,cAGlB,EAAA7E,KAAI,SAAS,KAAbA,OAEKc,GAAa/B,aAAkB6G,IACpC,EAAA5F,KAAI,OAAUiB,QACPlC,EAAO8F,cAEd,EAAA7E,KAAI,SAAS,KAAbA,OAGCjB,GAAUuE,IACX4D,GAAcnI,aAAkBsG,GAC5B8B,EACA,EAAAnH,KAAI,OAAUiB,QACPlC,EAAO8F,aACLwC,QAAOC,IACJ,MAAM,aAACvF,GAAgBuF,EACvB,OAAOH,EAAiBI,SACpBxF,OAMhB,EAAA/B,KAAI,OAAUiB,QACPlC,EAAO8F,cAGlB,EAAA7E,KAAI,SAAS,KAAbA,OAEKc,GAAa/B,aAAkB6G,IACpC,EAAA5F,KAAI,OAAUiB,QACPlC,EAAO8F,cAEd,EAAA7E,KAAI,SAAS,KAAbA,WAQxB,IAAIwH,EAvHJ,MAUIzH,YAAY+D,G,YATZ,mBACA,mBACA,mBAEA,mBAMI,EAAA9D,KAAI,EAAa8D,EAAQ,KACzB,EAAA9D,KAAI,EAAY,GAAE,KAClB,EAAAA,KAAI,GAAiB,EAAK,KAC1B,EAAAA,KAAI,EAAe,IAAIvB,QAAS,KAGpCoC,QAAQsE,EAAiB8B,GACrB,EAAAjH,KAAI,GAAiB,EAAK,KAC1B,MAAMyH,EAAa,EAAAzH,KAAI,OACvB,IAAIgH,EAAYS,EAAW1J,IAAIoH,GAC/B,GAAK6B,EAODS,EAAWtG,IAAIgE,EAAM6B,OAPT,CACZ,MAAMU,EAAW,EAAA1H,KAAI,SAAmB2H,KAAK3H,MAC7CmF,EAAKtB,iBAAiB,cAAe6D,GACrCV,EAAY,CAACU,SAAAA,EAAUT,QAAAA,GACvBQ,EAAWtG,IAAIgE,EAAM6B,IAO7BY,UAAUzC,GAEN,IAAI6B,EADe,EAAAhH,KAAI,OACIjC,IAAIoH,GAC/B,GAAI6B,EAAW,CACX,MAAM,SAACU,GAAYV,EACnB7B,EAAKpB,oBAAoB,cAAe2D,IAIhDG,aACI,EAAA7H,KAAI,OAAUkE,OAAO,GACrB,EAAAlE,KAAI,GAAiB,EAAI,OC7oBjC,SAAS8H,EAAaC,GACpB,OAAOA,EAAIC,QAAQ,mBAAoB,KAAKC,cC/B9C,MAAMC,EAAgD,SAClDrG,GAMA,MAAO,CACH9C,EAAW+F,KAEX,MAAM,YAAC/E,GAAehB,GAChB,UAACb,GAAa6B,EACdgC,EAAe+C,EAASqD,WACxBzI,EAAgBoI,EAAa/F,GAC7BqG,EAAevG,EAAKuG,cAAgB,KAE1C,GADiBvG,EAAKwG,SACR,CACV,MAAMjH,EAAqBb,QAAQxC,IAAIgC,EAAa,qBAAsBA,GACtEgB,MAAMC,QAAQI,GACdA,EAAmBH,KAAKvB,GAGxB9B,OAAOC,eACHkC,EAAa,qBAAsB,CAC/BxB,MAAO,CAACmB,GACR4I,UAAU,IAK1B,MAAM,KAACtJ,GAAQ6C,EACf,OAAQ7C,GACJ,KAAKuJ,QACD3K,OAAOC,eAAeK,EAAW6D,EAAc,CAC3ChE,IAAK,WACD,OAAOiC,KAAKwI,aAAa9I,IAE7ByB,IAAK,SAA4B5C,GACzBA,EACAyB,KAAKyI,aAAa/I,EAAe,IAGjCM,KAAK0I,gBAAgBhJ,MAIjC,MAEJ,KAAK9B,OACDA,OAAOC,eAAeK,EAAW6D,EAAc,CAC3ChE,IAAK,WACD,MAAM4K,EAAM3I,KAAKH,aAAaH,GAC9B,OAAgB,OAARiJ,EAAgBC,KAAKC,MAAMF,GAAOP,GAE9CjH,IAAK,SAA4B5C,GACf,OAAVA,EACAyB,KAAKyI,aAAa/I,EAAekJ,KAAKE,UAAUvK,IAGhDyB,KAAK0I,gBAAgBhJ,MAIjC,MAEJ,KAAKqJ,OACDnL,OAAOC,eAAeK,EAAW6D,EAAc,CAC3ChE,IAAK,WACD,MAAM4K,EAAM3I,KAAKH,aAAaH,GAC9B,OAAgB,OAARiJ,EAAgBK,WAAWL,GAAOP,GAE9CjH,IAAK,SAA4B5C,GACf,OAAVA,EACAyB,KAAKyI,aAAa/I,EAAenB,GAGjCyB,KAAK0I,gBAAgBhJ,MAIjC,MAEJ,KAAKuJ,OACL,QACIrL,OAAOC,eAAeK,EAAW6D,EAAc,CAC3ChE,IAAK,WACD,MAAM4K,EAAM3I,KAAKH,aAAaH,GAC9B,OAAgB,OAARiJ,EAAgBA,EAAMP,GAElCjH,IAAK,SAA4B5C,GACf,OAAVA,EACAyB,KAAKyI,aAAa/I,EAAenB,GAGjCyB,KAAK0I,gBAAgBhJ,SAkC3CwJ,EAAwC,SAASrH,GAInD,OACIsH,IAEA,MAAM,KAACC,EAAI,QAAEnC,GAAWpF,EAQxB,OAPKwH,eAAetL,IAAIqL,IACpBC,eAAeC,OACXF,EACAD,EACAlC,GAGDkC,IAUTI,EAA0B,SAAS1H,GAGrC,OACIzC,IAEA,MAAM,KAACgK,GAAQvH,EAKf,OAJAH,EAAQP,IACJiI,EACA,IAAIhK,GAEDA,IAIf,SAAUoK,EAAarE,SACbA,EACN,MAAMsE,EAAatE,EAAKsE,WAClBC,EAAkBD,EAAW3G,OACnC,IAAI6G,EAAa,EACjB,KAAOA,EAAaD,GAAiB,CACjC,MAAME,EAAQH,EAAW1G,KAAK4G,GAChB,OAAVC,UACQJ,EAAaI,IAEzBD,KAgFR,SAASE,KAAYC,GACjB,MAAMD,EAAWE,SAASC,yBAE1B,OADAH,EAASpD,UAAUqD,GACZD,EAyBX,SAAS,EACLI,EAAYpI,GACZ,GAAIA,EAAM,CACN,MAAM,QAACoF,EAAO,WAAE5F,EAAU,QAAE6I,EAAO,SAAEC,EAAQ,UAAEC,GAAavI,EACtDvB,EAAUyJ,SAASM,cAAcJ,EAAShD,GAchD,GAbI5F,GACAzD,OAAO0M,KAAKjJ,GAAYxC,SAASa,IAC7B,MAAM6K,EAAiBlJ,EAAW3B,QACX,IAAnB6K,IAC6B,kBAAlBA,EACPjK,EAAQkK,gBAAgB1C,EAAapI,GAAgB6K,GAGrDjK,EAAQmI,aAAaX,EAAapI,GAAgB6K,EAAepC,gBAK7E+B,EAAS,CACT,MAAOA,QAASO,GAAkBnK,EAClC1C,OAAO0M,KAAKJ,GAASrL,SAAS6L,IAC1BD,EAAeC,GAAkBR,EAAQQ,GAAgBvC,cAqBjE,OAlBIgC,IACuB,mBAAZA,EACP7J,EAAQmG,UAAU0D,EAAS7J,IAG3BA,EAAQmG,UAAU1F,MAAM4J,KAAKR,KAGjCC,GACAxM,OAAOgN,QAAQR,GAAWvL,SAAQ,EAAEgM,EAAQC,MACpC/J,MAAMC,QAAQ8J,GACdxK,EAAQuD,iBAAiBgH,EAAQC,EAAW,GAAIA,EAAW,IAG3DxK,EAAQuD,iBAAiBgH,EAAQC,MAItCxK,EAEX,OAAOyJ,SAASM,cAAcJ,GAuBlC,SAAS7K,EACLgK,EAASvH,GACT,MAAMzC,EAASsC,EAAQ3D,IAAIqL,GAC3B,GAAIhK,EAAQ,CACR,MAAMkB,EAAuBlB,EAAOa,OAAO4B,GAAMqF,YACjD,GAAIrF,EAAM,CACN,MAAM,WAACR,EAAU,QAAE6I,EAAO,QAAEa,EAAO,UAAEX,GAAavI,EAclD,GAbIR,GACAzD,OAAO0M,KAAKjJ,GAAYxC,SAASa,IAC7B,MAAM6K,EAAiBlJ,EAAW3B,QACX,IAAnB6K,IAC6B,kBAAlBA,EACPjK,EAAQkK,gBAAgB1C,EAAapI,GAAgB6K,GAGrDjK,EAAQmI,aAAaX,EAAapI,GAAgB6K,EAAepC,gBAK7E+B,EAAS,CACT,MAAOA,QAASO,GAAkBnK,EAClC1C,OAAO0M,KAAKJ,GAASrL,SAAS6L,IAC1BD,EAAeC,GAAkBR,EAAQQ,GAAgBvC,cAGjE,GAAI4C,EACA,GAAsB,mBAAXA,GAAyBhK,MAAMC,QAAQ+J,IAAYA,aAAmBC,SAAU,CACvF,MAAMpK,EAAOxB,EAAOwB,KAAKN,EAAS,MAC9BM,IACsB,mBAAXmK,EACPnK,EAAK6F,UAAUsE,EAAQzK,IAGvBM,EAAK6F,UAAU1F,MAAM4J,KAAKI,UAKlCnN,OAAOgN,QAAQG,GAASlM,SAAQ,EAAE8B,EAAQoK,MACtC,MAAMnK,EAAOxB,EAAOwB,KAAKN,EAASK,GAC9BC,IACsB,mBAAXmK,EACPnK,EAAK6F,UAAUsE,EAAQzK,IAGvBM,EAAK6F,UAAU1F,MAAM4J,KAAKI,QAM1CX,GACAxM,OAAOgN,QAAQR,GAAWvL,SAAQ,EAAEgM,EAAQC,MACpC/J,MAAMC,QAAQ8J,GACdxK,EAAQuD,iBAAiBgH,EAAQC,EAAW,GAAIA,EAAW,IAG3DxK,EAAQuD,iBAAiBgH,EAAQC,MAKjD,OAAOxK,EAEX,MAAM,IAAIkB,MAAM,kBAAkB4H,KAGtC,MAAM6B,EAAsB,IAAIxM,QAS1ByM,EAAuC,IAAIC,sBAAsBC,IAQnE,MAAM,MAACC,EAAK,gBAAEC,GAAmBF,EAC3BG,EAA2BN,EAAoBlN,IAAIsN,GACzD,QAAiC,IAA7BE,EAAqC,CACrC,MAAM,sBAACC,GAAyBD,EAChCC,EAAsBtH,OAAOsH,EAAsBzF,QAAQuF,GAAkB,OAI/EG,GAAmC,IAAIjE,GAAqBzC,IAC9DA,EAAQlG,SAASyI,IACb,MAAM,OAACvI,EAAM,aAAEgD,EAAY,SAAEpC,EAAQ,SAAEqC,GAAYsF,GAC7C,sBAACkE,GAAyBP,EAAoBlN,IAAIgB,GACxDyM,EAAsB3M,SAAQ6M,IAC1B,MAAM,WAACrM,EAAU,MAAEsM,EAAK,WAAEzE,GAAcwE,EAClCpL,EAAUjB,EAAWE,QACvBe,GACI4G,EAAWK,SAASxF,IACpB4J,EAAMrL,EAASyB,EAAepC,EAAUqC,YAa5D,SAASsJ,GACLD,EACA/K,EACA4G,EACAyE,GAEA,MACML,EAAkB,CAACjM,WADN,IAAI6B,QAAQZ,GACMqL,MAAAA,EAAOzE,WAAAA,GACtCqE,EAA2BN,EAAoBlN,IAAIsN,GAEzD,GADAH,EAAqCU,SAAStL,EAAS,CAAC+K,MAAAA,EAAOC,gBAAAA,IAC1DC,EASA,CACD,MAAM,sBAACC,EAAqB,gBAAEK,GAAmBN,GAC3C,iBAACpE,GAAoB0E,EAC3BL,EAAsBvK,KAAKqK,GAC3BO,EAAgB1E,iBAAmBA,EAC/BA,EAAiB1G,OAAOyG,EAAWG,QAC/ByE,IAAe3E,EAAiBI,SAASuE,MACxC/K,MAAM4J,KAAK,IAAIoB,IAAI7E,QAhBD,CAC3B,MAAM2E,EAAkB,CACpB3E,YAAY,EACZC,iBAAkBD,GAEhBsE,EAAwB,CAACF,GAC/BL,EAAoB9J,IAAIkK,EAAO,CAACQ,gBAAAA,EAAiBL,sBAAAA,IACjDC,GAAiC5K,QAAQwK,EAAOQ,GAmBpD,OARA3E,EAAWrI,SAASiN,IAChB,GAAIA,KAAcT,EAAO,CACrB,MAAM9M,EAAQgC,QAAQxC,IAAIsN,EAAOS,EAAYT,QAC/B,IAAV9M,GACAoN,EAAMrL,EAAcwL,OAAiB,EAAQvN,OAIlD+B,EAOX,MAAM0L,GAA2B,IAAIvN,QAQ/BwN,GAA4C,IAAId,sBAAsBC,IAQxE,MAAM,KAACc,EAAI,qBAAEC,GAAwBf,EAC/BgB,EAAmCJ,GAAyBjO,IAAImO,GACtE,GAAIE,EAAkC,CAClC,MAAM,2BAACC,GAA8BD,EACrCC,EAA2BnI,OAAOmI,EAA2BtG,QAAQoG,GAAuB,OAI9FG,GAAgC,IAAI9E,GAAqBzC,IAC3D,IAAIwH,EAAsB,KAC1BxL,MAAM4J,KAAK5F,EAAQ9B,UAAUpE,SAASyI,IAClC,MAAM,OAACvI,GAAUuI,EACX4E,EAAkBnN,GACjB+D,OAAQ0J,GAAcN,GACvB,2BAACG,GAA8BL,GAAyBjO,IAAImO,GAClEG,EAA2BxN,SAAS4N,IAChC,MAAM,UAACC,EAAS,QAAEC,EAAO,YAAEC,GAAeH,EACpCI,EAASH,EAAUnN,QACzB,GAAIsN,EAAQ,CACR,MAAM,WAACC,EAAU,SAAE3C,GAAY0C,GACxB/J,OAAQiK,GAAiB5C,EAC5ByC,GAAeJ,EAAa,GAAKM,GAAcF,GAC/CC,EAAOG,YAAYJ,GAEvB,MAAM,WAAC9K,EAAU,YAAEW,EAAW,YAAED,EAAW,UAAEE,GAAa4E,EAC1D,OAAQxF,GACJ,KAAKW,EAAa,CACd,MAAM,cAACL,EAAa,cAAEC,GAAiBiF,EACjC2F,EAAqBlM,MAAM4J,KAAKtI,EAAcY,UAAUvC,IAAIiM,IAC3D7J,OAAQiK,GAAiB5C,EAC5B/H,EAAgB2K,EAChB5C,EAAS/H,GAAe8K,UAAUD,GAGlCJ,EAAOpG,UAAUwG,GAErB,MAEJ,KAAKzK,EAAa,CACd,MAAM,aAACP,EAAY,aAAEC,GAAgBoF,GAC9BxE,OAAQqK,GAAgBjL,EAC/BqK,EAAQA,GAASxC,SAASqD,cAC1B,MAAMC,EAAiBpL,GAAgBkL,EAAe,GAClDE,EAAiBN,IACjBR,EAAMe,eAAenD,EAASlI,IAC9BsK,EAAMgB,YAAYpD,EAASkD,IAC3Bd,EAAMiB,kBAEV,MAEJ,KAAK9K,EAAW,CACZ,MAAM,cAACJ,GAAiBgF,EAClBmG,EAAgB1M,MAAM4J,KAAKR,GACjC0C,EAAOpG,UACAnE,EAAc+E,QACbqG,GAAWA,EAAUX,IACvBrM,KACEgN,GAAWD,EAAcC,MAGjC,OAGU,GAAdlB,GAAmBI,GACnBC,EAAOpG,OAAOmG,aAOlC,SAASe,GACLzB,EACAS,EACAC,GAEA,OAAQC,IACJ,MAAMH,EAAY,IAAIxL,QAAQ2L,GACxBe,EAAgC5B,GAAyBjO,IAAImO,GAC7DC,EAAuB,CAACO,UAAAA,EAAWC,QAAAA,EAASC,YAAAA,GAElD,GADAX,GAA0CL,SAASiB,EAAQ,CAACX,KAAAA,EAAMC,qBAAAA,IAC7DyB,EAOA,CACD,MAAM,2BAACvB,GAA8BuB,EACrCvB,EAA2BpL,KAAKkL,OATA,CAChC,MAAME,EAA6B,CAACF,GACpCH,GAAyB7K,IAAI+K,EAAM,CAACG,2BAAAA,IACpCC,GAA8BzL,QAAQqL,EAAM,CACxCpL,WAAW,IAOnB,OAAsB,GAAfoL,EAAKpJ,QAAe8J,EACvB,CAACA,GAAe7L,MAAM4J,KAAKuB,EAAKjJ,UAAUvC,IAAIiM,IAc1D,SAASkB,GACLC,EACAC,EAAgCC,EAChCtO,EAAuB6K,GACvB,GAAIwD,GAA0BrO,EAC1B,OAAQoO,GACJ,IAAK,UACD,MAAkC,IAA3BE,GAAmD,IAAlBzD,EAC5C,IAAK,SACD,MAAmC,KAA5ByD,GAAmCA,GAA2BzD,EACzE,IAAK,OACD,MAAoC,KAA5ByD,GAAqD,OAAnBzD,GAA4B,IAAI0D,OAAO,GAAGD,OAA+B,KAAKE,KAAK3D,GAGzI,OAAO,E,UCzqBP4D,GAKJ,IAAMC,GAAN,cAA4CnP,YAoBxCc,cACIsE,Q,aACA,MAAMgK,EAAarO,KAAKsO,aAAa,CAACC,KAAM,SAC5CF,EAAW5H,OACP0H,GAAeK,QAAQC,WAAU,IAErCJ,EAAWxK,iBACP,a,uSAAc,CAAA7D,KAAI,WAAwB2H,KAAK3H,S,2BAIhCqD,GACnB,MAAM,OAACtE,GAAUsE,EAC+CtE,EAC3D2P,mBACArH,QACGsH,GAAaA,aAAqBC,KAE5B/P,SAAQ,CAACgH,EAAQM,KAC3BN,EAAOgJ,SAAW1I,EAClBN,EAAOiJ,MAAQ,MACX,IAAIA,GAAS,EACTC,EAA2ClJ,EAC/C,KAAuB,OAAhBkJ,GAAwBA,EAAYC,QAAQ,kBAC/CD,EAAcA,EAAYE,eAAeC,QAAQ,eAAiB,KAClEJ,IAEJ,OAAOA,GAPI,QAnCnBX,GAAiB,EAAQ,aACVK,QAAQ/H,OACnB,EAAQ,QAAS,CACb0D,SAAU,CACC,qIAOf,EAAQ,SAhBdiE,G,mUAA6B,EAHlClF,EAAc,CACXE,KAAM,qBAEJgF,IAqDN,I,YC9CI,GD8CAe,GAAkEf,G,69BCzCtE,IAAMgB,GAAN,cAAuCnQ,YA6DnCc,cACIsE,Q,aA3BJ,oBA4BI,MAAMgK,EAAarO,KAAKsO,aAAa,CAACC,KAAM,SAC5CF,EAAW5H,OACP,GAAe+H,QAAQC,WAAU,IAErCJ,EAAWxK,iBAAiB,aAAc,GAAA7D,KAAI,WAAwB2H,KAAK3H,OAC3EA,KAAK6D,iBAAiB,QAAS,GAAA7D,KAAI,WAAmB2H,KAAK3H,OAC3D,GAAAA,KAAI,GAAU,KAAI,KAjEtB,YACI,OAAO,GAAAA,KAAI,QAmEfJ,yBAAyBwJ,EAAczJ,EAAyBqC,GAC5D,OAAQoH,GACJ,IAAK,WACDpJ,KAAKoE,cAAc,IAAIiL,MAAM,SAAU,CAACC,SAAS,KACjD,MAEJ,IAAK,WACDtP,KAAKoE,cAAc,IAAIiL,MAAM,SAAU,CAACC,SAAS,KACjD,MAEJ,IAAK,QAAS,CACV,MAAMC,EAAYvP,KAAKqO,WAAWmB,cAAc,gBAC5CD,IACAA,EAAUE,YAAczN,GAE5B,MAEJ,IAAK,QACDhC,KAAK0P,MAAMjK,YAAY,UAAW,GAAGzF,KAAK8O,UAMtDa,OAAOC,GACH5P,KAAK6P,SAAWD,IAAU5P,KAAK6P,W,0CAGjBxM,GACd,MAAM,OAACtE,EAAM,SAAE+Q,EAAQ,QAAEC,GAAW1M,GAC9B,KAACrE,GAAQgB,KACXA,MAAQjB,GAAkB,UAARC,GAAsB8Q,GAAYC,GACpD/P,KAAK2P,UAEZ,YAEsBtM,GACnB,MAAM,OAACtE,GAAUsE,GACV+F,KAAM4G,GAA6BjR,EAC1C,OAAQiR,GACJ,IAAK,QAAS,CACV,MAAM1P,EAA4BvB,EAAQ2P,mBAAmB,GAC7D,GAAA1O,KAAI,GAAUM,aAAmB6O,GAA4B7O,EAAU,KAAI,KAC3E,UA7ER,GAAiB,EAAQ,aACVkO,QAAQ/H,OACnB,EAAQ,MAAO,CACXpF,WAAY,CACR4O,KAAM,WAEV9F,SAAU,CACN,EAAQ,OAAQ,CACZ9I,WAAY,CACR4O,KAAM,WAGd,EAAQ,WAGhB,EAAQ,OAAQ,CACZ5O,WAAY,CACR+H,KAAM,YA9CtB,IADClB,EAAkB,CAAClJ,KAAMiK,U,4BAI1B,IADCf,EAAkB,CAAClJ,KAAM+J,U,gCAI1B,IADCb,EAAkB,CAAClJ,KAAMiK,OAAQZ,UAAU,K,6BAI5C,IADCH,EAAkB,CAAClJ,KAAMuJ,QAASF,UAAU,K,gCAI7C,IADCH,EAAkB,CAAClJ,KAAMuJ,W,kCAI1B,IADCL,EAAkB,CAAClJ,KAAMuJ,W,8BAI1B,IADCL,EAAkB,CAAClJ,KAAMuJ,QAASF,UAAU,K,gCAI7C,IADCH,EAAkB,CAAClJ,KAAM+J,OAAQV,UAAU,K,6BAI5C,IADCH,EAAkB,CAAClJ,KAAMiK,OAAQb,aAAc,U,4BAhC9CgH,GAAwB,IAH7BlG,EAAc,CACXE,KAAM,gBAEJgG,IAyHN,I,6FClII,GDkIAR,GAAwDQ,G,69BC7H5D,IAAMc,GAAN,cAAmCjR,YAkC/Bc,cACIsE,Q,aAZJ,oBACA,oBACA,oBAWI,GAAArE,KAAI,GAAW+J,SAASoG,iBACpBnQ,KAAMoQ,WAAWC,aAAc,GAAArQ,KAAI,WAAa2H,KAAK3H,OACxD,KACD,GAAAA,KAAI,IAAgB,EAAK,KACzB,GAAAA,KAAI,IAAwB,EAAK,KACjCA,KAAK4C,MAAQ5C,KAAKsQ,qBAAqB,cACvC,MAAMjC,EAAarO,KAAKsO,aAAa,CAACC,KAAM,SAC5CF,EAAW5H,OACP,GAAe+H,QAAQC,WAAU,IAErCzO,KAAK6D,iBAAiB,QAAS,GAAA7D,KAAI,WAAmB2H,KAAK3H,OAC3DA,KAAK6D,iBAAiB,cAAe,GAAA7D,KAAI,WAAyB2H,KAAK3H,OAAO,GAC9EA,KAAK6D,iBAAiB,UAAW,GAAA7D,KAAI,WAAqB2H,KAAK3H,OAC/DA,KAAK6D,iBAAiB,YAAa,GAAA7D,KAAI,WAAuB2H,KAAK3H,OACnEA,KAAK6D,iBAAiB,YAAa,GAAA7D,KAAI,WAAuB2H,KAAK3H,OACnEA,KAAK6D,iBAAiB,WAAY,GAAA7D,KAAI,WAAsB2H,KAAK3H,OACjEA,KAAK6D,iBAAiB,YAAa,GAAA7D,KAAI,WAAuB2H,KAAK3H,OACnEA,KAAK6D,iBAAiB,OAAQ,GAAA7D,KAAI,WAAkB2H,KAAK3H,OACzDA,KAAK6D,iBAAiB,QAAS,GAAA7D,KAAI,WAAmB2H,KAAK3H,OAC3DA,KAAK6D,iBAAiB,UAAW,GAAA7D,KAAI,WAAqB2H,KAAK3H,OAC/DA,KAAK6D,iBAAiB,WAAY,GAAA7D,KAAI,WAAsB2H,KAAK3H,OACjEA,KAAK6D,iBAAiB,UAAW,GAAA7D,KAAI,WAAqB2H,KAAK3H,OAC/DA,KAAK6D,iBAAiB,SAAU,GAAA7D,KAAI,WAAoB2H,KAAK3H,OAC7DqO,EAAWxK,iBAAiB,aAAc,GAAA7D,KAAI,WAAwB2H,KAAK3H,OAtD/E,iBACI,OAAOA,KAAKwP,cACR,sBAIR,qBACI,OAAOxP,KAAKwP,cACR,0BAiDRe,gBACI,MAAMA,EAAgB,GAChBC,EAAS,GAAAxQ,KAAI,QACnBwQ,EAAOC,YAAcD,EAAO/O,KAC5B,IAAIsB,EAAO,GAAA/C,KAAI,WAAW,KAAfA,MACX,KAAgB,OAAT+C,GACCA,EAAK2N,UACLH,EAActP,KAAK8B,GAEvBA,EAAO,GAAA/C,KAAI,WAAU,KAAdA,KAAe+C,GAE1B,OAAOwN,EAGXI,iBACI,GAAA3Q,KAAI,IAAgB,EAAI,KAG5B4Q,eACI,GAAA5Q,KAAI,IAAgB,EAAK,KACrB,GAAAA,KAAI,UACJA,KAAKoE,cAAc,IAAIiL,MAAM,kBAAmB,CAACC,SAAS,KAC1D,GAAAtP,KAAI,IAAwB,EAAK,Q,wEAI7BmF,GACR,OAAIA,aAAgByJ,GACTwB,WAAWS,cAElB1L,aAAgBgK,GACTiB,WAAWU,YAEfV,WAAWW,eACrB,YAEcpG,EAA4BqG,GACvC,GAAIrG,GAAQqG,EACR,MAAO,CAACrG,GAEZ,MAAMsG,EAAWtG,EAAKuG,wBAAwBF,GAC9C,GAAIC,EAAWE,KAAKC,4BAA6B,CAC7C,MAAM7E,EAAQ,CAAC5B,GACf,IAAI0G,EAAkB,GAAArR,KAAI,WAAU,KAAdA,KAAe2K,GACrC,KAAO0G,GAAmBA,IAAoBL,GAC1CzE,EAAMtL,KAAKoQ,GACXA,EAAkB,GAAArR,KAAI,WAAU,KAAdA,KAAeqR,GAGrC,OADA9E,EAAMtL,KAAK+P,GACJzE,EAEN,GAAI0E,EAAWE,KAAKG,4BAA6B,CAClD,MAAM/E,EAAQ,CAAC5B,GACf,IAAI4G,EAAsB,GAAAvR,KAAI,WAAc,KAAlBA,KAAmB2K,GAC7C,KAAO4G,GAAuBA,IAAwBP,GAClDzE,EAAMtL,KAAKsQ,GACXA,EAAsB,GAAAvR,KAAI,WAAc,KAAlBA,KAAmBuR,GAG7C,OADAhF,EAAMtL,KAAK+P,GACJzE,EAEX,MAAO,IACV,eAEgB3J,GACb,MAAM2N,EAAgBvQ,KAAKuQ,gBAC3BvQ,KAAK2Q,iBACLJ,EAAc1R,SAAS2S,IACd5O,EAAM2E,SAASiK,KAChBA,EAAed,UAAW,MAGlC9N,EAAM/D,SAASgH,IACP7F,KAAKyR,SAAS5L,KAAYA,EAAO6K,WACjC7K,EAAO6K,UAAW,MAG1B1Q,KAAK4Q,gBACR,eAEkBhO,GACf5C,KAAK2Q,iBACL/N,EAAM/D,SAASgH,IACNA,EAAO6K,WACR7K,EAAO6K,UAAW,MAG1B1Q,KAAK4Q,gBACR,eAEuBhO,GACpB,MAAM2N,EAAgBvQ,KAAKuQ,gBAC3BvQ,KAAK2Q,iBACL/N,EAAM/D,SAASgH,IACP0K,EAAchJ,SAAS1B,KACvBA,EAAO6K,UAAW,MAG1B1Q,KAAK4Q,gBACR,cAGG,MAAML,EAAgBvQ,KAAKuQ,gBAC3BvQ,KAAK2Q,iBACLJ,EAAc1R,SAASgH,IACnBA,EAAO6K,UAAW,KAEtB1Q,KAAK4Q,gBACR,YAEc7N,GACX,MAAM,WAAC2O,GAAc1R,KACF,OAAf0R,GAAuBA,IAAe3O,IACtC2O,EAAWC,QAAS,EACpBD,EAAWE,UAAY,GAEd,OAAT7O,IACe,GAAA/C,KAAI,QACZyQ,YAAc1N,EACrBA,EAAK4O,QAAS,EACd5O,EAAK6O,SAAW,IAEvB,YAEkB7O,GACf,MAAM,eAAC8O,GAAkB7R,KACF,OAAnB6R,GAA2BA,IAAmB9O,IAC9C8O,EAAeC,YAAa,GAEnB,OAAT/O,GACA/C,KAAK8R,YAAa,EAClB/O,EAAK+O,YAAa,GAGlB9R,KAAK8R,YAAa,GAEzB,cAGG,MAAMtB,EAAS,GAAAxQ,KAAI,SACb,KAACyB,GAAQ+O,EAEf,OADAA,EAAOC,YAAchP,EACe+O,EAAO1D,cAC9C,cAGG,MAAM0D,EAAS,GAAAxQ,KAAI,SACb,KAACyB,GAAQ+O,EAEf,OADAA,EAAOC,YAAchP,EACe+O,EAAOuB,aAC9C,YAEahP,GACV,MAAMyN,EAAS,GAAAxQ,KAAI,QACnBwQ,EAAOC,YAAc1N,EACrB,MAAMiP,EAA+CxB,EAAOwB,kBAC5D,OAAOA,EACH,GAAAhS,KAAI,WAAa,KAAjBA,KAAkBgS,GACWxB,EAAOjM,cAC3C,YAESxB,GACN,MAAMyN,EAAS,GAAAxQ,KAAI,QACnBwQ,EAAOC,YAAc1N,EACrB,MAAM,KAAC/D,EAAI,SAAE6Q,GAAY9M,EACzB,MACa,SAAT/D,GAEI6Q,EADAW,EAAOyB,WAGHzB,EAAO0B,gBACN1B,EAAOjM,aAAciM,EAAO0B,gBAE5C,cAEYnP,GACT,GAAIA,EAAK8M,SAAU,CACf,MACMsC,EADS,GAAAnS,KAAI,QAC2B+R,YAC9C,GAAII,EACA,OAAO,GAAAnS,KAAI,UAAa,KAAjBA,KAAkBmS,GAGjC,OAAOpP,GACV,YAEiBM,GACd,MAAM,OAACtE,EAAM,QAAEgR,EAAO,SAAED,GAAYzM,EAC9BkN,EAAgBvQ,KAAKuQ,gBAC3B,GAAIxR,aAAkB6P,GAClB,GAAKkB,GAAaC,GAGb,GAAIA,EAAS,CACd,MAAM,SAACW,GAAY3R,EACf2R,GACA3R,EAAOqT,OAET1B,EAEE,GAAA1Q,KAAI,WAAqB,KAAzBA,KAA0BjB,GAD1B,GAAAiB,KAAI,WAAgB,KAApBA,KAAqBjB,GAEzBsE,EAAMgP,uBAEL,GAAIvC,EAAU,CACf,MAAMwC,EAAmB/B,EAAcA,EAAczN,OAAS,GAC9D,GAAIwP,EAAkB,CAClB,MAAM/F,EAAQ,GAAAvM,KAAI,WAAe,KAAnBA,KACVsS,EACAvT,GAEAwN,IACIgE,EAAchJ,SAASxI,GACvB,GAAAiB,KAAI,WAAqB,KAAzBA,QAA6BuM,GAG7B,GAAAvM,KAAI,WAAgB,KAApBA,QAAwBuM,SAKhC,GAAAvM,KAAI,WAAc,KAAlBA,KAAmBjB,GAEvBsE,EAAMgP,wBA/BN,GAAArS,KAAI,WAAc,KAAlBA,KAAmBjB,IAkC9B,YAEuBsE,GACpB,MAAM,OAACtE,GAAUsE,EACbtE,aAAkB6P,KACI5O,KAAKuQ,gBACRhJ,SAASxI,IACxB,GAAAiB,KAAI,WAAc,KAAlBA,KAAmBjB,GAEvBsE,EAAMkP,mBAEb,cAGG,GAAAvS,KAAI,WAAmB,KAAvBA,KAAwB,OAC3B,YAEqBqD,GAClB,MAAM,OAACtE,GAAUsE,EACjB,GAAItE,aAAkB6P,GAAsB,CACxC,MAAM,KAAC5P,GAAQD,EACH,UAARC,GACAD,EAAO4Q,QAAO,GAElB,GAAA3P,KAAI,WAAmB,KAAvBA,KAAwBjB,GAE5BsE,EAAMkP,kBACT,YAEoBlP,GACjBA,EAAMkP,kBACT,YAEqBlP,GAClB,MAAM,cAACmP,GAAiBnP,EACxB,GAAImP,EAAe,CACf,MAAMC,EAA2BD,EAAeE,cAC1CC,EACFF,aAA6BG,WAC7BH,EAAkBI,KAClBL,EACCxS,KAAKyR,SAAekB,IACrB,GAAA3S,KAAI,WAAmB,KAAvBA,KAAwB,QAGnC,YAEqBqD,GAClB,MAAM,OAACtE,GAAUsE,EACbtE,aAAkB6P,KACI5O,KAAKuQ,gBACRhJ,SAASxI,IACxB,GAAAiB,KAAI,WAAc,KAAlBA,KAAmBjB,KAG9B,cAGG,GAAAiB,KAAI,WAAmB,KAAvBA,KAAwB,OAC3B,YAEmBqD,GAChB,MAAM,IAAC3F,GAAO2F,GACR,WAACqO,GAAc1R,KACrB,OAAQtC,GACJ,IAAK,IAAK,CACN,MAAM,QAACqS,GAAW1M,EAClB,GAAI0M,GACI2B,EAAY,CACZ,MAAMlB,EAAS,GAAAxQ,KAAI,SACb,KAACyB,GAAQ+O,EACfA,EAAOC,YAAciB,EACrB,MAAMoB,GACFtC,EAAOC,YAAcD,EAAOjM,cAAgB9C,EAAM+O,EAAO1D,cAEvDqF,GACF3B,EAAOC,YAAcD,EAAOjM,cAAgB9C,EAAM+O,EAAOuB,aAE7D,GAAIe,GAAaX,EAAU,CACvB,MAAM5F,EAAQ,GAAAvM,KAAI,WAAe,KAAnBA,KACV8S,EACA,GAAA9S,KAAI,WAAa,KAAjBA,KAAkBmS,IAElB5F,GACA,GAAAvM,KAAI,WAAc,KAAlBA,QAAsBuM,IAKtClJ,EAAMkP,iBACN,MAEJ,IAAK,YACD,GAAIb,EACA,GAAIA,EAAW7B,SACX6B,EAAW/B,aAEV,CACD,MACMoD,EADS,GAAA/S,KAAI,QAC6BuE,aAC5CwO,GACAA,EAAWC,MAAM,CAACC,eAAe,IAI7C5P,EAAMgP,kBACN,MAEJ,IAAK,aACGX,IACKA,EAAW7B,UACZ6B,EAAW/B,UAGnBtM,EAAMgP,kBACN,MAEJ,IAAK,UACD,GAAIX,EAAY,CACZ,MAAMwB,EAAe,GAAAlT,KAAI,WAAc,KAAlBA,KAAmB0R,GACxC,GAAIwB,EAAc,CACdA,EAAaF,MAAM,CAACC,eAAe,IACnC,MAAM,SAACnD,GAAYzM,EACfyM,IACAoD,EAAaxC,SACT,GAAA1Q,KAAI,WAAqB,KAAzBA,KAA0BkT,GAC1B,GAAAlT,KAAI,WAAgB,KAApBA,KAAqBkT,SAIhC,CACD,MAAMJ,EAAY,GAAA9S,KAAI,WAAW,KAAfA,MACd8S,GACAA,EAAUE,MAAM,CAACC,eAAe,IAGxC5P,EAAMgP,kBACN,MAEJ,IAAK,YACD,GAAIX,EAAY,CACZ,MAAMyB,EAAW,GAAAnT,KAAI,WAAU,KAAdA,KAAe0R,GAChC,GAAIyB,EAAU,CACVA,EAASH,MAAM,CAACC,eAAe,IAC/B,MAAM,SAACnD,GAAYzM,EACfyM,IACAqD,EAASzC,SACL,GAAA1Q,KAAI,WAAqB,KAAzBA,KAA0BmT,GAC1B,GAAAnT,KAAI,WAAgB,KAApBA,KAAqBmT,SAIhC,CACD,MAAMhB,EAAW,GAAAnS,KAAI,WAAU,KAAdA,MACbmS,GACAA,EAASa,MAAM,CAACC,eAAe,IAGvC5P,EAAMgP,kBACN,MAEJ,IAAK,OAAQ,CACT,MAAMS,EAAY,GAAA9S,KAAI,WAAW,KAAfA,MACd8S,GACAA,EAAUE,MAAM,CAACC,eAAe,IAEpC5P,EAAMgP,kBACN,MAEJ,IAAK,MAAO,CACR,MAAMF,EAAW,GAAAnS,KAAI,WAAU,KAAdA,MACbmS,GACAA,EAASa,MAAM,CAACC,eAAe,IAEnC5P,EAAMgP,kBACN,MAEJ,IAAK,QACGX,IACA,GAAA1R,KAAI,WAAc,KAAlBA,KAAmB0R,GACnBA,EAAW0B,SAEf/P,EAAMgP,kBACN,MAEJ,IAAK,SACD,GAAArS,KAAI,WAAgB,KAApBA,MACA,GAAAA,KAAI,WAAe,KAAnBA,KAAoB,MACpBA,KAAKgT,QACL3P,EAAMgP,oBAIjB,YAEiBhP,GACd,MAAM,cAACmP,GAAiBnP,GAClB,WAACqO,GAAc1R,KACjB0R,GAAcc,IAAkBd,GAChCA,EAAWsB,SAElB,YAEmB3P,GAChB,MAAM,OAACtE,GAAUsE,EACbtE,aAAkB6P,KAClB,GAAA5O,KAAI,WAAe,KAAnBA,KAAoBjB,GACpBiB,KAAK4R,UAAY,IAExB,YAEoBvO,GACjB,MAAM,cAACmP,GAAiBnP,GACCrD,KAAKyR,SAAee,KAEzCxS,KAAK4R,SAAW,IAEvB,cAGO,GAAA5R,KAAI,QACJ,GAAAA,KAAI,IAAwB,EAAI,KAGhCA,KAAKoE,cAAc,IAAIiL,MAAM,kBAAmB,CAACC,SAAS,MAEjE,YAEsBjM,GACnB,MAAM,OAACtE,GAAUsE,EAC+CtE,EAC3D2P,mBACArH,QACGsH,GAAaA,aAAqBC,KAE5B/P,SAAQ,CAACgH,EAAQM,KAC3BN,EAAOgJ,SAAW1I,EAClBN,EAAOiJ,MAAQ,OAhfnB,GAAiB,EAAQ,aACVN,QAAQ/H,OACnB,EAAQ,SAZhB,IADCyB,EAAkB,CAAClJ,KAAMuJ,W,kCAI1B,IADCL,EAAkB,CAAClJ,KAAMiK,U,4BApBxBiH,GAAoB,IAHzBhH,EAAc,CACXE,KAAM,YAEJ8G,IAihBN,I,SAAImD,GAAgDnD,G,spBCliBpD,MAAMoD,WAAiBrU,YAGnBc,cACIsE,Q,aAHJ,oBAII,GAAArE,KAAI,GAAU,KAAI,KAGtB,YACI,OAAO,GAAAA,KAAI,QAGfuT,SAASlI,GACL,GAAArL,KAAI,GAAUqL,EAAK,KACnB,GAAArL,KAAI,WAAQ,KAAZA,MAGJwT,eAIAC,gBAIAC,UACI,GAAA1T,KAAI,WAAQ,KAAZA,O,4CAIA,MAAM,WAACqO,GAAcrO,KACf2T,EAAS3T,KAAKyT,eAChBE,GACItF,GACAA,EAAWuF,gBAAgBD,GAGnC,MAAME,EAAQ7T,KAAKwT,cACfK,GACA7T,KAAK4T,gBAAgBC,IAKjC,I,6CAAIC,GAAwBR,G,69BCjD5B,MAAMS,WAAkBpO,EAOpB5F,YAAY8B,GACRwC,Q,aACA,MAAM2P,EAAa,IAAIpO,EAAU/D,GAAMe,OAAS,IAChDoR,EAAW1P,UAAUtE,MACrBA,KAAKgU,WAAaA,EAClBhU,KAAK4C,MAAQ,IAAIgD,EAAU5F,KAAKiU,gBAChCjU,KAAKkU,aAAerS,GAAMqS,cACtB,SAASC,EAAuBC,GAC5B,OAAOD,EAAOE,MAAMC,cAAcF,EAAOC,QAEjDrU,KAAK6D,iBAAiB,cAAe,GAAA7D,KAAI,WAAyB2H,KAAK3H,OAyB3EiU,eACI,MAAM,WAACD,GAAchU,KACrB,OAAOe,MAAM4J,KAAKqJ,EAAW/Q,UAAUsR,SACnCC,GAAczT,MAAM0T,GAAGD,KAAeT,GAAU7V,UAAU+V,aAAa7V,KAAKoW,MAIpFE,aAA8CC,GAC1C,MAAM,WAACX,GAAchU,MACd8C,OAAQ8R,GAAcZ,GACtBlR,OAAQ+R,GAAaF,EAC5B,IAAK,IAAIxO,EAAI,EAAGA,EAAIyO,EAAYzO,IAAK,CACjC,MAAMN,EAASmO,EAAWjW,IAAIoI,IACvBwO,IAAKG,GAAWjP,GAChB/C,OAAQiS,GAAiBD,EAChC,GAAIH,EAAIK,WAAWF,GAAU,CACzB,GAAiC,KAA7BH,EAAIM,OAAOF,GACX,OAAOhB,GAAU7V,UAAUwW,aAAatW,KAAKyH,EAAQ8O,GAEpD,GAAII,GAAiBF,EACtB,OAAOhP,GAInB,OAAO,M,2BA9CaxC,GACpB,MAAM,OAACtE,GAAUsE,GACX,MAACT,EAAK,aAAEsR,EAAY,aAAED,GAAgBjU,KACxCjB,aAAkB6G,GACF7G,EAAO8F,aACfhG,SAASyI,IACb,MAAM,cAACjF,EAAa,aAAEH,GAAgBoF,EAChC4N,EAA2CnU,MAAM4J,KAAKtI,EAAcY,UAAWsR,SACjFY,GAAkBpU,MAAM0T,GAAGU,KAAmBlB,EAAa7V,KAAK+W,MAE9DC,EAA0CrU,MAAM4J,KAAKzI,EAAae,UAAWsR,SAC/ExN,GAAiBhG,MAAM0T,GAAG1N,KAAkBkN,EAAa7V,KAAK2I,MAElEnE,EAAM+B,eACN/B,EAAM6D,UAAUyO,GAChBE,EAAsBvW,SAASkI,GAAkBnE,EAAMiE,OAAOE,KAC1DmN,GAActR,EAAMoD,KAAKkO,GAC7BtR,EAAMgC,iBAwCtB,MAAMyQ,GAGFtV,YAAY6C,GAFZ,oBAGI,GAAA5C,KAAI,GAAU4C,EAAK,KAGvB,YAAYA,GACR,OAAO,IAAIyS,GAAazS,GAG5B,aAAaA,GACT,OAAO,IAAIyS,GAAazS,GAG5B0S,OACIC,QAAQC,IAAI,GAAAxV,KAAI,SAChB,GAAAA,KAAI,QAAQnB,SAAQgH,GAAUA,EAAOyP,SAGzCG,OACI,GAAAzV,KAAI,QAAQnB,SAAQgH,GAAUA,EAAO4P,SAGzCC,UACI,MACMC,EADQ,GAAA3V,KAAI,QACG4V,QACjB,CAACD,EAAQ9P,IAAW,GAAG8P,KAAU9P,EAAOwO,SAAS,IAErDkB,QAAQC,IAAIG,GAGhB9O,SACI,MACMgP,EADQ,GAAA7V,KAAI,QACe4V,QAAO,CAAClV,EAAKmF,KAC1C,MAAM,WAACtB,GAAcsB,EACrB,GAAItB,aAAsBuR,IAAiBvR,aAAsBwP,GAAW,CACxE,MAAM,WAACC,GAAczP,EACfwR,EAAQrV,EAAI3C,IAAIiW,GAClB+B,EAAOA,EAAM9U,KAAK4E,GACjBnF,EAAIS,IAAI6S,EAAY,CAACnO,IAE9B,OAAOnF,IACR,IAAIiB,KACPZ,MAAM4J,KAAKkL,EAAmBjL,WAAW/L,SACrC,EAAEmX,EAAQC,MACND,EAAOrR,eACPsR,EAAWpX,SAASqX,IAEhBF,EAAOnP,OAAOqP,MAElBF,EAAOpR,iB,eAMvB,MAAMkR,WAAsBnQ,EA2BxB5F,YAAY8B,GACRwC,Q,aACA,MAAM,MAACgQ,EAAK,KAAErV,GAAQ6C,EAChBmS,EAAa,IAAIpO,EAAU/D,EAAKe,OAAS,IAC/CoR,EAAW1P,UAAUtE,MACrBA,KAAKgU,WAAaA,EAClBhU,KAAKqU,MAAQA,EACbrU,KAAKhB,KAAOA,EACZgB,KAAKmW,WAAanC,EAAWlR,OAC7B9C,KAAKoW,YAAa,EAClBpW,KAAK6D,iBAAiB,cAAe,GAAA7D,KAAI,WAAyB2H,KAAK3H,OA1B3E,UACI,MAAM,WAACuE,GAAcvE,KACrB,OAAIuE,aAAsBuR,GACf,GAAGvR,EAAWoQ,OAAO3U,KAAKqU,QAE9BrU,KAAKqU,MAGhB,iBACI,MAAM,WAAC9P,GAAcvE,KACrB,OAAIuE,aAAsBuR,GACfvR,EAEJ,KAgBX+Q,OACItV,KAAKoW,YAAa,EAGtBX,OACIzV,KAAKoW,YAAa,EAGtBV,UACIH,QAAQC,IAAIxV,KAAKqU,OAGrBxN,SACI,MAAM,WAACtC,GAAcvE,KACrB,GAAIuE,aAAsBuR,IAAiBvR,aAAsBwP,GAAW,CACxE,MAAM,WAACC,GAAczP,EACjByP,GACAA,EAAWnN,OAAO7G,Q,2BAKNqD,GACpB,MAAM,OAACtE,GAAUsE,GACX,WAAC2Q,GAAchU,KACjBjB,GAAUiV,IACVhU,KAAKmW,WAAanC,EAAWlR,SA5DrC,IADCwC,K,kCAID,IADCA,K,kCAkFL,IAAM+Q,GAAN,cAA2BvC,GAQvB/T,YAAYsL,GACRhH,Q,aAPJ,oBACA,oBACA,oBAMI,GAAArE,KAAI,GAAwB,IAAIvB,QAAS,KACzC,GAAAuB,KAAI,GAA0B,IAAIvB,QAAS,KAC3CuB,KAAKsO,aAAa,CAACC,KAAM,SACzBvO,KAAKuT,SAASlI,GAAS,IAAI0I,IAG/BuC,iBACI,OAAO,GAAAtW,KAAI,SAAeT,SAAW,KAGzCgX,mBAAmBlL,GACf,OAAO,GAAArL,KAAI,QAAsBjC,IAAIsN,IAAQ9L,SAAW,KAG5DiX,oBAAoBnL,GAChB,OAAO,GAAArL,KAAI,QAAwBjC,IAAIsN,IAAQ9L,SAAW,KAG9DgR,gBACI,MAAMkG,EAAOzW,KAAKsW,iBAClB,GAAIG,EAAM,CACN,MAAM,MAACpL,GAASrL,KAEhB,OADyByW,EAAKlG,gBACN7P,KACpBmF,GAAyBwF,EAAMqJ,aAAa7O,EAAOqE,QAAQyK,OAGnE,MAAO,GAGXlB,eACI,MAAM,MAACpI,GAASrL,KACV0W,EAAc,EAAQ,SAAU,CAClCrV,WAAY,CACRsV,SAAU,GAEdxM,SAAUwD,GACNtC,EAAM2I,YAAYjR,GAAQ,GAAA/C,KAAI,WAAgB,KAApBA,KAAqB+C,KAEnDqH,UAAW,CACPwM,UAA0B,GAAA5W,KAAI,WAAuB2H,KAAK3H,MAC1D6W,KAAqB,GAAA7W,KAAI,WAAkB2H,KAAK3H,MAChD8W,YAA4B,GAAA9W,KAAI,WAAyB2H,KAAK3H,MAC9D+W,QAAwB,GAAA/W,KAAI,WAAqB2H,KAAK3H,SAI9D,OADA,GAAAA,KAAI,GAAgB,IAAIkB,QAAQwV,GAAY,KACrC7M,EACH,EAAQ,OAAQ,CACZxI,WAAY,CACR2V,IAAK,aACLC,KAAM,kBAGd,EAAQ,OAAQ,CACZ5V,WAAY,CACR2V,IAAK,aACLC,KAAM,4BAGdP,EACA,EAAQ,MAAO,CACXrV,WAAY,CACR6V,MAAO,YACPC,QAAQ,GAEZhN,SAAUwD,GAAsBtC,EAAMzI,OAClCG,GAAQ,GAAA/C,KAAI,WAAyB,KAA7BA,KAA8B+C,U,0EAMtCA,GACZ,MAAMqU,EAAkB9L,GACpBvI,EACA,EAAQ,aAAc,CAClB1B,WAAY,CACRsV,UAAW,EACXtC,MAAOtR,EAAKsR,MACZrV,KAAM+D,EAAK/D,KACXqY,UAAW,QAEfnN,QAAS,CACLyK,IAAK5R,EAAK4R,KAEdxK,UACmB,UAAbpH,EAAK/D,KAAoB,CACvB,EAAQ,kBAAmB,CACvBqC,WAAY,CACRT,KAAM,SAEVuJ,SAAUwD,GAAsB5K,EAAKiR,YACjCjR,GAAQ,GAAA/C,KAAI,UAAgB,KAApBA,KAAqB+C,QAGrC,IAAItC,OAAO,CACX,EAAQ,OAAQ,CACZY,WAAY,CACR6V,MAAO,aAGhBzW,OAAqB,UAAbsC,EAAK/D,KAAoB,CAChC,EAAQ,OAAQ,CACZqC,WAAY,CACR6V,MAAO,YAGf,IAAIzW,OAAO,CACX,EAAQ,YAAa,CACjBY,WAAY,CACRsV,SAAU,GAEdxM,SAAU,CACN,EAAQ,gBAAiB,CACrB9I,WAAY,CACR+H,KAAM,aACNpK,KAAM,WACN2X,UAAW,GAEfvM,UAAW,CACPkN,QAAS,KACLvU,EAAKqT,WACDrT,EAAK0S,OACL1S,EAAKuS,kBAQzC,CAAC,QAAS,aAAc,eACxB,CAACiC,EAAUzS,EAAUnF,EAAUqC,KAC3B,OAAQ8C,GACJ,IAAK,QACD,MAAMuP,EAAQkD,EAAS/H,cAAc,mBACjC6E,IACAA,EAAM5E,YAAczN,GAExB,MACJ,IAAK,aACD,MAAMwV,EAAQD,EAAS/H,cAAc,mBACjCgI,IACAA,EAAM/H,YAAc,IAAIzN,MAE5B,MACJ,IAAK,aAAc,CACf,MAAMyV,EAAUF,EAAS/H,cAAmC,sBAC5D,GAAIiI,EAAS,CACT,MAAMC,EAA0CD,EAAQ7U,MAAM+U,UAAU,cACpED,IACAA,EAAeE,MAAQ5V,EAAW,OAAS,OAC3C0V,EAAeG,QAAU7V,SAQjD,OADA,GAAAhC,KAAI,QAAsBmB,IAAI4B,EAAM,IAAI7B,QAAQkW,IACzCA,GACV,YAEwBrU,GACrB,MAAM+U,EAAmBxM,GACrBvI,EACA,EAAQ,OAAQ,CACZ1B,WAAY,CACR6V,MAAO,eAGf,CAAC,UACD,CAACa,EAAMjT,EAAUnF,EAAUqC,KACvB+V,EAAKtI,YAAczN,KAI3B,OADA,GAAAhC,KAAI,QAAwBmB,IAAI4B,EAAM,IAAI7B,QAAQ4W,IAC3CA,GACV,YAEqBzU,GAClB,MAAM,cAACC,EAAa,OAAEvE,GAAUsE,GAC1B,MAACgI,GAASrL,KAChB,GAAIsD,aAAyB+P,IAAoBtU,aAAkB6P,GAAsB,CACrF,MAAM,aAACoJ,GAAgB3U,EACjB4U,EAAmB3U,EAAciN,iBAChCzN,OAAQoV,GAAiBD,EAChC,GAAIC,EAAgB,EAAG,CACnB,MAAMC,EACFF,EACCvX,KAAKiO,GACFA,EAAUzE,QAAQyK,MAErBtN,QACG,CAAC+Q,EAAOC,EAAGC,KAAUA,EAAKC,MACtBC,GAASJ,EAAMpD,WAAW,GAAGwD,UAGnCC,EAAqBN,EAAaO,KAAK,MACvCC,EAAUR,EAAaA,EAAarV,OAAS,GAC7CqP,EAAW9G,EAAMqJ,aAAaiE,GACpC,GAAIxG,GAAY6F,EAAc,CAC1BA,EAAaY,WAAa,OAC1BZ,EAAaa,QAAQ,aAAcJ,GACnC,MAAMK,EAAY9Y,KAAKwW,oBAAoBrE,GACvC2G,GACAd,EAAae,aAAaD,GAAY,GAAI,OAK7D,YAEgBzV,GACb,MAAM,cAACC,EAAa,OAAEvE,GAAUsE,GAC1B,MAACgI,GAASrL,MACV,aAACkU,GAAgB7I,EACvB,GAAI/H,aAAyB+P,IAAoBtU,aAAkB6P,GAAsB,CACrF,MAAM,aAACoJ,GAAgB3U,EACvB,GAAI2U,EAAc,CACd,MAAMgB,EAAYja,EAAOmL,QAAQyK,IAC3BsE,EAAa5N,EAAMqJ,aAAasE,GAChCE,EAAiBlB,EAAamB,QAAQ,cAAcC,MAAM,MAEhE,IADuBF,EAAeX,MAAKH,GAASY,EAAUhE,WAAW,GAAGoD,OAAaA,GAASY,IAC7E,CACjB,MAAMK,EAAmCH,EAAexY,KACpD0X,GAAS/M,EAAMqJ,aAAa0D,KAC9B/Q,QACExB,GAAqB,OAAXA,KAGP7G,KAAMsa,EAAYvG,WAAYwG,GAAoBN,EACnDO,EAA2B,UAAdF,EACfL,EAAWjF,WACXuF,EACAA,EAAiBvF,WACjB3I,EAAM2I,WACVqB,GAAa1K,KAAK0O,GAAiBxS,SAC/BqN,GACAsF,EAAW7U,eACX6U,EAAW/S,UAAU4S,GACrBG,EAAWxT,KAAKkO,GAChBsF,EAAW5U,cAGX4U,EAAW9S,OAAO3H,EAAO8P,YAAawK,GAE1C,MAAMI,EAAcJ,EAAgB3Y,KAChCmF,GAAU7F,KAAKuW,mBAAmB1Q,KAEtCvC,EAAcqN,iBACd8I,EAAY5a,SACP8P,IACGA,EAAU+B,UAAW,KAG7BpN,EAAcsN,mBAI7B,YAEuBvN,GACpB,MAAM,QAACqW,EAAO,QAAEC,EAAO,cAAErW,EAAa,OAAEvE,GAAUsE,GAC5C,MAACgI,GAASrL,KAChB,GAAIsD,aAAyB+P,IAAoBtU,aAAkB6P,GAAsB,CACrF,MAAM8C,EAAarG,EAAMqJ,aAAa3V,EAAOmL,QAAQyK,KAC/CiF,EAAO,EAAQ,SAAU,CAC3BvY,WAAY,CACRsV,UAAW,EACXkD,YAAY,GAEhB1P,SAAU,CACN,EAAQ,kBAAmB,CACvB9I,WAAY,CACRsV,UAAW,GAEfxM,SAAU,CACN,EAAQ,aAAc,CAClB9I,WAAY,CACRsV,UAAW,GAEfxM,SAAU,CACN,WAEJC,UAAW,CACPkN,QAAS,KACLjC,GAAa1K,KACT3K,KAAKuQ,iBACPmF,cAId,EAAQ,aAAc,CAClBrU,WAAY,CACRsV,UAAW,GAEfxM,SAAU,CACN,UAEJC,UAAW,CACPkN,QAAS,KACLjC,GAAa1K,KACT3K,KAAKuQ,iBACP1J,gBAMtB,EAAQ,kBAAmB,CACvBxF,WAAY,CACRsV,UAAW,GAEfxM,SAAU,CACN,EAAQ,aAAc,CAClB9I,WAAY,CACRsV,UAAW,EACX3X,KAAM,YAEVmL,SAAU,CACNuH,EAAW0E,WAAa,OAAS,QAErChM,UAAW,CACPkN,QAAS,KACL,MAAM/G,EAAgB8E,GAAa1K,KAC/B3K,KAAKuQ,iBAETmB,EAAW0E,WACP7F,EAAckF,OACdlF,EAAc+E,eAO1ClL,UAAW,CACP0P,MAAO,KACH/a,EAAOiU,MAAM,CAACC,eAAe,QAIzClJ,SAASgQ,KAAKtT,OAAOmT,GACrBA,EAAKI,mBAAmBN,EAASC,GACjCC,EAAK5G,MAAM,CAACC,eAAe,IAC3B5P,EAAMkP,mBAEb,YAEmBlP,GAChB,MAAM,cAACC,EAAa,IAAE5F,GAAO2F,EAC7B,GAAIC,aAAyB+P,GACzB,OAAQ3V,GACJ,IAAK,SACD2X,GAAa1K,KACT3K,KAAKuQ,iBACP1J,SACFxD,EAAMkP,mBAjXpB8D,GAAY,IAHjBnN,EAAc,CACXE,KAAM,YAEJiN,IAyXN,IAAI4D,GAAgC5D,G,uUCtkBpC,MAAM6D,WAA+Bjb,YAmBjCqY,UACI,IAAKtX,KAAKma,SAAU,CAChB,OAAQna,KAAKhB,MACT,IAAK,WACDgB,KAAK6X,SAAW7X,KAAK6X,QACrB,MACJ,IAAK,QACD7X,KAAK6X,SAAU,EAGvB7X,KAAKoE,cAAc,IAAIiL,MAAM,UAAW,CACpCC,SAAS,MAKrB8K,SACIpa,KAAKma,UAAW,EAGpBE,UACIra,KAAKma,UAAW,GAtCpB,IADCjS,EAAkB,CAAClJ,KAAMiK,U,4BAI1B,IADCf,EAAkB,CAAClJ,KAAMiK,U,6BAI1B,IADCf,EAAkB,CAAClJ,KAAMiK,U,8BAI1B,IADCf,EAAkB,CAAClJ,KAAMiK,OAAQb,aAAc,Y,4BAIhD,IADCF,EAAkB,CAAClJ,KAAMuJ,W,gCAI1B,IADCL,EAAkB,CAAClJ,KAAMuJ,W,+BA4B9B,ICtEK+R,GAmCAC,GAMAC,GD6BDC,GAAoDP,ICtExD,SAAKI,GACD,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,gBACA,wBACA,yBACA,yBACA,2BACA,qBACA,gBAhCJ,CAAKA,KAAAA,GAAG,KAmCR,SAAKC,GACD,YACA,oBACA,gBAHJ,CAAKA,KAAAA,GAAW,KAMhB,SAAKC,GACD,mBACA,qBACA,qBACA,yBACA,mBALJ,CAAKA,KAAAA,GAAW,K,gBCnBZ,G,uUAKJ,IAAME,GAAN,cAAuCzb,YAgCnCc,cACIsE,QACmBrE,KAAKsO,aAAa,CAACC,KAAM,SACjC9H,OACP,GAAe+H,QAAQC,WAAU,IAIzC7O,yBAAyBwJ,EAAczJ,EAAyBqC,GAC5D,OAAQoH,GACJ,IAAK,WACDpJ,KAAKoE,cAAc,IAAIiL,MAAM,SAAU,CAACC,SAAS,SAjBzD,GAAiB,EAAQ,aACVd,QAAQ/H,OACnB,EAAQ,SAvBhB,IADCyB,EAAkB,CAAClJ,KAAMiK,U,4BAI1B,IADCf,EAAkB,CAAClJ,KAAMiK,U,+BAI1B,IADCf,EAAkB,CAAClJ,KAAMiK,U,4BAI1B,IADCf,EAAkB,CAAClJ,KAAM+J,U,gCAI1B,IADCb,EAAkB,CAAClJ,KAAMuJ,W,kCAI1B,IADCL,EAAkB,CAAClJ,KAAMuJ,W,8BAI1B,IADCL,EAAkB,CAAClJ,KAAMuJ,QAASF,UAAU,K,gCAtB3CqS,GAAwB,IAH7BxR,EAAc,CACXE,KAAM,gBAEJsR,IAkDN,I,MC9DI,GD8DAC,GAAwDD,GCzD5D,IAAME,GAAN,cAA2C3b,YAsBvCc,cACIsE,Q,aACA,MAAMgK,EAAarO,KAAKsO,aAAa,CAACC,KAAM,SAC5CF,EAAW5H,OACP,GAAe+H,QAAQC,WAAU,IAErCJ,EAAWxK,iBAAiB,a,uSAAc,CAAA7D,KAAI,WAAwB2H,KAAK3H,S,2BAGxDqD,GACnB,MAAM,OAACtE,GAAUsE,EAC+CtE,EAC3D2P,mBACArH,QACGsH,GAAaA,aAAqBgM,KAE5B9b,SAAQ,CAACgH,EAAQM,KAC3BN,EAAOgJ,SAAW1I,OAlCtB,GAAiB,EAAQ,aACVqI,QAAQ/H,OACnB,EAAQ,QAAS,CACb0D,SAAU,CACC,oPASf,EAAQ,SAlBdyQ,G,mUAA4B,EAHjC1R,EAAc,CACXE,KAAM,oBAEJwR,IA4CN,I,MCvCI,GDuCAC,GAAgED,G,knBClCpE,IAAME,GAAN,cAAuCL,GA6CnC1a,cACIsE,Q,aACmBrE,KAAKsO,aAAa,CAACC,KAAM,SACjC9H,OACP,GAAe+H,QAAQC,WAAU,IAOzCkB,OAAOC,GACH,MAAM,KAAC5Q,EAAI,SAAE6Q,GAAY7P,KACzB,OAAQhB,GACJ,IAAK,OACL,IAAK,UAAW,CACZ,MAAM+b,EAASnL,IAAUC,EACzB7P,KAAK6P,SAAWkL,EACZA,GACA,GAAA/a,KAAI,WAAc,KAAlBA,MAEJA,KAAKoE,cAAc,IAAIiL,MAAM,SAAU,CAACC,SAAS,KACjD,QAKZyL,SACI,MAAM,KAAC/b,GAAQgB,KACf,OAAQhB,GACJ,IAAK,OACL,IAAK,UACIgB,KAAK6P,WACN7P,KAAK6P,UAAW,EAChB,GAAA7P,KAAI,WAAc,KAAlBA,QAOhBgb,WACI,MAAM,KAAChc,GAAQgB,KACf,OAAQhB,GACJ,IAAK,OACL,IAAK,UACGgB,KAAK6P,WACL7P,KAAK6P,UAAW,MV8HU,IACtChO,G,6BUvHA,MAAM,KAAC+X,GAAQ5Z,KACf,GAAa,OAAT4Z,EAAe,CACf,MAAOlK,MAAOuL,GAAarB,GACpBsB,IAAKC,EAASC,OAAQC,EAAYC,KAAMC,EAAUC,MAAOC,GAAazb,KAAK0b,yBAC3EC,MAAOC,EAAWC,OAAQC,GAAclC,EAAK8B,yBAC9C,QAACK,EAAO,QAAEC,GAAWC,QACrB,YAACC,EAAW,aAAEC,GAAgBpS,SAASgQ,MACvC,KAAC/a,GAAQgB,KACf,GAAY,QAARhB,EAAgB,CAChB,MAAMod,EAAYX,EAAYG,EAAYM,EACpCG,EAAYlB,EAAUW,EAAaK,EACzClB,EAAUxV,YAAY,OAAQ,GAC1B2W,EAAY,EACZJ,EAAUT,EAAWK,EACrBI,EAAUT,OAEdN,EAAUxV,YAAY,MAAO,GACzB4W,EAAY,EACZN,EAAUZ,EAAUW,EACpBC,EAAUV,WAGb,CACD,MAAMiB,EAActc,KAAKkP,QAAQ,UACjC,GAAoB,OAAhBoN,EAAsB,CACtB,MAAOpB,IAAKqB,EAAgBjB,KAAMkB,GAAmBF,EAAYZ,wBAC3DU,EAAYX,EAAYG,EAAYM,EACpCG,EAAYlB,EAAUW,EAAaK,EACzClB,EAAUxV,YAAY,QAClB2W,EAAY,EACZb,EAAWK,EAAYY,EACvBf,EAAYe,GAHc,MAK9B,MAAMC,EAAoBR,OAAOS,iBAAiB9C,IAC5C,WAAC+C,EAAU,cAAEC,GAAiBH,EAC9BI,EAAiB7T,WAAW2T,GAC5BG,EAAoB9T,WAAW4T,GACrC3B,EAAUxV,YAAY,MAAO,GACzB4W,EAAY,EACZhB,EAAaS,EAAaS,EAAiBO,EAC3C3B,EAAUoB,EAAiBM,YA3H3C,GAAiB,EAAQ,aACVrO,QAAQ/H,OACnB,EAAQ,OAAQ,CACZpF,WAAY,CACR4O,KAAM,UAGd,EAAQ,OAAQ,CACZ5O,WAAY,CACR4O,KAAM,SAEV9F,SAAU,CACN,EAAQ,WAGhB,EAAQ,OAAQ,CACZ9I,WAAY,CACR4O,KAAM,WAGd,EAAQ,OAAQ,CACZ5O,WAAY,CACR+H,KAAM,WAlCtB,IADClB,EAAkB,CAAClJ,KAAMuJ,W,8BAI1B,IADCL,EAAkB,CAAClJ,KAAM+J,U,6BAI1B,IADCb,EAAkB,CAAClJ,KAAMuJ,W,gCAI1B,IADCL,EAAkB,CAAClJ,KAAMiK,OAAQb,aAAc,SAAUC,UAAU,K,4BAyCpE,KVqKIxG,GUtKW,CAACkb,SAAU,8BV2KnB,CACHhe,EAAWie,KAEX,MAAM,YAACjd,GAAehB,GAChB,UAACb,GAAa6B,EACdgC,EAAeib,EAAY7U,YAC3B,SAAC4U,GAAYlb,GAEbob,EADmBpb,GAAKqb,iBACI,WAC9B,OAAOld,KAAKqO,WAAYmB,cAAcuN,IACtC,WACA,OAAO/c,KAAKwP,cAAcuN,IAE9Bnf,OAAOC,eAAeK,EAAW6D,EAAc,CAC3ChE,IAAKkf,O,4BU9OXnC,GAAwB,IAH7B5R,EAAc,CACXE,KAAM,gBAEJ0R,IAoJN,I,MC/JI,GD+JAqC,GAAwDrC,GA0CxDsC,GAAkCxf,OAAOyf,QAC/B,SAASxb,GAQf,MAAM,MAACwS,EAAK,KAAEjL,EAAI,KAAEpK,EAAI,MAAET,EAAK,QAAE+Y,EAAO,KAAEsC,GAAQ/X,EAIlD,OAHI+X,IACAA,EAAKhZ,KAAO,QAET,EAAQ,aAAc,CACzBS,WAAY,CACRsV,UAAW,EACXiB,MAAOvD,EACPjL,KAAMA,EACN7K,MAAOA,EACPS,KAAMA,GAEVmL,SAAUyP,EAAO,CACbvF,EACAuF,GACA,CACAvF,GAEJjK,UAAW,CACPkN,QAASA,OAGlB,CACCpZ,UAAWif,GAAqBjf,UAChCof,OAAOzb,GAMI,IAAIub,GAAU,IACdvb,EAAM7C,KAAM,WAGvBue,SAAS1b,GAME,IAAIub,GAAU,IACdvb,EAAM7C,KAAM,aAGvBwe,MAAM3b,GAMK,IAAIub,GAAU,IACdvb,EAAM7C,KAAM,UAGvB4a,KAAK/X,GAKM,IAAIub,GAAU,IACdvb,EAAM7C,KAAM,SAGvBye,QAAQ5b,GAKG,IAAIub,GAAU,IACdvb,EAAM7C,KAAM,c,uUClR/B,IAAM0e,GAAN,cAA4Cze,YA2BxCc,cACIsE,Q,aACA,MAAMgK,EAAarO,KAAKsO,aAAa,CAACC,KAAM,SAC5CF,EAAW5H,OACP,GAAe+H,QAAQC,WAAU,IAErCJ,EAAWxK,iBACP,a,uSAAc,CAAA7D,KAAI,WAAwB2H,KAAK3H,OAgBvDJ,yBAAyBwJ,EAAczJ,EAAyBqC,GAC5D,OAAQoH,GACJ,IAAK,QACD,MAAMiL,EAAQrU,KAAKqO,WAAWmB,cAAc,gBACxC6E,IACAA,EAAM5E,YAAczN,M,2BAjBbqB,GACnB,MAAM,OAACtE,GAAUsE,EAC+CtE,EAC3D2P,mBACArH,QACGsH,GAAaA,aAAqBwO,KAE5Bte,SAAQ,CAACgH,EAAQM,KAC3BN,EAAO7C,MAAQmD,OAnCnB,GAAiB,EAAQ,aACVqI,QAAQ/H,OACnB,EAAQ,QAAS,CACb0D,SAAU,CACC,yLAQf,EAAQ,SApBhB,IADCjC,EAAkB,CAAClJ,KAAMiK,U,4BAI1B,IADCf,EAAkB,CAAClJ,KAAMiK,OAAQZ,UAAU,K,6BAL1CqV,GAA6B,IAHlCxU,EAAc,CACXE,KAAM,qBAEJsU,IA8DN,I,kEChEI,GACAC,GD+DAC,GAAkEF,GAWlEG,GAA4CjgB,OAAOyf,QACzC,SAASxb,GAIf,MAAM,KAACuH,EAAI,MAAExG,GAASf,EACtB,OAAO,EAAQ,kBAAmB,CAC9BR,WAAY,CACR+H,KAAMA,GAEVe,SAAUvH,MAEf,CACC1E,UAAW0f,GAA0B1f,UACrC4f,OAASjc,IAOL,MAAM,KAACuH,EAAI,MAAExG,GAASf,EACtB,OAAO,EAAQ,kBAAmB,CAC9BR,WAAY,CACR+H,KAAMA,GAEVe,SAAUvH,EAAMlC,KACZ,EAAE2T,MAAAA,EAAO9V,MAAAA,KAAW,IAAI6e,GAAU,CAAChU,KAAAA,EAAMiL,MAAAA,EAAOrV,KAAM,QAAST,MAAAA,W,knBChGnF,IAAMwf,GAAoB,GAA1B,cAAmC9e,YA2B/Bc,cACIsE,Q,aAXJ,oBAYuBrE,KAAKsO,aAAa,CAACC,KAAM,SACjC9H,OACP,GAAe+H,QAAQC,WAAU,I,+VAErC,CAAAzO,KAAI,GAAW+J,SAASoG,iBACpBnQ,KAAMoQ,WAAWC,aAAc,GAAArQ,KAAI,WAAmB2H,KAAK3H,OAC9D,KACDA,KAAK4C,MAAQ5C,KAAKsQ,qBAAqB,cACvCtQ,KAAK6D,iBAAiB,QAAS,GAAA7D,KAAI,WAAmB2H,KAAK3H,OAC3DA,KAAK6D,iBAAiB,YAAa,GAAA7D,KAAI,WAAuB2H,KAAK3H,OACnEA,KAAK6D,iBAAiB,WAAY,GAAA7D,KAAI,WAAsB2H,KAAK3H,OACjEA,KAAK6D,iBAAiB,UAAW,GAAA7D,KAAI,WAAqB2H,KAAK3H,OAC/DA,KAAK6D,iBAAiB,WAAY,GAAA7D,KAAI,WAAsB2H,KAAK3H,OACjEA,KAAK6D,iBAAiB,UAAW,GAAA7D,KAAI,WAAqB2H,KAAK3H,OAC/DA,KAAK6D,iBAAiB,UAAW,GAAA7D,KAAI,WAAqB2H,KAAK3H,OAtCnE,iBACI,OAAOA,KAAKwP,cACR,8DAuCRwK,mBAAmBgE,EAAWC,GAC1B,MAAM,MAACvO,GAAS1P,MACT2b,MAAOC,EAAWC,OAAQC,GAAc9b,KAAK0b,yBAC9C,QAACM,EAAO,QAAED,GAAWE,OACrBX,EAAO0C,EAAIhC,EACXd,EAAM+C,EAAIlC,GACV,YAACG,EAAW,aAAEC,GAAgBpS,SAASgQ,KACvCqC,EAAYd,EAAOM,EAAYM,EAC/BG,EAAYnB,EAAMY,EAAaK,EACrCzM,EAAMjK,YAAY,OAAQ,GAAG2W,EAAY,EAAId,EAAOM,EAAYN,OAChE5L,EAAMjK,YAAY,MAAO,GAAG4W,EAAY,EAAInB,EAAMY,EAAaZ,S,4CAI/Dlb,KAAKke,iBACD,gEAEHrf,SAASgH,IACNA,EAAOmV,eAEd,YAEcjc,GACX,OAAOA,EAAOmQ,QAAQ,gBAAkBlP,MAC3C,YAEYjB,GACT,OAAOgC,MAAM4J,KAAK3K,KAAKke,iBACnB,uDACDC,MAAKtY,GAAUA,EAAO4L,SAAS1S,MAAY,MACjD,YAEiBoG,GACd,OAAIA,aAAgBgY,GACT/M,WAAWS,cAElB1L,aAAgByY,GACTxN,WAAWU,YAEfV,WAAWW,eACrB,cAGG,MAAMP,EAAS,GAAAxQ,KAAI,QAEnB,OADAwQ,EAAOC,YAAcD,EAAO/O,KACQ+O,EAAO1D,cAC9C,cAGG,MAAM0D,EAAS,GAAAxQ,KAAI,QAEnB,OADAwQ,EAAOC,YAAcD,EAAO/O,KACQ+O,EAAOuB,aAC9C,YAEahP,GACV,MAAMyN,EAAS,GAAAxQ,KAAI,QAEnB,OADAwQ,EAAOC,YAAc1N,EACeyN,EAAO4N,gBAC9C,YAESrb,GACN,MAAMyN,EAAS,GAAAxQ,KAAI,QAEnB,OADAwQ,EAAOC,YAAc1N,EACeyN,EAAOyB,YAC9C,YAEelP,GACZ,MAAM,KAAC6W,GAAQ7W,EACf,OAAO6W,aAAgB,GACnB,GAAAA,EAAI,WAAW,KAAfA,GACA,MACP,YAEc7W,GACX,MAAM,WAAC2O,GAAc1R,KACF,OAAf0R,GAAuBA,IAAe3O,IACtC2O,EAAWC,QAAS,GAEX,OAAT5O,IACAA,EAAK4O,QAAS,IAErB,YAEiBtO,GACd,MAAM,OAACtE,GAAUsE,EACbtE,aAAkBoe,IACI,GAAAnd,KAAI,WAAe,KAAnBA,KAAoBjB,IAEtCA,EAAOuY,WAGlB,YAEmBjU,GAChB,MAAM,OAACtE,GAAUsE,EACjB,GAAItE,aAAkBoe,GAAsB,CACxC,MAAMkB,EAAc,GAAAre,KAAI,WAAa,KAAjBA,KAAkBjB,GAClCsf,GACA,GAAAre,KAAI,WAAe,KAAnBA,KAAoBqe,KAG/B,YAEoBhb,GACjB,MAAM,cAACmP,GAAiBnP,EAExB,IADyBrD,KAAKyR,SAAee,GACxB,CACjB,MAAM,WAACqH,GAAc7Z,KACrB,GAAI6Z,EACA,IACI7Z,KAAK6G,SAET,MAAOyX,QAEN,CACD,MAAM,WAAC5M,GAAc1R,KACjB0R,GAAY7B,UACZ6B,EAAWsJ,WAEf,GAAAhb,KAAI,WAAe,KAAnBA,KAAoB,SAG/B,GAEDue,eAAsBxb,EAA4Byb,GAC9C,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACzB,MAAMC,EAAUC,YAAW,KACvBH,OAAQ,KACTF,GAAS,GACZb,GAAexc,IAAI4B,EAAM,CACrB+D,MAAO,KACHgY,aAAaF,GACbD,UAGTI,MAAK,KACJpB,GAAexZ,OAAOpB,OAE7B,YAEiBA,GACd,MAAM6b,EAAUjB,GAAe5f,IAAIgF,QACZ,IAAZ6b,IACPjB,GAAexZ,OAAOpB,GACtB6b,EAAQ9X,UAEf,YAEmBzD,GAChB,MAAM,IAAC3F,GAAO2F,GACR,WAACqO,GAAc1R,KACrB,OAAQtC,GACJ,IAAK,WACoBgU,EACjB,GAAA1R,KAAI,WAAc,KAAlBA,KAAmB0R,IAAe,GAAA1R,KAAI,WAAU,KAAdA,MAClC,GAAAA,KAAI,WAAW,KAAfA,QACUgT,MAAM,CAACC,eAAe,IACpC5P,EAAMgP,kBACN,MAEJ,IAAK,aACgBX,EACb,GAAA1R,KAAI,WAAU,KAAdA,KAAe0R,IAAe,GAAA1R,KAAI,WAAW,KAAfA,MAC9B,GAAAA,KAAI,WAAW,KAAfA,QACMgT,MAAM,CAACC,eAAe,IAChC5P,EAAMgP,kBACN,MAEJ,IAAK,OACiB,GAAArS,KAAI,WAAW,KAAfA,OACPgT,MAAM,CAACC,eAAe,IACjC5P,EAAMgP,kBACN,MAEJ,IAAK,MACgB,GAAArS,KAAI,WAAU,KAAdA,OACPgT,MAAM,CAACC,eAAe,IAChC5P,EAAMgP,kBACN,MAEJ,IAAK,QACD,GAAIX,EAAY,CACZ,MAAM,KAAC1S,GAAQ0S,EACf,OAAQ1S,GACJ,IAAK,UACD0S,EAAWqJ,SACPrJ,EAAW7B,UACY,GAAA7P,KAAI,WAAgB,KAApBA,KAAqB0R,IAC5BsB,MAAM,CAACC,eAAe,IAE1C,MAEJ,QACIvB,EAAW4F,UAInBjU,EAAMgP,kBAEV,MAEJ,IAAK,SAaL,IAAK,YACGX,IAC4BrO,EAAM2b,eAAeb,MAC7Cc,GAAYA,aAAoBC,MAC/Blf,OAED0R,EAAWsJ,WACXtJ,EAAWsB,MAAM,CAACC,eAAe,IACjC5P,EAAMgP,oBAGd,MAEJ,IAAK,aACD,GAAIX,EAAY,CACZ,MAAM,KAAC1S,GAAQ0S,EACf,OAAQ1S,GACJ,IAAK,UACI0S,EAAW7B,WACZ6B,EAAWqJ,SACY,GAAA/a,KAAI,WAAgB,KAApBA,KAAqB0R,IAC5BsB,MAAM,CAACC,eAAe,IACtC5P,EAAMgP,uBASjC,YAEoBhP,GACjB,MAAM,OAACtE,EAAM,cAAEyT,GAAiBnP,EAChC,GAAItE,aAAkBoe,GAAsB,CACxC,MAAMkB,EAAc,GAAAre,KAAI,WAAa,KAAjBA,KAAkBjB,GACtC,GAAoB,OAAhBsf,IACwB,WAApBA,EAAYrf,MACXqf,EAAYxO,UACb,GAAA7P,KAAI,WAAkB,KAAtBA,KAAuBqe,GAEChb,EAAM2b,eAAeb,MAC7Cc,GAAYA,aAAoBC,MAC/Blf,MACoB,CACrB,MAAM,WAAC0R,GAAc1R,KACG,WAApB0R,GAAY1S,MACZ0S,EAAW7B,WACX,GAAA7P,KAAI,WAAkB,KAAtBA,KAAuB0R,GACvB,GAAA1R,KAAI,WAAgB,KAApBA,KAAqB0R,EAAY,KAC5BqN,MAAK,KACFrN,EAAWsJ,cAEdmE,OAAM,UAEf,MAAM,QAACzF,EAAO,QAAEC,GAAWtW,GACrB,KAACiY,EAAI,MAAEE,EAAK,IAAEN,EAAG,OAAEE,GAAUpb,KAAK0b,wBAClC0D,IACF9D,EAAO5B,GAAW8B,EAAQ9B,GAAWwB,EAAMvB,GAAWyB,EAASzB,GAE7D0F,EAAwBrf,KAAKyR,SAAee,GAC9C4M,GAAuBC,IACnB7M,aAAyB0M,IAAoB1M,IAAkBxS,KAC/DwS,EAAcQ,MAAM,CAACC,eAAe,KAGpCjT,KAAKgT,MAAM,CAACC,eAAe,IAC3B,GAAAjT,KAAI,WAAe,KAAnBA,KAAoB,QAGvBof,IACDpf,KAAKgT,MAAM,CAACC,eAAe,IAC3B,GAAAjT,KAAI,WAAe,KAAnBA,KAAoB,UAKvC,YAEqBqD,GAClB,MAAM,OAACtE,GAAUsE,EACjB,GAAItE,aAAkBoe,GAAsB,CACxC,MAAMkB,EAAc,GAAAre,KAAI,WAAa,KAAjBA,KAAkBjB,GACtC,GAAoB,OAAhBsf,IACwB,WAApBA,EAAYrf,MAAqBqf,EAAYxO,UAC7C,GAAA7P,KAAI,WAAkB,KAAtBA,KAAuBqe,GAEChb,EAAM2b,eAAeb,MAC7Cc,GAAYA,aAAoBC,MAC/Blf,MACoB,CACrB,MAAM,WAAC0R,GAAc1R,KACG,WAApB0R,GAAY1S,MACZ0S,EAAW7B,WACV6B,EAAWD,SAAe1S,KAC3B,GAAAiB,KAAI,WAAkB,KAAtBA,KAAuB0R,GACvB,GAAA1R,KAAI,WAAgB,KAApBA,KAAqB0R,EAAY,KAC5BqN,MAAK,KACFrN,EAAWsJ,cAEdmE,OAAM,UAEf,GAAAnf,KAAI,WAAe,KAAnBA,KAAoBqe,GACpBA,EAAYrL,MAAM,CAACC,eAAe,IACV,WAApBoL,EAAYrf,OACPqf,EAAYxO,SAebwO,EAAYzE,MAAM5G,MAAM,CAACC,eAAe,KAdxC,GAAAjT,KAAI,WAAkB,KAAtBA,KAAuBqe,GACvB,GAAAre,KAAI,WAAgB,KAApBA,KAAqBqe,EAAa,KAC7BU,MAAK,KACF,MAAM,WAACrN,GAAc1R,KACrB,GAAAA,KAAI,WAAkB,KAAtBA,MACI0R,IACA,GAAA1R,KAAI,WAAkB,KAAtBA,KAAuB0R,GACvBA,EAAWqJ,SACXrJ,EAAWkI,MAAM5G,MAAM,CAACC,eAAe,QAG9CkM,OAAM,cASlC,YAEmB9b,GAChB,MAAM,OAACtE,GAAUsE,GACX,WAACwW,GAAc7Z,KACrB,GAAIjB,aAAkBoe,GAAsB,CAExC,GADsB,GAAAnd,KAAI,WAAe,KAAnBA,KAAoBjB,GACvB,CACf,MAAM,KAACC,EAAI,KAAEoK,EAAI,MAAE7K,GAASQ,EAChB,SAARC,GACAgB,KAAKke,iBACD,uEAAuE9U,MAE1EvK,SAASygB,IACNA,EAAQzH,QAAUyH,EAAQ/gB,OAASA,KAI/C,GAAIsb,EACA,IACI7Z,KAAK6G,SAET,MAAOyX,QArYf,GAAiB,EAAQ,aACV9P,QAAQ/H,OACnB,EAAQ,SAEZkX,GAAiB,IAAIlf,QAZzB,IADCyJ,EAAkB,CAAClJ,KAAMiK,U,4BAI1B,IADCf,EAAkB,CAAClJ,KAAMuJ,W,kCAdxBwV,GAAoB,OAHzB7U,EAAc,CACXE,KAAM,YAEJ2U,IA+ZN,I,SCpaI,GDoaAmB,GAAgDnB,GAUhDwB,GAA0B3hB,OAAOyf,QACvB,SAASxb,GAIf,MAAM,KAACuH,EAAI,SAAEe,GAAYtI,EACzB,OAAO,EAAQ,SAAU,CACrBR,WAAY,CACR+H,KAAMA,EACNuN,UAAW,GAEfxM,SAAUA,MAEf,CACCjM,UAAWghB,GAAiBhhB,Y,69BCvbpC,IAAMshB,GAAN,cAAsCvgB,YA+DlCc,cACIsE,Q,aA3CJ,oBA4CI,GAAArE,KAAI,GAAS,KAAI,KACjBA,KAAKyf,MAAQ,IAAIC,GAAwB1f,MACzC,MAAMqO,EAAarO,KAAKsO,aAAa,CAACC,KAAM,SAC5CF,EAAW5H,OACP,GAAe+H,QAAQC,WAAU,IAErCJ,EAAWxK,iBACP,aAAc,GAAA7D,KAAI,WAAwB2H,KAAK3H,OAnEvD,WACI,OAAO,GAAAA,KAAI,QAsEfJ,yBAAyBwJ,EAAczJ,EAAyBqC,GAC5D,OAAQoH,GACJ,IAAK,WACDpJ,KAAKoE,cAAc,IAAIiL,MAAM,SAAU,CAACC,SAAS,Q,0CAMtCjM,GACnB,MAAM,OAACtE,GAAUsE,GACV+F,KAAM4G,GAA6BjR,EAC1C,OAAQiR,GACJ,IAAK,OAAQ,CACT,MAAM1P,EAA4BvB,EAAQ2P,mBAAmB,GAC7D,GAAA1O,KAAI,GAASM,aAAmB4e,GAAmB5e,EAAU,KAAI,KACjE,MAEJ,QACoEvB,EAC3D2P,mBACArH,QACGsH,GAAaA,aAAqBgM,KAE5B9b,SAAQ,CAAC8gB,EAAQxZ,KAC3BwZ,EAAO9Q,SAAW1I,QA7E9B,GAAiB,EAAQ,aACVqI,QAAQ/H,OACnB,EAAQ,QAAS,CACb0D,SAAU,CACC,+3BA0Bf,EAAQ,QACR,EAAQ,OAAQ,CACZ9I,WAAY,CACR+H,KAAM,WA/CtB,IADClB,EAAkB,CAAClJ,KAAMiK,U,4BAI1B,IADCf,EAAkB,CAAClJ,KAAMuJ,W,8BAI1B,IADCL,EAAkB,CAAClJ,KAAMuJ,W,gCAI1B,IADCL,EAAkB,CAAClJ,KAAM+J,U,gCAlBxByW,GAAuB,IAH5BtW,EAAc,CACXE,KAAM,eAEJoW,IA4GN,I,SAAII,GAAsDJ,G,qVCxG1Cra,GACR,OAAIA,aAAgBwV,GACTvK,WAAWS,cAElB1L,aAAgB0a,IAGhB1a,aAAgB0V,IAGhB1V,aAAgBya,GALTxP,WAAWU,YAQfV,WAAWW,eA0C1B,I,SAAI2O,GAxEJ,MAWI3f,YAAY0B,G,aAVZ,oB,+VAWI,CAAAzB,KAAI,GAAW+J,SAASoG,iBACpB1O,EAAM2O,WAAWC,aAAc,GAAArQ,KAAI,WAAa2H,KAAK3H,OACxD,KAXL,aACI,MAAMwQ,EAAS,GAAAxQ,KAAI,QACnBwQ,EAAOC,YAAcD,EAAO/O,KAC5B,IAAIqB,EAAS,EACb,KAA6B,OAAtB0N,EAAOyB,YAAqBnP,IACnC,OAAOA,EAyBXC,KAAKC,GACD,GAAIA,EAAQ,EACR,OAAO,KAEX,MAAMwN,EAAS,GAAAxQ,KAAI,QACnBwQ,EAAOC,YAAcD,EAAO/O,KAC5B,IAAIgP,EAAcD,EAAOyB,WACrB9L,EAAI,EACR,KAAOA,EAAInD,GAAyB,OAAhByN,GAChBA,EAAcD,EAAOyB,WACrB9L,IAEJ,OAAoCsK,EAGxCkH,UAAUvO,GACN,IAAKA,EACD,OAAO,KAEX,MAAMoH,EAAS,GAAAxQ,KAAI,QACnBwQ,EAAOC,YAAcD,EAAO/O,KAC5B,IAAIgP,EAA2CD,EAAOyB,WACtD,KAAuB,OAAhBxB,GAA0BA,EAAYrH,MAAQA,GACjDqH,EAA2CD,EAAOyB,WAEtD,OAAoCxB,EAGxC,UACI,MAAMD,EAAS,GAAAxQ,KAAI,QACnBwQ,EAAOC,YAAcD,EAAO/O,KAC5B,IAAIgP,EAAcD,EAAOyB,WACzB,KAAuB,OAAhBxB,SACyBA,EAC5BA,EAAcD,EAAOyB,a,qVCnDjB9M,GACR,OAAIA,aAAgB0a,GACTzP,WAAWU,YAElB3L,aAAgBya,GACTxP,WAAWS,cAElB1L,aAAgB0V,GACTzK,WAAWU,YAEfV,WAAWW,eA0C1B,I,MChEI,GDgEA+O,GArEJ,MAWI/f,YAAY0B,G,aAVZ,oB,+VAWI,CAAAzB,KAAI,GAAW+J,SAASoG,iBACpB1O,EAAM2O,WAAWC,aAAc,GAAArQ,KAAI,WAAa2H,KAAK3H,OACxD,KAXL,aACI,MAAMwQ,EAAS,GAAAxQ,KAAI,QACnBwQ,EAAOC,YAAcD,EAAO/O,KAC5B,IAAIqB,EAAS,EACb,KAA6B,OAAtB0N,EAAOyB,YAAqBnP,IACnC,OAAOA,EAsBXC,KAAKC,GACD,GAAIA,EAAQ,EACR,OAAO,KAEX,MAAMwN,EAAS,GAAAxQ,KAAI,QACnBwQ,EAAOC,YAAcD,EAAO/O,KAC5B,IAAIgP,EAAcD,EAAOyB,WACrB9L,EAAI,EACR,KAAOA,EAAInD,GAAyB,OAAhByN,GAChBA,EAAcD,EAAOyB,WACrB9L,IAEJ,OAAmCsK,EAGvCkH,UAAUvO,GACN,IAAKA,EACD,OAAO,KAEX,MAAMoH,EAAS,GAAAxQ,KAAI,QACnBwQ,EAAOC,YAAcD,EAAO/O,KAC5B,IAAIgP,EAA0CD,EAAOyB,WACrD,KAAuB,OAAhBxB,GAA0BA,EAAYrH,MAAQA,GACjDqH,EAA0CD,EAAOyB,WAErD,OAAmCxB,EAGvC,UACI,MAAMD,EAAS,GAAAxQ,KAAI,QACnBwQ,EAAOC,YAAcD,EAAO/O,KAC5B,IAAIgP,EAAcD,EAAOyB,WACzB,KAAuB,OAAhBxB,SACwBA,EAC3BA,EAAcD,EAAOyB,aCtDjC,IAAM8N,GAAN,cAAuC9gB,YAsBnCc,cACIsE,Q,aACArE,KAAKyf,MAAQ,IAAIC,GAAwB1f,MACzCA,KAAKggB,KAAO,IAAIF,GAAuB9f,MACvC,MAAMqO,EAAarO,KAAKsO,aAAa,CAACC,KAAM,SAC5CF,EAAW5H,OACP,GAAe+H,QAAQC,WAAU,IAErCJ,EAAWxK,iBAAiB,a,uSAAc,CAAA7D,KAAI,WAAwB2H,KAAK3H,S,2BAGxDqD,GACnB,MAAM,OAACtE,GAAUsE,EAC+CtE,EAC3D2P,mBACArH,QACGsH,GAAaA,aAAqBgM,KAE5B9b,SAAQ,CAACgH,EAAQM,KAC3BN,EAAOgJ,SAAW1I,OAlCtB,GAAiB,EAAQ,aACVqI,QAAQ/H,OACnB,EAAQ,QAAS,CACb0D,SAAU,CACC,+IAOf,EAAQ,SAlBd4V,G,mUAAwB,EAH7B7W,EAAc,CACXE,KAAM,gBAEJ2W,IA8CN,I,qHClCI,GDkCAF,GAAwDE,G,69BC7B5D,IAAME,GAAN,cAAmChhB,YAmD/Bc,cACIsE,Q,aATJ,oBACA,oBAEA,oBACA,oBACA,oBACA,oBAII,GAAArE,KAAI,GAAgB+J,SAASoG,iBACzBnQ,KAAMoQ,WAAWC,aAAc,GAAArQ,KAAI,WAAwB2H,KAAK3H,OACnE,KACD,GAAAA,KAAI,GAAe+J,SAASoG,iBACxBnQ,KAAMoQ,WAAWC,aAAc,GAAArQ,KAAI,WAAuB2H,KAAK3H,OAClE,KACD,GAAAA,KAAI,IAAqB,EAAC,KAC1B,GAAAA,KAAI,IAAoB,EAAC,KACzB,GAAAA,KAAI,IAAgB,EAAK,KACzB,GAAAA,KAAI,IAAwB,EAAK,KACjCA,KAAKyf,MAAQ,IAAIC,GAAwB1f,MACzCA,KAAKggB,KAAO,IAAIF,GAAuB9f,MACvC,MAAMqO,EAAarO,KAAKsO,aAAa,CAACC,KAAM,SAC5CF,EAAW5H,OACP,GAAe+H,QAAQC,WAAU,IAErCzO,KAAK6D,iBAAiB,cAAe,GAAA7D,KAAI,WAAyB2H,KAAK3H,OACvEA,KAAK6D,iBAAiB,QAAS,GAAA7D,KAAI,WAAmB2H,KAAK3H,OAC3DA,KAAK6D,iBAAiB,QAAS,GAAA7D,KAAI,WAAmB2H,KAAK3H,OAC3DA,KAAK6D,iBAAiB,UAAW,GAAA7D,KAAI,WAAqB2H,KAAK3H,OAC/DA,KAAK6D,iBAAiB,UAAW,GAAA7D,KAAI,WAAqB2H,KAAK3H,OAC/DA,KAAK6D,iBAAiB,SAAU,GAAA7D,KAAI,WAAoB2H,KAAK3H,OAC7DqO,EAAWxK,iBAAiB,aAAc,GAAA7D,KAAI,WAAwB2H,KAAK3H,OA9D/E,sBACI,OAAO,GAAAA,KAAI,QAGf,iBACI,OAAOA,KAAKyf,MAAM1c,KAAK,GAAA/C,KAAI,UAAsB,KAGrD,qBACI,OAAO,GAAAA,KAAI,QAGf,gBACI,OAAOA,KAAKggB,KAAKjd,KAAK,GAAA/C,KAAI,UAAqB,KAGnD,WACI,OAAOA,KAAKwP,cAAoC,uBAGpD,WACI,OAAOxP,KAAKwP,cAAoC,uBA4CpDmB,iBACI,GAAA3Q,KAAI,IAAgB,EAAI,KAG5B4Q,eACI,GAAA5Q,KAAI,IAAgB,EAAK,KACrB,GAAAA,KAAI,UACJA,KAAKoE,cAAc,IAAIiL,MAAM,kBAAmB,CAACC,SAAS,KAC1D,GAAAtP,KAAI,IAAwB,EAAK,MAIzCkgB,iBACI,GAAAlgB,KAAI,WAAqB,KAAzBA,MACA,GAAAA,KAAI,WAAoB,KAAxBA,MAGJmgB,gBAYI,OAAOpf,MAAM4J,KAAK3K,KAAKke,iBAAiB,yBAG5CkC,eAYI,OAAOrf,MAAM4J,KAAK3K,KAAKke,iBAAiB,0B,qHAGrB/Y,GACnB,OAAIA,aAAgBwV,KAAyBxV,EAAKgS,OACvC/G,WAAWS,cAElB1L,aAAgB0a,IAGhB1a,aAAgB0V,IAGhB1V,aAAgBya,GALTxP,WAAWU,YAQfV,WAAWW,eACrB,YAEqB5L,GAClB,OAAIA,aAAgBya,KAAwBza,EAAKgS,OACtC/G,WAAWS,cAElB1L,aAAgB0a,IAGhB1a,aAAgB0V,GAFTzK,WAAWU,YAKfV,WAAWW,eACrB,YAEcpG,EAA4BqG,GACvC,MAAMyO,EAAQ1e,MAAM4J,KAAK3K,KAAKyf,MAAMxc,UAC9B6C,EAAY2Z,EAAM1Z,QAAQ4E,GAC1B0V,EAAUZ,EAAM1Z,QAAQiL,GAC9B,OAAIlL,GAAa,GAAKua,GAAW,EACzB1V,GAAQqG,EACD,CAACrG,GAEL8U,EAAM5c,MACT8D,KAAK2Z,IAAIxa,EAAWua,GACpB1Z,KAAK4Z,IAAIza,EAAWua,GAAW,GAGhC,IACV,YAEa1V,EAA2BqG,GACrC,GAAIrG,GAAQqG,EACR,MAAO,CAACrG,GAEZ,MAAMsG,EAAWtG,EAAKuG,wBAAwBF,GAC9C,GAAIC,EAAWE,KAAKC,4BAA6B,CAC7C,MAAM7E,EAAQ,CAAC5B,GACf,IAAI6V,EAAiB,GAAAxgB,KAAI,WAAS,KAAbA,KAAc2K,GACnC,KAAO6V,GAAkBA,IAAmBxP,GACxCzE,EAAMtL,KAAKuf,GACXA,EAAiB,GAAAxgB,KAAI,WAAS,KAAbA,KAAcwgB,GAGnC,OADAjU,EAAMtL,KAAK+P,GACJzE,EAEN,GAAI0E,EAAWE,KAAKG,4BAA6B,CAClD,MAAM/E,EAAQ,CAAC5B,GACf,IAAI8V,EAAqB,GAAAzgB,KAAI,WAAa,KAAjBA,KAAkB2K,GAC3C,KAAO8V,GAAsBA,IAAuBzP,GAChDzE,EAAMtL,KAAKwf,GACXA,EAAqB,GAAAzgB,KAAI,WAAa,KAAjBA,KAAkBygB,GAG3C,OADAlU,EAAMtL,KAAK+P,GACJzE,EAEX,MAAO,IACV,eAEqBkT,GAClBzf,KAAK2Q,iBACiB3Q,KAAKmgB,gBACbthB,SAAS6hB,IACdjB,EAAMlY,SAASmZ,KAChBA,EAAehQ,UAAW,MAGlC+O,EAAM5gB,SAAS8gB,IACNA,EAAOjP,WACRiP,EAAOjP,UAAW,MAG1B1Q,KAAK4Q,gBACR,eAEoBoP,GACjBhgB,KAAK2Q,iBACgB3Q,KAAKogB,eACbvhB,SAAS8hB,IACbX,EAAKzY,SAASoZ,KACfA,EAAcjQ,UAAW,MAGjCsP,EAAKnhB,SAAS+hB,IACLA,EAAMlQ,WACPkQ,EAAMlQ,UAAW,MAGzB1Q,KAAK4Q,gBACR,eAEuB6O,GACpBzf,KAAK2Q,iBACL8O,EAAM5gB,SAAS8gB,IACNA,EAAOjP,WACRiP,EAAOjP,UAAW,MAG1B1Q,KAAK4Q,gBACR,eAEsBoP,GACnBhgB,KAAK2Q,iBACLqP,EAAKnhB,SAAS+hB,IACLA,EAAMlQ,WACPkQ,EAAMlQ,UAAW,MAGzB1Q,KAAK4Q,gBACR,eAE4B6O,GACzBzf,KAAK2Q,iBACL,MAAMwP,EAAgBngB,KAAKmgB,gBAC3BV,EAAM5gB,SAAS8gB,IACPQ,EAAc5Y,SAASoY,KACvBA,EAAOjP,UAAW,MAG1B1Q,KAAK4Q,gBACR,eAE2BoP,GACxBhgB,KAAK2Q,iBACL,MAAMyP,EAAepgB,KAAKogB,eAC1BJ,EAAKnhB,SAAS+hB,IACNR,EAAa7Y,SAASqZ,KACtBA,EAAMlQ,UAAW,MAGzB1Q,KAAK4Q,gBACR,cAGG5Q,KAAK2Q,iBACiB3Q,KAAKmgB,gBACbthB,SAAS8gB,IACfA,EAAOjP,WACPiP,EAAOjP,UAAW,MAG1B1Q,KAAK4Q,gBACR,cAGG5Q,KAAK2Q,iBACgB3Q,KAAKogB,eACbvhB,SAAS+hB,IACdA,EAAMlQ,WACNkQ,EAAMlQ,UAAW,MAGzB1Q,KAAK4Q,gBACR,YAEciQ,GACX,MAAM,WAACC,EAAU,MAAErB,GAASzf,KAC5B,GAAmB,OAAf8gB,GAAuBA,IAAeD,EACtCC,EAAWnP,QAAS,EACpBmP,EAAWlP,UAAY,OAEtB,GAAa,OAATiP,EAAe,CACA,GAAA7gB,KAAI,QACZyQ,YAAcoQ,EAC1BA,EAAKlP,QAAS,EACdkP,EAAKjP,SAAW,EAChB,MAAMmP,EAAa,GAAA/gB,KAAI,WAAY,KAAhBA,KAAiB6gB,GAChCE,GACA,GAAA/gB,KAAI,WAAc,KAAlBA,KAAmB+gB,GAEvB,GAAA/gB,KAAI,GAAoBe,MAAM4J,KAAK8U,EAAMxc,UAAU8C,QAAQ8a,GAAK,UAGhE,GAAA7gB,KAAI,IAAqB,EAAC,MAEjC,YAEaghB,GACV,MAAM,UAACC,EAAS,KAAEjB,GAAQhgB,KACR,OAAdihB,GAAsBA,IAAcD,GACpCC,EAAUtP,QAAS,EACnBsP,EAAUrP,UAAY,GAET,OAARoP,GACc,GAAAhhB,KAAI,QACZyQ,YAAcuQ,EACzBA,EAAIrP,QAAS,EACbqP,EAAIpP,SAAW,EACf,GAAA5R,KAAI,GAAmBe,MAAM4J,KAAKqV,EAAK/c,UAAU8C,QAAQib,GAAI,MAG7D,GAAAhhB,KAAI,IAAoB,EAAC,MAEhC,YAEUghB,GACP,MAAME,EAAc,GAAAlhB,KAAI,QAExB,OADAkhB,EAAYzQ,YAAcuQ,EACUE,EAAYpU,cACnD,YAESkU,GACN,MAAME,EAAc,GAAAlhB,KAAI,QAExB,OADAkhB,EAAYzQ,YAAcuQ,EACUE,EAAYnP,aACnD,YAEa8O,GACV,MAAMK,EAAc,GAAAlhB,KAAI,QAExB,OADAkhB,EAAYzQ,YAAcoQ,EACUK,EAAY9C,gBACnD,YAESyC,GACN,MAAMK,EAAc,GAAAlhB,KAAI,QAExB,OADAkhB,EAAYzQ,YAAcoQ,EACUK,EAAYjP,YACnD,YAEW4O,GACR,MAAMM,EAAa,GAAAnhB,KAAI,QAEvB,OADAmhB,EAAW1Q,YAAcoQ,EACUM,EAAW5c,cACjD,cAGG,MAAM4c,EAAa,GAAAnhB,KAAI,SACjB,KAACyB,GAAQ0f,EAEf,OADAA,EAAW1Q,YAAchP,EACU0f,EAAWrU,cACjD,cAGG,MAAMqU,EAAa,GAAAnhB,KAAI,SACjB,KAACyB,GAAQ0f,EAEf,OADAA,EAAW1Q,YAAchP,EACU0f,EAAWpP,aACjD,YAEYiP,GACT,MAAMG,EAAa,GAAAnhB,KAAI,QAEvB,OADAmhB,EAAW1Q,YAAcuQ,EACUG,EAAW/C,gBACjD,YAEQ4C,GACL,MAAMG,EAAa,GAAAnhB,KAAI,QAEvB,OADAmhB,EAAW1Q,YAAcuQ,EACUG,EAAWlP,YACjD,YAEQ4O,GACL,MAAME,EAAa,GAAA/gB,KAAI,WAAY,KAAhBA,KAAiB6gB,GACpC,GAAIE,EAAY,CACZ,MAAOtB,MAAO2B,GAAmBL,EAC3BM,EAAYtgB,MAAM4J,KAAKyW,EAAgBne,UAAU8C,QAAQ8a,GACzDS,EAAc,GAAAthB,KAAI,WAAa,KAAjBA,KAAkB+gB,GACtC,GAAIO,EAAa,CACb,MAAO7B,MAAO8B,GAAoBD,EAClC,OAAOC,EAAiBxe,KACpB4D,KAAK2Z,IAAIe,EAAWE,EAAiBze,UAIjD,OAAO,MACV,YAEW+d,GACR,MAAME,EAAa,GAAA/gB,KAAI,WAAY,KAAhBA,KAAiB6gB,GACpC,GAAIE,EAAY,CACZ,MAAOtB,MAAO2B,GAAmBL,EAC3BM,EAAYtgB,MAAM4J,KAAKyW,EAAgBne,UAAU8C,QAAQ8a,GACzDW,EAAU,GAAAxhB,KAAI,WAAS,KAAbA,KAAc+gB,GAC9B,GAAIS,EAAS,CACT,MAAO/B,MAAOgC,GAAgBD,EAC9B,OAAOC,EAAa1e,KAChB4D,KAAK2Z,IAAIe,EAAWI,EAAa3e,UAI7C,OAAO,MACV,YAEuBO,GACpB,MAAM,SAACqe,GAAY1hB,KACnB,OAAQ0hB,GACJ,IAAK,OAAQ,CACT,MAAM1C,EAAe3b,EAAM2b,eACrB2C,EAAa3C,EAAab,MAC5Bc,GAAYA,aAAoBY,KAChCb,EAAab,MACbc,GAAYA,aAAoBtE,KAChC,KACAgH,aAAsBhH,KACA3a,KAAKmgB,gBACR5Y,SAASoa,IACxB,GAAA3hB,KAAI,WAAmB,KAAvBA,KAAwB2hB,GAE5BA,EAAW3O,MAAM,CAACC,eAAe,IACjC5P,EAAMkP,kBAEV,MAEJ,IAAK,MAAO,CACR,MAAMyM,EAAe3b,EAAM2b,eACrB4C,EAAY5C,EAAab,MAC3Bc,GAAYA,aAAoBY,KAChCb,EAAab,MACbc,GAAYA,aAAoBW,KAChC,KACAgC,aAAqBhC,KACA5f,KAAKogB,eACR7Y,SAASqa,IACvB,GAAA5hB,KAAI,WAAkB,KAAtBA,KAAuB4hB,GAE3BA,EAAU5O,MAAM,CAACC,eAAe,KAEpC,OAGR5P,EAAMkP,kBACT,YAEiBlP,GACd,MAAM,QAAC0M,EAAO,SAAED,GAAYzM,GACtB,SAACqe,GAAY1hB,KACnB,OAAQ0hB,GACJ,IAAK,OAAQ,CACT,MAAM1C,EAAe3b,EAAM2b,eACrB2C,EAAa3C,EAAab,MAC5Bc,GAAYA,aAAoBY,KAChCb,EAAab,MACbc,GAAYA,aAAoBtE,KAChC,KACEwF,EAAgBngB,KAAKmgB,gBAC3B,GAAIwB,aAAsBhH,GACtB,GAAK7K,GAAaC,GAGb,GAAIA,EACJ4R,EAAWjR,SAER,GAAA1Q,KAAI,WAA0B,KAA9BA,KAA+B2hB,GAD/B,GAAA3hB,KAAI,WAAqB,KAAzBA,KAA0B2hB,GAE9Bte,EAAMgP,uBAEL,GAAIvC,EAAU,CACf,MAAM+R,EAAmB1B,EAAcA,EAAcrd,OAAS,GAC9D,GAAI+e,EAAkB,CAClB,MAAMtV,EAAQ,GAAAvM,KAAI,WAAe,KAAnBA,KACV6hB,EACAF,GAEApV,IACA4T,EAAc5Y,SAASoa,GACnB,GAAA3hB,KAAI,WAA0B,KAA9BA,QAAkCuM,GAClC,GAAAvM,KAAI,WAAqB,KAAzBA,QAA6BuM,SAIrC,GAAAvM,KAAI,WAAmB,KAAvBA,KAAwB2hB,GAE5Bte,EAAMgP,wBAxBN,GAAArS,KAAI,WAAmB,KAAvBA,KAAwB2hB,GA2BhC,MAEJ,IAAK,MAAO,CACR,MAAMvB,EAAepgB,KAAKogB,eACpBpB,EAAe3b,EAAM2b,eACrB4C,EAAY5C,EAAab,MAC3Bc,GAAYA,aAAoBY,KAChCb,EAAab,MACbc,GAAYA,aAAoBW,KAChC,KACJ,GAAIgC,aAAqBhC,GACrB,GAAK9P,GAAaC,GAGb,GAAIA,EACJ6R,EAAUlR,SAEP,GAAA1Q,KAAI,WAAyB,KAA7BA,KAA8B4hB,GAD9B,GAAA5hB,KAAI,WAAoB,KAAxBA,KAAyB4hB,GAE7Bve,EAAMgP,uBAEL,GAAIvC,EAAU,CACf,MAAMgS,EAAkB1B,EAAaA,EAAatd,OAAS,GAC3D,GAAIgf,EAAiB,CACjB,MAAMvV,EAAQ,GAAAvM,KAAI,WAAc,KAAlBA,KACV8hB,EACAF,GAEArV,IACA6T,EAAa7Y,SAASqa,GAClB,GAAA5hB,KAAI,WAAyB,KAA7BA,QAAiCuM,GACjC,GAAAvM,KAAI,WAAoB,KAAxBA,QAA4BuM,SAIpC,GAAAvM,KAAI,WAAkB,KAAtBA,KAAuB4hB,GAE3Bve,EAAMgP,wBAxBN,GAAArS,KAAI,WAAkB,KAAtBA,KAAuB4hB,GA2B/B,SAGX,YAEmBve,GAChB,MAAM,IAAC3F,GAAO2F,GACR,SAACqe,EAAQ,WAAEZ,EAAU,UAAEG,GAAajhB,KAC1C,OAAQtC,GACJ,IAAK,IAAK,CACN,MAAM,QAACqS,GAAW1M,EAClB,GAAI0M,EACA,OAAQ2R,GACJ,IAAK,OAAQ,CACT,MAAMK,EAAW,GAAA/hB,KAAI,WAAU,KAAdA,MACXgiB,EAAYD,EAAW,GAAA/hB,KAAI,WAAW,KAAfA,KAAgB+hB,GAAY,KACnDE,EAAU,GAAAjiB,KAAI,WAAS,KAAbA,MACVkiB,EAAWD,EAAU,GAAAjiB,KAAI,WAAU,KAAdA,KAAeiiB,GAAW,KACrD,GAAID,GAAaE,EAAU,CACvB,MAAM3V,EAAQ,GAAAvM,KAAI,WAAe,KAAnBA,KAAoBgiB,EAAWE,GACzC3V,GACA,GAAAvM,KAAI,WAAmB,KAAvBA,QAA2BuM,GAGnC,MAEJ,IAAK,MAAO,CACR,MAAMwV,EAAW,GAAA/hB,KAAI,WAAU,KAAdA,MACXiiB,EAAU,GAAAjiB,KAAI,WAAS,KAAbA,MAChB,GAAI+hB,GAAYE,EAAS,CACrB,MAAM1V,EAAQ,GAAAvM,KAAI,WAAc,KAAlBA,KAAmB+hB,EAAUE,GACvC1V,GACA,GAAAvM,KAAI,WAAkB,KAAtBA,QAA0BuM,GAGlC,OAIZlJ,EAAMkP,iBACN,MAEJ,IAAK,YACD,GAAgB,QAAZmP,GACIZ,EAAY,CACZ,MAAMqB,EAAe,GAAAniB,KAAI,WAAc,KAAlBA,KAAmB8gB,GACxC,GAAIqB,EAAc,CACdA,EAAanP,MAAM,CAACC,eAAe,IACnC,MAAM,SAACnD,GAAYzM,EACfyM,IACAqS,EAAazR,SACT,GAAA1Q,KAAI,WAA0B,KAA9BA,KAA+BmiB,GAC/B,GAAAniB,KAAI,WAAqB,KAAzBA,KAA0BmiB,KAK9C9e,EAAMgP,kBACN,MAEJ,IAAK,aACD,GAAgB,QAAZqP,GACIZ,EAAY,CACZ,MAAMsB,EAAW,GAAApiB,KAAI,WAAU,KAAdA,KAAe8gB,GAChC,GAAIsB,EAAU,CACVA,EAASpP,MAAM,CAACC,eAAe,IAC/B,MAAM,SAACnD,GAAYzM,EACfyM,IACAsS,EAAS1R,SACL,GAAA1Q,KAAI,WAA0B,KAA9BA,KAA+BoiB,GAC/B,GAAApiB,KAAI,WAAqB,KAAzBA,KAA0BoiB,KAK9C/e,EAAMgP,kBACN,MAEJ,IAAK,UACD,OAAQqP,GACJ,IAAK,OAAQ,CACT,MAAMK,EAAWd,GAAa,GAAAjhB,KAAI,WAAU,KAAdA,MACxBqiB,EAAUvB,EACZ,GAAA9gB,KAAI,WAAS,KAAbA,KAAc8gB,GACdiB,EACA,GAAA/hB,KAAI,WAAW,KAAfA,KAAgB+hB,GAChB,KACJ,GAAIM,EAAS,CACTA,EAAQrP,MAAM,CAACC,eAAe,IAC9B,MAAM,SAACnD,GAAYzM,EACfyM,IACAuS,EAAQ3R,SACJ,GAAA1Q,KAAI,WAA0B,KAA9BA,KAA+BqiB,GAC/B,GAAAriB,KAAI,WAAqB,KAAzBA,KAA0BqiB,IAGtC,MAEJ,IAAK,MAAO,CACR,MAAMf,EAAcL,EAChB,GAAAjhB,KAAI,WAAa,KAAjBA,KAAkBihB,GAClB,GAAAjhB,KAAI,WAAU,KAAdA,MACJ,GAAIshB,EAAa,CACbA,EAAYtO,MAAM,CAACC,eAAe,IAClC,MAAM,SAACnD,GAAYzM,EACfyM,IACAwR,EAAY5Q,SACR,GAAA1Q,KAAI,WAAyB,KAA7BA,KAA8BshB,GAC9B,GAAAthB,KAAI,WAAoB,KAAxBA,KAAyBshB,IAGrC,OAGRje,EAAMgP,kBACN,MAEJ,IAAK,YACD,OAAQqP,GACJ,IAAK,OAAQ,CACT,MAAMO,EAAUhB,GAAa,GAAAjhB,KAAI,WAAS,KAAbA,MACvBsiB,EAAaxB,EACf,GAAA9gB,KAAI,WAAY,KAAhBA,KAAiB8gB,GACjBmB,EACA,GAAAjiB,KAAI,WAAU,KAAdA,KAAeiiB,GACf,KACA,GAAIK,EAAY,CACZA,EAAWtP,MAAM,CAACC,eAAe,IACjC,MAAM,SAACnD,GAAYzM,EACfyM,IACAwS,EAAW5R,SACP,GAAA1Q,KAAI,WAA0B,KAA9BA,KAA+BsiB,GAC/B,GAAAtiB,KAAI,WAAqB,KAAzBA,KAA0BsiB,KAI1C,MACJ,IAAK,MAAO,CACR,MAAMd,EAAUP,EACZ,GAAAjhB,KAAI,WAAS,KAAbA,KAAcihB,GACd,GAAAjhB,KAAI,WAAS,KAAbA,MACJ,GAAIwhB,EAAS,CACTA,EAAQxO,MAAM,CAACC,eAAe,IAC9B,MAAM,SAACnD,GAAYzM,EACfyM,IACA0R,EAAQ9Q,SACJ,GAAA1Q,KAAI,WAAyB,KAA7BA,KAA8BwhB,GAC9B,GAAAxhB,KAAI,WAAoB,KAAxBA,KAAyBwhB,IAGrC,OAGRne,EAAMgP,kBACN,MAEJ,IAAK,OACD,OAAQqP,GACJ,IAAK,OACD,GAAIT,EAAW,CACX,MAAMe,EAAY,GAAAhiB,KAAI,WAAW,KAAfA,KAAgBihB,GAC9Be,GACAA,EAAUhP,MAAM,CAACC,eAAe,IAGxC,MAEJ,IAAK,MAAO,CACR,MAAM8O,EAAW,GAAA/hB,KAAI,WAAU,KAAdA,MACb+hB,GACAA,EAAS/O,MAAM,CAACC,eAAe,IAEnC,OAGR5P,EAAMgP,kBACN,MAEJ,IAAK,MACD,OAAQqP,GACJ,IAAK,OACD,GAAIT,EAAW,CACX,MAAMiB,EAAW,GAAAliB,KAAI,WAAU,KAAdA,KAAeihB,GAC5BiB,GACAA,EAASlP,MAAM,CAACC,eAAe,IAGvC,MAEJ,IAAK,MAAO,CACR,MAAMgP,EAAU,GAAAjiB,KAAI,WAAS,KAAbA,MACZiiB,GACAA,EAAQjP,MAAM,CAACC,eAAe,IAElC,OAGR5P,EAAMgP,kBACN,MAEJ,IAAK,QACD,OAAQqP,GACJ,IAAK,OACGZ,IACA,GAAA9gB,KAAI,WAAmB,KAAvBA,KAAwB8gB,GACxBA,EAAW1N,SAEf,MAEJ,IAAK,MACG6N,IACA,GAAAjhB,KAAI,WAAkB,KAAtBA,KAAuBihB,GACvBA,EAAU7N,SAKtB/P,EAAMgP,kBACN,MAEJ,IAAK,SACD,OAAQqP,GACJ,IAAK,OACD,GAAA1hB,KAAI,WAAqB,KAAzBA,MACA,GAAAA,KAAI,WAAe,KAAnBA,KAAoB,MACpB,MAEJ,IAAK,MACD,GAAAA,KAAI,WAAoB,KAAxBA,MACA,GAAAA,KAAI,WAAc,KAAlBA,KAAmB,MAI3BA,KAAKgT,QACL3P,EAAMgP,oBAIjB,YAEiBhP,GACd,MAAM,cAACmP,GAAiBnP,GAClB,SAACqe,GAAY1hB,KACnB,OAAQ0hB,GACJ,IAAK,OAAQ,CACT,MAAM,WAACZ,GAAc9gB,KACjB8gB,GAActO,IAAkBsO,GAChCA,EAAW9N,QAEf,MAEJ,IAAK,MAAO,CACR,MAAM,UAACiO,GAAajhB,KAChBihB,GAAazO,IAAkByO,GAC/BA,EAAUjO,QAEd,SAGX,YAEmB3P,GAChB,MAAM,OAACtE,GAAUsE,GACX,SAACqe,GAAY1hB,KACnB,OAAQ0hB,GACJ,IAAK,OACG3iB,aAAkB4b,IAClB,GAAA3a,KAAI,WAAe,KAAnBA,KAAoBjB,GAExB,MAEJ,IAAK,MACGA,aAAkB6gB,IAClB,GAAA5f,KAAI,WAAc,KAAlBA,KAAmBjB,KAKlC,cAGO,GAAAiB,KAAI,QACJ,GAAAA,KAAI,IAAwB,EAAI,KAGhCA,KAAKoE,cAAc,IAAIiL,MAAM,kBAAmB,CAACC,SAAS,MAEjE,YAEsBjM,GACnB,MAAM,OAACtE,GAAUsE,EAC6CtE,EACzD2P,mBACArH,QACGsH,GAAaA,aAAqBiR,KAEzB/gB,SAAQ,CAAC+hB,EAAOza,KACzBya,EAAM/R,SAAW1I,OAp0BzB,GAAiB,EAAQ,aACVqI,QAAQ/H,OACnB,EAAQ,SAiChB,IADCyB,EAAkB,CAAClJ,KAAMiK,U,4BAI1B,IADCf,EAAkB,CAAClJ,KAAMiK,OAAQb,aAAc,U,gCAxC9C6X,GAAoB,IAHzB/W,EAAc,CACXE,KAAM,YAEJ6W,IA40BN,I,MCl2BI,GAKJ,IAAMsC,GAAN,cAAuCtjB,YAsBnCc,cACIsE,Q,aACArE,KAAKyf,MAAQ,IAAIC,GAAwB1f,MACzCA,KAAKggB,KAAO,IAAIF,GAAuB9f,MACvC,MAAMqO,EAAarO,KAAKsO,aAAa,CAACC,KAAM,SAC5CF,EAAW5H,OACP,GAAe+H,QAAQC,WAAU,IAErCJ,EAAWxK,iBAAiB,a,uSAAc,CAAA7D,KAAI,WAAwB2H,KAAK3H,S,2BAGxDqD,GACnB,MAAM,OAACtE,GAAUsE,EAC+CtE,EAC3D2P,mBACArH,QACGsH,GAAaA,aAAqBgM,KAE5B9b,SAAQ,CAACgH,EAAQM,KAC3BN,EAAOgJ,SAAW1I,OAlCtB,GAAiB,EAAQ,aACVqI,QAAQ/H,OACnB,EAAQ,QAAS,CACb0D,SAAU,CACC,+IAOf,EAAQ,SAlBdoY,G,mUAAwB,EAH7BrZ,EAAc,CACXE,KAAM,gBAEJmZ,IA8CN,I,sDC9CI,G,69BAKJ,IAAMC,GAAN,cAAsCvjB,YAqBlCc,cACIsE,Q,aAXJ,oBACA,oBAWI,GAAArE,KAAI,GAAW+J,SAASoG,iBACpBnQ,KAAMoQ,WAAWC,aAAc,GAAArQ,KAAI,WAAmB2H,KAAK3H,OAC9D,KAEDA,KAAK4C,MAAQ5C,KAAKsQ,qBAAqB,cACvC,GAAAtQ,KAAI,IAAiB,EAAC,KACHA,KAAKsO,aAAa,CAACC,KAAM,SACjC9H,OACP,GAAe+H,QAAQC,WAAU,IAErCzO,KAAK6D,iBAAiB,QAAS,GAAA7D,KAAI,WAAmB2H,KAAK3H,OAC3DA,KAAK6D,iBAAiB,UAAW,GAAA7D,KAAI,WAAqB2H,KAAK3H,OAC/DA,KAAK6D,iBAAiB,WAAY,GAAA7D,KAAI,WAAsB2H,KAAK3H,OACjEA,KAAK6D,iBAAiB,YAAa,GAAA7D,KAAI,WAAuB2H,KAAK3H,OACnEA,KAAK6D,iBAAiB,UAAW,GAAA7D,KAAI,WAAqB2H,KAAK3H,OAInE,kBACI,OAAO,GAAAA,KAAI,QAGf,iBACI,OAAOA,KAAK4C,MAAMG,KAAK,GAAA/C,KAAI,UAAkB,O,yDAG/BmF,GACd,OAAIA,aAAgBgY,GACT/M,WAAWS,cAElB1L,aAAgByY,GACTxN,WAAWU,YAEfV,WAAWW,eACrB,cAGG,MAAMP,EAAS,GAAAxQ,KAAI,QAEnB,OADAwQ,EAAOC,YAAcD,EAAO/O,KACQ+O,EAAO1D,cAC9C,cAGG,MAAM0D,EAAS,GAAAxQ,KAAI,QAEnB,OADAwQ,EAAOC,YAAcD,EAAO/O,KACQ+O,EAAOuB,aAC9C,YAEahP,GACV,MAAMyN,EAAS,GAAAxQ,KAAI,QAEnB,OADAwQ,EAAOC,YAAc1N,EACeyN,EAAOwB,mBAC9C,YAESjP,GACN,MAAMyN,EAAS,GAAAxQ,KAAI,QAEnB,OADAwQ,EAAOC,YAAc1N,EACeyN,EAAO0B,eAC9C,YAEenP,GACZ,MAAM,KAAC6W,GAAQ7W,EACf,GAAI6W,EAAM,CACN,MAAMpJ,EAAS,GAAAxQ,KAAI,QAEnB,OADAwQ,EAAOC,YAAcmJ,EACepJ,EAAO1D,aAE/C,OAAO,MACV,YAEc/J,GACX,MAAM,WAAC2O,EAAU,SAAE7B,EAAQ,MAAEjN,GAAS5C,KACnB,OAAf0R,GAAuBA,IAAe3O,IACtC2O,EAAWsJ,WACXtJ,EAAWC,QAAS,GAEX,OAAT5O,GACI8M,GACA9M,EAAKgY,SAEThY,EAAK4O,QAAS,EACd,GAAA3R,KAAI,GAAgBe,MAAM4J,KAAK/H,GAAOmD,QAAQhD,GAAK,MAGnD,GAAA/C,KAAI,IAAiB,EAAC,MAE7B,cAGG,OAAOe,MAAM4J,KACT3K,KAAKke,iBAAiB,wDAE7B,YAEcnf,GACX,OAAOA,EAAOmQ,QAAQ,2BAA6BlP,MACtD,YAEYjB,GACT,OAAO,GAAAiB,KAAI,WAAQme,MAAKtY,GAAUA,EAAO4L,SAAS1S,MAAY,MACjE,YAEmBsE,GAChB,MAAM,OAACtE,GAAUsE,EACjB,GAAItE,aAAkB0jB,QAAS,CAC3B,MAAMpE,EAAc,GAAAre,KAAI,WAAa,KAAjBA,KAAkBjB,GACtC,GAAAiB,KAAI,WAAe,KAAnBA,KAAoBqe,KAE3B,YAEoBhb,GACjB,MAAM,cAACmP,GAAiBnP,EAExB,IADyBrD,KAAKyR,SAAee,GACxB,CACjB,MAAM,WAACd,GAAc1R,KACjB0R,GAAY7B,UACZ6B,EAAWsJ,WAEf,GAAAhb,KAAI,WAAe,KAAnBA,KAAoB,MACpBA,KAAK6P,UAAW,IAEvB,YAEqBxM,GAClB,MAAM,OAACtE,GAAUsE,GACX,SAACwM,EAAQ,WAAE6B,GAAc1R,KAC/B,GAAIjB,aAAkBoe,IACI,GAAAnd,KAAI,WAAe,KAAnBA,KAAoBjB,IACrBA,IAAW2S,GAAc7B,EAAU,CACpD,MAAM,KAAC+J,GAAQ7a,EACX6a,IACA7a,EAAOgc,SACPnB,EAAK5G,MAAM,CAACC,eAAe,OAI1C,YAEiB5P,GACd,MAAM,OAACtE,GAAUsE,GACX,SAACwM,EAAQ,WAAE6B,GAAc1R,KAC/B,GAAIjB,aAAkBoe,IACI,GAAAnd,KAAI,WAAe,KAAnBA,KAAoBjB,GACvB,CACf,MAAM2jB,GAAc7S,EAEpB,GADA7P,KAAK6P,SAAW6S,EACZA,EAAY,CACRhR,IAAeA,EAAW7B,UAC1B6B,EAAWqJ,SAEf,MAAM,KAACnB,GAAQ7a,EACf6a,GAAM5G,MAAM,CAACC,eAAe,SAG5BjT,KAAKgT,MAAM,CAACC,eAAe,MAI1C,YAEmB5P,GAChB,MAAM,IAAC3F,GAAO2F,GACR,SAACwM,GAAY7P,KACnB,IAAI,WAAC0R,GAAc1R,KACnB,OAAQtC,GACJ,IAAK,aACoBgU,EACjB,GAAA1R,KAAI,WAAc,KAAlBA,KAAmB0R,IAAe,GAAA1R,KAAI,WAAU,KAAdA,MAClC,GAAAA,KAAI,WAAW,KAAfA,QACUgT,MAAM,CAACC,eAAe,MAClCvB,WAAAA,GAAc1R,MACZ6P,GAAY6B,GACW,GAAA1R,KAAI,WAAgB,KAApBA,KAAqB0R,IAC5BsB,MAAM,CAACC,eAAe,IAE1C,MAEJ,IAAK,cACgBvB,EACb,GAAA1R,KAAI,WAAU,KAAdA,KAAe0R,IAAe,GAAA1R,KAAI,WAAW,KAAfA,MAC9B,GAAAA,KAAI,WAAU,KAAdA,QACMgT,MAAM,CAACC,eAAe,MAC9BvB,WAAAA,GAAc1R,MACZ6P,GAAY6B,GACW,GAAA1R,KAAI,WAAgB,KAApBA,KAAqB0R,IAC5BsB,MAAM,CAACC,eAAe,IAE1C,MAEJ,IAAK,QACGvB,IACA1R,KAAK6P,UAAYA,EACM,GAAA7P,KAAI,WAAgB,KAApBA,KAAqB0R,IAC5BsB,MAAM,CAACC,eAAe,KAE1C,MAEJ,IAAK,SACGpD,GACA7P,KAAK6P,UAAW,EACZ6B,IACAA,EAAWsJ,WACXtJ,EAAWsB,MAAM,CAACC,eAAe,MAIrCjT,KAAKgT,MAAM,CAACC,eAAe,OAtNvC,GAAiB,EAAQ,aACVzE,QAAQ/H,OACnB,EAAQ,SAdhB,IADCyB,EAAkB,CAAClJ,KAAMiK,U,4BAI1B,IADCf,EAAkB,CAAClJ,KAAMuJ,W,gCALxBia,GAAuB,IAH5BtZ,EAAc,CACXE,KAAM,eAEJoZ,IAsPN,I,q/BC/PA,IAAMG,GAAN,cAAyC1jB,YAmBrCc,cACIsE,Q,aAHJ,oBAII,GAAArE,KAAI,GAAS,KAAI,KACjB,MAAMqO,EAAarO,KAAKsO,aAAa,CAACC,KAAM,SAC5CF,EAAW5H,OACP,EAAQ,OAAQ,CACZpF,WAAY,CACR4O,KAAM,WAEV9F,SAAU,CACN,EAAQ,OAAQ,CACZ9I,WAAY,CACR4O,KAAM,UAGd,EAAQ,OAAQ,CACZ5O,WAAY,CACR4O,KAAM,cAKtB,EAAQ,OAAQ,CACZ5O,WAAY,CACR+H,KAAM,WAIlBpJ,KAAK6D,iBAAiB,UAAW,GAAA7D,KAAI,WAAqB2H,KAAK3H,OAC/DA,KAAK6D,iBAAiB,QAAS,GAAA7D,KAAI,WAAmB2H,KAAK3H,OAC3DA,KAAK6D,iBAAiB,WAAY,GAAA7D,KAAI,WAAsB2H,KAAK3H,OACjEA,KAAK6D,iBAAiB,UAAW,GAAA7D,KAAI,WAAqB2H,KAAK3H,OAC/DqO,EAAWxK,iBAAiB,aAAc,GAAA7D,KAAI,WAAwB2H,KAAK3H,OA/C/E,WACI,OAAO,GAAAA,KAAI,QAiDf2P,OAAOC,GACYA,IAAU5P,KAAK6P,SACrB7P,KAAK+a,SAAW/a,KAAKgb,WAGlCD,SACS/a,KAAK6P,WACN7P,KAAK6P,UAAW,EAChB,GAAA7P,KAAI,WAAc,KAAlBA,OAIRgb,WACQhb,KAAK6P,WACL7P,KAAK6P,UAAW,K,4CAKpB,MAAM,KAAC+J,GAAQ5Z,KACf,GAAa,OAAT4Z,EAAe,CACf,MAAOlK,MAAOuL,GAAarB,GACpBsB,IAAKC,EAASC,OAAQC,EAAYC,KAAMC,EAAUC,MAAOC,GAAazb,KAAK0b,yBAC3EC,MAAOC,EAAWC,OAAQC,GAAclC,EAAK8B,yBAC9C,QAACK,EAAO,QAAEC,GAAWC,QACrB,YAACC,EAAW,aAAEC,GAAgBpS,SAASgQ,KACvCqC,EAAYX,EAAYG,EAAYM,EACpCG,EAAYlB,EAAUW,EAAaK,EACzClB,EAAUxV,YAAY,OAAQ,GAC1B2W,EAAY,EACZJ,EAAUP,EAAYG,EACtBI,EAAUT,OAEdN,EAAUxV,YAAY,MAAO,GACzB4W,EAAY,EACZN,EAAUZ,EAAUW,EACpBC,EAAUV,SAGrB,YAEiBhY,GACd,MAAM,OAACtE,GAAUsE,EACjB,GAAItE,GAAUiB,KAAM,CAChBA,KAAK2P,SACL,MAAM,SAACE,GAAY7P,KACf6P,GACA7P,KAAK4Z,MAAM5G,MAAM,CAACC,eAAe,MAG5C,YAEoB5P,GACjB,MAAM,cAACmP,GAAiBnP,GACCrD,KAAKyR,SAAee,IAEzCxS,KAAKgb,YAEZ,YAEmB3X,GAChB,MAAM,IAAC3F,GAAO2F,GACR,SAACwM,GAAY7P,KACnB,OAAQtC,GACJ,IAAK,YACL,IAAK,QACImS,IACD7P,KAAK+a,SACL/a,KAAK4Z,MAAMhX,MAAMG,KAAK,IAAIiQ,MAAM,CAACC,eAAe,IAChD5P,EAAMgP,mBAEV,MACJ,IAAK,SACGxC,IACA7P,KAAKgb,WACLhb,KAAKgT,MAAM,CAACC,eAAe,IAC3B5P,EAAMgP,qBAIrB,YAEsBhP,GACnB,MAAM,OAACtE,GAAUsE,EACX/C,EAA4BvB,EAAQ2P,mBAAmB,GAC7D,GAAA1O,KAAI,GAAUM,aAAmB4e,GAAoB5e,EAAU,KAAI,MACtE,cAGGN,KAAKgb,WACLhb,KAAKgT,MAAM,CAACC,eAAe,KAvI/B,IADC/K,EAAkB,CAAClJ,KAAMiK,U,4BAI1B,IADCf,EAAkB,CAAClJ,KAAMuJ,W,gCAI1B,IADCL,EAAkB,CAAClJ,KAAMuJ,W,gCAdxBoa,GAA0B,IAH/BzZ,EAAc,CACXE,KAAM,kBAEJuZ,IAoJN,ICjJI,GDiJAC,GAA4DD,GAS5DE,GAAsCjlB,OAAOyf,QACnC,SAASxb,GAGf,MAAM,KAAC+X,GAAQ/X,EAEf,OADA+X,EAAKhZ,KAAO,OACL,EAAQ,eAAgB,CAC3BS,WAAY,CACRsV,UAAW,GAEfxM,SAAU,CAACyP,OAEhB,CACC1b,UAAW0kB,GAAuB1kB,Y,uUClK1C,IAAM4kB,GAAN,cAAqC7jB,YAoGjCc,cACIsE,QACmBrE,KAAKsO,aAAa,CAACC,KAAM,SACjC9H,OACP,GAAe+H,QAAQC,WAAU,IAIzC7O,yBAAyBwJ,EAAczJ,EAAyBqC,GAC5D,OAAQoH,GACJ,IAAK,QAAS,CACV,MAAM,WAACiF,GAAcrO,KACfuP,EAAYlB,EAAWmB,cAA2B,gBACpDD,IACAA,EAAUE,YAAczN,GAE5B,WAvFR,GAAiB,EAAQ,aACVwM,QAAQ/H,OACnB,EAAQ,QAAS,CACb0D,SAAU,CACC,u3DAoDf,EAAQ,OAAQ,CACZ9I,WAAY,CACR4O,KAAM,WAEV9F,SAAU,CACN,EAAQ,OAAQ,CACZ9I,WAAY,CACR4O,KAAM,eAvF9B,IADC/H,EAAkB,CAAClJ,KAAMiK,U,4BAI1B,IADCf,EAAkB,CAAClJ,KAAMiK,U,6BAI1B,IADCf,EAAkB,CAAClJ,KAAMiK,OAAQZ,UAAU,K,6BAI5C,IADCH,EAAkB,CAAClJ,KAAMiK,U,mCAI1B,IADCf,EAAkB,CAAClJ,KAAMuJ,W,gCAI1B,IADCL,EAAkB,CAAClJ,KAAMuJ,W,8BAI1B,IADCL,EAAkB,CAAClJ,KAAMuJ,W,gCAI1B,IADCL,EAAkB,CAAClJ,KAAMuJ,W,+BAzBxBua,GAAsB,IAH3B5Z,EAAc,CACXE,KAAM,cAEJ0Z,IA0HN,ICxII,GDwIAC,GAAoDD,GCnIxD,IAAME,GAAN,cAA0C/jB,YAoBtCc,cACIsE,QACmBrE,KAAKsO,aAAa,CAACC,KAAM,SACjC9H,OACP,GAAe+H,QAAQC,WAAU,OAnBrC,GAAiB,EAAQ,aACVD,QAAQ/H,OACnB,EAAQ,QAAS,CACb0D,SAAU,CACC,qIAOf,EAAQ,SAhBd6Y,G,mUAA2B,EAHhC9Z,EAAc,CACXE,KAAM,mBAEJ4Z,IA6BN,I,SAAIC,GAA8DD,G,qVCLlD7d,GACR,OAAIA,aAAgB4d,GACT3S,WAAWS,cAElB1L,aAAgB8d,GACT7S,WAAWU,YAEfV,WAAWW,eA2C1B,I,yDC9DI,G,69BAKJ,IAAMmS,GAAN,cAAqCzI,GAiFjC1a,cACIsE,Q,aA9CJ,oBACA,oBACA,oBA6CI,GAAArE,KAAI,GAAW+J,SAASoG,iBACpBnQ,KAAMoQ,WAAWC,aAAc,GAAArQ,KAAI,WAAmB2H,KAAK3H,OAC9D,KACD,GAAAA,KAAI,IAAiB,EAAC,KACtB,GAAAA,KAAI,IAAmB,EAAC,KACxBA,KAAKiH,QAAU,ID/GvB,MAwBIlH,YAAY0B,G,aAvBZ,oB,+VAwBI,CAAAzB,KAAI,GAAW+J,SAASoG,iBACpB1O,EAAM2O,WAAWC,aAAc,GAAArQ,KAAI,WAAa2H,KAAK3H,OACxD,KAxBL,aACI,MAAMwQ,EAAS,GAAAxQ,KAAI,QACnBwQ,EAAOC,YAAcD,EAAO/O,KAC5B,IAAIqB,EAAS,EACb,KAA6B,OAAtB0N,EAAOyB,YAAqBnP,IACnC,OAAOA,EAGX,YACI,MAAM0N,EAAS,GAAAxQ,KAAI,QACnBwQ,EAAOC,YAAcD,EAAO/O,KAC5B,IAAIgP,EAAyCD,EAAOyB,WACpD,KAAuB,OAAhBxB,GAAsB,CACzB,GAAIA,EAAYC,SACZ,OAAOD,EAAYlS,MAEvBkS,EAAyCD,EAAOyB,WAEpD,MAAO,GAmBXlP,KAAKC,GACD,GAAIA,EAAQ,EACR,OAAO,KAEX,MAAMwN,EAAS,GAAAxQ,KAAI,QACnBwQ,EAAOC,YAAcD,EAAO/O,KAC5B,IAAIgP,EAAcD,EAAOyB,WACrB9L,EAAI,EACR,KAAOA,EAAInD,GAAyB,OAAhByN,GAChBA,EAAcD,EAAOyB,WACrB9L,IAEJ,OAAkCsK,EAGtCkH,UAAUvO,GACN,IAAKA,EACD,OAAO,KAEX,MAAMoH,EAAS,GAAAxQ,KAAI,SACb,KAACyB,GAAQ+O,EACfA,EAAOC,YAAchP,EACrB,IAAIgP,EAAyCD,EAAOyB,WACpD,KAAuB,OAAhBxB,GAA0BA,EAAYrH,MAAQA,GACjDqH,EAAyCD,EAAOyB,WAEpD,OAAkCxB,EAGtC,UACI,MAAMD,EAAS,GAAAxQ,KAAI,QACnBwQ,EAAOC,YAAcD,EAAO/O,KAC5B,IAAIgP,EAAcD,EAAOyB,WACzB,KAAuB,OAAhBxB,SACuBA,EAC1BA,EAAcD,EAAOyB,aCoCgBjS,MACzC,MAAMqO,EAAarO,KAAKsO,aAAa,CAACC,KAAM,SAC5CF,EAAW5H,OACP,GAAe+H,QAAQC,WAAU,IAErCzO,KAAK6D,iBAAiB,QAAS,GAAA7D,KAAI,WAAmB2H,KAAK3H,OAC3DA,KAAK6D,iBAAiB,UAAW,GAAA7D,KAAI,WAAqB2H,KAAK3H,OAC/DA,KAAK6D,iBAAiB,WAAY,GAAA7D,KAAI,WAAsB2H,KAAK3H,OACjEA,KAAK6D,iBAAiB,UAAW,GAAA7D,KAAI,WAAqB2H,KAAK3H,OAC/DA,KAAK6D,iBAAiB,YAAa,GAAA7D,KAAI,WAAuB2H,KAAK3H,OACnEqO,EAAWxK,iBAAiB,aAAc,GAAA7D,KAAI,WAAwB2H,KAAK3H,OA7F/E,kBACI,OAAO,GAAAA,KAAI,QAGf,oBACI,OAAO,GAAAA,KAAI,QAGf,mBACI,OAAOA,KAAKiH,QAAQlE,KAAK,GAAA/C,KAAI,UAAkB,KAGnD,qBACI,OAAOA,KAAKiH,QAAQlE,KAAK,GAAA/C,KAAI,UAAoB,KAmFrDJ,yBAAyBwJ,EAAczJ,EAAyBqC,GAC5D,OAAQoH,GACJ,IAAK,QAAS,CACV,MAAM,WAACiF,GAAcrO,KACfuP,EAAYlB,EAAWmB,cAAc,gBACvCD,IACAA,EAAUE,YAAczN,GAE5B,MAEJ,IAAK,QAAS,CACV,MAAM,QAACiF,GAAWjH,KACZmjB,EAAiBpiB,MAAM4J,KAAK1D,EAAQhE,UAAUkb,MAAKiF,GAAUA,EAAO7kB,OAASyD,IAC/EmhB,IACA,GAAAnjB,KAAI,WAAmB,KAAvBA,KAAwBmjB,GACxBnjB,KAAKoE,cAAc,IAAIiL,MAAM,SAAU,CAACC,SAAS,MAErD,QAKZyL,SACI,MAAM,SAAClL,EAAQ,QAAE5I,GAAWjH,KAC5B,IAAK6P,EAAU,CACX7P,KAAK6P,UAAW,EAChB,MAAM,cAACwT,GAAiBrjB,KACxB,GAAAA,KAAI,WAAiB,KAArBA,MACA,MAAMojB,EAASnc,EAAQlE,KAAKsgB,GACxBD,GACAA,EAAOpQ,MAAM,CAACC,eAAe,KAKzC+H,WACI,MAAM,SAACnL,GAAY7P,KACf6P,IACA7P,KAAK6P,UAAW,EAChB7P,KAAKgT,SAIbrD,OAAOC,GACH,MAAM,SAACC,GAAY7P,KACJ4P,IAAUC,EAChB7P,KAAK+a,SAAW/a,KAAKgb,a,wEAGhB7V,GACd,OAAIA,aAAgB4d,GACT3S,WAAWS,cAElB1L,aAAgB8d,GACT7S,WAAWU,YAEfV,WAAWW,eACrB,cAGG,MAAMP,EAAS,GAAAxQ,KAAI,QAEnB,OADAwQ,EAAOC,YAAcD,EAAO/O,KACM+O,EAAO1D,cAC5C,cAGG,MAAM0D,EAAS,GAAAxQ,KAAI,QAEnB,OADAwQ,EAAOC,YAAcD,EAAO/O,KACM+O,EAAOuB,aAC5C,YAEehP,GACZ,MAAMyN,EAAS,GAAAxQ,KAAI,QAEnB,OADAwQ,EAAOC,YAAc1N,EACayN,EAAO4N,gBAC5C,YAEWrb,GACR,MAAMyN,EAAS,GAAAxQ,KAAI,QAEnB,OADAwQ,EAAOC,YAAc1N,EACayN,EAAOyB,YAC5C,YAEamR,GACNA,IAAWA,EAAOjJ,WAClBna,KAAKzB,MAAQ6kB,EAAO7kB,QAE3B,YAEgB6kB,GACb,MAAM,QAACnc,EAAO,aAAEqc,GAAgBtjB,KAIhC,GAHqB,OAAjBsjB,GAAyBA,IAAiBF,IAC1CE,EAAa3R,QAAS,GAEX,OAAXyR,EAAiB,CACjB,IAAKA,EAAOjJ,SAAU,CAClB,MAAM,WAAC9L,GAAcrO,KACfujB,EAAkBlV,EAAWmB,cAAc,wBAC7C+T,IACAA,EAAgB9T,YAAc2T,EAAOI,aAEzC,GAAAxjB,KAAI,GAAgBe,MAAM4J,KAAK1D,EAAQhE,UAAU8C,QAAQqd,GAAO,KAEpEA,EAAOzR,QAAS,OAGhB,GAAA3R,KAAI,IAAiB,EAAC,MAE7B,YAEkBojB,GACf,MAAM,QAACnc,GAAWjH,KAClB,GAAe,OAAXojB,GACA,IAAKA,EAAOjJ,SAAU,CAClB,MAAM,WAAC9L,EAAU,eAAEoV,GAAkBzjB,KAC/B0jB,EAAYrV,EAAWmB,cAAc,kBACvCkU,IACAA,EAAUjU,YAAc2T,EAAO/O,OAEnC+O,EAAO1S,UAAW,EACd+S,IACAA,EAAe/S,UAAW,GAE9B,GAAA1Q,KAAI,GAAkBe,MAAM4J,KAAK1D,EAAQhE,UAAU8C,QAAQqd,GAAO,WAItE,GAAApjB,KAAI,IAAiB,EAAC,MAE7B,cAGG,MAAM,WAACqO,GAAcrO,KACfiH,EAAUoH,EAAWmB,cAA2B,mBAC/CE,MAAOiU,GAAgB1c,GACvBmU,OAAQwI,EAActI,KAAMuI,GAAc7jB,KAAK0b,yBAChD,QAACM,EAAO,QAAED,GAAWE,OAC3B0H,EAAale,YAAY,MAAO,GAAGme,EAAe7H,OAClD4H,EAAale,YAAY,OAAQ,GAAGoe,EAAa7H,QACpD,YAEiB3Y,GACd,MAAM,OAACtE,GAAUsE,EACbtE,aAAkBgkB,IAClB,GAAA/iB,KAAI,WAAc,KAAlBA,KAAmBjB,GACnBiB,KAAKgb,YAGDjc,GAAUiB,MACVA,KAAK2P,UAGhB,YAEmBtM,GAChB,MAAM,OAACtE,GAAUsE,GACX,SAACwM,GAAY7P,KACfjB,aAAkBgkB,KACblT,GACD7P,KAAK+a,SAET,GAAA/a,KAAI,WAAiB,KAArBA,KAAsBjB,KAE7B,YAEoBsE,GACjB,MAAM,cAACmP,GAAiBnP,GAClB,SAACwM,GAAY7P,MACMA,KAAKyR,SAAee,KAErC3C,GACA7P,KAAKgb,WAET,GAAAhb,KAAI,WAAiB,KAArBA,KAAsB,QAE7B,YAEmBqD,GAChB,MAAM,IAAC3F,GAAO2F,GACR,QAAC4D,EAAO,aAAEqc,EAAY,eAAEG,EAAc,cAAEJ,EAAa,SAAExT,GAAY7P,KACzE,OAAQtC,GACJ,IAAK,UACD,GAAImS,GAA6B,OAAjByT,EAAuB,CACnC,MAAMQ,EAAiB,GAAA9jB,KAAI,WAAgB,KAApBA,KAAqBsjB,IAAiB,GAAAtjB,KAAI,WAAa,KAAjBA,MACzD8jB,GACAA,EAAe9Q,MAAM,CAACC,eAAe,SAGxC,IAAKpD,GAA+B,OAAnB4T,EAAyB,CAC3C,MAAMK,EAAiB,GAAA9jB,KAAI,WAAgB,KAApBA,KAAqByjB,IAAmB,GAAAzjB,KAAI,WAAa,KAAjBA,MAC3D8jB,GACA,GAAA9jB,KAAI,WAAc,KAAlBA,KAAmB8jB,GAG3BzgB,EAAMgP,kBACN,MAEJ,IAAK,YACD,GAAIxC,GAA6B,OAAjByT,EAAuB,CACnC,MAAMS,EAAa,GAAA/jB,KAAI,WAAY,KAAhBA,KAAiBsjB,IAAiB,GAAAtjB,KAAI,WAAY,KAAhBA,MACjD+jB,GACAA,EAAW/Q,MAAM,CAACC,eAAe,SAGpC,IAAKpD,GAA+B,OAAnB4T,EAAyB,CAC3C,MAAMM,EAAa,GAAA/jB,KAAI,WAAY,KAAhBA,KAAiByjB,IAAmB,GAAAzjB,KAAI,WAAY,KAAhBA,MACnD+jB,GACA,GAAA/jB,KAAI,WAAc,KAAlBA,KAAmB+jB,GAG3B1gB,EAAMgP,kBACN,MAEJ,IAAK,OAAQ,CACT,MAAM2R,EAAc,GAAAhkB,KAAI,WAAa,KAAjBA,MACA,OAAhBgkB,IACInU,EACAmU,EAAYhR,MAAM,CAACC,eAAe,IAGlC,GAAAjT,KAAI,WAAc,KAAlBA,KAAmBgkB,IAG3B3gB,EAAMgP,kBACN,MAEJ,IAAK,MAAO,CACR,MAAM4R,EAAa,GAAAjkB,KAAI,WAAY,KAAhBA,MACA,OAAfikB,IACIpU,EACAoU,EAAWjR,MAAM,CAACC,eAAe,IAGjC,GAAAjT,KAAI,WAAc,KAAlBA,KAAmBikB,IAG3B5gB,EAAMgP,kBACN,MAEJ,IAAK,QACD,GAAIxC,EACA7P,KAAKgb,WACgB,OAAjBsI,GACA,GAAAtjB,KAAI,WAAc,KAAlBA,KAAmBsjB,OAGtB,CACD,MAAMF,EAASnc,EAAQlE,KAAKsgB,GACb,OAAXD,GACAA,EAAOpQ,MAAM,CAACC,eAAe,IAGrC5P,EAAMgP,kBACN,MAEJ,IAAK,SACGxC,GACA7P,KAAKgb,WAET3X,EAAMgP,kBACN,MAEJ,QAAS,CACL,MAAM,YAAC6R,GAAelkB,MACf8C,OAAQqhB,GAAazmB,EAC5B,GAAiB,GAAbymB,EAAgB,CAChB,MAAMC,EAAU1mB,EAAI2mB,WAAW,GACzBC,EAAevjB,MAAM4J,KAAK1D,EAAQhE,UAClCshB,EAAkBD,EAAargB,WACjCugB,GAAYA,EAASnQ,MAAMpM,cAAcoc,WAAW,IAAMD,IAExDK,EAAiBH,EAAargB,WAChC,CAACugB,EAAUre,IAAMqe,EAASnQ,MAAMpM,cAAcoc,WAAW,IAAMD,GAAWje,EAAI+d,IAE5EQ,EAAaD,GAAkB,EACjCA,EACAF,EACEnB,EAASnc,EAAQlE,KAAK2hB,GACb,OAAXtB,GACAA,EAAOpQ,MAAM,CAACC,eAAe,IAEjC5P,EAAMgP,kBAEV,SAGX,YAEqBhP,GAClB,MAAM,OAACtE,GAAUsE,EACbtE,aAAkBgkB,IAClBhkB,EAAOiU,MAAM,CAACC,eAAe,KAEpC,YAEsB5P,GACnB,MAAM,OAACtE,GAAUsE,EACX4D,EAAkDlI,EACnD2P,mBACArH,QACGsH,GAAaA,aAAqBoU,KAE1C,GAAI9b,EAAQnE,OAAS,EAAG,CACpB,IAAI2gB,EAA4C,MAC5C,MAACllB,GAASyB,KACVzB,IACAklB,EAAiBxc,EAAQkX,MAAKiF,GAAUA,EAAO7kB,OAASA,KAAU,MAEhD,MAAlBklB,IACAA,EAAiBxc,EAAQkX,MAAKiF,GAAUA,EAAO1S,YAAa,MAE1C,MAAlB+S,IACAA,EAAiBxc,EAAQkX,MAAKiF,GAAUA,EAAOuB,WAAY,MAEzC,MAAlBlB,IACAA,EAAiB,GAAAzjB,KAAI,WAAa,KAAjBA,OAErBiH,EAAQpI,SAAQ2lB,IACZA,EAAS9T,SAAW8T,GAAYf,KAEb,OAAnBA,GACA,GAAAzjB,KAAI,WAAmB,KAAvBA,KAAwByjB,MA7XhC,GAAiB,EAAQ,aACVjV,QAAQ/H,OACnB,EAAQ,MAAO,CACXpF,WAAY,CACR4O,KAAM,WAEV9F,SAAU,CACN,EAAQ,QAAS,CACb9I,WAAY,CACR4O,KAAM,WAGd,EAAQ,SAAU,CACd5O,WAAY,CACR4O,KAAM,cAKtB,EAAQ,MAAO,CACX5O,WAAY,CACR4O,KAAM,WAEV9F,SAAU,CACN,EAAQ,QACR,EAAQ,KAAM,CACV9I,WAAY,CACR4O,KAAM,eAGd,EAAQ,OAAQ,CACZ5O,WAAY,CACR4O,KAAM,qBAnD9B,IADC/H,EAAkB,CAAClJ,KAAMiK,U,4BAI1B,IADCf,EAAkB,CAAClJ,KAAMiK,OAAQZ,UAAU,K,6BAI5C,IADCH,EAAkB,CAAClJ,KAAMiK,OAAQZ,UAAU,K,6BAI5C,IADCH,EAAkB,CAAClJ,KAAMiK,OAAQb,aAAc,SAAUC,UAAU,K,4BAIpE,IADCH,EAAkB,CAAClJ,KAAMuJ,W,gCAjCxB2a,GAAsB,IAH3Bha,EAAc,CACXE,KAAM,cAEJ8Z,IA4aN,I,iCCxbI,GACA0B,GACAC,GDsbAC,GAAoD5B,G,69BCjbxD,IAAM6B,GAAN,cAA0CtK,GAiEtC1a,cACIsE,Q,aAvCJ,oBACA,oBAuCI,GAAArE,KAAI,GAAe,KAAI,KACvB,GAAAA,KAAI,GAAW,KAAI,KACnB,MAAMqO,EAAarO,KAAKsO,aAAa,CAACC,KAAM,SAC5CF,EAAW5H,OACP,GAAe+H,QAAQC,WAAU,IAErCJ,EAAWxK,iBAAiB,aAAc,GAAA7D,KAAI,WAAwB2H,KAAK3H,OArE/E,iBACI,OAAO,GAAAA,KAAI,QAGf,aACI,OAAO,GAAAA,KAAI,QAmEf2P,SACI,MAAM,KAAC3Q,GAAQgB,KACf,OAAQhB,GACJ,IAAK,aAAc,CACf,MAAM,WAACgmB,GAAchlB,KACjBglB,IACAA,EAAWrV,SACPqV,EAAWnV,UACXmV,EAAWpL,MAAMhX,MAAMG,KAAK,IAAIiQ,MAAM,CAACC,eAAe,KAG9D,MAEJ,IAAK,SAAU,CACX,MAAM,OAACgS,GAAUjlB,KACbilB,GACAA,EAAOtV,SAEX,QAKZ/P,yBAAyBwJ,EAAczJ,EAAyBqC,GAC5D,OAAQoH,GACJ,IAAK,QAAS,CACV,MAAM,WAACiF,GAAcrO,KACfuP,EAAYlB,EAAWmB,cAA+B,gBACxDD,IACAA,EAAUE,YAAczN,GAE5B,MAEJ,IAAK,QAAS,CACV,MAAM,KAAChD,GAAQgB,KACH,UAARhB,GACA,GAAAgB,KAAI,WAAmB,KAAvBA,MAEJ,U,2DAMR,MAAM,OAACilB,GAAUjlB,KACjB,GAAIilB,EAAQ,CACR,MAAM,MAAC1mB,GAASyB,MACTzB,MAAO2mB,GAAeD,EACzBC,IAAgB3mB,IAChB0mB,EAAO1mB,MAAQA,KAG1B,YAE0B+B,GACvB,MAAMoH,EAA0B,GAAA1H,KAAI,WAA6B2H,KAAK3H,MACtE4kB,GAAyBzjB,IAAIb,EAASoH,GACtCpH,EAAQuD,iBAAiB,UAAW6D,IACvC,YAE6BpH,GAC1B,MAAMoH,EAAWkd,GAAyB7mB,IAAIuC,GAC1CoH,GACApH,EAAQyD,oBAAoB,UAAW2D,IAE9C,YAEyBpH,GACtB,MAAMoH,EAA0B,GAAA1H,KAAI,WAA4B2H,KAAK3H,MACrE6kB,GAAwB1jB,IAAIb,EAASoH,GACrCpH,EAAQuD,iBAAiB,UAAW6D,IACvC,YAE4BpH,GACzB,MAAMoH,EAAWmd,GAAwB9mB,IAAIuC,GACzCoH,GACApH,EAAQyD,oBAAoB,UAAW2D,IAE9C,YAE2BrE,GACxB,MAAM,IAAC3F,GAAO2F,EACd,OAAQ3F,GACJ,IAAK,QACL,IAAK,SACDsC,KAAKgT,MAAM,CAACC,eAAe,IAC3B5P,EAAMgP,oBAIjB,YAE0BhP,GACvBrD,KAAKgT,MAAM,CAACC,eAAe,IAC3B5P,EAAMgP,mBACT,YAEsBhP,GACnB,MAAM,OAACtE,GAAUsE,GACV+F,KAAM4G,GAA6BjR,EAC1C,OAAQiR,GACJ,IAAK,aAAc,CACf,IAAIgV,EAAa,GAAAhlB,KAAI,QACF,OAAfglB,IACA,GAAAhlB,KAAI,WAA6B,KAAjCA,KAAkCglB,GAClC,GAAAhlB,KAAI,WAA8B,KAAlCA,KAAmCglB,IAEvC,MAAM1kB,EAA4BvB,EAAQ2P,mBAAmB,GAC7DsW,EAAa1kB,aAAmBsiB,GAAyBtiB,EAAU,KAChD,OAAf0kB,IACA,GAAAhlB,KAAI,WAA0B,KAA9BA,KAA+BglB,GAC/B,GAAAhlB,KAAI,WAA2B,KAA/BA,KAAgCglB,IAEpC,GAAAhlB,KAAI,GAAeglB,EAAU,KAC7B,MAEJ,IAAK,SAAU,CACX,IAAIC,EAAS,GAAAjlB,KAAI,QACF,OAAXilB,GACA,GAAAjlB,KAAI,WAA8B,KAAlCA,KAAmCilB,GAEvC,MAAM3kB,EAA4BvB,EAAQ2P,mBAAmB,GAC7DuW,EAAS3kB,aAAmBwkB,GAAqBxkB,EAAU,KAC5C,OAAX2kB,GACA,GAAAjlB,KAAI,WAA2B,KAA/BA,KAAgCilB,GAEpC,GAAAjlB,KAAI,GAAWilB,EAAM,KACrB,UA5KR,GAAiB,EAAQ,aACVzW,QAAQ/H,OACnB,EAAQ,OAAQ,CACZpF,WAAY,CACR4O,KAAM,WAEV9F,SAAU,CACN,EAAQ,OAAQ,CACZ9I,WAAY,CACR4O,KAAM,UAGd,EAAQ,OAAQ,CACZ5O,WAAY,CACR4O,KAAM,WAGd,EAAQ,OAAQ,CACZ5O,WAAY,CACR+H,KAAM,YAGd,EAAQ,OAAQ,CACZ/H,WAAY,CACR+H,KAAM,oBAM1Bwb,GAA2B,IAAInmB,QAC/BomB,GAA0B,IAAIpmB,QAjDlC,IADCyJ,EAAkB,CAAClJ,KAAMuJ,W,8BAI1B,IADCL,EAAkB,CAAClJ,KAAMiK,OAAQZ,UAAU,K,6BAI5C,IADCH,EAAkB,CAAClJ,KAAMiK,U,4BAI1B,IADCf,EAAkB,CAAClJ,KAAMiK,OAAQZ,UAAU,K,6BAI5C,IADCH,EAAkB,CAAClJ,KAAMiK,U,4BAxBxB8b,GAA2B,IAHhC7b,EAAc,CACXE,KAAM,mBAEJ2b,IAiNN,IC7NI,GD6NAI,GAA8DJ,GA2C9DK,GAAwCxnB,OAAOyf,QACrC,SAASxb,GASf,MAAM,MAACwS,EAAK,KAAEjL,EAAI,KAAEpK,EAAI,MAAET,EAAK,QAAE+Y,EAAO,WAAE0N,EAAU,OAAEC,GAAUpjB,EAOhE,OANImjB,IACAA,EAAWpkB,KAAO,cAElBqkB,IACAA,EAAOrkB,KAAO,UAEX,EAAQ,gBAAiB,CAC5BS,WAAY,CACRsV,UAAW,EACXiB,MAAOvD,EACPjL,KAAMA,EACN7K,MAAOA,EACPS,KAAMA,GAEVmL,SAAU6a,EAAa,CAACA,GAAcC,EAAS,CAACA,QAAU,EAC1D7a,UAAW,CACPkN,QAASA,OAGlB,CACCpZ,UAAWinB,GAAwBjnB,UACnCof,OAAOzb,GAMI,IAAIujB,GAAa,IACjBvjB,EAAM7C,KAAM,WAGvBue,SAAS1b,GAME,IAAIujB,GAAa,IACjBvjB,EAAM7C,KAAM,aAGvBwe,MAAM3b,GAMK,IAAIujB,GAAa,IACjBvjB,EAAM7C,KAAM,UAGvBgmB,WAAWnjB,GAKA,IAAIujB,GAAa,IACjBvjB,EAAM7C,KAAM,eAGvBimB,OAAOpjB,GAKI,IAAIujB,GAAa,IACjBvjB,EAAM7C,KAAM,a,uUChV/B,IAAMqmB,GAAN,cAA+CpmB,YAuC3Cc,cACIsE,QACmBrE,KAAKsO,aAAa,CAACC,KAAM,SACjC9H,OACP,GAAe+H,QAAQC,WAAU,IAIzC7O,yBAAyBwJ,EAAczJ,EAAyBqC,GAC5D,OAAQoH,GACJ,IAAK,QAAS,CACV,MAAMiL,EAAQrU,KAAKqO,WAAWmB,cAAgC,kBAC1D6E,IACAA,EAAM5E,YAAczN,GAExB,WAxCR,GAAiB,EAAQ,aACVwM,QAAQ/H,OACnB,EAAQ,QAAS,CACb0D,SAAU,CACC,ogBAiBf,EAAQ,SA9BhB,IADCjC,EAAkB,CAAClJ,KAAMiK,U,4BAI1B,IADCf,EAAkB,CAAClJ,KAAMiK,OAAQZ,UAAU,K,6BAI5C,IADCH,EAAkB,CAAClJ,KAAMuJ,QAASF,UAAU,K,gCAV3Cgd,GAAgC,IAHrCnc,EAAc,CACXE,KAAM,wBAEJic,IAkEN,I,wBAAIC,GAAwED,G,spBClE5E,MAAME,GAWFxlB,YAAY0B,G,aAVZ,oBAWI,GAAAzB,KAAI,GAAW+J,SAASoG,iBACpB1O,EAAM2O,WAAWC,aAAc,GAAArQ,KAAI,WAAa2H,KAAK3H,OACxD,KAXL,aACI,MAAMwQ,EAAS,GAAAxQ,KAAI,QACnBwQ,EAAOC,YAAcD,EAAO/O,KAC5B,IAAIqB,EAAS,EACb,KAA6B,OAAtB0N,EAAOyB,YAAqBnP,IACnC,OAAOA,EAmBXC,KAAKC,GACD,GAAIA,EAAQ,EACR,OAAO,KAEX,MAAMwN,EAAS,GAAAxQ,KAAI,QACnBwQ,EAAOC,YAAcD,EAAO/O,KAC5B,IAAIgP,EAAcD,EAAOyB,WACrB9L,EAAI,EACR,KAAOA,EAAInD,GAAyB,OAAhByN,GAChBA,EAAcD,EAAOyB,WACrB9L,IAEJ,OAAuCsK,EAG3CkH,UAAUvO,GACN,IAAKA,EACD,OAAO,KAEX,MAAMoH,EAAS,GAAAxQ,KAAI,QACnBwQ,EAAOC,YAAcD,EAAO/O,KAC5B,IAAIgP,EAA8CD,EAAOyB,WACzD,KAAuB,OAAhBxB,GAA0BA,EAAYrH,MAAQA,GACjDqH,EAA8CD,EAAOyB,WAEzD,OAAIxB,GAAmC,SAApBA,EAAYzR,KACpB,IAAIwmB,GAA+ChV,EAAO/O,KAAM2H,GAEpCqH,EAG3C,UACI,MAAMD,EAAS,GAAAxQ,KAAI,QACnBwQ,EAAOC,YAAcD,EAAO/O,KAC5B,IAAIgP,EAAcD,EAAOyB,WACzB,KAAuB,OAAhBxB,SAC4BA,EAC/BA,EAAcD,EAAOyB,Y,0CA/CjB9M,GACR,OAAIA,aAAgBggB,GACT/U,WAAWS,cAElB1L,aAAgBmgB,GACTlV,WAAWU,YAEfV,WAAWW,eA4Cf,GAAA0U,+BAA6B,GAAI,MAkBpC1lB,YAAY0B,EAA2B2H,G,aAjBvC,oBACA,oBAiBI,GAAApJ,KAAI,GAAW+J,SAASoG,iBACpB1O,EAAM2O,WAAWC,aAAc,GAAArQ,KAAI,WAAa2H,KAAK3H,OACxD,KACD,GAAAA,KAAI,GAASoJ,EAAI,KAlBrB,YACI,MAAMA,EAAO,GAAApJ,KAAI,QACXwQ,EAAS,GAAAxQ,KAAI,QACnBwQ,EAAOC,YAAcD,EAAO/O,KAC5B,IAAIgP,EAA8CD,EAAOyB,WACzD,KAAuB,OAAhBxB,GAAsB,CACzB,GAAIA,EAAYrH,MAAQA,GAA4B,SAApBqH,EAAYzR,MAAmByR,EAAYoH,QACvE,OAAOpH,EAAYlS,MAEvBkS,EAA8CD,EAAOyB,WAEzD,MAAO,GAoBX,UACI,MAAM7I,EAAO,GAAApJ,KAAI,QACXwQ,EAAS,GAAAxQ,KAAI,QACnBwQ,EAAOC,YAAcD,EAAO/O,KAC5B,IAAIgP,EAA8CD,EAAOyB,WACzD,KAAuB,OAAhBxB,GAAsB,CACzB,MAAOrH,KAAMsc,EAAU1mB,KAAM2mB,GAAYlV,EACrCiV,GAAYtc,GAAoB,SAAZuc,UACdlV,GAEVA,EAA8CD,EAAOyB,c,yDApBjD9M,GACR,OAAIA,aAAgBggB,GACT/U,WAAWS,cAElB1L,aAAgBmgB,GACTlV,WAAWU,YAEfV,WAAWW,e,IAmB9B,IAAI6U,GAAqEL,GACrEC,GAAkED,GAA+BE,qCAC9FF,GAA+BE,8B,iDCzHlC,G,69BAKJ,IAAMI,GAAN,cAAsC5mB,YAuClCc,cACIsE,Q,aArBJ,oBACA,oBAqBI,GAAArE,KAAI,IAAiB,EAAC,KACtB,GAAAA,KAAI,GAAW+J,SAASoG,iBACpBnQ,KAAMoQ,WAAWC,aAAc,GAAArQ,KAAI,WAAa2H,KAAK3H,OACxD,KACDA,KAAK4C,MAAQ,IAAIgjB,GAA2B5lB,MACzBA,KAAKsO,aAAa,CAACC,KAAM,SACjC9H,OACP,GAAe+H,QAAQC,WAAU,IAErCzO,KAAK6D,iBAAiB,SAAU,GAAA7D,KAAI,WAAoB2H,KAAK3H,OAC7DA,KAAK6D,iBAAiB,QAAS,GAAA7D,KAAI,WAAmB2H,KAAK3H,OAC3DA,KAAK6D,iBAAiB,UAAW,GAAA7D,KAAI,WAAqB2H,KAAK3H,OAC/DA,KAAK6D,iBAAiB,WAAY,GAAA7D,KAAI,WAAsB2H,KAAK3H,OACjEA,KAAK6D,iBAAiB,UAAW,GAAA7D,KAAI,WAAqB2H,KAAK3H,OAC/DA,KAAK6D,iBAAiB,UAAW,GAAA7D,KAAI,WAAqB2H,KAAK3H,OAlDnE,iBACI,OAAOA,KAAK4C,MAAMG,KAAK,GAAA/C,KAAI,UAAkB,KAGjD,kBACI,OAAO,GAAAA,KAAI,U,yDAgDHmF,GACR,OAAIA,aAAgBggB,GACT/U,WAAWS,cAElB1L,aAAgBmgB,GACTlV,WAAWU,YAEfV,WAAWW,eACrB,cAGG,MAAMP,EAAS,GAAAxQ,KAAI,QAEnB,OADAwQ,EAAOC,YAAcD,EAAO/O,KACW+O,EAAO1D,cACjD,cAGG,MAAM0D,EAAS,GAAAxQ,KAAI,QAEnB,OADAwQ,EAAOC,YAAcD,EAAO/O,KACW+O,EAAOuB,aACjD,YAEahP,GACV,MAAMyN,EAAS,GAAAxQ,KAAI,QAGnB,OAFAwQ,EAAOC,YAAc1N,EACgCyN,EAAOwB,mBAE/D,YAESjP,GACN,MAAMyN,EAAS,GAAAxQ,KAAI,QAEnB,OADAwQ,EAAOC,YAAc1N,EACkByN,EAAO0B,eACjD,YAEcnP,GACX,MAAM,WAAC2O,EAAU,MAAE9O,GAAS5C,KACT,OAAf0R,GAAuBA,IAAe3O,IACtC2O,EAAWC,QAAS,GAEX,OAAT5O,GACAA,EAAK4O,QAAS,EACd,GAAA3R,KAAI,GAAgBe,MAAM4J,KAAK/H,EAAMK,UAAU8C,QAAQhD,GAAK,MAG5D,GAAA/C,KAAI,IAAiB,EAAC,MAE7B,YAEkBqD,GACf,MAAM,OAACtE,GAAUsE,EACjB,GAAItE,aAAkB+lB,GAAoB,CACtC,MAAM/hB,EAAOhE,EAAOmQ,QAAQ,iBAC5B,GAAa,OAATnM,EAAe,CACf,MAAM,OAACkiB,EAAM,KAAEjmB,GAAQ+D,EACvB,GAAIhE,GAAUkmB,GAAUA,GAAkB,UAARjmB,EAAkB,CAChD,MAAM,MAACT,GAASwE,GACTxE,MAAO2mB,GAAeD,EACzB1mB,IAAU2mB,IACVniB,EAAKxE,MAAQ2mB,EACbniB,EAAKuU,eAKxB,YAEiBjU,GACd,MAAM,OAACtE,GAAUsE,EACjB,GAAItE,aAAkBomB,GAAyB,CAC3C,MAAM,KAACnmB,GAAQD,EAqBPA,EAAOuY,YAKtB,YAEmBjU,GAChB,MAAM,OAACtE,GAAUsE,GACX,MAACT,GAAS5C,KACV0R,EAAa3Q,MAAM4J,KAAK/H,EAAMK,UAAUkb,MAC1CtY,GAAUA,EAAO4L,SAAe1S,MAC/B,KACL,GAAAiB,KAAI,WAAe,KAAnBA,KAAoB0R,IACvB,YAEoBrO,GACjB,MAAM,cAACmP,GAAiBnP,GACCrD,KAAKyR,SAAee,IAEzC,GAAAxS,KAAI,WAAe,KAAnBA,KAAoB,OAE3B,YAEmBqD,GAChB,MAAM,IAAC3F,GAAO2F,GACR,WAACqO,GAAc1R,KACrB,OAAQtC,GACJ,IAAK,QACD,GAAIgU,EAAY,CACZ,MAAM,KAAC1S,GAAQ0S,EACf,OAAQ1S,GACJ,IAAK,aAAc,CACf,MAAM,WAACgmB,GAActT,EACrB,GAAIsT,EAAY,CACZ,MAAM,SAACnV,GAAYmV,EACdnV,IACDmV,EAAWjK,SACXiK,EAAWpL,MAAMhX,MAAMG,KAAK,IAAIiQ,MAAM,CAACC,eAAe,KAG9D,MAEJ,IAAK,SAAU,CACX,MAAM,OAACgS,GAAUvT,EACbuT,GACAA,EAAOlK,SAEX,MAEJ,QACIrJ,EAAW4F,UAInBjU,EAAMgP,kBAEV,MAEJ,IAAK,YACD,GAAIX,EAAY,CACZ,MAAMwB,EAAe,GAAAlT,KAAI,WAAc,KAAlBA,KAAmB0R,GACpCwB,GACAA,EAAaF,MAAM,CAACC,eAAe,QAGtC,CACD,MAAMH,EAAY,GAAA9S,KAAI,WAAW,KAAfA,MACd8S,GACAA,EAAUE,MAAM,CAACC,eAAe,IAGxC5P,EAAMgP,kBACN,MAEJ,IAAK,aACD,GAAIX,EAAY,CACZ,MAAMyB,EAAW,GAAAnT,KAAI,WAAU,KAAdA,KAAe0R,GAC5ByB,GACAA,EAASH,MAAM,CAACC,eAAe,QAGlC,CACD,MAAMd,EAAW,GAAAnS,KAAI,WAAU,KAAdA,MACbmS,GACAA,EAASa,MAAM,CAACC,eAAe,IAGvC5P,EAAMgP,kBACN,MAEJ,IAAK,YACD,GAAIX,EAAY,CACZ,MAAM,KAAC1S,GAAQ0S,EACf,OAAQ1S,GACJ,IAAK,SACD0S,EAAWuT,QAAQlK,SACnB1X,EAAMgP,mBAKlB,MAEJ,IAAK,OAAQ,CACT,MAAMS,EAAY,GAAA9S,KAAI,WAAW,KAAfA,MACd8S,GACAA,EAAUE,MAAM,CAACC,eAAe,IAEpC5P,EAAMgP,kBACN,MAEJ,IAAK,MAAO,CACR,MAAMF,EAAW,GAAAnS,KAAI,WAAU,KAAdA,MACbmS,GACAA,EAASa,MAAM,CAACC,eAAe,IAEnC5P,EAAMgP,kBACN,MAEJ,IAAK,SACGX,EACAA,EAAWsB,MAAM,CAACC,eAAe,IAGjCjT,KAAKgT,MAAM,CAACC,eAAe,IAE/B5P,EAAMgP,oBAIjB,YAEmBhP,GAChB,MAAM,OAACtE,GAAUsE,EACjB,GAAItE,aAAkBomB,GAAyB,CAC3C,MAAM,KAACnmB,EAAI,KAAEoK,EAAI,MAAE7K,GAASQ,EAChB,SAARC,GACA+B,MAAM4J,KAAK,IAAI6a,GAA0BxlB,KAAMoJ,GAAMnG,UAAUpE,SAASygB,IACpEA,EAAQzH,QAAUyH,EAAQ/gB,OAASA,QAzQ/C,GAAiB,EAAQ,aACViQ,QAAQ/H,OACnB,EAAQ,QAAS,CACb0D,SAAU,CACC,sLAQf,EAAQ,SArBhB,IADCjC,EAAkB,CAAClJ,KAAMiK,U,4BAI1B,IADCf,EAAkB,CAAClJ,KAAMiK,U,mCAhBxB4c,GAAuB,IAH5B3c,EAAc,CACXE,KAAM,eAEJyc,IAuSN,IAAIC,GAAsDD,G,uUCzT1D,IAAME,GAAN,cAAuC9mB,YAKnCc,cACIsE,QAEArE,KAAKsO,aAAa,CAACC,KAAM,SAAS9H,OAC9B,EAAQ,QAAS,CACb0D,SAAU,CACC,iQAWf,EAAQ,WAnBhB,IADCjC,EAAkB,CAAClJ,KAAMiK,U,4BAFxB8c,GAAwB,IAH7B7c,EAAc,CACXE,KAAM,gBAEJ2c,IA2BN,I,GAAIC,GAAwDD,G,69BCL5D,IAAME,GAAN,cAAkChnB,YAgB9Bc,cACIsE,QAHJ,oBAKIrE,KAAKsO,aAAa,CAACC,KAAM,SAAS9H,OAC9B,EAAQ,QAAS,CACb0D,SAAU,CACC,yrBAsBf,EAAQ,SAEZ,GAAAnK,KAAI,GAAU,KAAI,KAGtB,YACI,OAAO,GAAAA,KAAI,QAGfkmB,oBACI,MAAMC,EAAQpc,SAASqc,eAAepmB,KAAKqmB,UACvCF,IAAU,GAAAnmB,KAAI,SAAWmmB,aAAiBH,IAC1C,GAAAhmB,KAAI,GAAUmmB,EAAK,KAEnBA,IACAA,EAAMhP,QAAUnX,KAAK2R,QAI7B/R,yBAAyBwJ,EAAczJ,EAAyBqC,GAC5D,OAAQoH,GACJ,IAAK,SACGpJ,KAAK2R,QACL3R,KAAKoE,cAAc,IAAIkiB,YAAY,cAAe,CAACC,OAAQ,CAACC,IAAKxmB,MAAOsP,SAAS,KAErF,MAAM6W,EAAQpc,SAASqc,eAAepmB,KAAKqmB,UACvCF,IAAUnmB,KAAKmmB,OAASA,aAAiBH,IACzC,GAAAhmB,KAAI,GAAUmmB,EAAK,KAEnBA,IACAA,EAAMhP,QAAUnX,KAAK2R,W,eAvErC,IADCzJ,EAAkB,CAAClJ,KAAMiK,U,4BAI1B,IADCf,EAAkB,CAAClJ,KAAMuJ,W,gCAI1B,IADCL,EAAkB,CAAClJ,KAAMuJ,QAASF,UAAU,K,8BAI7C,IADCH,EAAkB,CAAClJ,KAAMiK,OAAQZ,UAAU,K,gCAX1C4d,GAAmB,IAHxB/c,EAAc,CACXE,KAAM,WAEJ6c,IAiFN,I,GAAIQ,GAA8CR,G,spBC/FlD,IAAMS,GAAN,cAAsCznB,YAMlCc,cACIsE,QAHJ,oBAKIrE,KAAKsO,aAAa,CAACC,KAAM,SAAS9H,OAC9B,EAAQ,QAAS,CACb0D,SAAU,CACC,sLAQf,EAAQ,SAGZnK,KAAK2mB,KAAO,GACZ,GAAA3mB,KAAI,GAAgB,EAAC,KAGzB,kBACI,OAAO,GAAAA,KAAI,QAGf,gBACI,OAAOA,KAAK2mB,KAAK,GAAA3mB,KAAI,UAAkB,KAG3CkmB,oBACIlmB,KAAK4R,SAAW5R,KAAK4R,SACrB,MAAMhR,EAAOZ,KAAKqO,WAAYmB,cAAc,QACxC5O,GACAA,EAAKiD,iBAAiB,cAAeR,IAEjC,MAAMsjB,EAA4CtjB,EAAMtE,OACnD2P,mBACArH,QAAOmf,GAAOA,aAAeC,KAClCzmB,KAAK2mB,KAAOA,EACZ,GAAA3mB,KAAI,GAAgBA,KAAK2mB,KAAK1iB,WAAUuiB,GAAOA,EAAI7U,SAAO,QAIlE3R,KAAK6D,iBAAiB,WAAYR,IAC9B,OAAQA,EAAM3F,KACV,IAAK,UACDsC,KAAK4mB,WAAY5mB,KAAKkkB,aAAe,EAAKlkB,KAAK2mB,KAAK7jB,OAAS,EAAI9C,KAAKkkB,YAAc,GACpF7gB,EAAMgP,kBACN,MACJ,IAAK,YACDrS,KAAK4mB,WAAY5mB,KAAKkkB,aAAelkB,KAAK2mB,KAAK7jB,OAAS,EAAK,EAAI9C,KAAKkkB,YAAc,GACpF7gB,EAAMgP,kBACN,MACJ,IAAK,QACGrS,KAAK6mB,WACL7mB,KAAK8mB,YAAY9mB,KAAK6mB,eAMtC7mB,KAAK6D,iBAAiB,SAAUR,IAC5B,MAAMtE,EAASsE,EAAMtE,OACjBA,aAAkB0nB,KAClB1nB,EAAO4S,QAAS,MAIxB3R,KAAK6D,iBAAiB,eAAgBR,IAClC,MAAM0jB,EAAc/mB,KAAK2mB,KAAK5gB,QAAQ1C,EAAMkjB,OAAOC,KACnD,GAAAxmB,KAAI,GAAgB+mB,EAAW,KAC/B/mB,KAAK2mB,KAAK9nB,SAAQ,CAACmoB,EAASC,KACpBA,IAAiBF,IACjBC,EAAQrV,QAAS,SAMjCiV,WAAW5jB,GACP,MAAMwjB,EAAMxmB,KAAK2mB,KAAK3jB,GAClBwjB,IACA,GAAAxmB,KAAI,GAAgBgD,EAAK,KACzBwjB,EAAIxT,SAIZ8T,YAAYN,GACJxmB,KAAK2mB,KAAKpf,SAASif,KACnBA,EAAI7U,QAAS,K,eA/FnB+U,G,mUAAuB,EAH5Bxd,EAAc,CACXE,KAAM,eAEJsd,IAoGN,I,eC7FI,G,69BAKJ,IAAMQ,GAAN,cAAuCjoB,YA6CnCc,cACIsE,Q,aAZJ,oBACA,oBACA,oBAWI,MAAMgK,EAAarO,KAAKsO,aAAa,CAACC,KAAM,SAC5CF,EAAW5H,OACP,GAAe+H,QAAQC,WAAU,IAErC,GAAAzO,KAAI,GAAU,KAAI,KAClB,GAAAA,KAAI,GAAS,KAAI,KACjB,GAAAA,KAAI,GAAY,KAAI,KACpBqO,EAAWxK,iBAAiB,aAAc,GAAA7D,KAAI,WAAwB2H,KAAK3H,OAlD/E,YACI,OAAO,GAAAA,KAAI,QAGf,cACI,OAAO,GAAAA,KAAI,QAGf,WACI,OAAO,GAAAA,KAAI,QA4CfJ,yBAAyBwJ,EAAczJ,EAAyBqC,GAC5D,OAAQoH,GACJ,IAAK,WACDpJ,KAAKoE,cAAc,IAAIiL,MAAM,SAAU,CAACC,SAAS,KACjD,MAEJ,IAAK,QAAS,CACV,MAAM,WAACjB,GAAcrO,KACfuP,EAAYlB,EAAWmB,cAAc,gBACvCD,IACAA,EAAUE,YAAczN,GAE5B,U,wEAKWqB,GACnB,MAAM,OAACtE,GAAUsE,GACV+F,KAAM4G,GAA6BjR,EAC1C,OAAQiR,GACJ,IAAK,UAAW,CACZ,MAAM1P,EAA4BvB,EAAQ2P,mBAAmB,GAC7D,GAAA1O,KAAI,GAAYM,aAAmBwlB,GAAsBxlB,EAAU,KAAI,KACvE,MAEJ,IAAK,QAAS,CACV,MAAMA,EAA4BvB,EAAQ2P,mBAAmB,GAC7D,GAAA1O,KAAI,GAAUM,aAAmB6mB,gBAAkB7mB,EAAU,KAAI,KACjE,MAEJ,IAAK,OAAQ,CACT,MAAMA,EAA4BvB,EAAQ2P,mBAAmB,GAC7D,GAAA1O,KAAI,GAASM,aAAmB4e,GAAmB5e,EAAU,KAAI,KACjE,UApDR,GAAiB,EAAQ,aACVkO,QAAQ/H,OACnB,EAAQ,SAxBhB,IADCyB,EAAkB,CAAClJ,KAAMiK,U,4BAI1B,IADCf,EAAkB,CAAClJ,KAAM+J,U,gCAI1B,IADCb,EAAkB,CAAClJ,KAAMiK,OAAQZ,UAAU,K,6BAI5C,IADCH,EAAkB,CAAClJ,KAAMuJ,W,kCAI1B,IADCL,EAAkB,CAAClJ,KAAMuJ,W,8BAI1B,IADCL,EAAkB,CAAClJ,KAAMuJ,QAASF,UAAU,K,gCA/B3C6e,GAAwB,IAH7Bhe,EAAc,CACXE,KAAM,gBAEJ8d,IAiGN,I,MCjHI,GDiHAE,GAAwDF,GC5G5D,IAAMG,GAAN,cAA4CpoB,YAWxCc,cACIsE,Q,aACA,MAAMgK,EAAarO,KAAKsO,aAAa,CAACC,KAAM,SAC5CF,EAAW5H,OACP,GAAe+H,QAAQC,WAAU,IAErCJ,EAAWxK,iBACP,a,uSAAc,CAAA7D,KAAI,WAAwB2H,KAAK3H,S,2BAIhCqD,GACnB,MAAM,OAACtE,GAAUsE,EAC+CtE,EAC3D2P,mBACArH,QACGsH,GAAaA,aAAqByY,KAE5BvoB,SAAQ,CAACgH,EAAQM,KAC3BN,EAAOgJ,SAAW1I,OAzBtB,GAAiB,EAAQ,aACVqI,QAAQ/H,OACnB,EAAQ,SAPd4gB,G,mUAA6B,EAHlCne,EAAc,CACXE,KAAM,qBAEJie,IAmCN,I,6FC/BI,GD+BAC,GAAkED,G,69BC1BtE,IAAME,GAAN,cAAmCtoB,YAuC/Bc,cACIsE,Q,aAzBJ,oBACA,oBACA,oBACA,oBACA,oBAsBI,GAAArE,KAAI,GAAW+J,SAASoG,iBACpBnQ,KAAMoQ,WAAWC,aAAc,GAAArQ,KAAI,WAAmB2H,KAAK3H,OAC9D,KACD,GAAAA,KAAI,IAAiB,EAAC,KACtB,GAAAA,KAAI,IAAqB,EAAC,KAC1B,GAAAA,KAAI,IAAgB,EAAK,KACzB,GAAAA,KAAI,IAAwB,EAAK,KACjCA,KAAK4C,MAAQ5C,KAAKsQ,qBAAqB,cACvC,MAAMjC,EAAarO,KAAKsO,aAAa,CAACC,KAAM,SAC5CF,EAAW5H,OACP,GAAe+H,QAAQC,WAAU,IAErCzO,KAAK6D,iBAAiB,cAAe,GAAA7D,KAAI,WAAyB2H,KAAK3H,OACvEA,KAAK6D,iBAAiB,QAAS,GAAA7D,KAAI,WAAmB2H,KAAK3H,OAC3DA,KAAK6D,iBAAiB,UAAW,GAAA7D,KAAI,WAAqB2H,KAAK3H,OAC/DA,KAAK6D,iBAAiB,YAAa,GAAA7D,KAAI,WAAuB2H,KAAK3H,OACnEA,KAAK6D,iBAAiB,WAAY,GAAA7D,KAAI,WAAsB2H,KAAK3H,OACjEA,KAAK6D,iBAAiB,YAAa,GAAA7D,KAAI,WAAuB2H,KAAK3H,OACnEA,KAAK6D,iBAAiB,YAAa,GAAA7D,KAAI,WAAuB2H,KAAK3H,OACnEA,KAAK6D,iBAAiB,OAAQ,GAAA7D,KAAI,WAAkB2H,KAAK3H,OACzDA,KAAK6D,iBAAiB,QAAS,GAAA7D,KAAI,WAAmB2H,KAAK3H,OAC3DA,KAAK6D,iBAAiB,UAAW,GAAA7D,KAAI,WAAqB2H,KAAK3H,OAC/DA,KAAK6D,iBAAiB,UAAW,GAAA7D,KAAI,WAAqB2H,KAAK3H,OAC/DA,KAAK6D,iBAAiB,SAAU,GAAA7D,KAAI,WAAoB2H,KAAK3H,OAC7DqO,EAAWxK,iBAAiB,aAAc,GAAA7D,KAAI,WAAwB2H,KAAK3H,OA5D/E,qBACI,OAAOA,KAAK4C,MAAM,GAAA5C,KAAI,UAAsB,KA8DhD,kBACI,OAAO,GAAAA,KAAI,QAGf,iBACI,OAAOA,KAAK4C,MAAM5C,KAAKkkB,cAAgB,KAG3CvT,iBACI,GAAA3Q,KAAI,IAAgB,EAAI,KAG5B4Q,eACI,GAAA5Q,KAAI,IAAgB,EAAK,KACrB,GAAAA,KAAI,UACJA,KAAKoE,cAAc,IAAIiL,MAAM,kBAAmB,CAACC,SAAS,KAC1D,GAAAtP,KAAI,IAAwB,EAAK,MAIzCuQ,gBACI,MAAMA,EAAgB,GAChBC,EAAS,GAAAxQ,KAAI,QACnBwQ,EAAOC,YAAcD,EAAO/O,KAC5B,IAAIsB,EAAO,GAAA/C,KAAI,WAAW,KAAfA,MACX,KAAgB,OAAT+C,GACCA,EAAK2N,UACLH,EAActP,KAAK8B,GAEvBA,EAAO,GAAA/C,KAAI,WAAU,KAAdA,KAAe+C,GAE1B,OAAOwN,I,sGAGOpL,GACd,OAAIA,aAAgBiiB,GACThX,WAAWS,cAElB1L,aAAgBmiB,GACTlX,WAAWU,YAEfV,WAAWW,eACrB,YAEcpG,EAA4BqG,GACvC,MAAMpO,EAAQ7B,MAAM4J,KAAK3K,KAAK4C,OACxBkD,EAAYlD,EAAMmD,QAAQ4E,GAC1B0V,EAAUzd,EAAMmD,QAAQiL,GAC9B,OAAIlL,GAAa,GAAKua,GAAW,EACzB1V,GAAQqG,EACD,CAACrG,GAEL/H,EAAMC,MACT8D,KAAK2Z,IAAIxa,EAAWua,GACpB1Z,KAAK4Z,IAAIza,EAAWua,GAAW,GAGhC,IACV,eAEgBzd,GACb5C,KAAK2Q,iBACiB3Q,KAAKuQ,gBACb1R,SAAS2S,IACd5O,EAAM2E,SAASiK,KAChBA,EAAed,UAAW,MAGlC9N,EAAM/D,SAASgH,IACP7F,KAAKyR,SAAS5L,KAAYA,EAAO6K,WACjC7K,EAAO6K,UAAW,MAG1B1Q,KAAK4Q,gBACR,eAEkBhO,GACf5C,KAAK2Q,iBACL/N,EAAM/D,SAASgH,IACNA,EAAO6K,WACR7K,EAAO6K,UAAW,MAG1B1Q,KAAK4Q,gBACR,eAEuBhO,GACpB5C,KAAK2Q,iBACL,MAAMJ,EAAgBvQ,KAAKuQ,gBAC3B3N,EAAM/D,SAASgH,IACP0K,EAAchJ,SAAS1B,KACvBA,EAAO6K,UAAW,MAG1B1Q,KAAK4Q,gBACR,cAGG5Q,KAAK2Q,iBACiB3Q,KAAKuQ,gBACb1R,SAASgH,IACfA,EAAO6K,WACP7K,EAAO6K,UAAW,MAG1B1Q,KAAK4Q,gBACR,YAEc7N,GACX,MAAM,WAAC2O,EAAU,MAAE9O,GAAS5C,KACT,OAAf0R,GAAuBA,IAAe3O,IACtC2O,EAAWC,QAAS,EACpBD,EAAWE,UAAY,GAEd,OAAT7O,IACAA,EAAK4O,QAAS,EACd5O,EAAK6O,SAAW,EAChB,GAAA5R,KAAI,GAAgBe,MAAM4J,KAAK/H,GAAOmD,QAAQhD,GAAK,OAE1D,YAEkBA,GACf,MAAM,eAAC8O,EAAc,MAAEjP,GAAS5C,KACT,OAAnB6R,GAA2BA,IAAmB9O,IAC9C8O,EAAeC,YAAa,GAEnB,OAAT/O,GACA/C,KAAK8R,YAAa,EAClB/O,EAAK+O,YAAa,EAClB,GAAA9R,KAAI,GAAoBe,MAAM4J,KAAK/H,GAAOmD,QAAQhD,GAAK,OAGvD/C,KAAK8R,YAAa,EAClB,GAAA9R,KAAI,IAAqB,EAAC,OAEjC,cAGG,MAAMwQ,EAAS,GAAAxQ,KAAI,SACb,KAACyB,GAAQ+O,EAEf,OADAA,EAAOC,YAAchP,EACe+O,EAAO1D,cAC9C,cAGG,MAAM0D,EAAS,GAAAxQ,KAAI,SACb,KAACyB,GAAQ+O,EAEf,OADAA,EAAOC,YAAchP,EACe+O,EAAOuB,aAC9C,YAEahP,GACV,MAAMyN,EAAS,GAAAxQ,KAAI,QAGnB,OAFAwQ,EAAOC,YAAc1N,EAC6ByN,EAAO4N,gBAE5D,YAESrb,GACN,MAAMyN,EAAS,GAAAxQ,KAAI,QAGnB,OAFAwQ,EAAOC,YAAc1N,EACyByN,EAAOyB,YAExD,YAEuB5O,GACpB,MAAM,OAACtE,GAAUsE,EACbtE,aAAkBqoB,KACIpnB,KAAKuQ,gBACRhJ,SAASxI,IACxB,GAAAiB,KAAI,WAAc,KAAlBA,KAAmBjB,GAEvBA,EAAOiU,MAAM,CAACC,eAAe,IAC7B5P,EAAMkP,mBAEb,YAEiBlP,GACd,MAAM,OAACtE,EAAM,QAAEgR,EAAO,SAAED,GAAYzM,EAC9BkN,EAAgBvQ,KAAKuQ,gBAC3B,GAAIxR,aAAkBqoB,GAClB,GAAKtX,GAAaC,GAGb,GAAIA,EACHhR,EAAO2R,SAEL,GAAA1Q,KAAI,WAAqB,KAAzBA,KAA0BjB,GAD1B,GAAAiB,KAAI,WAAgB,KAApBA,KAAqBjB,GAEzBsE,EAAMgP,uBAEL,GAAIvC,EAAU,CACf,MAAMwC,EAAmB/B,EAAcA,EAAczN,OAAS,GAC9D,GAAIwP,EAAkB,CAClB,MAAM/F,EAAQ,GAAAvM,KAAI,WAAe,KAAnBA,KACVsS,EACAvT,GAEAwN,IACIgE,EAAchJ,SAASxI,GACvB,GAAAiB,KAAI,WAAqB,KAAzBA,QAA6BuM,GAG7B,GAAAvM,KAAI,WAAgB,KAApBA,QAAwBuM,SAKhC,GAAAvM,KAAI,WAAc,KAAlBA,KAAmBjB,GAEvBsE,EAAMgP,wBA3BN,GAAArS,KAAI,WAAc,KAAlBA,KAAmBjB,IA8B9B,cAGG,GAAAiB,KAAI,WAAmB,KAAvBA,KAAwB,OAC3B,YAEqBqD,GAClB,MAAM,OAACtE,GAAUsE,EACbtE,aAAkBqoB,IAClB,GAAApnB,KAAI,WAAmB,KAAvBA,KAAwBjB,GAE5BsE,EAAMkP,kBACT,YAEoBlP,GACjBA,EAAMkP,kBACT,YAEqBlP,GAClB,MAAM,cAACmP,GAAiBnP,EAClBoP,EAA2BD,EAAeE,cAC1CC,EACFF,aAA6BG,WAC7BH,EAAkBI,KAClBL,EACCxS,KAAKyR,SAAekB,IACrB,GAAA3S,KAAI,WAAmB,KAAvBA,KAAwB,OAE/B,YAEqBqD,GAClB,MAAM,OAACtE,GAAUsE,EACbtE,aAAkBqoB,KACIpnB,KAAKuQ,gBACRhJ,SAASxI,IACxB,GAAAiB,KAAI,WAAc,KAAlBA,KAAmBjB,KAG9B,cAGG,GAAAiB,KAAI,WAAmB,KAAvBA,KAAwB,OAC3B,YAEmBqD,GAChB,MAAM,IAAC3F,GAAO2F,GACR,WAACqO,GAAc1R,KACrB,OAAQtC,GACJ,IAAK,IAAK,CACN,MAAM,QAACqS,GAAW1M,EAClB,GAAI0M,EAAS,CACT,MAAMS,EAAS,GAAAxQ,KAAI,SACb,KAACyB,GAAQ+O,EACTsC,GACFtC,EAAOC,YAAcD,EAAOjM,cAAgB9C,EAAM+O,EAAO1D,cAEvDqF,GACF3B,EAAOC,YAAcD,EAAOjM,cAAgB9C,EAAM+O,EAAOuB,aAEvDxF,EAAQ,GAAAvM,KAAI,WAAe,KAAnBA,KACV8S,EACAX,GAEA5F,GACA,GAAAvM,KAAI,WAAc,KAAlBA,QAAsBuM,GAG9BlJ,EAAMkP,iBACN,MAEJ,IAAK,UACD,GAAIb,EAAY,CACZ,MAAMwB,EAAe,GAAAlT,KAAI,WAAc,KAAlBA,KAAmB0R,GACxC,GAAIwB,EAAc,CACdA,EAAaF,MAAM,CAACC,eAAe,IACnC,MAAM,SAACnD,GAAYzM,EACfyM,IACAoD,EAAaxC,SACT,GAAA1Q,KAAI,WAAqB,KAAzBA,KAA0BkT,GAC1B,GAAAlT,KAAI,WAAgB,KAApBA,KAAqBkT,SAIhC,CACD,MAAMJ,EAAY,GAAA9S,KAAI,WAAW,KAAfA,MACd8S,GACAA,EAAUE,MAAM,CAACC,eAAe,IAGxC5P,EAAMgP,kBACN,MAEJ,IAAK,YACD,GAAIX,EAAY,CACZ,MAAMyB,EAAW,GAAAnT,KAAI,WAAU,KAAdA,KAAe0R,GAChC,GAAIyB,EAAU,CACVA,EAASH,MAAM,CAACC,eAAe,IAC/B,MAAM,SAACnD,GAAYzM,EACfyM,IACAqD,EAASzC,SACL,GAAA1Q,KAAI,WAAqB,KAAzBA,KAA0BmT,GAC1B,GAAAnT,KAAI,WAAgB,KAApBA,KAAqBmT,SAIhC,CACD,MAAMhB,EAAW,GAAAnS,KAAI,WAAU,KAAdA,MACbmS,GACAA,EAASa,MAAM,CAACC,eAAe,IAGvC5P,EAAMgP,kBACN,MAEJ,IAAK,OAAQ,CACT,MAAMS,EAAY,GAAA9S,KAAI,WAAW,KAAfA,MACd8S,GACAA,EAAUE,MAAM,CAACC,eAAe,IAEpC5P,EAAMgP,kBACN,MAEJ,IAAK,MAAO,CACR,MAAMF,EAAW,GAAAnS,KAAI,WAAU,KAAdA,MACbmS,GACAA,EAASa,MAAM,CAACC,eAAe,IAEnC5P,EAAMgP,kBACN,MAEJ,IAAK,QAAS,CACV,MAAM,WAACX,GAAc1R,KACjB0R,IACA,GAAA1R,KAAI,WAAc,KAAlBA,KAAmB0R,GACnBA,EAAW0B,SAEf/P,EAAMgP,kBACN,MAEJ,IAAK,SACD,GAAArS,KAAI,WAAgB,KAApBA,MACA,GAAAA,KAAI,WAAe,KAAnBA,KAAoB,MACpBA,KAAKgT,QACL3P,EAAMgP,oBAIjB,YAEiBhP,GACd,MAAM,cAACmP,GAAiBnP,GAClB,WAACqO,GAAc1R,KACjB0R,GAAcc,IAAkBd,GAChCA,EAAWsB,SAElB,YAEmB3P,GAChB,MAAM,OAACtE,GAAUsE,EACbtE,aAAkBqoB,IAClB,GAAApnB,KAAI,WAAe,KAAnBA,KAAoBjB,IAE3B,cAGQ,GAAAiB,KAAI,SACLA,KAAKoE,cAAc,IAAIiL,MAAM,kBAAmB,CAACC,SAAS,MAEjE,YAEsBjM,GACnB,MAAM,OAACtE,GAAUsE,EAC+CtE,EAC3D2P,mBACArH,QACGsH,GAAaA,aAAqByY,KAE5BvoB,SAAQ,CAACgH,EAAQM,KAC3BN,EAAOgJ,SAAW1I,OApbtB,GAAiB,EAAQ,aACVqI,QAAQ/H,OACnB,EAAQ,QAAS,CACb0D,SAAU,CACC,8BAKf,EAAQ,OAAQ,CACZA,SAAU,CACN,EAAQ,YAvBxB,IADCjC,EAAkB,CAAClJ,KAAMiK,U,4BAI1B,IADCf,EAAkB,CAAClJ,KAAMuJ,W,kCAZxBgf,GAAoB,IAHzBre,EAAc,CACXE,KAAM,YAEJme,IA+cN,I,GAAIC,GAAgDD,G,krBCndpD,IAAME,GAAN,cAAwCxoB,YAiBpCc,cACIsE,QAJJ,oBAMIrE,KAAKsO,aAAa,CAACC,KAAM,SAAS9H,OAC9B,EAAQ,QAAS,CACb0D,SAAU,CACC,+1CAsCf,EAAQ,MAAO,CACX9I,WAAY,CACR4O,KAAM,aAEV9F,SAAU,CACN,EAAQ,OAAQ,CACZA,SAAU,CACN,gBAOpBnK,KAAKyH,WAAa,GAClB,GAAAzH,KAAI,GAAY,KAAI,KAGxB,cACI,O,uSAAO,CAAAA,KAAI,QAGfkmB,oBACIlmB,KAAK4R,SAAW5R,KAAK4R,SACrB5R,KAAKqX,WAAY,EAGrBqQ,uBACI,GAAI1nB,KAAK2nB,QAAS,CACd,MAAMC,EAAe5nB,KAAK2nB,QAAQlgB,WAAW1B,QAAQ/F,MACjD4nB,GAAgB,GAChB5nB,KAAK2nB,QAAQlgB,WAAWvD,OAAO0jB,EAAc,IAKzDC,eACI,MAAM7gB,EAAkBhH,KAAKyO,WAAU,GAEvC,OADA,GAAAzH,EAAS,GAAYhH,KAAI,KAClBgH,I,eAjGX,IADCkB,EAAkB,CAAClJ,KAAMuJ,W,gCAI1B,IADCL,EAAkB,CAAClJ,KAAMuJ,W,kCAI1B,IADCL,EAAkB,CAAClJ,KAAMuJ,W,+BAI1B,IADCL,EAAkB,CAAClJ,KAAMuJ,W,gCAXxBkf,GAAyB,IAH9Bve,EAAc,CACXE,KAAM,iBAEJqe,IAwGN,I,MAAIK,GAA0DL,G,69BCzG9D,IAAMM,GAAN,cAAuC9oB,YAQnCc,cACIsE,QAJJ,oBACA,oBAKIrE,KAAKsO,aAAa,CAACC,KAAM,SAAS9H,OAC9B,EAAQ,QAAS,CACb0D,SAAU,CACC,4vBAwBf,EAAQ,MAAO,CACX9I,WAAY,CACR4O,KAAM,aAEV9F,SAAU,CACN,EAAQ,YAIpB,GAAAnK,KAAI,GAAe,GAAE,KACrB,GAAAA,KAAI,GAAuB,GAAE,KAGjC,iBACI,OAAO,GAAAA,KAAI,QAGf,yBACI,OAAO,GAAAA,KAAI,QAGfgoB,gBAAgB3Q,GACPrX,KAAKioB,mBAAmB1gB,SAAS8P,IAClCrX,KAAKioB,mBAAmBhnB,KAAKoW,GAE5BA,EAAU3G,WACX2G,EAAU3G,UAAW,GAI7BwX,kBAAkB7Q,GACd,MAAMrU,EAAQhD,KAAKioB,mBAAmBliB,QAAQsR,GAC1CrU,GAAS,IACLqU,EAAU3G,WACV2G,EAAU3G,UAAW,GAEzB1Q,KAAKioB,mBAAmB/jB,OAAOlB,EAAO,IAI9Ckd,iBACIlgB,KAAKioB,mBAAmBppB,SAASwY,IAC7BA,EAAU3G,UAAW,KAEzB,GAAA1Q,KAAI,GAAuB,GAAE,KAGjCkmB,oBACIlmB,KAAK4R,SAAW5R,KAAK4R,SAErB,MAAMhR,EAAOZ,KAAKqO,YAAYmB,cAAc,QACxC5O,GACAA,EAAKiD,iBAAiB,cAAc,KAChC,MAAMskB,EAAavnB,EAAK8N,mBAAmBrH,QACvC+gB,GAAQA,aAAgBN,KAE5B,GAAA9nB,KAAI,GAAemoB,EAAU,KAC7BnoB,KAAKmoB,WAAWtpB,SAASwY,IACrBA,EAAUA,WAAY,QAKlCrX,KAAK6D,iBAAiB,WAAYR,IAC9B,OAAQA,EAAM3F,KACV,IAAK,SACDsC,KAAKkgB,iBACLlgB,KAAKgT,YAKjBhT,KAAK6D,iBAAiB,aAAcR,IAChC,MAAMtE,EAASsE,EAAMtE,OACrB,GAAIiB,KAAKmoB,WAAW5gB,SAASxI,GAAS,CAClCiB,KAAKioB,mBAAmBppB,SAASwpB,IAC7BA,EAAsBC,SAAU,KAEpC,MAAMtQ,EAAe3U,EAAM2U,aACvBA,IACAA,EAAaY,WAAa,OAC1BZ,EAAaa,QAAQ,aAAc7Y,KAAKuoB,SAKpDvoB,KAAK6D,iBAAiB,aAAcR,IAChC,MAAM2U,EAAe3U,EAAM2U,aACvBA,IACAA,EAAaY,WAAa,WAIlC5Y,KAAK6D,iBAAiB,WAAYR,IAC9B,MAAMtE,EAASsE,EAAMtE,OACjBiB,KAAKmoB,WAAW5gB,SAASxI,IACKiB,KAAKmoB,WAAW9gB,QAAOgQ,GAAaA,EAAUiR,UACtDzpB,SAAS2pB,IAC3BA,EAAqBF,SAAU,QAK3CtoB,KAAK6D,iBAAiB,YAAaR,IAC/B,MAAMmP,EAAgBnP,EAAMmP,cACvBxS,KAAKyR,SAASe,IACfxS,KAAKkgB,oBAIblgB,KAAK6D,iBAAiB,aAAcR,IAChC,MAAMtE,EAASsE,EAAMtE,OACrB,GAAoB,GAAhBsE,EAAMia,OACN,GAAItd,KAAKmoB,WAAW5gB,SAASxI,GACzB,GAAKsE,EAAMyM,UAAazM,EAAM0M,SAMzB,GAAI1M,EAAM0M,QACThR,EAAO2R,SAEL1Q,KAAKkoB,kBAAkBnpB,GADvBiB,KAAKgoB,gBAAgBjpB,QAGxB,GAAIsE,EAAMyM,SACX,GAAI9P,KAAKioB,mBAAmBnlB,OAAS,EAAG,CACpC,MAAMikB,EAAc/mB,KAAKmoB,WAAWpiB,QAAQhH,GACtC0pB,EAAazoB,KAAKmoB,WAAWpiB,QAAQ/F,KAAKioB,mBAAmB,IAC7DS,EAAY/hB,KAAKgiB,KAAK5B,EAAc0B,GACpC3iB,EAAa4iB,EAAY,EAAK,EAAI1oB,KAAKmoB,WAAWrlB,OAAS,EAC3Dud,EAAWqI,EAAY,EAAK1oB,KAAKmoB,WAAWrlB,OAAS,EAAI,EACzD8lB,EAAmBF,EAAY,EAAKD,EAAa1B,EACjD8B,EAAiBH,EAAY,EAAK3B,EAAc0B,EACtD,IAAK,IAAIzlB,EAAQ8C,EAAW9C,IAAWqd,EAAUqI,EAAY1lB,GAAS0lB,EACjE1lB,GAAS4lB,GAAmB5lB,GAAS6lB,EAClC7oB,KAAKgoB,gBAAgBhoB,KAAKmoB,WAAWnlB,IACrChD,KAAKkoB,kBAAkBloB,KAAKmoB,WAAWnlB,SAI/ChD,KAAKgoB,gBAAgBjpB,QA1BpBA,EAAO2R,WACR1Q,KAAKkgB,iBACLlgB,KAAKgoB,gBAAgBjpB,SA6B7BiB,KAAKkgB,oBAKjBlgB,KAAK6D,iBAAiB,WAAYR,IAC9B,MAAMtE,EAASsE,EAAMtE,OACD,GAAhBsE,EAAMia,QACFtd,KAAKmoB,WAAW5gB,SAASxI,KACpBsE,EAAMyM,UAAazM,EAAM0M,SAC1B/P,KAAKmoB,WAAWtpB,SAASiqB,IACjBA,IAAkB/pB,GAClBiB,KAAKkoB,kBAAkBY,Y,8BAjMnD,IADC5gB,EAAkB,CAAClJ,KAAMuJ,W,gCAFxBwf,GAAwB,IAH7B7e,EAAc,CACXE,KAAM,gBAEJ2e,IA8MN,IAAIgB,GAAwDhB,G,uUC1L5D,IAAMiB,GAAN,cAAuCD,GAiBnChpB,cACIsE,QAEArE,KAAKqO,WAAYmB,cAAc,SAAU/I,OAAc,m0BA6BvDzG,KAAKqO,WAAW5H,OACZ,EAAQ,MAAO,CACXpF,WAAY,CACR4O,KAAM,cAEV9F,SAAU,CACN,EAAQ,OAAQ,CACZ9I,WAAY,CACR4O,KAAM,eAEV9F,SAAU,CACN,gBAOpBnK,KAAKipB,SAAW,KAGpB/C,oBACI7hB,MAAM6hB,oBACN,MAAMgD,EAAiBlpB,KAAKqO,WAAYmB,cAA8B,uBAEtExP,KAAK6D,iBAAiB,WAAYR,IAC9B,OAAQA,EAAM3F,KACV,IAAK,SACGsC,MAAQqD,EAAMtE,OACdiB,KAAKmpB,mBAGLnpB,KAAKmpB,kBAAiB9R,GAAaA,EAAU3G,WAEjDrN,EAAMgP,sBAKlBrS,KAAK6D,iBAAiB,YAAaR,IAC/BA,EAAMkP,oBAGVvS,KAAKqO,WAAYxK,iBAAiB,YAAaR,IAC3CA,EAAMkP,oBAGVvS,KAAK6D,iBAAiB,aAAcR,IAChC,MAAMtE,EAASsE,EAAMtE,OACjBiB,KAAKmoB,WAAW5gB,SAASxI,IACzBA,EAAOqqB,YAAa,EACpBppB,KAAKopB,WAAa,aAGlBppB,KAAKopB,WAAa,OAEtB/lB,EAAMkP,oBAGVvS,KAAKqO,WAAYxK,iBAAiB,aAAcR,IAC7BA,EAAMtE,QACPmqB,IACVlpB,KAAKopB,WAAa,cAEtB/lB,EAAMkP,oBAGVvS,KAAK6D,iBAAiB,aAAcR,IAChC,MAAMmP,EAAgBnP,EAAMmP,cACtBzT,EAASsE,EAAMtE,QACjBA,GAAUiB,MAAQA,KAAKmoB,WAAW5gB,SAASxI,MACvCA,GAAUiB,MACNkpB,IACAlpB,KAAKopB,WAAa,QAEjBppB,KAAKmoB,WAAW5gB,SAASiL,KAC1BxS,KAAKopB,WAAa,OAItBrqB,EAAOqqB,YAAa,GAG5B/lB,EAAMkP,oBAGVvS,KAAKqO,WAAYxK,iBAAiB,aAAcR,IAC7BA,EAAMtE,QACPmqB,IACVlpB,KAAKopB,WAAa,QAEtB/lB,EAAMkP,oBAGVvS,KAAK6D,iBAAiB,QAASR,IAC3B,MAAMtE,EAASsE,EAAMtE,OACrB,GAAIA,GAAUiB,MAAQA,KAAKmoB,WAAW5gB,SAASxI,GAAS,CACpD,IAAIsqB,EAAYrpB,KAAKmoB,WAAWrlB,OAC5B/D,GAAUiB,KACVA,KAAKopB,WAAa,MAGlBrqB,EAAOqqB,YAAa,EACpBC,EAAYrpB,KAAKmoB,WAAWpiB,QAAQhH,IAGxC,MAAMiZ,EAAe3U,EAAM2U,aAC3B,GAAIA,EAAc,CACd,MAAMsR,EAAatR,EAAamB,QAAQ,cAClCoQ,EAAWxf,SAASqc,eAAekD,GACzC,GAAIC,aAAoBR,GAAsB,CAC1C,MAAMd,EAAqBsB,EAAStB,mBAChCA,IACAA,EAAmBppB,SAAS2qB,IACxBA,EAAkBlB,SAAU,KAE5BiB,aAAoBE,IACpBF,EAASJ,kBAAkB9R,GAAc4Q,EAAmB1gB,SAAS8P,KAEzEkS,EAASrJ,iBACTlgB,KAAK0pB,cAAczB,EAAoBoB,MAKvDrpB,KAAKopB,WAAa,KAClB/lB,EAAMkP,oBAId3S,yBAAyBwJ,EAAczJ,EAAyBqC,GAC5D,OAAQoH,GACJ,IAAK,cAAe,CAChB,MAAMugB,EAAkB3pB,KAAKqO,WAAWmB,cAAc,wBAClDma,IACAA,EAAgBla,YAAczN,GAElC,QAKZ0nB,cAAcvB,EAAqClX,GAC/C,GAAIkX,EAAWrlB,OAAS,EAAG,CACvB,IAAI8mB,GAAsB,EACtB5pB,KAAKipB,WACLW,EAAsB5pB,KAAKipB,SAASjpB,KAAMmoB,IAG9C,IAAI0B,EAAyC,GACzCC,GAAqB,EACzB,GAAIF,EACA,GAAI5pB,KAAK+pB,SACL5B,EAAWtpB,SAASwY,IAChB,IAAI2S,EAAe3S,EAAUwQ,eACzB5W,GAAY,GAAKA,EAAWjR,KAAKmoB,WAAWrlB,QAC5C9C,KAAKmoB,WAAWlX,GAAUgZ,sBAAsB,cAAeD,GAC/DF,EAAqBA,EAAoB,EAAK7Y,EAAW6Y,IAGzD9pB,KAAKkqB,YAAYF,GACjBF,EAAqBA,EAAoB,EAAK9pB,KAAKmoB,WAAWrlB,OAAS,EAAIgnB,GAE/ED,EAAc5oB,KAAK+oB,UAGtB,CACD,IAAIA,EAAe7B,EAAW,GAAGN,eAC7B7nB,KAAKmoB,WAAWrlB,OAAS,EACzB9C,KAAKmqB,aAAaH,EAAchqB,KAAKmoB,WAAW,IAGhDnoB,KAAKkqB,YAAYF,GAErBH,EAAc5oB,KAAK+oB,GACnBF,EAAoB,EAI5B,MAAMlpB,EAAOZ,KAAKqO,YAAYmB,cAAc,QAa5C,OAZI5O,GACAA,EAAKiD,iBAAiB,cAAc,KAChC7D,KAAKoE,cAAc,IAAIkiB,YAAY,eAAgB,CAC/ChX,SAAS,EACTiX,OAAQ,CACJ6D,OAAQ,SACRjC,WAAY0B,EACZ5Y,SAAU6Y,QAGnB,CAACO,MAAM,IAEPR,EAEX,OAAO,KAGXV,iBAAiBmB,EAA0E,MAAM,IAC7F,IAAIC,EAAWvqB,KAAKmoB,WAAW9gB,QAC3B,CAAC9I,EAA8ByE,IACpBsnB,EAAU/rB,EAAOyE,KAG5BwnB,EAAaxqB,KAAKmoB,WAAWpiB,QAAQwkB,EAAS,IAClDA,EAAS1rB,SAASwY,IACdA,EAAUxQ,YAEd,MAAMjG,EAAOZ,KAAKqO,YAAYmB,cAAc,QACxC5O,GACAA,EAAKiD,iBAAiB,cAAc,KAChC7D,KAAKoE,cAAc,IAAIkiB,YAAY,eAAgB,CAC/ChX,SAAS,EACTiX,OAAQ,CACJ6D,OAAQ,SACRjC,WAAYoC,EACZtZ,SAAUuZ,QAGnB,CAACH,MAAM,MAzQlB,IADCniB,EAAkB,CAAClJ,KAAMiK,U,4BAI1B,IADCf,EAAkB,CAAClJ,KAAMiK,U,kCAI1B,IADCf,EAAkB,CAAClJ,KAAMiK,OAAQZ,UAAU,K,mCAI5C,IADCH,EAAkB,CAAClJ,KAAMuJ,W,gCAVxBygB,GAAwB,IAH7B9f,EAAc,CACXE,KAAM,gBAEJ4f,IAgRN,IAAIS,GAAwDT,G,uUC5R5D,IAAMyB,GAAN,cAAqCxrB,YASjCc,cACIsE,QAEArE,KAAKsO,aAAa,CAACC,KAAM,SAAS9H,OAC9B,EAAQ,QAAS,CACb0D,SAAU,CACC,imDA2Cf,EAAQ,MAAO,CACX9I,WAAY,CACR4O,KAAM,UAEV9F,SAAU,CACN,EAAQ,SAAU,CACd9I,WAAY,CACR4O,KAAM,sBACNjR,KAAM,SACN2X,SAAU,GAEdxM,SAAU,CACN,UAKhB,EAAQ,KAAM,CACV9I,WAAY,CACR4O,KAAM,eAGd,EAAQ,MAAO,CACX5O,WAAY,CACR4O,KAAM,QAEV9F,SAAU,CACN,EAAQ,WAGhB,EAAQ,KAAM,CACV9I,WAAY,CACR4O,KAAM,eAGd,EAAQ,MAAO,CACX5O,WAAY,CACR4O,KAAM,WAEV9F,SAAU,CACN,EAAQ,SAAU,CACd9I,WAAY,CACR4O,KAAM,uBACNjR,KAAM,SACN2X,SAAU,GAEdxM,SAAU,CACN,YAGR,EAAQ,SAAU,CACd9I,WAAY,CACR4O,KAAM,wBACNjR,KAAM,SACN2X,SAAU,GAEdxM,SAAU,CACN,aAGR,EAAQ,SAAU,CACd9I,WAAY,CACR4O,KAAM,mBACNjR,KAAM,SACN2X,SAAU,GAEdxM,SAAU,CACN,YAQxB+b,oBACIlmB,KAAKqO,WAAWxK,iBAAiB,QAAS7D,MAG9C0qB,YAAYrnB,GACR,MAAM,KAACrE,EAAI,OAAED,GAAUsE,EACvB,OAAQrE,GACJ,IAAK,QACD,MAAM,KAACiR,GAAiBlR,EACpBkR,EAAKwB,SAAS,iBAAmBxB,EAAKwB,SAAS,iBAC/CzR,KAAK2qB,UAEA1a,EAAKwB,SAAS,mBAAqBxB,EAAKwB,SAAS,eACtDzR,KAAK4qB,WAMrBC,OACI7qB,KAAKoE,cAAc,IAAIkiB,YAAY,OAAQ,CAAChX,SAAS,KAGzDwK,QACI9Z,KAAKoE,cAAc,IAAIkiB,YAAY,QAAS,CAAChX,SAAS,KAG1Dqb,SACI3qB,KAAKoE,cAAc,IAAIkiB,YAAY,SAAU,CAAChX,SAAS,KACvDtP,KAAK8Z,QAGT8Q,UACI5qB,KAAKoE,cAAc,IAAIkiB,YAAY,UAAW,CAAChX,SAAS,KACxDtP,KAAK8Z,UAhKT,IADC5R,EAAkB,CAAClJ,KAAMiK,U,4BANxBwhB,GAAsB,IAH3BvhB,EAAc,CACXE,KAAM,cAEJqhB,IA2KN,I,kBCxLI,G,69BAKJ,IAAMK,GAAN,cAAqC7rB,YAqCjCc,cACIsE,Q,aA/BJ,oBACA,oBA+BuBrE,KAAKsO,aAAa,CAACC,KAAM,SACjC9H,OACP,GAAe+H,QAAQC,WAAU,IAErC,GAAAzO,KAAI,GAAW,KAAI,KACnB,GAAAA,KAAI,IAAc,EAAK,KACvBA,KAAK6D,iBAAiB,cAAe,GAAA7D,KAAI,WAAyB2H,KAAK3H,OACvEA,KAAK6D,iBAAiB,cAAe,GAAA7D,KAAI,WAAyB2H,KAAK3H,OACvEA,KAAK6D,iBAAiB,YAAa,GAAA7D,KAAI,WAAuB2H,KAAK3H,OAGvEJ,yBAAyBwJ,EAAczJ,EAAyBqC,GAC5D,OAAQoH,GACJ,IAAK,WAAY,CACb,MAAM,SAACid,GAAYrmB,KACnB,GAAAA,KAAI,GAAW+J,SAASqc,eAAeC,GAAS,KAChD,U,yDAKUhjB,GAClB,MAAM,UAAC0nB,GAAa1nB,EACpBrD,KAAKgrB,sBAAsBD,GAC3B,GAAA/qB,KAAI,IAAc,EAAK,MAC1B,YAEuBqD,GACpB,MAAM,UAAC0nB,GAAa1nB,GACd,SAACgjB,GAAYrmB,KACnB,GAAAA,KAAI,GAAW+J,SAASqc,eAAeC,GAAS,KAChDrmB,KAAKirB,kBAAkBF,GACvB,GAAA/qB,KAAI,IAAc,EAAI,MACzB,YAEuBqD,GACpB,GAAI,GAAArD,KAAI,QAAa,CACjB,MAAMjB,EAAS,GAAAiB,KAAI,QACnB,GAAe,OAAXjB,EAAiB,CACjB,MAAMmsB,EAAsBjP,OAAOS,iBAAiB3d,IAC9C,UAACosB,EAAS,UAAEC,GAAa/nB,GACxBsY,MAAO0P,EAAWxP,OAAQyP,GAAcvsB,EAAO2c,wBAChD6P,EAAexsB,EAAOkQ,eAAiBlF,SAASgQ,MAElDuB,KAAMkQ,EAAehQ,MAAOiQ,EAC5BvQ,IAAKwQ,EAActQ,OAAQuQ,GAC3BJ,EAAa7P,wBACXJ,EAAOtS,WAAWkiB,EAAoBU,iBAAiB,SACvDC,EAAUllB,KAAK4Z,IAAIiL,EAAe7kB,KAAK2Z,IAAI3Z,KAAKmlB,MAAMxQ,EAAO6P,GAAYM,EAAiBJ,IAC1FnQ,EAAMlS,WAAWkiB,EAAoBU,iBAAiB,QACtDG,EAASplB,KAAK4Z,IAAImL,EAAc/kB,KAAK2Z,IAAI3Z,KAAKmlB,MAAM5Q,EAAMkQ,GAAYO,EAAkBL,IAC9FvsB,EAAO2Q,MAAMjK,YAAY,OAAQ,GAAGomB,OACpC9sB,EAAO2Q,MAAMjK,YAAY,MAAO,GAAGsmB,OACnC/rB,KAAKoE,cAAc,IAAIkiB,YAAY,aAjF3C,GAAiB,EAAQ,aACV9X,QAAQ/H,OACnB,EAAQ,QAAS,CACb0D,SAAU,CACC,6nBAVvB,IADCjC,EAAkB,CAAClJ,KAAMiK,OAAQZ,UAAU,K,gCAJ1CyiB,GAAsB,IAH3B5hB,EAAc,CACXE,KAAM,cAEJ0hB,IAkGN,I,2BCtGI,G,69BAKJ,IAAMkB,GAAN,cAAyC/sB,YAwDrCc,cACIsE,Q,aA3CJ,oBACA,oBACA,oBACA,oBAyCuBrE,KAAKsO,aAAa,CAACC,KAAM,SACjC9H,OACP,GAAe+H,QAAQC,WAAU,IAErC,GAAAzO,KAAI,GAAW,KAAI,KACnB,GAAAA,KAAI,GAA0B,KAAI,KAClC,GAAAA,KAAI,GAAoB,EAAC,KACzB,GAAAA,KAAI,IAAc,EAAK,KACvBA,KAAK6D,iBAAiB,cAAe,GAAA7D,KAAI,WAAyB2H,KAAK3H,OACvEA,KAAK6D,iBAAiB,cAAe,GAAA7D,KAAI,WAAyB2H,KAAK3H,OACvEA,KAAK6D,iBAAiB,YAAa,GAAA7D,KAAI,WAAuB2H,KAAK3H,OAhEvE,aACI,OAAO,GAAAA,KAAI,U,uFAkEOqD,GAClB,MAAM,UAAC0nB,GAAa1nB,EACpBrD,KAAKgrB,sBAAsBD,GAC3B,GAAA/qB,KAAI,IAAc,EAAK,MAC1B,YAEuBqD,GACpB,MAAM,UAAC0nB,GAAa1nB,GACd,SAACgjB,GAAYrmB,KACbisB,EAAkCjsB,KAAK0S,cAC7C,GAAA1S,KAAI,GAAWisB,EAAS7F,eAAeC,GAAS,KAChDrmB,KAAKirB,kBAAkBF,GACvB,GAAA/qB,KAAI,IAAc,EAAI,MACzB,YAEuBqD,GAChB,GAAArD,KAAI,UAC+B,MAA/B,GAAAA,KAAI,SACJ,GAAAA,KAAI,GAAoBqD,EAAM+nB,UAAS,KACvC,GAAAprB,KAAI,GAA0B,GAAAA,KAAI,WAAsB2H,KAAK3H,MAAK,KAClEksB,sBAAsB,GAAAlsB,KAAI,UAG1B,GAAAA,KAAA,MAAAA,KAAA,QAAyBqD,EAAM+nB,UAAS,OAGnD,cAGG,MAAMrsB,EAAS,GAAAiB,KAAI,QACnB,GAAe,OAAXjB,EAAiB,CACjB,MAAMmsB,EAAsBjP,OAAOS,iBAAiB3d,IAC9C,QAACotB,GAAWnsB,KACZorB,EAAY,GAAAprB,KAAI,QAChB6b,EAAS7S,WAAWkiB,EAAoBU,iBAAiB,WACzDQ,EAAYzlB,KAAKmlB,MAAMjQ,GAAqB,OAAXsQ,GAAoB,EAAI,GAAKf,GACpErsB,EAAO2Q,MAAMjK,YAAY,SAAU,GAAG2mB,OACtC,MAAMC,EAAoBrjB,WAAWkiB,EAAoBU,iBAAiB,WAC1E7sB,EAAO2Q,MAAMjK,YAAY,SAAU,GAAG4mB,OACtCrsB,KAAKoE,cAAc,IAAIiL,MAAM,WAEjC,GAAArP,KAAI,GAA0B,KAAI,OA5FlC,GAAiB,EAAQ,aACVwO,QAAQ/H,OACnB,EAAQ,QAAS,CACb0D,SAAU,CACC,igCAfvB,IADCjC,EAAkB,CAAClJ,KAAMiK,U,gCAI1B,IADCf,EAAkB,CAAClJ,KAAMiK,OAAQb,aAAc,S,+BAX9C4jB,GAA0B,IAH/B9iB,EAAc,CACXE,KAAM,aAEJ4iB,IAoHN,I,6UCzHA,IAAMM,GAAN,cAAqCrtB,YAArC,c,iCAKIinB,oBACI,MAAM,IAACqG,GAAOvsB,KACVusB,G,uSACA,CAAAvsB,KAAI,WAAe,KAAnBA,KAAoBusB,K,kBAI5BhO,eAAqBgO,GACjBvsB,KAAKwsB,gBAAkBC,MAAMF,GAAKxN,MAAM2N,IACpC,GAAIA,EAASC,GACT,OAAOD,EAASE,OAGhB,MAAM,IAAIprB,MAAMkrB,EAASG,eAGjC7sB,KAAKoE,cAAc,IAAIiL,MAAM,OAAQ,CAACC,SAAS,MAlBnD,IADCpH,EAAkB,CAAClJ,KAAMiK,U,2BAFxBqjB,GAAsB,IAH3BpjB,EAAc,CACXE,KAAM,cAEJkjB,IAyBN,I,SC7BIQ,GACAC,G,69BAKJ,IAAMC,GAAN,cAAqC/tB,YA8KjCc,cACIsE,Q,aAxKJ,oBAyKIrE,KAAKsO,aAAa,CAACC,KAAM,SACzB,GAAAvO,KAAI,WAAgB,KAApBA,MACA,GAAAA,KAAI,GAAY,KAAI,KAGxBJ,yBAAyBwJ,EAAczJ,EAAyBqC,GAC5D,OAAQoH,GACJ,IAAK,OACD,GAAApJ,KAAI,WAAgB,KAApBA,OAMZ,YAAYitB,GACJA,GACAA,EAAQC,SAAQ,KACZltB,KAAK6G,YAGb,GAAA7G,KAAI,GAAYitB,EAAO,KAG3B,cACI,OAAO,GAAAjtB,KAAI,U,4CAIX,MAAM,KAAChB,EAAI,WAAEqP,GAAcrO,KAC3B,OAAQhB,GACJ,IAAK,SACDqP,EAAWuF,gBACPmZ,GAAqBve,QAAQC,WAAU,IAE3C,MAEJ,IAAK,MACDJ,EAAWuF,gBACPkZ,GAAkBte,QAAQC,WAAU,MA7MpD,MACI,MAAM0e,EAAc,EAAQ,QAAS,CACjChjB,SAAU,CACC,0PASTijB,EAAWD,EAAY1e,WAAU,GACjC4e,EAAcF,EAAY1e,WAAU,GAC1C2e,EAAS3d,aAAsB,iqFAyF/B4d,EAAY5d,aAAsB,y6BA4BlCqd,GAAoB,EAAQ,aACVte,QAAQ/H,OACtB2mB,EACA,EAAQ,MAAO,CACX/rB,WAAY,CACR4O,KAAM,OAEV9F,SAAU,CACN,EAAQ,MAAO,CACX9I,WAAY,CACR4O,KAAM,UAEV9F,SAAU,CACN,EAAQ,MAAO,CACX9I,WAAY,CACR4O,KAAM,oBAQlC8c,GAAuB,EAAQ,aACVve,QAAQ/H,OACzB4mB,EACA,EAAQ,MAAO,CACXhsB,WAAY,CACR4O,KAAM,cA/JtB,GAJA,IADC/H,EAAkB,CAAClJ,KAAMiK,OAAQb,aAAc,MAAOC,UAAU,K,4BAJ/D2kB,GAAsB,IAH3B9jB,EAAc,CACXE,KAAM,cAEJ4jB,IA8NN,I,2BC9NI,G,69BAKJ,IAAMM,GAAN,cAAwCruB,YAqDpCc,cACIsE,Q,aArCJ,oBACA,oBACA,oBACA,oBAmCuBrE,KAAKsO,aAAa,CAACC,KAAM,SACjC9H,OACP,GAAe+H,QAAQC,WAAU,IAErC,GAAAzO,KAAI,GAAW,KAAI,KACnB,GAAAA,KAAI,GAA0B,KAAI,KAClC,GAAAA,KAAI,GAAoB,EAAC,KACzB,GAAAA,KAAI,IAAc,EAAK,KACvBA,KAAK6D,iBAAiB,cAAe,GAAA7D,KAAI,WAAyB2H,KAAK3H,OACvEA,KAAK6D,iBAAiB,cAAe,GAAA7D,KAAI,WAAyB2H,KAAK3H,OACvEA,KAAK6D,iBAAiB,YAAa,GAAA7D,KAAI,WAAuB2H,KAAK3H,OA7DvE,aACI,OAAO,GAAAA,KAAI,QA+DfutB,SAAS5R,GACL,MAAM5c,EAAS,GAAAiB,KAAI,QACnB,GAAe,OAAXjB,EAAiB,CACjB,MAAM,IAACwhB,GAAOvgB,KACdjB,EAAO2Q,MAAMjK,YAAY,QAAS,GAAGkW,OACjC4E,GACAxhB,EAAO2Q,MAAMjK,YAAY,YAAa,GAAGkW,U,uFAK/BtY,GAClB,MAAM,UAAC0nB,GAAa1nB,EACpBrD,KAAKgrB,sBAAsBD,GAC3B,GAAA/qB,KAAI,IAAc,EAAK,MAC1B,YAEuBqD,GACpB,MAAM,UAAC0nB,GAAa1nB,GACd,SAACgjB,GAAYrmB,KACbisB,EAAkCjsB,KAAK0S,cAC7C,GAAA1S,KAAI,GAAWisB,EAAS7F,eAAeC,GAAS,KAChDrmB,KAAKirB,kBAAkBF,GACvB,GAAA/qB,KAAI,IAAc,EAAI,MACzB,YAEuBqD,GAChB,GAAArD,KAAI,UAC+B,MAA/B,GAAAA,KAAI,UACJ,GAAAA,KAAI,GAA0B,GAAAA,KAAI,WAAsB2H,KAAK3H,MAAK,KAClEksB,sBAAsB,GAAAlsB,KAAI,UAE9B,GAAAA,KAAA,MAAAA,KAAA,QAAyBqD,EAAM8nB,UAAS,OAE/C,cAGG,MAAMpsB,EAAS,GAAAiB,KAAI,QACnB,GAAe,OAAXjB,EAAiB,CACjB,MAAMmsB,EAAsBjP,OAAOS,iBAAiB3d,IAC9C,QAACotB,GAAWnsB,KACZmrB,EAAY,GAAAnrB,KAAI,QAEhBwtB,EADQxkB,WAAWkiB,EAAoBU,iBAAiB,WACzB,SAAXO,EAAqB,GAAK,GAAKhB,EACzDnrB,KAAKutB,SAASC,GACdxtB,KAAKoE,cAAc,IAAIiL,MAAM,WAEjC,GAAArP,KAAI,GAAoB,EAAC,KACzB,GAAAA,KAAI,GAA0B,KAAI,OA7FlC,GAAiB,EAAQ,aACVwO,QAAQ/H,OACnB,EAAQ,QAAS,CACb0D,SAAU,CACC,myBAlBvB,IADCjC,EAAkB,CAAClJ,KAAMiK,OAAQZ,UAAU,K,gCAI5C,IADCH,EAAkB,CAAClJ,KAAMiK,OAAQb,aAAc,W,+BAIhD,IADCF,EAAkB,CAAClJ,KAAMuJ,W,2BAdxB+kB,GAAyB,IAH9BpkB,EAAc,CACXE,KAAM,aAEJkkB,IAwHN,I,2VC9BA,I,qUC3GsB,IACtB/jB,EAAO,CACHH,KAAM,aAFgB,EAGxB,GAAC,cAAqCtJ,EAGpCC,cACIsE,QAHJ,oB,+VAII,CAAArE,KAAI,GAAa,EAAQ,MAAO,CAC5BqB,WAAY,CACR6V,MAAO,YACPuW,KAAM,eAEZ,KAGNxtB,SACI,O,uSAAoB,CAAAD,KAAI,QAAWyO,WAAU,K,yqBCcjDif,GAAiB,IACrBnkB,EAAO,CACHH,KAAM,YAFc,EAGtB,GACF,cAAwCtJ,EAcpCC,cACIsE,Q,aAdJ,oBACA,oBACA,oBACA,oBACA,oBACA,oBAUI,GAAArE,KAAI,GAAqB,EAAQ,OAAQ,CACrCqB,WAAY,CACR6V,MAAO,UAEb,KACF,GAAAlX,KAAI,GAAsB,EAAQ,OAAQ,CACtCqB,WAAY,CACR6V,MAAO,WAEb,KACF,GAAAlX,KAAI,GAA6B,EAAQ,OAAQ,CAC7CqB,WAAY,CACR6V,MAAO,kBAEb,KACF,GAAAlX,KAAI,GAAa,EAAQ,SAAU,CAC/BqB,WAAY,CACR6V,MAAO,WACPuW,KAAM,WACNzuB,KAAM,SACN2X,UAAW,GAEfxM,SAAU,CACN,GAAAnK,KAAI,QAAmByO,WAAU,GACjC,EAAQ,OAAQ,CACZpN,WAAY,CACR6V,MAAO,cAIrB,KACF,GAAAlX,KAAI,GAAU,CAAC,WAAY,QAAS,OAAQ,UAAW,UAAS,KAChE,GAAAA,KAAI,GAAkB,CAClBsd,OAAQ,CACJmQ,KAAM,WACNE,SAAS,EACTC,UAAU,GAEdrQ,SAAU,CACNkQ,KAAM,mBACNE,SAAS,EACTC,UAAU,GAEdpQ,MAAO,CACHiQ,KAAM,gBACNE,SAAS,EACTC,UAAU,GAEdhU,KAAM,CACF6T,KAAM,WACNE,SAAS,EACTC,UAAU,GAEdnQ,QAAS,CACLgQ,KAAM,WACNE,SAAS,EACTC,UAAU,IAEjB,KAGL3tB,OAAO4B,GASH,MAAMkB,EAAoB,GAAA/C,KAAI,QAAWyO,WAAU,GAEnD,GADA1L,EAAKc,iBAAiB,QAAS,GAAA7D,KAAI,WAAmB2H,KAAK3H,YAC9C,IAAT6B,EAAiB,CACjB,MAAM,YAACgsB,EAAW,QAAEhW,EAAO,KAAE7Y,EAAI,MAAEqV,EAAK,KAAEjL,EAAI,MAAE7K,EAAK,SAAE4b,GAAYtY,OAC/C,IAAhBgsB,GACA7tB,KAAK8tB,eAAe/qB,EAAM8qB,QAEd,IAAZhW,GACA7X,KAAK+tB,WAAWhrB,EAAM8U,QAEb,IAAT7Y,GACAgB,KAAKguB,QAAQjrB,EAAM/D,QAET,IAAVqV,GACArU,KAAKiuB,SAASlrB,EAAMsR,QAEX,IAATjL,GACApJ,KAAKkuB,QAAQnrB,EAAMqG,QAET,IAAV7K,GACAyB,KAAKmuB,SAASprB,EAAMxE,QAEP,IAAb4b,GACAna,KAAKouB,YAAYrrB,EAAMoX,GAG/B,OAAOpX,EAGXnC,KAAKa,EAAmB2H,GACpB,OAAO3H,EAGXnC,gBAAgByD,EAAmBnC,GAC/B,MAAMytB,EAAettB,MAAM4J,KAAK/J,EAAK6I,YAAY8O,MAC7C+V,GAAeA,aAAuBrvB,aAAeqvB,EAAYC,UAAU9c,SAAS,UAExF1O,EAAK0F,aAAa,gBAAiB4lB,EAAalmB,YAWpDqmB,QAAQzrB,GACJ,OAAOA,EAAKyM,cAA2B,kBAG3Cif,eAAe1rB,GACX,OAAOA,EAAKlD,aAAa,qBAG7BiuB,eAAe/qB,EAAmBxE,GAC9B,IAAImwB,EAAmB3rB,EAAKyM,cAAc,0BAC1C,GAAc,OAAVjR,EAAgB,CAEhB,GADAwE,EAAK0F,aAAa,oBAAqBlK,IAClCmwB,EAAkB,CACnB,MAAMnf,EAAY,GAAAvP,KAAI,WAAO,KAAXA,KAAY+C,GAE9B2rB,EADiC,GAAA1uB,KAAI,QACoByO,WAAU,GACnEc,EAAUof,MAAMD,GAEpBA,EAAiBjf,YAAclR,OAG/BwE,EAAK2F,gBAAgB,qBACjBgmB,GACAA,EAAiB7nB,SAK7B+nB,SAAS7rB,GACL,OAAO,GAAA/C,KAAI,WAAO,KAAXA,KAAY+C,GAAM0M,aAAe,GAG5Cwe,SAASlrB,EAAmBxE,GACxB,GAAAyB,KAAI,WAAO,KAAXA,KAAY+C,GAAM0M,YAAclR,EAGpCswB,QAAQ9rB,GACJ,MAAM+rB,EAAQ,GAAA9uB,KAAI,SACZ,UAACuuB,GAAaxrB,EACpB,IAAK,IAAIgsB,KAAUD,EACf,GAAIP,EAAU9c,SAAS,YAAYsd,KAC/B,OAAOA,EAGf,OAAO,KAGXf,QAAQjrB,EAAmB/D,GACvB,MAAMgwB,EAAgB,GAAAhvB,KAAI,QACpBivB,EAAmB,GAAAjvB,KAAI,QACvBkvB,EAAoB,GAAAlvB,KAAI,SACxB,KAACytB,EAAI,QAAEE,EAAO,SAAEC,GAAYoB,EAAchwB,GAC1CmwB,EAAUnvB,KAAK6uB,QAAQ9rB,IACvB,UAACwrB,GAAaxrB,EAChBosB,GACAZ,EAAU1nB,OAAO,YAAYsoB,KAEjCZ,EAAUa,IAAI,YAAYpwB,KAC1B+D,EAAK0F,aAAa,OAAQglB,GAC1B,MAAMle,EAAY,GAAAvP,KAAI,WAAO,KAAXA,KAAY+C,GACxBssB,EAAWtsB,EAAKyM,cAAc,kBAC9B8f,EAAYvsB,EAAKyM,cAAc,mBACjCme,GACK0B,GAAY9f,GACbA,EAAUrC,OAAO+hB,EAAiBxgB,WAAU,IAI5C4gB,GACAA,EAASxoB,SAGb+mB,GACK0B,GAAa/f,GACdA,EAAUof,MAAMO,EAAkBzgB,WAAU,IAI5C6gB,GACAA,EAAUzoB,SAKtB0oB,SAASxsB,GACL,OAAOA,EAAKlD,aAAa,UAAY,GAGzCsuB,SAASprB,EAAmBxE,GACxBwE,EAAK0F,aAAa,QAASlK,GAG/BixB,QAAQzsB,GACJ,OAAOA,EAAKlD,aAAa,SAAW,GAGxCquB,QAAQnrB,EAAmBxE,GACvBwE,EAAK0F,aAAa,OAAQlK,GAG9BkxB,WAAW1sB,GACP,OAAO6F,KAAKC,MAAM9F,EAAKlD,aAAa,mBAAmB,GAAMsI,YAGjE4lB,WAAWhrB,EAAmBxE,GAC1BwE,EAAK0F,aAAa,eAAgBlK,EAAM4J,YAG5CunB,YAAY3sB,GACR,OAAOA,EAAKyF,aAAa,iBAG7B4lB,YAAYrrB,EAAmBxE,GAC3BwE,EAAKyH,gBAAgB,gBAAiBjM,GAG1CoxB,YAAY5sB,EAAmBxE,GAC3BwE,EAAKyH,gBAAgB,gBAAiBjM,GAG1CqxB,YAAY7sB,GACR,OAAOA,EAAKyF,aAAa,iBAG7BmH,OAAO5M,EAAmB6M,GACtB,MAAMmL,EAASnL,IAAU5P,KAAK4vB,YAAY7sB,GAC1C/C,KAAK2vB,YAAY5sB,EAAMgY,GACnBA,GACA,GAAA/a,KAAI,WAAc,KAAlBA,KAAmB+C,GAI3BgY,OAAOhY,GACc/C,KAAK4vB,YAAY7sB,KAE9B/C,KAAK2vB,YAAY5sB,GAAM,GACvB,GAAA/C,KAAI,WAAc,KAAlBA,KAAmB+C,IAI3BiY,SAASjY,GACY/C,KAAK4vB,YAAY7sB,IAE9B/C,KAAK2vB,YAAY5sB,GAAM,K,qHAvJxBA,GACH,MAAMsR,EAAQtR,EAAKyM,cAA2B,mBAC9C,IAAK6E,EACD,MAAM,IAAI7S,MAAM,mBAEpB,OAAO6S,G,YAsJOhR,GACd,MAAM,OAACtE,EAAM,cAAEuE,GAAiBD,EAC1B4V,EAAwCla,EAAQmQ,QAAQ,aAC9D,GAAI+J,GAAc3V,EAEd,OADatD,KAAK6uB,QAAQ5V,IAEtB,IAAK,WACDjZ,KAAK+tB,WAAW9U,GAAajZ,KAAKyvB,WAAWxW,IAC7C,MAEJ,IAAK,QACDjZ,KAAK+tB,WAAW9U,GAAY,GAC5B,MAEJ,IAAK,OACL,IAAK,UACDjZ,KAAK2P,OAAOsJ,K,YAOdlW,GACV,MAAM6W,EAAO5Z,KAAKwuB,QAAQzrB,GAC1B,GAAa,OAAT6W,EAAe,CACf,MAAOlK,MAAOuL,GAAarB,GACpBsB,IAAKC,EAASC,OAAQC,EAAYC,KAAMC,EAAUC,MAAOC,GAAa1Y,EAAK2Y,yBAC3EC,MAAOC,EAAWC,OAAQC,GAAclC,EAAK8B,yBAC9C,QAACK,EAAO,QAAEC,GAAWC,QACrB,YAACC,EAAW,aAAEC,GAAgBpS,SAASgQ,KAE7C,GAAY,QADC/Z,KAAK6uB,QAAQ9rB,GACN,CAChB,MAAMqZ,EAAYX,EAAYG,EAAYM,EACpCG,EAAYlB,EAAUW,EAAaK,EACzClB,EAAUxV,YAAY,OAAQ,GAC1B2W,EAAY,EACZJ,EAAUT,EAAWK,EACrBI,EAAUT,OAEdN,EAAUxV,YAAY,MAAO,GACzB4W,EAAY,EACZN,EAAUZ,EAAUW,EACpBC,EAAUV,WAGb,CACD,MAAMiB,EAAcvZ,EAAKmM,QAAQ,SACjC,GAAoB,OAAhBoN,EAAsB,CACtB,MAAOpB,IAAKqB,EAAgBjB,KAAMkB,GAAmBF,EAAYZ,wBAC3DU,EAAYX,EAAYG,EAAYM,EACpCG,EAAYlB,EAAUW,EAAaK,EACzClB,EAAUxV,YAAY,QAClB2W,EAAY,EACZb,EAAWK,EAAYY,EACvBf,EAAYe,GAHc,MAK9B,MAAMC,EAAoBR,OAAOS,iBAAiB9C,IAC5C,WAAC+C,EAAU,cAAEC,GAAiBH,EAC9BI,EAAiB7T,WAAW2T,GAC5BG,EAAoB9T,WAAW4T,GACrC3B,EAAUxV,YAAY,MAAO,GACzB4W,EAAY,EACZhB,EAAaS,EAAaS,EAAiBO,EAC3C3B,EAAUoB,EAAiBM,W,gqBC3X/B,IACpBtT,EAAO,CACHH,KAAM,WAFc,EAGtB,GAAC,cAAuCtJ,EAItCC,cACIsE,Q,aAJJ,oBACA,oBAII,GAAArE,KAAI,GAAa,EAAQ,MAAO,CAC5BqB,WAAY,CACR6V,MAAO,UACPuW,KAAM,UACN9W,SAAU,KAEhB,KACF,GAAA3W,KAAI,GAAW+J,SAASoG,iBACpBpG,SAAUqG,WAAWC,aAAc,GAAArQ,KAAI,WAAmB2H,KAAK3H,OAClE,KAGLC,SACI,MAAM4vB,EAAuB,GAAA7vB,KAAI,QAAWyO,WAAU,GAOtD,OANAohB,EAAQhsB,iBAAiB,QAAS,GAAA7D,KAAI,WAAmB2H,KAAK3H,OAC9D6vB,EAAQhsB,iBAAiB,UAAW,GAAA7D,KAAI,WAAqB2H,KAAK3H,OAClE6vB,EAAQhsB,iBAAiB,WAAY,GAAA7D,KAAI,WAAsB2H,KAAK3H,OACpE6vB,EAAQhsB,iBAAiB,YAAa,GAAA7D,KAAI,WAAuB2H,KAAK3H,OACtE6vB,EAAQhsB,iBAAiB,UAAW,GAAA7D,KAAI,WAAqB2H,KAAK3H,OAE3D6vB,EAGXF,YAAYE,EAAsBtxB,GAC9BsxB,EAAQrlB,gBAAgB,gBAAiBjM,GAG7CqxB,YAAYC,GACR,OAAOA,EAAQrnB,aAAa,mB,yDAGdrD,GACd,GAAIA,aAAgBlG,YAAa,CAC7B,MAAM,UAACsvB,GAAappB,EACpB,GAAIopB,EAAU9c,SAAS,cAAgBic,GAAegC,YAAYvqB,GAC9D,OAAOiL,WAAWS,cAEjB,GAAI0d,EAAU9c,SAAS,iBACxB,OAAOrB,WAAWU,YAG1B,OAAOV,WAAWW,e,YAGP8e,GACX,OAAOA,EAAQrgB,cACX,kE,YAIGqgB,GACP,MAAMrf,EAAS,GAAAxQ,KAAI,QAEnB,OADAwQ,EAAOC,YAAcof,EACMrf,EAAO1D,c,YAG5B+iB,GACN,MAAMrf,EAAS,GAAAxQ,KAAI,QAEnB,OADAwQ,EAAOC,YAAcof,EACMrf,EAAOuB,a,YAGxBhP,GACV,MAAMyN,EAAS,GAAAxQ,KAAI,QAEnB,OADAwQ,EAAOC,YAAc1N,EACMyN,EAAOwB,mB,YAG5BjP,GACN,MAAMyN,EAAS,GAAAxQ,KAAI,QAEnB,OADAwQ,EAAOC,YAAc1N,EACMyN,EAAO0B,e,YAGtBnP,GACZ,MAAM6W,EAAO8T,GAAec,QAAQzrB,GACpC,GAAI6W,EAAM,CACN,MAAMpJ,EAAS,GAAAxQ,KAAI,QAEnB,OADAwQ,EAAOC,YAAcmJ,EACMpJ,EAAO1D,aAEtC,OAAO,M,YAGI+iB,EAAsB9wB,GACjC,OAAOA,EAAOmQ,QAAQ,yBAA2B2gB,G,YAGxCA,EAAsB9wB,GAC/B,OAAOgC,MAAM4J,KAAKklB,EAAQ3R,iBACtB,qDACDC,MAAKtY,GAAUA,EAAO4L,SAAS1S,MAAY,M,YAG9BsE,GAChB,MAAM,OAACtE,EAAM,cAAEuE,GAAiBD,EAC1BwsB,EAAuBvsB,EAC7B,GAAIvE,aAAkBE,aAAee,KAAK4vB,YAAYC,GAAU,CAC5D,MAAMxR,EAAc,GAAAre,KAAI,WAAa,KAAjBA,KAAkB6vB,EAAS9wB,GAC3Csf,GACAqP,GAAe3S,OAAOsD,K,YAKbhb,GACjB,MAAM,OAACtE,EAAM,cAAEuE,EAAa,cAAEkP,GAAiBnP,EACzCwsB,EAAuBvsB,EAC7B,GAAIvE,aAAkBE,cAAgBF,EAAO0S,SAAkBe,GAAgB,CAC3E,MAAM6L,EAAc,GAAAre,KAAI,WAAa,KAAjBA,KAAkB6vB,EAAS9wB,GAC3Csf,GACAqP,GAAe1S,SAASqD,IAGPwR,EAAQpe,SAAee,IAE5CxS,KAAK2vB,YAAYE,GAAS,I,YAIZxsB,GAClB,MAAM,OAACtE,EAAM,cAAEuE,GAAiBD,EAC1BwsB,EAAuBvsB,EAC7B,GAAIvE,aAAkBE,aAAeF,EAAOwvB,UAAU9c,SAAS,YAAa,CACxE,MAAMC,EAAa,GAAA1R,KAAI,WAAe,KAAnBA,KAAoB6vB,GACjChgB,EAAW7P,KAAK4vB,YAAYC,GAElC,GADsB,GAAA7vB,KAAI,WAAe,KAAnBA,KAAoB6vB,EAAS9wB,IAC9BA,IAAW2S,GAAc7B,EAAU,CACpD,MAAM+J,EAAO8T,GAAec,QAAQzvB,GAChC6a,EACAA,EAAK5G,MAAM,CAACC,eAAe,IAG3BlU,EAAOiU,MAAM,CAACC,eAAe,O,YAM3B5P,GACd,MAAM,OAACtE,EAAM,cAAEuE,GAAiBD,EAC1BwsB,EAAuBvsB,EACvBoO,EAAa,GAAA1R,KAAI,WAAe,KAAnBA,KAAoB6vB,GACjChgB,EAAW7P,KAAK4vB,YAAYC,GAClC,GAAI9wB,aAAkBE,aAAeF,EAAOwvB,UAAU9c,SAAS,aACrC,GAAAzR,KAAI,WAAe,KAAnBA,KAAoB6vB,EAAS9wB,GAChC,CACf,MAAM2jB,GAAc7S,EACpB7P,KAAK2vB,YAAYE,EAASnN,GACtBA,GACmB,OAAfhR,GAAwBgc,GAAekC,YAAYle,IACnDgc,GAAe3S,OAAOrJ,GAEbgc,GAAec,QAAQzvB,IAC9BiU,MAAM,CAACC,eAAe,KAG5B4c,EAAQ7c,MAAM,CAACC,eAAe,M,YAM1B5P,GAChB,MAAM,IAAC3F,EAAG,cAAE4F,GAAiBD,EACvBwsB,EAAuBvsB,EAC7B,IAAIoO,EAAa,GAAA1R,KAAI,WAAe,KAAnBA,KAAoB6vB,GACrC,MAAMhgB,EAAW7P,KAAK4vB,YAAYC,GAClC,OAAQnyB,GACJ,IAAK,aACoBgU,EACjB,GAAA1R,KAAI,WAAc,KAAlBA,KAAmB0R,IAAe,GAAA1R,KAAI,WAAU,KAAdA,KAAe6vB,GACjD,GAAA7vB,KAAI,WAAW,KAAfA,KAAgB6vB,KACN7c,MAAM,CAACC,eAAe,IACpCvB,EAAa,GAAA1R,KAAI,WAAe,KAAnBA,KAAoB6vB,GAC7BhgB,GAAY6B,GACW,GAAA1R,KAAI,WAAgB,KAApBA,KAAqB0R,IAC5BsB,MAAM,CAACC,eAAe,IAE1C,MAEJ,IAAK,cACgBvB,EACb,GAAA1R,KAAI,WAAU,KAAdA,KAAe0R,IAAe,GAAA1R,KAAI,WAAW,KAAfA,KAAgB6vB,GAC9C,GAAA7vB,KAAI,WAAU,KAAdA,KAAe6vB,KACT7c,MAAM,CAACC,eAAe,IAChCvB,EAAa,GAAA1R,KAAI,WAAe,KAAnBA,KAAoB6vB,GAC7BhgB,GAAY6B,GACW,GAAA1R,KAAI,WAAgB,KAApBA,KAAqB0R,IAC5BsB,MAAM,CAACC,eAAe,IAE1C,MAEJ,IAAK,QACL,IAAK,IACGvB,IACA1R,KAAK2vB,YAAYE,GAAUhgB,GACJ,GAAA7P,KAAI,WAAgB,KAApBA,KAAqB0R,IAC5BsB,MAAM,CAACC,eAAe,IACtC5P,EAAMkP,kBAEV,MAEJ,IAAK,SACG1C,GACA7P,KAAK2vB,YAAYE,GAAS,GACtBne,IACAgc,GAAe1S,SAAStJ,GACxBA,EAAWsB,MAAM,CAACC,eAAe,MAIrC4c,EAAQ7c,MAAM,CAACC,eAAe,M,0pBCpN9C6c,GAAa,IACjBvmB,EAAO,CACHH,KAAM,QAFW,EAGnB,GAAC,cAAoCtJ,EAMnCC,cACIsE,Q,aALJ,oBACA,oBACA,oBAII,GAAArE,KAAI,GAAa,EAAQ,MAAO,CAC5BqB,WAAY,CACR6V,MAAO,OACPuW,KAAM,OACN9W,UAAW,KAEjB,KACF,GAAA3W,KAAI,GAAW+J,SAASoG,iBACpBpG,SAAUqG,WAAWC,aAAc,GAAArQ,KAAI,WAAmB2H,KAAK3H,OAClE,KACD,GAAAA,KAAI,GAAmB,IAAIvB,QAAS,KAGxCwB,OAAO4B,GAGH,MAAM+X,EAAoB,GAAA5Z,KAAI,QAAWyO,WAAU,GAOnD,GANAmL,EAAK/V,iBAAiB,QAAS,GAAA7D,KAAI,WAAmB2H,KAAK3H,OAC3D4Z,EAAK/V,iBAAiB,YAAa,GAAA7D,KAAI,WAAuB2H,KAAK3H,OACnE4Z,EAAK/V,iBAAiB,WAAY,GAAA7D,KAAI,WAAsB2H,KAAK3H,OACjE4Z,EAAK/V,iBAAiB,WAAY,GAAA7D,KAAI,WAAsB2H,KAAK3H,OACjE4Z,EAAK/V,iBAAiB,UAAW,GAAA7D,KAAI,WAAqB2H,KAAK3H,YAElD,IAAT6B,EAAiB,CACjB,MAAM,WAACgY,GAAchY,OACF,IAAfgY,GACA7Z,KAAK+vB,cAAcnW,EAAMC,GAGjC,OAAOD,EAGXI,mBAAmBJ,EAAmBoE,EAAWC,GAC7C,MAAM,MAACvO,GAASkK,GACT+B,MAAOC,EAAWC,OAAQC,GAAclC,EAAK8B,yBAC9C,QAACM,EAAO,QAAED,GAAWE,OACrBX,EAAO0C,EAAIhC,EACXd,EAAM+C,EAAIlC,GACV,YAACG,EAAW,aAAEC,GAAgBpS,SAASgQ,KACvCqC,EAAYd,EAAOM,EAAYM,EAC/BG,EAAYnB,EAAMY,EAAaK,EACrCzM,EAAMjK,YAAY,OAAQ,GAAG2W,EAAY,EAAId,EAAOM,EAAYN,OAChE5L,EAAMjK,YAAY,MAAO,GAAG4W,EAAY,EAAInB,EAAMY,EAAaZ,OAGnE8U,cAAcpW,GACV,MAAM,UAAC2U,GAAa3U,EACpB,OAAO2U,EAAU9c,SAAS,mBAG9Bse,cAAcnW,EAAmBrb,GAC7B,MAAM,UAACgwB,GAAa3U,EAChBrb,EACAgwB,EAAUa,IAAI,mBAGdb,EAAU1nB,OAAO,mBAIzBjE,MAAMgX,GACF,OAAO7Y,MAAM4J,KAAKiP,EAAKsE,iBACnB,uD,wEAIU/Y,GACd,GAAIA,aAAgBlG,YAAa,CAC7B,MAAM,UAACsvB,GAAappB,EACpB,GAAIopB,EAAU9c,SAAS,cAAgBic,GAAegC,YAAYvqB,GAC9D,OAAOiL,WAAWS,cAEjB,GAAI0d,EAAU9c,SAAS,iBACxB,OAAOrB,WAAWU,YAG1B,OAAOV,WAAWW,e,YAGJ6I,GACdA,EAAKsE,iBAA8B,mEAC9Brf,SAAQoxB,GAAcvC,GAAe1S,SAASiV,M,YAGxCrW,EAAmB7a,GAC9B,OAAOA,EAAOmQ,QAAQ,UAAY0K,G,YAGzBA,EAAmB7a,GAC5B,OAAOgC,MAAM4J,KAAKiP,EAAKsE,iBACnB,qDACDC,MAAKtY,GAAUA,EAAO4L,SAAS1S,MAAY,M,YAGvC6a,GACP,MAAMpJ,EAAS,GAAAxQ,KAAI,QAEnB,OADAwQ,EAAOC,YAAcmJ,EACMpJ,EAAO1D,c,YAG5B8M,GACN,MAAMpJ,EAAS,GAAAxQ,KAAI,QAEnB,OADAwQ,EAAOC,YAAcmJ,EACMpJ,EAAOuB,a,YAGxBhP,GACV,MAAMyN,EAAS,GAAAxQ,KAAI,QAEnB,OADAwQ,EAAOC,YAAc1N,EACMyN,EAAOwB,mB,YAG5BjP,GACN,MAAMyN,EAAS,GAAAxQ,KAAI,QAEnB,OADAwQ,EAAOC,YAAc1N,EACMyN,EAAO0B,e,YAGtBnP,GACZ,MAAM6W,EAAO8T,GAAec,QAAQzrB,GACpC,GAAI6W,EAAM,CACN,MAAMpJ,EAAS,GAAAxQ,KAAI,QAEnB,OADAwQ,EAAOC,YAAcmJ,EACMpJ,EAAO1D,aAEtC,OAAO,M,YAGI8M,GACX,OAAOA,EAAKpK,cACR,kE,GAIR+O,eAAsBxb,EAAmByb,GACrC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACzB,MAAMC,EAAUC,YAAW,KACvBH,OAAQ,KACTF,GAAS,GACZ,GAAAxe,KAAI,QAAiBmB,IAAI4B,EAAM,CAC3B+D,MAAO,KACHgY,aAAaF,GACbD,UAGTI,MAAK,KACJ,GAAA/e,KAAI,QAAiBmE,OAAOpB,O,YAIlBA,GACd,MAAM6b,EAAU,GAAA5e,KAAI,QAAiBjC,IAAIgF,QAClB,IAAZ6b,IACP,GAAA5e,KAAI,QAAiBmE,OAAOpB,GAC5B6b,EAAQ9X,U,YAIEzD,GACd,MAAM,OAACtE,EAAM,cAAEuE,GAAiBD,EAC1BuW,EAAoBtW,EAC1B,GAAIvE,aAAkBE,aAAeF,EAAOwvB,UAAU9c,SAAS,YAE3D,GADmBzR,KAAKgwB,cAAcpW,GAElC,IACIA,EAAK/S,SAET,MAAOyX,SAIP,GADsB,GAAAte,KAAI,WAAe,KAAnBA,KAAoB4Z,EAAM7a,GAC7B,CACf,MAAMC,EAAO0uB,GAAemB,QAAQ9vB,GAC9BqK,EAAOskB,GAAe8B,QAAQzwB,GAC9BR,EAAQmvB,GAAe6B,SAASxwB,GAC1B,SAARC,GACA4a,EAAKsE,iBACD,+DAA+D9U,MAElEvK,SAASygB,IACNoO,GAAeK,WAAWzO,EAASoO,GAAe6B,SAASjQ,IAAY/gB,Q,YAQ1E8E,GACjB,MAAM,OAACtE,EAAM,cAAEuE,EAAa,cAAEkP,GAAiBnP,EACzCuW,EAAoBtW,EAE1B,IADyBsW,EAAKnI,SAAee,GAGzC,GADmBxS,KAAKgwB,cAAcpW,GAElC,IACIA,EAAK/S,SACP,MAAOyX,QAIR,CACD,MAAMD,EAAc,GAAAre,KAAI,WAAa,KAAjBA,KAAkB4Z,EAAmB7a,GACrDsf,GACAqP,GAAe1S,SAASqD,K,YAMpBhb,GAChB,MAAM,cAACC,EAAa,IAAE5F,GAAO2F,EACvBuW,EAAoBtW,EACpBoO,EAAa,GAAA1R,KAAI,WAAe,KAAnBA,KAAoB4Z,GACvC,OAAQlc,GACJ,IAAK,WACoBgU,EACjB,GAAA1R,KAAI,WAAc,KAAlBA,KAAmB0R,IAAe,GAAA1R,KAAI,WAAU,KAAdA,KAAe4Z,GACjD,GAAA5Z,KAAI,WAAW,KAAfA,KAAgB4Z,KACN5G,MAAM,CAACC,eAAe,IACpC5P,EAAMgP,kBACN,MAEJ,IAAK,aACgBX,EACb,GAAA1R,KAAI,WAAU,KAAdA,KAAe0R,IAAe,GAAA1R,KAAI,WAAW,KAAfA,KAAgB4Z,GAC9C,GAAA5Z,KAAI,WAAU,KAAdA,KAAe4Z,KACT5G,MAAM,CAACC,eAAe,IAChC5P,EAAMgP,kBACN,MAEJ,IAAK,OACiB,GAAArS,KAAI,WAAW,KAAfA,KAAgB4Z,IACvB5G,MAAM,CAACC,eAAe,IACjC5P,EAAMgP,kBACN,MAEJ,IAAK,MACgB,GAAArS,KAAI,WAAU,KAAdA,KAAe4Z,IACtB5G,MAAM,CAACC,eAAe,IAChC5P,EAAMgP,kBACN,MAEJ,IAAK,QACL,IAAK,IACD,GAAIX,EAAY,CAEZ,OADagc,GAAemB,QAAQnd,IAEhC,IAAK,UACDgc,GAAe3S,OAAOrJ,GACC,GAAA1R,KAAI,WAAgB,KAApBA,KAAqB0R,IAC5BsB,MAAM,CAACC,eAAe,IACtC5P,EAAMkP,iBAIdlP,EAAMgP,kBAGV,MAEJ,IAAK,SAaL,IAAK,YACGX,IAC4BrO,EAAM2b,eAAeb,MAC7Cc,GAAYA,aAAoBhgB,aAAeggB,EAASsP,UAAU9c,SAAS,WAC1EmI,IAED8T,GAAe1S,SAAStJ,GACxBA,EAAWsB,MAAM,CAACC,eAAe,IACjC5P,EAAMgP,oBAGd,MAEJ,IAAK,aACD,GAAIX,EAEA,OADagc,GAAemB,QAAQnd,IAEhC,IAAK,UACgBgc,GAAekC,YAAYle,KAExCgc,GAAe3S,OAAOrJ,GACC,GAAA1R,KAAI,WAAgB,KAApBA,KAAqB0R,IAC5BsB,MAAM,CAACC,eAAe,IACtC5P,EAAMgP,sB,YAWbhP,GACjB,MAAM,OAACtE,EAAM,cAAEuE,EAAa,cAAEkP,GAAiBnP,EACzCuW,EAAoBtW,EAC1B,GAAIvE,aAAkBE,aAAeF,EAAOwvB,UAAU9c,SAAS,YAAa,CACxE,MAAM4M,EAAc,GAAAre,KAAI,WAAa,KAAjBA,KAAkB4Z,EAAM7a,GAC5C,GAAoB,OAAhBsf,IAC2C,WAAvCqP,GAAemB,QAAQxQ,IACtBqP,GAAekC,YAAYvR,IAC5B,GAAAre,KAAI,WAAkB,KAAtBA,KAAuBqe,GAEChb,EAAM2b,eAAeb,MAC7Cc,GAAYA,aAAoBhgB,aAAeggB,EAASsP,UAAU9c,SAAS,WAC1EmI,GACoB,CACrB,MAAMlI,EAAa,GAAA1R,KAAI,WAAe,KAAnBA,KAAoB4Z,GACpB,OAAflI,GACsC,WAAtCgc,GAAemB,QAAQnd,IACvBgc,GAAekC,YAAYle,KAC3B,GAAA1R,KAAI,WAAkB,KAAtBA,KAAuB0R,GACvB,GAAA1R,KAAI,WAAgB,KAApBA,KAAqB0R,EApVjB,KAqVCqN,MAAK,KACF2O,GAAe1S,SAAStJ,MAE3ByN,OAAM,UAEf,MAAM,QAACzF,EAAO,QAAEC,GAAWtW,GACrB,KAACiY,EAAI,MAAEE,EAAK,IAAEN,EAAG,OAAEE,GAAUxB,EAAK8B,wBAClC0D,IACF9D,EAAO5B,GAAW8B,EAAQ9B,GAAWwB,EAAMvB,GAAWyB,EAASzB,GAE7D0F,EAAwBzF,EAAKnI,SAAee,GAC9C4M,GAAuBC,IACnB7M,aAAyBvT,aAAeuT,EAAc+b,UAAU9c,SAAS,SAAWe,IAAkBoH,EACtGpH,EAAcQ,MAAM,CAACC,eAAe,IAGpC2G,EAAK5G,MAAM,CAACC,eAAe,KAG9BmM,GACDxF,EAAK5G,MAAM,CAACC,eAAe,O,YAOzB5P,GAClB,MAAM,OAACtE,EAAM,cAAEuE,GAAiBD,EAC1BuW,EAAoBtW,EAC1B,GAAIvE,aAAkBE,aAAeF,EAAOwvB,UAAU9c,SAAS,YAAa,CACxE,MAAM4M,EAAc,GAAAre,KAAI,WAAa,KAAjBA,KAAkB4Z,EAAM7a,GAC5C,GAAoB,OAAhBsf,IAC2C,WAAvCqP,GAAemB,QAAQxQ,IACvBqP,GAAekC,YAAYvR,IAC3B,GAAAre,KAAI,WAAkB,KAAtBA,KAAuBqe,GAEChb,EAAM2b,eAAeb,MAC7Cc,GAAYA,aAAoBhgB,aAAeggB,EAASsP,UAAU9c,SAAS,WAC1EmI,GACoB,CACrB,MAAMlI,EAAa,GAAA1R,KAAI,WAAe,KAAnBA,KAAoB4Z,GACpB,OAAflI,GAC0C,WAAtCgc,GAAemB,QAAQnd,IACvBgc,GAAekC,YAAYle,KAC1BA,EAAWD,SAAsB1S,KAClC,GAAAiB,KAAI,WAAkB,KAAtBA,KAAuB0R,GACvB,GAAA1R,KAAI,WAAgB,KAApBA,KAAqB0R,EApYrB,KAqYKqN,MAAK,KACF2O,GAAe1S,SAAStJ,MAE3ByN,OAAM,UAGnBd,EAAYrL,MAAM,CAACC,eAAe,IACS,WAAvCya,GAAemB,QAAQxQ,KAClBqP,GAAekC,YAAYvR,GAe5BqP,GAAec,QAAQnQ,IAAcrL,MAAM,CAACC,eAAe,KAd3D,GAAAjT,KAAI,WAAkB,KAAtBA,KAAuBqe,GACvB,GAAAre,KAAI,WAAgB,KAApBA,KAAqBqe,EAhZtB,KAiZMU,MAAK,KACF,MAAMrN,EAAa,GAAA1R,KAAI,WAAe,KAAnBA,KAAoB4Z,GACvC,GAAA5Z,KAAI,WAAkB,KAAtBA,KAAuB4Z,GACnBlI,IACA,GAAA1R,KAAI,WAAkB,KAAtBA,KAAuB0R,GACvBgc,GAAe3S,OAAOrJ,GACtBgc,GAAec,QAAQ9c,IAAasB,MAAM,CAACC,eAAe,QAGjEkM,OAAM,c,UCjab,IAC1B5V,EAAO,CACHH,KAAM,iBAFoB,EAG5B,GAAC,cAA6CtJ,EAG5CC,cACIsE,QAHJ,oB,+VAII,CAAArE,KAAI,GAAa,EAAQ,MAAO,CAC5BqB,WAAY,CACR6V,MAAO,gBACPuW,KAAM,WAEZ,KAGNxtB,SACI,O,uSAAoB,CAAAD,KAAI,QAAWyO,WAAU,K,yqBCOjDyhB,GAAiB,IACrB3mB,EAAO,CACHH,KAAM,YAFe,EAGvB,GAAC,cAAwCtJ,EAWvCC,cACIsE,Q,aAXJ,oBACA,oBACA,oBACA,oBASI,GAAArE,KAAI,GAAsB,EAAQ,OAAQ,CACtCqB,WAAY,CACR6V,MAAO,WAEb,KACF,GAAAlX,KAAI,GAAa,EAAQ,KAAM,CAC3BqB,WAAY,CACR6V,MAAO,WACPuW,KAAM,WACNzuB,KAAM,gBACN2X,UAAW,GAEfxM,SAAU,CACN,EAAQ,OAAQ,CACZ9I,WAAY,CACR6V,MAAO,WAEX/M,SAAU,CACN,EAAQ,OAAQ,CACZ9I,WAAY,CACR6V,MAAO,WAGf,EAAQ,WAGhB,EAAQ,OAAQ,CACZ7V,WAAY,CACR+H,KAAM,cAIpB,KACF,GAAApJ,KAAI,GAAU,CAAC,SAAU,QAAO,KAChC,GAAAA,KAAI,GAAkB,CAClB6M,OAAQ,CACJ4gB,KAAM,WACNG,UAAU,GAEduC,KAAM,CACF1C,KAAM,WACNG,UAAU,IAEjB,KAGLwC,SAASrtB,GACL,OAAOA,EAAKyM,cAA2B,2BAG3CvP,OAAO4B,GAKH,MAAMkB,EAAoB,GAAA/C,KAAI,QAAWyO,WAAU,GAEnD,GADA1L,EAAKc,iBAAiB,QAAS,GAAA7D,KAAI,WAAmB2H,KAAK3H,YAC9C,IAAT6B,EAAiB,CACjB,MAAM,KAAC7C,EAAI,MAAEqV,EAAK,SAAE8F,GAAYtY,OACnB,IAAT7C,GACAgB,KAAKguB,QAAQjrB,EAAM/D,QAET,IAAVqV,GACArU,KAAKiuB,SAASlrB,EAAMsR,QAEP,IAAb8F,GACAna,KAAKouB,YAAYrrB,EAAMoX,GAG/B,OAAOpX,EAWX6rB,SAAS7rB,GACL,OAAO,GAAA/C,KAAI,WAAO,KAAXA,KAAY+C,GAAM0M,aAAe,GAG5Cwe,SAASlrB,EAAmBxE,GACxB,GAAAyB,KAAI,WAAO,KAAXA,KAAY+C,GAAM0M,YAAclR,EAGpC8xB,YAAYttB,EAAmBxE,GAC3BwE,EAAK0F,aAAa,gBAAiBlK,EAAM4J,YAG7CmoB,YAAYvtB,GACR,MAAMwtB,EAAWxtB,EAAKlD,aAAa,iBACnC,OAAO0wB,EAAWC,SAASD,IAAa,EAG5C1B,QAAQ9rB,GACJ,MAAM+rB,EAAQ,GAAA9uB,KAAI,SACZ,UAACuuB,GAAaxrB,EACpB,IAAK,IAAIgsB,KAAUD,EACf,GAAIP,EAAU9c,SAAS,YAAYsd,KAC/B,OAAOA,EAGf,OAAO,KAGXf,QAAQjrB,EAAmB/D,GACvB,MAAMgwB,EAAgB,GAAAhvB,KAAI,QACpBkvB,EAAoB,GAAAlvB,KAAI,SACxB,KAACytB,EAAI,SAAEG,GAAYoB,EAAchwB,GACjCmwB,EAAUnvB,KAAK6uB,QAAQ9rB,IACvB,UAACwrB,GAAaxrB,EAChBosB,GACAZ,EAAU1nB,OAAO,YAAYsoB,KAEjCZ,EAAUa,IAAI,YAAYpwB,KAC1B+D,EAAK0F,aAAa,OAAQglB,GAC1B,MAAMle,EAAY,GAAAvP,KAAI,WAAO,KAAXA,KAAY+C,GACxBusB,EAAYvsB,EAAKyM,cAAc,mBACjCoe,GACK0B,GAAa/f,GACdA,EAAUrC,OAAOgiB,EAAkBzgB,WAAU,IAI7C6gB,GACAA,EAAUzoB,SAKtB8oB,YAAY5sB,EAAmBxE,GAC3BwE,EAAKyH,gBAAgB,gBAAiBjM,GACtCwE,EAAKqB,cAAc,IAAIiL,MAAM,SAAU,CAACC,SAAS,KAGrDsgB,YAAY7sB,GACR,OAAOA,EAAKyF,aAAa,iBAG7BioB,UAAU1tB,EAAmBxE,GACzB,MAAM,UAACgwB,GAAaxrB,EAChBxE,EACKgwB,EAAU9c,SAAS,WACpB8c,EAAUa,IAAI,UAIlBb,EAAU1nB,OAAO,UAIzB6pB,UAAU3tB,GACN,MAAM,UAACwrB,GAAaxrB,EACpB,OAAOwrB,EAAU9c,SAAS,UAG9Bkf,cAAc5tB,EAAmBxE,GAC7B,MAAM,UAACgwB,GAAaxrB,EAChBxE,EACKgwB,EAAU9c,SAAS,eACpB8c,EAAUa,IAAI,cAIlBb,EAAU1nB,OAAO,cAIzB+pB,cAAc7tB,GACV,MAAM,UAACwrB,GAAaxrB,EACpB,OAAOwrB,EAAU9c,SAAS,cAG9B2c,YAAYrrB,EAAmBxE,GAC3BwE,EAAKyH,gBAAgB,gBAAiBjM,GAG1CmxB,YAAY3sB,GACR,OAAOA,EAAKyF,aAAa,iBAG7BqoB,YAAY9tB,EAAmBxE,GAC3BwE,EAAKyH,gBAAgB,gBAAiBjM,GACtCwE,EAAKqB,cAAc,IAAIiL,MAAM,SAAU,CAACC,SAAS,KAGrDwhB,YAAY/tB,GACR,OAAOA,EAAKyF,aAAa,iBAG7BuoB,SAAShuB,EAAmBxE,GACxBwE,EAAK2M,MAAMjK,YAAY,UAAWlH,EAAM4J,YAG5C6oB,SAASjuB,GACL,OAAOytB,SAASztB,EAAK2M,MAAMkc,iBAAiB,YAGhDjc,OAAO5M,EAAmB6M,GACtB5P,KAAK2vB,YAAY5sB,EAAM6M,IAAU5P,KAAK4vB,YAAY7sB,M,uFAlI/CA,GACH,MAAMsR,EAAQtR,EAAKyM,cAA2B,8BAC9C,IAAK6E,EACD,MAAM,IAAI7S,MAAM,mBAEpB,OAAO6S,G,YAgIOhR,GACd,MAAM,OAACtE,EAAM,cAAEuE,EAAa,SAAEwM,EAAQ,QAAEC,GAAW1M,EAC7C4V,EAAwCla,EAAQmQ,QAAQ,aAC1D+J,GAAc3V,IAEF,UADCtD,KAAK6uB,QAAQ5V,IACAnJ,GAAYC,GAClC/P,KAAK2P,OAAOsJ,K,gqBCtPX,IACjB1P,EAAO,CACHH,KAAM,QAFW,EAGnB,GAAC,cAAoCtJ,EAOnCC,cACIsE,Q,aANJ,oBACA,oBACA,oBACA,oBAII,GAAArE,KAAI,GAAa,EAAQ,KAAM,CAC3BqB,WAAY,CACR6V,MAAO,OACPuW,KAAM,OACN9W,SAAU,KAEhB,KACF,GAAA3W,KAAI,GAAgB,IAAIvB,QAAS,KACjC,GAAAuB,KAAI,GAAwB,IAAIvB,QAAS,KACzC,GAAAuB,KAAI,GAAW+J,SAASoG,iBACpBpG,SAAUqG,WAAWC,aAAc,GAAArQ,KAAI,WAAa2H,KAAK3H,OAC5D,KAGLC,SACI,MAAMwW,EAAoB,GAAAzW,KAAI,QAAWyO,WAAU,GAgBnD,OAfAgI,EAAK5S,iBAAiB,QAAS,GAAA7D,KAAI,WAAmB2H,KAAK3H,OAC3DyW,EAAK5S,iBAAiB,cAAe,GAAA7D,KAAI,WAAyB2H,KAAK3H,OAAO,GAC9EyW,EAAK5S,iBAAiB,UAAW,GAAA7D,KAAI,WAAqB2H,KAAK3H,OAC/DyW,EAAK5S,iBAAiB,YAAa,GAAA7D,KAAI,WAAuB2H,KAAK3H,OACnEyW,EAAK5S,iBAAiB,YAAa,GAAA7D,KAAI,WAAuB2H,KAAK3H,OACnEyW,EAAK5S,iBAAiB,WAAY,GAAA7D,KAAI,WAAsB2H,KAAK3H,OACjEyW,EAAK5S,iBAAiB,YAAa,GAAA7D,KAAI,WAAuB2H,KAAK3H,OACnEyW,EAAK5S,iBAAiB,OAAQ,GAAA7D,KAAI,WAAkB2H,KAAK3H,OACzDyW,EAAK5S,iBAAiB,QAAS,GAAA7D,KAAI,WAAmB2H,KAAK3H,OAC3DyW,EAAK5S,iBAAiB,UAAW,GAAA7D,KAAI,WAAqB2H,KAAK3H,OAC/DyW,EAAK5S,iBAAiB,WAAY,GAAA7D,KAAI,WAAsB2H,KAAK3H,OACjEyW,EAAK5S,iBAAiB,UAAW,GAAA7D,KAAI,WAAqB2H,KAAK3H,OAC/DyW,EAAK5S,iBAAiB,SAAU,GAAA7D,KAAI,WAAoB2H,KAAK3H,OAC7D,GAAAA,KAAI,QAAcmB,IAAIsV,GAAM,GAC5B,GAAAzW,KAAI,QAAsBmB,IAAIsV,GAAM,GAC7BA,EAGX7V,KAAKa,EAAmB2H,GACpB,OAAO3H,EAGXnC,gBAAgByD,EAAmBnC,GAC/BG,MAAM4J,KAAK/J,EAAK6I,YAAY5K,SAAQ,CAACgH,EAAQM,KACrCN,aAAkB5G,cAClBixB,GAAeG,YAAYxqB,EAAQM,GACnC+pB,GAAea,SAASlrB,EAAQ,OA8B5CjD,MAAMgX,GACF,OAAO7Y,MAAM4J,KAAKiP,EAAKsE,iBACnB,qDAIR3N,cAAckG,GACV,MAAMlG,EAAgB,GACP,GAAAvQ,KAAI,QACZyQ,YAAcgG,EACrB,IAAI1T,EAAO,GAAA/C,KAAI,WAAW,KAAfA,KAAgByW,GAC3B,KAAgB,OAAT1T,GACcmtB,GAAeY,YAAY/tB,IAExCwN,EAActP,KAAK8B,GAEvBA,EAAO,GAAA/C,KAAI,WAAU,KAAdA,KAAe+C,GAE1B,OAAOwN,EAGXI,eAAe8F,GACX,GAAAzW,KAAI,QAAcmB,IAAIsV,GAAM,GAGhC7F,aAAa6F,GACT,GAAAzW,KAAI,QAAcmB,IAAIsV,GAAM,GACxB,GAAAzW,KAAI,QAAsBjC,IAAI0Y,KAC9BA,EAAKrS,cAAc,IAAIiL,MAAM,kBAAmB,CAACC,SAAS,KAC1D,GAAAtP,KAAI,QAAsBmB,IAAIsV,GAAM,M,uFAtD7BA,GACX,OAAOA,EAAKjH,cAA2B,qB,YAGxBiH,GACf,OAAOA,EAAKjH,cAA2B,yB,YAQ5BiH,EAAmB3E,GAC9B,MAAM,UAACyc,GAAa9X,EAChB3E,EACKyc,EAAU9c,SAAS,eACpB8c,EAAUa,IAAI,cAIlBb,EAAU1nB,OAAO,e,YAqCb1B,GACR,GAAIA,aAAgBlG,YAAa,CAC7B,MAAM,UAACsvB,GAAappB,EACpB,GAAIopB,EAAU9c,SAAS,cAAgBye,GAAeR,YAAYvqB,GAC9D,OAAOiL,WAAWS,cAEjB,GAAI0d,EAAU9c,SAAS,iBACxB,OAAOrB,WAAWU,YAG1B,OAAOV,WAAWW,e,YAGPpG,EAAmBqG,GAC9B,GAAIrG,GAAQqG,EACR,MAAO,CAACrG,GAEZ,MAAMsG,EAAWtG,EAAKuG,wBAAwBF,GAC9C,GAAIC,EAAWE,KAAKC,4BAA6B,CAC7C,MAAM7E,EAAQ,CAAC5B,GACf,IAAI0G,EAAkB,GAAArR,KAAI,WAAU,KAAdA,KAAe2K,GACrC,KAAO0G,GAAmBA,IAAoBL,GAC1CzE,EAAMtL,KAAKoQ,GACXA,EAAkB,GAAArR,KAAI,WAAU,KAAdA,KAAeqR,GAGrC,OADA9E,EAAMtL,KAAK+P,GACJzE,EAEN,GAAI0E,EAAWE,KAAKG,4BAA6B,CAClD,MAAM/E,EAAQ,CAAC5B,GACf,IAAI4G,EAAsB,GAAAvR,KAAI,WAAc,KAAlBA,KAAmB2K,GAC7C,KAAO4G,GAAuBA,IAAwBP,GAClDzE,EAAMtL,KAAKsQ,GACXA,EAAsB,GAAAvR,KAAI,WAAc,KAAlBA,KAAmBuR,GAG7C,OADAhF,EAAMtL,KAAK+P,GACJzE,EAEX,MAAO,I,YAGGkK,KAAsB7T,GAChC,MAAM2N,EAAgBvQ,KAAKuQ,cAAckG,GACzCzW,KAAK2Q,eAAe8F,GACpBlG,EAAc1R,SAASgH,IACdjD,EAAM2E,SAAS1B,IAChBqqB,GAAeW,YAAYhrB,GAAQ,MAG3CjD,EAAM/D,SAASgH,IACX,MAAM6K,EAAWwf,GAAeY,YAAYjrB,GACxC4Q,EAAKhF,SAAS5L,KAAY6K,GAC1Bwf,GAAeW,YAAYhrB,GAAQ,MAG3C7F,KAAK4Q,aAAa6F,I,YAGNA,KAAsB7T,GAClC5C,KAAK2Q,eAAe8F,GACpB7T,EAAM/D,SAASgH,IACNqqB,GAAeY,YAAYjrB,IAC5BqqB,GAAeW,YAAYhrB,GAAQ,MAG3C7F,KAAK4Q,aAAa6F,I,YAGDA,KAAsB7T,GACvC,MAAM2N,EAAgBvQ,KAAKuQ,cAAckG,GACzCzW,KAAK2Q,eAAe8F,GACpB7T,EAAM/D,SAASgH,IACP0K,EAAchJ,SAAS1B,IACvBqqB,GAAeW,YAAYhrB,GAAQ,MAG3C7F,KAAK4Q,aAAa6F,I,YAGNA,GACZ,MAAMlG,EAAgBvQ,KAAKuQ,cAAckG,GACzCzW,KAAK2Q,eAAe8F,GACpBlG,EAAc1R,SAASgH,IACnBqqB,GAAeW,YAAYhrB,GAAQ,MAEvC7F,KAAK4Q,aAAa6F,I,YAGPA,EAAmB1T,GAC9B,MAAM2O,EAAa,GAAA1R,KAAI,WAAe,KAAnBA,KAAoByW,GACpB,OAAf/E,GAAuBA,IAAe3O,IACtCmtB,GAAeO,UAAU/e,GAAY,GACrCA,EAAWE,UAAY,GAEd,OAAT7O,IACe,GAAA/C,KAAI,QACZyQ,YAAc1N,EACrBmtB,GAAeO,UAAU1tB,GAAM,GAC/BA,EAAK6O,SAAW,I,YAIL6E,EAAmB1T,GAClC,MAAM8O,EAAiB,GAAA7R,KAAI,WAAmB,KAAvBA,KAAwByW,GACxB,OAAnB5E,GAA2BA,IAAmB9O,GAC9CmtB,GAAeS,cAAc9e,GAAgB,GAEpC,OAAT9O,GACA,GAAA/C,KAAI,WAAe,KAAnBA,KAAoByW,GAAM,GAC1ByZ,GAAeS,cAAc5tB,GAAM,IAGnC,GAAA/C,KAAI,WAAe,KAAnBA,KAAoByW,GAAM,I,YAIvBA,GACP,MAAMjG,EAAS,GAAAxQ,KAAI,QAEnB,OADAwQ,EAAOC,YAAcgG,EACMjG,EAAO1D,c,YAG5B2J,GACN,MAAMjG,EAAS,GAAAxQ,KAAI,QAEnB,OADAwQ,EAAOC,YAAcgG,EACMjG,EAAOuB,a,YAGxBhP,GACV,MAAMyN,EAAS,GAAAxQ,KAAI,QACnBwQ,EAAOC,YAAc1N,EACrB,MAAMiP,EAAsCxB,EAAOwB,kBACnD,OAAOA,EACH,GAAAhS,KAAI,WAAa,KAAjBA,KAAkBgS,GACExB,EAAOjM,c,YAGzBxB,GACN,MAAMyN,EAAS,GAAAxQ,KAAI,QACnBwQ,EAAOC,YAAc1N,EACrB,MAAM/D,EAAOkxB,GAAerB,QAAQ9rB,GAC9B8M,EAAWqgB,GAAeN,YAAY7sB,GAC5C,MACa,SAAT/D,GAEI6Q,EADAW,EAAOyB,WAGHzB,EAAO0B,gBACN1B,EAAOjM,aAAciM,EAAO0B,gB,cAIhCnP,GAET,GADiBmtB,GAAeN,YAAY7sB,GAC9B,CACV,MACMoP,EADS,GAAAnS,KAAI,QACkB+R,YACrC,GAAII,EACA,OAAO,GAAAnS,KAAI,UAAa,KAAjBA,KAAkBmS,GAGjC,OAAOpP,G,YAGOM,GACd,MAAM,cAACC,EAAa,OAAEvE,EAAM,QAAEgR,EAAO,SAAED,GAAYzM,EAC7C4tB,EAA0B3tB,EAC1B2V,EAA+Cla,EAAQmQ,QAAQ,aAC/DqB,EAAgBvQ,KAAKuQ,cAAc0gB,GACzC,GAAIhY,EACA,GAAKnJ,GAAaC,GAGb,GAAIA,EAAS,CACd,MAAMW,EAAWwf,GAAeY,YAAY7X,GACxCvI,GACAuI,EAAW7G,OAEb1B,EAEE,GAAA1Q,KAAI,WAAqB,KAAzBA,KAA0BixB,EAAYhY,GADtC,GAAAjZ,KAAI,WAAgB,KAApBA,KAAqBixB,EAAYhY,GAErC5V,EAAMgP,uBAEL,GAAIvC,EAAU,CACf,MAAMwC,EAAmB/B,EAAcA,EAAczN,OAAS,GAC9D,GAAIwP,EAAkB,CAClB,MAAM/F,EAAQ,GAAAvM,KAAI,WAAe,KAAnBA,KACVsS,EACA2G,GAEA1M,IACIgE,EAAchJ,SAAS0R,GACvB,GAAAjZ,KAAI,WAAqB,KAAzBA,KAA0BixB,KAAe1kB,GAGzC,GAAAvM,KAAI,WAAgB,KAApBA,KAAqBixB,KAAe1kB,SAK5C,GAAAvM,KAAI,WAAc,KAAlBA,KAAmBixB,EAAYhY,GAEnC5V,EAAMgP,wBA/BN,GAAArS,KAAI,WAAc,KAAlBA,KAAmBixB,EAAYhY,I,YAoCnB5V,GACpB,MAAM,cAACC,EAAa,OAAEvE,GAAUsE,EAC1B4V,EAA+Cla,EAAQmQ,QAAQ,aAC/D+hB,EAA0B3tB,EAC5B2V,IACsBjZ,KAAKuQ,cAAc0gB,GACtB1pB,SAAS0R,IACxB,GAAAjZ,KAAI,WAAc,KAAlBA,KAAmBixB,EAAYhY,GAEnC5V,EAAMkP,mB,YAIMlP,GAChB,MAAM,cAACC,GAAiBD,EAClB4tB,EAA0B3tB,EAChC,GAAAtD,KAAI,WAAmB,KAAvBA,KAAwBixB,EAAY,O,YAGlB5tB,GAClB,MAAM,cAACC,EAAa,OAAEvE,GAAUsE,EAC1B4V,EAA+Cla,EAAQmQ,QAAQ,aAC/D+hB,EAA0B3tB,EAC5B2V,IAEY,UADCiX,GAAerB,QAAQ5V,IAEhCiX,GAAevgB,OAAOsJ,GAAY,GAEtC,GAAAjZ,KAAI,WAAmB,KAAvBA,KAAwBixB,EAAYhY,IAExC5V,EAAMkP,kB,YAGWlP,GACjBA,EAAMkP,kB,YAGYlP,GAClB,MAAM,cAACC,EAAa,cAAEkP,GAAiBnP,EACjC4tB,EAA0B3tB,EAChC,GAAIkP,EAAe,CACf,MAAMC,EAA2BD,EAAeE,cAC1CC,EACFF,aAA6BG,WAC7BH,EAAkBI,KAClBL,EACCye,EAAWxf,SAAekB,IAC3B,GAAA3S,KAAI,WAAmB,KAAvBA,KAAwBixB,EAAY,Q,YAK1B5tB,GAClB,MAAM,cAACC,EAAa,OAAEvE,GAAUsE,EAC1B4tB,EAA0B3tB,EAC5BvE,aAAkBE,aAAeF,EAAOwvB,UAAU9c,SAAS,cACrCzR,KAAKuQ,cAAc0gB,GACtB1pB,SAASxI,IACxB,GAAAiB,KAAI,WAAc,KAAlBA,KAAmBixB,EAAYlyB,K,YAK1BsE,GACb,MAAM,cAACC,GAAiBD,EAClB4tB,EAA0B3tB,EAChC,GAAAtD,KAAI,WAAmB,KAAvBA,KAAwBixB,EAAY,O,YAGpB5tB,GAChB,MAAM,cAACC,EAAa,IAAE5F,GAAO2F,EACvB4tB,EAA0B3tB,EAC1BoO,EAAa,GAAA1R,KAAI,WAAe,KAAnBA,KAAoBixB,GACvC,OAAQvzB,GACJ,IAAK,IAAK,CACN,MAAM,QAACqS,GAAW1M,EAClB,GAAI0M,GACI2B,EAAY,CACZ,MAAMlB,EAAS,GAAAxQ,KAAI,QACnBwQ,EAAOC,YAAciB,EACrB,MAAMoB,GACFtC,EAAOC,YAAcD,EAAOjM,cAAgB0sB,EAAYzgB,EAAO1D,cAE7DqF,GACF3B,EAAOC,YAAcD,EAAOjM,cAAgB0sB,EAAYzgB,EAAOuB,aAEnE,GAAIe,GAAaX,EAAU,CACvB,MAAM5F,EAAQ,GAAAvM,KAAI,WAAe,KAAnBA,KACV8S,EACA,GAAA9S,KAAI,WAAa,KAAjBA,KAAkBmS,IAElB5F,GACA,GAAAvM,KAAI,WAAc,KAAlBA,KAAmBixB,KAAe1kB,IAKlDlJ,EAAMkP,iBACN,MAEJ,IAAK,YACD,GAAIb,EAEA,GADiBwe,GAAeN,YAAYle,GAExCwe,GAAevgB,OAAO+B,OAErB,CACD,MACMqB,EADS,GAAA/S,KAAI,QACoBuE,aACnCwO,GACAA,EAAWC,MAAM,CAACC,eAAe,IAI7C5P,EAAMgP,kBACN,MAEJ,IAAK,aACGX,IACiBwe,GAAeN,YAAYle,IAExCwe,GAAevgB,OAAO+B,IAG9BrO,EAAMgP,kBACN,MAEJ,IAAK,UACD,GAAIX,EAAY,CACZ,MAAMwB,EAAe,GAAAlT,KAAI,WAAc,KAAlBA,KAAmB0R,GACxC,GAAIwB,EAAc,CACdA,EAAaF,MAAM,CAACC,eAAe,IACnC,MAAM,SAACnD,GAAYzM,EACfyM,IACiBogB,GAAeY,YAAY5d,GAExC,GAAAlT,KAAI,WAAqB,KAAzBA,KAA0BixB,EAAY/d,GACtC,GAAAlT,KAAI,WAAgB,KAApBA,KAAqBixB,EAAY/d,SAI5C,CACD,MAAMJ,EAAY,GAAA9S,KAAI,WAAW,KAAfA,KAAgBixB,GAC9Bne,GACAA,EAAUE,MAAM,CAACC,eAAe,IAGxC5P,EAAMgP,kBACN,MAEJ,IAAK,YACD,GAAIX,EAAY,CACZ,MAAMyB,EAAW,GAAAnT,KAAI,WAAU,KAAdA,KAAe0R,GAChC,GAAIyB,EAAU,CACVA,EAASH,MAAM,CAACC,eAAe,IAC/B,MAAM,SAACnD,GAAYzM,EACfyM,IACiBogB,GAAeY,YAAY3d,GAExC,GAAAnT,KAAI,WAAqB,KAAzBA,KAA0BixB,EAAY9d,GACtC,GAAAnT,KAAI,WAAgB,KAApBA,KAAqBixB,EAAY9d,SAI5C,CACD,MAAMhB,EAAW,GAAAnS,KAAI,WAAU,KAAdA,KAAeixB,GAC5B9e,GACAA,EAASa,MAAM,CAACC,eAAe,IAGvC5P,EAAMgP,kBACN,MAEJ,IAAK,OAAQ,CACT,MAAMS,EAAY,GAAA9S,KAAI,WAAW,KAAfA,KAAgBixB,GAC9Bne,GACAA,EAAUE,MAAM,CAACC,eAAe,IAEpC5P,EAAMgP,kBACN,MAEJ,IAAK,MAAO,CACR,MAAMF,EAAW,GAAAnS,KAAI,WAAU,KAAdA,KAAeixB,GAC5B9e,GACAA,EAASa,MAAM,CAACC,eAAe,IAEnC5P,EAAMgP,kBACN,MAEJ,IAAK,QACGX,IACA,GAAA1R,KAAI,WAAc,KAAlBA,KAAmBixB,EAAYvf,GAC/BA,EAAW0B,SAEf/P,EAAMgP,kBACN,MAEJ,IAAK,SACD,GAAArS,KAAI,WAAgB,KAApBA,KAAqBixB,GACrB,GAAAjxB,KAAI,WAAe,KAAnBA,KAAoBixB,EAAY,MAChCA,EAAWje,QACX3P,EAAMgP,oB,YAMAhP,GACd,MAAM,cAACC,EAAa,cAAEkP,GAAiBnP,EACjC4tB,EAA0B3tB,EAC1BoO,EAAa,GAAA1R,KAAI,WAAe,KAAnBA,KAAoBixB,GACnCvf,GAAcc,IAAkBd,GAChCA,EAAWsB,S,YAIC3P,GAChB,MAAM,cAACC,EAAa,OAAEvE,GAAUsE,EAC1B4tB,EAA0B3tB,EAC5BvE,aAAkBE,aAAeF,EAAOwvB,UAAU9c,SAAS,cAC3D,GAAAzR,KAAI,WAAe,KAAnBA,KAAoBixB,EAAYlyB,GAChCkyB,EAAWrf,UAAY,I,YAIVvO,GACjB,MAAM,cAACC,EAAa,cAAEkP,GAAiBnP,EACjC4tB,EAA0B3tB,GACP2tB,EAAWxf,SAAee,KAE/Cye,EAAWrf,SAAW,I,YAIXvO,GACf,MAAM,OAACtE,GAAUsE,EACX4tB,EAA0BlyB,EAC5BA,aAAkBE,aAAeF,EAAOwvB,UAAU9c,SAAS,cACvD,GAAAzR,KAAI,QAAcjC,IAAIkzB,GACtB,GAAAjxB,KAAI,QAAsBmB,IAAIpC,GAAQ,GAGtCkyB,EAAW7sB,cAAc,IAAIiL,MAAM,kBAAmB,CAACC,SAAS,O,mXC1jBtD,IAC1B/F,EAAO,CACHH,KAAM,iBAFoB,EAG5B,GAAC,cAA6CtJ,EAG5CC,cACIsE,QAHJ,oBAII,GAAArE,KAAI,GAAa,EAAQ,KAAM,CAC3BqB,WAAY,CACR6V,MAAO,gBACPuW,KAAM,WAEZ,KAGNxtB,SACI,O,uSAAoB,CAAAD,KAAI,QAAWyO,WAAU,GAGjD7N,KAAKa,EAAmB2H,GACpB,OAAO3H,EAGXnC,gBAAgByD,EAAmBnC,GAC/BG,MAAM4J,KAAK/J,EAAK6I,YAAY5K,SAAQ,CAACgH,EAAQM,KACrCN,aAAkB5G,cAClBixB,GAAeG,YAAYxqB,EAAQM,GACnC+pB,GAAea,SAASlrB,EAAQ,MAC5B,IAAIiJ,GAAS,EACTC,EAAkClJ,EACtC,KAAuB,OAAhBkJ,GAAwBA,EAAYC,QAAQ,iBAC/CD,EAAcA,EAAYE,eAAeC,QAAQ,cAAgB,KACjEJ,IAEJ,OAAOA,GAPqB,U,g/BC7BhD,MAAMoiB,WAAkBvrB,EAMpB5F,YAAY8B,GACRwC,QACA,MAAM6P,EAAerS,GAAMqS,cAAgB,SAASC,EAAuBC,GACvE,OAAOD,EAAOE,MAAMC,cAAcF,EAAOC,QAEvCzR,EAAQ,IAAIgD,EAAU/D,GAAMe,OAAS,IAC3CA,EAAM0B,UAAUtE,MAChBA,KAAKkU,aAAeA,EACpBlU,KAAK4C,MAAQA,EAGjBuuB,eAAenuB,GACX,OAAOhD,KAAK4C,MAAM7E,IAAIiF,IAW9B,MAAMouB,GAGFrxB,YAAY6C,GAFZ,oBAGI,GAAA5C,KAAI,GAAU4C,EAAK,KAGvB,YAAYA,GACR,OAAO,IAAIwuB,GAAaxuB,GAG5B0S,OACkB,GAAAtV,KAAI,QACZnB,SAAQgH,IACVA,EAAOyP,UAIfG,OACkB,GAAAzV,KAAI,QACZnB,SAAQgH,IACVA,EAAO4P,UAIfC,UACI,MACMC,EADQ,GAAA3V,KAAI,QACG4V,QACjB,CAACD,EAAQ9P,IAAW,GAAG8P,KAAU9P,EAAOwO,SAAS,IAErDkB,QAAQC,IAAIG,GAGhB9O,SACI,MACMgP,EADQ,GAAA7V,KAAI,QACe4V,QAAO,CAAClV,EAAKmF,KAC1C,MAAM,WAACtB,GAAcsB,EACrB,GAAItB,aAAsB2sB,GAAW,CACjC,MAAM,MAACtuB,GAAS2B,EACVwR,EAAQrV,EAAI3C,IAAI6E,GAClBmT,EAAOA,EAAM9U,KAAK4E,GACjBnF,EAAIS,IAAIyB,EAAO,CAACiD,IAEzB,OAAOnF,IACR,IAAIiB,KACPZ,MAAM4J,KAAKkL,EAAmBjL,WAAW/L,SACrC,EAAEmX,EAAQC,MACND,EAAOrR,eACPsR,EAAWpX,SAASqX,IAChBF,EAAOnP,OAAOqP,MAElBF,EAAOpR,iB,eAMvB,MAAMysB,WAAsB1rB,EAMxB5F,YAAY8B,GACRwC,QACA,MAAM,MAACgQ,GAASxS,EAChB7B,KAAKqU,MAAQA,EACbrU,KAAKoW,YAAa,EAGtB,YACI,MAAM,WAAC7R,GAAcvE,KACrB,OAAIuE,aAAsB2sB,GACf3sB,EAAW3B,MAAMI,MAAMhD,OAE1B,EAGZsV,OACItV,KAAKoW,YAAa,EAGtBX,OACIzV,KAAKoW,YAAa,EAGtBV,UACIH,QAAQC,IAAIxV,KAAKqU,OAGrBxN,SACI,MAAM,WAACtC,GAAcvE,KACrB,GAAIuE,aAAsB2sB,GAAW,CACjC,MAAM,MAACtuB,GAAS2B,EACZ3B,GACAA,EAAMiE,OAAO7G,QAlCzB,IADCsF,K,kCA4DL,IAAMgsB,GAAN,cAA2Bxd,GAOvB/T,YAAYsL,GACRhH,Q,aANJ,oBACA,oBAMIrE,KAAKsO,aAAa,CAACC,KAAM,SACzB,GAAAvO,KAAI,GAAmB,IAAIvB,QAAS,KACpC,GAAAuB,KAAI,GAAwB,IAAIvB,QAAS,KACzCuB,KAAKuT,SAASlI,GAAS,IAAI6lB,IAG/BK,iBACI,MAAM,MAAClmB,GAASrL,KAChB,OAAO,GAAAA,KAAI,QAAiBjC,IAAIsN,IAAQ9L,SAAW,KAGvDiyB,mBAAmBnmB,GACf,OAAO,GAAArL,KAAI,QAAsBjC,IAAIsN,IAAQ9L,SAAY,KAG7DgR,gBACI,MAAMrE,EAAOlM,KAAKuxB,iBAClB,GAAIrlB,EAAM,CACN,MAAM,MAACb,GAASrL,KAEhB,OADyBkM,EAAKqE,gBACN7P,KACpBmF,GAAyBwF,EAAM8lB,eAC3BtrB,EAAOgJ,YAInB,MAAO,GAGX4E,eACI,OAAO5J,EACH,EAAQ,QAAS,CACbM,SAAU,CACC,qIAOf,EAAQ,SAIhBqJ,cACI,MAAM,MAACnI,GAASrL,KACVyxB,EAAc,EAAQ,SAAU,CAClCpwB,WAAY,CACRsV,SAAU,GAEdxM,SAAU,CACN,EAAQ,kBAAmB,CACvBA,SAAUwD,GACNtC,EAAMzI,OAAOG,GAAQ,GAAA/C,KAAI,WAAgB,KAApBA,KAAqB+C,QAItDqH,UAAW,CACP0M,YAA4B,GAAA9W,KAAI,WAAyB2H,KAAK3H,MAC9D+W,QAAwB,GAAA/W,KAAI,WAAqB2H,KAAK3H,SAI9D,OADA,GAAAA,KAAI,QAAiBmB,IAAIkK,EAAO,IAAInK,QAAQuwB,IACrCA,I,yDAGK1uB,GACZ,MAAM2uB,EAAkB,EAAQ,aAAc,CAC1CrwB,WAAY,CACRsV,UAAW,EACXvN,KAAMrG,EAAKsR,MACXgD,UAAW,QAEfnN,QAAS,CACLlH,MAAOD,EAAKC,OAEhBmH,SAAU,CACN,EAAQ,OAAQ,CACZA,SAAU,CACNpH,EAAKsR,SAGb,EAAQ,YAAa,CACjBhT,WAAY,CAERsV,SAAU,GAEdxM,SAAU,CACN,EAAQ,qBAAsB,CAC1BA,SAAU,CACNib,GAAaJ,WAAW,CACpB5b,KAAM,WACNiL,MAAO,UACP2Q,WAAY,IAAInC,GAAY,CACxBjJ,KAAMtO,GACFvI,EACA,IAAIwc,GAAM,CACNpV,SAAU,CACN,IAAI0T,GAAe,CACfjb,MAAO,CACHwa,GAAUE,OAAO,CACblU,KAAM,UACNiL,MAAO,UACPiD,QAAS,KACLvU,EAAK2S,aAGb0H,GAAUE,OAAO,CACblU,KAAM,SACNiL,MAAO,SACPiD,QAAS,KACLvU,EAAK8D,eAKrB,IAAIgX,GAAe,CACfjb,MAAO,CACHwa,GAAUE,OAAO,CACblU,KAAM,aACNiL,MAAO,aACPiD,QAAS,KACLvU,EAAKqT,WACLrT,EAAK0S,OACL1S,EAAKuS,gBAO7B,CAAC,eACD,CAACsE,EAAM9U,EAAUnF,EAAUqC,aAavCsJ,GACIvI,EACA,EAAQ,gBAAiB,CACrB1B,WAAY,CACR+H,KAAM,aACNpK,KAAM,WACN2X,UAAW,GAEfvM,UAAW,CACPkN,QAAS,KACLvU,EAAKqT,WACDrT,EAAK0S,OACL1S,EAAKuS,WAIrB,CAAC,eACD,CAACqc,EAAa7sB,EAAUnF,EAAUqC,KAC9B2vB,EAAY/Z,MAAQ5V,EAAW,OAAS,OACxC2vB,EAAY9Z,QAAU7V,cAUtD,OADA,GAAAhC,KAAI,QAAsBmB,IAAI4B,EAAM,IAAI7B,QAAQwwB,IACzCA,GACV,YAEuBruB,GACpB,MAAM,QAACqW,EAAO,QAAEC,EAAO,cAAErW,EAAa,OAAEvE,GAAUsE,GAC5C,MAACgI,GAASrL,KAChB,GAAIsD,aAAyBkkB,IAAoBzoB,aAAkBqoB,GAAsB,CACrF,MAAM1V,EAAarG,EAAM8lB,eACrBX,SAASzxB,EAAOmL,QAAQlH,QAEtB4W,EAAO,EAAQ,SAAU,CAC3BvY,WAAY,CACRsV,UAAW,EACXkD,YAAY,GAEhB1P,SAAU,CACN,EAAQ,kBAAmB,CACvB9I,WAAY,CACRsV,UAAW,GAEfxM,SAAU,CACN,EAAQ,aAAc,CAClB9I,WAAY,CACRsV,UAAW,GAEfxM,SAAU,CACN,WAEJC,UAAW,CACPkN,QAAS,KACL8Z,GAAazmB,KACT3K,KAAKuQ,iBACPmF,cAId,EAAQ,aAAc,CAClBrU,WAAY,CACRsV,UAAW,GAEfxM,SAAU,CACN,UAEJC,UAAW,CACPkN,QAAS,KACL8Z,GAAazmB,KACT3K,KAAKuQ,iBACP1J,gBAMtB,EAAQ,kBAAmB,CACvBxF,WAAY,CACRsV,UAAW,GAEfxM,SAAU,CACN,EAAQ,aAAc,CAClB9I,WAAY,CACRsV,UAAW,EACX3X,KAAM,YAEVmL,SAAU,CACNuH,EAAW0E,WAAa,OAAS,QAErChM,UAAW,CACPkN,QAAS,KACL,MAAM/G,EAAgB6gB,GAAazmB,KAC/B3K,KAAKuQ,iBAETmB,EAAW0E,WACP7F,EAAckF,OACdlF,EAAc+E,eAO1ClL,UAAW,CACP0P,MAAO,KACH/a,EAAOiU,MAAM,CAACC,eAAe,QAIzClU,EAAO0H,OAAOmT,GACdA,EAAKI,mBAAmBN,EAASC,GACjCC,EAAK5G,MAAM,CAACC,eAAe,IAC3B5P,EAAMkP,mBAEb,YAEmBlP,GAChB,MAAM,cAACC,EAAa,IAAE5F,GAAO2F,EAC7B,GAAIC,aAAyBkkB,GACzB,OAAQ9pB,GACJ,IAAK,SACD0zB,GAAazmB,KACT3K,KAAKuQ,iBACP1J,SACFxD,EAAMkP,mBA5RpB+e,GAAY,IAHjBpoB,EAAc,CACXE,KAAM,YAEJkoB,IAoSN,I,iCAAIM,GAAgCN,G,69BCzbpC,MAAMO,WAAkBlsB,EAMpB5F,YAAY8B,GACRwC,QACA,MAAM2b,EAAO,IAAIpa,EAAU/D,GAAMme,MAAQ,IACzCA,EAAK1b,UAAUtE,MACfA,KAAKggB,KAAOA,EACZ,MAAM8R,EAAU,IAAIlsB,EAAU/D,GAAMiwB,SAAW,IAC/CA,EAAQxtB,UAAUtE,MAClBA,KAAK8xB,QAAUA,EAGnBC,gBAAgB3oB,GACZ,OAAOrI,MAAM4J,KAAK3K,KAAK8xB,QAAQ7uB,UAAUkb,MACrC6T,GAAYA,EAAS5oB,MAAQA,KAC5B,KAGT6oB,aAAaC,EAAyBC,GAClCpxB,MAAM4J,KAAK3K,KAAK8xB,QAAQ7uB,UAAUpE,SAASmzB,IACvCA,EAASI,UAAYJ,GAAYE,EAASC,OAAY,KAE1DnyB,KAAKggB,KAAKha,MACN,CAACqsB,EAAOC,KACJ,MAAMC,EAAiBL,EAAOM,QAAQH,GAAOlqB,WACvCsqB,EAAiBP,EAAOM,QAAQF,GAAOnqB,WAC7C,OAAOgqB,EAAYI,EAAOje,cAAcme,OAexD,MAAMC,WAA6D/sB,EAU/D5F,YAAY8B,GAORwC,QACA,MAAM,KAAC+E,EAAI,MAAEiL,EAAK,KAAErV,EAAI,QAAEwzB,GAAW3wB,EACrC7B,KAAKoJ,KAAOA,EACZpJ,KAAKqU,MAAQA,EACbrU,KAAKhB,KAAOA,EACZgB,KAAKwyB,QAAUA,EACfxyB,KAAK2yB,QAAU9wB,EAAK8wB,SAAW,GAC/B3yB,KAAKoyB,UAAY,GAhBrB,IADC9sB,K,iCAqBL,MAAMstB,WAAqBjtB,EAOvB5F,YAAY8B,GACRwC,QACA,MAAM,KAAC+E,EAAI,IAAEypB,GAAOhxB,EACpB7B,KAAKoJ,KAAOA,EACZpJ,KAAK6yB,IAAMA,GATf,IADCvtB,K,4BAID,IADCA,K,2BAmCL,IAAMwtB,GAAN,cAA2Bhf,GAqBvB/T,YAAYsL,GACRhH,Q,aAjBJ,oBACA,oBAQA,oBACA,oBAEA,oBAMI,GAAArE,KAAI,GAAmB,GAAE,KACzB,GAAAA,KAAI,GAAiB,KAAI,KACzB,GAAAA,KAAI,GAAuB,IAAIvB,QAAS,KACxCuB,KAAKsO,aAAa,CAACC,KAAM,SACzBvO,KAAKuT,SAASlI,GAAS,IAAIwmB,IAC3B,GAAA7xB,KAAI,IAAiB,CAACghB,EAAmBkR,IAC9B,EAAQ,QAAS,CACpB/nB,SAAU,CACN+nB,EAAOM,QAAQxR,OAG1B,KACD,GAAAhhB,KAAI,IAAoBkyB,GACb,EAAQ,QAAS,CACpB/nB,SAAU,CACN+nB,EAAO7d,UAGlB,KAGLzU,yBAAyBwJ,EAAczJ,EAAyBqC,GAC5D,OAAQoH,GACJ,IAAK,YACL,IAAK,WACDpJ,KAAK0T,WAMjB,kBACI,OAAO1T,KAAK+yB,iBAGhBC,kBAAkBC,GACd,GAAAjzB,KAAI,GAAmBizB,EAAQ,KAGnCC,gBAAgBD,GACZ,GAAAjzB,KAAI,GAAiBizB,EAAQ,KAGjCF,iBACI,OAAO/yB,KAAKqO,WAAWmB,cAAc,mBAGzC2jB,cAAcnS,GACV,OAAO,GAAAhhB,KAAI,QAAqBjC,IAAIijB,IAAMzhB,SAAW,KAGzD6zB,uBAAuBlB,GACnB,OAAOlyB,KAAKqO,WAAWmB,cAAc,iFAAiF0iB,EAAO9oB,SAGjIiqB,sBAAsBnB,GAClB,OAAOnxB,MAAM4J,KAAK3K,KAAKqO,WAAW6P,iBAAiB,kEAAkEgU,EAAO9oB,UAGhIqK,eACI,MAAM,MAACpI,GAASrL,KAChB,OAAO6J,EACH,EAAQ,OAAQ,CACZxI,WAAY,CACR2V,IAAK,aACLC,KAAM,kBAGd,EAAQ,OAAQ,CACZ5V,WAAY,CACR2V,IAAK,aACLC,KAAM,4BAGd,EAAQ,MAAO,CACX9M,SAAU,CACN,EAAQ,QAAS,CACb9I,WAAY,CACRrC,KAAM,UAEVoL,UAAW,CACPkpB,MAAsB,GAAAtzB,KAAI,WAAyB2H,KAAK3H,YAKxE,EAAQ,SAAU,CACdqB,WAAY,CACRsV,SAAU,EACV+K,SAAU,OAEdvX,SAAU,CACN,EAAQ,aAAc,CAClBA,SAAU,CACN,EAAQ,YAAa,CACjBA,SAAUwD,GACNtC,EAAMymB,SAASI,GAAU,GAAAlyB,KAAI,WAA4B,KAAhCA,KAAiCkyB,UAK1E,EAAQ,aAAc,CAClB/nB,SAAUwD,GACNtC,EAAM2U,MAAMgB,GAAO,GAAAhhB,KAAI,WAAmB,KAAvBA,KAAwBghB,WAQnEuS,gBAAgBlsB,GACZ,GAAArH,KAAI,GAAiBqH,EAAM,KAC3BtG,MAAM4J,KAAK3K,KAAKqL,MAAM2U,KAAK/c,UAAUpE,SAAS+hB,IAC1C,MAAM4S,EAAaxzB,KAAKmzB,cAAcvS,GAClC4S,IACAA,EAAWrc,QACN,GAAAnX,KAAI,QAAiBuY,MAAKkb,GAAYA,EAASpsB,OAAOuZ,QAClDvZ,GAAQA,OAAOuZ,IAAU,OAG1C,MAAM,YAAC8S,GAAe1zB,KACtB0zB,EAAY/iB,iBACZ+iB,EAAYtT,eAAevhB,SAAQ8hB,GAAiBA,EAAcjQ,UAAW,IAC7EgjB,EAAY9iB,eAGhB+iB,iBAAiBtsB,GACU,GAAArH,KAAI,QACPuH,SAASF,KACzB,GAAArH,KAAI,QAAiBiB,KAAKoG,GAC1BtG,MAAM4J,KAAK3K,KAAKqL,MAAM2U,KAAK/c,UAAUpE,SAAS+hB,IAC1C,MAAM4S,EAAaxzB,KAAKmzB,cAAcvS,GAClC4S,IACAA,EAAWrc,QAAU,GAAAnX,KAAI,QAAiBuY,MAAKkb,GAAYA,EAASpsB,OAAOuZ,UAIvF,MAAM,YAAC8S,GAAe1zB,KACtB0zB,EAAY/iB,iBACZ+iB,EAAYtT,eAAevhB,SAAQ8hB,GAAiBA,EAAcjQ,UAAW,IAC7EgjB,EAAY9iB,eAGhBgjB,oBAAoBvsB,GAChB,MAAMwsB,EAAiB,GAAA7zB,KAAI,QACrB8zB,EAAcD,EAAe9tB,QAAQsB,GACvCysB,GAAe,IACfD,EAAe3vB,OAAO4vB,EAAa,GACnC/yB,MAAM4J,KAAK3K,KAAKqL,MAAM2U,KAAK/c,UAAUpE,SAAS+hB,IAC1C,MAAM4S,EAAaxzB,KAAKmzB,cAAcvS,GAClC4S,IACAA,EAAWrc,QAAU,GAAAnX,KAAI,QAAiB+zB,OAAMN,GAAYA,EAASpsB,OAAOuZ,UAIxF,MAAM,YAAC8S,GAAe1zB,KACtB0zB,EAAY/iB,iBACZ+iB,EAAYtT,eAAevhB,SAAQ8hB,GAAiBA,EAAcjQ,UAAW,IAC7EgjB,EAAY9iB,iB,sGAGYshB,GACxB,MAAM,MAAC7mB,GAASrL,KAiNhB,OAhN0BsL,GACtB4mB,EACA,EAAQ,aAAc,CAClB7wB,WAAY,CACRsV,UAAW,EACXvN,KAAM8oB,EAAO9oB,KACbmf,GAAIvoB,KAAKg0B,UAAY,GAAG9B,EAAO9oB,yBAAsB,EACrDpK,KAAM,gBAEVmL,SAAU,CACN,EAAQ,OAAQ,CACZ9I,WAAY,CACR6V,MAAO,oBAEX/M,SAAmB,CACf,EAAQ,QAAS,CACb9I,WAAY,CACR6V,MAAO,kBAEX/M,SAAU,CACN+nB,EAAO7d,OAEXjK,UAAW,CACPgJ,MAAsB,GAAApT,KAAI,WAA8B2H,KAAK3H,SAGrE,EAAQ,YAAa,CACjBqB,WAAY,CACRsV,UAAW,GAEfxM,SAAU,CACN,EAAQ,gBAAiB,CACrB9I,WAAY,CACRrC,KAAM,aACN2X,UAAW,GAEfxM,SAAU,CACN,EAAQ,eAAiB,CACrB9I,WAAY,CACRT,KAAM,aACN+V,UAAW,GAEfxM,SAAU,CACN,EAAQ,SAAW,CACf9I,WAAY,CACRT,KAAM,OACN+V,UAAW,GAEfxM,SAAU,CACN,EAAQ,aAAe,CACnB9I,WAAY,CACRrC,KAAM,SACN2X,UAAW,GAEfxM,SAAU,CACN,iBAEJC,UAAW,CACPkN,QAAS,KACL,MAAM2c,EAAsBj0B,KAAKozB,uBAAuBlB,GACpD+B,IACAA,EAAoBvkB,MAAMwkB,eAAe,SACzCD,EAAoBvkB,MAAMwkB,eAAe,aACzCl0B,KAAKqzB,sBAAsBnB,GAAQrzB,SAC/B8gB,GAAUA,EAAOjQ,MAAMykB,SAAW,eAMtD,EAAQ,aAAe,CACnB9yB,WAAY,CACRrC,KAAM,UACN2X,UAAW,GAEfxM,SAAU,CACN,OACAmB,GACI4mB,EACA,EAAQ,SAAW,CACf7wB,WAAY,CACRT,KAAM,OACN+V,UAAW,GAEfxM,SAAU,CACN,EAAQ,aAAe,CACnB9I,WAAY,CACRrC,KAAM,QACNoK,KAAM,OACN7K,MAAO,IACPoY,UAAW,GAEfxM,SAAU,CACN,eAGR,EAAQ,aAAe,CACnB9I,WAAY,CACRrC,KAAM,QACNoK,KAAM,OACN7K,MAAO,KACPoY,UAAW,GAEfxM,SAAU,CACN,iBAIZC,UAAW,CACPkN,QAAUjU,IACN,MAAM,OAACtE,GAAUsE,EACX8uB,EAAmCpzB,EAAQR,MACjD8M,EAAM4mB,aAAaC,EAAQ1B,SAAS2B,QAIhD,CAAC,cACD,CAACvY,EAAM9U,EAAUnF,EAAUqC,KACvB4X,EAAKsE,iBAAuC,0BAC3Crf,SAAQu1B,IACLA,EAAgBvc,QAAU2Y,SAAS4D,EAAgB71B,SAAWyD,WAMlF,EAAQ,aAAe,CACnBX,WAAY,CACRrC,KAAM,UACN2X,UAAW,GAEfxM,SAAU,CACN,SACA,EAAQ,SAAW,CACf9I,WAAY,CACRT,KAAM,OACN+V,UAAW,GAEfxM,SAAU+nB,EAAOS,QAAQjyB,KAAI,CAAC+yB,EAAUttB,IACpC,EAAQ,aAAc,CAClB9E,WAAY,CACRsV,UAAW,EACX3X,KAAM,WACN6Y,QAAS,GAAA7X,KAAI,QAAiBuH,SAASksB,IAE3CtpB,SAAU,CACNspB,EAASrqB,MAEbgB,UAAW,CACPkN,QAAUjU,IACN,MAAM,cAACC,GAAiBD,EACxB,GAAIC,aAAyB6Z,GAAsB,CAC/C,MAAM,QAACtF,GAAWvU,EACduU,EACA7X,KAAK2zB,iBAAiBF,GAGtBzzB,KAAK4zB,oBAAoBH,4BAkB9FhzB,OACCT,KAAKg0B,UAAY,CACb,EAAQ,UAAW,CACf3yB,WAAY,CACRglB,SAAU,GAAG6L,EAAO9oB,qBAExBgB,UAAW,CACPiqB,OAAQ,KACJr0B,KAAKqzB,sBAAsBnB,GAAQrzB,SAC/B8gB,GAAUA,EAAOjQ,MAAMwkB,eAAe,oBAKtD,SAKpB,CAAC,cACD,CAACrT,EAAM/b,EAAUnF,EAAUqC,KACvB,OAAQ8C,GACJ,IAAK,iBACuB,IAAb9C,EACP6e,EAAK3W,QAAQkoB,UAAYpwB,EAASmG,kBAG3B0Y,EAAK3W,QAAQkoB,eAO3C,YAEkBpR,GACf,MAAM,MAAC3V,GAASrL,KACVs0B,EAAiB,EAAQ,YAAa,CACxCjzB,WAAY,CACRsV,UAAW,GAEfxM,SAAUwD,GACNtC,EAAMymB,SAASI,GAAU,GAAAlyB,KAAI,WAAoB,KAAxBA,KAAyBghB,EAAKkR,OAI/D,OADA,GAAAlyB,KAAI,QAAqBmB,IAAI6f,EAAK,IAAI9f,QAAQozB,IACvCA,GACV,YAEmBtT,EAAmBkR,GAUnC,OATwB,EAAQ,aAAc,CAC1C7wB,WAAY,CACRrC,KAAM,WACNu1B,QAASrC,EAAO9oB,MAEpBe,SAAU,CACN,GAAAnK,KAAI,QAAc,KAAlBA,KAAmBghB,EAAKkR,OAInC,YAEuB7uB,GACpB,MAAM,OAACtE,GAAUsE,EACjB,GAAItE,aAAkBy1B,iBAAkB,CACpC,MAAM,MAACj2B,GAASQ,EAChBiB,KAAKuzB,gBAA0B,KAAVh1B,EAAe,CAChC8I,OAAS2Z,GAAQA,EAAI5X,KAAKnB,cAAc+M,WAAWzW,EAAM0J,gBACzD,QAEX,YAE4B5E,GACzB,MAAM,cAACC,GAAiBD,GAClB,MAACgI,GAASrL,MACV,QAAC8xB,GAAWzmB,EAClB,GAAI/H,aAAyBmf,QAAS,CAClC,MAAMd,EAAare,EAAc4L,QAAQ,cACzC,GAAIyS,EAAY,CACZ,MAAM8S,EAAe1zB,MAAM4J,KAAKmnB,EAAQ7uB,UAAUkb,MAAK6T,GAAYA,EAAS5oB,MAAQuY,EAAWvY,OAC/F,GAAIqrB,EAAc,CACd,MAAMrC,OAA8C,IAA3BqC,EAAarC,WAA6BqC,EAAarC,UAAY,EAC5F/mB,EAAM4mB,aAAawC,EAAcrC,OApbjD,IADClqB,EAAkB,CAAClJ,KAAMuJ,QAASF,UAAU,K,iCAI7C,IADCH,EAAkB,CAAClJ,KAAMuJ,QAASF,UAAU,K,gCAX3CyqB,GAAY,IAHjB5pB,EAAc,CACXE,KAAM,YAEJ0pB,IAocN,IAAI4B,GAAgC5B,GCxjB7BvU,eAAeoW,KA2ElB,MAAMC,EAAW,IAAI3a,GACf4a,EAAY,IAAI9gB,GAAU,CAC5BnR,MAAO,CACH,IAAIkT,GAAc,CACdzB,MAAO,OACPrV,KAAM,SACN4D,MAAO,CACH,IAAIkT,GAAc,CACdzB,MAAO,QACPrV,KAAM,SACN4D,MAAO,CACH,IAAIkT,GAAc,CACd9W,KAAM,OACNqV,MAAO,cAInB,IAAIyB,GAAc,CACd9W,KAAM,SACNqV,MAAO,aAInB,IAAIyB,GAAc,CACdzB,MAAO,OACPrV,KAAM,SACN4D,MAAO,CACH,IAAIkT,GAAc,CACdzB,MAAO,QACPrV,KAAM,SACN4D,MAAO,CACH,IAAIkT,GAAc,CACd9W,KAAM,OACNqV,MAAO,cAInB,IAAIyB,GAAc,CACd9W,KAAM,SACNqV,MAAO,aAInB,IAAIyB,GAAc,CACd9W,KAAM,OACNqV,MAAO,SAEX,IAAIyB,GAAc,CACd9W,KAAM,OACNqV,MAAO,UAGfH,aAAc,CAACC,EAAuBC,KAClC,MAAOC,MAAOygB,GAAU3gB,GACjBE,MAAO0gB,GAAU3gB,EACxB,OAAO2gB,EAAOzgB,cAAcwgB,MAGpCF,EAASrhB,SAASshB,GAClB9qB,SAASgQ,KAAKtT,OAAOmuB,GAErBC,EAAU7gB,WAAWvN,OACjB,IAAIqP,GAAc,CACdzB,MAAO,KACPrV,KAAM,SACN4D,MAAO,CACH,IAAIkT,GAAc,CACd9W,KAAM,OACNqV,MAAO,aAMvB,MAAM2gB,EAAW,IAAIpD,GACrBoD,EAASzhB,SACL,IAAI2d,GAAU,CACVtuB,MAAO,CACH,IAAIyuB,GAAc,CACdhd,MAAO,QAEX,IAAIgd,GAAc,CACdhd,MAAO,WAMvBtK,SAASgQ,KAAKtT,OAAOuuB,GAIrB,MAAMC,EAAW,IAAIP,GACrBO,EAASjB,WAAY,EACrBiB,EAASC,UAAW,EACpBD,EAASjC,mBAAmBd,GACjBroB,EACH,EAAQ,QAAS,CACbM,SAAU,CACN+nB,EAAO7d,YAcvB4gB,EAAS1hB,SACL,IAAIse,GAAU,CACVC,QAAS,CACL,IAAIY,GAAgB,CAChBtpB,KAAM,OACNiL,MAAO,OACPrV,KAAMiK,OACNupB,QAAUxR,GAAQA,EAAI5X,OAE1B,IAAIspB,GAAgB,CAChBtpB,KAAM,MACNiL,MAAO,MACPrV,KAAM+J,OACNypB,QAAUxR,GAAQA,EAAI6R,IACtBF,QAAS,CAAC,CACNvpB,KAAM,SACN/B,OAAS2Z,GAAQA,EAAI6R,IAAM,IAC7B,CACEzpB,KAAM,SACN/B,OAAS2Z,GAAQA,EAAI6R,KAAO,QAIxC7S,KAAM,CACF,IAAI4S,GAAa,CACbxpB,KAAM,QACNypB,IAAK,KAET,IAAID,GAAa,CACbxpB,KAAM,eACNypB,IAAK,KAET,IAAID,GAAa,CACbxpB,KAAM,UACNypB,IAAK,SAMrB9oB,SAASgQ,KAAKtT,OAAOwuB,GAErB,MAAME,EAAW/1B,EAAO,UAAW,CAC/B2L,QAAS,CACL3L,EAAO,WAAY,CACf8H,WAAY,CACRmN,MAAO,aACPjL,KAAM,aACNpK,KAAM,OACNmb,UAAU,GAEdpP,QAAS,CACL3L,EAAO,OAAQ,CACX2L,QAAS,CACL3L,EAAO,WAAY,CACf8H,WAAY,CACRmN,MAAO,aACPjL,KAAM,aACNpK,KAAM,oBAO9BI,EAAO,WAAY,CACf8H,WAAY,CACRmN,MAAO,aACPjL,KAAM,aACNpK,KAAM,QAEV+L,QAAS,CACL3L,EAAO,OAAQ,CACX2L,QAAS,CACL3L,EAAO,gBAAiB,CACpB2L,QAAS,CACL3L,EAAO,WAAY,CACf8H,WAAY,CACRmN,MAAO,aACPrV,KAAM,WACN6uB,YAAa,SACb1T,UAAU,EACVtC,SAAS,KAGjBzY,EAAO,WAAY,CACf8H,WAAY,CACRlI,KAAM,SACNqV,MAAO,aACPwZ,YAAa,eAK7BzuB,EAAO,aACPA,EAAO,WAAY,CACf8H,WAAY,CACRmN,MAAO,UACPrV,KAAM,WAEV+L,QAAS,CACL3L,EAAO,OAAQ,CACX2L,QAAS,CACL3L,EAAO,WAAY,CACf8H,WAAY,CACRmN,MAAO,aACPrV,KAAM,QACNoK,KAAM,QACN7K,MAAO,OAGfa,EAAO,WAAY,CACf8H,WAAY,CACRlI,KAAM,QACNqV,MAAO,aACPjL,KAAM,QACN7K,MAAO,sBAavDwL,SAASgQ,KAAKtT,OAAO0uB,GAGrB,MAAM1e,EAAOrX,EAAO,OAAQ,CACxB2L,QAAS,CACL3L,EAAO,WAAY,CACf8H,WAAY,CACRmN,MAAO,aACPrV,KAAM,UAGV+L,QAAS,CACL3L,EAAO,gBAAiB,CACpB2L,QAAS,CACL3L,EAAO,WAAY,CACf8H,WAAY,CACRmN,MAAO,aACPrV,KAAM,cAM1BoL,UAAW,CACP0M,YAA8BzT,IAC1B,MAAM,OAACtE,EAAM,QAAE2a,EAAO,QAAEC,GAAWtW,EAC7B4V,EAAwCla,EAAQmQ,QAAQ,aACxD0K,EAAOxa,EAAO,OAAQ,CACxB8H,WAAY,CACR2S,YAAY,GAEhB9O,QAAS,CACL3L,EAAO,gBAAiB,CACpB2L,QAAS,CACL3L,EAAO,WAAY,CACf8H,WAAY,CACRmN,MAAO,WAEXjK,UAAW,CACPgJ,MAAO,KACHmC,QAAQC,IAAI0a,GAAetB,SAAS3V,QAIhD7Z,EAAO,WAAY,CACf8H,WAAY,CACRmN,MAAO,UAEXjK,UAAW,CACPgJ,MAAO,KACH6F,EAAWpS,mBAQvCoS,EAAWxS,OAAOmT,GAClBkW,GAAW9V,mBAAmBJ,EAAMF,EAASC,GAC7CC,EAAK5G,MAAM,CAACC,eAAe,IAC3B5P,EAAMkP,qBAIlBnT,EAAO,WAAY,CACf8H,WAAY,CACRmN,MAAO,aACPrV,KAAM,SACNmb,UAAU,GAEdpP,QAAS,CACL3L,EAAO,gBAAiB,CACpB2L,QAAS,CACL3L,EAAO,WAAY,CACf8H,WAAY,CACRmN,MAAO,aACPrV,KAAM,gBAO9BI,EAAO,WAAY,CACf8H,WAAY,CACRmN,MAAO,aACPjL,KAAM,aACNpK,KAAM,aAKtB+K,SAASgQ,KAAKtT,OAAOgQ,IAEN,IC/UnB,MAUI1W,cAEIC,KAAKo1B,SAAW,IAAIr0B,MACpBf,KAAKq1B,gBAAkB,IAAIt0B,MAC3Bf,KAAKs1B,SAAW,IAAIv0B,MACpBf,KAAKu1B,OAAS,IAAI5zB,IAClB3B,KAAKw1B,gBAAkB,IAAI7zB,IAE3B3B,KAAKy1B,iBAAoB,IAAI92B,iBAAiBqB,KAAK01B,yBAAyB/tB,KAAK3H,OAG7E01B,yBAAyB92B,GAC7BA,EAAcC,SAASC,IACnBA,EAAS62B,WAAW92B,SAASsG,IACzBpE,MAAM4J,KAAKnB,EAAarE,IAAOtG,SAASsG,IAChCA,aAAgBsV,IAChBza,KAAK41B,sBAAsBzwB,EAAKiE,KAAMjE,SAIlDrG,EAAS+2B,aAAah3B,SAASsG,IAC3BpE,MAAM4J,KAAKnB,EAAarE,IAAOtG,SAASsG,IAChCA,aAAgBsV,IAChBza,KAAK81B,wBAAwB3wB,EAAKiE,KAAMjE,YAOrD4wB,QACHhsB,SAASgQ,KAAKlW,iBAAiB,UAAW7D,MAC1C+J,SAASgQ,KAAKlW,iBAAiB,UAAW7D,MAE1CA,KAAKy1B,iBAAiB50B,QAAQkJ,SAASgQ,KAAM,CACzCjZ,WAAW,EACXsG,SAAS,IAoDVsjB,YAAYrnB,GACf,MAAMtE,EAASsE,EAAMtE,OACrB,OAAQsE,EAAMrE,MACV,IAAK,UACsBgB,KAAKs1B,SACvB50B,KAAI,CAACs1B,EAAU7vB,IAAM6vB,EAAS9nB,KAAK7K,GAA0B8C,GAAK,IAClEkB,QAAOlB,GAAKA,GAAK,IACPtH,SAASmE,IACpB,MAAM,KAACoG,EAAI,KAAEpK,EAAI,MAAET,EAAK,QAAEsZ,GAAW7X,KAAKo1B,SAASpyB,GACnD,OAAQhE,GACJ,IAAK,SACDgB,KAAKi2B,oBAAoB7sB,GACzB,MACJ,IAAK,WACDpJ,KAAKk2B,sBAAsB9sB,EAAMyO,GACjC,MACJ,IAAK,QACD7X,KAAKm2B,mBAAmB/sB,EAAM7K,OAI1C,MACJ,IAAK,UACD,GAAIQ,aAAkB0b,GAClB,OAAQ1b,EAAOC,MACX,IAAK,SACDgB,KAAKi2B,oBAAoBl3B,EAAOqK,MAChC,MACJ,IAAK,WACDpJ,KAAKk2B,sBAAsBn3B,EAAOqK,KAAMrK,EAAO8Y,SAC/C,MACJ,IAAK,QACL,IAAK,SACD7X,KAAKm2B,mBAAmBp3B,EAAOqK,KAAMrK,EAAOR,SAQ7D63B,qBACHhtB,EACAkO,EACAzV,GAII,OAAO7B,KAAKq2B,eAAejtB,EAAMkO,EAAS,SAAUzV,GAGrDy0B,oBACHltB,EACAkO,EACAzV,GAKI,OAAO7B,KAAKq2B,eAAejtB,EAAMkO,EAAS,QAASzV,GAGpD00B,uBACHntB,EACAkO,EACAzV,GAKI,OAAO7B,KAAKq2B,eAAejtB,EAAMkO,EAAS,WAAYzV,GA6BvDw0B,eACHjtB,EACAkO,EACAtY,EACA6C,GAMA,MAAM20B,EAAS30B,GAAM20B,OACf94B,EAAMmE,GAAMnE,IACZa,EAAQsD,GAAMtD,MACdsZ,EAAUhW,GAAMgW,QAChBuS,EAAiB,CAAChhB,KAAAA,EAAMkO,QAAAA,EAAS5Z,IAAAA,EAAKsB,KAAAA,GACxCT,IACA6rB,EAAO7rB,MAAQA,QAEP,IAARb,QAA4B,IAAVa,GAClBk4B,aAAaC,QAAQh5B,EAAKa,GAE1BsZ,IACAuS,EAAOvS,QAAUA,GAErB,MAAM7U,EAAQhD,KAAKo1B,SAASn0B,KAAKmpB,GAAU,EAI3C,OAHIoM,IACAx2B,KAAKs1B,SAAStyB,GAASwzB,GAEpBpM,EAGJ6L,oBAAoB7sB,GACvBpJ,KAAK22B,cAAcvtB,EAAM,UAGtB8sB,sBAAsB9sB,EAAcwtB,GACvC52B,KAAK22B,cAAcvtB,EAAM,WAAYwtB,GAGlCT,mBAAmB/sB,EAAcpH,GACpChC,KAAK22B,cAAcvtB,EAAM,QAASpH,GAM/B20B,cAAcvtB,EAAcpK,EAAkBgD,GACjD,MAAM60B,EAAc72B,KAAKo1B,SAASnxB,WAC9B6yB,GAAYA,EAAS1tB,MAAQA,IAEjC,GAAIytB,GAAe,EAAG,CAClB,MAAMzM,EAASpqB,KAAKo1B,SAASyB,GAC7B,IAAIl3B,EACJ,OAAQX,GACJ,IAAK,QACDW,EAAWyqB,EAAO7rB,OAAS,GAC3B,MACJ,IAAK,WACDoB,EAAWyqB,EAAO7rB,QAAS,EAGnC6rB,EAAO9S,QAAQ3X,EAAUqC,GACzBhC,KAAK+2B,eAAe3tB,EAAMpH,IA0B3Bg1B,uBAAuB5tB,EAAcyO,GACxC7X,KAAK+2B,eAAe3tB,EAAMyO,GAGvBof,oBAAoB7tB,EAAc7K,GACrCyB,KAAK+2B,eAAe3tB,EAAM7K,GAGvBw4B,eAAe3tB,EAAc7K,GAChC,MAAMs4B,EAAc72B,KAAKo1B,SAASnxB,WAC9B6yB,GAAYA,EAAS1tB,MAAQA,IAEjC,GAAIytB,GAAe,EAAG,CAClB,MAAMzM,EAASpqB,KAAKo1B,SAASyB,IACvB,KAAC73B,EAAI,IAAEtB,GAAO0sB,EACpBA,EAAO7rB,MAAQA,EACXb,GACA+4B,aAAaC,QAAQh5B,EAAKa,GAG9B,MAAM24B,EAAiBl3B,KAAKq1B,gBAAgBwB,GAC5C,GAAIK,EACA,OAAQl4B,GACJ,IAAK,QACDk4B,EAAer4B,SAASs4B,IACQ,SAAxBA,EAAgBn4B,KAChBm4B,EAAgBtf,QAAWsf,EAAgB54B,OAASA,EAEvB,UAAxB44B,EAAgBn4B,OACrBm4B,EAAgB54B,MAAQA,MAGhC,MACJ,IAAK,WACD24B,EAAer4B,SAASs4B,IACpBA,EAAgBtf,QAAUtZ,OAQ3Cq3B,sBAAsBxsB,EAAc9I,GACvC,MAAMu2B,EAAc72B,KAAKo1B,SAASnxB,WAAU6yB,GAAYA,EAAS1tB,MAAQA,IACzE,GAAIytB,GAAe,EAAG,CAClB,MAAMO,EAAWp3B,KAAKq1B,gBAAgBwB,GAClCO,EACKA,EAAS7vB,SAASjH,IACnB82B,EAASn2B,KAAKX,GAIlBN,KAAKq1B,gBAAgBwB,GAAe,CAACv2B,GAGzC,MAAM8pB,EAASpqB,KAAKo1B,SAASyB,IACvB,KAAC73B,EAAI,MAAET,EAAK,QAAEsZ,GAAWuS,EAC/B,OAAQprB,GACJ,IAAK,QACmB,SAAhBsB,EAAQtB,KACRsB,EAAQuX,QAAWvX,EAAQ/B,OAASA,EAEf,UAAhB+B,EAAQtB,OACbsB,EAAQ/B,MAAQA,GAEpB,MACJ,IAAK,WACD+B,EAAQuX,QAAUA,EAI1B,MAAM2e,EAASx2B,KAAKs1B,SAASuB,GACzBL,IACAl2B,EAAQk2B,OAASA,EAAOruB,aAK7B2tB,wBAAwB1sB,EAAc9I,GACzC,MAAMu2B,EAAc72B,KAAKo1B,SAASnxB,WAAU6yB,GAAYA,EAAS1tB,MAAQA,IACzE,GAAIytB,GAAe,EAAG,CAClB,MAAMO,EAAWp3B,KAAKq1B,gBAAgBwB,GACtC,GAAIO,EAAU,CACV,MAAMC,EAAeD,EAASnzB,WAAU0K,GAAaA,GAAarO,IAC9D+2B,GAAgB,IAChBD,EAASE,WAAWD,EAAcA,EAAe,GACjDD,EAASt0B,eDpClBizB,U","sources":["webpack://main/webpack/bootstrap","webpack://main/webpack/runtime/define property getters","webpack://main/webpack/runtime/hasOwnProperty shorthand","webpack://main/webpack/runtime/make namespace object","webpack://main/./src/views/widgets/Widget.ts","webpack://main/./src/models/Model.ts","webpack://main/./src/elements/Snippets.ts","webpack://main/./src/elements/Element.ts","webpack://main/./src/elements/containers/trees/TreeItemGroup.ts","webpack://main/./src/elements/containers/trees/TreeItem.ts","webpack://main/./src/elements/containers/trees/Tree.ts","webpack://main/./src/views/View.ts","webpack://main/./src/views/TreeView.ts","webpack://main/./src/elements/containers/actions/Action.ts","webpack://main/./src/Input.ts","webpack://main/./src/elements/containers/grid/GridCell.ts","webpack://main/./src/elements/containers/grid/GridRowGroup.ts","webpack://main/./src/elements/containers/menus/MenuItem.ts","webpack://main/./src/elements/containers/menus/MenuItemGroup.ts","webpack://main/./src/elements/containers/menus/Menu.ts","webpack://main/./src/elements/containers/grid/GridRow.ts","webpack://main/./src/elements/containers/grid/GridCellCollection.ts","webpack://main/./src/elements/containers/grid/GridRowCollection.ts","webpack://main/./src/elements/containers/grid/GridBody.ts","webpack://main/./src/elements/containers/grid/Grid.ts","webpack://main/./src/elements/containers/grid/GridHead.ts","webpack://main/./src/elements/containers/menus/MenuBar.ts","webpack://main/./src/elements/containers/menus/MenuButton.ts","webpack://main/./src/elements/controls/forms/Option.ts","webpack://main/./src/elements/controls/forms/OptionGroup.ts","webpack://main/./src/elements/controls/forms/OptionCollection.ts","webpack://main/./src/elements/controls/forms/Select.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItem.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItemGroup.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItemCollection.ts","webpack://main/./src/elements/containers/toolbars/ToolBar.ts","webpack://main/./src/elements/containers/tabs/TabPanel.ts","webpack://main/./src/elements/containers/tabs/Tab.ts","webpack://main/./src/elements/containers/tabs/TabList.ts","webpack://main/./src/elements/containers/lists/ListItem.ts","webpack://main/./src/elements/containers/lists/ListItemGroup.ts","webpack://main/./src/elements/containers/lists/List.ts","webpack://main/./src/elements/controls/draggable/Draggable.ts","webpack://main/./src/elements/controls/draggable/Dragzone.ts","webpack://main/./src/elements/controls/draggable/Dropzone.ts","webpack://main/./src/elements/controls/dialogs/Dialog.ts","webpack://main/./src/elements/utils/Handle.ts","webpack://main/./src/elements/utils/HeightSash.ts","webpack://main/./src/elements/utils/Import.ts","webpack://main/./src/elements/utils/Loader.ts","webpack://main/./src/elements/utils/WidthSash.ts","webpack://main/./src/observers/AttributeMixinsObserver.ts","webpack://main/./src/views/widgets/SeparatorWidget.ts","webpack://main/./src/views/widgets/menu/MenuItemWidget.ts","webpack://main/./src/views/widgets/menu/MenuBarWidget.ts","webpack://main/./src/views/widgets/menu/MenuWidget.ts","webpack://main/./src/views/widgets/menu/MenuItemGroupWidget.ts","webpack://main/./src/views/widgets/tree/TreeItemWidget.ts","webpack://main/./src/views/widgets/tree/TreeWidget.ts","webpack://main/./src/views/widgets/tree/TreeItemGroupWidget.ts","webpack://main/./src/views/ListView.ts","webpack://main/./src/views/GridView.ts","webpack://main/./main.ts","webpack://main/./src/Editor.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export { WidgetFactoryConstructor };\r\n\r\nexport { WidgetFactory };\r\nexport { widgets };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {}\r\n}\r\n\r\ninterface WidgetFactoryConstructor {\r\n    readonly prototype: WidgetFactory;\r\n    new(): WidgetFactory;\r\n}\r\n\r\ninterface WidgetFactory {\r\n    create(init?: object): HTMLElement;\r\n    slot(root: HTMLElement, name: string | null): HTMLElement | null;\r\n    get slots(): string[];\r\n}\r\n\r\nvar slotsMap: WeakMap<HTMLElement, [WidgetFactory, WeakRef<HTMLElement>][]> = new WeakMap();\r\nvar slotsObserver = new MutationObserver(\r\n    (mutationsList: MutationRecord[]) => {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            if (target instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"childList\": {\r\n                        const slotReferences = slotsMap.get(target);\r\n                        if (slotReferences) {\r\n                            slotReferences.forEach(slotRef_i => {\r\n                                const [widget, elementRef] = slotRef_i;\r\n                                const slottedCallback = (widget as any)[\"slottedCallback\"];\r\n                                if (typeof slottedCallback == \"function\") {\r\n                                    slottedCallback(elementRef.deref(), target);\r\n                                }\r\n                            });\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n);\r\n\r\nvar elementsMap: WeakMap<HTMLElement, WidgetFactory> = new WeakMap();\r\nvar attributesObserver = new MutationObserver(\r\n    (mutationsList: MutationRecord[]) => {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            if (target instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"attributes\": {\r\n                        const {attributeName, oldValue} = mutation;\r\n                        const widget = elementsMap.get(target);\r\n                        if (widget) {\r\n                            const attributeChangedCallback = (widget as any)[\"attributeChangedCallback\"];\r\n                            if (typeof attributeChangedCallback == \"function\") {\r\n                                attributeChangedCallback(target, attributeName, oldValue, target.getAttribute(attributeName!));\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n);\r\n\r\nclass WidgetFactoryBase implements WidgetFactory {\r\n\r\n    constructor() {\r\n        const widget = <WidgetFactory>this;\r\n        this.create = new Proxy(\r\n            this.create, {\r\n                apply: (target, thisArg, argumentsList) => {\r\n                    const element = Reflect.apply(target, thisArg, argumentsList);\r\n                    const slots =(<(string | null)[]>widget.slots).concat(null).map(slot_i => {\r\n                        return widget.slot(element, slot_i);\r\n                    });\r\n                    slots.forEach(slot_i => {\r\n                        if (slot_i) {\r\n                            slotsObserver.observe(slot_i, {\r\n                                childList: true\r\n                            });\r\n                            const slotReferences = slotsMap.get(slot_i);\r\n                            if (Array.isArray(slotReferences)) {\r\n                                slotReferences.push([widget, new WeakRef(element)]);\r\n                            }\r\n                            else {\r\n                                slotsMap.set(slot_i, new Array([widget, new WeakRef(element)]));\r\n                            }\r\n                        }\r\n                    });\r\n                    const observedAttributes = (widget as any)[\"observedAttributes\"];\r\n                    if (Array.isArray(observedAttributes)) {\r\n                        elementsMap.set(element, widget);\r\n                        attributesObserver.observe(element, {\r\n                            attributes: true,\r\n                            attributeFilter: observedAttributes,\r\n                            attributeOldValue: true\r\n                        });\r\n                    }\r\n                    return element;\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    create(): HTMLElement {\r\n        throw new Error(`create method is not implemented`);\r\n    }\r\n\r\n    slot(root: HTMLElement): HTMLElement {\r\n        return root;\r\n    }\r\n\r\n    get slots(): string[] {\r\n        return [];\r\n    }\r\n}\r\n\r\nvar WidgetFactory: WidgetFactoryConstructor = WidgetFactoryBase;\r\nvar widgets: Map<string, WidgetFactory> = new Map();","export { ModelChangeRecord };\r\nexport { ModelEvent };\r\nexport { ModelNode };\r\nexport { ModelObject };\r\nexport { ModelProperty };\r\nexport { ModelList };\r\nexport { ModelChangeObserverOptions };\r\nexport { ModelChangeObserver };\r\n\r\ninterface ModelChangeRecordConstructor {\r\n    readonly prototype: ModelChangeRecord;\r\n    new(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ): ModelChangeRecord;\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\ninterface ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly changeType: number;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\nclass ModelChangeRecordBase implements ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList;\r\n    readonly changeType: number;\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n\r\n    constructor(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ) {\r\n        this.target = init.target;\r\n        this.changeType = init.changeType;\r\n        this.propertyName = init.propertyName ?? null;\r\n        this.oldValue = init.oldValue ?? void 0;\r\n        this.newValue = init.newValue ?? void 0;\r\n        this.removedIndex = init.removedIndex ?? 0;\r\n        this.removedItems = new ModelNodesList(init.removedItems ?? []);\r\n        this.insertedIndex = init.insertedIndex ?? 0;\r\n        this.insertedItems = new ModelNodesList(init.insertedItems ?? []);\r\n        this.sortedIndices = init.sortedIndices ?? [];\r\n    }\r\n\r\n    static get PROPERTY_CHANGE(): number {\r\n        return 1;\r\n    }\r\n\r\n    static get LIST_REMOVE(): number {\r\n        return 2;\r\n    }\r\n\r\n    static get LIST_INSERT(): number {\r\n        return 3;\r\n    }\r\n\r\n    static get LIST_SORT(): number {\r\n        return 4;\r\n    }\r\n\r\n    get PROPERTY_CHANGE(): number {\r\n        return ModelChangeRecordBase.PROPERTY_CHANGE;\r\n    }\r\n\r\n    get LIST_REMOVE(): number {\r\n        return ModelChangeRecordBase.LIST_REMOVE;\r\n    }\r\n\r\n    get LIST_INSERT(): number {\r\n        return ModelChangeRecordBase.LIST_INSERT;\r\n    }\r\n\r\n    get LIST_SORT(): number {\r\n        return ModelChangeRecordBase.LIST_SORT;\r\n    }\r\n}\r\n\r\nvar ModelChangeRecord: ModelChangeRecordConstructor = ModelChangeRecordBase;\r\n\r\ninterface ModelNodesListConstructor {\r\n    readonly prototype: ModelNodesList;\r\n    new(items: any[]): ModelNodesList;\r\n}\r\n\r\ninterface ModelNodesList {\r\n    get length(): number;\r\n    item(index: number): ModelNode | null;\r\n    values(): IterableIterator<ModelNode>;\r\n}\r\n\r\nclass ModelNodesListBase implements ModelNodesList {\r\n    #items: ModelNode[];\r\n\r\n    constructor(items: ModelNode[]) {\r\n        this.#items = items.slice();\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    item(index: number): ModelNode | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    values(): IterableIterator<ModelNode> {\r\n        return this.#items.values();\r\n    }\r\n}\r\n\r\nvar ModelNodesList: ModelNodesListConstructor = ModelNodesListBase;\r\n\r\ninterface ModelEventConstructor {\r\n    readonly prototype: ModelEvent;\r\n    new(type: string): ModelEvent;\r\n}\r\n\r\ninterface ModelEvent {\r\n    readonly type: string;\r\n    readonly currentTarget: ModelEventTarget | null;\r\n    readonly target: ModelEventTarget | null;\r\n}\r\n\r\nclass ModelEventBase implements ModelEvent {\r\n    readonly type: string;\r\n\r\n    #currentTarget: ModelEventTarget | null;\r\n    #target: ModelEventTarget | null;\r\n\r\n    constructor(type: string) {\r\n        this.type = type;\r\n        this.#currentTarget = null;\r\n        this.#target = null;\r\n    }\r\n\r\n    get currentTarget(): ModelEventTarget | null {\r\n        return this.#currentTarget;\r\n    }\r\n\r\n    get target(): ModelEventTarget | null {\r\n        return this.#target;\r\n    }\r\n\r\n    static ModelEventTargetAccessor? = new class ModelEventTargetAccessor {\r\n        setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#currentTarget = currentTarget;\r\n            }\r\n        }\r\n\r\n        setTarget(event: ModelEvent, target: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#target = target;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface ModelEventTargetAccessor {\r\n    setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void;\r\n    setTarget(event: ModelEvent, target: ModelEventTarget): void;\r\n}\r\n\r\nvar ModelEventTargetAccessor: ModelEventTargetAccessor = ModelEventBase.ModelEventTargetAccessor!;\r\ndelete ModelEventBase.ModelEventTargetAccessor;\r\n\r\nvar ModelEvent: ModelEventConstructor = ModelEventBase;\r\n\r\ninterface ModelEventTargetConstructor {\r\n    readonly prototype: ModelEventTarget;\r\n    new(): ModelEventTarget;\r\n}\r\n\r\ninterface ModelEventTarget {\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    dispatchEvent(event: ModelEvent): void;\r\n    receiveEvent(event: ModelEvent): void;\r\n}\r\n\r\nclass ModelEventTargetBase implements ModelEventTarget {\r\n    #callbacks: Map<string, ((event: ModelEvent) => void)[]>;\r\n\r\n    constructor() {\r\n        this.#callbacks = new Map();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        const {type} = event;\r\n        const callbacks = this.#callbacks.get(type);\r\n        ModelEventTargetAccessor.setCurrentTarget(event, this);\r\n        if (callbacks) {\r\n            callbacks.forEach((callback_i) => {\r\n                callback_i(event);\r\n            });\r\n        }\r\n    }\r\n\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            callbacks.push(callback);\r\n        }\r\n        else {\r\n            this.#callbacks.set(type, [callback]);\r\n        }\r\n    }\r\n\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            const callbackIndex = callbacks.findIndex(\r\n                callback_i => callback_i == callback\r\n            );\r\n            if (callbackIndex > -1) {\r\n                callbacks.splice(callbackIndex, 1);\r\n            }\r\n            if (callbacks.length == 0) {\r\n                this.#callbacks.delete(type);\r\n            }\r\n        }\r\n    }\r\n\r\n    dispatchEvent(event: ModelEvent): void {\r\n        ModelEventTargetAccessor.setTarget(event, this);\r\n        this.receiveEvent(event);\r\n    }\r\n}\r\n\r\nvar ModelEventTarget: ModelEventTargetConstructor = ModelEventTargetBase;\r\n\r\ninterface ModelNodeConstructor {\r\n    readonly prototype: ModelNode;\r\n    new(): ModelNode;\r\n}\r\n\r\ninterface ModelNode extends ModelEventTarget {\r\n    readonly parentNode: ModelNode | null;\r\n    setParent(parentNode: ModelNode | null): void;\r\n    getRecords(): ModelChangeRecord[];\r\n    beginChanges(): void;\r\n    endChanges(): void;\r\n}\r\n\r\ninterface ModelNodeRecordsAccessor {\r\n    triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void;\r\n    handleRecord(node: ModelNode, record: ModelChangeRecord): void;\r\n}\r\n\r\nclass ModelNodeBase extends ModelEventTargetBase implements ModelNode {\r\n    #parentNode: ModelNode | null;\r\n    #records: ModelChangeRecord[];\r\n    #isRecording: boolean;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#parentNode = null;\r\n        this.#records = [];\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    get parentNode(): ModelNode | null {\r\n        return this.#parentNode;\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        if (parentNode !== null) {\r\n            let isCyclicReference = parentNode == this;\r\n            let {parentNode: ancestorNode} = parentNode;\r\n            while (!isCyclicReference && ancestorNode !== null) {\r\n                ({parentNode: ancestorNode} = ancestorNode);\r\n                isCyclicReference = ancestorNode == this;\r\n            }\r\n            if (!isCyclicReference) {\r\n                this.#parentNode = parentNode;\r\n            }\r\n            else {\r\n                throw new TypeError(\"Failed to set parent on ModelNode: circular reference detected in the hierarchy.\");\r\n            }\r\n        }\r\n        else {\r\n            this.#parentNode = null;\r\n        }\r\n    }\r\n    \r\n    beginChanges(): void {\r\n        this.#isRecording = true;\r\n    }\r\n\r\n    endChanges(): void {\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        this.#records.splice(0);\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    getRecords(): ModelChangeRecord[] {\r\n        return this.#records.slice();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        super.receiveEvent(event);\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            parentNode.receiveEvent(event);\r\n        }\r\n    }\r\n\r\n    #triggerChange(property: string, oldValue: any, newValue: any): void {\r\n        const records = this.#records;\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.PROPERTY_CHANGE,\r\n            propertyName: property,\r\n            oldValue, newValue\r\n        });\r\n        records.push(record);\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        records.splice(0);\r\n    }\r\n\r\n    #handleRecord(record: ModelChangeRecord): void {\r\n        this.#records.push(record);\r\n        if (!this.#isRecording) {\r\n            this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n            this.#records.splice(0);\r\n        }\r\n    }\r\n\r\n    static ModelNodeRecordsAccessor? = new class ModelNodeRecordsAccessor {\r\n        triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#triggerChange(property, oldValue, newValue);\r\n            }\r\n        }\r\n\r\n        handleRecord(node: ModelNode, record: ModelChangeRecord): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#handleRecord(record);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelNodeRecordsAccessor: ModelNodeRecordsAccessor = ModelNodeBase.ModelNodeRecordsAccessor!;\r\ndelete ModelNodeBase.ModelNodeRecordsAccessor;\r\n\r\nvar ModelNode: ModelNodeConstructor = ModelNodeBase;\r\n\r\ninterface ModelPropertyDecorator {\r\n    (\r\n        init?: {\r\n            type: typeof String | typeof Number | typeof Boolean | typeof Date | typeof Object\r\n        }\r\n    ): <Model extends ModelObject>(target: Model, property: string) => void;\r\n}\r\n\r\nconst ModelProperty: ModelPropertyDecorator = function(\r\n    init?: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Date | typeof Object\r\n    }\r\n) {\r\n    return (\r\n        target: ModelObject, property: string\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        /*const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n        if (Array.isArray(observedAttributes)) {\r\n            observedAttributes.push(property);\r\n        }\r\n        else {\r\n            Object.defineProperty(\r\n                constructor, \"observedAttributes\", {\r\n                    value: [property],\r\n                    writable: false\r\n                }\r\n            );\r\n        }*/\r\n        const setter = function(this: ModelObject, value: any) {\r\n            const oldValue = ModelObjectPropertiesAccessor.getProperty(this, property);\r\n            ModelObjectPropertiesAccessor.setProperty(this, property, value);\r\n            if (value !== oldValue) {\r\n                ModelNodeRecordsAccessor.triggerChange(this, property, oldValue, value);\r\n            }\r\n            return true;\r\n        };\r\n        const getter = function(this: ModelObject) {\r\n            return ModelObjectPropertiesAccessor.getProperty(this, property);\r\n        };\r\n        Object.defineProperty(prototype, property, {\r\n            set: setter,\r\n            get: getter,\r\n            enumerable: true\r\n        });\r\n    }\r\n}\r\n\r\ninterface ModelObjectConstructor {\r\n    readonly prototype: ModelObject;\r\n    new(): ModelObject;\r\n}\r\n\r\ninterface ModelObject extends ModelNode {}\r\n\r\ninterface ModelObjectPropertiesAccessor {\r\n    setProperty(node: ModelNode, property: string, value: any): void;\r\n    getProperty(node: ModelNode, property: string,): any;\r\n}\r\n\r\nclass ModelObjectBase extends ModelNodeBase implements ModelObject {\r\n    #properties: Map<string, any>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#properties = new Map();\r\n    }\r\n\r\n    static ModelObjectPropertiesAccessor? = new class ModelPropertiesAccessor {\r\n        setProperty(node: ModelObject, property: string, value: any): void {\r\n            if (node instanceof ModelObjectBase) {\r\n                node.#properties.set(property, value);\r\n            }\r\n        }\r\n\r\n        getProperty(node: ModelObject, property: string): any {\r\n            if (node instanceof ModelObjectBase) {\r\n                return node.#properties.get(property);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelObjectPropertiesAccessor: ModelObjectPropertiesAccessor = ModelObjectBase.ModelObjectPropertiesAccessor!;\r\ndelete ModelObjectBase.ModelObjectPropertiesAccessor;\r\n\r\nvar ModelObject: ModelObjectConstructor = ModelObjectBase;\r\n\r\ninterface ModelListConstructor {\r\n    readonly prototype: ModelList;\r\n    new<Model extends ModelNode>(): ModelList<Model>;\r\n    new<Model extends ModelNode>(items: Model[]): ModelList<Model>;\r\n}\r\n\r\ninterface ModelList<Model extends ModelNode = ModelNode> extends ModelNode {\r\n    readonly parentNode: ModelNode | null;\r\n    readonly length: number;\r\n    index(items: Model): number;\r\n    index(items: Model, fromIndex: number): number;\r\n    get(index: number): Model | null;\r\n    values(): IterableIterator<Model>;\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void;\r\n    insert(index: number, ...items: Model[]): void;\r\n    prepend(...items: Model[]): void;\r\n    append(...items: Model[]): void;\r\n    remove(item: Model): void;\r\n    clear(): void;\r\n}\r\n\r\nclass ModelListBase<Model extends ModelNode = ModelNode> extends ModelNodeBase implements ModelList<Model> {\r\n    #items: Model[];\r\n\r\n    constructor()\r\n    constructor(items: Model[])\r\n    constructor(items?: Model[]) {\r\n        super();\r\n        this.#items = items?.slice() ?? [];\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        super.setParent(parentNode);\r\n        this.#items.forEach((item_i) => {\r\n            item_i.setParent(parentNode);\r\n        });\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    get(index: number): Model | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    index(item: Model, fromIndex?: number): number {\r\n        return this.#items.indexOf(item, fromIndex)\r\n    }\r\n\r\n    values(): IterableIterator<Model> {\r\n        return this.#items.values();\r\n    }\r\n\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void {\r\n        const items = this.#items;\r\n        const indexedItems = items.map(\r\n            (item_i, i) => {\r\n                return {\r\n                    item: item_i,\r\n                    index: i\r\n                };\r\n            }\r\n        );\r\n        indexedItems.sort(\r\n            (indexedItem_a, indexedItem_b) => {\r\n                return compareFunction(\r\n                    indexedItem_a.item, indexedItem_b.item\r\n                )\r\n            }\r\n        );\r\n        this.#items = indexedItems.map(indexedItem_i => indexedItem_i.item);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_SORT,\r\n            sortedIndices: indexedItems.map(indexedItem_i => indexedItem_i.index)\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    prepend(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.splice(0, 0, ...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: 0,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    append(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.push(...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: length,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    insert(index: number, ...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const positiveIndex = Math.abs(index);\r\n        if (positiveIndex <= length) {\r\n            if (index >= 0) {\r\n                const {parentNode} = this;\r\n                items.forEach(item_i => {\r\n                    item_i.setParent(parentNode);\r\n                });\r\n                if (index < length) {\r\n                    _items.splice(index, 0, ...items);\r\n                }\r\n                else {\r\n                    _items.push(...items);\r\n                }\r\n            }\r\n            else if (index < 0) {\r\n                index = length - index;\r\n                const {parentNode} = this;\r\n                if (parentNode) {\r\n                    items.forEach(item_i => {\r\n                        item_i.setParent(parentNode);\r\n                    });\r\n                }\r\n                _items.splice(index, 0, ...items);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_INSERT,\r\n                insertedIndex: index,\r\n                insertedItems: items.slice()\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    remove(item: Model): void {\r\n        const _items = this.#items;\r\n        const index = _items.indexOf(item);\r\n        if (index > -1) {\r\n            const item = _items.splice(index, 1)[0];\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                item.setParent(null);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: index,\r\n                removedItems: [item]\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    clear(): void {\r\n        const items = this.#items;\r\n        const {length} = items;\r\n        if (length > 0) {\r\n            const removedItems = items.splice(0);\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                removedItems.forEach((removedItem_i) => {\r\n                    removedItem_i.setParent(null);\r\n                });\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: 0,\r\n                removedItems: removedItems\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n};\r\n\r\nvar ModelList: ModelListConstructor = ModelListBase!;\r\n\r\ninterface ModelChangeObserverConstructor {\r\n    readonly prototype: ModelChangeObserver;\r\n    new(callback: (records: ModelChangeRecord[]) => void): ModelChangeObserver;\r\n}\r\n\r\ninterface ModelChangeObserver {\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void;\r\n    unobserve(node: ModelNode): void;\r\n    disconnect(): void;\r\n}\r\n\r\ntype ModelChangeObserverOptions = {\r\n    properties?: boolean;\r\n    propertiesFilter?: string[];\r\n    childList?: boolean;\r\n    subtree?: boolean;\r\n}\r\n\r\nclass ModelChangeObserverBase implements ModelChangeObserver {\r\n    #callback: (records: ModelChangeRecord[]) => void;\r\n    #records: ModelChangeRecord[];\r\n    #disconnected: boolean;\r\n\r\n    #references: WeakMap<ModelNode, {\r\n        listener: (event: ModelEvent) => void,\r\n        options: ModelChangeObserverOptions\r\n    }>;\r\n\r\n    constructor(callback: (records: ModelChangeRecord[]) => void) {\r\n        this.#callback = callback;\r\n        this.#records = [];\r\n        this.#disconnected = false;\r\n        this.#references = new WeakMap();\r\n    }\r\n\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void {\r\n        this.#disconnected = false;\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (!reference) {\r\n            const listener = this.#handleModelEvent.bind(this);\r\n            node.addEventListener(\"modelchange\", listener);\r\n            reference = {listener, options};\r\n            references.set(node, reference);\r\n        }\r\n        else {\r\n            references.set(node, reference);\r\n        }\r\n    }\r\n\r\n    unobserve(node: ModelNode): void {\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (reference) {\r\n            const {listener} = reference;\r\n            node.removeEventListener(\"modelchange\", listener);\r\n        }\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#records.splice(0);\r\n        this.#disconnected = true;\r\n    }\r\n\r\n    #trigger(): void {\r\n        const records = this.#records.splice(0);\r\n        if (records.length > 0) {\r\n            this.#callback(records);\r\n        }\r\n    }\r\n\r\n    #handleModelEvent(event: ModelEvent): void {\r\n        if (!this.#disconnected) {\r\n            const {target, currentTarget} = event;\r\n            const reference = this.#references.get(<ModelNode>currentTarget);\r\n            if (reference) {\r\n                const {options} = reference;\r\n                const {properties, propertiesFilter, childList, subtree} = options;\r\n                if (subtree) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n                else if (target == currentTarget) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelChangeObserver: ModelChangeObserverConstructor = ModelChangeObserverBase;","export { getPropertyFromPath };\r\nexport { setPropertyFromPath };\r\nexport { snakeToCamel };\r\nexport { camelToSnake };\r\nexport { trainToCamel };\r\nexport { camelToTrain };\r\n\r\nfunction getPropertyFromPath(src: object, path: string): any {\r\n  const props = path.split(\".\");\r\n  let obj: {[key: string]: any} | undefined  = src;\r\n  props.forEach((prop) => {\r\n    if (prop.includes(\"[\")) {\r\n      const index = parseInt(prop.substring(prop.indexOf(\"[\") + 1, prop.indexOf(\"]\")));\r\n      if (Number.isNaN(index)) {\r\n        console.error(`Wrong indexed path: ${prop}`);\r\n      }\r\n      prop = prop.substring(0, prop.indexOf(\"[\"));\r\n      if (typeof obj == \"object\" && prop in obj && Array.isArray(obj[prop])) {\r\n        obj = obj[prop][index];\r\n      }\r\n    }\r\n    else if (typeof obj == \"object\" && prop in obj) {\r\n      obj = obj[prop];\r\n    }\r\n    else {\r\n      obj = void 0;\r\n    }\r\n  });\r\n  return obj;\r\n}\r\n\r\nfunction setPropertyFromPath(src: object, path: string, value: any): object {\r\n  const props = path.split(\".\");\r\n  let obj: {[key: string]: any} = src;\r\n  if (src == null) {\r\n    console.error(\"Source data can't be null\");\r\n  }\r\n  props.forEach((prop, idx) => {\r\n    if (prop.includes(\"[\")) {\r\n      const index = parseInt(prop.substring(prop.indexOf(\"[\") + 1, prop.indexOf(\"]\")));\r\n      if (Number.isNaN(index)) {\r\n        console.error(`Wrong indexed path: ${prop}`);\r\n      }\r\n      prop = prop.substring(0, prop.indexOf(\"[\"));\r\n      if (!Array.isArray(obj[prop])) {\r\n        obj[prop] = [];\r\n      }\r\n      if (idx == props.length - 1) {\r\n        obj[prop][index] = value;\r\n      }\r\n      else {\r\n        if (typeof obj[prop][index] !== \"object\") {\r\n          obj[prop][index] = {}\r\n        }\r\n        obj = obj[prop][index];\r\n      }\r\n    }\r\n    else {\r\n      if (idx == props.length - 1) {\r\n        obj[prop] = value;\r\n      }\r\n      else {\r\n        if (typeof obj[prop] !== \"object\") {\r\n          obj[prop] = {}\r\n        }\r\n        obj = obj[prop];\r\n      }\r\n    }\r\n  });\r\n  return src;\r\n}\r\n\r\nfunction snakeToCamel(str: string) {\r\n  return str.split('_').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToSnake(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '_').toLowerCase();\r\n}\r\n\r\nfunction trainToCamel(str: string) {\r\n  return str.split('-').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToTrain(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '-').toLowerCase();\r\n}","import { widgets, WidgetFactoryConstructor } from \"../views/widgets/Widget\";\r\nimport { ModelList, ModelNode, ModelChangeRecord, ModelChangeObserver, ModelChangeObserverOptions } from \"../models/Model\";\r\nimport { camelToTrain } from \"./Snippets\";\r\n\r\nexport { subtreeNodes };\r\nexport { ancestorNodes };\r\nexport { CustomElement };\r\nexport { Widget };\r\nexport { widget };\r\nexport { QueryProperty };\r\nexport { QueryAllProperty };\r\nexport { AttributeProperty };\r\nexport { reactiveElement };\r\nexport { reactiveChildElements };\r\nexport { element };\r\nexport { fragment };\r\nexport { textNode };\r\nexport { AttributeMutationMixin };\r\nexport { AttributeType };\r\nexport { areAttributesMatching };\r\nexport { AttributeMutationMixinBase };\r\nexport { trimMultilineIndent };\r\nexport { Stylesheet };\r\n\r\ninterface AttributePropertyDecorator {\r\n    (\r\n        init: {\r\n            type: typeof String;\r\n            observed?: boolean;\r\n            defaultValue?: string | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Number;\r\n            observed?: boolean;\r\n            defaultValue?: number | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Boolean;\r\n            observed?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Object;\r\n            observed?: boolean;\r\n            defaultValue?: any | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n}\r\n\r\nconst AttributeProperty: AttributePropertyDecorator = function(\r\n    init: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Object;\r\n        observed?: boolean;\r\n        defaultValue?: string | number | any | null;\r\n    }\r\n) {\r\n    return <E extends HTMLElement>(\r\n        target: E, property: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = property.toString();\r\n        const attributeName = camelToTrain(propertyName);\r\n        const defaultValue = init.defaultValue ?? null;\r\n        const observed = init.observed ?? false;\r\n        if (observed) {\r\n            const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n            if (Array.isArray(observedAttributes)) {\r\n                observedAttributes.push(attributeName);\r\n            }\r\n            else {\r\n                Object.defineProperty(\r\n                    constructor, \"observedAttributes\", {\r\n                        value: [attributeName],\r\n                        writable: false\r\n                    }\r\n                );\r\n            }\r\n        }\r\n        const {type} = init;\r\n        switch (type) {\r\n            case Boolean: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        return this.hasAttribute(attributeName);\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value) {\r\n                            this.setAttribute(attributeName, \"\");\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Object: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? JSON.parse(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, JSON.stringify(value));\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Number: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? parseFloat(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case String:\r\n            default: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? val : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n    \r\nfunction Stylesheet(text: string): CSSStyleSheet {\r\n    const stylesheet = new CSSStyleSheet();\r\n    (stylesheet as any).replaceSync(text);\r\n    return stylesheet;\r\n}\r\n\r\nfunction trimMultilineIndent(text: string): string {\r\n    const newlineIndex = text.indexOf(\"\\n\");\r\n    text = text.substring(newlineIndex + 1);\r\n    const indentMatch = text.match(/^[\\s]*/);\r\n    if (indentMatch) {\r\n        const indent = text.substring(0, indentMatch[0].length);\r\n        text = text.replaceAll(indent, \"\").trimEnd();\r\n    }\r\n    return text;\r\n}\r\n\r\ninterface CustomElementDecorator {\r\n    (init: {\r\n        name: string;\r\n        options?: ElementDefinitionOptions\r\n    }): <C extends CustomElementConstructor>(elementCtor: C) => C;\r\n}\r\n\r\nconst CustomElement: CustomElementDecorator = function(init: {\r\n    name: string;\r\n    options?: ElementDefinitionOptions\r\n}) {\r\n    return <C extends CustomElementConstructor>(\r\n        elementCtor: C\r\n    ) => {\r\n        const {name, options} = init;\r\n        if (!customElements.get(name)) {\r\n            customElements.define(\r\n                name,\r\n                elementCtor,\r\n                options\r\n            );\r\n        }\r\n        return elementCtor;\r\n    }\r\n}\r\n\r\ninterface WidgetDecorator {\r\n    (init: {\r\n        name: string;\r\n    }): <W extends WidgetFactoryConstructor>(widget: W) => W;\r\n}\r\n\r\nconst Widget: WidgetDecorator = function(init: {\r\n    name: string;\r\n}) {\r\n    return <W extends WidgetFactoryConstructor>(\r\n        widget: W\r\n    ) => {\r\n        const {name} = init;\r\n        widgets.set(\r\n            name,\r\n            new widget()\r\n        );\r\n        return widget;\r\n    }\r\n}\r\n\r\nfunction *subtreeNodes(node: Node): Generator<Node> {\r\n    yield node;\r\n    const childNodes = node.childNodes;\r\n    const childNodesCount = childNodes.length;\r\n    let childIndex = 0;\r\n    while (childIndex < childNodesCount) {\r\n        const child = childNodes.item(childIndex);\r\n        if (child !== null) {\r\n            yield * subtreeNodes(child);\r\n        }\r\n        childIndex++;\r\n    }\r\n}\r\n\r\nfunction *ancestorNodes(node: Node): Generator<Node> {\r\n    const {parentNode} = node;\r\n    if (parentNode) {\r\n        yield parentNode;\r\n        yield *ancestorNodes(parentNode);\r\n    }\r\n}\r\n\r\ninterface QueryPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryProperty: QueryPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = propertyKey.toString();\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return this.shadowRoot!.querySelector(selector);\r\n        } : function(this: HTMLElement) {\r\n            return this.querySelector(selector);\r\n        }\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\ninterface QueryAllPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryAllProperty: QueryAllPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = propertyKey.toString();\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return Array.from(this.shadowRoot!.querySelectorAll(selector));\r\n        } : function(this: HTMLElement) {\r\n            return Array.from(this.querySelectorAll(selector));\r\n        };\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\nfunction fragment(...nodes: (Node | string)[]): DocumentFragment {\r\n    const fragment = document.createDocumentFragment();\r\n    fragment.append(...nodes);\r\n    return fragment;\r\n}\r\n\r\nfunction textNode(text: string): Node {\r\n    return document.createTextNode(text);\r\n}\r\n\r\ninterface HTMLElementInit {\r\n    options?: ElementCreationOptions,\r\n    attributes?: {\r\n        [name: string]: number | string | boolean | undefined\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    children?: (Node | string)[] | NodeList | ReactiveChildElements,\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction element<E extends HTMLElementTagNameMap[K], K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): E;\r\nfunction element(\r\n    tagName: string, init?: HTMLElementInit): HTMLElement;\r\nfunction element<K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): HTMLElementTagNameMap[K] {\r\n    if (init) {\r\n        const {options, attributes, dataset, children, listeners} = init;\r\n        const element = document.createElement(tagName, options);\r\n        if (attributes) {\r\n            Object.keys(attributes).forEach((attributeName) => {\r\n                const attributeValue = attributes[attributeName];\r\n                if (attributeValue !== void 0) {\r\n                    if (typeof attributeValue == \"boolean\") {\r\n                        element.toggleAttribute(camelToTrain(attributeName), attributeValue);\r\n                    }\r\n                    else {\r\n                        element.setAttribute(camelToTrain(attributeName), attributeValue.toString());\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        if (dataset) {\r\n            const {dataset: elementDataset} = element;\r\n            Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                elementDataset[datasetEntry_i] = dataset[datasetEntry_i].toString();\r\n            });\r\n        }\r\n        if (children) {\r\n            if (typeof children == \"function\") {\r\n                element.append(...children(element));\r\n            }\r\n            else {\r\n                element.append(...Array.from(children));\r\n            }\r\n        }\r\n        if (listeners) {\r\n            Object.entries(listeners).forEach(([name_i, listener_i]) => {\r\n                if (Array.isArray(listener_i)) {\r\n                    element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                }\r\n                else {\r\n                    element.addEventListener(name_i, listener_i);\r\n                }\r\n            });\r\n        }\r\n        return element;\r\n    }\r\n    return document.createElement(tagName);\r\n}\r\n\r\ninterface WidgetInit<K extends keyof WidgetNameMap> {\r\n    properties?: Parameters<WidgetNameMap[K][\"create\"]>[0],\r\n    attributes?: {\r\n        [name: string]: number | string | boolean | undefined\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    slotted?: {\r\n        [slot: string]: (Node | string)[] | NodeList | ReactiveChildElements\r\n    } | ((Node | string)[] | NodeList | ReactiveChildElements),\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: K, init?: WidgetInit<K>): ReturnType<WidgetNameMap[K][\"create\"]>;\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: string, init?: WidgetInit<K>): HTMLElement\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: K, init?: WidgetInit<K>): HTMLElement {\r\n    const widget = widgets.get(name);\r\n    if (widget) {\r\n        const element = <HTMLElement>widget.create(init?.properties);\r\n        if (init) {\r\n            const {attributes, dataset, slotted, listeners} = init;\r\n            if (attributes) {\r\n                Object.keys(attributes).forEach((attributeName) => {\r\n                    const attributeValue = attributes[attributeName];\r\n                    if (attributeValue !== void 0) {\r\n                        if (typeof attributeValue == \"boolean\") {\r\n                            element.toggleAttribute(camelToTrain(attributeName), attributeValue);\r\n                        }\r\n                        else {\r\n                            element.setAttribute(camelToTrain(attributeName), attributeValue.toString());\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            if (dataset) {\r\n                const {dataset: elementDataset} = element;\r\n                Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                    elementDataset[datasetEntry_i] = dataset[datasetEntry_i].toString();\r\n                });\r\n            }\r\n            if (slotted) {\r\n                if (typeof slotted == \"function\" || Array.isArray(slotted) || slotted instanceof NodeList) {\r\n                    const slot = widget.slot(element, null);\r\n                    if (slot) {\r\n                        if (typeof slotted == \"function\") {\r\n                            slot.append(...slotted(element));\r\n                        }\r\n                        else {\r\n                            slot.append(...Array.from(slotted));\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    Object.entries(slotted).forEach(([slot_i, slotted]) => {\r\n                        const slot = widget.slot(element, slot_i);\r\n                        if (slot) {\r\n                            if (typeof slotted == \"function\") {\r\n                                slot.append(...slotted(element));\r\n                            }\r\n                            else {\r\n                                slot.append(...Array.from(slotted));\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            if (listeners) {\r\n                Object.entries(listeners).forEach(([name_i, listener_i]) => {\r\n                    if (Array.isArray(listener_i)) {\r\n                        element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                    }\r\n                    else {\r\n                        element.addEventListener(name_i, listener_i);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return element;\r\n    }\r\n    throw new Error(`Unknown widget ${name}`);\r\n}\r\n\r\nconst reactiveElementsMap = new WeakMap<ModelNode, {\r\n    observerOptions: ModelChangeObserverOptions,\r\n    reactiveElementsArray: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }[]\r\n}>();\r\n\r\nconst reactiveElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    model: ModelNode,\r\n    reactiveElement: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }\r\n}) => {\r\n    const {model, reactiveElement} = heldValue;\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    if (reactiveElementsMapEntry !== void 0) {\r\n        const {reactiveElementsArray} = reactiveElementsMapEntry;\r\n        reactiveElementsArray.splice(reactiveElementsArray.indexOf(reactiveElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveElementsPropertyObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    records.forEach((record_i) => {\r\n        const {target, propertyName, oldValue, newValue} = record_i;\r\n        const {reactiveElementsArray} = reactiveElementsMap.get(target)!;\r\n        reactiveElementsArray.forEach(reactiveElement_i => {\r\n            const {elementRef, react, properties} = reactiveElement_i;\r\n            const element = elementRef.deref();\r\n            if (element) {\r\n                if (properties.includes(propertyName!)) {\r\n                    react(element, propertyName!, oldValue, newValue);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveElement<M extends ModelNode, E extends Element, K extends string>(\r\n    model: M,\r\n    element: E,\r\n    properties: K[],\r\n    react: (object: E, property: K, oldValue: any, newValue: any) => void\r\n): E;\r\nfunction reactiveElement<M extends ModelNode, E extends Element>(\r\n    model: M,\r\n    element: E,\r\n    properties: string[],\r\n    react: (element: E, property: string, oldValue: any, newValue: any) => void\r\n): E {\r\n    const elementRef = new WeakRef(element);\r\n    const reactiveElement = {elementRef, react, properties};\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    reactiveElementsFinalizationRegistry.register(element, {model, reactiveElement});\r\n    if (!reactiveElementsMapEntry) {\r\n        const observerOptions = {\r\n            properties: true,\r\n            propertiesFilter: properties\r\n        };\r\n        const reactiveElementsArray = [reactiveElement];\r\n        reactiveElementsMap.set(model, {observerOptions, reactiveElementsArray});\r\n        reactiveElementsPropertyObserver.observe(model, observerOptions);\r\n    }\r\n    else {\r\n        const {reactiveElementsArray, observerOptions} = reactiveElementsMapEntry;\r\n        const {propertiesFilter} = observerOptions;\r\n        reactiveElementsArray.push(reactiveElement);\r\n        observerOptions.propertiesFilter = propertiesFilter ?\r\n            propertiesFilter.concat(properties.filter(\r\n                property_i => !propertiesFilter.includes(property_i)\r\n            )) : Array.from(new Set(properties));\r\n    }\r\n    properties.forEach((property_i) => {\r\n        if (property_i in model) {\r\n            const value = Reflect.get(model, property_i, model);\r\n            if (value !== void 0) {\r\n                react(element, <any>property_i, <any>void 0, value);\r\n            }\r\n        }\r\n    });\r\n    return element;\r\n}\r\n\r\ninterface ReactiveChildElements {\r\n    (parent: Node & ParentNode): (Node | string)[]\r\n}\r\n\r\nconst reactiveChildElementsMap = new WeakMap<ModelList, {\r\n    reactiveChildElementsArray: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }[]\r\n}>();\r\n\r\nconst reactiveChildElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    list: ModelList,\r\n    reactiveChildElement: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }\r\n}) => {\r\n    const {list, reactiveChildElement} = heldValue;\r\n    const reactiveChildrenElementsMapEntry = reactiveChildElementsMap.get(list);\r\n    if (reactiveChildrenElementsMapEntry) {\r\n        const {reactiveChildElementsArray} = reactiveChildrenElementsMapEntry;\r\n        reactiveChildElementsArray.splice(reactiveChildElementsArray.indexOf(reactiveChildElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveChildElementsObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    let range: null | Range = null;\r\n    Array.from(records.values()).forEach((record_i) => {\r\n        const {target} = record_i;\r\n        const list = <ModelList>target;\r\n        const {length: listLength} = list;\r\n        const {reactiveChildElementsArray} = reactiveChildElementsMap.get(list)!;\r\n        reactiveChildElementsArray.forEach((reactiveChildElements_i) => {\r\n            const {parentRef, mapping, placeholder} = reactiveChildElements_i;\r\n            const parent = parentRef.deref();\r\n            if (parent) {\r\n                const {firstChild, children} = parent;\r\n                const {length: childrenCount} = children;\r\n                if (placeholder && listLength > 0 && firstChild == placeholder) {\r\n                    parent.removeChild(placeholder);\r\n                }\r\n                const {changeType, LIST_INSERT, LIST_REMOVE, LIST_SORT} = record_i;\r\n                switch (changeType) {\r\n                    case LIST_INSERT: {\r\n                        const {insertedIndex, insertedItems} = record_i;\r\n                        const insertedItemsArray = Array.from(insertedItems.values()).map(mapping);\r\n                        const {length: childrenCount} = children;\r\n                        if (insertedIndex < childrenCount) {\r\n                            children[insertedIndex].before(...insertedItemsArray);\r\n                        }\r\n                        else {\r\n                            parent.append(...insertedItemsArray);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_REMOVE: {\r\n                        const {removedIndex, removedItems} = record_i;\r\n                        const {length: removedCount} = removedItems;\r\n                        range = range ?? document.createRange();\r\n                        const removeEndIndex = removedIndex + (removedCount - 1);\r\n                        if (removeEndIndex < childrenCount) {\r\n                            range.setStartBefore(children[removedIndex]);\r\n                            range.setEndAfter(children[removeEndIndex]);\r\n                            range.deleteContents();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_SORT: {\r\n                        const {sortedIndices} = record_i;\r\n                        const childrenArray = Array.from(children);\r\n                        parent.append(\r\n                            ...sortedIndices.filter(\r\n                                index_i => index_i < childrenCount\r\n                            ).map(\r\n                                index_i => childrenArray[index_i]\r\n                            )\r\n                        );\r\n                        break;\r\n                    }\r\n                }\r\n                if (listLength == 0 && placeholder) {\r\n                    parent.append(placeholder);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveChildElements<Model extends ModelNode>(\r\n    list: ModelList<Model>,\r\n    mapping: (item: Model) => Element,\r\n    placeholder?: Element\r\n): ReactiveChildElements {\r\n    return (parent: Node & ParentNode) => {\r\n        const parentRef = new WeakRef(parent);\r\n        const reactiveChildElementsMapEntry = reactiveChildElementsMap.get(list);\r\n        const reactiveChildElement = {parentRef, mapping, placeholder};\r\n        reactiveChildElementsFinalizationRegistry.register(parent, {list, reactiveChildElement});\r\n        if (!reactiveChildElementsMapEntry) {\r\n            const reactiveChildElementsArray = [reactiveChildElement];\r\n            reactiveChildElementsMap.set(list, {reactiveChildElementsArray});\r\n            reactiveChildElementsObserver.observe(list, {\r\n                childList: true\r\n            });\r\n        }\r\n        else {\r\n            const {reactiveChildElementsArray} = reactiveChildElementsMapEntry;\r\n            reactiveChildElementsArray.push(reactiveChildElement);\r\n        }\r\n        return list.length == 0 && placeholder ?\r\n            [placeholder] : Array.from(list.values()).map(mapping);\r\n    }\r\n}\r\n\r\ninterface AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n    attach(element: Element): void;\r\n    detach(element: Element): void;\r\n}\r\n\r\ntype AttributeType = \"string\" | \"boolean\" | \"list\";\r\n\r\nfunction areAttributesMatching(\r\n    referenceAttributeType: AttributeType,\r\n    referenceAttributeName: string, referenceAttributeValue: string,\r\n    attributeName: string, attributeValue: string | null): boolean {\r\n    if (referenceAttributeName == attributeName) {\r\n        switch (referenceAttributeType) {\r\n            case \"boolean\":\r\n                return referenceAttributeValue == \"\" && attributeValue == \"\";\r\n            case \"string\":\r\n                return referenceAttributeValue !== \"\" && (referenceAttributeValue == attributeValue);\r\n            case \"list\":\r\n                return (referenceAttributeValue !== \"\" && attributeValue !== null) && new RegExp(`${referenceAttributeValue}\\s*?`, \"g\").test(attributeValue );\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nclass AttributeMutationMixinBase implements AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n\r\n    constructor(attributeName: string, attributeType: AttributeType = \"boolean\", attributeValue: string = \"\") {\r\n        this.attributeName = attributeName;\r\n        this.attributeType = attributeType;\r\n        this.attributeValue = attributeValue;\r\n    }\r\n\r\n    attach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n\r\n    detach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n}","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLETreeElement } from \"./Tree\";\r\nimport { HTMLETreeItemElement } from \"./TreeItem\";\r\n\r\nexport { HTMLETreeItemGroupElement };\r\n\r\ninterface HTMLETreeItemGroupElementConstructor {\r\n    readonly prototype: HTMLETreeItemGroupElement;\r\n    new(): HTMLETreeItemGroupElement;\r\n}\r\n\r\ninterface HTMLETreeItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitemgroup\": HTMLETreeItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-treeitemgroup\"\r\n})\r\nclass HTMLETreeItemGroupElementBase extends HTMLElement implements HTMLETreeItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLETreeItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLETreeItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n            item_i.level = (() => {\r\n                let level = -1;\r\n                let closestItem: HTMLETreeItemElement | null = item_i;\r\n                while (closestItem !== null && closestItem.matches(\"e-tree :scope\")) {\r\n                    closestItem = closestItem.parentElement?.closest(\"e-treeitem\") ?? null;\r\n                    level++;\r\n                }\r\n                return level;\r\n            })();\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemGroupElement: HTMLETreeItemGroupElementConstructor = HTMLETreeItemGroupElementBase;","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\nimport { HTMLETreeElement } from \"./Tree\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeItemElement };\r\n\r\ninterface HTMLETreeItemElementConstructor {\r\n    readonly prototype: HTMLETreeItemElement;\r\n    new(): HTMLETreeItemElement;\r\n}\r\n\r\ninterface HTMLETreeItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly group: HTMLETreeItemGroupElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    expanded: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    level: number;\r\n    type: \"leaf\" | \"parent\";\r\n    toggle(force?: boolean): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitem\": HTMLETreeItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-treeitem\"\r\n})\r\nclass HTMLETreeItemElementBase extends HTMLElement implements HTMLETreeItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get group(): HTMLETreeItemGroupElement | null {\r\n        return this.#group;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    expanded!: boolean;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number, observed: true})\r\n    level!: number;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"leaf\"})\r\n    type!: \"leaf\" | \"parent\";\r\n\r\n    #group: HTMLETreeItemGroupElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"arrow\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"group\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.#group = null;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"expanded\": {\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const labelPart = this.shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"level\": {\r\n                this.style.setProperty(\"--level\", `${this.level}`);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        this.expanded = force ?? !this.expanded;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, shiftKey, ctrlKey} = event;\r\n        const {type} = this;\r\n        if (this == target && type == \"parent\" && !(shiftKey || ctrlKey)) {\r\n            this.toggle();\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target;\r\n        switch (slotName) {\r\n            case \"group\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#group = element instanceof HTMLETreeItemGroupElement ? element : null;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemElement: HTMLETreeItemElementConstructor = HTMLETreeItemElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLETreeItemElement } from \"./TreeItem\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeElement };\r\n\r\ninterface HTMLETreeElementConstructor {\r\n    readonly prototype: HTMLETreeElement;\r\n    new(): HTMLETreeElement;\r\n}\r\n\r\ninterface HTMLETreeElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLETreeItemElement>;\r\n    readonly activeItem: HTMLETreeItemElement | null;\r\n    readonly dropTargetItem: HTMLETreeItemElement | null;\r\n    droptarget: boolean;\r\n    name: string;\r\n    selectedItems(): HTMLETreeItemElement[];\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tree\": HTMLETreeElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-tree\"\r\n})\r\nclass HTMLETreeElementBase extends HTMLElement implements HTMLETreeElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLETreeItemElement>;\r\n\r\n    get activeItem(): HTMLETreeItemElement | null {\r\n        return this.querySelector<HTMLETreeItemElement>(\r\n            \"e-treeitem[active]\"\r\n        );\r\n    }\r\n\r\n    get dropTargetItem(): HTMLETreeItemElement | null {\r\n        return this.querySelector<HTMLETreeItemElement>(\r\n            \"e-treeitem[droptarget]\"\r\n        );\r\n    }\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.items = this.getElementsByTagName(\"e-treeitem\");\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this), true);\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    selectedItems(): HTMLETreeItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.#firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLETreeItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLETreeItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLETreeItemElement, to: HTMLETreeItemElement): HTMLETreeItemElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleItem = this.#nextItem(from);\r\n            while (nextVisibleItem && nextVisibleItem !== to) {\r\n                range.push(nextVisibleItem);\r\n                nextVisibleItem = this.#nextItem(nextVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleItem = this.#previousItem(from);\r\n            while (previousVisibleItem && previousVisibleItem !== to) {\r\n                range.push(previousVisibleItem);\r\n                previousVisibleItem = this.#previousItem(previousVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLETreeItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((item_i) => {\r\n            item_i.selected = false;\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLETreeItemElement | null): void {\r\n        const {activeItem} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = item;\r\n            item.active = true;\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n    \r\n    #setDropTargetItem(item: HTMLETreeItemElement | null): void {\r\n        const {dropTargetItem} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n        }\r\n    }\r\n\r\n    #firstItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousSibling = <HTMLETreeItemElement | null>walker.previousSibling();\r\n        return previousSibling ?\r\n            this.#deepestItem(previousSibling) :\r\n            <HTMLETreeItemElement | null>walker.parentNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const {type, expanded} = item;\r\n        return <HTMLETreeItemElement | null>(\r\n            type === \"leaf\" ?\r\n                walker.nextNode() :\r\n                expanded ?\r\n                    walker.nextNode() :\r\n                    walker.nextSibling() ??\r\n                    (walker.parentNode(), walker.nextSibling())\r\n        );\r\n    }\r\n\r\n    #deepestItem(item: HTMLETreeItemElement): HTMLETreeItemElement {\r\n        if (item.expanded) {\r\n            const walker = this.#walker;\r\n            const lastItem = <HTMLETreeItemElement>walker.lastChild();\r\n            if (lastItem) {\r\n                return this.#deepestItem(lastItem);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey} = event;\r\n        const selectedItems = this.selectedItems();\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            if (!shiftKey && !ctrlKey) {\r\n                this.#setSelection(target);\r\n            }\r\n            else if (ctrlKey) {\r\n                const {selected} = target;\r\n                if (selected) {\r\n                    target.blur();\r\n                }\r\n                (!selected) ?\r\n                    this.#addToSelection(target) :\r\n                    this.#removeFromSelection(target);\r\n                event.stopPropagation();\r\n            }\r\n            else if (shiftKey) {\r\n                const lastSelectedItem = selectedItems[selectedItems.length - 1];\r\n                if (lastSelectedItem) {\r\n                    const range = this.#getItemsRange(\r\n                        lastSelectedItem,\r\n                        target\r\n                    );\r\n                    if (range) {\r\n                        if (selectedItems.includes(target)) {\r\n                            this.#removeFromSelection(...range);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(...range);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.#setSelection(target);\r\n                }\r\n                event.stopPropagation();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const {type} = target;\r\n            if (type == \"parent\") {\r\n                target.toggle(true);\r\n            }\r\n            this.#setDropTargetItem(target);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!this.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        const {root} = walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? root, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? root, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(\r\n                                firstItem,\r\n                                this.#deepestItem(lastItem)\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    if (activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                    else {\r\n                        const walker = this.#walker;\r\n                        const parentItem = <HTMLETreeItemElement>walker.parentNode();\r\n                        if (parentItem) {\r\n                            parentItem.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    if (!activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.#setActiveItem(null);\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            this.#setActiveItem(target);\r\n            this.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLETreeItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLETreeItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n            item_i.level = 0;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLETreeElement: HTMLETreeElementConstructor = HTMLETreeElementBase;","import { ModelObject } from \"../models/Model\";\r\n\r\nexport { View };\r\n\r\ninterface View extends HTMLElement {\r\n    readonly model: ModelObject | null;\r\n    setModel(model: ModelObject): void;\r\n    renderShadow(): Node | undefined;\r\n    renderLight(): Node | undefined;\r\n    refresh(): void;\r\n}\r\n\r\ninterface ViewConstructor {\r\n    readonly prototype: View;\r\n    new(): View;\r\n}\r\n\r\nclass ViewBase extends HTMLElement implements View {\r\n    #model: ModelObject | null;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#model = null;\r\n    }\r\n\r\n    get model(): ModelObject | null {\r\n        return this.#model;\r\n    }\r\n    \r\n    setModel(model: ModelObject): void {\r\n        this.#model = model;\r\n        this.#render();            \r\n    }\r\n\r\n    renderLight(): Node | undefined {\r\n        return;\r\n    }\r\n\r\n    renderShadow(): Node | undefined {\r\n        return;\r\n    }\r\n\r\n    refresh(): void {\r\n        this.#render();\r\n    }\r\n\r\n    #render(): void {\r\n        const {shadowRoot} = this;\r\n        const shadow = this.renderShadow();\r\n        if (shadow) {\r\n            if (shadowRoot) {\r\n                shadowRoot.replaceChildren(shadow);\r\n            }\r\n        }\r\n        const light = this.renderLight();\r\n        if (light) {\r\n            this.replaceChildren(light);\r\n        }\r\n    }\r\n}\r\n\r\nvar View: ViewConstructor = ViewBase;","import { HTMLEToolBarElement } from \"../..\";\r\nimport { HTMLEToolBarItemElement } from \"../elements/containers/toolbars/ToolBarItem\";\r\nimport { HTMLETreeElement } from \"../elements/containers/trees/Tree\";\r\nimport { HTMLETreeItemElement } from \"../elements/containers/trees/TreeItem\";\r\nimport { element, reactiveChildElements, reactiveElement, CustomElement, fragment } from \"../elements/Element\";\r\nimport { ModelEvent, ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\n\r\nexport { TreeModel };\r\nexport { TreeItemModel };\r\nexport { TreeView };\r\n\r\nclass TreeModel extends ModelObject {\r\n    readonly items: ModelList<TreeItemModel>;\r\n    readonly childItems: ModelList<TreeItemModel>;\r\n    sortFunction: ((item_a: TreeItemModel, item_b: TreeItemModel) => number) | null;\r\n    \r\n    constructor()\r\n    constructor(init: {items: TreeItemModel[], sortFunction?: (item_a: TreeItemModel, item_b: TreeItemModel) => number})\r\n    constructor(init?: {items: TreeItemModel[], sortFunction?: (item_a: TreeItemModel, item_b: TreeItemModel) => number}) {\r\n        super();\r\n        const childItems = new ModelList(init?.items ?? []);\r\n        childItems.setParent(this);\r\n        this.childItems = childItems;\r\n        this.items = new ModelList(this.flattenItems());\r\n        this.sortFunction = init?.sortFunction ??\r\n            function(item_a: TreeItemModel, item_b: TreeItemModel) {\r\n                return item_a.label.localeCompare(item_b.label);\r\n            };\r\n        this.addEventListener(\"modelchange\", this.#handleModelChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleModelChangeEvent(event: ModelEvent): void {\r\n        const {target} = event;\r\n        const {items, sortFunction, flattenItems} = this;\r\n        if (target instanceof ModelList) {\r\n            const records = target.getRecords();\r\n            records.forEach((record_i) => {\r\n                const {insertedItems, removedItems} = record_i;\r\n                const flattenedInsertedItems = (<TreeItemModel[]>Array.from(insertedItems.values())).flatMap(\r\n                    insertedItem_i => Array.of(insertedItem_i, ...flattenItems.call(insertedItem_i))\r\n                );\r\n                const flattenedRemovedItems = (<TreeItemModel[]>Array.from(removedItems.values())).flatMap(\r\n                    removedItem_i => Array.of(removedItem_i, ...flattenItems.call(removedItem_i))\r\n                );\r\n                items.beginChanges();\r\n                items.append(...flattenedInsertedItems);\r\n                flattenedRemovedItems.forEach((removedItem_i) => items.remove(removedItem_i));\r\n                if (sortFunction) items.sort(sortFunction);\r\n                items.endChanges();\r\n            });\r\n        }\r\n    }\r\n\r\n    flattenItems(this: TreeModel | TreeItemModel): TreeItemModel[] {\r\n        const {childItems} = this;\r\n        return Array.from(childItems.values()).flatMap(\r\n            treeItem_i => Array.of(treeItem_i, ...TreeModel.prototype.flattenItems.call(treeItem_i))\r\n        );\r\n    }\r\n\r\n    getItemByUri(this: TreeModel | TreeItemModel, uri: string): TreeItemModel | null {\r\n        const {childItems} = this;\r\n        const {length: itemsCount} = childItems;\r\n        const {length: uriLength} = uri;\r\n        for (let i = 0; i < itemsCount; i++) {\r\n            const item_i = childItems.get(i)!;\r\n            const {uri: itemUri} = item_i;\r\n            const {length: itemUriLength} = itemUri;\r\n            if (uri.startsWith(itemUri)) {\r\n                if (uri.charAt(itemUriLength) == \"/\") {\r\n                    return TreeModel.prototype.getItemByUri.call(item_i, uri);\r\n                }\r\n                else if (itemUriLength == uriLength) {\r\n                    return item_i;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\ninterface TreeItem {\r\n    show(): void;\r\n    hide(): void;\r\n    display(): void;\r\n    remove(): void;\r\n}\r\n\r\nclass TreeItemList implements TreeItem {\r\n    #items: TreeItemModel[];\r\n\r\n    constructor(items: TreeItemModel[]) {\r\n        this.#items = items;\r\n    }\r\n\r\n    static from(items: TreeItemModel[]): TreeItemList {\r\n        return new TreeItemList(items);\r\n    }\r\n\r\n    static of(...items: TreeItemModel[]): TreeItemList {\r\n        return new TreeItemList(items);\r\n    }\r\n\r\n    show(): void {\r\n        console.log(this.#items);\r\n        this.#items.forEach(item_i => item_i.show());\r\n    }\r\n\r\n    hide(): void {\r\n        this.#items.forEach(item_i => item_i.hide());\r\n    }\r\n\r\n    display(): void {\r\n        const items = this.#items;\r\n        const result = items.reduce(\r\n            (result, item_i) => `${result} ${item_i.label}`, \"\"\r\n        );\r\n        console.log(result);\r\n    }\r\n\r\n    remove(): void {\r\n        const items = this.#items;\r\n        const removedItemsGroups = items.reduce((map, item_i) => {\r\n            const {parentNode} = item_i;\r\n            if (parentNode instanceof TreeItemModel || parentNode instanceof TreeModel) {\r\n                const {childItems} = parentNode;\r\n                const group = map.get(childItems);\r\n                if (group) group.push(item_i);\r\n                else map.set(childItems, [item_i]);\r\n            }\r\n            return map;\r\n        }, new Map<ModelList, TreeItemModel[]>());\r\n        Array.from(removedItemsGroups.entries()).forEach(\r\n            ([list_i, children_i]) => {\r\n                list_i.beginChanges();\r\n                children_i.forEach((child_i) => {\r\n                    \r\n                    list_i.remove(child_i);\r\n                });\r\n                list_i.endChanges();\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nclass TreeItemModel extends ModelObject implements TreeItem {\r\n    readonly childItems: ModelList<TreeItemModel>;\r\n    readonly type: \"leaf\" | \"parent\";\r\n    readonly label: string;\r\n\r\n    @ModelProperty(/*{type: Number}*/)\r\n    childCount: number;\r\n\r\n    @ModelProperty(/*{type: Boolean}*/)\r\n    visibility: boolean;\r\n\r\n    get uri(): string {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return `${parentNode.uri}/${this.label}`;\r\n        }\r\n        return this.label;\r\n    }\r\n\r\n    get parentItem(): TreeItemModel | null {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return parentNode;\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    constructor(init: {label: string, type: \"leaf\" | \"parent\", items?: TreeItemModel[]}) {\r\n        super();\r\n        const {label, type} = init;\r\n        const childItems = new ModelList(init.items ?? []);\r\n        childItems.setParent(this);\r\n        this.childItems = childItems;\r\n        this.label = label;\r\n        this.type = type;\r\n        this.childCount = childItems.length;\r\n        this.visibility = true;\r\n        this.addEventListener(\"modelchange\", this.#handleModelChangeEvent.bind(this));\r\n    }\r\n\r\n    show(): void {\r\n        this.visibility = true;\r\n    }\r\n\r\n    hide(): void {\r\n        this.visibility = false;\r\n    }\r\n\r\n    display(): void {\r\n        console.log(this.label);\r\n    }\r\n    \r\n    remove(): void {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel || parentNode instanceof TreeModel) {\r\n            const {childItems} = parentNode;\r\n            if (childItems) {\r\n                childItems.remove(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleModelChangeEvent(event: ModelEvent): void {\r\n        const {target} = event;\r\n        const {childItems} = this;\r\n        if (target == childItems) {\r\n            this.childCount = childItems.length;\r\n        }\r\n    }\r\n}\r\n\r\ninterface TreeViewConstructor {\r\n    readonly prototype: TreeView;\r\n    new(): TreeView;\r\n    new(model: TreeModel): TreeView;\r\n}\r\n\r\ninterface TreeView extends View {\r\n    model: TreeModel;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"v-tree\": TreeView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"v-tree\"\r\n})\r\nclass TreeViewBase extends View implements TreeView {\r\n    readonly model!: TreeModel;\r\n    #treeElement: WeakRef<HTMLETreeElement> | undefined;\r\n    #dragImagesElementsMap: WeakMap<TreeItemModel, WeakRef<Element>>;\r\n    #treeItemElementsMap: WeakMap<TreeItemModel, WeakRef<HTMLETreeItemElement>>;\r\n    \r\n    constructor()\r\n    constructor(model: TreeModel)\r\n    constructor(model?: TreeModel) {\r\n        super();\r\n        this.#treeItemElementsMap = new WeakMap();\r\n        this.#dragImagesElementsMap = new WeakMap();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.setModel(model ?? new TreeModel());\r\n    }\r\n\r\n    getTreeElement(): HTMLETreeElement | null {\r\n        return this.#treeElement?.deref() ?? null;\r\n    }\r\n\r\n    getTreeItemElement(model: TreeItemModel): HTMLETreeItemElement | null {\r\n        return this.#treeItemElementsMap.get(model)?.deref() ?? null;\r\n    }\r\n\r\n    getDragImageElement(model: TreeItemModel): Element | null {\r\n        return this.#dragImagesElementsMap.get(model)?.deref() ?? null;\r\n    }\r\n\r\n    selectedItems(): TreeItemModel[] {\r\n        const tree = this.getTreeElement();\r\n        if (tree) {\r\n            const {model} = this;\r\n            const selectedElements = tree.selectedItems();\r\n            return selectedElements.map(\r\n                item_i => <TreeItemModel>model.getItemByUri(item_i.dataset.uri!)\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    renderShadow(): Node {\r\n        const {model} = this;\r\n        const treeElement = element(\"e-tree\", {\r\n            attributes: {\r\n                tabindex: 0,\r\n            },\r\n            children: reactiveChildElements(\r\n                model.childItems, item => this.#renderTreeItem(item)\r\n            ),\r\n            listeners: {\r\n                dragstart: <EventListener>this.#handleDragStartEvent.bind(this),\r\n                drop: <EventListener>this.#handleDropEvent.bind(this),\r\n                contextmenu: <EventListener>this.#handleContextMenuEvent.bind(this),\r\n                keydown: <EventListener>this.#handleKeyDownEvent.bind(this)\r\n            }\r\n        });\r\n        this.#treeElement = new WeakRef(treeElement);\r\n        return fragment(\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/main.css\"\r\n                }\r\n            }),\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/views/treeview.css\"\r\n                }\r\n            }),\r\n            treeElement,\r\n            element(\"div\", {\r\n                attributes: {\r\n                    class: \"offscreen\",\r\n                    hidden: true\r\n                },\r\n                children: reactiveChildElements(model.items,\r\n                    item => this.#renderTreeItemDragImage(item)\r\n                )\r\n            })\r\n        );\r\n    }\r\n\r\n    #renderTreeItem(item: TreeItemModel): Element {\r\n        const treeItemElement = reactiveElement(\r\n            item,\r\n            element(\"e-treeitem\", {\r\n                attributes: {\r\n                    tabindex: -1,\r\n                    label: item.label,\r\n                    type: item.type,\r\n                    draggable: \"true\"\r\n                },\r\n                dataset: {\r\n                    uri: item.uri\r\n                },\r\n                children:\r\n                    ((item.type == \"parent\") ? [\r\n                        element(\"e-treeitemgroup\", {\r\n                            attributes: {\r\n                                slot: \"group\"\r\n                            },\r\n                            children: reactiveChildElements(item.childItems,\r\n                                item => this.#renderTreeItem(item)\r\n                            )\r\n                        })\r\n                    ] : []).concat([\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"label\"\r\n                            }\r\n                        })\r\n                    ]).concat((item.type == \"parent\") ? [\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"badge\"\r\n                            }\r\n                        })\r\n                    ] : []).concat([\r\n                        element(\"e-toolbar\", {\r\n                            attributes: {\r\n                                tabindex: 0\r\n                            },\r\n                            children: [\r\n                                element(\"e-toolbaritem\", {\r\n                                    attributes: {\r\n                                        name: \"visibility\",\r\n                                        type: \"checkbox\",\r\n                                        tabindex: -1\r\n                                    },\r\n                                    listeners: {\r\n                                        trigger: () => {\r\n                                            item.visibility ?\r\n                                                item.hide() :\r\n                                                item.show();\r\n                                        }\r\n                                    }\r\n                                })\r\n                            ]\r\n                        })\r\n                    ])\r\n            }),\r\n            [\"label\", \"childCount\", \"visibility\"],\r\n            (treeitem, property, oldValue, newValue) => {\r\n                switch (property) {\r\n                    case \"label\":\r\n                        const label = treeitem.querySelector(\":scope > .label\");\r\n                        if (label) {\r\n                            label.textContent = newValue;\r\n                        }\r\n                        break;\r\n                    case \"childCount\":\r\n                        const badge = treeitem.querySelector(\":scope > .badge\");\r\n                        if (badge) {\r\n                            badge.textContent = `(${newValue})`;\r\n                        }\r\n                        break;\r\n                    case \"visibility\": {\r\n                        const toolbar = treeitem.querySelector<HTMLEToolBarElement>(\":scope > e-toolbar\");\r\n                        if (toolbar) {\r\n                            const visibilityItem = <HTMLEToolBarItemElement>toolbar.items.namedItem(\"visibility\");\r\n                            if (visibilityItem) {\r\n                                visibilityItem.title = newValue ? \"Hide\" : \"Show\";\r\n                                visibilityItem.checked = newValue;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        );\r\n        this.#treeItemElementsMap.set(item, new WeakRef(treeItemElement));\r\n        return treeItemElement;\r\n    }\r\n\r\n    #renderTreeItemDragImage(item: TreeItemModel): Element {\r\n        const dragImageElement = reactiveElement(\r\n            item,\r\n            element(\"span\", {\r\n                attributes: {\r\n                    class: \"dragimage\"\r\n                }\r\n            }),\r\n            [\"label\"],\r\n            (span, property, oldValue, newValue) => {\r\n                span.textContent = newValue;\r\n            }\r\n        );\r\n        this.#dragImagesElementsMap.set(item, new WeakRef(dragImageElement));\r\n        return dragImageElement;\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const {model} = this;\r\n        if (currentTarget instanceof HTMLETreeElement && target instanceof HTMLETreeItemElement) {\r\n            const {dataTransfer} = event;\r\n            const selectedElements = currentTarget.selectedItems();\r\n            const {length: selectedCount} = selectedElements;\r\n            if (selectedCount > 0) {\r\n                const selectedUris = \r\n                    selectedElements\r\n                    .map((element_i) =>\r\n                        element_i.dataset.uri!\r\n                    )\r\n                    .filter(\r\n                        (uri_i, _, uris) => !uris.some(\r\n                            uri_j => uri_i.startsWith(`${uri_j}/`)\r\n                        )\r\n                    );\r\n                const selectedUrisString = selectedUris.join(\"\\n\");\r\n                const lastUri = selectedUris[selectedUris.length - 1];\r\n                const lastItem = model.getItemByUri(lastUri);\r\n                if (lastItem && dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", selectedUrisString);\r\n                    const dragImage = this.getDragImageElement(lastItem);\r\n                    if (dragImage) {\r\n                        dataTransfer.setDragImage(dragImage, -16, 0);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const {model} = this;\r\n        const {sortFunction} = model;\r\n        if (currentTarget instanceof HTMLETreeElement && target instanceof HTMLETreeItemElement) {\r\n            const {dataTransfer} = event;\r\n            if (dataTransfer) {\r\n                const targetUri = target.dataset.uri!;\r\n                const targetItem = model.getItemByUri(targetUri)!;\r\n                const transferedUris = dataTransfer.getData(\"text/plain\").split(\"\\n\");\r\n                const targetIsWithin = transferedUris.some(uri_i => targetUri.startsWith(`${uri_i}/`) || uri_i == targetUri);\r\n                if (!targetIsWithin) {\r\n                    const transferedItems = <TreeItemModel[]>transferedUris.map(\r\n                        uri_i => model.getItemByUri(uri_i)\r\n                    ).filter(\r\n                        item_i => item_i !== null\r\n                    );\r\n                    //TODO: handle items with same label (replace or cancel)\r\n                    const {type: targetType, parentItem: targetParentItem} = targetItem;\r\n                    const targetList = targetType == \"parent\" ?\r\n                        targetItem.childItems :\r\n                        targetParentItem ?\r\n                        targetParentItem.childItems :\r\n                        model.childItems;\r\n                    TreeItemList.from(transferedItems).remove();\r\n                    if (sortFunction) {\r\n                        targetList.beginChanges();\r\n                        targetList.append(...transferedItems);\r\n                        targetList.sort(sortFunction);\r\n                        targetList.endChanges();\r\n                    }\r\n                    else {\r\n                        targetList.insert(target.posinset, ...transferedItems);\r\n                    }\r\n                    const newElements = transferedItems.map(\r\n                        item_i => this.getTreeItemElement(item_i)!\r\n                    );\r\n                    currentTarget.beginSelection();\r\n                    newElements.forEach(\r\n                        (element_i) => {\r\n                            element_i.selected = true;\r\n                        }\r\n                    );\r\n                    currentTarget.endSelection();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        const {clientX, clientY, currentTarget, target} = event;\r\n        const {model} = this;\r\n        if (currentTarget instanceof HTMLETreeElement && target instanceof HTMLETreeItemElement) {\r\n            const activeItem = model.getItemByUri(target.dataset.uri!)!;\r\n            const menu = element(\"e-menu\", {\r\n                attributes: {\r\n                    tabindex: -1,\r\n                    contextual: true\r\n                },\r\n                children: [\r\n                    element(\"e-menuitemgroup\", {\r\n                        attributes: {\r\n                            tabindex: -1\r\n                        },\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                attributes: {\r\n                                    tabindex: -1\r\n                                },\r\n                                children: [\r\n                                    \"Display\"\r\n                                ],\r\n                                listeners: {\r\n                                    trigger: () => {\r\n                                        TreeItemList.from(\r\n                                            this.selectedItems()\r\n                                        ).display();\r\n                                    }\r\n                                }\r\n                            }),\r\n                            element(\"e-menuitem\", {\r\n                                attributes: {\r\n                                    tabindex: -1\r\n                                },\r\n                                children: [\r\n                                    \"Delete\"\r\n                                ],\r\n                                listeners: {\r\n                                    trigger: () => {\r\n                                        TreeItemList.from(\r\n                                            this.selectedItems()\r\n                                        ).remove();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    }),\r\n                    element(\"e-menuitemgroup\", {\r\n                        attributes: {\r\n                            tabindex: -1\r\n                        },\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                attributes: {\r\n                                    tabindex: -1,\r\n                                    type: \"checkbox\"\r\n                                },\r\n                                children: [\r\n                                    activeItem.visibility ? \"Hide\" : \"Show\"\r\n                                ],\r\n                                listeners: {\r\n                                    trigger: () => {\r\n                                        const selectedItems = TreeItemList.from(\r\n                                            this.selectedItems()\r\n                                        );\r\n                                        activeItem.visibility ?\r\n                                            selectedItems.hide() :\r\n                                            selectedItems.show();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ],\r\n                listeners: {\r\n                    close: () => {\r\n                        target.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            });\r\n            document.body.append(menu);\r\n            menu.positionContextual(clientX, clientY);\r\n            menu.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        if (currentTarget instanceof HTMLETreeElement) {\r\n            switch (key) {\r\n                case \"Delete\": {\r\n                    TreeItemList.from(\r\n                        this.selectedItems()\r\n                    ).remove();\r\n                    event.preventDefault();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar TreeView: TreeViewConstructor = TreeViewBase;","import { AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEActionElement };\r\nexport { ActionType };\r\n\r\ninterface HTMLEActionElementConstructor {\r\n    readonly prototype: HTMLEActionElement;\r\n    new(): HTMLEActionElement;\r\n}\r\n\r\ninterface HTMLEActionElement extends HTMLElement {\r\n    name: string;\r\n    value: string;\r\n    checked: boolean;\r\n    type: string;\r\n    disabled: boolean;\r\n    hotkey: string;\r\n\r\n    trigger(): void;\r\n    enable(): void;\r\n    disable(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"trigger\": Event;\r\n    }\r\n}\r\n\r\ntype ActionType = \"button\" | \"checkbox\" | \"radio\" | \"select\";\r\n\r\nclass HTMLEActionElementBase extends HTMLElement implements HTMLEActionElement {\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    hotkey!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"button\"})\r\n    type!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    checked!: boolean;\r\n\r\n    trigger(): void {\r\n        if (!this.disabled) {\r\n            switch (this.type) {\r\n                case \"checkbox\":\r\n                    this.checked = !this.checked;\r\n                    break;\r\n                case \"radio\":\r\n                    this.checked = true;\r\n                    break;\r\n            }\r\n            this.dispatchEvent(new Event(\"trigger\", {\r\n                bubbles: true\r\n            }));\r\n        }\r\n    }\r\n\r\n    enable(): void {\r\n        this.disabled = false;\r\n    }\r\n\r\n    disable(): void {\r\n        this.disabled = true;\r\n    }\r\n}\r\n\r\nvar HTMLEActionElement: HTMLEActionElementConstructor = HTMLEActionElementBase;","export { Key };\r\nexport { KeyModifier };\r\nexport { HotKey };\r\nexport { MouseButton };\r\n\r\nenum Key {\r\n    A = \"a\",\r\n    B = \"b\",\r\n    C = \"c\",\r\n    D = \"d\",\r\n    E = \"e\",\r\n    F = \"f\",\r\n    G = \"g\",\r\n    H = \"h\",\r\n    I = \"i\",\r\n    J = \"j\",\r\n    K = \"k\",\r\n    L = \"l\",\r\n    M = \"m\",\r\n    O = \"o\",\r\n    P = \"p\",\r\n    Q = \"q\",\r\n    R = \"r\",\r\n    S = \"s\",\r\n    T = \"t\",\r\n    U = \"u\",\r\n    V = \"v\",\r\n    W = \"w\",\r\n    X = \"x\",\r\n    Y = \"y\",\r\n    Z = \"z\",\r\n    ENTER = \"Enter\",\r\n    BACKSPACE = \"Backspace\",\r\n    ARROW_DOWN = \"ArrowDown\",\r\n    ARROW_LEFT = \"ArrowLeft\",\r\n    ARROW_RIGHT = \"ArrowRight\",\r\n    ARROW_UP = \"ArrowUp\",\r\n    SHIFT = \"Shift\"\r\n}\r\n\r\nenum KeyModifier {\r\n    Alt = \"Alt\",\r\n    Control = \"Control\",\r\n    Shift = \"Shift\"\r\n}\r\n\r\nenum MouseButton {\r\n    LEFT = 1,\r\n    WHEEL = 2,\r\n    RIGHT = 3,\r\n    FORWARD = 4,\r\n    BACK = 5\r\n}\r\n\r\nclass HotKey {\r\n    readonly key: Key;\r\n    readonly mod1?: KeyModifier;\r\n    readonly mod2?: KeyModifier;\r\n\r\n    constructor(key: Key, mod1?: KeyModifier, mod2?: KeyModifier) {\r\n        this.key = key;\r\n        this.mod1 = mod1;\r\n        this.mod2 = mod2;\r\n    }\r\n\r\n    toString(): string {\r\n        return `${this.mod1 ? `${this.#modifierString(this.mod1)}+` : \"\"}${this.mod2 ? `${this.#modifierString(this.mod2)}+` : \"\"}${(this.key.length == 1) ? this.key.toUpperCase() : this.key}`;\r\n    }\r\n\r\n    test(event: KeyboardEvent): boolean {\r\n        return (!this.mod1 || this.#testModifier(this.mod1, event)) && (!this.mod2 || this.#testModifier(this.mod2, event)) && event.key == this.key;\r\n    }\r\n\r\n    #modifierString(mod: KeyModifier): string {\r\n        switch (mod) {\r\n            case KeyModifier.Control:\r\n                return \"Ctrl\";\r\n            default:\r\n                return mod;\r\n        }\r\n    }\r\n\r\n    #testModifier(mod: KeyModifier, event: KeyboardEvent): boolean {\r\n        switch (mod) {\r\n            case \"Alt\":\r\n                return event.altKey;\r\n            case \"Control\":\r\n                return event.ctrlKey;\r\n            case \"Shift\":\r\n                return event.shiftKey;\r\n            default:\r\n                return true;\r\n        }\r\n    }\r\n}","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEGridCellElement };\r\n\r\ninterface HTMLEGridCellElementConstructor {\r\n    readonly prototype: HTMLEGridCellElement;\r\n    new(): HTMLEGridCellElement;\r\n}\r\n\r\ninterface HTMLEGridCellElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n    headers: string;\r\n    posinset: number;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridcell\": HTMLEGridCellElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridcell\"\r\n})\r\nclass HTMLEGridCellElementBase extends HTMLElement implements HTMLEGridCellElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    headers!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridCellElement: HTMLEGridCellElementConstructor = HTMLEGridCellElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\n\r\nexport { HTMLEGridRowGroupElement };\r\n\r\ninterface HTMLEGridRowGroupElementConstructor {\r\n    readonly prototype: HTMLEGridRowGroupElement;\r\n    new(): HTMLEGridRowGroupElement;\r\n}\r\n\r\ninterface HTMLEGridRowGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrowgroup\": HTMLEGridRowGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrowgroup\"\r\n})\r\nclass HTMLEGridRowGroupElementBase extends HTMLElement implements HTMLEGridRowGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                            /*display: flex;\r\n                            flex-direction: column;*/\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowGroupElement: HTMLEGridRowGroupElementConstructor = HTMLEGridRowGroupElementBase;","import { CustomElement, AttributeProperty, QueryProperty, element } from \"../../Element\";\r\nimport { HTMLEActionElement } from \"../actions/Action\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\n\r\nexport { HTMLEMenuItemElement };\r\nexport { EMenuItem };\r\n\r\ninterface HTMLEMenuItemElementConstructor {\r\n    readonly prototype: HTMLEMenuItemElement;\r\n    new(): HTMLEMenuItemElement;\r\n}\r\n\r\ninterface HTMLEMenuItemElement extends HTMLEActionElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    active: boolean;\r\n    index: number;\r\n    expanded: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitem\": HTMLEMenuItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitem\"\r\n})\r\nclass HTMLEMenuItemElementBase extends HTMLEActionElement implements HTMLEMenuItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Number})\r\n    index!: number;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"button\", observed: true})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"icon\"\r\n                }\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"label\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"arrow\"\r\n                }\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    @QueryProperty({selector: \":scope > e-menu[slot=menu]\"})\r\n    readonly menu!: HTMLEMenuElement | null;\r\n\r\n    toggle(force?: boolean): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                const expand = force ?? !expanded;\r\n                this.expanded = expand;\r\n                if (expand) {\r\n                    this.#positionMenu();\r\n                }\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {type} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (!this.expanded) {\r\n                    this.expanded = true;\r\n                    this.#positionMenu();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {type} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (this.expanded) {\r\n                    this.expanded = false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const {type} = this;\r\n            if (type == \"menu\") {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const closestMenu = this.closest(\"e-menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    const overflowX = itemRight + menuWidth - clientWidth;\r\n                    const overflowY = itemTop + menuHeight - clientHeight;\r\n                    menuStyle.setProperty(\"left\", `${\r\n                        overflowX > 0 ?\r\n                        itemLeft - menuWidth - closestMenuLeft :\r\n                        itemRight - closestMenuLeft\r\n                    }px`);\r\n                    const menuComputedStyle = window.getComputedStyle(menu);\r\n                    const {paddingTop, paddingBottom} = menuComputedStyle;\r\n                    const menuPaddingTop = parseFloat(paddingTop);\r\n                    const menuPaddingBottom = parseFloat(paddingBottom);\r\n                    menuStyle.setProperty(\"top\", `${\r\n                        overflowY > 0 ?\r\n                        itemBottom - menuHeight - closestMenuTop + menuPaddingBottom :\r\n                        itemTop - closestMenuTop - menuPaddingTop\r\n                    }px`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemElement: HTMLEMenuItemElementConstructor = HTMLEMenuItemElementBase;\r\n\r\ninterface EMenuItemConstructor {\r\n    readonly prototype: HTMLEMenuItemElement;\r\n    new(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    button(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    checkbox(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    radio(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    menu(init: {\r\n        name: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    submenu(init: {\r\n        name: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n}\r\n\r\nvar EMenuItem = <EMenuItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menu} = init;\r\n        if (menu) {\r\n            menu.slot = \"menu\";\r\n        }\r\n        return element(\"e-menuitem\", {\r\n            attributes: {\r\n                tabindex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type\r\n            },\r\n            children: menu ? [\r\n                label,\r\n                menu\r\n            ] : [\r\n                label\r\n            ],\r\n            listeners: {\r\n                trigger: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemElement.prototype,\r\n        button(init: {\r\n            name: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menu(init: {\r\n            name: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"menu\"\r\n            });\r\n        },\r\n        submenu(init: {\r\n            name: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"submenu\"\r\n            });\r\n        }\r\n    }\r\n);","import { element, CustomElement, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuItemElement, EMenuItem } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuItemGroupElement };\r\nexport { EMenuItemGroup };\r\n\r\ninterface HTMLEMenuItemGroupElementConstructor {\r\n    readonly prototype: HTMLEMenuItemGroupElement;\r\n    new(): HTMLEMenuItemGroupElement;\r\n}\r\n\r\ninterface HTMLEMenuItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    label: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitemgroup\": HTMLEMenuItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitemgroup\"\r\n})\r\nclass HTMLEMenuItemGroupElementBase extends HTMLElement implements HTMLEMenuItemGroupElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            flex-direction: column;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEMenuItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEMenuItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.index = i;\r\n        });\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\":\r\n                const label = this.shadowRoot.querySelector(\"[part=label]\");\r\n                if (label) {\r\n                    label.textContent = newValue;\r\n                }\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemGroupElement: HTMLEMenuItemGroupElementConstructor = HTMLEMenuItemGroupElementBase;\r\n\r\ninterface EMenuItemGroupConstructor {\r\n    readonly prototype: HTMLEMenuItemGroupElement;\r\n    new(init: {\r\n        name?: string;\r\n        items: HTMLEMenuItemElement[];\r\n    }): HTMLEMenuItemGroupElement;\r\n    radios(init: {name: string, items: {label: string, value: string}[]}): HTMLEMenuItemGroupElement;\r\n}\r\n\r\nvar EMenuItemGroup = <EMenuItemGroupConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string,\r\n        items: HTMLEMenuItemElement[]\r\n    }) {\r\n        const {name, items} = init;\r\n        return element(\"e-menuitemgroup\", {\r\n            attributes: {\r\n                name: name\r\n            },\r\n            children: items\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemGroupElement.prototype,\r\n        radios: (init: {\r\n            name: string,\r\n            items: {\r\n                label: string,\r\n                value: string\r\n            }[]\r\n        }) => {\r\n            const {name, items} = init;\r\n            return element(\"e-menuitemgroup\", {\r\n                attributes: {\r\n                    name: name\r\n                },\r\n                children: items.map(\r\n                    ({label, value}) => new EMenuItem({name, label, type: \"radio\", value})\r\n                )\r\n            });\r\n        }\r\n    }\r\n);","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuElement };\r\nexport { EMenu };\r\n\r\ninterface HTMLEMenuElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    readonly items: HTMLCollectionOf<HTMLEMenuItemElement>;\r\n    name: string;\r\n    contextual: boolean;\r\n    positionContextual(x: number, y: number): void;\r\n}\r\n\r\ninterface HTMLEMenuElementConstructor {\r\n    readonly prototype: HTMLEMenuElement;\r\n    new(): HTMLEMenuElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menu\": HTMLEMenuElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar toggleTimeouts: WeakMap<HTMLEMenuItemElement, {clear(): void;}>;\r\n\r\n@CustomElement({\r\n    name: \"e-menu\"\r\n})\r\nclass HTMLEMenuElementBase extends HTMLElement implements HTMLEMenuElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEMenuItemElement>;\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        return this.querySelector<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem[active]\"\r\n        );\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    contextual!: boolean;\r\n\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        toggleTimeouts = new WeakMap();\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.items = this.getElementsByTagName(\"e-menuitem\");\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"mouseout\", this.#handleMouseOutEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n    }\r\n\r\n    positionContextual(x: number, y: number): void {\r\n        const {style} = this;\r\n        const {width: menuWidth, height: menuHeight} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        const left = x + scrollX;\r\n        const top = y + scrollY;\r\n        const {clientWidth, clientHeight} = document.body;\r\n        const overflowX = left + menuWidth - clientWidth;\r\n        const overflowY = top + menuHeight - clientHeight;\r\n        style.setProperty(\"left\", `${overflowX > 0 ? left - menuWidth : left}px`);\r\n        style.setProperty(\"top\", `${overflowY > 0 ? top - menuHeight : top}px`);\r\n    }\r\n\r\n    #collapseSubmenus(): void {\r\n        this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem[expanded]\"\r\n        )\r\n        .forEach((item_i) => {\r\n            item_i.collapse();\r\n        });\r\n    }\r\n\r\n    #isClosestMenu(target: Element): boolean {\r\n        return target.closest(\":is(e-menu)\") == this;\r\n    }\r\n\r\n    #nearestItem(target: Element): HTMLEMenuItemElement | null {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextNode();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        return menu instanceof HTMLEMenuElementBase ?\r\n            menu.#firstItem() :\r\n            null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        const {activeItem} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu) {\r\n                target.trigger();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem) {\r\n                this.#setActiveItem(nearestItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const {contextual} = this;\r\n            if (contextual) {\r\n                try {\r\n                    this.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const {activeItem} = this;\r\n                if (activeItem?.expanded) {\r\n                    activeItem.collapse();\r\n                }\r\n                this.#setActiveItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    async #setItemTimeout(item: HTMLEMenuItemElement, delay?: number): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => {\r\n                resolve(void 0);\r\n            }, delay ?? 0);\r\n            toggleTimeouts.set(item, {\r\n                clear: () => {\r\n                    clearTimeout(timeout);\r\n                    reject();\r\n                }\r\n            });\r\n        }).then(() => {\r\n            toggleTimeouts.delete(item);\r\n        });\r\n    }\r\n\r\n    #clearItemTimeout(item: HTMLEMenuItemElement): void {\r\n        const timeout = toggleTimeouts.get(item);\r\n        if (typeof timeout !== \"undefined\") {\r\n            toggleTimeouts.delete(item);\r\n            timeout.clear();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.#firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem() :\r\n                    this.#firstItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                firstItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                lastItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            activeItem.expand();\r\n                            if (activeItem.expanded) {\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                            }\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            activeItem.trigger();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            if (!activeItem.expanded) {\r\n                                activeItem.expand();\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                                event.stopPropagation();\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOutEvent(event: MouseEvent): void {\r\n        const {target, relatedTarget} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem !== null) {\r\n                if (nearestItem.type == \"submenu\" &&\r\n                    !nearestItem.expanded) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLEMenuElement\r\n                ) == this;\r\n                if (isTargetClosestMenu) {\r\n                    const {activeItem} = this;\r\n                    if (activeItem?.type == \"submenu\" &&\r\n                        activeItem.expanded) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, 400)\r\n                            .then(() => {\r\n                                activeItem.collapse();\r\n                            })\r\n                            .catch(() => void 0);\r\n                    }\r\n                    const {clientX, clientY} = event;\r\n                    const {left, right, top, bottom} = this.getBoundingClientRect();\r\n                    const intersectsWithMouse = !(\r\n                        left > clientX || right < clientX || top > clientY || bottom < clientY\r\n                    );\r\n                    const containsRelatedTarget = this.contains(<Node>relatedTarget);\r\n                    if (intersectsWithMouse && containsRelatedTarget) {\r\n                        if (relatedTarget instanceof HTMLEMenuElement && relatedTarget !== this) {\r\n                            relatedTarget.focus({preventScroll: true});\r\n                        }\r\n                        else {\r\n                            this.focus({preventScroll: true});\r\n                            this.#setActiveItem(null);\r\n                        }\r\n                    }\r\n                    if (!intersectsWithMouse) {\r\n                        this.focus({preventScroll: true});\r\n                        this.#setActiveItem(null);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem !== null) {\r\n                if (nearestItem.type == \"submenu\" && nearestItem.expanded) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLEMenuElement\r\n                ) == this;\r\n                if (isTargetClosestMenu) {\r\n                    const {activeItem} = this;\r\n                    if (activeItem?.type == \"submenu\" &&\r\n                        activeItem.expanded && \r\n                        !activeItem.contains(<Node>target)) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, 400)\r\n                            .then(() => {\r\n                                activeItem.collapse();\r\n                            })\r\n                            .catch(() => void 0);\r\n                    }\r\n                    this.#setActiveItem(nearestItem);\r\n                    nearestItem.focus({preventScroll: true});\r\n                    if (nearestItem.type == \"submenu\") {\r\n                        if (!nearestItem.expanded) {\r\n                            this.#clearItemTimeout(nearestItem);\r\n                            this.#setItemTimeout(nearestItem, 200)\r\n                                .then(() => {\r\n                                    const {activeItem} = this;\r\n                                    this.#collapseSubmenus();\r\n                                    if (activeItem) {\r\n                                        this.#clearItemTimeout(activeItem);\r\n                                        activeItem.expand();\r\n                                        activeItem.menu?.focus({preventScroll: true});\r\n                                    }\r\n                                })\r\n                                .catch(() => void 0);\r\n                        }\r\n                        else {\r\n                            nearestItem.menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleTriggerEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {contextual} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu) {\r\n                const {type, name, value} = target;\r\n                if (type == \"radio\") {\r\n                    this.querySelectorAll<HTMLEMenuItemElement>(\r\n                        `:is(:scope, :scope > e-menuitemgroup) > e-menuitem[type=radio][name=${name}]`\r\n                    )\r\n                    .forEach((radio_i) => {\r\n                        radio_i.checked = radio_i.value == value;\r\n                    });\r\n                }\r\n            }\r\n            if (contextual) {\r\n                try {\r\n                    this.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuElement: HTMLEMenuElementConstructor = HTMLEMenuElementBase;\r\n\r\ninterface EMenuConstructor {\r\n    readonly prototype: HTMLEMenuElement;\r\n    new(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }): HTMLEMenuElement;\r\n}\r\n\r\nvar EMenu = <EMenuConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }) {\r\n        const {name, children} = init;\r\n        return element(\"e-menu\", {\r\n            attributes: {\r\n                name: name,\r\n                tabindex: -1,\r\n            },\r\n            children: children\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuElement.prototype,\r\n    }\r\n);","import { AttributeProperty, CustomElement, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\n\r\nexport { HTMLEGridRowElement };\r\n\r\ninterface HTMLEGridRowElementConstructor {\r\n    readonly prototype: HTMLEGridRowElement;\r\n    new(): HTMLEGridRowElement;\r\n}\r\n\r\ninterface HTMLEGridRowElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    active: boolean;\r\n    selected: boolean;\r\n    posinset: number;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrow\": HTMLEGridRowElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrow\"\r\n})\r\nclass HTMLEGridRowElementBase extends HTMLElement implements HTMLEGridRowElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    #menu: HTMLEMenuElement | null;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row;\r\n                        }\r\n\r\n                        :host([droptarget]) {\r\n                            background-color: gainsboro;\r\n                        }\r\n                        \r\n                        :host(:hover) {\r\n                            background-color: rgba(135, 206, 250, 0.2);\r\n                        }\r\n\r\n                        :host([active]) {\r\n                            outline: 1px solid rgb(135, 206, 250);\r\n                            outline-offset: -1px;\r\n                        }\r\n\r\n                        :host([selected]) {\r\n                            background-color: rgba(135, 206, 250, 0.4);\r\n                            outline: 1px solid rgb(135, 206, 250);\r\n                            outline-offset: -1px;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\"),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#menu = null;\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"menu\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#menu = element instanceof HTMLEMenuElement ? element : null;\r\n                break;\r\n            }\r\n            default: {\r\n                const assignedCells = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n                    .assignedElements()\r\n                    .filter(\r\n                        element_i => element_i instanceof HTMLEGridCellElement\r\n                    );\r\n                assignedCells.forEach((cell_i, i) => {\r\n                    cell_i.posinset = i;\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowElement: HTMLEGridRowElementConstructor = HTMLEGridRowElementBase;","import { HTMLEGridElement } from \"./Grid\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\n\r\nexport { HTMLEGridCellCollection };\r\n\r\ninterface HTMLEGridCellCollectionConstructor {\r\n    readonly prototype: HTMLEGridCellCollection;\r\n    new(root: HTMLElement): HTMLEGridCellCollection;\r\n}\r\n\r\ninterface HTMLEGridCellCollection {\r\n    length: number;\r\n    item(index: number): HTMLEGridCellElement | null;\r\n    namedItem(name: string): HTMLEGridCellElement | null;\r\n    values(): IterableIterator<HTMLEGridCellElement>;\r\n}\r\n\r\nclass HTMLEGridCellCollectionBase implements HTMLEGridCellCollection {\r\n    #walker: TreeWalker;\r\n\r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridCellElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEGridCellElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEGridCellElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEGridCellElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEGridCellElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEGridCellElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEGridCellElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEGridCellElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEGridCellElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridCellCollection: HTMLEGridCellCollectionConstructor =  HTMLEGridCellCollectionBase;","import { HTMLEGridElement } from \"./Grid\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\n\r\nexport { HTMLEGridRowCollection };\r\n\r\ninterface HTMLEGridRowCollectionConstructor {\r\n    readonly prototype: HTMLEGridRowCollection;\r\n    new(root: HTMLElement): HTMLEGridRowCollection;\r\n}\r\n\r\ninterface HTMLEGridRowCollection {\r\n    length: number;\r\n    item(index: number): HTMLEGridRowElement | null;\r\n    namedItem(name: string): HTMLEGridRowElement | null;\r\n    values(): IterableIterator<HTMLEGridRowElement>;\r\n}\r\n\r\nclass HTMLEGridRowCollectionBase implements HTMLEGridRowCollection {\r\n    #walker: TreeWalker;\r\n    \r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEGridRowElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEGridRowElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEGridRowElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEGridRowElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEGridRowElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEGridRowElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEGridRowElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEGridRowElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowCollection: HTMLEGridRowCollectionConstructor =  HTMLEGridRowCollectionBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\n\r\nexport { HTMLEGridBodyElement };\r\n\r\ninterface HTMLEGridBodyElementConstructor {\r\n    readonly prototype: HTMLEGridBodyElement;\r\n    new(): HTMLEGridBodyElement;\r\n}\r\n\r\ninterface HTMLEGridBodyElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridbody\": HTMLEGridBodyElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridbody\"\r\n})\r\nclass HTMLEGridBodyElementBase extends HTMLElement implements HTMLEGridBodyElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridBodyElement: HTMLEGridBodyElementConstructor = HTMLEGridBodyElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridHeadElement } from \"./GridHead\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\n\r\nexport { HTMLEGridElement };\r\n\r\ninterface HTMLEGridElementConstructor {\r\n    readonly prototype: HTMLEGridElement;\r\n    new(): HTMLEGridElement;\r\n}\r\n\r\ninterface HTMLEGridElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly body: HTMLEGridBodyElement | null;\r\n    readonly head: HTMLEGridHeadElement | null\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n    readonly activeCell: HTMLEGridCellElement | null;\r\n    readonly activeCellIndex: number;\r\n    readonly activeRow: HTMLEGridRowElement | null;\r\n    readonly activeRowIndex: number;\r\n    selectby: \"cell\" | \"row\";\r\n    name: string;\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    clearSelection(): void;\r\n    selectedCells(): HTMLEGridCellElement[];\r\n    selectedRows(): HTMLEGridRowElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-grid\": HTMLEGridElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-grid\"\r\n})\r\nclass HTMLEGridElementBase extends HTMLElement implements HTMLEGridElement {\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    get activeCellIndex(): number {\r\n        return this.#activeCellIndex;\r\n    }\r\n\r\n    get activeCell(): HTMLEGridCellElement | null {\r\n        return this.cells.item(this.#activeCellIndex) ?? null;\r\n    }\r\n\r\n    get activeRowIndex(): number {\r\n        return this.#activeRowIndex;\r\n    }\r\n\r\n    get activeRow(): HTMLEGridRowElement | null {\r\n        return this.rows.item(this.#activeRowIndex) ?? null;\r\n    }\r\n\r\n    get body(): HTMLEGridBodyElement | null {\r\n        return this.querySelector<HTMLEGridBodyElement>(\":scope > e-gridbody\");\r\n    }\r\n\r\n    get head(): HTMLEGridHeadElement | null {\r\n        return this.querySelector<HTMLEGridHeadElement>(\":scope > e-gridhead\");\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"cell\"})\r\n    selectby!: \"cell\" | \"row\";\r\n\r\n    #activeCellIndex: number;\r\n    #activeRowIndex: number;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #cellsWalker: TreeWalker;\r\n    #rowsWalker: TreeWalker;\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#cellsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#cellsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#rowsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#rowsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeCellIndex = -1;\r\n        this.#activeRowIndex = -1;\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.#clearCellsSelection();\r\n        this.#clearRowsSelection();\r\n    }\r\n\r\n    selectedCells(): HTMLEGridCellElement[] {\r\n        /*const selectedCells = <HTMLEGridCellElement[]>[];\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cellsWalker.root;\r\n        let cell = <HTMLEGridCellElement | null>cellsWalker.firstChild();\r\n        while (cell !== null) {\r\n            if (cell.selected) {\r\n                selectedCells.push(cell);\r\n            }\r\n            cell = <HTMLEGridCellElement | null>cellsWalker.nextNode();\r\n        }\r\n        return selectedCells;*/\r\n        return Array.from(this.querySelectorAll(\"e-gridcell[selected]\"));\r\n    }\r\n\r\n    selectedRows(): HTMLEGridRowElement[] {\r\n        /*const selectedRows = <HTMLEGridRowElement[]>[];\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = rowsWalker.root;\r\n        let row = <HTMLEGridRowElement | null>rowsWalker.firstChild();\r\n        while (row !== null) {\r\n            if (row.selected) {\r\n                selectedRows.push(row);\r\n            }\r\n            row = <HTMLEGridRowElement | null>rowsWalker.nextNode();\r\n        }\r\n        return selectedRows;*/\r\n        return Array.from(this.querySelectorAll(\"e-gridrow[selected]\"));\r\n    }\r\n\r\n    #cellsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridCellElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #rowsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridRowElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getCellsRange(from: HTMLEGridCellElement, to: HTMLEGridCellElement): HTMLEGridCellElement[] {\r\n        const cells = Array.from(this.cells.values());\r\n        const fromIndex = cells.indexOf(from);\r\n        const toIndex = cells.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return cells.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #getRowsRange(from: HTMLEGridRowElement, to: HTMLEGridRowElement): HTMLEGridRowElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleRow = this.#nextRow(from);\r\n            while (nextVisibleRow && nextVisibleRow !== to) {\r\n                range.push(nextVisibleRow);\r\n                nextVisibleRow = this.#nextRow(nextVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleRow = this.#previousRow(from);\r\n            while (previousVisibleRow && previousVisibleRow !== to) {\r\n                range.push(previousVisibleRow);\r\n                previousVisibleRow = this.#previousRow(previousVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setCellsSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((selectedCell_i) => {\r\n            if (!cells.includes(selectedCell_i)) {\r\n                selectedCell_i.selected = false;\r\n            }\r\n        });\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setRowsSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((selectedRow_i) => {\r\n            if (!rows.includes(selectedRow_i)) {\r\n                selectedRow_i.selected = false;\r\n            }\r\n        });\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addCellsToSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addRowsToSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeCellsFromSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        cells.forEach((cell_i) => {\r\n            if (selectedCells.includes(cell_i)) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeRowsFromSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        rows.forEach((row_i) => {\r\n            if (selectedRows.includes(row_i)) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearCellsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((cell_i) => {\r\n            if (cell_i.selected) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearRowsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((row_i) => {\r\n            if (row_i.selected) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveCell(cell: HTMLEGridCellElement | null): void {\r\n        const {activeCell, cells} = this;\r\n        if (activeCell !== null && activeCell !== cell) {\r\n            activeCell.active = false;\r\n            activeCell.tabIndex = -1;\r\n        }\r\n        else if (cell !== null) {\r\n            const cellsWalker = this.#cellsWalker;\r\n            cellsWalker.currentNode = cell;\r\n            cell.active = true;\r\n            cell.tabIndex = 0;\r\n            const closestRow = this.#closestRow(cell);\r\n            if (closestRow) {\r\n                this.#setActiveRow(closestRow);\r\n            }\r\n            this.#activeCellIndex = Array.from(cells.values()).indexOf(cell);\r\n        }\r\n        else {\r\n            this.#activeCellIndex = -1;\r\n        }\r\n    }\r\n\r\n    #setActiveRow(row: HTMLEGridRowElement | null): void {\r\n        const {activeRow, rows} = this;\r\n        if (activeRow !== null && activeRow !== row) {\r\n            activeRow.active = false;\r\n            activeRow.tabIndex = -1;\r\n        }\r\n        else if (row !== null) {\r\n            const rowsWalker = this.#rowsWalker;\r\n            rowsWalker.currentNode = row;\r\n            row.active = true;\r\n            row.tabIndex = 0;\r\n            this.#activeRowIndex = Array.from(rows.values()).indexOf(row);\r\n        }\r\n        else {\r\n            this.#activeRowIndex = -1;\r\n        }\r\n    }\r\n\r\n    #firstCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.firstChild();\r\n    }\r\n\r\n    #lastCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.lastChild();\r\n    }\r\n\r\n    #previousCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.previousNode();\r\n    }\r\n\r\n    #nextCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.nextNode();\r\n    }\r\n\r\n    #closestRow(cell: HTMLEGridCellElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = cell;\r\n        return <HTMLEGridRowElement | null>rowsWalker.parentNode();\r\n    }\r\n\r\n    #firstRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.firstChild();\r\n    }\r\n\r\n    #lastRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.lastChild();\r\n    }\r\n\r\n    #previousRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.previousNode();\r\n    }\r\n\r\n    #nextRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.nextNode();\r\n    }\r\n\r\n    #topCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const {cells: closestRowCells} = closestRow;\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const previousRow = this.#previousRow(closestRow);\r\n            if (previousRow) {\r\n                const {cells: previousRowCells} = previousRow;\r\n                return previousRowCells.item(\r\n                    Math.min(cellIndex, previousRowCells.length)\r\n                );\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #bottomCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const {cells: closestRowCells} = closestRow;\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const nextRow = this.#nextRow(closestRow);\r\n            if (nextRow) {\r\n                const {cells: nextRowCells} = nextRow;\r\n                return nextRowCells.item(\r\n                    Math.min(cellIndex, nextRowCells.length)\r\n                );\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent) {\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const composedPath = event.composedPath();\r\n                const targetCell = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridCellElement\r\n                ) : null;\r\n                if (targetCell instanceof HTMLEGridCellElement) {\r\n                    const selectedCells = this.selectedCells();\r\n                    if (!selectedCells.includes(targetCell)) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    targetCell.focus({preventScroll: true});\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const composedPath = event.composedPath();\r\n                const targetRow = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridRowElement\r\n                ) : null;\r\n                if (targetRow instanceof HTMLEGridRowElement) {\r\n                    const selectedRows = this.selectedRows();\r\n                    if (!selectedRows.includes(targetRow)) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    targetRow.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {ctrlKey, shiftKey} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const composedPath = event.composedPath();\r\n                const targetCell = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridCellElement\r\n                ) : null;\r\n                const selectedCells = this.selectedCells();\r\n                if (targetCell instanceof HTMLEGridCellElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetCell.selected ?\r\n                            this.#addCellsToSelection(targetCell) :\r\n                            this.#removeCellsFromSelection(targetCell);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedCell = selectedCells[selectedCells.length - 1];\r\n                        if (lastSelectedCell) {\r\n                            const range = this.#getCellsRange(\r\n                                lastSelectedCell,\r\n                                targetCell\r\n                            );\r\n                            if (range) {\r\n                                selectedCells.includes(targetCell) ?\r\n                                    this.#removeCellsFromSelection(...range) :\r\n                                    this.#addCellsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setCellsSelection(targetCell);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const selectedRows = this.selectedRows();\r\n                const composedPath = event.composedPath();\r\n                const targetRow = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridRowElement\r\n                ) : null;\r\n                if (targetRow instanceof HTMLEGridRowElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetRow.selected ?\r\n                            this.#addRowsToSelection(targetRow) :\r\n                            this.#removeRowsFromSelection(targetRow);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedRow = selectedRows[selectedRows.length - 1];\r\n                        if (lastSelectedRow) {\r\n                            const range = this.#getRowsRange(\r\n                                lastSelectedRow,\r\n                                targetRow\r\n                            );\r\n                            if (range) {\r\n                                selectedRows.includes(targetRow) ?\r\n                                    this.#removeRowsFromSelection(...range) :\r\n                                    this.#addRowsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setRowsSelection(targetRow);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {selectby, activeCell, activeRow} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    switch (selectby) {\r\n                        case \"cell\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const firstCell = firstRow ? this.#firstCell(firstRow) : null;\r\n                            const lastRow = this.#lastRow();\r\n                            const lastCell = lastRow ? this.#lastCell(lastRow) : null;\r\n                            if (firstCell && lastCell) {\r\n                                const range = this.#getCellsRange(firstCell, lastCell);\r\n                                if (range) {\r\n                                    this.#setCellsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"row\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const lastRow = this.#lastRow();\r\n                            if (firstRow && lastRow) {\r\n                                const range = this.#getRowsRange(firstRow, lastRow);\r\n                                if (range) {\r\n                                    this.#setRowsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const previousCell = this.#previousCell(activeCell);\r\n                        if (previousCell) {\r\n                            previousCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousCell.selected ?\r\n                                    this.#removeCellsFromSelection(previousCell) :\r\n                                    this.#addCellsToSelection(previousCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const nextCell = this.#nextCell(activeCell);\r\n                        if (nextCell) {\r\n                            nextCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextCell.selected ?\r\n                                    this.#removeCellsFromSelection(nextCell) :\r\n                                    this.#addCellsToSelection(nextCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const firstRow = activeRow ?? this.#firstRow();\r\n                        const topCell = activeCell ?\r\n                            this.#topCell(activeCell) :\r\n                            firstRow ?\r\n                            this.#firstCell(firstRow) :\r\n                            null;\r\n                        if (topCell) {\r\n                            topCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                topCell.selected ?\r\n                                    this.#removeCellsFromSelection(topCell) :\r\n                                    this.#addCellsToSelection(topCell);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const previousRow = activeRow ?\r\n                            this.#previousRow(activeRow) :\r\n                            this.#firstRow();\r\n                        if (previousRow) {\r\n                            previousRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousRow.selected ?\r\n                                    this.#removeRowsFromSelection(previousRow) :\r\n                                    this.#addRowsToSelection(previousRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const lastRow = activeRow ?? this.#lastRow();\r\n                        const bottomCell = activeCell ?\r\n                            this.#bottomCell(activeCell) :\r\n                            lastRow ?\r\n                            this.#lastCell(lastRow) :\r\n                            null;\r\n                            if (bottomCell) {\r\n                                bottomCell.focus({preventScroll: true});\r\n                                const {shiftKey} = event;\r\n                                if (shiftKey) {\r\n                                    bottomCell.selected ?\r\n                                        this.#removeCellsFromSelection(bottomCell) :\r\n                                        this.#addCellsToSelection(bottomCell);\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"row\": {\r\n                        const nextRow = activeRow ?\r\n                            this.#nextRow(activeRow) :\r\n                            this.#lastRow();\r\n                        if (nextRow) {\r\n                            nextRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextRow.selected ?\r\n                                    this.#removeRowsFromSelection(nextRow) :\r\n                                    this.#addRowsToSelection(nextRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const firstCell = this.#firstCell(activeRow);\r\n                            if (firstCell) {\r\n                                firstCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const firstRow = this.#firstRow();\r\n                        if (firstRow) {\r\n                            firstRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const lastCell = this.#lastCell(activeRow);\r\n                            if (lastCell) {\r\n                                lastCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const lastRow = this.#lastRow();\r\n                        if (lastRow) {\r\n                            lastRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeCell) {\r\n                            this.#setCellsSelection(activeCell);\r\n                            activeCell.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        if (activeRow) {\r\n                            this.#setRowsSelection(activeRow);\r\n                            activeRow.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        this.#clearCellsSelection();\r\n                        this.#setActiveCell(null);\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        this.#clearRowsSelection();\r\n                        this.#setActiveRow(null);\r\n                        break;\r\n                    }\r\n                }\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const {activeCell} = this;\r\n                if (activeCell && relatedTarget !== activeCell) {\r\n                    activeCell.focus();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const {activeRow} = this;\r\n                if (activeRow && relatedTarget !== activeRow) {\r\n                    activeRow.focus();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                if (target instanceof HTMLEGridCellElement) {\r\n                    this.#setActiveCell(target);\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                if (target instanceof HTMLEGridRowElement) {\r\n                    this.#setActiveRow(target);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedRows = <HTMLEGridRowElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridRowElement\r\n            );\r\n            assignedRows.forEach((row_i, i) => {\r\n                row_i.posinset = i;\r\n            });\r\n    }\r\n}\r\n\r\nvar HTMLEGridElement: HTMLEGridElementConstructor = HTMLEGridElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\n\r\nexport { HTMLEGridHeadElement };\r\n\r\ninterface HTMLEGridHeadElementConstructor {\r\n    readonly prototype: HTMLEGridHeadElement;\r\n    new(): HTMLEGridHeadElement;\r\n}\r\n\r\ninterface HTMLEGridHeadElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridhead\": HTMLEGridHeadElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridhead\"\r\n})\r\nclass HTMLEGridHeadElementBase extends HTMLElement implements HTMLEGridHeadElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                        }\r\n                    `\r\n                    ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridHeadElement: HTMLEGridHeadElementConstructor = HTMLEGridHeadElementBase;","import { NodeCollection } from \"../../../observers/NodeCollection\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemCollection } from \"./MenuItemCollection\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuBarElement };\r\n\r\ninterface HTMLEMenuBarElementConstructor {\r\n    readonly prototype: HTMLEMenuBarElement;\r\n    new(): HTMLEMenuBarElement;\r\n}\r\n\r\ninterface HTMLEMenuBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEMenuItemElement>;\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    expanded: boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menubar\": HTMLEMenuBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menubar\"\r\n})\r\nclass HTMLEMenuBarElementBase extends HTMLElement implements HTMLEMenuBarElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEMenuItemElement>;\r\n\r\n    #activeIndex: number;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        //this.items = new NodeCollection<HTMLEMenuItemElement>(this, this.#walkerNodeFilter.bind(this));\r\n        this.items = this.getElementsByTagName(\"e-menuitem\");\r\n        this.#activeIndex = -1;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        //this.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        return this.items.item(this.#activeIndex) ?? null;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLEMenuItemElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        const {activeItem, expanded, items} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.collapse();\r\n            activeItem.active = false;\r\n        }\r\n        if (item !== null) {\r\n            if (expanded) {\r\n                item.expand();\r\n            }\r\n            item.active = true;\r\n            this.#activeIndex = Array.from(items).indexOf(item);\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    get #items(): HTMLEMenuItemElement[] {\r\n        return Array.from(\r\n            this.querySelectorAll(\":is(:scope, :scope > e-menuitemgroup) > e-menuitem\")\r\n        );\r\n    }\r\n\r\n    #isClosestMenu(target: Element): boolean {\r\n        return target.closest(\":is(e-menubar, e-menu)\") == this;\r\n    }\r\n\r\n    #nearestItem(target: Element): HTMLEMenuItemElement | null {\r\n        return this.#items.find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n    \r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof Element) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            this.#setActiveItem(nearestItem);\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const {activeItem} = this;\r\n            if (activeItem?.expanded) {\r\n                activeItem.collapse();\r\n            }\r\n            this.#setActiveItem(null);\r\n            this.expanded = false;\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {expanded, activeItem} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu && target !== activeItem && expanded) {\r\n                const {menu} = target;\r\n                if (menu) {\r\n                    target.expand();\r\n                    menu.focus({preventScroll: true});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {expanded, activeItem} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu) {\r\n                const isExpanded = !expanded;\r\n                this.expanded = isExpanded;\r\n                if (isExpanded) {\r\n                    if (activeItem && !activeItem.expanded) {\r\n                        activeItem.expand();\r\n                    }\r\n                    const {menu} = target;\r\n                    menu?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true})\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded} = this;\r\n        let {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.#firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem() : \r\n                    this.#lastItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.expanded = !expanded;\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.expanded = false;\r\n                    if (activeItem) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /*#handleTriggerEvent(): void {\r\n        const {activeItem} = this;\r\n        if (activeItem?.expanded) {\r\n            activeItem.collapse();\r\n        }\r\n        this.expanded = false;\r\n        this.focus({preventScroll: true});\r\n    }*/\r\n}\r\n\r\nvar HTMLEMenuBarElement: HTMLEMenuBarElementConstructor = HTMLEMenuBarElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\n\r\nexport { HTMLEMenuButtonElement };\r\nexport { EMenuButton };\r\n\r\ninterface HTMLEMenuButtonElementConstructor {\r\n    readonly prototype: HTMLEMenuButtonElement;\r\n    new(): HTMLEMenuButtonElement;\r\n}\r\n\r\ninterface HTMLEMenuButtonElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    disabled: boolean;\r\n    expanded: boolean;\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-menubutton\"\r\n})\r\nclass HTMLEMenuButtonElementBase extends HTMLElement implements HTMLEMenuButtonElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    #menu: HTMLEMenuElement | null;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#menu = null;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"icon\"\r\n                        }\r\n                    }),\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"label\"\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const expand = force ?? !this.expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n\r\n    expand(): void {\r\n        if (!this.expanded) {\r\n            this.expanded = true;\r\n            this.#positionMenu();\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        if (this.expanded) {\r\n            this.expanded = false;\r\n        }\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const overflowX = itemRight + menuWidth - clientWidth;\r\n            const overflowY = itemTop + menuHeight - clientHeight;\r\n            menuStyle.setProperty(\"left\", `${\r\n                overflowX > 0 ?\r\n                scrollX + itemRight - menuWidth :\r\n                scrollX + itemLeft\r\n            }px`);\r\n            menuStyle.setProperty(\"top\", `${\r\n                overflowY > 0 ?\r\n                scrollY + itemTop - menuHeight :\r\n                scrollY + itemBottom\r\n            }px`);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target == this) {\r\n            this.toggle();\r\n            const {expanded} = this;\r\n            if (expanded) {\r\n                this.menu?.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded} = this;\r\n        switch (key) {\r\n            case \"ArrowDown\":\r\n            case \"Enter\":\r\n                if (!expanded) {\r\n                    this.expand();\r\n                    this.menu?.items.item(0)?.focus({preventScroll: true});\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            case \"Escape\":\r\n                if (expanded) {\r\n                    this.collapse();\r\n                    this.focus({preventScroll: true});\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n        this.#menu = (element instanceof HTMLEMenuElement) ? element : null;\r\n    }\r\n\r\n    #handleTriggerEvent(): void {\r\n        this.collapse();\r\n        this.focus({preventScroll: true});\r\n    }\r\n}\r\n\r\nvar HTMLEMenuButtonElement: HTMLEMenuButtonElementConstructor = HTMLEMenuButtonElementBase;\r\n\r\ninterface EMenuButtonConstructor {\r\n    readonly prototype: HTMLEMenuButtonElement;\r\n    new(init: {\r\n        menu: HTMLEMenuElement\r\n    }): HTMLEMenuButtonElement;\r\n}\r\n\r\nvar EMenuButton = <EMenuButtonConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        menu: HTMLEMenuElement\r\n    }) {\r\n        const {menu} = init;\r\n        menu.slot = \"menu\";\r\n        return element(\"e-menubutton\", {\r\n            attributes: {\r\n                tabindex: -1\r\n            },\r\n            children: [menu]\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuButtonElement.prototype,\r\n    }\r\n);","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionElement };\r\n\r\ninterface HTMLEOptionElementConstructor {\r\n    readonly prototype: HTMLEOptionElement;\r\n    new(): HTMLEOptionElement;\r\n}\r\n\r\ninterface HTMLEOptionElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    active: boolean;\r\n    value: string;\r\n    label: string;\r\n    description: string;\r\n    disabled: boolean;\r\n    selected: boolean;\r\n    default: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-option\": HTMLEOptionElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-option\"\r\n})\r\nclass HTMLEOptionElementBase extends HTMLElement implements HTMLEOptionElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n    \r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n        \r\n    @AttributeProperty({type: String})\r\n    description!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    default!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            user-select: none;\r\n                            white-space: nowrap;\r\n                            padding: 2px 12px;\r\n                        }\r\n                        \r\n                        :host([active]) {\r\n                            color: black;\r\n                            background-color: lightgray;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            color: lightgray;\r\n                        }\r\n\r\n                        :host::before {\r\n                            display: flex;\r\n                            content: \"\";\r\n                            width: 18px;\r\n                            height: 18px;\r\n                            margin-right: 6px;\r\n\r\n                            mask-size: 18px 18px;\r\n                            -webkit-mask-size: 18px 18px;\r\n                            background-color: var(--icon-color, none);\r\n                            -webkit-mask-image: var(--icon-image, none);\r\n                            mask-image: var(--icon-image, none);\r\n                        }\r\n\r\n                        [part=\"label\"] {\r\n                            flex: auto;\r\n                            text-align: left;\r\n                        }\r\n\r\n                        :host([default])::after {\r\n                            display: inline-block;\r\n                            content: \"(default)\";\r\n                            margin-left: 24px;\r\n                            text-align: right;\r\n                        }\r\n\r\n                        [part=\"content\"] {\r\n                            flex: auto;\r\n                            display: flex;\r\n                            overflow: hidden;\r\n                            pointer-events: none;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"label\"\r\n                        }\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector<HTMLElement>(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEOptionElement: HTMLEOptionElementConstructor = HTMLEOptionElementBase;","import { CustomElement, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionGroupElement };\r\n\r\ninterface HTMLEOptionGroupElementConstructor {\r\n    readonly prototype: HTMLEOptionGroupElement;\r\n    new(): HTMLEOptionGroupElement;\r\n}\r\n\r\ninterface HTMLEOptionGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-optiongroup\": HTMLEOptionGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-optiongroup\"\r\n})\r\nclass HTMLEOptionGroupElementBase extends HTMLElement implements HTMLEOptionGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n}\r\n\r\nvar HTMLEOptionGroupElement: HTMLEOptionGroupElementConstructor = HTMLEOptionGroupElementBase;","import { HTMLEOptionElement } from \"./Option\";\r\nimport { HTMLEOptionGroupElement } from \"./OptionGroup\";\r\nimport { HTMLESelectElement } from \"./Select\";\r\n\r\nexport { HTMLEOptionCollection };\r\n\r\ninterface HTMLEOptionCollectionConstructor {\r\n    readonly prototype: HTMLEOptionCollection;\r\n    new(root: HTMLESelectElement): HTMLEOptionCollection;\r\n}\r\n\r\ninterface HTMLEOptionCollection {\r\n    length: number;\r\n    item(index: number): HTMLEOptionElement | null;\r\n    namedItem(name: string): HTMLEOptionElement | null;\r\n    values(): IterableIterator<HTMLEOptionElement>;\r\n}\r\n\r\nclass HTMLEOptionCollectionBase implements HTMLEOptionCollection {\r\n    #walker: TreeWalker;\r\n\r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    get value(): string {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        while (currentNode !== null) {\r\n            if (currentNode.selected) {\r\n                return currentNode.value;\r\n            }\r\n            currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    constructor(root: HTMLESelectElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEOptionElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEOptionGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEOptionElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEOptionElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEOptionElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        let currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEOptionElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEOptionElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEOptionElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEOptionCollection: HTMLEOptionCollectionConstructor =  HTMLEOptionCollectionBase;","import { HTMLEActionElement } from \"../../containers/actions/Action\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEOptionElement } from \"./Option\";\r\nimport { HTMLEOptionCollection } from \"./OptionCollection\";\r\nimport { HTMLEOptionGroupElement } from \"./OptionGroup\";\r\n\r\nexport { HTMLESelectElement };\r\n\r\ninterface HTMLESelectElement extends HTMLEActionElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly options: HTMLEOptionCollection;\r\n    readonly activeIndex: number;\r\n    readonly activeOption: HTMLEOptionElement | null;\r\n    readonly selectedIndex: number;\r\n    readonly selectedOption: HTMLEOptionElement | null;\r\n    name: string;\r\n    label: string;\r\n    value: string;\r\n    expanded: boolean;\r\n    expand(): void;\r\n    collapse(): void;\r\n    toggle(force?: boolean): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ninterface HTMLESelectElementConstructor {\r\n    readonly prototype: HTMLESelectElement;\r\n    new(): HTMLESelectElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-select\": HTMLESelectElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-select\"\r\n})\r\nclass HTMLESelectElementBase extends HTMLEActionElement implements HTMLESelectElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly options: HTMLEOptionCollection;\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get selectedIndex(): number {\r\n        return this.#selectedIndex;\r\n    }\r\n\r\n    get activeOption(): HTMLEOptionElement | null {\r\n        return this.options.item(this.#activeIndex) ?? null;\r\n    }\r\n\r\n    get selectedOption(): HTMLEOptionElement | null {\r\n        return this.options.item(this.#selectedIndex) ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"select\", observed: true})\r\n    type!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    #walker: TreeWalker;\r\n    #activeIndex: number;\r\n    #selectedIndex: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"label\", {\r\n                        attributes: {\r\n                            part: \"label\"\r\n                        }\r\n                    }),\r\n                    element(\"output\", {\r\n                        attributes: {\r\n                            part: \"value\"\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"options\"\r\n                },\r\n                children: [\r\n                    element(\"slot\"),\r\n                    element(\"hr\", {\r\n                        attributes: {\r\n                            part: \"separator\"\r\n                        }\r\n                    }),\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"description\"\r\n                        }\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        this.#selectedIndex = -1;\r\n        this.options = new HTMLEOptionCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"value\": {\r\n                const {options} = this;\r\n                const matchingOption = Array.from(options.values()).find(option => option.value == newValue);\r\n                if (matchingOption) {\r\n                    this.#setSelectedOption(matchingOption);\r\n                    this.dispatchEvent(new Event(\"change\", {bubbles: true}));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {expanded, options} = this;\r\n        if (!expanded) {\r\n            this.expanded = true;\r\n            const {selectedIndex} = this;\r\n            this.#positionOptions();\r\n            const option = options.item(selectedIndex);\r\n            if (option) {\r\n                option.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {expanded} = this;\r\n        if (expanded) {\r\n            this.expanded = false;\r\n            this.focus();\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {expanded} = this;\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEOptionElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEOptionGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEOptionElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEOptionElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousOption(item: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEOptionElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextOption(item: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEOptionElement | null>walker.nextNode();\r\n    }\r\n\r\n    #selectOption(option: HTMLEOptionElement): void {\r\n        if (option && !option.disabled) {\r\n            this.value = option.value;\r\n        }\r\n    }\r\n\r\n    #setActiveOption(option: HTMLEOptionElement | null): void {\r\n        const {options, activeOption} = this;\r\n        if (activeOption !== null && activeOption !== option) {\r\n            activeOption.active = false;\r\n        }\r\n        if (option !== null) {\r\n            if (!option.disabled) {\r\n                const {shadowRoot} = this;\r\n                const descriptionPart = shadowRoot.querySelector(\"[part='description']\");\r\n                if (descriptionPart) {\r\n                    descriptionPart.textContent = option.description;\r\n                }\r\n                this.#activeIndex = Array.from(options.values()).indexOf(option);\r\n            }\r\n            option.active = true;\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    #setSelectedOption(option: HTMLEOptionElement | null): void {\r\n        const {options} = this;\r\n        if (option !== null) {\r\n            if (!option.disabled) {\r\n                const {shadowRoot, selectedOption} = this;\r\n                const valuePart = shadowRoot.querySelector(\"[part='value']\");\r\n                if (valuePart) {\r\n                    valuePart.textContent = option.label;\r\n                }\r\n                option.selected = true;\r\n                if (selectedOption) {\r\n                    selectedOption.selected = false;\r\n                }\r\n                this.#selectedIndex = Array.from(options.values()).indexOf(option);\r\n            }\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    #positionOptions(): void {\r\n        const {shadowRoot} = this;\r\n        const options = shadowRoot.querySelector<HTMLElement>(\"[part=options]\")!;\r\n        const {style: optionsStyle} = options;  \r\n        const {bottom: selectBottom, left: selectLeft} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        optionsStyle.setProperty(\"top\", `${selectBottom + scrollY}px`);\r\n        optionsStyle.setProperty(\"left\", `${selectLeft + scrollX}px`);\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEOptionElement) {\r\n            this.#selectOption(target);\r\n            this.collapse();\r\n        }\r\n        else {\r\n            if (target == this) {\r\n                this.toggle();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {expanded} = this;\r\n        if (target instanceof HTMLEOptionElement) {\r\n            if (!expanded) {\r\n                this.expand();\r\n            }\r\n            this.#setActiveOption(target);\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {expanded} = this;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            if (expanded) {\r\n                this.collapse();\r\n            }\r\n            this.#setActiveOption(null);\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {options, activeOption, selectedOption, selectedIndex, expanded} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                if (expanded && activeOption !== null) {\r\n                    const previousOption = this.#previousOption(activeOption) ?? this.#firstOption();\r\n                    if (previousOption) {\r\n                        previousOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else if (!expanded && selectedOption !== null) {\r\n                    const previousOption = this.#previousOption(selectedOption) ?? this.#firstOption();\r\n                    if (previousOption) {\r\n                        this.#selectOption(previousOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (expanded && activeOption !== null) {\r\n                    const nextOption = this.#nextOption(activeOption) ?? this.#lastOption();\r\n                    if (nextOption) {\r\n                        nextOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else if (!expanded && selectedOption !== null) {\r\n                    const nextOption = this.#nextOption(selectedOption) ?? this.#lastOption();\r\n                    if (nextOption) {\r\n                        this.#selectOption(nextOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstOption = this.#firstOption();\r\n                if (firstOption !== null) {\r\n                    if (expanded) {\r\n                        firstOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(firstOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastOption = this.#lastOption();\r\n                if (lastOption !== null) {\r\n                    if (expanded) {\r\n                        lastOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(lastOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (expanded) {\r\n                    this.collapse();\r\n                    if (activeOption !== null) {\r\n                        this.#selectOption(activeOption);\r\n                    }\r\n                }\r\n                else {\r\n                    const option = options.item(selectedIndex);\r\n                    if (option !== null) {\r\n                        option.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.collapse();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            default: {\r\n                const {activeIndex} = this;\r\n                const {length: keyLength} = key;\r\n                if (keyLength == 1) {\r\n                    const keyCode = key.charCodeAt(0);\r\n                    const optionsArray = Array.from(options.values());\r\n                    const firstMatchIndex = optionsArray.findIndex(\r\n                        option_i => option_i.label.toLowerCase().charCodeAt(0) == keyCode\r\n                    );\r\n                    const nextMatchIndex = optionsArray.findIndex(\r\n                        (option_i, i) => option_i.label.toLowerCase().charCodeAt(0) == keyCode && i > activeIndex\r\n                    );\r\n                    const matchIndex = nextMatchIndex > -1 ?\r\n                        nextMatchIndex :\r\n                        firstMatchIndex;\r\n                    const option = options.item(matchIndex);\r\n                    if (option !== null) {\r\n                        option.focus({preventScroll: true});\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEOptionElement) {\r\n            target.focus({preventScroll: true});\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const options = <HTMLEOptionElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEOptionElement\r\n            );\r\n        if (options.length > 0) {\r\n            let selectedOption: HTMLEOptionElement | null = null;\r\n            let {value} = this;\r\n            if (value) {\r\n                selectedOption = options.find(option => option.value == value) ?? null;\r\n            }\r\n            if (selectedOption == null) {\r\n                selectedOption = options.find(option => option.selected) ?? null;\r\n            }\r\n            if (selectedOption == null) {\r\n                selectedOption = options.find(option => option.default) ?? null;\r\n            }\r\n            if (selectedOption == null) {\r\n                selectedOption = this.#firstOption();\r\n            }\r\n            options.forEach(option_i => {\r\n                option_i.selected = option_i == selectedOption\r\n            });\r\n            if (selectedOption !== null) {\r\n                this.#setSelectedOption(selectedOption);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLESelectElement: HTMLESelectElementConstructor = HTMLESelectElementBase;","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEActionElement } from \"../actions/Action\";\r\nimport { HTMLEMenuButtonElement } from \"../menus/MenuButton\";\r\n\r\nexport { HTMLEToolBarItemElement };\r\nexport { EToolBarItem };\r\n\r\ninterface HTMLEToolBarItemElementConstructor {\r\n    readonly prototype: HTMLEToolBarItemElement;\r\n    new(): HTMLEToolBarItemElement;\r\n}\r\n\r\ninterface HTMLEToolBarItemElement extends HTMLEActionElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menubutton: HTMLEMenuButtonElement | null;\r\n    readonly select: HTMLESelectElement | null;\r\n    name: string;\r\n    label: string;\r\n    active: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritem\": HTMLEToolBarItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar slottedKeyboardListeners: WeakMap<HTMLElement, EventListener>;\r\nvar slottedTriggerListeners: WeakMap<HTMLElement, EventListener>;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritem\"\r\n})\r\nclass HTMLEToolBarItemElementBase extends HTMLEActionElement implements HTMLEToolBarItemElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get menubutton(): HTMLEMenuButtonElement | null {\r\n        return this.#menubutton;\r\n    }\r\n    \r\n    get select(): HTMLESelectElement | null {\r\n        return this.#select;\r\n    }\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n    \r\n    #menubutton: HTMLEMenuButtonElement | null;\r\n    #select: HTMLESelectElement | null;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"icon\"\r\n                        }\r\n                    }),\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"label\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\", {\r\n                        attributes: {\r\n                            name: \"select\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\", {\r\n                        attributes: {\r\n                            name: \"menubutton\"\r\n                        }\r\n                    })\r\n                ]\r\n            })\r\n        )\r\n        slottedKeyboardListeners = new WeakMap();\r\n        slottedTriggerListeners = new WeakMap();\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#menubutton = null;\r\n        this.#select = null;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    toggle(): void {\r\n        const {type} = this;\r\n        switch (type) {\r\n            case \"menubutton\": {\r\n                const {menubutton} = this;\r\n                if (menubutton) {\r\n                    menubutton.toggle();\r\n                    if (menubutton.expanded) {\r\n                        menubutton.menu?.items.item(0)?.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"select\": {\r\n                const {select} = this;\r\n                if (select) {\r\n                    select.toggle();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector<HTMLSpanElement>(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"value\": {\r\n                const {type} = this;\r\n                if (type == \"select\") {\r\n                    this.#updateSelectValue();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #updateSelectValue(): void {\r\n        const {select} = this;\r\n        if (select) {\r\n            const {value} = this;\r\n            const {value: selectValue} = select;\r\n            if (selectValue !== value) {\r\n                select.value = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    #addSlottedKeyboardHandler(element: HTMLElement): void {\r\n        const listener = <EventListener>this.#handleSlottedKeyboardEvent.bind(this);\r\n        slottedKeyboardListeners.set(element, listener);\r\n        element.addEventListener(\"keydown\", listener);\r\n    }\r\n\r\n    #removeSlottedKeyboardHandler(element: HTMLElement): void {\r\n        const listener = slottedKeyboardListeners.get(element);\r\n        if (listener) {\r\n            element.removeEventListener(\"keydown\", listener);\r\n        }\r\n    }\r\n\r\n    #addSlottedTriggerHandler(element: HTMLElement): void {\r\n        const listener = <EventListener>this.#handleSlottedTriggerEvent.bind(this);\r\n        slottedTriggerListeners.set(element, listener);\r\n        element.addEventListener(\"trigger\", listener);\r\n    }\r\n\r\n    #removeSlottedTriggerHandler(element: HTMLElement): void {\r\n        const listener = slottedTriggerListeners.get(element);\r\n        if (listener) {\r\n            element.removeEventListener(\"trigger\", listener);\r\n        }\r\n    }\r\n\r\n    #handleSlottedKeyboardEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        switch (key) {\r\n            case \"Enter\":\r\n            case \"Escape\": {\r\n                this.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlottedTriggerEvent(event: KeyboardEvent): void {\r\n        this.focus({preventScroll: true});\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target;\r\n        switch (slotName) {\r\n            case \"menubutton\": {\r\n                let menubutton = this.#menubutton;\r\n                if (menubutton !== null) {\r\n                    this.#removeSlottedTriggerHandler(menubutton);\r\n                    this.#removeSlottedKeyboardHandler(menubutton);\r\n                }\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                menubutton = element instanceof HTMLEMenuButtonElement ? element : null;\r\n                if (menubutton !== null) {\r\n                    this.#addSlottedTriggerHandler(menubutton);\r\n                    this.#addSlottedKeyboardHandler(menubutton);\r\n                }\r\n                this.#menubutton = menubutton;\r\n                break;\r\n            }\r\n            case \"select\": {\r\n                let select = this.#select;\r\n                if (select !== null) {\r\n                    this.#removeSlottedKeyboardHandler(select);\r\n                }\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                select = element instanceof HTMLESelectElement ? element : null;\r\n                if (select !== null) {\r\n                    this.#addSlottedKeyboardHandler(select);\r\n                }\r\n                this.#select = select;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemElement: HTMLEToolBarItemElementConstructor = HTMLEToolBarItemElementBase;\r\n\r\ninterface EToolBarItemConstructor {\r\n    readonly prototype: HTMLEToolBarItemElement;\r\n    new(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n    button(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    checkbox(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    radio(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    menubutton(init: {\r\n        name: string;\r\n        label: string;\r\n        menubutton: HTMLEMenuButtonElement;\r\n    }): HTMLEToolBarItemElement;\r\n    select(init: {\r\n        name: string;\r\n        label: string;\r\n        select: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n}\r\n\r\nvar EToolBarItem = <EToolBarItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menubutton, select} = init;\r\n        if (menubutton) {\r\n            menubutton.slot = \"menubutton\";\r\n        }\r\n        if (select) {\r\n            select.slot = \"select\";\r\n        }\r\n        return element(\"e-toolbaritem\", {\r\n            attributes: {\r\n                tabindex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type\r\n            },\r\n            children: menubutton ? [menubutton] : select ? [select] : void 0,\r\n            listeners: {\r\n                trigger: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEToolBarItemElement.prototype,\r\n        button(init: {\r\n            name: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menubutton(init: {\r\n            name: string;\r\n            label: string;\r\n            menubutton: HTMLEMenuButtonElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"menubutton\"\r\n            });\r\n        },\r\n        select(init: {\r\n            name: string;\r\n            label: string;\r\n            select: HTMLESelectElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"select\"\r\n            });\r\n        },\r\n    }\r\n);","\r\nimport { element, CustomElement, AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEToolBarItemGroupElement };\r\n\r\ninterface HTMLEToolBarItemGroupElementConstructor {\r\n    readonly prototype: HTMLEToolBarItemGroupElement;\r\n    new(): HTMLEToolBarItemGroupElement;\r\n}\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\ninterface HTMLEToolBarItemGroupElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n    disabled: boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritemgroup\": HTMLEToolBarItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritemgroup\"\r\n})\r\nclass HTMLEToolBarItemGroupElementBase extends HTMLElement implements HTMLEToolBarItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    disabled!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            width: max-content;\r\n                            flex-direction: row;\r\n                        }\r\n\r\n                        /*:host([orientation=\"vertical\"]) {\r\n                            flex-direction: column;\r\n                        }\r\n\r\n                        :host([orientation=\"horizontal\"]) {\r\n                            flex-direction: row;\r\n                        }*/\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const label = this.shadowRoot.querySelector<HTMLLabelElement>(\"[part='label']\");\r\n                if (label) {\r\n                    label.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"disabled\": {\r\n                /*this.items.forEach((item) => {\r\n                    item.disabled = newValue !== null;\r\n                });*/\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemGroupElement: HTMLEToolBarItemGroupElementConstructor = HTMLEToolBarItemGroupElementBase;","import { HTMLEToolBarElement } from \"./ToolBar\";\r\nimport { HTMLEToolBarItemElement } from \"./ToolBarItem\";\r\nimport { HTMLEToolBarItemGroupElement } from \"./ToolBarItemGroup\";\r\n\r\nexport { HTMLEToolBarItemRadioList };\r\nexport { HTMLEToolBarItemCollection };\r\n\r\ninterface HTMLEToolBarItemCollectionConstructor {\r\n    readonly prototype: HTMLEToolBarItemCollection;\r\n    new(root: HTMLEToolBarElement): HTMLEToolBarItemCollection;\r\n}\r\n\r\ninterface HTMLEToolBarItemCollection {\r\n    length: number;\r\n    item(index: number): HTMLEToolBarItemElement | null;\r\n    namedItem(name: string): HTMLEToolBarItemElement | HTMLEToolBarItemRadioList | null;\r\n    values(): IterableIterator<HTMLEToolBarItemElement>;\r\n}\r\n\r\ninterface HTMLEToolBarItemRadioListConstructor {\r\n    readonly prototype: HTMLEToolBarItemRadioList;\r\n    new(root: HTMLEToolBarElement, name: string): HTMLEToolBarItemRadioList;\r\n}\r\n\r\ninterface HTMLEToolBarItemRadioList {\r\n    value: string;\r\n    values(): IterableIterator<HTMLEToolBarItemElement>;\r\n}\r\n\r\nclass HTMLEToolBarItemCollectionBase implements HTMLEToolBarItemCollection {\r\n    #walker: TreeWalker;\r\n\r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLEToolBarElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEToolBarItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEToolBarItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEToolBarItemElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEToolBarItemElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEToolBarItemElement | HTMLEToolBarItemRadioList | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEToolBarItemElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEToolBarItemElement | null>walker.nextNode();\r\n        }\r\n        if (currentNode && currentNode.type == \"radio\") {\r\n            return new HTMLEToolBarItemRadioList(<HTMLEToolBarElement>walker.root, name);\r\n        }\r\n        return <HTMLEToolBarItemElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEToolBarItemElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEToolBarItemElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n\r\n    static HTMLEToolBarItemRadioListBase? = class HTMLEToolBarItemRadioListBase implements HTMLEToolBarItemRadioList {\r\n        #walker: TreeWalker;\r\n        #name: string;\r\n\r\n        get value(): string {\r\n            const name = this.#name;\r\n            const walker = this.#walker;\r\n            walker.currentNode = walker.root;\r\n            let currentNode = <HTMLEToolBarItemElement | null>walker.nextNode();\r\n            while (currentNode !== null) {\r\n                if (currentNode.name == name && currentNode.type == \"radio\" && currentNode.checked) {\r\n                    return currentNode.value;\r\n                }\r\n                currentNode = <HTMLEToolBarItemElement | null>walker.nextNode();\r\n            }\r\n            return \"\";\r\n        }\r\n\r\n        constructor(root: HTMLEToolBarElement, name: string) {\r\n            this.#walker = document.createTreeWalker(\r\n                root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n            );\r\n            this.#name = name;\r\n        }\r\n        \r\n        #nodeFilter(node: Node): number {\r\n            if (node instanceof HTMLEToolBarItemElement) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            if (node instanceof HTMLEToolBarItemGroupElement) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n            return NodeFilter.FILTER_REJECT;\r\n        }\r\n\r\n        *values(): IterableIterator<HTMLEToolBarItemElement> {\r\n            const name = this.#name;\r\n            const walker = this.#walker;\r\n            walker.currentNode = walker.root;\r\n            let currentNode = <HTMLEToolBarItemElement | null>walker.nextNode();\r\n            while (currentNode !== null) {\r\n                const {name: itemName, type: itemType} = currentNode;\r\n                if (itemName == name && itemType == \"radio\") {\r\n                    yield currentNode;\r\n                }\r\n                currentNode = <HTMLEToolBarItemElement | null>walker.nextNode();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemCollection: HTMLEToolBarItemCollectionConstructor =  HTMLEToolBarItemCollectionBase;\r\nvar HTMLEToolBarItemRadioList: HTMLEToolBarItemRadioListConstructor = HTMLEToolBarItemCollectionBase.HTMLEToolBarItemRadioListBase!;\r\ndelete HTMLEToolBarItemCollectionBase.HTMLEToolBarItemRadioListBase;","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEToolBarItemElement } from \"./ToolBarItem\";\r\nimport { HTMLEToolBarItemCollection, HTMLEToolBarItemRadioList } from \"./ToolBarItemCollection\";\r\nimport { HTMLEToolBarItemGroupElement } from \"./ToolBarItemGroup\";\r\n\r\nexport { HTMLEToolBarElement };\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\ninterface HTMLEToolBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLEToolBarItemCollection;\r\n    readonly activeItem: HTMLEToolBarItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n}\r\n\r\ninterface HTMLEToolbarElementConstructor {\r\n    readonly prototype: HTMLEToolBarElement;\r\n    new(): HTMLEToolBarElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbar\": HTMLEToolBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbar\"\r\n})\r\nclass HTMLEToolBarElementBase extends HTMLElement implements HTMLEToolBarElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLEToolBarItemCollection;\r\n\r\n    get activeItem(): HTMLEToolBarItemElement | null {\r\n        return this.items.item(this.#activeIndex) ?? null;\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    orientation!: ToolBarOrientation;\r\n\r\n    #walker: TreeWalker;\r\n    #activeIndex: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#activeIndex = -1;\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        this.items = new HTMLEToolBarItemCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"change\", this.#handleChangeEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEToolBarItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEToolBarItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEToolBarItemElement | null>walker.previousSibling();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEToolBarItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEToolBarItemElement | null): void {\r\n        const {activeItem, items} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n            this.#activeIndex = Array.from(items.values()).indexOf(item);\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLESelectElement) {\r\n            const item = target.closest(\"e-toolbaritem\");\r\n            if (item !== null) {\r\n                const {select, type} = item;\r\n                if (target == select && select && type == \"select\") {\r\n                    const {value} = item;\r\n                    const {value: selectValue} = select;\r\n                    if (value !== selectValue) {\r\n                        item.value = selectValue;\r\n                        item.trigger();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEToolBarItemElement) {\r\n            const {type} = target;\r\n            switch (type) {\r\n                /*case \"menubutton\": {\r\n                    const {menubutton} = target;\r\n                    if (menubutton) {\r\n                        const {expanded} = menubutton;\r\n                        if (!expanded) {\r\n                            menubutton.expand();\r\n                            menubutton.menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                case \"select\": {\r\n                    const {select} = target;\r\n                    if (select) {\r\n                        select.toggle();\r\n                    }\r\n                    break;\r\n                }*/\r\n                default: {\r\n                    target.trigger();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {items} = this;\r\n        const activeItem = Array.from(items.values()).find(\r\n            item_i => item_i.contains(<Node>target)\r\n        ) ?? null;\r\n        this.#setActiveItem(activeItem);\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.#setActiveItem(null);\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"menubutton\": {\r\n                            const {menubutton} = activeItem;\r\n                            if (menubutton) {\r\n                                const {expanded} = menubutton;\r\n                                if (!expanded) {\r\n                                    menubutton.expand();\r\n                                    menubutton.menu?.items.item(0)?.focus({preventScroll: true});\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"select\": {\r\n                            const {select} = activeItem;\r\n                            if (select) {\r\n                                select.expand();\r\n                            }\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            activeItem.trigger();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"select\": {\r\n                            activeItem.select?.expand();\r\n                            event.stopPropagation();\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    activeItem.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleTriggerEvent(event: Event): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEToolBarItemElement) {\r\n            const {type, name, value} = target;\r\n            if (type == \"radio\") {\r\n                Array.from(new HTMLEToolBarItemRadioList(this, name).values()).forEach((radio_i) => {\r\n                    radio_i.checked = radio_i.value == value;\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarElement: HTMLEToolbarElementConstructor = HTMLEToolBarElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLETabPanelElement };\r\n\r\ninterface HTMLETabPanelElementConstructor {\r\n    readonly prototype: HTMLETabPanelElement;\r\n    new(): HTMLETabPanelElement;\r\n}\r\n\r\ninterface HTMLETabPanelElement extends HTMLElement {\r\n    name: string;\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tabpanel\"\r\n})\r\nclass HTMLETabPanelElementBase extends HTMLElement implements HTMLETabPanelElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n        \r\n                        :host([hidden]) {\r\n                            display: none;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n}\r\n\r\nvar HTMLETabPanelElement: HTMLETabPanelElementConstructor = HTMLETabPanelElementBase;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tabpanel\": HTMLETabPanelElement,\r\n    }\r\n}","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLETabPanelElement } from \"./TabPanel\";\r\n\r\nexport { ETabChangeEvent };\r\nexport { HTMLETabElement };\r\n\r\ninterface HTMLETabElementConstructor {\r\n    readonly prototype: HTMLETabElement;\r\n    new(): HTMLETabElement;\r\n}\r\n\r\ninterface HTMLETabElement extends HTMLElement {\r\n    name: string;\r\n    active: boolean;\r\n    disabled: boolean;\r\n    controls: string;\r\n    panel: HTMLETabPanelElement | null;\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ntype ETabChangeEvent = CustomEvent<{\r\n    tab: HTMLETabElement;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_tabchange\": ETabChangeEvent,\r\n    }\r\n\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tab\": HTMLETabElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tab\"\r\n})\r\nclass HTMLETabElementBase extends HTMLElement implements HTMLETabElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    #panel: HTMLETabPanelElement | null;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            user-select: none;\r\n                            white-space: nowrap;\r\n\r\n                            padding: 2px 6px;\r\n                            cursor: pointer;\r\n                        }\r\n                        \r\n                        :host([disabled]) {\r\n                            color: lightgray;\r\n                            pointer-events: none;\r\n                        }\r\n        \r\n                        :host([active]) {\r\n                            background-color: lightgray;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n        this.#panel = null;\r\n    }\r\n\r\n    get panel(): HTMLETabPanelElement | null {\r\n        return this.#panel;\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const panel = document.getElementById(this.controls);\r\n        if (panel !== this.#panel && panel instanceof HTMLETabPanelElement) {\r\n            this.#panel = panel;\r\n        }\r\n        if (panel)  {\r\n            panel.hidden = !this.active;\r\n        }\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"active\":\r\n                if (this.active) {\r\n                    this.dispatchEvent(new CustomEvent(\"e_tabchange\", {detail: {tab: this}, bubbles: true}));\r\n                }\r\n                const panel = document.getElementById(this.controls);\r\n                if (panel !== this.panel && panel instanceof HTMLETabPanelElement) {\r\n                    this.#panel = panel;\r\n                }\r\n                if (panel)  {\r\n                    panel.hidden = !this.active;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabElement: HTMLETabElementConstructor = HTMLETabElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLETabElement } from \"./Tab\";\r\n\r\nexport { HTMLETabListElement };\r\n\r\ninterface HTMLETabListElementConstructor {\r\n    readonly prototype: HTMLETabListElement;\r\n    new(): HTMLETabListElement;\r\n}\r\n\r\ninterface HTMLETabListElement extends HTMLElement {\r\n    readonly activeTab: HTMLETabElement | null;\r\n    tabs: HTMLETabElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tablist\": HTMLETabListElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tablist\"\r\n})\r\nclass HTMLETabListElementBase extends HTMLElement implements HTMLETabListElement {\r\n\r\n    tabs: HTMLETabElement[];\r\n\r\n    #activeIndex: number;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                            position: relative;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n        \r\n        this.tabs = [];\r\n        this.#activeIndex = 1;\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeTab(): HTMLETabElement | null {\r\n        return this.tabs[this.#activeIndex] || null;\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n        const slot = this.shadowRoot!.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", (event) => {\r\n\r\n                const tabs = <HTMLETabElement[]>(<HTMLSlotElement>event.target)\r\n                    .assignedElements()\r\n                    .filter(tab => tab instanceof HTMLETabElement);\r\n                this.tabs = tabs;\r\n                this.#activeIndex = this.tabs.findIndex(tab => tab.active);\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event) => {\r\n            switch (event.key) {\r\n                case \"ArrowUp\":\r\n                    this.focusTabAt((this.activeIndex <= 0) ? this.tabs.length - 1 : this.activeIndex - 1);\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    this.focusTabAt((this.activeIndex >= this.tabs.length - 1) ? 0 : this.activeIndex + 1);\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"Enter\":\r\n                    if (this.activeTab) {\r\n                        this.activateTab(this.activeTab);\r\n                    }\r\n                    break;\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"click\", (event) => {\r\n            const target = event.target;\r\n            if (target instanceof HTMLETabElement) {\r\n                target.active = true;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"e_tabchange\", (event) => {\r\n            const targetIndex = this.tabs.indexOf(event.detail.tab);\r\n            this.#activeIndex = targetIndex;\r\n            this.tabs.forEach((thisTab, thisTabIndex) => {\r\n                if (thisTabIndex !== targetIndex) {\r\n                    thisTab.active = false;\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    focusTabAt(index: number): void {\r\n        const tab = this.tabs[index];\r\n        if (tab) {\r\n            this.#activeIndex = index;\r\n            tab.focus();\r\n        }\r\n    }\r\n\r\n    activateTab(tab: HTMLETabElement) {\r\n        if (this.tabs.includes(tab)) {\r\n            tab.active = true;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabListElement: HTMLETabListElementConstructor = HTMLETabListElementBase;","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEToolBarElement } from \"../toolbars/ToolBar\";\r\n\r\nexport { HTMLEListItemElement };\r\n\r\ninterface HTMLEListItemElementConstructor {\r\n    readonly prototype: HTMLEListItemElement;\r\n    new(): HTMLEListItemElement;\r\n}\r\n\r\ninterface HTMLEListItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly badge: HTMLSpanElement | null;\r\n    readonly toolbar: HTMLEToolBarElement | null;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitem\": HTMLEListItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-listitem\"\r\n})\r\nclass HTMLEListItemElementBase extends HTMLElement implements HTMLEListItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    get badge(): HTMLElement | null {\r\n        return this.#badge;\r\n    }\r\n\r\n    get toolbar(): HTMLEToolBarElement | null {\r\n        return this.#toolbar;\r\n    }\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    #badge: HTMLElement | null;\r\n    #toolbar: HTMLEToolBarElement | null;\r\n    #menu: HTMLEMenuElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#badge = null;\r\n        this.#menu = null;\r\n        this.#toolbar = null;\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this))\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"toolbar\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#toolbar = element instanceof HTMLEToolBarElement ? element : null;\r\n                break;\r\n            }\r\n            case \"badge\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#badge = element instanceof HTMLSpanElement ? element : null;\r\n                break;\r\n            }\r\n            case \"menu\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#menu = element instanceof HTMLEMenuElement ? element : null;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEListItemElement: HTMLEListItemElementConstructor = HTMLEListItemElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEListItemElement } from \"./ListItem\";\r\n\r\nexport { HTMLEListItemGroupElement };\r\n\r\ninterface HTMLEListItemGroupElementConstructor {\r\n    readonly prototype: HTMLEListItemGroupElement;\r\n    new(): HTMLEListItemGroupElement;\r\n}\r\n\r\ninterface HTMLEListItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitemgroup\": HTMLEListItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-listitemgroup\"\r\n})\r\nclass HTMLEListItemGroupElementBase extends HTMLElement implements HTMLEListItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEListItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEListItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEListItemGroupElement: HTMLEListItemGroupElementConstructor = HTMLEListItemGroupElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEListItemElement } from \"./ListItem\";\r\nimport { HTMLEListItemGroupElement } from \"./ListItemGroup\";\r\n\r\nexport { HTMLEListElement };\r\n\r\ninterface HTMLEListElementConstructor {\r\n    readonly prototype: HTMLEListElement;\r\n    new(): HTMLEListElement;\r\n}\r\n\r\ninterface HTMLEListElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEListItemElement>;\r\n    readonly activeItem: HTMLEListItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    droptarget: boolean;\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    selectedItems(): HTMLEListItemElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-list\": HTMLEListElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-list\"\r\n})\r\nclass HTMLEListElementBase extends HTMLElement implements HTMLEListElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEListItemElement>;\r\n\r\n    get dropTargetItem(): HTMLEListItemElement | null {\r\n        return this.items[this.#dropTargetIndex] ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    #dropTargetIndex: number;\r\n    #activeIndex: number;\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        this.#dropTargetIndex = -1;\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.items = this.getElementsByTagName(\"e-listitem\");\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEListItemElement | null {\r\n        return this.items[this.activeIndex] ?? null;\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    selectedItems(): HTMLEListItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.#firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEListItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEListItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLEListItemElement, to: HTMLEListItemElement): HTMLEListItemElement[] {\r\n        const items = Array.from(this.items);\r\n        const fromIndex = items.indexOf(from);\r\n        const toIndex = items.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return items.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        selectedItems.forEach((item_i) => {\r\n            if (item_i.selected) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEListItemElement | null): void {\r\n        const {activeItem, items} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n            item.tabIndex = 0;\r\n            this.#activeIndex = Array.from(items).indexOf(item);\r\n        }\r\n    }\r\n\r\n    #setDropTargetItem(item: HTMLEListItemElement | null): void {\r\n        const {dropTargetItem, items} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n            this.#dropTargetIndex = Array.from(items).indexOf(item);\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n            this.#dropTargetIndex = -1;\r\n        }\r\n    }\r\n\r\n    #firstItem(): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLEListItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLEListItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEListItemElement): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEListItemElement | null>walker.previousNode();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEListItemElement): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const nextItem = <HTMLEListItemElement | null>walker.nextNode();\r\n        return nextItem;\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent) {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n            target.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey} = event;\r\n        const selectedItems = this.selectedItems();\r\n        if (target instanceof HTMLEListItemElement) {\r\n            if (!shiftKey && !ctrlKey) {\r\n                this.#setSelection(target);\r\n            }\r\n            else if (ctrlKey) {\r\n                (!target.selected) ?\r\n                    this.#addToSelection(target) :\r\n                    this.#removeFromSelection(target);\r\n                event.stopPropagation();\r\n            }\r\n            else if (shiftKey) {\r\n                const lastSelectedItem = selectedItems[selectedItems.length - 1];\r\n                if (lastSelectedItem) {\r\n                    const range = this.#getItemsRange(\r\n                        lastSelectedItem,\r\n                        target\r\n                    );\r\n                    if (range) {\r\n                        if (selectedItems.includes(target)) {\r\n                            this.#removeFromSelection(...range);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(...range);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.#setSelection(target);\r\n                }\r\n                event.stopPropagation();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            this.#setDropTargetItem(target);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n    \r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n        const relatedTargetHost =\r\n            relatedTargetRoot instanceof ShadowRoot ?\r\n            relatedTargetRoot.host :\r\n            relatedTarget;\r\n        if (!this.contains(<Node>relatedTargetHost)) {\r\n            this.#setDropTargetItem(null);\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    const walker = this.#walker;\r\n                    const {root} = walker;\r\n                    const firstItem = <HTMLEListItemElement>(\r\n                        walker.currentNode = walker.parentNode() ?? root, walker.firstChild()\r\n                    );\r\n                    const lastItem = <HTMLEListItemElement>(\r\n                        walker.currentNode = walker.parentNode() ?? root, walker.lastChild()\r\n                    );\r\n                    const range = this.#getItemsRange(\r\n                        firstItem,\r\n                        lastItem\r\n                    );\r\n                    if (range) {\r\n                        this.#setSelection(...range);\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                const {activeItem} = this;\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.#setActiveItem(null);\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            this.#setActiveItem(target);\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (!this.#onSelection) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEListItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEListItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEListElement: HTMLEListElementConstructor = HTMLEListElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEDraggableElement };\r\n\r\ninterface HTMLEDraggableElementConstructor {\r\n    readonly prototype: HTMLEDraggableElement;\r\n    new(): HTMLEDraggableElement;\r\n}\r\n\r\ninterface HTMLEDraggableElement extends HTMLElement {\r\n    readonly referee: this | null;\r\n    readonly references: this[];\r\n    selected: boolean;\r\n    dragged: boolean;\r\n    dragovered: boolean;\r\n\r\n    connectedCallback(): void;\r\n    disconnectedCallback(): void;\r\n    getReference(): this;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-draggable\": HTMLEDraggableElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-draggable\"\r\n})\r\nclass HTMLEDraggableElementBase extends HTMLElement implements HTMLEDraggableElement {\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    dragovered!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    dragged!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    #referee: this | null;\r\n    readonly references: this[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            padding: 3px 4px;\r\n                            cursor: pointer;\r\n                            white-space: nowrap;\r\n                            border-radius: 4px;\r\n                            border: 1px solid black;\r\n                            user-select: none;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                            color: lightgray;\r\n                            border-color: lightgray;\r\n                        }\r\n        \r\n                        :host([selected]:active) {\r\n                            cursor: grabbing;\r\n                        }\r\n                        \r\n                        :host([selected]) {\r\n                            cursor: grab;\r\n                            font-weight: bold;\r\n                            outline: 1px auto black;\r\n                        }\r\n        \r\n                        :host([dragovered]) {\r\n                            border-style: dotted;\r\n                        }\r\n                        \r\n                        [part=\"container\"] {\r\n                            display: flex;\r\n                            align-items: center;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"container\"\r\n                },\r\n                children: [\r\n                    element(\"slot\", {\r\n                        children: [\r\n                            \"&nbsp;\"\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.references = [];\r\n        this.#referee = null;\r\n    }\r\n\r\n    get referee(): this | null {\r\n        return this.#referee;\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n        this.draggable = true;\r\n    }\r\n\r\n    disconnectedCallback(): void {\r\n        if (this.referee) {\r\n            const thisRefIndex = this.referee.references.indexOf(this);\r\n            if (thisRefIndex > -1) {\r\n                this.referee.references.splice(thisRefIndex, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    getReference(): this {\r\n        const reference = <this>this.cloneNode(true);\r\n        reference.#referee = this;\r\n        return reference;\r\n    }\r\n}\r\n\r\nvar HTMLEDraggableElement: HTMLEDraggableElementConstructor = HTMLEDraggableElementBase","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\n\r\nexport { HTMLEDragzoneElement };\r\n\r\ninterface HTMLEDragzoneElementConstructor {\r\n    readonly prototype: HTMLEDragzoneElement;\r\n    new(): HTMLEDragzoneElement\r\n}\r\n\r\ninterface HTMLEDragzoneElement extends HTMLElement {\r\n    readonly draggables: HTMLEDraggableElement[];\r\n    readonly selectedDraggables: HTMLEDraggableElement[];\r\n    disabled: boolean;\r\n    selectDraggable(draggable: HTMLEDraggableElement): void;\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void;\r\n    clearSelection(): void;\r\n    connectedCallback(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dragzone\": HTMLEDragzoneElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dragzone\"\r\n})\r\nclass HTMLEDragzoneElementBase extends HTMLElement implements HTMLEDragzoneElement {\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    #draggables: HTMLEDraggableElement[];\r\n    #selectedDraggables: HTMLEDraggableElement[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                        }\r\n        \r\n                        [part=\"container\"] {\r\n                            position: relative;\r\n                            display: flex;\r\n                            flex-direction: column;\r\n                            padding-left: 2px;\r\n                            padding-right: 2px;\r\n                        }\r\n        \r\n                        ::slotted(*) {\r\n                            margin-top: 2px;\r\n                            margin-bottom: 2px;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"container\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n        this.#draggables = [];\r\n        this.#selectedDraggables = [];\r\n    }\r\n\r\n    get draggables(): HTMLEDraggableElement[] {\r\n        return this.#draggables;\r\n    }\r\n\r\n    get selectedDraggables(): HTMLEDraggableElement[] {\r\n        return this.#selectedDraggables;\r\n    }\r\n\r\n    selectDraggable(draggable: HTMLEDraggableElement): void {\r\n        if (!this.selectedDraggables.includes(draggable)) {\r\n            this.selectedDraggables.push(draggable);\r\n        }\r\n        if (!draggable.selected) {\r\n            draggable.selected = true;\r\n        }\r\n    }\r\n\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void {\r\n        const index = this.selectedDraggables.indexOf(draggable);\r\n        if (index > -1) {\r\n            if (draggable.selected) {\r\n                draggable.selected = false;\r\n            }\r\n            this.selectedDraggables.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.selectedDraggables.forEach((draggable) => {\r\n            draggable.selected = false;\r\n        });\r\n        this.#selectedDraggables = [];\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const draggables = slot.assignedElements().filter(\r\n                    elem => elem instanceof HTMLEDraggableElement\r\n                ) as HTMLEDraggableElement[];\r\n                this.#draggables = draggables;\r\n                this.draggables.forEach((draggable) => {\r\n                    draggable.draggable = true;\r\n                });\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Escape\":\r\n                    this.clearSelection();\r\n                    this.focus();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragstart\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                this.selectedDraggables.forEach((thisSelectedDraggable) => {\r\n                    thisSelectedDraggable.dragged = true;\r\n                });\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", this.id);\r\n                }\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event) => {\r\n            const dataTransfer = event.dataTransfer;\r\n            if (dataTransfer) {\r\n                dataTransfer.dropEffect = \"none\";\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"dragend\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                const thisDraggedDraggables = this.draggables.filter(draggable => draggable.dragged);\r\n                thisDraggedDraggables.forEach((thisDraggedDraggable) => {\r\n                    thisDraggedDraggable.dragged = false;\r\n                });\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            if (!this.contains(relatedTarget)) {\r\n                this.clearSelection();\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button == 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        if (!target.selected) {\r\n                            this.clearSelection();\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                    else if (event.ctrlKey) {\r\n                        (!target.selected) ?\r\n                            this.selectDraggable(target) :\r\n                            this.unselectDraggable(target);\r\n                    }\r\n                    else if (event.shiftKey) {\r\n                        if (this.selectedDraggables.length > 0) {\r\n                            const targetIndex = this.draggables.indexOf(target);\r\n                            const firstIndex = this.draggables.indexOf(this.selectedDraggables[0]);\r\n                            const direction = Math.sign(targetIndex - firstIndex);\r\n                            const fromIndex = (direction > 0) ? 0 : this.draggables.length - 1;\r\n                            const toIndex = (direction > 0) ? this.draggables.length - 1 : 0;\r\n                            const startRangeIndex = (direction > 0) ? firstIndex : targetIndex;\r\n                            const endRangeIndex = (direction > 0) ? targetIndex : firstIndex;\r\n                            for (let index = fromIndex; index !== (toIndex + direction); index += direction) {\r\n                                (index >= startRangeIndex && index <= endRangeIndex) ? \r\n                                    this.selectDraggable(this.draggables[index]) :\r\n                                    this.unselectDraggable(this.draggables[index]);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.clearSelection();\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mouseup\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button == 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        this.draggables.forEach((thisDraggable) => {\r\n                            if (thisDraggable !== target) {\r\n                                this.unselectDraggable(thisDraggable);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEDragzoneElement: HTMLEDragzoneElementConstructor = HTMLEDragzoneElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\nimport { HTMLEDragzoneElement } from \"./Dragzone\";\r\n\r\nexport { HTMLEDropzoneElement };\r\nexport { EDataChangeEvent };\r\n\r\ninterface HTMLEDropzoneElementConstructor {\r\n    readonly prototype: HTMLEDropzoneElement;\r\n    new(): HTMLEDropzoneElement;\r\n}\r\n\r\ninterface HTMLEDropzoneElement extends HTMLEDragzoneElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    dragovered: DropzoneDragoveredType | null;\r\n    name: string;\r\n    multiple: boolean;\r\n    placeholder: string;\r\n\r\n    droptest: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => void) | null;\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): void;\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean): void;\r\n\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ntype DropzoneDragoveredType = \"self\" | \"draggable\" | \"appendarea\";\r\n\r\ntype EDataChangeEvent = CustomEvent<{\r\n    action: \"insert\" | \"remove\";\r\n    draggables: HTMLEDraggableElement[];\r\n    position: number;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dropzone\": HTMLEDropzoneElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"e_datachange\": EDataChangeEvent,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dropzone\"\r\n})\r\nclass HTMLEDropzoneElementBase extends HTMLEDragzoneElement implements HTMLEDropzoneElement {\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    dragovered!: DropzoneDragoveredType | null;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    placeholder!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    multiple!: boolean;\r\n\r\n    droptest!: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => boolean) | null;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.shadowRoot!.querySelector(\"style\")!.append(/*css*/`\r\n            :host {\r\n                border: 1px dashed gray;\r\n            }\r\n\r\n            :host(:not([multiple]):not(:empty)) [part=\"appendarea\"],\r\n            :host(:not(:empty):not([dragovered])) [part=\"appendarea\"] {\r\n                display: none !important;\r\n            }\r\n\r\n            [part=\"appendarea\"] {\r\n                display: block;\r\n                margin: 2px;\r\n                border-radius: 4px;\r\n                border: 1px dotted black;\r\n            }\r\n\r\n            :host(:not([dragovered=\"appendarea\"])) [part=\"appendarea\"] {\r\n                border-color: transparent;\r\n            }\r\n            \r\n            [part=\"placeholder\"] {\r\n                display: inline-block;\r\n                color: grey;\r\n                pointer-events: none;\r\n                user-select: none;\r\n            }\r\n        `);\r\n\r\n        this.shadowRoot.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"appendarea\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"placeholder\"\r\n                        },\r\n                        children: [\r\n                            \"&nbsp;\"\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.droptest = null;\r\n    }\r\n    \r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        const appendAreaPart = this.shadowRoot!.querySelector<HTMLDivElement>(\"[part='appendarea']\");\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Delete\":\r\n                    if (this == event.target) {\r\n                        this.removeDraggables();\r\n                    }\r\n                    else {\r\n                        this.removeDraggables(draggable => draggable.selected);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragover\", (event: DragEvent) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragover\", (event) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragenter\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                target.dragovered = true;\r\n                this.dragovered = \"draggable\";\r\n            }\r\n            else {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragenter\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"appendarea\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event: DragEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                if (target == this) {\r\n                    if (appendAreaPart) {\r\n                        this.dragovered = \"self\";\r\n                    }\r\n                    if (!this.draggables.includes(relatedTarget)) {\r\n                        this.dragovered = null;\r\n                    }\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                }\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragleave\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n        \r\n        this.addEventListener(\"drop\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                let dropIndex = this.draggables.length;\r\n                if (target == this) {\r\n                    this.dragovered = null;\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                    dropIndex = this.draggables.indexOf(target);\r\n                }\r\n\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    const dragzoneId = dataTransfer.getData(\"text/plain\");\r\n                    const dragzone = document.getElementById(dragzoneId);\r\n                    if (dragzone instanceof HTMLEDragzoneElement) {\r\n                        const selectedDraggables = dragzone.selectedDraggables;\r\n                        if (selectedDraggables) {\r\n                            selectedDraggables.forEach((selectedDraggable) => {\r\n                                selectedDraggable.dragged = false;\r\n                            });\r\n                            if (dragzone instanceof HTMLEDropzoneElement) {\r\n                                dragzone.removeDraggables((draggable) => selectedDraggables.includes(draggable));\r\n                            }\r\n                            dragzone.clearSelection();\r\n                            this.addDraggables(selectedDraggables, dropIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.dragovered = null;\r\n            event.preventDefault();\r\n        });\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"placeholder\": {\r\n                const placeholderPart = this.shadowRoot.querySelector(\"[part='placeholder']\");\r\n                if (placeholderPart) {\r\n                    placeholderPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): HTMLEDraggableElement[] | null {\r\n        if (draggables.length > 0) {\r\n            let dataTransferSuccess = true;\r\n            if (this.droptest) {\r\n                dataTransferSuccess = this.droptest(this, draggables);\r\n            }\r\n            \r\n            let newDraggables: HTMLEDraggableElement[] = [];\r\n            let insertionPosition = -1;\r\n            if (dataTransferSuccess) {\r\n                if (this.multiple) {\r\n                    draggables.forEach((draggable) => {\r\n                        let newDraggable = draggable.getReference();\r\n                        if (position > -1 && position < this.draggables.length) {\r\n                            this.draggables[position].insertAdjacentElement(\"beforebegin\", newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? position : insertionPosition;\r\n                        }\r\n                        else {\r\n                            this.appendChild(newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? this.draggables.length - 1 : insertionPosition;\r\n                        }\r\n                        newDraggables.push(newDraggable);\r\n                    });\r\n                }\r\n                else {\r\n                    let newDraggable = draggables[0].getReference();\r\n                    if (this.draggables.length > 0) {\r\n                        this.replaceChild(newDraggable, this.draggables[0]);\r\n                    }\r\n                    else {\r\n                        this.appendChild(newDraggable);\r\n                    }\r\n                    newDraggables.push(newDraggable);\r\n                    insertionPosition = 0;\r\n                }\r\n            }\r\n            \r\n            const slot = this.shadowRoot?.querySelector(\"slot\");\r\n            if (slot) {\r\n                slot.addEventListener(\"slotchange\", () => {\r\n                    this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                        bubbles: true,\r\n                        detail: {\r\n                            action: \"insert\",\r\n                            draggables: newDraggables,\r\n                            position: insertionPosition\r\n                        }\r\n                    }));\r\n                }, {once: true});\r\n            }\r\n            return newDraggables;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean = () => true) {\r\n        let toRemove = this.draggables.filter(\r\n            (value: HTMLEDraggableElement, index: number) => {\r\n                return predicate(value, index);\r\n            }\r\n        );\r\n        let atPosition = this.draggables.indexOf(toRemove[0]);\r\n        toRemove.forEach((draggable) => {\r\n            draggable.remove(); \r\n        });\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                    bubbles: true,\r\n                    detail: {\r\n                        action: \"remove\",\r\n                        draggables: toRemove,\r\n                        position: atPosition\r\n                    }\r\n                }));\r\n            }, {once: true});\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEDropzoneElement: HTMLEDropzoneElementConstructor = HTMLEDropzoneElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEDialogElement };\r\n\r\ninterface HTMLEDialogElementConstructor {\r\n    readonly prototype: HTMLEDialogElement;\r\n    new(): HTMLEDialogElement;\r\n}\r\n\r\ntype DialogElementType = \"confirm\" | \"alert\";\r\n\r\ninterface HTMLEDialogElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: DialogElementType;\r\n    open(): void;\r\n    close(): void;\r\n    cancel(): void;\r\n    confirm(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dialog\": HTMLEDialogElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"open\": Event,\r\n        \"close\": Event,\r\n        \"cancel\": Event,\r\n        \"confirm\": Event,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dialog\"\r\n})\r\nclass HTMLEDialogElementBase extends HTMLElement implements HTMLEDialogElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: DialogElementType;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            padding: 6px;\r\n                            background-color: white;\r\n        \r\n                            -webkit-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            -moz-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                        }\r\n        \r\n                        button {\r\n                            cursor: pointer;\r\n                        }\r\n        \r\n                        [part=\"actions\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part=\"header\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part=\"button\"]:not(:first-child) {\r\n                            margin-left: 4px;\r\n                        }\r\n        \r\n                        :host([type=\"confirm\"]) [part=\"ok-button\"] {\r\n                            display: none !important;\r\n                        }\r\n        \r\n                        :host([type=\"alert\"]) [part=\"cancel-button\"],\r\n                        :host([type=\"alert\"]) [part=\"confirm-button\"] {\r\n                            display: none !important;\r\n                        }\r\n                    `\r\n                    ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"header\"\r\n                },\r\n                children: [\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button close-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"x\"\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"hr\", {\r\n                attributes: {\r\n                    part: \"separator\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"body\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"hr\", {\r\n                attributes: {\r\n                    part: \"separator\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"actions\",\r\n                },\r\n                children: [\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button cancel-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"Cancel\"\r\n                        ]\r\n                    }),\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button confirm-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"Confirm\"\r\n                        ]\r\n                    }),\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button ok-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"OK\"\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n        );\r\n    }\r\n\r\n    connectedCallback() {\r\n        this.shadowRoot.addEventListener(\"click\", this);\r\n    }\r\n\r\n    handleEvent(event: Event) {\r\n        const {type, target} = event;\r\n        switch (type) {\r\n            case \"click\":\r\n                const {part} = <Element>target;\r\n                if (part.contains(\"close-button\") || part.contains(\"cancel-button\")) {\r\n                    this.cancel();\r\n                }\r\n                else if (part.contains(\"confirm-button\") || part.contains(\"ok-button\")) {\r\n                    this.confirm();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    open(): void {\r\n        this.dispatchEvent(new CustomEvent(\"open\", {bubbles: true}));\r\n    }\r\n\r\n    close(): void {\r\n        this.dispatchEvent(new CustomEvent(\"close\", {bubbles: true}));\r\n    }\r\n\r\n    cancel(): void {\r\n        this.dispatchEvent(new CustomEvent(\"cancel\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n\r\n    confirm(): void {\r\n        this.dispatchEvent(new CustomEvent(\"confirm\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n}\r\n\r\nvar HTMLEDialogElement: HTMLEDialogElementConstructor = HTMLEDialogElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEHandleElement };\r\n\r\ninterface HTMLEHandleElementConstructor {\r\n    readonly prototype: HTMLEHandleElement;\r\n    new(): HTMLEHandleElement;\r\n}\r\n\r\ninterface HTMLEHandleElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    controls: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-handle\": HTMLEHandleElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"move\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-handle\"\r\n})\r\nclass HTMLEHandleElementBase extends HTMLElement implements HTMLEHandleElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                            \r\n                            width: 24px;\r\n                            height: 12px;\r\n                            \r\n                            background-color: rgb(0, 128, 255);\r\n\r\n                            -webkit-mask-image: url(\"assets/dots.png\");\r\n                            mask-image: url(\"assets/dots.png\");\r\n\r\n                            -webkit-mask-repeat: repeat;\r\n                            mask-repeat: repeat;\r\n                            cursor: move;\r\n                        }\r\n                    `\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"controls\": {\r\n                const {controls} = this;\r\n                this.#target = document.getElementById(controls);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        this.#target = document.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            const target = this.#target;\r\n            if (target !== null) {\r\n                const targetComputedStyle = window.getComputedStyle(target);\r\n                const {movementX, movementY} = event;\r\n                const {width: rectWidth, height: rectHeight} = target.getBoundingClientRect();\r\n                const outerElement = target.parentElement ?? document.body;\r\n                const {\r\n                    left: outerRectLeft, right: outerRectRight,\r\n                    top: outerRectTop, bottom: outerRectBottom\r\n                } = outerElement.getBoundingClientRect();\r\n                const left = parseFloat(targetComputedStyle.getPropertyValue(\"left\"));\r\n                const newLeft = Math.max(outerRectLeft, Math.min(Math.trunc(left + movementX), outerRectRight - rectWidth));\r\n                const top = parseFloat(targetComputedStyle.getPropertyValue(\"top\"));\r\n                const newTop = Math.max(outerRectTop, Math.min(Math.trunc(top + movementY), outerRectBottom - rectHeight));\r\n                target.style.setProperty(\"left\", `${newLeft}px`);\r\n                target.style.setProperty(\"top\", `${newTop}px`);\r\n                this.dispatchEvent(new CustomEvent(\"move\"));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEHandleElement: HTMLEHandleElementConstructor = HTMLEHandleElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEHeightSashElement };\r\n\r\ninterface HTMLEHeightSashElementConstructor {\r\n    readonly prototype: HTMLEHeightSashElement;\r\n    new(): HTMLEHeightSashElement;\r\n}\r\n\r\ninterface HTMLEHeightSashElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    controls: string;\r\n    growdir: \"top\" | \"bottom\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-hsash\": HTMLEHeightSashElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"resize\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-hsash\"\r\n})\r\nclass HTMLEHeightSashElementBase extends HTMLElement implements HTMLEHeightSashElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"top\"})\r\n    growdir!: \"top\" | \"bottom\";\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n    #queuedPointerCallback: FrameRequestCallback | null;\r\n    #pointerMovement: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            width: 100%;\r\n        \r\n                            max-height: 4px;\r\n                            height: 4px;\r\n                            min-height: 4px;\r\n        \r\n                            margin-top: -2px;\r\n                            margin-bottom: -2px;\r\n                            \r\n                            background-color: rgb(135, 206, 250);\r\n                            cursor: ns-resize;\r\n        \r\n                            transition-property: opacity;\r\n                            transition-delay: 0.2s;\r\n                            transition-duration: 0.2s;\r\n                            transition-timing-function: ease-out;\r\n                            opacity: 0;\r\n                        }\r\n        \r\n                        :host(:active),\r\n                        :host(:hover) {\r\n                            opacity: 1;\r\n                        }\r\n                    `\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#queuedPointerCallback = null;\r\n        this.#pointerMovement = 0;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        const rootNode = <ShadowRoot | Document>this.getRootNode();\r\n        this.#target = rootNode.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            if (this.#queuedPointerCallback == null) {\r\n                this.#pointerMovement = event.movementY;\r\n                this.#queuedPointerCallback = this.#pointerMoveCallback.bind(this);\r\n                requestAnimationFrame(this.#queuedPointerCallback);\r\n            }\r\n            else {\r\n                this.#pointerMovement += event.movementY;\r\n            }\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const {growdir} = this;\r\n            const movementY = this.#pointerMovement;\r\n            const height = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            const newHeight = Math.trunc(height + (growdir == \"top\" ? -1 : 1) * movementY);\r\n            target.style.setProperty(\"height\", `${newHeight}px`);\r\n            const computedNewHeight = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            target.style.setProperty(\"height\", `${computedNewHeight}px`);\r\n            this.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        this.#queuedPointerCallback = null;\r\n    }\r\n}\r\n\r\nvar HTMLEHeightSashElement: HTMLEHeightSashElementConstructor = HTMLEHeightSashElementBase;","import { CustomElement, AttributeProperty } from \"../Element\";\r\n\r\nexport { HTMLEImportElement };\r\n\r\ninterface HTMLEImportElementConstructor {\r\n    readonly prototype: HTMLEImportElement;\r\n    new(): HTMLEImportElement;\r\n}\r\n\r\ninterface HTMLEImportElement extends HTMLElement {\r\n    src: string;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-import\": HTMLEImportElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"load\": Event;\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-import\"\r\n})\r\nclass HTMLEImportElementBase extends HTMLElement implements HTMLEImportElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    src!: string;\r\n    \r\n    connectedCallback(): void {\r\n        const {src} = this;\r\n        if (src) {\r\n            this.#importRequest(src);\r\n        }\r\n    }\r\n\r\n    async #importRequest(src: string): Promise<void> {\r\n        this.outerHTML = await fetch(src).then((response: Response) => {\r\n            if (response.ok) {\r\n                return response.text();\r\n            }\r\n            else {\r\n                throw new Error(response.statusText);\r\n            }\r\n        });\r\n        this.dispatchEvent(new Event(\"load\", {bubbles: true}));\r\n    }\r\n}\r\n\r\nvar HTMLEImportElement: HTMLEImportElementConstructor = HTMLEImportElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLELoaderElement };\r\n\r\ninterface HTMLELoaderElementConstructor {\r\n    readonly prototype: HTMLELoaderElement;\r\n    new(): HTMLELoaderElement;\r\n}\r\n\r\ninterface HTMLELoaderElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    type: \"bar\" | \"circle\";\r\n    promise: Promise<any> | null;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-loader\": HTMLELoaderElement,\r\n    }\r\n}\r\n\r\nvar barShadowTemplate: HTMLTemplateElement;\r\nvar circleShadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-loader\"\r\n})\r\nclass HTMLELoaderElementBase extends HTMLElement implements HTMLELoaderElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String, defaultValue: \"bar\", observed: true})\r\n    type!: \"bar\" | \"circle\";\r\n    \r\n    #promise: Promise<any> | null;\r\n\r\n    static {\r\n        const commonStyle = element(\"style\", {\r\n            children: [\r\n                /*css*/`\r\n                    :host {\r\n                        display: inline-block;\r\n                        --default-loader-color: rgb(0, 128, 255);\r\n                        --default-animation-duration: 2s;\r\n                    }\r\n                `\r\n            ]\r\n        });\r\n        const barStyle = commonStyle.cloneNode(true);\r\n        const circleStyle = commonStyle.cloneNode(true);\r\n        barStyle.textContent += /*css*/`\r\n            :host {\r\n                display: block;\r\n            }\r\n\r\n            [part=\"bar\"] {\r\n                position: relative;\r\n                display: block;\r\n                overflow: hidden;\r\n                height: 6px;\r\n                width: 100%;\r\n            }\r\n\r\n            [part=\"slider\"] {\r\n                display: flex;\r\n                position: absolute;\r\n                width: 100%;\r\n                height: 100%;\r\n                animation-name: slider;\r\n            }\r\n\r\n            [part=\"slider\"],\r\n            [part=\"cursor\"] {\r\n                border-radius: 4px;\r\n                will-change: transform;\r\n                animation-duration: var(--animation-duration, var(--default-animation-duration));\r\n                animation-timing-function: linear;\r\n                animation-iteration-count: infinite;\r\n            }\r\n\r\n            [part=\"cursor\"] {\r\n                display: block;\r\n                width: 128px;\r\n                background-color: var(--loader-color, var(--default-loader-color));\r\n                animation-name: cursor;\r\n            }\r\n\r\n            [part=\"bar\"]:after {\r\n                animation-name: shine;\r\n                animation-duration: var(--animation-duration, var(--default-animation-duration));\r\n                animation-iteration-count: infinite;\r\n                animation-fill-mode: forwards;  \r\n                content: \"\";\r\n                position: absolute;\r\n                left: -100%;\r\n                width: 100%;\r\n                height: 100%;\r\n                top: 0;\r\n                opacity: 0;\r\n                \r\n                background: rgba(255, 255, 255, 0.13);\r\n                background: linear-gradient(\r\n                    to right, \r\n                    rgba(255, 255, 255, 0) 0%,\r\n                    rgba(255, 255, 255, 0.1) 10%,\r\n                    rgba(255, 255, 255, 0.9) 80%,\r\n                    rgba(255, 255, 255, 0) 100%\r\n                );\r\n            }\r\n\r\n            @keyframes shine {\r\n                25% {\r\n                    opacity: 1;\r\n                    left: -100%;\r\n                }\r\n                100% {\r\n                    opacity: 0;\r\n                    left: 100%;\r\n                }\r\n            }\r\n\r\n            @keyframes slider {\r\n                0% {\r\n                    transform: translateX(0%);\r\n                }\r\n                100% {\r\n                    transform: translateX(100%);\r\n                }\r\n            }\r\n\r\n            @keyframes cursor {\r\n                0% {\r\n                    transform: translateX(-100%);\r\n                }\r\n                100% {\r\n                    transform: translateX(100%);\r\n                }\r\n            }\r\n        `;\r\n        circleStyle.textContent += /*css*/`\r\n            :host {\r\n                display: inline-block;\r\n            }\r\n\r\n            [part=\"circle\"] {\r\n                width: 12px;\r\n                height: 12px;\r\n                border-top: 4px solid var(--loader-color, var(--default-loader-color));\r\n                border-right: 4px solid var(--loader-color, var(--default-loader-color));\r\n                border-left: 4px solid transparent;\r\n                border-bottom: 4px solid transparent;\r\n                border-radius: 50%;\r\n                animation-duration: 1s;\r\n                animation-name: circle;\r\n                animation-timing-function: linear;\r\n                animation-iteration-count: infinite;\r\n            }\r\n\r\n            @keyframes circle {\r\n                0% {\r\n                    transform: rotate(0);\r\n                }\r\n                100% {\r\n                    transform: rotate(360deg);\r\n                }\r\n            }\r\n        `;\r\n        barShadowTemplate = element(\"template\");\r\n        barShadowTemplate.content.append(\r\n            barStyle,\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"bar\"\r\n                },\r\n                children: [\r\n                    element(\"div\", {\r\n                        attributes: {\r\n                            part: \"slider\"\r\n                        },\r\n                        children: [\r\n                            element(\"div\", {\r\n                                attributes: {\r\n                                    part: \"cursor\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n        circleShadowTemplate = element(\"template\");\r\n        circleShadowTemplate.content.append(\r\n            circleStyle,\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"circle\"\r\n                }\r\n            })\r\n        )\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.#updateTemplate();\r\n        this.#promise = null;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"type\": {\r\n                this.#updateTemplate();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    set promise(promise: Promise<any> | null) {\r\n        if (promise) {\r\n            promise.finally(() => {\r\n                this.remove();\r\n            });\r\n        }\r\n        this.#promise = promise;\r\n    }\r\n\r\n    get promise(): Promise<any> | null {\r\n        return this.#promise;\r\n    }\r\n\r\n    #updateTemplate(): void {\r\n        const {type, shadowRoot} = this;\r\n        switch (type) {\r\n            case \"circle\": {\r\n                shadowRoot.replaceChildren(\r\n                    circleShadowTemplate.content.cloneNode(true)\r\n                );\r\n                break;\r\n            }\r\n            case \"bar\": {\r\n                shadowRoot.replaceChildren(\r\n                    barShadowTemplate.content.cloneNode(true)\r\n                );\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLELoaderElement: HTMLELoaderElementConstructor = HTMLELoaderElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEWidthSashElement };\r\n\r\ninterface HTMLEWidthSashElementConstructor {\r\n    readonly prototype: HTMLEWidthSashElement;\r\n    new(): HTMLEWidthSashElement;\r\n}\r\n\r\ninterface HTMLEWidthSashElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    controls: string;\r\n    growdir: \"right\" | \"left\";\r\n    max: boolean;\r\n    setWidth(width: number): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-wsash\": HTMLEWidthSashElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"resize\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-wsash\"\r\n})\r\nclass HTMLEWidthSashElementBase extends HTMLElement implements HTMLEWidthSashElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"right\"})\r\n    growdir!: \"right\" | \"left\";\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    max!: boolean;\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n    #queuedPointerCallback: FrameRequestCallback | null;\r\n    #pointerMovement: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            width: 4px;\r\n                            \r\n                            background-color: rgb(135, 206, 250);\r\n                            cursor: ew-resize;\r\n        \r\n                            transition-property: opacity;\r\n                            transition-delay: 0.2s;\r\n                            transition-duration: 0.2s;\r\n                            transition-timing-function: ease-out;\r\n                            opacity: 0;\r\n                        }\r\n        \r\n                        :host(:active),\r\n                        :host(:hover) {\r\n                            opacity: 1;\r\n                        }\r\n                    `\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#queuedPointerCallback = null;\r\n        this.#pointerMovement = 0;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    setWidth(width: number): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const {max} = this;\r\n            target.style.setProperty(\"width\", `${width}px`);\r\n            if (max) {\r\n                target.style.setProperty(\"max-width\", `${width}px`);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        const rootNode = <ShadowRoot | Document>this.getRootNode();\r\n        this.#target = rootNode.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            if (this.#queuedPointerCallback == null) {\r\n                this.#queuedPointerCallback = this.#pointerMoveCallback.bind(this);\r\n                requestAnimationFrame(this.#queuedPointerCallback);\r\n            }\r\n            this.#pointerMovement += event.movementX;\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const {growdir} = this;\r\n            const movementX = this.#pointerMovement;\r\n            const width = parseFloat(targetComputedStyle.getPropertyValue(\"width\"));\r\n            const newWidth = width + (growdir == \"right\" ? 1 : -1) * movementX;\r\n            this.setWidth(newWidth);\r\n            this.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        this.#pointerMovement = 0;\r\n        this.#queuedPointerCallback = null;\r\n    }\r\n}\r\n\r\nvar HTMLEWidthSashElement: HTMLEWidthSashElementConstructor = HTMLEWidthSashElementBase;","import { areAttributesMatching, AttributeMutationMixin } from \"../elements/Element\";\r\n\r\nexport { AttributeMixinsObserver };\r\n\r\ninterface AttributeMixinsObserverConstructor {\r\n    readonly prototype: AttributeMixinsObserver;\r\n    new(mixins: AttributeMutationMixin[]): AttributeMixinsObserver;\r\n}\r\n\r\ninterface AttributeMixinsObserver {\r\n    observe(target: Node): void;\r\n    trigger(): void;\r\n    disconnect(): void;\r\n}\r\n\r\nclass AttributeMixinsObserverBase implements AttributeMixinsObserver {\r\n    #observer: MutationObserver;\r\n    #mixins: AttributeMutationMixin[];\r\n\r\n    constructor(mixins: AttributeMutationMixin[]) {\r\n        this.#observer = new MutationObserver(\r\n            this.#callback.bind(this)\r\n        );\r\n        this.#mixins = mixins.slice();\r\n    }\r\n\r\n    trigger(): void {\r\n        this.#callback(this.#observer.takeRecords());\r\n    }\r\n\r\n    observe(target: Node): void  {\r\n        this.#observer.observe(target, {\r\n            childList: true,\r\n            subtree: true,\r\n            attributeFilter: this.#mixins.map((mixin => mixin.attributeName))\r\n        });\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#observer.disconnect();\r\n    }\r\n\r\n    #callback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            mutation.addedNodes.forEach((node: Node) => {\r\n                if (node instanceof Element) {\r\n                    this.#attachMatchingAttributeMixinsInSubtree(node);\r\n                }\r\n            });\r\n            mutation.removedNodes.forEach((node: Node) => {\r\n                if (node instanceof Element) {\r\n                    this.#detachMatchingAttributeMixinsInSubtree(node);\r\n                }\r\n            });\r\n            if (mutation.target instanceof Element) {\r\n                const targetElement = mutation.target;\r\n                const attributeName = mutation.attributeName;\r\n                if (attributeName) {\r\n                    const relatedMixins = this.#mixins.filter(mixin => mixin.attributeName == attributeName);\r\n                    relatedMixins.forEach((mixin) => {\r\n                        if (areAttributesMatching(\r\n                                mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                                attributeName!, targetElement.getAttribute(attributeName!)\r\n                            )) {\r\n                                mixin.attach(targetElement);\r\n                        }\r\n                        else {\r\n                            mixin.detach(targetElement);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    #attachMatchingAttributeMixinsInSubtree(element: Element) {\r\n        Array.from(element.attributes).forEach((attr) => {\r\n            let matchingMixins = this.#mixins.filter(\r\n                mixin => areAttributesMatching(\r\n                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                    attr.name, attr.value\r\n                )\r\n            );\r\n            matchingMixins.forEach((mixin) => {\r\n                mixin.attach(element);\r\n            });\r\n        });\r\n        let childIndex = 0;\r\n        const {children} = element;\r\n        while (childIndex < children.length) {\r\n            const child = children.item(childIndex);\r\n            if (child !== null) {\r\n                this.#attachMatchingAttributeMixinsInSubtree(child);\r\n            }\r\n            childIndex++;\r\n        }\r\n    }\r\n\r\n    #detachMatchingAttributeMixinsInSubtree(element: Element) {\r\n        Array.from(element.attributes).forEach((attr) => {\r\n            let matchingMixins = this.#mixins.filter(\r\n                mixin => areAttributesMatching(\r\n                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                    attr.name, attr.value\r\n                )\r\n            );\r\n            matchingMixins.forEach((mixin) => {\r\n                mixin.detach(element);\r\n            });\r\n        });\r\n        let childIndex = 0;\r\n        const {children} = element;\r\n        while (childIndex < children.length) {\r\n            const child = children.item(childIndex);\r\n            if (child !== null) {\r\n                this.#detachMatchingAttributeMixinsInSubtree(child);\r\n            }\r\n            childIndex++;\r\n        }\r\n    }\r\n}\r\n\r\nvar AttributeMixinsObserver: AttributeMixinsObserverConstructor = AttributeMixinsObserverBase;","import { Widget, element } from \"../../elements/Element\";\r\nimport { WidgetFactory } from \"./Widget\";\r\n\r\nexport { separatorWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"separator\": SeparatorWidgetFactory\r\n    }\r\n}\r\n\r\ninterface SeparatorWidgetFactory extends WidgetFactory {\r\n\r\n}\r\n\r\nvar separatorWidget = new (\r\nWidget({\r\n    name: \"separator\"\r\n})(class SeparatorWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"separator\",\r\n                role: \"separator\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n}));","import { Widget, element } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuItemWidget };\r\n\r\ntype MenuItemType = \"button\" | \"radio\" | \"checkbox\" | \"menu\" | \"submenu\";\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menuitem\": MenuItemWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        type?: MenuItemType;\r\n        checked?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void;\r\n    getMenu(item: HTMLElement): HTMLElement | null;\r\n    getKeyShortcut(item: HTMLElement): string | null;\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    getType(item: HTMLElement): MenuItemType | null;\r\n    setType(item: HTMLElement, type: MenuItemType): void;\r\n    getValue(item: HTMLElement): string;\r\n    setValue(item: HTMLElement, value: string): void;\r\n    getName(item: HTMLElement): string;\r\n    setName(item: HTMLElement, value: string): void;\r\n    getChecked(item: HTMLElement): boolean;\r\n    setChecked(item: HTMLElement, value: boolean): void;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setExpanded(item: HTMLElement, value: boolean): void;\r\n    getExpanded(item: HTMLElement): boolean;\r\n    toggle(item: HTMLElement, force?: boolean): void;\r\n    expand(item: HTMLElement): void;\r\n    collapse(item: HTMLElement): void;\r\n}\r\n\r\nvar menuItemWidget = new(\r\nWidget({\r\n    name: \"menuitem\"\r\n})(\r\nclass MenuItemWidgetFactoryBase extends WidgetFactory implements MenuItemWidgetFactory {\r\n    #iconPartTemplate: HTMLElement;\r\n    #arrowPartTemplate : HTMLElement;\r\n    #keyshortcutsPartTemplate: HTMLElement;\r\n    #template: HTMLElement;\r\n    #types: MenuItemType[];\r\n    #typesFeatures: {\r\n        [key in MenuItemType]: {\r\n            role: string,\r\n            hasIcon: boolean,\r\n            hasArrow: boolean\r\n        }\r\n    };\r\n\r\n    constructor() {\r\n        super();\r\n        this.#iconPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"icon\"\r\n            }\r\n        });\r\n        this.#arrowPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"arrow\"\r\n            }\r\n        });\r\n        this.#keyshortcutsPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"keyshortcuts\"\r\n            }\r\n        });\r\n        this.#template = element(\"button\", {\r\n            attributes: {\r\n                class: \"menuitem\",\r\n                role: \"menuitem\",\r\n                type: \"button\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                this.#iconPartTemplate.cloneNode(true),\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n        this.#types = [\"checkbox\", \"radio\", \"menu\", \"submenu\", \"button\"];\r\n        this.#typesFeatures = {\r\n            button: {\r\n                role: \"menuitem\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            checkbox: {\r\n                role: \"menuitemcheckbox\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            radio: {\r\n                role: \"menuitemradio\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            menu: {\r\n                role: \"menuitem\",\r\n                hasIcon: false,\r\n                hasArrow: false\r\n            },\r\n            submenu: {\r\n                role: \"menuitem\",\r\n                hasIcon: true,\r\n                hasArrow: true\r\n            }\r\n        }\r\n    }\r\n\r\n    create(init?: {\r\n        type: MenuItemType;\r\n        checked?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (init !== void 0) {\r\n            const {keyshortcut, checked, type, label, name, value, disabled} = init;\r\n            if (keyshortcut !== void 0) {\r\n                this.setKeyShortcut(item, keyshortcut);\r\n            }\r\n            if (checked !== void 0) {\r\n                this.setChecked(item, checked);\r\n            }\r\n            if (type !== void 0) {\r\n                this.setType(item, type);\r\n            }\r\n            if (label !== void 0) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (name !== void 0) {\r\n                this.setName(item, name);\r\n            }\r\n            if (value !== void 0) {\r\n                this.setValue(item, value);\r\n            }\r\n            if (disabled !== void 0) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(root: HTMLElement, name: string | null): HTMLElement | null {\r\n        return root;\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void {\r\n        const hasChildMenu = Array.from(slot.childNodes).some(\r\n            childNode_i => childNode_i instanceof HTMLElement && childNode_i.classList.contains(\"menu\")\r\n        );\r\n        item.setAttribute(\"aria-haspopup\", hasChildMenu.toString());\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        const label = item.querySelector<HTMLElement>(\":scope > .label\");\r\n        if (!label) {\r\n            throw new Error(`No label found.`);\r\n        }\r\n        return label;\r\n    }\r\n\r\n    getMenu(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .menu\");\r\n    }\r\n\r\n    getKeyShortcut(item: HTMLElement): string | null {\r\n        return item.getAttribute(\"aria-keyshortcuts\");\r\n    }\r\n\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void {\r\n        let keyshortcutsPart = item.querySelector(\":scope > .keyshortcuts\");\r\n        if (value !== null) {\r\n            item.setAttribute(\"aria-keyshortcuts\", value);\r\n            if (!keyshortcutsPart) {\r\n                const labelPart = this.#label(item);\r\n                const keyshortcutsPartTemplate = this.#keyshortcutsPartTemplate;\r\n                keyshortcutsPart = <HTMLElement>keyshortcutsPartTemplate.cloneNode(true);\r\n                labelPart.after(keyshortcutsPart);\r\n            }\r\n            keyshortcutsPart.textContent = value;\r\n        }\r\n        else {\r\n            item.removeAttribute(\"aria-keyshortcuts\");\r\n            if (keyshortcutsPart) {\r\n                keyshortcutsPart.remove();\r\n            }\r\n        }\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n    \r\n    getType(item: HTMLElement): MenuItemType | null {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`menuitem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setType(item: HTMLElement, type: MenuItemType): void {\r\n        const typesFeatures = this.#typesFeatures;\r\n        const iconPartTemplate = this.#iconPartTemplate;\r\n        const arrowPartTemplate = this.#arrowPartTemplate;\r\n        const {role, hasIcon, hasArrow} = typesFeatures[type];\r\n        const oldType = this.getType(item);\r\n        const {classList} = item;\r\n        if (oldType) {\r\n            classList.remove(`menuitem-${oldType}`);\r\n        }\r\n        classList.add(`menuitem-${type}`);\r\n        item.setAttribute(\"role\", role);\r\n        const labelPart = this.#label(item);\r\n        const iconPart = item.querySelector(\":scope > .icon\");\r\n        const arrowPart = item.querySelector(\":scope > .arrow\");\r\n        if (hasIcon) {\r\n            if (!iconPart && labelPart) {\r\n                labelPart.before(iconPartTemplate.cloneNode(true));\r\n            }\r\n        }\r\n        else {\r\n            if (iconPart) {\r\n                iconPart.remove();\r\n            }\r\n        }\r\n        if (hasArrow) {\r\n            if (!arrowPart && labelPart) {\r\n                labelPart.after(arrowPartTemplate.cloneNode(true));\r\n            }\r\n        }\r\n        else {\r\n            if (arrowPart) {\r\n                arrowPart.remove();\r\n            }\r\n        }\r\n    }\r\n\r\n    getValue(item: HTMLElement): string {\r\n        return item.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"value\", value);\r\n    }\r\n    \r\n    getName(item: HTMLElement): string {\r\n        return item.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getChecked(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-checked\") ?? false.toString());\r\n    }\r\n\r\n    setChecked(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-checked\", value.toString());\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-expanded\", value);\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-expanded\");\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        const expand = force ?? !this.getExpanded(item);\r\n        this.setExpanded(item, expand);\r\n        if (expand) {\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    expand(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (!expanded) {\r\n            this.setExpanded(item, true);\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    collapse(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (expanded) {\r\n            this.setExpanded(item, false);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.setChecked(targetItem, !this.getChecked(targetItem));\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.setChecked(targetItem, true);\r\n                    break;\r\n                }\r\n                case \"menu\":\r\n                case \"submenu\": {\r\n                    this.toggle(targetItem);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(item: HTMLElement): void {\r\n        const menu = this.getMenu(item);\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = item.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const type = this.getType(item);\r\n            if (type == \"menu\") {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const closestMenu = item.closest(\".menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    const overflowX = itemRight + menuWidth - clientWidth;\r\n                    const overflowY = itemTop + menuHeight - clientHeight;\r\n                    menuStyle.setProperty(\"left\", `${\r\n                        overflowX > 0 ?\r\n                        itemLeft - menuWidth - closestMenuLeft :\r\n                        itemRight - closestMenuLeft\r\n                    }px`);\r\n                    const menuComputedStyle = window.getComputedStyle(menu);\r\n                    const {paddingTop, paddingBottom} = menuComputedStyle;\r\n                    const menuPaddingTop = parseFloat(paddingTop);\r\n                    const menuPaddingBottom = parseFloat(paddingBottom);\r\n                    menuStyle.setProperty(\"top\", `${\r\n                        overflowY > 0 ?\r\n                        itemBottom - menuHeight - closestMenuTop + menuPaddingBottom :\r\n                        itemTop - closestMenuTop - menuPaddingTop\r\n                    }px`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}));","import { element, Widget } from \"../../../elements/Element\";\r\nimport { menuItemWidget } from \"./MenuItemWidget\";\r\nimport { WidgetFactory } from \"../Widget\";\r\n\r\nexport { menubarWidget };\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menubar\": MenuBarWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuBarWidgetFactory extends WidgetFactory {\r\n    setExpanded(menubar: HTMLElement, value: boolean): void;\r\n    getExpanded(menubar: HTMLElement): boolean;\r\n}\r\n\r\nvar menubarWidget = new (\r\nWidget({\r\n    name: \"menubar\"\r\n})(class MenubarWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menubar\",\r\n                role: \"menubar\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        )\r\n    }\r\n\r\n    create() {\r\n        const menubar = <HTMLElement>this.#template.cloneNode(true);\r\n        menubar.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        menubar.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        menubar.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        menubar.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        menubar.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        //menubar.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n        return menubar;\r\n    }\r\n\r\n    setExpanded(menubar: HTMLElement, value: boolean): void {\r\n        menubar.toggleAttribute(\"aria-expanded\", value);\r\n    }\r\n\r\n    getExpanded(menubar: HTMLElement): boolean {\r\n        return menubar.hasAttribute(\"aria-expanded\");\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node) {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"menuitem\") && !menuItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"menuitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getActiveItem(menubar: HTMLElement): HTMLElement | null {\r\n        return menubar.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem:focus-within\"\r\n        );\r\n    }\r\n\r\n    #firstItem(menubar: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menubar;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(menubar: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menubar;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n\r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = menuItemWidget.getMenu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #isClosestMenu(menubar: HTMLElement, target: HTMLElement): boolean {\r\n        return target.closest(\":is(.menubar, .menu)\") == menubar;\r\n    }\r\n\r\n    #nearestItem(menubar: HTMLElement, target: HTMLElement): HTMLElement | null {\r\n        return Array.from(menubar.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && this.getExpanded(menubar)) {\r\n            const nearestItem = this.#nearestItem(menubar, target);\r\n            if (nearestItem) {\r\n                menuItemWidget.expand(nearestItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && !target.contains(<Element>relatedTarget)) {\r\n            const nearestItem = this.#nearestItem(menubar, target);\r\n            if (nearestItem) {\r\n                menuItemWidget.collapse(nearestItem);\r\n            }\r\n        }\r\n        const lostFocusWithin = !menubar.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.setExpanded(menubar, false);\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const activeItem = this.#getActiveItem(menubar);\r\n            const expanded = this.getExpanded(menubar);\r\n            const isClosestMenu = this.#isClosestMenu(menubar, target);\r\n            if (isClosestMenu && target !== activeItem && expanded) {\r\n                const menu = menuItemWidget.getMenu(target);\r\n                if (menu) {\r\n                    menu.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    target.focus({preventScroll: true});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(menubar);\r\n        const expanded = this.getExpanded(menubar);\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const isClosestMenu = this.#isClosestMenu(menubar, target);\r\n            if (isClosestMenu) {\r\n                const isExpanded = !expanded;\r\n                this.setExpanded(menubar, isExpanded);\r\n                if (isExpanded) {\r\n                    if (activeItem !== null && !menuItemWidget.getExpanded(activeItem)) {\r\n                        menuItemWidget.expand(activeItem);\r\n                    }\r\n                    const menu = menuItemWidget.getMenu(target);\r\n                    menu?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    menubar.focus({preventScroll: true})\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        let activeItem = this.#getActiveItem(menubar);\r\n        const expanded = this.getExpanded(menubar);\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem(menubar) :\r\n                    this.#firstItem(menubar);\r\n                previousItem?.focus({preventScroll: true});\r\n                activeItem = this.#getActiveItem(menubar);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem(menubar) : \r\n                    this.#lastItem(menubar);\r\n                nextItem?.focus({preventScroll: true});\r\n                activeItem = this.#getActiveItem(menubar);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    this.setExpanded(menubar, !expanded);\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.setExpanded(menubar, false);\r\n                    if (activeItem) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    menubar.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /*#handleTriggerEvent(event: Event): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        const expanded = this.getExpanded(menubar);\r\n        if (expanded && target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const targetType = menuItemWidget.getType(target);\r\n            const activeItem = this.#getActiveItem(menubar);\r\n            if (target !== activeItem && targetType !== \"menu\" && targetType !== \"submenu\") {\r\n                menuItemWidget.collapse(target);\r\n                this.setExpanded(menubar, false);\r\n                menubar.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }*/\r\n}));","import { Widget, element } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\nimport { menuItemWidget } from \"./MenuItemWidget\";\r\n\r\nexport { menuWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menu\": MenuWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        contextual?: boolean;\r\n    }): HTMLElement;\r\n    positionContextual(menu: HTMLElement, x: number, y: number): void;\r\n    getContextual(menu: HTMLElement): boolean;\r\n    setContextual(menu: HTMLElement, value: boolean): void;\r\n    items(menu: HTMLElement): HTMLElement[];\r\n}\r\n\r\nvar mouseOverExpandDelay = 0_200;\r\nvar mouseOutCollapseDelay = 0_400;\r\n\r\nvar menuWidget = new (\r\nWidget({\r\n    name: \"menu\"\r\n})(class MenuWidgetFactoryBase extends WidgetFactory implements MenuWidgetFactory {\r\n\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #toggleTimeouts: WeakMap<HTMLElement, {clear(): void;}>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menu\",\r\n                role: \"menu\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#toggleTimeouts = new WeakMap();\r\n    }\r\n\r\n    create(init?: {\r\n        contextual?: boolean;\r\n    }): HTMLElement {\r\n        const menu = <HTMLElement>this.#template.cloneNode(true);\r\n        menu.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        menu.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        menu.addEventListener(\"mouseout\", this.#handleMouseOutEvent.bind(this));\r\n        menu.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        menu.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        //menu.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n        if (init !== void 0) {\r\n            const {contextual} = init;\r\n            if (contextual !== void 0) {\r\n                this.setContextual(menu, contextual);\r\n            }\r\n        }\r\n        return menu;\r\n    };\r\n\r\n    positionContextual(menu: HTMLElement, x: number, y: number): void {\r\n        const {style} = menu;\r\n        const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        const left = x + scrollX;\r\n        const top = y + scrollY;\r\n        const {clientWidth, clientHeight} = document.body;\r\n        const overflowX = left + menuWidth - clientWidth;\r\n        const overflowY = top + menuHeight - clientHeight;\r\n        style.setProperty(\"left\", `${overflowX > 0 ? left - menuWidth : left}px`);\r\n        style.setProperty(\"top\", `${overflowY > 0 ? top - menuHeight : top}px`);\r\n    }\r\n\r\n    getContextual(menu: HTMLElement): boolean {\r\n        const {classList} = menu;\r\n        return classList.contains(\"menu-contextual\");\r\n    }\r\n\r\n    setContextual(menu: HTMLElement, value: boolean): void {\r\n        const {classList} = menu;\r\n        if (value) {\r\n            classList.add(\"menu-contextual\");\r\n        }\r\n        else {\r\n            classList.remove(\"menu-contextual\");\r\n        }\r\n    }\r\n\r\n    items(menu: HTMLElement): HTMLElement[] {\r\n        return Array.from(menu.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        ));\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"menuitem\") && !menuItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"menuitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #collapseSubmenus(menu: HTMLElement): void {\r\n        menu.querySelectorAll<HTMLElement>(\":is(:scope, :scope > .menuitemgroup) > .menuitem[aria-expanded]\")\r\n            .forEach(menuitem_i => menuItemWidget.collapse(menuitem_i));\r\n    }\r\n\r\n    #isClosestMenu(menu: HTMLElement, target: HTMLElement): boolean {\r\n        return target.closest(\".menu\") == menu;\r\n    }\r\n\r\n    #nearestItem(menu: HTMLElement, target: HTMLElement): HTMLElement | null {\r\n        return Array.from(menu.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #firstItem(menu: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menu;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(menu: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menu;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n\r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = menuItemWidget.getMenu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #getActiveItem(menu: HTMLElement): HTMLElement | null {\r\n        return menu.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem:focus-within\"\r\n        );\r\n    }\r\n\r\n    async #setItemTimeout(item: HTMLElement, delay?: number): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => {\r\n                resolve(void 0);\r\n            }, delay ?? 0);\r\n            this.#toggleTimeouts.set(item, {\r\n                clear: () => {\r\n                    clearTimeout(timeout);\r\n                    reject();\r\n                }\r\n            });\r\n        }).then(() => {\r\n            this.#toggleTimeouts.delete(item);\r\n        });\r\n    }\r\n\r\n    #clearItemTimeout(item: HTMLElement): void {\r\n        const timeout = this.#toggleTimeouts.get(item);\r\n        if (typeof timeout !== \"undefined\") {\r\n            this.#toggleTimeouts.delete(item);\r\n            timeout.clear();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menu = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const contextual = this.getContextual(menu);\r\n            if (contextual) {\r\n                try {\r\n                    menu.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const isClosestMenu = this.#isClosestMenu(menu, target);\r\n                if (isClosestMenu) {\r\n                    const type = menuItemWidget.getType(target);\r\n                    const name = menuItemWidget.getName(target);\r\n                    const value = menuItemWidget.getValue(target);\r\n                    if (type == \"radio\") {\r\n                        menu.querySelectorAll<HTMLElement>(\r\n                            `:is(:scope, :scope > .menuitemgroup) > .menuitem-radio[name=${name}]`\r\n                        )\r\n                        .forEach((radio_i) => {\r\n                            menuItemWidget.setChecked(radio_i, menuItemWidget.getValue(radio_i) == value);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const menu = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !menu.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const contextual = this.getContextual(menu);\r\n            if (contextual) {\r\n                try {\r\n                    menu.remove();\r\n                } catch (error) {\r\n                    void 0;\r\n                }\r\n            }\r\n            else {\r\n                const nearestItem = this.#nearestItem(menu, <HTMLElement>target);\r\n                if (nearestItem) {\r\n                    menuItemWidget.collapse(nearestItem);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const menu = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(menu);\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem(menu) :\r\n                    this.#firstItem(menu);\r\n                previousItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem(menu) :\r\n                    this.#lastItem(menu);\r\n                nextItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(menu);\r\n                firstItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(menu);\r\n                lastItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const type = menuItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            menuItemWidget.expand(activeItem);\r\n                            const firstChildItem = this.#firstChildItem(activeItem);\r\n                            firstChildItem?.focus({preventScroll: true});\r\n                            event.preventDefault();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                    \r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                    ) == menu;\r\n                    if (!isClosestTargetMenu) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                    ) == menu;\r\n                    if (!isClosestTargetMenu) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const type = menuItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            const expanded = menuItemWidget.getExpanded(activeItem);\r\n                            if (!expanded) {\r\n                                menuItemWidget.expand(activeItem);\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                                event.stopPropagation();\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOutEvent(event: MouseEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const menu = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const nearestItem = this.#nearestItem(menu, target);\r\n            if (nearestItem !== null) {\r\n                if (menuItemWidget.getType(nearestItem) == \"submenu\" &&\r\n                    !menuItemWidget.getExpanded(nearestItem)) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                ) == menu;\r\n                if (isTargetClosestMenu) {\r\n                    const activeItem = this.#getActiveItem(menu);\r\n                    if (activeItem !== null &&\r\n                        menuItemWidget.getType(activeItem) == \"submenu\" &&\r\n                        menuItemWidget.getExpanded(activeItem)) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, mouseOutCollapseDelay)\r\n                            .then(() => {\r\n                                menuItemWidget.collapse(activeItem);\r\n                            })\r\n                            .catch(() => void 0);\r\n                    }\r\n                    const {clientX, clientY} = event;\r\n                    const {left, right, top, bottom} = menu.getBoundingClientRect();\r\n                    const intersectsWithMouse = !(\r\n                        left > clientX || right < clientX || top > clientY || bottom < clientY\r\n                    );\r\n                    const containsRelatedTarget = menu.contains(<Node>relatedTarget);\r\n                    if (intersectsWithMouse && containsRelatedTarget) {\r\n                        if (relatedTarget instanceof HTMLElement && relatedTarget.classList.contains(\"menu\") && relatedTarget !== menu) {\r\n                            relatedTarget.focus({preventScroll: true});\r\n                        }\r\n                        else {\r\n                            menu.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    if (!intersectsWithMouse) {\r\n                        menu.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menu = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const nearestItem = this.#nearestItem(menu, target); \r\n            if (nearestItem !== null) {\r\n                if (menuItemWidget.getType(nearestItem) == \"submenu\" &&\r\n                    menuItemWidget.getExpanded(nearestItem)) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                ) == menu;\r\n                if (isTargetClosestMenu) {\r\n                    const activeItem = this.#getActiveItem(menu);\r\n                    if (activeItem !== null) {\r\n                        if (menuItemWidget.getType(activeItem) == \"submenu\" &&\r\n                            menuItemWidget.getExpanded(activeItem) && \r\n                            !activeItem.contains(<HTMLElement>target)) {\r\n                            this.#clearItemTimeout(activeItem);\r\n                            this.#setItemTimeout(activeItem, mouseOutCollapseDelay)\r\n                                .then(() => {\r\n                                    menuItemWidget.collapse(activeItem);\r\n                                })\r\n                                .catch(() => void 0);\r\n                        }\r\n                    }\r\n                    nearestItem.focus({preventScroll: true});\r\n                    if (menuItemWidget.getType(nearestItem) == \"submenu\") {\r\n                        if (!menuItemWidget.getExpanded(nearestItem)) {\r\n                            this.#clearItemTimeout(nearestItem);\r\n                            this.#setItemTimeout(nearestItem, mouseOverExpandDelay)\r\n                                .then(() => {\r\n                                    const activeItem = this.#getActiveItem(menu);\r\n                                    this.#collapseSubmenus(menu);\r\n                                    if (activeItem) {\r\n                                        this.#clearItemTimeout(activeItem);\r\n                                        menuItemWidget.expand(activeItem);\r\n                                        menuItemWidget.getMenu(activeItem)?.focus({preventScroll: true});\r\n                                    }\r\n                                })\r\n                                .catch(() => void 0);\r\n                        }\r\n                        else {\r\n                            menuItemWidget.getMenu(nearestItem)?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}));","import { Widget, element } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menuitemgroup\": MenuItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar menuItemGroupWidget = new (\r\nWidget({\r\n    name: \"menuitemgroup\"\r\n})(class MenuItemGroupWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menuitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n}));","import { element, Widget } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\n\r\nexport { treeitemWidget };\r\n\r\ntype TreeItemType = \"parent\" | \"leaf\";\r\n\r\ninterface TreeItemWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        type: TreeItemType;\r\n        label?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    getGroup(item: HTMLElement): HTMLElement | null;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setExpanded(item: HTMLElement, value: boolean): void;\r\n    getExpanded(item: HTMLElement): boolean;\r\n    getType(item: HTMLElement): TreeItemType | null;\r\n    setType(item: HTMLElement, value: TreeItemType): void;\r\n    toggle(item: HTMLElement, force?: boolean): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"treeitem\": TreeItemWidgetFactory,\r\n    }\r\n}\r\n\r\nvar treeitemWidget = new (\r\nWidget({\r\n    name: \"treeitem\"\r\n})(class TreeItemWidgetFactoryBase extends WidgetFactory implements TreeItemWidgetFactory {\r\n    #arrowPartTemplate : HTMLElement;\r\n    #template: HTMLElement;\r\n    #types: TreeItemType[];\r\n    #typesFeatures: {\r\n        [key in TreeItemType]: {\r\n            role: string,\r\n            hasArrow: boolean\r\n        }\r\n    };\r\n\r\n    constructor() {\r\n        super();\r\n        this.#arrowPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"arrow\"\r\n            }\r\n        });\r\n        this.#template = element(\"li\", {\r\n            attributes: {\r\n                class: \"treeitem\",\r\n                role: \"treeitem\",\r\n                type: \"treeitem-leaf\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"content\"\r\n                    },\r\n                    children: [\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"label\"\r\n                            }\r\n                        }),\r\n                        element(\"slot\")\r\n                    ]\r\n                }),\r\n                element(\"slot\", {\r\n                    attributes: {\r\n                        name: \"group\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n        this.#types = [\"parent\", \"leaf\"];\r\n        this.#typesFeatures = {\r\n            parent: {\r\n                role: \"treeitem\",\r\n                hasArrow: true\r\n            },\r\n            leaf: {\r\n                role: \"treeitem\",\r\n                hasArrow: false\r\n            }\r\n        };\r\n    }\r\n\r\n    getGroup(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .treeitemgroup\");\r\n    }\r\n\r\n    create(init?: {\r\n        type: TreeItemType;\r\n        label?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (init !== void 0) {\r\n            const {type, label, disabled} = init;\r\n            if (type !== void 0) {\r\n                this.setType(item, type);\r\n            }\r\n            if (label !== void 0) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (disabled !== void 0) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        const label = item.querySelector<HTMLElement>(\":scope > .content > .label\");\r\n        if (!label) {\r\n            throw new Error(`No label found.`);\r\n        }\r\n        return label;\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", value.toString());\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    getType(item: HTMLElement): TreeItemType | null {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`treeitem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setType(item: HTMLElement, type: TreeItemType): void {\r\n        const typesFeatures = this.#typesFeatures;\r\n        const arrowPartTemplate = this.#arrowPartTemplate;\r\n        const {role, hasArrow} = typesFeatures[type];\r\n        const oldType = this.getType(item);\r\n        const {classList} = item;\r\n        if (oldType) {\r\n            classList.remove(`treeitem-${oldType}`);\r\n        }\r\n        classList.add(`treeitem-${type}`);\r\n        item.setAttribute(\"role\", role);\r\n        const labelPart = this.#label(item);\r\n        const arrowPart = item.querySelector(\":scope > .arrow\");\r\n        if (hasArrow) {\r\n            if (!arrowPart && labelPart) {\r\n                labelPart.before(arrowPartTemplate.cloneNode(true));\r\n            }\r\n        }\r\n        else {\r\n            if (arrowPart) {\r\n                arrowPart.remove();\r\n            }\r\n        }\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-expanded\", value);\r\n        item.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-expanded\");\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            if (!classList.contains(\"active\")) {\r\n                classList.add(\"active\");\r\n            }\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            if (!classList.contains(\"droptarget\")) {\r\n                classList.add(\"droptarget\");\r\n            }\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-selected\", value);\r\n        item.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-selected\");\r\n    }\r\n\r\n    setLevel(item: HTMLElement, value: number): void {\r\n        item.style.setProperty(\"--level\", value.toString());\r\n    }\r\n\r\n    getLevel(item: HTMLElement): number {\r\n        return parseInt(item.style.getPropertyValue(\"--level\"));\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        this.setExpanded(item, force ?? !this.getExpanded(item));\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget, shiftKey, ctrlKey} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            if (type == \"parent\" && !(shiftKey || ctrlKey)) {\r\n                this.toggle(targetItem);\r\n            }\r\n        }\r\n    }\r\n}));","import { element, Widget } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\nimport { treeitemWidget } from \"./TreeItemWidget\";\r\n\r\nexport { treeWidget };\r\n\r\ninterface TreeWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n    items(tree: HTMLElement): HTMLElement[];\r\n    selectedItems(tree: HTMLElement): HTMLElement[];\r\n    beginSelection(tree: HTMLElement): void;\r\n    endSelection(tree: HTMLElement): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"tree\": TreeWidgetFactory,\r\n    }\r\n}\r\n\r\nvar treeWidget = new (\r\nWidget({\r\n    name: \"tree\"\r\n})(class TreeWidgetFactoryBase extends WidgetFactory implements TreeWidgetFactory {\r\n\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"tree\",\r\n                role: \"tree\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(): HTMLElement {\r\n        const tree = <HTMLElement>this.#template.cloneNode(true);\r\n        tree.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        tree.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this), true);\r\n        tree.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        tree.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        tree.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        tree.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        tree.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        tree.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        tree.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        tree.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        tree.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        tree.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        tree.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        this.#onSelection.set(tree, false);\r\n        this.#hasSelectionChanged.set(tree, false);\r\n        return tree;\r\n    }\r\n\r\n    slot(root: HTMLElement, name: string | null): HTMLElement | null {\r\n        return root;\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void {\r\n        Array.from(slot.childNodes).forEach((item_i, i) => {\r\n            if (item_i instanceof HTMLElement) {\r\n                treeitemWidget.setPosInSet(item_i, i);\r\n                treeitemWidget.setLevel(item_i, 0);\r\n            }\r\n        });\r\n    }\r\n\r\n    #getActiveItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".treeitem.active\");\r\n    }\r\n\r\n    #getDropTargetItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".treeitem.droptarget\");\r\n    }\r\n    \r\n    #getDropTarget(tree: HTMLElement): boolean {\r\n        const {classList} = tree;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    #setDropTarget(tree: HTMLElement, droptarget: boolean): void {\r\n        const {classList} = tree;\r\n        if (droptarget) {\r\n            if (!classList.contains(\"droptarget\")) {\r\n                classList.add(\"droptarget\");\r\n            }\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    items(menu: HTMLElement): HTMLElement[] {\r\n        return Array.from(menu.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .treeitemgroup) > .treeitem\"\r\n        ));\r\n    }\r\n\r\n    selectedItems(tree: HTMLElement): HTMLElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        let item = this.#firstItem(tree);\r\n        while (item !== null) {\r\n            const selected = treeitemWidget.getSelected(item);\r\n            if (selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(tree: HTMLElement): void {\r\n        this.#onSelection.set(tree, true);\r\n    }\r\n\r\n    endSelection(tree: HTMLElement): void {\r\n        this.#onSelection.set(tree, false);\r\n        if (this.#hasSelectionChanged.get(tree)) {\r\n            tree.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(tree, false);\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"treeitem\") && !treeitemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"treeitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleItem = this.#nextItem(from);\r\n            while (nextVisibleItem && nextVisibleItem !== to) {\r\n                range.push(nextVisibleItem);\r\n                nextVisibleItem = this.#nextItem(nextVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleItem = this.#previousItem(from);\r\n            while (previousVisibleItem && previousVisibleItem !== to) {\r\n                range.push(previousVisibleItem);\r\n                previousVisibleItem = this.#previousItem(previousVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        selectedItems.forEach((item_i) => {\r\n            if (!items.includes(item_i)) {\r\n                treeitemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            const selected = treeitemWidget.getSelected(item_i);\r\n            if (tree.contains(item_i) && !selected) {\r\n                treeitemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #addToSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        this.beginSelection(tree);\r\n        items.forEach((item_i) => {\r\n            if (!treeitemWidget.getSelected(item_i)) {\r\n                treeitemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #removeFromSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                treeitemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #clearSelection(tree: HTMLElement): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        selectedItems.forEach((item_i) => {\r\n            treeitemWidget.setSelected(item_i, false);\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #setActiveItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(tree);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            treeitemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = item;\r\n            treeitemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n    \r\n    #setDropTargetItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const dropTargetItem = this.#getDropTargetItem(tree);\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            treeitemWidget.setDropTarget(dropTargetItem, false);\r\n        }\r\n        if (item !== null) {\r\n            this.#setDropTarget(tree, true);\r\n            treeitemWidget.setDropTarget(item, false);\r\n        }\r\n        else {\r\n            this.#setDropTarget(tree, false);\r\n        }\r\n    }\r\n\r\n    #firstItem(tree: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(tree: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousSibling = <HTMLElement | null>walker.previousSibling();\r\n        return previousSibling ?\r\n            this.#deepestItem(previousSibling) :\r\n            <HTMLElement | null>walker.parentNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const type = treeitemWidget.getType(item);\r\n        const expanded = treeitemWidget.getExpanded(item);\r\n        return <HTMLElement | null>(\r\n            type === \"leaf\" ?\r\n                walker.nextNode() :\r\n                expanded ?\r\n                    walker.nextNode() :\r\n                    walker.nextSibling() ??\r\n                    (walker.parentNode(), walker.nextSibling())\r\n        );\r\n    }\r\n\r\n    #deepestItem(item: HTMLElement): HTMLElement {\r\n        const expanded = treeitemWidget.getExpanded(item);\r\n        if (expanded) {\r\n            const walker = this.#walker;\r\n            const lastItem = <HTMLElement>walker.lastChild();\r\n            if (lastItem) {\r\n                return this.#deepestItem(lastItem);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const selectedItems = this.selectedItems(targetTree);\r\n        if (targetItem) {\r\n            if (!shiftKey && !ctrlKey) {\r\n                this.#setSelection(targetTree, targetItem);\r\n            }\r\n            else if (ctrlKey) {\r\n                const selected = treeitemWidget.getSelected(targetItem);\r\n                if (selected) {\r\n                    targetItem.blur();\r\n                }\r\n                (!selected) ?\r\n                    this.#addToSelection(targetTree, targetItem) :\r\n                    this.#removeFromSelection(targetTree, targetItem);\r\n                event.stopPropagation();\r\n            }\r\n            else if (shiftKey) {\r\n                const lastSelectedItem = selectedItems[selectedItems.length - 1];\r\n                if (lastSelectedItem) {\r\n                    const range = this.#getItemsRange(\r\n                        lastSelectedItem,\r\n                        targetItem\r\n                    );\r\n                    if (range) {\r\n                        if (selectedItems.includes(targetItem)) {\r\n                            this.#removeFromSelection(targetTree, ...range);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(targetTree, ...range);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.#setSelection(targetTree, targetItem);\r\n                }\r\n                event.stopPropagation();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            const selectedItems = this.selectedItems(targetTree);\r\n            if (!selectedItems.includes(targetItem)) {\r\n                this.#setSelection(targetTree, targetItem);\r\n            }\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            const type = treeitemWidget.getType(targetItem);\r\n            if (type == \"parent\") {\r\n                treeitemWidget.toggle(targetItem, true);\r\n            }\r\n            this.#setDropTargetItem(targetTree, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!targetTree.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(targetTree, null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"treeitem\")) {\r\n            const selectedItems = this.selectedItems(targetTree);\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(targetTree, target);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetTree);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetTree, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetTree, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(\r\n                                firstItem,\r\n                                this.#deepestItem(lastItem)\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetTree, ...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const expanded = treeitemWidget.getExpanded(activeItem);\r\n                    if (expanded) {\r\n                        treeitemWidget.toggle(activeItem);\r\n                    }\r\n                    else {\r\n                        const walker = this.#walker;\r\n                        const parentItem = <HTMLElement>walker.parentNode();\r\n                        if (parentItem) {\r\n                            parentItem.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const expanded = treeitemWidget.getExpanded(activeItem);\r\n                    if (!expanded) {\r\n                        treeitemWidget.toggle(activeItem);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = treeitemWidget.getSelected(previousItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetTree, previousItem) :\r\n                                this.#addToSelection(targetTree, previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetTree);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = treeitemWidget.getSelected(nextItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetTree, nextItem) :\r\n                                this.#addToSelection(targetTree, nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetTree);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetTree);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetTree);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(targetTree, activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection(targetTree);\r\n                this.#setActiveItem(targetTree, null);\r\n                targetTree.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetTree);\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"treeitem\")) {\r\n            this.#setActiveItem(targetTree, target);\r\n            targetTree.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetTree.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetTree.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {target} = event;\r\n        const targetTree = <HTMLElement>target;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"treeitem\")) {\r\n            if (this.#onSelection.get(targetTree)) {\r\n                this.#hasSelectionChanged.set(target, true);\r\n            }\r\n            else {\r\n                targetTree.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { Widget, element } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\nimport { treeitemWidget } from \"./TreeItemWidget\";\r\n\r\nexport { treeItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"treeitemgroup\": TreeItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface TreeItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar treeItemGroupWidget = new (\r\nWidget({\r\n    name: \"treeitemgroup\"\r\n})(class TreeItemGroupWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"treeitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(root: HTMLElement, name: string | null): HTMLElement | null {\r\n        return root;\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void {\r\n        Array.from(slot.childNodes).forEach((item_i, i) => {\r\n            if (item_i instanceof HTMLElement) {\r\n                treeitemWidget.setPosInSet(item_i, i);\r\n                treeitemWidget.setLevel(item_i, (() => {\r\n                    let level = -1;\r\n                    let closestItem: HTMLElement | null = item_i;\r\n                    while (closestItem !== null && closestItem.matches(\".tree :scope\")) {\r\n                        closestItem = closestItem.parentElement?.closest(\".treeitem\") ?? null;\r\n                        level++;\r\n                    }\r\n                    return level;\r\n                })());\r\n            }\r\n        });\r\n    }\r\n}));","import { HTMLEListElement } from \"../elements/containers/lists/List\";\r\nimport { HTMLEListItemElement } from \"../elements/containers/lists/ListItem\";\r\nimport { EMenu } from \"../elements/containers/menus/Menu\";\r\nimport { EMenuButton } from \"../elements/containers/menus/MenuButton\";\r\nimport { HTMLEMenuItemElement, EMenuItem } from \"../elements/containers/menus/MenuItem\";\r\nimport { EMenuItemGroup } from \"../elements/containers/menus/MenuItemGroup\";\r\nimport { EToolBarItem } from \"../elements/containers/toolbars/ToolBarItem\";\r\nimport { element, reactiveChildElements, reactiveElement, CustomElement, fragment } from \"../elements/Element\";\r\nimport { ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\n\r\nexport { ListModel };\r\nexport { ListItemModel };\r\nexport { ListView };\r\n\r\nclass ListModel extends ModelObject {\r\n    readonly items: ModelList<ListItemModel>;\r\n    sortFunction: ((item_a: ListItemModel, item_b: ListItemModel) => number) | null;\r\n    \r\n    constructor()\r\n    constructor(init: {items: ListItemModel[], sortFunction?: (item_a: ListItemModel, item_b: ListItemModel) => number})\r\n    constructor(init?: {items: ListItemModel[], sortFunction?: (item_a: ListItemModel, item_b: ListItemModel) => number}) {\r\n        super();\r\n        const sortFunction = init?.sortFunction ?? function(item_a: ListItemModel, item_b: ListItemModel) {\r\n            return item_a.label.localeCompare(item_b.label);\r\n        };\r\n        const items = new ModelList(init?.items ?? []);\r\n        items.setParent(this);\r\n        this.sortFunction = sortFunction;\r\n        this.items = items;\r\n    }\r\n\r\n    getItemByIndex(index: number): ListItemModel | null {\r\n        return this.items.get(index);\r\n    }\r\n}\r\n\r\ninterface TreeItem {\r\n    show(): void;\r\n    hide(): void;\r\n    display(): void;\r\n    remove(): void;\r\n}\r\n\r\nclass ListItemList implements TreeItem {\r\n    #items: ListItemModel[];\r\n\r\n    constructor(items: ListItemModel[]) {\r\n        this.#items = items;\r\n    }\r\n\r\n    static from(items: ListItemModel[]): ListItemList {\r\n        return new ListItemList(items);\r\n    }\r\n\r\n    show(): void {\r\n        const items = this.#items;\r\n        items.forEach(item_i => {\r\n            item_i.show();\r\n        });\r\n    }\r\n\r\n    hide(): void {\r\n        const items = this.#items;\r\n        items.forEach(item_i => {\r\n            item_i.hide();\r\n        });\r\n    }\r\n\r\n    display(): void {\r\n        const items = this.#items;\r\n        const result = items.reduce(\r\n            (result, item_i) => `${result} ${item_i.label}`, \"\"\r\n        );\r\n        console.log(result);\r\n    }\r\n\r\n    remove(): void {\r\n        const items = this.#items;\r\n        const removedItemsGroups = items.reduce((map, item_i) => {\r\n            const {parentNode} = item_i;\r\n            if (parentNode instanceof ListModel) {\r\n                const {items} = parentNode;\r\n                const group = map.get(items);\r\n                if (group) group.push(item_i);\r\n                else map.set(items, [item_i]);\r\n            }\r\n            return map;\r\n        }, new Map<ModelList, ListItemModel[]>());\r\n        Array.from(removedItemsGroups.entries()).forEach(\r\n            ([list_i, children_i]) => {\r\n                list_i.beginChanges();\r\n                children_i.forEach((child_i) => {\r\n                    list_i.remove(child_i);\r\n                });\r\n                list_i.endChanges();\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nclass ListItemModel extends ModelObject implements TreeItem {\r\n    readonly label: string;\r\n\r\n    @ModelProperty()\r\n    visibility: boolean;\r\n    \r\n    constructor(init: {label: string}) {\r\n        super();\r\n        const {label} = init;\r\n        this.label = label;\r\n        this.visibility = true;\r\n    }\r\n\r\n    get index(): number {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof ListModel) {\r\n            return parentNode.items.index(this);\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    show(): void {\r\n        this.visibility = true;\r\n    }\r\n\r\n    hide(): void {\r\n        this.visibility = false;\r\n    }\r\n\r\n    display(): void {\r\n        console.log(this.label);\r\n    }\r\n    \r\n    remove(): void {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof ListModel) {\r\n            const {items} = parentNode;\r\n            if (items) {\r\n                items.remove(this);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface ListViewConstructor {\r\n    readonly prototype: ListView;\r\n    new(): ListView;\r\n    new(model: ListModel): ListView;\r\n}\r\n\r\ninterface ListView extends View {\r\n    model: ListModel;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"v-list\": ListView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"v-list\"\r\n})\r\nclass ListViewBase extends View implements ListView {\r\n    readonly model!: ListModel;\r\n    #listElementMap: WeakMap<ListModel, WeakRef<HTMLEListElement>>;\r\n    #listItemElementsMap: WeakMap<ListItemModel, WeakRef<HTMLEListItemElement>>;\r\n\r\n    constructor()\r\n    constructor(model: ListModel)\r\n    constructor(model?: ListModel) {\r\n        super();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.#listElementMap = new WeakMap();\r\n        this.#listItemElementsMap = new WeakMap();\r\n        this.setModel(model ?? new ListModel());\r\n    }\r\n\r\n    getListElement(): HTMLEListElement | null {\r\n        const {model} = this;\r\n        return this.#listElementMap.get(model)?.deref() ?? null;\r\n    }\r\n\r\n    getListItemElement(model: ListItemModel): HTMLEListItemElement | null {\r\n        return this.#listItemElementsMap.get(model)?.deref()  ?? null;\r\n    }\r\n\r\n    selectedItems(): ListItemModel[] {\r\n        const list = this.getListElement();\r\n        if (list) {\r\n            const {model} = this;\r\n            const selectedElements = list.selectedItems();\r\n            return selectedElements.map(\r\n                item_i => <ListItemModel>model.getItemByIndex(\r\n                    item_i.posinset\r\n                )\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    renderShadow(): Node {\r\n        return fragment(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    renderLight(): Node {\r\n        const {model} = this;\r\n        const listElement = element(\"e-list\", {\r\n            attributes: {\r\n                tabindex: 0\r\n            },\r\n            children: [\r\n                element(\"e-listitemgroup\", {\r\n                    children: reactiveChildElements(\r\n                        model.items, item => this.#renderListItem(item)\r\n                    )\r\n                })\r\n            ],\r\n            listeners: {\r\n                contextmenu: <EventListener>this.#handleContextMenuEvent.bind(this),\r\n                keydown: <EventListener>this.#handleKeyDownEvent.bind(this)\r\n            }\r\n        });\r\n        this.#listElementMap.set(model, new WeakRef(listElement));\r\n        return listElement;\r\n    }\r\n\r\n    #renderListItem(item: ListItemModel): Element {\r\n        const listItemElement = element(\"e-listitem\", {\r\n            attributes: {\r\n                tabindex: -1,\r\n                name: item.label,\r\n                draggable: \"true\"\r\n            },\r\n            dataset: {\r\n                index: item.index\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    children: [\r\n                        item.label\r\n                    ]\r\n                }),\r\n                element(\"e-toolbar\", {\r\n                    attributes: {\r\n                        //slot: \"toolbar\",\r\n                        tabindex: 0\r\n                    },\r\n                    children: [\r\n                        element(\"e-toolbaritemgroup\", {\r\n                            children: [\r\n                                EToolBarItem.menubutton({\r\n                                    name: \"settings\",\r\n                                    label: \"Actions\",\r\n                                    menubutton: new EMenuButton({\r\n                                        menu: reactiveElement(\r\n                                            item,\r\n                                            new EMenu({\r\n                                                children: [\r\n                                                    new EMenuItemGroup({\r\n                                                        items: [\r\n                                                            EMenuItem.button({\r\n                                                                name: \"display\",\r\n                                                                label: \"Display\",\r\n                                                                trigger: () => {\r\n                                                                    item.display();\r\n                                                                }\r\n                                                            }),\r\n                                                            EMenuItem.button({\r\n                                                                name: \"delete\",\r\n                                                                label: \"Delete\",\r\n                                                                trigger: () => {\r\n                                                                    item.remove();\r\n                                                                }\r\n                                                            })\r\n                                                        ]\r\n                                                    }),\r\n                                                    new EMenuItemGroup({\r\n                                                        items: [\r\n                                                            EMenuItem.button({\r\n                                                                name: \"visibility\",\r\n                                                                label: \"Visibility\",\r\n                                                                trigger: () => {\r\n                                                                    item.visibility ?\r\n                                                                    item.hide() :\r\n                                                                    item.show();\r\n                                                                }\r\n                                                            })\r\n                                                        ]\r\n                                                    })\r\n                                                ]\r\n                                            }),\r\n                                            [\"visibility\"],\r\n                                            (menu, property, oldValue, newValue) => {\r\n                                                //const {items} = menu;\r\n                                                switch (property) {\r\n                                                    case \"visibility\": {\r\n                                                        /*const item = <HTMLEMenuItemElement>items.namedItem(\"visibility\");\r\n                                                        item.textContent = newValue ? \"Hide\" : \"Show\";\r\n                                                        item.title = newValue ? \"Hide\" : \"Show\";*/\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        )\r\n                                    })\r\n                                }),\r\n                                reactiveElement(\r\n                                    item,\r\n                                    element(\"e-toolbaritem\", {\r\n                                        attributes: {\r\n                                            name: \"visibility\",\r\n                                            type: \"checkbox\",\r\n                                            tabindex: -1\r\n                                        },\r\n                                        listeners: {\r\n                                            trigger: () => {\r\n                                                item.visibility ?\r\n                                                    item.hide() :\r\n                                                    item.show();\r\n                                            }\r\n                                        }\r\n                                    }),\r\n                                    [\"visibility\"],\r\n                                    (toolbaritem, property, oldValue, newValue) => {\r\n                                        toolbaritem.title = newValue ? \"Hide\" : \"Show\";\r\n                                        toolbaritem.checked = newValue;\r\n                                    }\r\n                                )\r\n                            ]\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        });\r\n        this.#listItemElementsMap.set(item, new WeakRef(listItemElement));\r\n        return listItemElement;\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        const {clientX, clientY, currentTarget, target} = event;\r\n        const {model} = this;\r\n        if (currentTarget instanceof HTMLEListElement && target instanceof HTMLEListItemElement) {\r\n            const activeItem = model.getItemByIndex(\r\n                parseInt(target.dataset.index!)\r\n            )!;\r\n            const menu = element(\"e-menu\", {\r\n                attributes: {\r\n                    tabindex: -1,\r\n                    contextual: true\r\n                },\r\n                children: [\r\n                    element(\"e-menuitemgroup\", {\r\n                        attributes: {\r\n                            tabindex: -1\r\n                        },\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                attributes: {\r\n                                    tabindex: -1\r\n                                },\r\n                                children: [\r\n                                    \"Display\"\r\n                                ],\r\n                                listeners: {\r\n                                    trigger: () => {\r\n                                        ListItemList.from(\r\n                                            this.selectedItems()\r\n                                        ).display();\r\n                                    }\r\n                                }\r\n                            }),\r\n                            element(\"e-menuitem\", {\r\n                                attributes: {\r\n                                    tabindex: -1\r\n                                },\r\n                                children: [\r\n                                    \"Delete\"\r\n                                ],\r\n                                listeners: {\r\n                                    trigger: () => {\r\n                                        ListItemList.from(\r\n                                            this.selectedItems()\r\n                                        ).remove();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    }),\r\n                    element(\"e-menuitemgroup\", {\r\n                        attributes: {\r\n                            tabindex: -1\r\n                        },\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                attributes: {\r\n                                    tabindex: -1,\r\n                                    type: \"checkbox\"\r\n                                },\r\n                                children: [\r\n                                    activeItem.visibility ? \"Hide\" : \"Show\"\r\n                                ],\r\n                                listeners: {\r\n                                    trigger: () => {\r\n                                        const selectedItems = ListItemList.from(\r\n                                            this.selectedItems()\r\n                                        );\r\n                                        activeItem.visibility ?\r\n                                            selectedItems.hide() :\r\n                                            selectedItems.show();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ],\r\n                listeners: {\r\n                    close: () => {\r\n                        target.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            });\r\n            target.append(menu);\r\n            menu.positionContextual(clientX, clientY);\r\n            menu.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        if (currentTarget instanceof HTMLEListElement) {\r\n            switch (key) {\r\n                case \"Delete\": {\r\n                    ListItemList.from(\r\n                        this.selectedItems()\r\n                    ).remove();\r\n                    event.preventDefault();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ListView: ListViewConstructor = ListViewBase;","import { HTMLEGridElement } from \"../elements/containers/grid/Grid\";\r\nimport { HTMLEGridCellElement } from \"../elements/containers/grid/GridCell\";\r\nimport { HTMLEGridRowElement } from \"../elements/containers/grid/GridRow\";\r\nimport { element, reactiveChildElements, CustomElement, fragment, AttributeProperty, trimMultilineIndent, reactiveElement } from \"../elements/Element\";\r\nimport { HTMLEWidthSashElement } from \"../elements/utils/WidthSash\";\r\nimport { ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\nimport { HTMLEMenuItemElement } from \"../elements/containers/menus/MenuItem\";\r\nimport { HTMLEMenuItemRadioList } from \"../elements/containers/menus/MenuItemCollection\";\r\n\r\nexport { GridModel };\r\nexport { GridRowModel };\r\nexport { GridColumnModel };\r\nexport { GridView };\r\n\r\nclass GridModel extends ModelObject {\r\n    readonly rows: ModelList<GridRowModel>;\r\n    readonly columns: ModelList<GridColumnModel>;\r\n\r\n    constructor()\r\n    constructor(init: {rows: GridRowModel[], columns: GridColumnModel[]})\r\n    constructor(init?: {rows: GridRowModel[], columns: GridColumnModel[]}) {\r\n        super();\r\n        const rows = new ModelList(init?.rows ?? []);\r\n        rows.setParent(this);\r\n        this.rows = rows;\r\n        const columns = new ModelList(init?.columns ?? []);\r\n        columns.setParent(this);\r\n        this.columns = columns;\r\n    }\r\n\r\n    getColumnByName(name: string): GridColumnModel | null {\r\n        return Array.from(this.columns.values()).find(\r\n            column_i => column_i.name == name\r\n        ) ?? null;\r\n    }\r\n\r\n    sortByColumn(column: GridColumnModel, sortOrder: number) {\r\n        Array.from(this.columns.values()).forEach((column_i) => {\r\n            column_i.sortorder = column_i == column ? sortOrder : void 0;\r\n        });\r\n        this.rows.sort(\r\n            (row_1, row_2) => {\r\n                const cell_1 = <string>column.extract(row_1).toString();\r\n                const cell_2 = <string>column.extract(row_2).toString();\r\n                return sortOrder * cell_1.localeCompare(cell_2);\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\ntype Constructor = {\r\n    new(...args: any): any;\r\n    readonly prototype: any;\r\n}\r\n\r\ntype GridRowFilter = {\r\n    filter: (row: GridRowModel) => boolean;\r\n}\r\n\r\nclass GridColumnModel<T extends Constructor = Constructor> extends ModelObject {\r\n    readonly name: string;\r\n    readonly label: string;\r\n    readonly type: T;\r\n    readonly extract: (row: GridRowModel) => InstanceType<T>;\r\n    readonly filters: (GridRowFilter & {name: string})[];\r\n\r\n    @ModelProperty()\r\n    sortorder: number | undefined;\r\n\r\n    constructor(init: {\r\n        name: string,\r\n        label: string,\r\n        type: T,\r\n        extract: (row: GridRowModel) => InstanceType<T>,\r\n        filters?: (GridRowFilter & {name: string})[]\r\n    }) {\r\n        super();\r\n        const {name, label, type, extract} = init;\r\n        this.name = name;\r\n        this.label = label;\r\n        this.type = type;\r\n        this.extract = extract;\r\n        this.filters = init.filters ?? [];\r\n        this.sortorder = 1;\r\n    }\r\n}\r\n\r\nclass GridRowModel extends ModelObject {\r\n    @ModelProperty()\r\n    name: string;\r\n\r\n    @ModelProperty()\r\n    age: number;\r\n    \r\n    constructor(init: {name: string, age: number}) {\r\n        super();\r\n        const {name, age} = init;\r\n        this.name = name;\r\n        this.age = age;\r\n    }\r\n}\r\n\r\ninterface GridViewConstructor {\r\n    readonly prototype: GridView;\r\n    new(): GridView;\r\n    new(model: GridModel): GridView;\r\n}\r\n\r\ninterface GridView extends View {\r\n    readonly shadowRoot: ShadowRoot;\r\n    model: GridModel;\r\n    resizable: boolean;\r\n    sortable: boolean;\r\n    setColumnDelegate(delegate: (column: GridColumnModel) => string | Node): void;\r\n    setCellDelegate(delegate: (row: GridRowModel, column: GridColumnModel) => string | Node): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"v-grid\": GridView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"v-grid\"\r\n})\r\nclass GridViewBase extends View implements GridView {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly model!: GridModel;\r\n\r\n    #columnDelegate: (column: GridColumnModel) => string | Node;\r\n    #cellDelegate: (row: GridRowModel, column: GridColumnModel) => string | Node;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    resizable!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    sortable!: boolean;\r\n\r\n    #displayFilters: (GridRowFilter & {name: string})[];\r\n    #searchFilter: GridRowFilter | null;\r\n\r\n    #gridRowElementsMap: WeakMap<GridRowModel, WeakRef<HTMLEGridRowElement>>\r\n    \r\n    constructor()\r\n    constructor(model: GridModel)\r\n    constructor(model?: GridModel) {\r\n        super();\r\n        this.#displayFilters = [];\r\n        this.#searchFilter = null;\r\n        this.#gridRowElementsMap = new WeakMap();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.setModel(model ?? new GridModel());\r\n        this.#cellDelegate = (row: GridRowModel, column: GridColumnModel) => {\r\n            return element(\"label\", {\r\n                children: [\r\n                    column.extract(row)\r\n                ]\r\n            });\r\n        };\r\n        this.#columnDelegate = (column: GridColumnModel) => {\r\n            return element(\"label\", {\r\n                children: [\r\n                    column.label\r\n                ]\r\n            });\r\n        };\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"resizable\":\r\n            case \"sortable\": {\r\n                this.refresh();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    get gridElement(): HTMLEGridElement {\r\n        return this.getGridElement()!;\r\n    }\r\n\r\n    setColumnDelegate(delegate: (column: GridColumnModel) => string | Node): void {\r\n        this.#columnDelegate = delegate;\r\n    }\r\n\r\n    setCellDelegate(delegate: (row: GridRowModel, column: GridColumnModel) => string | Node): void {\r\n        this.#cellDelegate = delegate;\r\n    }\r\n\r\n    getGridElement(): HTMLEGridElement | null {\r\n        return this.shadowRoot.querySelector(`:scope > e-grid`);\r\n    }\r\n\r\n    getRowElement(row: GridRowModel): HTMLEGridRowElement | null {\r\n        return this.#gridRowElementsMap.get(row)?.deref() ?? null;\r\n    }\r\n\r\n    getColumnHeaderElement(column: GridColumnModel): HTMLEGridCellElement | null {\r\n        return this.shadowRoot.querySelector(`:scope > e-grid > e-gridhead > e-gridrow > e-gridcell[type=columnheader][name=${column.name}]`);\r\n    }\r\n\r\n    getColumnDataElements(column: GridColumnModel): HTMLEGridCellElement[] {\r\n        return Array.from(this.shadowRoot.querySelectorAll(`:scope > e-grid > e-gridbody > e-gridrow > e-gridcell[headers~=${column.name}]`));\r\n    }\r\n\r\n    renderShadow(): Node {\r\n        const {model} = this;\r\n        return fragment(\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/main.css\"\r\n                }\r\n            }),\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/views/gridview.css\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                children: [\r\n                    element(\"input\", {\r\n                        attributes: {\r\n                            type: \"search\"\r\n                        },\r\n                        listeners: {\r\n                            input: <EventListener>this.#handleSearchInputEvent.bind(this)\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"e-grid\", {\r\n                attributes: {\r\n                    tabindex: 0,\r\n                    selectby: \"row\"\r\n                },\r\n                children: [\r\n                    element(\"e-gridhead\", {\r\n                        children: [\r\n                            element(\"e-gridrow\", {\r\n                                children: reactiveChildElements(\r\n                                    model.columns, column => this.#renderGridColumnHeaderCell(column)\r\n                                )\r\n                            })\r\n                        ]\r\n                    }),\r\n                    element(\"e-gridbody\", {\r\n                        children: reactiveChildElements(\r\n                            model.rows, row => this.#renderGridBodyRow(row)\r\n                        )\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    setSearchFilter(filter: GridRowFilter | null): void {\r\n        this.#searchFilter = filter;\r\n        Array.from(this.model.rows.values()).forEach((row_i) => {\r\n            const rowElement = this.getRowElement(row_i);\r\n            if (rowElement) {\r\n                rowElement.hidden =\r\n                    !this.#displayFilters.some(filter_i => filter_i.filter(row_i))\r\n                    && !(filter?.filter(row_i) ?? true);\r\n            }\r\n        });\r\n        const {gridElement} = this;\r\n        gridElement.beginSelection();\r\n        gridElement.selectedRows().forEach(selectedRow_i => selectedRow_i.selected = false);\r\n        gridElement.endSelection();\r\n    }\r\n\r\n    addDisplayFilter(filter: (GridRowFilter & {name: string;})): void {\r\n        const displayFilters = this.#displayFilters;\r\n        if (!displayFilters.includes(filter)) {\r\n            this.#displayFilters.push(filter);\r\n            Array.from(this.model.rows.values()).forEach((row_i) => {\r\n                const rowElement = this.getRowElement(row_i);\r\n                if (rowElement) {\r\n                    rowElement.hidden = !this.#displayFilters.some(filter_i => filter_i.filter(row_i));\r\n                }\r\n            });\r\n        }\r\n        const {gridElement} = this;\r\n        gridElement.beginSelection();\r\n        gridElement.selectedRows().forEach(selectedRow_i => selectedRow_i.selected = false);\r\n        gridElement.endSelection();\r\n    }\r\n\r\n    removeDisplayFilter(filter: (GridRowFilter & {name: string;})): void {\r\n        const displayFilters = this.#displayFilters;\r\n        const filterIndex = displayFilters.indexOf(filter);\r\n        if (filterIndex > -1) {\r\n            displayFilters.splice(filterIndex, 1);\r\n            Array.from(this.model.rows.values()).forEach((row_i) => {\r\n                const rowElement = this.getRowElement(row_i);\r\n                if (rowElement) {\r\n                    rowElement.hidden = !this.#displayFilters.every(filter_i => filter_i.filter(row_i));\r\n                }\r\n            });\r\n        }\r\n        const {gridElement} = this;\r\n        gridElement.beginSelection();\r\n        gridElement.selectedRows().forEach(selectedRow_i => selectedRow_i.selected = false);\r\n        gridElement.endSelection();\r\n    }\r\n\r\n    #renderGridColumnHeaderCell(column: GridColumnModel): Element {\r\n        const {model} = this;\r\n        const gridColumnElement = reactiveElement(\r\n            column,\r\n            element(\"e-gridcell\", {\r\n                attributes: {\r\n                    tabindex: -1,\r\n                    name: column.name,\r\n                    id: this.resizable ? `${column.name}-columnheader` : void 0,\r\n                    type: \"columnheader\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            class: \"gridcell-content\"\r\n                        },\r\n                        children: (<Node[]>[\r\n                            element(\"label\", {\r\n                                attributes: {\r\n                                    class: \"gridcell-label\"\r\n                                },\r\n                                children: [\r\n                                    column.label\r\n                                ],\r\n                                listeners: {\r\n                                    click: <EventListener>this.#handleColumnLabelClickEvent.bind(this)\r\n                                }\r\n                            }),\r\n                            element(\"e-toolbar\", {\r\n                                attributes: {\r\n                                    tabindex: -1,\r\n                                },\r\n                                children: [\r\n                                    element(\"e-toolbaritem\", {\r\n                                        attributes: {\r\n                                            type: \"menubutton\",\r\n                                            tabindex: -1,\r\n                                        },\r\n                                        children: [\r\n                                            element(\"e-menubutton\",  {\r\n                                                attributes: {\r\n                                                    slot: \"menubutton\",\r\n                                                    tabindex: -1,\r\n                                                },\r\n                                                children: [\r\n                                                    element(\"e-menu\",  {\r\n                                                        attributes: {\r\n                                                            slot: \"menu\",\r\n                                                            tabindex: -1,\r\n                                                        },\r\n                                                        children: [\r\n                                                            element(\"e-menuitem\",  {\r\n                                                                attributes: {\r\n                                                                    type: \"button\",\r\n                                                                    tabindex: -1,\r\n                                                                },\r\n                                                                children: [\r\n                                                                    \"Resize Column\"\r\n                                                                ],\r\n                                                                listeners: {\r\n                                                                    trigger: () => {\r\n                                                                        const columnHeaderElement = this.getColumnHeaderElement(column);\r\n                                                                        if (columnHeaderElement) {\r\n                                                                            columnHeaderElement.style.removeProperty(\"width\");\r\n                                                                            columnHeaderElement.style.removeProperty(\"max-width\");\r\n                                                                            this.getColumnDataElements(column).forEach(\r\n                                                                                cell_i => cell_i.style.maxWidth = \"unset\"\r\n                                                                            );\r\n                                                                        }\r\n                                                                    }\r\n                                                                }\r\n                                                            }),\r\n                                                            element(\"e-menuitem\",  {\r\n                                                                attributes: {\r\n                                                                    type: \"submenu\",\r\n                                                                    tabindex: -1,\r\n                                                                },\r\n                                                                children: [\r\n                                                                    \"Sort\",\r\n                                                                    reactiveElement(\r\n                                                                        column,\r\n                                                                        element(\"e-menu\",  {\r\n                                                                            attributes: {\r\n                                                                                slot: \"menu\",\r\n                                                                                tabindex: -1,\r\n                                                                            },\r\n                                                                            children: [\r\n                                                                                element(\"e-menuitem\",  {\r\n                                                                                    attributes: {\r\n                                                                                        type: \"radio\",\r\n                                                                                        name: \"sort\",\r\n                                                                                        value: \"1\",\r\n                                                                                        tabindex: -1,\r\n                                                                                    },\r\n                                                                                    children: [\r\n                                                                                        \"Ascending\"\r\n                                                                                    ]\r\n                                                                                }),\r\n                                                                                element(\"e-menuitem\",  {\r\n                                                                                    attributes: {\r\n                                                                                        type: \"radio\",\r\n                                                                                        name: \"sort\",\r\n                                                                                        value: \"-1\",\r\n                                                                                        tabindex: -1,\r\n                                                                                    },\r\n                                                                                    children: [\r\n                                                                                        \"Descending\"\r\n                                                                                    ]\r\n                                                                                })\r\n                                                                            ],\r\n                                                                            listeners: {\r\n                                                                                trigger: (event) => {\r\n                                                                                    const {target} = event;\r\n                                                                                    const sortOrder = (<HTMLEMenuItemElement>target).value;\r\n                                                                                    model.sortByColumn(column, parseInt(sortOrder));\r\n                                                                                }\r\n                                                                            }\r\n                                                                        }),\r\n                                                                        [\"sortorder\"],\r\n                                                                        (menu, property, oldValue, newValue) => {\r\n                                                                            menu.querySelectorAll<HTMLEMenuItemElement>(\"e-menuitem[name^=sort]\")\r\n                                                                            .forEach(sortRadioItem_i => {\r\n                                                                                sortRadioItem_i.checked = parseInt(sortRadioItem_i.value) === newValue;\r\n                                                                            });\r\n                                                                        }\r\n                                                                    )\r\n                                                                ]\r\n                                                            }),\r\n                                                            element(\"e-menuitem\",  {\r\n                                                                attributes: {\r\n                                                                    type: \"submenu\",\r\n                                                                    tabindex: -1,\r\n                                                                },\r\n                                                                children: [\r\n                                                                    \"Filter\",\r\n                                                                    element(\"e-menu\",  {\r\n                                                                        attributes: {\r\n                                                                            slot: \"menu\",\r\n                                                                            tabindex: -1,\r\n                                                                        },\r\n                                                                        children: column.filters.map((filter_i, i) =>\r\n                                                                            element(\"e-menuitem\", {\r\n                                                                                attributes: {\r\n                                                                                    tabindex: -1,\r\n                                                                                    type: \"checkbox\",\r\n                                                                                    checked: this.#displayFilters.includes(filter_i)\r\n                                                                                },\r\n                                                                                children: [\r\n                                                                                    filter_i.name\r\n                                                                                ],\r\n                                                                                listeners: {\r\n                                                                                    trigger: (event) => {\r\n                                                                                        const {currentTarget} = event;\r\n                                                                                        if (currentTarget instanceof HTMLEMenuItemElement) {\r\n                                                                                            const {checked} = currentTarget;\r\n                                                                                            if (checked) {\r\n                                                                                                this.addDisplayFilter(filter_i);\r\n                                                                                            }\r\n                                                                                            else {\r\n                                                                                                this.removeDisplayFilter(filter_i);\r\n                                                                                            }\r\n                                                                                        }\r\n                                                                                    }\r\n                                                                                }\r\n                                                                            })\r\n                                                                        )\r\n                                                                    })\r\n                                                                ]\r\n                                                            })\r\n                                                        ]\r\n                                                    })\r\n                                                ]\r\n                                            })\r\n                                        ]\r\n                                    })\r\n                                ]\r\n                            })\r\n                        ]).concat(\r\n                            this.resizable ? [\r\n                                element(\"e-wsash\", {\r\n                                    attributes: {\r\n                                        controls: `${column.name}-columnheader`\r\n                                    },\r\n                                    listeners: {\r\n                                        resize: () => {\r\n                                            this.getColumnDataElements(column).forEach(\r\n                                                cell_i => cell_i.style.removeProperty(\"max-width\")\r\n                                            );\r\n                                        }\r\n                                    }\r\n                                })\r\n                            ] : []\r\n                        )\r\n                    })\r\n                ]\r\n            }),\r\n            [\"sortorder\"],\r\n            (cell, property, oldValue, newValue) => {\r\n                switch (property) {\r\n                    case \"sortorder\":\r\n                        if (typeof newValue !== \"undefined\") {\r\n                            cell.dataset.sortorder = newValue.toString();\r\n                        }\r\n                        else {\r\n                            delete cell.dataset.sortorder;\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        );\r\n        return gridColumnElement;\r\n    }\r\n\r\n    #renderGridBodyRow(row: GridRowModel): Element {\r\n        const {model} = this;\r\n        const gridRowElement = element(\"e-gridrow\", {\r\n            attributes: {\r\n                tabindex: -1\r\n            },\r\n            children: reactiveChildElements(\r\n                model.columns, column => this.#renderGridDataCell(row, column)\r\n            )\r\n        });\r\n        this.#gridRowElementsMap.set(row, new WeakRef(gridRowElement));\r\n        return gridRowElement;\r\n    }\r\n\r\n    #renderGridDataCell(row: GridRowModel, column: GridColumnModel): Element {\r\n        const gridCellElement = element(\"e-gridcell\", {\r\n            attributes: {\r\n                type: \"gridcell\",\r\n                headers: column.name\r\n            },\r\n            children: [\r\n                this.#cellDelegate(row, column)\r\n            ]\r\n        });\r\n        return gridCellElement;\r\n    }\r\n\r\n    #handleSearchInputEvent(event: InputEvent) {\r\n        const {target} = event;\r\n        if (target instanceof HTMLInputElement) {\r\n            const {value} = target;\r\n            this.setSearchFilter(value !== \"\" ? {\r\n                filter: (row) => row.name.toLowerCase().startsWith(value.toLowerCase())\r\n            } : null);\r\n        }\r\n    }\r\n\r\n    #handleColumnLabelClickEvent(event: MouseEvent): void {\r\n        const {currentTarget} = event;\r\n        const {model} = this;\r\n        const {columns} = model;\r\n        if (currentTarget instanceof Element) {\r\n            const targetCell = currentTarget.closest(\"e-gridcell\");\r\n            if (targetCell) {\r\n                const targetColumn = Array.from(columns.values()).find(column_i => column_i.name == targetCell.name);\r\n                if (targetColumn) {\r\n                    const sortorder = typeof targetColumn.sortorder !== \"undefined\" ? -targetColumn.sortorder : 1;\r\n                    model.sortByColumn(targetColumn, sortorder);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar GridView: GridViewConstructor = GridViewBase;","//import { MenuItemGroupWidget, MenuItemWidget, MenuWidget, MenuBarWidget } from \"./src/views/MenuBarWidget\";\r\nimport { TreeItemModel, TreeModel, TreeView } from \"./src/views/TreeView\";\r\n\r\nimport \"./index\";\r\nimport { ListItemModel, ListModel, ListView } from \"./src/views/ListView\";\r\nimport { GridColumnModel, GridModel, GridRowModel, GridView } from \"./src/views/GridView\";\r\nimport { element, fragment, widget } from \"./src/elements/Element\";\r\nimport { treeitemWidget } from \"./src/views/widgets/tree/TreeItemWidget\";\r\nimport { Editor } from \"./src/Editor\";\r\nimport { menuWidget } from \"./index\";\r\n\r\nexport async function main() {\r\n    \r\n    /*const menubar = new MenuBarWidget([\r\n        new MenuItemWidget({\r\n            label: \"File\",\r\n            name: \"file\",\r\n            type: \"menu\",\r\n            menu: new MenuWidget({\r\n                name: \"File\",\r\n                groups: [\r\n                    new MenuItemGroupWidget({\r\n                        name: \"fileActions\",\r\n                        items: [\r\n                            new MenuItemWidget({\r\n                                label: \"Import file...\",\r\n                                name: \"import\"\r\n                            }),\r\n                            new MenuItemWidget({\r\n                                label: \"Export file...\",\r\n                                name: \"export\",\r\n                                hotkey: new HotKey(Key.B, KeyModifier.Control, KeyModifier.Alt)\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        }),\r\n        new MenuItemWidget({\r\n            label: \"Preferences\",\r\n            name: \"preferences\",\r\n            type: \"menu\",\r\n            menu: new MenuWidget({\r\n                name: \"Preferences\",\r\n                groups: [\r\n                    new MenuItemGroupWidget({\r\n                        name: \"fileActions\",\r\n                        items: [\r\n                            new MenuItemWidget({\r\n                                label: \"Advanced User\",\r\n                                name: \"advanced\",\r\n                                type: \"checkbox\",\r\n                                hotkey: new HotKey(Key.A, KeyModifier.Control, KeyModifier.Alt)\r\n                            }),\r\n                            new MenuItemWidget({\r\n                                label: \"Layout\",\r\n                                name: \"layout\",\r\n                                type: \"submenu\",\r\n                                menu: new MenuWidget({\r\n                                    name: \"Layout\",\r\n                                    groups: [\r\n                                        new MenuItemGroupWidget({\r\n                                            name: \"Layout\",\r\n                                            items: [\r\n                                                new MenuItemWidget({\r\n                                                    label: \"Standard\",\r\n                                                    name: \"standard\",\r\n                                                    type: \"radio\"\r\n                                                }),\r\n                                                new MenuItemWidget({\r\n                                                    label: \"Advanced\",\r\n                                                    name: \"advanced\",\r\n                                                    type: \"radio\"\r\n                                                })\r\n                                            ]\r\n                                        })\r\n                                    ]\r\n                                })\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        })\r\n    ]);*/\r\n\r\n    const treeView = new TreeView();\r\n    const treeModel = new TreeModel({\r\n        items: [\r\n            new TreeItemModel({\r\n                label: \"TI 0\",\r\n                type: \"parent\",\r\n                items: [\r\n                    new TreeItemModel({\r\n                        label: \"TI 1A\",\r\n                        type: \"parent\",\r\n                        items: [\r\n                            new TreeItemModel({\r\n                                type: \"leaf\",\r\n                                label: \"TI 1AX\"\r\n                            }),\r\n                        ]\r\n                    }),\r\n                    new TreeItemModel({\r\n                        type: \"parent\",\r\n                        label: \"TI 1B\"\r\n                    })\r\n                ]\r\n            }),\r\n            new TreeItemModel({\r\n                label: \"TI 1\",\r\n                type: \"parent\",\r\n                items: [\r\n                    new TreeItemModel({\r\n                        label: \"TI 1A\",\r\n                        type: \"parent\",\r\n                        items: [\r\n                            new TreeItemModel({\r\n                                type: \"leaf\",\r\n                                label: \"TI 1AX\"\r\n                            }),\r\n                        ]\r\n                    }),\r\n                    new TreeItemModel({\r\n                        type: \"parent\",\r\n                        label: \"TI 1B\"\r\n                    })\r\n                ]\r\n            }),\r\n            new TreeItemModel({\r\n                type: \"leaf\",\r\n                label: \"TI 2\"\r\n            }),\r\n            new TreeItemModel({\r\n                type: \"leaf\",\r\n                label: \"TI 3\"\r\n            })\r\n        ],\r\n        sortFunction: (item_a: TreeItemModel, item_b: TreeItemModel) => {\r\n            const {label: aLabel} = item_a;\r\n            const {label: bLabel} = item_b;\r\n            return bLabel.localeCompare(aLabel);\r\n        }\r\n    });\r\n    treeView.setModel(treeModel);\r\n    document.body.append(treeView);\r\n    \r\n    treeModel.childItems.append(\r\n        new TreeItemModel({\r\n            label: \"yo\",\r\n            type: \"parent\",\r\n            items: [\r\n                new TreeItemModel({\r\n                    type: \"leaf\",\r\n                    label: \"plop\"\r\n                })\r\n            ]\r\n        })\r\n    );\r\n\r\n    const listView = new ListView();\r\n    listView.setModel(\r\n        new ListModel({\r\n            items: [\r\n                new ListItemModel({\r\n                    label: \"Hey\"\r\n                }),\r\n                new ListItemModel({\r\n                    label: \"Yo\"\r\n                })\r\n            ]\r\n        })\r\n    );\r\n\r\n    document.body.append(listView);\r\n\r\n    // Menu actions\r\n    // Toolbar actions\r\n    const gridView = new GridView();\r\n    gridView.resizable = true;\r\n    gridView.sortable = true;\r\n    gridView.setColumnDelegate((column) => {\r\n        return fragment(\r\n            element(\"label\", {\r\n                children: [\r\n                    column.label\r\n                ]\r\n            })/*,\r\n            element(\"e-toolbar\", {\r\n                children: [\r\n                    element(\"e-toolbaritem\", {\r\n                        attributes: {\r\n                            type: \"button\"\r\n                        }\r\n                    })\r\n                ]\r\n            })*/\r\n        );\r\n    });\r\n    gridView.setModel(\r\n        new GridModel({\r\n            columns: [\r\n                new GridColumnModel({\r\n                    name: \"name\",\r\n                    label: \"Name\",\r\n                    type: String,\r\n                    extract: (row) => row.name\r\n                }),\r\n                new GridColumnModel({\r\n                    name: \"age\",\r\n                    label: \"Age\",\r\n                    type: Number,\r\n                    extract: (row) => row.age,\r\n                    filters: [{\r\n                        name: \"Minors\",\r\n                        filter: (row) => row.age < 18\r\n                    },{\r\n                        name: \"Majors\",\r\n                        filter: (row) => row.age >= 18\r\n                    }]\r\n                })\r\n            ],\r\n            rows: [\r\n                new GridRowModel({\r\n                    name: \"Denis\",\r\n                    age: 13\r\n                }),\r\n                new GridRowModel({\r\n                    name: \"Jean-Charles\",\r\n                    age: 32\r\n                }),\r\n                new GridRowModel({\r\n                    name: \"Charles\",\r\n                    age: 25\r\n                })\r\n            ]\r\n        })\r\n    );\r\n\r\n    document.body.append(gridView);\r\n    \r\n    const menuView = widget(\"menubar\", {\r\n        slotted: [\r\n            widget(\"menuitem\", {\r\n                properties: {\r\n                    label: \"MenuItem 0\",\r\n                    name: \"MenuItem 0\",\r\n                    type: \"menu\",\r\n                    disabled: true\r\n                },\r\n                slotted: [\r\n                    widget(\"menu\", {\r\n                        slotted: [\r\n                            widget(\"menuitem\", {\r\n                                properties: {\r\n                                    label: \"MenuItem 1\",\r\n                                    name: \"MenuItem 1\",\r\n                                    type: \"checkbox\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            widget(\"menuitem\", {\r\n                properties: {\r\n                    label: \"MenuItem 1\",\r\n                    name: \"MenuItem 1\",\r\n                    type: \"menu\"\r\n                },\r\n                slotted: [\r\n                    widget(\"menu\", {\r\n                        slotted: [\r\n                            widget(\"menuitemgroup\", {\r\n                                slotted: [\r\n                                    widget(\"menuitem\", {\r\n                                        properties: {\r\n                                            label: \"MenuItem 1\",\r\n                                            type: \"checkbox\",\r\n                                            keyshortcut: \"Ctrl+B\",\r\n                                            disabled: true,\r\n                                            checked: true\r\n                                        }\r\n                                    }),\r\n                                    widget(\"menuitem\", {\r\n                                        properties: {\r\n                                            type: \"button\",\r\n                                            label: \"MenuItem 2\",\r\n                                            keyshortcut: \"Ctrl+A\"\r\n                                        }\r\n                                    })\r\n                                ]\r\n                            }),\r\n                            widget(\"separator\"),\r\n                            widget(\"menuitem\", {\r\n                                properties: {\r\n                                    label: \"Submenu\",\r\n                                    type: \"submenu\"\r\n                                },\r\n                                slotted: [\r\n                                    widget(\"menu\", {\r\n                                        slotted: [\r\n                                            widget(\"menuitem\", {\r\n                                                properties: {\r\n                                                    label: \"MenuItem 1\",\r\n                                                    type: \"radio\",\r\n                                                    name: \"radio\",\r\n                                                    value: \"1\"\r\n                                                }\r\n                                            }),\r\n                                            widget(\"menuitem\", {\r\n                                                properties: {\r\n                                                    type: \"radio\",\r\n                                                    label: \"MenuItem 2\",\r\n                                                    name: \"radio\",\r\n                                                    value: \"2\"\r\n                                                }\r\n                                            })\r\n                                        ]\r\n                                    })\r\n                                ]\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        ]\r\n    })\r\n    document.body.append(menuView);\r\n\r\n\r\n    const tree = widget(\"tree\", {\r\n        slotted: [\r\n            widget(\"treeitem\", {\r\n                properties: {\r\n                    label: \"treeitem 0\",\r\n                    type: \"parent\",\r\n                    //disabled: true\r\n                },\r\n                slotted: [\r\n                    widget(\"treeitemgroup\", {\r\n                        slotted: [\r\n                            widget(\"treeitem\", {\r\n                                properties: {\r\n                                    label: \"treeitem 1\",\r\n                                    type: \"leaf\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ],\r\n                listeners: {\r\n                    contextmenu: <EventListener>((event: MouseEvent) => {\r\n                        const {target, clientX, clientY} = event;\r\n                        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n                        const menu = widget(\"menu\", {\r\n                            properties: {\r\n                                contextual: true\r\n                            },\r\n                            slotted: [\r\n                                widget(\"menuitemgroup\", {\r\n                                    slotted: [\r\n                                        widget(\"menuitem\", {\r\n                                            properties: {\r\n                                                label: \"Display\"\r\n                                            },\r\n                                            listeners: {\r\n                                                click: () => {\r\n                                                    console.log(treeitemWidget.getLabel(targetItem));\r\n                                                }\r\n                                            }\r\n                                        }),\r\n                                        widget(\"menuitem\", {\r\n                                            properties: {\r\n                                                label: \"Delete\"\r\n                                            },\r\n                                            listeners: {\r\n                                                click: () => {\r\n                                                    targetItem.remove();\r\n                                                }\r\n                                            }\r\n                                        })\r\n                                    ]\r\n                                }),\r\n                            ]\r\n                        });\r\n                        targetItem.append(menu);\r\n                        menuWidget.positionContextual(menu, clientX, clientY);\r\n                        menu.focus({preventScroll: true});\r\n                        event.preventDefault();\r\n                    })\r\n                }\r\n            }),\r\n            widget(\"treeitem\", {\r\n                properties: {\r\n                    label: \"treeitem 0\",\r\n                    type: \"parent\",\r\n                    disabled: true\r\n                },\r\n                slotted: [\r\n                    widget(\"treeitemgroup\", {\r\n                        slotted: [\r\n                            widget(\"treeitem\", {\r\n                                properties: {\r\n                                    label: \"treeitem 1\",\r\n                                    type: \"leaf\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            widget(\"treeitem\", {\r\n                properties: {\r\n                    label: \"treeitem 1\",\r\n                    name: \"treeitem 1\",\r\n                    type: \"leaf\"\r\n                }\r\n            })\r\n        ]\r\n    })\r\n    document.body.append(tree);\r\n    \r\n    const editor = new Editor();\r\n    editor.setup();\r\n\r\n    /*editor.registerCheckboxAction(\"toggleAdvancedUser\", (_, newValue) => {\r\n        console.log(`Advanced user is now ${newValue}`);\r\n    }, {hotkey: new HotKey(Key.ARROW_DOWN, KeyModifier.Alt)});\r\n\r\n    editor.registerRadioAction(\"setLayout\", (_, newValue) => {\r\n        editor.setPair(\"layout\", newValue);\r\n    });\r\n\r\n    editor.registerButtonAction(\"execLayout\", () => {\r\n        const layout = editor.getPair(\"layout\");\r\n        console.log(`Layout is ${layout}`);\r\n    }, {hotkey: new HotKey(Key.ARROW_UP, KeyModifier.Alt)});*/\r\n\r\n\r\n    /*editor.registerRadioAction(\"selectTest\", (oldValue, newValue) => {\r\n        console.log(`Test is ${newValue}`);\r\n    }, {value: \"2\", key: \"test\"});\r\n\r\n    document.addEventListener(\"slotchange\", (event) => {\r\n        console.log(event);\r\n    });*/\r\n    \r\n    /*setTimeout(() => {\r\n        const execLayoutToolBarItem = document.querySelector<HTMLEActionElement>(\"e-toolbaritem[name=execLayout]\");\r\n        if (execLayoutToolBarItem) {\r\n            editor.addPairListener(\"layout\", (oldValue, newValue) => {\r\n                if (newValue !== oldValue) {\r\n                    execLayoutToolBarItem.value = newValue;\r\n                }\r\n            });\r\n        }\r\n    }, 100);\r\n\r\n    const button = element(\"button\", {\r\n        properties: {\r\n            textContent: \"Focus\"\r\n        },\r\n        listeners: {\r\n            click: () => {\r\n                const menuitem = document.querySelector<HTMLEMenuItemElement>(\"e-menuitem#hey\");\r\n                if (menuitem) {\r\n                    menuitem.focus();\r\n                }\r\n            }\r\n        }\r\n    });\r\n    document.body.append(button);\r\n    document.body.append(menubar.element);\r\n    \r\n    editor.executeCheckboxAction(\"toggleAdvancedUser\", true);\r\n    editor.setCheckboxActionValue(\"toggleAdvancedUser\", false);*/\r\n\r\n    //editor.setRadioActionValue(\"selectTest\", \"2\");\r\n\r\n    //editor.executeRadioAction(\"setLayout\", \"other\");\r\n}","import { ActionType, HTMLEActionElement } from \"./elements/containers/actions/Action\";\r\nimport { subtreeNodes } from \"./elements/Element\";\r\nimport { HotKey } from \"./Input\";\r\n\r\nexport { Editor };\r\nexport { EditorBase };\r\n\r\ninterface Action {\r\n    name: string;\r\n    type: ActionType;\r\n    trigger: (oldValue: any, newValue: any) => void;\r\n    key?: string;\r\n    value?: string;\r\n    checked?: boolean;\r\n}\r\n\r\ninterface ButtonAction {\r\n    name: string;\r\n    type: \"button\";\r\n    trigger: () => void;\r\n}\r\n\r\ninterface RadioAction {\r\n    name: string;\r\n    type: \"radio\";\r\n    trigger: (oldValue: string, newValue: string) => void;\r\n    value: string;\r\n    key?: string;\r\n}\r\n\r\ninterface CheckboxAction {\r\n    name: string;\r\n    type: \"checkbox\";\r\n    trigger: (oldValue: boolean, newValue: boolean) => void;\r\n    checked: boolean;\r\n    key?: string;\r\n}\r\n\r\ninterface EditorConstructor {\r\n    readonly prototype: Editor;\r\n    new(): Editor;\r\n}\r\n\r\ninterface Editor {\r\n    /*registerWidget(widget: Widget): void;\r\n    unregisterWidget(widget: Widget): void;*/\r\n    \r\n    /*setPair(key: string, value: any): void;\r\n    getPair<T>(key: string): T;\r\n    addPairListener(key: string, listener: (oldValue: any, newValue: any) => void): void;\r\n    removePairListener(key: string, listener: (oldValue: any, newValue: any) => void): void;*/\r\n\r\n    registerButtonAction(\r\n        name: string,\r\n        trigger: () => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n        }): ButtonAction;\r\n    registerRadioAction(\r\n        name: string,\r\n        trigger: (oldValue: string, newValue: string) => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            value?: string;\r\n        }): RadioAction;\r\n    registerCheckboxAction(\r\n        name: string,\r\n        trigger: (oldValue: boolean, newValue: boolean) => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            checked?: boolean;\r\n        }): CheckboxAction;\r\n    \r\n    executeButtonAction(name: string): void;\r\n    executeCheckboxAction(name: string, newChecked: boolean): void;\r\n    executeRadioAction(name: string, newValue: string): void;\r\n\r\n    setCheckboxActionValue(name: string, checked: boolean): void;\r\n    setRadioActionValue(name: string, value: string): void;\r\n\r\n    unregisterActionElement(action: string, element: HTMLEActionElement): void;\r\n    registerActionElement(action: string, element: HTMLEActionElement): void;\r\n    setup(): void;\r\n}\r\n\r\nclass EditorBase implements Editor {\r\n    //private _widgets: Array<Widget>;\r\n    private _actions: Array<Action>;\r\n    private _actionElements: Array<Array<HTMLEActionElement>>;\r\n    private _hotkeys: Array<HotKey>;\r\n    private _pairs: Map<string, any>;\r\n    private _pairsListeners: Map<string, Array<(oldValue: any, newValue: any) => void>>;\r\n\r\n    private _actionsObserver: MutationObserver;\r\n\r\n    constructor() {\r\n        //this._widgets = new Array();\r\n        this._actions = new Array();\r\n        this._actionElements = new Array();\r\n        this._hotkeys = new Array();\r\n        this._pairs = new Map();\r\n        this._pairsListeners = new Map();\r\n\r\n        this._actionsObserver =  new MutationObserver(this._actionsObserverCallback.bind(this));\r\n    }\r\n\r\n    private _actionsObserverCallback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            mutation.addedNodes.forEach((node: Node) => {\r\n                Array.from(subtreeNodes(node)).forEach((node) => {\r\n                    if (node instanceof HTMLEActionElement) {\r\n                        this.registerActionElement(node.name, node);\r\n                    }\r\n                });\r\n            });\r\n            mutation.removedNodes.forEach((node: Node) => {\r\n                Array.from(subtreeNodes(node)).forEach((node) => {\r\n                    if (node instanceof HTMLEActionElement) {\r\n                        this.unregisterActionElement(node.name, node);\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n    \r\n    public setup(): void {\r\n        document.body.addEventListener(\"keydown\", this);\r\n        document.body.addEventListener(\"trigger\", this);\r\n\r\n        this._actionsObserver.observe(document.body, {\r\n            childList: true,\r\n            subtree: true\r\n        });\r\n    }\r\n\r\n    /*public getPair<T>(key: string): T {\r\n        return this._pairs.get(key) as T;\r\n    }\r\n\r\n    public setPair(key: string, value: any): void {\r\n        const oldValue = this._pairs.get(key);\r\n        this._pairs.set(key, value);\r\n        const listeners = this._pairsListeners.get(key);\r\n        if (typeof listeners !== \"undefined\") {\r\n            listeners.forEach((listener_i) => {\r\n                listener_i(oldValue, value);\r\n            });\r\n        }\r\n    }\r\n\r\n    public addPairListener(key: string, listener: (oldValue: any, newValue: any) => void): void {\r\n        const listeners = this._pairsListeners.get(key);\r\n        if (typeof listeners !== \"undefined\") {\r\n            listeners.push(listener);\r\n        }\r\n        else {\r\n            this._pairsListeners.set(key, [listener]);\r\n        }\r\n    }\r\n\r\n    public removePairListener(name: string, listener: (oldValue: any, newValue: any) => void): void {\r\n        const listeners = this._pairsListeners.get(name);\r\n        if (typeof listeners !== \"undefined\") {\r\n            const listenerIndex = listeners.findIndex(listener_i => listener_i == listener);\r\n            if (listenerIndex > -1) {\r\n                listeners.copyWithin(listenerIndex, listenerIndex + 1);\r\n                listeners.length--;\r\n            }\r\n        }\r\n    }*/\r\n    \r\n    /*public registerWidget(widget: Widget): void {\r\n        widget.element.addEventListener(\"focusin\", this);\r\n        this._widgets.push(widget);\r\n    }\r\n\r\n    public unregisterWidget(widget: Widget): void {\r\n        if (this._widgets.includes(widget)) {\r\n            widget.element.removeEventListener(\"focusin\", this);\r\n            this._widgets.splice(this._widgets.indexOf(widget), 1);\r\n        }\r\n    }*/\r\n\r\n    public handleEvent(event: Event): void {\r\n        const target = event.target;\r\n        switch (event.type) {\r\n            case \"keydown\":\r\n                const actionsIndices = this._hotkeys\r\n                    .map((hotkey_i, i) => hotkey_i.test(event as KeyboardEvent) ? i : -1)\r\n                    .filter(i => i > -1);\r\n                actionsIndices.forEach((index) => {\r\n                    const {name, type, value, checked} = this._actions[index];\r\n                    switch (type) {\r\n                        case \"button\":\r\n                            this.executeButtonAction(name);\r\n                            break;\r\n                        case \"checkbox\":\r\n                            this.executeCheckboxAction(name, checked!);\r\n                            break;\r\n                        case \"radio\":\r\n                            this.executeRadioAction(name, value!);\r\n                            break;\r\n                    }\r\n                });\r\n                break;\r\n            case \"trigger\":\r\n                if (target instanceof HTMLEActionElement) {\r\n                    switch (target.type) {\r\n                        case \"button\":\r\n                            this.executeButtonAction(target.name);\r\n                            break;\r\n                        case \"checkbox\":\r\n                            this.executeCheckboxAction(target.name, target.checked);\r\n                            break;\r\n                        case \"radio\":\r\n                        case \"select\":\r\n                            this.executeRadioAction(target.name, target.value);\r\n                            break;\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    \r\n    public registerButtonAction(\r\n        name: string,\r\n        trigger: () => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n        }): ButtonAction {\r\n            return this.registerAction(name, trigger, \"button\", init);\r\n    }\r\n\r\n    public registerRadioAction(\r\n        name: string,\r\n        trigger: (oldValue: string, newValue: string) => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            value?: string;\r\n        }): RadioAction {\r\n            return this.registerAction(name, trigger, \"radio\", init);\r\n    }\r\n\r\n    public registerCheckboxAction(\r\n        name: string,\r\n        trigger: (oldValue: boolean, newValue: boolean) => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            checked?: boolean;\r\n        }): CheckboxAction {\r\n            return this.registerAction(name, trigger, \"checkbox\", init);\r\n    }\r\n\r\n    public registerAction(\r\n        name: string,\r\n        trigger: () => void,\r\n        type: \"button\",\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n        }): ButtonAction;\r\n    public registerAction(\r\n        name: string,\r\n        trigger: (oldValue: boolean, newValue: boolean) => void,\r\n        type: \"checkbox\",\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            checked?: boolean;\r\n        }): CheckboxAction;\r\n    public registerAction(\r\n        name: string,\r\n        trigger: (oldValue: string, newValue: string) => void,\r\n        type: \"radio\",\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            value?: string;\r\n        }): RadioAction;\r\n    public registerAction(\r\n        name: string,\r\n        trigger: (oldValue: any, newValue: any) => void,\r\n        type: ActionType,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            value?: string;\r\n            checked?: boolean;\r\n        }): Action {\r\n        const hotkey = init?.hotkey;\r\n        const key = init?.key;\r\n        const value = init?.value;\r\n        const checked = init?.checked;\r\n        const action: Action = {name, trigger, key, type};\r\n        if (value ?? false) {\r\n            action.value = value;\r\n        }\r\n        if (key !== void 0 && value !== void 0) {\r\n            localStorage.setItem(key, value);\r\n        }\r\n        if (checked ?? false) {\r\n            action.checked = checked;\r\n        }\r\n        const index = this._actions.push(action) - 1;\r\n        if (hotkey) {\r\n            this._hotkeys[index] = hotkey;\r\n        }\r\n        return action;\r\n    }\r\n\r\n    public executeButtonAction(name: string): void {\r\n        this.executeAction(name, \"button\");\r\n    }\r\n\r\n    public executeCheckboxAction(name: string, newChecked: boolean): void {\r\n        this.executeAction(name, \"checkbox\", newChecked);\r\n    }\r\n\r\n    public executeRadioAction(name: string, newValue: string): void {\r\n        this.executeAction(name, \"radio\", newValue);\r\n    }\r\n\r\n    public executeAction(name: string, type: \"button\"): void;\r\n    public executeAction(name: string, type: \"checkbox\", newChecked: boolean): void;\r\n    public executeAction(name: string, type: \"radio\", newValue: string): void;\r\n    public executeAction(name: string, type: ActionType, newValue?: any): void {\r\n        const actionIndex = this._actions.findIndex(\r\n            action_i => action_i.name == name\r\n        );\r\n        if (actionIndex > -1) {\r\n            const action = this._actions[actionIndex];\r\n            let oldValue;\r\n            switch (type) {\r\n                case \"radio\":\r\n                    oldValue = action.value ?? \"\";\r\n                    break;\r\n                case \"checkbox\":\r\n                    oldValue = action.value ?? false;\r\n                    break;\r\n            }\r\n            action.trigger(oldValue, newValue);\r\n            this.setActionValue(name, newValue);\r\n            /*action.value = newValue;\r\n            \r\n            const actionElements = this._actionElements[actionIndex];\r\n            if (actionElements) {\r\n                switch (type) {\r\n                    case \"radio\":\r\n                        actionElements.forEach((actionElement_i) => {\r\n                            if (actionElement_i.type == \"radio\") {\r\n                                actionElement_i.checked = (actionElement_i.value == newValue);\r\n                            }\r\n                            else if (actionElement_i.type == \"select\") {\r\n                                actionElement_i.value = newValue;\r\n                            }\r\n                        });\r\n                        break;\r\n                    case \"checkbox\":\r\n                        actionElements.forEach((actionElement_i) => {\r\n                            actionElement_i.checked = newValue;\r\n                        });\r\n                        break;\r\n                }\r\n            }*/\r\n        }\r\n    }\r\n\r\n    public setCheckboxActionValue(name: string, checked: boolean): void {\r\n        this.setActionValue(name, checked);\r\n    }\r\n\r\n    public setRadioActionValue(name: string, value: string): void {\r\n        this.setActionValue(name, value);\r\n    }\r\n\r\n    public setActionValue(name: string, value?: any): void {\r\n        const actionIndex = this._actions.findIndex(\r\n            action_i => action_i.name == name\r\n        );\r\n        if (actionIndex > -1) {\r\n            const action = this._actions[actionIndex];\r\n            const {type, key} = action;\r\n            action.value = value;\r\n            if (key) {\r\n                localStorage.setItem(key, value);\r\n            }\r\n            \r\n            const actionElements = this._actionElements[actionIndex];\r\n            if (actionElements) {\r\n                switch (type) {\r\n                    case \"radio\":\r\n                        actionElements.forEach((actionElement_i) => {\r\n                            if (actionElement_i.type == \"radio\") {\r\n                                actionElement_i.checked = (actionElement_i.value == value);\r\n                            }\r\n                            else if (actionElement_i.type == \"select\") {\r\n                                actionElement_i.value = value;\r\n                            }\r\n                        });\r\n                        break;\r\n                    case \"checkbox\":\r\n                        actionElements.forEach((actionElement_i) => {\r\n                            actionElement_i.checked = value;\r\n                        });\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public registerActionElement(name: string, element: HTMLEActionElement): void {\r\n        const actionIndex = this._actions.findIndex(action_i => action_i.name == name);\r\n        if (actionIndex > -1) {\r\n            const elements = this._actionElements[actionIndex];\r\n            if (elements) {\r\n                if (!elements.includes(element)) {\r\n                    elements.push(element);\r\n                }\r\n            }\r\n            else {\r\n                this._actionElements[actionIndex] = [element];\r\n            }\r\n\r\n            const action = this._actions[actionIndex];\r\n            const {type, value, checked} = action;\r\n            switch (type) {\r\n                case \"radio\":\r\n                    if (element.type == \"radio\") {\r\n                        element.checked = (element.value == value!);\r\n                    }\r\n                    else if (element.type == \"select\") {\r\n                        element.value = value!;\r\n                    }\r\n                    break;\r\n                case \"checkbox\":\r\n                    element.checked = checked!;\r\n                    break;\r\n            }\r\n\r\n            const hotkey = this._hotkeys[actionIndex];\r\n            if (hotkey) {\r\n                element.hotkey = hotkey.toString();\r\n            }\r\n        }\r\n    }\r\n\r\n    public unregisterActionElement(name: string, element: HTMLEActionElement): void {\r\n        const actionIndex = this._actions.findIndex(action_i => action_i.name == name);\r\n        if (actionIndex > -1) {\r\n            const elements = this._actionElements[actionIndex];\r\n            if (elements) {\r\n                const elementIndex = elements.findIndex(element_i => element_i == element);\r\n                if (elementIndex > -1) {\r\n                    elements.copyWithin(elementIndex, elementIndex + 1);\r\n                    elements.length--;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar Editor: EditorConstructor = EditorBase;"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","slotsMap","WeakMap","slotsObserver","MutationObserver","mutationsList","forEach","mutation","target","type","HTMLElement","slotReferences","slotRef_i","widget","elementRef","slottedCallback","deref","elementsMap","attributesObserver","attributeName","oldValue","attributeChangedCallback","getAttribute","WidgetFactory","constructor","this","create","Proxy","apply","thisArg","argumentsList","element","Reflect","slots","concat","map","slot_i","slot","observe","childList","Array","isArray","push","WeakRef","set","observedAttributes","attributes","attributeFilter","attributeOldValue","Error","root","widgets","Map","ModelChangeRecordBase","init","changeType","propertyName","newValue","removedIndex","removedItems","ModelNodesList","insertedIndex","insertedItems","sortedIndices","PROPERTY_CHANGE","LIST_REMOVE","LIST_INSERT","LIST_SORT","ModelChangeRecord","items","slice","length","item","index","values","ModelEventBase","ModelEventTargetAccessor","setCurrentTarget","event","currentTarget","setTarget","ModelEvent","ModelNodeBase","receiveEvent","callbacks","callback_i","addEventListener","callback","removeEventListener","callbackIndex","findIndex","splice","delete","dispatchEvent","super","setParent","parentNode","isCyclicReference","ancestorNode","TypeError","beginChanges","endChanges","getRecords","property","records","record","ModelNodeRecordsAccessor","triggerChange","node","handleRecord","ModelNode","ModelProperty","ModelObjectPropertiesAccessor","getProperty","setProperty","ModelObjectBase","ModelObject","ModelList","item_i","fromIndex","indexOf","sort","compareFunction","indexedItems","i","indexedItem_a","indexedItem_b","indexedItem_i","prepend","_items","append","insert","Math","abs","remove","clear","removedItem_i","reference","options","properties","propertiesFilter","subtree","filter","record_i","includes","ModelChangeObserver","references","listener","bind","unobserve","disconnect","camelToTrain","str","replace","toLowerCase","AttributeProperty","toString","defaultValue","observed","writable","Boolean","hasAttribute","setAttribute","removeAttribute","val","JSON","parse","stringify","Number","parseFloat","String","CustomElement","elementCtor","name","customElements","define","Widget","subtreeNodes","childNodes","childNodesCount","childIndex","child","fragment","nodes","document","createDocumentFragment","tagName","dataset","children","listeners","createElement","keys","attributeValue","toggleAttribute","elementDataset","datasetEntry_i","from","entries","name_i","listener_i","slotted","NodeList","reactiveElementsMap","reactiveElementsFinalizationRegistry","FinalizationRegistry","heldValue","model","reactiveElement","reactiveElementsMapEntry","reactiveElementsArray","reactiveElementsPropertyObserver","reactiveElement_i","react","register","observerOptions","property_i","Set","reactiveChildElementsMap","reactiveChildElementsFinalizationRegistry","list","reactiveChildElement","reactiveChildrenElementsMapEntry","reactiveChildElementsArray","reactiveChildElementsObserver","range","listLength","reactiveChildElements_i","parentRef","mapping","placeholder","parent","firstChild","childrenCount","removeChild","insertedItemsArray","before","removedCount","createRange","removeEndIndex","setStartBefore","setEndAfter","deleteContents","childrenArray","index_i","reactiveChildElements","reactiveChildElementsMapEntry","areAttributesMatching","referenceAttributeType","referenceAttributeName","referenceAttributeValue","RegExp","test","shadowTemplate","HTMLETreeItemGroupElementBase","shadowRoot","attachShadow","mode","content","cloneNode","assignedElements","element_i","HTMLETreeItemElement","posinset","level","closestItem","matches","parentElement","closest","HTMLETreeItemGroupElement","HTMLETreeItemElementBase","Event","bubbles","labelPart","querySelector","textContent","style","toggle","force","expanded","shiftKey","ctrlKey","slotName","part","HTMLETreeElementBase","createTreeWalker","NodeFilter","SHOW_ELEMENT","getElementsByTagName","selectedItems","walker","currentNode","selected","beginSelection","endSelection","FILTER_ACCEPT","FILTER_SKIP","FILTER_REJECT","to","position","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","nextVisibleItem","DOCUMENT_POSITION_PRECEDING","previousVisibleItem","selectedItem_i","contains","activeItem","active","tabIndex","dropTargetItem","droptarget","lastChild","previousSibling","nextNode","nextSibling","lastItem","blur","stopPropagation","lastSelectedItem","preventDefault","relatedTarget","relatedTargetRoot","getRootNode","relatedTargetHost","ShadowRoot","host","firstItem","parentItem","focus","preventScroll","previousItem","nextItem","click","HTMLETreeElement","ViewBase","setModel","renderLight","renderShadow","refresh","shadow","replaceChildren","light","View","TreeModel","childItems","flattenItems","sortFunction","item_a","item_b","label","localeCompare","flatMap","treeItem_i","of","getItemByUri","uri","itemsCount","uriLength","itemUri","itemUriLength","startsWith","charAt","flattenedInsertedItems","insertedItem_i","flattenedRemovedItems","TreeItemList","show","console","log","hide","display","result","reduce","removedItemsGroups","TreeItemModel","group","list_i","children_i","child_i","childCount","visibility","TreeViewBase","getTreeElement","getTreeItemElement","getDragImageElement","tree","treeElement","tabindex","dragstart","drop","contextmenu","keydown","rel","href","class","hidden","treeItemElement","draggable","trigger","treeitem","badge","toolbar","visibilityItem","namedItem","title","checked","dragImageElement","span","dataTransfer","selectedElements","selectedCount","selectedUris","uri_i","_","uris","some","uri_j","selectedUrisString","join","lastUri","dropEffect","setData","dragImage","setDragImage","targetUri","targetItem","transferedUris","getData","split","transferedItems","targetType","targetParentItem","targetList","newElements","clientX","clientY","menu","contextual","close","body","positionContextual","TreeView","HTMLEActionElementBase","disabled","enable","disable","Key","KeyModifier","MouseButton","HTMLEActionElement","HTMLEGridCellElementBase","HTMLEGridCellElement","HTMLEGridRowGroupElementBase","HTMLEGridRowGroupElement","HTMLEMenuItemElementBase","expand","collapse","menuStyle","top","itemTop","bottom","itemBottom","left","itemLeft","right","itemRight","getBoundingClientRect","width","menuWidth","height","menuHeight","scrollY","scrollX","window","clientWidth","clientHeight","overflowX","overflowY","closestMenu","closestMenuTop","closestMenuLeft","menuComputedStyle","getComputedStyle","paddingTop","paddingBottom","menuPaddingTop","menuPaddingBottom","selector","propertyKey","getter","withinShadowRoot","HTMLEMenuItemElement","EMenuItem","assign","button","checkbox","radio","submenu","HTMLEMenuItemGroupElementBase","toggleTimeouts","HTMLEMenuItemGroupElement","EMenuItemGroup","radios","HTMLEMenuElementBase","x","y","querySelectorAll","find","previousNode","nearestItem","error","async","delay","Promise","resolve","reject","timeout","setTimeout","clearTimeout","then","composedPath","target_i","HTMLEMenuElement","catch","intersectsWithMouse","containsRelatedTarget","radio_i","EMenu","HTMLEGridRowElementBase","cells","HTMLEGridCellCollection","cell_i","HTMLEGridRowElement","HTMLEGridBodyElement","HTMLEGridRowCollection","HTMLEGridBodyElementBase","rows","HTMLEGridElementBase","clearSelection","selectedCells","selectedRows","toIndex","min","max","nextVisibleRow","previousVisibleRow","selectedCell_i","selectedRow_i","row_i","cell","activeCell","closestRow","row","activeRow","cellsWalker","rowsWalker","closestRowCells","cellIndex","previousRow","previousRowCells","nextRow","nextRowCells","selectby","targetCell","targetRow","lastSelectedCell","lastSelectedRow","firstRow","firstCell","lastRow","lastCell","previousCell","nextCell","topCell","bottomCell","HTMLEGridHeadElementBase","HTMLEMenuBarElementBase","Element","isExpanded","HTMLEMenuButtonElementBase","HTMLEMenuButtonElement","EMenuButton","HTMLEOptionElementBase","HTMLEOptionElement","HTMLEOptionGroupElementBase","HTMLEOptionGroupElement","HTMLESelectElementBase","matchingOption","option","selectedIndex","activeOption","descriptionPart","description","selectedOption","valuePart","optionsStyle","selectBottom","selectLeft","previousOption","nextOption","firstOption","lastOption","activeIndex","keyLength","keyCode","charCodeAt","optionsArray","firstMatchIndex","option_i","nextMatchIndex","matchIndex","default","slottedKeyboardListeners","slottedTriggerListeners","HTMLESelectElement","HTMLEToolBarItemElementBase","menubutton","select","selectValue","HTMLEToolBarItemElement","EToolBarItem","HTMLEToolBarItemGroupElementBase","HTMLEToolBarItemGroupElement","HTMLEToolBarItemCollectionBase","HTMLEToolBarItemRadioList","HTMLEToolBarItemRadioListBase","itemName","itemType","HTMLEToolBarItemCollection","HTMLEToolBarElementBase","HTMLEToolBarElement","HTMLETabPanelElementBase","HTMLETabPanelElement","HTMLETabElementBase","connectedCallback","panel","getElementById","controls","CustomEvent","detail","tab","HTMLETabElement","HTMLETabListElementBase","tabs","focusTabAt","activeTab","activateTab","targetIndex","thisTab","thisTabIndex","HTMLEListItemElementBase","HTMLSpanElement","HTMLEListItemElement","HTMLEListItemGroupElementBase","HTMLEListItemGroupElement","HTMLEListElementBase","HTMLEListElement","HTMLEDraggableElementBase","disconnectedCallback","referee","thisRefIndex","getReference","HTMLEDraggableElement","HTMLEDragzoneElementBase","selectDraggable","selectedDraggables","unselectDraggable","draggables","elem","thisSelectedDraggable","dragged","id","thisDraggedDraggable","firstIndex","direction","sign","startRangeIndex","endRangeIndex","thisDraggable","HTMLEDragzoneElement","HTMLEDropzoneElementBase","droptest","appendAreaPart","removeDraggables","dragovered","dropIndex","dragzoneId","dragzone","selectedDraggable","HTMLEDropzoneElement","addDraggables","placeholderPart","dataTransferSuccess","newDraggables","insertionPosition","multiple","newDraggable","insertAdjacentElement","appendChild","replaceChild","action","once","predicate","toRemove","atPosition","HTMLEDialogElementBase","handleEvent","cancel","confirm","open","HTMLEHandleElementBase","pointerId","releasePointerCapture","setPointerCapture","targetComputedStyle","movementX","movementY","rectWidth","rectHeight","outerElement","outerRectLeft","outerRectRight","outerRectTop","outerRectBottom","getPropertyValue","newLeft","trunc","newTop","HTMLEHeightSashElementBase","rootNode","requestAnimationFrame","growdir","newHeight","computedNewHeight","HTMLEImportElementBase","src","outerHTML","fetch","response","ok","text","statusText","barShadowTemplate","circleShadowTemplate","HTMLELoaderElementBase","promise","finally","commonStyle","barStyle","circleStyle","HTMLEWidthSashElementBase","setWidth","newWidth","role","menuItemWidget","hasIcon","hasArrow","keyshortcut","setKeyShortcut","setChecked","setType","setLabel","setName","setValue","setDisabled","hasChildMenu","childNode_i","classList","getMenu","getKeyShortcut","keyshortcutsPart","after","getLabel","getType","types","type_i","typesFeatures","iconPartTemplate","arrowPartTemplate","oldType","add","iconPart","arrowPart","getValue","getName","getChecked","getDisabled","setExpanded","getExpanded","menubar","menuWidget","setContextual","getContextual","menuitem_i","treeitemWidget","leaf","getGroup","setPosInSet","getPosInSet","posInSet","parseInt","setActive","getActive","setDropTarget","getDropTarget","setSelected","getSelected","setLevel","getLevel","targetTree","ListModel","getItemByIndex","ListItemList","ListItemModel","ListViewBase","getListElement","getListItemElement","listElement","listItemElement","toolbaritem","ListView","GridModel","columns","getColumnByName","column_i","sortByColumn","column","sortOrder","sortorder","row_1","row_2","cell_1","extract","cell_2","GridColumnModel","filters","GridRowModel","age","GridViewBase","getGridElement","setColumnDelegate","delegate","setCellDelegate","getRowElement","getColumnHeaderElement","getColumnDataElements","input","setSearchFilter","rowElement","filter_i","gridElement","addDisplayFilter","removeDisplayFilter","displayFilters","filterIndex","every","resizable","columnHeaderElement","removeProperty","maxWidth","sortRadioItem_i","resize","gridRowElement","headers","HTMLInputElement","targetColumn","GridView","main","treeView","treeModel","aLabel","bLabel","listView","gridView","sortable","menuView","_actions","_actionElements","_hotkeys","_pairs","_pairsListeners","_actionsObserver","_actionsObserverCallback","addedNodes","registerActionElement","removedNodes","unregisterActionElement","setup","hotkey_i","executeButtonAction","executeCheckboxAction","executeRadioAction","registerButtonAction","registerAction","registerRadioAction","registerCheckboxAction","hotkey","localStorage","setItem","executeAction","newChecked","actionIndex","action_i","setActionValue","setCheckboxActionValue","setRadioActionValue","actionElements","actionElement_i","elements","elementIndex","copyWithin"],"sourceRoot":""}