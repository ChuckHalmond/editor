{"version":3,"file":"main.js","mappings":"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","sources":["webpack://main/webpack/bootstrap","webpack://main/webpack/runtime/define property getters","webpack://main/webpack/runtime/hasOwnProperty shorthand","webpack://main/webpack/runtime/make namespace object","webpack://main/./src/models/Model.ts","webpack://main/./src/elements/Snippets.ts","webpack://main/./src/elements/Element.ts","webpack://main/./src/elements/containers/menus/MenuItem.ts","webpack://main/./src/views/View.ts","webpack://main/./src/views/GridView.ts","webpack://main/./src/views/MenuView.ts","webpack://main/./src/views/TreeView.ts","webpack://main/./TreeMain.ts","webpack://main/./src/Input.ts","webpack://main/./src/elements/containers/actions/Action.ts","webpack://main/./src/elements/containers/grid/GridCell.ts","webpack://main/./src/elements/containers/grid/GridRowGroup.ts","webpack://main/./src/elements/containers/menus/MenuItemGroup.ts","webpack://main/./src/elements/containers/menus/Menu.ts","webpack://main/./src/elements/containers/grid/GridRow.ts","webpack://main/./src/elements/containers/grid/GridCellCollection.ts","webpack://main/./src/elements/containers/grid/GridRowCollection.ts","webpack://main/./src/elements/containers/grid/GridBody.ts","webpack://main/./src/elements/containers/grid/Grid.ts","webpack://main/./src/elements/containers/grid/GridHead.ts","webpack://main/./src/elements/containers/menus/MenuBar.ts","webpack://main/./src/elements/containers/menus/MenuButton.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItem.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItemGroup.ts","webpack://main/./src/elements/containers/toolbars/ToolBar.ts","webpack://main/./src/elements/containers/tabs/Tab.ts","webpack://main/./src/elements/containers/tabs/TabList.ts","webpack://main/./src/elements/containers/tabs/TabPanel.ts","webpack://main/./src/elements/containers/trees/TreeItem.ts","webpack://main/./src/elements/containers/trees/TreeItemGroup.ts","webpack://main/./src/elements/containers/trees/Tree.ts","webpack://main/./src/elements/containers/lists/ListItem.ts","webpack://main/./src/elements/containers/lists/ListItemGroup.ts","webpack://main/./src/elements/containers/lists/List.ts","webpack://main/./src/elements/controls/draggable/Draggable.ts","webpack://main/./src/elements/controls/draggable/Dragzone.ts","webpack://main/./src/elements/controls/draggable/Dropzone.ts","webpack://main/./src/elements/controls/dialogs/Dialog.ts","webpack://main/./src/elements/controls/forms/Option.ts","webpack://main/./src/elements/controls/forms/OptionGroup.ts","webpack://main/./src/elements/controls/forms/Select.ts","webpack://main/./src/elements/utils/Separator.ts","webpack://main/./src/elements/utils/Handle.ts","webpack://main/./src/elements/utils/HeightSash.ts","webpack://main/./src/elements/utils/Import.ts","webpack://main/./src/elements/utils/Loader.ts","webpack://main/./src/elements/utils/WidthSash.ts","webpack://main/./src/observers/AttributeMixinsObserver.ts","webpack://main/./src/views/widgets/Widget.ts","webpack://main/./src/views/widgets/SeparatorWidget.ts","webpack://main/./src/views/widgets/menu/MenuItemWidget.ts","webpack://main/./src/views/widgets/menu/MenuBarWidget.ts","webpack://main/./src/views/widgets/menu/MenuWidget.ts","webpack://main/./src/views/widgets/menu/MenuItemGroupWidget.ts","webpack://main/./src/views/widgets/tree/TreeItemWidget.ts","webpack://main/./src/views/widgets/tree/TreeWidget.ts","webpack://main/./src/views/widgets/tree/TreeItemGroupWidget.ts","webpack://main/./src/views/widgets/list/ListItemWidget.ts","webpack://main/./src/views/widgets/list/ListWidget.ts","webpack://main/./src/views/widgets/list/ListItemGroupWidget.ts","webpack://main/./src/views/widgets/toolbar/ToolBarItemWidget.ts","webpack://main/./src/views/widgets/toolbar/ToolBarWidget.ts","webpack://main/./src/views/widgets/toolbar/ToolBarItemGroupWidget.ts","webpack://main/./src/views/widgets/WidthSashWidget.ts","webpack://main/./src/views/widgets/HeightSashWidget.ts","webpack://main/./src/views/widgets/grid/GridCellWidget.ts","webpack://main/./src/views/widgets/grid/GridRowWidget.ts","webpack://main/./src/views/widgets/grid/GridWidget.ts","webpack://main/./src/views/widgets/grid/GridBodyWidget.ts","webpack://main/./src/views/widgets/grid/GridHeadWidget.ts","webpack://main/./src/views/widgets/grid/GridHeaderWidget.ts","webpack://main/./src/views/widgets/combobox/OptionWidget.ts","webpack://main/./src/views/widgets/combobox/ComboBoxWidget.ts","webpack://main/./main.ts","webpack://main/./src/views/widgets/combobox/OptionGroupWidget.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export { ModelChangeRecord };\r\nexport { ModelEvent };\r\nexport { ModelNode };\r\nexport { ModelObject };\r\nexport { ModelProperty };\r\nexport { ModelList };\r\nexport { ModelChangeObserverOptions };\r\nexport { ModelChangeObserver };\r\n\r\ninterface ModelChangeRecordConstructor {\r\n    prototype: ModelChangeRecord;\r\n    new(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ): ModelChangeRecord;\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\ninterface ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly changeType: number;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\nclass ModelChangeRecordBase implements ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList;\r\n    readonly changeType: number;\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n\r\n    constructor(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ) {\r\n        this.target = init.target;\r\n        this.changeType = init.changeType;\r\n        this.propertyName = init.propertyName ?? null;\r\n        this.oldValue = init.oldValue ?? undefined;\r\n        this.newValue = init.newValue ?? undefined;\r\n        this.removedIndex = init.removedIndex ?? 0;\r\n        this.removedItems = new ModelNodesList(init.removedItems ?? []);\r\n        this.insertedIndex = init.insertedIndex ?? 0;\r\n        this.insertedItems = new ModelNodesList(init.insertedItems ?? []);\r\n        this.sortedIndices = init.sortedIndices ?? [];\r\n    }\r\n\r\n    static get PROPERTY_CHANGE(): number {\r\n        return 1;\r\n    }\r\n\r\n    static get LIST_REMOVE(): number {\r\n        return 2;\r\n    }\r\n\r\n    static get LIST_INSERT(): number {\r\n        return 3;\r\n    }\r\n\r\n    static get LIST_SORT(): number {\r\n        return 4;\r\n    }\r\n\r\n    get PROPERTY_CHANGE(): number {\r\n        return ModelChangeRecordBase.PROPERTY_CHANGE;\r\n    }\r\n\r\n    get LIST_REMOVE(): number {\r\n        return ModelChangeRecordBase.LIST_REMOVE;\r\n    }\r\n\r\n    get LIST_INSERT(): number {\r\n        return ModelChangeRecordBase.LIST_INSERT;\r\n    }\r\n\r\n    get LIST_SORT(): number {\r\n        return ModelChangeRecordBase.LIST_SORT;\r\n    }\r\n}\r\n\r\nvar ModelChangeRecord: ModelChangeRecordConstructor = ModelChangeRecordBase;\r\n\r\ninterface ModelNodesListConstructor {\r\n    prototype: ModelNodesList;\r\n    new(items: any[]): ModelNodesList;\r\n}\r\n\r\ninterface ModelNodesList {\r\n    get length(): number;\r\n    item(index: number): ModelNode | null;\r\n    values(): IterableIterator<ModelNode>;\r\n}\r\n\r\nclass ModelNodesListBase implements ModelNodesList {\r\n    #items: ModelNode[];\r\n\r\n    constructor(items: ModelNode[]) {\r\n        this.#items = items.slice();\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    item(index: number): ModelNode | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    values(): IterableIterator<ModelNode> {\r\n        return this.#items.values();\r\n    }\r\n}\r\n\r\nvar ModelNodesList: ModelNodesListConstructor = ModelNodesListBase;\r\n\r\ninterface ModelEventConstructor {\r\n    prototype: ModelEvent;\r\n    new(type: string): ModelEvent;\r\n}\r\n\r\ninterface ModelEvent {\r\n    readonly type: string;\r\n    readonly currentTarget: ModelEventTarget | null;\r\n    readonly target: ModelEventTarget | null;\r\n}\r\n\r\nclass ModelEventBase implements ModelEvent {\r\n    readonly type: string;\r\n\r\n    #currentTarget: ModelEventTarget | null;\r\n    #target: ModelEventTarget | null;\r\n\r\n    constructor(type: string) {\r\n        this.type = type;\r\n        this.#currentTarget = null;\r\n        this.#target = null;\r\n    }\r\n\r\n    get currentTarget(): ModelEventTarget | null {\r\n        return this.#currentTarget;\r\n    }\r\n\r\n    get target(): ModelEventTarget | null {\r\n        return this.#target;\r\n    }\r\n\r\n    static ModelEventTargetAccessor? = new class ModelEventTargetAccessor {\r\n        setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#currentTarget = currentTarget;\r\n            }\r\n        }\r\n\r\n        setTarget(event: ModelEvent, target: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#target = target;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface ModelEventTargetAccessor {\r\n    setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void;\r\n    setTarget(event: ModelEvent, target: ModelEventTarget): void;\r\n}\r\n\r\nvar ModelEventTargetAccessor: ModelEventTargetAccessor = ModelEventBase.ModelEventTargetAccessor!;\r\ndelete ModelEventBase.ModelEventTargetAccessor;\r\n\r\nvar ModelEvent: ModelEventConstructor = ModelEventBase;\r\n\r\ninterface ModelEventTargetConstructor {\r\n    prototype: ModelEventTarget;\r\n    new(): ModelEventTarget;\r\n}\r\n\r\ninterface ModelEventTarget {\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    dispatchEvent(event: ModelEvent): void;\r\n    receiveEvent(event: ModelEvent): void;\r\n}\r\n\r\nclass ModelEventTargetBase implements ModelEventTarget {\r\n    #callbacks: Map<string, ((event: ModelEvent) => void)[]>;\r\n\r\n    constructor() {\r\n        this.#callbacks = new Map();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        const {type} = event;\r\n        const callbacks = this.#callbacks.get(type);\r\n        ModelEventTargetAccessor.setCurrentTarget(event, this);\r\n        if (callbacks) {\r\n            callbacks.forEach((callback_i) => {\r\n                callback_i(event);\r\n            });\r\n        }\r\n    }\r\n\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            callbacks.push(callback);\r\n        }\r\n        else {\r\n            this.#callbacks.set(type, [callback]);\r\n        }\r\n    }\r\n\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            const callbackIndex = callbacks.findIndex(\r\n                callback_i => callback_i == callback\r\n            );\r\n            if (callbackIndex > -1) {\r\n                callbacks.splice(callbackIndex, 1);\r\n            }\r\n            if (callbacks.length == 0) {\r\n                this.#callbacks.delete(type);\r\n            }\r\n        }\r\n    }\r\n\r\n    dispatchEvent(event: ModelEvent): void {\r\n        ModelEventTargetAccessor.setTarget(event, this);\r\n        this.receiveEvent(event);\r\n    }\r\n}\r\n\r\nvar ModelEventTarget: ModelEventTargetConstructor = ModelEventTargetBase;\r\n\r\ninterface ModelNodeConstructor {\r\n    prototype: ModelNode;\r\n    new(): ModelNode;\r\n}\r\n\r\ninterface ModelNode extends ModelEventTarget {\r\n    readonly parentNode: ModelNode | null;\r\n    setParent(parentNode: ModelNode | null): void;\r\n    getRecords(): ModelChangeRecord[];\r\n    beginChanges(): void;\r\n    endChanges(): void;\r\n}\r\n\r\ninterface ModelNodeRecordsAccessor {\r\n    triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void;\r\n    handleRecord(node: ModelNode, record: ModelChangeRecord): void;\r\n}\r\n\r\nclass ModelNodeBase extends ModelEventTargetBase implements ModelNode {\r\n    #parentNode: ModelNode | null;\r\n    #records: ModelChangeRecord[];\r\n    #isRecording: boolean;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#parentNode = null;\r\n        this.#records = [];\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    get parentNode(): ModelNode | null {\r\n        return this.#parentNode;\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        if (parentNode !== null) {\r\n            let isCyclicReference = parentNode == this;\r\n            let {parentNode: ancestorNode} = parentNode;\r\n            while (!isCyclicReference && ancestorNode !== null) {\r\n                ({parentNode: ancestorNode} = ancestorNode);\r\n                isCyclicReference = ancestorNode == this;\r\n            }\r\n            if (!isCyclicReference) {\r\n                this.#parentNode = parentNode;\r\n            }\r\n            else {\r\n                throw new TypeError(\"Failed to set parent on ModelNode: circular reference detected in the hierarchy.\");\r\n            }\r\n        }\r\n        else {\r\n            this.#parentNode = null;\r\n        }\r\n    }\r\n    \r\n    beginChanges(): void {\r\n        this.#isRecording = true;\r\n    }\r\n\r\n    endChanges(): void {\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        this.#records.splice(0);\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    getRecords(): ModelChangeRecord[] {\r\n        return this.#records.slice();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        super.receiveEvent(event);\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            parentNode.receiveEvent(event);\r\n        }\r\n    }\r\n\r\n    #triggerChange(property: string, oldValue: any, newValue: any): void {\r\n        const records = this.#records;\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.PROPERTY_CHANGE,\r\n            propertyName: property,\r\n            oldValue, newValue\r\n        });\r\n        records.push(record);\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        records.splice(0);\r\n    }\r\n\r\n    #handleRecord(record: ModelChangeRecord): void {\r\n        this.#records.push(record);\r\n        if (!this.#isRecording) {\r\n            this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n            this.#records.splice(0);\r\n        }\r\n    }\r\n\r\n    static ModelNodeRecordsAccessor? = new class ModelNodeRecordsAccessor {\r\n        triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#triggerChange(property, oldValue, newValue);\r\n            }\r\n        }\r\n\r\n        handleRecord(node: ModelNode, record: ModelChangeRecord): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#handleRecord(record);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelNodeRecordsAccessor: ModelNodeRecordsAccessor = ModelNodeBase.ModelNodeRecordsAccessor!;\r\ndelete ModelNodeBase.ModelNodeRecordsAccessor;\r\n\r\nvar ModelNode: ModelNodeConstructor = ModelNodeBase;\r\n\r\ninterface ModelPropertyDecorator {\r\n    (\r\n        init?: {\r\n            type: typeof String | typeof Number | typeof Boolean | typeof Date | typeof Object\r\n        }\r\n    ): <Model extends ModelObject>(target: Model, property: string) => void;\r\n}\r\n\r\nconst ModelProperty: ModelPropertyDecorator = function(\r\n    init?: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Date | typeof Object\r\n    }\r\n) {\r\n    return (\r\n        target: ModelObject, property: string\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        /*const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n        if (Array.isArray(observedAttributes)) {\r\n            observedAttributes.push(property);\r\n        }\r\n        else {\r\n            Object.defineProperty(\r\n                constructor, \"observedAttributes\", {\r\n                    value: [property],\r\n                    writable: false\r\n                }\r\n            );\r\n        }*/\r\n        const setter = function(this: ModelObject, value: any) {\r\n            const oldValue = ModelObjectPropertiesAccessor.getProperty(this, property);\r\n            ModelObjectPropertiesAccessor.setProperty(this, property, value);\r\n            if (value !== oldValue) {\r\n                ModelNodeRecordsAccessor.triggerChange(this, property, oldValue, value);\r\n            }\r\n            return true;\r\n        };\r\n        const getter = function(this: ModelObject) {\r\n            return ModelObjectPropertiesAccessor.getProperty(this, property);\r\n        };\r\n        Object.defineProperty(prototype, property, {\r\n            set: setter,\r\n            get: getter,\r\n            enumerable: true\r\n        });\r\n    }\r\n}\r\n\r\ninterface ModelObjectConstructor {\r\n    prototype: ModelObject;\r\n    new(): ModelObject;\r\n}\r\n\r\ninterface ModelObject extends ModelNode {}\r\n\r\ninterface ModelObjectPropertiesAccessor {\r\n    setProperty(node: ModelNode, property: string, value: any): void;\r\n    getProperty(node: ModelNode, property: string,): any;\r\n}\r\n\r\nclass ModelObjectBase extends ModelNodeBase implements ModelObject {\r\n    #properties: Map<string, any>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#properties = new Map();\r\n    }\r\n\r\n    static ModelObjectPropertiesAccessor? = new class ModelPropertiesAccessor {\r\n        setProperty(node: ModelObject, property: string, value: any): void {\r\n            if (node instanceof ModelObjectBase) {\r\n                node.#properties.set(property, value);\r\n            }\r\n        }\r\n\r\n        getProperty(node: ModelObject, property: string): any {\r\n            if (node instanceof ModelObjectBase) {\r\n                return node.#properties.get(property);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelObjectPropertiesAccessor: ModelObjectPropertiesAccessor = ModelObjectBase.ModelObjectPropertiesAccessor!;\r\ndelete ModelObjectBase.ModelObjectPropertiesAccessor;\r\n\r\nvar ModelObject: ModelObjectConstructor = ModelObjectBase;\r\n\r\ninterface ModelListConstructor {\r\n    prototype: ModelList;\r\n    new<Model extends ModelNode>(): ModelList<Model>;\r\n    new<Model extends ModelNode>(items: Model[]): ModelList<Model>;\r\n}\r\n\r\ninterface ModelList<Model extends ModelNode = ModelNode> extends ModelNode {\r\n    readonly parentNode: ModelNode | null;\r\n    readonly length: number;\r\n    index(item: Model): number;\r\n    get(index: number): Model | null;\r\n    values(): IterableIterator<Model>;\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void;\r\n    insert(index: number, ...items: Model[]): void;\r\n    prepend(...items: Model[]): void;\r\n    append(...items: Model[]): void;\r\n    remove(item: Model): void;\r\n    clear(): void;\r\n}\r\n\r\nclass ModelListBase<Model extends ModelNode = ModelNode> extends ModelNodeBase implements ModelList<Model> {\r\n    #items: Model[];\r\n\r\n    constructor()\r\n    constructor(items: Model[])\r\n    constructor(items?: Model[]) {\r\n        super();\r\n        this.#items = items?.slice() ?? [];\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        super.setParent(parentNode);\r\n        this.#items.forEach((item_i) => {\r\n            item_i.setParent(parentNode);\r\n        });\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    get(index: number): Model | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    index(item: Model): number {\r\n        return this.#items.indexOf(item);\r\n    }\r\n\r\n    values(): IterableIterator<Model> {\r\n        return this.#items.values();\r\n    }\r\n\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void {\r\n        const items = this.#items;\r\n        const indexedItems = items.map(\r\n            (item_i, i) => {\r\n                return {\r\n                    item: item_i,\r\n                    index: i\r\n                };\r\n            }\r\n        );\r\n        indexedItems.sort(\r\n            (indexedItem_a, indexedItem_b) => {\r\n                return compareFunction(\r\n                    indexedItem_a.item, indexedItem_b.item\r\n                )\r\n            }\r\n        );\r\n        this.#items = indexedItems.map(indexedItem_i => indexedItem_i.item);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_SORT,\r\n            sortedIndices: indexedItems.map(indexedItem_i => indexedItem_i.index)\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    prepend(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.splice(0, 0, ...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: 0,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    append(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.push(...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: length,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    insert(index: number, ...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const positiveIndex = Math.abs(index);\r\n        if (positiveIndex <= length) {\r\n            if (index >= 0) {\r\n                const {parentNode} = this;\r\n                items.forEach(item_i => {\r\n                    item_i.setParent(parentNode);\r\n                });\r\n                if (index < length) {\r\n                    _items.splice(index, 0, ...items);\r\n                }\r\n                else {\r\n                    _items.push(...items);\r\n                }\r\n            }\r\n            else if (index < 0) {\r\n                index = length - index;\r\n                const {parentNode} = this;\r\n                if (parentNode) {\r\n                    items.forEach(item_i => {\r\n                        item_i.setParent(parentNode);\r\n                    });\r\n                }\r\n                _items.splice(index, 0, ...items);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_INSERT,\r\n                insertedIndex: index,\r\n                insertedItems: items.slice()\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    remove(item: Model): void {\r\n        const _items = this.#items;\r\n        const index = _items.indexOf(item);\r\n        if (index > -1) {\r\n            const item = _items.splice(index, 1)[0];\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                item.setParent(null);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: index,\r\n                removedItems: [item]\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    clear(): void {\r\n        const items = this.#items;\r\n        const {length} = items;\r\n        if (length > 0) {\r\n            const removedItems = items.splice(0);\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                removedItems.forEach((removedItem_i) => {\r\n                    removedItem_i.setParent(null);\r\n                });\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: 0,\r\n                removedItems: removedItems\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n};\r\n\r\nvar ModelList: ModelListConstructor = ModelListBase!;\r\n\r\ninterface ModelChangeObserverConstructor {\r\n    prototype: ModelChangeObserver;\r\n    new(callback: (records: ModelChangeRecord[]) => void): ModelChangeObserver;\r\n}\r\n\r\ninterface ModelChangeObserver {\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void;\r\n    unobserve(node: ModelNode): void;\r\n    disconnect(): void;\r\n}\r\n\r\ntype ModelChangeObserverOptions = {\r\n    properties?: boolean;\r\n    propertiesFilter?: string[];\r\n    childList?: boolean;\r\n    subtree?: boolean;\r\n}\r\n\r\nclass ModelChangeObserverBase implements ModelChangeObserver {\r\n    #callback: (records: ModelChangeRecord[]) => void;\r\n    #records: ModelChangeRecord[];\r\n    #disconnected: boolean;\r\n\r\n    #references: WeakMap<ModelNode, {\r\n        listener: (event: ModelEvent) => void,\r\n        options: ModelChangeObserverOptions\r\n    }>;\r\n\r\n    constructor(callback: (records: ModelChangeRecord[]) => void) {\r\n        this.#callback = callback;\r\n        this.#records = [];\r\n        this.#disconnected = false;\r\n        this.#references = new WeakMap();\r\n    }\r\n\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void {\r\n        this.#disconnected = false;\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (!reference) {\r\n            const listener = this.#handleModelEvent.bind(this);\r\n            node.addEventListener(\"modelchange\", listener);\r\n            reference = {listener, options};\r\n            references.set(node, reference);\r\n        }\r\n        else {\r\n            references.set(node, reference);\r\n        }\r\n    }\r\n\r\n    unobserve(node: ModelNode): void {\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (reference) {\r\n            const {listener} = reference;\r\n            node.removeEventListener(\"modelchange\", listener);\r\n        }\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#records.splice(0);\r\n        this.#disconnected = true;\r\n    }\r\n\r\n    #trigger(): void {\r\n        const records = this.#records.splice(0);\r\n        if (records.length > 0) {\r\n            this.#callback(records);\r\n        }\r\n    }\r\n\r\n    #handleModelEvent(event: ModelEvent): void {\r\n        if (!this.#disconnected) {\r\n            const {target, currentTarget} = event;\r\n            const reference = this.#references.get(<ModelNode>currentTarget);\r\n            if (reference) {\r\n                const {options} = reference;\r\n                const {properties, propertiesFilter, childList, subtree} = options;\r\n                if (subtree) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n                else if (target == currentTarget) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelChangeObserver: ModelChangeObserverConstructor = ModelChangeObserverBase;","\r\nexport { snakeToCamel };\r\nexport { camelToSnake };\r\nexport { trainToCamel };\r\nexport { camelToTrain };\r\n\r\nfunction snakeToCamel(str: string) {\r\n  return str.split('_').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToSnake(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '_').toLowerCase();\r\n}\r\n\r\nfunction trainToCamel(str: string) {\r\n  return str.split('-').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToTrain(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '-').toLowerCase();\r\n}","import { ModelList, ModelNode, ModelChangeRecord, ModelChangeObserver, ModelChangeObserverOptions } from \"../models/Model\";\r\nimport { camelToTrain } from \"./Snippets\";\r\n/*\r\nexport { subtreeNodes };\r\nexport { ancestorNodes };*/\r\nexport { CustomElement };\r\nexport { ReactiveChildElements };\r\nexport { QueryProperty };\r\nexport { QueryAllProperty };\r\nexport { AttributeProperty };\r\nexport { reactiveElement };\r\nexport { reactiveChildElements };\r\nexport { element };\r\nexport { fragment };\r\nexport { textNode };\r\nexport { AttributeMutationMixin };\r\nexport { AttributeType };\r\nexport { areAttributesMatching };\r\nexport { AttributeMutationMixinBase };\r\nexport { trimMultilineIndent };\r\nexport { Stylesheet };\r\n\r\ninterface AttributePropertyDecorator {\r\n    (\r\n        init: {\r\n            type: typeof String;\r\n            observed?: boolean;\r\n            defaultValue?: string | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Number;\r\n            observed?: boolean;\r\n            defaultValue?: number | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Boolean;\r\n            observed?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Object;\r\n            observed?: boolean;\r\n            defaultValue?: any | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n}\r\n\r\nconst AttributeProperty: AttributePropertyDecorator = function(\r\n    init: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Object;\r\n        observed?: boolean;\r\n        defaultValue?: string | number | any | null;\r\n    }\r\n) {\r\n    return <E extends HTMLElement>(\r\n        target: E, property: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(property);\r\n        const attributeName = camelToTrain(propertyName);\r\n        const defaultValue = init.defaultValue ?? null;\r\n        const observed = init.observed ?? false;\r\n        if (observed) {\r\n            const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n            if (Array.isArray(observedAttributes)) {\r\n                observedAttributes.push(attributeName);\r\n            }\r\n            else {\r\n                Object.defineProperty(\r\n                    constructor, \"observedAttributes\", {\r\n                        value: [attributeName],\r\n                        writable: false\r\n                    }\r\n                );\r\n            }\r\n        }\r\n        const {type} = init;\r\n        switch (type) {\r\n            case Boolean: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        return this.hasAttribute(attributeName);\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value) {\r\n                            this.setAttribute(attributeName, \"\");\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Object: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? JSON.parse(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, JSON.stringify(value));\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Number: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? parseFloat(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case String:\r\n            default: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? val : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n    \r\nfunction Stylesheet(text: string): CSSStyleSheet {\r\n    const stylesheet = new CSSStyleSheet();\r\n    (stylesheet as any).replaceSync(text);\r\n    return stylesheet;\r\n}\r\n\r\nfunction trimMultilineIndent(text: string): string {\r\n    const newlineIndex = text.indexOf(\"\\n\");\r\n    text = text.substring(newlineIndex + 1);\r\n    const indentMatch = text.match(/^[\\s]*/);\r\n    if (indentMatch) {\r\n        const indent = text.substring(0, indentMatch[0].length);\r\n        text = text.replaceAll(indent, \"\").trimEnd();\r\n    }\r\n    return text;\r\n}\r\n\r\ninterface CustomElementDecorator {\r\n    (init: {\r\n        name: string;\r\n        options?: ElementDefinitionOptions\r\n    }): <C extends CustomElementConstructor>(elementCtor: C) => C;\r\n}\r\n\r\nconst CustomElement: CustomElementDecorator = function(init: {\r\n    name: string;\r\n    options?: ElementDefinitionOptions\r\n}) {\r\n    return <C extends CustomElementConstructor>(\r\n        elementCtor: C\r\n    ) => {\r\n        const {name, options} = init;\r\n        if (!customElements.get(name)) {\r\n            customElements.define(\r\n                name,\r\n                elementCtor,\r\n                options\r\n            );\r\n        }\r\n        return elementCtor;\r\n    }\r\n}\r\n\r\ninterface QueryPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryProperty: QueryPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(propertyKey);\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return this.shadowRoot!.querySelector(selector);\r\n        } : function(this: HTMLElement) {\r\n            return this.querySelector(selector);\r\n        }\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\ninterface QueryAllPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryAllProperty: QueryAllPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(propertyKey);\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return Array.from(this.shadowRoot!.querySelectorAll(selector));\r\n        } : function(this: HTMLElement) {\r\n            return Array.from(this.querySelectorAll(selector));\r\n        };\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\nfunction fragment(...nodes: (Node | string)[]): DocumentFragment {\r\n    const fragment = document.createDocumentFragment();\r\n    fragment.append(...nodes);\r\n    return fragment;\r\n}\r\n\r\nfunction textNode(text: string): Node {\r\n    return document.createTextNode(text);\r\n}\r\n\r\ninterface HTMLElementInit {\r\n    options?: ElementCreationOptions,\r\n    attributes?: {\r\n        [name: string]: number | string | boolean | undefined\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    children?: Node | string | (Node | string)[] | NodeList | ReactiveChildElements,\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction element<E extends HTMLElementTagNameMap[K], K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): E;\r\nfunction element(\r\n    tagName: string, init?: HTMLElementInit): HTMLElement;\r\nfunction element<K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): HTMLElementTagNameMap[K] {\r\n    if (init) {\r\n        const {options, attributes, dataset, children, listeners} = init;\r\n        const element = document.createElement(tagName, options);\r\n        if (attributes) {\r\n            Object.entries(attributes).forEach(([attributeName, attributeValue]) => {\r\n                if (attributeValue !== undefined) {\r\n                    if (typeof attributeValue === \"boolean\") {\r\n                        element.toggleAttribute(camelToTrain(attributeName), attributeValue);\r\n                    }\r\n                    else {\r\n                        element.setAttribute(camelToTrain(attributeName), String(attributeValue));\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        if (dataset) {\r\n            const {dataset: elementDataset} = element;\r\n            Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                elementDataset[datasetEntry_i] = String(dataset[datasetEntry_i]);\r\n            });\r\n        }\r\n        if (children) {\r\n            if (typeof children === \"function\") {\r\n                element.append(...children(element));\r\n            }\r\n            else if (typeof children === \"object\" && \"length\" in children) {\r\n                element.append(...Array.from(children));\r\n            }\r\n            else {\r\n                element.append(children);\r\n            }\r\n        }\r\n        if (listeners) {\r\n            Object.entries(listeners).forEach(([name_i, listener_i]) => {\r\n                if (Array.isArray(listener_i)) {\r\n                    element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                }\r\n                else {\r\n                    element.addEventListener(name_i, listener_i);\r\n                }\r\n            });\r\n        }\r\n        return element;\r\n    }\r\n    return document.createElement(tagName);\r\n}\r\n\r\nconst reactiveElementsMap = new WeakMap<ModelNode, {\r\n    observerOptions: ModelChangeObserverOptions,\r\n    reactiveElementsArray: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }[]\r\n}>();\r\n\r\nconst reactiveElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    model: ModelNode,\r\n    reactiveElement: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }\r\n}) => {\r\n    const {model, reactiveElement} = heldValue;\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    if (reactiveElementsMapEntry !== undefined) {\r\n        const {reactiveElementsArray} = reactiveElementsMapEntry;\r\n        reactiveElementsArray.splice(reactiveElementsArray.indexOf(reactiveElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveElementsPropertyObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    records.forEach((record_i) => {\r\n        const {target, propertyName, oldValue, newValue} = record_i;\r\n        const {reactiveElementsArray} = reactiveElementsMap.get(target)!;\r\n        reactiveElementsArray.forEach(reactiveElement_i => {\r\n            const {elementRef, react, properties} = reactiveElement_i;\r\n            const element = elementRef.deref();\r\n            if (element) {\r\n                if (properties.includes(propertyName!)) {\r\n                    react(element, propertyName!, oldValue, newValue);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveElement<M extends ModelNode, E extends Element, K extends string>(\r\n    model: M,\r\n    element: E,\r\n    properties: K[],\r\n    react: (object: E, property: K, oldValue: any, newValue: any) => void\r\n): E;\r\nfunction reactiveElement<M extends ModelNode, E extends Element>(\r\n    model: M,\r\n    element: E,\r\n    properties: string[],\r\n    react: (element: E, property: string, oldValue: any, newValue: any) => void\r\n): E {\r\n    const elementRef = new WeakRef(element);\r\n    const reactiveElement = {elementRef, react, properties};\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    reactiveElementsFinalizationRegistry.register(element, {model, reactiveElement});\r\n    if (!reactiveElementsMapEntry) {\r\n        const observerOptions = {\r\n            properties: true,\r\n            propertiesFilter: properties\r\n        };\r\n        const reactiveElementsArray = [reactiveElement];\r\n        reactiveElementsMap.set(model, {observerOptions, reactiveElementsArray});\r\n        reactiveElementsPropertyObserver.observe(model, observerOptions);\r\n    }\r\n    else {\r\n        const {reactiveElementsArray, observerOptions} = reactiveElementsMapEntry;\r\n        const {propertiesFilter} = observerOptions;\r\n        reactiveElementsArray.push(reactiveElement);\r\n        observerOptions.propertiesFilter = propertiesFilter ?\r\n            propertiesFilter.concat(properties.filter(\r\n                property_i => !propertiesFilter.includes(property_i)\r\n            )) : properties.filter(\r\n                (property_i, i, properties) => properties.indexOf(property_i) === i\r\n            )\r\n    }\r\n    properties.forEach((property_i) => {\r\n        if (property_i in model) {\r\n            const value = Reflect.get(model, property_i, model);\r\n            if (value !== undefined) {\r\n                react(element, <any>property_i, <any>undefined, value);\r\n            }\r\n        }\r\n    });\r\n    return element;\r\n}\r\n\r\ninterface ReactiveChildElements {\r\n    (parent: Node & ParentNode): (Node | string)[]\r\n}\r\n\r\nconst reactiveChildElementsMap = new WeakMap<ModelList, {\r\n    reactiveChildElementsArray: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }[]\r\n}>();\r\n\r\nconst reactiveChildElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    list: ModelList,\r\n    reactiveChildElement: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }\r\n}) => {\r\n    const {list, reactiveChildElement} = heldValue;\r\n    const reactiveChildrenElementsMapEntry = reactiveChildElementsMap.get(list);\r\n    if (reactiveChildrenElementsMapEntry) {\r\n        const {reactiveChildElementsArray} = reactiveChildrenElementsMapEntry;\r\n        reactiveChildElementsArray.splice(reactiveChildElementsArray.indexOf(reactiveChildElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveChildElementsObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    let range: null | Range = null;\r\n    Array.from(records.values()).forEach((record_i) => {\r\n        const {target} = record_i;\r\n        const list = <ModelList>target;\r\n        const {length: listLength} = list;\r\n        const {reactiveChildElementsArray} = reactiveChildElementsMap.get(list)!;\r\n        reactiveChildElementsArray.forEach((reactiveChildElements_i) => {\r\n            const {parentRef, mapping, placeholder} = reactiveChildElements_i;\r\n            const parent = parentRef.deref();\r\n            if (parent) {\r\n                const {firstChild, children} = parent;\r\n                const {length: childrenCount} = children;\r\n                if (placeholder && listLength > 0 && firstChild == placeholder) {\r\n                    parent.removeChild(placeholder);\r\n                }\r\n                const {changeType, LIST_INSERT, LIST_REMOVE, LIST_SORT} = record_i;\r\n                switch (changeType) {\r\n                    case LIST_INSERT: {\r\n                        const {insertedIndex, insertedItems} = record_i;\r\n                        const insertedItemsArray = Array.from(insertedItems.values()).map(mapping);\r\n                        const {length: childrenCount} = children;\r\n                        if (insertedIndex < childrenCount) {\r\n                            children[insertedIndex].before(...insertedItemsArray);\r\n                        }\r\n                        else {\r\n                            parent.append(...insertedItemsArray);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_REMOVE: {\r\n                        const {removedIndex, removedItems} = record_i;\r\n                        const {length: removedCount} = removedItems;\r\n                        range = range ?? document.createRange();\r\n                        const removeEndIndex = removedIndex + (removedCount - 1);\r\n                        if (removeEndIndex < childrenCount) {\r\n                            range.setStartBefore(children[removedIndex]);\r\n                            range.setEndAfter(children[removeEndIndex]);\r\n                            range.deleteContents();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_SORT: {\r\n                        const {sortedIndices} = record_i;\r\n                        const childrenArray = Array.from(children);\r\n                        parent.append(\r\n                            ...sortedIndices.filter(\r\n                                index_i => index_i < childrenCount\r\n                            ).map(\r\n                                index_i => childrenArray[index_i]\r\n                            )\r\n                        );\r\n                        break;\r\n                    }\r\n                }\r\n                if (listLength == 0 && placeholder) {\r\n                    parent.append(placeholder);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveChildElements<Model extends ModelNode>(\r\n    list: ModelList<Model>,\r\n    mapping: (item: Model) => Element,\r\n    placeholder?: Element\r\n): ReactiveChildElements {\r\n    return (parent: Node & ParentNode) => {\r\n        const parentRef = new WeakRef(parent);\r\n        const reactiveChildElementsMapEntry = reactiveChildElementsMap.get(list);\r\n        const reactiveChildElement = {parentRef, mapping, placeholder};\r\n        reactiveChildElementsFinalizationRegistry.register(parent, {list, reactiveChildElement});\r\n        if (!reactiveChildElementsMapEntry) {\r\n            const reactiveChildElementsArray = [reactiveChildElement];\r\n            reactiveChildElementsMap.set(list, {reactiveChildElementsArray});\r\n            reactiveChildElementsObserver.observe(list, {\r\n                childList: true\r\n            });\r\n        }\r\n        else {\r\n            const {reactiveChildElementsArray} = reactiveChildElementsMapEntry;\r\n            reactiveChildElementsArray.push(reactiveChildElement);\r\n        }\r\n        return list.length == 0 && placeholder ?\r\n            [placeholder] : Array.from(list.values()).map(mapping);\r\n    }\r\n}\r\n\r\ninterface AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n    attach(element: Element): void;\r\n    detach(element: Element): void;\r\n}\r\n\r\ntype AttributeType = \"string\" | \"boolean\" | \"list\";\r\n\r\nfunction areAttributesMatching(\r\n    referenceAttributeType: AttributeType,\r\n    referenceAttributeName: string, referenceAttributeValue: string,\r\n    attributeName: string, attributeValue: string | null): boolean {\r\n    if (referenceAttributeName == attributeName) {\r\n        switch (referenceAttributeType) {\r\n            case \"boolean\":\r\n                return referenceAttributeValue == \"\" && attributeValue == \"\";\r\n            case \"string\":\r\n                return referenceAttributeValue !== \"\" && (referenceAttributeValue == attributeValue);\r\n            case \"list\":\r\n                return (referenceAttributeValue !== \"\" && attributeValue !== null) && new RegExp(`${referenceAttributeValue}\\s*?`, \"g\").test(attributeValue );\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nclass AttributeMutationMixinBase implements AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n\r\n    constructor(attributeName: string, attributeType: AttributeType = \"boolean\", attributeValue: string = \"\") {\r\n        this.attributeName = attributeName;\r\n        this.attributeType = attributeType;\r\n        this.attributeValue = attributeValue;\r\n    }\r\n\r\n    attach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n\r\n    detach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n}","import { CustomElement, AttributeProperty, QueryProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\n\r\nexport { HTMLEMenuItemElement };\r\nexport { EMenuItem };\r\n\r\ninterface HTMLEMenuItemElementConstructor {\r\n    prototype: HTMLEMenuItemElement;\r\n    new(): HTMLEMenuItemElement;\r\n}\r\n\r\ninterface HTMLEMenuItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n    get menu(): HTMLEMenuElement | null;\r\n    name: string;\r\n    label: string | null;\r\n    value: string;\r\n    hotkey: string;\r\n    disabled: boolean;\r\n    checked: boolean;\r\n    expanded: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitem\": HTMLEMenuItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitem\"\r\n})\r\nclass HTMLEMenuItemElementBase extends HTMLElement implements HTMLEMenuItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n    \r\n    @QueryProperty({selector: \":scope > e-menu[slot=menu]\"})\r\n    menu!: HTMLEMenuElement | null;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string | null;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    hotkey!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    checked!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    expanded!: boolean;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"button\", observed: true})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n\r\n    attributeChangedCallback(attributeName: string, oldValue: string | null, newValue: string | null) {\r\n        const {internals} = this;\r\n        switch (attributeName) {\r\n            case \"type\": {\r\n                switch (newValue) {\r\n                    case \"checkbox\":\r\n                    case \"radio\": {\r\n                        internals.role = `menuitem${newValue}`;\r\n                        break;\r\n                    }\r\n                    default: {\r\n                        internals.role = \"menuitem\";\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"checked\": {\r\n                internals.ariaChecked = String(newValue !== null);\r\n                break;\r\n            }\r\n            case \"disabled\": {\r\n                internals.ariaDisabled = String(newValue !== null);\r\n                break;\r\n            }\r\n            case \"expanded\": {\r\n                internals.ariaExpanded = String(newValue !== null);\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                internals.ariaLabel = newValue;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"icon\"\r\n                }\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"label\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"arrow\"\r\n                }\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const internals = this.attachInternals();\r\n        this.internals = internals;\r\n        internals.role = \"menuitem\";\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                const expand = force ?? !expanded;\r\n                this.expanded = expand;\r\n                if (expand) {\r\n                    this.#positionMenu();\r\n                }\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (!expanded) {\r\n                    this.expanded = true;\r\n                    this.#positionMenu();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (expanded) {\r\n                    this.expanded = false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const {type} = this;\r\n            if (type == \"menu\") {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const closestMenu = this.closest(\"e-menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    const overflowX = itemRight + menuWidth - clientWidth;\r\n                    const overflowY = itemTop + menuHeight - clientHeight;\r\n                    menuStyle.setProperty(\"left\", `${\r\n                        overflowX > 0 ?\r\n                        itemLeft - menuWidth - closestMenuLeft :\r\n                        itemRight - closestMenuLeft\r\n                    }px`);\r\n                    const menuComputedStyle = window.getComputedStyle(menu);\r\n                    const {paddingTop, paddingBottom} = menuComputedStyle;\r\n                    const menuPaddingTop = parseFloat(paddingTop);\r\n                    const menuPaddingBottom = parseFloat(paddingBottom);\r\n                    menuStyle.setProperty(\"top\", `${\r\n                        overflowY > 0 ?\r\n                        itemBottom - menuHeight - closestMenuTop + menuPaddingBottom :\r\n                        itemTop - closestMenuTop - menuPaddingTop\r\n                    }px`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemElement: HTMLEMenuItemElementConstructor = HTMLEMenuItemElementBase;\r\n\r\ninterface EMenuItemConstructor {\r\n    prototype: HTMLEMenuItemElement;\r\n    new(init: {\r\n        name?: string;\r\n        label: string;\r\n        type?: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    button(init: {\r\n        name?: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    checkbox(init: {\r\n        name?: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    radio(init: {\r\n        name?: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    menu(init: {\r\n        name?: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    submenu(init: {\r\n        name?: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n}\r\n\r\nvar EMenuItem = <EMenuItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string;\r\n        label: string;\r\n        type?: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menu} = init;\r\n        if (menu) {\r\n            menu.slot = \"menu\";\r\n        }\r\n        return element(\"e-menuitem\", {\r\n            attributes: {\r\n                tabindex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type\r\n            },\r\n            children: menu ? [\r\n                label,\r\n                menu\r\n            ] : [\r\n                label\r\n            ],\r\n            listeners: {\r\n                trigger: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemElement.prototype,\r\n        button(init: {\r\n            name?: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name?: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name?: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menu(init: {\r\n            name?: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"menu\"\r\n            });\r\n        },\r\n        submenu(init: {\r\n            name?: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"submenu\"\r\n            });\r\n        }\r\n    }\r\n);","import { ModelObject } from \"../models/Model\";\r\n\r\nexport { View };\r\n\r\ninterface View extends HTMLElement {\r\n    readonly model: ModelObject | null;\r\n    setModel(model: ModelObject): void;\r\n    renderShadow(): Node | undefined;\r\n    renderLight(): Node | undefined;\r\n    render(): void;\r\n}\r\n\r\ninterface ViewConstructor {\r\n    prototype: View;\r\n    new(): View;\r\n}\r\n\r\nclass ViewBase extends HTMLElement implements View {\r\n    #model: ModelObject | null;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#model = null;\r\n    }\r\n\r\n    get model(): ModelObject | null {\r\n        return this.#model;\r\n    }\r\n    \r\n    setModel(model: ModelObject): void {\r\n        if (model !== this.#model) {\r\n            this.#model = model;\r\n        }\r\n    }\r\n\r\n    renderLight(): Node | undefined {\r\n        return;\r\n    }\r\n\r\n    renderShadow(): Node | undefined {\r\n        return;\r\n    }\r\n\r\n    render(): void {\r\n        const {shadowRoot} = this;\r\n        if (shadowRoot !== null) {\r\n            const shadow = this.renderShadow();\r\n            if (shadow) {\r\n                shadowRoot.replaceChildren(shadow);\r\n            }\r\n        }\r\n        const light = this.renderLight();\r\n        if (light) {\r\n            this.replaceChildren(light);\r\n        }\r\n    }\r\n}\r\n\r\nvar View: ViewConstructor = ViewBase;","import { element, reactiveChildElements, CustomElement, fragment, AttributeProperty, reactiveElement } from \"../elements/Element\";\r\nimport { ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\nimport { HTMLEGridCellElement } from \"../elements/containers/grid/GridCell\";\r\nimport { HTMLEGridElement } from \"../elements/containers/grid/Grid\";\r\nimport { HTMLEGridRowElement } from \"../elements/containers/grid/GridRow\";\r\nimport { HTMLEMenuItemElement } from \"../elements/containers/menus/MenuItem\";\r\n\r\nexport { GridModel };\r\nexport { GridRowModel };\r\nexport { GridColumnModel };\r\nexport { GridView };\r\n\r\ninterface GridInit {\r\n    rows: GridRowModel[];\r\n    columns: GridColumnModel[];\r\n}\r\n\r\nclass GridModel extends ModelObject {\r\n    readonly rows: ModelList<GridRowModel>;\r\n    readonly columns: ModelList<GridColumnModel>;\r\n\r\n    constructor()\r\n    constructor(init: GridInit)\r\n    constructor(init?: GridInit) {\r\n        super();\r\n        const {rows: initRows = [], columns: initColumns = []} = init ?? {};\r\n        const rows = new ModelList(initRows);\r\n        rows.setParent(this);\r\n        this.rows = rows;\r\n        const columns = new ModelList(initColumns);\r\n        columns.setParent(this);\r\n        this.columns = columns;\r\n    }\r\n\r\n    getColumnByName(name: string): GridColumnModel | null {\r\n        return Array.from(this.columns.values()).find(\r\n            column_i => column_i.name == name\r\n        ) ?? null;\r\n    }\r\n\r\n    sortByColumn(column: GridColumnModel, sortOrder: number) {\r\n        Array.from(this.columns.values()).forEach((column_i) => {\r\n            column_i.sortorder = column_i === column ? sortOrder : undefined;\r\n        });\r\n        const sortTest = (() => {\r\n            const {type} = column;\r\n            switch (type) {\r\n                case String: {\r\n                    return (row_1: GridRowModel, row_2: GridRowModel) => {\r\n                        const cell_1 = String(column.extract(row_1));\r\n                        const cell_2 = String(column.extract(row_2));\r\n                        return sortOrder * cell_1.localeCompare(cell_2);\r\n                    };\r\n                }\r\n                default: {\r\n                    return (row_1: GridRowModel, row_2: GridRowModel) => {\r\n                        const cell_1 = Number(column.extract(row_1));\r\n                        const cell_2 = Number(column.extract(row_2));\r\n                        return Math.sign(sortOrder * (cell_1 - cell_2));\r\n                    };\r\n                }\r\n            }\r\n        })();\r\n        this.rows.sort(sortTest);\r\n    }\r\n}\r\n\r\n\r\ntype GridRowFilter = {\r\n    filter: (row: GridRowModel) => boolean;\r\n}\r\n\r\ninterface GridColumnInit {\r\n    name: string,\r\n    type: NumberConstructor | StringConstructor | DateConstructor,\r\n    label: string,\r\n    extract: (row: GridRowModel) => string,\r\n    filters?: (GridRowFilter & {name: string})[]\r\n}\r\n\r\nclass GridColumnModel extends ModelObject {\r\n    readonly name: string\r\n    readonly type: NumberConstructor | StringConstructor | DateConstructor;\r\n    readonly label: string;\r\n    readonly extract: (row: GridRowModel) => string;\r\n    readonly filters: (GridRowFilter & {name: string})[];\r\n\r\n    @ModelProperty()\r\n    sortorder: number | undefined;\r\n\r\n    constructor(init: GridColumnInit) {\r\n        super();\r\n        const {name, type, label, extract, filters = []} = init;\r\n        this.name = name;\r\n        this.type = type;\r\n        this.label = label;\r\n        this.extract = extract;\r\n        this.filters = filters;\r\n        this.sortorder = 1;\r\n    }\r\n}\r\n\r\nclass GridRowModel extends ModelObject {\r\n    id: number;\r\n\r\n    @ModelProperty()\r\n    name: string;\r\n\r\n    @ModelProperty()\r\n    age: number;\r\n    \r\n    constructor(init: {\r\n        id: number;\r\n        name: string,\r\n        age: number\r\n    }) {\r\n        super();\r\n        const {id, name, age} = init;\r\n        this.id = id;\r\n        this.name = name;\r\n        this.age = age;\r\n    }\r\n}\r\n\r\ninterface GridViewConstructor {\r\n    prototype: GridView;\r\n    new(): GridView;\r\n    new(model: GridModel): GridView;\r\n}\r\n\r\ninterface GridView extends View {\r\n    readonly shadowRoot: ShadowRoot;\r\n    model: GridModel;\r\n    resizable: boolean;\r\n    sortable: boolean;\r\n    setColumnDelegate(delegate: (column: GridColumnModel) => string | Node): void;\r\n    setCellDelegate(delegate: (row: GridRowModel, column: GridColumnModel) => string | Node): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridview\": GridView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-gridview\"\r\n})\r\nclass GridViewBase extends View implements GridView {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly model!: GridModel;\r\n\r\n    #columnDelegate: (column: GridColumnModel) => string | Node;\r\n    #cellDelegate: (row: GridRowModel, column: GridColumnModel) => string | Node;\r\n    \r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    resizable!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    sortable!: boolean;\r\n\r\n    #displayFilters: (GridRowFilter & {name: string})[];\r\n    #searchFilter: GridRowFilter | null;\r\n    \r\n    constructor()\r\n    constructor(model: GridModel)\r\n    constructor(model?: GridModel) {\r\n        super();\r\n        this.#displayFilters = [];\r\n        this.#searchFilter = null;\r\n        this.attachShadow({mode: \"open\"});\r\n        this.#cellDelegate =\r\n            (row: GridRowModel, column: GridColumnModel) =>\r\n                element(\"label\", {\r\n                    children: column.extract(row)\r\n                });\r\n        this.#columnDelegate =\r\n            (column: GridColumnModel) =>\r\n                element(\"label\", {\r\n                    children: column.label\r\n                });\r\n        this.setModel(model ?? new GridModel());\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"resizable\":\r\n            case \"sortable\": {\r\n                this.render();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    get gridElement(): HTMLEGridElement {\r\n        return this.shadowRoot.querySelector(\"e-grid\")!;\r\n    }\r\n\r\n    setColumnDelegate(delegate: (column: GridColumnModel) => string | Node): void {\r\n        this.#columnDelegate = delegate;\r\n    }\r\n\r\n    setCellDelegate(delegate: (row: GridRowModel, column: GridColumnModel) => string | Node): void {\r\n        this.#cellDelegate = delegate;\r\n    }\r\n\r\n    getRowElement(row: GridRowModel): HTMLEGridRowElement | null {\r\n        return this.shadowRoot.querySelector(`e-grid > e-gridbody > e-gridrow[data-index='${row.id}']`);\r\n    }\r\n\r\n    getColumnHeaderElement(column: GridColumnModel): HTMLEGridCellElement | null {\r\n        return this.shadowRoot.querySelector(`e-grid > e-gridhead > e-gridcell[id=${column.name}]`);\r\n    }\r\n    \r\n    getColumnCellsElements(column: GridColumnModel): HTMLEGridCellElement[] {\r\n        return Array.from(this.shadowRoot.querySelectorAll(`e-grid > e-gridbody > e-gridrow > e-gridcell[headers~=${column.name}]`));\r\n    }\r\n\r\n    renderShadow(): Node {\r\n        const {model} = this;\r\n        return fragment(\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/main.css\"\r\n                }\r\n            }),\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/views/gridview.css\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                children: element(\"input\", {\r\n                    attributes: {\r\n                        type: \"search\"\r\n                    },\r\n                    listeners: {\r\n                        input: <EventListener>this.#handleSearchInputEvent.bind(this)\r\n                    }\r\n                })\r\n            }),\r\n            element(\"e-grid\", {\r\n                attributes: {\r\n                    tabindex: 0,\r\n                    selectby: \"row\",\r\n                    multisectable: true\r\n                },\r\n                children: [\r\n                    element(\"e-gridhead\", {\r\n                        children: reactiveChildElements(\r\n                            model.columns, column => this.#renderGridColumnHeaderCell(column)\r\n                        ),\r\n                        listeners: {\r\n                            contextmenu: <EventListener>this.#handleHeadContextMenuEvent.bind(this),\r\n                            click: <EventListener>this.#handleHeadClickEvent.bind(this)\r\n                        }\r\n                    }),\r\n                    element(\"e-gridbody\", {\r\n                        children: reactiveChildElements(\r\n                            model.rows, row => this.#renderGridBodyRow(row)\r\n                        )\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    #filter(row: GridRowModel): boolean {\r\n        const displayFilters = this.#displayFilters;\r\n        const searchFilter = this.#searchFilter;\r\n        return (displayFilters.length > 0 ? displayFilters.some(filter_i => filter_i.filter(row)) : true) &&\r\n        (searchFilter ? searchFilter.filter(row) : true);\r\n    }\r\n\r\n    setSearchFilter(filter: GridRowFilter | null): void {\r\n        const {model, gridElement} = this;\r\n        const {rows} = model;\r\n        this.#searchFilter = filter;\r\n        Array.from(rows.values()).forEach((row_i) => {\r\n            const rowElement = this.getRowElement(row_i);\r\n            if (rowElement) {\r\n                rowElement.hidden = !this.#filter(row_i);\r\n            }\r\n        });\r\n        gridElement.clearSelection();\r\n    }\r\n\r\n    addDisplayFilter(filter: (GridRowFilter & {name: string;})): void {\r\n        const {model, gridElement} = this;\r\n        const {rows} = model;\r\n        const displayFilters = this.#displayFilters;\r\n        if (!displayFilters.includes(filter)) {\r\n            displayFilters.push(filter);\r\n            Array.from(rows.values()).forEach((row_i) => {\r\n                const rowElement = this.getRowElement(row_i);\r\n                console.log(rowElement);\r\n                if (rowElement) {\r\n                    rowElement.hidden = !this.#filter(row_i);\r\n                }\r\n            });\r\n        }\r\n        gridElement.clearSelection();\r\n    }\r\n\r\n    removeDisplayFilter(filter: (GridRowFilter & {name: string;})): void {\r\n        const {model, gridElement} = this;\r\n        const {rows} = model;\r\n        const displayFilters = this.#displayFilters;\r\n        const filterIndex = displayFilters.indexOf(filter);\r\n        if (filterIndex > -1) {\r\n            displayFilters.splice(filterIndex, 1);\r\n            Array.from(rows.values()).forEach((row_i) => {\r\n                const rowElement = this.getRowElement(row_i);\r\n                if (rowElement) {\r\n                    rowElement.hidden = !this.#filter(row_i);\r\n                }\r\n            });\r\n        }\r\n        gridElement.clearSelection();\r\n    }\r\n\r\n    #renderGridColumnHeaderCell(column: GridColumnModel): Element {\r\n        const gridColumnElement = reactiveElement(\r\n            column,\r\n            element(\"e-gridcell\", {\r\n                attributes: {\r\n                    type: \"columnheader\",\r\n                    id: column.name\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            class: \"gridheader-content\"\r\n                        },\r\n                        children: (<Node[]>[\r\n                            element(\"span\", {\r\n                                attributes: {\r\n                                    class: \"gridheader-label\"\r\n                                },\r\n                                children: this.#columnDelegate(column)\r\n                            })\r\n                        ]).concat(\r\n                            this.resizable ? [\r\n                                element(\"e-wsash\", {\r\n                                    attributes: {\r\n                                        controls: column.name\r\n                                    }\r\n                                })\r\n                            ] : []\r\n                        )\r\n                    })\r\n                ]\r\n            }),\r\n            [\"sortorder\"],\r\n            (cell, property, oldValue, newValue) => {\r\n                switch (property) {\r\n                    case \"sortorder\":\r\n                        const {dataset} = cell;\r\n                        if (typeof newValue !== \"undefined\") {\r\n                            dataset.sortorder = newValue.toString();\r\n                        }\r\n                        else {\r\n                            delete dataset.sortorder;\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        );\r\n        return gridColumnElement;\r\n    }\r\n\r\n    #renderGridBodyRow(row: GridRowModel): Element {\r\n        const {model} = this;\r\n        const gridRowElement = element(\"e-gridrow\", {\r\n            dataset: {\r\n                index: row.id\r\n            },\r\n            children: reactiveChildElements(\r\n                model.columns, column => this.#renderGridDataCell(row, column)\r\n            )\r\n        });\r\n        return gridRowElement;\r\n    }\r\n\r\n    #renderGridDataCell(row: GridRowModel, column: GridColumnModel): Element {\r\n        const gridCellElement = element(\"e-gridcell\", {\r\n            attributes: {\r\n                type: \"gridcell\",\r\n                headers: column.name\r\n            },\r\n            children: element(\"span\", {\r\n                attributes: {\r\n                    class: \"gridcell-content\"\r\n                },\r\n                children: (<Node[]>[\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            class: \"gridcell-label\"\r\n                        },\r\n                        children: this.#cellDelegate(row, column)\r\n                    })\r\n                ])\r\n            })\r\n        });\r\n        return gridCellElement;\r\n    }\r\n\r\n    #handleHeadContextMenuEvent(event: MouseEvent): void {\r\n        const {clientX, clientY, currentTarget, target} = event;\r\n        const {gridElement} = this;\r\n        const targetHead = <HTMLElement>currentTarget;\r\n        const targetHeader = <HTMLEGridCellElement>(<HTMLElement>target).closest(\"e-gridcell\");\r\n        const {model} = this;\r\n        if (targetHeader) {\r\n            const column = model.getColumnByName(targetHeader.id)!;\r\n            const contextMenu = element(\"e-menu\",  {\r\n                attributes: {\r\n                    contextual: true,\r\n                },\r\n                children: [\r\n                    element(\"e-menuitem\",  {\r\n                        attributes: {\r\n                            label: \"Resize Auto\"\r\n                        },\r\n                        children: \"Resize auto\",\r\n                        listeners: {\r\n                            click: () => {\r\n                                const columnHeaderElement = this.getColumnHeaderElement(column);\r\n                                if (columnHeaderElement) {\r\n                                    const {style} = columnHeaderElement;\r\n                                    const labels = this.getColumnCellsElements(column).map(\r\n                                        cell_i => cell_i.querySelector(\".gridcell-label\")!\r\n                                    );\r\n                                    const maxWidth = labels.reduce(\r\n                                        (maxWidth, label) => Math.max(maxWidth, label.getBoundingClientRect().width), 0\r\n                                    );\r\n                                    style.setProperty(\"width\", `${maxWidth}px`);\r\n                                }\r\n                                gridElement.focus();\r\n                            }\r\n                        }\r\n                    }),\r\n                    element(\"e-menuitem\",  {\r\n                        attributes: {\r\n                            label: \"Resize To Default\"\r\n                        },\r\n                        children: \"Resize to Default\",\r\n                        listeners: {\r\n                            click: () => {\r\n                                const columnHeaderElement = this.getColumnHeaderElement(column);\r\n                                if (columnHeaderElement) {\r\n                                    const {style} = columnHeaderElement;\r\n                                    style.removeProperty(\"width\");\r\n                                }\r\n                                gridElement.focus();\r\n                            }\r\n                        }\r\n                    }),\r\n                    element(\"e-menuitem\",  {\r\n                        attributes: {\r\n                            type: \"submenu\",\r\n                            label: \"Sort\",\r\n                        },\r\n                        children: [\r\n                            \"Sort\",\r\n                            element(\"e-menu\",  {\r\n                                attributes: {\r\n                                    slot: \"menu\"\r\n                                },\r\n                                children: [\r\n                                    element(\"e-menuitem\",  {\r\n                                        attributes: {\r\n                                            type: \"radio\",\r\n                                            name: \"sort\",\r\n                                            value: \"1\",\r\n                                            label: \"Ascending\"\r\n                                        },\r\n                                        children: \"Ascending\"\r\n                                    }),\r\n                                    element(\"e-menuitem\",  {\r\n                                        attributes: {\r\n                                            type: \"radio\",\r\n                                            name: \"sort\",\r\n                                            value: \"-1\",\r\n                                            label: \"Descending\"\r\n                                        },\r\n                                        children: \"Descending\"\r\n                                    })\r\n                                ],\r\n                                listeners: {\r\n                                    click: (event) => {\r\n                                        const {target} = event;\r\n                                        const targetItem = (<HTMLElement>target).closest(\"e-menuitem\");\r\n                                        if (targetItem) {\r\n                                            model.sortByColumn(column, Number(targetItem.value));\r\n                                        }\r\n                                        gridElement.focus();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    }),\r\n                    element(\"e-menuitem\",  {\r\n                        attributes: {\r\n                            type: \"submenu\",\r\n                            label: \"Filter\"\r\n                        },\r\n                        children: [\r\n                            \"Filter\",\r\n                            element(\"e-menu\",  {\r\n                                attributes: {\r\n                                    slot: \"menu\"\r\n                                },\r\n                                children: column.filters.map((filter_i, i) =>\r\n                                    element(\"e-menuitem\", {\r\n                                        attributes: {\r\n                                            type: \"checkbox\",\r\n                                            checked: this.#displayFilters.includes(filter_i),\r\n                                            label: filter_i.name\r\n                                        },\r\n                                        children: filter_i.name,\r\n                                        listeners: {\r\n                                            click: (event) => {\r\n                                                const {currentTarget} = event;\r\n                                                const targetItem = <HTMLEMenuItemElement>currentTarget;\r\n                                                const {checked} = targetItem;\r\n                                                if (checked) {\r\n                                                    this.addDisplayFilter(filter_i);\r\n                                                }\r\n                                                else {\r\n                                                    this.removeDisplayFilter(filter_i);\r\n                                                }\r\n                                                gridElement.focus();\r\n                                            }\r\n                                        }\r\n                                    })\r\n                                )\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            });\r\n            targetHead.append(contextMenu);\r\n            contextMenu.positionContextual(clientX, clientY);\r\n            contextMenu.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleSearchInputEvent(event: InputEvent) {\r\n        const {target} = event;\r\n        if (target instanceof HTMLInputElement) {\r\n            const {value} = target;\r\n            this.setSearchFilter(value !== \"\" ? {\r\n                filter: (row) => row.name.toLowerCase().includes(value.toLowerCase())\r\n            } : null);\r\n        }\r\n    }\r\n\r\n    #handleHeadClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetIsHeaderLabel = (<HTMLElement>target).matches(\":is(.gridheader-label, .gridheader-label :scope)\");\r\n        if (targetIsHeaderLabel) {\r\n            const targetHeader = <HTMLEGridCellElement>(<HTMLElement>target).closest(\"e-gridcell\");\r\n            const {model} = this;\r\n            const {columns} = model;\r\n            if (targetHeader) {\r\n                const targetColumn = Array.from(columns.values()).find(column_i => column_i.name == targetHeader.id);\r\n                if (targetColumn) {\r\n                    const sortorder = targetColumn.sortorder !== undefined ? -targetColumn.sortorder : 1;\r\n                    model.sortByColumn(targetColumn, sortorder);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar GridView: GridViewConstructor = GridViewBase;","import { HTMLEMenuItemElement } from \"../elements/containers/menus/MenuItem\";\r\nimport { CustomElement, element, reactiveChildElements, reactiveElement } from \"../elements/Element\";\r\nimport { ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\n\r\nexport { MenuModel };\r\nexport { MenuItemModel };\r\nexport { MenuView };\r\n\r\ninterface MenuInit {\r\n    name?: string;\r\n    items: MenuItemModel[];\r\n}\r\n\r\nclass MenuModel extends ModelObject {\r\n    readonly items: ModelList<MenuItemModel>;\r\n    \r\n    @ModelProperty()\r\n    name?: string;\r\n    \r\n    constructor(init: MenuInit) {\r\n        super();\r\n        this.name = init?.name;\r\n        this.items = new ModelList(init?.items ?? []);\r\n    }\r\n}\r\n\r\ninterface MenuItemInit {\r\n    label: string;\r\n    name?: string;\r\n    type?: \"button\" | \"radio\" | \"checkbox\" | \"menu\" | \"submenu\";\r\n    menu?: MenuModel;\r\n}\r\n\r\nclass MenuItemModel extends ModelObject {\r\n    @ModelProperty()\r\n    name?: string;\r\n\r\n    @ModelProperty()\r\n    label: string;\r\n\r\n    @ModelProperty()\r\n    type?: \"button\" | \"radio\" | \"checkbox\" | \"menu\" | \"submenu\";\r\n\r\n    @ModelProperty()\r\n    menu?: MenuModel;\r\n    \r\n    constructor(init: MenuItemInit) {\r\n        super();\r\n        const {name, label, type, menu} = init;\r\n        this.name = name;\r\n        this.label = label;\r\n        this.type = type;\r\n        this.menu = menu;\r\n    }\r\n}\r\n\r\ninterface MenuViewConstructor {\r\n    prototype: MenuView;\r\n    new(): MenuView;\r\n    new(model: MenuModel): MenuView;\r\n}\r\n\r\ninterface MenuView extends View {\r\n    readonly model: MenuModel;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"v-menu\": MenuView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"v-menu\"\r\n})\r\nclass MenuViewBase extends View {\r\n    readonly model!: MenuModel;\r\n\r\n    constructor()\r\n    constructor(model: MenuModel)\r\n    constructor(model?: MenuModel) {\r\n        super();\r\n        this.setModel(model ?? new MenuModel({\r\n            items: []\r\n        }));\r\n    }\r\n\r\n    renderLight() {\r\n        const {model} = this;\r\n        return this.#renderMenu(model);\r\n    }\r\n\r\n    #renderMenu(menu: MenuModel) {\r\n        return element(\"e-menu\", {\r\n            children: reactiveChildElements(\r\n                menu.items,\r\n                item_i => this.#renderMenuItem(item_i)\r\n            )\r\n        });\r\n    }\r\n\r\n    #renderMenuItem(item: MenuItemModel): HTMLEMenuItemElement {\r\n        const {label, type, menu} = item;\r\n        return reactiveElement(\r\n            item,\r\n            element(\"e-menuitem\", {\r\n                attributes: {\r\n                    type: type\r\n                },\r\n                children: [\r\n                    <string | Node>label\r\n                ].concat(\r\n                    (menu !== undefined) ? [\r\n                        this.#renderMenu(menu)\r\n                    ] : []\r\n                )\r\n            }),\r\n            [\"label\", \"name\"],\r\n            (menuitem, property, oldValue, newValue) => {\r\n                switch (property) {\r\n                    case \"label\": {\r\n                        menuitem.label = newValue;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nvar MenuView: MenuViewConstructor = MenuViewBase;","import { HTMLEMenuElement } from \"../elements/containers/menus/Menu\";\r\nimport { HTMLEToolBarElement } from \"../elements/containers/toolbars/ToolBar\";\r\nimport { HTMLETreeElement } from \"../elements/containers/trees/Tree\";\r\nimport { HTMLETreeItemElement } from \"../elements/containers/trees/TreeItem\";\r\nimport { AttributeProperty, CustomElement, element, fragment, reactiveChildElements, reactiveElement } from \"../elements/Element\";\r\nimport { ModelEvent, ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\n\r\nexport { TreeItemModelList };\r\nexport { TreeModel };\r\nexport { TreeItemModel };\r\nexport { TreeView };\r\n\r\ninterface TreeModelInit {\r\n    items: TreeItemModel[];\r\n    sortFunction?: (item_a: TreeItemModel, item_b: TreeItemModel) => number;\r\n}\r\n\r\nclass TreeModel extends ModelObject {\r\n    readonly items: ModelList<TreeItemModel>;\r\n    readonly childItems: ModelList<TreeItemModel>;\r\n    sortFunction: ((item_a: TreeItemModel, item_b: TreeItemModel) => number) | null;\r\n\r\n    constructor()\r\n    constructor(init: TreeModelInit)\r\n    constructor(init?: TreeModelInit) {\r\n        super();\r\n        const {items = [], sortFunction} = init ?? {};\r\n        items.forEach((item_i, i) => item_i.index = i);\r\n        const childItems = new ModelList(items);\r\n        childItems.setParent(this);\r\n        this.childItems = childItems;\r\n        this.items = new ModelList(this.subtreeItems());\r\n        this.sortFunction = sortFunction ??\r\n            function(item_a: TreeItemModel, item_b: TreeItemModel) {\r\n                return item_a.name.localeCompare(item_b.name);\r\n            };\r\n        this.addEventListener(\"modelchange\", this.#handleModelChangeEvent.bind(this));\r\n    }\r\n    \r\n    #handleModelChangeEvent(event: ModelEvent): void {\r\n        const {target} = event;\r\n        const {items, sortFunction, subtreeItems} = this;\r\n        if (target instanceof ModelList) {\r\n            const records = target.getRecords();\r\n            records.forEach((record_i) => {\r\n                const {insertedItems, removedItems} = record_i;\r\n                const flattenedInsertedItems = (<TreeItemModel[]>Array.from(insertedItems.values())).flatMap(\r\n                    insertedItem_i => Array.of(insertedItem_i, ...subtreeItems.call(insertedItem_i))\r\n                );\r\n                const flattenedRemovedItems = (<TreeItemModel[]>Array.from(removedItems.values())).flatMap(\r\n                    removedItem_i => Array.of(removedItem_i, ...subtreeItems.call(removedItem_i))\r\n                );\r\n                items.beginChanges();\r\n                items.append(...flattenedInsertedItems);\r\n                flattenedRemovedItems.forEach((removedItem_i) => items.remove(removedItem_i));\r\n                if (sortFunction) items.sort(sortFunction);\r\n                items.endChanges();\r\n            });\r\n            Array.from((<ModelList<TreeItemModel>>target).values()).forEach((item_i, i) => {\r\n                item_i.index = i;\r\n            });\r\n        }\r\n    }\r\n\r\n    subtreeItems(): TreeItemModel[] {\r\n        const {childItems} = this;\r\n        return Array.from(childItems.values()).flatMap(\r\n            treeItem_i => Array.of(treeItem_i, ...treeItem_i.subtreeItems())\r\n        );\r\n    }\r\n\r\n    getItemByUri(this: TreeModel | TreeItemModel, uri: string): TreeItemModel | null {\r\n        const {childItems} = this;\r\n        const {length: itemsCount} = childItems;\r\n        const {length: uriLength} = uri;\r\n        for (let i = 0; i < itemsCount; i++) {\r\n            const item_i = childItems.get(i)!;\r\n            const {uri: itemUri} = item_i;\r\n            const {length: itemUriLength} = itemUri;\r\n            if (uri.startsWith(itemUri)) {\r\n                if (itemUriLength === uriLength) {\r\n                    return <TreeItemModel>item_i;\r\n                }\r\n                return TreeModel.prototype.getItemByUri.call(item_i, uri);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\nclass TreeItemModelList {\r\n    readonly items: TreeItemModel[];\r\n\r\n    constructor(items: TreeItemModel[]) {\r\n        this.items = items;\r\n    }\r\n\r\n    get count(): number {\r\n        return this.items.length;\r\n    }\r\n\r\n    remove(): void {\r\n        const {items} = this;\r\n        const removedItemsGroups = items.reduce((map, item_i) => {\r\n            const {parentNode} = item_i;\r\n            if (parentNode instanceof TreeItemModel || parentNode instanceof TreeModel) {\r\n                const {childItems} = parentNode;\r\n                const group = map.get(childItems);\r\n                if (group) group.push(item_i);\r\n                else map.set(childItems, [item_i]);\r\n            }\r\n            return map;\r\n        }, new Map<ModelList, TreeItemModel[]>());\r\n        Array.from(removedItemsGroups.entries()).forEach(\r\n            ([list_i, children_i]) => {\r\n                list_i.beginChanges();\r\n                children_i.forEach((child_i) => {\r\n                    list_i.remove(child_i);\r\n                });\r\n                list_i.endChanges();\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nclass TreeItemModel extends ModelObject {\r\n    readonly childItems: ModelList<TreeItemModel>;\r\n\r\n    @ModelProperty()\r\n    name: string;\r\n    \r\n    @ModelProperty()\r\n    type: \"leaf\" | \"parent\";\r\n\r\n    @ModelProperty()\r\n    index: number;\r\n\r\n    get level(): number {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return parentNode.level + 1;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    get uri(): string {\r\n        const {parentNode, name} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return `${parentNode.uri}${name}/`;\r\n        }\r\n        return `${name}/`;\r\n    }\r\n\r\n    get parentItem(): TreeItemModel | null {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return parentNode;\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    constructor(init: {name: string, type: \"leaf\" | \"parent\", items?: TreeItemModel[]}) {\r\n        super();\r\n        const {name, type, items = []} = init;\r\n        items.forEach((item_i, i) => item_i.index = i);\r\n        const childItems = new ModelList(items);\r\n        childItems.setParent(this);\r\n        this.name = name;\r\n        this.childItems = childItems;\r\n        this.type = type;\r\n        this.index = -1;\r\n    }\r\n\r\n    subtreeItems(): TreeItemModel[] {\r\n        const {childItems} = this;\r\n        return Array.from(childItems.values()).flatMap(\r\n            treeItem_i => Array.of(treeItem_i, ...treeItem_i.subtreeItems())\r\n        );\r\n    }\r\n\r\n    remove(): void {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel || parentNode instanceof TreeModel) {\r\n            const {childItems} = parentNode;\r\n            if (childItems) {\r\n                childItems.remove(this);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface TreeViewConstructor {\r\n    prototype: TreeView;\r\n    new(): TreeView;\r\n    new(model: TreeModel): TreeView;\r\n}\r\n\r\ninterface TreeView extends View {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly model: TreeModel;\r\n    setModel(model: TreeModel): void;\r\n    renderShadow(): Node;\r\n    draggable: boolean;\r\n    selectedItems(): TreeItemModel[];\r\n    activeItem(): TreeItemModel | null;\r\n    get treeElement(): HTMLETreeElement | null ;\r\n    treeItemElement(item: TreeItemModel): HTMLETreeItemElement | null ;\r\n    itemContentDelegate(this: TreeView, item: TreeItemModel): string | Node;\r\n    itemToolbarDelegate(this: TreeView, item: TreeItemModel): HTMLEToolBarElement | null;\r\n    itemMenuDelegate(this: TreeView): HTMLEMenuElement | null;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeview\": TreeView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-treeview\"\r\n})\r\nclass TreeViewBase extends View implements TreeView {\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly model!: TreeModel;\r\n\r\n    #dragImages: WeakMap<TreeItemModel, WeakRef<Element>>;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    draggable!: boolean;\r\n    \r\n    constructor()\r\n    constructor(model: TreeModel)\r\n    constructor(model?: TreeModel) {\r\n        super();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.#dragImages = new WeakMap();\r\n        this.setModel(model ?? new TreeModel());\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"draggable\": {\r\n                const {treeElement} = this;\r\n                if (treeElement) {\r\n                    Array.from(treeElement.items).forEach(\r\n                        item_i => item_i.draggable = newValue !== null\r\n                    );\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    get treeElement(): HTMLETreeElement | null {\r\n        return this.shadowRoot.querySelector<HTMLETreeElement>(\"e-tree\")!;\r\n    }\r\n\r\n    treeItemElement(item: TreeItemModel): HTMLETreeItemElement | null  {\r\n        return this.shadowRoot.querySelector<HTMLETreeItemElement>(`e-treeitem[uri=${item.uri}]`)!;\r\n    }\r\n\r\n    override renderShadow(): Node {\r\n        const {model} = this;\r\n        const treeElement = element(\"e-tree\", {\r\n            attributes: {\r\n                tabindex: 0,\r\n            },\r\n            children: reactiveChildElements(\r\n                model.childItems, item => this.#renderTreeItem(item)\r\n            ),\r\n            listeners: {\r\n                dragstart: <EventListener>this.#handleDragStartEvent.bind(this),\r\n                drop: <EventListener>this.#handleDropEvent.bind(this),\r\n                contextmenu: <EventListener>this.#handleContextMenuEvent.bind(this),\r\n                focus: <EventListener>this.#handleFocusEvent.bind(this),\r\n                focusin: <EventListener>this.#handleFocusInEvent.bind(this),\r\n                focusout: <EventListener>this.#handleFocusOutEvent.bind(this),\r\n            }\r\n        });\r\n        return fragment(\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/main.css\"\r\n                }\r\n            }),\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/views/treeview.css\"\r\n                }\r\n            }),\r\n            treeElement,\r\n            element(\"slot\"),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    class: \"offscreen\",\r\n                    hidden: true\r\n                },\r\n                children: reactiveChildElements(model.items,\r\n                    item => this.#renderTreeItemDragImage(item)\r\n                )\r\n            })\r\n        );\r\n    }\r\n\r\n    itemContentDelegate(item: TreeItemModel): string | Node {\r\n        return reactiveElement(\r\n            item,\r\n            element(\"span\"),\r\n            [\"name\"],\r\n            (label, property, oldValue, newValue) => {\r\n                label.textContent = newValue;\r\n            }\r\n        );\r\n    }\r\n\r\n    itemToolbarDelegate(item: TreeItemModel): HTMLEToolBarElement | null {\r\n        return null;\r\n    }\r\n    \r\n    itemMenuDelegate(this: TreeView): HTMLEMenuElement | null {\r\n        return null;\r\n    }\r\n\r\n    selectedItems(): TreeItemModel[] {\r\n        const {model, treeElement} = this;\r\n        if (treeElement) {\r\n            const selectedElements = treeElement.selectedItems();\r\n            return selectedElements.map(\r\n                item_i => <TreeItemModel>model.getItemByUri(item_i.dataset.uri!)\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    activeItem(): TreeItemModel | null {\r\n        const {model, treeElement} = this;\r\n        if (treeElement) {\r\n        const {activeItem} = treeElement;\r\n            return activeItem ?\r\n                model.getItemByUri(activeItem?.dataset.uri!) : null;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #getDragImage(model: TreeItemModel): Element | null {\r\n        return this.#dragImages.get(model)?.deref() ?? null;\r\n    }\r\n\r\n    #renderTreeItem(item: TreeItemModel): HTMLETreeItemElement {\r\n        const {draggable} = this;\r\n        const {index, level, uri} = item;\r\n        const toolbar = this.itemToolbarDelegate(item);\r\n        const content = this.itemContentDelegate(item);\r\n        const treeItemElement = reactiveElement(\r\n            item,\r\n            element(\"e-treeitem\", {\r\n                attributes: {\r\n                    draggable: String(draggable),\r\n                    posinset: index,\r\n                    level: level\r\n                },\r\n                dataset: {\r\n                    uri: uri\r\n                },\r\n                children: [\r\n                    ...(content ? [content] : []),\r\n                    ...(toolbar ? [toolbar] : [])\r\n                ]\r\n            }),\r\n            [\"index\", \"name\", \"type\"],\r\n            (treeitem, propertyName, oldValue, newValue) => {\r\n                switch (propertyName) {\r\n                    case \"index\": {\r\n                        treeitem.posinset = newValue;\r\n                        break;\r\n                    }\r\n                    case \"name\": {\r\n                        const {dataset} = treeitem;\r\n                        const {uri} = item;\r\n                        dataset.uri = uri;\r\n                        const oldUri = uri.replace(`${newValue}/`, `${oldValue}/`);\r\n                        const subtreeItems = treeitem.querySelectorAll(\"e-treeitem\");\r\n                        subtreeItems.forEach(\r\n                            (item_i) => {\r\n                                const {dataset} = item_i;\r\n                                dataset.uri = dataset.uri!.replace(oldUri, uri);\r\n                            }\r\n                        );\r\n                        break;\r\n                    }\r\n                    case \"type\": {\r\n                        treeitem.type = newValue;\r\n                        switch (newValue) {\r\n                            case \"parent\": {\r\n                                treeitem.append(\r\n                                    element(\"e-treeitemgroup\", {\r\n                                        attributes: {\r\n                                            slot: \"group\"\r\n                                        },\r\n                                        children: reactiveChildElements(item.childItems,\r\n                                            item => this.#renderTreeItem(item)\r\n                                        )\r\n                                    })\r\n                                );\r\n                                break;\r\n                            }\r\n                            case \"leaf\": {\r\n                                const {group} = treeitem;\r\n                                if (group) {\r\n                                    group.remove();\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        );\r\n        return treeItemElement;\r\n    }\r\n\r\n    #renderTreeItemDragImage(item: TreeItemModel): Element {\r\n        const dragImageElement = reactiveElement(\r\n            item,\r\n            element(\"span\", {\r\n                attributes: {\r\n                    class: \"dragimage\"\r\n                }\r\n            }),\r\n            [\"name\"],\r\n            (span, property, oldValue, newValue) => {\r\n                span.textContent = newValue;\r\n            }\r\n        );\r\n        this.#dragImages.set(item, new WeakRef(dragImageElement));\r\n        return dragImageElement;\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLETreeElement>currentTarget;\r\n        const targetItem = <HTMLETreeItemElement>(<Element>target).closest(\"e-treeitem\");\r\n        const {model} = this;\r\n        if (targetItem) {\r\n            const {dataTransfer} = event;\r\n            const selectedElements = targetTree.selectedItems();\r\n            const {length: selectedCount} = selectedElements;\r\n            if (selectedCount > 0) {\r\n                const selectedUris = \r\n                    selectedElements\r\n                    .map(element_i => element_i.dataset.uri!)\r\n                    .filter(\r\n                        (uri_i, _, uris) => !uris.some(\r\n                            uri_j => uri_i.startsWith(`${uri_j}/`)\r\n                        )\r\n                    );\r\n                const selectedUrisString = selectedUris.join(\"\\n\");\r\n                const lastUri = selectedUris[selectedUris.length - 1];\r\n                const lastItem = model.getItemByUri(lastUri);\r\n                if (lastItem && dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", selectedUrisString);\r\n                    const dragImage = this.#getDragImage(lastItem);\r\n                    if (dragImage) {\r\n                        dataTransfer.setDragImage(dragImage, -16, 0);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLETreeElement>currentTarget;\r\n        const targetItem = <HTMLETreeItemElement>(<Element>target).closest(\"e-treeitem\");\r\n        const {model} = this;\r\n        const {sortFunction} = model;\r\n        if (targetItem) {\r\n            const {dataTransfer} = event;\r\n            if (dataTransfer) {\r\n                const targetUri = targetItem.dataset.uri!;\r\n                const targetItemModel = model.getItemByUri(targetUri)!;\r\n                const transferedUris = dataTransfer.getData(\"text/plain\").split(\"\\n\");\r\n                const targetIsWithin = transferedUris.some(uri_i => targetUri.startsWith(`${uri_i}/`) || uri_i === targetUri);\r\n                if (!targetIsWithin) {\r\n                    const transferedItems = <TreeItemModel[]>(\r\n                        transferedUris.map(\r\n                            uri_i => model.getItemByUri(uri_i)\r\n                        ).filter(\r\n                            item_i => item_i !== null\r\n                        )\r\n                    );\r\n                    const {type: targetType, parentItem: targetParentItem} = targetItemModel;\r\n                    const {childItems: targetList} =\r\n                        targetType === \"parent\" ? targetItemModel :\r\n                        targetParentItem ? targetParentItem : model;\r\n                    const targetItems = Array.from(targetList.values());\r\n                    targetItems.forEach((item_i) => {\r\n                        const sameLabelIndex = transferedItems.findIndex(item_j => item_j.name === item_i.name);\r\n                        if (sameLabelIndex > -1) {\r\n                            const doReplace = confirm(`Replace ${item_i.name}?`);\r\n                            if (doReplace) {\r\n                                targetList.remove(item_i);\r\n                            }\r\n                            else {\r\n                                transferedItems.copyWithin(sameLabelIndex, sameLabelIndex + 1);\r\n                                transferedItems.length--;\r\n                            }\r\n                        }\r\n                    });\r\n                    const transferedItemsModelList = new TreeItemModelList(transferedItems);\r\n                    transferedItemsModelList.remove();\r\n                    if (sortFunction) {\r\n                        targetList.beginChanges();\r\n                        targetList.append(...transferedItems);\r\n                        targetList.sort(sortFunction);\r\n                        targetList.endChanges();\r\n                    }\r\n                    else {\r\n                        targetList.insert(targetItem.posinset, ...transferedItems);\r\n                    }\r\n                    const newElements = targetTree.querySelectorAll<HTMLETreeItemElement>(`e-treeitem:is(${\r\n                        transferedItems.map(item_i => `[data-uri=\"${item_i.uri}\"]`).join(\",\")\r\n                    })`);\r\n                    targetTree.beginSelection();\r\n                    newElements.forEach(element_i => element_i.selected = true);\r\n                    targetTree.endSelection();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        const {clientX, clientY, currentTarget, target} = event;\r\n        const targetTree = <HTMLETreeElement>currentTarget;\r\n        const targetItem = <HTMLETreeItemElement>(<Element>target).closest(\"e-treeitem\");\r\n        if (targetItem) {\r\n            const contextMenu = this.itemMenuDelegate();\r\n            if (contextMenu !== null) {\r\n                contextMenu.contextual = true;\r\n                contextMenu.addEventListener(\"close\", () => {\r\n                    targetItem.focus({preventScroll: true});\r\n                });\r\n                targetTree.append(contextMenu);\r\n                contextMenu.positionContextual(clientX, clientY);\r\n                contextMenu.focus({preventScroll: true});\r\n            }\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLETreeElement>currentTarget;\r\n        if (relatedTarget !== null  && !this.contains(<Node | null>relatedTarget)) {\r\n            const relatedPosition = (<Node>relatedTarget).compareDocumentPosition(this);\r\n            if (!(relatedPosition & Node.DOCUMENT_POSITION_DISCONNECTED) && (relatedPosition & Node.DOCUMENT_POSITION_PRECEDING)) {\r\n                const {activeItem} = targetTree;\r\n                if (activeItem) {\r\n                    const itemToolbar = activeItem.querySelector(\"e-toolbar\");\r\n                    if (itemToolbar) {\r\n                        event.preventDefault();\r\n                        itemToolbar.focus();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetItem = <HTMLETreeItemElement>(<Element>target).closest(\"e-treeitem\");\r\n        if (targetItem) {\r\n            const itemToolbar = targetItem.querySelector(\"e-toolbar\");\r\n            if (itemToolbar) {\r\n                itemToolbar.tabIndex = itemToolbar.contains(<Node | null>target) ? -1 : 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetItem = <HTMLETreeItemElement>(<Element>target).closest(\"e-treeitem\");\r\n        if (targetItem) {\r\n            const itemToolbar = targetItem.querySelector(\"e-toolbar\");\r\n            if (itemToolbar) {\r\n                itemToolbar.tabIndex = itemToolbar.contains(<Node | null>target) ? 0 : -1;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar TreeView: TreeViewConstructor = TreeViewBase;","import { HTMLEMenuElement } from \"./src/elements/containers/menus/Menu\";\r\nimport { EMenuItem } from \"./src/elements/containers/menus/MenuItem\";\r\nimport { HTMLEToolBarElement } from \"./src/elements/containers/toolbars/ToolBar\";\r\nimport { HTMLEToolBarItemElement } from \"./src/elements/containers/toolbars/ToolBarItem\";\r\nimport { HTMLETreeElement } from \"./src/elements/containers/trees/Tree\";\r\nimport { HTMLETreeItemElement } from \"./src/elements/containers/trees/TreeItem\";\r\nimport { CustomElement, element, fragment, reactiveElement } from \"./src/elements/Element\";\r\nimport { ModelEvent, ModelProperty } from \"./src/models/Model\";\r\nimport { GridColumnModel, GridModel, GridRowModel, GridView } from \"./src/views/GridView\";\r\nimport { MenuItemModel, MenuModel, MenuView } from \"./src/views/MenuView\";\r\nimport { TreeItemModelList, TreeItemModel, TreeModel, TreeView } from \"./src/views/TreeView\";\r\nimport { widget } from \"./src/views/widgets/Widget\";\r\n\r\nclass MyTreeItemModelList extends TreeItemModelList {\r\n    readonly items!: MyTreeItemModel[];\r\n\r\n    constructor(items: MyTreeItemModel[]) {\r\n        super(items);\r\n    }\r\n\r\n    get count(): number {\r\n        return this.items.length;\r\n    }\r\n\r\n    show(): void {\r\n        this.items.forEach(item_i => item_i.show());\r\n    }\r\n\r\n    hide(): void {\r\n        this.items.forEach(item_i => item_i.hide());\r\n    }\r\n\r\n    display(): void {\r\n        const result = this.items.map(item_i => item_i.name).join(\" \");\r\n        console.log(result);\r\n    }\r\n}\r\n\r\nclass MyTreeItemModel extends TreeItemModel {\r\n    \r\n    @ModelProperty()\r\n    childCount: number;\r\n\r\n    @ModelProperty()\r\n    visibility: boolean;\r\n\r\n    constructor(init: {name: string, type: \"leaf\" | \"parent\", items?: TreeItemModel[]}) {\r\n        super(init);\r\n        this.childCount = this.childItems.length;\r\n        this.visibility = true;\r\n        this.addEventListener(\"modelchange\", this.#handleModelChangeEvent.bind(this));\r\n    }\r\n\r\n    show(): void {\r\n        this.visibility = true;\r\n    }\r\n\r\n    hide(): void {\r\n        this.visibility = false;\r\n    }\r\n\r\n    display(): void {\r\n        console.log(this.name);\r\n    }\r\n\r\n    #handleModelChangeEvent(event: ModelEvent): void {\r\n        const {target} = event;\r\n        const {childItems} = this;\r\n        if (target == childItems) {\r\n            this.childCount = childItems.length;\r\n        }\r\n    }\r\n}\r\n\r\nexport async function TreeMain() {\r\n    const gridView = new GridView();\r\n    gridView.resizable = true;\r\n    gridView.setModel(\r\n        new GridModel({\r\n            columns: [\r\n                new GridColumnModel({\r\n                    name: \"name\",\r\n                    type: String,\r\n                    label: \"Name\",\r\n                    extract: (row) => row.name\r\n                }),\r\n                new GridColumnModel({\r\n                    name: \"age\",\r\n                    type: Number,\r\n                    label: \"Age\",\r\n                    extract: (row) => String(row.age),\r\n                    filters: [{\r\n                        name: \"Minors\",\r\n                        filter: (row) => row.age < 18\r\n                    },{\r\n                        name: \"Majors\",\r\n                        filter: (row) => row.age >= 18\r\n                    }]\r\n                }),\r\n                new GridColumnModel({\r\n                    name: \"birthyear\",\r\n                    type: String,\r\n                    label: \"Brith Year\",\r\n                    extract: (row) => String(new Date().getFullYear() - row.age)\r\n                }),\r\n            ],\r\n            rows: [\r\n                new GridRowModel({\r\n                    id: 1,\r\n                    name: \"Denis\",\r\n                    age: 13\r\n                }),\r\n                new GridRowModel({\r\n                    id: 2,\r\n                    name: \"Jean-Charles\",\r\n                    age: 32\r\n                }),\r\n                new GridRowModel({\r\n                    id: 3,\r\n                    name: \"Charles\",\r\n                    age: 25\r\n                }),\r\n                new GridRowModel({\r\n                    id: 4,\r\n                    name: \"Mamagubida\",\r\n                    age: 128\r\n                })\r\n            ]\r\n        })\r\n    );\r\n    document.body.append(gridView);\r\n\r\n    const treeModel = new TreeModel({\r\n        items: [\r\n            new MyTreeItemModel({\r\n                name: \"TI 0\",\r\n                type: \"parent\",\r\n                items: [\r\n                    new MyTreeItemModel({\r\n                        name: \"TI 1A\",\r\n                        type: \"parent\",\r\n                        items: [\r\n                            new MyTreeItemModel({\r\n                                type: \"leaf\",\r\n                                name: \"TI 1AX\"\r\n                            }),\r\n                        ]\r\n                    }),\r\n                    new MyTreeItemModel({\r\n                        type: \"parent\",\r\n                        name: \"TI 1B\"\r\n                    })\r\n                ]\r\n            }),\r\n            new MyTreeItemModel({\r\n                name: \"TI 1\",\r\n                type: \"parent\",\r\n                items: [\r\n                    new MyTreeItemModel({\r\n                        name: \"TI 1A\",\r\n                        type: \"parent\",\r\n                        items: [\r\n                            new MyTreeItemModel({\r\n                                type: \"leaf\",\r\n                                name: \"TI 1AX\"\r\n                            }),\r\n                        ]\r\n                    }),\r\n                    new MyTreeItemModel({\r\n                        type: \"parent\",\r\n                        name: \"TI 1B\"\r\n                    })\r\n                ]\r\n            }),\r\n            new MyTreeItemModel({\r\n                type: \"leaf\",\r\n                name: \"TI 2\"\r\n            }),\r\n            new MyTreeItemModel({\r\n                type: \"leaf\",\r\n                name: \"TI 3\"\r\n            })\r\n        ],\r\n        /*sortFunction: (item_a: TreeItemModel, item_b: TreeItemModel) => {\r\n            const {name: aLabel} = item_a;\r\n            const {name: bLabel} = item_b;\r\n            return bLabel.localeCompare(aLabel);\r\n        }*/\r\n    });\r\n    document.body.append(\r\n        new MenuView(\r\n            new MenuModel({\r\n                items: [\r\n                    new MenuItemModel({\r\n                        label: \"Menuitem 1\",\r\n                        type: \"checkbox\"\r\n                    })\r\n                ]\r\n            })\r\n        )\r\n    );\r\n\r\n    var editDialog: HTMLDialogElement;\r\n\r\n    @CustomElement({\r\n        name: \"e-mytreeview\"\r\n    })\r\n    class MyTreeView extends TreeView {\r\n\r\n        static {\r\n\r\n        }\r\n        override render(): void {\r\n            super.render();\r\n            const {shadowRoot, treeElement} = this;\r\n            shadowRoot.prepend(\r\n                element(\"link\", {\r\n                    attributes: {\r\n                        rel: \"stylesheet\",\r\n                        href: \"css/views/mytreeview.css\"\r\n                    }\r\n                })\r\n            );\r\n            treeElement!.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n            treeElement!.addEventListener(\"dblclick\", this.#handleDoubleClickEvent.bind(this));\r\n        }\r\n\r\n        override itemContentDelegate(item: MyTreeItemModel) {\r\n            return fragment(\r\n                reactiveElement(\r\n                    item,\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            class: \"label\"\r\n                        }\r\n                    }),\r\n                    [\"name\"],\r\n                    (label, property, oldValue, newValue) => {\r\n                        label.textContent = `${item.name}`;\r\n                    }\r\n                ),\r\n                ...(\r\n                    item.type == \"parent\" ? [\r\n                        reactiveElement(\r\n                            item,\r\n                            element(\"span\", {\r\n                                attributes: {\r\n                                    class: \"badge\"\r\n                                }\r\n                            }),\r\n                            [\"childCount\"],\r\n                            (badge, property, oldValue, newValue) => {\r\n                                badge.textContent = `(${newValue})`;\r\n                            }\r\n                        )\r\n                    ] : []\r\n                )\r\n            );\r\n        }\r\n\r\n        override itemToolbarDelegate(this: TreeView, item: MyTreeItemModel): HTMLEToolBarElement {\r\n            return reactiveElement(\r\n                item,\r\n                element(\"e-toolbar\", {\r\n                    children: [\r\n                        element(\"e-toolbaritem\", {\r\n                            attributes: {\r\n                                name: \"visibility\",\r\n                                type: \"checkbox\",\r\n                                label: \"Visibility\",\r\n                                iconed: true\r\n                            },\r\n                            listeners: {\r\n                                click: (event) => {\r\n                                    item.visibility ?\r\n                                        item.hide() :\r\n                                        item.show();\r\n                                    event.stopPropagation();\r\n                                }\r\n                            }\r\n                        })\r\n                    ]\r\n                }),\r\n                [\"visibility\"],\r\n                (toolbar, property, oldValue, newValue) => {\r\n                    switch (property) {\r\n                        case \"visibility\": {\r\n                            const visibilityItem = toolbar\r\n                                .querySelector<HTMLEToolBarItemElement>(\"e-toolbaritem[name=visibility]\");\r\n                            if (visibilityItem) {\r\n                                const label = newValue ? \"Hide\" : \"Show\";\r\n                                visibilityItem.label = label;\r\n                                visibilityItem.title = label;\r\n                                visibilityItem.pressed = newValue;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            )\r\n        }\r\n\r\n        override itemMenuDelegate(this: TreeView): HTMLEMenuElement {\r\n            const {treeElement} = this;\r\n            const {activeItem: activeItemElement} = treeElement!;\r\n            const selectedItems = <MyTreeItemModel[]>this.selectedItems();\r\n            const activeItem = <MyTreeItemModel>this.activeItem();\r\n            return element(\"e-menu\", {\r\n                attributes: {\r\n                    contextual: true\r\n                },\r\n                children: [\r\n                    element(\"e-menuitemgroup\", {\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                attributes: {\r\n                                    type: \"checkbox\",\r\n                                    label: activeItem.visibility ? \"Hide\" : \"Show\"\r\n                                },\r\n                                children: activeItem.visibility ? \"Hide\" : \"Show\",\r\n                                listeners: {\r\n                                    click: () => {\r\n                                        const selectedItemsList = selectedItems.includes(activeItem) ?\r\n                                            new MyTreeItemModelList(selectedItems) : new MyTreeItemModelList([activeItem]);\r\n                                        activeItem.visibility ?\r\n                                            selectedItemsList.hide() :\r\n                                            selectedItemsList.show();\r\n                                        activeItemElement!.focus();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    }),\r\n                    element(\"e-separator\"),\r\n                    element(\"e-menuitemgroup\", {\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                attributes: {\r\n                                    label: \"Delete\"\r\n                                },\r\n                                children: \"Delete\",\r\n                                listeners: {\r\n                                    click: () => {\r\n                                        const selectedItemsList = selectedItems.includes(activeItem) ?\r\n                                            new MyTreeItemModelList(selectedItems) : new MyTreeItemModelList([activeItem]);\r\n                                        const {count} = selectedItemsList;\r\n                                        const doRemove = confirm(`Remove ${count} items?`);\r\n                                        if (doRemove) {\r\n                                            selectedItemsList.remove();\r\n                                        }\r\n                                        treeElement!.focus();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            });\r\n        }\r\n\r\n        #handleKeyDownEvent(event: KeyboardEvent) {\r\n            const {currentTarget, target, key} = event;\r\n            const targetTree = <HTMLETreeElement>currentTarget;\r\n            const targetItem = <HTMLETreeItemElement>(<Element>target).closest(\"e-treeitem\");\r\n            const selectedItems = this.selectedItems();\r\n            const {model} = this;\r\n            const targetItemModel = <MyTreeItemModel>model.getItemByUri(targetItem.dataset.uri!)!;\r\n            switch (key) {\r\n                case \"Delete\": {\r\n                    const selectedItemsList = selectedItems.includes(targetItemModel) ?\r\n                        new TreeItemModelList(selectedItems) : new TreeItemModelList([targetItemModel]);\r\n                    const {count} = selectedItemsList;\r\n                    const doRemove = confirm(`Remove ${count} items?`);\r\n                    if (doRemove) {\r\n                        selectedItemsList.remove();\r\n                    }\r\n                    targetTree.focus();\r\n                    event.preventDefault();\r\n                    break;\r\n                }\r\n                case \"Enter\": {\r\n                    this.editItem(targetItemModel);\r\n                    event.preventDefault();\r\n                }\r\n            }\r\n        }\r\n\r\n        editItem(item: MyTreeItemModel): void {\r\n            const {shadowRoot} = this;\r\n            const dialog = element(\"dialog\", {\r\n                children: [\r\n                    element(\"form\", {\r\n                        attributes: {\r\n                            method: \"dialog\"\r\n                        },\r\n                        children: [\r\n                            element(\"e-tablist\", {\r\n                                children: [\r\n                                    element(\"e-tab\", {\r\n                                        attributes: {\r\n                                            controls: \"properties\"\r\n                                        },\r\n                                        children: \"Properties\"\r\n                                    })\r\n                                ]\r\n                            }),\r\n                            element(\"e-tabpanel\", {\r\n                                attributes: {\r\n                                    id: \"properties\"\r\n                                },\r\n                                children: [\r\n                                    element(\"fieldset\", {\r\n                                        children: [\r\n                                            element(\"legend\", {\r\n                                                children: \"Item information\"\r\n                                            }),\r\n                                            element(\"div\", {\r\n                                                attributes: {\r\n                                                    class: \"form-content\"\r\n                                                },\r\n                                                children: [\r\n                                                    element(\"label\", {\r\n                                                        attributes: {\r\n                                                            for: \"visibility\"\r\n                                                        },\r\n                                                        children: \"Visibility\"\r\n                                                    }),\r\n                                                    element(\"input\", {\r\n                                                        attributes: {\r\n                                                            id: \"visibility\",\r\n                                                            type: \"checkbox\",\r\n                                                            name: \"visibility\",\r\n                                                            checked: item.visibility\r\n                                                        }\r\n                                                    }),\r\n                                                    element(\"label\", {\r\n                                                        attributes: {\r\n                                                            for: \"name\"\r\n                                                        },\r\n                                                        children: \"Name\"\r\n                                                    }),\r\n                                                    element(\"input\", {\r\n                                                        attributes: {\r\n                                                            id: \"name\",\r\n                                                            type: \"text\",\r\n                                                            name: \"name\",\r\n                                                            value: item.name\r\n                                                        }\r\n                                                    }),\r\n                                                    element(\"label\", {\r\n                                                        attributes: {\r\n                                                            for: \"type\"\r\n                                                        },\r\n                                                        children: \"Type\"\r\n                                                    }),\r\n                                                    element(\"select\", {\r\n                                                        attributes: {\r\n                                                            id: \"type\",\r\n                                                            name: \"type\"\r\n                                                        },\r\n                                                        children: [\"parent\", \"leaf\"].map(\r\n                                                            type_i => element(\"option\", {\r\n                                                                attributes: {\r\n                                                                    label: type_i,\r\n                                                                    value: type_i,\r\n                                                                    selected: item.type === type_i\r\n                                                                }\r\n                                                            })\r\n                                                        )\r\n                                                    })\r\n                                                ]\r\n                                            })\r\n                                        ]\r\n                                    })\r\n                                ]\r\n                            }),\r\n                            element(\"e-tabpanel\", {\r\n                                attributes: {\r\n                                    id: \"two\"\r\n                                },\r\n                            }),\r\n                            element(\"footer\", {\r\n                                attributes: {\r\n                                    class: \"dialog-footer\"\r\n                                },\r\n                                children: [\r\n                                    element(\"button\", {\r\n                                        attributes: {\r\n                                            type: \"submit\",\r\n                                            value: \"confirm\"\r\n                                        },\r\n                                        children: \"Confirm\"\r\n                                    }),\r\n                                    element(\"button\", {\r\n                                        attributes: {\r\n                                            value: \"cancel\"\r\n                                        },\r\n                                        children: \"Cancel\"\r\n                                    })\r\n                                ]\r\n                            })\r\n                        ]\r\n                    })\r\n                ],\r\n                listeners: {\r\n                    close: (event) => {\r\n                        const {currentTarget} = event;\r\n                        const targetDialog = <HTMLDialogElement>currentTarget;\r\n                        if (targetDialog.returnValue === \"confirm\") {\r\n                            const form = targetDialog.querySelector(\"form\")!;\r\n                            const formData = new FormData(form);\r\n                            item.visibility = Boolean(formData.get(\"visibility\"));\r\n                            item.type = <\"leaf\" | \"parent\">String(formData.get(\"type\"));\r\n                            item.name = String(formData.get(\"name\"));\r\n                        }\r\n                        targetDialog.remove();\r\n                    }\r\n                }\r\n            });\r\n            shadowRoot.append(dialog);\r\n            dialog.showModal();\r\n        }\r\n\r\n        #handleDoubleClickEvent(event: MouseEvent): void {\r\n            const {target} = event;\r\n            const targetItem = <HTMLETreeItemElement>(<Element>target).closest(\"e-treeitem\");\r\n            const {model} = this;\r\n            const targetItemModel = <MyTreeItemModel>model.getItemByUri(targetItem.dataset.uri!);\r\n            if (targetItemModel) {\r\n                this.editItem(targetItemModel);\r\n            }\r\n        }\r\n    };\r\n\r\n    const treeView = new MyTreeView();\r\n    treeView.draggable = true;\r\n    treeView.setModel(treeModel);\r\n    treeView.render();\r\n    document.body.append(treeView);\r\n\r\n    document.body.append(\r\n        element(\"e-menubar\", {\r\n            children: [\r\n                element(\"e-menuitem\", {\r\n                    attributes: {\r\n                        type: \"menu\",\r\n                        label: \"Menu 1\",\r\n                        disabled: true\r\n                    },\r\n                    children: [\r\n                        \"Menu 1\"\r\n                    ]\r\n                }),\r\n                element(\"e-menuitem\", {\r\n                    attributes: {\r\n                        type: \"menu\",\r\n                        label: \"Menu 1\"\r\n                    },\r\n                    children: [\r\n                        \"Menu 1\",\r\n                        element(\"e-menu\", {\r\n                            attributes: {\r\n                                slot: \"menu\"\r\n                            },\r\n                            children: [\r\n                                element(\"e-menuitem\", {\r\n                                    attributes: {\r\n                                        type: \"checkbox\"\r\n                                    },\r\n                                    children: \"Hey\"\r\n                                }),\r\n                                element(\"e-menuitem\", {\r\n                                    attributes: {\r\n                                        type: \"submenu\"\r\n                                    },\r\n                                    children: [\r\n                                        \"Submenu 1\",\r\n                                        element(\"e-menu\", {\r\n                                            attributes: {\r\n                                                slot: \"menu\"\r\n                                            },\r\n                                            children: [\r\n                                                /*element(\"e-menuitem\", {\r\n                                                    attributes: {\r\n                                                        type: \"checkbox\"\r\n                                                    },\r\n                                                    children: \"Yo\"\r\n                                                })*/\r\n                                                new EMenuItem({\r\n                                                    label: \"Yo\"\r\n                                                })\r\n                                            ]\r\n                                        })\r\n                                    ]\r\n                                })\r\n                            ]\r\n                        })\r\n                    ]\r\n                }),\r\n                element(\"e-menuitem\", {\r\n                    attributes: {\r\n                        type: \"menu\",\r\n                        label: \"Menu 1\"\r\n                    },\r\n                    children: [\r\n                        \"Menu 1\",\r\n                        element(\"e-menu\", {\r\n                            attributes: {\r\n                                slot: \"menu\"\r\n                            },\r\n                            children: [\r\n                                element(\"e-menuitem\", {\r\n                                    attributes: {\r\n                                        type: \"checkbox\"\r\n                                    },\r\n                                    children: \"Hey\"\r\n                                })\r\n                            ]\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        })\r\n    );\r\n        \r\n    /*const menuView = widget(\"menubar\", {\r\n        slotted: [\r\n            widget(\"menuitem\", {\r\n                properties: {\r\n                    label: \"MenuItem 0\",\r\n                    name: \"MenuItem 0\",\r\n                    type: \"menu\",\r\n                    disabled: true\r\n                },\r\n                slotted: [\r\n                    widget(\"menu\", {\r\n                        slotted: [\r\n                            widget(\"menuitem\", {\r\n                                properties: {\r\n                                    label: \"MenuItem 1\",\r\n                                    name: \"MenuItem 1\",\r\n                                    type: \"checkbox\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            widget(\"menuitem\", {\r\n                properties: {\r\n                    label: \"MenuItem 0\",\r\n                    name: \"MenuItem 0\",\r\n                    type: \"menu\"\r\n                },\r\n                slotted: [\r\n                    widget(\"menu\", {\r\n                        slotted: [\r\n                            widget(\"menuitem\", {\r\n                                properties: {\r\n                                    label: \"MenuItem 1\",\r\n                                    name: \"MenuItem 1\",\r\n                                    type: \"checkbox\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            widget(\"menuitem\", {\r\n                properties: {\r\n                    label: \"MenuItem 1\",\r\n                    name: \"MenuItem 1\",\r\n                    type: \"menu\"\r\n                },\r\n                slotted: [\r\n                    widget(\"menu\", {\r\n                        slotted: [\r\n                            widget(\"menuitemgroup\", {\r\n                                slotted: [\r\n                                    widget(\"menuitem\", {\r\n                                        properties: {\r\n                                            label: \"MenuItem 1\",\r\n                                            type: \"checkbox\",\r\n                                            keyshortcut: \"Ctrl+B\",\r\n                                            disabled: true,\r\n                                            checked: true\r\n                                        }\r\n                                    }),\r\n                                    widget(\"menuitem\", {\r\n                                        properties: {\r\n                                            type: \"button\",\r\n                                            label: \"MenuItem 2\",\r\n                                            keyshortcut: \"Ctrl+A\"\r\n                                        }\r\n                                    })\r\n                                ]\r\n                            }),\r\n                            widget(\"separator\"),\r\n                            widget(\"menuitem\", {\r\n                                properties: {\r\n                                    label: \"Submenu\",\r\n                                    type: \"submenu\"\r\n                                },\r\n                                slotted: [\r\n                                    widget(\"menu\", {\r\n                                        slotted: [\r\n                                            widget(\"menuitem\", {\r\n                                                properties: {\r\n                                                    label: \"MenuItem 1\",\r\n                                                    type: \"radio\",\r\n                                                    name: \"radio\",\r\n                                                    value: \"1\"\r\n                                                }\r\n                                            }),\r\n                                            widget(\"menuitem\", {\r\n                                                properties: {\r\n                                                    type: \"radio\",\r\n                                                    label: \"MenuItem 2\",\r\n                                                    name: \"radio\",\r\n                                                    value: \"2\"\r\n                                                }\r\n                                            }),\r\n                                            widget(\"menuitem\", {\r\n                                                properties: {\r\n                                                    type: \"radio\",\r\n                                                    label: \"MenuItem 3\",\r\n                                                    name: \"radio\",\r\n                                                    value: \"3\"\r\n                                                }\r\n                                            })\r\n                                        ]\r\n                                    })\r\n                                ]\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        ]\r\n    })\r\n    document.body.append(menuView);\r\n\r\n    document.body.append(\r\n        widget(\"combobox\", {\r\n            slotted: [\r\n                widget(\"option\",  {\r\n                    properties: {\r\n                        label: \"First option\"\r\n                    }\r\n                }),\r\n                widget(\"option\",  {\r\n                    properties: {\r\n                        label: \"Second option\"\r\n                    }\r\n                }),\r\n                widget(\"option\",  {\r\n                    properties: {\r\n                        label: \"Third option\",\r\n                        selected: true\r\n                    }\r\n                })\r\n            ]\r\n        })\r\n    );*/\r\n\r\n    /*document.body.append(\r\n        widget(\"toolbar\", {\r\n            slotted: [\r\n                widget(\"toolbaritem\",  {\r\n                    properties: {\r\n                        type: \"menubutton\"\r\n                    },\r\n                    slotted: [\r\n                        \"Yo!\",\r\n                        widget(\"menu\", {\r\n                            slotted: [\r\n                                widget(\"menuitem\", {\r\n                                    properties: {\r\n                                        label: \"MenuItem 1\",\r\n                                        type: \"radio\",\r\n                                        name: \"radio\",\r\n                                        value: \"1\"\r\n                                    }\r\n                                }),\r\n                                widget(\"menuitem\", {\r\n                                    properties: {\r\n                                        type: \"radio\",\r\n                                        label: \"MenuItem 2\",\r\n                                        name: \"radio\",\r\n                                        value: \"2\"\r\n                                    }\r\n                                }),\r\n                                widget(\"menuitem\", {\r\n                                    properties: {\r\n                                        type: \"radio\",\r\n                                        label: \"MenuItem 3\",\r\n                                        name: \"radio\",\r\n                                        value: \"3\"\r\n                                    }\r\n                                })\r\n                            ]\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        })\r\n    );*/\r\n}","export { Key };\r\nexport { KeyModifier };\r\nexport { HotKey };\r\nexport { MouseButton };\r\n\r\nenum Key {\r\n    A = \"a\",\r\n    B = \"b\",\r\n    C = \"c\",\r\n    D = \"d\",\r\n    E = \"e\",\r\n    F = \"f\",\r\n    G = \"g\",\r\n    H = \"h\",\r\n    I = \"i\",\r\n    J = \"j\",\r\n    K = \"k\",\r\n    L = \"l\",\r\n    M = \"m\",\r\n    O = \"o\",\r\n    P = \"p\",\r\n    Q = \"q\",\r\n    R = \"r\",\r\n    S = \"s\",\r\n    T = \"t\",\r\n    U = \"u\",\r\n    V = \"v\",\r\n    W = \"w\",\r\n    X = \"x\",\r\n    Y = \"y\",\r\n    Z = \"z\",\r\n    ENTER = \"Enter\",\r\n    BACKSPACE = \"Backspace\",\r\n    ARROW_DOWN = \"ArrowDown\",\r\n    ARROW_LEFT = \"ArrowLeft\",\r\n    ARROW_RIGHT = \"ArrowRight\",\r\n    ARROW_UP = \"ArrowUp\",\r\n    SHIFT = \"Shift\"\r\n}\r\n\r\nenum KeyModifier {\r\n    Alt = \"Alt\",\r\n    Control = \"Control\",\r\n    Shift = \"Shift\"\r\n}\r\n\r\nenum MouseButton {\r\n    LEFT = 1,\r\n    WHEEL = 2,\r\n    RIGHT = 3,\r\n    FORWARD = 4,\r\n    BACK = 5\r\n}\r\n\r\nclass HotKey {\r\n    readonly key: Key;\r\n    readonly mod1?: KeyModifier;\r\n    readonly mod2?: KeyModifier;\r\n\r\n    constructor(key: Key, mod1?: KeyModifier, mod2?: KeyModifier) {\r\n        this.key = key;\r\n        this.mod1 = mod1;\r\n        this.mod2 = mod2;\r\n    }\r\n\r\n    toString(): string {\r\n        return `${this.mod1 ? `${this.#modifierString(this.mod1)}+` : \"\"}${this.mod2 ? `${this.#modifierString(this.mod2)}+` : \"\"}${(this.key.length == 1) ? this.key.toUpperCase() : this.key}`;\r\n    }\r\n\r\n    test(event: KeyboardEvent): boolean {\r\n        return (!this.mod1 || this.#testModifier(this.mod1, event)) && (!this.mod2 || this.#testModifier(this.mod2, event)) && event.key == this.key;\r\n    }\r\n\r\n    #modifierString(mod: KeyModifier): string {\r\n        switch (mod) {\r\n            case KeyModifier.Control:\r\n                return \"Ctrl\";\r\n            default:\r\n                return mod;\r\n        }\r\n    }\r\n\r\n    #testModifier(mod: KeyModifier, event: KeyboardEvent): boolean {\r\n        switch (mod) {\r\n            case \"Alt\":\r\n                return event.altKey;\r\n            case \"Control\":\r\n                return event.ctrlKey;\r\n            case \"Shift\":\r\n                return event.shiftKey;\r\n            default:\r\n                return true;\r\n        }\r\n    }\r\n}","import { AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEActionElement };\r\nexport { ActionType };\r\n\r\ninterface HTMLEActionElementConstructor {\r\n    prototype: HTMLEActionElement;\r\n    new(): HTMLEActionElement;\r\n}\r\n\r\ninterface HTMLEActionElement extends HTMLElement {\r\n    name: string;\r\n    value: string;\r\n    checked: boolean;\r\n    type: string;\r\n    disabled: boolean;\r\n    hotkey: string;\r\n\r\n    trigger(): void;\r\n    enable(): void;\r\n    disable(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"trigger\": Event;\r\n    }\r\n}\r\n\r\ntype ActionType = \"button\" | \"checkbox\" | \"radio\" | \"select\";\r\n\r\nclass HTMLEActionElementBase extends HTMLElement implements HTMLEActionElement {\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    hotkey!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"button\"})\r\n    type!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    checked!: boolean;\r\n\r\n    trigger(): void {\r\n        if (!this.disabled) {\r\n            switch (this.type) {\r\n                case \"checkbox\":\r\n                    this.checked = !this.checked;\r\n                    break;\r\n                case \"radio\":\r\n                    this.checked = true;\r\n                    break;\r\n            }\r\n            this.dispatchEvent(new Event(\"trigger\", {\r\n                bubbles: true\r\n            }));\r\n        }\r\n    }\r\n\r\n    enable(): void {\r\n        this.disabled = false;\r\n    }\r\n\r\n    disable(): void {\r\n        this.disabled = true;\r\n    }\r\n}\r\n\r\nvar HTMLEActionElement: HTMLEActionElementConstructor = HTMLEActionElementBase;","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEGridCellElement };\r\n\r\ninterface HTMLEGridCellElementConstructor {\r\n    prototype: HTMLEGridCellElement;\r\n    new(): HTMLEGridCellElement;\r\n}\r\n\r\ninterface HTMLEGridCellElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n    headers: string;\r\n    posinset: number;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridcell\": HTMLEGridCellElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridcell\"\r\n})\r\nclass HTMLEGridCellElementBase extends HTMLElement implements HTMLEGridCellElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    headers!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridCellElement: HTMLEGridCellElementConstructor = HTMLEGridCellElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\n\r\nexport { HTMLEGridRowGroupElement };\r\n\r\ninterface HTMLEGridRowGroupElementConstructor {\r\n    prototype: HTMLEGridRowGroupElement;\r\n    new(): HTMLEGridRowGroupElement;\r\n}\r\n\r\ninterface HTMLEGridRowGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrowgroup\": HTMLEGridRowGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrowgroup\"\r\n})\r\nclass HTMLEGridRowGroupElementBase extends HTMLElement implements HTMLEGridRowGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                            /*display: flex;\r\n                            flex-direction: column;*/\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowGroupElement: HTMLEGridRowGroupElementConstructor = HTMLEGridRowGroupElementBase;","import { element, CustomElement, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuItemElement, EMenuItem } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuItemGroupElement };\r\nexport { EMenuItemGroup };\r\n\r\ninterface HTMLEMenuItemGroupElementConstructor {\r\n    prototype: HTMLEMenuItemGroupElement;\r\n    new(): HTMLEMenuItemGroupElement;\r\n}\r\n\r\ninterface HTMLEMenuItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    label: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitemgroup\": HTMLEMenuItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitemgroup\"\r\n})\r\nclass HTMLEMenuItemGroupElementBase extends HTMLElement implements HTMLEMenuItemGroupElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            flex-direction: column;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEMenuItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEMenuItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            //item_i.index = i;\r\n        });\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\":\r\n                const label = this.shadowRoot.querySelector(\"[part=label]\");\r\n                if (label) {\r\n                    label.textContent = newValue;\r\n                }\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemGroupElement: HTMLEMenuItemGroupElementConstructor = HTMLEMenuItemGroupElementBase;\r\n\r\ninterface EMenuItemGroupConstructor {\r\n    prototype: HTMLEMenuItemGroupElement;\r\n    new(init: {\r\n        name?: string;\r\n        items: HTMLEMenuItemElement[];\r\n    }): HTMLEMenuItemGroupElement;\r\n    radios(init: {name: string, items: {label: string, value: string}[]}): HTMLEMenuItemGroupElement;\r\n}\r\n\r\nvar EMenuItemGroup = <EMenuItemGroupConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string,\r\n        items: HTMLEMenuItemElement[]\r\n    }) {\r\n        const {name, items} = init;\r\n        return element(\"e-menuitemgroup\", {\r\n            attributes: {\r\n                name: name\r\n            },\r\n            children: items\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemGroupElement.prototype,\r\n        radios: (init: {\r\n            name: string,\r\n            items: {\r\n                label: string,\r\n                value: string\r\n            }[]\r\n        }) => {\r\n            const {name, items} = init;\r\n            return element(\"e-menuitemgroup\", {\r\n                attributes: {\r\n                    name: name\r\n                },\r\n                children: items.map(\r\n                    ({label, value}) => new EMenuItem({name, label, type: \"radio\", value})\r\n                )\r\n            });\r\n        }\r\n    }\r\n);","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuElement };\r\nexport { EMenu };\r\n\r\ninterface HTMLEMenuElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    firstItem(): HTMLEMenuItemElement | null;\r\n    items(): HTMLEMenuItemElement[];\r\n    name: string;\r\n    contextual: boolean;\r\n    positionContextual(x: number, y: number): void;\r\n}\r\n\r\ninterface HTMLEMenuElementConstructor {\r\n    prototype: HTMLEMenuElement;\r\n    new(): HTMLEMenuElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menu\": HTMLEMenuElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar toggleTimeouts: WeakMap<HTMLEMenuItemElement, {clear(): void;}>;\r\n\r\n@CustomElement({\r\n    name: \"e-menu\"\r\n})\r\nclass HTMLEMenuElementBase extends HTMLElement implements HTMLEMenuElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    items(): HTMLEMenuItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        ));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        const {activeIndex} = this;\r\n        return this.querySelector<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem:focus-within\"\r\n        ) ?? activeIndex > -1 ? this.items()[activeIndex] ?? null : null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    contextual!: boolean;\r\n\r\n    #walker: TreeWalker;\r\n    #activeIndex: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        toggleTimeouts = new WeakMap();\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        this.#activeIndex = -1;\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"mouseout\", this.#handleMouseOutEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    positionContextual(x: number, y: number): void {\r\n        const {style} = this;\r\n        const {width: menuWidth, height: menuHeight} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        const left = x + scrollX;\r\n        const top = y + scrollY;\r\n        const {clientWidth, clientHeight} = document.body;\r\n        const overflowX = left + menuWidth - clientWidth;\r\n        const overflowY = top + menuHeight - clientHeight;\r\n        style.setProperty(\"left\", `${overflowX > 0 ? left - menuWidth : left}px`);\r\n        style.setProperty(\"top\", `${overflowY > 0 ? top - menuHeight : top}px`);\r\n    }\r\n\r\n    #collapseSubmenus(): void {\r\n        this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem[expanded]\"\r\n        )\r\n        .forEach((item_i) => {\r\n            item_i.collapse();\r\n        });\r\n    }\r\n    \r\n    #nearestItem(target: Element): HTMLEMenuItemElement | null {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextNode();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        return menu instanceof HTMLEMenuElementBase ?\r\n            menu.firstItem() :\r\n            null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        if (item !== null) {\r\n            this.#activeIndex = this.items().indexOf(item);\r\n        }\r\n    }\r\n\r\n    async #setItemTimeout(item: HTMLEMenuItemElement, delay?: number): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => {\r\n                resolve(undefined);\r\n            }, delay ?? 0);\r\n            toggleTimeouts.set(item, {\r\n                clear: () => {\r\n                    clearTimeout(timeout);\r\n                    reject();\r\n                }\r\n            });\r\n        }).then(() => {\r\n            toggleTimeouts.delete(item);\r\n        });\r\n    }\r\n\r\n    #clearItemTimeout(item: HTMLEMenuItemElement): void {\r\n        const timeout = toggleTimeouts.get(item);\r\n        if (typeof timeout !== \"undefined\") {\r\n            toggleTimeouts.delete(item);\r\n            timeout.clear();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetItem = (<HTMLElement>target).closest(\"e-menuitem\");\r\n        if (targetItem) {\r\n            const {type, checked} = targetItem;\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    targetItem.checked = !checked;\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    const {name, value} = targetItem;\r\n                    targetItem.checked = true;\r\n                    this.querySelectorAll<HTMLEMenuItemElement>(\r\n                        `:is(:scope, :scope > e-menuitemgroup) > e-menuitem[type=radio][name=${name}]`\r\n                    )\r\n                    .forEach((radio_i) => {\r\n                        radio_i.checked = radio_i.value == value;\r\n                    });\r\n                    break;\r\n                }\r\n                case \"menu\":\r\n                case \"submenu\": {\r\n                    targetItem.toggle();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem) {\r\n                this.#setActiveItem(nearestItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const {contextual} = this;\r\n            if (contextual) {\r\n                try {\r\n                    this.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const {activeItem} = this;\r\n                if (activeItem?.expanded) {\r\n                    activeItem.collapse();\r\n                }\r\n                this.#setActiveItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.firstItem() :\r\n                    this.firstItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.firstItem();\r\n                firstItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                lastItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"menu\":\r\n                        case \"submenu\": {\r\n                            activeItem.expand();\r\n                            if (activeItem.expanded) {\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                            }\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            activeItem.click();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                    else {\r\n                        const {contextual} = this;\r\n                        if (contextual) {\r\n                            this.blur();\r\n                            this.dispatchEvent(new Event(\"close\", {bubbles: true}));\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            if (!activeItem.expanded) {\r\n                                activeItem.expand();\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                                event.stopPropagation();\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOutEvent(event: MouseEvent): void {\r\n        const {target, relatedTarget} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem !== null) {\r\n                if (nearestItem.type == \"submenu\" &&\r\n                    !nearestItem.expanded) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLEMenuElement\r\n                ) == this;\r\n                if (isTargetClosestMenu) {\r\n                    const {activeItem} = this;\r\n                    if (activeItem?.type == \"submenu\" &&\r\n                        activeItem.expanded) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, 400)\r\n                            .then(() => {\r\n                                activeItem.collapse();\r\n                            })\r\n                            .catch(() => undefined);\r\n                    }\r\n                    const {clientX, clientY} = event;\r\n                    const {left, right, top, bottom} = this.getBoundingClientRect();\r\n                    const intersectsWithMouse = !(\r\n                        left > clientX || right < clientX || top > clientY || bottom < clientY\r\n                    );\r\n                    const containsRelatedTarget = this.contains(<Node>relatedTarget);\r\n                    if (intersectsWithMouse && containsRelatedTarget) {\r\n                        if (relatedTarget instanceof HTMLEMenuElement && relatedTarget !== this) {\r\n                            relatedTarget.focus({preventScroll: true});\r\n                        }\r\n                        else {\r\n                            this.focus({preventScroll: true});\r\n                            this.#setActiveItem(null);\r\n                        }\r\n                    }\r\n                    if (!intersectsWithMouse) {\r\n                        this.focus({preventScroll: true});\r\n                        this.#setActiveItem(null);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem !== null) {\r\n                if (nearestItem.type == \"submenu\" && nearestItem.expanded) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLEMenuElement\r\n                ) == this;\r\n                if (isTargetClosestMenu) {\r\n                    const {activeItem} = this;\r\n                    if (activeItem?.type == \"submenu\" &&\r\n                        activeItem.expanded && \r\n                        !activeItem.contains(<Node>target)) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, 400)\r\n                            .then(() => {\r\n                                activeItem.collapse();\r\n                            })\r\n                            .catch(() => undefined);\r\n                    }\r\n                    this.#setActiveItem(nearestItem);\r\n                    nearestItem.focus({preventScroll: true});\r\n                    if (nearestItem.type == \"submenu\") {\r\n                        if (!nearestItem.expanded) {\r\n                            this.#clearItemTimeout(nearestItem);\r\n                            this.#setItemTimeout(nearestItem, 200)\r\n                                .then(() => {\r\n                                    const {activeItem} = this;\r\n                                    this.#collapseSubmenus();\r\n                                    if (activeItem) {\r\n                                        this.#clearItemTimeout(activeItem);\r\n                                        activeItem.expand();\r\n                                        activeItem.menu?.focus({preventScroll: true});\r\n                                    }\r\n                                })\r\n                                .catch(() => undefined);\r\n                        }\r\n                        else {\r\n                            nearestItem.menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuElement: HTMLEMenuElementConstructor = HTMLEMenuElementBase;\r\n\r\ninterface EMenuConstructor {\r\n    prototype: HTMLEMenuElement;\r\n    new(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }): HTMLEMenuElement;\r\n}\r\n\r\nvar EMenu = <EMenuConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }) {\r\n        const {name, children} = init;\r\n        return element(\"e-menu\", {\r\n            attributes: {\r\n                name: name,\r\n                tabindex: -1,\r\n            },\r\n            children: children\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuElement.prototype,\r\n    }\r\n);","import { AttributeProperty, CustomElement, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\n\r\nexport { HTMLEGridRowElement };\r\n\r\ninterface HTMLEGridRowElementConstructor {\r\n    prototype: HTMLEGridRowElement;\r\n    new(): HTMLEGridRowElement;\r\n}\r\n\r\ninterface HTMLEGridRowElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    active: boolean;\r\n    selected: boolean;\r\n    posinset: number;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrow\": HTMLEGridRowElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrow\"\r\n})\r\nclass HTMLEGridRowElementBase extends HTMLElement implements HTMLEGridRowElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    #menu: HTMLEMenuElement | null;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row;\r\n                        }\r\n\r\n                        :host([droptarget]) {\r\n                            background-color: gainsboro;\r\n                        }\r\n                        \r\n                        :host(:hover) {\r\n                            background-color: rgba(135, 206, 250, 0.2);\r\n                        }\r\n\r\n                        :host([active]) {\r\n                            outline: 1px solid rgb(135, 206, 250);\r\n                            outline-offset: -1px;\r\n                        }\r\n\r\n                        :host([selected]) {\r\n                            background-color: rgba(135, 206, 250, 0.4);\r\n                            outline: 1px solid rgb(135, 206, 250);\r\n                            outline-offset: -1px;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\"),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#menu = null;\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"menu\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#menu = element instanceof HTMLEMenuElement ? element : null;\r\n                break;\r\n            }\r\n            default: {\r\n                const assignedCells = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n                    .assignedElements()\r\n                    .filter(\r\n                        element_i => element_i instanceof HTMLEGridCellElement\r\n                    );\r\n                assignedCells.forEach((cell_i, i) => {\r\n                    cell_i.posinset = i;\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowElement: HTMLEGridRowElementConstructor = HTMLEGridRowElementBase;","import { HTMLEGridElement } from \"./Grid\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\n\r\nexport { HTMLEGridCellCollection };\r\n\r\ninterface HTMLEGridCellCollectionConstructor {\r\n    prototype: HTMLEGridCellCollection;\r\n    new(root: HTMLElement): HTMLEGridCellCollection;\r\n}\r\n\r\ninterface HTMLEGridCellCollection {\r\n    length: number;\r\n    item(index: number): HTMLEGridCellElement | null;\r\n    namedItem(name: string): HTMLEGridCellElement | null;\r\n    values(): IterableIterator<HTMLEGridCellElement>;\r\n}\r\n\r\nclass HTMLEGridCellCollectionBase implements HTMLEGridCellCollection {\r\n    #walker: TreeWalker;\r\n\r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridCellElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEGridCellElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEGridCellElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEGridCellElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEGridCellElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEGridCellElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEGridCellElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEGridCellElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEGridCellElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridCellCollection: HTMLEGridCellCollectionConstructor =  HTMLEGridCellCollectionBase;","import { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\n\r\nexport { HTMLEGridRowCollection };\r\n\r\ninterface HTMLEGridRowCollectionConstructor {\r\n    prototype: HTMLEGridRowCollection;\r\n    new(root: HTMLElement): HTMLEGridRowCollection;\r\n}\r\n\r\ninterface HTMLEGridRowCollection {\r\n    length: number;\r\n    item(index: number): HTMLEGridRowElement | null;\r\n    namedItem(name: string): HTMLEGridRowElement | null;\r\n    values(): IterableIterator<HTMLEGridRowElement>;\r\n}\r\n\r\nclass HTMLEGridRowCollectionBase implements HTMLEGridRowCollection {\r\n    #walker: TreeWalker;\r\n    \r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement || node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEGridRowElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEGridRowElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEGridRowElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEGridRowElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEGridRowElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEGridRowElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEGridRowElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEGridRowElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowCollection: HTMLEGridRowCollectionConstructor =  HTMLEGridRowCollectionBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\n\r\nexport { HTMLEGridBodyElement };\r\n\r\ninterface HTMLEGridBodyElementConstructor {\r\n    prototype: HTMLEGridBodyElement;\r\n    new(): HTMLEGridBodyElement;\r\n}\r\n\r\ninterface HTMLEGridBodyElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridbody\": HTMLEGridBodyElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridbody\"\r\n})\r\nclass HTMLEGridBodyElementBase extends HTMLElement implements HTMLEGridBodyElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridBodyElement: HTMLEGridBodyElementConstructor = HTMLEGridBodyElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridHeadElement } from \"./GridHead\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\n\r\nexport { HTMLEGridElement };\r\n\r\ninterface HTMLEGridElementConstructor {\r\n    prototype: HTMLEGridElement;\r\n    new(): HTMLEGridElement;\r\n}\r\n\r\ninterface HTMLEGridElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly body: HTMLEGridBodyElement | null;\r\n    readonly head: HTMLEGridHeadElement | null\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n    readonly activeCell: HTMLEGridCellElement | null;\r\n    readonly activeRow: HTMLEGridRowElement | null;\r\n    selectby: \"cell\" | \"row\";\r\n    name: string;\r\n    multiselectable: boolean;\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    clearSelection(): void;\r\n    selectedCells(): HTMLEGridCellElement[];\r\n    selectedRows(): HTMLEGridRowElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-grid\": HTMLEGridElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-grid\"\r\n})\r\nclass HTMLEGridElementBase extends HTMLElement implements HTMLEGridElement {\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    get activeCell(): HTMLEGridCellElement | null {\r\n        return this.querySelector<HTMLEGridCellElement>(\"e-gridcell[active]\");\r\n    }\r\n\r\n    get activeRow(): HTMLEGridRowElement | null {\r\n        return this.querySelector<HTMLEGridRowElement>(\"e-gridrow[active]\");\r\n    }\r\n\r\n    get body(): HTMLEGridBodyElement | null {\r\n        return this.querySelector<HTMLEGridBodyElement>(\":scope > e-gridbody\");\r\n    }\r\n\r\n    get head(): HTMLEGridHeadElement | null {\r\n        return this.querySelector<HTMLEGridHeadElement>(\":scope > e-gridhead\");\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"cell\"})\r\n    selectby!: \"cell\" | \"row\";\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    multiselectable!: boolean;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #cellsWalker: TreeWalker;\r\n    #rowsWalker: TreeWalker;\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#cellsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#cellsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#rowsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#rowsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"dblclick\", this.#handleDblClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.#clearCellsSelection();\r\n        this.#clearRowsSelection();\r\n    }\r\n\r\n    selectedCells(): HTMLEGridCellElement[] {\r\n        return Array.from(this.querySelectorAll(\"e-gridcell[selected]\"));\r\n    }\r\n\r\n    selectedRows(): HTMLEGridRowElement[] {\r\n        return Array.from(this.querySelectorAll(\"e-gridrow[selected]\"));\r\n    }\r\n\r\n    #cellsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridCellElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement || node instanceof HTMLEGridRowGroupElement || node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #rowsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridRowElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement || node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getCellsRange(from: HTMLEGridCellElement, to: HTMLEGridCellElement): HTMLEGridCellElement[] {\r\n        const cells = Array.from(this.cells.values());\r\n        const fromIndex = cells.indexOf(from);\r\n        const toIndex = cells.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return cells.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #getRowsRange(from: HTMLEGridRowElement, to: HTMLEGridRowElement): HTMLEGridRowElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleRow = this.#nextRow(from);\r\n            while (nextVisibleRow && nextVisibleRow !== to) {\r\n                range.push(nextVisibleRow);\r\n                nextVisibleRow = this.#nextRow(nextVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleRow = this.#previousRow(from);\r\n            while (previousVisibleRow && previousVisibleRow !== to) {\r\n                range.push(previousVisibleRow);\r\n                previousVisibleRow = this.#previousRow(previousVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setCellsSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((selectedCell_i) => {\r\n            if (!cells.includes(selectedCell_i)) {\r\n                selectedCell_i.selected = false;\r\n            }\r\n        });\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setRowsSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((selectedRow_i) => {\r\n            if (!rows.includes(selectedRow_i)) {\r\n                selectedRow_i.selected = false;\r\n            }\r\n        });\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addCellsToSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addRowsToSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeCellsFromSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        cells.forEach((cell_i) => {\r\n            if (selectedCells.includes(cell_i)) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeRowsFromSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        rows.forEach((row_i) => {\r\n            if (selectedRows.includes(row_i)) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearCellsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((cell_i) => {\r\n            if (cell_i.selected) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearRowsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((row_i) => {\r\n            if (row_i.selected) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveCell(cell: HTMLEGridCellElement | null): void {\r\n        const {activeCell} = this;\r\n        if (activeCell !== null && activeCell !== cell) {\r\n            activeCell.active = false;\r\n            activeCell.tabIndex = -1;\r\n        }\r\n        if (cell !== null) {\r\n            const cellsWalker = this.#cellsWalker;\r\n            cellsWalker.currentNode = cell;\r\n            cell.active = true;\r\n            cell.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #setActiveRow(row: HTMLEGridRowElement | null): void {\r\n        const {activeRow} = this;\r\n        if (activeRow !== null && activeRow !== row) {\r\n            activeRow.active = false;\r\n            activeRow.tabIndex = -1;\r\n        }\r\n        if (row !== null) {\r\n            const rowsWalker = this.#rowsWalker;\r\n            rowsWalker.currentNode = row;\r\n            row.active = true;\r\n            row.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #firstCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.firstChild();\r\n    }\r\n\r\n    #lastCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.lastChild();\r\n    }\r\n\r\n    #previousCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.previousNode();\r\n    }\r\n\r\n    #nextCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.nextNode();\r\n    }\r\n\r\n    #closestRow(cell: HTMLEGridCellElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = cell;\r\n        return <HTMLEGridRowElement | null>rowsWalker.parentNode();\r\n    }\r\n\r\n    #firstRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.firstChild();\r\n    }\r\n\r\n    #lastRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.lastChild();\r\n    }\r\n\r\n    #previousRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.previousNode();\r\n    }\r\n\r\n    #nextRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.nextNode();\r\n    }\r\n\r\n    #topCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const {cells: closestRowCells} = closestRow;\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const previousRow = this.#previousRow(closestRow);\r\n            if (previousRow) {\r\n                const {cells: previousRowCells} = previousRow;\r\n                return previousRowCells.item(\r\n                    Math.min(cellIndex, previousRowCells.length)\r\n                );\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #bottomCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const {cells: closestRowCells} = closestRow;\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const nextRow = this.#nextRow(closestRow);\r\n            if (nextRow) {\r\n                const {cells: nextRowCells} = nextRow;\r\n                return nextRowCells.item(\r\n                    Math.min(cellIndex, nextRowCells.length)\r\n                );\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {ctrlKey, shiftKey} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const composedPath = event.composedPath();\r\n                const targetCell = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridCellElement\r\n                ) : null;\r\n                const selectedCells = this.selectedCells();\r\n                if (targetCell instanceof HTMLEGridCellElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetCell.selected ?\r\n                            this.#addCellsToSelection(targetCell) :\r\n                            this.#removeCellsFromSelection(targetCell);\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedCell = selectedCells[selectedCells.length - 1];\r\n                        if (lastSelectedCell) {\r\n                            const range = this.#getCellsRange(\r\n                                lastSelectedCell,\r\n                                targetCell\r\n                            );\r\n                            if (range) {\r\n                                selectedCells.includes(targetCell) ?\r\n                                    this.#removeCellsFromSelection(...range) :\r\n                                    this.#addCellsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setCellsSelection(targetCell);\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const selectedRows = this.selectedRows();\r\n                const composedPath = event.composedPath();\r\n                const targetRow = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridRowElement\r\n                ) : null;\r\n                if (targetRow instanceof HTMLEGridRowElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetRow.selected ?\r\n                            this.#addRowsToSelection(targetRow) :\r\n                            this.#removeRowsFromSelection(targetRow);\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedRow = selectedRows[selectedRows.length - 1];\r\n                        if (lastSelectedRow) {\r\n                            const range = this.#getRowsRange(\r\n                                lastSelectedRow,\r\n                                targetRow\r\n                            );\r\n                            if (range) {\r\n                                selectedRows.includes(targetRow) ?\r\n                                    this.#removeRowsFromSelection(...range) :\r\n                                    this.#addRowsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setRowsSelection(targetRow);\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleDblClickEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {selectby, activeCell, activeRow} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    switch (selectby) {\r\n                        case \"cell\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const firstCell = firstRow ? this.#firstCell(firstRow) : null;\r\n                            const lastRow = this.#lastRow();\r\n                            const lastCell = lastRow ? this.#lastCell(lastRow) : null;\r\n                            if (firstCell && lastCell) {\r\n                                const range = this.#getCellsRange(firstCell, lastCell);\r\n                                if (range) {\r\n                                    this.#setCellsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"row\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const lastRow = this.#lastRow();\r\n                            if (firstRow && lastRow) {\r\n                                const range = this.#getRowsRange(firstRow, lastRow);\r\n                                if (range) {\r\n                                    this.#setRowsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const previousCell = this.#previousCell(activeCell);\r\n                        if (previousCell) {\r\n                            previousCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousCell.selected ?\r\n                                    this.#removeCellsFromSelection(previousCell) :\r\n                                    this.#addCellsToSelection(previousCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const nextCell = this.#nextCell(activeCell);\r\n                        if (nextCell) {\r\n                            nextCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextCell.selected ?\r\n                                    this.#removeCellsFromSelection(nextCell) :\r\n                                    this.#addCellsToSelection(nextCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const firstRow = activeRow ?? this.#firstRow();\r\n                        const topCell = activeCell ?\r\n                            this.#topCell(activeCell) :\r\n                            firstRow ?\r\n                            this.#firstCell(firstRow) :\r\n                            null;\r\n                        if (topCell) {\r\n                            topCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                topCell.selected ?\r\n                                    this.#removeCellsFromSelection(topCell) :\r\n                                    this.#addCellsToSelection(topCell);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const previousRow = activeRow ?\r\n                            this.#previousRow(activeRow) :\r\n                            this.#firstRow();\r\n                        if (previousRow) {\r\n                            previousRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousRow.selected ?\r\n                                    this.#removeRowsFromSelection(previousRow) :\r\n                                    this.#addRowsToSelection(previousRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const lastRow = activeRow ?? this.#lastRow();\r\n                        const bottomCell = activeCell ?\r\n                            this.#bottomCell(activeCell) :\r\n                            lastRow ?\r\n                            this.#lastCell(lastRow) :\r\n                            null;\r\n                            if (bottomCell) {\r\n                                bottomCell.focus({preventScroll: true});\r\n                                const {shiftKey} = event;\r\n                                if (shiftKey) {\r\n                                    bottomCell.selected ?\r\n                                        this.#removeCellsFromSelection(bottomCell) :\r\n                                        this.#addCellsToSelection(bottomCell);\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"row\": {\r\n                        const nextRow = activeRow ?\r\n                            this.#nextRow(activeRow) :\r\n                            this.#lastRow();\r\n                        if (nextRow) {\r\n                            nextRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextRow.selected ?\r\n                                    this.#removeRowsFromSelection(nextRow) :\r\n                                    this.#addRowsToSelection(nextRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const firstCell = this.#firstCell(activeRow);\r\n                            if (firstCell) {\r\n                                firstCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const firstRow = this.#firstRow();\r\n                        if (firstRow) {\r\n                            firstRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const lastCell = this.#lastCell(activeRow);\r\n                            if (lastCell) {\r\n                                lastCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const lastRow = this.#lastRow();\r\n                        if (lastRow) {\r\n                            lastRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeCell) {\r\n                            this.#setCellsSelection(activeCell);\r\n                            activeCell.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        if (activeRow) {\r\n                            this.#setRowsSelection(activeRow);\r\n                            activeRow.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        this.#clearCellsSelection();\r\n                        this.#setActiveCell(null);\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        this.#clearRowsSelection();\r\n                        this.#setActiveRow(null);\r\n                        break;\r\n                    }\r\n                }\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const {activeCell} = this;\r\n                if (activeCell && relatedTarget !== activeCell) {\r\n                    activeCell.focus();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const {activeRow} = this;\r\n                if (activeRow && relatedTarget !== activeRow) {\r\n                    activeRow.focus();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLEGridCellElement>(\"e-gridcell\");\r\n                if (targetCell) {\r\n                    this.#setActiveCell(targetCell);\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLEGridRowElement>(\"e-gridrow\");\r\n                if (targetRow) {\r\n                    this.#setActiveRow(targetRow);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedRows = <HTMLEGridRowElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridRowElement\r\n            );\r\n            assignedRows.forEach((row_i, i) => {\r\n                row_i.posinset = i;\r\n            });\r\n    }\r\n}\r\n\r\nvar HTMLEGridElement: HTMLEGridElementConstructor = HTMLEGridElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\n\r\nexport { HTMLEGridHeadElement };\r\n\r\ninterface HTMLEGridHeadElementConstructor {\r\n    prototype: HTMLEGridHeadElement;\r\n    new(): HTMLEGridHeadElement;\r\n}\r\n\r\ninterface HTMLEGridHeadElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridhead\": HTMLEGridHeadElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridhead\"\r\n})\r\nclass HTMLEGridHeadElementBase extends HTMLElement implements HTMLEGridHeadElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                        }\r\n                    `\r\n                    ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridHeadElement: HTMLEGridHeadElementConstructor = HTMLEGridHeadElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuBarElement };\r\n\r\ninterface HTMLEMenuBarElementConstructor {\r\n    prototype: HTMLEMenuBarElement;\r\n    new(): HTMLEMenuBarElement;\r\n}\r\n\r\ninterface HTMLEMenuBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    items(): HTMLEMenuItemElement[];\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    expanded: boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menubar\": HTMLEMenuBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menubar\"\r\n})\r\nclass HTMLEMenuBarElementBase extends HTMLElement implements HTMLEMenuBarElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    #activeIndex: number;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    items(): HTMLEMenuItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        ));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        const {activeIndex} = this;\r\n        return this.querySelector<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem:focus-within\"\r\n        ) ?? activeIndex > -1 ? this.items()[activeIndex] ?? null : null;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement && !(node.disabled || node.hidden)) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLEMenuItemElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        const {activeItem, expanded} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.collapse();\r\n        }\r\n        if (item !== null) {\r\n            if (expanded) {\r\n                item.expand();\r\n            }\r\n            this.#activeIndex = this.items().indexOf(item);\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    get #items(): HTMLEMenuItemElement[] {\r\n        return Array.from(\r\n            this.querySelectorAll(\":is(:scope, :scope > e-menuitemgroup) > e-menuitem\")\r\n        );\r\n    }\r\n\r\n    #isClosestMenu(target: Element): boolean {\r\n        return target.closest(\":is(e-menubar, e-menu)\") == this;\r\n    }\r\n\r\n    #nearestItem(target: Element): HTMLEMenuItemElement | null {\r\n        return this.#items.find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n    \r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (!this.contains(<Node | null>relatedTarget)) {\r\n            (activeItem ?? this.firstItem())?.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof Element) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            this.#setActiveItem(nearestItem);\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, relatedTarget} = event;\r\n        if (target instanceof HTMLElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem) {\r\n                nearestItem.collapse();\r\n            }\r\n        }\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.expanded = false;\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {expanded, activeItem} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu && target !== activeItem && expanded) {\r\n                const {menu} = target;\r\n                if (menu) {\r\n                    target.expand();\r\n                    menu.focus({preventScroll: true});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {expanded, activeItem} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu) {\r\n                const isExpanded = !expanded;\r\n                this.expanded = isExpanded;\r\n                if (isExpanded) {\r\n                    if (activeItem && !activeItem.expanded) {\r\n                        activeItem.expand();\r\n                    }\r\n                    const {menu} = target;\r\n                    menu?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    document.body.focus();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded} = this;\r\n        let {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.firstItem() : \r\n                    this.#lastItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    this.expanded = !expanded;\r\n                    if (!expanded) {\r\n                        const firstChildItem = this.#firstChildItem(activeItem);\r\n                        firstChildItem?.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.expanded = false;\r\n                    if (activeItem) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuBarElement: HTMLEMenuBarElementConstructor = HTMLEMenuBarElementBase;","import { CustomElement, AttributeProperty, element, QueryProperty } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuButtonElement };\r\nexport { EMenuButton };\r\n\r\ninterface HTMLEMenuButtonElementConstructor {\r\n    prototype: HTMLEMenuButtonElement;\r\n    new(): HTMLEMenuButtonElement;\r\n}\r\n\r\ninterface HTMLEMenuButtonElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    readonly firstItem: HTMLEMenuItemElement | null;\r\n    name: string;\r\n    disabled: boolean;\r\n    expanded: boolean;\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-menubutton\"\r\n})\r\nclass HTMLEMenuButtonElementBase extends HTMLElement implements HTMLEMenuButtonElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @QueryProperty({selector: \":scope > e-menu[slot=menu]\"})\r\n    readonly menu!: HTMLEMenuElement | null;\r\n    \r\n    @QueryProperty({selector: \":scope > e-menu[slot=menu] e-menuitem\"})\r\n    readonly firstItem!: HTMLEMenuItemElement | null;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n    }\r\n\r\n\r\n    toggle(force?: boolean): void {\r\n        const {expanded} = this;\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n\r\n    expand(): void {\r\n        const {expanded} = this;\r\n        if (!expanded) {\r\n            this.expanded = true;\r\n            this.#positionMenu();\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {expanded} = this;\r\n        if (expanded) {\r\n            this.expanded = false;\r\n        }\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const overflowX = itemRight + menuWidth - clientWidth;\r\n            const overflowY = itemTop + menuHeight - clientHeight;\r\n            menuStyle.setProperty(\"left\", `${\r\n                overflowX > 0 ?\r\n                scrollX + itemRight - menuWidth :\r\n                scrollX + itemLeft\r\n            }px`);\r\n            menuStyle.setProperty(\"top\", `${\r\n                overflowY > 0 ?\r\n                scrollY + itemTop - menuHeight :\r\n                scrollY + itemBottom\r\n            }px`);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {menu} = this;\r\n        if (menu && !menu.contains(<Node>target)) {\r\n            this.toggle();\r\n            const {expanded} = this;\r\n            if (expanded) {\r\n                menu?.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded} = this;\r\n        switch (key) {\r\n            case \"ArrowDown\":\r\n            case \"Enter\":\r\n                if (!expanded) {\r\n                    this.expand();\r\n                    this.firstItem?.focus({preventScroll: true});\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            case \"Escape\":\r\n                if (expanded) {\r\n                    this.collapse();\r\n                }\r\n                this.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuButtonElement: HTMLEMenuButtonElementConstructor = HTMLEMenuButtonElementBase;\r\n\r\ninterface EMenuButtonConstructor {\r\n    prototype: HTMLEMenuButtonElement;\r\n    new(init: {\r\n        menu: HTMLEMenuElement\r\n    }): HTMLEMenuButtonElement;\r\n}\r\n\r\nvar EMenuButton = <EMenuButtonConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        menu: HTMLEMenuElement\r\n    }) {\r\n        const {menu} = init;\r\n        menu.slot = \"menu\";\r\n        return element(\"e-menubutton\", {\r\n            attributes: {\r\n                tabindex: -1\r\n            },\r\n            children: [menu]\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuButtonElement.prototype,\r\n    }\r\n);","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element, QueryProperty } from \"../../Element\";\r\nimport { HTMLEMenuButtonElement } from \"../menus/MenuButton\";\r\n\r\nexport { HTMLEToolBarItemElement };\r\nexport { EToolBarItem };\r\n\r\ninterface HTMLEToolBarItemElementConstructor {\r\n    prototype: HTMLEToolBarItemElement;\r\n    new(): HTMLEToolBarItemElement;\r\n}\r\n\r\ninterface HTMLEToolBarItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menubutton: HTMLEMenuButtonElement | null;\r\n    readonly select: HTMLESelectElement | null;\r\n    value: string;\r\n    name: string;\r\n    label: string;\r\n    active: boolean;\r\n    pressed: boolean;\r\n    iconed: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritem\": HTMLEToolBarItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar iconPart: HTMLElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritem\"\r\n})\r\nclass HTMLEToolBarItemElementBase extends HTMLElement implements HTMLEToolBarItemElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @QueryProperty({selector: \":scope > e-menubutton[slot=menubutton]\"})\r\n    readonly menubutton!: HTMLEMenuButtonElement | null;\r\n    \r\n    @QueryProperty({selector: \":scope > e-select[slot=select]\"})\r\n    readonly select!: HTMLESelectElement | null;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    pressed!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    iconed!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\"),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"select\"\r\n                }\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menubutton\"\r\n                }\r\n            })\r\n        );\r\n        iconPart = element(\"span\", {\r\n            attributes: {\r\n                part: \"icon\"\r\n            }\r\n        });\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                //...\r\n                break;\r\n            }\r\n            case \"iconed\": {\r\n                const {shadowRoot} = this;\r\n                if (newValue !== null) {\r\n                    shadowRoot.prepend(iconPart.cloneNode(true));\r\n                }\r\n                else {\r\n                    const iconPart = shadowRoot.querySelector<HTMLElement>(\"[part=icon]\");\r\n                    if (iconPart) {\r\n                        iconPart.remove();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemElement: HTMLEToolBarItemElementConstructor = HTMLEToolBarItemElementBase;\r\n\r\ninterface EToolBarItemConstructor {\r\n    prototype: HTMLEToolBarItemElement;\r\n    new(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n    button(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    checkbox(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    radio(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    menubutton(init: {\r\n        name: string;\r\n        label: string;\r\n        menubutton: HTMLEMenuButtonElement;\r\n    }): HTMLEToolBarItemElement;\r\n    select(init: {\r\n        name: string;\r\n        label: string;\r\n        select: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n}\r\n\r\nvar EToolBarItem = <EToolBarItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menubutton, select} = init;\r\n        if (menubutton) {\r\n            menubutton.slot = \"menubutton\";\r\n        }\r\n        if (select) {\r\n            select.slot = \"select\";\r\n        }\r\n        return element(\"e-toolbaritem\", {\r\n            attributes: {\r\n                tabindex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type\r\n            },\r\n            children: menubutton ? [menubutton] : select ? [select] : undefined,\r\n            listeners: {\r\n                trigger: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEToolBarItemElement.prototype,\r\n        button(init: {\r\n            name: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menubutton(init: {\r\n            name: string;\r\n            label: string;\r\n            menubutton: HTMLEMenuButtonElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"menubutton\"\r\n            });\r\n        },\r\n        select(init: {\r\n            name: string;\r\n            label: string;\r\n            select: HTMLESelectElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"select\"\r\n            });\r\n        },\r\n    }\r\n);","\r\nimport { element, CustomElement, AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEToolBarItemGroupElement };\r\n\r\ninterface HTMLEToolBarItemGroupElementConstructor {\r\n    prototype: HTMLEToolBarItemGroupElement;\r\n    new(): HTMLEToolBarItemGroupElement;\r\n}\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\ninterface HTMLEToolBarItemGroupElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritemgroup\": HTMLEToolBarItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritemgroup\"\r\n})\r\nclass HTMLEToolBarItemGroupElementBase extends HTMLElement implements HTMLEToolBarItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            width: max-content;\r\n                            flex-direction: row;\r\n                        }\r\n\r\n                        /*:host([orientation=\"vertical\"]) {\r\n                            flex-direction: column;\r\n                        }\r\n\r\n                        :host([orientation=\"horizontal\"]) {\r\n                            flex-direction: row;\r\n                        }*/\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const label = this.shadowRoot.querySelector<HTMLLabelElement>(\"[part='label']\");\r\n                if (label) {\r\n                    label.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemGroupElement: HTMLEToolBarItemGroupElementConstructor = HTMLEToolBarItemGroupElementBase;","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEToolBarItemElement } from \"./ToolBarItem\";\r\nimport { HTMLEToolBarItemGroupElement } from \"./ToolBarItemGroup\";\r\n\r\nexport { HTMLEToolBarElement };\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\ninterface HTMLEToolBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly activeItem: HTMLEToolBarItemElement | null;\r\n    items(): HTMLEToolBarItemElement[];\r\n    firstItem(): HTMLEToolBarItemElement | null;\r\n    name: string;\r\n    orientation: ToolBarOrientation;\r\n}\r\n\r\ninterface HTMLEToolbarElementConstructor {\r\n    prototype: HTMLEToolBarElement;\r\n    new(): HTMLEToolBarElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbar\": HTMLEToolBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar wasExpandedOnMouseDown: WeakMap<HTMLEToolBarItemElement, boolean>;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbar\"\r\n})\r\nclass HTMLEToolBarElementBase extends HTMLElement implements HTMLEToolBarElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get activeItem(): HTMLEToolBarItemElement | null {\r\n        return this.querySelector<HTMLEToolBarItemElement>(\r\n            \"e-toolbaritem[active]\"\r\n        );\r\n    }\r\n\r\n    items(): HTMLEToolBarItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEToolBarItemElement>(\r\n            \":is(:scope, :scope > e-toolbaritemgroup) > e-toolbaritem\"\r\n        ));\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    orientation!: ToolBarOrientation;\r\n\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        wasExpandedOnMouseDown = new WeakMap();\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"dblclick\", this.#handleDblClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEToolBarItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEToolBarItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    firstItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEToolBarItemElement | null>walker.previousSibling();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEToolBarItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEToolBarItemElement | null): void {\r\n        const {activeItem} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetItem = (<HTMLElement>target).closest(\"e-toolbaritem\");\r\n        if (targetItem) {\r\n            const {type, pressed} = targetItem;\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    targetItem.pressed = !pressed;\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    targetItem.pressed = true;\r\n                    break;\r\n                }\r\n                case \"menubutton\": {\r\n                    const {menubutton} = targetItem;\r\n                    if (menubutton && !menubutton.contains(<Node>target)) {\r\n                        const force = !wasExpandedOnMouseDown.get(targetItem) ?? true;\r\n                        menubutton.toggle(force);\r\n                        if (force) {\r\n                            menubutton.firstItem?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                case \"select\": {\r\n                    const {select} = targetItem;\r\n                    if (select && !select.contains(<Node>target)) {\r\n                        const force = !wasExpandedOnMouseDown.get(targetItem) ?? true;\r\n                        select.toggle(force);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleDblClickEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (!this.contains(<Node>relatedTarget)) {\r\n            (activeItem ?? this.firstItem())?.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetItem = <HTMLEToolBarItemElement | null>(<HTMLElement>target).closest(\"e-toolbaritem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetItem);\r\n            this.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetItem = (<HTMLElement>target).closest(\"e-toolbaritem\");\r\n        if (targetItem) {\r\n            const {type} = targetItem;\r\n            switch (type) {\r\n                case \"menubutton\": {\r\n                    const {menubutton} = targetItem;\r\n                    if (menubutton && !menubutton.contains(<Node>target)) {\r\n                        wasExpandedOnMouseDown.set(targetItem, menubutton.expanded);\r\n                    }\r\n                    break;\r\n                }\r\n                case \"select\": {\r\n                    const {select} = targetItem;\r\n                    if (select && !select.contains(<Node>target)) {\r\n                        wasExpandedOnMouseDown.set(targetItem, select.expanded);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"menubutton\": {\r\n                            const {menubutton} = activeItem;\r\n                            if (menubutton) {\r\n                                menubutton.expand();\r\n                                menubutton.firstItem?.focus({preventScroll: true});\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"select\": {\r\n                            const {select} = activeItem;\r\n                            if (select) {\r\n                                select.expand();\r\n                            }\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            activeItem.click();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"select\": {\r\n                            activeItem.select?.expand();\r\n                            event.stopPropagation();\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarElement: HTMLEToolbarElementConstructor = HTMLEToolBarElementBase;","import { CustomElement, AttributeProperty } from \"../../Element\";\r\nimport { HTMLETabPanelElement } from \"./TabPanel\";\r\n\r\nexport { HTMLETabElement };\r\n\r\ninterface HTMLETabElementConstructor {\r\n    prototype: HTMLETabElement;\r\n    new(): HTMLETabElement;\r\n}\r\n\r\ninterface HTMLETabElement extends HTMLElement {\r\n    get panel(): HTMLETabPanelElement | null;\r\n    name: string;\r\n    active: boolean;\r\n    disabled: boolean;\r\n    controls: string;\r\n    selected: boolean;\r\n    select(): void;\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tab\": HTMLETabElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tab\"\r\n})\r\nclass HTMLETabElementBase extends HTMLElement implements HTMLETabElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n    \r\n    get panel(): HTMLETabPanelElement | null {\r\n        const {controls} = this;\r\n        return (<Document | ShadowRoot>this.getRootNode()).querySelector<HTMLETabPanelElement>(`e-tabpanel#${controls}`);\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    select(): void {\r\n        this.selected = true;\r\n    }\r\n}\r\n\r\nvar HTMLETabElement: HTMLETabElementConstructor = HTMLETabElementBase;","import { CustomElement } from \"../../Element\";\r\nimport { HTMLETabElement } from \"./Tab\";\r\n\r\nexport { HTMLETabListElement };\r\n\r\ninterface HTMLETabListElementConstructor {\r\n    prototype: HTMLETabListElement;\r\n    new(): HTMLETabListElement;\r\n}\r\n\r\ninterface HTMLETabListElement extends HTMLElement {\r\n    get activeTab(): HTMLETabElement | null;\r\n    get selectedTab(): HTMLETabElement | null;\r\n    get tabs(): HTMLETabElement[];\r\n    firstItem(): HTMLETabElement | null;\r\n    connectedCallback(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tablist\": HTMLETabListElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tablist\"\r\n})\r\nclass HTMLETabListElementBase extends HTMLElement implements HTMLETabListElement {\r\n\r\n    #walker: TreeWalker;\r\n    \r\n    get tabs(): HTMLETabElement[] {\r\n        return Array.from(\r\n            this.querySelectorAll(\"e-tab\")\r\n        );\r\n    }\r\n\r\n    get activeTab(): HTMLETabElement | null {\r\n        return this.querySelector(\r\n            \"e-tab[active]\"\r\n        );\r\n    }\r\n\r\n    get selectedTab(): HTMLETabElement | null {\r\n        return this.querySelector(\r\n            \"e-tab[selected]\"\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex, selectedTab} = this;\r\n        this.tabIndex = tabIndex;\r\n        const tabToSelect = selectedTab ?? this.firstItem();\r\n        if (tabToSelect) {\r\n            this.#selectTab(tabToSelect);\r\n        }\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLETabElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    firstItem(): HTMLETabElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLETabElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLETabElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLETabElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLETabElement): HTMLETabElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLETabElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLETabElement): HTMLETabElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLETabElement | null>walker.nextNode();\r\n    }\r\n\r\n    #setActiveTab(item: HTMLETabElement | null): void {\r\n        const {activeTab} = this;\r\n        if (activeTab !== null && activeTab !== item) {\r\n            activeTab.active = false;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n        }\r\n    }\r\n\r\n    #selectTab(tab: HTMLETabElement) {\r\n        const {selectedTab} = this;\r\n        if (tab !== selectedTab) {\r\n            tab.selected = true;\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetTab = (<Element>target).closest(\"e-tab\");\r\n        if (targetTab) {\r\n            targetTab.select();\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeTab} = this;\r\n        if (!this.contains(<Node>relatedTarget)) {\r\n            (activeTab ?? this.firstItem())?.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetTab = <HTMLETabElement | null>(<HTMLElement>target).closest(\"e-tab\");\r\n        if (targetTab) {\r\n            this.#setActiveTab(targetTab);\r\n            this.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeTab} = this;\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousTab = activeTab ?\r\n                    this.#previousItem(activeTab) ?? this.#lastItem() :\r\n                    this.firstItem();\r\n                previousTab?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextTab = activeTab ?\r\n                    this.#nextItem(activeTab) ?? this.firstItem() :\r\n                    this.#lastItem();\r\n                nextTab?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                activeTab?.click();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event) {\r\n        const {target} = event;\r\n        const targetTab = <HTMLETabElement>target;\r\n        if (targetTab.selected) {\r\n            const {tabs} = this;\r\n            tabs.forEach((tab_i) => {\r\n                if (tab_i !== targetTab) {\r\n                    //const {selected} = tab_i;\r\n                    //if (selected) {\r\n                        tab_i.selected = false;\r\n                    //}\r\n                    const {panel} = tab_i;\r\n                    if (panel) {\r\n                        panel.hidden = true;\r\n                    }\r\n                }\r\n            });\r\n            const {panel} = targetTab;\r\n            if (panel) {\r\n                panel.hidden = false;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabListElement: HTMLETabListElementConstructor = HTMLETabListElementBase;","import { CustomElement } from \"../../Element\";\r\n\r\nexport { HTMLETabPanelElement };\r\n\r\ninterface HTMLETabPanelElementConstructor {\r\n    prototype: HTMLETabPanelElement;\r\n    new(): HTMLETabPanelElement;\r\n}\r\n\r\ninterface HTMLETabPanelElement extends HTMLElement {\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tabpanel\": HTMLETabPanelElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tabpanel\"\r\n})\r\nclass HTMLETabPanelElementBase extends HTMLElement implements HTMLETabPanelElement {\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n}\r\n\r\nvar HTMLETabPanelElement: HTMLETabPanelElementConstructor = HTMLETabPanelElementBase;\r\n","import { CustomElement, element, AttributeProperty, QueryProperty } from \"../../Element\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeItemElement };\r\n\r\ninterface HTMLETreeItemElementConstructor {\r\n    prototype: HTMLETreeItemElement;\r\n    new(): HTMLETreeItemElement;\r\n}\r\n\r\ninterface HTMLETreeItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly group: HTMLETreeItemGroupElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    expanded: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    level: number;\r\n    type: \"leaf\" | \"parent\";\r\n    toggle(force?: boolean): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitem\": HTMLETreeItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-treeitem\"\r\n})\r\nclass HTMLETreeItemElementBase extends HTMLElement implements HTMLETreeItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    expanded!: boolean;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number, observed: true})\r\n    level!: number;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"leaf\"})\r\n    type!: \"leaf\" | \"parent\";\r\n\r\n    @QueryProperty({selector: \":scope > e-treeitemgroup[slot=group]\"})\r\n    group!: HTMLETreeItemGroupElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"arrow\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"group\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"expanded\": {\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const labelPart = this.shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"level\": {\r\n                this.style.setProperty(\"--level\", `${this.level}`);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {expanded} = this;\r\n        this.expanded = force ?? !expanded;\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemElement: HTMLETreeItemElementConstructor = HTMLETreeItemElementBase;","import { CustomElement } from \"../../Element\";\r\n\r\nexport { HTMLETreeItemGroupElement };\r\n\r\ninterface HTMLETreeItemGroupElementConstructor {\r\n    prototype: HTMLETreeItemGroupElement;\r\n    new(): HTMLETreeItemGroupElement;\r\n}\r\n\r\ninterface HTMLETreeItemGroupElement extends HTMLElement {}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitemgroup\": HTMLETreeItemGroupElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-treeitemgroup\"\r\n})\r\nclass HTMLETreeItemGroupElementBase extends HTMLElement implements HTMLETreeItemGroupElement {\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemGroupElement: HTMLETreeItemGroupElementConstructor = HTMLETreeItemGroupElementBase;","import { CustomElement, AttributeProperty } from \"../../Element\";\r\nimport { HTMLETreeItemElement } from \"./TreeItem\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeElement };\r\n\r\ninterface HTMLETreeElementConstructor {\r\n    prototype: HTMLETreeElement;\r\n    new(): HTMLETreeElement;\r\n}\r\n\r\ninterface HTMLETreeElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLETreeItemElement>;\r\n    readonly activeItem: HTMLETreeItemElement | null;\r\n    readonly dropTargetItem: HTMLETreeItemElement | null;\r\n    firstItem(): HTMLETreeItemElement | null;\r\n    droptarget: boolean;\r\n    name: string;\r\n    selectedItems(): HTMLETreeItemElement[];\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tree\": HTMLETreeElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tree\"\r\n})\r\nclass HTMLETreeElementBase extends HTMLElement implements HTMLETreeElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLETreeItemElement>;\r\n\r\n    get activeItem(): HTMLETreeItemElement | null {\r\n        return this.querySelector<HTMLETreeItemElement>(\r\n            \"e-treeitem[active]\"\r\n        );\r\n    }\r\n\r\n    get dropTargetItem(): HTMLETreeItemElement | null {\r\n        return this.querySelector<HTMLETreeItemElement>(\r\n            \"e-treeitem[droptarget]\"\r\n        );\r\n    }\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.items = this.getElementsByTagName(\"e-treeitem\");\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"dblclick\", this.#handleDblClickEvent.bind(this));\r\n        this.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    selectedItems(): HTMLETreeItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLETreeItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLETreeItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLETreeItemElement, to: HTMLETreeItemElement): HTMLETreeItemElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleItem = this.#nextItem(from);\r\n            while (nextVisibleItem && nextVisibleItem !== to) {\r\n                range.push(nextVisibleItem);\r\n                nextVisibleItem = this.#nextItem(nextVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleItem = this.#previousItem(from);\r\n            while (previousVisibleItem && previousVisibleItem !== to) {\r\n                range.push(previousVisibleItem);\r\n                previousVisibleItem = this.#previousItem(previousVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLETreeItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((item_i) => {\r\n            item_i.selected = false;\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLETreeItemElement | null): void {\r\n        const {activeItem} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = item;\r\n            item.active = true;\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n    \r\n    #setDropTargetItem(item: HTMLETreeItemElement | null): void {\r\n        const {dropTargetItem} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n        }\r\n    }\r\n\r\n    firstItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousSibling = <HTMLETreeItemElement | null>walker.previousSibling();\r\n        return previousSibling ?\r\n            this.#deepestItem(previousSibling) :\r\n            <HTMLETreeItemElement | null>walker.parentNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const {type, expanded} = item;\r\n        return <HTMLETreeItemElement | null>(\r\n            type === \"leaf\" ?\r\n                walker.nextNode() :\r\n                expanded ?\r\n                    walker.nextNode() :\r\n                    walker.nextSibling() ??\r\n                    (walker.parentNode(), walker.nextSibling())\r\n        );\r\n    }\r\n\r\n    #deepestItem(item: HTMLETreeItemElement): HTMLETreeItemElement {\r\n        if (item.expanded) {\r\n            const walker = this.#walker;\r\n            const lastItem = <HTMLETreeItemElement>walker.lastChild();\r\n            if (lastItem) {\r\n                return this.#deepestItem(lastItem);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, shiftKey, ctrlKey} = event;\r\n        const targetItem = <HTMLETreeItemElement | null>(<HTMLElement>target).closest(\"e-treeitem\");\r\n        if (targetItem) {\r\n            if (!shiftKey && !ctrlKey) {\r\n                this.#setSelection(targetItem);\r\n                const {type} = targetItem;\r\n                if (type == \"parent\") {\r\n                    targetItem.toggle();\r\n                }\r\n            }\r\n        }\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleDblClickEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        const targetItem = <HTMLETreeItemElement | null>(<HTMLElement>target).closest(\"e-treeitem\");\r\n        if (targetItem) {\r\n            const {type} = targetItem;\r\n            if (type == \"parent\") {\r\n                targetItem.toggle(true);\r\n            }\r\n            this.#setDropTargetItem(targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!this.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        const {root} = walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? root, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? root, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(\r\n                                firstItem,\r\n                                this.#deepestItem(lastItem)\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    if (activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                    else {\r\n                        const walker = this.#walker;\r\n                        const parentItem = <HTMLETreeItemElement>walker.parentNode();\r\n                        if (parentItem) {\r\n                            parentItem.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    if (!activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.#setActiveItem(null);\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (!this.contains(<Node | null>relatedTarget)) {\r\n            (activeItem ?? this.firstItem())?.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetItem = <HTMLETreeItemElement | null>(<HTMLElement>target).closest(\"e-treeitem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetItem);\r\n            this.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node | null>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey, button} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const {selected} = target;\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey && !selected) {\r\n                        this.#setSelection(target);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            target.blur();\r\n                        }\r\n                        (!selected) ?\r\n                            this.#addToSelection(target) :\r\n                            this.#removeFromSelection(target);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const {activeItem} = this\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                target\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(target);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETreeElement: HTMLETreeElementConstructor = HTMLETreeElementBase;","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEToolBarElement } from \"../toolbars/ToolBar\";\r\n\r\nexport { HTMLEListItemElement };\r\n\r\ninterface HTMLEListItemElementConstructor {\r\n    prototype: HTMLEListItemElement;\r\n    new(): HTMLEListItemElement;\r\n}\r\n\r\ninterface HTMLEListItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly badge: HTMLSpanElement | null;\r\n    readonly toolbar: HTMLEToolBarElement | null;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitem\": HTMLEListItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-listitem\"\r\n})\r\nclass HTMLEListItemElementBase extends HTMLElement implements HTMLEListItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    get badge(): HTMLElement | null {\r\n        return this.#badge;\r\n    }\r\n\r\n    get toolbar(): HTMLEToolBarElement | null {\r\n        return this.#toolbar;\r\n    }\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    #badge: HTMLElement | null;\r\n    #toolbar: HTMLEToolBarElement | null;\r\n    #menu: HTMLEMenuElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#badge = null;\r\n        this.#menu = null;\r\n        this.#toolbar = null;\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this))\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"toolbar\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#toolbar = element instanceof HTMLEToolBarElement ? element : null;\r\n                break;\r\n            }\r\n            case \"badge\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#badge = element instanceof HTMLSpanElement ? element : null;\r\n                break;\r\n            }\r\n            case \"menu\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#menu = element instanceof HTMLEMenuElement ? element : null;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEListItemElement: HTMLEListItemElementConstructor = HTMLEListItemElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEListItemElement } from \"./ListItem\";\r\n\r\nexport { HTMLEListItemGroupElement };\r\n\r\ninterface HTMLEListItemGroupElementConstructor {\r\n    prototype: HTMLEListItemGroupElement;\r\n    new(): HTMLEListItemGroupElement;\r\n}\r\n\r\ninterface HTMLEListItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitemgroup\": HTMLEListItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-listitemgroup\"\r\n})\r\nclass HTMLEListItemGroupElementBase extends HTMLElement implements HTMLEListItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEListItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEListItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEListItemGroupElement: HTMLEListItemGroupElementConstructor = HTMLEListItemGroupElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEListItemElement } from \"./ListItem\";\r\nimport { HTMLEListItemGroupElement } from \"./ListItemGroup\";\r\n\r\nexport { HTMLEListElement };\r\n\r\ninterface HTMLEListElementConstructor {\r\n    prototype: HTMLEListElement;\r\n    new(): HTMLEListElement;\r\n}\r\n\r\ninterface HTMLEListElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEListItemElement>;\r\n    readonly activeItem: HTMLEListItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    droptarget: boolean;\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    selectedItems(): HTMLEListItemElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-list\": HTMLEListElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-list\"\r\n})\r\nclass HTMLEListElementBase extends HTMLElement implements HTMLEListElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEListItemElement>;\r\n\r\n    get dropTargetItem(): HTMLEListItemElement | null {\r\n        return this.items[this.#dropTargetIndex] ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    #dropTargetIndex: number;\r\n    #activeIndex: number;\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        this.#dropTargetIndex = -1;\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.items = this.getElementsByTagName(\"e-listitem\");\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEListItemElement | null {\r\n        return this.items[this.activeIndex] ?? null;\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    selectedItems(): HTMLEListItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.#firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEListItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEListItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLEListItemElement, to: HTMLEListItemElement): HTMLEListItemElement[] {\r\n        const items = Array.from(this.items);\r\n        const fromIndex = items.indexOf(from);\r\n        const toIndex = items.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return items.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        selectedItems.forEach((item_i) => {\r\n            if (item_i.selected) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEListItemElement | null): void {\r\n        const {activeItem, items} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n            item.tabIndex = 0;\r\n            this.#activeIndex = Array.from(items).indexOf(item);\r\n        }\r\n    }\r\n\r\n    #setDropTargetItem(item: HTMLEListItemElement | null): void {\r\n        const {dropTargetItem, items} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n            this.#dropTargetIndex = Array.from(items).indexOf(item);\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n            this.#dropTargetIndex = -1;\r\n        }\r\n    }\r\n\r\n    #firstItem(): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLEListItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLEListItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEListItemElement): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEListItemElement | null>walker.previousNode();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEListItemElement): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const nextItem = <HTMLEListItemElement | null>walker.nextNode();\r\n        return nextItem;\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent) {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n            target.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey} = event;\r\n        const selectedItems = this.selectedItems();\r\n        if (target instanceof HTMLEListItemElement) {\r\n            if (!shiftKey && !ctrlKey) {\r\n                this.#setSelection(target);\r\n            }\r\n            else if (ctrlKey) {\r\n                (!target.selected) ?\r\n                    this.#addToSelection(target) :\r\n                    this.#removeFromSelection(target);\r\n                event.stopPropagation();\r\n            }\r\n            else if (shiftKey) {\r\n                const lastSelectedItem = selectedItems[selectedItems.length - 1];\r\n                if (lastSelectedItem) {\r\n                    const range = this.#getItemsRange(\r\n                        lastSelectedItem,\r\n                        target\r\n                    );\r\n                    if (range) {\r\n                        if (selectedItems.includes(target)) {\r\n                            this.#removeFromSelection(...range);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(...range);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.#setSelection(target);\r\n                }\r\n                event.stopPropagation();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            this.#setDropTargetItem(target);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n    \r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n        const relatedTargetHost =\r\n            relatedTargetRoot instanceof ShadowRoot ?\r\n            relatedTargetRoot.host :\r\n            relatedTarget;\r\n        if (!this.contains(<Node>relatedTargetHost)) {\r\n            this.#setDropTargetItem(null);\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    const walker = this.#walker;\r\n                    const {root} = walker;\r\n                    const firstItem = <HTMLEListItemElement>(\r\n                        walker.currentNode = walker.parentNode() ?? root, walker.firstChild()\r\n                    );\r\n                    const lastItem = <HTMLEListItemElement>(\r\n                        walker.currentNode = walker.parentNode() ?? root, walker.lastChild()\r\n                    );\r\n                    const range = this.#getItemsRange(\r\n                        firstItem,\r\n                        lastItem\r\n                    );\r\n                    if (range) {\r\n                        this.#setSelection(...range);\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                const {activeItem} = this;\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.#setActiveItem(null);\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            this.#setActiveItem(target);\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (!this.#onSelection) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEListItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEListItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEListElement: HTMLEListElementConstructor = HTMLEListElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEDraggableElement };\r\n\r\ninterface HTMLEDraggableElementConstructor {\r\n    prototype: HTMLEDraggableElement;\r\n    new(): HTMLEDraggableElement;\r\n}\r\n\r\ninterface HTMLEDraggableElement extends HTMLElement {\r\n    readonly referee: this | null;\r\n    readonly references: this[];\r\n    selected: boolean;\r\n    dragged: boolean;\r\n    dragovered: boolean;\r\n\r\n    connectedCallback(): void;\r\n    disconnectedCallback(): void;\r\n    getReference(): this;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-draggable\": HTMLEDraggableElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-draggable\"\r\n})\r\nclass HTMLEDraggableElementBase extends HTMLElement implements HTMLEDraggableElement {\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    dragovered!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    dragged!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    #referee: this | null;\r\n    readonly references: this[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            padding: 3px 4px;\r\n                            cursor: pointer;\r\n                            white-space: nowrap;\r\n                            border-radius: 4px;\r\n                            border: 1px solid black;\r\n                            user-select: none;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                            color: lightgray;\r\n                            border-color: lightgray;\r\n                        }\r\n        \r\n                        :host([selected]:active) {\r\n                            cursor: grabbing;\r\n                        }\r\n                        \r\n                        :host([selected]) {\r\n                            cursor: grab;\r\n                            font-weight: bold;\r\n                            outline: 1px auto black;\r\n                        }\r\n        \r\n                        :host([dragovered]) {\r\n                            border-style: dotted;\r\n                        }\r\n                        \r\n                        [part=\"container\"] {\r\n                            display: flex;\r\n                            align-items: center;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"container\"\r\n                },\r\n                children: [\r\n                    element(\"slot\", {\r\n                        children: [\r\n                            \"&nbsp;\"\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.references = [];\r\n        this.#referee = null;\r\n    }\r\n\r\n    get referee(): this | null {\r\n        return this.#referee;\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n        this.draggable = true;\r\n    }\r\n\r\n    disconnectedCallback(): void {\r\n        if (this.referee) {\r\n            const thisRefIndex = this.referee.references.indexOf(this);\r\n            if (thisRefIndex > -1) {\r\n                this.referee.references.splice(thisRefIndex, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    getReference(): this {\r\n        const reference = <this>this.cloneNode(true);\r\n        reference.#referee = this;\r\n        return reference;\r\n    }\r\n}\r\n\r\nvar HTMLEDraggableElement: HTMLEDraggableElementConstructor = HTMLEDraggableElementBase","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\n\r\nexport { HTMLEDragzoneElement };\r\n\r\ninterface HTMLEDragzoneElementConstructor {\r\n    prototype: HTMLEDragzoneElement;\r\n    new(): HTMLEDragzoneElement\r\n}\r\n\r\ninterface HTMLEDragzoneElement extends HTMLElement {\r\n    readonly draggables: HTMLEDraggableElement[];\r\n    readonly selectedDraggables: HTMLEDraggableElement[];\r\n    disabled: boolean;\r\n    selectDraggable(draggable: HTMLEDraggableElement): void;\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void;\r\n    clearSelection(): void;\r\n    connectedCallback(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dragzone\": HTMLEDragzoneElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dragzone\"\r\n})\r\nclass HTMLEDragzoneElementBase extends HTMLElement implements HTMLEDragzoneElement {\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    #draggables: HTMLEDraggableElement[];\r\n    #selectedDraggables: HTMLEDraggableElement[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                        }\r\n        \r\n                        [part=\"container\"] {\r\n                            position: relative;\r\n                            display: flex;\r\n                            flex-direction: column;\r\n                            padding-left: 2px;\r\n                            padding-right: 2px;\r\n                        }\r\n        \r\n                        ::slotted(*) {\r\n                            margin-top: 2px;\r\n                            margin-bottom: 2px;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"container\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n        this.#draggables = [];\r\n        this.#selectedDraggables = [];\r\n    }\r\n\r\n    get draggables(): HTMLEDraggableElement[] {\r\n        return this.#draggables;\r\n    }\r\n\r\n    get selectedDraggables(): HTMLEDraggableElement[] {\r\n        return this.#selectedDraggables;\r\n    }\r\n\r\n    selectDraggable(draggable: HTMLEDraggableElement): void {\r\n        if (!this.selectedDraggables.includes(draggable)) {\r\n            this.selectedDraggables.push(draggable);\r\n        }\r\n        if (!draggable.selected) {\r\n            draggable.selected = true;\r\n        }\r\n    }\r\n\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void {\r\n        const index = this.selectedDraggables.indexOf(draggable);\r\n        if (index > -1) {\r\n            if (draggable.selected) {\r\n                draggable.selected = false;\r\n            }\r\n            this.selectedDraggables.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.selectedDraggables.forEach((draggable) => {\r\n            draggable.selected = false;\r\n        });\r\n        this.#selectedDraggables = [];\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const draggables = slot.assignedElements().filter(\r\n                    elem => elem instanceof HTMLEDraggableElement\r\n                ) as HTMLEDraggableElement[];\r\n                this.#draggables = draggables;\r\n                this.draggables.forEach((draggable) => {\r\n                    draggable.draggable = true;\r\n                });\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Escape\":\r\n                    this.clearSelection();\r\n                    this.focus();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragstart\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                this.selectedDraggables.forEach((thisSelectedDraggable) => {\r\n                    thisSelectedDraggable.dragged = true;\r\n                });\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", this.id);\r\n                }\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event) => {\r\n            const dataTransfer = event.dataTransfer;\r\n            if (dataTransfer) {\r\n                dataTransfer.dropEffect = \"none\";\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"dragend\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                const thisDraggedDraggables = this.draggables.filter(draggable => draggable.dragged);\r\n                thisDraggedDraggables.forEach((thisDraggedDraggable) => {\r\n                    thisDraggedDraggable.dragged = false;\r\n                });\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            if (!this.contains(relatedTarget)) {\r\n                this.clearSelection();\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button == 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        if (!target.selected) {\r\n                            this.clearSelection();\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                    else if (event.ctrlKey) {\r\n                        (!target.selected) ?\r\n                            this.selectDraggable(target) :\r\n                            this.unselectDraggable(target);\r\n                    }\r\n                    else if (event.shiftKey) {\r\n                        if (this.selectedDraggables.length > 0) {\r\n                            const targetIndex = this.draggables.indexOf(target);\r\n                            const firstIndex = this.draggables.indexOf(this.selectedDraggables[0]);\r\n                            const direction = Math.sign(targetIndex - firstIndex);\r\n                            const fromIndex = (direction > 0) ? 0 : this.draggables.length - 1;\r\n                            const toIndex = (direction > 0) ? this.draggables.length - 1 : 0;\r\n                            const startRangeIndex = (direction > 0) ? firstIndex : targetIndex;\r\n                            const endRangeIndex = (direction > 0) ? targetIndex : firstIndex;\r\n                            for (let index = fromIndex; index !== (toIndex + direction); index += direction) {\r\n                                (index >= startRangeIndex && index <= endRangeIndex) ? \r\n                                    this.selectDraggable(this.draggables[index]) :\r\n                                    this.unselectDraggable(this.draggables[index]);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.clearSelection();\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mouseup\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button == 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        this.draggables.forEach((thisDraggable) => {\r\n                            if (thisDraggable !== target) {\r\n                                this.unselectDraggable(thisDraggable);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEDragzoneElement: HTMLEDragzoneElementConstructor = HTMLEDragzoneElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\nimport { HTMLEDragzoneElement } from \"./Dragzone\";\r\n\r\nexport { HTMLEDropzoneElement };\r\nexport { EDataChangeEvent };\r\n\r\ninterface HTMLEDropzoneElementConstructor {\r\n    prototype: HTMLEDropzoneElement;\r\n    new(): HTMLEDropzoneElement;\r\n}\r\n\r\ninterface HTMLEDropzoneElement extends HTMLEDragzoneElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    dragovered: DropzoneDragoveredType | null;\r\n    name: string;\r\n    multiple: boolean;\r\n    placeholder: string;\r\n\r\n    droptest: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => void) | null;\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): void;\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean): void;\r\n\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ntype DropzoneDragoveredType = \"self\" | \"draggable\" | \"appendarea\";\r\n\r\ntype EDataChangeEvent = CustomEvent<{\r\n    action: \"insert\" | \"remove\";\r\n    draggables: HTMLEDraggableElement[];\r\n    position: number;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dropzone\": HTMLEDropzoneElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"e_datachange\": EDataChangeEvent,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dropzone\"\r\n})\r\nclass HTMLEDropzoneElementBase extends HTMLEDragzoneElement implements HTMLEDropzoneElement {\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    dragovered!: DropzoneDragoveredType | null;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    placeholder!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    multiple!: boolean;\r\n\r\n    droptest!: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => boolean) | null;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.shadowRoot!.querySelector(\"style\")!.append(/*css*/`\r\n            :host {\r\n                border: 1px dashed gray;\r\n            }\r\n\r\n            :host(:not([multiple]):not(:empty)) [part=\"appendarea\"],\r\n            :host(:not(:empty):not([dragovered])) [part=\"appendarea\"] {\r\n                display: none !important;\r\n            }\r\n\r\n            [part=\"appendarea\"] {\r\n                display: block;\r\n                margin: 2px;\r\n                border-radius: 4px;\r\n                border: 1px dotted black;\r\n            }\r\n\r\n            :host(:not([dragovered=\"appendarea\"])) [part=\"appendarea\"] {\r\n                border-color: transparent;\r\n            }\r\n            \r\n            [part=\"placeholder\"] {\r\n                display: inline-block;\r\n                color: grey;\r\n                pointer-events: none;\r\n                user-select: none;\r\n            }\r\n        `);\r\n\r\n        this.shadowRoot.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"appendarea\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"placeholder\"\r\n                        },\r\n                        children: [\r\n                            \"&nbsp;\"\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.droptest = null;\r\n    }\r\n    \r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        const appendAreaPart = this.shadowRoot!.querySelector<HTMLDivElement>(\"[part='appendarea']\");\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Delete\":\r\n                    if (this == event.target) {\r\n                        this.removeDraggables();\r\n                    }\r\n                    else {\r\n                        this.removeDraggables(draggable => draggable.selected);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragover\", (event: DragEvent) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragover\", (event) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragenter\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                target.dragovered = true;\r\n                this.dragovered = \"draggable\";\r\n            }\r\n            else {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragenter\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"appendarea\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event: DragEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                if (target == this) {\r\n                    if (appendAreaPart) {\r\n                        this.dragovered = \"self\";\r\n                    }\r\n                    if (!this.draggables.includes(relatedTarget)) {\r\n                        this.dragovered = null;\r\n                    }\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                }\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragleave\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n        \r\n        this.addEventListener(\"drop\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                let dropIndex = this.draggables.length;\r\n                if (target == this) {\r\n                    this.dragovered = null;\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                    dropIndex = this.draggables.indexOf(target);\r\n                }\r\n\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    const dragzoneId = dataTransfer.getData(\"text/plain\");\r\n                    const dragzone = document.getElementById(dragzoneId);\r\n                    if (dragzone instanceof HTMLEDragzoneElement) {\r\n                        const selectedDraggables = dragzone.selectedDraggables;\r\n                        if (selectedDraggables) {\r\n                            selectedDraggables.forEach((selectedDraggable) => {\r\n                                selectedDraggable.dragged = false;\r\n                            });\r\n                            if (dragzone instanceof HTMLEDropzoneElement) {\r\n                                dragzone.removeDraggables((draggable) => selectedDraggables.includes(draggable));\r\n                            }\r\n                            dragzone.clearSelection();\r\n                            this.addDraggables(selectedDraggables, dropIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.dragovered = null;\r\n            event.preventDefault();\r\n        });\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"placeholder\": {\r\n                const placeholderPart = this.shadowRoot.querySelector(\"[part='placeholder']\");\r\n                if (placeholderPart) {\r\n                    placeholderPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): HTMLEDraggableElement[] | null {\r\n        if (draggables.length > 0) {\r\n            let dataTransferSuccess = true;\r\n            if (this.droptest) {\r\n                dataTransferSuccess = this.droptest(this, draggables);\r\n            }\r\n            \r\n            let newDraggables: HTMLEDraggableElement[] = [];\r\n            let insertionPosition = -1;\r\n            if (dataTransferSuccess) {\r\n                if (this.multiple) {\r\n                    draggables.forEach((draggable) => {\r\n                        let newDraggable = draggable.getReference();\r\n                        if (position > -1 && position < this.draggables.length) {\r\n                            this.draggables[position].insertAdjacentElement(\"beforebegin\", newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? position : insertionPosition;\r\n                        }\r\n                        else {\r\n                            this.appendChild(newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? this.draggables.length - 1 : insertionPosition;\r\n                        }\r\n                        newDraggables.push(newDraggable);\r\n                    });\r\n                }\r\n                else {\r\n                    let newDraggable = draggables[0].getReference();\r\n                    if (this.draggables.length > 0) {\r\n                        this.replaceChild(newDraggable, this.draggables[0]);\r\n                    }\r\n                    else {\r\n                        this.appendChild(newDraggable);\r\n                    }\r\n                    newDraggables.push(newDraggable);\r\n                    insertionPosition = 0;\r\n                }\r\n            }\r\n            \r\n            const slot = this.shadowRoot?.querySelector(\"slot\");\r\n            if (slot) {\r\n                slot.addEventListener(\"slotchange\", () => {\r\n                    this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                        bubbles: true,\r\n                        detail: {\r\n                            action: \"insert\",\r\n                            draggables: newDraggables,\r\n                            position: insertionPosition\r\n                        }\r\n                    }));\r\n                }, {once: true});\r\n            }\r\n            return newDraggables;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean = () => true) {\r\n        let toRemove = this.draggables.filter(\r\n            (value: HTMLEDraggableElement, index: number) => {\r\n                return predicate(value, index);\r\n            }\r\n        );\r\n        let atPosition = this.draggables.indexOf(toRemove[0]);\r\n        toRemove.forEach((draggable) => {\r\n            draggable.remove(); \r\n        });\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                    bubbles: true,\r\n                    detail: {\r\n                        action: \"remove\",\r\n                        draggables: toRemove,\r\n                        position: atPosition\r\n                    }\r\n                }));\r\n            }, {once: true});\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEDropzoneElement: HTMLEDropzoneElementConstructor = HTMLEDropzoneElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEDialogElement };\r\n\r\ninterface HTMLEDialogElementConstructor {\r\n    prototype: HTMLEDialogElement;\r\n    new(): HTMLEDialogElement;\r\n}\r\n\r\ntype DialogElementType = \"confirm\" | \"alert\";\r\n\r\ninterface HTMLEDialogElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: DialogElementType;\r\n    open(): void;\r\n    close(): void;\r\n    cancel(): void;\r\n    confirm(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dialog\": HTMLEDialogElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"open\": Event,\r\n        \"close\": Event,\r\n        \"cancel\": Event,\r\n        \"confirm\": Event,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dialog\"\r\n})\r\nclass HTMLEDialogElementBase extends HTMLElement implements HTMLEDialogElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: DialogElementType;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            padding: 6px;\r\n                            background-color: white;\r\n        \r\n                            -webkit-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            -moz-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                        }\r\n        \r\n                        button {\r\n                            cursor: pointer;\r\n                        }\r\n        \r\n                        [part=\"actions\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part=\"header\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part=\"button\"]:not(:first-child) {\r\n                            margin-left: 4px;\r\n                        }\r\n        \r\n                        :host([type=\"confirm\"]) [part=\"ok-button\"] {\r\n                            display: none !important;\r\n                        }\r\n        \r\n                        :host([type=\"alert\"]) [part=\"cancel-button\"],\r\n                        :host([type=\"alert\"]) [part=\"confirm-button\"] {\r\n                            display: none !important;\r\n                        }\r\n                    `\r\n                    ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"header\"\r\n                },\r\n                children: [\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button close-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"x\"\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"hr\", {\r\n                attributes: {\r\n                    part: \"separator\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"body\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"hr\", {\r\n                attributes: {\r\n                    part: \"separator\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"actions\",\r\n                },\r\n                children: [\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button cancel-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"Cancel\"\r\n                        ]\r\n                    }),\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button confirm-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"Confirm\"\r\n                        ]\r\n                    }),\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button ok-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"OK\"\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n        );\r\n    }\r\n\r\n    connectedCallback() {\r\n        this.shadowRoot.addEventListener(\"click\", this);\r\n    }\r\n\r\n    handleEvent(event: Event) {\r\n        const {type, target} = event;\r\n        switch (type) {\r\n            case \"click\":\r\n                const {part} = <Element>target;\r\n                if (part.contains(\"close-button\") || part.contains(\"cancel-button\")) {\r\n                    this.cancel();\r\n                }\r\n                else if (part.contains(\"confirm-button\") || part.contains(\"ok-button\")) {\r\n                    this.confirm();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    open(): void {\r\n        this.dispatchEvent(new CustomEvent(\"open\", {bubbles: true}));\r\n    }\r\n\r\n    close(): void {\r\n        this.dispatchEvent(new CustomEvent(\"close\", {bubbles: true}));\r\n    }\r\n\r\n    cancel(): void {\r\n        this.dispatchEvent(new CustomEvent(\"cancel\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n\r\n    confirm(): void {\r\n        this.dispatchEvent(new CustomEvent(\"confirm\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n}\r\n\r\nvar HTMLEDialogElement: HTMLEDialogElementConstructor = HTMLEDialogElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionElement };\r\n\r\ninterface HTMLEOptionElementConstructor {\r\n    prototype: HTMLEOptionElement;\r\n    new(): HTMLEOptionElement;\r\n}\r\n\r\ninterface HTMLEOptionElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    value: string;\r\n    label: string;\r\n    disabled: boolean;\r\n    selected: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-option\": HTMLEOptionElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-option\"\r\n})\r\nclass HTMLEOptionElementBase extends HTMLElement implements HTMLEOptionElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n    \r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"label\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector<HTMLElement>(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEOptionElement: HTMLEOptionElementConstructor = HTMLEOptionElementBase;","import { CustomElement, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionGroupElement };\r\n\r\ninterface HTMLEOptionGroupElementConstructor {\r\n    prototype: HTMLEOptionGroupElement;\r\n    new(): HTMLEOptionGroupElement;\r\n}\r\n\r\ninterface HTMLEOptionGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-optiongroup\": HTMLEOptionGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-optiongroup\"\r\n})\r\nclass HTMLEOptionGroupElementBase extends HTMLElement implements HTMLEOptionGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n}\r\n\r\nvar HTMLEOptionGroupElement: HTMLEOptionGroupElementConstructor = HTMLEOptionGroupElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEOptionElement } from \"./Option\";\r\nimport { HTMLEOptionGroupElement } from \"./OptionGroup\";\r\n\r\nexport { HTMLESelectElement };\r\n\r\ninterface HTMLESelectElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n    get options(): HTMLEOptionElement[];\r\n    get activeOption(): HTMLEOptionElement | null;\r\n    get selectedOption(): HTMLEOptionElement | null;\r\n    name: string;\r\n    value: string;\r\n    expanded: boolean;\r\n    expand(): void;\r\n    collapse(): void;\r\n    toggle(force?: boolean): void;\r\n}\r\n\r\ninterface HTMLESelectElementConstructor {\r\n    prototype: HTMLESelectElement;\r\n    new(): HTMLESelectElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-select\": HTMLESelectElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-select\"\r\n})\r\nclass HTMLESelectElementBase extends HTMLElement implements HTMLESelectElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n\r\n    static get formAssociated(): boolean {\r\n        return true;\r\n    }\r\n\r\n    get options(): HTMLEOptionElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEOptionElement>(\r\n            \"e-option\"\r\n        ));\r\n    }\r\n\r\n    get activeOption(): HTMLEOptionElement | null {\r\n        return this.querySelector(\"e-option:focus-within\") ?? null;\r\n    }\r\n\r\n    get selectedOption(): HTMLEOptionElement | null {\r\n        return this.querySelector(\"e-option[selected]\") ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"select\", observed: true})\r\n    type!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    #walker: TreeWalker;\r\n    #wasExpandedOnMouseDown: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"output\", {\r\n                        attributes: {\r\n                            part: \"value\"\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"box\"\r\n                },\r\n                children: element(\"slot\")\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.internals = this.attachInternals();\r\n        this.#wasExpandedOnMouseDown = false;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex, options, selectedOption, value} = this;\r\n        this.tabIndex = tabIndex;\r\n        const optionToSelect = selectedOption ?? options.find(\r\n            option_i => option_i.value === value\r\n        ) ?? this.#firstOption();\r\n        if (optionToSelect) {\r\n            this.#selectOption(optionToSelect);\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {expanded} = this;\r\n        if (!expanded) {\r\n            this.expanded = true;\r\n            this.#positionBox();\r\n            const {selectedOption} = this;\r\n            if (selectedOption) {\r\n                selectedOption.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {expanded} = this;\r\n        if (expanded) {\r\n            this.expanded = false;\r\n            this.focus();\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {expanded} = this;\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n    \r\n    #value(): HTMLElement {\r\n        return this.shadowRoot.querySelector<HTMLElement>(\"[part=value]\")!;\r\n    }\r\n\r\n    #box(): HTMLElement {\r\n        return this.shadowRoot.querySelector<HTMLElement>(\"[part=box]\")!;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEOptionElement && !node.disabled && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        else if (node instanceof HTMLEOptionGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = this;\r\n        return <HTMLEOptionElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = this;\r\n        return <HTMLEOptionElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousOption(option: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLEOptionElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextOption(option: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLEOptionElement | null>walker.nextNode();\r\n    }\r\n\r\n    #selectOption(option: HTMLEOptionElement) {\r\n        const {selectedOption} = this;\r\n        if (option !== selectedOption) {\r\n            option.selected = true;\r\n        }\r\n    }\r\n    \r\n    #setSelectedOption(option: HTMLEOptionElement) {\r\n        const {label, value} = option;\r\n        const {internals} = this;\r\n        this.#value().textContent = label;\r\n        internals.setFormValue(value);\r\n    }\r\n\r\n    #positionBox(): void {\r\n        const box = this.#box()\r\n        const {style: optionsStyle} = box;\r\n        const {bottom, left} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        optionsStyle.setProperty(\"top\", `${bottom + scrollY}px`);\r\n        optionsStyle.setProperty(\"left\", `${left + scrollX}px`);\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const wasExpandedOnMouseDown = this.#wasExpandedOnMouseDown;\r\n        if (!wasExpandedOnMouseDown) {\r\n            const {selectedOption} = this;\r\n            this.expand();\r\n            (selectedOption ?? this.#firstOption())?.focus({preventScroll: true});\r\n        }\r\n        else {\r\n            this.collapse();\r\n            const targetOption = (<HTMLElement>target).closest<HTMLEOptionElement>(\"e-option\");\r\n            if (targetOption) {\r\n                this.#selectOption(targetOption);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin || this === relatedTarget) {\r\n            this.collapse();\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(): void {\r\n        const {expanded} = this;\r\n        this.#wasExpandedOnMouseDown = expanded;\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetOption = (<Element>target).closest<HTMLEOptionElement>(\"e-option\");\r\n        if (targetOption) {\r\n            targetOption.focus({preventScroll: true});\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded, activeOption, selectedOption} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                if (expanded) {\r\n                    const previousOption = activeOption ?\r\n                        this.#previousOption(activeOption) :\r\n                        this.#firstOption();\r\n                    if (previousOption) {\r\n                        previousOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const previousOption = selectedOption ?\r\n                        this.#previousOption(selectedOption) :\r\n                        this.#firstOption();\r\n                    if (previousOption) {\r\n                        this.#selectOption(previousOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (expanded) {\r\n                    const nextOption = activeOption ?\r\n                        this.#nextOption(activeOption) :\r\n                        this.#lastOption();\r\n                    if (nextOption) {\r\n                        nextOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const nextOption = selectedOption ?\r\n                        this.#nextOption(selectedOption) :\r\n                        this.#lastOption();\r\n                    if (nextOption) {\r\n                        this.#selectOption(nextOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstOption = this.#firstOption();\r\n                if (firstOption) {\r\n                    if (expanded) {\r\n                        firstOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(firstOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastOption = this.#lastOption();\r\n                if (lastOption) {\r\n                    if (expanded) {\r\n                        lastOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(lastOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                this.toggle();\r\n                const {expanded} = this;\r\n                if (expanded) {\r\n                    const {selectedOption} = this;\r\n                    (selectedOption ?? this.#firstOption())?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    if (activeOption) {\r\n                        this.#selectOption(activeOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.collapse();\r\n                    event.stopPropagation();\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            default: {\r\n                const {length: keyLength} = key;\r\n                if (keyLength == 1) {\r\n                    const keyCode = key.charCodeAt(0);\r\n                    const {options} = this;\r\n                    const activeIndex = activeOption ? options.indexOf(activeOption) : -1;\r\n                    const matchingOption = options.find(\r\n                        (option_i, i) => option_i.label.toLowerCase().charCodeAt(0) == keyCode && i > activeIndex\r\n                    ) ?? options.find(\r\n                        (option_i) => option_i.label.toLowerCase().charCodeAt(0) == keyCode\r\n                    );\r\n                    if (matchingOption) {\r\n                        matchingOption.focus({preventScroll: true});\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    #handleSelectEvent(event: Event): void {\r\n        const {target} = event;\r\n        const targetOption = (<Element>target).closest<HTMLEOptionElement>(\"e-option\");\r\n        if (targetOption) {\r\n            const {selected} = targetOption;\r\n            if (selected) {\r\n                const {options} = this;\r\n                options.forEach((option_i) => {\r\n                    if (option_i !== targetOption && option_i.selected) {\r\n                        option_i.selected = false;\r\n                    }\r\n                });\r\n                this.#setSelectedOption(targetOption);\r\n            }\r\n            else {\r\n                const {selectedOption} = this;\r\n                if (selectedOption === null) {\r\n                    const firstOption = this.#firstOption();\r\n                    if (firstOption !== null) {\r\n                        this.#setSelectedOption(firstOption);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLESelectElement: HTMLESelectElementConstructor = HTMLESelectElementBase;","import { CustomElement } from \"../Element\";\r\n\r\nexport { HTMLESeparatorElement };\r\n\r\ninterface HTMLESeparatorElementConstructor {\r\n    prototype: HTMLESeparatorElement;\r\n    new(): HTMLESeparatorElement;\r\n}\r\n\r\ninterface HTMLESeparatorElement extends HTMLElement {}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-separator\": HTMLESeparatorElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-separator\"\r\n})\r\nclass HTMLESeparatorElementBase extends HTMLElement implements HTMLESeparatorElement {\r\n    #internals: ElementInternals;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#internals = this.attachInternals();\r\n        this.#internals.role = \"separator\";\r\n    }\r\n}\r\n\r\nvar HTMLESeparatorElement: HTMLESeparatorElementConstructor = HTMLESeparatorElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEHandleElement };\r\n\r\ninterface HTMLEHandleElementConstructor {\r\n    prototype: HTMLEHandleElement;\r\n    new(): HTMLEHandleElement;\r\n}\r\n\r\ninterface HTMLEHandleElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    controls: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-handle\": HTMLEHandleElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"move\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-handle\"\r\n})\r\nclass HTMLEHandleElementBase extends HTMLElement implements HTMLEHandleElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                            \r\n                            width: 24px;\r\n                            height: 12px;\r\n                            \r\n                            background-color: rgb(0, 128, 255);\r\n\r\n                            -webkit-mask-image: url(\"assets/dots.png\");\r\n                            mask-image: url(\"assets/dots.png\");\r\n\r\n                            -webkit-mask-repeat: repeat;\r\n                            mask-repeat: repeat;\r\n                            cursor: move;\r\n                        }\r\n                    `\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"controls\": {\r\n                const {controls} = this;\r\n                this.#target = document.getElementById(controls);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        this.#target = document.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            const target = this.#target;\r\n            if (target !== null) {\r\n                const targetComputedStyle = window.getComputedStyle(target);\r\n                const {movementX, movementY} = event;\r\n                const {width: rectWidth, height: rectHeight} = target.getBoundingClientRect();\r\n                const outerElement = target.parentElement ?? document.body;\r\n                const {\r\n                    left: outerRectLeft, right: outerRectRight,\r\n                    top: outerRectTop, bottom: outerRectBottom\r\n                } = outerElement.getBoundingClientRect();\r\n                const left = parseFloat(targetComputedStyle.getPropertyValue(\"left\"));\r\n                const newLeft = Math.max(outerRectLeft, Math.min(Math.trunc(left + movementX), outerRectRight - rectWidth));\r\n                const top = parseFloat(targetComputedStyle.getPropertyValue(\"top\"));\r\n                const newTop = Math.max(outerRectTop, Math.min(Math.trunc(top + movementY), outerRectBottom - rectHeight));\r\n                target.style.setProperty(\"left\", `${newLeft}px`);\r\n                target.style.setProperty(\"top\", `${newTop}px`);\r\n                this.dispatchEvent(new CustomEvent(\"move\"));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEHandleElement: HTMLEHandleElementConstructor = HTMLEHandleElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEHeightSashElement };\r\n\r\ninterface HTMLEHeightSashElementConstructor {\r\n    prototype: HTMLEHeightSashElement;\r\n    new(): HTMLEHeightSashElement;\r\n}\r\n\r\ninterface HTMLEHeightSashElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    controls: string;\r\n    growdir: \"top\" | \"bottom\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-hsash\": HTMLEHeightSashElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"resize\": Event;\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-hsash\"\r\n})\r\nclass HTMLEHeightSashElementBase extends HTMLElement implements HTMLEHeightSashElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"top\"})\r\n    growdir!: \"top\" | \"bottom\";\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n    #queuedPointerCallback: FrameRequestCallback | null;\r\n    #pointerMovement: number;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#target = null;\r\n        this.#queuedPointerCallback = null;\r\n        this.#pointerMovement = 0;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        const rootNode = <ShadowRoot | Document>this.getRootNode();\r\n        this.#target = rootNode.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            if (this.#queuedPointerCallback == null) {\r\n                this.#pointerMovement = event.movementY;\r\n                this.#queuedPointerCallback = this.#pointerMoveCallback.bind(this);\r\n                requestAnimationFrame(this.#queuedPointerCallback);\r\n            }\r\n            else {\r\n                this.#pointerMovement += event.movementY;\r\n            }\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const {growdir} = this;\r\n            const movementY = this.#pointerMovement;\r\n            const height = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            const newHeight = Math.trunc(height + (growdir == \"top\" ? -1 : 1) * movementY);\r\n            target.style.setProperty(\"height\", `${newHeight}px`);\r\n            const computedNewHeight = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            target.style.setProperty(\"height\", `${computedNewHeight}px`);\r\n            this.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        this.#queuedPointerCallback = null;\r\n    }\r\n}\r\n\r\nvar HTMLEHeightSashElement: HTMLEHeightSashElementConstructor = HTMLEHeightSashElementBase;","import { CustomElement, AttributeProperty } from \"../Element\";\r\n\r\nexport { HTMLEImportElement };\r\n\r\ninterface HTMLEImportElementConstructor {\r\n    prototype: HTMLEImportElement;\r\n    new(): HTMLEImportElement;\r\n}\r\n\r\ninterface HTMLEImportElement extends HTMLElement {\r\n    src: string;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-import\": HTMLEImportElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"load\": Event;\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-import\"\r\n})\r\nclass HTMLEImportElementBase extends HTMLElement implements HTMLEImportElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    src!: string;\r\n    \r\n    connectedCallback(): void {\r\n        const {src} = this;\r\n        if (src) {\r\n            this.#importRequest(src);\r\n        }\r\n    }\r\n\r\n    async #importRequest(src: string): Promise<void> {\r\n        this.outerHTML = await fetch(src).then((response: Response) => {\r\n            if (response.ok) {\r\n                return response.text();\r\n            }\r\n            else {\r\n                throw new Error(response.statusText);\r\n            }\r\n        });\r\n        this.dispatchEvent(new Event(\"load\", {bubbles: true}));\r\n    }\r\n}\r\n\r\nvar HTMLEImportElement: HTMLEImportElementConstructor = HTMLEImportElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLELoaderElement };\r\n\r\ninterface HTMLELoaderElementConstructor {\r\n    prototype: HTMLELoaderElement;\r\n    new(): HTMLELoaderElement;\r\n}\r\n\r\ninterface HTMLELoaderElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    type: \"bar\" | \"circle\";\r\n    promise: Promise<any> | null;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-loader\": HTMLELoaderElement,\r\n    }\r\n}\r\n\r\nvar barShadowTemplate: HTMLTemplateElement;\r\nvar circleShadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-loader\"\r\n})\r\nclass HTMLELoaderElementBase extends HTMLElement implements HTMLELoaderElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String, defaultValue: \"bar\", observed: true})\r\n    type!: \"bar\" | \"circle\";\r\n    \r\n    #promise: Promise<any> | null;\r\n\r\n    static {\r\n        const commonStyle = element(\"style\", {\r\n            children: [\r\n                /*css*/`\r\n                    :host {\r\n                        display: inline-block;\r\n                        --default-loader-color: rgb(0, 128, 255);\r\n                        --default-animation-duration: 2s;\r\n                    }\r\n                `\r\n            ]\r\n        });\r\n        const barStyle = commonStyle.cloneNode(true);\r\n        const circleStyle = commonStyle.cloneNode(true);\r\n        barStyle.textContent += /*css*/`\r\n            :host {\r\n                display: block;\r\n            }\r\n\r\n            [part=\"bar\"] {\r\n                position: relative;\r\n                display: block;\r\n                overflow: hidden;\r\n                height: 6px;\r\n                width: 100%;\r\n            }\r\n\r\n            [part=\"slider\"] {\r\n                display: flex;\r\n                position: absolute;\r\n                width: 100%;\r\n                height: 100%;\r\n                animation-name: slider;\r\n            }\r\n\r\n            [part=\"slider\"],\r\n            [part=\"cursor\"] {\r\n                border-radius: 4px;\r\n                will-change: transform;\r\n                animation-duration: var(--animation-duration, var(--default-animation-duration));\r\n                animation-timing-function: linear;\r\n                animation-iteration-count: infinite;\r\n            }\r\n\r\n            [part=\"cursor\"] {\r\n                display: block;\r\n                width: 128px;\r\n                background-color: var(--loader-color, var(--default-loader-color));\r\n                animation-name: cursor;\r\n            }\r\n\r\n            [part=\"bar\"]:after {\r\n                animation-name: shine;\r\n                animation-duration: var(--animation-duration, var(--default-animation-duration));\r\n                animation-iteration-count: infinite;\r\n                animation-fill-mode: forwards;  \r\n                content: \"\";\r\n                position: absolute;\r\n                left: -100%;\r\n                width: 100%;\r\n                height: 100%;\r\n                top: 0;\r\n                opacity: 0;\r\n                \r\n                background: rgba(255, 255, 255, 0.13);\r\n                background: linear-gradient(\r\n                    to right, \r\n                    rgba(255, 255, 255, 0) 0%,\r\n                    rgba(255, 255, 255, 0.1) 10%,\r\n                    rgba(255, 255, 255, 0.9) 80%,\r\n                    rgba(255, 255, 255, 0) 100%\r\n                );\r\n            }\r\n\r\n            @keyframes shine {\r\n                25% {\r\n                    opacity: 1;\r\n                    left: -100%;\r\n                }\r\n                100% {\r\n                    opacity: 0;\r\n                    left: 100%;\r\n                }\r\n            }\r\n\r\n            @keyframes slider {\r\n                0% {\r\n                    transform: translateX(0%);\r\n                }\r\n                100% {\r\n                    transform: translateX(100%);\r\n                }\r\n            }\r\n\r\n            @keyframes cursor {\r\n                0% {\r\n                    transform: translateX(-100%);\r\n                }\r\n                100% {\r\n                    transform: translateX(100%);\r\n                }\r\n            }\r\n        `;\r\n        circleStyle.textContent += /*css*/`\r\n            :host {\r\n                display: inline-block;\r\n            }\r\n\r\n            [part=\"circle\"] {\r\n                width: 12px;\r\n                height: 12px;\r\n                border-top: 4px solid var(--loader-color, var(--default-loader-color));\r\n                border-right: 4px solid var(--loader-color, var(--default-loader-color));\r\n                border-left: 4px solid transparent;\r\n                border-bottom: 4px solid transparent;\r\n                border-radius: 50%;\r\n                animation-duration: 1s;\r\n                animation-name: circle;\r\n                animation-timing-function: linear;\r\n                animation-iteration-count: infinite;\r\n            }\r\n\r\n            @keyframes circle {\r\n                0% {\r\n                    transform: rotate(0);\r\n                }\r\n                100% {\r\n                    transform: rotate(360deg);\r\n                }\r\n            }\r\n        `;\r\n        barShadowTemplate = element(\"template\");\r\n        barShadowTemplate.content.append(\r\n            barStyle,\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"bar\"\r\n                },\r\n                children: [\r\n                    element(\"div\", {\r\n                        attributes: {\r\n                            part: \"slider\"\r\n                        },\r\n                        children: [\r\n                            element(\"div\", {\r\n                                attributes: {\r\n                                    part: \"cursor\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n        circleShadowTemplate = element(\"template\");\r\n        circleShadowTemplate.content.append(\r\n            circleStyle,\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"circle\"\r\n                }\r\n            })\r\n        )\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.#updateTemplate();\r\n        this.#promise = null;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"type\": {\r\n                this.#updateTemplate();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    set promise(promise: Promise<any> | null) {\r\n        if (promise) {\r\n            promise.finally(() => {\r\n                this.remove();\r\n            });\r\n        }\r\n        this.#promise = promise;\r\n    }\r\n\r\n    get promise(): Promise<any> | null {\r\n        return this.#promise;\r\n    }\r\n\r\n    #updateTemplate(): void {\r\n        const {type, shadowRoot} = this;\r\n        switch (type) {\r\n            case \"circle\": {\r\n                shadowRoot.replaceChildren(\r\n                    circleShadowTemplate.content.cloneNode(true)\r\n                );\r\n                break;\r\n            }\r\n            case \"bar\": {\r\n                shadowRoot.replaceChildren(\r\n                    barShadowTemplate.content.cloneNode(true)\r\n                );\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLELoaderElement: HTMLELoaderElementConstructor = HTMLELoaderElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEWidthSashElement };\r\n\r\ninterface HTMLEWidthSashElementConstructor {\r\n    prototype: HTMLEWidthSashElement;\r\n    new(): HTMLEWidthSashElement;\r\n}\r\n\r\ninterface HTMLEWidthSashElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    controls: string;\r\n    growdir: \"right\" | \"left\";\r\n    max: boolean;\r\n    setWidth(width: number): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-wsash\": HTMLEWidthSashElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"resize\": Event;\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-wsash\"\r\n})\r\nclass HTMLEWidthSashElementBase extends HTMLElement implements HTMLEWidthSashElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"right\"})\r\n    growdir!: \"right\" | \"left\";\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    max!: boolean;\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n    #queuedPointerCallback: FrameRequestCallback | null;\r\n    #pointerMovement: number;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#target = null;\r\n        this.#queuedPointerCallback = null;\r\n        this.#pointerMovement = 0;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    setWidth(width: number): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const {max} = this;\r\n            target.style.setProperty(\"width\", `${width}px`);\r\n            if (max) {\r\n                target.style.setProperty(\"max-width\", `${width}px`);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        const rootNode = <ShadowRoot | Document>this.getRootNode();\r\n        this.#target = rootNode.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            if (this.#queuedPointerCallback == null) {\r\n                this.#queuedPointerCallback = this.#pointerMoveCallback.bind(this);\r\n                requestAnimationFrame(this.#queuedPointerCallback);\r\n            }\r\n            this.#pointerMovement += event.movementX;\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const {growdir} = this;\r\n            const movementX = this.#pointerMovement;\r\n            const width = parseFloat(targetComputedStyle.getPropertyValue(\"width\"));\r\n            const newWidth = width + (growdir == \"right\" ? 1 : -1) * movementX;\r\n            this.setWidth(newWidth);\r\n            this.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        this.#pointerMovement = 0;\r\n        this.#queuedPointerCallback = null;\r\n    }\r\n}\r\n\r\nvar HTMLEWidthSashElement: HTMLEWidthSashElementConstructor = HTMLEWidthSashElementBase;","import { areAttributesMatching, AttributeMutationMixin } from \"../elements/Element\";\r\n\r\nexport { AttributeMixinsObserver };\r\n\r\ninterface AttributeMixinsObserverConstructor {\r\n    prototype: AttributeMixinsObserver;\r\n    new(mixins: AttributeMutationMixin[]): AttributeMixinsObserver;\r\n}\r\n\r\ninterface AttributeMixinsObserver {\r\n    observe(target: Node): void;\r\n    trigger(): void;\r\n    disconnect(): void;\r\n}\r\n\r\nclass AttributeMixinsObserverBase implements AttributeMixinsObserver {\r\n    #observer: MutationObserver;\r\n    #mixins: AttributeMutationMixin[];\r\n\r\n    constructor(mixins: AttributeMutationMixin[]) {\r\n        this.#observer = new MutationObserver(\r\n            this.#callback.bind(this)\r\n        );\r\n        this.#mixins = mixins.slice();\r\n    }\r\n\r\n    trigger(): void {\r\n        this.#callback(this.#observer.takeRecords());\r\n    }\r\n\r\n    observe(target: Node): void  {\r\n        this.#observer.observe(target, {\r\n            childList: true,\r\n            subtree: true,\r\n            attributeFilter: this.#mixins.map((mixin => mixin.attributeName))\r\n        });\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#observer.disconnect();\r\n    }\r\n\r\n    #callback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            mutation.addedNodes.forEach((node: Node) => {\r\n                if (node instanceof Element) {\r\n                    this.#attachMatchingAttributeMixinsInSubtree(node);\r\n                }\r\n            });\r\n            mutation.removedNodes.forEach((node: Node) => {\r\n                if (node instanceof Element) {\r\n                    this.#detachMatchingAttributeMixinsInSubtree(node);\r\n                }\r\n            });\r\n            if (mutation.target instanceof Element) {\r\n                const targetElement = mutation.target;\r\n                const attributeName = mutation.attributeName;\r\n                if (attributeName) {\r\n                    const relatedMixins = this.#mixins.filter(mixin => mixin.attributeName == attributeName);\r\n                    relatedMixins.forEach((mixin) => {\r\n                        if (areAttributesMatching(\r\n                                mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                                attributeName!, targetElement.getAttribute(attributeName!)\r\n                            )) {\r\n                                mixin.attach(targetElement);\r\n                        }\r\n                        else {\r\n                            mixin.detach(targetElement);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    #attachMatchingAttributeMixinsInSubtree(element: Element) {\r\n        Array.from(element.attributes).forEach((attr) => {\r\n            let matchingMixins = this.#mixins.filter(\r\n                mixin => areAttributesMatching(\r\n                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                    attr.name, attr.value\r\n                )\r\n            );\r\n            matchingMixins.forEach((mixin) => {\r\n                mixin.attach(element);\r\n            });\r\n        });\r\n        let childIndex = 0;\r\n        const {children} = element;\r\n        while (childIndex < children.length) {\r\n            const child = children.item(childIndex);\r\n            if (child !== null) {\r\n                this.#attachMatchingAttributeMixinsInSubtree(child);\r\n            }\r\n            childIndex++;\r\n        }\r\n    }\r\n\r\n    #detachMatchingAttributeMixinsInSubtree(element: Element) {\r\n        Array.from(element.attributes).forEach((attr) => {\r\n            let matchingMixins = this.#mixins.filter(\r\n                mixin => areAttributesMatching(\r\n                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                    attr.name, attr.value\r\n                )\r\n            );\r\n            matchingMixins.forEach((mixin) => {\r\n                mixin.detach(element);\r\n            });\r\n        });\r\n        let childIndex = 0;\r\n        const {children} = element;\r\n        while (childIndex < children.length) {\r\n            const child = children.item(childIndex);\r\n            if (child !== null) {\r\n                this.#detachMatchingAttributeMixinsInSubtree(child);\r\n            }\r\n            childIndex++;\r\n        }\r\n    }\r\n}\r\n\r\nvar AttributeMixinsObserver: AttributeMixinsObserverConstructor = AttributeMixinsObserverBase;","import { ReactiveChildElements } from \"../../elements/Element\";\r\nimport { camelToTrain } from \"../../elements/Snippets\";\r\n\r\nexport { WidgetFactoryConstructor };\r\n\r\nexport { widget };\r\nexport { Widget };\r\nexport { WidgetFactory };\r\nexport { widgets };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {}\r\n}\r\n\r\ninterface WidgetFactoryConstructor {\r\n    prototype: WidgetFactory;\r\n    new(): WidgetFactory;\r\n}\r\n\r\ninterface WidgetFactory {\r\n    create(properties?: object): HTMLElement;\r\n    slot(root: HTMLElement, name: string | null): HTMLElement | null;\r\n}\r\n\r\nvar slotsMap: WeakMap<HTMLElement, {\r\n    widget: WidgetFactory,\r\n    element: WeakRef<HTMLElement>;\r\n    slot: string | null;\r\n}[]> = new WeakMap();\r\nvar slotsObserver = new MutationObserver(\r\n    (mutationsList: MutationRecord[]) => {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            if (target instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"childList\": {\r\n                        const slotReferences = slotsMap.get(target);\r\n                        if (slotReferences) {\r\n                            slotReferences.forEach(slotRef_i => {\r\n                                const {widget, element, slot} = slotRef_i;\r\n                                const slottedCallback = (widget as any)[\"slottedCallback\"];\r\n                                if (typeof slottedCallback == \"function\") {\r\n                                    slottedCallback(element.deref(), target, slot);\r\n                                }\r\n                            });\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n);\r\n\r\nvar widgetsMap: WeakMap<HTMLElement, WidgetFactory> = new WeakMap();\r\nvar attributesObserver = new MutationObserver(\r\n    (mutationsList: MutationRecord[]) => {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            if (target instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"attributes\": {\r\n                        const {attributeName, oldValue} = mutation;\r\n                        const widget = widgetsMap.get(target);\r\n                        if (widget) {\r\n                            const attributeChangedCallback = (widget as any)[\"attributeChangedCallback\"];\r\n                            if (typeof attributeChangedCallback == \"function\") {\r\n                                attributeChangedCallback(target, attributeName, oldValue, target.getAttribute(attributeName!));\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n);\r\n\r\nclass WidgetFactoryBase implements WidgetFactory {\r\n\r\n    constructor() {\r\n        const widget = <WidgetFactory>this;\r\n        this.create = new Proxy(\r\n            this.create, {\r\n                apply: (target, thisArg, argumentsList: Parameters<WidgetFactory[\"create\"]>) => {\r\n                    const element = <HTMLElement>Reflect.apply(target, thisArg, argumentsList);\r\n                    const observedSlots = <(string | null)[]>(widget as any)[\"observedSlots\"];\r\n                    if (Array.isArray(observedSlots)) {\r\n                        const slots = observedSlots\r\n                            .map(slotName_i => {\r\n                                return {\r\n                                    slotName: slotName_i,\r\n                                    slotElement: widget.slot(element, slotName_i)\r\n                                };\r\n                            });\r\n                        slots.forEach(slot_i => {\r\n                            const {slotElement, slotName} = slot_i;\r\n                            if (slotElement) {\r\n                                slotsObserver.observe(slotElement, {\r\n                                    childList: true\r\n                                });\r\n                                const slotReferences = slotsMap.get(slotElement);\r\n                                const slotReference = {widget, element: new WeakRef(element), slot: slotName};\r\n                                if (Array.isArray(slotReferences)) {\r\n                                    slotReferences.push(slotReference);\r\n                                }\r\n                                else {\r\n                                    slotsMap.set(slotElement, new Array(slotReference));\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                    const observedAttributes = (widget as any)[\"observedAttributes\"];\r\n                    if (Array.isArray(observedAttributes)) {\r\n                        widgetsMap.set(element, widget);\r\n                        attributesObserver.observe(element, {\r\n                            attributes: true,\r\n                            attributeFilter: observedAttributes,\r\n                            attributeOldValue: true\r\n                        });\r\n                    }\r\n                    return element;\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    create(): HTMLElement {\r\n        throw new Error(`create method is not implemented`);\r\n    }\r\n\r\n    slot(): HTMLElement | null {\r\n        return null;\r\n    }\r\n\r\n    get observedSlots(): string[] {\r\n        return [\"\"];\r\n    }\r\n}\r\n\r\nvar WidgetFactory: WidgetFactoryConstructor = WidgetFactoryBase;\r\nvar widgets: Map<string, WidgetFactory> = new Map();\r\n\r\ninterface WidgetInit<K extends keyof WidgetNameMap> {\r\n    properties?: Parameters<WidgetNameMap[K][\"create\"]>[0],\r\n    attributes?: {\r\n        [name: string]: number | string | boolean\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    slotted?: {\r\n        [slot: string]: Node | string | (Node | string)[] | NodeList | ReactiveChildElements\r\n    } | (Node | string | (Node | string)[] | NodeList | ReactiveChildElements),\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: K, init?: WidgetInit<K>): ReturnType<WidgetNameMap[K][\"create\"]>;\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: K, init?: WidgetInit<K>): HTMLElement {\r\n    const widget = widgets.get(name);\r\n    if (widget) {\r\n        if (init !== undefined) {\r\n            const {properties, attributes, dataset, slotted, listeners} = init;\r\n            const element = widget.create(properties);\r\n            if (attributes) {\r\n                Object.entries(attributes).forEach(([attributeName, attributeValue]) => {\r\n                    if (attributeValue !== undefined) {\r\n                        if (typeof attributeValue === \"boolean\") {\r\n                            element.toggleAttribute(camelToTrain(attributeName), attributeValue);\r\n                        }\r\n                        else {\r\n                            element.setAttribute(camelToTrain(attributeName), String(attributeValue));\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            if (dataset) {\r\n                const {dataset: elementDataset} = element;\r\n                Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                    elementDataset[datasetEntry_i] = String(dataset[datasetEntry_i]);\r\n                });\r\n            }\r\n            if (slotted) {\r\n                if (typeof slotted === \"function\" || Array.isArray(slotted) || slotted instanceof NodeList || typeof slotted === \"string\" || slotted instanceof Node) {\r\n                    const slot = widget.slot(element, null);\r\n                    if (slot) {\r\n                        if (typeof slotted === \"function\") {\r\n                            slot.append(...slotted(slot));\r\n                        }\r\n                        else if (typeof slotted === \"object\" && \"length\" in slotted) {\r\n                            slot.append(...Array.from(slotted));\r\n                        }\r\n                        else {\r\n                            slot.append(slotted);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    Object.entries(slotted).forEach(([slot_i, slotted]) => {\r\n                        const slot = widget.slot(element, slot_i);\r\n                        if (slot) {\r\n                            if (typeof slotted === \"function\") {\r\n                                slot.append(...slotted(slot));\r\n                            }\r\n                            else if (typeof slotted === \"object\" && \"length\" in slotted) {\r\n                                slot.append(...Array.from(slotted));\r\n                            }\r\n                            else {\r\n                                slot.append(slotted);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            if (listeners) {\r\n                Object.entries(listeners).forEach(([name_i, listener_i]) => {\r\n                    if (Array.isArray(listener_i)) {\r\n                        element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                    }\r\n                    else {\r\n                        element.addEventListener(name_i, listener_i);\r\n                    }\r\n                });\r\n            }\r\n            return element;\r\n        }\r\n        else {\r\n            return widget.create();\r\n        }\r\n    }\r\n    throw new Error(`Unknown widget ${name}. The corresponding module might not be imported.`);\r\n}\r\n\r\ninterface WidgetDecorator {\r\n    (init: {\r\n        name: string;\r\n    }): <W extends WidgetFactoryConstructor>(widget: W) => W;\r\n}\r\n\r\nconst Widget: WidgetDecorator = function(init: {\r\n    name: string;\r\n}) {\r\n    return <W extends WidgetFactoryConstructor>(\r\n        widget: W\r\n    ) => {\r\n        const {name} = init;\r\n        widgets.set(\r\n            name,\r\n            new widget()\r\n        );\r\n        return widget;\r\n    }\r\n}","import { element } from \"../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"./Widget\";\r\n\r\nexport { separatorWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"separator\": SeparatorWidgetFactory\r\n    }\r\n}\r\n\r\ninterface SeparatorWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar separatorWidget = new (\r\nWidget({\r\n    name: \"separator\"\r\n})(class SeparatorWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"separator\",\r\n                role: \"separator\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuItemWidget };\r\n\r\ntype MenuItemType = \"button\" | \"radio\" | \"checkbox\" | \"menu\" | \"submenu\";\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menuitem\": MenuItemWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        type?: MenuItemType;\r\n        checked?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void;\r\n    getMenu(item: HTMLElement): HTMLElement | null;\r\n    getKeyShortcut(item: HTMLElement): string | null;\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    getType(item: HTMLElement): MenuItemType | null;\r\n    setType(item: HTMLElement, type: MenuItemType): void;\r\n    getValue(item: HTMLElement): string;\r\n    setValue(item: HTMLElement, value: string): void;\r\n    getName(item: HTMLElement): string;\r\n    setName(item: HTMLElement, value: string): void;\r\n    getChecked(item: HTMLElement): boolean;\r\n    setChecked(item: HTMLElement, value: boolean): void;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setExpanded(item: HTMLElement, value: boolean): void;\r\n    getExpanded(item: HTMLElement): boolean;\r\n    toggle(item: HTMLElement, force?: boolean): void;\r\n    expand(item: HTMLElement): void;\r\n    collapse(item: HTMLElement): void;\r\n}\r\n\r\nvar menuItemWidget = new(\r\nWidget({\r\n    name: \"menuitem\"\r\n})(\r\nclass MenuItemWidgetFactoryBase extends WidgetFactory implements MenuItemWidgetFactory {\r\n    #iconPartTemplate: HTMLElement;\r\n    #arrowPartTemplate : HTMLElement;\r\n    #keyshortcutsPartTemplate: HTMLElement;\r\n    #template: HTMLElement;\r\n    #types: MenuItemType[];\r\n    #typesFeatures: {\r\n        [key in MenuItemType]: {\r\n            role: string,\r\n            hasIcon: boolean,\r\n            hasArrow: boolean\r\n        }\r\n    };\r\n\r\n    constructor() {\r\n        super();\r\n        this.#iconPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"icon\"\r\n            }\r\n        });\r\n        this.#arrowPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"arrow\"\r\n            }\r\n        });\r\n        this.#keyshortcutsPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"keyshortcuts\"\r\n            }\r\n        });\r\n        this.#template = element(\"button\", {\r\n            attributes: {\r\n                class: \"menuitem\",\r\n                role: \"menuitem\",\r\n                type: \"button\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                this.#iconPartTemplate.cloneNode(true),\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n        this.#types = [\"checkbox\", \"radio\", \"menu\", \"submenu\", \"button\"];\r\n        this.#typesFeatures = {\r\n            button: {\r\n                role: \"menuitem\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            checkbox: {\r\n                role: \"menuitemcheckbox\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            radio: {\r\n                role: \"menuitemradio\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            menu: {\r\n                role: \"menuitem\",\r\n                hasIcon: false,\r\n                hasArrow: false\r\n            },\r\n            submenu: {\r\n                role: \"menuitem\",\r\n                hasIcon: true,\r\n                hasArrow: true\r\n            }\r\n        }\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        type: MenuItemType;\r\n        checked?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (init !== undefined) {\r\n            const {id, classList, tabIndex, keyshortcut, checked, type, label, name, value, disabled} = init;\r\n            if (id !== undefined) {\r\n                item.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                item.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                item.tabIndex = tabIndex;\r\n            }\r\n            if (keyshortcut !== undefined) {\r\n                this.setKeyShortcut(item, keyshortcut);\r\n            }\r\n            if (checked !== undefined) {\r\n                this.setChecked(item, checked);\r\n            }\r\n            if (type !== undefined) {\r\n                if (type == \"menu\" || type == \"submenu\") {\r\n                    this.setExpanded(item, false);\r\n                }\r\n                this.setType(item, type);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(item, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(item, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(item: HTMLElement): HTMLElement | null {\r\n        return item;\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void {\r\n        const hasChildMenu = Array.from(slot.childNodes).some(\r\n            childNode_i => childNode_i instanceof HTMLElement && childNode_i.classList.contains(\"menu\")\r\n        );\r\n        item.setAttribute(\"aria-haspopup\", String(hasChildMenu));\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n\r\n    getMenu(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .menu\");\r\n    }\r\n\r\n    getKeyShortcut(item: HTMLElement): string | null {\r\n        return item.getAttribute(\"aria-keyshortcuts\");\r\n    }\r\n\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void {\r\n        let keyshortcutsPart = item.querySelector(\":scope > .keyshortcuts\");\r\n        if (value !== null) {\r\n            item.setAttribute(\"aria-keyshortcuts\", value);\r\n            if (!keyshortcutsPart) {\r\n                const labelPart = this.#label(item);\r\n                const keyshortcutsPartTemplate = this.#keyshortcutsPartTemplate;\r\n                keyshortcutsPart = <HTMLElement>keyshortcutsPartTemplate.cloneNode(true);\r\n                labelPart.after(keyshortcutsPart);\r\n            }\r\n            keyshortcutsPart.textContent = value;\r\n        }\r\n        else {\r\n            item.removeAttribute(\"aria-keyshortcuts\");\r\n            if (keyshortcutsPart) {\r\n                keyshortcutsPart.remove();\r\n            }\r\n        }\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n    \r\n    getType(item: HTMLElement): MenuItemType | null {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`menuitem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setType(item: HTMLElement, type: MenuItemType): void {\r\n        const typesFeatures = this.#typesFeatures;\r\n        const iconPartTemplate = this.#iconPartTemplate;\r\n        const arrowPartTemplate = this.#arrowPartTemplate;\r\n        const {role, hasIcon, hasArrow} = typesFeatures[type];\r\n        const oldType = this.getType(item);\r\n        const {classList} = item;\r\n        if (oldType) {\r\n            classList.remove(`menuitem-${oldType}`);\r\n        }\r\n        classList.add(`menuitem-${type}`);\r\n        item.setAttribute(\"role\", role);\r\n        const labelPart = this.#label(item);\r\n        const iconPart = item.querySelector(\":scope > .icon\");\r\n        const arrowPart = item.querySelector(\":scope > .arrow\");\r\n        if (hasIcon) {\r\n            if (!iconPart && labelPart) {\r\n                labelPart.before(iconPartTemplate.cloneNode(true));\r\n            }\r\n        }\r\n        else {\r\n            if (iconPart) {\r\n                iconPart.remove();\r\n            }\r\n        }\r\n        if (hasArrow) {\r\n            if (!arrowPart && labelPart) {\r\n                labelPart.after(arrowPartTemplate.cloneNode(true));\r\n            }\r\n        }\r\n        else {\r\n            if (arrowPart) {\r\n                arrowPart.remove();\r\n            }\r\n        }\r\n    }\r\n\r\n    getValue(item: HTMLElement): string {\r\n        return item.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"value\", value);\r\n    }\r\n    \r\n    getName(item: HTMLElement): string {\r\n        return item.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getChecked(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-checked\") ?? String(false));\r\n    }\r\n\r\n    setChecked(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-checked\", String(value));\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-expanded\", String(value));\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-expanded\") ?? String(false));\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        const expand = force ?? !this.getExpanded(item);\r\n        this.setExpanded(item, expand);\r\n        if (expand) {\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    expand(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (!expanded) {\r\n            this.setExpanded(item, true);\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    collapse(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (expanded) {\r\n            this.setExpanded(item, false);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.setChecked(targetItem, !this.getChecked(targetItem));\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.setChecked(targetItem, true);\r\n                    break;\r\n                }\r\n                case \"menu\":\r\n                case \"submenu\": {\r\n                    this.toggle(targetItem);\r\n                    if (this.getExpanded(targetItem)) {\r\n                        this.getMenu(targetItem)?.focus({preventScroll: true});\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(item: HTMLElement): void {\r\n        const menu = this.getMenu(item);\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = item.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const type = this.getType(item);\r\n            if (type == \"menu\") {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const closestMenu = item.closest(\".menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    const overflowX = itemRight + menuWidth - clientWidth;\r\n                    const overflowY = itemTop + menuHeight - clientHeight;\r\n                    menuStyle.setProperty(\"left\", `${\r\n                        overflowX > 0 ?\r\n                        itemLeft - menuWidth - closestMenuLeft :\r\n                        itemRight - closestMenuLeft\r\n                    }px`);\r\n                    const menuComputedStyle = window.getComputedStyle(menu);\r\n                    const {paddingTop, paddingBottom} = menuComputedStyle;\r\n                    const menuPaddingTop = parseFloat(paddingTop);\r\n                    const menuPaddingBottom = parseFloat(paddingBottom);\r\n                    menuStyle.setProperty(\"top\", `${\r\n                        overflowY > 0 ?\r\n                        itemBottom - menuHeight - closestMenuTop + menuPaddingBottom :\r\n                        itemTop - closestMenuTop - menuPaddingTop\r\n                    }px`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { menuItemWidget } from \"./MenuItemWidget\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuBarWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menubar\": MenuBarWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuBarWidgetFactory extends WidgetFactory {\r\n    setExpanded(menubar: HTMLElement, value: boolean): void;\r\n    getExpanded(menubar: HTMLElement): boolean;\r\n}\r\n\r\nvar menuBarWidget = new (\r\nWidget({\r\n    name: \"menubar\"\r\n})(class MenubarWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menubar\",\r\n                role: \"menubar\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        )\r\n    }\r\n\r\n    create() {\r\n        const menubar = <HTMLElement>this.#template.cloneNode(true);\r\n        menubar.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        menubar.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        menubar.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        menubar.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        menubar.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        return menubar;\r\n    }\r\n\r\n    slot(menubar: HTMLElement) {\r\n        return menubar;\r\n    }\r\n\r\n    setExpanded(menubar: HTMLElement, value: boolean): void {\r\n        menubar.toggleAttribute(\"aria-expanded\", value);\r\n    }\r\n\r\n    getExpanded(menubar: HTMLElement): boolean {\r\n        return menubar.hasAttribute(\"aria-expanded\");\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node) {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"menuitem\") && !menuItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"menuitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getActiveItem(menubar: HTMLElement): HTMLElement | null {\r\n        return menubar.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem:focus-within\"\r\n        );\r\n    }\r\n\r\n    #firstItem(menubar: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menubar;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(menubar: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menubar;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n\r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = menuItemWidget.getMenu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #isClosestMenu(menubar: HTMLElement, target: HTMLElement): boolean {\r\n        return target.closest(\":is(.menubar, .menu)\") == menubar;\r\n    }\r\n\r\n    #nearestItem(menubar: HTMLElement, target: HTMLElement): HTMLElement | null {\r\n        return Array.from(menubar.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem) {\r\n            const expanded = this.getExpanded(menubar);\r\n            const isClosestMenu = this.#isClosestMenu(menubar, targetItem);\r\n            if (isClosestMenu) {\r\n                const isExpanded = !expanded;\r\n                this.setExpanded(menubar, isExpanded);\r\n                if (isExpanded) {\r\n                    if (targetItem !== null && !menuItemWidget.getExpanded(targetItem)) {\r\n                        menuItemWidget.expand(targetItem);\r\n                    }\r\n                    const menu = menuItemWidget.getMenu(targetItem);\r\n                    menu?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    menubar.focus({preventScroll: true})\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && this.getExpanded(menubar)) {\r\n            const nearestItem = this.#nearestItem(menubar, target);\r\n            if (nearestItem) {\r\n                menuItemWidget.expand(nearestItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && !target.contains(<Element>relatedTarget)) {\r\n            const nearestItem = this.#nearestItem(menubar, target);\r\n            if (nearestItem) {\r\n                menuItemWidget.collapse(nearestItem);\r\n            }\r\n        }\r\n        const lostFocusWithin = !menubar.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.setExpanded(menubar, false);\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const activeItem = this.#getActiveItem(menubar);\r\n            const expanded = this.getExpanded(menubar);\r\n            const isClosestMenu = this.#isClosestMenu(menubar, target);\r\n            if (isClosestMenu && target !== activeItem && expanded) {\r\n                const menu = menuItemWidget.getMenu(target);\r\n                if (menu) {\r\n                    menu.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    target.focus({preventScroll: true});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        let activeItem = this.#getActiveItem(menubar);\r\n        const expanded = this.getExpanded(menubar);\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem(menubar) :\r\n                    this.#firstItem(menubar);\r\n                previousItem?.focus({preventScroll: true});\r\n                activeItem = this.#getActiveItem(menubar);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem(menubar) : \r\n                    this.#lastItem(menubar);\r\n                nextItem?.focus({preventScroll: true});\r\n                activeItem = this.#getActiveItem(menubar);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    this.setExpanded(menubar, !expanded);\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.setExpanded(menubar, false);\r\n                    if (activeItem) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    menubar.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { menuItemWidget } from \"./MenuItemWidget\";\r\n\r\nexport { menuWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menu\": MenuWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        contextual?: boolean;\r\n        position?: {x: number, y: number};\r\n    }): HTMLElement;\r\n    setPosition(menu: HTMLElement, x: number, y: number): void;\r\n    getContextual(menu: HTMLElement): boolean;\r\n    setContextual(menu: HTMLElement, value: boolean): void;\r\n    items(menu: HTMLElement): HTMLElement[];\r\n}\r\n\r\nvar mouseOverExpandDelay = 0_200;\r\nvar mouseOutCollapseDelay = 0_400;\r\n\r\nvar menuWidget = new (\r\nWidget({\r\n    name: \"menu\"\r\n})(class MenuWidgetFactoryBase extends WidgetFactory implements MenuWidgetFactory {\r\n\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #toggleTimeouts: WeakMap<HTMLElement, {clear(): void;}>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menu\",\r\n                role: \"menu\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#toggleTimeouts = new WeakMap();\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        contextual?: boolean;\r\n        position?: {x: number, y: number};\r\n    }): HTMLElement {\r\n        const menu = <HTMLElement>this.#template.cloneNode(true);\r\n        menu.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        menu.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        menu.addEventListener(\"mouseout\", this.#handleMouseOutEvent.bind(this));\r\n        menu.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        menu.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, contextual, position} = properties;\r\n            if (id !== undefined) {\r\n                menu.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                menu.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                menu.tabIndex = tabIndex;\r\n            }\r\n            if (contextual !== undefined) {\r\n                this.setContextual(menu, contextual);\r\n            }\r\n            if (position !== undefined) {\r\n                const {x, y} = position;\r\n                this.setPosition(menu, x, y);\r\n            }\r\n        }\r\n        return menu;\r\n    }\r\n\r\n    slot(menu: HTMLElement): HTMLElement | null {\r\n        return menu;\r\n    }\r\n\r\n    setPosition(menu: HTMLElement, x: number, y: number): void {\r\n        const {style} = menu;\r\n        const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        const left = x + scrollX;\r\n        const top = y + scrollY;\r\n        const {clientWidth, clientHeight} = document.body;\r\n        const overflowX = left + menuWidth - clientWidth;\r\n        const overflowY = top + menuHeight - clientHeight;\r\n        style.setProperty(\"left\", `${overflowX > 0 ? left - menuWidth : left}px`);\r\n        style.setProperty(\"top\", `${overflowY > 0 ? top - menuHeight : top}px`);\r\n    }\r\n\r\n    getContextual(menu: HTMLElement): boolean {\r\n        const {classList} = menu;\r\n        return classList.contains(\"menu-contextual\");\r\n    }\r\n\r\n    setContextual(menu: HTMLElement, value: boolean): void {\r\n        const {classList} = menu;\r\n        if (value) {\r\n            classList.add(\"menu-contextual\");\r\n        }\r\n        else {\r\n            classList.remove(\"menu-contextual\");\r\n        }\r\n    }\r\n\r\n    items(menu: HTMLElement): HTMLElement[] {\r\n        return Array.from(menu.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        ));\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"menuitem\") && !menuItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"menuitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #collapseSubmenus(menu: HTMLElement): void {\r\n        menu.querySelectorAll<HTMLElement>(\":is(:scope, :scope > .menuitemgroup) > .menuitem[aria-expanded]\")\r\n            .forEach(menuitem_i => menuItemWidget.collapse(menuitem_i));\r\n    }\r\n\r\n    #isClosestMenu(menu: HTMLElement, target: HTMLElement): boolean {\r\n        return target.closest(\".menu\") == menu;\r\n    }\r\n\r\n    #nearestItem(menu: HTMLElement, target: HTMLElement): HTMLElement | null {\r\n        return Array.from(menu.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #firstItem(menu: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menu;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(menu: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menu;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n\r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = menuItemWidget.getMenu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #getActiveItem(menu: HTMLElement): HTMLElement | null {\r\n        return menu.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem:focus-within\"\r\n        );\r\n    }\r\n\r\n    async #setItemTimeout(item: HTMLElement, delay?: number): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => {\r\n                resolve(undefined);\r\n            }, delay ?? 0);\r\n            this.#toggleTimeouts.set(item, {\r\n                clear: () => {\r\n                    clearTimeout(timeout);\r\n                    reject();\r\n                }\r\n            });\r\n        }).then(() => {\r\n            this.#toggleTimeouts.delete(item);\r\n        });\r\n    }\r\n\r\n    #clearItemTimeout(item: HTMLElement): void {\r\n        const timeout = this.#toggleTimeouts.get(item);\r\n        if (typeof timeout !== \"undefined\") {\r\n            this.#toggleTimeouts.delete(item);\r\n            timeout.clear();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem) {\r\n            const contextual = this.getContextual(targetMenu);\r\n            if (contextual) {\r\n                try {\r\n                    targetMenu.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const isClosestMenu = this.#isClosestMenu(targetMenu, targetItem);\r\n                if (isClosestMenu) {\r\n                    const type = menuItemWidget.getType(targetItem);\r\n                    const name = menuItemWidget.getName(targetItem);\r\n                    const value = menuItemWidget.getValue(targetItem);\r\n                    if (type == \"radio\") {\r\n                        targetMenu.querySelectorAll<HTMLElement>(\r\n                            `:is(:scope, :scope > .menuitemgroup) > .menuitem-radio[name=${name}]`\r\n                        )\r\n                        .forEach((radio_i) => {\r\n                            menuItemWidget.setChecked(radio_i, menuItemWidget.getValue(radio_i) == value);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetMenu.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const contextual = this.getContextual(targetMenu);\r\n            if (contextual) {\r\n                try {\r\n                    targetMenu.remove();\r\n                } catch (error) {\r\n                    undefined;\r\n                }\r\n            }\r\n            else {\r\n                const nearestItem = this.#nearestItem(targetMenu, <HTMLElement>target);\r\n                if (nearestItem) {\r\n                    menuItemWidget.collapse(nearestItem);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetMenu);\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem(targetMenu) :\r\n                    this.#firstItem(targetMenu);\r\n                previousItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem(targetMenu) :\r\n                    this.#firstItem(targetMenu);\r\n                nextItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetMenu);\r\n                firstItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetMenu);\r\n                lastItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const type = menuItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            menuItemWidget.expand(activeItem);\r\n                            const firstChildItem = this.#firstChildItem(activeItem);\r\n                            firstChildItem?.focus({preventScroll: true});\r\n                            event.preventDefault();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    const isTargetClosestMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                    ) == targetMenu;\r\n                    if (!isTargetClosestMenu) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const isTargetClosestMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                    ) == targetMenu;\r\n                    if (!isTargetClosestMenu) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const type = menuItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            const expanded = menuItemWidget.getExpanded(activeItem);\r\n                            if (!expanded) {\r\n                                menuItemWidget.expand(activeItem);\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                                event.stopPropagation();\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOutEvent(event: MouseEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const nearestItem = this.#nearestItem(targetMenu, target);\r\n            if (nearestItem !== null) {\r\n                if (menuItemWidget.getType(nearestItem) == \"submenu\" &&\r\n                    !menuItemWidget.getExpanded(nearestItem)) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                ) == targetMenu;\r\n                if (isTargetClosestMenu) {\r\n                    const activeItem = this.#getActiveItem(targetMenu);\r\n                    if (activeItem !== null &&\r\n                        menuItemWidget.getType(activeItem) == \"submenu\" &&\r\n                        menuItemWidget.getExpanded(activeItem)) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, mouseOutCollapseDelay)\r\n                            .then(() => {\r\n                                menuItemWidget.collapse(activeItem);\r\n                            })\r\n                            .catch(() => undefined);\r\n                    }\r\n                    const {clientX, clientY} = event;\r\n                    const {left, right, top, bottom} = targetMenu.getBoundingClientRect();\r\n                    const intersectsWithMouse = !(\r\n                        left > clientX || right < clientX || top > clientY || bottom < clientY\r\n                    );\r\n                    const containsRelatedTarget = targetMenu.contains(<Node>relatedTarget);\r\n                    if (intersectsWithMouse && containsRelatedTarget) {\r\n                        if (relatedTarget instanceof HTMLElement && relatedTarget.classList.contains(\"menu\") && relatedTarget !== targetMenu) {\r\n                            relatedTarget.focus({preventScroll: true});\r\n                        }\r\n                        else {\r\n                            targetMenu.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    if (!intersectsWithMouse) {\r\n                        targetMenu.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const nearestItem = this.#nearestItem(targetMenu, target); \r\n            if (nearestItem !== null) {\r\n                if (menuItemWidget.getType(nearestItem) == \"submenu\" &&\r\n                    menuItemWidget.getExpanded(nearestItem)) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                ) == targetMenu;\r\n                if (isTargetClosestMenu) {\r\n                    const activeItem = this.#getActiveItem(targetMenu);\r\n                    if (activeItem !== null) {\r\n                        if (menuItemWidget.getType(activeItem) == \"submenu\" &&\r\n                            menuItemWidget.getExpanded(activeItem) && \r\n                            !activeItem.contains(<HTMLElement>target)) {\r\n                            this.#clearItemTimeout(activeItem);\r\n                            this.#setItemTimeout(activeItem, mouseOutCollapseDelay)\r\n                                .then(() => {\r\n                                    menuItemWidget.collapse(activeItem);\r\n                                })\r\n                                .catch(() => undefined);\r\n                        }\r\n                    }\r\n                    nearestItem.focus({preventScroll: true});\r\n                    if (menuItemWidget.getType(nearestItem) == \"submenu\") {\r\n                        if (!menuItemWidget.getExpanded(nearestItem)) {\r\n                            this.#clearItemTimeout(nearestItem);\r\n                            this.#setItemTimeout(nearestItem, mouseOverExpandDelay)\r\n                                .then(() => {\r\n                                    const activeItem = this.#getActiveItem(targetMenu);\r\n                                    this.#collapseSubmenus(targetMenu);\r\n                                    if (activeItem) {\r\n                                        this.#clearItemTimeout(activeItem);\r\n                                        menuItemWidget.expand(activeItem);\r\n                                        menuItemWidget.getMenu(activeItem)?.focus({preventScroll: true});\r\n                                    }\r\n                                })\r\n                                .catch(() => undefined);\r\n                        }\r\n                        else {\r\n                            menuItemWidget.getMenu(nearestItem)?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menuitemgroup\": MenuItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar menuItemGroupWidget = new (\r\nWidget({\r\n    name: \"menuitemgroup\"\r\n})(class MenuItemGroupWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menuitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement): HTMLElement | null {\r\n        return group;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { treeItemWidget };\r\n\r\ntype TreeItemType = \"parent\" | \"leaf\";\r\n\r\ninterface TreeItemWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        type?: TreeItemType;\r\n        label?: string;\r\n        title?: string;\r\n        disabled?: boolean;\r\n        draggable?: boolean;\r\n    }): HTMLElement;\r\n    group(item: HTMLElement): HTMLElement | null;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setExpanded(item: HTMLElement, value: boolean): void;\r\n    getExpanded(item: HTMLElement): boolean;\r\n    setDraggable(row: HTMLElement, value: boolean): void;\r\n    getDraggable(item: HTMLElement): boolean;\r\n    getType(item: HTMLElement): TreeItemType | null;\r\n    setType(item: HTMLElement, value: TreeItemType): void;\r\n    toggle(item: HTMLElement, force?: boolean): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"treeitem\": TreeItemWidgetFactory,\r\n    }\r\n}\r\n\r\nvar treeItemWidget = new (\r\nWidget({\r\n    name: \"treeitem\"\r\n})(class TreeItemWidgetFactoryBase extends WidgetFactory implements TreeItemWidgetFactory {\r\n    #template: HTMLElement;\r\n    #types: TreeItemType[];\r\n\r\n    constructor() {\r\n        super();\r\n        this.#types = [\"parent\", \"leaf\"];\r\n        this.#template = element(\"li\", {\r\n            attributes: {\r\n                class: \"treeitem\",\r\n                role: \"treeitem\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"content\"\r\n                    },\r\n                    children: [\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"arrow\"\r\n                            }\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    group(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .treeitemgroup\");\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        label?: string;\r\n        title?: string;\r\n        type?: TreeItemType;\r\n        disabled?: boolean;\r\n        draggable?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, label, title, type = \"leaf\", disabled, draggable} = properties;\r\n            if (id !== undefined) {\r\n                item.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                item.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                item.tabIndex = tabIndex;\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (title !== undefined) {\r\n                this.setTitle(item, title);\r\n            }\r\n            this.setType(item, type);\r\n            if (type === \"parent\") {\r\n                this.setExpanded(item, false);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n            if (draggable !== undefined) {\r\n                this.setDraggable(item, draggable);\r\n            }\r\n            this.setSelected(item, false);\r\n        }\r\n        return item;\r\n    }\r\n\r\n    get observedSlots() {\r\n        return [\"content\", \"group\"];\r\n    }\r\n\r\n    slot(item: HTMLElement, name: string | null) {\r\n        switch (name) {\r\n            case \"content\":\r\n                return this.#content(item);\r\n            case \"group\":\r\n                return item;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #content(item: HTMLElement): HTMLElement {\r\n        const content = item.querySelector<HTMLElement>(\":scope > .content\")!;\r\n        if (!content) throw new Error(\"Missing .content slot.\");\r\n        return content;\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return item.getAttribute(\"aria-label\") ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"aria-label\", value);\r\n    }\r\n\r\n    getTitle(item: HTMLElement): string {\r\n        return item.title;\r\n    }\r\n\r\n    setTitle(item: HTMLElement, value: string): void {\r\n        item.title = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? Number(posInSet) : -1;\r\n    }\r\n\r\n    getType(item: HTMLElement): TreeItemType {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`treeitem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        throw new Error(\"Missing type.\");\r\n    }\r\n\r\n    setType(item: HTMLElement, type: TreeItemType): void {\r\n        const {classList} = item;\r\n        try {\r\n            const oldType = this.getType(item);\r\n            classList.remove(`treeitem-${oldType}`);\r\n        }\r\n        catch (e) {};\r\n        classList.add(`treeitem-${type}`);\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-expanded\", String(value));\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-expanded\") ?? String(false));\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            if (!classList.contains(\"active\")) {\r\n                classList.add(\"active\");\r\n            }\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDraggable(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"draggable\", String(value));\r\n    }\r\n\r\n    getDraggable(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"draggable\") ?? String(false));\r\n    }\r\n\r\n    setSelected(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-selected\", String(value));\r\n        item.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    setLevel(item: HTMLElement, value: number): void {\r\n        item.style.setProperty(\"--level\", String(value));\r\n    }\r\n\r\n    getLevel(item: HTMLElement): number {\r\n        return parseInt(item.style.getPropertyValue(\"--level\"));\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        this.setExpanded(item, force ?? !this.getExpanded(item));\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget, shiftKey, ctrlKey} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            if (type == \"parent\" && !(shiftKey || ctrlKey)) {\r\n                this.toggle(targetItem);\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { treeItemWidget } from \"./TreeItemWidget\";\r\n\r\nexport { treeWidget };\r\n\r\ninterface TreeWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement;\r\n    items(tree: HTMLElement): HTMLElement[];\r\n    selectedItems(tree: HTMLElement): HTMLElement[];\r\n    beginSelection(tree: HTMLElement): void;\r\n    endSelection(tree: HTMLElement): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"tree\": TreeWidgetFactory,\r\n    }\r\n}\r\n\r\nvar treeWidget = new (\r\nWidget({\r\n    name: \"tree\"\r\n})(class TreeWidgetFactoryBase extends WidgetFactory implements TreeWidgetFactory {\r\n\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"tree\",\r\n                role: \"tree\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement {\r\n        const tree = <HTMLElement>this.#template.cloneNode(true);\r\n        tree.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        tree.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        tree.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        tree.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        tree.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        tree.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        tree.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        tree.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        tree.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        tree.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        tree.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        this.#onSelection.set(tree, false);\r\n        this.#hasSelectionChanged.set(tree, false);\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, multisectable} = properties;\r\n            if (id !== undefined) {\r\n                tree.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                tree.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                tree.tabIndex = tabIndex;\r\n            }\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(tree, multisectable);\r\n            }\r\n        }\r\n        return tree;\r\n    }\r\n\r\n    slot(tree: HTMLElement) {\r\n        return tree;\r\n    }\r\n\r\n    slottedCallback(tree: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"treeitem\")) {\r\n                treeItemWidget.setPosInSet(child_i, i);\r\n                treeItemWidget.setLevel(child_i, 0);\r\n            }\r\n        });\r\n    }\r\n\r\n    items(tree: HTMLElement): HTMLElement[] {\r\n        return Array.from(tree.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .treeitemgroup) > .treeitem\"\r\n        ));\r\n    }\r\n\r\n    selectedItems(tree: HTMLElement): HTMLElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        let item = this.#firstItem(tree);\r\n        while (item !== null) {\r\n            const selected = treeItemWidget.getSelected(item);\r\n            if (selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(tree: HTMLElement): void {\r\n        this.#onSelection.set(tree, true);\r\n    }\r\n\r\n    endSelection(tree: HTMLElement): void {\r\n        this.#onSelection.set(tree, false);\r\n        if (this.#hasSelectionChanged.get(tree)) {\r\n            tree.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(tree, false);\r\n        }\r\n    }\r\n\r\n    setMultiSelectable(tree: HTMLElement, value: boolean): void {\r\n        tree.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(tree: HTMLElement): boolean {\r\n        return JSON.parse(tree.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    #getActiveItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".treeitem.active\");\r\n    }\r\n\r\n    #getDropTargetItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".treeitem.droptarget\");\r\n    }\r\n\r\n    #setDropTargetItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const {classList} = tree;\r\n        const dropTargetItem = this.#getDropTargetItem(tree);\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            treeItemWidget.setDropTarget(dropTargetItem, false);\r\n        }\r\n        if (item !== null) {\r\n            treeItemWidget.setDropTarget(item, true);\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"treeitem\") && !treeItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"treeitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextItem = this.#nextItem(from);\r\n            while (nextItem && nextItem !== to) {\r\n                range.push(nextItem);\r\n                nextItem = this.#nextItem(nextItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousItem = this.#previousItem(from);\r\n            while (previousItem && previousItem !== to) {\r\n                range.push(previousItem);\r\n                previousItem = this.#previousItem(previousItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        selectedItems.forEach((item_i) => {\r\n            if (!items.includes(item_i)) {\r\n                treeItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            const selected = treeItemWidget.getSelected(item_i);\r\n            if (tree.contains(item_i) && !selected) {\r\n                treeItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #addToSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        this.beginSelection(tree);\r\n        items.forEach((item_i) => {\r\n            if (!treeItemWidget.getSelected(item_i)) {\r\n                treeItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #removeFromSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                treeItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #clearSelection(tree: HTMLElement): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        selectedItems.forEach((item_i) => {\r\n            treeItemWidget.setSelected(item_i, false);\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #setActiveItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(tree);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            treeItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            treeItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #firstItem(tree: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(tree: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousSibling = <HTMLElement | null>walker.previousSibling();\r\n        return previousSibling ?\r\n            this.#deepestItem(previousSibling) :\r\n            <HTMLElement | null>walker.parentNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const type = treeItemWidget.getType(item);\r\n        const expanded = treeItemWidget.getExpanded(item);\r\n        return <HTMLElement | null>(\r\n            type === \"leaf\" ?\r\n                walker.nextNode() :\r\n                expanded ?\r\n                    walker.nextNode() :\r\n                    walker.nextSibling() ??\r\n                    (walker.parentNode(), walker.nextSibling())\r\n        );\r\n    }\r\n\r\n    #deepestItem(item: HTMLElement): HTMLElement {\r\n        const expanded = treeItemWidget.getExpanded(item);\r\n        if (expanded) {\r\n            const walker = this.#walker;\r\n            const lastItem = <HTMLElement>walker.lastChild();\r\n            if (lastItem) {\r\n                return this.#deepestItem(lastItem);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey, button} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        if (targetItem) {\r\n            const selected = treeItemWidget.getSelected(targetItem);\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setSelection(targetTree, targetItem);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            targetItem.blur();\r\n                            this.#removeFromSelection(targetTree, targetItem);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(targetTree, targetItem);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const activeItem = this.#getActiveItem(targetTree);\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                targetItem\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetTree, ...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                }\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(targetTree, targetItem);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            const type = treeItemWidget.getType(targetItem);\r\n            if (type == \"parent\") {\r\n                treeItemWidget.toggle(targetItem, true);\r\n            }\r\n            this.#setDropTargetItem(targetTree, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (!targetTree.contains(<Node>relatedTarget)) {\r\n            this.#setDropTargetItem(targetTree, null);\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const focusWithin = targetTree.contains(<Node>relatedTarget);\r\n        if (!focusWithin) {   \r\n            const activeItem = this.#getActiveItem(targetTree);\r\n            if (activeItem) {\r\n                activeItem.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetTree, targetItem);\r\n            targetTree.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetTree.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetTree.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetTree);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetTree, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetTree, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(\r\n                                firstItem,\r\n                                this.#deepestItem(lastItem)\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetTree, ...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const expanded = treeItemWidget.getExpanded(activeItem);\r\n                    if (expanded) {\r\n                        treeItemWidget.toggle(activeItem);\r\n                    }\r\n                    else {\r\n                        const walker = this.#walker;\r\n                        const parentItem = <HTMLElement>walker.parentNode();\r\n                        if (parentItem) {\r\n                            parentItem.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const expanded = treeItemWidget.getExpanded(activeItem);\r\n                    if (!expanded) {\r\n                        treeItemWidget.toggle(activeItem);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = treeItemWidget.getSelected(previousItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetTree, previousItem) :\r\n                                this.#addToSelection(targetTree, previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetTree);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = treeItemWidget.getSelected(nextItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetTree, nextItem) :\r\n                                this.#addToSelection(targetTree, nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetTree);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetTree);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetTree);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(targetTree, activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection(targetTree);\r\n                this.#setActiveItem(targetTree, null);\r\n                targetTree.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {target} = event;\r\n        const targetTree = <HTMLElement>target;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"treeitem\")) {\r\n            if (this.#onSelection.get(targetTree)) {\r\n                this.#hasSelectionChanged.set(target, true);\r\n            }\r\n            else {\r\n                targetTree.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { treeItemWidget } from \"./TreeItemWidget\";\r\n\r\nexport { treeItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"treeitemgroup\": TreeItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface TreeItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar treeItemGroupWidget = new (\r\nWidget({\r\n    name: \"treeitemgroup\"\r\n})(class TreeItemGroupWidgetFactoryBase extends WidgetFactory implements TreeItemGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"treeitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n\r\n    slottedCallback(group: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"treeitem\")) {\r\n                treeItemWidget.setPosInSet(child_i, i);\r\n                treeItemWidget.setLevel(child_i, (() => {\r\n                    let level = -1;\r\n                    let closestItem: HTMLElement | null = child_i;\r\n                    while (closestItem !== null && closestItem.matches(\".tree :scope\")) {\r\n                        closestItem = closestItem.parentElement?.closest(\".treeitem\") ?? null;\r\n                        level++;\r\n                    }\r\n                    return level;\r\n                })());\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { listItemWidget };\r\n\r\ninterface ListItemWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        label?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"listitem\": ListItemWidgetFactory,\r\n    }\r\n}\r\n\r\nvar listItemWidget = new (\r\nWidget({\r\n    name: \"listitem\"\r\n})(class ListItemWidgetFactoryBase extends WidgetFactory implements ListItemWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"li\", {\r\n            attributes: {\r\n                class: \"listitem\",\r\n                role: \"listitem\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        label?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {label, disabled} = init;\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n            this.setSelected(item, false);\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(root: HTMLElement): HTMLElement | null {\r\n        return root;\r\n    }\r\n\r\n    group(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .listitemgroup\");\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(row: HTMLElement, value: boolean): void {\r\n        row.setAttribute(\"aria-selected\", String(value));\r\n        row.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(row: HTMLElement): boolean {\r\n        return JSON.parse(row.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    #label(item: HTMLElement): Node {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { listItemWidget } from \"./ListItemWidget\";\r\n\r\nexport  { listWidget };\r\n\r\ninterface ListWidgetFactory extends WidgetFactory {\r\n    create(properties: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement;\r\n    items(list: HTMLElement): HTMLElement[];\r\n    beginSelection(list: HTMLElement): void;\r\n    endSelection(list: HTMLElement): void;\r\n    selectedItems(list: HTMLElement): HTMLElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"list\": ListWidgetFactory,\r\n    }\r\n}\r\n\r\nvar listWidget = new (\r\nWidget({\r\n    name: \"list\"\r\n})(class ListWidgetFactoryBase extends WidgetFactory implements ListWidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"list\",\r\n                role: \"list\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement {\r\n        const list = <HTMLElement>this.#template.cloneNode(true);\r\n        list.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        list.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        list.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        list.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        list.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        list.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        list.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        list.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        list.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        list.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        list.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        list.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, multisectable} = properties;\r\n            if (id !== undefined) {\r\n                list.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                list.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                list.tabIndex = tabIndex;\r\n            }\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(list, multisectable);\r\n            }\r\n        }\r\n        this.#onSelection.set(list, false);\r\n        this.#hasSelectionChanged.set(list, false);\r\n        return list;\r\n    }\r\n\r\n    slot(list: HTMLElement) {\r\n        return list;\r\n    }\r\n\r\n    slottedCallback(list: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"listitem\")) {\r\n                listItemWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n\r\n    setMultiSelectable(tree: HTMLElement, value: boolean): void {\r\n        tree.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(tree: HTMLElement): boolean {\r\n        return JSON.parse(tree.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    #getActiveItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".listitem.active\");\r\n    }\r\n\r\n    #getDropTargetItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".listitem.droptarget\");\r\n    }\r\n\r\n    items(list: HTMLElement): HTMLElement[] {\r\n        return Array.from(list.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .listitemgroup) > .listitem\"\r\n        ));\r\n    }\r\n\r\n    selectedItems(list: HTMLElement): HTMLElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        let item = this.#firstItem(list);\r\n        while (item !== null) {\r\n            const selected = listItemWidget.getSelected(item);\r\n            if (selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(list: HTMLElement): void {\r\n        this.#onSelection.set(list, true);\r\n    }\r\n\r\n    endSelection(list: HTMLElement): void {\r\n        this.#onSelection.set(list, false);\r\n        if (this.#hasSelectionChanged.get(list)) {\r\n            list.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(list, false);\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"listitem\") && !listItemWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"listitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextItem = this.#nextItem(from);\r\n            while (nextItem && nextItem !== to) {\r\n                range.push(nextItem);\r\n                nextItem = this.#nextItem(nextItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousItem = this.#previousItem(from);\r\n            while (previousItem && previousItem !== to) {\r\n                range.push(previousItem);\r\n                previousItem = this.#previousItem(previousItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        selectedItems.forEach((item_i) => {\r\n            if (!items.includes(item_i)) {\r\n                listItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            const selected = listItemWidget.getSelected(item_i);\r\n            if (list.contains(item_i) && !selected) {\r\n                listItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #addToSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        this.beginSelection(list);\r\n        items.forEach((item_i) => {\r\n            if (!listItemWidget.getSelected(item_i)) {\r\n                listItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #removeFromSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                listItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #clearSelection(list: HTMLElement): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        selectedItems.forEach((item_i) => {\r\n            listItemWidget.setSelected(item_i, false);\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #setActiveItem(list: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(list);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            listItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            listItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n    \r\n    #setDropTargetItem(list: HTMLElement, item: HTMLElement | null): void {\r\n        const {classList} = list;\r\n        const dropTargetItem = this.#getDropTargetItem(list);\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            listItemWidget.setDropTarget(dropTargetItem, false);\r\n        }\r\n        if (item !== null) {\r\n            listItemWidget.setDropTarget(item, false);\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    #firstItem(list: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(list: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLElement | null>walker.previousNode();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const nextItem = <HTMLElement | null>walker.nextNode();\r\n        return nextItem;\r\n    }\r\n\r\n    #handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetList, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            this.#setDropTargetItem(targetList, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!targetList.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(targetList, null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            const selectedItems = this.selectedItems(targetTree);\r\n            if (!selectedItems.includes(targetItem)) {\r\n                this.#setSelection(targetTree, targetItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetTree);\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetTree, targetItem);\r\n            targetTree.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetList);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetList, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetList, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(firstItem, lastItem);\r\n                            if (range) {\r\n                                this.#setSelection(targetList, ...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = listItemWidget.getSelected(previousItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetList, previousItem) :\r\n                                this.#addToSelection(targetList, previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetList);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = listItemWidget.getSelected(nextItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetList, nextItem) :\r\n                                this.#addToSelection(targetList, nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetList);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetList);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetList);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(targetList, activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection(targetList);\r\n                this.#setActiveItem(targetList, null);\r\n                targetList.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey, button} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            const selected = listItemWidget.getSelected(targetItem);\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setSelection(targetList, targetItem);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            targetItem.blur();\r\n                            this.#removeFromSelection(targetList, targetItem);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(targetList, targetItem);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const activeItem = this.#getActiveItem(targetList);\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                targetItem\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetList, ...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                }\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(targetList, targetItem);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetList.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetList.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetList) {\r\n            if (this.#onSelection.get(targetList)) {\r\n                this.#hasSelectionChanged.set(targetList, true);\r\n            }\r\n            else {\r\n                targetList.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { listItemWidget } from \"./ListItemWidget\";\r\n\r\nexport { listItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"listitemgroup\": ListItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ListItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar listItemGroupWidget = new (\r\nWidget({\r\n    name: \"listitemgroup\"\r\n})(class ListItemGroupWidgetFactoryBase extends WidgetFactory implements ListItemGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"listitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n\r\n    slottedCallback(group: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"listitem\")) {\r\n                listItemWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { toolbarItemWidget };\r\n\r\ntype ToolBarItemType = \"button\" | \"checkbox\" | \"radio\" | \"menubutton\";\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbaritem\": ToolBarItemWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ToolBarItemWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        id?: string;\r\n        type: ToolBarItemType;\r\n        pressed?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    menu(item: HTMLElement): HTMLElement | null;\r\n    getName(item: HTMLElement): string;\r\n    setName(item: HTMLElement, value: string): void;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setPressed(item: HTMLElement, value: boolean): void;\r\n    getPressed(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    getValue(item: HTMLElement): string;\r\n    setValue(item: HTMLElement, value: string): void;\r\n    getType(item: HTMLElement): ToolBarItemType | null;\r\n    setType(item: HTMLElement, value: ToolBarItemType): void;\r\n}\r\n\r\nvar toolbarItemWidget = new(\r\nWidget({\r\n    name: \"toolbaritem\"\r\n})(\r\nclass ToolBarItemWidgetFactoryBase extends WidgetFactory implements ToolBarItemWidgetFactory {\r\n    #template: HTMLElement;\r\n    #types: ToolBarItemType[];\r\n\r\n    constructor() {\r\n        super();\r\n        this.#types = [\"button\", \"checkbox\", \"radio\", \"menubutton\"];\r\n        this.#template = element(\"button\", {\r\n            attributes: {\r\n                class: \"toolbaritem\",\r\n                role: \"button\",\r\n                type: \"button\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        type?: ToolBarItemType;\r\n        pressed?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }) {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (init !== void 0) {\r\n            const {id, keyshortcut, pressed, type, label, name, value, disabled} = init;\r\n            if (id !== undefined) {\r\n                item.id = id;\r\n            }\r\n            if (keyshortcut !== undefined) {\r\n                this.setKeyShortcut(item, keyshortcut);\r\n            }\r\n            if (pressed !== undefined) {\r\n                this.setPressed(item, pressed);\r\n            }\r\n            if (type !== undefined) {\r\n                this.setType(item, type);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(item, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(item, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(item: HTMLElement): HTMLElement | null {\r\n        return item;\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void {\r\n        const hasChildMenu = Array.from(slot.childNodes).some(\r\n            childNode_i => childNode_i instanceof HTMLElement && childNode_i.classList.contains(\"menu\")\r\n        );\r\n        item.setAttribute(\"aria-haspopup\", String(hasChildMenu));\r\n    }\r\n\r\n    menu(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .menu\");\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-expanded\", value);\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-expanded\");\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    getKeyShortcut(item: HTMLElement): string | null {\r\n        return item.getAttribute(\"aria-keyshortcuts\");\r\n    }\r\n\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void {\r\n        if (value !== null) {\r\n            item.setAttribute(\"aria-keyshortcuts\", value);\r\n        }\r\n        else {\r\n            item.removeAttribute(\"aria-keyshortcuts\");\r\n        }\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        const expand = force ?? !this.getExpanded(item);\r\n        this.setExpanded(item, expand);\r\n        if (expand) {\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    expand(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (!expanded) {\r\n            this.setExpanded(item, true);\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    collapse(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (expanded) {\r\n            this.setExpanded(item, false);\r\n        }\r\n    }\r\n\r\n    getType(item: HTMLElement): ToolBarItemType | null {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`toolbaritem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setType(item: HTMLElement, type: ToolBarItemType): void {\r\n        const oldType = this.getType(item);\r\n        if (type !== oldType) {\r\n            const {classList} = item;\r\n            if (oldType) {\r\n                classList.remove(`toolbaritem-${oldType}`);\r\n            }\r\n            classList.add(`toolbaritem-${type}`);\r\n        }\r\n    }\r\n\r\n    getValue(item: HTMLElement): string {\r\n        return item.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"value\", value);\r\n    }\r\n\r\n    getTitle(item: HTMLElement): string {\r\n        return item.getAttribute(\"title\") ?? \"\";\r\n    }\r\n\r\n    setTitle(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"title\", value);\r\n    }\r\n\r\n    getName(item: HTMLElement): string {\r\n        return item.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getPressed(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-pressed\") ?? String(false));\r\n    }\r\n\r\n    setPressed(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-pressed\", String(value));\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetItem = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetItem.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse(targetItem);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.setPressed(targetItem, !this.getPressed(targetItem));\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.setPressed(targetItem, true);\r\n                    break;\r\n                }\r\n                case \"menubutton\": {\r\n                    const menu = this.menu(targetItem);\r\n                    if (menu && !menu.contains(<Node>target)) {\r\n                        this.toggle(targetItem);\r\n                        const expanded = this.getExpanded(targetItem);\r\n                        if (expanded) {\r\n                            menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(item: HTMLElement): void {\r\n        const type = this.getType(item);\r\n        if (type == \"menubutton\") {\r\n            const menu = this.menu(item);\r\n            if (menu !== null) {\r\n                const {style: menuStyle} = menu;\r\n                const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = item.getBoundingClientRect();\r\n                const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n                const {scrollY, scrollX} = window;\r\n                const {clientWidth, clientHeight} = document.body;\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n        }\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n}));\r\n","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { toolbarItemWidget } from \"./ToolBarItemWidget\";\r\n\r\nexport { toolbarWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbar\": ToolBarWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ToolBarWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }): HTMLElement;\r\n    setOrientation(toolbar: HTMLElement, value: ToolBarOrientation): void;\r\n    getOrientation(toolbar: HTMLElement): ToolBarOrientation;\r\n}\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\nvar toolbarWidget = new (\r\nWidget({\r\n    name: \"toolbar\"\r\n})(class ToolBarWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"toolbar\",\r\n                role: \"toolbar\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        )\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }) {\r\n        const toolbar = <HTMLElement>this.#template.cloneNode(true);\r\n        toolbar.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        toolbar.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        toolbar.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        toolbar.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        toolbar.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex} = properties;\r\n            if (id !== undefined) {\r\n                toolbar.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                toolbar.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                toolbar.tabIndex = tabIndex;\r\n            }\r\n        }\r\n        return toolbar;\r\n    }\r\n\r\n    slot(toolbar: HTMLElement) {\r\n        return toolbar;\r\n    }\r\n\r\n    #getActiveItem(toolbar: HTMLElement): HTMLElement | null {\r\n        return toolbar.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .toolbaritemgroup) > .toolbaritem.active\"\r\n        );\r\n    }\r\n\r\n    items(toolbar: HTMLElement): HTMLElement[] {\r\n        return Array.from(toolbar.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .toolbaritemgroup) > .toolbaritem\"\r\n        ));\r\n    }\r\n\r\n    setOrientation(toolbar: HTMLElement, value: ToolBarOrientation): void {\r\n        toolbar.setAttribute(\"aria-orientation\", value);\r\n    }\r\n\r\n    getOrientation(toolbar: HTMLElement): ToolBarOrientation {\r\n        return <ToolBarOrientation>toolbar.getAttribute(\"aria-orientation\") ?? \"horizontal\";\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node) {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"toolbaritem\") && !toolbarItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"toolbaritemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(toolbar: Element): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = toolbar;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(toolbar: Element): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = toolbar;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLElement | null>walker.previousSibling();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = toolbarItemWidget.menu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #setActiveItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(tree);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            toolbarItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            toolbarItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: Event): void {\r\n        const {currentTarget, target} = event;\r\n        const toolbar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem) {\r\n            const type = toolbarItemWidget.getType(targetItem);\r\n            const name = toolbarItemWidget.getName(targetItem);\r\n            const value = toolbarItemWidget.getType(targetItem);\r\n            if (type == \"radio\") {\r\n                toolbar.querySelectorAll<HTMLElement>(\r\n                    `:is(:scope, :scope > .toolbaritemgroup) > .toolbaritem[type=radio][name=${name}]`\r\n                ).forEach((radio_i) => {\r\n                    toolbarItemWidget.setPressed(radio_i, toolbarItemWidget.getValue(radio_i) == value);\r\n                });\r\n            }\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const focusWithin = targetToolbar.contains(<Node>relatedTarget);\r\n        if (!focusWithin) {\r\n            const activeItem = this.#getActiveItem(targetToolbar);\r\n            if (activeItem) {\r\n                activeItem.focus();\r\n            }\r\n            else {\r\n                const firstItem = this.#firstItem(targetToolbar);\r\n                firstItem?.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetToolbar, targetItem);\r\n            targetToolbar.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetToolbar.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.#setActiveItem(targetToolbar, null);\r\n            targetToolbar.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetToolbar);\r\n        switch (key) {\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const type = toolbarItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"menubutton\": {\r\n                            toolbarItemWidget.expand(activeItem);\r\n                            const firstChildItem = this.#firstChildItem(activeItem);\r\n                            firstChildItem?.focus({preventScroll: true});\r\n                            event.preventDefault();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetToolbar);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetToolbar);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetToolbar);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetToolbar);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    activeItem.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    targetToolbar.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { toolbarItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbaritemgroup\": MenuItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar toolbarItemGroupWidget = new (\r\nWidget({\r\n    name: \"toolbaritemgroup\"\r\n})(class MenuItemGroupWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"toolbaritemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n}));","import { element } from \"../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"./Widget\";\r\n\r\nexport { widthSashWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"widthsash\": WidthSashWidgetFactory\r\n    }\r\n}\r\n\r\ninterface WidthSashWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"left\" | \"right\";\r\n    }): HTMLElement;\r\n}\r\n\r\nvar widthSashWidget = new (\r\nWidget({\r\n    name: \"widthsash\"\r\n})(class WidthSashWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    #targets: WeakMap<HTMLElement, HTMLElement | null>;\r\n    #onCaptureFlags: WeakMap<HTMLElement, boolean>;\r\n    #queuedPointerCallbacks: WeakMap<HTMLElement, FrameRequestCallback | null>;\r\n    #pointerMovements: WeakMap<HTMLElement, number>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"widthsash\"\r\n            }\r\n        });\r\n        this.#targets = new WeakMap();\r\n        this.#onCaptureFlags = new WeakMap();\r\n        this.#queuedPointerCallbacks = new WeakMap();\r\n        this.#pointerMovements = new WeakMap();\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"left\" | \"right\";\r\n    }) {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const sash = <HTMLElement>this.#template.cloneNode(true);\r\n        sash.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        sash.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        sash.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, controls, growDir} = properties;\r\n            if (id !== undefined) {\r\n                sash.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                sash.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                sash.tabIndex = tabIndex;\r\n            }\r\n            if (controls !== undefined) {\r\n                this.setControls(sash, controls);\r\n            }\r\n            if (growDir !== undefined) {\r\n                this.setGrowDir(sash, growDir);\r\n            }\r\n        }\r\n        targets.set(sash, null);\r\n        queuedPointerCallbacks.set(sash, null);\r\n        pointerMovements.set(sash, 0);\r\n        onCaptureFlags.set(sash, false);\r\n        return sash;\r\n    }\r\n\r\n    getGrowDir(sash: HTMLElement): \"right\" | \"left\" {\r\n        return <\"right\" | \"left\">sash.getAttribute(\"data-growdir\") ?? \"right\";\r\n    }\r\n\r\n    setGrowDir(sash: HTMLElement, value: \"right\" | \"left\"): void {\r\n        sash.setAttribute(\"data-growdir\", value);\r\n    }\r\n\r\n    getControls(sash: HTMLElement): string | null {\r\n        return sash.getAttribute(\"data-controls\");\r\n    }\r\n\r\n    setControls(sash: HTMLElement, value: string): void {\r\n        sash.setAttribute(\"data-controls\", value);\r\n    }\r\n\r\n    setWidth(sash: HTMLElement, width: number): void {\r\n        const targets = this.#targets;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            target.style.setProperty(\"width\", `${width}px`);\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        sashTarget.releasePointerCapture(pointerId);\r\n        onCaptureFlags.set(sashTarget, false);\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const controls = this.getControls(sashTarget);\r\n        if (controls) {\r\n            const targets = this.#targets;\r\n            const onCaptureFlags = this.#onCaptureFlags;\r\n            const rootNode = <ShadowRoot | Document>sashTarget.getRootNode();\r\n            targets.set(sashTarget, rootNode.getElementById(controls));\r\n            onCaptureFlags.set(sashTarget, true);\r\n            sashTarget.setPointerCapture(pointerId);\r\n        }\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        const {currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const pointerMoveCallback = this.#pointerMoveCallback;\r\n        const onCaptureFlag = onCaptureFlags.get(sashTarget);\r\n        if (onCaptureFlag) {\r\n            let callback = queuedPointerCallbacks.get(sashTarget);\r\n            if (callback == null) {\r\n                callback = pointerMoveCallback.bind(this, sashTarget);\r\n                queuedPointerCallbacks.set(sashTarget, callback);\r\n                requestAnimationFrame(callback);\r\n            }\r\n            const pointerMovement = pointerMovements.get(sashTarget)! + event.movementX;\r\n            pointerMovements.set(sashTarget, pointerMovement);\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(sash: HTMLElement): void {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const growdir = this.getGrowDir(sash);\r\n            const movementX = pointerMovements.get(sash)!;\r\n            const width = parseFloat(targetComputedStyle.getPropertyValue(\"width\"));\r\n            const newWidth = width + (growdir == \"right\" ? 1 : -1) * movementX;\r\n            this.setWidth(sash, newWidth);\r\n            sash.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        pointerMovements.set(sash, 0);\r\n        queuedPointerCallbacks.set(sash, null);\r\n    }\r\n}));","import { element } from \"../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"./Widget\";\r\n\r\nexport { heightSashWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"heightsash\": HeightSashWidgetFactory\r\n    }\r\n}\r\n\r\ninterface HeightSashWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"top\" | \"bottom\";\r\n    }): HTMLElement;\r\n}\r\n\r\nvar heightSashWidget = new (\r\nWidget({\r\n    name: \"heightsash\"\r\n})(class HeightSashWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    #targets: WeakMap<HTMLElement, HTMLElement | null>;\r\n    #onCaptureFlags: WeakMap<HTMLElement, boolean>;\r\n    #queuedPointerCallbacks: WeakMap<HTMLElement, FrameRequestCallback | null>;\r\n    #pointerMovements: WeakMap<HTMLElement, number>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"heightsash\"\r\n            }\r\n        });\r\n        this.#targets = new WeakMap();\r\n        this.#onCaptureFlags = new WeakMap();\r\n        this.#queuedPointerCallbacks = new WeakMap();\r\n        this.#pointerMovements = new WeakMap();\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"top\" | \"bottom\";\r\n    }) {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const sash = <HTMLElement>this.#template.cloneNode(true);\r\n        sash.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        sash.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        sash.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, controls, growDir} = properties;\r\n            if (id !== undefined) {\r\n                sash.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                sash.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                sash.tabIndex = tabIndex;\r\n            }\r\n            if (controls !== undefined) {\r\n                this.setControls(sash, controls);\r\n            }\r\n            if (growDir !== undefined) {\r\n                this.setGrowDir(sash, growDir);\r\n            }\r\n        }\r\n        targets.set(sash, null);\r\n        queuedPointerCallbacks.set(sash, null);\r\n        pointerMovements.set(sash, 0);\r\n        onCaptureFlags.set(sash, false);\r\n        return sash;\r\n    }\r\n\r\n    getGrowDir(sash: HTMLElement): \"top\" | \"bottom\" {\r\n        return <\"top\" | \"bottom\">sash.getAttribute(\"data-growdir\") ?? \"top\";\r\n    }\r\n\r\n    setGrowDir(sash: HTMLElement, value: \"top\" | \"bottom\"): void {\r\n        sash.setAttribute(\"data-growdir\", value);\r\n    }\r\n\r\n    getControls(sash: HTMLElement): string | null {\r\n        return sash.getAttribute(\"data-controls\");\r\n    }\r\n\r\n    setControls(sash: HTMLElement, value: string): void {\r\n        sash.setAttribute(\"data-controls\", value);\r\n    }\r\n\r\n    setHeight(sash: HTMLElement, height: number): void {\r\n        const targets = this.#targets;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            target.style.setProperty(\"height\", `${height}px`);\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        sashTarget.releasePointerCapture(pointerId);\r\n        onCaptureFlags.set(sashTarget, false);\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const controls = this.getControls(sashTarget);\r\n        if (controls) {\r\n            const targets = this.#targets;\r\n            const onCaptureFlags = this.#onCaptureFlags;\r\n            const rootNode = <ShadowRoot | Document>sashTarget.getRootNode();\r\n            targets.set(sashTarget, rootNode.getElementById(controls));\r\n            onCaptureFlags.set(sashTarget, true);\r\n            sashTarget.setPointerCapture(pointerId);\r\n        }\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        const {currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const onCaptureFlag = onCaptureFlags.get(sashTarget);\r\n        if (onCaptureFlag) {\r\n            let callback = queuedPointerCallbacks.get(sashTarget);\r\n            if (callback == null) {\r\n                callback = this.#pointerMoveCallback.bind(this, sashTarget);\r\n                queuedPointerCallbacks.set(sashTarget, callback);\r\n                requestAnimationFrame(callback);\r\n            }\r\n            const pointerMovement = pointerMovements.get(sashTarget)! + event.movementX;\r\n            pointerMovements.set(sashTarget, pointerMovement);\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(sash: HTMLElement): void {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const growdir = this.getGrowDir(sash);\r\n            const movementX = pointerMovements.get(sash)!;\r\n            const height = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            const newHeight = height + (growdir == \"top\" ? -1 : 1) * movementX;\r\n            this.setHeight(sash, newHeight);\r\n            sash.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        pointerMovements.set(sash, 0);\r\n        queuedPointerCallbacks.set(sash, null);\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridCellWidget };\r\n\r\ninterface GridCellWidgetFactory extends WidgetFactory {\r\n    create(init: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        disabled?: boolean;\r\n        headers?: string;\r\n    }): HTMLElement;\r\n    getHeaders(item: HTMLElement): string;\r\n    setHeaders(item: HTMLElement, value: string): void;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridcell\": GridCellWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridCellWidget = new (\r\nWidget({\r\n    name: \"gridcell\"\r\n})(class GridCellWidgetFactoryBase extends WidgetFactory implements GridCellWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"td\", {\r\n            attributes: {\r\n                class: \"gridcell\",\r\n                role: \"gridcell\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        disabled?: boolean;\r\n        headers?: string;\r\n    }): HTMLElement {\r\n        const cell = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {id, classList, tabIndex, disabled, headers} = init;\r\n            if (id !== undefined) {\r\n                cell.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                cell.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                cell.tabIndex = tabIndex;\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(cell, disabled);\r\n            }\r\n            if (headers !== undefined) {\r\n                this.setHeaders(cell, headers);\r\n            }\r\n            this.setSelected(cell, false);\r\n        }\r\n        return cell;\r\n    }\r\n\r\n    slot(cell: HTMLElement): HTMLElement | null {\r\n        return cell;\r\n    }\r\n\r\n    getHeaders(item: HTMLElement): string {\r\n        return item.getAttribute(\"headers\") ?? \"\";\r\n    }\r\n\r\n    setHeaders(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"headers\", value);\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-selected\", String(value));\r\n        item.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .content > .label\")!;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { gridCellWidget } from \"./GridCellWidget\";\r\n\r\nexport { gridRowWidget };\r\n\r\ninterface GridRowWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        disabled?: boolean\r\n    }): HTMLElement;\r\n    cells(row: HTMLElement): HTMLElement[];\r\n    setPosInSet(row: HTMLElement, value: number): void;\r\n    getPosInSet(row: HTMLElement): number;\r\n    setActive(row: HTMLElement, value: boolean): void;\r\n    getActive(row: HTMLElement): boolean;\r\n    setDropTarget(row: HTMLElement, value: boolean): void;\r\n    getDropTarget(row: HTMLElement): boolean;\r\n    setSelected(row: HTMLElement, value: boolean): void;\r\n    getSelected(row: HTMLElement): boolean;\r\n    setDisabled(row: HTMLElement, value: boolean): void;\r\n    getDisabled(row: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridrow\": GridRowWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridRowWidget = new (\r\nWidget({\r\n    name: \"gridrow\"\r\n})(class GridRowWidgetFactoryBase extends WidgetFactory implements GridRowWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"tr\", {\r\n            attributes: {\r\n                class: \"gridrow\",\r\n                role: \"row\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const row = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {disabled} = init;\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(row, disabled);\r\n            }\r\n            this.setSelected(row, false);\r\n        }\r\n        return row;\r\n    }\r\n\r\n    slot(row: HTMLElement): HTMLElement | null {\r\n        return row;\r\n    }\r\n\r\n    cells(row: HTMLElement): HTMLElement[] {\r\n        return Array.from(row.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridcell\"\r\n        ));\r\n    }\r\n    \r\n    setPosInSet(row: HTMLElement, value: number): void {\r\n        row.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(row: HTMLElement): number {\r\n        const posInSet = row.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(row: HTMLElement, value: boolean): void {\r\n        const {classList} = row;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(row: HTMLElement): boolean {\r\n        const {classList} = row;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(row: HTMLElement, value: boolean): void {\r\n        const {classList} = row;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(row: HTMLElement): boolean {\r\n        const {classList} = row;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(row: HTMLElement, value: boolean): void {\r\n        row.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(row: HTMLElement): boolean {\r\n        return row.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(row: HTMLElement, value: boolean): void {\r\n        row.setAttribute(\"aria-selected\", String(value));\r\n        row.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(row: HTMLElement): boolean {\r\n        return JSON.parse(row.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((item_i, i) => {\r\n            if (item_i instanceof HTMLElement) {\r\n                gridCellWidget.setPosInSet(item_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { gridCellWidget } from \"./GridCellWidget\";\r\nimport { gridRowWidget } from \"./GridRowWidget\";\r\n\r\nexport { gridWidget };\r\n\r\ntype GridSelectBy = \"cell\" | \"row\";\r\n\r\ninterface GridRowWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n        selectby?: GridSelectBy\r\n    }): HTMLElement;\r\n    setSelectBy(item: HTMLElement, value: GridSelectBy): void;\r\n    getSelectBy(item: HTMLElement): GridSelectBy;\r\n    headers(grid: HTMLElement): HTMLElement[];\r\n    cells(grid: HTMLElement): HTMLElement[];\r\n    rows(grid: HTMLElement): HTMLElement[];\r\n    beginSelection(grid: HTMLElement): void;\r\n    endSelection(grid: HTMLElement): void;\r\n    selectedCells(grid: HTMLElement): HTMLElement[];\r\n    selectedRows(grid: HTMLElement): HTMLElement[];\r\n    clearSelection(grid: HTMLElement): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"grid\": GridRowWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridWidget = new (\r\nWidget({\r\n    name: \"grid\"\r\n})(class GridWidgetFactoryBase extends WidgetFactory implements GridRowWidgetFactory {\r\n\r\n    #getActiveRow(grid: HTMLElement): HTMLElement | null {\r\n        return grid.querySelector<HTMLElement>(\".gridrow.active\");\r\n    }\r\n\r\n    #getActiveCell(grid: HTMLElement): HTMLElement | null {\r\n        return grid.querySelector<HTMLElement>(\".gridcell.active\");\r\n    }\r\n\r\n    headers(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridhead > .gridheader\"\r\n        ));\r\n    }\r\n\r\n    rows(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridbody > .gridrow\"\r\n        ));\r\n    }\r\n\r\n    cells(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridbody > .gridrow > .gridcell\"\r\n        ));\r\n    }\r\n\r\n    #template: HTMLElement;\r\n    #rowsWalker: TreeWalker;\r\n    #cellsWalker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"table\", {\r\n            attributes: {\r\n                class: \"grid\",\r\n                role: \"grid\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#cellsWalker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#cellsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#rowsWalker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#rowsWalkerNodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n        selectby?: GridSelectBy;\r\n    }) {\r\n        const grid = <HTMLElement>this.#template.cloneNode(true);\r\n        //grid.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        grid.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        grid.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        grid.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        grid.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        grid.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        grid.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, selectby, multisectable} = properties;\r\n            if (id !== undefined) {\r\n                grid.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                grid.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                grid.tabIndex = tabIndex;\r\n            }\r\n            if (selectby !== undefined) {\r\n                this.setSelectBy(grid, selectby);\r\n            }\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(grid, multisectable);\r\n            }\r\n        }\r\n        return grid;\r\n    }\r\n\r\n    slot(grid: HTMLElement): HTMLElement | null {\r\n        return grid;\r\n    }\r\n\r\n    setMultiSelectable(grid: HTMLElement, value: boolean): void {\r\n        grid.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(grid: HTMLElement): boolean {\r\n        return JSON.parse(grid.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    setSelectBy(grid: HTMLElement, value: GridSelectBy): void {\r\n        grid.setAttribute(\"data-selectby\", value);\r\n    }\r\n\r\n    getSelectBy(grid: HTMLElement): GridSelectBy {\r\n        return <GridSelectBy>grid.getAttribute(\"data-selectby\") ?? \"cell\";\r\n    }\r\n\r\n    beginSelection(grid: HTMLElement): void {\r\n        this.#onSelection.set(grid, true);\r\n    }\r\n\r\n    endSelection(grid: HTMLElement): void {\r\n        this.#onSelection.set(grid, false);\r\n        if (this.#hasSelectionChanged.get(grid)) {\r\n            grid.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(grid, false);\r\n        }\r\n    }\r\n\r\n    clearSelection(grid: HTMLElement): void {\r\n        this.#clearCellsSelection(grid);\r\n        this.#clearRowsSelection(grid);\r\n    }\r\n\r\n    selectedCells(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll(\":scope > .gridbody > .gridrow > .gridcell[aria-selected=true]\"));\r\n    }\r\n\r\n    selectedRows(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll(\":scope > .gridbody > .gridrow[aria-selected=true]\"));\r\n    }\r\n\r\n    #cellsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"gridcell\") && !gridCellWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"gridrow\") || classList.contains(\"gridbody\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #rowsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"gridrow\") && !gridRowWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"gridbody\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getCellsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextCell = this.#nextCell(from);\r\n            while (nextCell && nextCell !== to) {\r\n                range.push(nextCell);\r\n                nextCell = this.#nextCell(nextCell);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousCell = this.#previousCell(from);\r\n            while (previousCell && previousCell !== to) {\r\n                range.push(previousCell);\r\n                previousCell = this.#previousRow(previousCell);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #getRowsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextRow = this.#nextRow(from);\r\n            while (nextRow && nextRow !== to) {\r\n                range.push(nextRow);\r\n                nextRow = this.#nextRow(nextRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousRow = this.#previousRow(from);\r\n            while (previousRow && previousRow !== to) {\r\n                range.push(previousRow);\r\n                previousRow = this.#previousRow(previousRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setCellsSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        selectedCells.forEach((selectedCell_i) => {\r\n            if (!cells.includes(selectedCell_i)) {\r\n                gridCellWidget.setSelected(selectedCell_i, false);\r\n            }\r\n        });\r\n        cells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (!selected) {\r\n                gridCellWidget.setSelected(cell_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #setRowsSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        selectedRows.forEach((selectedRow_i) => {\r\n            if (!rows.includes(selectedRow_i)) {\r\n                gridRowWidget.setSelected(selectedRow_i, false);\r\n            }\r\n        });\r\n        rows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (!selected) {\r\n                gridRowWidget.setSelected(row_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #addCellsToSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        cells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (!selected) {\r\n                gridCellWidget.setSelected(cell_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #addRowsToSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        rows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (!selected) {\r\n                gridRowWidget.setSelected(row_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #removeCellsFromSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        cells.forEach((cell_i) => {\r\n            if (selectedCells.includes(cell_i)) {\r\n                gridCellWidget.setSelected(cell_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #removeRowsFromSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        rows.forEach((row_i) => {\r\n            if (selectedRows.includes(row_i)) {\r\n                gridRowWidget.setSelected(row_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #clearCellsSelection(grid: HTMLElement): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        selectedCells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (selected) {\r\n                gridCellWidget.setSelected(cell_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #clearRowsSelection(grid: HTMLElement): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        selectedRows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (selected) {\r\n                gridRowWidget.setSelected(row_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #setActiveCell(grid: HTMLElement, cell: HTMLElement | null): void {\r\n        const activeCell = this.#getActiveCell(grid);\r\n        if (activeCell !== null && activeCell !== cell) {\r\n            gridCellWidget.setActive(activeCell, false);\r\n            activeCell.tabIndex = -1;\r\n        }\r\n        if (cell !== null) {\r\n            gridCellWidget.setActive(cell, true);\r\n            cell.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #setActiveRow(grid: HTMLElement, row: HTMLElement | null): void {\r\n        const activeRow = this.#getActiveRow(grid);\r\n        if (activeRow !== null && activeRow !== row) {\r\n            gridRowWidget.setActive(activeRow, false);\r\n            activeRow.tabIndex = -1;\r\n        }\r\n        if (row !== null) {\r\n            gridCellWidget.setActive(row, true);\r\n            row.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #firstCell(row: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLElement | null>cellsWalker.firstChild();\r\n    }\r\n\r\n    #lastCell(row: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLElement | null>cellsWalker.lastChild();\r\n    }\r\n\r\n    #previousCell(cell: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLElement | null>cellsWalker.previousNode();\r\n    }\r\n\r\n    #nextCell(cell: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLElement | null>cellsWalker.nextNode();\r\n    }\r\n\r\n    #closestRow(cell: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = cell;\r\n        return <HTMLElement | null>rowsWalker.parentNode();\r\n    }\r\n\r\n    #firstRow(grid: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = grid;\r\n        return <HTMLElement | null>rowsWalker.firstChild();\r\n    }\r\n\r\n    #lastRow(grid: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = grid;\r\n        return <HTMLElement | null>rowsWalker.lastChild();\r\n    }\r\n\r\n    #previousRow(row: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLElement | null>rowsWalker.previousNode();\r\n    }\r\n\r\n    #nextRow(row: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLElement | null>rowsWalker.nextNode();\r\n    }\r\n\r\n    #topCell(cell: HTMLElement): HTMLElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const closestRowCells = gridRowWidget.cells(closestRow);\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const previousRow = this.#previousRow(closestRow);\r\n            if (previousRow) {\r\n                const previousRowCells = gridRowWidget.cells(previousRow);\r\n                return previousRowCells[Math.min(cellIndex, previousRowCells.length)];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #bottomCell(cell: HTMLElement): HTMLElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const closestRowCells = gridRowWidget.cells(closestRow);\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const nextRow = this.#nextRow(closestRow);\r\n            if (nextRow) {\r\n                const nextRowCells = gridRowWidget.cells(nextRow);\r\n                return nextRowCells[Math.min(cellIndex, nextRowCells.length)];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /*#handleContextMenuEvent(event: MouseEvent) {\r\n        const {currentTarget, target} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    const selectedCells = this.selectedCells(targetGrid);\r\n                    if (!selectedCells.includes(targetCell)) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    targetCell.focus({preventScroll: true});\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    const selectedRows = this.selectedRows(targetGrid);\r\n                    if (!selectedRows.includes(targetRow)) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    targetRow.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        event.preventDefault();\r\n    }*/\r\n\r\n    /*#handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            const type = treeitemWidget.getType(targetItem);\r\n            if (type == \"parent\") {\r\n                treeitemWidget.toggle(targetItem, true);\r\n            }\r\n            this.#setDropTargetItem(targetTree, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!targetTree.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(targetTree, null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }*/\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const activeCell = this.#getActiveCell(targetGrid);\r\n                if (activeCell && relatedTarget !== activeCell) {\r\n                    activeCell.focus();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const activeRow = this.#getActiveRow(targetGrid);\r\n                if (activeRow && relatedTarget !== activeRow) {\r\n                    activeRow.focus();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    this.#setActiveCell(targetGrid, targetCell);\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    this.#setActiveRow(targetGrid, targetRow);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetGrid.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetGrid.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const activeCell = this.#getActiveCell(targetGrid);\r\n        const activeRow = this.#getActiveRow(targetGrid);\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        const multiselectable = this.getMultiSelectable(targetGrid);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey && multiselectable) {\r\n                    switch (selectby) {\r\n                        case \"cell\": {\r\n                            const firstRow = this.#firstRow(targetGrid);\r\n                            const firstCell = firstRow ? this.#firstCell(firstRow) : null;\r\n                            const lastRow = this.#lastRow(targetGrid);\r\n                            const lastCell = lastRow ? this.#lastCell(lastRow) : null;\r\n                            if (firstCell && lastCell) {\r\n                                const range = this.#getCellsRange(firstCell, lastCell);\r\n                                if (range) {\r\n                                    this.#setCellsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"row\": {\r\n                            const firstRow = this.#firstRow(targetGrid);\r\n                            const lastRow = this.#lastRow(targetGrid);\r\n                            if (firstRow && lastRow) {\r\n                                const range = this.#getRowsRange(firstRow, lastRow);\r\n                                if (range) {\r\n                                    this.#setRowsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const previousCell = this.#previousCell(activeCell);\r\n                        if (previousCell) {\r\n                            previousCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(previousCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, previousCell) :\r\n                                    this.#addCellsToSelection(targetGrid, previousCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const nextCell = this.#nextCell(activeCell);\r\n                        if (nextCell) {\r\n                            nextCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(nextCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, nextCell) :\r\n                                    this.#addCellsToSelection(targetGrid, nextCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const firstRow = activeRow ?? this.#firstRow(targetGrid);\r\n                        const topCell = activeCell ?\r\n                            this.#topCell(activeCell) :\r\n                            firstRow ?\r\n                            this.#firstCell(firstRow) :\r\n                            null;\r\n                        if (topCell) {\r\n                            topCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(topCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, topCell) :\r\n                                    this.#addCellsToSelection(targetGrid, topCell);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const previousRow = activeRow ?\r\n                            this.#previousRow(activeRow) :\r\n                            this.#firstRow(targetGrid);\r\n                        if (previousRow) {\r\n                            previousRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridRowWidget.getSelected(previousRow);\r\n                                selected ?\r\n                                    this.#removeRowsFromSelection(targetGrid, previousRow) :\r\n                                    this.#addRowsToSelection(targetGrid, previousRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const lastRow = activeRow ?? this.#lastRow(targetGrid);\r\n                        const bottomCell = activeCell ?\r\n                            this.#bottomCell(activeCell) :\r\n                            lastRow ?\r\n                            this.#lastCell(lastRow) :\r\n                            null;\r\n                            if (bottomCell) {\r\n                                bottomCell.focus({preventScroll: true});\r\n                                const {shiftKey} = event;\r\n                                if (shiftKey && multiselectable) {\r\n                                    const selected = gridCellWidget.getSelected(bottomCell);\r\n                                    selected ?\r\n                                        this.#removeCellsFromSelection(targetGrid, bottomCell) :\r\n                                        this.#addCellsToSelection(targetGrid, bottomCell);\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"row\": {\r\n                        const nextRow = activeRow ?\r\n                            this.#nextRow(activeRow) :\r\n                            this.#lastRow(targetGrid);\r\n                        if (nextRow) {\r\n                            nextRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridRowWidget.getSelected(nextRow);\r\n                                selected ?\r\n                                    this.#removeRowsFromSelection(targetGrid, nextRow) :\r\n                                    this.#addRowsToSelection(targetGrid, nextRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const firstCell = this.#firstCell(activeRow);\r\n                            if (firstCell) {\r\n                                firstCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const firstRow = this.#firstRow(targetGrid);\r\n                        if (firstRow) {\r\n                            firstRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const lastCell = this.#lastCell(activeRow);\r\n                            if (lastCell) {\r\n                                lastCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const lastRow = this.#lastRow(targetGrid);\r\n                        if (lastRow) {\r\n                            lastRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeCell) {\r\n                            this.#setCellsSelection(targetGrid, activeCell);\r\n                            activeCell.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        if (activeRow) {\r\n                            this.#setRowsSelection(targetGrid, activeRow);\r\n                            activeRow.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        this.#clearCellsSelection(targetGrid);\r\n                        this.#setActiveCell(targetGrid, null);\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        this.#clearRowsSelection(targetGrid);\r\n                        this.#setActiveRow(targetGrid, null);\r\n                        break;\r\n                    }\r\n                }\r\n                targetGrid.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        const multiselectable = this.getMultiSelectable(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    if (multiselectable) {\r\n                        if (!shiftKey && !ctrlKey) {\r\n                            this.#setCellsSelection(targetGrid, targetCell);\r\n                        }\r\n                        else if (ctrlKey) {\r\n                            const selected = gridCellWidget.getSelected(targetCell);\r\n                            !selected ?\r\n                                this.#addCellsToSelection(targetGrid, targetCell) :\r\n                                this.#removeCellsFromSelection(targetGrid, targetCell);\r\n                            event.stopPropagation();\r\n                        }\r\n                        else if (shiftKey) {\r\n                            const activeCell = this.#getActiveCell(targetGrid);\r\n                            if (activeCell) {\r\n                                const range = this.#getCellsRange(\r\n                                    activeCell,\r\n                                    targetCell\r\n                                );\r\n                                if (range) {\r\n                                    this.#setCellsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.#setCellsSelection(targetGrid, targetCell);\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    if (multiselectable) {\r\n                        if (!shiftKey && !ctrlKey) {\r\n                            this.#setRowsSelection(targetGrid, targetRow);\r\n                        }\r\n                        else if (ctrlKey) {\r\n                            const selected = gridRowWidget.getSelected(targetRow);\r\n                            !selected ?\r\n                                this.#addRowsToSelection(targetGrid, targetRow) :\r\n                                this.#removeRowsFromSelection(targetGrid, targetRow);\r\n                            event.stopPropagation();\r\n                        }\r\n                        else if (shiftKey) {\r\n                            const activeRow = this.#getActiveRow(targetGrid);\r\n                            if (activeRow) {\r\n                                const range = this.#getRowsRange(\r\n                                    activeRow,\r\n                                    targetRow\r\n                                );\r\n                                if (range) {\r\n                                    this.#setRowsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.#setRowsSelection(targetGrid, targetRow);\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetList) {\r\n            if (this.#onSelection.get(targetList)) {\r\n                this.#hasSelectionChanged.set(targetList, true);\r\n            }\r\n            else {\r\n                targetList.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { gridRowWidget } from \"./GridRowWidget\";\r\n\r\nexport { gridBodyWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridbody\": GridBodyWidgetFactory\r\n    }\r\n}\r\n\r\ninterface GridBodyWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar gridBodyWidget = new (\r\nWidget({\r\n    name: \"gridbody\"\r\n})(class GridBodyWidgetFactoryBase extends WidgetFactory implements GridBodyWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"tbody\", {\r\n            attributes: {\r\n                class: \"gridbody\",\r\n                role: \"rowgroup\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(body: HTMLElement) {\r\n        return body;\r\n    }\r\n\r\n    slottedCallback(body: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"gridrow\")) {\r\n                gridRowWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridHeadWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridhead\": GridHeadWidgetFactory\r\n    }\r\n}\r\n\r\ninterface GridHeadWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar gridHeadWidget = new (\r\nWidget({\r\n    name: \"gridhead\"\r\n})(class GridHeadWidgetFactoryBase extends WidgetFactory implements GridHeadWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"thead\", {\r\n            attributes: {\r\n                class: \"gridhead\",\r\n                role: \"rowgroup\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(head: HTMLElement) {\r\n        return head;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridHeaderWidget };\r\n\r\ninterface GridHeaderWidgetFactory extends WidgetFactory {\r\n    create(init: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }): HTMLElement;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridheader\": GridHeaderWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridHeaderWidget = new (\r\nWidget({\r\n    name: \"gridheader\"\r\n})(class GridHeaderWidgetFactoryBase extends WidgetFactory implements GridHeaderWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"th\", {\r\n            attributes: {\r\n                class: \"gridheader\",\r\n                scope: \"column\",\r\n                role: \"columnheader\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }): HTMLElement {\r\n        const header = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {id, classList, tabIndex} = init;\r\n            if (id !== undefined) {\r\n                header.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                header.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                header.tabIndex = tabIndex;\r\n            }\r\n        }\r\n        return header;\r\n    }\r\n\r\n    slot(header: HTMLElement): HTMLElement | null {\r\n        return header;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { optionWidget };\r\n\r\ninterface OptionWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        label?: string;\r\n        name?: string;\r\n        value?: string;\r\n        selected?: boolean;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    getLabel(option: HTMLElement): string;\r\n    setLabel(option: HTMLElement, value: string): void;\r\n    getValue(option: HTMLElement): string;\r\n    setValue(option: HTMLElement, value: string): void;\r\n    getName(option: HTMLElement): string;\r\n    setName(option: HTMLElement, value: string): void;\r\n    getSelected(option: HTMLElement): boolean;\r\n    setSelected(option: HTMLElement, value: boolean): void;\r\n    setDisabled(option: HTMLElement, value: boolean): void;\r\n    getDisabled(option: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"option\": OptionWidgetFactory\r\n    }\r\n}\r\n\r\nvar optionWidget = new(\r\nWidget({\r\n    name: \"option\"\r\n})(\r\nclass OptionWidgetFactoryBase extends WidgetFactory implements OptionWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"span\", {\r\n            attributes: {\r\n                class: \"option\",\r\n                role: \"option\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(properties?: {\r\n        selected?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const option = <HTMLElement>this.#template.cloneNode(true);\r\n        if (properties !== undefined) {\r\n            const {label, name, value, disabled} = properties;\r\n            let {selected} = properties;\r\n            selected = selected ?? false;\r\n            if (selected !== undefined) {\r\n                this.setSelected(option, selected);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(option, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(option, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(option, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(option, disabled);\r\n            }\r\n        }\r\n        return option;\r\n    }\r\n\r\n    get observedAttributes() {\r\n        return [\"aria-selected\"];\r\n    }\r\n\r\n    attributeChangedCallback(option: HTMLElement, name: string, oldValue: string, newValue: string) {\r\n        switch (name) {\r\n            case \"aria-selected\": {\r\n                if (JSON.parse(newValue) === true) {\r\n                    option.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #label(option: HTMLElement): HTMLElement {\r\n        return option.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n\r\n    getLabel(option: HTMLElement): string {\r\n        return this.#label(option).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(option: HTMLElement, value: string): void {\r\n        this.#label(option).textContent = value;\r\n    }\r\n\r\n    getValue(option: HTMLElement): string {\r\n        return option.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(option: HTMLElement, value: string): void {\r\n        option.setAttribute(\"value\", value);\r\n    }\r\n    \r\n    getName(option: HTMLElement): string {\r\n        return option.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(option: HTMLElement, value: string): void {\r\n        option.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getSelected(option: HTMLElement): boolean {\r\n        return JSON.parse(option.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    setSelected(option: HTMLElement, value: boolean): void {\r\n        option.setAttribute(\"aria-selected\", String(value));\r\n    }\r\n\r\n    getDisabled(option: HTMLElement): boolean {\r\n        return option.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(option: HTMLElement, value: boolean): void {\r\n        option.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { optionWidget } from \"./OptionWidget\";\r\n\r\nexport { comboBoxWidget };\r\n\r\ninterface ComboBoxWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        name?: string;\r\n        disabled?: boolean;\r\n        multiselectable?: boolean;\r\n    }): HTMLElement;\r\n    options(combobox: HTMLElement): HTMLElement[];\r\n    getName(combobox: HTMLElement): string;\r\n    setName(combobox: HTMLElement, value: string): void;\r\n    getExpanded(combobox: HTMLElement): boolean;\r\n    setExpanded(combobox: HTMLElement, value: boolean): void;\r\n    setDisabled(combobox: HTMLElement, value: boolean): void;\r\n    getDisabled(combobox: HTMLElement): boolean;\r\n    expand(combobox: HTMLElement): void;\r\n    collapse(combobox: HTMLElement): void;\r\n    toggle(combobox: HTMLElement, force?: boolean): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"combobox\": ComboBoxWidgetFactory\r\n    }\r\n}\r\n\r\nvar comboBoxWidget = new(\r\nWidget({\r\n    name: \"combobox\"\r\n})(\r\nclass ComboBoxWidgetFactoryBase extends WidgetFactory implements ComboBoxWidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #optionsObserver: MutationObserver;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#optionsObserver = new MutationObserver(\r\n            this.#optionsMutationCallback.bind(this)\r\n        );\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"combobox\",\r\n                role: \"combobox\",\r\n                tabindex: 0,\r\n            },\r\n            children: [\r\n                element(\"div\", {\r\n                    attributes: {\r\n                        class: \"content\"\r\n                    },\r\n                    children: [\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"value\"\r\n                            }\r\n                        })\r\n                    ]\r\n                }),\r\n                element(\"div\", {\r\n                    attributes: {\r\n                        class: \"box\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        name?: string;\r\n        disabled?: boolean;\r\n        multiselectable?: boolean;\r\n    }): HTMLElement {\r\n        const combobox = <HTMLElement>this.#template.cloneNode(true);\r\n        this.#optionsObserver.observe(combobox, {\r\n            childList: true,\r\n            subtree: true\r\n        });\r\n        combobox.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        combobox.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        combobox.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        combobox.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.setExpanded(combobox, false);\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, name, disabled, multiselectable} = properties;\r\n            if (id !== undefined) {\r\n                combobox.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                combobox.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                combobox.tabIndex = tabIndex;\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(combobox, name);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(combobox, disabled);\r\n            }\r\n            if (multiselectable !== undefined) {\r\n                this.setMultiSelectable(combobox, multiselectable);\r\n            }\r\n        }\r\n        return combobox;\r\n    }\r\n\r\n    slot(combobox: HTMLElement) {\r\n        return this.#box(combobox);\r\n    }\r\n\r\n    slottedCallback(combobox: HTMLElement, slot: HTMLElement, name: string | null) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement) {\r\n                //gridRowWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n\r\n    #box(combobox: HTMLElement): HTMLElement {\r\n        return combobox.querySelector<HTMLElement>(\":scope > .box\")!;\r\n    }\r\n    \r\n    options(combobox: HTMLElement): HTMLElement[] {\r\n        return Array.from(combobox.querySelectorAll<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option\"\r\n        ));\r\n    }\r\n\r\n    selectedOption(combobox: HTMLElement): HTMLElement | null {\r\n        return combobox.querySelector<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option[aria-selected=true]\"\r\n        );\r\n    }\r\n\r\n    #getActiveOption(combobox: HTMLElement): HTMLElement | null {\r\n        return combobox.querySelector<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option:focus-within\"\r\n        );\r\n    }\r\n\r\n    #value(combobox: HTMLElement): HTMLElement {\r\n        return combobox.querySelector<HTMLElement>(\":scope > .content > .value\")!;\r\n    }\r\n    \r\n    getName(combobox: HTMLElement): string {\r\n        return combobox.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(combobox: HTMLElement, value: string): void {\r\n        combobox.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getDisabled(combobox: HTMLElement): boolean {\r\n        return combobox.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(combobox: HTMLElement, value: boolean): void {\r\n        combobox.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setExpanded(combobox: HTMLElement, value: boolean): void {\r\n        combobox.setAttribute(\"aria-expanded\", String(value));\r\n    }\r\n\r\n    getExpanded(combobox: HTMLElement): boolean {\r\n        return JSON.parse(combobox.getAttribute(\"aria-expanded\") ?? String(false));\r\n    }\r\n\r\n    setMultiSelectable(combobox: HTMLElement, value: boolean): void {\r\n        combobox.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(combobox: HTMLElement): boolean {\r\n        return JSON.parse(combobox.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    expand(combobox: HTMLElement): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        if (!expanded) {\r\n            this.setExpanded(combobox, true);\r\n            this.#positionBox(combobox);\r\n            const selectedOption = this.selectedOption(combobox);\r\n            if (selectedOption) {\r\n                selectedOption.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(combobox: HTMLElement): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        if (expanded) {\r\n            this.setExpanded(combobox, false);\r\n            combobox.focus();\r\n        }\r\n    }\r\n\r\n    toggle(combobox: HTMLElement, force?: boolean): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand(combobox) : this.collapse(combobox);\r\n    }\r\n\r\n    #optionsMutationCallback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            const targetCombobox = (<HTMLElement>target).closest<HTMLElement>(\".combobox\")!;\r\n            if (targetCombobox instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"childList\": {\r\n                        const {addedNodes} = mutation;\r\n                        const selector = \".option[aria-selected=true]\";\r\n                        for (let node of addedNodes) {\r\n                            if (node instanceof HTMLElement) {\r\n                                const selectedOption = node.matches(selector) ? node :\r\n                                    node.querySelector<HTMLElement>(selector);\r\n                                if (selectedOption) {\r\n                                    this.#setSelectedOption(targetCombobox, selectedOption);\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"option\") && !optionWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"optiongroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstOption(combobox: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = this.#box(combobox);\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastOption(combobox: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = this.#box(combobox);\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousOption(option: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextOption(option: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLElement | null>walker.nextNode();\r\n    }\r\n\r\n    #selectOption(combobox: HTMLElement, option: HTMLElement) {\r\n        const selectedOption = this.selectedOption(combobox);\r\n        if (selectedOption) {\r\n            optionWidget.setSelected(selectedOption, false);\r\n        }\r\n        if (option !== selectedOption) {\r\n            optionWidget.setSelected(option, true);\r\n            this.#setSelectedOption(combobox, option);\r\n            combobox.dispatchEvent(new Event(\"change\", {bubbles: true}));\r\n        }\r\n    }\r\n    \r\n    #setSelectedOption(combobox: HTMLElement, option: HTMLElement) {\r\n        this.#value(combobox).textContent = optionWidget.getLabel(option);\r\n    }\r\n\r\n    #positionBox(combobox: HTMLElement): void {\r\n        const box = combobox.querySelector<HTMLElement>(\":scope > .box\")!;\r\n        const {style: optionsStyle} = box;  \r\n        const {bottom, left} = combobox.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        optionsStyle.setProperty(\"top\", `${bottom + scrollY}px`);\r\n        optionsStyle.setProperty(\"left\", `${left + scrollX}px`);\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        this.toggle(targetCombobox);\r\n        const expanded = this.getExpanded(targetCombobox);\r\n        if (expanded) {\r\n            const selectedOption = this.selectedOption(targetCombobox);\r\n            (selectedOption ?? this.options(targetCombobox)[0])?.focus({preventScroll: true});\r\n        }\r\n        else {\r\n            const targetOption = (<HTMLElement>target).closest<HTMLElement>(\".option\");\r\n            if (targetOption) {\r\n                this.#selectOption(targetCombobox, targetOption);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetCombobox.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse(targetCombobox);\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        const expanded = this.getExpanded(targetCombobox);\r\n        const activeOption = this.#getActiveOption(targetCombobox);\r\n        const selectedOption = this.selectedOption(targetCombobox);\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                if (expanded) {\r\n                    const previousOption = activeOption ?\r\n                        this.#previousOption(activeOption) :\r\n                        this.#firstOption(targetCombobox);\r\n                    if (previousOption) {\r\n                        previousOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const previousOption = selectedOption ?\r\n                        this.#previousOption(selectedOption) :\r\n                        this.#firstOption(targetCombobox);\r\n                    if (previousOption) {\r\n                        this.#selectOption(targetCombobox, previousOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (expanded) {\r\n                    const nextOption = activeOption ?\r\n                        this.#nextOption(activeOption) :\r\n                        this.#lastOption(targetCombobox);\r\n                    if (nextOption) {\r\n                        nextOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const nextOption = selectedOption ?\r\n                        this.#nextOption(selectedOption) :\r\n                        this.#lastOption(targetCombobox);\r\n                    if (nextOption) {\r\n                        this.#selectOption(targetCombobox, nextOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstOption = this.#firstOption(targetCombobox);\r\n                if (firstOption) {\r\n                    if (expanded) {\r\n                        firstOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(targetCombobox, firstOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastOption = this.#lastOption(targetCombobox);\r\n                if (lastOption) {\r\n                    if (expanded) {\r\n                        lastOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(targetCombobox, lastOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (expanded) {\r\n                    this.collapse(targetCombobox);\r\n                    if (activeOption) {\r\n                        this.#selectOption(targetCombobox, activeOption);\r\n                    }\r\n                }\r\n                else {\r\n                    this.expand(targetCombobox);\r\n                    selectedOption?.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.collapse(targetCombobox);\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            default: {\r\n                const {length: keyLength} = key;\r\n                if (keyLength == 1) {\r\n                    const keyCode = key.charCodeAt(0);\r\n                    const options = this.options(targetCombobox);\r\n                    const activeIndex = activeOption ? options.indexOf(activeOption) : -1;\r\n                    const matchingOption = options.find(\r\n                        (option_i, i) => optionWidget.getLabel(option_i).toLowerCase().charCodeAt(0) == keyCode && i > activeIndex\r\n                    ) ?? options.find(\r\n                        (option_i) => optionWidget.getLabel(option_i).toLowerCase().charCodeAt(0) == keyCode\r\n                    );\r\n                    if (matchingOption) {\r\n                        matchingOption.focus({preventScroll: true});\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetItem = (<Element>target).closest<HTMLElement>(\".option\");\r\n        if (targetItem) {\r\n            targetItem.focus({preventScroll: true});\r\n        }\r\n    }\r\n}));","//import { MenuItemGroupWidget, MenuItemWidget, MenuWidget, MenuBarWidget } from \"./src/views/MenuBarWidget\";\r\n\r\nimport { TreeMain } from \"./TreeMain\";\r\n\r\nimport \"./index\";\r\n\r\ndeclare global {\r\n    interface ElementInternals {\r\n        role: string;\r\n    }\r\n    interface ShadowRoot {\r\n        adoptedStyleSheets: StyleSheet[];\r\n    }\r\n    interface CSSStyleSheet {\r\n        replace(css: string): void;\r\n    }\r\n}\r\n// const menubar = new MenuBarWidget([\r\n//     new MenuItemWidget({\r\n//         label: \"File\",\r\n//         name: \"file\",\r\n//         type: \"menu\",\r\n//         menu: new MenuWidget({\r\n//             name: \"File\",\r\n//             groups: [\r\n//                 new MenuItemGroupWidget({\r\n//                     name: \"fileActions\",\r\n//                     items: [\r\n//                         new MenuItemWidget({\r\n//                             label: \"Import file...\",\r\n//                             name: \"import\"\r\n//                         }),\r\n//                         new MenuItemWidget({\r\n//                             label: \"Export file...\",\r\n//                             name: \"export\",\r\n//                             hotkey: new HotKey(Key.B, KeyModifier.Control, KeyModifier.Alt)\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         })\r\n//     }),\r\n//     new MenuItemWidget({\r\n//         label: \"Preferences\",\r\n//         name: \"preferences\",\r\n//         type: \"menu\",\r\n//         menu: new MenuWidget({\r\n//             name: \"Preferences\",\r\n//             groups: [\r\n//                 new MenuItemGroupWidget({\r\n//                     name: \"fileActions\",\r\n//                     items: [\r\n//                         new MenuItemWidget({\r\n//                             label: \"Advanced User\",\r\n//                             name: \"advanced\",\r\n//                             type: \"checkbox\",\r\n//                             hotkey: new HotKey(Key.A, KeyModifier.Control, KeyModifier.Alt)\r\n//                         }),\r\n//                         new MenuItemWidget({\r\n//                             label: \"Layout\",\r\n//                             name: \"layout\",\r\n//                             type: \"submenu\",\r\n//                             menu: new MenuWidget({\r\n//                                 name: \"Layout\",\r\n//                                 groups: [\r\n//                                     new MenuItemGroupWidget({\r\n//                                         name: \"Layout\",\r\n//                                         items: [\r\n//                                             new MenuItemWidget({\r\n//                                                 label: \"Standard\",\r\n//                                                 name: \"standard\",\r\n//                                                 type: \"radio\"\r\n//                                             }),\r\n//                                             new MenuItemWidget({\r\n//                                                 label: \"Advanced\",\r\n//                                                 name: \"advanced\",\r\n//                                                 type: \"radio\"\r\n//                                             })\r\n//                                         ]\r\n//                                     })\r\n//                                 ]\r\n//                             })\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         })\r\n//     })\r\n// ]);\r\n\r\n// const treeModel = new TreeModel({\r\n//     itemContextMenuDelegate: (activeItem: TreeItemModel, selectedItems: TreeItemList) => \r\n//         fragment(\r\n//             widget(\"menuitemgroup\", {\r\n//                 slotted: [\r\n//                     widget(\"menuitem\", {\r\n//                         properties: {\r\n//                             label: \"Display\"\r\n//                         },\r\n//                         listeners: {\r\n//                             click: () => {\r\n//                                 selectedItems.display();\r\n//                             }\r\n//                         }\r\n//                     }),\r\n//                     widget(\"menuitem\", {\r\n//                         properties: {\r\n//                             label: \"Delete\"\r\n//                         },\r\n//                         listeners: {\r\n//                             click: () => {\r\n//                                 const {count} = selectedItems;\r\n//                                 const doRemove = confirm(`Remove ${count} items?`);\r\n//                                 if (doRemove) {\r\n//                                     selectedItems.remove();\r\n//                                 }\r\n//                             }\r\n//                         }\r\n//                     })\r\n//                 ]\r\n//             }),\r\n//             widget(\"menuitemgroup\", {\r\n//                 slotted: [\r\n//                     widget(\"menuitem\", {\r\n//                         properties: {\r\n//                             type: \"checkbox\",\r\n//                             label: activeItem.visibility ? \"Hide\" : \"Show\"\r\n//                         },\r\n//                         listeners: {\r\n//                             click: () => {\r\n//                                 activeItem.visibility ?\r\n//                                     selectedItems.hide() :\r\n//                                     selectedItems.show();\r\n//                             }\r\n//                         }\r\n//                     })\r\n//                 ]\r\n//             })\r\n//         ),\r\n//     itemContentDelegate: (item: TreeItemModel) => \r\n//         fragment(\r\n//             ...([\r\n//                 reactiveElement(\r\n//                     item,\r\n//                     element(\"span\", {\r\n//                         attributes: {\r\n//                             class: \"label\"\r\n//                         }\r\n//                     }),\r\n//                     [\"label\"],\r\n//                     (label, property, oldValue, newValue) => {\r\n//                         label.textContent = newValue;\r\n//                     }\r\n//                 )\r\n//             ]).concat(\r\n//                 (item.type == \"parent\") ? [\r\n//                     reactiveElement(\r\n//                         item,\r\n//                         element(\"span\", {\r\n//                             attributes: {\r\n//                                 class: \"badge\"\r\n//                             }\r\n//                         }),\r\n//                         [\"childCount\"],\r\n//                         (badge, property, oldValue, newValue) => {\r\n//                             badge.textContent = `(${newValue})`;\r\n//                         }\r\n//                     )\r\n//                 ] : []\r\n//             ).concat([\r\n//                 reactiveElement(\r\n//                     item,\r\n//                     widget(\"toolbar\", {\r\n//                         slotted: [\r\n//                             widget(\"toolbaritem\", {\r\n//                                 properties: {\r\n//                                     name: \"visibility\",\r\n//                                     type: \"checkbox\",\r\n//                                     label: \"Visibility\"\r\n//                                 },\r\n//                                 listeners: {\r\n//                                     click: () => {\r\n//                                         item.visibility ?\r\n//                                             item.hide() :\r\n//                                             item.show();\r\n//                                     }\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     }),\r\n//                     [\"visibility\"],\r\n//                     (toolbar, property, oldValue, newValue) => {\r\n//                         switch (property) {\r\n//                             case \"visibility\": {\r\n//                                 const visibilityItem = toolbarWidget.slot(toolbar)\r\n//                                     ?.querySelector<HTMLElement>(\".toolbaritem[name=visibility]\");\r\n//                                 if (visibilityItem) {\r\n//                                     const label = newValue ? \"Hide\" : \"Show\";\r\n//                                     toolbarItemWidget.setLabel(visibilityItem, label);\r\n//                                     toolbarItemWidget.setTitle(visibilityItem, label);\r\n//                                     toolbarItemWidget.setPressed(visibilityItem, newValue);\r\n//                                 }\r\n//                             }\r\n//                         }\r\n//                     }\r\n//                 )\r\n//             ])\r\n//         ),\r\n//     items: [\r\n//         new TreeItemModel({\r\n//             label: \"TI 0\",\r\n//             type: \"parent\",\r\n//             items: [\r\n//                 new TreeItemModel({\r\n//                     label: \"TI 1A\",\r\n//                     type: \"parent\",\r\n//                     items: [\r\n//                         new TreeItemModel({\r\n//                             type: \"leaf\",\r\n//                             label: \"TI 1AX\"\r\n//                         }),\r\n//                     ]\r\n//                 }),\r\n//                 new TreeItemModel({\r\n//                     type: \"parent\",\r\n//                     label: \"TI 1B\"\r\n//                 })\r\n//             ]\r\n//         }),\r\n//         new TreeItemModel({\r\n//             label: \"TI 1\",\r\n//             type: \"parent\",\r\n//             items: [\r\n//                 new TreeItemModel({\r\n//                     label: \"TI 1A\",\r\n//                     type: \"parent\",\r\n//                     items: [\r\n//                         new TreeItemModel({\r\n//                             type: \"leaf\",\r\n//                             label: \"TI 1AX\"\r\n//                         }),\r\n//                     ]\r\n//                 }),\r\n//                 new TreeItemModel({\r\n//                     type: \"parent\",\r\n//                     label: \"TI 1B\"\r\n//                 })\r\n//             ]\r\n//         }),\r\n//         new TreeItemModel({\r\n//             type: \"leaf\",\r\n//             label: \"TI 2\"\r\n//         }),\r\n//         new TreeItemModel({\r\n//             type: \"leaf\",\r\n//             label: \"TI 3\"\r\n//         })\r\n//     ],\r\n//     sortFunction: (item_a: TreeItemModel, item_b: TreeItemModel) => {\r\n//         const {label: aLabel} = item_a;\r\n//         const {label: bLabel} = item_b;\r\n//         return bLabel.localeCompare(aLabel);\r\n//     }\r\n// });\r\n// const treeElement = treeView.create(treeModel);\r\n// document.body.append(treeElement);\r\n\r\n// treeModel.childItems.append(\r\n//     new TreeItemModel({\r\n//         label: \"yo\",\r\n//         type: \"parent\",\r\n//         items: [\r\n//             new TreeItemModel({\r\n//                 type: \"leaf\",\r\n//                 label: \"plop\"\r\n//             })\r\n//         ]\r\n//     })\r\n// );\r\n\r\n// const listView = new ListView();\r\n// listView.setModel(\r\n//     new ListModel({\r\n//         items: [\r\n//             new ListItemModel({\r\n//                 label: \"Hey\"\r\n//             }),\r\n//             new ListItemModel({\r\n//                 label: \"Yo\"\r\n//             })\r\n//         ]\r\n//     })\r\n// );\r\n\r\n// //document.body.append(listView);\r\n\r\n// // Menu actions\r\n// // Toolbar actions\r\n// const gridView = new GridView();\r\n// gridView.resizable = true;\r\n// gridView.sortable = true;\r\n// gridView.setColumnDelegate((column) => {\r\n//     return fragment(\r\n//         element(\"label\", {\r\n//             children: column.label\r\n//         }),\r\n//         element(\"e-toolbar\", {\r\n//             children: [\r\n//                 element(\"e-toolbaritem\", {\r\n//                     attributes: {\r\n//                         type: \"button\"\r\n//                     }\r\n//                 })\r\n//             ]\r\n//         })\r\n//     );\r\n// });\r\n// const year = new Date().getFullYear();\r\n// gridView.setModel(\r\n//     new GridModel({\r\n//         columns: [\r\n//             new GridColumnModel({\r\n//                 name: \"name\",\r\n//                 type: String,\r\n//                 label: \"Name\",\r\n//                 extract: (row) => row.name\r\n//             }),\r\n//             new GridColumnModel({\r\n//                 name: \"age\",\r\n//                 type: Number,\r\n//                 label: \"Age\",\r\n//                 extract: (row) => row.age,\r\n//                 filters: [{\r\n//                     name: \"Minors\",\r\n//                     filter: (row) => row.age < 18\r\n//                 },{\r\n//                     name: \"Majors\",\r\n//                     filter: (row) => row.age >= 18\r\n//                 }]\r\n//             }),\r\n//             new GridColumnModel({\r\n//                 name: \"birthyear\",\r\n//                 type: String,\r\n//                 label: \"Brith Year\",\r\n//                 extract: (row) => year - row.age\r\n//             }),\r\n//         ],\r\n//         rows: [\r\n//             new GridRowModel({\r\n//                 id: 1,\r\n//                 name: \"Denis\",\r\n//                 age: 13\r\n//             }),\r\n//             new GridRowModel({\r\n//                 id: 2,\r\n//                 name: \"Jean-Charles\",\r\n//                 age: 32\r\n//             }),\r\n//             new GridRowModel({\r\n//                 id: 3,\r\n//                 name: \"Charles\",\r\n//                 age: 25\r\n//             }),\r\n//             new GridRowModel({\r\n//                 id: 4,\r\n//                 name: \"Mamagubida\",\r\n//                 age: 128\r\n//             })\r\n//         ]\r\n//     })\r\n// );\r\n// document.body.append(gridView);\r\n\r\n// const menuView = widget(\"menubar\", {\r\n//     slotted: [\r\n//         widget(\"menuitem\", {\r\n//             properties: {\r\n//                 label: \"MenuItem 0\",\r\n//                 name: \"MenuItem 0\",\r\n//                 type: \"menu\",\r\n//                 disabled: true\r\n//             },\r\n//             slotted: [\r\n//                 widget(\"menu\", {\r\n//                     slotted: [\r\n//                         widget(\"menuitem\", {\r\n//                             properties: {\r\n//                                 label: \"MenuItem 1\",\r\n//                                 name: \"MenuItem 1\",\r\n//                                 type: \"checkbox\"\r\n//                             }\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         }),\r\n//         widget(\"menuitem\", {\r\n//             properties: {\r\n//                 label: \"MenuItem 0\",\r\n//                 name: \"MenuItem 0\",\r\n//                 type: \"menu\"\r\n//             },\r\n//             slotted: [\r\n//                 widget(\"menu\", {\r\n//                     slotted: [\r\n//                         widget(\"menuitem\", {\r\n//                             properties: {\r\n//                                 label: \"MenuItem 1\",\r\n//                                 name: \"MenuItem 1\",\r\n//                                 type: \"checkbox\"\r\n//                             }\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         }),\r\n//         widget(\"menuitem\", {\r\n//             properties: {\r\n//                 label: \"MenuItem 1\",\r\n//                 name: \"MenuItem 1\",\r\n//                 type: \"menu\"\r\n//             },\r\n//             slotted: [\r\n//                 widget(\"menu\", {\r\n//                     slotted: [\r\n//                         widget(\"menuitemgroup\", {\r\n//                             slotted: [\r\n//                                 widget(\"menuitem\", {\r\n//                                     properties: {\r\n//                                         label: \"MenuItem 1\",\r\n//                                         type: \"checkbox\",\r\n//                                         keyshortcut: \"Ctrl+B\",\r\n//                                         disabled: true,\r\n//                                         checked: true\r\n//                                     }\r\n//                                 }),\r\n//                                 widget(\"menuitem\", {\r\n//                                     properties: {\r\n//                                         type: \"button\",\r\n//                                         label: \"MenuItem 2\",\r\n//                                         keyshortcut: \"Ctrl+A\"\r\n//                                     }\r\n//                                 })\r\n//                             ]\r\n//                         }),\r\n//                         widget(\"separator\"),\r\n//                         widget(\"menuitem\", {\r\n//                             properties: {\r\n//                                 label: \"Submenu\",\r\n//                                 type: \"submenu\"\r\n//                             },\r\n//                             slotted: [\r\n//                                 widget(\"menu\", {\r\n//                                     slotted: [\r\n//                                         widget(\"menuitem\", {\r\n//                                             properties: {\r\n//                                                 label: \"MenuItem 1\",\r\n//                                                 type: \"radio\",\r\n//                                                 name: \"radio\",\r\n//                                                 value: \"1\"\r\n//                                             }\r\n//                                         }),\r\n//                                         widget(\"menuitem\", {\r\n//                                             properties: {\r\n//                                                 type: \"radio\",\r\n//                                                 label: \"MenuItem 2\",\r\n//                                                 name: \"radio\",\r\n//                                                 value: \"2\"\r\n//                                             }\r\n//                                         }),\r\n//                                         widget(\"menuitem\", {\r\n//                                             properties: {\r\n//                                                 type: \"radio\",\r\n//                                                 label: \"MenuItem 3\",\r\n//                                                 name: \"radio\",\r\n//                                                 value: \"3\"\r\n//                                             }\r\n//                                         })\r\n//                                     ]\r\n//                                 })\r\n//                             ]\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         })\r\n//     ]\r\n// })\r\n// document.body.append(menuView);\r\n\r\n// const tree = widget(\"tree\", {\r\n//     slotted: [\r\n//         widget(\"treeitem\", {\r\n//             properties: {\r\n//                 label: \"treeitem 0\",\r\n//                 type: \"parent\",\r\n//                 draggable: true\r\n//                 //disabled: true\r\n//             },\r\n//             slotted: {\r\n//                 group: [\r\n//                     widget(\"treeitemgroup\", {\r\n//                         slotted: [\r\n//                             widget(\"treeitem\", {\r\n//                                 properties: {\r\n//                                     label: \"treeitem 1\",\r\n//                                     type: \"leaf\",\r\n//                                     draggable: true\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     })\r\n//                 ]\r\n//             },\r\n//             listeners: {\r\n//                 contextmenu: <EventListener>((event: MouseEvent) => {\r\n//                     const {target, clientX, clientY} = event;\r\n//                     const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n//                     const menu = widget(\"menu\", {\r\n//                         properties: {\r\n//                             contextual: true\r\n//                         },\r\n//                         slotted: [\r\n//                             widget(\"menuitemgroup\", {\r\n//                                 slotted: [\r\n//                                     widget(\"menuitem\", {\r\n//                                         properties: {\r\n//                                             label: \"Display\"\r\n//                                         },\r\n//                                         listeners: {\r\n//                                             click: () => {\r\n//                                                 console.log(treeItemWidget.getLabel(targetItem));\r\n//                                             }\r\n//                                         }\r\n//                                     }),\r\n//                                     widget(\"menuitem\", {\r\n//                                         properties: {\r\n//                                             label: \"Delete\"\r\n//                                         },\r\n//                                         listeners: {\r\n//                                             click: () => {\r\n//                                                 targetItem.remove();\r\n//                                             }\r\n//                                         }\r\n//                                     })\r\n//                                 ]\r\n//                             }),\r\n//                         ]\r\n//                     });\r\n//                     targetItem.append(menu);\r\n//                     menuWidget.positionContextual(menu, clientX, clientY);\r\n//                     menu.focus({preventScroll: true});\r\n//                     event.preventDefault();\r\n//                 })\r\n//             }\r\n//         }),\r\n//         widget(\"treeitem\", {\r\n//             properties: {\r\n//                 label: \"treeitem 0\",\r\n//                 type: \"parent\",\r\n//                 draggable: true,\r\n//                 disabled: true\r\n//             },\r\n//             slotted: {\r\n//                 group: [\r\n//                     widget(\"treeitemgroup\", {\r\n//                         slotted: [\r\n//                             widget(\"treeitem\", {\r\n//                                 properties: {\r\n//                                     label: \"treeitem 1\",\r\n//                                     type: \"leaf\",\r\n//                                     draggable: true\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     })\r\n//                 ]\r\n//             }\r\n//         }),\r\n//         widget(\"treeitem\", {\r\n//             properties: {\r\n//                 label: \"treeitem 1\",\r\n//                 type: \"leaf\",\r\n//                 draggable: true\r\n//             },\r\n//             slotted: {\r\n//                 content: [\r\n//                     widget(\"toolbar\", {\r\n//                         slotted: [\r\n//                             widget(\"toolbaritem\",  {\r\n//                                 properties: {\r\n//                                     label: \"First item\",\r\n//                                     type: \"button\"\r\n//                                 }\r\n//                             }),\r\n//                             widget(\"toolbaritem\",  {\r\n//                                 properties: {\r\n//                                     label: \"Second item\",\r\n//                                     type: \"checkbox\"\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     })\r\n//                 ]\r\n//             }\r\n//         })\r\n//     ]\r\n// })\r\n// document.body.append(tree);\r\n\r\n// document.body.append(\r\n//     widget(\"toolbar\", {\r\n//         slotted: [\r\n//             widget(\"toolbaritem\",  {\r\n//                 properties: {\r\n//                     label: \"First item\",\r\n//                     type: \"menubutton\"\r\n//                 },\r\n//                 slotted: [\r\n//                     widget(\"menu\", {\r\n//                         slotted: [\r\n//                             widget(\"menuitem\", {\r\n//                                 properties: {\r\n//                                     label: \"MenuItem 1\",\r\n//                                     name: \"MenuItem 1\",\r\n//                                     type: \"checkbox\"\r\n//                                 }\r\n//                             }),\r\n//                             widget(\"menuitem\", {\r\n//                                 properties: {\r\n//                                     label: \"MenuItem 2\",\r\n//                                     name: \"MenuItem 2\",\r\n//                                     type: \"checkbox\"\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     })\r\n//                 ]\r\n//             }),\r\n//             widget(\"toolbaritem\",  {\r\n//                 properties: {\r\n//                     label: \"Second item\",\r\n//                     type: \"checkbox\"\r\n//                 }\r\n//             }),\r\n//             widget(\"toolbaritem\",  {\r\n//                 properties: {\r\n//                     label: \"Third item\",\r\n//                     type: \"checkbox\",\r\n//                     disabled: true,\r\n//                 }\r\n//             }),\r\n//             widget(\"toolbaritem\",  {\r\n//                 properties: {\r\n//                     label: \"Fourth item\",\r\n//                     type: \"checkbox\"\r\n//                 }\r\n//             })\r\n//         ]\r\n//     })\r\n// );\r\n\r\n// document.body.append(\r\n//     widget(\"list\", {\r\n//         slotted: [\r\n//             widget(\"listitemgroup\",  {\r\n//                 slotted: [   \r\n//                     widget(\"listitem\",  {\r\n//                         properties: {\r\n//                             label: \"First item\"\r\n//                         }\r\n//                     })\r\n//                 ]\r\n//             }),\r\n//             widget(\"listitem\",  {\r\n//                 properties: {\r\n//                     label: \"Second item\"\r\n//                 },\r\n//                 slotted: [\r\n//                     widget(\"toolbar\", {\r\n//                         slotted: [\r\n//                             widget(\"toolbaritem\",  {\r\n//                                 properties: {\r\n//                                     label: \"First item\",\r\n//                                     type: \"button\"\r\n//                                 }\r\n//                             }),\r\n//                             widget(\"toolbaritem\",  {\r\n//                                 properties: {\r\n//                                     label: \"Second item\",\r\n//                                     type: \"checkbox\"\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     })\r\n//                 ]\r\n//             }),\r\n//             widget(\"listitem\",  {\r\n//                 properties: {\r\n//                     label: \"Third item\",\r\n//                     disabled: true,\r\n//                 }\r\n//             }),\r\n//             widget(\"listitem\",  {\r\n//                 properties: {\r\n//                     label: \"Fourth item\"\r\n//                 }\r\n//             })\r\n//         ]\r\n//     })\r\n// );\r\n\r\n// document.body.append(\r\n//     widget(\"grid\", {\r\n//         properties: {\r\n//             selectby: \"row\",\r\n//             multisectable: true\r\n//         },\r\n//         slotted: {\r\n//             headers: [\r\n//                 widget(\"gridheader\",  {\r\n//                     slotted: \"First header\"\r\n//                 }),\r\n//                 widget(\"gridheader\",  {\r\n//                     slotted: \"Second header\"\r\n//                 })\r\n//             ],\r\n//             rows: [\r\n//                 widget(\"gridrow\",  {\r\n//                     slotted: [   \r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"First cell\"\r\n//                         }),\r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Second cell\"\r\n//                         })\r\n//                     ]\r\n//                 }),\r\n//                 widget(\"gridrow\",  {\r\n//                     slotted: [   \r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Third cell\"\r\n//                         }),\r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Fourth cell\"\r\n//                         })\r\n//                     ]\r\n//                 }),\r\n//                 widget(\"gridrow\",  {\r\n//                     slotted: [   \r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Fifth cell\"\r\n//                         }),\r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Sixth cell\"\r\n//                         })\r\n//                     ]\r\n//                 }),\r\n//                 widget(\"gridrow\",  {\r\n//                     slotted: [   \r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Heighth cell\"\r\n//                         }),\r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Nineth cell\"\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         }\r\n//     })\r\n// );\r\n\r\n// document.body.append(\r\n//     widget(\"combobox\", {\r\n//         slotted: [\r\n//             widget(\"option\",  {\r\n//                 properties: {\r\n//                     label: \"First option\"\r\n//                 }\r\n//             }),\r\n//             widget(\"option\",  {\r\n//                 properties: {\r\n//                     label: \"Second option\"\r\n//                 }\r\n//             }),\r\n//             widget(\"option\",  {\r\n//                 properties: {\r\n//                     label: \"Third option\",\r\n//                     selected: true\r\n//                 }\r\n//             })\r\n//         ],\r\n//         listeners: {\r\n//             change: (event) => {\r\n//                 const {currentTarget} = event;\r\n//                 const comboBoxTarget = <HTMLElement>currentTarget;\r\n//                 console.log(optionWidget.getLabel(comboBoxWidget.selectedOption(comboBoxTarget)!));\r\n//             }\r\n//         }\r\n//     })\r\n// );\r\n\r\n// const editor = new Editor();\r\n// editor.setup();\r\n\r\n// editor.registerCheckboxAction(\"toggleAdvancedUser\", (_, newValue) => {\r\n//     console.log(`Advanced user is now ${newValue}`);\r\n// }, {hotkey: new HotKey(Key.ARROW_DOWN, KeyModifier.Alt)});\r\n\r\n// editor.registerRadioAction(\"setLayout\", (_, newValue) => {\r\n//     editor.setPair(\"layout\", newValue);\r\n// });\r\n\r\n// editor.registerButtonAction(\"execLayout\", () => {\r\n//     const layout = editor.getPair(\"layout\");\r\n//     console.log(`Layout is ${layout}`);\r\n// }, {hotkey: new HotKey(Key.ARROW_UP, KeyModifier.Alt)});\r\n\r\n\r\n// editor.registerRadioAction(\"selectTest\", (oldValue, newValue) => {\r\n//     console.log(`Test is ${newValue}`);\r\n// }, {value: \"2\", key: \"test\"});\r\n\r\n// document.addEventListener(\"slotchange\", (event) => {\r\n//     console.log(event);\r\n// });\r\n\r\n// setTimeout(() => {\r\n//     const execLayoutToolBarItem = document.querySelector<HTMLEActionElement>(\"e-toolbaritem[name=execLayout]\");\r\n//     if (execLayoutToolBarItem) {\r\n//         editor.addPairListener(\"layout\", (oldValue, newValue) => {\r\n//             if (newValue !== oldValue) {\r\n//                 execLayoutToolBarItem.value = newValue;\r\n//             }\r\n//         });\r\n//     }\r\n// }, 100);\r\n\r\n// const button = element(\"button\", {\r\n//     properties: {\r\n//         textContent: \"Focus\"\r\n//     },\r\n//     listeners: {\r\n//         click: () => {\r\n//             const menuitem = document.querySelector<HTMLEMenuItemElement>(\"e-menuitem#hey\");\r\n//             if (menuitem) {\r\n//                 menuitem.focus();\r\n//             }\r\n//         }\r\n//     }\r\n// });\r\n// document.body.append(button);\r\n// document.body.append(menubar.element);\r\n\r\n// editor.executeCheckboxAction(\"toggleAdvancedUser\", true);\r\n// editor.setCheckboxActionValue(\"toggleAdvancedUser\", false);\r\n\r\n//editor.setRadioActionValue(\"selectTest\", \"2\");\r\n\r\n//editor.executeRadioAction(\"setLayout\", \"other\");\r\nexport async function main() {\r\n    TreeMain();\r\n}","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { optionGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"optiongroup\": OptionGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface OptionGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar optionGroupWidget = new (\r\nWidget({\r\n    name: \"optiongroup\"\r\n})(class OptionGroupWidgetFactoryBase extends WidgetFactory implements OptionGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"optiongroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n}));"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","ModelChangeRecordBase","constructor","init","this","target","changeType","propertyName","oldValue","undefined","newValue","removedIndex","removedItems","ModelNodesList","insertedIndex","insertedItems","sortedIndices","PROPERTY_CHANGE","LIST_REMOVE","LIST_INSERT","LIST_SORT","ModelChangeRecord","items","slice","length","item","index","values","ModelEventBase","type","currentTarget","ModelEventTargetAccessor","setCurrentTarget","event","setTarget","ModelEvent","ModelNodeBase","Map","receiveEvent","callbacks","forEach","callback_i","addEventListener","callback","push","set","removeEventListener","callbackIndex","findIndex","splice","delete","dispatchEvent","super","parentNode","setParent","isCyclicReference","ancestorNode","TypeError","beginChanges","endChanges","getRecords","property","records","record","ModelNodeRecordsAccessor","triggerChange","node","handleRecord","ModelNode","ModelProperty","ModelObjectPropertiesAccessor","getProperty","setProperty","ModelObjectBase","ModelObject","ModelList","item_i","indexOf","sort","compareFunction","indexedItems","map","i","indexedItem_a","indexedItem_b","indexedItem_i","prepend","_items","append","insert","Math","abs","remove","clear","removedItem_i","reference","options","properties","propertiesFilter","childList","subtree","filter","record_i","includes","ModelChangeObserver","WeakMap","observe","references","listener","bind","unobserve","disconnect","str","replace","toLowerCase","AttributeProperty","String","attributeName","defaultValue","observed","observedAttributes","Reflect","Array","isArray","writable","Boolean","hasAttribute","setAttribute","removeAttribute","val","getAttribute","JSON","parse","stringify","Number","parseFloat","CustomElement","elementCtor","name","customElements","define","QueryProperty","propertyKey","selector","getter","withinShadowRoot","shadowRoot","querySelector","fragment","nodes","document","createDocumentFragment","tagName","attributes","dataset","children","listeners","element","createElement","entries","attributeValue","toggleAttribute","elementDataset","keys","datasetEntry_i","from","name_i","listener_i","reactiveElementsMap","reactiveElementsFinalizationRegistry","FinalizationRegistry","heldValue","model","reactiveElement","reactiveElementsMapEntry","reactiveElementsArray","reactiveElementsPropertyObserver","reactiveElement_i","elementRef","react","deref","WeakRef","register","observerOptions","concat","property_i","reactiveChildElementsMap","reactiveChildElementsFinalizationRegistry","list","reactiveChildElement","reactiveChildrenElementsMapEntry","reactiveChildElementsArray","reactiveChildElementsObserver","range","listLength","reactiveChildElements_i","parentRef","mapping","placeholder","parent","firstChild","childrenCount","removeChild","insertedItemsArray","before","removedCount","createRange","removeEndIndex","setStartBefore","setEndAfter","deleteContents","childrenArray","index_i","reactiveChildElements","reactiveChildElementsMapEntry","areAttributesMatching","referenceAttributeType","referenceAttributeName","referenceAttributeValue","RegExp","test","shadowTemplate","HTMLEMenuItemElementBase","HTMLElement","attachShadow","mode","internals","attachInternals","role","content","cloneNode","attributeChangedCallback","ariaChecked","ariaDisabled","ariaExpanded","ariaLabel","connectedCallback","tabIndex","toggle","force","expanded","expand","Event","bubbles","collapse","menu","style","menuStyle","top","itemTop","bottom","itemBottom","left","itemLeft","right","itemRight","getBoundingClientRect","width","menuWidth","height","menuHeight","scrollY","scrollX","window","clientWidth","clientHeight","body","overflowX","overflowY","closestMenu","closest","closestMenuTop","closestMenuLeft","menuComputedStyle","getComputedStyle","paddingTop","paddingBottom","menuPaddingTop","menuPaddingBottom","part","HTMLEMenuItemElement","EMenuItem","assign","label","trigger","slot","tabindex","title","button","checkbox","radio","submenu","ViewBase","setModel","renderLight","renderShadow","render","shadow","replaceChildren","light","View","GridModel","rows","initRows","columns","initColumns","getColumnByName","find","column_i","sortByColumn","column","sortOrder","sortorder","sortTest","row_1","row_2","cell_1","extract","cell_2","localeCompare","sign","GridColumnModel","filters","GridRowModel","id","age","GridViewBase","row","gridElement","setColumnDelegate","delegate","setCellDelegate","getRowElement","getColumnHeaderElement","getColumnCellsElements","querySelectorAll","rel","href","input","selectby","multisectable","contextmenu","click","setSearchFilter","row_i","rowElement","hidden","clearSelection","addDisplayFilter","displayFilters","console","log","removeDisplayFilter","filterIndex","searchFilter","some","filter_i","class","resizable","controls","cell","toString","headers","clientX","clientY","targetHead","targetHeader","contextMenu","contextual","columnHeaderElement","maxWidth","cell_i","reduce","max","focus","removeProperty","targetItem","checked","positionContextual","preventScroll","preventDefault","HTMLInputElement","matches","targetColumn","GridView","MenuModel","MenuItemModel","MenuViewBase","menuitem","MenuView","TreeModel","sortFunction","childItems","subtreeItems","item_a","item_b","flatMap","treeItem_i","of","getItemByUri","uri","itemsCount","uriLength","itemUri","itemUriLength","startsWith","flattenedInsertedItems","insertedItem_i","flattenedRemovedItems","TreeItemModelList","count","removedItemsGroups","TreeItemModel","group","list_i","children_i","child_i","level","parentItem","TreeViewBase","treeElement","draggable","treeItemElement","dragstart","drop","focusin","focusout","itemContentDelegate","textContent","itemToolbarDelegate","itemMenuDelegate","selectedItems","activeItem","toolbar","posinset","treeitem","oldUri","dragImageElement","span","targetTree","dataTransfer","selectedElements","selectedCount","selectedUris","element_i","uri_i","_","uris","uri_j","selectedUrisString","join","lastUri","lastItem","dropEffect","setData","dragImage","setDragImage","targetUri","targetItemModel","transferedUris","getData","split","transferedItems","targetType","targetParentItem","targetList","sameLabelIndex","item_j","confirm","copyWithin","newElements","beginSelection","selected","endSelection","relatedTarget","contains","relatedPosition","compareDocumentPosition","Node","DOCUMENT_POSITION_DISCONNECTED","DOCUMENT_POSITION_PRECEDING","itemToolbar","TreeView","MyTreeItemModelList","show","hide","display","result","MyTreeItemModel","childCount","visibility","Key","KeyModifier","MouseButton","HTMLEActionElementBase","disabled","enable","disable","HTMLEGridCellElementBase","HTMLEGridCellElement","HTMLEGridRowGroupElementBase","assignedElements","HTMLEGridRowGroupElement","HTMLEMenuItemGroupElementBase","toggleTimeouts","HTMLEMenuItemGroupElement","radios","HTMLEMenuElementBase","createTreeWalker","NodeFilter","SHOW_ELEMENT","activeIndex","x","y","firstItem","walker","currentNode","root","FILTER_ACCEPT","FILTER_SKIP","FILTER_REJECT","lastChild","previousNode","nextNode","async","delay","Promise","resolve","reject","timeout","setTimeout","clearTimeout","then","radio_i","nearestItem","error","stopPropagation","composedPath","target_i","HTMLEMenuElement","blur","catch","intersectsWithMouse","containsRelatedTarget","HTMLEGridRowElementBase","cells","HTMLEGridCellCollection","slotName","HTMLEGridRowElement","HTMLEGridBodyElement","namedItem","HTMLEGridRowCollection","HTMLEGridBodyElementBase","HTMLEGridElementBase","activeCell","activeRow","head","selectedCells","selectedRows","to","fromIndex","toIndex","min","position","DOCUMENT_POSITION_FOLLOWING","nextVisibleRow","previousVisibleRow","selectedCell_i","selectedRow_i","active","cellsWalker","rowsWalker","closestRow","closestRowCells","cellIndex","previousRow","previousRowCells","nextRow","nextRowCells","ctrlKey","shiftKey","targetCell","lastSelectedCell","targetRow","lastSelectedRow","firstRow","firstCell","lastRow","lastCell","previousCell","nextCell","topCell","bottomCell","HTMLEGridHeadElementBase","HTMLEMenuBarElementBase","previousSibling","nextSibling","Element","isExpanded","HTMLEMenuButtonElementBase","iconPart","HTMLEMenuButtonElement","HTMLEToolBarItemElementBase","HTMLEToolBarItemElement","EToolBarItem","menubutton","select","HTMLEToolBarItemGroupElementBase","wasExpandedOnMouseDown","HTMLEToolBarItemGroupElement","HTMLEToolBarElementBase","pressed","previousItem","nextItem","HTMLEToolBarElement","HTMLETabElementBase","panel","getRootNode","HTMLETabElement","HTMLETabListElementBase","tabs","activeTab","selectedTab","tabToSelect","tab","targetTab","tab_i","HTMLETabPanelElementBase","HTMLETreeItemElementBase","labelPart","HTMLETreeItemElement","HTMLETreeItemGroupElementBase","HTMLETreeItemGroupElement","HTMLETreeElementBase","getElementsByTagName","dropTargetItem","nextVisibleItem","previousVisibleItem","selectedItem_i","droptarget","relatedTargetRoot","relatedTargetHost","ShadowRoot","host","HTMLEListItemElementBase","badge","HTMLSpanElement","HTMLEListItemElement","HTMLEListItemGroupElementBase","HTMLEListItemGroupElement","HTMLEListElementBase","lastSelectedItem","HTMLEDraggableElementBase","referee","disconnectedCallback","thisRefIndex","getReference","HTMLEDraggableElement","HTMLEDragzoneElementBase","draggables","selectedDraggables","selectDraggable","unselectDraggable","elem","thisSelectedDraggable","dragged","thisDraggedDraggable","targetIndex","firstIndex","direction","startRangeIndex","endRangeIndex","thisDraggable","HTMLEDragzoneElement","HTMLEDropzoneElementBase","droptest","appendAreaPart","removeDraggables","dragovered","dropIndex","dragzoneId","dragzone","getElementById","selectedDraggable","HTMLEDropzoneElement","addDraggables","placeholderPart","dataTransferSuccess","newDraggables","insertionPosition","multiple","newDraggable","insertAdjacentElement","appendChild","replaceChild","CustomEvent","detail","action","once","predicate","toRemove","atPosition","HTMLEDialogElementBase","handleEvent","cancel","open","close","HTMLEOptionElementBase","HTMLEOptionElement","HTMLEOptionGroupElementBase","HTMLEOptionGroupElement","HTMLESelectElementBase","formAssociated","activeOption","selectedOption","optionToSelect","option_i","option","setFormValue","box","optionsStyle","targetOption","previousOption","nextOption","firstOption","lastOption","keyLength","keyCode","charCodeAt","matchingOption","HTMLESeparatorElementBase","HTMLEHandleElementBase","pointerId","releasePointerCapture","setPointerCapture","targetComputedStyle","movementX","movementY","rectWidth","rectHeight","outerElement","parentElement","outerRectLeft","outerRectRight","outerRectTop","outerRectBottom","getPropertyValue","newLeft","trunc","newTop","HTMLEHeightSashElementBase","rootNode","requestAnimationFrame","growdir","newHeight","computedNewHeight","HTMLEImportElementBase","src","outerHTML","fetch","response","ok","text","Error","statusText","barShadowTemplate","circleShadowTemplate","HTMLELoaderElementBase","promise","finally","commonStyle","barStyle","circleStyle","HTMLEWidthSashElementBase","setWidth","newWidth","slotsMap","slotsObserver","MutationObserver","mutationsList","mutation","slotReferences","slotRef_i","widget","slottedCallback","widgetsMap","attributesObserver","WidgetFactory","create","Proxy","apply","thisArg","argumentsList","observedSlots","slotName_i","slotElement","slot_i","slotReference","attributeFilter","attributeOldValue","widgets","Widget","menuItemWidget","hasIcon","hasArrow","classList","keyshortcut","add","setKeyShortcut","setChecked","setExpanded","setType","setLabel","setName","setValue","setDisabled","hasChildMenu","childNodes","childNode_i","getMenu","getKeyShortcut","keyshortcutsPart","after","getLabel","getType","types","type_i","typesFeatures","iconPartTemplate","arrowPartTemplate","oldType","arrowPart","getValue","getName","getChecked","getDisabled","getExpanded","menubar","setContextual","setPosition","getContextual","menuitem_i","targetMenu","treeItemWidget","setTitle","setDraggable","setSelected","getTitle","setPosInSet","getPosInSet","posInSet","e","setActive","getActive","setDropTarget","getDropTarget","getDraggable","getSelected","setLevel","getLevel","parseInt","tree","setMultiSelectable","getMultiSelectable","closestItem","listItemWidget","toolbarItemWidget","setPressed","getPressed","setOrientation","getOrientation","targetToolbar","targets","pointerMovements","onCaptureFlags","queuedPointerCallbacks","sash","growDir","setControls","setGrowDir","getGrowDir","getControls","sashTarget","pointerMoveCallback","pointerMovement","setHeight","gridCellWidget","setHeaders","getHeaders","gridRowWidget","grid","setSelectBy","getSelectBy","targetGrid","multiselectable","scope","header","optionWidget","combobox","targetCombobox","addedNodes","main","gridView","Date","getFullYear","treeModel","MyTreeView","iconed","visibilityItem","activeItemElement","selectedItemsList","editItem","dialog","method","for","targetDialog","returnValue","form","formData","FormData","showModal","treeView","TreeMain"],"sourceRoot":""}