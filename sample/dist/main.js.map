{"version":3,"file":"main.js","mappings":"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","sources":["webpack://main/webpack/bootstrap","webpack://main/webpack/runtime/define property getters","webpack://main/webpack/runtime/hasOwnProperty shorthand","webpack://main/webpack/runtime/make namespace object","webpack://main/./src/models/Model.ts","webpack://main/./src/elements/Snippets.ts","webpack://main/./src/elements/Element.ts","webpack://main/./src/elements/containers/menus/MenuItem.ts","webpack://main/./src/views/View.ts","webpack://main/./src/views/GridView.ts","webpack://main/./src/views/TreeView.ts","webpack://main/./src/Input.ts","webpack://main/./src/elements/containers/grid/GridCell.ts","webpack://main/./src/elements/containers/grid/GridBody.ts","webpack://main/./src/elements/containers/grid/GridRow.ts","webpack://main/./src/elements/containers/grid/GridRowGroup.ts","webpack://main/./src/elements/containers/grid/Grid.ts","webpack://main/./src/elements/containers/grid/GridHead.ts","webpack://main/./src/elements/containers/menus/MenuItemGroup.ts","webpack://main/./src/elements/containers/menus/Menu.ts","webpack://main/./src/elements/containers/menus/MenuBar.ts","webpack://main/./src/elements/containers/menus/MenuButton.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItem.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItemGroup.ts","webpack://main/./src/elements/containers/toolbars/ToolBar.ts","webpack://main/./src/elements/containers/status/StatusItem.ts","webpack://main/./src/elements/containers/status/StatusItemGroup.ts","webpack://main/./src/elements/containers/status/StatusBar.ts","webpack://main/./src/elements/containers/tabs/Tab.ts","webpack://main/./src/elements/containers/tabs/TabList.ts","webpack://main/./src/elements/containers/tabs/TabPanel.ts","webpack://main/./src/elements/containers/trees/TreeItem.ts","webpack://main/./src/elements/containers/trees/TreeItemGroup.ts","webpack://main/./src/elements/containers/trees/Tree.ts","webpack://main/./src/elements/containers/lists/ListItem.ts","webpack://main/./src/elements/containers/lists/ListItemGroup.ts","webpack://main/./src/elements/containers/lists/List.ts","webpack://main/./src/elements/controls/draggable/Draggable.ts","webpack://main/./src/elements/controls/draggable/Dragzone.ts","webpack://main/./src/elements/controls/draggable/Dropzone.ts","webpack://main/./src/elements/controls/dialogs/Dialog.ts","webpack://main/./src/elements/controls/forms/Option.ts","webpack://main/./src/elements/controls/forms/OptionGroup.ts","webpack://main/./src/elements/controls/forms/Select.ts","webpack://main/./src/elements/misc/Separator.ts","webpack://main/./src/elements/misc/ToolTip.ts","webpack://main/./src/elements/misc/Handle.ts","webpack://main/./src/elements/misc/HeightSash.ts","webpack://main/./src/elements/misc/Import.ts","webpack://main/./src/elements/misc/Loader.ts","webpack://main/./src/elements/misc/WidthSash.ts","webpack://main/./src/observers/AttributeMixinsObserver.ts","webpack://main/./src/views/widgets/Widget.ts","webpack://main/./src/views/widgets/SeparatorWidget.ts","webpack://main/./src/views/widgets/menu/MenuItemWidget.ts","webpack://main/./src/views/widgets/menu/MenuBarWidget.ts","webpack://main/./src/views/widgets/menu/MenuWidget.ts","webpack://main/./src/views/widgets/menu/MenuItemGroupWidget.ts","webpack://main/./src/views/widgets/tree/TreeItemWidget.ts","webpack://main/./src/views/widgets/tree/TreeWidget.ts","webpack://main/./src/views/widgets/tree/TreeItemGroupWidget.ts","webpack://main/./src/views/widgets/list/ListItemWidget.ts","webpack://main/./src/views/widgets/list/ListWidget.ts","webpack://main/./src/views/widgets/list/ListItemGroupWidget.ts","webpack://main/./src/views/widgets/toolbar/ToolBarItemWidget.ts","webpack://main/./src/views/widgets/toolbar/ToolBarWidget.ts","webpack://main/./src/views/widgets/toolbar/ToolBarItemGroupWidget.ts","webpack://main/./src/views/widgets/WidthSashWidget.ts","webpack://main/./src/views/widgets/HeightSashWidget.ts","webpack://main/./src/views/widgets/grid/GridCellWidget.ts","webpack://main/./src/views/widgets/grid/GridRowWidget.ts","webpack://main/./src/views/widgets/grid/GridWidget.ts","webpack://main/./src/views/widgets/grid/GridBodyWidget.ts","webpack://main/./src/views/widgets/grid/GridHeadWidget.ts","webpack://main/./src/views/widgets/grid/GridHeaderWidget.ts","webpack://main/./src/views/widgets/combobox/OptionWidget.ts","webpack://main/./src/views/widgets/combobox/ComboBoxWidget.ts","webpack://main/./src/views/widgets/combobox/OptionGroupWidget.ts","webpack://main/./sample/main.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export { ModelChangeRecord };\r\nexport { ModelEvent };\r\nexport { ModelNode };\r\nexport { ModelObject };\r\nexport { ModelProperty };\r\nexport { ModelList };\r\nexport { ModelChangeObserverOptions };\r\nexport { ModelChangeObserver };\r\n\r\ninterface ModelChangeRecordConstructor {\r\n    prototype: ModelChangeRecord;\r\n    new(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ): ModelChangeRecord;\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\ninterface ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly changeType: number;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\nclass ModelChangeRecordBase implements ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList;\r\n    readonly changeType: number;\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n\r\n    constructor(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ) {\r\n        this.target = init.target;\r\n        this.changeType = init.changeType;\r\n        this.propertyName = init.propertyName ?? null;\r\n        this.oldValue = init.oldValue ?? undefined;\r\n        this.newValue = init.newValue ?? undefined;\r\n        this.removedIndex = init.removedIndex ?? 0;\r\n        this.removedItems = new ModelNodesList(init.removedItems ?? []);\r\n        this.insertedIndex = init.insertedIndex ?? 0;\r\n        this.insertedItems = new ModelNodesList(init.insertedItems ?? []);\r\n        this.sortedIndices = init.sortedIndices ?? [];\r\n    }\r\n\r\n    static get PROPERTY_CHANGE(): number {\r\n        return 1;\r\n    }\r\n\r\n    static get LIST_REMOVE(): number {\r\n        return 2;\r\n    }\r\n\r\n    static get LIST_INSERT(): number {\r\n        return 3;\r\n    }\r\n\r\n    static get LIST_SORT(): number {\r\n        return 4;\r\n    }\r\n\r\n    get PROPERTY_CHANGE(): number {\r\n        return ModelChangeRecordBase.PROPERTY_CHANGE;\r\n    }\r\n\r\n    get LIST_REMOVE(): number {\r\n        return ModelChangeRecordBase.LIST_REMOVE;\r\n    }\r\n\r\n    get LIST_INSERT(): number {\r\n        return ModelChangeRecordBase.LIST_INSERT;\r\n    }\r\n\r\n    get LIST_SORT(): number {\r\n        return ModelChangeRecordBase.LIST_SORT;\r\n    }\r\n}\r\n\r\nvar ModelChangeRecord: ModelChangeRecordConstructor = ModelChangeRecordBase;\r\n\r\ninterface ModelNodesListConstructor {\r\n    prototype: ModelNodesList;\r\n    new(items: any[]): ModelNodesList;\r\n}\r\n\r\ninterface ModelNodesList {\r\n    get length(): number;\r\n    item(index: number): ModelNode | null;\r\n    values(): IterableIterator<ModelNode>;\r\n}\r\n\r\nclass ModelNodesListBase implements ModelNodesList {\r\n    #items: ModelNode[];\r\n\r\n    constructor(items: ModelNode[]) {\r\n        this.#items = items.slice();\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    item(index: number): ModelNode | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    values(): IterableIterator<ModelNode> {\r\n        return this.#items.values();\r\n    }\r\n}\r\n\r\nvar ModelNodesList: ModelNodesListConstructor = ModelNodesListBase;\r\n\r\ninterface ModelEventConstructor {\r\n    prototype: ModelEvent;\r\n    new(type: string): ModelEvent;\r\n}\r\n\r\ninterface ModelEvent {\r\n    readonly type: string;\r\n    readonly currentTarget: ModelEventTarget | null;\r\n    readonly target: ModelEventTarget | null;\r\n}\r\n\r\nclass ModelEventBase implements ModelEvent {\r\n    readonly type: string;\r\n\r\n    #currentTarget: ModelEventTarget | null;\r\n    #target: ModelEventTarget | null;\r\n\r\n    constructor(type: string) {\r\n        this.type = type;\r\n        this.#currentTarget = null;\r\n        this.#target = null;\r\n    }\r\n\r\n    get currentTarget(): ModelEventTarget | null {\r\n        return this.#currentTarget;\r\n    }\r\n\r\n    get target(): ModelEventTarget | null {\r\n        return this.#target;\r\n    }\r\n\r\n    static ModelEventTargetAccessor? = new class ModelEventTargetAccessor {\r\n        setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#currentTarget = currentTarget;\r\n            }\r\n        }\r\n\r\n        setTarget(event: ModelEvent, target: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#target = target;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface ModelEventTargetAccessor {\r\n    setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void;\r\n    setTarget(event: ModelEvent, target: ModelEventTarget): void;\r\n}\r\n\r\nvar ModelEventTargetAccessor: ModelEventTargetAccessor = ModelEventBase.ModelEventTargetAccessor!;\r\ndelete ModelEventBase.ModelEventTargetAccessor;\r\n\r\nvar ModelEvent: ModelEventConstructor = ModelEventBase;\r\n\r\ninterface ModelEventTargetConstructor {\r\n    prototype: ModelEventTarget;\r\n    new(): ModelEventTarget;\r\n}\r\n\r\ninterface ModelEventTarget {\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    dispatchEvent(event: ModelEvent): void;\r\n    receiveEvent(event: ModelEvent): void;\r\n}\r\n\r\nclass ModelEventTargetBase implements ModelEventTarget {\r\n    #callbacks: Map<string, ((event: ModelEvent) => void)[]>;\r\n\r\n    constructor() {\r\n        this.#callbacks = new Map();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        const {type} = event;\r\n        const callbacks = this.#callbacks.get(type);\r\n        ModelEventTargetAccessor.setCurrentTarget(event, this);\r\n        if (callbacks) {\r\n            callbacks.forEach((callback_i) => {\r\n                callback_i(event);\r\n            });\r\n        }\r\n    }\r\n\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            callbacks.push(callback);\r\n        }\r\n        else {\r\n            this.#callbacks.set(type, [callback]);\r\n        }\r\n    }\r\n\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            const callbackIndex = callbacks.findIndex(\r\n                callback_i => callback_i == callback\r\n            );\r\n            if (callbackIndex > -1) {\r\n                callbacks.splice(callbackIndex, 1);\r\n            }\r\n            if (callbacks.length == 0) {\r\n                this.#callbacks.delete(type);\r\n            }\r\n        }\r\n    }\r\n\r\n    dispatchEvent(event: ModelEvent): void {\r\n        ModelEventTargetAccessor.setTarget(event, this);\r\n        this.receiveEvent(event);\r\n    }\r\n}\r\n\r\nvar ModelEventTarget: ModelEventTargetConstructor = ModelEventTargetBase;\r\n\r\ninterface ModelNodeConstructor {\r\n    prototype: ModelNode;\r\n    new(): ModelNode;\r\n}\r\n\r\ninterface ModelNode extends ModelEventTarget {\r\n    readonly parentNode: ModelNode | null;\r\n    setParent(parentNode: ModelNode | null): void;\r\n    getRecords(): ModelChangeRecord[];\r\n    beginChanges(): void;\r\n    endChanges(): void;\r\n}\r\n\r\ninterface ModelNodeRecordsAccessor {\r\n    triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void;\r\n    handleRecord(node: ModelNode, record: ModelChangeRecord): void;\r\n}\r\n\r\nclass ModelNodeBase extends ModelEventTargetBase implements ModelNode {\r\n    #parentNode: ModelNode | null;\r\n    #records: ModelChangeRecord[];\r\n    #isRecording: boolean;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#parentNode = null;\r\n        this.#records = [];\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    get parentNode(): ModelNode | null {\r\n        return this.#parentNode;\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        if (parentNode !== null) {\r\n            let isCyclicReference = parentNode == this;\r\n            let {parentNode: ancestorNode} = parentNode;\r\n            while (!isCyclicReference && ancestorNode !== null) {\r\n                ({parentNode: ancestorNode} = ancestorNode);\r\n                isCyclicReference = ancestorNode == this;\r\n            }\r\n            if (!isCyclicReference) {\r\n                this.#parentNode = parentNode;\r\n            }\r\n            else {\r\n                throw new TypeError(\"Failed to set parent on ModelNode: circular reference detected in the hierarchy.\");\r\n            }\r\n        }\r\n        else {\r\n            this.#parentNode = null;\r\n        }\r\n    }\r\n    \r\n    beginChanges(): void {\r\n        this.#isRecording = true;\r\n    }\r\n\r\n    endChanges(): void {\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        this.#records.splice(0);\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    getRecords(): ModelChangeRecord[] {\r\n        return this.#records.slice();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        super.receiveEvent(event);\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            parentNode.receiveEvent(event);\r\n        }\r\n    }\r\n\r\n    #triggerChange(property: string, oldValue: any, newValue: any): void {\r\n        const records = this.#records;\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.PROPERTY_CHANGE,\r\n            propertyName: property,\r\n            oldValue, newValue\r\n        });\r\n        records.push(record);\r\n        if (!this.#isRecording) {\r\n            this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n            records.splice(0);\r\n        }\r\n    }\r\n\r\n    #handleRecord(record: ModelChangeRecord): void {\r\n        this.#records.push(record);\r\n        if (!this.#isRecording) {\r\n            this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n            this.#records.splice(0);\r\n        }\r\n    }\r\n\r\n    static ModelNodeRecordsAccessor? = new class ModelNodeRecordsAccessor {\r\n        triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#triggerChange(property, oldValue, newValue);\r\n            }\r\n        }\r\n\r\n        handleRecord(node: ModelNode, record: ModelChangeRecord): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#handleRecord(record);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelNodeRecordsAccessor: ModelNodeRecordsAccessor = ModelNodeBase.ModelNodeRecordsAccessor!;\r\ndelete ModelNodeBase.ModelNodeRecordsAccessor;\r\n\r\nvar ModelNode: ModelNodeConstructor = ModelNodeBase;\r\n\r\ninterface ModelPropertyDecorator {\r\n    (): <Model extends ModelObject>(target: Model, property: string) => void;\r\n}\r\n\r\nconst ModelProperty: ModelPropertyDecorator = function() {\r\n    return (\r\n        target: ModelObject, property: string\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const setter = function(this: ModelObject, value: any) {\r\n            const oldValue = ModelObjectPropertiesAccessor.getProperty(this, property);\r\n            ModelObjectPropertiesAccessor.setProperty(this, property, value);\r\n            if (value !== oldValue) {\r\n                ModelNodeRecordsAccessor.triggerChange(this, property, oldValue, value);\r\n            }\r\n            return true;\r\n        };\r\n        const getter = function(this: ModelObject) {\r\n            return ModelObjectPropertiesAccessor.getProperty(this, property);\r\n        };\r\n        Object.defineProperty(prototype, property, {\r\n            set: setter,\r\n            get: getter,\r\n            enumerable: true\r\n        });\r\n    }\r\n}\r\n\r\ninterface ModelObjectConstructor {\r\n    prototype: ModelObject;\r\n    new(): ModelObject;\r\n}\r\n\r\ninterface ModelObject extends ModelNode {}\r\n\r\ninterface ModelObjectPropertiesAccessor {\r\n    setProperty(node: ModelNode, property: string, value: any): void;\r\n    getProperty(node: ModelNode, property: string,): any;\r\n}\r\n\r\nclass ModelObjectBase extends ModelNodeBase implements ModelObject {\r\n    #properties: Map<string, any>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#properties = new Map();\r\n    }\r\n\r\n    static ModelObjectPropertiesAccessor? = new class ModelPropertiesAccessor {\r\n        setProperty(node: ModelObject, property: string, value: any): void {\r\n            if (node instanceof ModelObjectBase) {\r\n                node.#properties.set(property, value);\r\n            }\r\n        }\r\n\r\n        getProperty(node: ModelObject, property: string): any {\r\n            if (node instanceof ModelObjectBase) {\r\n                return node.#properties.get(property);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelObjectPropertiesAccessor: ModelObjectPropertiesAccessor = ModelObjectBase.ModelObjectPropertiesAccessor!;\r\ndelete ModelObjectBase.ModelObjectPropertiesAccessor;\r\n\r\nvar ModelObject: ModelObjectConstructor = ModelObjectBase;\r\n\r\ninterface ModelListConstructor {\r\n    prototype: ModelList;\r\n    new<Model extends ModelNode>(): ModelList<Model>;\r\n    new<Model extends ModelNode>(items: Model[]): ModelList<Model>;\r\n}\r\n\r\ninterface ModelList<Model extends ModelNode = ModelNode> extends ModelNode {\r\n    readonly parentNode: ModelNode | null;\r\n    readonly length: number;\r\n    index(item: Model): number;\r\n    get(index: number): Model | null;\r\n    values(): IterableIterator<Model>;\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void;\r\n    insert(index: number, ...items: Model[]): void;\r\n    prepend(...items: Model[]): void;\r\n    append(...items: Model[]): void;\r\n    remove(item: Model): void;\r\n    clear(): void;\r\n}\r\n\r\nclass ModelListBase<Model extends ModelNode = ModelNode> extends ModelNodeBase implements ModelList<Model> {\r\n    #items: Model[];\r\n\r\n    constructor()\r\n    constructor(items: Model[])\r\n    constructor(items?: Model[]) {\r\n        super();\r\n        this.#items = items?.slice() ?? [];\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        super.setParent(parentNode);\r\n        this.#items.forEach((item_i) => {\r\n            item_i.setParent(parentNode);\r\n        });\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    get(index: number): Model | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    index(item: Model): number {\r\n        return this.#items.indexOf(item);\r\n    }\r\n\r\n    values(): IterableIterator<Model> {\r\n        return this.#items.values();\r\n    }\r\n\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void {\r\n        const items = this.#items;\r\n        const indexedItems = items.map(\r\n            (item_i, i) => {\r\n                return {\r\n                    item: item_i,\r\n                    index: i\r\n                };\r\n            }\r\n        );\r\n        indexedItems.sort(\r\n            (indexedItem_a, indexedItem_b) => {\r\n                return compareFunction(\r\n                    indexedItem_a.item, indexedItem_b.item\r\n                )\r\n            }\r\n        );\r\n        this.#items = indexedItems.map(indexedItem_i => indexedItem_i.item);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_SORT,\r\n            sortedIndices: indexedItems.map(indexedItem_i => indexedItem_i.index)\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    prepend(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.splice(0, 0, ...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: 0,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    append(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.push(...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: length,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    insert(index: number, ...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const positiveIndex = Math.abs(index);\r\n        if (positiveIndex <= length) {\r\n            if (index >= 0) {\r\n                const {parentNode} = this;\r\n                items.forEach(item_i => {\r\n                    item_i.setParent(parentNode);\r\n                });\r\n                if (index < length) {\r\n                    _items.splice(index, 0, ...items);\r\n                }\r\n                else {\r\n                    _items.push(...items);\r\n                }\r\n            }\r\n            else if (index < 0) {\r\n                index = length - index;\r\n                const {parentNode} = this;\r\n                if (parentNode) {\r\n                    items.forEach(item_i => {\r\n                        item_i.setParent(parentNode);\r\n                    });\r\n                }\r\n                _items.splice(index, 0, ...items);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_INSERT,\r\n                insertedIndex: index,\r\n                insertedItems: items.slice()\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    remove(item: Model): void {\r\n        const _items = this.#items;\r\n        const index = _items.indexOf(item);\r\n        if (index > -1) {\r\n            const item = _items.splice(index, 1)[0];\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                item.setParent(null);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: index,\r\n                removedItems: [item]\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    clear(): void {\r\n        const items = this.#items;\r\n        const {length} = items;\r\n        if (length > 0) {\r\n            const removedItems = items.splice(0);\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                removedItems.forEach((removedItem_i) => {\r\n                    removedItem_i.setParent(null);\r\n                });\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: 0,\r\n                removedItems: removedItems\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n};\r\n\r\nvar ModelList: ModelListConstructor = ModelListBase!;\r\n\r\ninterface ModelChangeObserverConstructor {\r\n    prototype: ModelChangeObserver;\r\n    new(callback: (records: ModelChangeRecord[]) => void): ModelChangeObserver;\r\n}\r\n\r\ninterface ModelChangeObserver {\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void;\r\n    unobserve(node: ModelNode): void;\r\n    disconnect(): void;\r\n}\r\n\r\ntype ModelChangeObserverOptions = {\r\n    properties?: boolean;\r\n    propertiesFilter?: string[];\r\n    childList?: boolean;\r\n    subtree?: boolean;\r\n}\r\n\r\nclass ModelChangeObserverBase implements ModelChangeObserver {\r\n    #callback: (records: ModelChangeRecord[]) => void;\r\n    #records: ModelChangeRecord[];\r\n    #disconnected: boolean;\r\n\r\n    #references: WeakMap<ModelNode, {\r\n        listener: (event: ModelEvent) => void,\r\n        options: ModelChangeObserverOptions\r\n    }>;\r\n\r\n    constructor(callback: (records: ModelChangeRecord[]) => void) {\r\n        this.#callback = callback;\r\n        this.#records = [];\r\n        this.#disconnected = false;\r\n        this.#references = new WeakMap();\r\n    }\r\n\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void {\r\n        this.#disconnected = false;\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (!reference) {\r\n            const listener = this.#handleModelEvent.bind(this);\r\n            node.addEventListener(\"modelchange\", listener);\r\n            reference = {listener, options};\r\n            references.set(node, reference);\r\n        }\r\n        else {\r\n            references.set(node, reference);\r\n        }\r\n    }\r\n\r\n    unobserve(node: ModelNode): void {\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (reference) {\r\n            const {listener} = reference;\r\n            node.removeEventListener(\"modelchange\", listener);\r\n        }\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#records.splice(0);\r\n        this.#disconnected = true;\r\n    }\r\n\r\n    #trigger(): void {\r\n        const records = this.#records.splice(0);\r\n        if (records.length > 0) {\r\n            this.#callback(records);\r\n        }\r\n    }\r\n\r\n    #handleModelEvent(event: ModelEvent): void {\r\n        if (!this.#disconnected) {\r\n            const {target, currentTarget} = event;\r\n            const reference = this.#references.get(<ModelNode>currentTarget);\r\n            if (reference) {\r\n                const {options} = reference;\r\n                const {properties, propertiesFilter, childList, subtree} = options;\r\n                if (subtree) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n                else if (target == currentTarget) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelChangeObserver: ModelChangeObserverConstructor = ModelChangeObserverBase;","\r\nexport { snakeToCamel };\r\nexport { camelToSnake };\r\nexport { trainToCamel };\r\nexport { camelToTrain };\r\n\r\nfunction snakeToCamel(str: string) {\r\n  return str.split('_').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToSnake(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '_').toLowerCase();\r\n}\r\n\r\nfunction trainToCamel(str: string) {\r\n  return str.split('-').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToTrain(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '-').toLowerCase();\r\n}","import { ModelList, ModelNode, ModelChangeRecord, ModelChangeObserver, ModelChangeObserverOptions } from \"../models/Model\";\r\nimport { camelToTrain } from \"./Snippets\";\r\n\r\nexport { CustomElement };\r\nexport { ReactiveChildElements };\r\nexport { QueryProperty };\r\nexport { QueryAllProperty };\r\nexport { AttributeProperty };\r\nexport { reactiveElement };\r\nexport { revokeReactiveElement };\r\nexport { reactiveChildElements };\r\nexport { revokeReactiveChildElements };\r\nexport { element };\r\nexport { fragment };\r\nexport { textNode };\r\nexport { AttributeMutationMixin };\r\nexport { AttributeType };\r\nexport { areAttributesMatching };\r\nexport { AttributeMutationMixinBase };\r\nexport { trimMultilineIndent };\r\nexport { Stylesheet };\r\n\r\nexport { reactiveElementsMap };\r\n\r\ninterface AttributePropertyDecorator {\r\n    (\r\n        init: {\r\n            type: typeof String;\r\n            observed?: boolean;\r\n            defaultValue?: string | null;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Number;\r\n            observed?: boolean;\r\n            defaultValue?: number | null;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Boolean;\r\n            observed?: boolean;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Object;\r\n            observed?: boolean;\r\n            defaultValue?: any | null;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n}\r\n\r\nconst AttributeProperty: AttributePropertyDecorator = function(\r\n    init: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Object;\r\n        observed?: boolean;\r\n        defaultValue?: string | number | any | null;\r\n        name?: string;\r\n    }\r\n) {\r\n    return <E extends HTMLElement>(\r\n        target: E, property: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(property);\r\n        const {defaultValue = null, observed = false, name = camelToTrain(propertyName)} = init;\r\n        if (observed) {\r\n            const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n            if (Array.isArray(observedAttributes)) {\r\n                observedAttributes.push(name);\r\n            }\r\n            else {\r\n                Object.defineProperty(\r\n                    constructor, \"observedAttributes\", {\r\n                        value: [name],\r\n                        writable: false\r\n                    }\r\n                );\r\n            }\r\n        }\r\n        const {type} = init;\r\n        switch (type) {\r\n            case Boolean: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        return this.hasAttribute(name);\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value) {\r\n                            this.setAttribute(name, \"\");\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Object: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(name);\r\n                        return (val !== null) ? JSON.parse(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(name, JSON.stringify(value));\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Number: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(name);\r\n                        return (val !== null) ? parseFloat(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(name, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case String:\r\n            default: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(name);\r\n                        return (val !== null) ? val : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(name, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n    \r\nfunction Stylesheet(text: string): CSSStyleSheet {\r\n    const stylesheet = new CSSStyleSheet();\r\n    (stylesheet as any).replaceSync(text);\r\n    return stylesheet;\r\n}\r\n\r\nfunction trimMultilineIndent(text: string): string {\r\n    const newlineIndex = text.indexOf(\"\\n\");\r\n    text = text.substring(newlineIndex + 1);\r\n    const indentMatch = text.match(/^[\\s]*/);\r\n    if (indentMatch) {\r\n        const indent = text.substring(0, indentMatch[0].length);\r\n        text = text.replaceAll(indent, \"\").trimEnd();\r\n    }\r\n    return text;\r\n}\r\n\r\ninterface CustomElementDecorator {\r\n    (init: {\r\n        name: string;\r\n        options?: ElementDefinitionOptions\r\n    }): <C extends CustomElementConstructor>(elementCtor: C) => C;\r\n}\r\n\r\nconst CustomElement: CustomElementDecorator = function(init: {\r\n    name: string;\r\n    options?: ElementDefinitionOptions\r\n}) {\r\n    return <C extends CustomElementConstructor>(\r\n        elementCtor: C\r\n    ) => {\r\n        const {name, options} = init;\r\n        if (!customElements.get(name)) {\r\n            customElements.define(\r\n                name,\r\n                elementCtor,\r\n                options\r\n            );\r\n        }\r\n        return elementCtor;\r\n    }\r\n}\r\n\r\ninterface QueryPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryProperty: QueryPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(propertyKey);\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return this.shadowRoot!.querySelector(selector);\r\n        } : function(this: HTMLElement) {\r\n            return this.querySelector(selector);\r\n        }\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\ninterface QueryAllPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryAllProperty: QueryAllPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(propertyKey);\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return Array.from(this.shadowRoot!.querySelectorAll(selector));\r\n        } : function(this: HTMLElement) {\r\n            return Array.from(this.querySelectorAll(selector));\r\n        };\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\nfunction fragment(...nodes: (Node | string)[]): DocumentFragment {\r\n    const fragment = document.createDocumentFragment();\r\n    fragment.append(...nodes);\r\n    return fragment;\r\n}\r\n\r\nfunction textNode(text: string): Node {\r\n    return document.createTextNode(text);\r\n}\r\n\r\ninterface HTMLElementInit {\r\n    options?: ElementCreationOptions,\r\n    attributes?: {\r\n        [name: string]: number | string | boolean | undefined\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    children?: Node | string | (Node | string)[] | NodeList | ReactiveChildElements,\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction element<E extends HTMLElementTagNameMap[K], K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): E;\r\nfunction element(\r\n    tagName: string, init?: HTMLElementInit): HTMLElement;\r\nfunction element<K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): HTMLElementTagNameMap[K] {\r\n    if (init) {\r\n        const {options, attributes, dataset, children, listeners} = init;\r\n        const element = document.createElement(tagName, options);\r\n        if (attributes) {\r\n            Object.entries(attributes).forEach(([attributeName, attributeValue]) => {\r\n                if (attributeValue !== undefined) {\r\n                    if (typeof attributeValue === \"boolean\") {\r\n                        element.toggleAttribute(camelToTrain(attributeName), attributeValue);\r\n                    }\r\n                    else {\r\n                        element.setAttribute(camelToTrain(attributeName), String(attributeValue));\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        if (dataset) {\r\n            const {dataset: elementDataset} = element;\r\n            Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                elementDataset[datasetEntry_i] = String(dataset[datasetEntry_i]);\r\n            });\r\n        }\r\n        if (children) {\r\n            if (typeof children === \"function\") {\r\n                children(element);\r\n            }\r\n            else if (typeof children === \"object\" && \"length\" in children) {\r\n                element.append(...Array.from(children));\r\n            }\r\n            else {\r\n                element.append(children);\r\n            }\r\n        }\r\n        if (listeners) {\r\n            Object.entries(listeners).forEach(([name_i, listener_i]) => {\r\n                if (Array.isArray(listener_i)) {\r\n                    element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                }\r\n                else {\r\n                    element.addEventListener(name_i, listener_i);\r\n                }\r\n            });\r\n        }\r\n        return element;\r\n    }\r\n    return document.createElement(tagName);\r\n}\r\n\r\nconst reactiveElementsMap = new WeakMap<ModelNode, {\r\n    observerOptions: ModelChangeObserverOptions,\r\n    reactiveElementsArray: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }[]\r\n}>();\r\n\r\nconst reactiveElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    model: ModelNode,\r\n    reactiveElement: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }\r\n}) => {\r\n    const {model, reactiveElement} = heldValue;\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    if (reactiveElementsMapEntry !== undefined) {\r\n        const {reactiveElementsArray} = reactiveElementsMapEntry;\r\n        reactiveElementsArray.splice(reactiveElementsArray.indexOf(reactiveElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveElementsPropertyObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    records.forEach((record_i) => {\r\n        const {target, propertyName, oldValue, newValue} = record_i;\r\n        const {reactiveElementsArray} = reactiveElementsMap.get(target)!;\r\n        reactiveElementsArray.forEach(reactiveElement_i => {\r\n            const {elementRef, react, properties} = reactiveElement_i;\r\n            const element = elementRef.deref();\r\n            if (element) {\r\n                if (properties.includes(propertyName!)) {\r\n                    react(element, propertyName!, oldValue, newValue);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveElement<M extends ModelNode, E extends Element, K extends string>(\r\n    model: M,\r\n    element: E,\r\n    properties: K[],\r\n    react: (object: E, property: K, oldValue: any, newValue: any) => void\r\n): E;\r\nfunction reactiveElement<M extends ModelNode, E extends Element>(\r\n    model: M,\r\n    element: E,\r\n    properties: string[],\r\n    react: (element: E, property: string, oldValue: any, newValue: any) => void\r\n): E {\r\n    const elementRef = new WeakRef(element);\r\n    const reactiveElement = {elementRef, react, properties};\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    reactiveElementsFinalizationRegistry.register(element, {model, reactiveElement});\r\n    if (!reactiveElementsMapEntry) {\r\n        const observerOptions = {\r\n            properties: true,\r\n            propertiesFilter: properties\r\n        };\r\n        const reactiveElementsArray = [reactiveElement];\r\n        reactiveElementsMap.set(model, {observerOptions, reactiveElementsArray});\r\n        reactiveElementsPropertyObserver.observe(model, observerOptions);\r\n    }\r\n    else {\r\n        const {reactiveElementsArray, observerOptions} = reactiveElementsMapEntry;\r\n        const {propertiesFilter} = observerOptions;\r\n        reactiveElementsArray.push(reactiveElement);\r\n        observerOptions.propertiesFilter = propertiesFilter ?\r\n            propertiesFilter.concat(properties.filter(\r\n                property_i => !propertiesFilter.includes(property_i)\r\n            )) : properties.filter(\r\n                (property_i, i, properties) => properties.indexOf(property_i) === i\r\n            )\r\n    }\r\n    properties.forEach((property_i) => {\r\n        if (property_i in model) {\r\n            const value = Reflect.get(model, property_i, model);\r\n            react(element, <any>property_i, <any>undefined, value);\r\n        }\r\n    });\r\n    return element;\r\n}\r\n\r\nfunction revokeReactiveElement<M extends ModelNode, E extends Element>(\r\n    model: M,\r\n    element: E\r\n): void {\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    if (reactiveElementsMapEntry) {\r\n        const {reactiveElementsArray} = reactiveElementsMapEntry;\r\n        const reactiveElementIndex = reactiveElementsArray.findIndex(\r\n            reactiveElement => reactiveElement.elementRef.deref() === element\r\n        );\r\n        if (reactiveElementIndex > -1) {\r\n            reactiveElementsArray.splice(reactiveElementIndex, 1);\r\n        }\r\n        if (reactiveElementsArray.length === 0) {\r\n            reactiveElementsMap.delete(model);\r\n        }\r\n    }\r\n}\r\n\r\ninterface ReactiveChildElements {\r\n    (parent: ParentNode): void;\r\n}\r\n\r\nconst reactiveChildElementsMap = new WeakMap<ModelList, {\r\n    reactiveChildElementsArray: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }[]\r\n}>();\r\n\r\nconst reactiveChildElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    list: ModelList,\r\n    reactiveChildElement: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }\r\n}) => {\r\n    const {list, reactiveChildElement} = heldValue;\r\n    const reactiveChildrenElementsMapEntry = reactiveChildElementsMap.get(list);\r\n    if (reactiveChildrenElementsMapEntry) {\r\n        const {reactiveChildElementsArray} = reactiveChildrenElementsMapEntry;\r\n        reactiveChildElementsArray.splice(reactiveChildElementsArray.indexOf(reactiveChildElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveChildElementsObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    let range: null | Range = null;\r\n    Array.from(records.values()).forEach((record_i) => {\r\n        const {target} = record_i;\r\n        const list = <ModelList>target;\r\n        const {length: listLength} = list;\r\n        const {reactiveChildElementsArray} = reactiveChildElementsMap.get(list)!;\r\n        reactiveChildElementsArray.forEach((reactiveChildElements_i) => {\r\n            const {parentRef, mapping, placeholder} = reactiveChildElements_i;\r\n            const parent = parentRef.deref();\r\n            if (parent) {\r\n                const {firstChild, children} = parent;\r\n                const {length: childrenCount} = children;\r\n                if (placeholder && listLength > 0 && firstChild == placeholder) {\r\n                    parent.removeChild(placeholder);\r\n                }\r\n                const {changeType, LIST_INSERT, LIST_REMOVE, LIST_SORT} = record_i;\r\n                switch (changeType) {\r\n                    case LIST_INSERT: {\r\n                        const {insertedIndex, insertedItems} = record_i;\r\n                        const insertedItemsArray = Array.from(insertedItems.values()).map(mapping);\r\n                        const {length: childrenCount} = children;\r\n                        if (insertedIndex < childrenCount) {\r\n                            children[insertedIndex].before(...insertedItemsArray);\r\n                        }\r\n                        else {\r\n                            parent.append(...insertedItemsArray);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_REMOVE: {\r\n                        const {removedIndex, removedItems} = record_i;\r\n                        const {length: removedCount} = removedItems;\r\n                        range = range ?? document.createRange();\r\n                        const removeEndIndex = removedIndex + (removedCount - 1);\r\n                        if (removeEndIndex < childrenCount) {\r\n                            range.setStartBefore(children[removedIndex]);\r\n                            range.setEndAfter(children[removeEndIndex]);\r\n                            range.deleteContents();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_SORT: {\r\n                        const {sortedIndices} = record_i;\r\n                        const childrenArray = Array.from(children);\r\n                        parent.append(\r\n                            ...sortedIndices.filter(\r\n                                index_i => index_i < childrenCount\r\n                            ).map(\r\n                                index_i => childrenArray[index_i]\r\n                            )\r\n                        );\r\n                        break;\r\n                    }\r\n                }\r\n                if (listLength == 0 && placeholder) {\r\n                    parent.append(placeholder);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveChildElements<Model extends ModelNode>(\r\n    list: ModelList<Model>,\r\n    mapping: (item: Model) => Element,\r\n    placeholder?: Element\r\n): ReactiveChildElements {\r\n    return (parent: ParentNode) => {\r\n        const parentRef = new WeakRef(parent);\r\n        const reactiveChildElementsMapEntry = reactiveChildElementsMap.get(list);\r\n        const reactiveChildElement = {parentRef, mapping, placeholder};\r\n        reactiveChildElementsFinalizationRegistry.register(parent, {list, reactiveChildElement});\r\n        if (!reactiveChildElementsMapEntry) {\r\n            const reactiveChildElementsArray = [reactiveChildElement];\r\n            reactiveChildElementsMap.set(list, {reactiveChildElementsArray});\r\n            reactiveChildElementsObserver.observe(list, {\r\n                childList: true\r\n            });\r\n        }\r\n        else {\r\n            const {reactiveChildElementsArray} = reactiveChildElementsMapEntry;\r\n            reactiveChildElementsArray.push(reactiveChildElement);\r\n        }\r\n        const children = list.length == 0 && placeholder ?\r\n            [placeholder] : Array.from(list.values()).map(mapping);\r\n        parent.replaceChildren(...children);\r\n    }\r\n}\r\n\r\nfunction revokeReactiveChildElements<Model extends ModelNode>(\r\n    list: ModelList<Model>,\r\n    parent: ParentNode,\r\n): void {\r\n    const reactiveChildElementsMapEntry = reactiveChildElementsMap.get(list);\r\n    if (reactiveChildElementsMapEntry) {\r\n        const {reactiveChildElementsArray} = reactiveChildElementsMapEntry;\r\n        const reactiveChildElementsIndex = reactiveChildElementsArray.findIndex(\r\n            reactiveChildElement => reactiveChildElement.parentRef.deref() === parent\r\n        );\r\n        if (reactiveChildElementsIndex > -1) {\r\n            reactiveChildElementsArray.splice(reactiveChildElementsIndex, 1);\r\n        }\r\n        if (reactiveChildElementsArray.length === 0) {\r\n            reactiveChildElementsMap.delete(list);\r\n        }\r\n    }\r\n}\r\n\r\ninterface AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n    attach(element: Element): void;\r\n    detach(element: Element): void;\r\n}\r\n\r\ntype AttributeType = \"string\" | \"boolean\" | \"list\";\r\n\r\nfunction areAttributesMatching(\r\n    referenceAttributeType: AttributeType,\r\n    referenceAttributeName: string, referenceAttributeValue: string,\r\n    attributeName: string, attributeValue: string | null): boolean {\r\n    if (referenceAttributeName == attributeName) {\r\n        switch (referenceAttributeType) {\r\n            case \"boolean\":\r\n                return referenceAttributeValue == \"\" && attributeValue == \"\";\r\n            case \"string\":\r\n                return referenceAttributeValue !== \"\" && (referenceAttributeValue == attributeValue);\r\n            case \"list\":\r\n                return (referenceAttributeValue !== \"\" && attributeValue !== null) && new RegExp(`${referenceAttributeValue}\\s*?`, \"g\").test(attributeValue );\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nclass AttributeMutationMixinBase implements AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n\r\n    constructor(attributeName: string, attributeType: AttributeType = \"boolean\", attributeValue: string = \"\") {\r\n        this.attributeName = attributeName;\r\n        this.attributeType = attributeType;\r\n        this.attributeValue = attributeValue;\r\n    }\r\n\r\n    attach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n\r\n    detach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n}","import { CustomElement, AttributeProperty, QueryProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\n\r\nexport { HTMLEMenuItemElement };\r\nexport { EMenuItem };\r\n\r\ninterface HTMLEMenuItemElementConstructor {\r\n    prototype: HTMLEMenuItemElement;\r\n    new(): HTMLEMenuItemElement;\r\n}\r\n\r\ninterface HTMLEMenuItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n    get menu(): HTMLEMenuElement | null;\r\n    name: string;\r\n    label: string | null;\r\n    value: string;\r\n    hotkey: string;\r\n    disabled: boolean;\r\n    checked: boolean;\r\n    expanded: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(attributeName: string, oldValue: string | null, newValue: string | null): void;\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitem\": HTMLEMenuItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitem\"\r\n})\r\nclass HTMLEMenuItemElementBase extends HTMLElement implements HTMLEMenuItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n    \r\n    @QueryProperty({selector: \":scope > e-menu[slot=menu]\"})\r\n    menu!: HTMLEMenuElement | null;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string | null;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    hotkey!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    checked!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    expanded!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    overflown!: boolean;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"button\", observed: true})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"icon\"\r\n                }\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"label\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"arrow\"\r\n                }\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: flex;\r\n                user-select: none;\r\n                white-space: nowrap;\r\n                box-sizing: border-box;\r\n            }\r\n            \r\n            :host([disabled]) {\r\n                opacity: 0.38;\r\n                pointer-events: none;\r\n            }\r\n            \r\n            :host(:focus-within) {\r\n                background-color: var(--focused-item-color);\r\n            }\r\n\r\n            :host(:focus-visible) {\r\n                outline: none;\r\n            }\r\n            \r\n            :host(:is([type=\"menu\"], [type=\"submenu\"])) ::slotted([slot=\"menu\"]) {\r\n                z-index: 1;\r\n                position: absolute;\r\n            }\r\n            \r\n            :host(:is([type=\"menu\"], [type=\"submenu\"]):not([expanded])) ::slotted([slot=\"menu\"]) {\r\n                opacity: 0;\r\n                pointer-events: none;\r\n            }\r\n            \r\n            :host([type=\"submenu\"]) [part=\"icon\"] {\r\n                visibility: hidden;\r\n            }\r\n            \r\n            :host([type=\"menu\"]) [part=\"icon\"],\r\n            :host(:not([type=\"submenu\"])) [part=\"arrow\"] {\r\n                display: none;\r\n            }\r\n            \r\n            :host(:is([type=\"checkbox\"], [type=\"radio\"])[checked]) {\r\n                --icon-color: black;\r\n                --icon-image: url(\"/assets/done_FILL0_wght400_GRAD0_opsz48.svg\");\r\n            }\r\n            \r\n            :host([type=\"submenu\"]) {\r\n                --arrow-color: black;\r\n                --arrow-image: url(\"/assets/arrow_right_FILL0_wght400_GRAD0_opsz48.svg\");\r\n            }\r\n            \r\n            [part=\"icon\"],\r\n            [part=\"label\"],\r\n            [part=\"arrow\"] {\r\n                pointer-events: none;\r\n            }\r\n            \r\n            [part=\"icon\"] {\r\n                flex: none;\r\n                display: inline-block;\r\n                width: 18px;\r\n                height: 18px;\r\n                padding: 2px;\r\n                overflow: hidden;\r\n                margin-right: 4px;\r\n            }\r\n            \r\n            [part=\"label\"] {\r\n                flex: auto;\r\n                line-height: 18px;\r\n                padding: 2px;\r\n                margin-left: 8px;\r\n                margin-right: 8px;\r\n            }\r\n            \r\n            :host(:is(:not([type]), [type=\"button\"], [type=\"radio\"], [type=\"checkbox\"])[checked]) [part=\"icon\"] {\r\n                background-color: var(--activated-item-color);\r\n            }\r\n            \r\n            :host(:is(:not([type]), [type=\"button\"], [type=\"radio\"], [type=\"checkbox\"])) [part=\"icon\"]::before {\r\n                display: inline-block;\r\n                width: 18px;\r\n                height: 18px;\r\n                content: \"\";\r\n                mask-size: 18px 18px;\r\n                -webkit-mask-size: 18px 18px;\r\n                background-color: var(--icon-color, none);\r\n                -webkit-mask-image: var(--icon-image, none);\r\n                mask-image: var(--icon-image, none);\r\n                filter: var(--icon-filter, none);\r\n            }\r\n            \r\n            [part=\"arrow\"] {\r\n                flex: none;\r\n                display: inline-block;\r\n                width: 18px;\r\n                height: 18px;\r\n                margin: 1px 4px 1px 1px;\r\n            }\r\n            \r\n            [part=\"arrow\"]::after {\r\n                display: inline-block;\r\n                width: 18px;\r\n                height: 18px;\r\n                margin: 1px;\r\n                content: \"\";\r\n                mask-size: 18px 18px;\r\n                -webkit-mask-size: 18px 18px;\r\n                background-color: var(--arrow-color, none);\r\n                -webkit-mask-image: var(--arrow-image, none);\r\n                mask-image: var(--arrow-image, none);\r\n                filter: var(--arrow-filter, none);\r\n            }\r\n\r\n            :host(:hover):host-context(e-menubar:focus),\r\n            :host(:hover):host-context(e-menubar:not(:focus-within)) {\r\n                background-color: var(--hovered-item-color);\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const internals = this.attachInternals();\r\n        this.internals = internals;\r\n        internals.role = \"menuitem\";\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    attributeChangedCallback(attributeName: string, oldValue: string | null, newValue: string | null): void {\r\n        const {internals} = this;\r\n        switch (attributeName) {\r\n            case \"type\": {\r\n                switch (newValue) {\r\n                    case \"checkbox\":\r\n                    case \"radio\": {\r\n                        internals.role = `menuitem${newValue}`;\r\n                        break;\r\n                    }\r\n                    default: {\r\n                        internals.role = \"menuitem\";\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"checked\": {\r\n                internals.ariaChecked = String(newValue !== null);\r\n                break;\r\n            }\r\n            case \"disabled\": {\r\n                internals.ariaDisabled = String(newValue !== null);\r\n                break;\r\n            }\r\n            case \"expanded\": {\r\n                internals.ariaExpanded = String(newValue !== null);\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                internals.ariaLabel = newValue;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                const expand = force ?? !expanded;\r\n                this.expanded = expand;\r\n                if (expand) {\r\n                    this.#positionMenu();\r\n                }\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (!expanded) {\r\n                    this.expanded = true;\r\n                    this.#positionMenu();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (expanded) {\r\n                    this.expanded = false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            let {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const {type} = this;\r\n            if (type === \"menu\") {\r\n                const offsetParent = <HTMLElement>(menu.offsetParent ?? document.body);\r\n                const {offsetLeft, offsetTop} = offsetParent;\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                itemLeft -= offsetLeft;\r\n                itemRight -= offsetLeft;\r\n                itemTop -= offsetTop;\r\n                itemBottom -= offsetTop;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    itemRight - menuWidth :\r\n                    itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    itemTop - menuHeight  :\r\n                    itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                const closestMenu = this.closest(\"e-menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    itemLeft -= closestMenuLeft;\r\n                    itemRight -= closestMenuLeft;\r\n                    itemTop -= closestMenuTop;\r\n                    itemBottom -= closestMenuTop;\r\n                }\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    itemLeft - menuWidth :\r\n                    itemRight\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    itemBottom - menuHeight :\r\n                    itemTop\r\n                }px`);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemElement: HTMLEMenuItemElementConstructor = HTMLEMenuItemElementBase;\r\n\r\ninterface EMenuItemConstructor {\r\n    prototype: HTMLEMenuItemElement;\r\n    new(init: {\r\n        name?: string;\r\n        label: string;\r\n        type?: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    button(init: {\r\n        name?: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    checkbox(init: {\r\n        name?: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    radio(init: {\r\n        name?: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    menu(init: {\r\n        name?: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    submenu(init: {\r\n        name?: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n}\r\n\r\nvar EMenuItem = <EMenuItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string;\r\n        label: string;\r\n        type?: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menu} = init;\r\n        if (menu) {\r\n            menu.slot = \"menu\";\r\n        }\r\n        return element(\"e-menuitem\", {\r\n            attributes: {\r\n                tabindex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type\r\n            },\r\n            children: menu ? [\r\n                label,\r\n                menu\r\n            ] : [\r\n                label\r\n            ],\r\n            listeners: {\r\n                click: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemElement.prototype,\r\n        button(init: {\r\n            name?: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name?: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name?: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menu(init: {\r\n            name?: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"menu\"\r\n            });\r\n        },\r\n        submenu(init: {\r\n            name?: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"submenu\"\r\n            });\r\n        }\r\n    }\r\n);","import { ModelObject } from \"../models/Model\";\r\n\r\nexport { View };\r\n\r\ninterface View extends HTMLElement {\r\n    readonly model: ModelObject | null;\r\n    setModel(model: ModelObject): void;\r\n    renderShadow(): Node | undefined;\r\n    renderLight(): Node | undefined;\r\n    render(): void;\r\n}\r\n\r\ninterface ViewConstructor {\r\n    prototype: View;\r\n    new(): View;\r\n}\r\n\r\nclass ViewBase extends HTMLElement implements View {\r\n    #model: ModelObject | null;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#model = null;\r\n    }\r\n\r\n    get model(): ModelObject | null {\r\n        return this.#model;\r\n    }\r\n    \r\n    setModel(model: ModelObject): void {\r\n        if (model !== this.#model) {\r\n            this.#model = model;\r\n        }\r\n    }\r\n\r\n    renderLight(): Node | undefined {\r\n        return;\r\n    }\r\n\r\n    renderShadow(): Node | undefined {\r\n        return;\r\n    }\r\n\r\n    render(): void {\r\n        const {shadowRoot} = this;\r\n        if (shadowRoot !== null) {\r\n            const shadow = this.renderShadow();\r\n            if (shadow) {\r\n                shadowRoot.replaceChildren(shadow);\r\n            }\r\n        }\r\n        const light = this.renderLight();\r\n        if (light) {\r\n            this.replaceChildren(light);\r\n        }\r\n    }\r\n}\r\n\r\nvar View: ViewConstructor = ViewBase;","import { element, reactiveChildElements, CustomElement, fragment, AttributeProperty, reactiveElement } from \"../elements/Element\";\r\nimport { ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\nimport { HTMLEGridCellElement } from \"../elements/containers/grid/GridCell\";\r\nimport { HTMLEGridElement } from \"../elements/containers/grid/Grid\";\r\nimport { HTMLEGridRowElement } from \"../elements/containers/grid/GridRow\";\r\n\r\nexport { GridModel };\r\nexport { GridRowModel };\r\nexport { GridColumnModel };\r\nexport { GridView };\r\n\r\ninterface GridInit {\r\n    rows: GridRowModel[];\r\n    columns: GridColumnModel[];\r\n}\r\n\r\nclass GridModel extends ModelObject {\r\n    readonly rows: ModelList<GridRowModel>;\r\n    readonly columns: ModelList<GridColumnModel>;\r\n\r\n    constructor()\r\n    constructor(init: GridInit)\r\n    constructor(init?: GridInit) {\r\n        super();\r\n        const {rows: initRows = [], columns: initColumns = []} = init ?? {};\r\n        const rows = new ModelList(initRows);\r\n        rows.setParent(this);\r\n        this.rows = rows;\r\n        const columns = new ModelList(initColumns);\r\n        columns.setParent(this);\r\n        this.columns = columns;\r\n    }\r\n\r\n    getColumnByName(name: string): GridColumnModel | null {\r\n        return Array.from(this.columns.values()).find(\r\n            column_i => column_i.name == name\r\n        ) ?? null;\r\n    }\r\n\r\n    sortByColumn(column: GridColumnModel, sortOrder: number) {\r\n        Array.from(this.columns.values()).forEach((column_i) => {\r\n            column_i.sortorder = column_i === column ? sortOrder : undefined;\r\n        });\r\n        const sortTest = (() => {\r\n            const {type} = column;\r\n            switch (type) {\r\n                case String: {\r\n                    return (row_1: GridRowModel, row_2: GridRowModel) => {\r\n                        const cell_1 = String(column.extract(row_1));\r\n                        const cell_2 = String(column.extract(row_2));\r\n                        return sortOrder * cell_1.localeCompare(cell_2);\r\n                    };\r\n                }\r\n                default: {\r\n                    return (row_1: GridRowModel, row_2: GridRowModel) => {\r\n                        const cell_1 = Number(column.extract(row_1));\r\n                        const cell_2 = Number(column.extract(row_2));\r\n                        return Math.sign(sortOrder * (cell_1 - cell_2));\r\n                    };\r\n                }\r\n            }\r\n        })();\r\n        this.rows.sort(sortTest);\r\n    }\r\n}\r\n\r\n\r\ntype GridRowFilter = {\r\n    filter: (row: GridRowModel) => boolean;\r\n}\r\n\r\ninterface GridColumnInit {\r\n    name: string,\r\n    type: NumberConstructor | StringConstructor | DateConstructor,\r\n    label: string,\r\n    extract: (row: GridRowModel) => string,\r\n    filters?: (GridRowFilter & {name: string})[]\r\n}\r\n\r\nclass GridColumnModel extends ModelObject {\r\n    readonly name: string\r\n    readonly type: NumberConstructor | StringConstructor | DateConstructor;\r\n    readonly label: string;\r\n    readonly extract: (row: GridRowModel) => string;\r\n    readonly filters: (GridRowFilter & {name: string})[];\r\n\r\n    @ModelProperty()\r\n    sortorder: number | undefined;\r\n\r\n    constructor(init: GridColumnInit) {\r\n        super();\r\n        const {name, type, label, extract, filters = []} = init;\r\n        this.name = name;\r\n        this.type = type;\r\n        this.label = label;\r\n        this.extract = extract;\r\n        this.filters = filters;\r\n    }\r\n}\r\n\r\nclass GridRowModel extends ModelObject {\r\n    id: number;\r\n\r\n    @ModelProperty()\r\n    name: string;\r\n\r\n    @ModelProperty()\r\n    age: number;\r\n    \r\n    constructor(init: {\r\n        id: number;\r\n        name: string,\r\n        age: number\r\n    }) {\r\n        super();\r\n        const {id, name, age} = init;\r\n        this.id = id;\r\n        this.name = name;\r\n        this.age = age;\r\n    }\r\n}\r\n\r\ninterface GridViewConstructor {\r\n    prototype: GridView;\r\n    new(): GridView;\r\n    new(model: GridModel): GridView;\r\n}\r\n\r\ninterface GridView extends View {\r\n    readonly shadowRoot: ShadowRoot;\r\n    model: GridModel;\r\n    resizable: boolean;\r\n    sortable: boolean;\r\n    setColumnDelegate(delegate: (column: GridColumnModel) => string | Node): void;\r\n    setCellDelegate(delegate: (row: GridRowModel, column: GridColumnModel) => string | Node): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridview\": GridView,\r\n    }\r\n}\r\n\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-gridview\"\r\n})\r\nclass GridViewBase extends View implements GridView {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly model!: GridModel;\r\n\r\n    #columnDelegate: (column: GridColumnModel) => string | Node;\r\n    #cellDelegate: (row: GridRowModel, column: GridColumnModel) => string | Node;\r\n    \r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    resizable!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    sortable!: boolean;\r\n\r\n    #displayFilters: (GridRowFilter & {name: string})[];\r\n    #searchFilter: GridRowFilter | null;\r\n\r\n    static {\r\n        style = /*css*/`\r\n            :host {\r\n                display: block;\r\n            }\r\n            \r\n            e-gridrow[hidden] {\r\n                display: none;\r\n            }\r\n            \r\n            e-gridcell[type=\"gridcell\"] {\r\n                max-width: 0;\r\n            \r\n                overflow: clip;\r\n                text-overflow: ellipsis;\r\n                white-space: nowrap;\r\n            }\r\n            \r\n            e-gridcell[type=\"columnheader\"] {\r\n                width: 120px;\r\n            }\r\n            \r\n            .gridcell-label,\r\n            .gridheader-label {\r\n                padding-left: 4px;\r\n            }\r\n            \r\n            .gridcell-content {\r\n                overflow: clip;\r\n            }\r\n            \r\n            .gridheader-content {\r\n                display: flex;\r\n            }\r\n            \r\n            .gridheader-label {\r\n                flex: 1 1 0;\r\n                overflow: clip;\r\n                text-overflow: ellipsis;\r\n                white-space: nowrap;\r\n            }\r\n            \r\n            e-treeitem::part(arrow) {\r\n                display: inline-block;\r\n                width: 18px;\r\n                height: 18px;\r\n                margin: 1px 4px 1px 1px;\r\n            }\r\n            \r\n            .gridheader-sort-indicator {\r\n                display: inline-block;\r\n                width: 18px;\r\n                height: 18px;\r\n            }\r\n            \r\n            .gridheader-sort-indicator::before {\r\n                display: inline-block;\r\n                width: 18px;\r\n                height: 18px;\r\n                margin: 1px;\r\n                content: \"\";\r\n                mask-size: 18px 18px;\r\n                -webkit-mask-size: 18px 18px;\r\n                background-color: var(--sortorder-indicator-color, none);\r\n            }\r\n            \r\n            e-gridcell[type=\"columnheader\"]:not([data-sortorder]) .gridheader-sort-indicator::before {\r\n                background-color: unset;\r\n            }\r\n            \r\n            e-gridcell[type=\"columnheader\"][data-sortorder=\"1\"] .gridheader-sort-indicator::before {\r\n                -webkit-mask-image: var(--sortorder-indicator-ascending, none);\r\n                mask-image: var(--sortorder-indicator-ascending, none);\r\n            }\r\n            \r\n            e-gridcell[type=\"columnheader\"][data-sortorder=\"-1\"] .gridheader-sort-indicator::before {\r\n                -webkit-mask-image: var(--sortorder-indicator-descending, none);\r\n                mask-image: var(--sortorder-indicator-descending, none);\r\n            }\r\n            \r\n            e-gridhead e-wsash:not(:hover) {\r\n                flex: 0 0 auto;\r\n                width: 2px;\r\n                margin-right: 1px;\r\n                margin-left: 1px;\r\n            }\r\n        `;\r\n    }\r\n    \r\n    constructor()\r\n    constructor(model: GridModel)\r\n    constructor(model?: GridModel) {\r\n        super();\r\n        this.#displayFilters = [];\r\n        this.#searchFilter = null;\r\n        this.#cellDelegate =\r\n            (row: GridRowModel, column: GridColumnModel) =>\r\n                element(\"label\", {\r\n                    children: column.extract(row)\r\n                });\r\n        this.#columnDelegate =\r\n            (column: GridColumnModel) =>\r\n                element(\"label\", {\r\n                    children: column.label\r\n                });\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        this.setModel(model ?? new GridModel());\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"resizable\":\r\n            case \"sortable\": {\r\n                this.render();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    get gridElement(): HTMLEGridElement {\r\n        return this.shadowRoot.querySelector(\"e-grid\")!;\r\n    }\r\n\r\n    setColumnDelegate(delegate: (column: GridColumnModel) => string | Node): void {\r\n        this.#columnDelegate = delegate;\r\n    }\r\n\r\n    setCellDelegate(delegate: (row: GridRowModel, column: GridColumnModel) => string | Node): void {\r\n        this.#cellDelegate = delegate;\r\n    }\r\n\r\n    getRowElement(row: GridRowModel): HTMLEGridRowElement | null {\r\n        return this.shadowRoot.querySelector(`e-grid > e-gridbody > e-gridrow[data-index='${row.id}']`);\r\n    }\r\n\r\n    getColumnHeaderElement(column: GridColumnModel): HTMLEGridCellElement | null {\r\n        return this.shadowRoot.querySelector(`e-grid > e-gridhead > e-gridcell[id=${column.name}]`);\r\n    }\r\n    \r\n    getColumnCellsElements(column: GridColumnModel): HTMLEGridCellElement[] {\r\n        return Array.from(this.shadowRoot.querySelectorAll(`e-grid > e-gridbody > e-gridrow > e-gridcell[headers~=${column.name}]`));\r\n    }\r\n\r\n    renderShadow(): Node {\r\n        const {model} = this;\r\n        return fragment(\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"/css/main.css\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                children: element(\"input\", {\r\n                    attributes: {\r\n                        type: \"search\"\r\n                    },\r\n                    listeners: {\r\n                        input: <EventListener>this.#handleSearchInputEvent.bind(this)\r\n                    }\r\n                })\r\n            }),\r\n            element(\"e-grid\", {\r\n                attributes: {\r\n                    tabindex: 0,\r\n                    selectby: \"row\",\r\n                    multisectable: true\r\n                },\r\n                children: [\r\n                    element(\"e-gridhead\", {\r\n                        children: reactiveChildElements(\r\n                            model.columns, column => this.#renderGridColumnHeaderCell(column)\r\n                        ),\r\n                        listeners: {\r\n                            contextmenu: <EventListener>this.#handleHeadContextMenuEvent.bind(this),\r\n                            click: <EventListener>this.#handleHeadClickEvent.bind(this)\r\n                        }\r\n                    }),\r\n                    element(\"e-gridbody\", {\r\n                        children: reactiveChildElements(\r\n                            model.rows, row => this.#renderGridBodyRow(row)\r\n                        )\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    #filter(row: GridRowModel): boolean {\r\n        const displayFilters = this.#displayFilters;\r\n        const searchFilter = this.#searchFilter;\r\n        return (displayFilters.length > 0 ? displayFilters.some(filter_i => filter_i.filter(row)) : true) &&\r\n        (searchFilter ? searchFilter.filter(row) : true);\r\n    }\r\n\r\n    setSearchFilter(filter: GridRowFilter | null): void {\r\n        const {model, gridElement} = this;\r\n        const {rows} = model;\r\n        this.#searchFilter = filter;\r\n        Array.from(rows.values()).forEach((row_i) => {\r\n            const rowElement = this.getRowElement(row_i);\r\n            if (rowElement) {\r\n                rowElement.hidden = !this.#filter(row_i);\r\n            }\r\n        });\r\n        gridElement.clearSelection();\r\n    }\r\n\r\n    addDisplayFilter(filter: (GridRowFilter & {name: string;})): void {\r\n        const {model, gridElement} = this;\r\n        const {rows} = model;\r\n        const displayFilters = this.#displayFilters;\r\n        if (!displayFilters.includes(filter)) {\r\n            displayFilters.push(filter);\r\n            Array.from(rows.values()).forEach((row_i) => {\r\n                const rowElement = this.getRowElement(row_i);\r\n                if (rowElement) {\r\n                    rowElement.hidden = !this.#filter(row_i);\r\n                }\r\n            });\r\n        }\r\n        gridElement.clearSelection();\r\n    }\r\n\r\n    removeDisplayFilter(filter: (GridRowFilter & {name: string;})): void {\r\n        const {model, gridElement} = this;\r\n        const {rows} = model;\r\n        const displayFilters = this.#displayFilters;\r\n        const filterIndex = displayFilters.indexOf(filter);\r\n        if (filterIndex > -1) {\r\n            displayFilters.splice(filterIndex, 1);\r\n            Array.from(rows.values()).forEach((row_i) => {\r\n                const rowElement = this.getRowElement(row_i);\r\n                if (rowElement) {\r\n                    rowElement.hidden = !this.#filter(row_i);\r\n                }\r\n            });\r\n        }\r\n        gridElement.clearSelection();\r\n    }\r\n\r\n    removeAllDisplayFilters(): void {\r\n        const {model, gridElement} = this;\r\n        const {rows} = model;\r\n        const displayFilters = this.#displayFilters;\r\n        displayFilters.splice(0, displayFilters.length);\r\n        Array.from(rows.values()).forEach((row_i) => {\r\n            const rowElement = this.getRowElement(row_i);\r\n            if (rowElement) {\r\n                rowElement.hidden = !this.#filter(row_i);\r\n            }\r\n        });\r\n        gridElement.clearSelection();\r\n    }\r\n\r\n    #renderGridColumnHeaderCell(column: GridColumnModel): Element {\r\n        const gridColumnElement = reactiveElement(\r\n            column,\r\n            element(\"e-gridcell\", {\r\n                attributes: {\r\n                    type: \"columnheader\",\r\n                    id: column.name\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            class: \"gridheader-content\"\r\n                        },\r\n                        children: (<Node[]>[\r\n                            element(\"span\", {\r\n                                attributes: {\r\n                                    class: \"gridheader-label\"\r\n                                },\r\n                                children: this.#columnDelegate(column)\r\n                            }),\r\n                            element(\"span\", {\r\n                                attributes: {\r\n                                    class: \"gridheader-sort-indicator\"\r\n                                }\r\n                            })\r\n                        ]).concat(\r\n                            this.resizable ? [\r\n                                element(\"e-wsash\", {\r\n                                    attributes: {\r\n                                        controls: column.name\r\n                                    }\r\n                                })\r\n                            ] : []\r\n                        )\r\n                    })\r\n                ]\r\n            }),\r\n            [\"sortorder\"],\r\n            (cell, property, oldValue, newValue) => {\r\n                switch (property) {\r\n                    case \"sortorder\": {\r\n                        const {dataset} = cell;\r\n                        if (typeof newValue !== \"undefined\") {\r\n                            dataset.sortorder = newValue.toString();\r\n                        }\r\n                        else {\r\n                            delete dataset.sortorder;\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        );\r\n        return gridColumnElement;\r\n    }\r\n\r\n    #renderGridBodyRow(row: GridRowModel): Element {\r\n        const {model} = this;\r\n        const gridRowElement = element(\"e-gridrow\", {\r\n            dataset: {\r\n                index: row.id\r\n            },\r\n            children: reactiveChildElements(\r\n                model.columns, column => this.#renderGridDataCell(row, column)\r\n            )\r\n        });\r\n        return gridRowElement;\r\n    }\r\n\r\n    #renderGridDataCell(row: GridRowModel, column: GridColumnModel): Element {\r\n        const gridCellElement = element(\"e-gridcell\", {\r\n            attributes: {\r\n                type: \"gridcell\",\r\n                headers: column.name\r\n            },\r\n            children: element(\"span\", {\r\n                attributes: {\r\n                    class: \"gridcell-content\"\r\n                },\r\n                children: (<Node[]>[\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            class: \"gridcell-label\"\r\n                        },\r\n                        children: this.#cellDelegate(row, column)\r\n                    })\r\n                ])\r\n            })\r\n        });\r\n        return gridCellElement;\r\n    }\r\n\r\n    #handleHeadContextMenuEvent(event: MouseEvent): void {\r\n        const {clientX, clientY, currentTarget, target} = event;\r\n        const {gridElement} = this;\r\n        const targetHead = <HTMLElement>currentTarget;\r\n        const targetHeader = <HTMLEGridCellElement>(<HTMLElement>target).closest(\"e-gridcell\");\r\n        const {model} = this;\r\n        if (targetHeader) {\r\n            const column = model.getColumnByName(targetHeader.id)!;\r\n            const {sortorder, filters} = column;\r\n            const contextMenu = element(\"e-menu\",  {\r\n                attributes: {\r\n                    contextual: true\r\n                },\r\n                children: [\r\n                    element(\"e-menuitem\",  {\r\n                        attributes: {\r\n                            label: \"Resize Auto\"\r\n                        },\r\n                        children: \"Resize auto\",\r\n                        listeners: {\r\n                            click: () => {\r\n                                const columnHeaderElement = this.getColumnHeaderElement(column);\r\n                                if (columnHeaderElement) {\r\n                                    const {style} = columnHeaderElement;\r\n                                    const labels = this.getColumnCellsElements(column).map(\r\n                                        cell_i => cell_i.querySelector(\".gridcell-label\")!\r\n                                    );\r\n                                    const maxWidth = labels.reduce(\r\n                                        (maxWidth, label) => Math.max(maxWidth, label.getBoundingClientRect().width), 0\r\n                                    );\r\n                                    style.setProperty(\"width\", `${maxWidth}px`);\r\n                                }\r\n                                gridElement.focus();\r\n                            }\r\n                        }\r\n                    }),\r\n                    element(\"e-menuitem\",  {\r\n                        attributes: {\r\n                            label: \"Resize To Default\"\r\n                        },\r\n                        children: \"Resize to Default\",\r\n                        listeners: {\r\n                            click: () => {\r\n                                const columnHeaderElement = this.getColumnHeaderElement(column);\r\n                                if (columnHeaderElement) {\r\n                                    const {style} = columnHeaderElement;\r\n                                    style.removeProperty(\"width\");\r\n                                }\r\n                                gridElement.focus();\r\n                            }\r\n                        }\r\n                    }),\r\n                    element(\"e-menuitem\",  {\r\n                        attributes: {\r\n                            type: \"submenu\",\r\n                            label: \"Sort\",\r\n                        },\r\n                        children: [\r\n                            \"Sort\",\r\n                            element(\"e-menu\",  {\r\n                                attributes: {\r\n                                    slot: \"menu\"\r\n                                },\r\n                                children: [\r\n                                    element(\"e-menuitem\",  {\r\n                                        attributes: {\r\n                                            type: \"radio\",\r\n                                            name: \"sort\",\r\n                                            value: \"1\",\r\n                                            label: \"Ascending\",\r\n                                            checked: sortorder === 1\r\n                                        },\r\n                                        children: \"Ascending\"\r\n                                    }),\r\n                                    element(\"e-menuitem\",  {\r\n                                        attributes: {\r\n                                            type: \"radio\",\r\n                                            name: \"sort\",\r\n                                            value: \"-1\",\r\n                                            label: \"Descending\",\r\n                                            checked: sortorder === -1\r\n                                        },\r\n                                        children: \"Descending\"\r\n                                    })\r\n                                ],\r\n                                listeners: {\r\n                                    click: (event) => {\r\n                                        const {target} = event;\r\n                                        const targetItem = (<HTMLElement>target).closest(\"e-menuitem\");\r\n                                        if (targetItem) {\r\n                                            model.sortByColumn(column, Number(targetItem.value));\r\n                                        }\r\n                                        gridElement.focus();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    }),\r\n                    element(\"e-menuitem\",  {\r\n                        attributes: {\r\n                            type: \"submenu\",\r\n                            label: \"Filter\"\r\n                        },\r\n                        children: [\r\n                            \"Filter\",\r\n                            element(\"e-menu\",  {\r\n                                attributes: {\r\n                                    slot: \"menu\"\r\n                                },\r\n                                children: filters.map(filter => {\r\n                                    const {name} = filter;\r\n                                    return element(\"e-menuitem\", {\r\n                                        attributes: {\r\n                                            type: \"checkbox\",\r\n                                            checked: this.#displayFilters.includes(filter),\r\n                                            label: name\r\n                                        },\r\n                                        children: name\r\n                                    })\r\n                                }).concat(\r\n                                    element(\"e-menuitem\", {\r\n                                        attributes: {\r\n                                            type: \"button\",\r\n                                            label: \"Remove filters\"\r\n                                        },\r\n                                        children: \"Remove filters\"\r\n                                    })\r\n                                ),\r\n                                listeners: {\r\n                                    click: (event) => {\r\n                                        const {target} = event;\r\n                                        const targetItem = (<HTMLElement>target).closest(\"e-menuitem\");\r\n                                        if (targetItem) {\r\n                                            const {checked, label} = targetItem;\r\n                                            const filter = filters.find(filter => filter.name === label);\r\n                                            if (filter) {\r\n                                                if (checked) {\r\n                                                    this.addDisplayFilter(filter);\r\n                                                }\r\n                                                else {\r\n                                                    this.removeDisplayFilter(filter);\r\n                                                }\r\n                                            }\r\n                                            else {\r\n                                                this.removeAllDisplayFilters();\r\n                                            }\r\n                                        }\r\n                                        gridElement.focus();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            });\r\n            targetHead.append(contextMenu);\r\n            contextMenu.positionContextual(clientX, clientY);\r\n            contextMenu.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleSearchInputEvent(event: InputEvent) {\r\n        const {target} = event;\r\n        if (target instanceof HTMLInputElement) {\r\n            const {value} = target;\r\n            if (value !== \"\") {\r\n                this.setSearchFilter({\r\n                    filter: (row) => row.name.toLowerCase().includes(value.toLowerCase())\r\n                });\r\n            }\r\n            else {\r\n                this.setSearchFilter(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleHeadClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetIsHeaderContent = (<HTMLElement>target).matches(\"e-gridcell[type=columnheader] :scope:not(e-wsash)\");\r\n        if (targetIsHeaderContent) {\r\n            const targetHeader = <HTMLEGridCellElement>(<HTMLElement>target).closest(\"e-gridcell\");\r\n            const {model} = this;\r\n            const {columns} = model;\r\n            if (targetHeader) {\r\n                const targetColumn = Array.from(columns.values()).find(column_i => column_i.name == targetHeader.id);\r\n                if (targetColumn) {\r\n                    const {sortorder = -1} = targetColumn;\r\n                    model.sortByColumn(targetColumn, -sortorder);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar GridView: GridViewConstructor = GridViewBase;","import { HTMLEMenuElement } from \"../elements/containers/menus/Menu\";\r\nimport { HTMLEToolBarElement } from \"../elements/containers/toolbars/ToolBar\";\r\nimport { HTMLETreeElement } from \"../elements/containers/trees/Tree\";\r\nimport { HTMLETreeItemElement } from \"../elements/containers/trees/TreeItem\";\r\nimport { AttributeProperty, CustomElement, element, fragment, reactiveChildElements, reactiveElement } from \"../elements/Element\";\r\nimport { ModelEvent, ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\n\r\nexport { TreeItemModelList };\r\nexport { TreeModel };\r\nexport { TreeItemModel };\r\nexport { TreeView };\r\n\r\ninterface TreeModelInit {\r\n    items: TreeItemModel[];\r\n    sortFunction?: (item_a: TreeItemModel, item_b: TreeItemModel) => number;\r\n}\r\n\r\nclass TreeModel extends ModelObject {\r\n    readonly items: ModelList<TreeItemModel>;\r\n    readonly childItems: ModelList<TreeItemModel>;\r\n    sortFunction: ((item_a: TreeItemModel, item_b: TreeItemModel) => number) | null;\r\n\r\n    constructor()\r\n    constructor(init: TreeModelInit)\r\n    constructor(init?: TreeModelInit) {\r\n        super();\r\n        const {items = [], sortFunction} = init ?? {};\r\n        items.forEach((item_i, i) => item_i.index = i);\r\n        const childItems = new ModelList(items);\r\n        childItems.setParent(this);\r\n        this.childItems = childItems;\r\n        this.items = new ModelList(this.subtreeItems());\r\n        this.sortFunction = sortFunction ??\r\n            function(item_a: TreeItemModel, item_b: TreeItemModel) {\r\n                return item_a.name.localeCompare(item_b.name);\r\n            };\r\n        this.addEventListener(\"modelchange\", this.#handleModelChangeEvent.bind(this));\r\n    }\r\n    \r\n    #handleModelChangeEvent(event: ModelEvent): void {\r\n        const {target} = event;\r\n        const {items, sortFunction, subtreeItems} = this;\r\n        if (target instanceof ModelList) {\r\n            const records = target.getRecords();\r\n            records.forEach((record_i) => {\r\n                const {insertedItems, removedItems} = record_i;\r\n                const flattenedInsertedItems = (<TreeItemModel[]>Array.from(insertedItems.values())).flatMap(\r\n                    insertedItem_i => Array.of(insertedItem_i, ...subtreeItems.call(insertedItem_i))\r\n                );\r\n                const flattenedRemovedItems = (<TreeItemModel[]>Array.from(removedItems.values())).flatMap(\r\n                    removedItem_i => Array.of(removedItem_i, ...subtreeItems.call(removedItem_i))\r\n                );\r\n                items.beginChanges();\r\n                items.append(...flattenedInsertedItems);\r\n                flattenedRemovedItems.forEach((removedItem_i) => items.remove(removedItem_i));\r\n                if (sortFunction) items.sort(sortFunction);\r\n                items.endChanges();\r\n            });\r\n            Array.from((<ModelList<TreeItemModel>>target).values()).forEach((item_i, i) => {\r\n                item_i.index = i;\r\n            });\r\n        }\r\n    }\r\n\r\n    subtreeItems(): TreeItemModel[] {\r\n        const {childItems} = this;\r\n        return Array.from(childItems.values()).flatMap(\r\n            treeItem_i => Array.of(treeItem_i, ...treeItem_i.subtreeItems())\r\n        );\r\n    }\r\n\r\n    getItemByUri(this: TreeModel | TreeItemModel, uri: string): TreeItemModel | null {\r\n        const {childItems} = this;\r\n        const {length: itemsCount} = childItems;\r\n        const {length: uriLength} = uri;\r\n        for (let i = 0; i < itemsCount; i++) {\r\n            const item_i = childItems.get(i)!;\r\n            const {uri: itemUri} = item_i;\r\n            const {length: itemUriLength} = itemUri;\r\n            if (uri.startsWith(itemUri)) {\r\n                if (itemUriLength === uriLength) {\r\n                    return <TreeItemModel>item_i;\r\n                }\r\n                return TreeModel.prototype.getItemByUri.call(item_i, uri);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\nclass TreeItemModelList {\r\n    readonly items: TreeItemModel[];\r\n\r\n    constructor(items: TreeItemModel[]) {\r\n        this.items = items;\r\n    }\r\n\r\n    get count(): number {\r\n        return this.items.length;\r\n    }\r\n\r\n    remove(): void {\r\n        const {items} = this;\r\n        const removedItemsGroups = items.reduce((map, item_i) => {\r\n            const {parentNode} = item_i;\r\n            if (parentNode instanceof TreeItemModel || parentNode instanceof TreeModel) {\r\n                const {childItems} = parentNode;\r\n                const group = map.get(childItems);\r\n                if (group) group.push(item_i);\r\n                else map.set(childItems, [item_i]);\r\n            }\r\n            return map;\r\n        }, new Map<ModelList, TreeItemModel[]>());\r\n        Array.from(removedItemsGroups.entries()).forEach(\r\n            ([list_i, children_i]) => {\r\n                list_i.beginChanges();\r\n                children_i.forEach((child_i) => {\r\n                    list_i.remove(child_i);\r\n                });\r\n                list_i.endChanges();\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nclass TreeItemModel extends ModelObject {\r\n    readonly childItems: ModelList<TreeItemModel>;\r\n\r\n    @ModelProperty()\r\n    name: string;\r\n    \r\n    @ModelProperty()\r\n    type: \"leaf\" | \"parent\";\r\n\r\n    @ModelProperty()\r\n    index: number;\r\n\r\n    get level(): number {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return parentNode.level + 1;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    get uri(): string {\r\n        const {parentNode, name} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return `${parentNode.uri}${name}/`;\r\n        }\r\n        return `${name}/`;\r\n    }\r\n\r\n    get parentItem(): TreeItemModel | null {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return parentNode;\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    constructor(init: {name: string, type: \"leaf\" | \"parent\", items?: TreeItemModel[]}) {\r\n        super();\r\n        const {name, type, items = []} = init;\r\n        items.forEach((item_i, i) => item_i.index = i);\r\n        const childItems = new ModelList(items);\r\n        childItems.setParent(this);\r\n        this.name = name;\r\n        this.childItems = childItems;\r\n        this.type = type;\r\n        this.index = -1;\r\n    }\r\n\r\n    subtreeItems(): TreeItemModel[] {\r\n        const {childItems} = this;\r\n        return Array.from(childItems.values()).flatMap(\r\n            treeItem_i => Array.of(treeItem_i, ...treeItem_i.subtreeItems())\r\n        );\r\n    }\r\n\r\n    remove(): void {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel || parentNode instanceof TreeModel) {\r\n            const {childItems} = parentNode;\r\n            if (childItems) {\r\n                childItems.remove(this);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface TreeViewConstructor {\r\n    prototype: TreeView;\r\n    new(): TreeView;\r\n    new(model: TreeModel): TreeView;\r\n}\r\n\r\ninterface TreeView extends View {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly model: TreeModel;\r\n    setModel(model: TreeModel): void;\r\n    renderShadow(): Node;\r\n    draggable: boolean;\r\n    selectedItems(): TreeItemModel[];\r\n    activeItem(): TreeItemModel | null;\r\n    get treeElement(): HTMLETreeElement | null ;\r\n    treeItemElement(item: TreeItemModel): HTMLETreeItemElement | null;\r\n    treeItem(element: HTMLETreeItemElement): TreeItemModel | null;\r\n    itemContentDelegate(this: TreeView, item: TreeItemModel): string | Node;\r\n    itemToolbarDelegate(this: TreeView, item: TreeItemModel): HTMLEToolBarElement | null;\r\n    itemMenuDelegate(this: TreeView): HTMLEMenuElement | null;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeview\": TreeView,\r\n    }\r\n}\r\n\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-treeview\"\r\n})\r\nclass TreeViewBase extends View implements TreeView {\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly model!: TreeModel;\r\n\r\n    #dragImages: WeakMap<TreeItemModel, WeakRef<Element>>;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    draggable!: boolean;\r\n\r\n    static {\r\n        style = /*css*/`\r\n            :host {\r\n                display: block;\r\n            }\r\n            \r\n            .offscreen {\r\n                position: absolute;\r\n                top: 0;\r\n                left: 0;\r\n                transform: translateY(-100%);\r\n                display: block;\r\n                pointer-events: none;\r\n            }\r\n            \r\n            .dragimage {\r\n                white-space: nowrap;\r\n                margin: 1px;\r\n                display: inline-block;\r\n                outline: 1px solid var(--focused-item-outline-color);\r\n                outline-offset: -1px;\r\n                border-radius: 3px; \r\n                padding: 2px 4px;\r\n            }\r\n        `;\r\n    }\r\n    \r\n    constructor()\r\n    constructor(model: TreeModel)\r\n    constructor(model?: TreeModel) {\r\n        super();\r\n        this.#dragImages = new WeakMap();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        this.setModel(model ?? new TreeModel());\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"draggable\": {\r\n                const {treeElement} = this;\r\n                if (treeElement) {\r\n                    Array.from(treeElement.items).forEach(\r\n                        item_i => item_i.draggable = newValue !== null\r\n                    );\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    get treeElement(): HTMLETreeElement | null {\r\n        return this.shadowRoot.querySelector<HTMLETreeElement>(\"e-tree\")!;\r\n    }\r\n\r\n    treeItemElement(item: TreeItemModel): HTMLETreeItemElement | null  {\r\n        return this.shadowRoot.querySelector<HTMLETreeItemElement>(`e-treeitem[uri=${item.uri}]`)!;\r\n    }\r\n\r\n    #getTreeItemElementUri(item: HTMLETreeItemElement): string {\r\n        let uri = \"\";\r\n        let closestItem = <HTMLETreeItemElement | null>item;\r\n        while (closestItem !== null) {\r\n            const {dataset, parentElement} = closestItem;\r\n            const {name} = dataset;\r\n            uri = `${name}/` + uri;\r\n            closestItem = parentElement?.closest(\"e-treeitem\") ?? null;\r\n        }\r\n        return uri;\r\n    }\r\n\r\n    treeItem(element: HTMLETreeItemElement): TreeItemModel | null  {\r\n        return this.model.getItemByUri(this.#getTreeItemElementUri(element));\r\n    }\r\n\r\n    override renderShadow(): Node {\r\n        const {model} = this;\r\n        const treeElement = element(\"e-tree\", {\r\n            attributes: {\r\n                tabindex: 0,\r\n            },\r\n            children: reactiveChildElements(\r\n                model.childItems, item => this.#renderTreeItem(item)\r\n            ),\r\n            listeners: {\r\n                dragstart: <EventListener>this.#handleDragStartEvent.bind(this),\r\n                drop: <EventListener>this.#handleDropEvent.bind(this),\r\n                contextmenu: <EventListener>this.#handleContextMenuEvent.bind(this),\r\n                focus: <EventListener>this.#handleFocusEvent.bind(this),\r\n                focusin: <EventListener>this.#handleFocusInEvent.bind(this),\r\n                focusout: <EventListener>this.#handleFocusOutEvent.bind(this),\r\n            }\r\n        });\r\n        return fragment(\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"/css/main.css\"\r\n                }\r\n            }),\r\n            treeElement,\r\n            element(\"slot\"),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    class: \"offscreen\",\r\n                    hidden: true\r\n                },\r\n                children: reactiveChildElements(model.items,\r\n                    item => this.#renderTreeItemDragImage(item)\r\n                )\r\n            })\r\n        );\r\n    }\r\n\r\n    itemContentDelegate(item: TreeItemModel): string | Node {\r\n        return reactiveElement(\r\n            item,\r\n            element(\"span\"),\r\n            [\"name\"],\r\n            (label, property, oldValue, newValue) => {\r\n                label.textContent = newValue;\r\n            }\r\n        );\r\n    }\r\n\r\n    itemToolbarDelegate(item: TreeItemModel): HTMLEToolBarElement | null {\r\n        return null;\r\n    }\r\n    \r\n    itemMenuDelegate(this: TreeView): HTMLEMenuElement | null {\r\n        return null;\r\n    }\r\n\r\n    selectedItems(): TreeItemModel[] {\r\n        const {treeElement} = this;\r\n        if (treeElement) {\r\n            const selectedElements = treeElement.selectedItems();\r\n            return selectedElements.map(\r\n                item_i => <TreeItemModel>this.treeItem(item_i)\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    activeItem(): TreeItemModel | null {\r\n        const {treeElement} = this;\r\n        if (treeElement) {\r\n            const {activeItem} = treeElement;\r\n            return activeItem ?\r\n                this.treeItem(activeItem) :\r\n                null;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #getDragImage(model: TreeItemModel): Element | null {\r\n        return this.#dragImages.get(model)?.deref() ?? null;\r\n    }\r\n\r\n    #renderTreeItem(item: TreeItemModel): HTMLETreeItemElement {\r\n        const {draggable} = this;\r\n        const {index, level, name} = item;\r\n        const toolbar = this.itemToolbarDelegate(item);\r\n        const content = this.itemContentDelegate(item);\r\n        const treeItemElement = reactiveElement(\r\n            item,\r\n            element(\"e-treeitem\", {\r\n                attributes: {\r\n                    draggable: String(draggable),\r\n                    posinset: index,\r\n                    level: level\r\n                },\r\n                dataset: {\r\n                    name: name\r\n                },\r\n                children: [\r\n                    ...(content ? [content] : []),\r\n                    ...(toolbar ? [toolbar] : [])\r\n                ]\r\n            }),\r\n            [\"index\", \"name\", \"type\"],\r\n            (treeitem, propertyName, oldValue, newValue) => {\r\n                switch (propertyName) {\r\n                    case \"index\": {\r\n                        treeitem.posinset = newValue;\r\n                        break;\r\n                    }\r\n                    case \"name\": {\r\n                        const {dataset} = treeitem;\r\n                        dataset.name = newValue;\r\n                        break;\r\n                    }\r\n                    case \"type\": {\r\n                        treeitem.type = newValue;\r\n                        switch (newValue) {\r\n                            case \"parent\": {\r\n                                treeitem.append(\r\n                                    element(\"e-treeitemgroup\", {\r\n                                        attributes: {\r\n                                            slot: \"group\"\r\n                                        },\r\n                                        children: reactiveChildElements(item.childItems,\r\n                                            item => this.#renderTreeItem(item)\r\n                                        )\r\n                                    })\r\n                                );\r\n                                break;\r\n                            }\r\n                            case \"leaf\": {\r\n                                const {group} = treeitem;\r\n                                if (group) {\r\n                                    group.remove();\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        );\r\n        return treeItemElement;\r\n    }\r\n\r\n    #renderTreeItemDragImage(item: TreeItemModel): Element {\r\n        const dragImageElement = reactiveElement(\r\n            item,\r\n            element(\"span\", {\r\n                attributes: {\r\n                    class: \"dragimage\"\r\n                }\r\n            }),\r\n            [\"name\"],\r\n            (span, property, oldValue, newValue) => {\r\n                span.textContent = newValue;\r\n            }\r\n        );\r\n        this.#dragImages.set(item, new WeakRef(dragImageElement));\r\n        return dragImageElement;\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLETreeElement>currentTarget;\r\n        const targetItem = <HTMLETreeItemElement>(<Element>target).closest(\"e-treeitem\");\r\n        const {model} = this;\r\n        if (targetItem) {\r\n            const {dataTransfer} = event;\r\n            const selectedElements = targetTree.selectedItems();\r\n            const {length: selectedCount} = selectedElements;\r\n            if (selectedCount > 0) {\r\n                const selectedUris = \r\n                    selectedElements\r\n                    .map(element_i => this.#getTreeItemElementUri(element_i))\r\n                    .filter(\r\n                        (uri_i, _, uris) => !uris.some(\r\n                            uri_j => uri_i.startsWith(`${uri_j}/`)\r\n                        )\r\n                    );\r\n                const selectedUrisString = selectedUris.join(\"\\n\");\r\n                const lastUri = selectedUris[selectedUris.length - 1];\r\n                const lastItem = model.getItemByUri(lastUri);\r\n                if (lastItem && dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", selectedUrisString);\r\n                    const dragImage = this.#getDragImage(lastItem);\r\n                    if (dragImage) {\r\n                        dataTransfer.setDragImage(dragImage, -16, 0);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLETreeElement>currentTarget;\r\n        const targetItem = <HTMLETreeItemElement>(<Element>target).closest(\"e-treeitem\");\r\n        const {model} = this;\r\n        const {sortFunction} = model;\r\n        if (targetItem) {\r\n            const {dataTransfer} = event;\r\n            if (dataTransfer) {\r\n                const targetUri = this.#getTreeItemElementUri(targetItem);\r\n                const targetItemModel = model.getItemByUri(targetUri)!;\r\n                const transferedUris = dataTransfer.getData(\"text/plain\").split(\"\\n\");\r\n                const targetIsWithin = transferedUris.some(uri_i => targetUri.startsWith(`${uri_i}/`) || uri_i === targetUri);\r\n                if (!targetIsWithin) {\r\n                    const transferedItems = <TreeItemModel[]>(\r\n                        transferedUris.map(\r\n                            uri_i => model.getItemByUri(uri_i)\r\n                        ).filter(\r\n                            item_i => item_i !== null\r\n                        )\r\n                    );\r\n                    const {type: targetType, parentItem: targetParentItem} = targetItemModel;\r\n                    const {childItems: targetList} =\r\n                        targetType === \"parent\" ? targetItemModel :\r\n                        targetParentItem ? targetParentItem : model;\r\n                    const targetItems = Array.from(targetList.values());\r\n                    targetItems.forEach((item_i) => {\r\n                        const sameLabelIndex = transferedItems.findIndex(item_j => item_j.name === item_i.name);\r\n                        if (sameLabelIndex > -1) {\r\n                            const doReplace = confirm(`Replace ${item_i.name}?`);\r\n                            if (doReplace) {\r\n                                targetList.remove(item_i);\r\n                            }\r\n                            else {\r\n                                transferedItems.copyWithin(sameLabelIndex, sameLabelIndex + 1);\r\n                                transferedItems.length--;\r\n                            }\r\n                        }\r\n                    });\r\n                    const transferedItemsModelList = new TreeItemModelList(transferedItems);\r\n                    transferedItemsModelList.remove();\r\n                    if (sortFunction) {\r\n                        targetList.beginChanges();\r\n                        targetList.append(...transferedItems);\r\n                        targetList.sort(sortFunction);\r\n                        targetList.endChanges();\r\n                    }\r\n                    else {\r\n                        targetList.insert(targetItem.posinset, ...transferedItems);\r\n                    }\r\n                    const newElements = targetTree.querySelectorAll<HTMLETreeItemElement>(`e-treeitem:is(${\r\n                        transferedItems.map(item_i => `[data-uri=\"${item_i.uri}\"]`).join(\",\")\r\n                    })`);\r\n                    targetTree.beginSelection();\r\n                    newElements.forEach(element_i => element_i.selected = true);\r\n                    targetTree.endSelection();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        const {clientX, clientY, currentTarget, target} = event;\r\n        const targetTree = <HTMLETreeElement>currentTarget;\r\n        const targetItem = <HTMLETreeItemElement>(<Element>target).closest(\"e-treeitem\");\r\n        if (targetItem) {\r\n            const contextMenu = this.itemMenuDelegate();\r\n            if (contextMenu !== null) {\r\n                contextMenu.contextual = true;\r\n                contextMenu.addEventListener(\"close\", () => {\r\n                    targetItem.focus({preventScroll: true});\r\n                });\r\n                targetTree.append(contextMenu);\r\n                contextMenu.positionContextual(clientX, clientY);\r\n                contextMenu.focus({preventScroll: true});\r\n            }\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLETreeElement>currentTarget;\r\n        if (relatedTarget !== null  && !this.contains(<Node | null>relatedTarget)) {\r\n            const relatedPosition = (<Node>relatedTarget).compareDocumentPosition(this);\r\n            if (!(relatedPosition & Node.DOCUMENT_POSITION_DISCONNECTED) && (relatedPosition & Node.DOCUMENT_POSITION_PRECEDING)) {\r\n                const {activeItem} = targetTree;\r\n                if (activeItem) {\r\n                    const itemToolbar = activeItem.querySelector(\"e-toolbar\");\r\n                    if (itemToolbar) {\r\n                        event.preventDefault();\r\n                        itemToolbar.focus();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetItem = <HTMLETreeItemElement>(<Element>target).closest(\"e-treeitem\");\r\n        if (targetItem) {\r\n            const itemToolbar = targetItem.querySelector(\"e-toolbar\");\r\n            if (itemToolbar) {\r\n                itemToolbar.tabIndex = itemToolbar.contains(<Node | null>target) ? -1 : 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetItem = <HTMLETreeItemElement>(<Element>target).closest(\"e-treeitem\");\r\n        if (targetItem) {\r\n            const itemToolbar = targetItem.querySelector(\"e-toolbar\");\r\n            if (itemToolbar) {\r\n                itemToolbar.tabIndex = itemToolbar.contains(<Node | null>target) ? 0 : -1;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar TreeView: TreeViewConstructor = TreeViewBase;","export { Key };\r\nexport { KeyModifier };\r\nexport { HotKey };\r\nexport { MouseButton };\r\n\r\nenum Key {\r\n    A = \"a\",\r\n    B = \"b\",\r\n    C = \"c\",\r\n    D = \"d\",\r\n    E = \"e\",\r\n    F = \"f\",\r\n    G = \"g\",\r\n    H = \"h\",\r\n    I = \"i\",\r\n    J = \"j\",\r\n    K = \"k\",\r\n    L = \"l\",\r\n    M = \"m\",\r\n    O = \"o\",\r\n    P = \"p\",\r\n    Q = \"q\",\r\n    R = \"r\",\r\n    S = \"s\",\r\n    T = \"t\",\r\n    U = \"u\",\r\n    V = \"v\",\r\n    W = \"w\",\r\n    X = \"x\",\r\n    Y = \"y\",\r\n    Z = \"z\",\r\n    ENTER = \"Enter\",\r\n    BACKSPACE = \"Backspace\",\r\n    ARROW_DOWN = \"ArrowDown\",\r\n    ARROW_LEFT = \"ArrowLeft\",\r\n    ARROW_RIGHT = \"ArrowRight\",\r\n    ARROW_UP = \"ArrowUp\",\r\n    SHIFT = \"Shift\"\r\n}\r\n\r\nenum KeyModifier {\r\n    Alt = \"Alt\",\r\n    Control = \"Control\",\r\n    Shift = \"Shift\"\r\n}\r\n\r\nenum MouseButton {\r\n    LEFT = 1,\r\n    WHEEL = 2,\r\n    RIGHT = 3,\r\n    FORWARD = 4,\r\n    BACK = 5\r\n}\r\n\r\nclass HotKey {\r\n    readonly key: Key;\r\n    readonly mod1?: KeyModifier;\r\n    readonly mod2?: KeyModifier;\r\n\r\n    constructor(key: Key, mod1?: KeyModifier, mod2?: KeyModifier) {\r\n        this.key = key;\r\n        this.mod1 = mod1;\r\n        this.mod2 = mod2;\r\n    }\r\n\r\n    toString(): string {\r\n        return `${this.mod1 ? `${this.#modifierString(this.mod1)}+` : \"\"}${this.mod2 ? `${this.#modifierString(this.mod2)}+` : \"\"}${(this.key.length == 1) ? this.key.toUpperCase() : this.key}`;\r\n    }\r\n\r\n    test(event: KeyboardEvent): boolean {\r\n        return (!this.mod1 || this.#testModifier(this.mod1, event)) && (!this.mod2 || this.#testModifier(this.mod2, event)) && event.key == this.key;\r\n    }\r\n\r\n    #modifierString(mod: KeyModifier): string {\r\n        switch (mod) {\r\n            case KeyModifier.Control:\r\n                return \"Ctrl\";\r\n            default:\r\n                return mod;\r\n        }\r\n    }\r\n\r\n    #testModifier(mod: KeyModifier, event: KeyboardEvent): boolean {\r\n        switch (mod) {\r\n            case \"Alt\":\r\n                return event.altKey;\r\n            case \"Control\":\r\n                return event.ctrlKey;\r\n            case \"Shift\":\r\n                return event.shiftKey;\r\n            default:\r\n                return true;\r\n        }\r\n    }\r\n}","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEGridCellElement };\r\n\r\ninterface HTMLEGridCellElementConstructor {\r\n    prototype: HTMLEGridCellElement;\r\n    new(): HTMLEGridCellElement;\r\n}\r\n\r\ninterface HTMLEGridCellElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n    headers: string;\r\n    posinset: number;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridcell\": HTMLEGridCellElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-gridcell\"\r\n})\r\nclass HTMLEGridCellElementBase extends HTMLElement implements HTMLEGridCellElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    headers!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: table-cell;\r\n                text-align: left;\r\n            }\r\n            \r\n            :host([type=\"columnheader\"]:hover) {\r\n                background-color: var(--hovered-item-color);\r\n            }\r\n            \r\n            :host(:hover):host-context(e-grid:is(:not([selectby]), [selectby=\"cell\"])) {\r\n                background-color: var(--hovered-item-color);\r\n            }\r\n            \r\n            :host([type=\"columnheader\"][active]) {\r\n                background-color: var(--focused-item-color);\r\n            }\r\n            \r\n            :host([active]):host-context(e-grid:focus-within:is(:not([selectby]), [selectby=\"cell\"])) {\r\n                outline: 1px solid var(--focused-item-outline-color);\r\n                outline-offset: -1px;\r\n            }\r\n\r\n            :host(:focus-visible):host-context(e-grid:focus-within:is([selectby=\"row\"])) {\r\n                outline: none;\r\n            }\r\n            \r\n            :host([selected]):host-context(e-grid:is(:not([selectby]), [selectby=\"cell\"])) {\r\n                background-color: var(--selected-item-color);\r\n            }\r\n        `;\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridCellElement: HTMLEGridCellElementConstructor = HTMLEGridCellElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\n\r\nexport { HTMLEGridBodyElement };\r\n\r\ninterface HTMLEGridBodyElementConstructor {\r\n    prototype: HTMLEGridBodyElement;\r\n    new(): HTMLEGridBodyElement;\r\n}\r\n\r\ninterface HTMLEGridBodyElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    cells(): HTMLEGridCellElement[];\r\n    rows(): HTMLEGridRowElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridbody\": HTMLEGridBodyElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-gridbody\"\r\n})\r\nclass HTMLEGridBodyElementBase extends HTMLElement implements HTMLEGridBodyElement {\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    cells(): HTMLEGridCellElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEGridCellElement>(\r\n            \"e-gridcell\"\r\n        ));\r\n    }\r\n\r\n    rows(): HTMLEGridRowElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEGridRowElement>(\r\n            \"e-gridrow\"\r\n        ));\r\n    }\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: table-row-group;\r\n            }\r\n        `;\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridBodyElement: HTMLEGridBodyElementConstructor = HTMLEGridBodyElementBase;","import { AttributeProperty, CustomElement, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\n\r\nexport { HTMLEGridRowElement };\r\n\r\ninterface HTMLEGridRowElementConstructor {\r\n    prototype: HTMLEGridRowElement;\r\n    new(): HTMLEGridRowElement;\r\n}\r\n\r\ninterface HTMLEGridRowElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    active: boolean;\r\n    selected: boolean;\r\n    posinset: number;\r\n    cells(): HTMLEGridCellElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrow\": HTMLEGridRowElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrow\"\r\n})\r\nclass HTMLEGridRowElementBase extends HTMLElement implements HTMLEGridRowElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    cells(): HTMLEGridCellElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEGridCellElement>(\"e-gridcell\"));\r\n    }\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    #menu: HTMLEMenuElement | null;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: table-row;\r\n            }\r\n            \r\n            :host(:hover):host-context(e-grid:is([selectby=\"row\"])) {\r\n                background-color: var(--hovered-item-color);\r\n            }\r\n            \r\n            :host([active]):host-context(e-grid:focus-within:is([selectby=\"row\"])) {\r\n                outline: 1px solid var(--focused-item-outline-color);\r\n                outline-offset: -1px;\r\n            }\r\n            \r\n            :host([selected]):host-context(e-grid:is([selectby=\"row\"])) {\r\n                background-color: var(--selected-item-color);\r\n            }\r\n        `;\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#menu = null;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedCells = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedCells.forEach((cell_i, i) => {\r\n            cell_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowElement: HTMLEGridRowElementConstructor = HTMLEGridRowElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\n\r\nexport { HTMLEGridRowGroupElement };\r\n\r\ninterface HTMLEGridRowGroupElementConstructor {\r\n    prototype: HTMLEGridRowGroupElement;\r\n    new(): HTMLEGridRowGroupElement;\r\n}\r\n\r\ninterface HTMLEGridRowGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrowgroup\": HTMLEGridRowGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrowgroup\"\r\n})\r\nclass HTMLEGridRowGroupElementBase extends HTMLElement implements HTMLEGridRowGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: table-row-group;\r\n            }\r\n        `;\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowGroupElement: HTMLEGridRowGroupElementConstructor = HTMLEGridRowGroupElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridHeadElement } from \"./GridHead\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\n\r\nexport { HTMLEGridElement };\r\n\r\ninterface HTMLEGridElementConstructor {\r\n    prototype: HTMLEGridElement;\r\n    new(): HTMLEGridElement;\r\n}\r\n\r\ninterface HTMLEGridElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly body: HTMLEGridBodyElement | null;\r\n    readonly head: HTMLEGridHeadElement | null\r\n    readonly activeCell: HTMLEGridCellElement | null;\r\n    readonly activeRow: HTMLEGridRowElement | null;\r\n    selectby: \"cell\" | \"row\";\r\n    name: string;\r\n    multiselectable: boolean;\r\n    cells(): HTMLEGridCellElement[];\r\n    rows(): HTMLEGridRowElement[];\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    clearSelection(): void;\r\n    selectedCells(): HTMLEGridCellElement[];\r\n    selectedRows(): HTMLEGridRowElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-grid\": HTMLEGridElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-grid\"\r\n})\r\nclass HTMLEGridElementBase extends HTMLElement implements HTMLEGridElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    cells(): HTMLEGridCellElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEGridCellElement>(\r\n            \"e-gridcell\"\r\n        ));\r\n    }\r\n\r\n    rows(): HTMLEGridRowElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEGridRowElement>(\r\n            \"e-gridrow\"\r\n        ));\r\n    }\r\n\r\n    get activeCell(): HTMLEGridCellElement | null {\r\n        return this.querySelector<HTMLEGridCellElement>(\"e-gridcell[active]\");\r\n    }\r\n\r\n    get activeRow(): HTMLEGridRowElement | null {\r\n        return this.querySelector<HTMLEGridRowElement>(\"e-gridrow[active]\");\r\n    }\r\n\r\n    get body(): HTMLEGridBodyElement | null {\r\n        return this.querySelector<HTMLEGridBodyElement>(\":scope > e-gridbody\");\r\n    }\r\n\r\n    get head(): HTMLEGridHeadElement | null {\r\n        return this.querySelector<HTMLEGridHeadElement>(\":scope > e-gridhead\");\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"cell\"})\r\n    selectby!: \"cell\" | \"row\";\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    multiselectable!: boolean;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #cellsWalker: TreeWalker;\r\n    #rowsWalker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: table;\r\n                user-select: none;\r\n                line-height: 22px;\r\n            }\r\n            \r\n            :host(:focus) {\r\n                outline: 1px solid var(--focused-item-outline-color);\r\n                outline-offset: -1px;\r\n            }\r\n        `;\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#cellsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#cellsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#rowsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#rowsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"dblclick\", this.#handleDblClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.#clearCellsSelection();\r\n        this.#clearRowsSelection();\r\n    }\r\n\r\n    selectedCells(): HTMLEGridCellElement[] {\r\n        return Array.from(this.querySelectorAll(\"e-gridcell[selected]\"));\r\n    }\r\n\r\n    selectedRows(): HTMLEGridRowElement[] {\r\n        return Array.from(this.querySelectorAll(\"e-gridrow[selected]\"));\r\n    }\r\n\r\n    #cellsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridCellElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement || node instanceof HTMLEGridRowGroupElement || node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #rowsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridRowElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement || node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getCellsRange(from: HTMLEGridCellElement, to: HTMLEGridCellElement): HTMLEGridCellElement[] {\r\n        const cells = Array.from(this.cells());\r\n        const fromIndex = cells.indexOf(from);\r\n        const toIndex = cells.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return cells.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #getRowsRange(from: HTMLEGridRowElement, to: HTMLEGridRowElement): HTMLEGridRowElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleRow = this.#nextRow(from);\r\n            while (nextVisibleRow && nextVisibleRow !== to) {\r\n                range.push(nextVisibleRow);\r\n                nextVisibleRow = this.#nextRow(nextVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleRow = this.#previousRow(from);\r\n            while (previousVisibleRow && previousVisibleRow !== to) {\r\n                range.push(previousVisibleRow);\r\n                previousVisibleRow = this.#previousRow(previousVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setCellsSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((selectedCell_i) => {\r\n            if (!cells.includes(selectedCell_i)) {\r\n                selectedCell_i.selected = false;\r\n            }\r\n        });\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setRowsSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((selectedRow_i) => {\r\n            if (!rows.includes(selectedRow_i)) {\r\n                selectedRow_i.selected = false;\r\n            }\r\n        });\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addCellsToSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addRowsToSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeCellsFromSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        cells.forEach((cell_i) => {\r\n            if (selectedCells.includes(cell_i)) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeRowsFromSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        rows.forEach((row_i) => {\r\n            if (selectedRows.includes(row_i)) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearCellsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((cell_i) => {\r\n            if (cell_i.selected) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearRowsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((row_i) => {\r\n            if (row_i.selected) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveCell(cell: HTMLEGridCellElement | null): void {\r\n        const {activeCell} = this;\r\n        if (activeCell !== null && activeCell !== cell) {\r\n            activeCell.active = false;\r\n            activeCell.tabIndex = -1;\r\n        }\r\n        if (cell !== null) {\r\n            const cellsWalker = this.#cellsWalker;\r\n            cellsWalker.currentNode = cell;\r\n            cell.active = true;\r\n            cell.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #setActiveRow(row: HTMLEGridRowElement | null): void {\r\n        const {activeRow} = this;\r\n        if (activeRow !== null && activeRow !== row) {\r\n            activeRow.active = false;\r\n            activeRow.tabIndex = -1;\r\n        }\r\n        if (row !== null) {\r\n            const rowsWalker = this.#rowsWalker;\r\n            rowsWalker.currentNode = row;\r\n            row.active = true;\r\n            row.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #firstCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.firstChild();\r\n    }\r\n\r\n    #lastCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.lastChild();\r\n    }\r\n\r\n    #previousCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.previousNode();\r\n    }\r\n\r\n    #nextCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.nextNode();\r\n    }\r\n\r\n    #closestRow(cell: HTMLEGridCellElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = cell;\r\n        return <HTMLEGridRowElement | null>rowsWalker.parentNode();\r\n    }\r\n\r\n    #firstRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.firstChild();\r\n    }\r\n\r\n    #lastRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.lastChild();\r\n    }\r\n\r\n    #previousRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.previousNode();\r\n    }\r\n\r\n    #nextRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.nextNode();\r\n    }\r\n\r\n    #topCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const closestRowCells = closestRow.cells();\r\n            const cellIndex = closestRowCells.indexOf(cell);\r\n            const previousRow = this.#previousRow(closestRow);\r\n            if (previousRow) {\r\n                const previousRowCells = previousRow.cells();\r\n                return previousRowCells[\r\n                    Math.min(cellIndex, previousRowCells.length)\r\n                ];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #bottomCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const closestRowCells = closestRow.cells();\r\n            const cellIndex = closestRowCells.indexOf(cell);\r\n            const nextRow = this.#nextRow(closestRow);\r\n            if (nextRow) {\r\n                const nextRowCells = nextRow.cells();\r\n                return nextRowCells[\r\n                    Math.min(cellIndex, nextRowCells.length)\r\n                ];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {ctrlKey, shiftKey} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const composedPath = event.composedPath();\r\n                const targetCell = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridCellElement\r\n                ) : null;\r\n                const selectedCells = this.selectedCells();\r\n                if (targetCell instanceof HTMLEGridCellElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetCell.selected ?\r\n                            this.#addCellsToSelection(targetCell) :\r\n                            this.#removeCellsFromSelection(targetCell);\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedCell = selectedCells[selectedCells.length - 1];\r\n                        if (lastSelectedCell) {\r\n                            const range = this.#getCellsRange(\r\n                                lastSelectedCell,\r\n                                targetCell\r\n                            );\r\n                            if (range) {\r\n                                selectedCells.includes(targetCell) ?\r\n                                    this.#removeCellsFromSelection(...range) :\r\n                                    this.#addCellsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setCellsSelection(targetCell);\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const selectedRows = this.selectedRows();\r\n                const composedPath = event.composedPath();\r\n                const targetRow = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridRowElement\r\n                ) : null;\r\n                if (targetRow instanceof HTMLEGridRowElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetRow.selected ?\r\n                            this.#addRowsToSelection(targetRow) :\r\n                            this.#removeRowsFromSelection(targetRow);\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedRow = selectedRows[selectedRows.length - 1];\r\n                        if (lastSelectedRow) {\r\n                            const range = this.#getRowsRange(\r\n                                lastSelectedRow,\r\n                                targetRow\r\n                            );\r\n                            if (range) {\r\n                                selectedRows.includes(targetRow) ?\r\n                                    this.#removeRowsFromSelection(...range) :\r\n                                    this.#addRowsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setRowsSelection(targetRow);\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleDblClickEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {selectby, activeCell, activeRow} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    switch (selectby) {\r\n                        case \"cell\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const firstCell = firstRow ? this.#firstCell(firstRow) : null;\r\n                            const lastRow = this.#lastRow();\r\n                            const lastCell = lastRow ? this.#lastCell(lastRow) : null;\r\n                            if (firstCell && lastCell) {\r\n                                const range = this.#getCellsRange(firstCell, lastCell);\r\n                                if (range) {\r\n                                    this.#setCellsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"row\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const lastRow = this.#lastRow();\r\n                            if (firstRow && lastRow) {\r\n                                const range = this.#getRowsRange(firstRow, lastRow);\r\n                                if (range) {\r\n                                    this.#setRowsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const previousCell = this.#previousCell(activeCell);\r\n                        if (previousCell) {\r\n                            previousCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousCell.selected ?\r\n                                    this.#removeCellsFromSelection(previousCell) :\r\n                                    this.#addCellsToSelection(previousCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const nextCell = this.#nextCell(activeCell);\r\n                        if (nextCell) {\r\n                            nextCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextCell.selected ?\r\n                                    this.#removeCellsFromSelection(nextCell) :\r\n                                    this.#addCellsToSelection(nextCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const firstRow = activeRow ?? this.#firstRow();\r\n                        const topCell = activeCell ?\r\n                            this.#topCell(activeCell) :\r\n                            firstRow ?\r\n                            this.#firstCell(firstRow) :\r\n                            null;\r\n                        if (topCell) {\r\n                            topCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                topCell.selected ?\r\n                                    this.#removeCellsFromSelection(topCell) :\r\n                                    this.#addCellsToSelection(topCell);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const previousRow = activeRow ?\r\n                            this.#previousRow(activeRow) :\r\n                            this.#firstRow();\r\n                        if (previousRow) {\r\n                            previousRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousRow.selected ?\r\n                                    this.#removeRowsFromSelection(previousRow) :\r\n                                    this.#addRowsToSelection(previousRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const lastRow = activeRow ?? this.#lastRow();\r\n                        const bottomCell = activeCell ?\r\n                            this.#bottomCell(activeCell) :\r\n                            lastRow ?\r\n                            this.#lastCell(lastRow) :\r\n                            null;\r\n                            if (bottomCell) {\r\n                                bottomCell.focus({preventScroll: true});\r\n                                const {shiftKey} = event;\r\n                                if (shiftKey) {\r\n                                    bottomCell.selected ?\r\n                                        this.#removeCellsFromSelection(bottomCell) :\r\n                                        this.#addCellsToSelection(bottomCell);\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"row\": {\r\n                        const nextRow = activeRow ?\r\n                            this.#nextRow(activeRow) :\r\n                            this.#lastRow();\r\n                        if (nextRow) {\r\n                            nextRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextRow.selected ?\r\n                                    this.#removeRowsFromSelection(nextRow) :\r\n                                    this.#addRowsToSelection(nextRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const firstCell = this.#firstCell(activeRow);\r\n                            if (firstCell) {\r\n                                firstCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const firstRow = this.#firstRow();\r\n                        if (firstRow) {\r\n                            firstRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const lastCell = this.#lastCell(activeRow);\r\n                            if (lastCell) {\r\n                                lastCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const lastRow = this.#lastRow();\r\n                        if (lastRow) {\r\n                            lastRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeCell) {\r\n                            this.#setCellsSelection(activeCell);\r\n                            activeCell.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        if (activeRow) {\r\n                            this.#setRowsSelection(activeRow);\r\n                            activeRow.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        this.#clearCellsSelection();\r\n                        this.#setActiveCell(null);\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        this.#clearRowsSelection();\r\n                        this.#setActiveRow(null);\r\n                        break;\r\n                    }\r\n                }\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const {activeCell} = this;\r\n                if (activeCell && relatedTarget !== activeCell) {\r\n                    activeCell.focus();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const {activeRow} = this;\r\n                if (activeRow && relatedTarget !== activeRow) {\r\n                    activeRow.focus();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLEGridCellElement>(\"e-gridcell\");\r\n                if (targetCell) {\r\n                    this.#setActiveCell(targetCell);\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLEGridRowElement>(\"e-gridrow\");\r\n                if (targetRow) {\r\n                    this.#setActiveRow(targetRow);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedRows = <HTMLEGridRowElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridRowElement\r\n            );\r\n            assignedRows.forEach((row_i, i) => {\r\n                row_i.posinset = i;\r\n            });\r\n    }\r\n}\r\n\r\nvar HTMLEGridElement: HTMLEGridElementConstructor = HTMLEGridElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\n\r\nexport { HTMLEGridHeadElement };\r\n\r\ninterface HTMLEGridHeadElementConstructor {\r\n    prototype: HTMLEGridHeadElement;\r\n    new(): HTMLEGridHeadElement;\r\n}\r\n\r\ninterface HTMLEGridHeadElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    cells(): HTMLEGridCellElement[];\r\n    rows(): HTMLEGridRowElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridhead\": HTMLEGridHeadElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-gridhead\"\r\n})\r\nclass HTMLEGridHeadElementBase extends HTMLElement implements HTMLEGridHeadElement {\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    cells(): HTMLEGridCellElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEGridCellElement>(\r\n            \"e-gridcell\"\r\n        ));\r\n    }\r\n\r\n    rows(): HTMLEGridRowElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEGridRowElement>(\r\n            \"e-gridrow\"\r\n        ));\r\n    }\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: table-row-group;\r\n            }\r\n        `;\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridHeadElement: HTMLEGridHeadElementConstructor = HTMLEGridHeadElementBase;","import { element, CustomElement, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuItemElement, EMenuItem } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuItemGroupElement };\r\nexport { EMenuItemGroup };\r\n\r\ninterface HTMLEMenuItemGroupElementConstructor {\r\n    prototype: HTMLEMenuItemGroupElement;\r\n    new(): HTMLEMenuItemGroupElement;\r\n}\r\n\r\ninterface HTMLEMenuItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    label: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitemgroup\": HTMLEMenuItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitemgroup\"\r\n})\r\nclass HTMLEMenuItemGroupElementBase extends HTMLElement implements HTMLEMenuItemGroupElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"label\"\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: flex;\r\n                flex-direction: column;\r\n            }\r\n            \r\n            [part=\"label\"] {\r\n                font-weight: bold;\r\n            }\r\n            \r\n            :host([label]) [part=\"label\"] {\r\n                padding-bottom: 6px;\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        const internals = this.attachInternals();\r\n        internals.role = \"group\";\r\n        this.internals = internals;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        const {internals} = this;\r\n        switch (name) {\r\n            case \"label\":\r\n                internals.ariaLabel = newValue;\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemGroupElement: HTMLEMenuItemGroupElementConstructor = HTMLEMenuItemGroupElementBase;\r\n\r\ninterface EMenuItemGroupConstructor {\r\n    prototype: HTMLEMenuItemGroupElement;\r\n    new(init: {\r\n        name?: string;\r\n        items: HTMLEMenuItemElement[];\r\n    }): HTMLEMenuItemGroupElement;\r\n    radios(init: {name: string, items: {label: string, value: string}[]}): HTMLEMenuItemGroupElement;\r\n}\r\n\r\nvar EMenuItemGroup = <EMenuItemGroupConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string,\r\n        items: HTMLEMenuItemElement[]\r\n    }) {\r\n        const {name, items} = init;\r\n        return element(\"e-menuitemgroup\", {\r\n            attributes: {\r\n                name: name\r\n            },\r\n            children: items\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemGroupElement.prototype,\r\n        radios: (init: {\r\n            name: string,\r\n            items: {\r\n                label: string,\r\n                value: string\r\n            }[]\r\n        }) => {\r\n            const {name, items} = init;\r\n            return element(\"e-menuitemgroup\", {\r\n                attributes: {\r\n                    name: name\r\n                },\r\n                children: items.map(\r\n                    ({label, value}) => new EMenuItem({name, label, type: \"radio\", value})\r\n                )\r\n            });\r\n        }\r\n    }\r\n);","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuElement };\r\nexport { EMenu };\r\n\r\ninterface HTMLEMenuElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    firstItem(): HTMLEMenuItemElement | null;\r\n    items(): HTMLEMenuItemElement[];\r\n    name: string;\r\n    contextual: boolean;\r\n    connectedCallback(): void;\r\n    positionContextual(x: number, y: number): void;\r\n}\r\n\r\ninterface HTMLEMenuElementConstructor {\r\n    prototype: HTMLEMenuElement;\r\n    new(): HTMLEMenuElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menu\": HTMLEMenuElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\nvar toggleAnimations: WeakMap<HTMLEMenuItemElement, Animation>;\r\nvar HIDE_DELAY_MS = 200;\r\nvar SHOW_DELAY_MS = 400;\r\n\r\n@CustomElement({\r\n    name: \"e-menu\"\r\n})\r\nclass HTMLEMenuElementBase extends HTMLElement implements HTMLEMenuElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    items(): HTMLEMenuItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        ));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        const {activeIndex} = this;\r\n        return this.querySelector<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem:focus-within\"\r\n        ) ?? activeIndex > -1 ? this.items()[activeIndex] ?? null : null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    contextual!: boolean;\r\n\r\n    #walker: TreeWalker;\r\n    #activeIndex: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: flex;\r\n                flex-direction: column;\r\n            \r\n                padding: 3px;\r\n                background-color: white;\r\n                width: max-content;\r\n                box-sizing: border-box;\r\n            \r\n                -webkit-box-shadow: var(--menu-box-shadow);\r\n                box-shadow: var(--menu-box-shadow);\r\n            }\r\n            \r\n            :host([contextual]) {\r\n                z-index: 1;\r\n                position: absolute;\r\n            \r\n                transition-property: opacity;\r\n                transition-duration: 0.2s;\r\n                opacity: 0;\r\n            }\r\n            \r\n            :host([contextual]:focus-within) {\r\n                opacity: 1;\r\n            }\r\n        `;\r\n        toggleAnimations = new WeakMap();\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#activeIndex = -1;\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"mouseout\", this.#handleMouseOutEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const tabindex = this.getAttribute(\"tabindex\");\r\n        this.tabIndex = tabindex !== null ? parseInt(tabindex) : -1;\r\n    }\r\n\r\n    positionContextual(x: number, y: number): void {\r\n        const {style} = this;\r\n        const {width: menuWidth, height: menuHeight} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        const left = x + scrollX;\r\n        const top = y + scrollY;\r\n        const {clientWidth, clientHeight} = document.body;\r\n        const overflowX = left + menuWidth - clientWidth;\r\n        const overflowY = top + menuHeight - clientHeight;\r\n        style.setProperty(\"left\", `${overflowX > 0 ? left - menuWidth : left}px`);\r\n        style.setProperty(\"top\", `${overflowY > 0 ? top - menuHeight : top}px`);\r\n    }\r\n\r\n    #collapseSubmenus(): void {\r\n        this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem[expanded]\"\r\n        )\r\n        .forEach((item_i) => {\r\n            item_i.collapse();\r\n        });\r\n    }\r\n    \r\n    #nearestItem(target: Element): HTMLEMenuItemElement | null {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextNode();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        return menu instanceof HTMLEMenuElementBase ?\r\n            menu.firstItem() :\r\n            null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        if (item !== null) {\r\n            this.#activeIndex = this.items().indexOf(item);\r\n        }\r\n    }\r\n    \r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetItem = (<HTMLElement>target).closest(\"e-menuitem\");\r\n        if (targetItem) {\r\n            const {type, checked} = targetItem;\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    targetItem.checked = !checked;\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    const {name, value} = targetItem;\r\n                    targetItem.checked = true;\r\n                    this.querySelectorAll<HTMLEMenuItemElement>(\r\n                        `:is(:scope, :scope > e-menuitemgroup) > e-menuitem[type=radio][name=${name}]`\r\n                    )\r\n                    .forEach((radio_i) => {\r\n                        radio_i.checked = radio_i.value == value;\r\n                    });\r\n                    break;\r\n                }\r\n                case \"menu\":\r\n                case \"submenu\": {\r\n                    targetItem.toggle();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem) {\r\n                this.#setActiveItem(nearestItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const {contextual} = this;\r\n            if (contextual) {\r\n                try {\r\n                    this.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const {activeItem} = this;\r\n                if (activeItem?.expanded) {\r\n                    activeItem.collapse();\r\n                }\r\n                this.#setActiveItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.firstItem() :\r\n                    this.firstItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.firstItem();\r\n                firstItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                lastItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"menu\":\r\n                        case \"submenu\": {\r\n                            activeItem.expand();\r\n                            if (activeItem.expanded) {\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                            }\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            activeItem.click();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                    else {\r\n                        const {contextual} = this;\r\n                        if (contextual) {\r\n                            this.blur();\r\n                            this.dispatchEvent(new Event(\"close\", {bubbles: true}));\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            if (!activeItem.expanded) {\r\n                                activeItem.expand();\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                                event.stopPropagation();\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOutEvent(event: MouseEvent): void {\r\n        const {target, relatedTarget} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem !== null) {\r\n                if (nearestItem.type == \"submenu\" &&\r\n                    !nearestItem.expanded) {\r\n                    toggleAnimations.get(nearestItem)?.cancel();\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLEMenuElement\r\n                ) == this;\r\n                if (isTargetClosestMenu) {\r\n                    const {activeItem} = this;\r\n                    if (activeItem?.type == \"submenu\" &&\r\n                        activeItem.expanded) {\r\n                        let toggleAnimation = toggleAnimations.get(activeItem);\r\n                        if (toggleAnimation) {\r\n                            toggleAnimation.cancel();\r\n                        }\r\n                        toggleAnimation = activeItem.animate(null, {\r\n                            duration: HIDE_DELAY_MS\r\n                        });\r\n                        toggleAnimations.set(activeItem, toggleAnimation);\r\n                        const {finished} = toggleAnimation;\r\n                        finished\r\n                            .then(() => {\r\n                                activeItem.collapse();\r\n                            })\r\n                            .catch(() => undefined)\r\n                            .finally(() => {\r\n                                toggleAnimations.delete(activeItem);\r\n                            });\r\n                    }\r\n                    const {clientX, clientY} = event;\r\n                    const {left, right, top, bottom} = this.getBoundingClientRect();\r\n                    const intersectsWithMouse = !(\r\n                        left > clientX || right < clientX || top > clientY || bottom < clientY\r\n                    );\r\n                    const containsRelatedTarget = this.contains(<Node>relatedTarget);\r\n                    if (intersectsWithMouse && containsRelatedTarget) {\r\n                        if (relatedTarget instanceof HTMLEMenuElement && relatedTarget !== this) {\r\n                            relatedTarget.focus({preventScroll: true});\r\n                        }\r\n                        else {\r\n                            this.focus({preventScroll: true});\r\n                            this.#setActiveItem(null);\r\n                        }\r\n                    }\r\n                    if (!intersectsWithMouse) {\r\n                        this.focus({preventScroll: true});\r\n                        this.#setActiveItem(null);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem !== null) {\r\n                if (nearestItem.type === \"submenu\" && nearestItem.expanded) {\r\n                    toggleAnimations.get(nearestItem)?.cancel();\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLEMenuElement\r\n                ) == this;\r\n                if (isTargetClosestMenu) {\r\n                    const {activeItem} = this;\r\n                    if (activeItem?.type === \"submenu\" &&\r\n                        activeItem.expanded && \r\n                        !activeItem.contains(<Node>target)) {\r\n                        let toggleAnimation = toggleAnimations.get(activeItem);\r\n                        if (toggleAnimation) {\r\n                            toggleAnimation.cancel();\r\n                        }\r\n                        toggleAnimation = activeItem.animate(null, {\r\n                            duration: SHOW_DELAY_MS\r\n                        });\r\n                        toggleAnimations.set(activeItem, toggleAnimation);\r\n                        const {finished} = toggleAnimation;\r\n                        finished\r\n                            .then(() => {\r\n                                activeItem.collapse();\r\n                            })\r\n                            .catch(() => undefined)\r\n                            .finally(() => {\r\n                                toggleAnimations.delete(activeItem);\r\n                            });\r\n                    }\r\n                    this.#setActiveItem(nearestItem);\r\n                    nearestItem.focus({preventScroll: true});\r\n                    if (nearestItem.type === \"submenu\") {\r\n                        if (!nearestItem.expanded) {\r\n                            let toggleAnimation = toggleAnimations.get(nearestItem);\r\n                            if (toggleAnimation) {\r\n                                toggleAnimation.cancel();\r\n                            }\r\n                            toggleAnimation = nearestItem.animate(null, {\r\n                                duration: HIDE_DELAY_MS\r\n                            });\r\n                            toggleAnimations.set(nearestItem, toggleAnimation);\r\n                            const {finished} = toggleAnimation;\r\n                            finished\r\n                                .then(() => {\r\n                                    const {activeItem} = this;\r\n                                    this.#collapseSubmenus();\r\n                                    if (activeItem) {\r\n                                        toggleAnimations.get(activeItem)?.cancel();\r\n                                        activeItem.expand();\r\n                                        activeItem.menu?.focus({preventScroll: true});\r\n                                    }\r\n                                })\r\n                                .catch(() => undefined)\r\n                                .finally(() => {\r\n                                    toggleAnimations.delete(nearestItem);\r\n                                });\r\n                        }\r\n                        else {\r\n                            nearestItem.menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuElement: HTMLEMenuElementConstructor = HTMLEMenuElementBase;\r\n\r\ninterface EMenuConstructor {\r\n    prototype: HTMLEMenuElement;\r\n    new(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }): HTMLEMenuElement;\r\n}\r\n\r\nvar EMenu = <EMenuConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }) {\r\n        const {name, children} = init;\r\n        return element(\"e-menu\", {\r\n            attributes: {\r\n                name: name,\r\n                tabindex: -1,\r\n            },\r\n            children: children\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuElement.prototype,\r\n    }\r\n);","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuBarElement };\r\n\r\ninterface HTMLEMenuBarElementConstructor {\r\n    prototype: HTMLEMenuBarElement;\r\n    new(): HTMLEMenuBarElement;\r\n}\r\n\r\ninterface HTMLEMenuBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    items(): HTMLEMenuItemElement[];\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    expanded: boolean;\r\n    connectedCallback(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menubar\": HTMLEMenuBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-menubar\"\r\n})\r\nclass HTMLEMenuBarElementBase extends HTMLElement implements HTMLEMenuBarElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    #activeIndex: number;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: flex;\r\n                flex-direction: row;\r\n                width: max-content;\r\n            }\r\n            \r\n            :host(:focus) {\r\n                outline: 1px solid var(--focused-item-outline-color);\r\n                outline-offset: -1px;\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const tabindex = this.getAttribute(\"tabindex\");\r\n        this.tabIndex = tabindex !== null ? parseInt(tabindex) : -1;\r\n    }\r\n\r\n    items(): HTMLEMenuItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        ));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        const {activeIndex} = this;\r\n        return this.querySelector<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem:focus-within\"\r\n        ) ?? activeIndex > -1 ? this.items()[activeIndex] ?? null : null;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement && !(node.disabled || node.hidden)) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLEMenuItemElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        const {activeItem, expanded} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.collapse();\r\n        }\r\n        if (item !== null) {\r\n            if (expanded) {\r\n                item.expand();\r\n            }\r\n            this.#activeIndex = this.items().indexOf(item);\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    get #items(): HTMLEMenuItemElement[] {\r\n        return Array.from(\r\n            this.querySelectorAll(\":is(:scope, :scope > e-menuitemgroup) > e-menuitem\")\r\n        );\r\n    }\r\n\r\n    #isClosestMenu(target: Element): boolean {\r\n        return target.closest(\":is(e-menubar, e-menu)\") == this;\r\n    }\r\n\r\n    #nearestItem(target: Element): HTMLEMenuItemElement | null {\r\n        return this.#items.find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n    \r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (!this.contains(<Node | null>relatedTarget)) {\r\n            (activeItem ?? this.firstItem())?.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof Element) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            this.#setActiveItem(nearestItem);\r\n            this.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, relatedTarget} = event;\r\n        if (target instanceof HTMLElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem) {\r\n                nearestItem.collapse();\r\n            }\r\n        }\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.expanded = false;\r\n            this.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {expanded, activeItem} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu && target !== activeItem && expanded) {\r\n                const {menu} = target;\r\n                if (menu) {\r\n                    target.expand();\r\n                    menu.focus({preventScroll: true});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {expanded, activeItem} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu) {\r\n                const isExpanded = !expanded;\r\n                this.expanded = isExpanded;\r\n                if (isExpanded) {\r\n                    if (activeItem && !activeItem.expanded) {\r\n                        activeItem.expand();\r\n                    }\r\n                    const {menu} = target;\r\n                    menu?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    if (activeItem) {\r\n                        activeItem.collapse();\r\n                        activeItem.blur();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded} = this;\r\n        let {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.firstItem() : \r\n                    this.#lastItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    this.expanded = !expanded;\r\n                    if (!expanded) {\r\n                        const firstChildItem = this.#firstChildItem(activeItem);\r\n                        firstChildItem?.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.expanded = false;\r\n                    if (activeItem) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuBarElement: HTMLEMenuBarElementConstructor = HTMLEMenuBarElementBase;","import { CustomElement, AttributeProperty, element, QueryProperty } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuButtonElement };\r\nexport { EMenuButton };\r\n\r\ninterface HTMLEMenuButtonElementConstructor {\r\n    prototype: HTMLEMenuButtonElement;\r\n    new(): HTMLEMenuButtonElement;\r\n}\r\n\r\ninterface HTMLEMenuButtonElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    readonly firstItem: HTMLEMenuItemElement | null;\r\n    name: string;\r\n    disabled: boolean;\r\n    expanded: boolean;\r\n    connectedCallback(): void;\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-menubutton\"\r\n})\r\nclass HTMLEMenuButtonElementBase extends HTMLElement implements HTMLEMenuButtonElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @QueryProperty({selector: \":scope > e-menu[slot=menu]\"})\r\n    readonly menu!: HTMLEMenuElement | null;\r\n    \r\n    @QueryProperty({selector: \":scope > e-menu[slot=menu] e-menuitem\"})\r\n    readonly firstItem!: HTMLEMenuItemElement | null;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\"),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: inline-block;\r\n                padding: 2px;\r\n                line-height: 18px;\r\n                user-select: none;\r\n                white-space: nowrap;\r\n                cursor: pointer;\r\n            }\r\n            \r\n            :host(:focus) {\r\n                outline: 1px solid var(--focused-item-outline-color);\r\n                outline-offset: -1px;\r\n            }\r\n            \r\n            :host(:focus-within:not(:focus)) {\r\n                background-color: var(--focused-item-color);\r\n            }\r\n            \r\n            :host(:hover:not(:focus-within)) {\r\n                background-color: var(--hovered-item-color);\r\n            }\r\n            \r\n            :host([disabled]) {\r\n                color: lightgray;\r\n            }\r\n            \r\n            ::slotted([slot=\"menu\"]) {\r\n                z-index: 1;\r\n                position: absolute;\r\n                color: initial;\r\n            }\r\n            \r\n            :host(:not([expanded])) ::slotted([slot=\"menu\"]) {\r\n                opacity: 0;\r\n                pointer-events: none;\r\n            }\r\n            \r\n            :host::after {\r\n                display: inline-block;\r\n                text-align: center;\r\n                width: 18px;\r\n                height: 18px;\r\n                content: \"▾\";\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const tabindex = this.getAttribute(\"tabindex\");\r\n        this.tabIndex = tabindex !== null ? parseInt(tabindex) : -1;\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {expanded} = this;\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n\r\n    expand(): void {\r\n        const {expanded} = this;\r\n        if (!expanded) {\r\n            this.expanded = true;\r\n            this.#positionMenu();\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {expanded} = this;\r\n        if (expanded) {\r\n            this.expanded = false;\r\n        }\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            let {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const offsetParent = <HTMLElement>(menu.offsetParent ?? document.body);\r\n            const {offsetLeft, offsetTop} = offsetParent;\r\n            const overflowX = itemRight + menuWidth - clientWidth;\r\n            const overflowY = itemTop + menuHeight - clientHeight;\r\n            itemLeft -= offsetLeft;\r\n            itemRight -= offsetLeft;\r\n            itemTop -= offsetTop;\r\n            itemBottom -= offsetTop;\r\n            menuStyle.setProperty(\"left\", `${\r\n                overflowX > 0 ?\r\n                itemRight - menuWidth :\r\n                itemLeft\r\n            }px`);\r\n            menuStyle.setProperty(\"top\", `${\r\n                overflowY > 0 ?\r\n                itemTop - menuHeight :\r\n                itemBottom\r\n            }px`);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {menu} = this;\r\n        if (menu && !menu.contains(<Node>target)) {\r\n            this.toggle();\r\n            const {expanded} = this;\r\n            if (expanded) {\r\n                menu?.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded} = this;\r\n        switch (key) {\r\n            case \"ArrowDown\":\r\n            case \"Enter\":\r\n                if (!expanded) {\r\n                    this.expand();\r\n                    this.firstItem?.focus({preventScroll: true});\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            case \"Escape\":\r\n                if (expanded) {\r\n                    this.collapse();\r\n                }\r\n                this.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuButtonElement: HTMLEMenuButtonElementConstructor = HTMLEMenuButtonElementBase;\r\n\r\ninterface EMenuButtonConstructor {\r\n    prototype: HTMLEMenuButtonElement;\r\n    new(init: {\r\n        menu: HTMLEMenuElement\r\n    }): HTMLEMenuButtonElement;\r\n}\r\n\r\nvar EMenuButton = <EMenuButtonConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        menu: HTMLEMenuElement\r\n    }) {\r\n        const {menu} = init;\r\n        menu.slot = \"menu\";\r\n        return element(\"e-menubutton\", {\r\n            attributes: {\r\n                tabindex: -1\r\n            },\r\n            children: [menu]\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuButtonElement.prototype,\r\n    }\r\n);","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element, QueryProperty } from \"../../Element\";\r\nimport { HTMLEMenuButtonElement } from \"../menus/MenuButton\";\r\n\r\nexport { HTMLEToolBarItemElement };\r\nexport { EToolBarItem };\r\n\r\ninterface HTMLEToolBarItemElementConstructor {\r\n    prototype: HTMLEToolBarItemElement;\r\n    new(): HTMLEToolBarItemElement;\r\n}\r\n\r\ninterface HTMLEToolBarItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menubutton: HTMLEMenuButtonElement | null;\r\n    readonly select: HTMLESelectElement | null;\r\n    value: string;\r\n    name: string;\r\n    label: string;\r\n    active: boolean;\r\n    pressed: boolean;\r\n    iconed: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritem\": HTMLEToolBarItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\nvar iconPart: HTMLElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritem\"\r\n})\r\nclass HTMLEToolBarItemElementBase extends HTMLElement implements HTMLEToolBarItemElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @QueryProperty({selector: \":scope > e-menubutton[slot=menubutton]\"})\r\n    readonly menubutton!: HTMLEMenuButtonElement | null;\r\n    \r\n    @QueryProperty({selector: \":scope > e-select[slot=select]\"})\r\n    readonly select!: HTMLESelectElement | null;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    pressed!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    iconed!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\"),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"select\"\r\n                }\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menubutton\"\r\n                }\r\n            })\r\n        );\r\n        iconPart = element(\"span\", {\r\n            attributes: {\r\n                part: \"icon\"\r\n            }\r\n        });\r\n        style = /*css*/`\r\n            :host {\r\n                display: flex;\r\n                user-select: none;\r\n                white-space: nowrap;\r\n                cursor: pointer;\r\n                line-height: 22px;\r\n            }\r\n            \r\n            :host([disabled]) {\r\n                opacity: 0.38;\r\n                pointer-events: none;\r\n            }\r\n            \r\n            :host(:hover) {\r\n                background-color: var(--hovered-item-color);\r\n            }\r\n            \r\n            :host([pressed]) {\r\n                background-color: var(--activated-item-color);\r\n            }\r\n            \r\n            :host(:not([iconed])) [part=\"icon\"] {\r\n                display: none;\r\n            }\r\n\r\n            [part=\"icon\"] {\r\n                flex: none;\r\n                display: inline-block;\r\n                width: 18px;\r\n                height: 18px;\r\n                padding: 2px;\r\n                overflow: hidden;\r\n            }\r\n            \r\n            [part=\"icon\"]::before {\r\n                display: inline-block;\r\n                width: 18px;\r\n                height: 18px;\r\n                content: \"\";\r\n                mask-size: 18px 18px;\r\n                -webkit-mask-size: 18px 18px;\r\n                background-color: var(--icon-color, none);\r\n                -webkit-mask-image: var(--icon-image, none);\r\n                mask-image: var(--icon-image, none);\r\n                filter: var(--icon-filter, none);\r\n            }\r\n            \r\n            :host(:focus-within):host-context(e-toolbar:focus-within) {\r\n                outline: 1px solid var(--focused-item-outline-color);\r\n                outline-offset: -1px;\r\n            }\r\n            \r\n            /*:host([type=\"menubutton\"]) ::slotted(e-menubutton):focus,\r\n            :host([type=\"select\"]) ::slotted(e-select):focus {\r\n                outline: none;\r\n                outline-offset: none;\r\n            }*/\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                //...\r\n                break;\r\n            }\r\n            case \"iconed\": {\r\n                const {shadowRoot} = this;\r\n                if (newValue !== null) {\r\n                    shadowRoot.prepend(iconPart.cloneNode(true));\r\n                }\r\n                else {\r\n                    const iconPart = shadowRoot.querySelector<HTMLElement>(\"[part=icon]\");\r\n                    if (iconPart) {\r\n                        iconPart.remove();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemElement: HTMLEToolBarItemElementConstructor = HTMLEToolBarItemElementBase;\r\n\r\ninterface EToolBarItemConstructor {\r\n    prototype: HTMLEToolBarItemElement;\r\n    new(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n    button(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    checkbox(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    radio(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    menubutton(init: {\r\n        name: string;\r\n        label: string;\r\n        menubutton: HTMLEMenuButtonElement;\r\n    }): HTMLEToolBarItemElement;\r\n    select(init: {\r\n        name: string;\r\n        label: string;\r\n        select: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n}\r\n\r\nvar EToolBarItem = <EToolBarItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menubutton, select} = init;\r\n        if (menubutton) {\r\n            menubutton.slot = \"menubutton\";\r\n        }\r\n        if (select) {\r\n            select.slot = \"select\";\r\n        }\r\n        return element(\"e-toolbaritem\", {\r\n            attributes: {\r\n                tabindex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type\r\n            },\r\n            children: menubutton ? [menubutton] : select ? [select] : undefined,\r\n            listeners: {\r\n                click: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEToolBarItemElement.prototype,\r\n        button(init: {\r\n            name: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menubutton(init: {\r\n            name: string;\r\n            label: string;\r\n            menubutton: HTMLEMenuButtonElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"menubutton\"\r\n            });\r\n        },\r\n        select(init: {\r\n            name: string;\r\n            label: string;\r\n            select: HTMLESelectElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"select\"\r\n            });\r\n        },\r\n    }\r\n);","\r\nimport { element, CustomElement, AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEToolBarItemGroupElement };\r\n\r\ninterface HTMLEToolBarItemGroupElementConstructor {\r\n    prototype: HTMLEToolBarItemGroupElement;\r\n    new(): HTMLEToolBarItemGroupElement;\r\n}\r\n\r\ninterface HTMLEToolBarItemGroupElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritemgroup\": HTMLEToolBarItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritemgroup\"\r\n})\r\nclass HTMLEToolBarItemGroupElementBase extends HTMLElement implements HTMLEToolBarItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: flex;\r\n                width: max-content;\r\n                flex-direction: row;\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const label = this.shadowRoot.querySelector<HTMLLabelElement>(\"[part='label']\");\r\n                if (label) {\r\n                    label.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemGroupElement: HTMLEToolBarItemGroupElementConstructor = HTMLEToolBarItemGroupElementBase;","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEToolBarItemElement } from \"./ToolBarItem\";\r\nimport { HTMLEToolBarItemGroupElement } from \"./ToolBarItemGroup\";\r\n\r\nexport { HTMLEToolBarElement };\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\ninterface HTMLEToolBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly activeItem: HTMLEToolBarItemElement | null;\r\n    items(): HTMLEToolBarItemElement[];\r\n    firstItem(): HTMLEToolBarItemElement | null;\r\n    name: string;\r\n    orientation: ToolBarOrientation;\r\n}\r\n\r\ninterface HTMLEToolbarElementConstructor {\r\n    prototype: HTMLEToolBarElement;\r\n    new(): HTMLEToolBarElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbar\": HTMLEToolBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\nvar wasExpandedOnMouseDown: WeakMap<HTMLEToolBarItemElement, boolean>;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbar\"\r\n})\r\nclass HTMLEToolBarElementBase extends HTMLElement implements HTMLEToolBarElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get activeItem(): HTMLEToolBarItemElement | null {\r\n        return this.querySelector<HTMLEToolBarItemElement>(\r\n            \"e-toolbaritem[active]\"\r\n        );\r\n    }\r\n\r\n    items(): HTMLEToolBarItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEToolBarItemElement>(\r\n            \":is(:scope, :scope > e-toolbaritemgroup) > e-toolbaritem\"\r\n        ));\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    orientation!: ToolBarOrientation;\r\n\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        wasExpandedOnMouseDown = new WeakMap();\r\n        style = /*css*/`\r\n            :host {\r\n                display: flex;\r\n                flex-direction: row;\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"dblclick\", this.#handleDblClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEToolBarItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEToolBarItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    firstItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEToolBarItemElement | null>walker.previousSibling();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEToolBarItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEToolBarItemElement | null): void {\r\n        const {activeItem} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetItem = (<HTMLElement>target).closest(\"e-toolbaritem\");\r\n        if (targetItem) {\r\n            const {type, pressed} = targetItem;\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    targetItem.pressed = !pressed;\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    targetItem.pressed = true;\r\n                    break;\r\n                }\r\n                case \"menubutton\": {\r\n                    const {menubutton} = targetItem;\r\n                    if (menubutton && !menubutton.contains(<Node>target)) {\r\n                        const force = !wasExpandedOnMouseDown.get(targetItem) ?? true;\r\n                        menubutton.toggle(force);\r\n                        if (force) {\r\n                            menubutton.firstItem?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                case \"select\": {\r\n                    const {select} = targetItem;\r\n                    if (select && !select.contains(<Node>target)) {\r\n                        const force = !wasExpandedOnMouseDown.get(targetItem) ?? true;\r\n                        select.toggle(force);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleDblClickEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (!this.contains(<Node>relatedTarget)) {\r\n            (activeItem ?? this.firstItem())?.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetItem = <HTMLEToolBarItemElement | null>(<HTMLElement>target).closest(\"e-toolbaritem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetItem);\r\n            this.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetItem = (<HTMLElement>target).closest(\"e-toolbaritem\");\r\n        if (targetItem) {\r\n            const {type} = targetItem;\r\n            switch (type) {\r\n                case \"menubutton\": {\r\n                    const {menubutton} = targetItem;\r\n                    if (menubutton && !menubutton.contains(<Node>target)) {\r\n                        wasExpandedOnMouseDown.set(targetItem, menubutton.expanded);\r\n                    }\r\n                    break;\r\n                }\r\n                case \"select\": {\r\n                    const {select} = targetItem;\r\n                    if (select && !select.contains(<Node>target)) {\r\n                        wasExpandedOnMouseDown.set(targetItem, select.expanded);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"menubutton\": {\r\n                            const {menubutton} = activeItem;\r\n                            if (menubutton) {\r\n                                menubutton.expand();\r\n                                menubutton.firstItem?.focus({preventScroll: true});\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"select\": {\r\n                            const {select} = activeItem;\r\n                            if (select) {\r\n                                select.expand();\r\n                            }\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            activeItem.click();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"select\": {\r\n                            activeItem.select?.expand();\r\n                            event.stopPropagation();\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarElement: HTMLEToolbarElementConstructor = HTMLEToolBarElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEStatusItemElement };\r\nexport { EStatusItem };\r\n\r\ninterface HTMLEStatusItemElementConstructor {\r\n    prototype: HTMLEStatusItemElement;\r\n    new(): HTMLEStatusItemElement;\r\n}\r\n\r\ninterface HTMLEStatusItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    active: boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-statusitem\": HTMLEStatusItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-statusitem\"\r\n})\r\nclass HTMLEStatusItemElementBase extends HTMLElement implements HTMLEStatusItemElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: element(\"slot\")\r\n            })\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: flex;\r\n                user-select: none;\r\n                white-space: nowrap;\r\n                cursor: pointer;\r\n                line-height: 22px;\r\n            }\r\n            \r\n            :host([disabled]) {\r\n                opacity: 0.38;\r\n                pointer-events: none;\r\n            }\r\n            \r\n            :host(:hover) {\r\n                background-color: var(--hovered-item-color);\r\n            }\r\n            \r\n            :host(:focus-within):host-context(e-statusbar:focus-within) {\r\n                outline: 1px solid var(--focused-item-outline-color);\r\n                outline-offset: -1px;\r\n            }\r\n            \r\n            [part=\"content\"] {\r\n                padding: 0 4px;\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n}\r\n\r\nvar HTMLEStatusItemElement: HTMLEStatusItemElementConstructor = HTMLEStatusItemElementBase;\r\n\r\ninterface EStatusItemConstructor {\r\n    prototype: HTMLEStatusItemElement;\r\n    new(init: {\r\n        name: string;\r\n        label: string;\r\n        onclick?: () => void;\r\n    }): HTMLEStatusItemElement;\r\n}\r\n\r\nvar EStatusItem = <EStatusItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name: string;\r\n        label: string;\r\n        onclick?: () => void;\r\n    }) {\r\n        const {label, name, onclick} = init;\r\n        return element(\"e-statusitem\", {\r\n            attributes: {\r\n                title: label,\r\n                name: name,\r\n            },\r\n            children: label,\r\n            listeners: {\r\n                click: onclick\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEStatusItemElement.prototype\r\n    }\r\n);","\r\nimport { element, CustomElement, AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEStatusItemGroupElement };\r\n\r\ninterface HTMLEStatusItemGroupElementConstructor {\r\n    prototype: HTMLEStatusItemGroupElement;\r\n    new(): HTMLEStatusItemGroupElement;\r\n}\r\n\r\ninterface HTMLEStatusItemGroupElement extends HTMLElement {\r\n    name: string;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-statusitemgroup\": HTMLEStatusItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-statusitemgroup\"\r\n})\r\nclass HTMLEStatusItemGroupElementBase extends HTMLElement implements HTMLEStatusItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: flex;\r\n                width: max-content;\r\n                flex-direction: row;\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const label = this.shadowRoot.querySelector<HTMLLabelElement>(\"[part='label']\");\r\n                if (label) {\r\n                    label.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEStatusItemGroupElement: HTMLEStatusItemGroupElementConstructor = HTMLEStatusItemGroupElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEStatusItemElement } from \"./StatusItem\";\r\nimport { HTMLEStatusItemGroupElement } from \"./StatusItemGroup\";\r\n\r\nexport { HTMLEStatusBarElement };\r\n\r\n\r\ninterface HTMLEStatusBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly activeItem: HTMLEStatusItemElement | null;\r\n    items(): HTMLEStatusItemElement[];\r\n    firstItem(): HTMLEStatusItemElement | null;\r\n}\r\n\r\ninterface HTMLEToolbarElementConstructor {\r\n    prototype: HTMLEStatusBarElement;\r\n    new(): HTMLEStatusBarElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-statusbar\": HTMLEStatusBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-statusbar\"\r\n})\r\nclass HTMLEStatusBarElementBase extends HTMLElement implements HTMLEStatusBarElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get activeItem(): HTMLEStatusItemElement | null {\r\n        return this.querySelector<HTMLEStatusItemElement>(\r\n            \"e-statusitem[active]\"\r\n        );\r\n    }\r\n\r\n    items(): HTMLEStatusItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEStatusItemElement>(\r\n            \":is(:scope, :scope > e-statusitemgroup) > e-statusitem\"\r\n        ));\r\n    }\r\n\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: flex;\r\n                flex-direction: row;\r\n            }\r\n\r\n            :host(:focus) {\r\n                outline: 1px solid var(--focused-item-outline-color);\r\n                outline-offset: -1px;\r\n            }\r\n\r\n            ::slotted(e-statusitem:not(:first-child)) {\r\n                margin-left: 4px;\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"dblclick\", this.#handleDblClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEStatusItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEStatusItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    firstItem(): HTMLEStatusItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEStatusItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEStatusItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEStatusItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEStatusItemElement): HTMLEStatusItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEStatusItemElement | null>walker.previousSibling();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEStatusItemElement): HTMLEStatusItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEStatusItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEStatusItemElement | null): void {\r\n        const {activeItem} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n        }\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleDblClickEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (!this.contains(<Node>relatedTarget)) {\r\n            (activeItem ?? this.firstItem())?.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetItem = <HTMLEStatusItemElement | null>(<HTMLElement>target).closest(\"e-statusitem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetItem);\r\n            this.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    activeItem.click();\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEStatusBarElement: HTMLEToolbarElementConstructor = HTMLEStatusBarElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLETabPanelElement } from \"./TabPanel\";\r\n\r\nexport { HTMLETabElement };\r\n\r\ninterface HTMLETabElementConstructor {\r\n    prototype: HTMLETabElement;\r\n    new(): HTMLETabElement;\r\n}\r\n\r\ninterface HTMLETabElement extends HTMLElement {\r\n    get panel(): HTMLETabPanelElement | null;\r\n    name: string;\r\n    active: boolean;\r\n    disabled: boolean;\r\n    controls: string;\r\n    selected: boolean;\r\n    select(): void;\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tab\": HTMLETabElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-tab\"\r\n})\r\nclass HTMLETabElementBase extends HTMLElement implements HTMLETabElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n    \r\n    get panel(): HTMLETabPanelElement | null {\r\n        const {controls} = this;\r\n        return (<Document | ShadowRoot>this.getRootNode()).querySelector<HTMLETabPanelElement>(`e-tabpanel[id='${controls}']`);\r\n    }\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: inline-block;\r\n                user-select: none;\r\n                white-space: nowrap;\r\n                padding: 4px;\r\n            }\r\n            \r\n            :host([disabled]) {\r\n                opacity: 0.38;\r\n                pointer-events: none;\r\n            }\r\n            \r\n            :host(:hover) {\r\n                background-color: var(--hovered-item-color);\r\n            }\r\n            \r\n            :host(:focus-visible):host-context(e-tablist:focus-within) {\r\n                outline: 1px solid var(--focused-item-outline-color);\r\n                outline-offset: -1px;\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    select(): void {\r\n        this.selected = true;\r\n    }\r\n}\r\n\r\nvar HTMLETabElement: HTMLETabElementConstructor = HTMLETabElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLETabElement } from \"./Tab\";\r\n\r\nexport { HTMLETabListElement };\r\n\r\ninterface HTMLETabListElementConstructor {\r\n    prototype: HTMLETabListElement;\r\n    new(): HTMLETabListElement;\r\n}\r\n\r\ninterface HTMLETabListElement extends HTMLElement {\r\n    get activeTab(): HTMLETabElement | null;\r\n    get selectedTab(): HTMLETabElement | null;\r\n    get tabs(): HTMLETabElement[];\r\n    firstItem(): HTMLETabElement | null;\r\n    connectedCallback(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tablist\": HTMLETabListElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\nvar SELECT_ANIMATION_DURATION = 300;\r\n\r\n@CustomElement({\r\n    name: \"e-tablist\"\r\n})\r\nclass HTMLETabListElementBase extends HTMLElement implements HTMLETabListElement {\r\n\r\n    #walker: TreeWalker;\r\n    \r\n    get tabs(): HTMLETabElement[] {\r\n        return Array.from(\r\n            this.querySelectorAll(\"e-tab\")\r\n        );\r\n    }\r\n\r\n    get activeTab(): HTMLETabElement | null {\r\n        return this.querySelector(\r\n            \"e-tab[active]\"\r\n        );\r\n    }\r\n\r\n    get selectedTab(): HTMLETabElement | null {\r\n        return this.querySelector(\r\n            \"e-tab[selected]\"\r\n        );\r\n    }\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: flex;\r\n            }\r\n\r\n            :host::after {\r\n                position: absolute;\r\n                display: inline-block;\r\n                content: \" \";\r\n                transform: translateY(-100%);\r\n                box-sizing: border-box;\r\n                border-top: 2px solid var(--focused-item-outline-color);\r\n            }\r\n\r\n            ::slotted(e-tab) {\r\n                transform: translateY(1px);\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex, selectedTab} = this;\r\n        this.tabIndex = tabIndex;\r\n        customElements.upgrade(this);\r\n        const tabToSelect = selectedTab ?? this.firstItem();\r\n        if (tabToSelect) {\r\n            this.#selectTab(tabToSelect);\r\n            setTimeout(() => {\r\n                let {width: tabWidth, left: tabLeft, bottom: tabBottom} = tabToSelect.getBoundingClientRect();\r\n                const offsetParent = <HTMLElement>(tabToSelect.offsetParent ?? document.body);\r\n                const {offsetLeft, offsetTop} = offsetParent;\r\n                tabLeft -= offsetLeft;\r\n                tabBottom -= offsetTop;\r\n                this.animate([{\r\n                    width: `${tabWidth}px`,\r\n                    left: `${tabLeft}px`,\r\n                    top: `${tabBottom}px`\r\n                }], {\r\n                    duration: 0,\r\n                    fill: \"forwards\",\r\n                    easing: \"ease-in-out\",\r\n                    pseudoElement: \"::after\"\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLETabElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    firstItem(): HTMLETabElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLETabElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLETabElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLETabElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLETabElement): HTMLETabElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLETabElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLETabElement): HTMLETabElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLETabElement | null>walker.nextNode();\r\n    }\r\n\r\n    #setActiveTab(item: HTMLETabElement | null): void {\r\n        const {activeTab} = this;\r\n        if (activeTab !== null && activeTab !== item) {\r\n            activeTab.active = false;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n        }\r\n    }\r\n\r\n    #selectTab(tab: HTMLETabElement) {\r\n        const {selectedTab} = this;\r\n        if (tab !== selectedTab) {\r\n            tab.selected = true;\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetTab = (<Element>target).closest(\"e-tab\");\r\n        if (targetTab) {\r\n            targetTab.select();\r\n            const {width: tabWidth, left: tabLeft, bottom: tabBottom} = targetTab.getBoundingClientRect();\r\n            const {left: dialogLeft, top: dialogTop} = this.closest(\"dialog\")?.getBoundingClientRect() ?? {left: 0, top: 0};\r\n            this.animate([{\r\n                width: `${tabWidth}px`,\r\n                left: `${tabLeft - dialogLeft}px`,\r\n                top: `${tabBottom - dialogTop}px`\r\n            }], {\r\n                duration: SELECT_ANIMATION_DURATION,\r\n                fill: \"forwards\",\r\n                easing: \"ease-in-out\",\r\n                pseudoElement: \"::after\"\r\n            });\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {selectedTab} = this;\r\n        if (!this.contains(<Node>relatedTarget)) {\r\n            (selectedTab ?? this.firstItem())?.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetTab = <HTMLETabElement | null>(<HTMLElement>target).closest(\"e-tab\");\r\n        if (targetTab) {\r\n            this.#setActiveTab(targetTab);\r\n            this.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeTab} = this;\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousTab = activeTab ?\r\n                    this.#previousItem(activeTab) ?? this.#lastItem() :\r\n                    this.firstItem();\r\n                previousTab?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextTab = activeTab ?\r\n                    this.#nextItem(activeTab) ?? this.firstItem() :\r\n                    this.#lastItem();\r\n                nextTab?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                activeTab?.click();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event) {\r\n        const {target} = event;\r\n        const targetTab = <HTMLETabElement>target;\r\n        if (targetTab.selected) {\r\n            const {tabs} = this;\r\n            tabs.forEach((tab_i) => {\r\n                if (tab_i !== targetTab) {\r\n                    tab_i.selected = false;\r\n                    const {panel} = tab_i;\r\n                    if (panel) {\r\n                        panel.hidden = true;\r\n                    }\r\n                }\r\n            });\r\n            const {panel} = targetTab;\r\n            if (panel) {\r\n                panel.hidden = false;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabListElement: HTMLETabListElementConstructor = HTMLETabListElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLETabElement } from \"./Tab\";\r\n\r\nexport { HTMLETabPanelElement };\r\n\r\ninterface HTMLETabPanelElementConstructor {\r\n    prototype: HTMLETabPanelElement;\r\n    new(): HTMLETabPanelElement;\r\n}\r\n\r\ninterface HTMLETabPanelElement extends HTMLElement {\r\n    get tab(): HTMLETabElement | null;\r\n    connectedCallback(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tabpanel\": HTMLETabPanelElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-tabpanel\"\r\n})\r\nclass HTMLETabPanelElementBase extends HTMLElement implements HTMLETabPanelElement {\r\n\r\n    get tab(): HTMLETabElement | null {\r\n        const {id} = this;\r\n        return (<Document | ShadowRoot>this.getRootNode()).querySelector<HTMLETabElement>(`e-tab[controls=${id}]`);\r\n    }\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: block;\r\n                padding: 4px;\r\n            }\r\n            \r\n            :host([hidden]) {\r\n                display: none;\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tab} = this;\r\n        if (tab) {\r\n            customElements.upgrade(tab);\r\n            const {selected} = tab;\r\n            this.hidden = !selected;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabPanelElement: HTMLETabPanelElementConstructor = HTMLETabPanelElementBase;\r\n","import { CustomElement, element, AttributeProperty, QueryProperty } from \"../../Element\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeItemElement };\r\n\r\ninterface HTMLETreeItemElementConstructor {\r\n    prototype: HTMLETreeItemElement;\r\n    new(): HTMLETreeItemElement;\r\n}\r\n\r\ninterface HTMLETreeItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly group: HTMLETreeItemGroupElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    expanded: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    level: number;\r\n    type: \"leaf\" | \"parent\";\r\n    toggle(force?: boolean): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitem\": HTMLETreeItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-treeitem\"\r\n})\r\nclass HTMLETreeItemElementBase extends HTMLElement implements HTMLETreeItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    expanded!: boolean;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number, observed: true})\r\n    level!: number;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"leaf\"})\r\n    type!: \"leaf\" | \"parent\";\r\n\r\n    @QueryProperty({selector: \":scope > e-treeitemgroup[slot=group]\"})\r\n    group!: HTMLETreeItemGroupElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"arrow\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"group\"\r\n                }\r\n            })\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: block;\r\n                user-select: none;\r\n            }\r\n            \r\n            :host([droptarget]) {\r\n                background-color: var(--droptarget-item-color);\r\n            }\r\n            \r\n            :host([active]:focus-visible) {\r\n                outline: none;\r\n            }\r\n            \r\n            :host([active]:is(:focus, :not(:focus-within))):host-context(e-tree:focus-within) [part=\"content\"] {\r\n                outline: 1px solid var(--focused-item-outline-color);\r\n                outline-offset: -1px;\r\n            }\r\n            \r\n            [part=\"content\"]:hover {\r\n                background-color: var(--hovered-item-color);\r\n            }\r\n            \r\n            :host([selected]) [part=\"content\"] {\r\n                background-color: var(--selected-item-color);\r\n            }\r\n            \r\n            [part=\"content\"] {\r\n                display: flex;\r\n                line-height: 22px;\r\n                padding-left: calc(var(--level) * var(--indent-width, 12px));\r\n            }\r\n            \r\n            :host(:not([type=\"parent\"])) ::slotted([slot=\"group\"]),\r\n            :host(:not([expanded])) ::slotted([slot=\"group\"]) {\r\n                display: none;\r\n            }\r\n            \r\n            :host(:not([type=\"parent\"])) [part=\"arrow\"]::before {\r\n                visibility: hidden;\r\n            }\r\n            \r\n            [part=\"arrow\"] {\r\n                display: inline-block;\r\n                width: 18px;\r\n                height: 18px;\r\n                margin: 1px 4px 1px 1px;\r\n            }\r\n            \r\n            [part=\"arrow\"]::before {\r\n                display: inline-block;\r\n                width: 18px;\r\n                height: 18px;\r\n                margin: 1px;\r\n                content: \"\";\r\n                mask-size: 18px 18px;\r\n                -webkit-mask-size: 18px 18px;\r\n                background-color: var(--arrow-color, none);\r\n                filter: var(--arrow-filter, none);\r\n            }\r\n            \r\n            :host(:not([expanded])) [part=\"arrow\"]::before {\r\n                -webkit-mask-image: var(--arrow-icon-collapsed, none);\r\n                mask-image: var(--arrow-icon-collapsed, none);\r\n            }\r\n            \r\n            :host([expanded]) [part=\"arrow\"]::before {\r\n                -webkit-mask-image: var(--arrow-icon-expanded, none);\r\n                mask-image: var(--arrow-icon-expanded, none);\r\n            }\r\n        `;\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"expanded\": {\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const labelPart = this.shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"level\": {\r\n                this.style.setProperty(\"--level\", `${this.level}`);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {expanded} = this;\r\n        this.expanded = force ?? !expanded;\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemElement: HTMLETreeItemElementConstructor = HTMLETreeItemElementBase;","import { CustomElement, element } from \"../../Element\";\r\n\r\nexport { HTMLETreeItemGroupElement };\r\n\r\ninterface HTMLETreeItemGroupElementConstructor {\r\n    prototype: HTMLETreeItemGroupElement;\r\n    new(): HTMLETreeItemGroupElement;\r\n}\r\n\r\ninterface HTMLETreeItemGroupElement extends HTMLElement {}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitemgroup\": HTMLETreeItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-treeitemgroup\"\r\n})\r\nclass HTMLETreeItemGroupElementBase extends HTMLElement implements HTMLETreeItemGroupElement {\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: block;\r\n            }\r\n        `;\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemGroupElement: HTMLETreeItemGroupElementConstructor = HTMLETreeItemGroupElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLETreeItemElement } from \"./TreeItem\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeElement };\r\n\r\ninterface HTMLETreeElementConstructor {\r\n    prototype: HTMLETreeElement;\r\n    new(): HTMLETreeElement;\r\n}\r\n\r\ninterface HTMLETreeElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLETreeItemElement>;\r\n    readonly activeItem: HTMLETreeItemElement | null;\r\n    readonly dropTargetItem: HTMLETreeItemElement | null;\r\n    firstItem(): HTMLETreeItemElement | null;\r\n    droptarget: boolean;\r\n    name: string;\r\n    selectedItems(): HTMLETreeItemElement[];\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tree\": HTMLETreeElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-tree\"\r\n})\r\nclass HTMLETreeElementBase extends HTMLElement implements HTMLETreeElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLETreeItemElement>;\r\n\r\n    get activeItem(): HTMLETreeItemElement | null {\r\n        return this.querySelector<HTMLETreeItemElement>(\r\n            \"e-treeitem[active]\"\r\n        );\r\n    }\r\n\r\n    get dropTargetItem(): HTMLETreeItemElement | null {\r\n        return this.querySelector<HTMLETreeItemElement>(\r\n            \"e-treeitem[droptarget]\"\r\n        );\r\n    }\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: block;\r\n            }\r\n            \r\n            :host(:focus) {\r\n                outline: 1px solid var(--focused-item-outline-color);\r\n                outline-offset: -1px;\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.items = this.getElementsByTagName(\"e-treeitem\");\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"dblclick\", this.#handleDblClickEvent.bind(this));\r\n        this.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    selectedItems(): HTMLETreeItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLETreeItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLETreeItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLETreeItemElement, to: HTMLETreeItemElement): HTMLETreeItemElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleItem = this.#nextItem(from);\r\n            while (nextVisibleItem && nextVisibleItem !== to) {\r\n                range.push(nextVisibleItem);\r\n                nextVisibleItem = this.#nextItem(nextVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleItem = this.#previousItem(from);\r\n            while (previousVisibleItem && previousVisibleItem !== to) {\r\n                range.push(previousVisibleItem);\r\n                previousVisibleItem = this.#previousItem(previousVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLETreeItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((item_i) => {\r\n            item_i.selected = false;\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLETreeItemElement | null): void {\r\n        const {activeItem} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = item;\r\n            item.active = true;\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n    \r\n    #setDropTargetItem(item: HTMLETreeItemElement | null): void {\r\n        const {dropTargetItem} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n        }\r\n    }\r\n\r\n    firstItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousSibling = <HTMLETreeItemElement | null>walker.previousSibling();\r\n        return previousSibling ?\r\n            this.#deepestItem(previousSibling) :\r\n            <HTMLETreeItemElement | null>walker.parentNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const {type, expanded} = item;\r\n        return <HTMLETreeItemElement | null>(\r\n            type === \"leaf\" ?\r\n                walker.nextNode() :\r\n                expanded ?\r\n                    walker.nextNode() :\r\n                    walker.nextSibling() ??\r\n                    (walker.parentNode(), walker.nextSibling())\r\n        );\r\n    }\r\n\r\n    #deepestItem(item: HTMLETreeItemElement): HTMLETreeItemElement {\r\n        if (item.expanded) {\r\n            const walker = this.#walker;\r\n            const lastItem = <HTMLETreeItemElement>walker.lastChild();\r\n            if (lastItem) {\r\n                return this.#deepestItem(lastItem);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, shiftKey, ctrlKey} = event;\r\n        const targetItem = <HTMLETreeItemElement | null>(<HTMLElement>target).closest(\"e-treeitem\");\r\n        if (targetItem) {\r\n            if (!shiftKey && !ctrlKey) {\r\n                this.#setSelection(targetItem);\r\n                const {type} = targetItem;\r\n                if (type == \"parent\") {\r\n                    targetItem.toggle();\r\n                }\r\n            }\r\n        }\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleDblClickEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        const targetItem = <HTMLETreeItemElement | null>(<HTMLElement>target).closest(\"e-treeitem\");\r\n        if (targetItem) {\r\n            const {type} = targetItem;\r\n            if (type == \"parent\") {\r\n                targetItem.toggle(true);\r\n            }\r\n            this.#setDropTargetItem(targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        let rootNode = <Node>relatedTarget;\r\n        while (!(rootNode instanceof HTMLETreeItemElement || rootNode instanceof Document)) {\r\n            rootNode = rootNode.getRootNode();\r\n            if (rootNode instanceof ShadowRoot) {\r\n                rootNode = rootNode.host;\r\n            }\r\n        }\r\n        if (rootNode instanceof Document) {\r\n            this.#setDropTargetItem(null);\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? this, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? this, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(\r\n                                firstItem,\r\n                                this.#deepestItem(lastItem)\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    if (activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                    else {\r\n                        const walker = this.#walker;\r\n                        const parentItem = <HTMLETreeItemElement>walker.parentNode();\r\n                        if (parentItem) {\r\n                            parentItem.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    if (!activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.#setActiveItem(null);\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (!this.contains(<Node | null>relatedTarget)) {\r\n            (activeItem ?? this.firstItem())?.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetItem = <HTMLETreeItemElement | null>(<HTMLElement>target).closest(\"e-treeitem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetItem);\r\n            this.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node | null>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey, button} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const {selected} = target;\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey && !selected) {\r\n                        this.#setSelection(target);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            target.blur();\r\n                        }\r\n                        (!selected) ?\r\n                            this.#addToSelection(target) :\r\n                            this.#removeFromSelection(target);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const {activeItem} = this\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                target\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(target);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETreeElement: HTMLETreeElementConstructor = HTMLETreeElementBase;","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEToolBarElement } from \"../toolbars/ToolBar\";\r\n\r\nexport { HTMLEListItemElement };\r\n\r\ninterface HTMLEListItemElementConstructor {\r\n    prototype: HTMLEListItemElement;\r\n    new(): HTMLEListItemElement;\r\n}\r\n\r\ninterface HTMLEListItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly badge: HTMLSpanElement | null;\r\n    readonly toolbar: HTMLEToolBarElement | null;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitem\": HTMLEListItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-listitem\"\r\n})\r\nclass HTMLEListItemElementBase extends HTMLElement implements HTMLEListItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    get badge(): HTMLElement | null {\r\n        return this.#badge;\r\n    }\r\n\r\n    get toolbar(): HTMLEToolBarElement | null {\r\n        return this.#toolbar;\r\n    }\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    #badge: HTMLElement | null;\r\n    #toolbar: HTMLEToolBarElement | null;\r\n    #menu: HTMLEMenuElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: flex;\r\n                user-select: none;\r\n                line-height: 22px;\r\n            }\r\n            \r\n            :host([droptarget]) {\r\n                background-color: var(--droptarget-item-color);\r\n            }\r\n            \r\n            :host(:hover) {\r\n                background-color: var(--hovered-item-color);\r\n            }\r\n            \r\n            :host([active]) {\r\n                outline: 1px solid var(--focused-item-outline-color);\r\n                outline-offset: -1px;\r\n            }\r\n            \r\n            :host(:focus) {\r\n                background-color: var(--focus-background-color);\r\n            }\r\n            \r\n            :host([selected]) {\r\n                background-color: var(--selected-item-color);\r\n            }\r\n        `;\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#badge = null;\r\n        this.#menu = null;\r\n        this.#toolbar = null;\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this))\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"toolbar\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#toolbar = element instanceof HTMLEToolBarElement ? element : null;\r\n                break;\r\n            }\r\n            case \"badge\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#badge = element instanceof HTMLSpanElement ? element : null;\r\n                break;\r\n            }\r\n            case \"menu\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#menu = element instanceof HTMLEMenuElement ? element : null;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEListItemElement: HTMLEListItemElementConstructor = HTMLEListItemElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEListItemElement } from \"./ListItem\";\r\n\r\nexport { HTMLEListItemGroupElement };\r\n\r\ninterface HTMLEListItemGroupElementConstructor {\r\n    prototype: HTMLEListItemGroupElement;\r\n    new(): HTMLEListItemGroupElement;\r\n}\r\n\r\ninterface HTMLEListItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitemgroup\": HTMLEListItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-listitemgroup\"\r\n})\r\nclass HTMLEListItemGroupElementBase extends HTMLElement implements HTMLEListItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: block;\r\n            }\r\n        `;\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEListItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEListItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEListItemGroupElement: HTMLEListItemGroupElementConstructor = HTMLEListItemGroupElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEListItemElement } from \"./ListItem\";\r\nimport { HTMLEListItemGroupElement } from \"./ListItemGroup\";\r\n\r\nexport { HTMLEListElement };\r\n\r\ninterface HTMLEListElementConstructor {\r\n    prototype: HTMLEListElement;\r\n    new(): HTMLEListElement;\r\n}\r\n\r\ninterface HTMLEListElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly activeItem: HTMLEListItemElement | null;\r\n    readonly dropTargetItem: HTMLEListItemElement | null;\r\n    name: string;\r\n    droptarget: boolean;\r\n    items(): HTMLEListItemElement[];\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    selectedItems(): HTMLEListItemElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-list\": HTMLEListElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-list\"\r\n})\r\nclass HTMLEListElementBase extends HTMLElement implements HTMLEListElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get activeItem(): HTMLEListItemElement | null {\r\n        return this.querySelector<HTMLEListItemElement>(\r\n            \"e-listitem[active]\"\r\n        );\r\n    }\r\n\r\n    get dropTargetItem(): HTMLEListItemElement | null {\r\n        return this.querySelector<HTMLEListItemElement>(\r\n            \"e-listitem[droptarget]\"\r\n        );\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: block;\r\n            }\r\n            \r\n            :host(:focus) {\r\n                outline: 1px solid var(--focused-item-outline-color);\r\n                outline-offset: -1px;\r\n            }\r\n        `;\r\n    }\r\n\r\n    items(): HTMLEListItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEListItemElement>(\r\n            \":is(:scope, :scope > e-listitemgroup) > e-listitem\"\r\n        ));\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const tabIndex = this.getAttribute(\"tabindex\");\r\n        this.tabIndex = tabIndex === null ? 0 : parseInt(tabIndex);\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    selectedItems(): HTMLEListItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.#firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEListItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEListItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLEListItemElement, to: HTMLEListItemElement): HTMLEListItemElement[] {\r\n        const items = this.items();\r\n        const fromIndex = items.indexOf(from);\r\n        const toIndex = items.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return items.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        selectedItems.forEach((item_i) => {\r\n            if (item_i.selected) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEListItemElement | null): void {\r\n        const {activeItem, items} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #setDropTargetItem(item: HTMLEListItemElement | null): void {\r\n        const {dropTargetItem} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n        }\r\n    }\r\n\r\n    #firstItem(): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLEListItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLEListItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEListItemElement): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEListItemElement | null>walker.previousNode();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEListItemElement): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const nextItem = <HTMLEListItemElement | null>walker.nextNode();\r\n        return nextItem;\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent) {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n            target.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            this.#setDropTargetItem(target);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n    \r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        let rootNode = <Node>relatedTarget;\r\n        while (!(rootNode instanceof HTMLEListItemElement || rootNode instanceof Document)) {\r\n            rootNode = rootNode.getRootNode();\r\n            if (rootNode instanceof ShadowRoot) {\r\n                rootNode = rootNode.host;\r\n            }\r\n        }\r\n        if (rootNode instanceof Document) {\r\n            this.#setDropTargetItem(null);\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            this.#setActiveItem(target);\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    const walker = this.#walker;\r\n                    const {root} = walker;\r\n                    const firstItem = <HTMLEListItemElement>(\r\n                        walker.currentNode = walker.parentNode() ?? root, walker.firstChild()\r\n                    );\r\n                    const lastItem = <HTMLEListItemElement>(\r\n                        walker.currentNode = walker.parentNode() ?? root, walker.lastChild()\r\n                    );\r\n                    const range = this.#getItemsRange(\r\n                        firstItem,\r\n                        lastItem\r\n                    );\r\n                    if (range) {\r\n                        this.#setSelection(...range);\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                const {activeItem} = this;\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.#setActiveItem(null);\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey} = event;\r\n        const selectedItems = this.selectedItems();\r\n        if (target instanceof HTMLEListItemElement) {\r\n            if (!shiftKey && !ctrlKey) {\r\n                this.#setSelection(target);\r\n            }\r\n            else if (ctrlKey) {\r\n                (!target.selected) ?\r\n                    this.#addToSelection(target) :\r\n                    this.#removeFromSelection(target);\r\n                event.stopPropagation();\r\n            }\r\n            else if (shiftKey) {\r\n                const lastSelectedItem = selectedItems[selectedItems.length - 1];\r\n                if (lastSelectedItem) {\r\n                    const range = this.#getItemsRange(\r\n                        lastSelectedItem,\r\n                        target\r\n                    );\r\n                    if (range) {\r\n                        if (selectedItems.includes(target)) {\r\n                            this.#removeFromSelection(...range);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(...range);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.#setSelection(target);\r\n                }\r\n                event.stopPropagation();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (!this.#onSelection) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEListItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEListItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEListElement: HTMLEListElementConstructor = HTMLEListElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEDraggableElement };\r\n\r\ninterface HTMLEDraggableElementConstructor {\r\n    prototype: HTMLEDraggableElement;\r\n    new(): HTMLEDraggableElement;\r\n}\r\n\r\ninterface HTMLEDraggableElement extends HTMLElement {\r\n    readonly referee: this | null;\r\n    readonly references: this[];\r\n    selected: boolean;\r\n    dragged: boolean;\r\n    dragovered: boolean;\r\n\r\n    connectedCallback(): void;\r\n    disconnectedCallback(): void;\r\n    getReference(): this;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-draggable\": HTMLEDraggableElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-draggable\"\r\n})\r\nclass HTMLEDraggableElementBase extends HTMLElement implements HTMLEDraggableElement {\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    dragovered!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    dragged!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    #referee: this | null;\r\n    readonly references: this[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            padding: 3px 4px;\r\n                            cursor: pointer;\r\n                            white-space: nowrap;\r\n                            border-radius: 4px;\r\n                            border: 1px solid black;\r\n                            user-select: none;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                            color: lightgray;\r\n                            border-color: lightgray;\r\n                        }\r\n        \r\n                        :host([selected]:active) {\r\n                            cursor: grabbing;\r\n                        }\r\n                        \r\n                        :host([selected]) {\r\n                            cursor: grab;\r\n                            font-weight: bold;\r\n                            outline: 1px auto black;\r\n                        }\r\n        \r\n                        :host([dragovered]) {\r\n                            border-style: dotted;\r\n                        }\r\n                        \r\n                        [part=\"container\"] {\r\n                            display: flex;\r\n                            align-items: center;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"container\"\r\n                },\r\n                children: [\r\n                    element(\"slot\", {\r\n                        children: [\r\n                            \"&nbsp;\"\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.references = [];\r\n        this.#referee = null;\r\n    }\r\n\r\n    get referee(): this | null {\r\n        return this.#referee;\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n        this.draggable = true;\r\n    }\r\n\r\n    disconnectedCallback(): void {\r\n        if (this.referee) {\r\n            const thisRefIndex = this.referee.references.indexOf(this);\r\n            if (thisRefIndex > -1) {\r\n                this.referee.references.splice(thisRefIndex, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    getReference(): this {\r\n        const reference = <this>this.cloneNode(true);\r\n        reference.#referee = this;\r\n        return reference;\r\n    }\r\n}\r\n\r\nvar HTMLEDraggableElement: HTMLEDraggableElementConstructor = HTMLEDraggableElementBase","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\n\r\nexport { HTMLEDragzoneElement };\r\n\r\ninterface HTMLEDragzoneElementConstructor {\r\n    prototype: HTMLEDragzoneElement;\r\n    new(): HTMLEDragzoneElement\r\n}\r\n\r\ninterface HTMLEDragzoneElement extends HTMLElement {\r\n    readonly draggables: HTMLEDraggableElement[];\r\n    readonly selectedDraggables: HTMLEDraggableElement[];\r\n    disabled: boolean;\r\n    selectDraggable(draggable: HTMLEDraggableElement): void;\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void;\r\n    clearSelection(): void;\r\n    connectedCallback(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dragzone\": HTMLEDragzoneElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dragzone\"\r\n})\r\nclass HTMLEDragzoneElementBase extends HTMLElement implements HTMLEDragzoneElement {\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    #draggables: HTMLEDraggableElement[];\r\n    #selectedDraggables: HTMLEDraggableElement[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                        }\r\n        \r\n                        [part=\"container\"] {\r\n                            position: relative;\r\n                            display: flex;\r\n                            flex-direction: column;\r\n                            padding-left: 2px;\r\n                            padding-right: 2px;\r\n                        }\r\n        \r\n                        ::slotted(*) {\r\n                            margin-top: 2px;\r\n                            margin-bottom: 2px;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"container\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n        this.#draggables = [];\r\n        this.#selectedDraggables = [];\r\n    }\r\n\r\n    get draggables(): HTMLEDraggableElement[] {\r\n        return this.#draggables;\r\n    }\r\n\r\n    get selectedDraggables(): HTMLEDraggableElement[] {\r\n        return this.#selectedDraggables;\r\n    }\r\n\r\n    selectDraggable(draggable: HTMLEDraggableElement): void {\r\n        if (!this.selectedDraggables.includes(draggable)) {\r\n            this.selectedDraggables.push(draggable);\r\n        }\r\n        if (!draggable.selected) {\r\n            draggable.selected = true;\r\n        }\r\n    }\r\n\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void {\r\n        const index = this.selectedDraggables.indexOf(draggable);\r\n        if (index > -1) {\r\n            if (draggable.selected) {\r\n                draggable.selected = false;\r\n            }\r\n            this.selectedDraggables.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.selectedDraggables.forEach((draggable) => {\r\n            draggable.selected = false;\r\n        });\r\n        this.#selectedDraggables = [];\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const draggables = slot.assignedElements().filter(\r\n                    elem => elem instanceof HTMLEDraggableElement\r\n                ) as HTMLEDraggableElement[];\r\n                this.#draggables = draggables;\r\n                this.draggables.forEach((draggable) => {\r\n                    draggable.draggable = true;\r\n                });\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Escape\":\r\n                    this.clearSelection();\r\n                    this.focus();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragstart\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                this.selectedDraggables.forEach((thisSelectedDraggable) => {\r\n                    thisSelectedDraggable.dragged = true;\r\n                });\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", this.id);\r\n                }\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event) => {\r\n            const dataTransfer = event.dataTransfer;\r\n            if (dataTransfer) {\r\n                dataTransfer.dropEffect = \"none\";\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"dragend\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                const thisDraggedDraggables = this.draggables.filter(draggable => draggable.dragged);\r\n                thisDraggedDraggables.forEach((thisDraggedDraggable) => {\r\n                    thisDraggedDraggable.dragged = false;\r\n                });\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            if (!this.contains(relatedTarget)) {\r\n                this.clearSelection();\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button == 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        if (!target.selected) {\r\n                            this.clearSelection();\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                    else if (event.ctrlKey) {\r\n                        (!target.selected) ?\r\n                            this.selectDraggable(target) :\r\n                            this.unselectDraggable(target);\r\n                    }\r\n                    else if (event.shiftKey) {\r\n                        if (this.selectedDraggables.length > 0) {\r\n                            const targetIndex = this.draggables.indexOf(target);\r\n                            const firstIndex = this.draggables.indexOf(this.selectedDraggables[0]);\r\n                            const direction = Math.sign(targetIndex - firstIndex);\r\n                            const fromIndex = (direction > 0) ? 0 : this.draggables.length - 1;\r\n                            const toIndex = (direction > 0) ? this.draggables.length - 1 : 0;\r\n                            const startRangeIndex = (direction > 0) ? firstIndex : targetIndex;\r\n                            const endRangeIndex = (direction > 0) ? targetIndex : firstIndex;\r\n                            for (let index = fromIndex; index !== (toIndex + direction); index += direction) {\r\n                                (index >= startRangeIndex && index <= endRangeIndex) ? \r\n                                    this.selectDraggable(this.draggables[index]) :\r\n                                    this.unselectDraggable(this.draggables[index]);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.clearSelection();\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mouseup\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button == 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        this.draggables.forEach((thisDraggable) => {\r\n                            if (thisDraggable !== target) {\r\n                                this.unselectDraggable(thisDraggable);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEDragzoneElement: HTMLEDragzoneElementConstructor = HTMLEDragzoneElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\nimport { HTMLEDragzoneElement } from \"./Dragzone\";\r\n\r\nexport { HTMLEDropzoneElement };\r\nexport { EDataChangeEvent };\r\n\r\ninterface HTMLEDropzoneElementConstructor {\r\n    prototype: HTMLEDropzoneElement;\r\n    new(): HTMLEDropzoneElement;\r\n}\r\n\r\ninterface HTMLEDropzoneElement extends HTMLEDragzoneElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    dragovered: DropzoneDragoveredType | null;\r\n    name: string;\r\n    multiple: boolean;\r\n    placeholder: string;\r\n\r\n    droptest: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => void) | null;\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): void;\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean): void;\r\n\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ntype DropzoneDragoveredType = \"self\" | \"draggable\" | \"appendarea\";\r\n\r\ntype EDataChangeEvent = CustomEvent<{\r\n    action: \"insert\" | \"remove\";\r\n    draggables: HTMLEDraggableElement[];\r\n    position: number;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dropzone\": HTMLEDropzoneElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"e_datachange\": EDataChangeEvent,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dropzone\"\r\n})\r\nclass HTMLEDropzoneElementBase extends HTMLEDragzoneElement implements HTMLEDropzoneElement {\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    dragovered!: DropzoneDragoveredType | null;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    placeholder!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    multiple!: boolean;\r\n\r\n    droptest!: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => boolean) | null;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.shadowRoot!.querySelector(\"style\")!.append(/*css*/`\r\n            :host {\r\n                border: 1px dashed gray;\r\n            }\r\n\r\n            :host(:not([multiple]):not(:empty)) [part=\"appendarea\"],\r\n            :host(:not(:empty):not([dragovered])) [part=\"appendarea\"] {\r\n                display: none !important;\r\n            }\r\n\r\n            [part=\"appendarea\"] {\r\n                display: block;\r\n                margin: 2px;\r\n                border-radius: 4px;\r\n                border: 1px dotted black;\r\n            }\r\n\r\n            :host(:not([dragovered=\"appendarea\"])) [part=\"appendarea\"] {\r\n                border-color: transparent;\r\n            }\r\n            \r\n            [part=\"placeholder\"] {\r\n                display: inline-block;\r\n                color: grey;\r\n                pointer-events: none;\r\n                user-select: none;\r\n            }\r\n        `);\r\n\r\n        this.shadowRoot.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"appendarea\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"placeholder\"\r\n                        },\r\n                        children: [\r\n                            \"&nbsp;\"\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.droptest = null;\r\n    }\r\n    \r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        const appendAreaPart = this.shadowRoot!.querySelector<HTMLDivElement>(\"[part='appendarea']\");\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Delete\":\r\n                    if (this == event.target) {\r\n                        this.removeDraggables();\r\n                    }\r\n                    else {\r\n                        this.removeDraggables(draggable => draggable.selected);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragover\", (event: DragEvent) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragover\", (event) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragenter\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                target.dragovered = true;\r\n                this.dragovered = \"draggable\";\r\n            }\r\n            else {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragenter\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"appendarea\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event: DragEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                if (target == this) {\r\n                    if (appendAreaPart) {\r\n                        this.dragovered = \"self\";\r\n                    }\r\n                    if (!this.draggables.includes(relatedTarget)) {\r\n                        this.dragovered = null;\r\n                    }\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                }\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragleave\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n        \r\n        this.addEventListener(\"drop\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                let dropIndex = this.draggables.length;\r\n                if (target == this) {\r\n                    this.dragovered = null;\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                    dropIndex = this.draggables.indexOf(target);\r\n                }\r\n\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    const dragzoneId = dataTransfer.getData(\"text/plain\");\r\n                    const dragzone = document.getElementById(dragzoneId);\r\n                    if (dragzone instanceof HTMLEDragzoneElement) {\r\n                        const selectedDraggables = dragzone.selectedDraggables;\r\n                        if (selectedDraggables) {\r\n                            selectedDraggables.forEach((selectedDraggable) => {\r\n                                selectedDraggable.dragged = false;\r\n                            });\r\n                            if (dragzone instanceof HTMLEDropzoneElement) {\r\n                                dragzone.removeDraggables((draggable) => selectedDraggables.includes(draggable));\r\n                            }\r\n                            dragzone.clearSelection();\r\n                            this.addDraggables(selectedDraggables, dropIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.dragovered = null;\r\n            event.preventDefault();\r\n        });\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"placeholder\": {\r\n                const placeholderPart = this.shadowRoot.querySelector(\"[part='placeholder']\");\r\n                if (placeholderPart) {\r\n                    placeholderPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): HTMLEDraggableElement[] | null {\r\n        if (draggables.length > 0) {\r\n            let dataTransferSuccess = true;\r\n            if (this.droptest) {\r\n                dataTransferSuccess = this.droptest(this, draggables);\r\n            }\r\n            \r\n            let newDraggables: HTMLEDraggableElement[] = [];\r\n            let insertionPosition = -1;\r\n            if (dataTransferSuccess) {\r\n                if (this.multiple) {\r\n                    draggables.forEach((draggable) => {\r\n                        let newDraggable = draggable.getReference();\r\n                        if (position > -1 && position < this.draggables.length) {\r\n                            this.draggables[position].insertAdjacentElement(\"beforebegin\", newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? position : insertionPosition;\r\n                        }\r\n                        else {\r\n                            this.appendChild(newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? this.draggables.length - 1 : insertionPosition;\r\n                        }\r\n                        newDraggables.push(newDraggable);\r\n                    });\r\n                }\r\n                else {\r\n                    let newDraggable = draggables[0].getReference();\r\n                    if (this.draggables.length > 0) {\r\n                        this.replaceChild(newDraggable, this.draggables[0]);\r\n                    }\r\n                    else {\r\n                        this.appendChild(newDraggable);\r\n                    }\r\n                    newDraggables.push(newDraggable);\r\n                    insertionPosition = 0;\r\n                }\r\n            }\r\n            \r\n            const slot = this.shadowRoot?.querySelector(\"slot\");\r\n            if (slot) {\r\n                slot.addEventListener(\"slotchange\", () => {\r\n                    this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                        bubbles: true,\r\n                        detail: {\r\n                            action: \"insert\",\r\n                            draggables: newDraggables,\r\n                            position: insertionPosition\r\n                        }\r\n                    }));\r\n                }, {once: true});\r\n            }\r\n            return newDraggables;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean = () => true) {\r\n        let toRemove = this.draggables.filter(\r\n            (value: HTMLEDraggableElement, index: number) => {\r\n                return predicate(value, index);\r\n            }\r\n        );\r\n        let atPosition = this.draggables.indexOf(toRemove[0]);\r\n        toRemove.forEach((draggable) => {\r\n            draggable.remove(); \r\n        });\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                    bubbles: true,\r\n                    detail: {\r\n                        action: \"remove\",\r\n                        draggables: toRemove,\r\n                        position: atPosition\r\n                    }\r\n                }));\r\n            }, {once: true});\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEDropzoneElement: HTMLEDropzoneElementConstructor = HTMLEDropzoneElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEDialogElement };\r\n\r\ninterface HTMLEDialogElementConstructor {\r\n    prototype: HTMLEDialogElement;\r\n    new(): HTMLEDialogElement;\r\n}\r\n\r\ntype DialogElementType = \"confirm\" | \"alert\";\r\n\r\ninterface HTMLEDialogElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: DialogElementType;\r\n    open(): void;\r\n    close(): void;\r\n    cancel(): void;\r\n    confirm(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dialog\": HTMLEDialogElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"open\": Event,\r\n        \"close\": Event,\r\n        \"cancel\": Event,\r\n        \"confirm\": Event,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dialog\"\r\n})\r\nclass HTMLEDialogElementBase extends HTMLElement implements HTMLEDialogElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: DialogElementType;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            padding: 6px;\r\n                            background-color: white;\r\n        \r\n                            -webkit-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            -moz-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                        }\r\n        \r\n                        button {\r\n                            cursor: pointer;\r\n                        }\r\n        \r\n                        [part=\"actions\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part=\"header\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part=\"button\"]:not(:first-child) {\r\n                            margin-left: 4px;\r\n                        }\r\n        \r\n                        :host([type=\"confirm\"]) [part=\"ok-button\"] {\r\n                            display: none !important;\r\n                        }\r\n        \r\n                        :host([type=\"alert\"]) [part=\"cancel-button\"],\r\n                        :host([type=\"alert\"]) [part=\"confirm-button\"] {\r\n                            display: none !important;\r\n                        }\r\n                    `\r\n                    ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"header\"\r\n                },\r\n                children: [\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button close-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"x\"\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"hr\", {\r\n                attributes: {\r\n                    part: \"separator\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"body\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"hr\", {\r\n                attributes: {\r\n                    part: \"separator\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"actions\",\r\n                },\r\n                children: [\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button cancel-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"Cancel\"\r\n                        ]\r\n                    }),\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button confirm-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"Confirm\"\r\n                        ]\r\n                    }),\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button ok-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"OK\"\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n        );\r\n    }\r\n\r\n    connectedCallback() {\r\n        this.shadowRoot.addEventListener(\"click\", this);\r\n    }\r\n\r\n    handleEvent(event: Event) {\r\n        const {type, target} = event;\r\n        switch (type) {\r\n            case \"click\":\r\n                const {part} = <Element>target;\r\n                if (part.contains(\"close-button\") || part.contains(\"cancel-button\")) {\r\n                    this.cancel();\r\n                }\r\n                else if (part.contains(\"confirm-button\") || part.contains(\"ok-button\")) {\r\n                    this.confirm();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    open(): void {\r\n        this.dispatchEvent(new CustomEvent(\"open\", {bubbles: true}));\r\n    }\r\n\r\n    close(): void {\r\n        this.dispatchEvent(new CustomEvent(\"close\", {bubbles: true}));\r\n    }\r\n\r\n    cancel(): void {\r\n        this.dispatchEvent(new CustomEvent(\"cancel\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n\r\n    confirm(): void {\r\n        this.dispatchEvent(new CustomEvent(\"confirm\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n}\r\n\r\nvar HTMLEDialogElement: HTMLEDialogElementConstructor = HTMLEDialogElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionElement };\r\n\r\ninterface HTMLEOptionElementConstructor {\r\n    prototype: HTMLEOptionElement;\r\n    new(): HTMLEOptionElement;\r\n}\r\n\r\ninterface HTMLEOptionElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n    name: string;\r\n    value: string;\r\n    label: string;\r\n    disabled: boolean;\r\n    selected: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-option\": HTMLEOptionElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-option\"\r\n})\r\nclass HTMLEOptionElementBase extends HTMLElement implements HTMLEOptionElement {\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n    \r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"label\"\r\n                }\r\n            })\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: flex;\r\n                user-select: none;\r\n                white-space: nowrap;\r\n                line-height: 22px;\r\n                padding: 0 12px;\r\n            }\r\n            \r\n            :host(:hover) {\r\n                background-color: var(--hovered-item-color);\r\n            }\r\n            \r\n            :host(:focus-within) {\r\n                outline: 1px solid var(--focused-item-outline-color);\r\n                outline-offset: -1px;\r\n            }\r\n            \r\n            :host([selected]) {\r\n                background-color: var(--selected-item-color);\r\n            }\r\n            \r\n            :host([disabled]) {\r\n                opacity: 0.38;\r\n                pointer-events: none;\r\n            }\r\n            \r\n            :host(::before) {\r\n                display: flex;\r\n                content: \"\";\r\n                width: 18px;\r\n                height: 18px;\r\n                margin-right: 6px;\r\n            \r\n                mask-size: 18px 18px;\r\n                -webkit-mask-size: 18px 18px;\r\n                background-color: var(--icon-color, none);\r\n                -webkit-mask-image: var(--icon-image, none);\r\n                mask-image: var(--icon-image, none);\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const internals = this.attachInternals();\r\n        internals.role = \"option\";\r\n        this.internals = internals;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector<HTMLElement>(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"selected\": {\r\n                const {internals, selected} = this;\r\n                internals.ariaSelected = String(selected);\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEOptionElement: HTMLEOptionElementConstructor = HTMLEOptionElementBase;","import { CustomElement, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionGroupElement };\r\n\r\ninterface HTMLEOptionGroupElementConstructor {\r\n    prototype: HTMLEOptionGroupElement;\r\n    new(): HTMLEOptionGroupElement;\r\n}\r\n\r\ninterface HTMLEOptionGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-optiongroup\": HTMLEOptionGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-optiongroup\"\r\n})\r\nclass HTMLEOptionGroupElementBase extends HTMLElement implements HTMLEOptionGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: block;\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n}\r\n\r\nvar HTMLEOptionGroupElement: HTMLEOptionGroupElementConstructor = HTMLEOptionGroupElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEOptionElement } from \"./Option\";\r\nimport { HTMLEOptionGroupElement } from \"./OptionGroup\";\r\n\r\nexport { HTMLESelectElement };\r\n\r\ninterface HTMLESelectElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n    get options(): HTMLEOptionElement[];\r\n    get activeOption(): HTMLEOptionElement | null;\r\n    get selectedOption(): HTMLEOptionElement | null;\r\n    name: string;\r\n    value: string;\r\n    expanded: boolean;\r\n    expand(): void;\r\n    collapse(): void;\r\n    toggle(force?: boolean): void;\r\n}\r\n\r\ninterface HTMLESelectElementConstructor {\r\n    prototype: HTMLESelectElement;\r\n    new(): HTMLESelectElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-select\": HTMLESelectElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\nvar mutationObserver: MutationObserver;\r\n\r\n@CustomElement({\r\n    name: \"e-select\"\r\n})\r\nclass HTMLESelectElementBase extends HTMLElement implements HTMLESelectElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n\r\n    static get formAssociated(): boolean {\r\n        return true;\r\n    }\r\n\r\n    get options(): HTMLEOptionElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEOptionElement>(\r\n            \"e-option\"\r\n        ));\r\n    }\r\n\r\n    get activeOption(): HTMLEOptionElement | null {\r\n        return this.querySelector(\"e-option:focus-within\") ?? null;\r\n    }\r\n\r\n    get selectedOption(): HTMLEOptionElement | null {\r\n        return this.querySelector(\"e-option[selected]\") ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"select\", observed: true})\r\n    type!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    #walker: TreeWalker;\r\n    #wasExpandedOnMouseDown: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"output\", {\r\n                        attributes: {\r\n                            part: \"value\"\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"box\"\r\n                },\r\n                children: element(\"slot\")\r\n            })\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: inline-block;\r\n                user-select: none;\r\n                line-height: 22px;\r\n                border: 1px solid var(--item-border-color);\r\n            }\r\n\r\n            :host(:focus-visible) {\r\n                outline: none;\r\n            }\r\n            \r\n            :host(:focus-within) {\r\n                background-color: var(--focused-item-color);\r\n            }\r\n            \r\n            :host([disabled]) {\r\n                opacity: 0.38;\r\n                pointer-events: none;\r\n            }\r\n            \r\n            [part=\"content\"] {\r\n                display: flex;\r\n                overflow: hidden;\r\n                padding: 0 4px;\r\n            }\r\n            \r\n            [part=\"content\"]::after {\r\n                display: inline-block;\r\n                text-align: center;\r\n                width: 22px;\r\n                height: 22px;\r\n                margin-left: 6px;\r\n                content: \"▾\";\r\n            }\r\n            \r\n            [part=\"value\"] {\r\n                margin-right: auto;\r\n                text-align: right;\r\n            }\r\n            \r\n            [part=\"box\"] {\r\n                z-index: 1;\r\n                position: fixed;\r\n            \r\n                display: block;\r\n                padding: 6px 0;\r\n                width: max-content;\r\n            \r\n                background-color: white;\r\n            \r\n                -webkit-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                -moz-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n            }\r\n            \r\n            :host(:not([expanded])) [part=\"box\"] {\r\n                opacity: 0;\r\n                pointer-events: none;\r\n            }\r\n        `;\r\n        mutationObserver = new MutationObserver(\r\n            (mutationsList: MutationRecord[]) => {\r\n                mutationsList.forEach((mutation: MutationRecord) => {\r\n                    const {target} = mutation;\r\n                    const select = <HTMLESelectElementBase>target;\r\n                    const {selectedOption, value, options} = select;\r\n                    if (!selectedOption) {\r\n                        const optionToSelect = value ? options.find(\r\n                            option_i => option_i.value === value\r\n                        ) : select.#firstOption();\r\n                        if (optionToSelect) {\r\n                            optionToSelect.selected = true;\r\n                        }\r\n                        else {\r\n                            select.#setSelectedOption(null);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const internals = this.attachInternals();\r\n        internals.role = \"combobox\";\r\n        this.internals = internals;\r\n        this.#wasExpandedOnMouseDown = false;\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        mutationObserver.observe(\r\n            this, {\r\n                childList: true,\r\n                subtree: true\r\n            }\r\n        );\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {options, selectedOption, value} = this;\r\n        const tabindex = this.getAttribute(\"tabindex\");\r\n        this.tabIndex = tabindex !== null ? parseInt(tabindex) : 0;\r\n        customElements.upgrade(this);\r\n        const optionToSelect = selectedOption ?? (\r\n            value ? options.find(\r\n                option_i => option_i.value === value\r\n            ) : null\r\n        ) ?? this.#firstOption();\r\n        if (optionToSelect) {\r\n            if (optionToSelect === selectedOption) {\r\n                this.#setSelectedOption(selectedOption);\r\n            }\r\n            else {\r\n                this.#selectOption(optionToSelect);\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {expanded} = this;\r\n        if (!expanded) {\r\n            this.expanded = true;\r\n            this.#positionBox();\r\n            const {selectedOption} = this;\r\n            if (selectedOption) {\r\n                selectedOption.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {expanded} = this;\r\n        if (expanded) {\r\n            this.expanded = false;\r\n            this.focus();\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {expanded} = this;\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n    \r\n    #value(): HTMLElement {\r\n        return this.shadowRoot.querySelector<HTMLElement>(\"[part=value]\")!;\r\n    }\r\n\r\n    #box(): HTMLElement {\r\n        return this.shadowRoot.querySelector<HTMLElement>(\"[part=box]\")!;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEOptionElement && !node.disabled && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        else if (node instanceof HTMLEOptionGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEOptionElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEOptionElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousOption(option: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLEOptionElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextOption(option: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLEOptionElement | null>walker.nextNode();\r\n    }\r\n\r\n    #selectOption(option: HTMLEOptionElement) {\r\n        const {selectedOption} = this;\r\n        if (option !== selectedOption) {\r\n            option.selected = true;\r\n        }\r\n    }\r\n    \r\n    #setSelectedOption(option: HTMLEOptionElement | null) {\r\n        const {label, value} = option ?? {\r\n            label: \"\",\r\n            value: \"\"\r\n        };\r\n        const {internals} = this;\r\n        this.#value().textContent = label;\r\n        internals.setFormValue(value);\r\n    }\r\n\r\n    #positionBox(): void {\r\n        const box = this.#box()\r\n        const {style: optionsStyle} = box;\r\n        const {bottom, left} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        optionsStyle.setProperty(\"top\", `${bottom + scrollY}px`);\r\n        optionsStyle.setProperty(\"left\", `${left + scrollX}px`);\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const wasExpandedOnMouseDown = this.#wasExpandedOnMouseDown;\r\n        if (!wasExpandedOnMouseDown) {\r\n            const {selectedOption} = this;\r\n            this.expand();\r\n            (selectedOption ?? this.#firstOption() ?? this).focus({preventScroll: true});\r\n        }\r\n        else {\r\n            this.collapse();\r\n            const targetOption = (<HTMLElement>target).closest<HTMLEOptionElement>(\"e-option\");\r\n            if (targetOption) {\r\n                this.#selectOption(targetOption);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin || this === relatedTarget) {\r\n            this.collapse();\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(): void {\r\n        const {expanded} = this;\r\n        this.#wasExpandedOnMouseDown = expanded;\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetOption = (<Element>target).closest<HTMLEOptionElement>(\"e-option\");\r\n        if (targetOption) {\r\n            targetOption.focus({preventScroll: true});\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded, activeOption, selectedOption} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                if (expanded) {\r\n                    const previousOption = activeOption ?\r\n                        this.#previousOption(activeOption) :\r\n                        this.#firstOption();\r\n                    if (previousOption) {\r\n                        previousOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const previousOption = selectedOption ?\r\n                        this.#previousOption(selectedOption) :\r\n                        this.#firstOption();\r\n                    if (previousOption) {\r\n                        this.#selectOption(previousOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (expanded) {\r\n                    const nextOption = activeOption ?\r\n                        this.#nextOption(activeOption) :\r\n                        this.#lastOption();\r\n                    if (nextOption) {\r\n                        nextOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const nextOption = selectedOption ?\r\n                        this.#nextOption(selectedOption) :\r\n                        this.#lastOption();\r\n                    if (nextOption) {\r\n                        this.#selectOption(nextOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstOption = this.#firstOption();\r\n                if (firstOption) {\r\n                    if (expanded) {\r\n                        firstOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(firstOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastOption = this.#lastOption();\r\n                if (lastOption) {\r\n                    if (expanded) {\r\n                        lastOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(lastOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                this.toggle();\r\n                const {expanded} = this;\r\n                if (expanded) {\r\n                    const {selectedOption} = this;\r\n                    (selectedOption ?? this.#firstOption())?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    if (activeOption) {\r\n                        this.#selectOption(activeOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.collapse();\r\n                    event.stopPropagation();\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            default: {\r\n                const {length: keyLength} = key;\r\n                if (keyLength == 1) {\r\n                    const keyCode = key.charCodeAt(0);\r\n                    const {options} = this;\r\n                    const activeIndex = activeOption ? options.indexOf(activeOption) : -1;\r\n                    const matchingOption = options.find(\r\n                        (option_i, i) => option_i.label.toLowerCase().charCodeAt(0) == keyCode && i > activeIndex\r\n                    ) ?? options.find(\r\n                        (option_i) => option_i.label.toLowerCase().charCodeAt(0) == keyCode\r\n                    );\r\n                    if (matchingOption) {\r\n                        matchingOption.focus({preventScroll: true});\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    #handleSelectEvent(event: Event): void {\r\n        const {target} = event;\r\n        const targetOption = (<Element>target).closest<HTMLEOptionElement>(\"e-option\");\r\n        if (targetOption) {\r\n            const {selected} = targetOption;\r\n            if (selected) {\r\n                const {options} = this;\r\n                options.forEach((option_i) => {\r\n                    if (option_i !== targetOption && option_i.selected) {\r\n                        option_i.selected = false;\r\n                    }\r\n                });\r\n                this.#setSelectedOption(targetOption);\r\n            }\r\n            else {\r\n                const {selectedOption} = this;\r\n                if (selectedOption === null) {\r\n                    const firstOption = this.#firstOption();\r\n                    if (firstOption !== null) {\r\n                        this.#setSelectedOption(firstOption);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLESelectElement: HTMLESelectElementConstructor = HTMLESelectElementBase;","import { CustomElement } from \"../Element\";\r\n\r\nexport { HTMLESeparatorElement };\r\n\r\ninterface HTMLESeparatorElementConstructor {\r\n    prototype: HTMLESeparatorElement;\r\n    new(): HTMLESeparatorElement;\r\n}\r\n\r\ninterface HTMLESeparatorElement extends HTMLElement {}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-separator\": HTMLESeparatorElement,\r\n    }\r\n}\r\n\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-separator\"\r\n})\r\nclass HTMLESeparatorElementBase extends HTMLElement implements HTMLESeparatorElement {\r\n    #internals: ElementInternals;\r\n\r\n    static {\r\n        style = /*css*/`\r\n            :host {\r\n                display: block;\r\n                margin: 10px 0 10px 27px;\r\n                border: none;\r\n                border-top: 1px solid lightgrey;\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        this.#internals = this.attachInternals();\r\n        this.#internals.role = \"separator\";\r\n    }\r\n}\r\n\r\nvar HTMLESeparatorElement: HTMLESeparatorElementConstructor = HTMLESeparatorElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEToolTipElement };\r\n\r\ninterface HTMLEToolTipElementConstructor {\r\n    prototype: HTMLEToolTipElement;\r\n    new(): HTMLEToolTipElement;\r\n}\r\n\r\ninterface HTMLEToolTipElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    htmlFor: string;\r\n    position: \"top\" | \"bottom\" | \"right\" | \"left\";\r\n    visible: boolean;\r\n    show(options?: {immediate?: boolean}): void;\r\n    hide(options?: {immediate?: boolean}): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tooltip\": HTMLEToolTipElement;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\nvar HIDE_DELAY_MS = 100;\r\nvar SHOW_DELAY_MS = 200;\r\nvar ANIMATION_DURATION = 100;\r\n\r\n@CustomElement({\r\n    name: \"e-tooltip\"\r\n})\r\nclass HTMLEToolTipElementBase extends HTMLElement implements HTMLEToolTipElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String, observed: true, name: \"for\"})\r\n    htmlFor!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"top\"})\r\n    position!: \"top\" | \"bottom\" | \"right\" | \"left\";\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    visible!: boolean;\r\n\r\n    #target: HTMLElement | null;\r\n    #targetListenerObject: EventListenerObject;\r\n    #documentListenerObject: EventListenerObject;\r\n    #toggleAnimation: Animation | null;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"container\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"arrow\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: inline-block;\r\n                position: fixed;\r\n                padding: 4px;\r\n                border-radius: 3px;\r\n                box-sizing: border-box;\r\n                background-color: white;\r\n                border: 1px solid black;\r\n                pointer-events: none;\r\n            }\r\n            \r\n            :host([hidden]) {\r\n                display: none;\r\n            }\r\n\r\n            :host(:not([visible])) {\r\n                opacity: 0;\r\n            }\r\n            \r\n            [part=\"arrow\"] {\r\n                display: inline-block;\r\n                position: fixed;\r\n                z-index: 1;\r\n                width: 4px;\r\n                height: 4px;\r\n                box-sizing: border-box;\r\n                background-color: white;\r\n                border: 1px solid black;\r\n                border-width: 0 1px 1px 0;\r\n            }\r\n            \r\n            :host(:is(:not([position]), [position=\"top\"])) [part=\"arrow\"] {\r\n                transform: translate(-2px, -2px) rotate(45deg);\r\n            }\r\n            \r\n            :host(:is([position=\"bottom\"])) [part=\"arrow\"] {\r\n                transform: translate(-2px, -2px) rotate(225deg);\r\n            }\r\n            \r\n            :host(:is([position=\"left\"])) [part=\"arrow\"] {\r\n                transform: translate(-2px, -2px) rotate(315deg);\r\n            }\r\n            \r\n            :host(:is([position=\"right\"])) [part=\"arrow\"] {\r\n                transform: translate(-2px, -2px) rotate(135deg);\r\n            }        \r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#toggleAnimation = null;\r\n        this.#targetListenerObject = (function(tooltip) {\r\n            return {\r\n                handleEvent(event: Event) {\r\n                    const {type} = event;\r\n                    switch (type) {\r\n                        case \"mouseenter\": {\r\n                            tooltip.#handleTargetMouseEnterEvent();\r\n                            break;\r\n                        }\r\n                        case \"mouseleave\": {\r\n                            tooltip.#handleTargetMouseLeaveEvent();\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n        })(this);\r\n        this.#documentListenerObject = (function(tooltip) {\r\n            return {\r\n                handleEvent(event: Event) {\r\n                    const {type} = event;\r\n                    switch (type) {\r\n                        case \"keydown\": {\r\n                            tooltip.#handleDocumentKeyDownEvent(<KeyboardEvent>event);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n        })(this);\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {htmlFor} = this;\r\n        this.#setTarget(htmlFor);\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"for\": {\r\n                this.#setTarget(newValue);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    show(options?: {immediate?: boolean}): void {\r\n        const {immediate = false} = options ?? {};\r\n        let toggleAnimation = this.#toggleAnimation;\r\n        if (toggleAnimation !== null) {\r\n            const {id} = toggleAnimation;\r\n            if (id === \"hide\") {\r\n                toggleAnimation.cancel();\r\n            }\r\n        }\r\n        if (!this.visible) {\r\n            this.hidden = false;\r\n            toggleAnimation = this.animate([\r\n                { opacity: 0 },\r\n                { opacity: 1 }\r\n            ], {\r\n                id: \"show\",\r\n                delay: immediate ? 0 : SHOW_DELAY_MS,\r\n                duration: immediate ? 0 : ANIMATION_DURATION\r\n            });\r\n            const {finished} = toggleAnimation;\r\n            finished.then(\r\n                () => {\r\n                    this.visible = true;\r\n                }\r\n            );\r\n            this.#toggleAnimation = toggleAnimation;\r\n            this.#position();\r\n        }\r\n        else {\r\n            this.#toggleAnimation = null;\r\n        }\r\n    }\r\n\r\n    hide(options?: {immediate?: boolean}): void {\r\n        const {immediate = false} = options ?? {};\r\n        let toggleAnimation = this.#toggleAnimation;\r\n        if (toggleAnimation !== null) {\r\n            const {id} = toggleAnimation;\r\n            if (id === \"show\") {\r\n                toggleAnimation.cancel();\r\n            }\r\n        }\r\n        if (this.visible) {\r\n            toggleAnimation = this.animate([\r\n                { opacity: 1 },\r\n                { opacity: 0 }\r\n            ], {\r\n                id: \"hide\",\r\n                delay: immediate ? 0 : HIDE_DELAY_MS,\r\n                duration: immediate ? 0 : ANIMATION_DURATION\r\n            });\r\n            const {finished} = toggleAnimation;\r\n            finished.then(\r\n                () => {\r\n                    this.visible = false;\r\n                    this.hidden = true;\r\n                }\r\n            );\r\n            this.#toggleAnimation = toggleAnimation;\r\n        }\r\n        else {\r\n            this.#toggleAnimation = null;\r\n        }\r\n    }\r\n\r\n    #arrow(): HTMLElement {\r\n        return this.shadowRoot.querySelector<HTMLElement>(\"[part=arrow]\")!;\r\n    }\r\n\r\n    #setTarget(id: string | null): void {\r\n        const target = id ? document.getElementById(id) : null;\r\n        if (target !== null) {\r\n            const oldTarget = this.#target;\r\n            const targetListenerObject = this.#targetListenerObject;\r\n            if (oldTarget) {\r\n                oldTarget.removeEventListener(\"mouseenter\", targetListenerObject);\r\n                oldTarget.removeEventListener(\"mouseleave\", targetListenerObject);\r\n            }\r\n            target.addEventListener(\"mouseenter\", targetListenerObject);\r\n            target.addEventListener(\"mouseleave\", targetListenerObject);\r\n        }\r\n        this.#target = target;\r\n    }\r\n\r\n    #position(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const {top: targetTop, bottom: targetBottom, left: targetLeft, right: targetRight} = target.getBoundingClientRect();\r\n            const {width: tooltipWidth, height: tooltipHeight} = this.getBoundingClientRect();\r\n            const tooltipHalfWidth = tooltipWidth / 2;\r\n            const tooltipHalfHeight = tooltipHeight / 2;\r\n            const targetCenter = (targetRight + targetLeft) / 2;\r\n            const targetMiddle = (targetBottom + targetTop) / 2;\r\n            const {position, style: tooltipStyle} = this;\r\n            const arrow = this.#arrow();\r\n            const {style: arrowStyle} = arrow;\r\n            const {width: arrowWidth, height: arrowHeight} = arrow.getBoundingClientRect();\r\n            const arrowHalfWidth = arrowWidth / 2;\r\n            const arrowHalfHeight = arrowHeight / 2;\r\n            const {clientWidth} = document.body;\r\n            switch (position) {\r\n                case \"top\": {\r\n                    tooltipStyle.setProperty(\"top\", `${targetTop - tooltipHeight - arrowHalfHeight}px`);\r\n                    tooltipStyle.setProperty(\"left\", `${\r\n                        Math.max(0, Math.min(targetCenter - tooltipHalfWidth, clientWidth - tooltipWidth))\r\n                    }px`);\r\n                    arrowStyle.setProperty(\"top\", `${targetTop - arrowHalfHeight}px`);\r\n                    arrowStyle.setProperty(\"left\", `${targetCenter}px`);\r\n                    break;\r\n                }\r\n                case \"bottom\": {\r\n                    tooltipStyle.setProperty(\"top\", `${targetBottom + arrowHalfHeight}px`);\r\n                    tooltipStyle.setProperty(\"left\", `${\r\n                        Math.max(0, Math.min(targetCenter - tooltipHalfWidth, clientWidth - tooltipWidth))\r\n                    }px`);\r\n                    arrowStyle.setProperty(\"top\", `${targetBottom + arrowHalfHeight}px`);\r\n                    arrowStyle.setProperty(\"left\", `${targetCenter}px`);\r\n                    break;\r\n                }\r\n                case \"left\": {\r\n                    tooltipStyle.setProperty(\"top\", `${targetMiddle - tooltipHalfHeight}px`);\r\n                    tooltipStyle.setProperty(\"left\", `${targetLeft - tooltipWidth - arrowHalfWidth}px`);\r\n                    arrowStyle.setProperty(\"top\", `${targetMiddle}px`);\r\n                    arrowStyle.setProperty(\"left\", `${targetLeft - arrowHalfWidth}px`);\r\n                    break;\r\n                }\r\n                case \"right\": {\r\n                    tooltipStyle.setProperty(\"top\", `${targetMiddle - tooltipHalfHeight}px`);\r\n                    tooltipStyle.setProperty(\"left\", `${targetRight + arrowHalfWidth}px`);\r\n                    arrowStyle.setProperty(\"top\", `${targetMiddle}px`);\r\n                    arrowStyle.setProperty(\"left\", `${targetRight + arrowHalfWidth}px`);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleTargetMouseEnterEvent(): void {\r\n        this.show();\r\n        const toggleAnimation = this.#toggleAnimation;\r\n        if (toggleAnimation) {\r\n            const documentListenerObject = this.#documentListenerObject;\r\n            const {finished} = toggleAnimation;\r\n            finished.then(() => {\r\n                document.addEventListener(\"keydown\", documentListenerObject);\r\n            });\r\n        }\r\n    }\r\n\r\n    #handleTargetMouseLeaveEvent(): void {\r\n        this.hide();\r\n        const toggleAnimation = this.#toggleAnimation;\r\n        if (toggleAnimation) {\r\n            const documentListenerObject = this.#documentListenerObject;\r\n            const {finished} = toggleAnimation;\r\n            finished.then(() => {\r\n                document.removeEventListener(\"keydown\", documentListenerObject);\r\n            });\r\n        }\r\n    }\r\n\r\n    #handleDocumentKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        switch (key) {\r\n            case \"Escape\": {\r\n                this.hide({\r\n                    immediate: true\r\n                });\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolTipElement: HTMLEToolTipElementConstructor = HTMLEToolTipElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEHandleElement };\r\n\r\ninterface HTMLEHandleElementConstructor {\r\n    prototype: HTMLEHandleElement;\r\n    new(): HTMLEHandleElement;\r\n}\r\n\r\ninterface HTMLEHandleElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    controls: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-handle\": HTMLEHandleElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"move\": Event;\r\n    }\r\n}\r\n\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-handle\"\r\n})\r\nclass HTMLEHandleElementBase extends HTMLElement implements HTMLEHandleElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n\r\n    static {\r\n        style = /*css*/`\r\n            :host {\r\n                display: block;\r\n                            \r\n                width: 24px;\r\n                height: 12px;\r\n                \r\n                background-color: var(--selected-item-color);\r\n\r\n                -webkit-mask-image: url(\"/assets/dots.png\");\r\n                mask-image: url(\"/assets/dots.png\");\r\n\r\n                -webkit-mask-repeat: repeat;\r\n                mask-repeat: repeat;\r\n                cursor: move;\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        this.#target = null;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"controls\": {\r\n                const {controls} = this;\r\n                this.#target = document.getElementById(controls);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        this.#target = document.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            const target = this.#target;\r\n            if (target !== null) {\r\n                const targetComputedStyle = window.getComputedStyle(target);\r\n                const {movementX, movementY} = event;\r\n                const {width: rectWidth, height: rectHeight} = target.getBoundingClientRect();\r\n                const outerElement = target.parentElement ?? document.body;\r\n                const {\r\n                    left: outerRectLeft, right: outerRectRight,\r\n                    top: outerRectTop, bottom: outerRectBottom\r\n                } = outerElement.getBoundingClientRect();\r\n                const left = parseFloat(targetComputedStyle.getPropertyValue(\"left\"));\r\n                const newLeft = Math.max(outerRectLeft, Math.min(Math.trunc(left + movementX), outerRectRight - rectWidth));\r\n                const top = parseFloat(targetComputedStyle.getPropertyValue(\"top\"));\r\n                const newTop = Math.max(outerRectTop, Math.min(Math.trunc(top + movementY), outerRectBottom - rectHeight));\r\n                target.style.setProperty(\"left\", `${newLeft}px`);\r\n                target.style.setProperty(\"top\", `${newTop}px`);\r\n                this.dispatchEvent(new CustomEvent(\"move\"));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEHandleElement: HTMLEHandleElementConstructor = HTMLEHandleElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEHeightSashElement };\r\n\r\ninterface HTMLEHeightSashElementConstructor {\r\n    prototype: HTMLEHeightSashElement;\r\n    new(): HTMLEHeightSashElement;\r\n}\r\n\r\ninterface HTMLEHeightSashElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    controls: string;\r\n    growdir: \"top\" | \"bottom\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-hsash\": HTMLEHeightSashElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"resize\": Event;\r\n    }\r\n}\r\n\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-hsash\"\r\n})\r\nclass HTMLEHeightSashElementBase extends HTMLElement implements HTMLEHeightSashElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    static {\r\n        style = /*css*/`\r\n            :host {\r\n                display: block;\r\n                background-color: var(--selected-item-color);\r\n                transition-property: opacity;\r\n                transition-delay: 0.2s;\r\n                transition-duration: 0.2s;\r\n                transition-timing-function: ease-out;\r\n                \r\n                height: 4px;\r\n                cursor: ns-resize;\r\n            }\r\n        `;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"top\"})\r\n    growdir!: \"top\" | \"bottom\";\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n    #queuedPointerCallback: FrameRequestCallback | null;\r\n    #pointerMovement: number;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#target = null;\r\n        this.#queuedPointerCallback = null;\r\n        this.#pointerMovement = 0;\r\n        this.#onCapture = false;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    #pointerMoveCallback(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const {style} = target;\r\n            const {growdir} = this;\r\n            const movementY = this.#pointerMovement;\r\n            const height = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            const newHeight = Math.trunc(height + (growdir == \"top\" ? -1 : 1) * movementY);\r\n            style.setProperty(\"height\", `${newHeight}px`);\r\n            const computedNewHeight = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            style.setProperty(\"height\", `${computedNewHeight}px`);\r\n            this.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        this.#queuedPointerCallback = null;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        const rootNode = <ShadowRoot | Document>this.getRootNode();\r\n        this.#target = rootNode.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            if (this.#queuedPointerCallback == null) {\r\n                this.#pointerMovement = event.movementY;\r\n                this.#queuedPointerCallback = this.#pointerMoveCallback.bind(this);\r\n                requestAnimationFrame(this.#queuedPointerCallback);\r\n            }\r\n            else {\r\n                this.#pointerMovement += event.movementY;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n}\r\n\r\nvar HTMLEHeightSashElement: HTMLEHeightSashElementConstructor = HTMLEHeightSashElementBase;","import { CustomElement, AttributeProperty } from \"../Element\";\r\n\r\nexport { HTMLEImportElement };\r\n\r\ninterface HTMLEImportElementConstructor {\r\n    prototype: HTMLEImportElement;\r\n    new(): HTMLEImportElement;\r\n}\r\n\r\ninterface HTMLEImportElement extends HTMLElement {\r\n    src: string;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-import\": HTMLEImportElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"load\": Event;\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-import\"\r\n})\r\nclass HTMLEImportElementBase extends HTMLElement implements HTMLEImportElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    src!: string;\r\n    \r\n    connectedCallback(): void {\r\n        const {src} = this;\r\n        if (src) {\r\n            this.#importRequest(src);\r\n        }\r\n    }\r\n\r\n    async #importRequest(src: string): Promise<void> {\r\n        this.outerHTML = await fetch(src).then((response: Response) => {\r\n            if (response.ok) {\r\n                return response.text();\r\n            }\r\n            else {\r\n                throw new Error(response.statusText);\r\n            }\r\n        });\r\n        this.dispatchEvent(new Event(\"load\", {bubbles: true}));\r\n    }\r\n}\r\n\r\nvar HTMLEImportElement: HTMLEImportElementConstructor = HTMLEImportElementBase;","import { CustomElement, AttributeProperty, element, trimMultilineIndent } from \"../Element\";\r\n\r\nexport { HTMLELoaderElement };\r\n\r\ninterface HTMLELoaderElementConstructor {\r\n    prototype: HTMLELoaderElement;\r\n    new(): HTMLELoaderElement;\r\n}\r\n\r\ninterface HTMLELoaderElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    type: \"bar\" | \"spinner\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-loader\": HTMLELoaderElement,\r\n    }\r\n}\r\n\r\nvar barShadowTemplate: HTMLTemplateElement;\r\nvar spinnerShadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-loader\"\r\n})\r\nclass HTMLELoaderElementBase extends HTMLElement implements HTMLELoaderElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String, defaultValue: \"bar\", observed: true})\r\n    type!: \"bar\" | \"spinner\";\r\n\r\n    static {\r\n        barShadowTemplate = element(\"template\");\r\n        barShadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"bar\"\r\n                },\r\n                children: [\r\n                    element(\"div\", {\r\n                        attributes: {\r\n                            part: \"slider\"\r\n                        },\r\n                        children: [\r\n                            element(\"div\", {\r\n                                attributes: {\r\n                                    part: \"cursor\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n        spinnerShadowTemplate = element(\"template\");\r\n        spinnerShadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"spinner\"\r\n                }\r\n            })\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: inline-block;\r\n            }\r\n\r\n            :host(:is(:not([type]), [type=\"bar\"])) {\r\n                border: 1px solid gainsboro;\r\n                border-radius: 4px;\r\n            }\r\n        \r\n            [part=\"bar\"] {\r\n                position: relative;\r\n                overflow: hidden;\r\n                height: 6px;\r\n                width: 100%;\r\n                width: 86px;\r\n                border-radius: 4px;\r\n            }\r\n        \r\n            [part=\"slider\"] {\r\n                display: flex;\r\n                position: absolute;\r\n                width: 100%;\r\n                height: 100%;\r\n                animation-name: slider;\r\n            }\r\n        \r\n            [part=\"slider\"],\r\n            [part=\"cursor\"] {\r\n                border-radius: 4px;\r\n                will-change: transform;\r\n                animation-duration: 1s;\r\n                animation-timing-function: linear;\r\n                animation-iteration-count: infinite;\r\n            }\r\n        \r\n            [part=\"cursor\"] {\r\n                display: block;\r\n                width: 32px;\r\n                background-color: rgb(0, 128, 255);\r\n                animation-name: cursor;\r\n            }\r\n        \r\n            :host([type=\"spinner\"]) {\r\n                display: inline-block;\r\n                width: 20px;\r\n                height: 20px;\r\n            }\r\n        \r\n            [part=\"spinner\"] {\r\n                display: inline-block;\r\n                width: 18px;\r\n                height: 18px;\r\n            }\r\n        \r\n            [part=\"spinner\"]::after {\r\n                content: \" \";\r\n                display: block;\r\n                width: 12px;\r\n                height: 12px;\r\n                border-radius: 50%;\r\n                border-width: 4px;\r\n                border-style: solid;\r\n                border-color: transparent rgb(0, 128, 255);\r\n                animation: spin 1.2s linear infinite;\r\n            }\r\n        \r\n            @keyframes slider {\r\n                0% {\r\n                    transform: translateX(0%);\r\n                }\r\n                100% {\r\n                    transform: translateX(100%);\r\n                }\r\n            }\r\n        \r\n            @keyframes cursor {\r\n                0% {\r\n                    transform: translateX(-100%);\r\n                }\r\n                100% {\r\n                    transform: translateX(100%);\r\n                }\r\n            }\r\n        \r\n            @keyframes spin {\r\n                0% {\r\n                    transform: rotate(0);\r\n                }\r\n                100% {\r\n                    transform: rotate(360deg);\r\n                }\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.replaceChildren(\r\n            barShadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"type\": {\r\n                this.#updateTemplate();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #updateTemplate(): void {\r\n        const {type, shadowRoot} = this;\r\n        switch (type) {\r\n            case \"spinner\": {\r\n                shadowRoot.replaceChildren(\r\n                    spinnerShadowTemplate.content.cloneNode(true)\r\n                );\r\n                break;\r\n            }\r\n            case \"bar\": {\r\n                shadowRoot.replaceChildren(\r\n                    barShadowTemplate.content.cloneNode(true)\r\n                );\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLELoaderElement: HTMLELoaderElementConstructor = HTMLELoaderElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEWidthSashElement };\r\n\r\ninterface HTMLEWidthSashElementConstructor {\r\n    prototype: HTMLEWidthSashElement;\r\n    new(): HTMLEWidthSashElement;\r\n}\r\n\r\ninterface HTMLEWidthSashElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    controls: string;\r\n    growdir: \"right\" | \"left\";\r\n    max: boolean;\r\n    setWidth(width: number): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-wsash\": HTMLEWidthSashElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"resize\": Event;\r\n    }\r\n}\r\n\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-wsash\"\r\n})\r\nclass HTMLEWidthSashElementBase extends HTMLElement implements HTMLEWidthSashElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"right\"})\r\n    growdir!: \"right\" | \"left\";\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    max!: boolean;\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n    #queuedPointerCallback: FrameRequestCallback | null;\r\n    #pointerMovement: number;\r\n\r\n    static {\r\n        style = /*css*/`\r\n            :host {\r\n                display: block;\r\n                background-color: var(--selected-item-color);\r\n                transition-property: opacity;\r\n                transition-delay: 0.2s;\r\n                transition-duration: 0.2s;\r\n                transition-timing-function: ease-out;\r\n                \r\n                width: 4px;\r\n                cursor: ew-resize;\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#target = null;\r\n        this.#queuedPointerCallback = null;\r\n        this.#pointerMovement = 0;\r\n        this.#onCapture = false;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    setWidth(width: number): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const {max} = this;\r\n            const {style} = target;\r\n            style.setProperty(\"width\", `${width}px`);\r\n            if (max) {\r\n                style.setProperty(\"max-width\", `${width}px`);\r\n            }\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const {growdir} = this;\r\n            const movementX = this.#pointerMovement;\r\n            const width = parseFloat(targetComputedStyle.getPropertyValue(\"width\"));\r\n            const newWidth = width + (growdir == \"right\" ? 1 : -1) * movementX;\r\n            this.setWidth(newWidth);\r\n            this.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        this.#pointerMovement = 0;\r\n        this.#queuedPointerCallback = null;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        const rootNode = <ShadowRoot | Document>this.getRootNode();\r\n        this.#target = rootNode.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            if (this.#queuedPointerCallback == null) {\r\n                this.#queuedPointerCallback = this.#pointerMoveCallback.bind(this);\r\n                requestAnimationFrame(this.#queuedPointerCallback);\r\n            }\r\n            this.#pointerMovement += event.movementX;\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n}\r\n\r\nvar HTMLEWidthSashElement: HTMLEWidthSashElementConstructor = HTMLEWidthSashElementBase;","import { areAttributesMatching, AttributeMutationMixin } from \"../elements/Element\";\r\n\r\nexport { AttributeMixinsObserver };\r\n\r\ninterface AttributeMixinsObserverConstructor {\r\n    prototype: AttributeMixinsObserver;\r\n    new(mixins: AttributeMutationMixin[]): AttributeMixinsObserver;\r\n}\r\n\r\ninterface AttributeMixinsObserver {\r\n    observe(target: Node): void;\r\n    trigger(): void;\r\n    disconnect(): void;\r\n}\r\n\r\nclass AttributeMixinsObserverBase implements AttributeMixinsObserver {\r\n    #observer: MutationObserver;\r\n    #mixins: AttributeMutationMixin[];\r\n\r\n    constructor(mixins: AttributeMutationMixin[]) {\r\n        this.#observer = new MutationObserver(\r\n            this.#callback.bind(this)\r\n        );\r\n        this.#mixins = mixins.slice();\r\n    }\r\n\r\n    trigger(): void {\r\n        this.#callback(this.#observer.takeRecords());\r\n    }\r\n\r\n    observe(target: Node): void  {\r\n        this.#observer.observe(target, {\r\n            childList: true,\r\n            subtree: true,\r\n            attributeFilter: this.#mixins.map((mixin => mixin.attributeName))\r\n        });\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#observer.disconnect();\r\n    }\r\n\r\n    #callback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            mutation.addedNodes.forEach((node: Node) => {\r\n                if (node instanceof Element) {\r\n                    this.#attachMatchingAttributeMixinsInSubtree(node);\r\n                }\r\n            });\r\n            mutation.removedNodes.forEach((node: Node) => {\r\n                if (node instanceof Element) {\r\n                    this.#detachMatchingAttributeMixinsInSubtree(node);\r\n                }\r\n            });\r\n            if (mutation.target instanceof Element) {\r\n                const targetElement = mutation.target;\r\n                const attributeName = mutation.attributeName;\r\n                if (attributeName) {\r\n                    const relatedMixins = this.#mixins.filter(mixin => mixin.attributeName == attributeName);\r\n                    relatedMixins.forEach((mixin) => {\r\n                        if (areAttributesMatching(\r\n                                mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                                attributeName!, targetElement.getAttribute(attributeName!)\r\n                            )) {\r\n                                mixin.attach(targetElement);\r\n                        }\r\n                        else {\r\n                            mixin.detach(targetElement);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    #attachMatchingAttributeMixinsInSubtree(element: Element) {\r\n        Array.from(element.attributes).forEach((attr) => {\r\n            let matchingMixins = this.#mixins.filter(\r\n                mixin => areAttributesMatching(\r\n                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                    attr.name, attr.value\r\n                )\r\n            );\r\n            matchingMixins.forEach((mixin) => {\r\n                mixin.attach(element);\r\n            });\r\n        });\r\n        let childIndex = 0;\r\n        const {children} = element;\r\n        while (childIndex < children.length) {\r\n            const child = children.item(childIndex);\r\n            if (child !== null) {\r\n                this.#attachMatchingAttributeMixinsInSubtree(child);\r\n            }\r\n            childIndex++;\r\n        }\r\n    }\r\n\r\n    #detachMatchingAttributeMixinsInSubtree(element: Element) {\r\n        Array.from(element.attributes).forEach((attr) => {\r\n            let matchingMixins = this.#mixins.filter(\r\n                mixin => areAttributesMatching(\r\n                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                    attr.name, attr.value\r\n                )\r\n            );\r\n            matchingMixins.forEach((mixin) => {\r\n                mixin.detach(element);\r\n            });\r\n        });\r\n        let childIndex = 0;\r\n        const {children} = element;\r\n        while (childIndex < children.length) {\r\n            const child = children.item(childIndex);\r\n            if (child !== null) {\r\n                this.#detachMatchingAttributeMixinsInSubtree(child);\r\n            }\r\n            childIndex++;\r\n        }\r\n    }\r\n}\r\n\r\nvar AttributeMixinsObserver: AttributeMixinsObserverConstructor = AttributeMixinsObserverBase;","import { ReactiveChildElements } from \"../../elements/Element\";\r\nimport { camelToTrain } from \"../../elements/Snippets\";\r\n\r\nexport { WidgetFactoryConstructor };\r\n\r\nexport { widget };\r\nexport { Widget };\r\nexport { WidgetFactory };\r\nexport { widgets };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {}\r\n}\r\n\r\ninterface WidgetFactoryConstructor {\r\n    prototype: WidgetFactory;\r\n    new(): WidgetFactory;\r\n}\r\n\r\ninterface WidgetFactory {\r\n    create(properties?: object): HTMLElement;\r\n    slot(root: HTMLElement, name: string | null): HTMLElement | null;\r\n}\r\n\r\nvar slotsMap: WeakMap<HTMLElement, {\r\n    widget: WidgetFactory,\r\n    element: WeakRef<HTMLElement>;\r\n    slot: string | null;\r\n}[]> = new WeakMap();\r\nvar slotsObserver = new MutationObserver(\r\n    (mutationsList: MutationRecord[]) => {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            if (target instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"childList\": {\r\n                        const slotReferences = slotsMap.get(target);\r\n                        if (slotReferences) {\r\n                            slotReferences.forEach(slotRef_i => {\r\n                                const {widget, element, slot} = slotRef_i;\r\n                                const slottedCallback = (widget as any)[\"slottedCallback\"];\r\n                                if (typeof slottedCallback == \"function\") {\r\n                                    slottedCallback(element.deref(), target, slot);\r\n                                }\r\n                            });\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n);\r\n\r\nvar widgetsMap: WeakMap<HTMLElement, WidgetFactory> = new WeakMap();\r\nvar attributesObserver = new MutationObserver(\r\n    (mutationsList: MutationRecord[]) => {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            if (target instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"attributes\": {\r\n                        const {attributeName, oldValue} = mutation;\r\n                        const widget = widgetsMap.get(target);\r\n                        if (widget) {\r\n                            const attributeChangedCallback = (widget as any)[\"attributeChangedCallback\"];\r\n                            if (typeof attributeChangedCallback == \"function\") {\r\n                                attributeChangedCallback(target, attributeName, oldValue, target.getAttribute(attributeName!));\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n);\r\n\r\nclass WidgetFactoryBase implements WidgetFactory {\r\n\r\n    constructor() {\r\n        const widget = <WidgetFactory>this;\r\n        this.create = new Proxy(\r\n            this.create, {\r\n                apply: (target, thisArg, argumentsList: Parameters<WidgetFactory[\"create\"]>) => {\r\n                    const element = <HTMLElement>Reflect.apply(target, thisArg, argumentsList);\r\n                    const observedSlots = <(string | null)[]>(widget as any)[\"observedSlots\"];\r\n                    if (Array.isArray(observedSlots)) {\r\n                        const slots = observedSlots\r\n                            .map(slotName_i => {\r\n                                return {\r\n                                    slotName: slotName_i,\r\n                                    slotElement: widget.slot(element, slotName_i)\r\n                                };\r\n                            });\r\n                        slots.forEach(slot_i => {\r\n                            const {slotElement, slotName} = slot_i;\r\n                            if (slotElement) {\r\n                                slotsObserver.observe(slotElement, {\r\n                                    childList: true\r\n                                });\r\n                                const slotReferences = slotsMap.get(slotElement);\r\n                                const slotReference = {widget, element: new WeakRef(element), slot: slotName};\r\n                                if (Array.isArray(slotReferences)) {\r\n                                    slotReferences.push(slotReference);\r\n                                }\r\n                                else {\r\n                                    slotsMap.set(slotElement, new Array(slotReference));\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                    const observedAttributes = (widget as any)[\"observedAttributes\"];\r\n                    if (Array.isArray(observedAttributes)) {\r\n                        widgetsMap.set(element, widget);\r\n                        attributesObserver.observe(element, {\r\n                            attributes: true,\r\n                            attributeFilter: observedAttributes,\r\n                            attributeOldValue: true\r\n                        });\r\n                    }\r\n                    return element;\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    create(): HTMLElement {\r\n        throw new Error(`create method is not implemented`);\r\n    }\r\n\r\n    slot(): HTMLElement | null {\r\n        return null;\r\n    }\r\n\r\n    get observedSlots(): string[] {\r\n        return [\"\"];\r\n    }\r\n}\r\n\r\nvar WidgetFactory: WidgetFactoryConstructor = WidgetFactoryBase;\r\nvar widgets: Map<string, WidgetFactory> = new Map();\r\n\r\ninterface WidgetInit<K extends keyof WidgetNameMap> {\r\n    properties?: Parameters<WidgetNameMap[K][\"create\"]>[0],\r\n    attributes?: {\r\n        [name: string]: number | string | boolean\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    slotted?: {\r\n        [slot: string]: Node | string | (Node | string)[] | NodeList | ReactiveChildElements\r\n    } | (Node | string | (Node | string)[] | NodeList | ReactiveChildElements),\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: K, init?: WidgetInit<K>): ReturnType<WidgetNameMap[K][\"create\"]>;\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: K, init?: WidgetInit<K>): HTMLElement {\r\n    const widget = widgets.get(name);\r\n    if (widget) {\r\n        if (init !== undefined) {\r\n            const {properties, attributes, dataset, slotted, listeners} = init;\r\n            const element = widget.create(properties);\r\n            if (attributes) {\r\n                Object.entries(attributes).forEach(([attributeName, attributeValue]) => {\r\n                    if (attributeValue !== undefined) {\r\n                        if (typeof attributeValue === \"boolean\") {\r\n                            element.toggleAttribute(camelToTrain(attributeName), attributeValue);\r\n                        }\r\n                        else {\r\n                            element.setAttribute(camelToTrain(attributeName), String(attributeValue));\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            if (dataset) {\r\n                const {dataset: elementDataset} = element;\r\n                Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                    elementDataset[datasetEntry_i] = String(dataset[datasetEntry_i]);\r\n                });\r\n            }\r\n            if (slotted) {\r\n                if (typeof slotted === \"function\" || Array.isArray(slotted) || slotted instanceof NodeList || typeof slotted === \"string\" || slotted instanceof Node) {\r\n                    const slot = widget.slot(element, null);\r\n                    if (slot) {\r\n                        if (typeof slotted === \"function\") {\r\n                            slotted(slot);\r\n                        }\r\n                        else if (typeof slotted === \"object\" && \"length\" in slotted) {\r\n                            slot.append(...Array.from(slotted));\r\n                        }\r\n                        else {\r\n                            slot.append(slotted);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    Object.entries(slotted).forEach(([slot_i, slotted]) => {\r\n                        const slot = widget.slot(element, slot_i);\r\n                        if (slot) {\r\n                            if (typeof slotted === \"function\") {\r\n                                slotted(slot);\r\n                            }\r\n                            else if (typeof slotted === \"object\" && \"length\" in slotted) {\r\n                                slot.append(...Array.from(slotted));\r\n                            }\r\n                            else {\r\n                                slot.append(slotted);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            if (listeners) {\r\n                Object.entries(listeners).forEach(([name_i, listener_i]) => {\r\n                    if (Array.isArray(listener_i)) {\r\n                        element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                    }\r\n                    else {\r\n                        element.addEventListener(name_i, listener_i);\r\n                    }\r\n                });\r\n            }\r\n            return element;\r\n        }\r\n        else {\r\n            return widget.create();\r\n        }\r\n    }\r\n    throw new Error(`Unknown widget ${name}. The corresponding module might not be imported.`);\r\n}\r\n\r\ninterface WidgetDecorator {\r\n    (init: {\r\n        name: string;\r\n    }): <W extends WidgetFactoryConstructor>(widget: W) => W;\r\n}\r\n\r\nconst Widget: WidgetDecorator = function(init: {\r\n    name: string;\r\n}) {\r\n    return <W extends WidgetFactoryConstructor>(\r\n        widget: W\r\n    ) => {\r\n        const {name} = init;\r\n        widgets.set(\r\n            name,\r\n            new widget()\r\n        );\r\n        return widget;\r\n    }\r\n}","import { element } from \"../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"./Widget\";\r\n\r\nexport { separatorWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"separator\": SeparatorWidgetFactory\r\n    }\r\n}\r\n\r\ninterface SeparatorWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar separatorWidget = new (\r\nWidget({\r\n    name: \"separator\"\r\n})(class SeparatorWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"separator\",\r\n                role: \"separator\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuItemWidget };\r\n\r\ntype MenuItemType = \"button\" | \"radio\" | \"checkbox\" | \"menu\" | \"submenu\";\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menuitem\": MenuItemWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        type?: MenuItemType;\r\n        checked?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void;\r\n    getMenu(item: HTMLElement): HTMLElement | null;\r\n    getKeyShortcut(item: HTMLElement): string | null;\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    getType(item: HTMLElement): MenuItemType | null;\r\n    setType(item: HTMLElement, type: MenuItemType): void;\r\n    getValue(item: HTMLElement): string;\r\n    setValue(item: HTMLElement, value: string): void;\r\n    getName(item: HTMLElement): string;\r\n    setName(item: HTMLElement, value: string): void;\r\n    getChecked(item: HTMLElement): boolean;\r\n    setChecked(item: HTMLElement, value: boolean): void;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setExpanded(item: HTMLElement, value: boolean): void;\r\n    getExpanded(item: HTMLElement): boolean;\r\n    toggle(item: HTMLElement, force?: boolean): void;\r\n    expand(item: HTMLElement): void;\r\n    collapse(item: HTMLElement): void;\r\n}\r\n\r\nvar menuItemWidget = new(\r\nWidget({\r\n    name: \"menuitem\"\r\n})(\r\nclass MenuItemWidgetFactoryBase extends WidgetFactory implements MenuItemWidgetFactory {\r\n    #iconPartTemplate: HTMLElement;\r\n    #arrowPartTemplate : HTMLElement;\r\n    #keyshortcutsPartTemplate: HTMLElement;\r\n    #template: HTMLElement;\r\n    #types: MenuItemType[];\r\n    #typesFeatures: {\r\n        [key in MenuItemType]: {\r\n            role: string,\r\n            hasIcon: boolean,\r\n            hasArrow: boolean\r\n        }\r\n    };\r\n\r\n    constructor() {\r\n        super();\r\n        this.#iconPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"icon\"\r\n            }\r\n        });\r\n        this.#arrowPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"arrow\"\r\n            }\r\n        });\r\n        this.#keyshortcutsPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"keyshortcuts\"\r\n            }\r\n        });\r\n        this.#template = element(\"button\", {\r\n            attributes: {\r\n                class: \"menuitem\",\r\n                role: \"menuitem\",\r\n                type: \"button\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                this.#iconPartTemplate.cloneNode(true),\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n        this.#types = [\"checkbox\", \"radio\", \"menu\", \"submenu\", \"button\"];\r\n        this.#typesFeatures = {\r\n            button: {\r\n                role: \"menuitem\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            checkbox: {\r\n                role: \"menuitemcheckbox\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            radio: {\r\n                role: \"menuitemradio\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            menu: {\r\n                role: \"menuitem\",\r\n                hasIcon: false,\r\n                hasArrow: false\r\n            },\r\n            submenu: {\r\n                role: \"menuitem\",\r\n                hasIcon: true,\r\n                hasArrow: true\r\n            }\r\n        }\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        type: MenuItemType;\r\n        checked?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (init !== undefined) {\r\n            const {id, classList, tabIndex, keyshortcut, checked, type, label, name, value, disabled} = init;\r\n            if (id !== undefined) {\r\n                item.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                item.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                item.tabIndex = tabIndex;\r\n            }\r\n            if (keyshortcut !== undefined) {\r\n                this.setKeyShortcut(item, keyshortcut);\r\n            }\r\n            if (checked !== undefined) {\r\n                this.setChecked(item, checked);\r\n            }\r\n            if (type !== undefined) {\r\n                if (type == \"menu\" || type == \"submenu\") {\r\n                    this.setExpanded(item, false);\r\n                }\r\n                this.setType(item, type);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(item, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(item, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(item: HTMLElement): HTMLElement | null {\r\n        return item;\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void {\r\n        const hasChildMenu = Array.from(slot.childNodes).some(\r\n            childNode_i => childNode_i instanceof HTMLElement && childNode_i.classList.contains(\"menu\")\r\n        );\r\n        item.setAttribute(\"aria-haspopup\", String(hasChildMenu));\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n\r\n    getMenu(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .menu\");\r\n    }\r\n\r\n    getKeyShortcut(item: HTMLElement): string | null {\r\n        return item.getAttribute(\"aria-keyshortcuts\");\r\n    }\r\n\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void {\r\n        let keyshortcutsPart = item.querySelector(\":scope > .keyshortcuts\");\r\n        if (value !== null) {\r\n            item.setAttribute(\"aria-keyshortcuts\", value);\r\n            if (!keyshortcutsPart) {\r\n                const labelPart = this.#label(item);\r\n                const keyshortcutsPartTemplate = this.#keyshortcutsPartTemplate;\r\n                keyshortcutsPart = <HTMLElement>keyshortcutsPartTemplate.cloneNode(true);\r\n                labelPart.after(keyshortcutsPart);\r\n            }\r\n            keyshortcutsPart.textContent = value;\r\n        }\r\n        else {\r\n            item.removeAttribute(\"aria-keyshortcuts\");\r\n            if (keyshortcutsPart) {\r\n                keyshortcutsPart.remove();\r\n            }\r\n        }\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n    \r\n    getType(item: HTMLElement): MenuItemType | null {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`menuitem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setType(item: HTMLElement, type: MenuItemType): void {\r\n        const typesFeatures = this.#typesFeatures;\r\n        const iconPartTemplate = this.#iconPartTemplate;\r\n        const arrowPartTemplate = this.#arrowPartTemplate;\r\n        const {role, hasIcon, hasArrow} = typesFeatures[type];\r\n        const oldType = this.getType(item);\r\n        const {classList} = item;\r\n        if (oldType) {\r\n            classList.remove(`menuitem-${oldType}`);\r\n        }\r\n        classList.add(`menuitem-${type}`);\r\n        item.setAttribute(\"role\", role);\r\n        const labelPart = this.#label(item);\r\n        const iconPart = item.querySelector(\":scope > .icon\");\r\n        const arrowPart = item.querySelector(\":scope > .arrow\");\r\n        if (hasIcon) {\r\n            if (!iconPart && labelPart) {\r\n                labelPart.before(iconPartTemplate.cloneNode(true));\r\n            }\r\n        }\r\n        else {\r\n            if (iconPart) {\r\n                iconPart.remove();\r\n            }\r\n        }\r\n        if (hasArrow) {\r\n            if (!arrowPart && labelPart) {\r\n                labelPart.after(arrowPartTemplate.cloneNode(true));\r\n            }\r\n        }\r\n        else {\r\n            if (arrowPart) {\r\n                arrowPart.remove();\r\n            }\r\n        }\r\n    }\r\n\r\n    getValue(item: HTMLElement): string {\r\n        return item.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"value\", value);\r\n    }\r\n    \r\n    getName(item: HTMLElement): string {\r\n        return item.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getChecked(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-checked\") ?? String(false));\r\n    }\r\n\r\n    setChecked(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-checked\", String(value));\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-expanded\", String(value));\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-expanded\") ?? String(false));\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        const expand = force ?? !this.getExpanded(item);\r\n        this.setExpanded(item, expand);\r\n        if (expand) {\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    expand(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (!expanded) {\r\n            this.setExpanded(item, true);\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    collapse(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (expanded) {\r\n            this.setExpanded(item, false);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.setChecked(targetItem, !this.getChecked(targetItem));\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.setChecked(targetItem, true);\r\n                    break;\r\n                }\r\n                case \"menu\":\r\n                case \"submenu\": {\r\n                    this.toggle(targetItem);\r\n                    if (this.getExpanded(targetItem)) {\r\n                        this.getMenu(targetItem)?.focus({preventScroll: true});\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(item: HTMLElement): void {\r\n        const menu = this.getMenu(item);\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = item.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const type = this.getType(item);\r\n            if (type == \"menu\") {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const closestMenu = item.closest(\".menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    const overflowX = itemRight + menuWidth - clientWidth;\r\n                    const overflowY = itemTop + menuHeight - clientHeight;\r\n                    menuStyle.setProperty(\"left\", `${\r\n                        overflowX > 0 ?\r\n                        itemLeft - menuWidth - closestMenuLeft :\r\n                        itemRight - closestMenuLeft\r\n                    }px`);\r\n                    const menuComputedStyle = window.getComputedStyle(menu);\r\n                    const {paddingTop, paddingBottom} = menuComputedStyle;\r\n                    const menuPaddingTop = parseFloat(paddingTop);\r\n                    const menuPaddingBottom = parseFloat(paddingBottom);\r\n                    menuStyle.setProperty(\"top\", `${\r\n                        overflowY > 0 ?\r\n                        itemBottom - menuHeight - closestMenuTop + menuPaddingBottom :\r\n                        itemTop - closestMenuTop - menuPaddingTop\r\n                    }px`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { menuItemWidget } from \"./MenuItemWidget\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuBarWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menubar\": MenuBarWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuBarWidgetFactory extends WidgetFactory {\r\n    setExpanded(menubar: HTMLElement, value: boolean): void;\r\n    getExpanded(menubar: HTMLElement): boolean;\r\n}\r\n\r\nvar menuBarWidget = new (\r\nWidget({\r\n    name: \"menubar\"\r\n})(class MenubarWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menubar\",\r\n                role: \"menubar\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        )\r\n    }\r\n\r\n    create() {\r\n        const menubar = <HTMLElement>this.#template.cloneNode(true);\r\n        menubar.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        menubar.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        menubar.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        menubar.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        menubar.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        return menubar;\r\n    }\r\n\r\n    slot(menubar: HTMLElement) {\r\n        return menubar;\r\n    }\r\n\r\n    setExpanded(menubar: HTMLElement, value: boolean): void {\r\n        menubar.toggleAttribute(\"aria-expanded\", value);\r\n    }\r\n\r\n    getExpanded(menubar: HTMLElement): boolean {\r\n        return menubar.hasAttribute(\"aria-expanded\");\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node) {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"menuitem\") && !menuItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"menuitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getActiveItem(menubar: HTMLElement): HTMLElement | null {\r\n        return menubar.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem:focus-within\"\r\n        );\r\n    }\r\n\r\n    #firstItem(menubar: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menubar;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(menubar: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menubar;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n\r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = menuItemWidget.getMenu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #isClosestMenu(menubar: HTMLElement, target: HTMLElement): boolean {\r\n        return target.closest(\":is(.menubar, .menu)\") == menubar;\r\n    }\r\n\r\n    #nearestItem(menubar: HTMLElement, target: HTMLElement): HTMLElement | null {\r\n        return Array.from(menubar.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem) {\r\n            const expanded = this.getExpanded(menubar);\r\n            const isClosestMenu = this.#isClosestMenu(menubar, targetItem);\r\n            if (isClosestMenu) {\r\n                const isExpanded = !expanded;\r\n                this.setExpanded(menubar, isExpanded);\r\n                if (isExpanded) {\r\n                    if (targetItem !== null && !menuItemWidget.getExpanded(targetItem)) {\r\n                        menuItemWidget.expand(targetItem);\r\n                    }\r\n                    const menu = menuItemWidget.getMenu(targetItem);\r\n                    menu?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    menubar.focus({preventScroll: true})\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && this.getExpanded(menubar)) {\r\n            const nearestItem = this.#nearestItem(menubar, target);\r\n            if (nearestItem) {\r\n                menuItemWidget.expand(nearestItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && !target.contains(<Element>relatedTarget)) {\r\n            const nearestItem = this.#nearestItem(menubar, target);\r\n            if (nearestItem) {\r\n                menuItemWidget.collapse(nearestItem);\r\n            }\r\n        }\r\n        const lostFocusWithin = !menubar.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.setExpanded(menubar, false);\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const activeItem = this.#getActiveItem(menubar);\r\n            const expanded = this.getExpanded(menubar);\r\n            const isClosestMenu = this.#isClosestMenu(menubar, target);\r\n            if (isClosestMenu && target !== activeItem && expanded) {\r\n                const menu = menuItemWidget.getMenu(target);\r\n                if (menu) {\r\n                    menu.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    target.focus({preventScroll: true});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        let activeItem = this.#getActiveItem(menubar);\r\n        const expanded = this.getExpanded(menubar);\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem(menubar) :\r\n                    this.#firstItem(menubar);\r\n                previousItem?.focus({preventScroll: true});\r\n                activeItem = this.#getActiveItem(menubar);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem(menubar) : \r\n                    this.#lastItem(menubar);\r\n                nextItem?.focus({preventScroll: true});\r\n                activeItem = this.#getActiveItem(menubar);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    this.setExpanded(menubar, !expanded);\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.setExpanded(menubar, false);\r\n                    if (activeItem) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    menubar.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { menuItemWidget } from \"./MenuItemWidget\";\r\n\r\nexport { menuWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menu\": MenuWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        contextual?: boolean;\r\n        position?: {x: number, y: number};\r\n    }): HTMLElement;\r\n    setPosition(menu: HTMLElement, x: number, y: number): void;\r\n    getContextual(menu: HTMLElement): boolean;\r\n    setContextual(menu: HTMLElement, value: boolean): void;\r\n    items(menu: HTMLElement): HTMLElement[];\r\n}\r\n\r\nvar mouseOverExpandDelay = 0_200;\r\nvar mouseOutCollapseDelay = 0_400;\r\n\r\nvar menuWidget = new (\r\nWidget({\r\n    name: \"menu\"\r\n})(class MenuWidgetFactoryBase extends WidgetFactory implements MenuWidgetFactory {\r\n\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #toggleTimeouts: WeakMap<HTMLElement, {clear(): void;}>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menu\",\r\n                role: \"menu\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#toggleTimeouts = new WeakMap();\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        contextual?: boolean;\r\n        position?: {x: number, y: number};\r\n    }): HTMLElement {\r\n        const menu = <HTMLElement>this.#template.cloneNode(true);\r\n        menu.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        menu.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        menu.addEventListener(\"mouseout\", this.#handleMouseOutEvent.bind(this));\r\n        menu.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        menu.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, contextual, position} = properties;\r\n            if (id !== undefined) {\r\n                menu.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                menu.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                menu.tabIndex = tabIndex;\r\n            }\r\n            if (contextual !== undefined) {\r\n                this.setContextual(menu, contextual);\r\n            }\r\n            if (position !== undefined) {\r\n                const {x, y} = position;\r\n                this.setPosition(menu, x, y);\r\n            }\r\n        }\r\n        return menu;\r\n    }\r\n\r\n    slot(menu: HTMLElement): HTMLElement | null {\r\n        return menu;\r\n    }\r\n\r\n    setPosition(menu: HTMLElement, x: number, y: number): void {\r\n        const {style} = menu;\r\n        const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        const left = x + scrollX;\r\n        const top = y + scrollY;\r\n        const {clientWidth, clientHeight} = document.body;\r\n        const overflowX = left + menuWidth - clientWidth;\r\n        const overflowY = top + menuHeight - clientHeight;\r\n        style.setProperty(\"left\", `${overflowX > 0 ? left - menuWidth : left}px`);\r\n        style.setProperty(\"top\", `${overflowY > 0 ? top - menuHeight : top}px`);\r\n    }\r\n\r\n    getContextual(menu: HTMLElement): boolean {\r\n        const {classList} = menu;\r\n        return classList.contains(\"menu-contextual\");\r\n    }\r\n\r\n    setContextual(menu: HTMLElement, value: boolean): void {\r\n        const {classList} = menu;\r\n        if (value) {\r\n            classList.add(\"menu-contextual\");\r\n        }\r\n        else {\r\n            classList.remove(\"menu-contextual\");\r\n        }\r\n    }\r\n\r\n    items(menu: HTMLElement): HTMLElement[] {\r\n        return Array.from(menu.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        ));\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"menuitem\") && !menuItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"menuitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #collapseSubmenus(menu: HTMLElement): void {\r\n        menu.querySelectorAll<HTMLElement>(\":is(:scope, :scope > .menuitemgroup) > .menuitem[aria-expanded]\")\r\n            .forEach(menuitem_i => menuItemWidget.collapse(menuitem_i));\r\n    }\r\n\r\n    #isClosestMenu(menu: HTMLElement, target: HTMLElement): boolean {\r\n        return target.closest(\".menu\") == menu;\r\n    }\r\n\r\n    #nearestItem(menu: HTMLElement, target: HTMLElement): HTMLElement | null {\r\n        return Array.from(menu.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #firstItem(menu: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menu;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(menu: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menu;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n\r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = menuItemWidget.getMenu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #getActiveItem(menu: HTMLElement): HTMLElement | null {\r\n        return menu.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem:focus-within\"\r\n        );\r\n    }\r\n\r\n    async #setItemTimeout(item: HTMLElement, delay?: number): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => {\r\n                resolve(undefined);\r\n            }, delay ?? 0);\r\n            this.#toggleTimeouts.set(item, {\r\n                clear: () => {\r\n                    clearTimeout(timeout);\r\n                    reject();\r\n                }\r\n            });\r\n        }).then(() => {\r\n            this.#toggleTimeouts.delete(item);\r\n        });\r\n    }\r\n\r\n    #clearItemTimeout(item: HTMLElement): void {\r\n        const timeout = this.#toggleTimeouts.get(item);\r\n        if (typeof timeout !== \"undefined\") {\r\n            this.#toggleTimeouts.delete(item);\r\n            timeout.clear();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem) {\r\n            const contextual = this.getContextual(targetMenu);\r\n            if (contextual) {\r\n                try {\r\n                    targetMenu.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const isClosestMenu = this.#isClosestMenu(targetMenu, targetItem);\r\n                if (isClosestMenu) {\r\n                    const type = menuItemWidget.getType(targetItem);\r\n                    const name = menuItemWidget.getName(targetItem);\r\n                    const value = menuItemWidget.getValue(targetItem);\r\n                    if (type == \"radio\") {\r\n                        targetMenu.querySelectorAll<HTMLElement>(\r\n                            `:is(:scope, :scope > .menuitemgroup) > .menuitem-radio[name=${name}]`\r\n                        )\r\n                        .forEach((radio_i) => {\r\n                            menuItemWidget.setChecked(radio_i, menuItemWidget.getValue(radio_i) == value);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetMenu.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const contextual = this.getContextual(targetMenu);\r\n            if (contextual) {\r\n                try {\r\n                    targetMenu.remove();\r\n                } catch (error) {\r\n                    undefined;\r\n                }\r\n            }\r\n            else {\r\n                const nearestItem = this.#nearestItem(targetMenu, <HTMLElement>target);\r\n                if (nearestItem) {\r\n                    menuItemWidget.collapse(nearestItem);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetMenu);\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem(targetMenu) :\r\n                    this.#firstItem(targetMenu);\r\n                previousItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem(targetMenu) :\r\n                    this.#firstItem(targetMenu);\r\n                nextItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetMenu);\r\n                firstItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetMenu);\r\n                lastItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const type = menuItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            menuItemWidget.expand(activeItem);\r\n                            const firstChildItem = this.#firstChildItem(activeItem);\r\n                            firstChildItem?.focus({preventScroll: true});\r\n                            event.preventDefault();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    const isTargetClosestMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                    ) == targetMenu;\r\n                    if (!isTargetClosestMenu) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const isTargetClosestMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                    ) == targetMenu;\r\n                    if (!isTargetClosestMenu) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const type = menuItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            const expanded = menuItemWidget.getExpanded(activeItem);\r\n                            if (!expanded) {\r\n                                menuItemWidget.expand(activeItem);\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                                event.stopPropagation();\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOutEvent(event: MouseEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const nearestItem = this.#nearestItem(targetMenu, target);\r\n            if (nearestItem !== null) {\r\n                if (menuItemWidget.getType(nearestItem) == \"submenu\" &&\r\n                    !menuItemWidget.getExpanded(nearestItem)) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                ) == targetMenu;\r\n                if (isTargetClosestMenu) {\r\n                    const activeItem = this.#getActiveItem(targetMenu);\r\n                    if (activeItem !== null &&\r\n                        menuItemWidget.getType(activeItem) == \"submenu\" &&\r\n                        menuItemWidget.getExpanded(activeItem)) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, mouseOutCollapseDelay)\r\n                            .then(() => {\r\n                                menuItemWidget.collapse(activeItem);\r\n                            })\r\n                            .catch(() => undefined);\r\n                    }\r\n                    const {clientX, clientY} = event;\r\n                    const {left, right, top, bottom} = targetMenu.getBoundingClientRect();\r\n                    const intersectsWithMouse = !(\r\n                        left > clientX || right < clientX || top > clientY || bottom < clientY\r\n                    );\r\n                    const containsRelatedTarget = targetMenu.contains(<Node>relatedTarget);\r\n                    if (intersectsWithMouse && containsRelatedTarget) {\r\n                        if (relatedTarget instanceof HTMLElement && relatedTarget.classList.contains(\"menu\") && relatedTarget !== targetMenu) {\r\n                            relatedTarget.focus({preventScroll: true});\r\n                        }\r\n                        else {\r\n                            targetMenu.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    if (!intersectsWithMouse) {\r\n                        targetMenu.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const nearestItem = this.#nearestItem(targetMenu, target); \r\n            if (nearestItem !== null) {\r\n                if (menuItemWidget.getType(nearestItem) == \"submenu\" &&\r\n                    menuItemWidget.getExpanded(nearestItem)) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                ) == targetMenu;\r\n                if (isTargetClosestMenu) {\r\n                    const activeItem = this.#getActiveItem(targetMenu);\r\n                    if (activeItem !== null) {\r\n                        if (menuItemWidget.getType(activeItem) == \"submenu\" &&\r\n                            menuItemWidget.getExpanded(activeItem) && \r\n                            !activeItem.contains(<HTMLElement>target)) {\r\n                            this.#clearItemTimeout(activeItem);\r\n                            this.#setItemTimeout(activeItem, mouseOutCollapseDelay)\r\n                                .then(() => {\r\n                                    menuItemWidget.collapse(activeItem);\r\n                                })\r\n                                .catch(() => undefined);\r\n                        }\r\n                    }\r\n                    nearestItem.focus({preventScroll: true});\r\n                    if (menuItemWidget.getType(nearestItem) == \"submenu\") {\r\n                        if (!menuItemWidget.getExpanded(nearestItem)) {\r\n                            this.#clearItemTimeout(nearestItem);\r\n                            this.#setItemTimeout(nearestItem, mouseOverExpandDelay)\r\n                                .then(() => {\r\n                                    const activeItem = this.#getActiveItem(targetMenu);\r\n                                    this.#collapseSubmenus(targetMenu);\r\n                                    if (activeItem) {\r\n                                        this.#clearItemTimeout(activeItem);\r\n                                        menuItemWidget.expand(activeItem);\r\n                                        menuItemWidget.getMenu(activeItem)?.focus({preventScroll: true});\r\n                                    }\r\n                                })\r\n                                .catch(() => undefined);\r\n                        }\r\n                        else {\r\n                            menuItemWidget.getMenu(nearestItem)?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menuitemgroup\": MenuItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar menuItemGroupWidget = new (\r\nWidget({\r\n    name: \"menuitemgroup\"\r\n})(class MenuItemGroupWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menuitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement): HTMLElement | null {\r\n        return group;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { treeItemWidget };\r\n\r\ntype TreeItemType = \"parent\" | \"leaf\";\r\n\r\ninterface TreeItemWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        type?: TreeItemType;\r\n        label?: string;\r\n        title?: string;\r\n        disabled?: boolean;\r\n        draggable?: boolean;\r\n    }): HTMLElement;\r\n    group(item: HTMLElement): HTMLElement | null;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setExpanded(item: HTMLElement, value: boolean): void;\r\n    getExpanded(item: HTMLElement): boolean;\r\n    setDraggable(row: HTMLElement, value: boolean): void;\r\n    getDraggable(item: HTMLElement): boolean;\r\n    getType(item: HTMLElement): TreeItemType | null;\r\n    setType(item: HTMLElement, value: TreeItemType): void;\r\n    toggle(item: HTMLElement, force?: boolean): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"treeitem\": TreeItemWidgetFactory,\r\n    }\r\n}\r\n\r\nvar treeItemWidget = new (\r\nWidget({\r\n    name: \"treeitem\"\r\n})(class TreeItemWidgetFactoryBase extends WidgetFactory implements TreeItemWidgetFactory {\r\n    #template: HTMLElement;\r\n    #types: TreeItemType[];\r\n\r\n    constructor() {\r\n        super();\r\n        this.#types = [\"parent\", \"leaf\"];\r\n        this.#template = element(\"li\", {\r\n            attributes: {\r\n                class: \"treeitem\",\r\n                role: \"treeitem\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"content\"\r\n                    },\r\n                    children: [\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"arrow\"\r\n                            }\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    group(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .treeitemgroup\");\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        label?: string;\r\n        title?: string;\r\n        type?: TreeItemType;\r\n        disabled?: boolean;\r\n        draggable?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, label, title, type = \"leaf\", disabled, draggable} = properties;\r\n            if (id !== undefined) {\r\n                item.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                item.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                item.tabIndex = tabIndex;\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (title !== undefined) {\r\n                this.setTitle(item, title);\r\n            }\r\n            this.setType(item, type);\r\n            if (type === \"parent\") {\r\n                this.setExpanded(item, false);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n            if (draggable !== undefined) {\r\n                this.setDraggable(item, draggable);\r\n            }\r\n            this.setSelected(item, false);\r\n        }\r\n        return item;\r\n    }\r\n\r\n    get observedSlots() {\r\n        return [\"content\", \"group\"];\r\n    }\r\n\r\n    slot(item: HTMLElement, name: string | null) {\r\n        switch (name) {\r\n            case \"content\":\r\n                return this.#content(item);\r\n            case \"group\":\r\n                return item;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #content(item: HTMLElement): HTMLElement {\r\n        const content = item.querySelector<HTMLElement>(\":scope > .content\")!;\r\n        if (!content) throw new Error(\"Missing .content slot.\");\r\n        return content;\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return item.getAttribute(\"aria-label\") ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"aria-label\", value);\r\n    }\r\n\r\n    getTitle(item: HTMLElement): string {\r\n        return item.title;\r\n    }\r\n\r\n    setTitle(item: HTMLElement, value: string): void {\r\n        item.title = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? Number(posInSet) : -1;\r\n    }\r\n\r\n    getType(item: HTMLElement): TreeItemType {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`treeitem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        throw new Error(\"Missing type.\");\r\n    }\r\n\r\n    setType(item: HTMLElement, type: TreeItemType): void {\r\n        const {classList} = item;\r\n        try {\r\n            const oldType = this.getType(item);\r\n            classList.remove(`treeitem-${oldType}`);\r\n        }\r\n        catch (e) {};\r\n        classList.add(`treeitem-${type}`);\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-expanded\", String(value));\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-expanded\") ?? String(false));\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            if (!classList.contains(\"active\")) {\r\n                classList.add(\"active\");\r\n            }\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDraggable(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"draggable\", String(value));\r\n    }\r\n\r\n    getDraggable(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"draggable\") ?? String(false));\r\n    }\r\n\r\n    setSelected(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-selected\", String(value));\r\n        item.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    setLevel(item: HTMLElement, value: number): void {\r\n        item.style.setProperty(\"--level\", String(value));\r\n    }\r\n\r\n    getLevel(item: HTMLElement): number {\r\n        return parseInt(item.style.getPropertyValue(\"--level\"));\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        this.setExpanded(item, force ?? !this.getExpanded(item));\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget, shiftKey, ctrlKey} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            if (type == \"parent\" && !(shiftKey || ctrlKey)) {\r\n                this.toggle(targetItem);\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { treeItemWidget } from \"./TreeItemWidget\";\r\n\r\nexport { treeWidget };\r\n\r\ninterface TreeWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement;\r\n    items(tree: HTMLElement): HTMLElement[];\r\n    selectedItems(tree: HTMLElement): HTMLElement[];\r\n    beginSelection(tree: HTMLElement): void;\r\n    endSelection(tree: HTMLElement): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"tree\": TreeWidgetFactory,\r\n    }\r\n}\r\n\r\nvar treeWidget = new (\r\nWidget({\r\n    name: \"tree\"\r\n})(class TreeWidgetFactoryBase extends WidgetFactory implements TreeWidgetFactory {\r\n\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"tree\",\r\n                role: \"tree\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement {\r\n        const tree = <HTMLElement>this.#template.cloneNode(true);\r\n        tree.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        tree.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        tree.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        tree.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        tree.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        tree.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        tree.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        tree.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        tree.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        tree.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        tree.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        this.#onSelection.set(tree, false);\r\n        this.#hasSelectionChanged.set(tree, false);\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, multisectable} = properties;\r\n            if (id !== undefined) {\r\n                tree.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                tree.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                tree.tabIndex = tabIndex;\r\n            }\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(tree, multisectable);\r\n            }\r\n        }\r\n        return tree;\r\n    }\r\n\r\n    slot(tree: HTMLElement) {\r\n        return tree;\r\n    }\r\n\r\n    slottedCallback(tree: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"treeitem\")) {\r\n                treeItemWidget.setPosInSet(child_i, i);\r\n                treeItemWidget.setLevel(child_i, 0);\r\n            }\r\n        });\r\n    }\r\n\r\n    items(tree: HTMLElement): HTMLElement[] {\r\n        return Array.from(tree.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .treeitemgroup) > .treeitem\"\r\n        ));\r\n    }\r\n\r\n    selectedItems(tree: HTMLElement): HTMLElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        let item = this.#firstItem(tree);\r\n        while (item !== null) {\r\n            const selected = treeItemWidget.getSelected(item);\r\n            if (selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(tree: HTMLElement): void {\r\n        this.#onSelection.set(tree, true);\r\n    }\r\n\r\n    endSelection(tree: HTMLElement): void {\r\n        this.#onSelection.set(tree, false);\r\n        if (this.#hasSelectionChanged.get(tree)) {\r\n            tree.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(tree, false);\r\n        }\r\n    }\r\n\r\n    setMultiSelectable(tree: HTMLElement, value: boolean): void {\r\n        tree.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(tree: HTMLElement): boolean {\r\n        return JSON.parse(tree.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    #getActiveItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".treeitem.active\");\r\n    }\r\n\r\n    #getDropTargetItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".treeitem.droptarget\");\r\n    }\r\n\r\n    #setDropTargetItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const {classList} = tree;\r\n        const dropTargetItem = this.#getDropTargetItem(tree);\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            treeItemWidget.setDropTarget(dropTargetItem, false);\r\n        }\r\n        if (item !== null) {\r\n            treeItemWidget.setDropTarget(item, true);\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"treeitem\") && !treeItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"treeitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextItem = this.#nextItem(from);\r\n            while (nextItem && nextItem !== to) {\r\n                range.push(nextItem);\r\n                nextItem = this.#nextItem(nextItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousItem = this.#previousItem(from);\r\n            while (previousItem && previousItem !== to) {\r\n                range.push(previousItem);\r\n                previousItem = this.#previousItem(previousItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        selectedItems.forEach((item_i) => {\r\n            if (!items.includes(item_i)) {\r\n                treeItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            const selected = treeItemWidget.getSelected(item_i);\r\n            if (tree.contains(item_i) && !selected) {\r\n                treeItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #addToSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        this.beginSelection(tree);\r\n        items.forEach((item_i) => {\r\n            if (!treeItemWidget.getSelected(item_i)) {\r\n                treeItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #removeFromSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                treeItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #clearSelection(tree: HTMLElement): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        selectedItems.forEach((item_i) => {\r\n            treeItemWidget.setSelected(item_i, false);\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #setActiveItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(tree);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            treeItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            treeItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #firstItem(tree: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(tree: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousSibling = <HTMLElement | null>walker.previousSibling();\r\n        return previousSibling ?\r\n            this.#deepestItem(previousSibling) :\r\n            <HTMLElement | null>walker.parentNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const type = treeItemWidget.getType(item);\r\n        const expanded = treeItemWidget.getExpanded(item);\r\n        return <HTMLElement | null>(\r\n            type === \"leaf\" ?\r\n                walker.nextNode() :\r\n                expanded ?\r\n                    walker.nextNode() :\r\n                    walker.nextSibling() ??\r\n                    (walker.parentNode(), walker.nextSibling())\r\n        );\r\n    }\r\n\r\n    #deepestItem(item: HTMLElement): HTMLElement {\r\n        const expanded = treeItemWidget.getExpanded(item);\r\n        if (expanded) {\r\n            const walker = this.#walker;\r\n            const lastItem = <HTMLElement>walker.lastChild();\r\n            if (lastItem) {\r\n                return this.#deepestItem(lastItem);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey, button} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        if (targetItem) {\r\n            const selected = treeItemWidget.getSelected(targetItem);\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setSelection(targetTree, targetItem);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            targetItem.blur();\r\n                            this.#removeFromSelection(targetTree, targetItem);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(targetTree, targetItem);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const activeItem = this.#getActiveItem(targetTree);\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                targetItem\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetTree, ...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                }\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(targetTree, targetItem);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            const type = treeItemWidget.getType(targetItem);\r\n            if (type == \"parent\") {\r\n                treeItemWidget.toggle(targetItem, true);\r\n            }\r\n            this.#setDropTargetItem(targetTree, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (!targetTree.contains(<Node>relatedTarget)) {\r\n            this.#setDropTargetItem(targetTree, null);\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const focusWithin = targetTree.contains(<Node>relatedTarget);\r\n        if (!focusWithin) {   \r\n            const activeItem = this.#getActiveItem(targetTree);\r\n            if (activeItem) {\r\n                activeItem.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetTree, targetItem);\r\n            targetTree.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetTree.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetTree.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetTree);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetTree, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetTree, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(\r\n                                firstItem,\r\n                                this.#deepestItem(lastItem)\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetTree, ...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const expanded = treeItemWidget.getExpanded(activeItem);\r\n                    if (expanded) {\r\n                        treeItemWidget.toggle(activeItem);\r\n                    }\r\n                    else {\r\n                        const walker = this.#walker;\r\n                        const parentItem = <HTMLElement>walker.parentNode();\r\n                        if (parentItem) {\r\n                            parentItem.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const expanded = treeItemWidget.getExpanded(activeItem);\r\n                    if (!expanded) {\r\n                        treeItemWidget.toggle(activeItem);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = treeItemWidget.getSelected(previousItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetTree, previousItem) :\r\n                                this.#addToSelection(targetTree, previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetTree);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = treeItemWidget.getSelected(nextItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetTree, nextItem) :\r\n                                this.#addToSelection(targetTree, nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetTree);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetTree);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetTree);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(targetTree, activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection(targetTree);\r\n                this.#setActiveItem(targetTree, null);\r\n                targetTree.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {target} = event;\r\n        const targetTree = <HTMLElement>target;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"treeitem\")) {\r\n            if (this.#onSelection.get(targetTree)) {\r\n                this.#hasSelectionChanged.set(target, true);\r\n            }\r\n            else {\r\n                targetTree.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { treeItemWidget } from \"./TreeItemWidget\";\r\n\r\nexport { treeItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"treeitemgroup\": TreeItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface TreeItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar treeItemGroupWidget = new (\r\nWidget({\r\n    name: \"treeitemgroup\"\r\n})(class TreeItemGroupWidgetFactoryBase extends WidgetFactory implements TreeItemGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"treeitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n\r\n    slottedCallback(group: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"treeitem\")) {\r\n                treeItemWidget.setPosInSet(child_i, i);\r\n                treeItemWidget.setLevel(child_i, (() => {\r\n                    let level = -1;\r\n                    let closestItem: HTMLElement | null = child_i;\r\n                    while (closestItem !== null && closestItem.matches(\".tree :scope\")) {\r\n                        closestItem = closestItem.parentElement?.closest(\".treeitem\") ?? null;\r\n                        level++;\r\n                    }\r\n                    return level;\r\n                })());\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { listItemWidget };\r\n\r\ninterface ListItemWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        label?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"listitem\": ListItemWidgetFactory,\r\n    }\r\n}\r\n\r\nvar listItemWidget = new (\r\nWidget({\r\n    name: \"listitem\"\r\n})(class ListItemWidgetFactoryBase extends WidgetFactory implements ListItemWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"li\", {\r\n            attributes: {\r\n                class: \"listitem\",\r\n                role: \"listitem\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        label?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {label, disabled} = init;\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n            this.setSelected(item, false);\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(root: HTMLElement): HTMLElement | null {\r\n        return root;\r\n    }\r\n\r\n    group(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .listitemgroup\");\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(row: HTMLElement, value: boolean): void {\r\n        row.setAttribute(\"aria-selected\", String(value));\r\n        row.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(row: HTMLElement): boolean {\r\n        return JSON.parse(row.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    #label(item: HTMLElement): Node {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { listItemWidget } from \"./ListItemWidget\";\r\n\r\nexport  { listWidget };\r\n\r\ninterface ListWidgetFactory extends WidgetFactory {\r\n    create(properties: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement;\r\n    items(list: HTMLElement): HTMLElement[];\r\n    beginSelection(list: HTMLElement): void;\r\n    endSelection(list: HTMLElement): void;\r\n    selectedItems(list: HTMLElement): HTMLElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"list\": ListWidgetFactory,\r\n    }\r\n}\r\n\r\nvar listWidget = new (\r\nWidget({\r\n    name: \"list\"\r\n})(class ListWidgetFactoryBase extends WidgetFactory implements ListWidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"list\",\r\n                role: \"list\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement {\r\n        const list = <HTMLElement>this.#template.cloneNode(true);\r\n        list.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        list.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        list.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        list.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        list.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        list.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        list.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        list.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        list.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        list.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        list.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        list.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, multisectable} = properties;\r\n            if (id !== undefined) {\r\n                list.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                list.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                list.tabIndex = tabIndex;\r\n            }\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(list, multisectable);\r\n            }\r\n        }\r\n        this.#onSelection.set(list, false);\r\n        this.#hasSelectionChanged.set(list, false);\r\n        return list;\r\n    }\r\n\r\n    slot(list: HTMLElement) {\r\n        return list;\r\n    }\r\n\r\n    slottedCallback(list: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"listitem\")) {\r\n                listItemWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n\r\n    setMultiSelectable(tree: HTMLElement, value: boolean): void {\r\n        tree.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(tree: HTMLElement): boolean {\r\n        return JSON.parse(tree.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    #getActiveItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".listitem.active\");\r\n    }\r\n\r\n    #getDropTargetItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".listitem.droptarget\");\r\n    }\r\n\r\n    items(list: HTMLElement): HTMLElement[] {\r\n        return Array.from(list.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .listitemgroup) > .listitem\"\r\n        ));\r\n    }\r\n\r\n    selectedItems(list: HTMLElement): HTMLElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        let item = this.#firstItem(list);\r\n        while (item !== null) {\r\n            const selected = listItemWidget.getSelected(item);\r\n            if (selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(list: HTMLElement): void {\r\n        this.#onSelection.set(list, true);\r\n    }\r\n\r\n    endSelection(list: HTMLElement): void {\r\n        this.#onSelection.set(list, false);\r\n        if (this.#hasSelectionChanged.get(list)) {\r\n            list.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(list, false);\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"listitem\") && !listItemWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"listitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextItem = this.#nextItem(from);\r\n            while (nextItem && nextItem !== to) {\r\n                range.push(nextItem);\r\n                nextItem = this.#nextItem(nextItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousItem = this.#previousItem(from);\r\n            while (previousItem && previousItem !== to) {\r\n                range.push(previousItem);\r\n                previousItem = this.#previousItem(previousItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        selectedItems.forEach((item_i) => {\r\n            if (!items.includes(item_i)) {\r\n                listItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            const selected = listItemWidget.getSelected(item_i);\r\n            if (list.contains(item_i) && !selected) {\r\n                listItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #addToSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        this.beginSelection(list);\r\n        items.forEach((item_i) => {\r\n            if (!listItemWidget.getSelected(item_i)) {\r\n                listItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #removeFromSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                listItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #clearSelection(list: HTMLElement): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        selectedItems.forEach((item_i) => {\r\n            listItemWidget.setSelected(item_i, false);\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #setActiveItem(list: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(list);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            listItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            listItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n    \r\n    #setDropTargetItem(list: HTMLElement, item: HTMLElement | null): void {\r\n        const {classList} = list;\r\n        const dropTargetItem = this.#getDropTargetItem(list);\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            listItemWidget.setDropTarget(dropTargetItem, false);\r\n        }\r\n        if (item !== null) {\r\n            listItemWidget.setDropTarget(item, false);\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    #firstItem(list: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(list: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLElement | null>walker.previousNode();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const nextItem = <HTMLElement | null>walker.nextNode();\r\n        return nextItem;\r\n    }\r\n\r\n    #handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetList, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            this.#setDropTargetItem(targetList, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!targetList.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(targetList, null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            const selectedItems = this.selectedItems(targetTree);\r\n            if (!selectedItems.includes(targetItem)) {\r\n                this.#setSelection(targetTree, targetItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetTree);\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetTree, targetItem);\r\n            targetTree.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetList);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetList, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetList, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(firstItem, lastItem);\r\n                            if (range) {\r\n                                this.#setSelection(targetList, ...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = listItemWidget.getSelected(previousItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetList, previousItem) :\r\n                                this.#addToSelection(targetList, previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetList);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = listItemWidget.getSelected(nextItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetList, nextItem) :\r\n                                this.#addToSelection(targetList, nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetList);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetList);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetList);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(targetList, activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection(targetList);\r\n                this.#setActiveItem(targetList, null);\r\n                targetList.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey, button} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            const selected = listItemWidget.getSelected(targetItem);\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setSelection(targetList, targetItem);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            targetItem.blur();\r\n                            this.#removeFromSelection(targetList, targetItem);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(targetList, targetItem);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const activeItem = this.#getActiveItem(targetList);\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                targetItem\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetList, ...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                }\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(targetList, targetItem);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetList.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetList.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetList) {\r\n            if (this.#onSelection.get(targetList)) {\r\n                this.#hasSelectionChanged.set(targetList, true);\r\n            }\r\n            else {\r\n                targetList.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { listItemWidget } from \"./ListItemWidget\";\r\n\r\nexport { listItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"listitemgroup\": ListItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ListItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar listItemGroupWidget = new (\r\nWidget({\r\n    name: \"listitemgroup\"\r\n})(class ListItemGroupWidgetFactoryBase extends WidgetFactory implements ListItemGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"listitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n\r\n    slottedCallback(group: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"listitem\")) {\r\n                listItemWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { toolbarItemWidget };\r\n\r\ntype ToolBarItemType = \"button\" | \"checkbox\" | \"radio\" | \"menubutton\";\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbaritem\": ToolBarItemWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ToolBarItemWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        id?: string;\r\n        type: ToolBarItemType;\r\n        pressed?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    menu(item: HTMLElement): HTMLElement | null;\r\n    getName(item: HTMLElement): string;\r\n    setName(item: HTMLElement, value: string): void;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setPressed(item: HTMLElement, value: boolean): void;\r\n    getPressed(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    getValue(item: HTMLElement): string;\r\n    setValue(item: HTMLElement, value: string): void;\r\n    getType(item: HTMLElement): ToolBarItemType | null;\r\n    setType(item: HTMLElement, value: ToolBarItemType): void;\r\n}\r\n\r\nvar toolbarItemWidget = new(\r\nWidget({\r\n    name: \"toolbaritem\"\r\n})(\r\nclass ToolBarItemWidgetFactoryBase extends WidgetFactory implements ToolBarItemWidgetFactory {\r\n    #template: HTMLElement;\r\n    #types: ToolBarItemType[];\r\n\r\n    constructor() {\r\n        super();\r\n        this.#types = [\"button\", \"checkbox\", \"radio\", \"menubutton\"];\r\n        this.#template = element(\"button\", {\r\n            attributes: {\r\n                class: \"toolbaritem\",\r\n                role: \"button\",\r\n                type: \"button\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        type?: ToolBarItemType;\r\n        pressed?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }) {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (init !== void 0) {\r\n            const {id, keyshortcut, pressed, type, label, name, value, disabled} = init;\r\n            if (id !== undefined) {\r\n                item.id = id;\r\n            }\r\n            if (keyshortcut !== undefined) {\r\n                this.setKeyShortcut(item, keyshortcut);\r\n            }\r\n            if (pressed !== undefined) {\r\n                this.setPressed(item, pressed);\r\n            }\r\n            if (type !== undefined) {\r\n                this.setType(item, type);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(item, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(item, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(item: HTMLElement): HTMLElement | null {\r\n        return item;\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void {\r\n        const hasChildMenu = Array.from(slot.childNodes).some(\r\n            childNode_i => childNode_i instanceof HTMLElement && childNode_i.classList.contains(\"menu\")\r\n        );\r\n        item.setAttribute(\"aria-haspopup\", String(hasChildMenu));\r\n    }\r\n\r\n    menu(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .menu\");\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-expanded\", value);\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-expanded\");\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    getKeyShortcut(item: HTMLElement): string | null {\r\n        return item.getAttribute(\"aria-keyshortcuts\");\r\n    }\r\n\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void {\r\n        if (value !== null) {\r\n            item.setAttribute(\"aria-keyshortcuts\", value);\r\n        }\r\n        else {\r\n            item.removeAttribute(\"aria-keyshortcuts\");\r\n        }\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        const expand = force ?? !this.getExpanded(item);\r\n        this.setExpanded(item, expand);\r\n        if (expand) {\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    expand(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (!expanded) {\r\n            this.setExpanded(item, true);\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    collapse(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (expanded) {\r\n            this.setExpanded(item, false);\r\n        }\r\n    }\r\n\r\n    getType(item: HTMLElement): ToolBarItemType | null {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`toolbaritem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setType(item: HTMLElement, type: ToolBarItemType): void {\r\n        const oldType = this.getType(item);\r\n        if (type !== oldType) {\r\n            const {classList} = item;\r\n            if (oldType) {\r\n                classList.remove(`toolbaritem-${oldType}`);\r\n            }\r\n            classList.add(`toolbaritem-${type}`);\r\n        }\r\n    }\r\n\r\n    getValue(item: HTMLElement): string {\r\n        return item.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"value\", value);\r\n    }\r\n\r\n    getTitle(item: HTMLElement): string {\r\n        return item.getAttribute(\"title\") ?? \"\";\r\n    }\r\n\r\n    setTitle(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"title\", value);\r\n    }\r\n\r\n    getName(item: HTMLElement): string {\r\n        return item.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getPressed(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-pressed\") ?? String(false));\r\n    }\r\n\r\n    setPressed(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-pressed\", String(value));\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetItem = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetItem.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse(targetItem);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.setPressed(targetItem, !this.getPressed(targetItem));\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.setPressed(targetItem, true);\r\n                    break;\r\n                }\r\n                case \"menubutton\": {\r\n                    const menu = this.menu(targetItem);\r\n                    if (menu && !menu.contains(<Node>target)) {\r\n                        this.toggle(targetItem);\r\n                        const expanded = this.getExpanded(targetItem);\r\n                        if (expanded) {\r\n                            menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(item: HTMLElement): void {\r\n        const type = this.getType(item);\r\n        if (type == \"menubutton\") {\r\n            const menu = this.menu(item);\r\n            if (menu !== null) {\r\n                const {style: menuStyle} = menu;\r\n                const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = item.getBoundingClientRect();\r\n                const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n                const {scrollY, scrollX} = window;\r\n                const {clientWidth, clientHeight} = document.body;\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n        }\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n}));\r\n","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { toolbarItemWidget } from \"./ToolBarItemWidget\";\r\n\r\nexport { toolbarWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbar\": ToolBarWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ToolBarWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }): HTMLElement;\r\n    setOrientation(toolbar: HTMLElement, value: ToolBarOrientation): void;\r\n    getOrientation(toolbar: HTMLElement): ToolBarOrientation;\r\n}\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\nvar toolbarWidget = new (\r\nWidget({\r\n    name: \"toolbar\"\r\n})(class ToolBarWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"toolbar\",\r\n                role: \"toolbar\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        )\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }) {\r\n        const toolbar = <HTMLElement>this.#template.cloneNode(true);\r\n        toolbar.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        toolbar.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        toolbar.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        toolbar.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        toolbar.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex} = properties;\r\n            if (id !== undefined) {\r\n                toolbar.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                toolbar.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                toolbar.tabIndex = tabIndex;\r\n            }\r\n        }\r\n        return toolbar;\r\n    }\r\n\r\n    slot(toolbar: HTMLElement) {\r\n        return toolbar;\r\n    }\r\n\r\n    #getActiveItem(toolbar: HTMLElement): HTMLElement | null {\r\n        return toolbar.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .toolbaritemgroup) > .toolbaritem.active\"\r\n        );\r\n    }\r\n\r\n    items(toolbar: HTMLElement): HTMLElement[] {\r\n        return Array.from(toolbar.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .toolbaritemgroup) > .toolbaritem\"\r\n        ));\r\n    }\r\n\r\n    setOrientation(toolbar: HTMLElement, value: ToolBarOrientation): void {\r\n        toolbar.setAttribute(\"aria-orientation\", value);\r\n    }\r\n\r\n    getOrientation(toolbar: HTMLElement): ToolBarOrientation {\r\n        return <ToolBarOrientation>toolbar.getAttribute(\"aria-orientation\") ?? \"horizontal\";\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node) {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"toolbaritem\") && !toolbarItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"toolbaritemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(toolbar: Element): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = toolbar;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(toolbar: Element): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = toolbar;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLElement | null>walker.previousSibling();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = toolbarItemWidget.menu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #setActiveItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(tree);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            toolbarItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            toolbarItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: Event): void {\r\n        const {currentTarget, target} = event;\r\n        const toolbar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem) {\r\n            const type = toolbarItemWidget.getType(targetItem);\r\n            const name = toolbarItemWidget.getName(targetItem);\r\n            const value = toolbarItemWidget.getType(targetItem);\r\n            if (type == \"radio\") {\r\n                toolbar.querySelectorAll<HTMLElement>(\r\n                    `:is(:scope, :scope > .toolbaritemgroup) > .toolbaritem[type=radio][name=${name}]`\r\n                ).forEach((radio_i) => {\r\n                    toolbarItemWidget.setPressed(radio_i, toolbarItemWidget.getValue(radio_i) == value);\r\n                });\r\n            }\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const focusWithin = targetToolbar.contains(<Node>relatedTarget);\r\n        if (!focusWithin) {\r\n            const activeItem = this.#getActiveItem(targetToolbar);\r\n            if (activeItem) {\r\n                activeItem.focus();\r\n            }\r\n            else {\r\n                const firstItem = this.#firstItem(targetToolbar);\r\n                firstItem?.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetToolbar, targetItem);\r\n            targetToolbar.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetToolbar.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.#setActiveItem(targetToolbar, null);\r\n            targetToolbar.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetToolbar);\r\n        switch (key) {\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const type = toolbarItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"menubutton\": {\r\n                            toolbarItemWidget.expand(activeItem);\r\n                            const firstChildItem = this.#firstChildItem(activeItem);\r\n                            firstChildItem?.focus({preventScroll: true});\r\n                            event.preventDefault();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetToolbar);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetToolbar);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetToolbar);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetToolbar);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    activeItem.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    targetToolbar.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { toolbarItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbaritemgroup\": MenuItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar toolbarItemGroupWidget = new (\r\nWidget({\r\n    name: \"toolbaritemgroup\"\r\n})(class MenuItemGroupWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"toolbaritemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n}));","import { element } from \"../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"./Widget\";\r\n\r\nexport { widthSashWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"widthsash\": WidthSashWidgetFactory\r\n    }\r\n}\r\n\r\ninterface WidthSashWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"left\" | \"right\";\r\n    }): HTMLElement;\r\n}\r\n\r\nvar widthSashWidget = new (\r\nWidget({\r\n    name: \"widthsash\"\r\n})(class WidthSashWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    #targets: WeakMap<HTMLElement, HTMLElement | null>;\r\n    #onCaptureFlags: WeakMap<HTMLElement, boolean>;\r\n    #queuedPointerCallbacks: WeakMap<HTMLElement, FrameRequestCallback | null>;\r\n    #pointerMovements: WeakMap<HTMLElement, number>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"widthsash\"\r\n            }\r\n        });\r\n        this.#targets = new WeakMap();\r\n        this.#onCaptureFlags = new WeakMap();\r\n        this.#queuedPointerCallbacks = new WeakMap();\r\n        this.#pointerMovements = new WeakMap();\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"left\" | \"right\";\r\n    }) {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const sash = <HTMLElement>this.#template.cloneNode(true);\r\n        sash.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        sash.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        sash.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, controls, growDir} = properties;\r\n            if (id !== undefined) {\r\n                sash.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                sash.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                sash.tabIndex = tabIndex;\r\n            }\r\n            if (controls !== undefined) {\r\n                this.setControls(sash, controls);\r\n            }\r\n            if (growDir !== undefined) {\r\n                this.setGrowDir(sash, growDir);\r\n            }\r\n        }\r\n        targets.set(sash, null);\r\n        queuedPointerCallbacks.set(sash, null);\r\n        pointerMovements.set(sash, 0);\r\n        onCaptureFlags.set(sash, false);\r\n        return sash;\r\n    }\r\n\r\n    getGrowDir(sash: HTMLElement): \"right\" | \"left\" {\r\n        return <\"right\" | \"left\">sash.getAttribute(\"data-growdir\") ?? \"right\";\r\n    }\r\n\r\n    setGrowDir(sash: HTMLElement, value: \"right\" | \"left\"): void {\r\n        sash.setAttribute(\"data-growdir\", value);\r\n    }\r\n\r\n    getControls(sash: HTMLElement): string | null {\r\n        return sash.getAttribute(\"data-controls\");\r\n    }\r\n\r\n    setControls(sash: HTMLElement, value: string): void {\r\n        sash.setAttribute(\"data-controls\", value);\r\n    }\r\n\r\n    setWidth(sash: HTMLElement, width: number): void {\r\n        const targets = this.#targets;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            target.style.setProperty(\"width\", `${width}px`);\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        sashTarget.releasePointerCapture(pointerId);\r\n        onCaptureFlags.set(sashTarget, false);\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const controls = this.getControls(sashTarget);\r\n        if (controls) {\r\n            const targets = this.#targets;\r\n            const onCaptureFlags = this.#onCaptureFlags;\r\n            const rootNode = <ShadowRoot | Document>sashTarget.getRootNode();\r\n            targets.set(sashTarget, rootNode.getElementById(controls));\r\n            onCaptureFlags.set(sashTarget, true);\r\n            sashTarget.setPointerCapture(pointerId);\r\n        }\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        const {currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const pointerMoveCallback = this.#pointerMoveCallback;\r\n        const onCaptureFlag = onCaptureFlags.get(sashTarget);\r\n        if (onCaptureFlag) {\r\n            let callback = queuedPointerCallbacks.get(sashTarget);\r\n            if (callback == null) {\r\n                callback = pointerMoveCallback.bind(this, sashTarget);\r\n                queuedPointerCallbacks.set(sashTarget, callback);\r\n                requestAnimationFrame(callback);\r\n            }\r\n            const pointerMovement = pointerMovements.get(sashTarget)! + event.movementX;\r\n            pointerMovements.set(sashTarget, pointerMovement);\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(sash: HTMLElement): void {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const growdir = this.getGrowDir(sash);\r\n            const movementX = pointerMovements.get(sash)!;\r\n            const width = parseFloat(targetComputedStyle.getPropertyValue(\"width\"));\r\n            const newWidth = width + (growdir == \"right\" ? 1 : -1) * movementX;\r\n            this.setWidth(sash, newWidth);\r\n            sash.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        pointerMovements.set(sash, 0);\r\n        queuedPointerCallbacks.set(sash, null);\r\n    }\r\n}));","import { element } from \"../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"./Widget\";\r\n\r\nexport { heightSashWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"heightsash\": HeightSashWidgetFactory\r\n    }\r\n}\r\n\r\ninterface HeightSashWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"top\" | \"bottom\";\r\n    }): HTMLElement;\r\n}\r\n\r\nvar heightSashWidget = new (\r\nWidget({\r\n    name: \"heightsash\"\r\n})(class HeightSashWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    #targets: WeakMap<HTMLElement, HTMLElement | null>;\r\n    #onCaptureFlags: WeakMap<HTMLElement, boolean>;\r\n    #queuedPointerCallbacks: WeakMap<HTMLElement, FrameRequestCallback | null>;\r\n    #pointerMovements: WeakMap<HTMLElement, number>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"heightsash\"\r\n            }\r\n        });\r\n        this.#targets = new WeakMap();\r\n        this.#onCaptureFlags = new WeakMap();\r\n        this.#queuedPointerCallbacks = new WeakMap();\r\n        this.#pointerMovements = new WeakMap();\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"top\" | \"bottom\";\r\n    }) {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const sash = <HTMLElement>this.#template.cloneNode(true);\r\n        sash.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        sash.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        sash.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, controls, growDir} = properties;\r\n            if (id !== undefined) {\r\n                sash.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                sash.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                sash.tabIndex = tabIndex;\r\n            }\r\n            if (controls !== undefined) {\r\n                this.setControls(sash, controls);\r\n            }\r\n            if (growDir !== undefined) {\r\n                this.setGrowDir(sash, growDir);\r\n            }\r\n        }\r\n        targets.set(sash, null);\r\n        queuedPointerCallbacks.set(sash, null);\r\n        pointerMovements.set(sash, 0);\r\n        onCaptureFlags.set(sash, false);\r\n        return sash;\r\n    }\r\n\r\n    getGrowDir(sash: HTMLElement): \"top\" | \"bottom\" {\r\n        return <\"top\" | \"bottom\">sash.getAttribute(\"data-growdir\") ?? \"top\";\r\n    }\r\n\r\n    setGrowDir(sash: HTMLElement, value: \"top\" | \"bottom\"): void {\r\n        sash.setAttribute(\"data-growdir\", value);\r\n    }\r\n\r\n    getControls(sash: HTMLElement): string | null {\r\n        return sash.getAttribute(\"data-controls\");\r\n    }\r\n\r\n    setControls(sash: HTMLElement, value: string): void {\r\n        sash.setAttribute(\"data-controls\", value);\r\n    }\r\n\r\n    setHeight(sash: HTMLElement, height: number): void {\r\n        const targets = this.#targets;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            target.style.setProperty(\"height\", `${height}px`);\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        sashTarget.releasePointerCapture(pointerId);\r\n        onCaptureFlags.set(sashTarget, false);\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const controls = this.getControls(sashTarget);\r\n        if (controls) {\r\n            const targets = this.#targets;\r\n            const onCaptureFlags = this.#onCaptureFlags;\r\n            const rootNode = <ShadowRoot | Document>sashTarget.getRootNode();\r\n            targets.set(sashTarget, rootNode.getElementById(controls));\r\n            onCaptureFlags.set(sashTarget, true);\r\n            sashTarget.setPointerCapture(pointerId);\r\n        }\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        const {currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const onCaptureFlag = onCaptureFlags.get(sashTarget);\r\n        if (onCaptureFlag) {\r\n            let callback = queuedPointerCallbacks.get(sashTarget);\r\n            if (callback == null) {\r\n                callback = this.#pointerMoveCallback.bind(this, sashTarget);\r\n                queuedPointerCallbacks.set(sashTarget, callback);\r\n                requestAnimationFrame(callback);\r\n            }\r\n            const pointerMovement = pointerMovements.get(sashTarget)! + event.movementX;\r\n            pointerMovements.set(sashTarget, pointerMovement);\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(sash: HTMLElement): void {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const growdir = this.getGrowDir(sash);\r\n            const movementX = pointerMovements.get(sash)!;\r\n            const height = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            const newHeight = height + (growdir == \"top\" ? -1 : 1) * movementX;\r\n            this.setHeight(sash, newHeight);\r\n            sash.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        pointerMovements.set(sash, 0);\r\n        queuedPointerCallbacks.set(sash, null);\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridCellWidget };\r\n\r\ninterface GridCellWidgetFactory extends WidgetFactory {\r\n    create(init: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        disabled?: boolean;\r\n        headers?: string;\r\n    }): HTMLElement;\r\n    getHeaders(item: HTMLElement): string;\r\n    setHeaders(item: HTMLElement, value: string): void;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridcell\": GridCellWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridCellWidget = new (\r\nWidget({\r\n    name: \"gridcell\"\r\n})(class GridCellWidgetFactoryBase extends WidgetFactory implements GridCellWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"td\", {\r\n            attributes: {\r\n                class: \"gridcell\",\r\n                role: \"gridcell\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        disabled?: boolean;\r\n        headers?: string;\r\n    }): HTMLElement {\r\n        const cell = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {id, classList, tabIndex, disabled, headers} = init;\r\n            if (id !== undefined) {\r\n                cell.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                cell.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                cell.tabIndex = tabIndex;\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(cell, disabled);\r\n            }\r\n            if (headers !== undefined) {\r\n                this.setHeaders(cell, headers);\r\n            }\r\n            this.setSelected(cell, false);\r\n        }\r\n        return cell;\r\n    }\r\n\r\n    slot(cell: HTMLElement): HTMLElement | null {\r\n        return cell;\r\n    }\r\n\r\n    getHeaders(item: HTMLElement): string {\r\n        return item.getAttribute(\"headers\") ?? \"\";\r\n    }\r\n\r\n    setHeaders(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"headers\", value);\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-selected\", String(value));\r\n        item.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .content > .label\")!;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { gridCellWidget } from \"./GridCellWidget\";\r\n\r\nexport { gridRowWidget };\r\n\r\ninterface GridRowWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        disabled?: boolean\r\n    }): HTMLElement;\r\n    cells(row: HTMLElement): HTMLElement[];\r\n    setPosInSet(row: HTMLElement, value: number): void;\r\n    getPosInSet(row: HTMLElement): number;\r\n    setActive(row: HTMLElement, value: boolean): void;\r\n    getActive(row: HTMLElement): boolean;\r\n    setDropTarget(row: HTMLElement, value: boolean): void;\r\n    getDropTarget(row: HTMLElement): boolean;\r\n    setSelected(row: HTMLElement, value: boolean): void;\r\n    getSelected(row: HTMLElement): boolean;\r\n    setDisabled(row: HTMLElement, value: boolean): void;\r\n    getDisabled(row: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridrow\": GridRowWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridRowWidget = new (\r\nWidget({\r\n    name: \"gridrow\"\r\n})(class GridRowWidgetFactoryBase extends WidgetFactory implements GridRowWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"tr\", {\r\n            attributes: {\r\n                class: \"gridrow\",\r\n                role: \"row\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const row = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {disabled} = init;\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(row, disabled);\r\n            }\r\n            this.setSelected(row, false);\r\n        }\r\n        return row;\r\n    }\r\n\r\n    slot(row: HTMLElement): HTMLElement | null {\r\n        return row;\r\n    }\r\n\r\n    cells(row: HTMLElement): HTMLElement[] {\r\n        return Array.from(row.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridcell\"\r\n        ));\r\n    }\r\n    \r\n    setPosInSet(row: HTMLElement, value: number): void {\r\n        row.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(row: HTMLElement): number {\r\n        const posInSet = row.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(row: HTMLElement, value: boolean): void {\r\n        const {classList} = row;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(row: HTMLElement): boolean {\r\n        const {classList} = row;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(row: HTMLElement, value: boolean): void {\r\n        const {classList} = row;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(row: HTMLElement): boolean {\r\n        const {classList} = row;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(row: HTMLElement, value: boolean): void {\r\n        row.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(row: HTMLElement): boolean {\r\n        return row.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(row: HTMLElement, value: boolean): void {\r\n        row.setAttribute(\"aria-selected\", String(value));\r\n        row.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(row: HTMLElement): boolean {\r\n        return JSON.parse(row.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((item_i, i) => {\r\n            if (item_i instanceof HTMLElement) {\r\n                gridCellWidget.setPosInSet(item_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { gridCellWidget } from \"./GridCellWidget\";\r\nimport { gridRowWidget } from \"./GridRowWidget\";\r\n\r\nexport { gridWidget };\r\n\r\ntype GridSelectBy = \"cell\" | \"row\";\r\n\r\ninterface GridRowWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n        selectby?: GridSelectBy\r\n    }): HTMLElement;\r\n    setSelectBy(item: HTMLElement, value: GridSelectBy): void;\r\n    getSelectBy(item: HTMLElement): GridSelectBy;\r\n    headers(grid: HTMLElement): HTMLElement[];\r\n    cells(grid: HTMLElement): HTMLElement[];\r\n    rows(grid: HTMLElement): HTMLElement[];\r\n    beginSelection(grid: HTMLElement): void;\r\n    endSelection(grid: HTMLElement): void;\r\n    selectedCells(grid: HTMLElement): HTMLElement[];\r\n    selectedRows(grid: HTMLElement): HTMLElement[];\r\n    clearSelection(grid: HTMLElement): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"grid\": GridRowWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridWidget = new (\r\nWidget({\r\n    name: \"grid\"\r\n})(class GridWidgetFactoryBase extends WidgetFactory implements GridRowWidgetFactory {\r\n\r\n    #getActiveRow(grid: HTMLElement): HTMLElement | null {\r\n        return grid.querySelector<HTMLElement>(\".gridrow.active\");\r\n    }\r\n\r\n    #getActiveCell(grid: HTMLElement): HTMLElement | null {\r\n        return grid.querySelector<HTMLElement>(\".gridcell.active\");\r\n    }\r\n\r\n    headers(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridhead > .gridheader\"\r\n        ));\r\n    }\r\n\r\n    rows(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridbody > .gridrow\"\r\n        ));\r\n    }\r\n\r\n    cells(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridbody > .gridrow > .gridcell\"\r\n        ));\r\n    }\r\n\r\n    #template: HTMLElement;\r\n    #rowsWalker: TreeWalker;\r\n    #cellsWalker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"table\", {\r\n            attributes: {\r\n                class: \"grid\",\r\n                role: \"grid\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#cellsWalker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#cellsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#rowsWalker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#rowsWalkerNodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n        selectby?: GridSelectBy;\r\n    }) {\r\n        const grid = <HTMLElement>this.#template.cloneNode(true);\r\n        //grid.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        grid.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        grid.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        grid.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        grid.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        grid.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        grid.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, selectby, multisectable} = properties;\r\n            if (id !== undefined) {\r\n                grid.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                grid.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                grid.tabIndex = tabIndex;\r\n            }\r\n            if (selectby !== undefined) {\r\n                this.setSelectBy(grid, selectby);\r\n            }\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(grid, multisectable);\r\n            }\r\n        }\r\n        return grid;\r\n    }\r\n\r\n    slot(grid: HTMLElement): HTMLElement | null {\r\n        return grid;\r\n    }\r\n\r\n    setMultiSelectable(grid: HTMLElement, value: boolean): void {\r\n        grid.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(grid: HTMLElement): boolean {\r\n        return JSON.parse(grid.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    setSelectBy(grid: HTMLElement, value: GridSelectBy): void {\r\n        grid.setAttribute(\"data-selectby\", value);\r\n    }\r\n\r\n    getSelectBy(grid: HTMLElement): GridSelectBy {\r\n        return <GridSelectBy>grid.getAttribute(\"data-selectby\") ?? \"cell\";\r\n    }\r\n\r\n    beginSelection(grid: HTMLElement): void {\r\n        this.#onSelection.set(grid, true);\r\n    }\r\n\r\n    endSelection(grid: HTMLElement): void {\r\n        this.#onSelection.set(grid, false);\r\n        if (this.#hasSelectionChanged.get(grid)) {\r\n            grid.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(grid, false);\r\n        }\r\n    }\r\n\r\n    clearSelection(grid: HTMLElement): void {\r\n        this.#clearCellsSelection(grid);\r\n        this.#clearRowsSelection(grid);\r\n    }\r\n\r\n    selectedCells(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll(\":scope > .gridbody > .gridrow > .gridcell[aria-selected=true]\"));\r\n    }\r\n\r\n    selectedRows(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll(\":scope > .gridbody > .gridrow[aria-selected=true]\"));\r\n    }\r\n\r\n    #cellsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"gridcell\") && !gridCellWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"gridrow\") || classList.contains(\"gridbody\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #rowsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"gridrow\") && !gridRowWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"gridbody\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getCellsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextCell = this.#nextCell(from);\r\n            while (nextCell && nextCell !== to) {\r\n                range.push(nextCell);\r\n                nextCell = this.#nextCell(nextCell);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousCell = this.#previousCell(from);\r\n            while (previousCell && previousCell !== to) {\r\n                range.push(previousCell);\r\n                previousCell = this.#previousRow(previousCell);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #getRowsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextRow = this.#nextRow(from);\r\n            while (nextRow && nextRow !== to) {\r\n                range.push(nextRow);\r\n                nextRow = this.#nextRow(nextRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousRow = this.#previousRow(from);\r\n            while (previousRow && previousRow !== to) {\r\n                range.push(previousRow);\r\n                previousRow = this.#previousRow(previousRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setCellsSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        selectedCells.forEach((selectedCell_i) => {\r\n            if (!cells.includes(selectedCell_i)) {\r\n                gridCellWidget.setSelected(selectedCell_i, false);\r\n            }\r\n        });\r\n        cells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (!selected) {\r\n                gridCellWidget.setSelected(cell_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #setRowsSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        selectedRows.forEach((selectedRow_i) => {\r\n            if (!rows.includes(selectedRow_i)) {\r\n                gridRowWidget.setSelected(selectedRow_i, false);\r\n            }\r\n        });\r\n        rows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (!selected) {\r\n                gridRowWidget.setSelected(row_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #addCellsToSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        cells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (!selected) {\r\n                gridCellWidget.setSelected(cell_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #addRowsToSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        rows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (!selected) {\r\n                gridRowWidget.setSelected(row_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #removeCellsFromSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        cells.forEach((cell_i) => {\r\n            if (selectedCells.includes(cell_i)) {\r\n                gridCellWidget.setSelected(cell_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #removeRowsFromSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        rows.forEach((row_i) => {\r\n            if (selectedRows.includes(row_i)) {\r\n                gridRowWidget.setSelected(row_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #clearCellsSelection(grid: HTMLElement): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        selectedCells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (selected) {\r\n                gridCellWidget.setSelected(cell_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #clearRowsSelection(grid: HTMLElement): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        selectedRows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (selected) {\r\n                gridRowWidget.setSelected(row_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #setActiveCell(grid: HTMLElement, cell: HTMLElement | null): void {\r\n        const activeCell = this.#getActiveCell(grid);\r\n        if (activeCell !== null && activeCell !== cell) {\r\n            gridCellWidget.setActive(activeCell, false);\r\n            activeCell.tabIndex = -1;\r\n        }\r\n        if (cell !== null) {\r\n            gridCellWidget.setActive(cell, true);\r\n            cell.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #setActiveRow(grid: HTMLElement, row: HTMLElement | null): void {\r\n        const activeRow = this.#getActiveRow(grid);\r\n        if (activeRow !== null && activeRow !== row) {\r\n            gridRowWidget.setActive(activeRow, false);\r\n            activeRow.tabIndex = -1;\r\n        }\r\n        if (row !== null) {\r\n            gridCellWidget.setActive(row, true);\r\n            row.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #firstCell(row: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLElement | null>cellsWalker.firstChild();\r\n    }\r\n\r\n    #lastCell(row: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLElement | null>cellsWalker.lastChild();\r\n    }\r\n\r\n    #previousCell(cell: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLElement | null>cellsWalker.previousNode();\r\n    }\r\n\r\n    #nextCell(cell: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLElement | null>cellsWalker.nextNode();\r\n    }\r\n\r\n    #closestRow(cell: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = cell;\r\n        return <HTMLElement | null>rowsWalker.parentNode();\r\n    }\r\n\r\n    #firstRow(grid: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = grid;\r\n        return <HTMLElement | null>rowsWalker.firstChild();\r\n    }\r\n\r\n    #lastRow(grid: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = grid;\r\n        return <HTMLElement | null>rowsWalker.lastChild();\r\n    }\r\n\r\n    #previousRow(row: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLElement | null>rowsWalker.previousNode();\r\n    }\r\n\r\n    #nextRow(row: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLElement | null>rowsWalker.nextNode();\r\n    }\r\n\r\n    #topCell(cell: HTMLElement): HTMLElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const closestRowCells = gridRowWidget.cells(closestRow);\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const previousRow = this.#previousRow(closestRow);\r\n            if (previousRow) {\r\n                const previousRowCells = gridRowWidget.cells(previousRow);\r\n                return previousRowCells[Math.min(cellIndex, previousRowCells.length)];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #bottomCell(cell: HTMLElement): HTMLElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const closestRowCells = gridRowWidget.cells(closestRow);\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const nextRow = this.#nextRow(closestRow);\r\n            if (nextRow) {\r\n                const nextRowCells = gridRowWidget.cells(nextRow);\r\n                return nextRowCells[Math.min(cellIndex, nextRowCells.length)];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /*#handleContextMenuEvent(event: MouseEvent) {\r\n        const {currentTarget, target} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    const selectedCells = this.selectedCells(targetGrid);\r\n                    if (!selectedCells.includes(targetCell)) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    targetCell.focus({preventScroll: true});\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    const selectedRows = this.selectedRows(targetGrid);\r\n                    if (!selectedRows.includes(targetRow)) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    targetRow.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        event.preventDefault();\r\n    }*/\r\n\r\n    /*#handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            const type = treeitemWidget.getType(targetItem);\r\n            if (type == \"parent\") {\r\n                treeitemWidget.toggle(targetItem, true);\r\n            }\r\n            this.#setDropTargetItem(targetTree, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!targetTree.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(targetTree, null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }*/\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const activeCell = this.#getActiveCell(targetGrid);\r\n                if (activeCell && relatedTarget !== activeCell) {\r\n                    activeCell.focus();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const activeRow = this.#getActiveRow(targetGrid);\r\n                if (activeRow && relatedTarget !== activeRow) {\r\n                    activeRow.focus();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    this.#setActiveCell(targetGrid, targetCell);\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    this.#setActiveRow(targetGrid, targetRow);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetGrid.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetGrid.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const activeCell = this.#getActiveCell(targetGrid);\r\n        const activeRow = this.#getActiveRow(targetGrid);\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        const multiselectable = this.getMultiSelectable(targetGrid);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey && multiselectable) {\r\n                    switch (selectby) {\r\n                        case \"cell\": {\r\n                            const firstRow = this.#firstRow(targetGrid);\r\n                            const firstCell = firstRow ? this.#firstCell(firstRow) : null;\r\n                            const lastRow = this.#lastRow(targetGrid);\r\n                            const lastCell = lastRow ? this.#lastCell(lastRow) : null;\r\n                            if (firstCell && lastCell) {\r\n                                const range = this.#getCellsRange(firstCell, lastCell);\r\n                                if (range) {\r\n                                    this.#setCellsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"row\": {\r\n                            const firstRow = this.#firstRow(targetGrid);\r\n                            const lastRow = this.#lastRow(targetGrid);\r\n                            if (firstRow && lastRow) {\r\n                                const range = this.#getRowsRange(firstRow, lastRow);\r\n                                if (range) {\r\n                                    this.#setRowsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const previousCell = this.#previousCell(activeCell);\r\n                        if (previousCell) {\r\n                            previousCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(previousCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, previousCell) :\r\n                                    this.#addCellsToSelection(targetGrid, previousCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const nextCell = this.#nextCell(activeCell);\r\n                        if (nextCell) {\r\n                            nextCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(nextCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, nextCell) :\r\n                                    this.#addCellsToSelection(targetGrid, nextCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const firstRow = activeRow ?? this.#firstRow(targetGrid);\r\n                        const topCell = activeCell ?\r\n                            this.#topCell(activeCell) :\r\n                            firstRow ?\r\n                            this.#firstCell(firstRow) :\r\n                            null;\r\n                        if (topCell) {\r\n                            topCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(topCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, topCell) :\r\n                                    this.#addCellsToSelection(targetGrid, topCell);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const previousRow = activeRow ?\r\n                            this.#previousRow(activeRow) :\r\n                            this.#firstRow(targetGrid);\r\n                        if (previousRow) {\r\n                            previousRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridRowWidget.getSelected(previousRow);\r\n                                selected ?\r\n                                    this.#removeRowsFromSelection(targetGrid, previousRow) :\r\n                                    this.#addRowsToSelection(targetGrid, previousRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const lastRow = activeRow ?? this.#lastRow(targetGrid);\r\n                        const bottomCell = activeCell ?\r\n                            this.#bottomCell(activeCell) :\r\n                            lastRow ?\r\n                            this.#lastCell(lastRow) :\r\n                            null;\r\n                            if (bottomCell) {\r\n                                bottomCell.focus({preventScroll: true});\r\n                                const {shiftKey} = event;\r\n                                if (shiftKey && multiselectable) {\r\n                                    const selected = gridCellWidget.getSelected(bottomCell);\r\n                                    selected ?\r\n                                        this.#removeCellsFromSelection(targetGrid, bottomCell) :\r\n                                        this.#addCellsToSelection(targetGrid, bottomCell);\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"row\": {\r\n                        const nextRow = activeRow ?\r\n                            this.#nextRow(activeRow) :\r\n                            this.#lastRow(targetGrid);\r\n                        if (nextRow) {\r\n                            nextRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridRowWidget.getSelected(nextRow);\r\n                                selected ?\r\n                                    this.#removeRowsFromSelection(targetGrid, nextRow) :\r\n                                    this.#addRowsToSelection(targetGrid, nextRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const firstCell = this.#firstCell(activeRow);\r\n                            if (firstCell) {\r\n                                firstCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const firstRow = this.#firstRow(targetGrid);\r\n                        if (firstRow) {\r\n                            firstRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const lastCell = this.#lastCell(activeRow);\r\n                            if (lastCell) {\r\n                                lastCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const lastRow = this.#lastRow(targetGrid);\r\n                        if (lastRow) {\r\n                            lastRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeCell) {\r\n                            this.#setCellsSelection(targetGrid, activeCell);\r\n                            activeCell.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        if (activeRow) {\r\n                            this.#setRowsSelection(targetGrid, activeRow);\r\n                            activeRow.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        this.#clearCellsSelection(targetGrid);\r\n                        this.#setActiveCell(targetGrid, null);\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        this.#clearRowsSelection(targetGrid);\r\n                        this.#setActiveRow(targetGrid, null);\r\n                        break;\r\n                    }\r\n                }\r\n                targetGrid.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        const multiselectable = this.getMultiSelectable(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    if (multiselectable) {\r\n                        if (!shiftKey && !ctrlKey) {\r\n                            this.#setCellsSelection(targetGrid, targetCell);\r\n                        }\r\n                        else if (ctrlKey) {\r\n                            const selected = gridCellWidget.getSelected(targetCell);\r\n                            !selected ?\r\n                                this.#addCellsToSelection(targetGrid, targetCell) :\r\n                                this.#removeCellsFromSelection(targetGrid, targetCell);\r\n                            event.stopPropagation();\r\n                        }\r\n                        else if (shiftKey) {\r\n                            const activeCell = this.#getActiveCell(targetGrid);\r\n                            if (activeCell) {\r\n                                const range = this.#getCellsRange(\r\n                                    activeCell,\r\n                                    targetCell\r\n                                );\r\n                                if (range) {\r\n                                    this.#setCellsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.#setCellsSelection(targetGrid, targetCell);\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    if (multiselectable) {\r\n                        if (!shiftKey && !ctrlKey) {\r\n                            this.#setRowsSelection(targetGrid, targetRow);\r\n                        }\r\n                        else if (ctrlKey) {\r\n                            const selected = gridRowWidget.getSelected(targetRow);\r\n                            !selected ?\r\n                                this.#addRowsToSelection(targetGrid, targetRow) :\r\n                                this.#removeRowsFromSelection(targetGrid, targetRow);\r\n                            event.stopPropagation();\r\n                        }\r\n                        else if (shiftKey) {\r\n                            const activeRow = this.#getActiveRow(targetGrid);\r\n                            if (activeRow) {\r\n                                const range = this.#getRowsRange(\r\n                                    activeRow,\r\n                                    targetRow\r\n                                );\r\n                                if (range) {\r\n                                    this.#setRowsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.#setRowsSelection(targetGrid, targetRow);\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetList) {\r\n            if (this.#onSelection.get(targetList)) {\r\n                this.#hasSelectionChanged.set(targetList, true);\r\n            }\r\n            else {\r\n                targetList.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { gridRowWidget } from \"./GridRowWidget\";\r\n\r\nexport { gridBodyWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridbody\": GridBodyWidgetFactory\r\n    }\r\n}\r\n\r\ninterface GridBodyWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar gridBodyWidget = new (\r\nWidget({\r\n    name: \"gridbody\"\r\n})(class GridBodyWidgetFactoryBase extends WidgetFactory implements GridBodyWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"tbody\", {\r\n            attributes: {\r\n                class: \"gridbody\",\r\n                role: \"rowgroup\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(body: HTMLElement) {\r\n        return body;\r\n    }\r\n\r\n    slottedCallback(body: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"gridrow\")) {\r\n                gridRowWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridHeadWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridhead\": GridHeadWidgetFactory\r\n    }\r\n}\r\n\r\ninterface GridHeadWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar gridHeadWidget = new (\r\nWidget({\r\n    name: \"gridhead\"\r\n})(class GridHeadWidgetFactoryBase extends WidgetFactory implements GridHeadWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"thead\", {\r\n            attributes: {\r\n                class: \"gridhead\",\r\n                role: \"rowgroup\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(head: HTMLElement) {\r\n        return head;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridHeaderWidget };\r\n\r\ninterface GridHeaderWidgetFactory extends WidgetFactory {\r\n    create(init: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }): HTMLElement;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridheader\": GridHeaderWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridHeaderWidget = new (\r\nWidget({\r\n    name: \"gridheader\"\r\n})(class GridHeaderWidgetFactoryBase extends WidgetFactory implements GridHeaderWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"th\", {\r\n            attributes: {\r\n                class: \"gridheader\",\r\n                scope: \"column\",\r\n                role: \"columnheader\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }): HTMLElement {\r\n        const header = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {id, classList, tabIndex} = init;\r\n            if (id !== undefined) {\r\n                header.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                header.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                header.tabIndex = tabIndex;\r\n            }\r\n        }\r\n        return header;\r\n    }\r\n\r\n    slot(header: HTMLElement): HTMLElement | null {\r\n        return header;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { optionWidget };\r\n\r\ninterface OptionWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        label?: string;\r\n        name?: string;\r\n        value?: string;\r\n        selected?: boolean;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    getLabel(option: HTMLElement): string;\r\n    setLabel(option: HTMLElement, value: string): void;\r\n    getValue(option: HTMLElement): string;\r\n    setValue(option: HTMLElement, value: string): void;\r\n    getName(option: HTMLElement): string;\r\n    setName(option: HTMLElement, value: string): void;\r\n    getSelected(option: HTMLElement): boolean;\r\n    setSelected(option: HTMLElement, value: boolean): void;\r\n    setDisabled(option: HTMLElement, value: boolean): void;\r\n    getDisabled(option: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"option\": OptionWidgetFactory\r\n    }\r\n}\r\n\r\nvar optionWidget = new(\r\nWidget({\r\n    name: \"option\"\r\n})(\r\nclass OptionWidgetFactoryBase extends WidgetFactory implements OptionWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"span\", {\r\n            attributes: {\r\n                class: \"option\",\r\n                role: \"option\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(properties?: {\r\n        selected?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const option = <HTMLElement>this.#template.cloneNode(true);\r\n        if (properties !== undefined) {\r\n            const {label, name, value, disabled} = properties;\r\n            let {selected} = properties;\r\n            selected = selected ?? false;\r\n            if (selected !== undefined) {\r\n                this.setSelected(option, selected);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(option, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(option, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(option, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(option, disabled);\r\n            }\r\n        }\r\n        return option;\r\n    }\r\n\r\n    get observedAttributes() {\r\n        return [\"aria-selected\"];\r\n    }\r\n\r\n    attributeChangedCallback(option: HTMLElement, name: string, oldValue: string, newValue: string) {\r\n        switch (name) {\r\n            case \"aria-selected\": {\r\n                if (JSON.parse(newValue) === true) {\r\n                    option.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #label(option: HTMLElement): HTMLElement {\r\n        return option.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n\r\n    getLabel(option: HTMLElement): string {\r\n        return this.#label(option).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(option: HTMLElement, value: string): void {\r\n        this.#label(option).textContent = value;\r\n    }\r\n\r\n    getValue(option: HTMLElement): string {\r\n        return option.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(option: HTMLElement, value: string): void {\r\n        option.setAttribute(\"value\", value);\r\n    }\r\n    \r\n    getName(option: HTMLElement): string {\r\n        return option.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(option: HTMLElement, value: string): void {\r\n        option.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getSelected(option: HTMLElement): boolean {\r\n        return JSON.parse(option.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    setSelected(option: HTMLElement, value: boolean): void {\r\n        option.setAttribute(\"aria-selected\", String(value));\r\n    }\r\n\r\n    getDisabled(option: HTMLElement): boolean {\r\n        return option.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(option: HTMLElement, value: boolean): void {\r\n        option.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { optionWidget } from \"./OptionWidget\";\r\n\r\nexport { comboBoxWidget };\r\n\r\ninterface ComboBoxWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        name?: string;\r\n        disabled?: boolean;\r\n        multiselectable?: boolean;\r\n    }): HTMLElement;\r\n    options(combobox: HTMLElement): HTMLElement[];\r\n    getName(combobox: HTMLElement): string;\r\n    setName(combobox: HTMLElement, value: string): void;\r\n    getExpanded(combobox: HTMLElement): boolean;\r\n    setExpanded(combobox: HTMLElement, value: boolean): void;\r\n    setDisabled(combobox: HTMLElement, value: boolean): void;\r\n    getDisabled(combobox: HTMLElement): boolean;\r\n    expand(combobox: HTMLElement): void;\r\n    collapse(combobox: HTMLElement): void;\r\n    toggle(combobox: HTMLElement, force?: boolean): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"combobox\": ComboBoxWidgetFactory\r\n    }\r\n}\r\n\r\nvar comboBoxWidget = new(\r\nWidget({\r\n    name: \"combobox\"\r\n})(\r\nclass ComboBoxWidgetFactoryBase extends WidgetFactory implements ComboBoxWidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #optionsObserver: MutationObserver;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#optionsObserver = new MutationObserver(\r\n            this.#optionsMutationCallback.bind(this)\r\n        );\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"combobox\",\r\n                role: \"combobox\",\r\n                tabindex: 0,\r\n            },\r\n            children: [\r\n                element(\"div\", {\r\n                    attributes: {\r\n                        class: \"content\"\r\n                    },\r\n                    children: [\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"value\"\r\n                            }\r\n                        })\r\n                    ]\r\n                }),\r\n                element(\"div\", {\r\n                    attributes: {\r\n                        class: \"box\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        name?: string;\r\n        disabled?: boolean;\r\n        multiselectable?: boolean;\r\n    }): HTMLElement {\r\n        const combobox = <HTMLElement>this.#template.cloneNode(true);\r\n        this.#optionsObserver.observe(combobox, {\r\n            childList: true,\r\n            subtree: true\r\n        });\r\n        combobox.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        combobox.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        combobox.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        combobox.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.setExpanded(combobox, false);\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, name, disabled, multiselectable} = properties;\r\n            if (id !== undefined) {\r\n                combobox.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                combobox.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                combobox.tabIndex = tabIndex;\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(combobox, name);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(combobox, disabled);\r\n            }\r\n            if (multiselectable !== undefined) {\r\n                this.setMultiSelectable(combobox, multiselectable);\r\n            }\r\n        }\r\n        return combobox;\r\n    }\r\n\r\n    slot(combobox: HTMLElement) {\r\n        return this.#box(combobox);\r\n    }\r\n\r\n    slottedCallback(combobox: HTMLElement, slot: HTMLElement, name: string | null) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement) {\r\n                //gridRowWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n\r\n    #box(combobox: HTMLElement): HTMLElement {\r\n        return combobox.querySelector<HTMLElement>(\":scope > .box\")!;\r\n    }\r\n    \r\n    options(combobox: HTMLElement): HTMLElement[] {\r\n        return Array.from(combobox.querySelectorAll<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option\"\r\n        ));\r\n    }\r\n\r\n    selectedOption(combobox: HTMLElement): HTMLElement | null {\r\n        return combobox.querySelector<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option[aria-selected=true]\"\r\n        );\r\n    }\r\n\r\n    #getActiveOption(combobox: HTMLElement): HTMLElement | null {\r\n        return combobox.querySelector<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option:focus-within\"\r\n        );\r\n    }\r\n\r\n    #value(combobox: HTMLElement): HTMLElement {\r\n        return combobox.querySelector<HTMLElement>(\":scope > .content > .value\")!;\r\n    }\r\n    \r\n    getName(combobox: HTMLElement): string {\r\n        return combobox.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(combobox: HTMLElement, value: string): void {\r\n        combobox.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getDisabled(combobox: HTMLElement): boolean {\r\n        return combobox.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(combobox: HTMLElement, value: boolean): void {\r\n        combobox.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setExpanded(combobox: HTMLElement, value: boolean): void {\r\n        combobox.setAttribute(\"aria-expanded\", String(value));\r\n    }\r\n\r\n    getExpanded(combobox: HTMLElement): boolean {\r\n        return JSON.parse(combobox.getAttribute(\"aria-expanded\") ?? String(false));\r\n    }\r\n\r\n    setMultiSelectable(combobox: HTMLElement, value: boolean): void {\r\n        combobox.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(combobox: HTMLElement): boolean {\r\n        return JSON.parse(combobox.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    expand(combobox: HTMLElement): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        if (!expanded) {\r\n            this.setExpanded(combobox, true);\r\n            this.#positionBox(combobox);\r\n            const selectedOption = this.selectedOption(combobox);\r\n            if (selectedOption) {\r\n                selectedOption.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(combobox: HTMLElement): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        if (expanded) {\r\n            this.setExpanded(combobox, false);\r\n            combobox.focus();\r\n        }\r\n    }\r\n\r\n    toggle(combobox: HTMLElement, force?: boolean): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand(combobox) : this.collapse(combobox);\r\n    }\r\n\r\n    #optionsMutationCallback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            const targetCombobox = (<HTMLElement>target).closest<HTMLElement>(\".combobox\")!;\r\n            if (targetCombobox instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"childList\": {\r\n                        const {addedNodes} = mutation;\r\n                        const selector = \".option[aria-selected=true]\";\r\n                        for (let node of addedNodes) {\r\n                            if (node instanceof HTMLElement) {\r\n                                const selectedOption = node.matches(selector) ? node :\r\n                                    node.querySelector<HTMLElement>(selector);\r\n                                if (selectedOption) {\r\n                                    this.#setSelectedOption(targetCombobox, selectedOption);\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"option\") && !optionWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"optiongroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstOption(combobox: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = this.#box(combobox);\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastOption(combobox: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = this.#box(combobox);\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousOption(option: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextOption(option: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLElement | null>walker.nextNode();\r\n    }\r\n\r\n    #selectOption(combobox: HTMLElement, option: HTMLElement) {\r\n        const selectedOption = this.selectedOption(combobox);\r\n        if (selectedOption) {\r\n            optionWidget.setSelected(selectedOption, false);\r\n        }\r\n        if (option !== selectedOption) {\r\n            optionWidget.setSelected(option, true);\r\n            this.#setSelectedOption(combobox, option);\r\n            combobox.dispatchEvent(new Event(\"change\", {bubbles: true}));\r\n        }\r\n    }\r\n    \r\n    #setSelectedOption(combobox: HTMLElement, option: HTMLElement) {\r\n        this.#value(combobox).textContent = optionWidget.getLabel(option);\r\n    }\r\n\r\n    #positionBox(combobox: HTMLElement): void {\r\n        const box = combobox.querySelector<HTMLElement>(\":scope > .box\")!;\r\n        const {style: optionsStyle} = box;  \r\n        const {bottom, left} = combobox.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        optionsStyle.setProperty(\"top\", `${bottom + scrollY}px`);\r\n        optionsStyle.setProperty(\"left\", `${left + scrollX}px`);\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        this.toggle(targetCombobox);\r\n        const expanded = this.getExpanded(targetCombobox);\r\n        if (expanded) {\r\n            const selectedOption = this.selectedOption(targetCombobox);\r\n            (selectedOption ?? this.options(targetCombobox)[0])?.focus({preventScroll: true});\r\n        }\r\n        else {\r\n            const targetOption = (<HTMLElement>target).closest<HTMLElement>(\".option\");\r\n            if (targetOption) {\r\n                this.#selectOption(targetCombobox, targetOption);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetCombobox.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse(targetCombobox);\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        const expanded = this.getExpanded(targetCombobox);\r\n        const activeOption = this.#getActiveOption(targetCombobox);\r\n        const selectedOption = this.selectedOption(targetCombobox);\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                if (expanded) {\r\n                    const previousOption = activeOption ?\r\n                        this.#previousOption(activeOption) :\r\n                        this.#firstOption(targetCombobox);\r\n                    if (previousOption) {\r\n                        previousOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const previousOption = selectedOption ?\r\n                        this.#previousOption(selectedOption) :\r\n                        this.#firstOption(targetCombobox);\r\n                    if (previousOption) {\r\n                        this.#selectOption(targetCombobox, previousOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (expanded) {\r\n                    const nextOption = activeOption ?\r\n                        this.#nextOption(activeOption) :\r\n                        this.#lastOption(targetCombobox);\r\n                    if (nextOption) {\r\n                        nextOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const nextOption = selectedOption ?\r\n                        this.#nextOption(selectedOption) :\r\n                        this.#lastOption(targetCombobox);\r\n                    if (nextOption) {\r\n                        this.#selectOption(targetCombobox, nextOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstOption = this.#firstOption(targetCombobox);\r\n                if (firstOption) {\r\n                    if (expanded) {\r\n                        firstOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(targetCombobox, firstOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastOption = this.#lastOption(targetCombobox);\r\n                if (lastOption) {\r\n                    if (expanded) {\r\n                        lastOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(targetCombobox, lastOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (expanded) {\r\n                    this.collapse(targetCombobox);\r\n                    if (activeOption) {\r\n                        this.#selectOption(targetCombobox, activeOption);\r\n                    }\r\n                }\r\n                else {\r\n                    this.expand(targetCombobox);\r\n                    selectedOption?.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.collapse(targetCombobox);\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            default: {\r\n                const {length: keyLength} = key;\r\n                if (keyLength == 1) {\r\n                    const keyCode = key.charCodeAt(0);\r\n                    const options = this.options(targetCombobox);\r\n                    const activeIndex = activeOption ? options.indexOf(activeOption) : -1;\r\n                    const matchingOption = options.find(\r\n                        (option_i, i) => optionWidget.getLabel(option_i).toLowerCase().charCodeAt(0) == keyCode && i > activeIndex\r\n                    ) ?? options.find(\r\n                        (option_i) => optionWidget.getLabel(option_i).toLowerCase().charCodeAt(0) == keyCode\r\n                    );\r\n                    if (matchingOption) {\r\n                        matchingOption.focus({preventScroll: true});\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetItem = (<Element>target).closest<HTMLElement>(\".option\");\r\n        if (targetItem) {\r\n            targetItem.focus({preventScroll: true});\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { optionGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"optiongroup\": OptionGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface OptionGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar optionGroupWidget = new (\r\nWidget({\r\n    name: \"optiongroup\"\r\n})(class OptionGroupWidgetFactoryBase extends WidgetFactory implements OptionGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"optiongroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n}));","import { HTMLEMenuElement } from \"../src/elements/containers/menus/Menu\";\r\nimport { EMenuItem } from \"../src/elements/containers/menus/MenuItem\";\r\nimport { HTMLEToolBarElement } from \"../src/elements/containers/toolbars/ToolBar\";\r\nimport { HTMLEToolBarItemElement } from \"../src/elements/containers/toolbars/ToolBarItem\";\r\nimport { HTMLETreeElement } from \"../src/elements/containers/trees/Tree\";\r\nimport { HTMLETreeItemElement } from \"../src/elements/containers/trees/TreeItem\";\r\nimport { HTMLETabListElement } from \"../src/elements/containers/tabs/TabList\";\r\nimport { CustomElement, revokeReactiveElement, element, fragment, reactiveElement, reactiveElementsMap } from \"../src/elements/Element\";\r\nimport { ModelEvent, ModelObject, ModelProperty } from \"../src/models/Model\";\r\nimport { GridColumnModel, GridModel, GridRowModel, GridView } from \"../src/views/GridView\";\r\nimport { TreeItemModelList, TreeItemModel, TreeModel, TreeView } from \"../src/views/TreeView\";\r\n\r\nimport * as editor from \"../index\";\r\n\r\neditor;\r\n\r\ninterface PreloadDataFile {\r\n    assets: {\r\n        as: \"image\",\r\n        hrefs: string[]\r\n    }[]\r\n}\r\n\r\nclass MyTreeItemModelList extends TreeItemModelList {\r\n    readonly items!: MyTreeItemModel[];\r\n\r\n    constructor(items: MyTreeItemModel[]) {\r\n        super(items);\r\n    }\r\n\r\n    get count(): number {\r\n        return this.items.length;\r\n    }\r\n\r\n    show(): void {\r\n        this.items.forEach(item_i => item_i.show());\r\n    }\r\n\r\n    hide(): void {\r\n        this.items.forEach(item_i => item_i.hide());\r\n    }\r\n    \r\n    display(): void {\r\n        const result = this.items.map(item_i => item_i.name).join(\" \");\r\n        console.log(result);\r\n    }\r\n}\r\n\r\nclass MyTreeItemModel extends TreeItemModel {\r\n    \r\n    @ModelProperty()\r\n    childCount: number;\r\n\r\n    @ModelProperty()\r\n    visibility: boolean;\r\n\r\n    constructor(init: {name: string, type: \"leaf\" | \"parent\", items?: TreeItemModel[]}) {\r\n        super(init);\r\n        this.childCount = this.childItems.length;\r\n        this.visibility = true;\r\n        this.addEventListener(\"modelchange\", this.#handleModelChangeEvent.bind(this));\r\n    }\r\n\r\n    show(): void {\r\n        this.visibility = true;\r\n    }\r\n\r\n    hide(): void {\r\n        this.visibility = false;\r\n    }\r\n\r\n    display(): void {\r\n        console.log(this.name);\r\n    }\r\n\r\n    #handleModelChangeEvent(event: ModelEvent): void {\r\n        const {target} = event;\r\n        const {childItems} = this;\r\n        if (target == childItems) {\r\n            this.childCount = childItems.length;\r\n        }\r\n    }\r\n}\r\n\r\nexport async function main() {\r\n    const preloadData = <PreloadDataFile>(await fetch(\"/assets/preload.json\").then((resp) => resp.json()));\r\n    preloadData.assets.forEach(\r\n        asset => {\r\n            document.head.append(\r\n                ...asset.hrefs.map(href =>\r\n                    element(\"link\", {\r\n                        attributes: {\r\n                            as: asset.as,\r\n                            href: `/assets/${href}`\r\n                        }\r\n                    })\r\n                )\r\n            )\r\n        }\r\n    );\r\n    \r\n    const gridView = new GridView();\r\n    gridView.resizable = true;\r\n    gridView.setModel(\r\n        new GridModel({\r\n            columns: [\r\n                new GridColumnModel({\r\n                    name: \"name\",\r\n                    type: String,\r\n                    label: \"Name\",\r\n                    extract: (row) => row.name\r\n                }),\r\n                new GridColumnModel({\r\n                    name: \"age\",\r\n                    type: Number,\r\n                    label: \"Age\",\r\n                    extract: (row) => String(row.age),\r\n                    filters: [{\r\n                        name: \"Minors\",\r\n                        filter: (row) => row.age < 18\r\n                    },{\r\n                        name: \"Majors\",\r\n                        filter: (row) => row.age >= 18\r\n                    }]\r\n                }),\r\n                new GridColumnModel({\r\n                    name: \"birthyear\",\r\n                    type: String,\r\n                    label: \"Brith Year\",\r\n                    extract: (row) => String(new Date().getFullYear() - row.age)\r\n                }),\r\n            ],\r\n            rows: [\r\n                new GridRowModel({\r\n                    id: 1,\r\n                    name: \"Denis\",\r\n                    age: 13\r\n                }),\r\n                new GridRowModel({\r\n                    id: 2,\r\n                    name: \"Jean-Charles\",\r\n                    age: 32\r\n                }),\r\n                new GridRowModel({\r\n                    id: 3,\r\n                    name: \"Charles\",\r\n                    age: 25\r\n                }),\r\n                new GridRowModel({\r\n                    id: 4,\r\n                    name: \"Mamagubida\",\r\n                    age: 128\r\n                })\r\n            ]\r\n        })\r\n    );\r\n    document.body.append(gridView);\r\n    gridView.render();\r\n\r\n    const treeModel = new TreeModel({\r\n        items: [\r\n            new MyTreeItemModel({\r\n                name: \"TI 0\",\r\n                type: \"parent\",\r\n                items: [\r\n                    new MyTreeItemModel({\r\n                        name: \"TI 1A\",\r\n                        type: \"parent\",\r\n                        items: [\r\n                            new MyTreeItemModel({\r\n                                type: \"leaf\",\r\n                                name: \"TI 1AX\"\r\n                            }),\r\n                        ]\r\n                    }),\r\n                    new MyTreeItemModel({\r\n                        type: \"parent\",\r\n                        name: \"TI 1B\"\r\n                    })\r\n                ]\r\n            }),\r\n            new MyTreeItemModel({\r\n                name: \"TI 1\",\r\n                type: \"parent\",\r\n                items: [\r\n                    new MyTreeItemModel({\r\n                        name: \"TI 1A\",\r\n                        type: \"parent\",\r\n                        items: [\r\n                            new MyTreeItemModel({\r\n                                type: \"leaf\",\r\n                                name: \"TI 1AX\"\r\n                            }),\r\n                        ]\r\n                    }),\r\n                    new MyTreeItemModel({\r\n                        type: \"parent\",\r\n                        name: \"TI 1B\"\r\n                    })\r\n                ]\r\n            }),\r\n            new MyTreeItemModel({\r\n                type: \"leaf\",\r\n                name: \"TI 2\"\r\n            }),\r\n            new MyTreeItemModel({\r\n                type: \"leaf\",\r\n                name: \"TI 3\"\r\n            })\r\n        ]\r\n    });\r\n    \r\n    @CustomElement({\r\n        name: \"e-mytreeview\"\r\n    })\r\n    class MyTreeView extends TreeView {\r\n\r\n        override render(): void {\r\n            super.render();\r\n            const {shadowRoot, treeElement} = this;\r\n            shadowRoot.prepend(\r\n                element(\"link\", {\r\n                    attributes: {\r\n                        rel: \"stylesheet\",\r\n                        href: \"/sample/css/mytreeview.css\"\r\n                    }\r\n                })\r\n            );\r\n            treeElement!.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n            treeElement!.addEventListener(\"dblclick\", this.#handleDoubleClickEvent.bind(this));\r\n        }\r\n\r\n        override itemContentDelegate(item: MyTreeItemModel) {\r\n            return fragment(\r\n                reactiveElement(\r\n                    item,\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            class: \"label\"\r\n                        }\r\n                    }),\r\n                    [\"name\"],\r\n                    (label, property, oldValue, newValue) => {\r\n                        label.textContent = newValue;\r\n                    }\r\n                ),\r\n                reactiveElement(\r\n                    item,\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            class: \"badge\"\r\n                        }\r\n                    }),\r\n                    [\"childCount\", \"type\"],\r\n                    (badge, property, oldValue, newValue) => {\r\n                        switch (property) {\r\n                            case \"type\": {\r\n                                if (newValue === \"leaf\") {\r\n                                    badge.textContent = null;\r\n                                }\r\n                                else {\r\n                                    badge.textContent = `(${item.childCount})`;\r\n                                }\r\n                                break;\r\n                            }\r\n                            case \"childCount\": {\r\n                                badge.textContent = `(${newValue})`;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                )\r\n            );\r\n        }\r\n\r\n        override itemToolbarDelegate(this: TreeView, item: MyTreeItemModel): HTMLEToolBarElement {\r\n            return reactiveElement(\r\n                item,\r\n                element(\"e-toolbar\", {\r\n                    children: [\r\n                        element(\"e-toolbaritem\", {\r\n                            attributes: {\r\n                                name: \"visibility\",\r\n                                type: \"checkbox\",\r\n                                label: \"Visibility\",\r\n                                iconed: true\r\n                            },\r\n                            listeners: {\r\n                                click: (event) => {\r\n                                    item.visibility ?\r\n                                        item.hide() :\r\n                                        item.show();\r\n                                    event.stopPropagation();\r\n                                }\r\n                            }\r\n                        })\r\n                    ]\r\n                }),\r\n                [\"visibility\"],\r\n                (toolbar, property, oldValue, newValue) => {\r\n                    switch (property) {\r\n                        case \"visibility\": {\r\n                            const visibilityItem = toolbar\r\n                                .querySelector<HTMLEToolBarItemElement>(\"e-toolbaritem[name=visibility]\");\r\n                            if (visibilityItem) {\r\n                                const label = newValue ? \"Hide\" : \"Show\";\r\n                                visibilityItem.label = label;\r\n                                visibilityItem.title = label;\r\n                                visibilityItem.pressed = newValue;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            )\r\n        }\r\n\r\n        override itemMenuDelegate(this: TreeView): HTMLEMenuElement {\r\n            const {treeElement} = this;\r\n            const {activeItem: activeItemElement} = treeElement!;\r\n            const selectedItems = <MyTreeItemModel[]>this.selectedItems();\r\n            const activeItem = <MyTreeItemModel>this.activeItem();\r\n            return element(\"e-menu\", {\r\n                attributes: {\r\n                    contextual: true\r\n                },\r\n                children: [\r\n                    element(\"e-menuitemgroup\", {\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                attributes: {\r\n                                    type: \"checkbox\",\r\n                                    label: activeItem.visibility ? \"Hide\" : \"Show\"\r\n                                },\r\n                                children: activeItem.visibility ? \"Hide\" : \"Show\",\r\n                                listeners: {\r\n                                    click: () => {\r\n                                        const selectedItemsList = selectedItems.includes(activeItem) ?\r\n                                            new MyTreeItemModelList(selectedItems) : new MyTreeItemModelList([activeItem]);\r\n                                        activeItem.visibility ?\r\n                                            selectedItemsList.hide() :\r\n                                            selectedItemsList.show();\r\n                                        activeItemElement!.focus();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    }),\r\n                    element(\"e-separator\"),\r\n                    element(\"e-menuitemgroup\", {\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                attributes: {\r\n                                    label: \"Delete\"\r\n                                },\r\n                                children: \"Delete\",\r\n                                listeners: {\r\n                                    click: () => {\r\n                                        const selectedItemsList = selectedItems.includes(activeItem) ?\r\n                                            new MyTreeItemModelList(selectedItems) : new MyTreeItemModelList([activeItem]);\r\n                                        const {count} = selectedItemsList;\r\n                                        const doRemove = confirm(`Remove ${count} items?`);\r\n                                        if (doRemove) {\r\n                                            selectedItemsList.remove();\r\n                                        }\r\n                                        treeElement!.focus();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            });\r\n        }\r\n\r\n        #handleKeyDownEvent(event: KeyboardEvent) {\r\n            const {currentTarget, key} = event;\r\n            const targetTree = <HTMLETreeElement>currentTarget;\r\n            const {activeItem} = targetTree;\r\n            if (activeItem) {\r\n                const activeItemModel = <MyTreeItemModel>this.treeItem(activeItem!)!;\r\n                switch (key) {\r\n                    case \"Delete\": {\r\n                        const selectedItems = this.selectedItems();\r\n                        const selectedItemsList = selectedItems.includes(activeItemModel) ?\r\n                            new TreeItemModelList(selectedItems) : new TreeItemModelList([activeItemModel]);\r\n                        const {count} = selectedItemsList;\r\n                        const doRemove = confirm(`Remove ${count} items?`);\r\n                        if (doRemove) {\r\n                            selectedItemsList.remove();\r\n                        }\r\n                        targetTree.focus();\r\n                        event.preventDefault();\r\n                        break;\r\n                    }\r\n                    case \"Enter\": {\r\n                        this.showEditItemDialog(activeItemModel);\r\n                        event.preventDefault();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        showEditItemDialog(item: MyTreeItemModel): void {\r\n            const {shadowRoot} = this;\r\n            const {visibility, name, type} = item;\r\n            const dialog = element(\"dialog\", {\r\n                children: [\r\n                    element(\"form\", {\r\n                        attributes: {\r\n                            method: \"dialog\"\r\n                        },\r\n                        children: [\r\n                            element(\"e-menubar\", {\r\n                                attributes: {\r\n                                    tabindex: 0\r\n                                },\r\n                                children: [\r\n                                    element(\"e-menuitem\", {\r\n                                        attributes: {\r\n                                            type: \"menu\",\r\n                                            label: \"Menu 1\"\r\n                                        },\r\n                                        children: [\r\n                                            \"Menu 1\",\r\n                                            element(\"e-menu\", {\r\n                                                attributes: {\r\n                                                    slot: \"menu\"\r\n                                                },\r\n                                                children: [\r\n                                                    element(\"e-menuitem\", {\r\n                                                        attributes: {\r\n                                                            type: \"checkbox\"\r\n                                                        },\r\n                                                        children: \"Menuitem 1\"\r\n                                                    }),\r\n                                                    element(\"e-menuitem\", {\r\n                                                        attributes: {\r\n                                                            type: \"checkbox\"\r\n                                                        },\r\n                                                        children: \"Menuitem 2\"\r\n                                                    }),\r\n                                                    element(\"e-menuitem\", {\r\n                                                        attributes: {\r\n                                                            type: \"submenu\"\r\n                                                        },\r\n                                                        children: [\r\n                                                            \"Submenu 1\",\r\n                                                            element(\"e-menu\", {\r\n                                                                attributes: {\r\n                                                                    slot: \"menu\"\r\n                                                                },\r\n                                                                children: [\r\n                                                                    EMenuItem.radio({\r\n                                                                        label: \"SubmenuItem 1\",\r\n                                                                        name: \"radio\",\r\n                                                                        value: String(0)\r\n                                                                    }),\r\n                                                                    EMenuItem.radio({\r\n                                                                        label: \"SubmenuItem 2\",\r\n                                                                        name: \"radio\",\r\n                                                                        value: String(1)\r\n                                                                    }),\r\n                                                                    EMenuItem.radio({\r\n                                                                        label: \"SubmenuItem 3\",\r\n                                                                        name: \"radio\",\r\n                                                                        value: String(3)\r\n                                                                    })\r\n                                                                ]\r\n                                                            })\r\n                                                        ]\r\n                                                    })\r\n                                                ]\r\n                                            })\r\n                                        ]\r\n                                    })\r\n                                ]\r\n                            }),\r\n                            element(\"e-tablist\", {\r\n                                attributes: {\r\n                                    tabindex: 0\r\n                                },\r\n                                children: [\r\n                                    element(\"e-tab\", {\r\n                                        attributes: {\r\n                                            controls: \"properties\"\r\n                                        },\r\n                                        children: \"Properties\"\r\n                                    })\r\n                                ]\r\n                            }),\r\n                            element(\"e-tabpanel\", {\r\n                                attributes: {\r\n                                    id: \"properties\"\r\n                                },\r\n                                children: [\r\n                                    element(\"fieldset\", {\r\n                                        children: [\r\n                                            element(\"legend\", {\r\n                                                children: \"Item information\"\r\n                                            }),\r\n                                            element(\"div\", {\r\n                                                attributes: {\r\n                                                    class: \"form-content\"\r\n                                                },\r\n                                                children: [\r\n                                                    element(\"label\", {\r\n                                                        attributes: {\r\n                                                            for: \"visibility\"\r\n                                                        },\r\n                                                        children: \"Visibility\"\r\n                                                    }),\r\n                                                    element(\"input\", {\r\n                                                        attributes: {\r\n                                                            id: \"visibility\",\r\n                                                            type: \"checkbox\",\r\n                                                            name: \"visibility\",\r\n                                                            checked: visibility,\r\n                                                            tabindex: 0,\r\n                                                            autofocus: true\r\n                                                        }\r\n                                                    }),\r\n                                                    element(\"label\", {\r\n                                                        attributes: {\r\n                                                            for: \"name\"\r\n                                                        },\r\n                                                        children: \"Name\"\r\n                                                    }),\r\n                                                    element(\"input\", {\r\n                                                        attributes: {\r\n                                                            id: \"name\",\r\n                                                            type: \"text\",\r\n                                                            name: \"name\",\r\n                                                            value: name,\r\n                                                            tabindex: 0\r\n                                                        }\r\n                                                    }),\r\n                                                    element(\"label\", {\r\n                                                        attributes: {\r\n                                                            for: \"type\"\r\n                                                        },\r\n                                                        children: \"Type\"\r\n                                                    }),\r\n                                                    element(\"e-select\", {\r\n                                                        attributes: {\r\n                                                            id: \"type\",\r\n                                                            name: \"type\",\r\n                                                            tabindex: 0\r\n                                                        },\r\n                                                        children: [\"parent\", \"leaf\"].map(\r\n                                                            type_i => element(\"e-option\", {\r\n                                                                attributes: {\r\n                                                                    label: type_i,\r\n                                                                    value: type_i,\r\n                                                                    selected: type === type_i\r\n                                                                }\r\n                                                            })\r\n                                                        )\r\n                                                    })\r\n                                                ]\r\n                                            })\r\n                                        ]\r\n                                    })\r\n                                ]\r\n                            }),\r\n                            element(\"footer\", {\r\n                                attributes: {\r\n                                    class: \"dialog-footer\"\r\n                                },\r\n                                children: [\r\n                                    element(\"button\", {\r\n                                        attributes: {\r\n                                            type: \"submit\",\r\n                                            value: \"confirm\"\r\n                                        },\r\n                                        children: \"Confirm\"\r\n                                    }),\r\n                                    element(\"button\", {\r\n                                        attributes: {\r\n                                            value: \"cancel\"\r\n                                        },\r\n                                        children: \"Cancel\"\r\n                                    })\r\n                                ]\r\n                            })\r\n                        ]\r\n                    })\r\n                ],\r\n                listeners: {\r\n                    close: (event) => {\r\n                        const {currentTarget} = event;\r\n                        const targetDialog = <HTMLDialogElement>currentTarget;\r\n                        if (targetDialog.returnValue === \"confirm\") {\r\n                            const form = targetDialog.querySelector(\"form\")!;\r\n                            const formData = new FormData(form);\r\n                            item.visibility = Boolean(formData.get(\"visibility\"));\r\n                            item.type = <\"leaf\" | \"parent\">String(formData.get(\"type\"));\r\n                            item.name = String(formData.get(\"name\"));\r\n                        }\r\n                        targetDialog.remove();\r\n                    }\r\n                }\r\n            });\r\n            shadowRoot.append(dialog);\r\n            dialog.showModal();\r\n        }\r\n\r\n        #handleDoubleClickEvent(event: MouseEvent): void {\r\n            const {target} = event;\r\n            const targetItem = <HTMLETreeItemElement>(<Element>target).closest(\"e-treeitem\");\r\n            const targetItemModel = <MyTreeItemModel>this.treeItem(targetItem);\r\n            if (targetItemModel) {\r\n                this.showEditItemDialog(targetItemModel);\r\n            }\r\n        }\r\n    };\r\n\r\n    const treeView = new MyTreeView();\r\n    treeView.draggable = true;\r\n    treeView.setModel(treeModel);\r\n    treeView.render();\r\n    document.body.append(treeView);\r\n\r\n    document.body.append(\r\n        element(\"e-menubar\", {\r\n            attributes: {\r\n                tabindex: 0\r\n            },\r\n            children: [\r\n                element(\"e-menuitem\", {\r\n                    attributes: {\r\n                        type: \"menu\",\r\n                        label: \"Menu 1\",\r\n                        disabled: true\r\n                    },\r\n                    children: [\r\n                        \"Menu 1\"\r\n                    ]\r\n                }),\r\n                element(\"e-menuitem\", {\r\n                    attributes: {\r\n                        type: \"menu\",\r\n                        label: \"Menu 1\"\r\n                    },\r\n                    children: [\r\n                        \"Menu 1\",\r\n                        element(\"e-menu\", {\r\n                            attributes: {\r\n                                slot: \"menu\"\r\n                            },\r\n                            children: [\r\n                                element(\"e-menuitem\", {\r\n                                    attributes: {\r\n                                        type: \"checkbox\"\r\n                                    },\r\n                                    children: \"Menuitem 1\"\r\n                                }),\r\n                                element(\"e-menuitem\", {\r\n                                    attributes: {\r\n                                        type: \"submenu\"\r\n                                    },\r\n                                    children: [\r\n                                        \"Submenu 1\",\r\n                                        element(\"e-menu\", {\r\n                                            attributes: {\r\n                                                slot: \"menu\"\r\n                                            },\r\n                                            children: [\r\n                                                EMenuItem.radio({\r\n                                                    label: \"SubmenuItem 1\",\r\n                                                    name: \"radio\",\r\n                                                    value: String(0)\r\n                                                }),\r\n                                                EMenuItem.radio({\r\n                                                    label: \"SubmenuItem 2\",\r\n                                                    name: \"radio\",\r\n                                                    value: String(1)\r\n                                                }),\r\n                                                EMenuItem.radio({\r\n                                                    label: \"SubmenuItem 3\",\r\n                                                    name: \"radio\",\r\n                                                    value: String(3)\r\n                                                })\r\n                                            ]\r\n                                        })\r\n                                    ]\r\n                                })\r\n                            ]\r\n                        })\r\n                    ]\r\n                }),\r\n                element(\"e-menuitem\", {\r\n                    attributes: {\r\n                        type: \"menu\",\r\n                        label: \"Menu 1\"\r\n                    },\r\n                    children: [\r\n                        \"Menu 1\",\r\n                        element(\"e-menu\", {\r\n                            attributes: {\r\n                                slot: \"menu\"\r\n                            },\r\n                            children: [\r\n                                element(\"e-menuitem\", {\r\n                                    attributes: {\r\n                                        type: \"checkbox\"\r\n                                    },\r\n                                    children: \"Checkbox\"\r\n                                })\r\n                            ]\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        })\r\n    );\r\n\r\n    document.body.append(\r\n        element(\"e-toolbar\", {\r\n            children: [\r\n                element(\"e-toolbaritem\", {\r\n                    attributes: {\r\n                        id: \"one\"\r\n                    },\r\n                    children: \"Item 1\"\r\n                }),\r\n                element(\"e-toolbaritem\", {\r\n                    attributes: {\r\n                        id: \"three\",\r\n                    },\r\n                    children: \"Item 3\"\r\n                }),\r\n                element(\"e-toolbaritem\", {\r\n                    attributes: {\r\n                        id: \"four\"\r\n                    },\r\n                    children: \"Item 4\"\r\n                }),\r\n                element(\"e-toolbaritem\", {\r\n                    attributes: {\r\n                        id: \"two\"\r\n                    },\r\n                    children: \"Item 2\"\r\n                })\r\n            ]\r\n        }),\r\n        element(\"e-tooltip\", {\r\n            attributes: {\r\n                for: \"one\",\r\n                position: \"bottom\"\r\n            },\r\n            children: \"First tooltip\"\r\n        }),\r\n        element(\"e-tooltip\", {\r\n            attributes: {\r\n                for: \"two\",\r\n                position: \"top\"\r\n            },\r\n            children: \"Second tooltip!\"\r\n        }),\r\n        element(\"e-tooltip\", {\r\n            attributes: {\r\n                for: \"three\",\r\n                position: \"right\",\r\n            },\r\n            children: \"Third tooltip ?\"\r\n        }),\r\n        element(\"e-tooltip\", {\r\n            attributes: {\r\n                for: \"four\",\r\n                position: \"left\"\r\n            },\r\n            children: \"Fourth.\"\r\n        })\r\n    );\r\n\r\n    document.body.append(\r\n        element(\"e-select\", {\r\n            children: [\"Hello\", \"World\", \"Innocents\"].map(\r\n                option => element(\"e-option\", {\r\n                    attributes: {\r\n                        value: option,\r\n                        label: option\r\n                    }\r\n                })\r\n            )\r\n        })\r\n    );\r\n\r\n    document.body.append(\r\n        ...[\r\n            \"tablist\",\r\n            \"sash\",\r\n            \"loaders\",\r\n            \"tree\",\r\n            \"menubar\",\r\n            \"list\",\r\n            \"status\"\r\n        ].map(example => {\r\n            return element(\"details\", {\r\n                children: [\r\n                    element(\"summary\", {\r\n                        children: `${example}.html`\r\n                    }),\r\n                    element(\"e-import\", {\r\n                        attributes: {\r\n                            src: `example/${example}.html`\r\n                        }\r\n                    })\r\n                ]\r\n            })\r\n        })\r\n    );\r\n    document.querySelector(\"e-import[src='example/status.html']\")!.addEventListener(\"load\", () => {\r\n        const lastStatusItem = document.querySelector(\"e-statusitem:last-child\");\r\n        if (lastStatusItem) {\r\n            lastStatusItem.addEventListener(\"click\", (event) => {\r\n                const {currentTarget, target} = event;\r\n                if (target === currentTarget) {\r\n                    const select = lastStatusItem.querySelector(\"e-select\");\r\n                    if (select) {\r\n                        select.expand();\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    });\r\n\r\n    class PersonModel extends ModelObject {\r\n        @ModelProperty()\r\n        name: string;\r\n\r\n        @ModelProperty()\r\n        age: number;\r\n\r\n        constructor(name: string, age: number) {\r\n            super();\r\n            this.name = name;\r\n            this.age = age;\r\n        }\r\n    }\r\n\r\n    @CustomElement({name: \"e-person\"})\r\n    class PersonElement extends HTMLElement {\r\n        readonly shadowRoot!: ShadowRoot;\r\n\r\n        #person?: PersonModel;\r\n\r\n        get person(): PersonModel | undefined {\r\n            return this.#person;\r\n        }\r\n\r\n        set person(person: PersonModel | undefined) {\r\n            const oldPerson = this.#person;\r\n            if (oldPerson !== person) {\r\n                if (oldPerson) {\r\n                    revokeReactiveElement(oldPerson, this);\r\n                }\r\n                if (person) {\r\n                    reactiveElement(\r\n                        person, this,\r\n                        this.personReactiveProperties,\r\n                        this.handlePersonModelChange.bind(this)\r\n                    );\r\n                }\r\n                this.#person = person;\r\n            }\r\n        }\r\n\r\n        constructor() {\r\n            super();\r\n            const shadowRoot = this.attachShadow({mode: \"open\"});\r\n            shadowRoot.replaceChildren(\r\n                element(\"input\", {\r\n                    attributes: {\r\n                        id: \"age_input\",\r\n                        type: \"number\"\r\n                    }\r\n                }),\r\n                element(\"input\", {\r\n                    attributes: {\r\n                        id: \"name_input\",\r\n                        type: \"text\"\r\n                    }\r\n                })\r\n            );\r\n            shadowRoot.addEventListener(\"change\", this.#handleInputChangeEvent.bind(this));\r\n        }\r\n\r\n        #handleInputChangeEvent(event: Event): void {\r\n            const {target} = event;\r\n            const {person} = this;\r\n            if (target instanceof HTMLInputElement && person) {\r\n                if (target.matches(\"#name_input\")) {\r\n                    person.name = target.value;\r\n                }\r\n                else if (target.matches(\"#age_input\")) {\r\n                    person.age = target.valueAsNumber;\r\n                }\r\n            }\r\n        }\r\n\r\n        personReactiveProperties = [\"name\", \"age\"];\r\n\r\n        handlePersonModelChange(element: this, propertyName: string, oldValue: any, newValue: any) {\r\n            const {shadowRoot} = this;\r\n            switch (propertyName) {\r\n                case \"name\": {\r\n                    shadowRoot\r\n                        .querySelector<HTMLInputElement>(\"#name_input\")!\r\n                        .value = newValue;\r\n                    break;\r\n                }\r\n                case \"age\": {\r\n                    shadowRoot\r\n                        .querySelector<HTMLInputElement>(\"#age_input\")!\r\n                        .valueAsNumber = newValue;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    const personElement = new PersonElement();\r\n    document.body.append(\r\n        personElement\r\n    );\r\n\r\n    (window as any)[\"personElement\"] = personElement;\r\n    (window as any)[\"PersonModel\"] = PersonModel;\r\n\r\n\r\n    document.querySelector(\"e-import[src*='tablist']\")?.addEventListener(\"load\", () => {\r\n        const tablist = document.querySelector<HTMLETabListElement>(\"e-tablist\");\r\n        if (tablist) {\r\n            const {selectedTab} = tablist;\r\n            if (selectedTab) {\r\n                const tabBox = selectedTab.getBoundingClientRect();\r\n                const {bottom, left, width} = tabBox;\r\n                tablist.animate([\r\n                    { width: `${width}px`, left: `${left}px`, top: `${bottom}px` }\r\n                ], {\r\n                    duration: 0,\r\n                    fill: \"forwards\",\r\n                    easing: \"ease-in-out\",\r\n                    pseudoElement: \"::after\"\r\n                });\r\n            }\r\n            tablist?.addEventListener(\"click\", (event) => {\r\n                const {target} = event;\r\n                const tab = (<Element>target).closest(\"e-tab\");\r\n                if (tab) {\r\n                    const tabBox = tab.getBoundingClientRect();\r\n                    const {bottom, left, width} = tabBox;\r\n                    tablist.animate([\r\n                        { width: `${width}px`, left: `${left}px`, top: `${bottom}px` }\r\n                    ], {\r\n                        duration: 400,\r\n                        fill: \"forwards\",\r\n                        easing: \"ease-in-out\",\r\n                        pseudoElement: \"::after\"\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    });\r\n}"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","ModelChangeRecordBase","constructor","init","this","target","changeType","propertyName","oldValue","undefined","newValue","removedIndex","removedItems","ModelNodesList","insertedIndex","insertedItems","sortedIndices","PROPERTY_CHANGE","LIST_REMOVE","LIST_INSERT","LIST_SORT","ModelChangeRecord","items","slice","length","item","index","values","ModelEventBase","type","currentTarget","ModelEventTargetAccessor","setCurrentTarget","event","setTarget","ModelEvent","ModelNodeBase","Map","receiveEvent","callbacks","forEach","callback_i","addEventListener","callback","push","set","removeEventListener","callbackIndex","findIndex","splice","delete","dispatchEvent","super","parentNode","setParent","isCyclicReference","ancestorNode","TypeError","beginChanges","endChanges","getRecords","property","records","record","ModelNodeRecordsAccessor","triggerChange","node","handleRecord","ModelNode","ModelProperty","ModelObjectPropertiesAccessor","getProperty","setProperty","ModelObjectBase","ModelObject","ModelList","item_i","indexOf","sort","compareFunction","indexedItems","map","i","indexedItem_a","indexedItem_b","indexedItem_i","prepend","_items","append","insert","Math","abs","remove","clear","removedItem_i","reference","options","properties","propertiesFilter","childList","subtree","filter","record_i","includes","ModelChangeObserver","WeakMap","observe","references","listener","bind","unobserve","disconnect","snakeToCamel","str","split","charAt","toUpperCase","substring","toLowerCase","join","camelToSnake","replace","trainToCamel","AttributeProperty","String","defaultValue","observed","name","observedAttributes","Reflect","Array","isArray","writable","Boolean","hasAttribute","setAttribute","removeAttribute","val","getAttribute","JSON","parse","stringify","Number","parseFloat","Stylesheet","text","stylesheet","CSSStyleSheet","replaceSync","trimMultilineIndent","newlineIndex","indentMatch","match","indent","replaceAll","trimEnd","CustomElement","elementCtor","customElements","define","QueryProperty","propertyKey","selector","getter","withinShadowRoot","shadowRoot","querySelector","QueryAllProperty","from","querySelectorAll","fragment","nodes","document","createDocumentFragment","textNode","createTextNode","tagName","attributes","dataset","children","listeners","element","createElement","entries","attributeName","attributeValue","toggleAttribute","elementDataset","keys","datasetEntry_i","name_i","listener_i","reactiveElementsMap","reactiveElementsFinalizationRegistry","FinalizationRegistry","heldValue","model","reactiveElement","reactiveElementsMapEntry","reactiveElementsArray","reactiveElementsPropertyObserver","reactiveElement_i","elementRef","react","deref","WeakRef","register","observerOptions","concat","property_i","revokeReactiveElement","reactiveElementIndex","reactiveChildElementsMap","reactiveChildElementsFinalizationRegistry","list","reactiveChildElement","reactiveChildrenElementsMapEntry","reactiveChildElementsArray","reactiveChildElementsObserver","range","listLength","reactiveChildElements_i","parentRef","mapping","placeholder","parent","firstChild","childrenCount","removeChild","insertedItemsArray","before","removedCount","createRange","removeEndIndex","setStartBefore","setEndAfter","deleteContents","childrenArray","index_i","reactiveChildElements","reactiveChildElementsMapEntry","replaceChildren","revokeReactiveChildElements","reactiveChildElementsIndex","areAttributesMatching","referenceAttributeType","referenceAttributeName","referenceAttributeValue","RegExp","test","AttributeMutationMixinBase","attributeType","attach","detach","shadowTemplate","style","HTMLEMenuItemElementBase","HTMLElement","internals","attachInternals","role","attachShadow","mode","adoptedStylesheet","adoptedStyleSheets","content","cloneNode","connectedCallback","tabIndex","attributeChangedCallback","ariaChecked","ariaDisabled","ariaExpanded","ariaLabel","toggle","force","expanded","expand","Event","bubbles","collapse","menu","menuStyle","top","itemTop","bottom","itemBottom","left","itemLeft","right","itemRight","getBoundingClientRect","width","menuWidth","height","menuHeight","clientWidth","clientHeight","body","offsetParent","offsetLeft","offsetTop","overflowX","overflowY","closestMenu","closest","closestMenuTop","closestMenuLeft","part","HTMLEMenuItemElement","EMenuItem","assign","label","trigger","slot","tabindex","title","click","button","checkbox","radio","submenu","ViewBase","setModel","renderLight","renderShadow","render","shadow","light","View","GridModel","rows","initRows","columns","initColumns","getColumnByName","find","column_i","sortByColumn","column","sortOrder","sortorder","sortTest","row_1","row_2","cell_1","extract","cell_2","localeCompare","sign","GridColumnModel","filters","GridRowModel","id","age","GridViewBase","row","gridElement","setColumnDelegate","delegate","setCellDelegate","getRowElement","getColumnHeaderElement","getColumnCellsElements","rel","href","input","selectby","multisectable","contextmenu","setSearchFilter","row_i","rowElement","hidden","clearSelection","addDisplayFilter","displayFilters","removeDisplayFilter","filterIndex","removeAllDisplayFilters","searchFilter","some","filter_i","class","resizable","controls","cell","toString","headers","clientX","clientY","targetHead","targetHeader","contextMenu","contextual","columnHeaderElement","maxWidth","cell_i","reduce","max","focus","removeProperty","checked","targetItem","positionContextual","preventScroll","preventDefault","HTMLInputElement","matches","targetColumn","GridView","TreeModel","sortFunction","childItems","subtreeItems","item_a","item_b","flatMap","treeItem_i","of","getItemByUri","uri","itemsCount","uriLength","itemUri","itemUriLength","startsWith","flattenedInsertedItems","insertedItem_i","flattenedRemovedItems","TreeItemModelList","count","removedItemsGroups","TreeItemModel","group","list_i","children_i","child_i","level","parentItem","TreeViewBase","treeElement","draggable","treeItemElement","treeItem","dragstart","drop","focusin","focusout","itemContentDelegate","textContent","itemToolbarDelegate","itemMenuDelegate","selectedItems","activeItem","closestItem","parentElement","toolbar","posinset","treeitem","dragImageElement","span","targetTree","dataTransfer","selectedElements","selectedCount","selectedUris","element_i","uri_i","_","uris","uri_j","selectedUrisString","lastUri","lastItem","dropEffect","setData","dragImage","setDragImage","targetUri","targetItemModel","transferedUris","getData","transferedItems","targetType","targetParentItem","targetList","sameLabelIndex","item_j","confirm","copyWithin","newElements","beginSelection","selected","endSelection","relatedTarget","contains","relatedPosition","compareDocumentPosition","Node","DOCUMENT_POSITION_DISCONNECTED","DOCUMENT_POSITION_PRECEDING","itemToolbar","Key","KeyModifier","MouseButton","TreeView","HotKey","mod1","mod2","mod","Control","altKey","ctrlKey","shiftKey","HTMLEGridCellElementBase","HTMLEGridCellElement","HTMLEGridBodyElementBase","cells","assignedElements","HTMLEGridBodyElement","HTMLEGridRowElementBase","HTMLEGridRowElement","HTMLEGridRowGroupElementBase","HTMLEGridRowGroupElement","HTMLEGridElementBase","createTreeWalker","NodeFilter","SHOW_ELEMENT","activeCell","activeRow","head","selectedCells","selectedRows","FILTER_ACCEPT","FILTER_SKIP","FILTER_REJECT","to","fromIndex","toIndex","min","position","DOCUMENT_POSITION_FOLLOWING","nextVisibleRow","previousVisibleRow","selectedCell_i","selectedRow_i","active","currentNode","cellsWalker","lastChild","previousNode","nextNode","rowsWalker","root","closestRow","cellIndex","previousRow","previousRowCells","nextRow","nextRowCells","composedPath","targetCell","target_i","lastSelectedCell","targetRow","lastSelectedRow","stopPropagation","firstRow","firstCell","lastRow","lastCell","previousCell","nextCell","topCell","bottomCell","HTMLEGridElement","HTMLEGridHeadElementBase","HTMLEGridHeadElement","HTMLEMenuItemGroupElementBase","toggleAnimations","HTMLEMenuItemGroupElement","EMenuItemGroup","radios","HTMLEMenuElementBase","activeIndex","parseInt","x","y","scrollX","scrollY","window","firstItem","walker","radio_i","nearestItem","error","HTMLEMenuElement","blur","cancel","toggleAnimation","animate","duration","finished","then","catch","finally","intersectsWithMouse","containsRelatedTarget","EMenu","HTMLEMenuBarElementBase","disabled","previousSibling","nextSibling","Element","isExpanded","HTMLEMenuBarElement","HTMLEMenuButtonElementBase","iconPart","HTMLEMenuButtonElement","EMenuButton","HTMLEToolBarItemElementBase","HTMLEToolBarItemElement","EToolBarItem","menubutton","select","HTMLEToolBarItemGroupElementBase","wasExpandedOnMouseDown","HTMLEToolBarItemGroupElement","HTMLEToolBarElementBase","pressed","previousItem","nextItem","HTMLEToolBarElement","HTMLEStatusItemElementBase","HTMLEStatusItemElement","EStatusItem","onclick","HTMLEStatusItemGroupElementBase","HTMLEStatusItemGroupElement","HTMLEStatusBarElementBase","HTMLEStatusBarElement","HTMLETabElementBase","panel","getRootNode","HTMLETabElement","HTMLETabListElementBase","tabs","activeTab","selectedTab","upgrade","tabToSelect","setTimeout","tabWidth","tabLeft","tabBottom","fill","easing","pseudoElement","tab","targetTab","dialogLeft","dialogTop","tab_i","HTMLETabListElement","HTMLETabPanelElementBase","HTMLETabPanelElement","HTMLETreeItemElementBase","labelPart","HTMLETreeItemElement","HTMLETreeItemGroupElementBase","HTMLETreeItemGroupElement","HTMLETreeElementBase","getElementsByTagName","dropTargetItem","nextVisibleItem","previousVisibleItem","selectedItem_i","droptarget","rootNode","Document","ShadowRoot","host","HTMLETreeElement","HTMLEListItemElementBase","badge","slotName","HTMLSpanElement","HTMLEListItemElement","HTMLEListItemGroupElementBase","HTMLEListItemGroupElement","HTMLEListElementBase","lastSelectedItem","HTMLEListElement","HTMLEDraggableElementBase","referee","disconnectedCallback","thisRefIndex","getReference","HTMLEDraggableElement","HTMLEDragzoneElementBase","draggables","selectedDraggables","selectDraggable","unselectDraggable","elem","thisSelectedDraggable","dragged","thisDraggedDraggable","targetIndex","firstIndex","direction","startRangeIndex","endRangeIndex","thisDraggable","HTMLEDragzoneElement","HTMLEDropzoneElementBase","droptest","appendAreaPart","removeDraggables","dragovered","dropIndex","dragzoneId","dragzone","getElementById","selectedDraggable","HTMLEDropzoneElement","addDraggables","placeholderPart","dataTransferSuccess","newDraggables","insertionPosition","multiple","newDraggable","insertAdjacentElement","appendChild","replaceChild","CustomEvent","detail","action","once","predicate","toRemove","atPosition","HTMLEDialogElementBase","handleEvent","open","close","HTMLEDialogElement","HTMLEOptionElementBase","ariaSelected","HTMLEOptionElement","HTMLEOptionGroupElementBase","mutationObserver","HTMLEOptionGroupElement","HTMLESelectElementBase","formAssociated","activeOption","selectedOption","optionToSelect","option_i","option","setFormValue","box","optionsStyle","targetOption","previousOption","nextOption","firstOption","lastOption","keyLength","keyCode","charCodeAt","matchingOption","MutationObserver","mutationsList","mutation","HTMLESelectElement","HTMLESeparatorElementBase","HTMLESeparatorElement","HTMLEToolTipElementBase","tooltip","htmlFor","show","immediate","visible","opacity","delay","hide","oldTarget","targetListenerObject","targetTop","targetBottom","targetLeft","targetRight","tooltipWidth","tooltipHeight","tooltipHalfWidth","tooltipHalfHeight","targetCenter","targetMiddle","tooltipStyle","arrow","arrowStyle","arrowWidth","arrowHeight","arrowHalfWidth","arrowHalfHeight","documentListenerObject","HTMLEToolTipElement","HTMLEHandleElementBase","pointerId","releasePointerCapture","setPointerCapture","targetComputedStyle","getComputedStyle","movementX","movementY","rectWidth","rectHeight","outerElement","outerRectLeft","outerRectRight","outerRectTop","outerRectBottom","getPropertyValue","newLeft","trunc","newTop","HTMLEHandleElement","HTMLEHeightSashElementBase","growdir","newHeight","computedNewHeight","requestAnimationFrame","HTMLEHeightSashElement","HTMLEImportElementBase","src","async","outerHTML","fetch","response","ok","Error","statusText","barShadowTemplate","spinnerShadowTemplate","HTMLEImportElement","HTMLELoaderElementBase","HTMLELoaderElement","HTMLEWidthSashElementBase","setWidth","newWidth","HTMLEWidthSashElement","addedNodes","removedNodes","targetElement","mixin","attr","childIndex","child","AttributeMixinsObserver","mixins","takeRecords","attributeFilter","slotsMap","slotsObserver","slotReferences","slotRef_i","widget","slottedCallback","widgetsMap","attributesObserver","WidgetFactory","create","Proxy","apply","thisArg","argumentsList","observedSlots","slotName_i","slotElement","slot_i","slotReference","attributeOldValue","widgets","Widget","separatorWidget","menuItemWidget","hasIcon","hasArrow","classList","keyshortcut","add","setKeyShortcut","setChecked","setExpanded","setType","setLabel","setName","setValue","setDisabled","hasChildMenu","childNodes","childNode_i","getMenu","getKeyShortcut","keyshortcutsPart","after","getLabel","getType","types","type_i","typesFeatures","iconPartTemplate","arrowPartTemplate","oldType","arrowPart","getValue","getName","getChecked","getDisabled","getExpanded","menuComputedStyle","paddingTop","paddingBottom","menuPaddingTop","menuPaddingBottom","menuBarWidget","menubar","menuWidget","setContextual","setPosition","getContextual","menuitem_i","Promise","resolve","reject","timeout","clearTimeout","targetMenu","menuItemGroupWidget","treeItemWidget","setTitle","setDraggable","setSelected","getTitle","setPosInSet","getPosInSet","posInSet","e","setActive","getActive","setDropTarget","getDropTarget","getDraggable","getSelected","setLevel","getLevel","treeWidget","tree","setMultiSelectable","getMultiSelectable","treeItemGroupWidget","listItemWidget","listWidget","relatedTargetRoot","relatedTargetHost","listItemGroupWidget","toolbarItemWidget","setPressed","getPressed","toolbarWidget","setOrientation","getOrientation","targetToolbar","toolbarItemGroupWidget","widthSashWidget","targets","pointerMovements","onCaptureFlags","queuedPointerCallbacks","sash","growDir","setControls","setGrowDir","getGrowDir","getControls","sashTarget","pointerMoveCallback","pointerMovement","heightSashWidget","setHeight","gridCellWidget","setHeaders","getHeaders","gridRowWidget","gridWidget","grid","setSelectBy","getSelectBy","closestRowCells","targetGrid","multiselectable","gridBodyWidget","gridHeadWidget","gridHeaderWidget","scope","header","optionWidget","comboBoxWidget","combobox","targetCombobox","optionGroupWidget","MyTreeItemModelList","display","result","console","log","MyTreeItemModel","childCount","visibility","main","resp","json","assets","asset","hrefs","as","gridView","Date","getFullYear","treeModel","MyTreeView","iconed","visibilityItem","activeItemElement","selectedItemsList","showEditItemDialog","dialog","method","for","autofocus","targetDialog","returnValue","form","formData","FormData","showModal","activeItemModel","treeView","example","lastStatusItem","PersonModel","PersonElement","personReactiveProperties","person","oldPerson","handlePersonModelChange","valueAsNumber","personElement","tablist","tabBox"],"sourceRoot":""}