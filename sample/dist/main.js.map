{"version":3,"file":"main.js","mappings":"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","sources":["webpack://main/webpack/bootstrap","webpack://main/webpack/runtime/define property getters","webpack://main/webpack/runtime/hasOwnProperty shorthand","webpack://main/webpack/runtime/make namespace object","webpack://main/./src/models/Model.ts","webpack://main/./src/elements/Snippets.ts","webpack://main/./src/elements/Element.ts","webpack://main/./src/elements/containers/actions/Action.ts","webpack://main/./src/Input.ts","webpack://main/./src/elements/containers/grid/GridCell.ts","webpack://main/./src/elements/containers/grid/GridRowGroup.ts","webpack://main/./src/elements/containers/menus/MenuItem.ts","webpack://main/./src/elements/containers/menus/MenuItemGroup.ts","webpack://main/./src/elements/containers/menus/Menu.ts","webpack://main/./src/elements/containers/grid/GridRow.ts","webpack://main/./src/elements/containers/grid/GridCellCollection.ts","webpack://main/./src/elements/containers/grid/GridRowCollection.ts","webpack://main/./src/elements/containers/grid/GridBody.ts","webpack://main/./src/elements/containers/grid/Grid.ts","webpack://main/./src/elements/containers/grid/GridHead.ts","webpack://main/./src/elements/containers/menus/MenuBar.ts","webpack://main/./src/elements/containers/menus/MenuButton.ts","webpack://main/./src/elements/controls/forms/Option.ts","webpack://main/./src/elements/controls/forms/OptionGroup.ts","webpack://main/./src/elements/controls/forms/OptionCollection.ts","webpack://main/./src/elements/controls/forms/Select.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItem.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItemGroup.ts","webpack://main/./src/elements/containers/toolbars/ToolBar.ts","webpack://main/./src/elements/containers/tabs/TabPanel.ts","webpack://main/./src/elements/containers/tabs/Tab.ts","webpack://main/./src/elements/containers/tabs/TabList.ts","webpack://main/./src/elements/containers/trees/TreeItemGroup.ts","webpack://main/./src/elements/containers/trees/TreeItem.ts","webpack://main/./src/elements/containers/trees/Tree.ts","webpack://main/./src/elements/containers/lists/ListItem.ts","webpack://main/./src/elements/containers/lists/ListItemGroup.ts","webpack://main/./src/elements/containers/lists/List.ts","webpack://main/./src/elements/controls/draggable/Draggable.ts","webpack://main/./src/elements/controls/draggable/Dragzone.ts","webpack://main/./src/elements/controls/draggable/Dropzone.ts","webpack://main/./src/elements/controls/dialogs/Dialog.ts","webpack://main/./src/elements/utils/Handle.ts","webpack://main/./src/elements/utils/HeightSash.ts","webpack://main/./src/elements/utils/Import.ts","webpack://main/./src/elements/utils/Loader.ts","webpack://main/./src/elements/utils/WidthSash.ts","webpack://main/./src/observers/AttributeMixinsObserver.ts","webpack://main/./src/views/widgets/Widget.ts","webpack://main/./src/views/widgets/SeparatorWidget.ts","webpack://main/./src/views/widgets/menu/MenuItemWidget.ts","webpack://main/./src/views/widgets/menu/MenuBarWidget.ts","webpack://main/./src/views/widgets/menu/MenuWidget.ts","webpack://main/./src/views/widgets/menu/MenuItemGroupWidget.ts","webpack://main/./src/views/widgets/tree/TreeItemWidget.ts","webpack://main/./src/views/widgets/tree/TreeWidget.ts","webpack://main/./src/views/widgets/tree/TreeItemGroupWidget.ts","webpack://main/./src/views/widgets/list/ListItemWidget.ts","webpack://main/./src/views/widgets/list/ListWidget.ts","webpack://main/./src/views/widgets/list/ListItemGroupWidget.ts","webpack://main/./src/views/widgets/toolbar/ToolBarItemWidget.ts","webpack://main/./src/views/widgets/toolbar/ToolBarWidget.ts","webpack://main/./src/views/widgets/toolbar/ToolBarItemGroupWidget.ts","webpack://main/./src/views/widgets/WidthSashWidget.ts","webpack://main/./src/views/widgets/HeightSashWidget.ts","webpack://main/./src/views/widgets/grid/GridCellWidget.ts","webpack://main/./src/views/widgets/grid/GridRowWidget.ts","webpack://main/./src/views/widgets/grid/GridWidget.ts","webpack://main/./src/views/widgets/grid/GridBodyWidget.ts","webpack://main/./src/views/widgets/grid/GridHeadWidget.ts","webpack://main/./src/views/widgets/grid/GridHeaderWidget.ts","webpack://main/./src/views/widgets/combobox/OptionWidget.ts","webpack://main/./src/views/widgets/combobox/ComboBoxWidget.ts","webpack://main/./src/views/widgets/combobox/OptionGroupWidget.ts","webpack://main/./src/views/View.ts","webpack://main/./src/views/GridView.ts","webpack://main/./src/views/TreeView.ts","webpack://main/./TreeMain.ts","webpack://main/./main.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export { ModelChangeRecord };\r\nexport { ModelEvent };\r\nexport { ModelNode };\r\nexport { ModelObject };\r\nexport { ModelProperty };\r\nexport { ModelList };\r\nexport { ModelChangeObserverOptions };\r\nexport { ModelChangeObserver };\r\n\r\ninterface ModelChangeRecordConstructor {\r\n    prototype: ModelChangeRecord;\r\n    new(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ): ModelChangeRecord;\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\ninterface ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly changeType: number;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\nclass ModelChangeRecordBase implements ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList;\r\n    readonly changeType: number;\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n\r\n    constructor(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ) {\r\n        this.target = init.target;\r\n        this.changeType = init.changeType;\r\n        this.propertyName = init.propertyName ?? null;\r\n        this.oldValue = init.oldValue ?? undefined;\r\n        this.newValue = init.newValue ?? undefined;\r\n        this.removedIndex = init.removedIndex ?? 0;\r\n        this.removedItems = new ModelNodesList(init.removedItems ?? []);\r\n        this.insertedIndex = init.insertedIndex ?? 0;\r\n        this.insertedItems = new ModelNodesList(init.insertedItems ?? []);\r\n        this.sortedIndices = init.sortedIndices ?? [];\r\n    }\r\n\r\n    static get PROPERTY_CHANGE(): number {\r\n        return 1;\r\n    }\r\n\r\n    static get LIST_REMOVE(): number {\r\n        return 2;\r\n    }\r\n\r\n    static get LIST_INSERT(): number {\r\n        return 3;\r\n    }\r\n\r\n    static get LIST_SORT(): number {\r\n        return 4;\r\n    }\r\n\r\n    get PROPERTY_CHANGE(): number {\r\n        return ModelChangeRecordBase.PROPERTY_CHANGE;\r\n    }\r\n\r\n    get LIST_REMOVE(): number {\r\n        return ModelChangeRecordBase.LIST_REMOVE;\r\n    }\r\n\r\n    get LIST_INSERT(): number {\r\n        return ModelChangeRecordBase.LIST_INSERT;\r\n    }\r\n\r\n    get LIST_SORT(): number {\r\n        return ModelChangeRecordBase.LIST_SORT;\r\n    }\r\n}\r\n\r\nvar ModelChangeRecord: ModelChangeRecordConstructor = ModelChangeRecordBase;\r\n\r\ninterface ModelNodesListConstructor {\r\n    prototype: ModelNodesList;\r\n    new(items: any[]): ModelNodesList;\r\n}\r\n\r\ninterface ModelNodesList {\r\n    get length(): number;\r\n    item(index: number): ModelNode | null;\r\n    values(): IterableIterator<ModelNode>;\r\n}\r\n\r\nclass ModelNodesListBase implements ModelNodesList {\r\n    #items: ModelNode[];\r\n\r\n    constructor(items: ModelNode[]) {\r\n        this.#items = items.slice();\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    item(index: number): ModelNode | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    values(): IterableIterator<ModelNode> {\r\n        return this.#items.values();\r\n    }\r\n}\r\n\r\nvar ModelNodesList: ModelNodesListConstructor = ModelNodesListBase;\r\n\r\ninterface ModelEventConstructor {\r\n    prototype: ModelEvent;\r\n    new(type: string): ModelEvent;\r\n}\r\n\r\ninterface ModelEvent {\r\n    readonly type: string;\r\n    readonly currentTarget: ModelEventTarget | null;\r\n    readonly target: ModelEventTarget | null;\r\n}\r\n\r\nclass ModelEventBase implements ModelEvent {\r\n    readonly type: string;\r\n\r\n    #currentTarget: ModelEventTarget | null;\r\n    #target: ModelEventTarget | null;\r\n\r\n    constructor(type: string) {\r\n        this.type = type;\r\n        this.#currentTarget = null;\r\n        this.#target = null;\r\n    }\r\n\r\n    get currentTarget(): ModelEventTarget | null {\r\n        return this.#currentTarget;\r\n    }\r\n\r\n    get target(): ModelEventTarget | null {\r\n        return this.#target;\r\n    }\r\n\r\n    static ModelEventTargetAccessor? = new class ModelEventTargetAccessor {\r\n        setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#currentTarget = currentTarget;\r\n            }\r\n        }\r\n\r\n        setTarget(event: ModelEvent, target: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#target = target;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface ModelEventTargetAccessor {\r\n    setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void;\r\n    setTarget(event: ModelEvent, target: ModelEventTarget): void;\r\n}\r\n\r\nvar ModelEventTargetAccessor: ModelEventTargetAccessor = ModelEventBase.ModelEventTargetAccessor!;\r\ndelete ModelEventBase.ModelEventTargetAccessor;\r\n\r\nvar ModelEvent: ModelEventConstructor = ModelEventBase;\r\n\r\ninterface ModelEventTargetConstructor {\r\n    prototype: ModelEventTarget;\r\n    new(): ModelEventTarget;\r\n}\r\n\r\ninterface ModelEventTarget {\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    dispatchEvent(event: ModelEvent): void;\r\n    receiveEvent(event: ModelEvent): void;\r\n}\r\n\r\nclass ModelEventTargetBase implements ModelEventTarget {\r\n    #callbacks: Map<string, ((event: ModelEvent) => void)[]>;\r\n\r\n    constructor() {\r\n        this.#callbacks = new Map();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        const {type} = event;\r\n        const callbacks = this.#callbacks.get(type);\r\n        ModelEventTargetAccessor.setCurrentTarget(event, this);\r\n        if (callbacks) {\r\n            callbacks.forEach((callback_i) => {\r\n                callback_i(event);\r\n            });\r\n        }\r\n    }\r\n\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            callbacks.push(callback);\r\n        }\r\n        else {\r\n            this.#callbacks.set(type, [callback]);\r\n        }\r\n    }\r\n\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            const callbackIndex = callbacks.findIndex(\r\n                callback_i => callback_i == callback\r\n            );\r\n            if (callbackIndex > -1) {\r\n                callbacks.splice(callbackIndex, 1);\r\n            }\r\n            if (callbacks.length == 0) {\r\n                this.#callbacks.delete(type);\r\n            }\r\n        }\r\n    }\r\n\r\n    dispatchEvent(event: ModelEvent): void {\r\n        ModelEventTargetAccessor.setTarget(event, this);\r\n        this.receiveEvent(event);\r\n    }\r\n}\r\n\r\nvar ModelEventTarget: ModelEventTargetConstructor = ModelEventTargetBase;\r\n\r\ninterface ModelNodeConstructor {\r\n    prototype: ModelNode;\r\n    new(): ModelNode;\r\n}\r\n\r\ninterface ModelNode extends ModelEventTarget {\r\n    readonly parentNode: ModelNode | null;\r\n    setParent(parentNode: ModelNode | null): void;\r\n    getRecords(): ModelChangeRecord[];\r\n    beginChanges(): void;\r\n    endChanges(): void;\r\n}\r\n\r\ninterface ModelNodeRecordsAccessor {\r\n    triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void;\r\n    handleRecord(node: ModelNode, record: ModelChangeRecord): void;\r\n}\r\n\r\nclass ModelNodeBase extends ModelEventTargetBase implements ModelNode {\r\n    #parentNode: ModelNode | null;\r\n    #records: ModelChangeRecord[];\r\n    #isRecording: boolean;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#parentNode = null;\r\n        this.#records = [];\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    get parentNode(): ModelNode | null {\r\n        return this.#parentNode;\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        if (parentNode !== null) {\r\n            let isCyclicReference = parentNode == this;\r\n            let {parentNode: ancestorNode} = parentNode;\r\n            while (!isCyclicReference && ancestorNode !== null) {\r\n                ({parentNode: ancestorNode} = ancestorNode);\r\n                isCyclicReference = ancestorNode == this;\r\n            }\r\n            if (!isCyclicReference) {\r\n                this.#parentNode = parentNode;\r\n            }\r\n            else {\r\n                throw new TypeError(\"Failed to set parent on ModelNode: circular reference detected in the hierarchy.\");\r\n            }\r\n        }\r\n        else {\r\n            this.#parentNode = null;\r\n        }\r\n    }\r\n    \r\n    beginChanges(): void {\r\n        this.#isRecording = true;\r\n    }\r\n\r\n    endChanges(): void {\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        this.#records.splice(0);\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    getRecords(): ModelChangeRecord[] {\r\n        return this.#records.slice();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        super.receiveEvent(event);\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            parentNode.receiveEvent(event);\r\n        }\r\n    }\r\n\r\n    #triggerChange(property: string, oldValue: any, newValue: any): void {\r\n        const records = this.#records;\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.PROPERTY_CHANGE,\r\n            propertyName: property,\r\n            oldValue, newValue\r\n        });\r\n        records.push(record);\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        records.splice(0);\r\n    }\r\n\r\n    #handleRecord(record: ModelChangeRecord): void {\r\n        this.#records.push(record);\r\n        if (!this.#isRecording) {\r\n            this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n            this.#records.splice(0);\r\n        }\r\n    }\r\n\r\n    static ModelNodeRecordsAccessor? = new class ModelNodeRecordsAccessor {\r\n        triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#triggerChange(property, oldValue, newValue);\r\n            }\r\n        }\r\n\r\n        handleRecord(node: ModelNode, record: ModelChangeRecord): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#handleRecord(record);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelNodeRecordsAccessor: ModelNodeRecordsAccessor = ModelNodeBase.ModelNodeRecordsAccessor!;\r\ndelete ModelNodeBase.ModelNodeRecordsAccessor;\r\n\r\nvar ModelNode: ModelNodeConstructor = ModelNodeBase;\r\n\r\ninterface ModelPropertyDecorator {\r\n    (\r\n        init?: {\r\n            type: typeof String | typeof Number | typeof Boolean | typeof Date | typeof Object\r\n        }\r\n    ): <Model extends ModelObject>(target: Model, property: string) => void;\r\n}\r\n\r\nconst ModelProperty: ModelPropertyDecorator = function(\r\n    init?: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Date | typeof Object\r\n    }\r\n) {\r\n    return (\r\n        target: ModelObject, property: string\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        /*const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n        if (Array.isArray(observedAttributes)) {\r\n            observedAttributes.push(property);\r\n        }\r\n        else {\r\n            Object.defineProperty(\r\n                constructor, \"observedAttributes\", {\r\n                    value: [property],\r\n                    writable: false\r\n                }\r\n            );\r\n        }*/\r\n        const setter = function(this: ModelObject, value: any) {\r\n            const oldValue = ModelObjectPropertiesAccessor.getProperty(this, property);\r\n            ModelObjectPropertiesAccessor.setProperty(this, property, value);\r\n            if (value !== oldValue) {\r\n                ModelNodeRecordsAccessor.triggerChange(this, property, oldValue, value);\r\n            }\r\n            return true;\r\n        };\r\n        const getter = function(this: ModelObject) {\r\n            return ModelObjectPropertiesAccessor.getProperty(this, property);\r\n        };\r\n        Object.defineProperty(prototype, property, {\r\n            set: setter,\r\n            get: getter,\r\n            enumerable: true\r\n        });\r\n    }\r\n}\r\n\r\ninterface ModelObjectConstructor {\r\n    prototype: ModelObject;\r\n    new(): ModelObject;\r\n}\r\n\r\ninterface ModelObject extends ModelNode {}\r\n\r\ninterface ModelObjectPropertiesAccessor {\r\n    setProperty(node: ModelNode, property: string, value: any): void;\r\n    getProperty(node: ModelNode, property: string,): any;\r\n}\r\n\r\nclass ModelObjectBase extends ModelNodeBase implements ModelObject {\r\n    #properties: Map<string, any>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#properties = new Map();\r\n    }\r\n\r\n    static ModelObjectPropertiesAccessor? = new class ModelPropertiesAccessor {\r\n        setProperty(node: ModelObject, property: string, value: any): void {\r\n            if (node instanceof ModelObjectBase) {\r\n                node.#properties.set(property, value);\r\n            }\r\n        }\r\n\r\n        getProperty(node: ModelObject, property: string): any {\r\n            if (node instanceof ModelObjectBase) {\r\n                return node.#properties.get(property);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelObjectPropertiesAccessor: ModelObjectPropertiesAccessor = ModelObjectBase.ModelObjectPropertiesAccessor!;\r\ndelete ModelObjectBase.ModelObjectPropertiesAccessor;\r\n\r\nvar ModelObject: ModelObjectConstructor = ModelObjectBase;\r\n\r\ninterface ModelListConstructor {\r\n    prototype: ModelList;\r\n    new<Model extends ModelNode>(): ModelList<Model>;\r\n    new<Model extends ModelNode>(items: Model[]): ModelList<Model>;\r\n}\r\n\r\ninterface ModelList<Model extends ModelNode = ModelNode> extends ModelNode {\r\n    readonly parentNode: ModelNode | null;\r\n    readonly length: number;\r\n    index(items: Model): number;\r\n    index(items: Model, fromIndex: number): number;\r\n    get(index: number): Model | null;\r\n    values(): IterableIterator<Model>;\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void;\r\n    insert(index: number, ...items: Model[]): void;\r\n    prepend(...items: Model[]): void;\r\n    append(...items: Model[]): void;\r\n    remove(item: Model): void;\r\n    clear(): void;\r\n}\r\n\r\nclass ModelListBase<Model extends ModelNode = ModelNode> extends ModelNodeBase implements ModelList<Model> {\r\n    #items: Model[];\r\n\r\n    constructor()\r\n    constructor(items: Model[])\r\n    constructor(items?: Model[]) {\r\n        super();\r\n        this.#items = items?.slice() ?? [];\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        super.setParent(parentNode);\r\n        this.#items.forEach((item_i) => {\r\n            item_i.setParent(parentNode);\r\n        });\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    get(index: number): Model | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    index(item: Model, fromIndex?: number): number {\r\n        return this.#items.indexOf(item, fromIndex)\r\n    }\r\n\r\n    values(): IterableIterator<Model> {\r\n        return this.#items.values();\r\n    }\r\n\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void {\r\n        const items = this.#items;\r\n        const indexedItems = items.map(\r\n            (item_i, i) => {\r\n                return {\r\n                    item: item_i,\r\n                    index: i\r\n                };\r\n            }\r\n        );\r\n        indexedItems.sort(\r\n            (indexedItem_a, indexedItem_b) => {\r\n                return compareFunction(\r\n                    indexedItem_a.item, indexedItem_b.item\r\n                )\r\n            }\r\n        );\r\n        this.#items = indexedItems.map(indexedItem_i => indexedItem_i.item);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_SORT,\r\n            sortedIndices: indexedItems.map(indexedItem_i => indexedItem_i.index)\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    prepend(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.splice(0, 0, ...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: 0,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    append(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.push(...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: length,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    insert(index: number, ...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const positiveIndex = Math.abs(index);\r\n        if (positiveIndex <= length) {\r\n            if (index >= 0) {\r\n                const {parentNode} = this;\r\n                items.forEach(item_i => {\r\n                    item_i.setParent(parentNode);\r\n                });\r\n                if (index < length) {\r\n                    _items.splice(index, 0, ...items);\r\n                }\r\n                else {\r\n                    _items.push(...items);\r\n                }\r\n            }\r\n            else if (index < 0) {\r\n                index = length - index;\r\n                const {parentNode} = this;\r\n                if (parentNode) {\r\n                    items.forEach(item_i => {\r\n                        item_i.setParent(parentNode);\r\n                    });\r\n                }\r\n                _items.splice(index, 0, ...items);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_INSERT,\r\n                insertedIndex: index,\r\n                insertedItems: items.slice()\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    remove(item: Model): void {\r\n        const _items = this.#items;\r\n        const index = _items.indexOf(item);\r\n        if (index > -1) {\r\n            const item = _items.splice(index, 1)[0];\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                item.setParent(null);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: index,\r\n                removedItems: [item]\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    clear(): void {\r\n        const items = this.#items;\r\n        const {length} = items;\r\n        if (length > 0) {\r\n            const removedItems = items.splice(0);\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                removedItems.forEach((removedItem_i) => {\r\n                    removedItem_i.setParent(null);\r\n                });\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: 0,\r\n                removedItems: removedItems\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n};\r\n\r\nvar ModelList: ModelListConstructor = ModelListBase!;\r\n\r\ninterface ModelChangeObserverConstructor {\r\n    prototype: ModelChangeObserver;\r\n    new(callback: (records: ModelChangeRecord[]) => void): ModelChangeObserver;\r\n}\r\n\r\ninterface ModelChangeObserver {\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void;\r\n    unobserve(node: ModelNode): void;\r\n    disconnect(): void;\r\n}\r\n\r\ntype ModelChangeObserverOptions = {\r\n    properties?: boolean;\r\n    propertiesFilter?: string[];\r\n    childList?: boolean;\r\n    subtree?: boolean;\r\n}\r\n\r\nclass ModelChangeObserverBase implements ModelChangeObserver {\r\n    #callback: (records: ModelChangeRecord[]) => void;\r\n    #records: ModelChangeRecord[];\r\n    #disconnected: boolean;\r\n\r\n    #references: WeakMap<ModelNode, {\r\n        listener: (event: ModelEvent) => void,\r\n        options: ModelChangeObserverOptions\r\n    }>;\r\n\r\n    constructor(callback: (records: ModelChangeRecord[]) => void) {\r\n        this.#callback = callback;\r\n        this.#records = [];\r\n        this.#disconnected = false;\r\n        this.#references = new WeakMap();\r\n    }\r\n\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void {\r\n        this.#disconnected = false;\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (!reference) {\r\n            const listener = this.#handleModelEvent.bind(this);\r\n            node.addEventListener(\"modelchange\", listener);\r\n            reference = {listener, options};\r\n            references.set(node, reference);\r\n        }\r\n        else {\r\n            references.set(node, reference);\r\n        }\r\n    }\r\n\r\n    unobserve(node: ModelNode): void {\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (reference) {\r\n            const {listener} = reference;\r\n            node.removeEventListener(\"modelchange\", listener);\r\n        }\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#records.splice(0);\r\n        this.#disconnected = true;\r\n    }\r\n\r\n    #trigger(): void {\r\n        const records = this.#records.splice(0);\r\n        if (records.length > 0) {\r\n            this.#callback(records);\r\n        }\r\n    }\r\n\r\n    #handleModelEvent(event: ModelEvent): void {\r\n        if (!this.#disconnected) {\r\n            const {target, currentTarget} = event;\r\n            const reference = this.#references.get(<ModelNode>currentTarget);\r\n            if (reference) {\r\n                const {options} = reference;\r\n                const {properties, propertiesFilter, childList, subtree} = options;\r\n                if (subtree) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n                else if (target == currentTarget) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelChangeObserver: ModelChangeObserverConstructor = ModelChangeObserverBase;","export { getPropertyFromPath };\r\nexport { setPropertyFromPath };\r\nexport { snakeToCamel };\r\nexport { camelToSnake };\r\nexport { trainToCamel };\r\nexport { camelToTrain };\r\n\r\nfunction getPropertyFromPath(src: object, path: string): any {\r\n  const props = path.split(\".\");\r\n  let obj: {[key: string]: any} | undefined  = src;\r\n  props.forEach((prop) => {\r\n    if (prop.includes(\"[\")) {\r\n      const index = parseInt(prop.substring(prop.indexOf(\"[\") + 1, prop.indexOf(\"]\")));\r\n      if (Number.isNaN(index)) {\r\n        console.error(`Wrong indexed path: ${prop}`);\r\n      }\r\n      prop = prop.substring(0, prop.indexOf(\"[\"));\r\n      if (typeof obj == \"object\" && prop in obj && Array.isArray(obj[prop])) {\r\n        obj = obj[prop][index];\r\n      }\r\n    }\r\n    else if (typeof obj == \"object\" && prop in obj) {\r\n      obj = obj[prop];\r\n    }\r\n    else {\r\n      obj = undefined;\r\n    }\r\n  });\r\n  return obj;\r\n}\r\n\r\nfunction setPropertyFromPath(src: object, path: string, value: any): object {\r\n  const props = path.split(\".\");\r\n  let obj: {[key: string]: any} = src;\r\n  if (src == null) {\r\n    console.error(\"Source data can't be null\");\r\n  }\r\n  props.forEach((prop, idx) => {\r\n    if (prop.includes(\"[\")) {\r\n      const index = parseInt(prop.substring(prop.indexOf(\"[\") + 1, prop.indexOf(\"]\")));\r\n      if (Number.isNaN(index)) {\r\n        console.error(`Wrong indexed path: ${prop}`);\r\n      }\r\n      prop = prop.substring(0, prop.indexOf(\"[\"));\r\n      if (!Array.isArray(obj[prop])) {\r\n        obj[prop] = [];\r\n      }\r\n      if (idx == props.length - 1) {\r\n        obj[prop][index] = value;\r\n      }\r\n      else {\r\n        if (typeof obj[prop][index] !== \"object\") {\r\n          obj[prop][index] = {}\r\n        }\r\n        obj = obj[prop][index];\r\n      }\r\n    }\r\n    else {\r\n      if (idx == props.length - 1) {\r\n        obj[prop] = value;\r\n      }\r\n      else {\r\n        if (typeof obj[prop] !== \"object\") {\r\n          obj[prop] = {}\r\n        }\r\n        obj = obj[prop];\r\n      }\r\n    }\r\n  });\r\n  return src;\r\n}\r\n\r\nfunction snakeToCamel(str: string) {\r\n  return str.split('_').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToSnake(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '_').toLowerCase();\r\n}\r\n\r\nfunction trainToCamel(str: string) {\r\n  return str.split('-').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToTrain(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '-').toLowerCase();\r\n}","import { ModelList, ModelNode, ModelChangeRecord, ModelChangeObserver, ModelChangeObserverOptions } from \"../models/Model\";\r\nimport { camelToTrain } from \"./Snippets\";\r\n\r\nexport { subtreeNodes };\r\nexport { ancestorNodes };\r\nexport { CustomElement };\r\nexport { ReactiveChildElements };\r\nexport { QueryProperty };\r\nexport { QueryAllProperty };\r\nexport { AttributeProperty };\r\nexport { reactiveElement };\r\nexport { reactiveChildElements };\r\nexport { element };\r\nexport { fragment };\r\nexport { textNode };\r\nexport { AttributeMutationMixin };\r\nexport { AttributeType };\r\nexport { areAttributesMatching };\r\nexport { AttributeMutationMixinBase };\r\nexport { trimMultilineIndent };\r\nexport { Stylesheet };\r\n\r\ninterface AttributePropertyDecorator {\r\n    (\r\n        init: {\r\n            type: typeof String;\r\n            observed?: boolean;\r\n            defaultValue?: string | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Number;\r\n            observed?: boolean;\r\n            defaultValue?: number | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Boolean;\r\n            observed?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Object;\r\n            observed?: boolean;\r\n            defaultValue?: any | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n}\r\n\r\nconst AttributeProperty: AttributePropertyDecorator = function(\r\n    init: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Object;\r\n        observed?: boolean;\r\n        defaultValue?: string | number | any | null;\r\n    }\r\n) {\r\n    return <E extends HTMLElement>(\r\n        target: E, property: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(property);\r\n        const attributeName = camelToTrain(propertyName);\r\n        const defaultValue = init.defaultValue ?? null;\r\n        const observed = init.observed ?? false;\r\n        if (observed) {\r\n            const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n            if (Array.isArray(observedAttributes)) {\r\n                observedAttributes.push(attributeName);\r\n            }\r\n            else {\r\n                Object.defineProperty(\r\n                    constructor, \"observedAttributes\", {\r\n                        value: [attributeName],\r\n                        writable: false\r\n                    }\r\n                );\r\n            }\r\n        }\r\n        const {type} = init;\r\n        switch (type) {\r\n            case Boolean: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        return this.hasAttribute(attributeName);\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value) {\r\n                            this.setAttribute(attributeName, \"\");\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Object: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? JSON.parse(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, JSON.stringify(value));\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Number: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? parseFloat(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case String:\r\n            default: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? val : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n    \r\nfunction Stylesheet(text: string): CSSStyleSheet {\r\n    const stylesheet = new CSSStyleSheet();\r\n    (stylesheet as any).replaceSync(text);\r\n    return stylesheet;\r\n}\r\n\r\nfunction trimMultilineIndent(text: string): string {\r\n    const newlineIndex = text.indexOf(\"\\n\");\r\n    text = text.substring(newlineIndex + 1);\r\n    const indentMatch = text.match(/^[\\s]*/);\r\n    if (indentMatch) {\r\n        const indent = text.substring(0, indentMatch[0].length);\r\n        text = text.replaceAll(indent, \"\").trimEnd();\r\n    }\r\n    return text;\r\n}\r\n\r\ninterface CustomElementDecorator {\r\n    (init: {\r\n        name: string;\r\n        options?: ElementDefinitionOptions\r\n    }): <C extends CustomElementConstructor>(elementCtor: C) => C;\r\n}\r\n\r\nconst CustomElement: CustomElementDecorator = function(init: {\r\n    name: string;\r\n    options?: ElementDefinitionOptions\r\n}) {\r\n    return <C extends CustomElementConstructor>(\r\n        elementCtor: C\r\n    ) => {\r\n        const {name, options} = init;\r\n        if (!customElements.get(name)) {\r\n            customElements.define(\r\n                name,\r\n                elementCtor,\r\n                options\r\n            );\r\n        }\r\n        return elementCtor;\r\n    }\r\n}\r\n\r\nfunction *subtreeNodes(node: Node): Generator<Node> {\r\n    yield node;\r\n    const childNodes = node.childNodes;\r\n    const childNodesCount = childNodes.length;\r\n    let childIndex = 0;\r\n    while (childIndex < childNodesCount) {\r\n        const child = childNodes.item(childIndex);\r\n        if (child !== null) {\r\n            yield * subtreeNodes(child);\r\n        }\r\n        childIndex++;\r\n    }\r\n}\r\n\r\nfunction *ancestorNodes(node: Node): Generator<Node> {\r\n    const {parentNode} = node;\r\n    if (parentNode) {\r\n        yield parentNode;\r\n        yield *ancestorNodes(parentNode);\r\n    }\r\n}\r\n\r\ninterface QueryPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryProperty: QueryPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(propertyKey);\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return this.shadowRoot!.querySelector(selector);\r\n        } : function(this: HTMLElement) {\r\n            return this.querySelector(selector);\r\n        }\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\ninterface QueryAllPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryAllProperty: QueryAllPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(propertyKey);\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return Array.from(this.shadowRoot!.querySelectorAll(selector));\r\n        } : function(this: HTMLElement) {\r\n            return Array.from(this.querySelectorAll(selector));\r\n        };\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\nfunction fragment(...nodes: (Node | string)[]): DocumentFragment {\r\n    const fragment = document.createDocumentFragment();\r\n    fragment.append(...nodes);\r\n    return fragment;\r\n}\r\n\r\nfunction textNode(text: string): Node {\r\n    return document.createTextNode(text);\r\n}\r\n\r\ninterface HTMLElementInit {\r\n    options?: ElementCreationOptions,\r\n    attributes?: {\r\n        [name: string]: number | string | boolean | undefined\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    children?: Node | string | (Node | string)[] | NodeList | ReactiveChildElements,\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction element<E extends HTMLElementTagNameMap[K], K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): E;\r\nfunction element(\r\n    tagName: string, init?: HTMLElementInit): HTMLElement;\r\nfunction element<K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): HTMLElementTagNameMap[K] {\r\n    if (init) {\r\n        const {options, attributes, dataset, children, listeners} = init;\r\n        const element = document.createElement(tagName, options);\r\n        if (attributes) {\r\n            Object.entries(attributes).forEach(([attributeName, attributeValue]) => {\r\n                if (attributeValue !== undefined) {\r\n                    if (typeof attributeValue === \"boolean\") {\r\n                        element.toggleAttribute(camelToTrain(attributeName), attributeValue);\r\n                    }\r\n                    else {\r\n                        element.setAttribute(camelToTrain(attributeName), String(attributeValue));\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        if (dataset) {\r\n            const {dataset: elementDataset} = element;\r\n            Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                elementDataset[datasetEntry_i] = String(dataset[datasetEntry_i]);\r\n            });\r\n        }\r\n        if (children) {\r\n            if (typeof children === \"function\") {\r\n                element.append(...children(element));\r\n            }\r\n            else if (typeof children === \"object\" && \"length\" in children) {\r\n                element.append(...Array.from(children));\r\n            }\r\n            else {\r\n                element.append(children);\r\n            }\r\n        }\r\n        if (listeners) {\r\n            Object.entries(listeners).forEach(([name_i, listener_i]) => {\r\n                if (Array.isArray(listener_i)) {\r\n                    element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                }\r\n                else {\r\n                    element.addEventListener(name_i, listener_i);\r\n                }\r\n            });\r\n        }\r\n        return element;\r\n    }\r\n    return document.createElement(tagName);\r\n}\r\n\r\nconst reactiveElementsMap = new WeakMap<ModelNode, {\r\n    observerOptions: ModelChangeObserverOptions,\r\n    reactiveElementsArray: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }[]\r\n}>();\r\n\r\nconst reactiveElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    model: ModelNode,\r\n    reactiveElement: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }\r\n}) => {\r\n    const {model, reactiveElement} = heldValue;\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    if (reactiveElementsMapEntry !== undefined) {\r\n        const {reactiveElementsArray} = reactiveElementsMapEntry;\r\n        reactiveElementsArray.splice(reactiveElementsArray.indexOf(reactiveElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveElementsPropertyObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    records.forEach((record_i) => {\r\n        const {target, propertyName, oldValue, newValue} = record_i;\r\n        const {reactiveElementsArray} = reactiveElementsMap.get(target)!;\r\n        reactiveElementsArray.forEach(reactiveElement_i => {\r\n            const {elementRef, react, properties} = reactiveElement_i;\r\n            const element = elementRef.deref();\r\n            if (element) {\r\n                if (properties.includes(propertyName!)) {\r\n                    react(element, propertyName!, oldValue, newValue);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveElement<M extends ModelNode, E extends Element, K extends string>(\r\n    model: M,\r\n    element: E,\r\n    properties: K[],\r\n    react: (object: E, property: K, oldValue: any, newValue: any) => void\r\n): E;\r\nfunction reactiveElement<M extends ModelNode, E extends Element>(\r\n    model: M,\r\n    element: E,\r\n    properties: string[],\r\n    react: (element: E, property: string, oldValue: any, newValue: any) => void\r\n): E {\r\n    const elementRef = new WeakRef(element);\r\n    const reactiveElement = {elementRef, react, properties};\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    reactiveElementsFinalizationRegistry.register(element, {model, reactiveElement});\r\n    if (!reactiveElementsMapEntry) {\r\n        const observerOptions = {\r\n            properties: true,\r\n            propertiesFilter: properties\r\n        };\r\n        const reactiveElementsArray = [reactiveElement];\r\n        reactiveElementsMap.set(model, {observerOptions, reactiveElementsArray});\r\n        reactiveElementsPropertyObserver.observe(model, observerOptions);\r\n    }\r\n    else {\r\n        const {reactiveElementsArray, observerOptions} = reactiveElementsMapEntry;\r\n        const {propertiesFilter} = observerOptions;\r\n        reactiveElementsArray.push(reactiveElement);\r\n        observerOptions.propertiesFilter = propertiesFilter ?\r\n            propertiesFilter.concat(properties.filter(\r\n                property_i => !propertiesFilter.includes(property_i)\r\n            )) : Array.from(new Set(properties));\r\n    }\r\n    properties.forEach((property_i) => {\r\n        if (property_i in model) {\r\n            const value = Reflect.get(model, property_i, model);\r\n            if (value !== undefined) {\r\n                react(element, <any>property_i, <any>undefined, value);\r\n            }\r\n        }\r\n    });\r\n    return element;\r\n}\r\n\r\ninterface ReactiveChildElements {\r\n    (parent: Node & ParentNode): (Node | string)[]\r\n}\r\n\r\nconst reactiveChildElementsMap = new WeakMap<ModelList, {\r\n    reactiveChildElementsArray: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }[]\r\n}>();\r\n\r\nconst reactiveChildElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    list: ModelList,\r\n    reactiveChildElement: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }\r\n}) => {\r\n    const {list, reactiveChildElement} = heldValue;\r\n    const reactiveChildrenElementsMapEntry = reactiveChildElementsMap.get(list);\r\n    if (reactiveChildrenElementsMapEntry) {\r\n        const {reactiveChildElementsArray} = reactiveChildrenElementsMapEntry;\r\n        reactiveChildElementsArray.splice(reactiveChildElementsArray.indexOf(reactiveChildElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveChildElementsObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    let range: null | Range = null;\r\n    Array.from(records.values()).forEach((record_i) => {\r\n        const {target} = record_i;\r\n        const list = <ModelList>target;\r\n        const {length: listLength} = list;\r\n        const {reactiveChildElementsArray} = reactiveChildElementsMap.get(list)!;\r\n        reactiveChildElementsArray.forEach((reactiveChildElements_i) => {\r\n            const {parentRef, mapping, placeholder} = reactiveChildElements_i;\r\n            const parent = parentRef.deref();\r\n            if (parent) {\r\n                const {firstChild, children} = parent;\r\n                const {length: childrenCount} = children;\r\n                if (placeholder && listLength > 0 && firstChild == placeholder) {\r\n                    parent.removeChild(placeholder);\r\n                }\r\n                const {changeType, LIST_INSERT, LIST_REMOVE, LIST_SORT} = record_i;\r\n                switch (changeType) {\r\n                    case LIST_INSERT: {\r\n                        const {insertedIndex, insertedItems} = record_i;\r\n                        const insertedItemsArray = Array.from(insertedItems.values()).map(mapping);\r\n                        const {length: childrenCount} = children;\r\n                        if (insertedIndex < childrenCount) {\r\n                            children[insertedIndex].before(...insertedItemsArray);\r\n                        }\r\n                        else {\r\n                            parent.append(...insertedItemsArray);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_REMOVE: {\r\n                        const {removedIndex, removedItems} = record_i;\r\n                        const {length: removedCount} = removedItems;\r\n                        range = range ?? document.createRange();\r\n                        const removeEndIndex = removedIndex + (removedCount - 1);\r\n                        if (removeEndIndex < childrenCount) {\r\n                            range.setStartBefore(children[removedIndex]);\r\n                            range.setEndAfter(children[removeEndIndex]);\r\n                            range.deleteContents();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_SORT: {\r\n                        const {sortedIndices} = record_i;\r\n                        const childrenArray = Array.from(children);\r\n                        parent.append(\r\n                            ...sortedIndices.filter(\r\n                                index_i => index_i < childrenCount\r\n                            ).map(\r\n                                index_i => childrenArray[index_i]\r\n                            )\r\n                        );\r\n                        break;\r\n                    }\r\n                }\r\n                if (listLength == 0 && placeholder) {\r\n                    parent.append(placeholder);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveChildElements<Model extends ModelNode>(\r\n    list: ModelList<Model>,\r\n    mapping: (item: Model) => Element,\r\n    placeholder?: Element\r\n): ReactiveChildElements {\r\n    return (parent: Node & ParentNode) => {\r\n        const parentRef = new WeakRef(parent);\r\n        const reactiveChildElementsMapEntry = reactiveChildElementsMap.get(list);\r\n        const reactiveChildElement = {parentRef, mapping, placeholder};\r\n        reactiveChildElementsFinalizationRegistry.register(parent, {list, reactiveChildElement});\r\n        if (!reactiveChildElementsMapEntry) {\r\n            const reactiveChildElementsArray = [reactiveChildElement];\r\n            reactiveChildElementsMap.set(list, {reactiveChildElementsArray});\r\n            reactiveChildElementsObserver.observe(list, {\r\n                childList: true\r\n            });\r\n        }\r\n        else {\r\n            const {reactiveChildElementsArray} = reactiveChildElementsMapEntry;\r\n            reactiveChildElementsArray.push(reactiveChildElement);\r\n        }\r\n        return list.length == 0 && placeholder ?\r\n            [placeholder] : Array.from(list.values()).map(mapping);\r\n    }\r\n}\r\n\r\ninterface AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n    attach(element: Element): void;\r\n    detach(element: Element): void;\r\n}\r\n\r\ntype AttributeType = \"string\" | \"boolean\" | \"list\";\r\n\r\nfunction areAttributesMatching(\r\n    referenceAttributeType: AttributeType,\r\n    referenceAttributeName: string, referenceAttributeValue: string,\r\n    attributeName: string, attributeValue: string | null): boolean {\r\n    if (referenceAttributeName == attributeName) {\r\n        switch (referenceAttributeType) {\r\n            case \"boolean\":\r\n                return referenceAttributeValue == \"\" && attributeValue == \"\";\r\n            case \"string\":\r\n                return referenceAttributeValue !== \"\" && (referenceAttributeValue == attributeValue);\r\n            case \"list\":\r\n                return (referenceAttributeValue !== \"\" && attributeValue !== null) && new RegExp(`${referenceAttributeValue}\\s*?`, \"g\").test(attributeValue );\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nclass AttributeMutationMixinBase implements AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n\r\n    constructor(attributeName: string, attributeType: AttributeType = \"boolean\", attributeValue: string = \"\") {\r\n        this.attributeName = attributeName;\r\n        this.attributeType = attributeType;\r\n        this.attributeValue = attributeValue;\r\n    }\r\n\r\n    attach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n\r\n    detach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n}","import { AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEActionElement };\r\nexport { ActionType };\r\n\r\ninterface HTMLEActionElementConstructor {\r\n    prototype: HTMLEActionElement;\r\n    new(): HTMLEActionElement;\r\n}\r\n\r\ninterface HTMLEActionElement extends HTMLElement {\r\n    name: string;\r\n    value: string;\r\n    checked: boolean;\r\n    type: string;\r\n    disabled: boolean;\r\n    hotkey: string;\r\n\r\n    trigger(): void;\r\n    enable(): void;\r\n    disable(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"trigger\": Event;\r\n    }\r\n}\r\n\r\ntype ActionType = \"button\" | \"checkbox\" | \"radio\" | \"select\";\r\n\r\nclass HTMLEActionElementBase extends HTMLElement implements HTMLEActionElement {\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    hotkey!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"button\"})\r\n    type!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    checked!: boolean;\r\n\r\n    trigger(): void {\r\n        if (!this.disabled) {\r\n            switch (this.type) {\r\n                case \"checkbox\":\r\n                    this.checked = !this.checked;\r\n                    break;\r\n                case \"radio\":\r\n                    this.checked = true;\r\n                    break;\r\n            }\r\n            this.dispatchEvent(new Event(\"trigger\", {\r\n                bubbles: true\r\n            }));\r\n        }\r\n    }\r\n\r\n    enable(): void {\r\n        this.disabled = false;\r\n    }\r\n\r\n    disable(): void {\r\n        this.disabled = true;\r\n    }\r\n}\r\n\r\nvar HTMLEActionElement: HTMLEActionElementConstructor = HTMLEActionElementBase;","export { Key };\r\nexport { KeyModifier };\r\nexport { HotKey };\r\nexport { MouseButton };\r\n\r\nenum Key {\r\n    A = \"a\",\r\n    B = \"b\",\r\n    C = \"c\",\r\n    D = \"d\",\r\n    E = \"e\",\r\n    F = \"f\",\r\n    G = \"g\",\r\n    H = \"h\",\r\n    I = \"i\",\r\n    J = \"j\",\r\n    K = \"k\",\r\n    L = \"l\",\r\n    M = \"m\",\r\n    O = \"o\",\r\n    P = \"p\",\r\n    Q = \"q\",\r\n    R = \"r\",\r\n    S = \"s\",\r\n    T = \"t\",\r\n    U = \"u\",\r\n    V = \"v\",\r\n    W = \"w\",\r\n    X = \"x\",\r\n    Y = \"y\",\r\n    Z = \"z\",\r\n    ENTER = \"Enter\",\r\n    BACKSPACE = \"Backspace\",\r\n    ARROW_DOWN = \"ArrowDown\",\r\n    ARROW_LEFT = \"ArrowLeft\",\r\n    ARROW_RIGHT = \"ArrowRight\",\r\n    ARROW_UP = \"ArrowUp\",\r\n    SHIFT = \"Shift\"\r\n}\r\n\r\nenum KeyModifier {\r\n    Alt = \"Alt\",\r\n    Control = \"Control\",\r\n    Shift = \"Shift\"\r\n}\r\n\r\nenum MouseButton {\r\n    LEFT = 1,\r\n    WHEEL = 2,\r\n    RIGHT = 3,\r\n    FORWARD = 4,\r\n    BACK = 5\r\n}\r\n\r\nclass HotKey {\r\n    readonly key: Key;\r\n    readonly mod1?: KeyModifier;\r\n    readonly mod2?: KeyModifier;\r\n\r\n    constructor(key: Key, mod1?: KeyModifier, mod2?: KeyModifier) {\r\n        this.key = key;\r\n        this.mod1 = mod1;\r\n        this.mod2 = mod2;\r\n    }\r\n\r\n    toString(): string {\r\n        return `${this.mod1 ? `${this.#modifierString(this.mod1)}+` : \"\"}${this.mod2 ? `${this.#modifierString(this.mod2)}+` : \"\"}${(this.key.length == 1) ? this.key.toUpperCase() : this.key}`;\r\n    }\r\n\r\n    test(event: KeyboardEvent): boolean {\r\n        return (!this.mod1 || this.#testModifier(this.mod1, event)) && (!this.mod2 || this.#testModifier(this.mod2, event)) && event.key == this.key;\r\n    }\r\n\r\n    #modifierString(mod: KeyModifier): string {\r\n        switch (mod) {\r\n            case KeyModifier.Control:\r\n                return \"Ctrl\";\r\n            default:\r\n                return mod;\r\n        }\r\n    }\r\n\r\n    #testModifier(mod: KeyModifier, event: KeyboardEvent): boolean {\r\n        switch (mod) {\r\n            case \"Alt\":\r\n                return event.altKey;\r\n            case \"Control\":\r\n                return event.ctrlKey;\r\n            case \"Shift\":\r\n                return event.shiftKey;\r\n            default:\r\n                return true;\r\n        }\r\n    }\r\n}","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEGridCellElement };\r\n\r\ninterface HTMLEGridCellElementConstructor {\r\n    prototype: HTMLEGridCellElement;\r\n    new(): HTMLEGridCellElement;\r\n}\r\n\r\ninterface HTMLEGridCellElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n    headers: string;\r\n    posinset: number;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridcell\": HTMLEGridCellElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridcell\"\r\n})\r\nclass HTMLEGridCellElementBase extends HTMLElement implements HTMLEGridCellElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    headers!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridCellElement: HTMLEGridCellElementConstructor = HTMLEGridCellElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\n\r\nexport { HTMLEGridRowGroupElement };\r\n\r\ninterface HTMLEGridRowGroupElementConstructor {\r\n    prototype: HTMLEGridRowGroupElement;\r\n    new(): HTMLEGridRowGroupElement;\r\n}\r\n\r\ninterface HTMLEGridRowGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrowgroup\": HTMLEGridRowGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrowgroup\"\r\n})\r\nclass HTMLEGridRowGroupElementBase extends HTMLElement implements HTMLEGridRowGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                            /*display: flex;\r\n                            flex-direction: column;*/\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowGroupElement: HTMLEGridRowGroupElementConstructor = HTMLEGridRowGroupElementBase;","import { CustomElement, AttributeProperty, QueryProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\n\r\nexport { HTMLEMenuItemElement };\r\nexport { EMenuItem };\r\n\r\ninterface HTMLEMenuItemElementConstructor {\r\n    prototype: HTMLEMenuItemElement;\r\n    new(): HTMLEMenuItemElement;\r\n}\r\n\r\ninterface HTMLEMenuItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    label: string | null;\r\n    value: string;\r\n    hotkey: string;\r\n    disabled: boolean;\r\n    checked: boolean;\r\n    expanded: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitem\": HTMLEMenuItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitem\"\r\n})\r\nclass HTMLEMenuItemElementBase extends HTMLElement implements HTMLEMenuItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string | null;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    hotkey!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    checked!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    expanded!: boolean;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"button\", observed: true})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n\r\n    attributeChangedCallback(attributeName: string, oldValue: string | null, newValue: string | null) {\r\n        const {internals} = this;\r\n        switch (attributeName) {\r\n            case \"type\": {\r\n                switch (newValue) {\r\n                    case \"checkbox\":\r\n                    case \"radio\": {\r\n                        internals.role = `menuitem${newValue}`;\r\n                        break;\r\n                    }\r\n                    default: {\r\n                        internals.role = \"menuitem\";\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"checked\": {\r\n                internals.ariaChecked = String(newValue !== null);\r\n                break;\r\n            }\r\n            case \"disabled\": {\r\n                internals.ariaDisabled = String(newValue !== null);\r\n                break;\r\n            }\r\n            case \"expanded\": {\r\n                internals.ariaExpanded = String(newValue !== null);\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                internals.ariaLabel = newValue;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"icon\"\r\n                }\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"label\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"arrow\"\r\n                }\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const internals = this.attachInternals();\r\n        this.internals = internals;\r\n        internals.role = \"menuitem\";\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n    }\r\n\r\n    @QueryProperty({selector: \":scope > e-menu[slot=menu]\"})\r\n    readonly menu!: HTMLEMenuElement | null;\r\n\r\n    toggle(force?: boolean): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                const expand = force ?? !expanded;\r\n                this.expanded = expand;\r\n                if (expand) {\r\n                    this.#positionMenu();\r\n                }\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n    }\r\n\r\n    expand(): void {\r\n        const {type} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (!this.expanded) {\r\n                    this.expanded = true;\r\n                    this.#positionMenu();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {type} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (this.expanded) {\r\n                    this.expanded = false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const {type} = this;\r\n            if (type == \"menu\") {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const closestMenu = this.closest(\"e-menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    const overflowX = itemRight + menuWidth - clientWidth;\r\n                    const overflowY = itemTop + menuHeight - clientHeight;\r\n                    menuStyle.setProperty(\"left\", `${\r\n                        overflowX > 0 ?\r\n                        itemLeft - menuWidth - closestMenuLeft :\r\n                        itemRight - closestMenuLeft\r\n                    }px`);\r\n                    const menuComputedStyle = window.getComputedStyle(menu);\r\n                    const {paddingTop, paddingBottom} = menuComputedStyle;\r\n                    const menuPaddingTop = parseFloat(paddingTop);\r\n                    const menuPaddingBottom = parseFloat(paddingBottom);\r\n                    menuStyle.setProperty(\"top\", `${\r\n                        overflowY > 0 ?\r\n                        itemBottom - menuHeight - closestMenuTop + menuPaddingBottom :\r\n                        itemTop - closestMenuTop - menuPaddingTop\r\n                    }px`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target == this) {\r\n            const {type} = this;\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.checked = !this.checked;\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.checked = true;\r\n                    break;\r\n                }\r\n                case \"menu\":\r\n                case \"submenu\": {\r\n                    this.toggle();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemElement: HTMLEMenuItemElementConstructor = HTMLEMenuItemElementBase;\r\n\r\ninterface EMenuItemConstructor {\r\n    prototype: HTMLEMenuItemElement;\r\n    new(init: {\r\n        name?: string;\r\n        label: string;\r\n        type?: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    button(init: {\r\n        name?: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    checkbox(init: {\r\n        name?: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    radio(init: {\r\n        name?: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    menu(init: {\r\n        name?: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    submenu(init: {\r\n        name?: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n}\r\n\r\nvar EMenuItem = <EMenuItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string;\r\n        label: string;\r\n        type?: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menu} = init;\r\n        if (menu) {\r\n            menu.slot = \"menu\";\r\n        }\r\n        return element(\"e-menuitem\", {\r\n            attributes: {\r\n                tabindex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type\r\n            },\r\n            children: menu ? [\r\n                label,\r\n                menu\r\n            ] : [\r\n                label\r\n            ],\r\n            listeners: {\r\n                trigger: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemElement.prototype,\r\n        button(init: {\r\n            name?: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name?: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name?: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menu(init: {\r\n            name?: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"menu\"\r\n            });\r\n        },\r\n        submenu(init: {\r\n            name?: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"submenu\"\r\n            });\r\n        }\r\n    }\r\n);","import { element, CustomElement, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuItemElement, EMenuItem } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuItemGroupElement };\r\nexport { EMenuItemGroup };\r\n\r\ninterface HTMLEMenuItemGroupElementConstructor {\r\n    prototype: HTMLEMenuItemGroupElement;\r\n    new(): HTMLEMenuItemGroupElement;\r\n}\r\n\r\ninterface HTMLEMenuItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    label: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitemgroup\": HTMLEMenuItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitemgroup\"\r\n})\r\nclass HTMLEMenuItemGroupElementBase extends HTMLElement implements HTMLEMenuItemGroupElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            flex-direction: column;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEMenuItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEMenuItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            //item_i.index = i;\r\n        });\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\":\r\n                const label = this.shadowRoot.querySelector(\"[part=label]\");\r\n                if (label) {\r\n                    label.textContent = newValue;\r\n                }\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemGroupElement: HTMLEMenuItemGroupElementConstructor = HTMLEMenuItemGroupElementBase;\r\n\r\ninterface EMenuItemGroupConstructor {\r\n    prototype: HTMLEMenuItemGroupElement;\r\n    new(init: {\r\n        name?: string;\r\n        items: HTMLEMenuItemElement[];\r\n    }): HTMLEMenuItemGroupElement;\r\n    radios(init: {name: string, items: {label: string, value: string}[]}): HTMLEMenuItemGroupElement;\r\n}\r\n\r\nvar EMenuItemGroup = <EMenuItemGroupConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string,\r\n        items: HTMLEMenuItemElement[]\r\n    }) {\r\n        const {name, items} = init;\r\n        return element(\"e-menuitemgroup\", {\r\n            attributes: {\r\n                name: name\r\n            },\r\n            children: items\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemGroupElement.prototype,\r\n        radios: (init: {\r\n            name: string,\r\n            items: {\r\n                label: string,\r\n                value: string\r\n            }[]\r\n        }) => {\r\n            const {name, items} = init;\r\n            return element(\"e-menuitemgroup\", {\r\n                attributes: {\r\n                    name: name\r\n                },\r\n                children: items.map(\r\n                    ({label, value}) => new EMenuItem({name, label, type: \"radio\", value})\r\n                )\r\n            });\r\n        }\r\n    }\r\n);","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuElement };\r\nexport { EMenu };\r\n\r\ninterface HTMLEMenuElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    items(): HTMLEMenuItemElement[];\r\n    name: string;\r\n    contextual: boolean;\r\n    positionContextual(x: number, y: number): void;\r\n}\r\n\r\ninterface HTMLEMenuElementConstructor {\r\n    prototype: HTMLEMenuElement;\r\n    new(): HTMLEMenuElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menu\": HTMLEMenuElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar toggleTimeouts: WeakMap<HTMLEMenuItemElement, {clear(): void;}>;\r\n\r\n@CustomElement({\r\n    name: \"e-menu\"\r\n})\r\nclass HTMLEMenuElementBase extends HTMLElement implements HTMLEMenuElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    items(): HTMLEMenuItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        ));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        const {activeIndex} = this;\r\n        return this.querySelector<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem:focus-within\"\r\n        ) ?? activeIndex > -1 ? this.items()[activeIndex] ?? null : null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    contextual!: boolean;\r\n\r\n    #walker: TreeWalker;\r\n    #activeIndex: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        toggleTimeouts = new WeakMap();\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        this.#activeIndex = -1;\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"mouseout\", this.#handleMouseOutEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    positionContextual(x: number, y: number): void {\r\n        const {style} = this;\r\n        const {width: menuWidth, height: menuHeight} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        const left = x + scrollX;\r\n        const top = y + scrollY;\r\n        const {clientWidth, clientHeight} = document.body;\r\n        const overflowX = left + menuWidth - clientWidth;\r\n        const overflowY = top + menuHeight - clientHeight;\r\n        style.setProperty(\"left\", `${overflowX > 0 ? left - menuWidth : left}px`);\r\n        style.setProperty(\"top\", `${overflowY > 0 ? top - menuHeight : top}px`);\r\n    }\r\n\r\n    #collapseSubmenus(): void {\r\n        this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem[expanded]\"\r\n        )\r\n        .forEach((item_i) => {\r\n            item_i.collapse();\r\n        });\r\n    }\r\n\r\n    #isClosestMenu(target: Element): boolean {\r\n        return target.closest(\":is(e-menu)\") == this;\r\n    }\r\n\r\n    #nearestItem(target: Element): HTMLEMenuItemElement | null {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextNode();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        return menu instanceof HTMLEMenuElementBase ?\r\n            menu.#firstItem() :\r\n            null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        if (item !== null) {\r\n            this.#activeIndex = this.items().indexOf(item);\r\n        }\r\n    }\r\n\r\n    async #setItemTimeout(item: HTMLEMenuItemElement, delay?: number): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => {\r\n                resolve(undefined);\r\n            }, delay ?? 0);\r\n            toggleTimeouts.set(item, {\r\n                clear: () => {\r\n                    clearTimeout(timeout);\r\n                    reject();\r\n                }\r\n            });\r\n        }).then(() => {\r\n            toggleTimeouts.delete(item);\r\n        });\r\n    }\r\n\r\n    #clearItemTimeout(item: HTMLEMenuItemElement): void {\r\n        const timeout = toggleTimeouts.get(item);\r\n        if (typeof timeout !== \"undefined\") {\r\n            toggleTimeouts.delete(item);\r\n            timeout.clear();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const {contextual} = this;\r\n            if (contextual) {\r\n                try {\r\n                    this.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const isClosestMenu = this.#isClosestMenu(target);\r\n                if (isClosestMenu) {\r\n                    const {type, name, value} = target;\r\n                    if (type == \"radio\") {\r\n                        this.querySelectorAll<HTMLEMenuItemElement>(\r\n                            `:is(:scope, :scope > e-menuitemgroup) > e-menuitem[type=radio][name=${name}]`\r\n                        )\r\n                        .forEach((radio_i) => {\r\n                            radio_i.checked = radio_i.value == value;\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem) {\r\n                this.#setActiveItem(nearestItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const {contextual} = this;\r\n            if (contextual) {\r\n                try {\r\n                    this.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const {activeItem} = this;\r\n                if (activeItem?.expanded) {\r\n                    activeItem.collapse();\r\n                }\r\n                this.#setActiveItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.#firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem() :\r\n                    this.#firstItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                firstItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                lastItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            activeItem.expand();\r\n                            if (activeItem.expanded) {\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            if (!activeItem.expanded) {\r\n                                activeItem.expand();\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                                event.stopPropagation();\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOutEvent(event: MouseEvent): void {\r\n        const {target, relatedTarget} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem !== null) {\r\n                if (nearestItem.type == \"submenu\" &&\r\n                    !nearestItem.expanded) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLEMenuElement\r\n                ) == this;\r\n                if (isTargetClosestMenu) {\r\n                    const {activeItem} = this;\r\n                    if (activeItem?.type == \"submenu\" &&\r\n                        activeItem.expanded) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, 400)\r\n                            .then(() => {\r\n                                activeItem.collapse();\r\n                            })\r\n                            .catch(() => undefined);\r\n                    }\r\n                    const {clientX, clientY} = event;\r\n                    const {left, right, top, bottom} = this.getBoundingClientRect();\r\n                    const intersectsWithMouse = !(\r\n                        left > clientX || right < clientX || top > clientY || bottom < clientY\r\n                    );\r\n                    const containsRelatedTarget = this.contains(<Node>relatedTarget);\r\n                    if (intersectsWithMouse && containsRelatedTarget) {\r\n                        if (relatedTarget instanceof HTMLEMenuElement && relatedTarget !== this) {\r\n                            relatedTarget.focus({preventScroll: true});\r\n                        }\r\n                        else {\r\n                            this.focus({preventScroll: true});\r\n                            this.#setActiveItem(null);\r\n                        }\r\n                    }\r\n                    if (!intersectsWithMouse) {\r\n                        this.focus({preventScroll: true});\r\n                        this.#setActiveItem(null);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem !== null) {\r\n                if (nearestItem.type == \"submenu\" && nearestItem.expanded) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLEMenuElement\r\n                ) == this;\r\n                if (isTargetClosestMenu) {\r\n                    const {activeItem} = this;\r\n                    if (activeItem?.type == \"submenu\" &&\r\n                        activeItem.expanded && \r\n                        !activeItem.contains(<Node>target)) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, 400)\r\n                            .then(() => {\r\n                                activeItem.collapse();\r\n                            })\r\n                            .catch(() => undefined);\r\n                    }\r\n                    this.#setActiveItem(nearestItem);\r\n                    nearestItem.focus({preventScroll: true});\r\n                    if (nearestItem.type == \"submenu\") {\r\n                        if (!nearestItem.expanded) {\r\n                            this.#clearItemTimeout(nearestItem);\r\n                            this.#setItemTimeout(nearestItem, 200)\r\n                                .then(() => {\r\n                                    const {activeItem} = this;\r\n                                    this.#collapseSubmenus();\r\n                                    if (activeItem) {\r\n                                        this.#clearItemTimeout(activeItem);\r\n                                        activeItem.expand();\r\n                                        activeItem.menu?.focus({preventScroll: true});\r\n                                    }\r\n                                })\r\n                                .catch(() => undefined);\r\n                        }\r\n                        else {\r\n                            nearestItem.menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuElement: HTMLEMenuElementConstructor = HTMLEMenuElementBase;\r\n\r\ninterface EMenuConstructor {\r\n    prototype: HTMLEMenuElement;\r\n    new(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }): HTMLEMenuElement;\r\n}\r\n\r\nvar EMenu = <EMenuConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }) {\r\n        const {name, children} = init;\r\n        return element(\"e-menu\", {\r\n            attributes: {\r\n                name: name,\r\n                tabindex: -1,\r\n            },\r\n            children: children\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuElement.prototype,\r\n    }\r\n);","import { AttributeProperty, CustomElement, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\n\r\nexport { HTMLEGridRowElement };\r\n\r\ninterface HTMLEGridRowElementConstructor {\r\n    prototype: HTMLEGridRowElement;\r\n    new(): HTMLEGridRowElement;\r\n}\r\n\r\ninterface HTMLEGridRowElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    active: boolean;\r\n    selected: boolean;\r\n    posinset: number;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrow\": HTMLEGridRowElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrow\"\r\n})\r\nclass HTMLEGridRowElementBase extends HTMLElement implements HTMLEGridRowElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    #menu: HTMLEMenuElement | null;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row;\r\n                        }\r\n\r\n                        :host([droptarget]) {\r\n                            background-color: gainsboro;\r\n                        }\r\n                        \r\n                        :host(:hover) {\r\n                            background-color: rgba(135, 206, 250, 0.2);\r\n                        }\r\n\r\n                        :host([active]) {\r\n                            outline: 1px solid rgb(135, 206, 250);\r\n                            outline-offset: -1px;\r\n                        }\r\n\r\n                        :host([selected]) {\r\n                            background-color: rgba(135, 206, 250, 0.4);\r\n                            outline: 1px solid rgb(135, 206, 250);\r\n                            outline-offset: -1px;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\"),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#menu = null;\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"menu\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#menu = element instanceof HTMLEMenuElement ? element : null;\r\n                break;\r\n            }\r\n            default: {\r\n                const assignedCells = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n                    .assignedElements()\r\n                    .filter(\r\n                        element_i => element_i instanceof HTMLEGridCellElement\r\n                    );\r\n                assignedCells.forEach((cell_i, i) => {\r\n                    cell_i.posinset = i;\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowElement: HTMLEGridRowElementConstructor = HTMLEGridRowElementBase;","import { HTMLEGridElement } from \"./Grid\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\n\r\nexport { HTMLEGridCellCollection };\r\n\r\ninterface HTMLEGridCellCollectionConstructor {\r\n    prototype: HTMLEGridCellCollection;\r\n    new(root: HTMLElement): HTMLEGridCellCollection;\r\n}\r\n\r\ninterface HTMLEGridCellCollection {\r\n    length: number;\r\n    item(index: number): HTMLEGridCellElement | null;\r\n    namedItem(name: string): HTMLEGridCellElement | null;\r\n    values(): IterableIterator<HTMLEGridCellElement>;\r\n}\r\n\r\nclass HTMLEGridCellCollectionBase implements HTMLEGridCellCollection {\r\n    #walker: TreeWalker;\r\n\r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridCellElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEGridCellElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEGridCellElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEGridCellElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEGridCellElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEGridCellElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEGridCellElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEGridCellElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEGridCellElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridCellCollection: HTMLEGridCellCollectionConstructor =  HTMLEGridCellCollectionBase;","import { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\n\r\nexport { HTMLEGridRowCollection };\r\n\r\ninterface HTMLEGridRowCollectionConstructor {\r\n    prototype: HTMLEGridRowCollection;\r\n    new(root: HTMLElement): HTMLEGridRowCollection;\r\n}\r\n\r\ninterface HTMLEGridRowCollection {\r\n    length: number;\r\n    item(index: number): HTMLEGridRowElement | null;\r\n    namedItem(name: string): HTMLEGridRowElement | null;\r\n    values(): IterableIterator<HTMLEGridRowElement>;\r\n}\r\n\r\nclass HTMLEGridRowCollectionBase implements HTMLEGridRowCollection {\r\n    #walker: TreeWalker;\r\n    \r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement || node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEGridRowElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEGridRowElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEGridRowElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEGridRowElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEGridRowElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEGridRowElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEGridRowElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEGridRowElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowCollection: HTMLEGridRowCollectionConstructor =  HTMLEGridRowCollectionBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\n\r\nexport { HTMLEGridBodyElement };\r\n\r\ninterface HTMLEGridBodyElementConstructor {\r\n    prototype: HTMLEGridBodyElement;\r\n    new(): HTMLEGridBodyElement;\r\n}\r\n\r\ninterface HTMLEGridBodyElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridbody\": HTMLEGridBodyElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridbody\"\r\n})\r\nclass HTMLEGridBodyElementBase extends HTMLElement implements HTMLEGridBodyElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridBodyElement: HTMLEGridBodyElementConstructor = HTMLEGridBodyElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridHeadElement } from \"./GridHead\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\n\r\nexport { HTMLEGridElement };\r\n\r\ninterface HTMLEGridElementConstructor {\r\n    prototype: HTMLEGridElement;\r\n    new(): HTMLEGridElement;\r\n}\r\n\r\ninterface HTMLEGridElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly body: HTMLEGridBodyElement | null;\r\n    readonly head: HTMLEGridHeadElement | null\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n    readonly activeCell: HTMLEGridCellElement | null;\r\n    readonly activeCellIndex: number;\r\n    readonly activeRow: HTMLEGridRowElement | null;\r\n    readonly activeRowIndex: number;\r\n    selectby: \"cell\" | \"row\";\r\n    name: string;\r\n    multiselectable: boolean;\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    clearSelection(): void;\r\n    selectedCells(): HTMLEGridCellElement[];\r\n    selectedRows(): HTMLEGridRowElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-grid\": HTMLEGridElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-grid\"\r\n})\r\nclass HTMLEGridElementBase extends HTMLElement implements HTMLEGridElement {\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    get activeCellIndex(): number {\r\n        return this.#activeCellIndex;\r\n    }\r\n\r\n    get activeCell(): HTMLEGridCellElement | null {\r\n        return this.cells.item(this.#activeCellIndex) ?? null;\r\n    }\r\n\r\n    get activeRowIndex(): number {\r\n        return this.#activeRowIndex;\r\n    }\r\n\r\n    get activeRow(): HTMLEGridRowElement | null {\r\n        return this.rows.item(this.#activeRowIndex) ?? null;\r\n    }\r\n\r\n    get body(): HTMLEGridBodyElement | null {\r\n        return this.querySelector<HTMLEGridBodyElement>(\":scope > e-gridbody\");\r\n    }\r\n\r\n    get head(): HTMLEGridHeadElement | null {\r\n        return this.querySelector<HTMLEGridHeadElement>(\":scope > e-gridhead\");\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"cell\"})\r\n    selectby!: \"cell\" | \"row\";\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    multiselectable!: boolean;\r\n\r\n    #activeCellIndex: number;\r\n    #activeRowIndex: number;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #cellsWalker: TreeWalker;\r\n    #rowsWalker: TreeWalker;\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#cellsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#cellsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#rowsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#rowsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeCellIndex = -1;\r\n        this.#activeRowIndex = -1;\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.#clearCellsSelection();\r\n        this.#clearRowsSelection();\r\n    }\r\n\r\n    selectedCells(): HTMLEGridCellElement[] {\r\n        return Array.from(this.querySelectorAll(\"e-gridcell[selected]\"));\r\n    }\r\n\r\n    selectedRows(): HTMLEGridRowElement[] {\r\n        return Array.from(this.querySelectorAll(\"e-gridrow[selected]\"));\r\n    }\r\n\r\n    #cellsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridCellElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement || node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #rowsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridRowElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement || node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getCellsRange(from: HTMLEGridCellElement, to: HTMLEGridCellElement): HTMLEGridCellElement[] {\r\n        const cells = Array.from(this.cells.values());\r\n        const fromIndex = cells.indexOf(from);\r\n        const toIndex = cells.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return cells.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #getRowsRange(from: HTMLEGridRowElement, to: HTMLEGridRowElement): HTMLEGridRowElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleRow = this.#nextRow(from);\r\n            while (nextVisibleRow && nextVisibleRow !== to) {\r\n                range.push(nextVisibleRow);\r\n                nextVisibleRow = this.#nextRow(nextVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleRow = this.#previousRow(from);\r\n            while (previousVisibleRow && previousVisibleRow !== to) {\r\n                range.push(previousVisibleRow);\r\n                previousVisibleRow = this.#previousRow(previousVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setCellsSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((selectedCell_i) => {\r\n            if (!cells.includes(selectedCell_i)) {\r\n                selectedCell_i.selected = false;\r\n            }\r\n        });\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setRowsSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((selectedRow_i) => {\r\n            if (!rows.includes(selectedRow_i)) {\r\n                selectedRow_i.selected = false;\r\n            }\r\n        });\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addCellsToSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addRowsToSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeCellsFromSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        cells.forEach((cell_i) => {\r\n            if (selectedCells.includes(cell_i)) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeRowsFromSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        rows.forEach((row_i) => {\r\n            if (selectedRows.includes(row_i)) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearCellsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((cell_i) => {\r\n            if (cell_i.selected) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearRowsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((row_i) => {\r\n            if (row_i.selected) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveCell(cell: HTMLEGridCellElement | null): void {\r\n        const {activeCell, cells} = this;\r\n        if (activeCell !== null && activeCell !== cell) {\r\n            activeCell.active = false;\r\n            activeCell.tabIndex = -1;\r\n        }\r\n        else if (cell !== null) {\r\n            const cellsWalker = this.#cellsWalker;\r\n            cellsWalker.currentNode = cell;\r\n            cell.active = true;\r\n            cell.tabIndex = 0;\r\n            const closestRow = this.#closestRow(cell);\r\n            if (closestRow) {\r\n                this.#setActiveRow(closestRow);\r\n            }\r\n            this.#activeCellIndex = Array.from(cells.values()).indexOf(cell);\r\n        }\r\n        else {\r\n            this.#activeCellIndex = -1;\r\n        }\r\n    }\r\n\r\n    #setActiveRow(row: HTMLEGridRowElement | null): void {\r\n        const {activeRow, rows} = this;\r\n        if (activeRow !== null && activeRow !== row) {\r\n            activeRow.active = false;\r\n            activeRow.tabIndex = -1;\r\n        }\r\n        else if (row !== null) {\r\n            const rowsWalker = this.#rowsWalker;\r\n            rowsWalker.currentNode = row;\r\n            row.active = true;\r\n            row.tabIndex = 0;\r\n            this.#activeRowIndex = Array.from(rows.values()).indexOf(row);\r\n        }\r\n        else {\r\n            this.#activeRowIndex = -1;\r\n        }\r\n    }\r\n\r\n    #firstCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.firstChild();\r\n    }\r\n\r\n    #lastCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.lastChild();\r\n    }\r\n\r\n    #previousCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.previousNode();\r\n    }\r\n\r\n    #nextCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.nextNode();\r\n    }\r\n\r\n    #closestRow(cell: HTMLEGridCellElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = cell;\r\n        return <HTMLEGridRowElement | null>rowsWalker.parentNode();\r\n    }\r\n\r\n    #firstRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.firstChild();\r\n    }\r\n\r\n    #lastRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.lastChild();\r\n    }\r\n\r\n    #previousRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.previousNode();\r\n    }\r\n\r\n    #nextRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.nextNode();\r\n    }\r\n\r\n    #topCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const {cells: closestRowCells} = closestRow;\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const previousRow = this.#previousRow(closestRow);\r\n            if (previousRow) {\r\n                const {cells: previousRowCells} = previousRow;\r\n                return previousRowCells.item(\r\n                    Math.min(cellIndex, previousRowCells.length)\r\n                );\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #bottomCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const {cells: closestRowCells} = closestRow;\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const nextRow = this.#nextRow(closestRow);\r\n            if (nextRow) {\r\n                const {cells: nextRowCells} = nextRow;\r\n                return nextRowCells.item(\r\n                    Math.min(cellIndex, nextRowCells.length)\r\n                );\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {ctrlKey, shiftKey} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const composedPath = event.composedPath();\r\n                const targetCell = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridCellElement\r\n                ) : null;\r\n                const selectedCells = this.selectedCells();\r\n                if (targetCell instanceof HTMLEGridCellElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetCell.selected ?\r\n                            this.#addCellsToSelection(targetCell) :\r\n                            this.#removeCellsFromSelection(targetCell);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedCell = selectedCells[selectedCells.length - 1];\r\n                        if (lastSelectedCell) {\r\n                            const range = this.#getCellsRange(\r\n                                lastSelectedCell,\r\n                                targetCell\r\n                            );\r\n                            if (range) {\r\n                                selectedCells.includes(targetCell) ?\r\n                                    this.#removeCellsFromSelection(...range) :\r\n                                    this.#addCellsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setCellsSelection(targetCell);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const selectedRows = this.selectedRows();\r\n                const composedPath = event.composedPath();\r\n                const targetRow = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridRowElement\r\n                ) : null;\r\n                if (targetRow instanceof HTMLEGridRowElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetRow.selected ?\r\n                            this.#addRowsToSelection(targetRow) :\r\n                            this.#removeRowsFromSelection(targetRow);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedRow = selectedRows[selectedRows.length - 1];\r\n                        if (lastSelectedRow) {\r\n                            const range = this.#getRowsRange(\r\n                                lastSelectedRow,\r\n                                targetRow\r\n                            );\r\n                            if (range) {\r\n                                selectedRows.includes(targetRow) ?\r\n                                    this.#removeRowsFromSelection(...range) :\r\n                                    this.#addRowsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setRowsSelection(targetRow);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {selectby, activeCell, activeRow} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    switch (selectby) {\r\n                        case \"cell\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const firstCell = firstRow ? this.#firstCell(firstRow) : null;\r\n                            const lastRow = this.#lastRow();\r\n                            const lastCell = lastRow ? this.#lastCell(lastRow) : null;\r\n                            if (firstCell && lastCell) {\r\n                                const range = this.#getCellsRange(firstCell, lastCell);\r\n                                if (range) {\r\n                                    this.#setCellsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"row\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const lastRow = this.#lastRow();\r\n                            if (firstRow && lastRow) {\r\n                                const range = this.#getRowsRange(firstRow, lastRow);\r\n                                if (range) {\r\n                                    this.#setRowsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const previousCell = this.#previousCell(activeCell);\r\n                        if (previousCell) {\r\n                            previousCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousCell.selected ?\r\n                                    this.#removeCellsFromSelection(previousCell) :\r\n                                    this.#addCellsToSelection(previousCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const nextCell = this.#nextCell(activeCell);\r\n                        if (nextCell) {\r\n                            nextCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextCell.selected ?\r\n                                    this.#removeCellsFromSelection(nextCell) :\r\n                                    this.#addCellsToSelection(nextCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const firstRow = activeRow ?? this.#firstRow();\r\n                        const topCell = activeCell ?\r\n                            this.#topCell(activeCell) :\r\n                            firstRow ?\r\n                            this.#firstCell(firstRow) :\r\n                            null;\r\n                        if (topCell) {\r\n                            topCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                topCell.selected ?\r\n                                    this.#removeCellsFromSelection(topCell) :\r\n                                    this.#addCellsToSelection(topCell);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const previousRow = activeRow ?\r\n                            this.#previousRow(activeRow) :\r\n                            this.#firstRow();\r\n                        if (previousRow) {\r\n                            previousRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousRow.selected ?\r\n                                    this.#removeRowsFromSelection(previousRow) :\r\n                                    this.#addRowsToSelection(previousRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const lastRow = activeRow ?? this.#lastRow();\r\n                        const bottomCell = activeCell ?\r\n                            this.#bottomCell(activeCell) :\r\n                            lastRow ?\r\n                            this.#lastCell(lastRow) :\r\n                            null;\r\n                            if (bottomCell) {\r\n                                bottomCell.focus({preventScroll: true});\r\n                                const {shiftKey} = event;\r\n                                if (shiftKey) {\r\n                                    bottomCell.selected ?\r\n                                        this.#removeCellsFromSelection(bottomCell) :\r\n                                        this.#addCellsToSelection(bottomCell);\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"row\": {\r\n                        const nextRow = activeRow ?\r\n                            this.#nextRow(activeRow) :\r\n                            this.#lastRow();\r\n                        if (nextRow) {\r\n                            nextRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextRow.selected ?\r\n                                    this.#removeRowsFromSelection(nextRow) :\r\n                                    this.#addRowsToSelection(nextRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const firstCell = this.#firstCell(activeRow);\r\n                            if (firstCell) {\r\n                                firstCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const firstRow = this.#firstRow();\r\n                        if (firstRow) {\r\n                            firstRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const lastCell = this.#lastCell(activeRow);\r\n                            if (lastCell) {\r\n                                lastCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const lastRow = this.#lastRow();\r\n                        if (lastRow) {\r\n                            lastRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeCell) {\r\n                            this.#setCellsSelection(activeCell);\r\n                            activeCell.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        if (activeRow) {\r\n                            this.#setRowsSelection(activeRow);\r\n                            activeRow.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        this.#clearCellsSelection();\r\n                        this.#setActiveCell(null);\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        this.#clearRowsSelection();\r\n                        this.#setActiveRow(null);\r\n                        break;\r\n                    }\r\n                }\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const {activeCell} = this;\r\n                if (activeCell && relatedTarget !== activeCell) {\r\n                    activeCell.focus();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const {activeRow} = this;\r\n                if (activeRow && relatedTarget !== activeRow) {\r\n                    activeRow.focus();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                if (target instanceof HTMLEGridCellElement) {\r\n                    this.#setActiveCell(target);\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                if (target instanceof HTMLEGridRowElement) {\r\n                    this.#setActiveRow(target);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedRows = <HTMLEGridRowElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridRowElement\r\n            );\r\n            assignedRows.forEach((row_i, i) => {\r\n                row_i.posinset = i;\r\n            });\r\n    }\r\n}\r\n\r\nvar HTMLEGridElement: HTMLEGridElementConstructor = HTMLEGridElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\n\r\nexport { HTMLEGridHeadElement };\r\n\r\ninterface HTMLEGridHeadElementConstructor {\r\n    prototype: HTMLEGridHeadElement;\r\n    new(): HTMLEGridHeadElement;\r\n}\r\n\r\ninterface HTMLEGridHeadElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridhead\": HTMLEGridHeadElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridhead\"\r\n})\r\nclass HTMLEGridHeadElementBase extends HTMLElement implements HTMLEGridHeadElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                        }\r\n                    `\r\n                    ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridHeadElement: HTMLEGridHeadElementConstructor = HTMLEGridHeadElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuBarElement };\r\n\r\ninterface HTMLEMenuBarElementConstructor {\r\n    prototype: HTMLEMenuBarElement;\r\n    new(): HTMLEMenuBarElement;\r\n}\r\n\r\ninterface HTMLEMenuBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    items(): HTMLEMenuItemElement[];\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    expanded: boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menubar\": HTMLEMenuBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menubar\"\r\n})\r\nclass HTMLEMenuBarElementBase extends HTMLElement implements HTMLEMenuBarElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    #activeIndex: number;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    items(): HTMLEMenuItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        ));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        const {activeIndex} = this;\r\n        return this.querySelector<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem:focus-within\"\r\n        ) ?? activeIndex > -1 ? this.items()[activeIndex] ?? null : null;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLEMenuItemElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        const {activeItem, expanded} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.collapse();\r\n        }\r\n        if (item !== null) {\r\n            if (expanded) {\r\n                item.expand();\r\n            }\r\n            this.#activeIndex = this.items().indexOf(item);\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    get #items(): HTMLEMenuItemElement[] {\r\n        return Array.from(\r\n            this.querySelectorAll(\":is(:scope, :scope > e-menuitemgroup) > e-menuitem\")\r\n        );\r\n    }\r\n\r\n    #isClosestMenu(target: Element): boolean {\r\n        return target.closest(\":is(e-menubar, e-menu)\") == this;\r\n    }\r\n\r\n    #nearestItem(target: Element): HTMLEMenuItemElement | null {\r\n        return this.#items.find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n    \r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof Element) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            this.#setActiveItem(nearestItem);\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, relatedTarget} = event;\r\n        if (target instanceof HTMLElement && !target.contains(<Element>relatedTarget)) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem) {\r\n                nearestItem.collapse();\r\n            }\r\n        }\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.expanded = false;\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {expanded, activeItem} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu && target !== activeItem && expanded) {\r\n                const {menu} = target;\r\n                if (menu) {\r\n                    target.expand();\r\n                    menu.focus({preventScroll: true});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {expanded, activeItem} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu) {\r\n                const isExpanded = !expanded;\r\n                this.expanded = isExpanded;\r\n                if (isExpanded) {\r\n                    if (activeItem && !activeItem.expanded) {\r\n                        activeItem.expand();\r\n                    }\r\n                    const {menu} = target;\r\n                    menu?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true})\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded} = this;\r\n        let {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.#firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem() : \r\n                    this.#lastItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    this.expanded = !expanded;\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.expanded = false;\r\n                    if (activeItem) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /*#handleTriggerEvent(): void {\r\n        const {activeItem} = this;\r\n        if (activeItem?.expanded) {\r\n            activeItem.collapse();\r\n        }\r\n        this.expanded = false;\r\n        this.focus({preventScroll: true});\r\n    }*/\r\n}\r\n\r\nvar HTMLEMenuBarElement: HTMLEMenuBarElementConstructor = HTMLEMenuBarElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuButtonElement };\r\nexport { EMenuButton };\r\n\r\ninterface HTMLEMenuButtonElementConstructor {\r\n    prototype: HTMLEMenuButtonElement;\r\n    new(): HTMLEMenuButtonElement;\r\n}\r\n\r\ninterface HTMLEMenuButtonElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    readonly firstItem: HTMLEMenuItemElement | null;\r\n    name: string;\r\n    disabled: boolean;\r\n    expanded: boolean;\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-menubutton\"\r\n})\r\nclass HTMLEMenuButtonElementBase extends HTMLElement implements HTMLEMenuButtonElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    #menu: HTMLEMenuElement | null;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#menu = null;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"icon\"\r\n                        }\r\n                    }),\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"label\"\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n\r\n\r\n    toggle(force?: boolean): void {\r\n        const expand = force ?? !this.expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n\r\n    expand(): void {\r\n        if (!this.expanded) {\r\n            this.expanded = true;\r\n            this.#positionMenu();\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        if (this.expanded) {\r\n            this.expanded = false;\r\n        }\r\n    }\r\n\r\n    get firstItem(): HTMLEMenuItemElement | null {\r\n        return this.querySelector<HTMLEMenuItemElement>(\r\n            \":scope > :is(e-menu, e-menu > e-menuitemgroup) > e-menuitem\"\r\n        );\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const overflowX = itemRight + menuWidth - clientWidth;\r\n            const overflowY = itemTop + menuHeight - clientHeight;\r\n            menuStyle.setProperty(\"left\", `${\r\n                overflowX > 0 ?\r\n                scrollX + itemRight - menuWidth :\r\n                scrollX + itemLeft\r\n            }px`);\r\n            menuStyle.setProperty(\"top\", `${\r\n                overflowY > 0 ?\r\n                scrollY + itemTop - menuHeight :\r\n                scrollY + itemBottom\r\n            }px`);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target == this) {\r\n            this.toggle();\r\n            const {expanded} = this;\r\n            if (expanded) {\r\n                this.menu?.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded} = this;\r\n        switch (key) {\r\n            case \"ArrowDown\":\r\n            case \"Enter\":\r\n                if (!expanded) {\r\n                    this.expand();\r\n                    this.firstItem?.focus({preventScroll: true});\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            case \"Escape\":\r\n                if (expanded) {\r\n                    this.collapse();\r\n                    this.focus({preventScroll: true});\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n        this.#menu = (element instanceof HTMLEMenuElement) ? element : null;\r\n    }\r\n\r\n    #handleTriggerEvent(): void {\r\n        this.collapse();\r\n        this.focus({preventScroll: true});\r\n    }\r\n}\r\n\r\nvar HTMLEMenuButtonElement: HTMLEMenuButtonElementConstructor = HTMLEMenuButtonElementBase;\r\n\r\ninterface EMenuButtonConstructor {\r\n    prototype: HTMLEMenuButtonElement;\r\n    new(init: {\r\n        menu: HTMLEMenuElement\r\n    }): HTMLEMenuButtonElement;\r\n}\r\n\r\nvar EMenuButton = <EMenuButtonConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        menu: HTMLEMenuElement\r\n    }) {\r\n        const {menu} = init;\r\n        menu.slot = \"menu\";\r\n        return element(\"e-menubutton\", {\r\n            attributes: {\r\n                tabindex: -1\r\n            },\r\n            children: [menu]\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuButtonElement.prototype,\r\n    }\r\n);","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionElement };\r\n\r\ninterface HTMLEOptionElementConstructor {\r\n    prototype: HTMLEOptionElement;\r\n    new(): HTMLEOptionElement;\r\n}\r\n\r\ninterface HTMLEOptionElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    active: boolean;\r\n    value: string;\r\n    label: string;\r\n    description: string;\r\n    disabled: boolean;\r\n    selected: boolean;\r\n    default: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-option\": HTMLEOptionElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-option\"\r\n})\r\nclass HTMLEOptionElementBase extends HTMLElement implements HTMLEOptionElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n    \r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n        \r\n    @AttributeProperty({type: String})\r\n    description!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    default!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            user-select: none;\r\n                            white-space: nowrap;\r\n                            padding: 2px 12px;\r\n                        }\r\n                        \r\n                        :host([active]) {\r\n                            color: black;\r\n                            background-color: lightgray;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            color: lightgray;\r\n                        }\r\n\r\n                        :host::before {\r\n                            display: flex;\r\n                            content: \"\";\r\n                            width: 18px;\r\n                            height: 18px;\r\n                            margin-right: 6px;\r\n\r\n                            mask-size: 18px 18px;\r\n                            -webkit-mask-size: 18px 18px;\r\n                            background-color: var(--icon-color, none);\r\n                            -webkit-mask-image: var(--icon-image, none);\r\n                            mask-image: var(--icon-image, none);\r\n                        }\r\n\r\n                        [part=\"label\"] {\r\n                            flex: auto;\r\n                            text-align: left;\r\n                        }\r\n\r\n                        :host([default])::after {\r\n                            display: inline-block;\r\n                            content: \"(default)\";\r\n                            margin-left: 24px;\r\n                            text-align: right;\r\n                        }\r\n\r\n                        [part=\"content\"] {\r\n                            flex: auto;\r\n                            display: flex;\r\n                            overflow: hidden;\r\n                            pointer-events: none;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"label\"\r\n                        }\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector<HTMLElement>(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEOptionElement: HTMLEOptionElementConstructor = HTMLEOptionElementBase;","import { CustomElement, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionGroupElement };\r\n\r\ninterface HTMLEOptionGroupElementConstructor {\r\n    prototype: HTMLEOptionGroupElement;\r\n    new(): HTMLEOptionGroupElement;\r\n}\r\n\r\ninterface HTMLEOptionGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-optiongroup\": HTMLEOptionGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-optiongroup\"\r\n})\r\nclass HTMLEOptionGroupElementBase extends HTMLElement implements HTMLEOptionGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n}\r\n\r\nvar HTMLEOptionGroupElement: HTMLEOptionGroupElementConstructor = HTMLEOptionGroupElementBase;","import { HTMLEOptionElement } from \"./Option\";\r\nimport { HTMLEOptionGroupElement } from \"./OptionGroup\";\r\nimport { HTMLESelectElement } from \"./Select\";\r\n\r\nexport { HTMLEOptionCollection };\r\n\r\ninterface HTMLEOptionCollectionConstructor {\r\n    prototype: HTMLEOptionCollection;\r\n    new(root: HTMLESelectElement): HTMLEOptionCollection;\r\n}\r\n\r\ninterface HTMLEOptionCollection {\r\n    length: number;\r\n    item(index: number): HTMLEOptionElement | null;\r\n    namedItem(name: string): HTMLEOptionElement | null;\r\n    values(): IterableIterator<HTMLEOptionElement>;\r\n}\r\n\r\nclass HTMLEOptionCollectionBase implements HTMLEOptionCollection {\r\n    #walker: TreeWalker;\r\n\r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    get value(): string {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        while (currentNode !== null) {\r\n            if (currentNode.selected) {\r\n                return currentNode.value;\r\n            }\r\n            currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    constructor(root: HTMLESelectElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEOptionElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEOptionGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEOptionElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEOptionElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEOptionElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        let currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEOptionElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEOptionElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEOptionElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEOptionCollection: HTMLEOptionCollectionConstructor =  HTMLEOptionCollectionBase;","import { HTMLEActionElement } from \"../../containers/actions/Action\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEOptionElement } from \"./Option\";\r\nimport { HTMLEOptionCollection } from \"./OptionCollection\";\r\nimport { HTMLEOptionGroupElement } from \"./OptionGroup\";\r\n\r\nexport { HTMLESelectElement };\r\n\r\ninterface HTMLESelectElement extends HTMLEActionElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly options: HTMLEOptionCollection;\r\n    readonly activeIndex: number;\r\n    readonly activeOption: HTMLEOptionElement | null;\r\n    readonly selectedIndex: number;\r\n    readonly selectedOption: HTMLEOptionElement | null;\r\n    name: string;\r\n    label: string;\r\n    value: string;\r\n    expanded: boolean;\r\n    expand(): void;\r\n    collapse(): void;\r\n    toggle(force?: boolean): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ninterface HTMLESelectElementConstructor {\r\n    prototype: HTMLESelectElement;\r\n    new(): HTMLESelectElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-select\": HTMLESelectElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-select\"\r\n})\r\nclass HTMLESelectElementBase extends HTMLEActionElement implements HTMLESelectElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly options: HTMLEOptionCollection;\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get selectedIndex(): number {\r\n        return this.#selectedIndex;\r\n    }\r\n\r\n    get activeOption(): HTMLEOptionElement | null {\r\n        return this.options.item(this.#activeIndex) ?? null;\r\n    }\r\n\r\n    get selectedOption(): HTMLEOptionElement | null {\r\n        return this.options.item(this.#selectedIndex) ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"select\", observed: true})\r\n    type!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    #walker: TreeWalker;\r\n    #activeIndex: number;\r\n    #selectedIndex: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"label\", {\r\n                        attributes: {\r\n                            part: \"label\"\r\n                        }\r\n                    }),\r\n                    element(\"output\", {\r\n                        attributes: {\r\n                            part: \"value\"\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"options\"\r\n                },\r\n                children: [\r\n                    element(\"slot\"),\r\n                    element(\"hr\", {\r\n                        attributes: {\r\n                            part: \"separator\"\r\n                        }\r\n                    }),\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"description\"\r\n                        }\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        this.#selectedIndex = -1;\r\n        this.options = new HTMLEOptionCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"value\": {\r\n                const {options} = this;\r\n                const matchingOption = Array.from(options.values()).find(option => option.value == newValue);\r\n                if (matchingOption) {\r\n                    this.#setSelectedOption(matchingOption);\r\n                    this.dispatchEvent(new Event(\"change\", {bubbles: true}));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {expanded, options} = this;\r\n        if (!expanded) {\r\n            this.expanded = true;\r\n            const {selectedIndex} = this;\r\n            this.#positionOptions();\r\n            const option = options.item(selectedIndex);\r\n            if (option) {\r\n                option.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {expanded} = this;\r\n        if (expanded) {\r\n            this.expanded = false;\r\n            this.focus();\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {expanded} = this;\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEOptionElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEOptionGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEOptionElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEOptionElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousOption(item: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEOptionElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextOption(item: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEOptionElement | null>walker.nextNode();\r\n    }\r\n\r\n    #selectOption(option: HTMLEOptionElement): void {\r\n        if (option && !option.disabled) {\r\n            this.value = option.value;\r\n        }\r\n    }\r\n\r\n    #setActiveOption(option: HTMLEOptionElement | null): void {\r\n        const {options, activeOption} = this;\r\n        if (activeOption !== null && activeOption !== option) {\r\n            activeOption.active = false;\r\n        }\r\n        if (option !== null) {\r\n            if (!option.disabled) {\r\n                const {shadowRoot} = this;\r\n                const descriptionPart = shadowRoot.querySelector(\"[part='description']\");\r\n                if (descriptionPart) {\r\n                    descriptionPart.textContent = option.description;\r\n                }\r\n                this.#activeIndex = Array.from(options.values()).indexOf(option);\r\n            }\r\n            option.active = true;\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    #setSelectedOption(option: HTMLEOptionElement | null): void {\r\n        const {options} = this;\r\n        if (option !== null) {\r\n            if (!option.disabled) {\r\n                const {shadowRoot, selectedOption} = this;\r\n                const valuePart = shadowRoot.querySelector(\"[part='value']\");\r\n                if (valuePart) {\r\n                    valuePart.textContent = option.label;\r\n                }\r\n                option.selected = true;\r\n                if (selectedOption) {\r\n                    selectedOption.selected = false;\r\n                }\r\n                this.#selectedIndex = Array.from(options.values()).indexOf(option);\r\n            }\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    #positionOptions(): void {\r\n        const {shadowRoot} = this;\r\n        const options = shadowRoot.querySelector<HTMLElement>(\"[part=options]\")!;\r\n        const {style: optionsStyle} = options;  \r\n        const {bottom: selectBottom, left: selectLeft} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        optionsStyle.setProperty(\"top\", `${selectBottom + scrollY}px`);\r\n        optionsStyle.setProperty(\"left\", `${selectLeft + scrollX}px`);\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEOptionElement) {\r\n            this.#selectOption(target);\r\n            this.collapse();\r\n        }\r\n        else {\r\n            if (target == this) {\r\n                this.toggle();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {expanded} = this;\r\n        if (target instanceof HTMLEOptionElement) {\r\n            if (!expanded) {\r\n                this.expand();\r\n            }\r\n            this.#setActiveOption(target);\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {expanded} = this;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            if (expanded) {\r\n                this.collapse();\r\n            }\r\n            this.#setActiveOption(null);\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {options, activeOption, selectedOption, selectedIndex, expanded} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                if (expanded && activeOption !== null) {\r\n                    const previousOption = this.#previousOption(activeOption) ?? this.#firstOption();\r\n                    if (previousOption) {\r\n                        previousOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else if (!expanded && selectedOption !== null) {\r\n                    const previousOption = this.#previousOption(selectedOption) ?? this.#firstOption();\r\n                    if (previousOption) {\r\n                        this.#selectOption(previousOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (expanded && activeOption !== null) {\r\n                    const nextOption = this.#nextOption(activeOption) ?? this.#lastOption();\r\n                    if (nextOption) {\r\n                        nextOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else if (!expanded && selectedOption !== null) {\r\n                    const nextOption = this.#nextOption(selectedOption) ?? this.#lastOption();\r\n                    if (nextOption) {\r\n                        this.#selectOption(nextOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstOption = this.#firstOption();\r\n                if (firstOption !== null) {\r\n                    if (expanded) {\r\n                        firstOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(firstOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastOption = this.#lastOption();\r\n                if (lastOption !== null) {\r\n                    if (expanded) {\r\n                        lastOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(lastOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (expanded) {\r\n                    this.collapse();\r\n                    if (activeOption !== null) {\r\n                        this.#selectOption(activeOption);\r\n                    }\r\n                }\r\n                else {\r\n                    const option = options.item(selectedIndex);\r\n                    if (option !== null) {\r\n                        option.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.collapse();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            default: {\r\n                const {activeIndex} = this;\r\n                const {length: keyLength} = key;\r\n                if (keyLength == 1) {\r\n                    const keyCode = key.charCodeAt(0);\r\n                    const optionsArray = Array.from(options.values());\r\n                    const firstMatchIndex = optionsArray.findIndex(\r\n                        option_i => option_i.label.toLowerCase().charCodeAt(0) == keyCode\r\n                    );\r\n                    const nextMatchIndex = optionsArray.findIndex(\r\n                        (option_i, i) => option_i.label.toLowerCase().charCodeAt(0) == keyCode && i > activeIndex\r\n                    );\r\n                    const matchIndex = nextMatchIndex > -1 ?\r\n                        nextMatchIndex :\r\n                        firstMatchIndex;\r\n                    const option = options.item(matchIndex);\r\n                    if (option !== null) {\r\n                        option.focus({preventScroll: true});\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEOptionElement) {\r\n            target.focus({preventScroll: true});\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const options = <HTMLEOptionElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEOptionElement\r\n            );\r\n        if (options.length > 0) {\r\n            let selectedOption: HTMLEOptionElement | null = null;\r\n            let {value} = this;\r\n            if (value) {\r\n                selectedOption = options.find(option => option.value == value) ?? null;\r\n            }\r\n            if (selectedOption == null) {\r\n                selectedOption = options.find(option => option.selected) ?? null;\r\n            }\r\n            if (selectedOption == null) {\r\n                selectedOption = options.find(option => option.default) ?? null;\r\n            }\r\n            if (selectedOption == null) {\r\n                selectedOption = this.#firstOption();\r\n            }\r\n            options.forEach(option_i => {\r\n                option_i.selected = option_i == selectedOption\r\n            });\r\n            if (selectedOption !== null) {\r\n                this.#setSelectedOption(selectedOption);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLESelectElement: HTMLESelectElementConstructor = HTMLESelectElementBase;","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEActionElement } from \"../actions/Action\";\r\nimport { HTMLEMenuButtonElement } from \"../menus/MenuButton\";\r\n\r\nexport { HTMLEToolBarItemElement };\r\nexport { EToolBarItem };\r\n\r\ninterface HTMLEToolBarItemElementConstructor {\r\n    prototype: HTMLEToolBarItemElement;\r\n    new(): HTMLEToolBarItemElement;\r\n}\r\n\r\ninterface HTMLEToolBarItemElement extends HTMLEActionElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menubutton: HTMLEMenuButtonElement | null;\r\n    readonly select: HTMLESelectElement | null;\r\n    name: string;\r\n    label: string;\r\n    active: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritem\": HTMLEToolBarItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar slottedKeyboardListeners: WeakMap<HTMLElement, EventListener>;\r\nvar slottedTriggerListeners: WeakMap<HTMLElement, EventListener>;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritem\"\r\n})\r\nclass HTMLEToolBarItemElementBase extends HTMLEActionElement implements HTMLEToolBarItemElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get menubutton(): HTMLEMenuButtonElement | null {\r\n        return this.#menubutton;\r\n    }\r\n    \r\n    get select(): HTMLESelectElement | null {\r\n        return this.#select;\r\n    }\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n    \r\n    #menubutton: HTMLEMenuButtonElement | null;\r\n    #select: HTMLESelectElement | null;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"icon\"\r\n                        }\r\n                    }),\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"label\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\", {\r\n                        attributes: {\r\n                            name: \"select\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\", {\r\n                        attributes: {\r\n                            name: \"menubutton\"\r\n                        }\r\n                    })\r\n                ]\r\n            })\r\n        )\r\n        slottedKeyboardListeners = new WeakMap();\r\n        slottedTriggerListeners = new WeakMap();\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#menubutton = null;\r\n        this.#select = null;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    toggle(): void {\r\n        const {type} = this;\r\n        switch (type) {\r\n            case \"menubutton\": {\r\n                const {menubutton} = this;\r\n                if (menubutton) {\r\n                    menubutton.toggle();\r\n                    if (menubutton.expanded) {\r\n                        menubutton.firstItem?.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"select\": {\r\n                const {select} = this;\r\n                if (select) {\r\n                    select.toggle();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector<HTMLSpanElement>(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"value\": {\r\n                const {type} = this;\r\n                if (type == \"select\") {\r\n                    this.#updateSelectValue();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #updateSelectValue(): void {\r\n        const {select} = this;\r\n        if (select) {\r\n            const {value} = this;\r\n            const {value: selectValue} = select;\r\n            if (selectValue !== value) {\r\n                select.value = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    #addSlottedKeyboardHandler(element: HTMLElement): void {\r\n        const listener = <EventListener>this.#handleSlottedKeyboardEvent.bind(this);\r\n        slottedKeyboardListeners.set(element, listener);\r\n        element.addEventListener(\"keydown\", listener);\r\n    }\r\n\r\n    #removeSlottedKeyboardHandler(element: HTMLElement): void {\r\n        const listener = slottedKeyboardListeners.get(element);\r\n        if (listener) {\r\n            element.removeEventListener(\"keydown\", listener);\r\n        }\r\n    }\r\n\r\n    #addSlottedTriggerHandler(element: HTMLElement): void {\r\n        const listener = <EventListener>this.#handleSlottedTriggerEvent.bind(this);\r\n        slottedTriggerListeners.set(element, listener);\r\n        element.addEventListener(\"trigger\", listener);\r\n    }\r\n\r\n    #removeSlottedTriggerHandler(element: HTMLElement): void {\r\n        const listener = slottedTriggerListeners.get(element);\r\n        if (listener) {\r\n            element.removeEventListener(\"trigger\", listener);\r\n        }\r\n    }\r\n\r\n    #handleSlottedKeyboardEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        switch (key) {\r\n            case \"Enter\":\r\n            case \"Escape\": {\r\n                this.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlottedTriggerEvent(event: KeyboardEvent): void {\r\n        this.focus({preventScroll: true});\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target;\r\n        switch (slotName) {\r\n            case \"menubutton\": {\r\n                let menubutton = this.#menubutton;\r\n                if (menubutton !== null) {\r\n                    this.#removeSlottedTriggerHandler(menubutton);\r\n                    this.#removeSlottedKeyboardHandler(menubutton);\r\n                }\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                menubutton = element instanceof HTMLEMenuButtonElement ? element : null;\r\n                if (menubutton !== null) {\r\n                    this.#addSlottedTriggerHandler(menubutton);\r\n                    this.#addSlottedKeyboardHandler(menubutton);\r\n                }\r\n                this.#menubutton = menubutton;\r\n                break;\r\n            }\r\n            case \"select\": {\r\n                let select = this.#select;\r\n                if (select !== null) {\r\n                    this.#removeSlottedKeyboardHandler(select);\r\n                }\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                select = element instanceof HTMLESelectElement ? element : null;\r\n                if (select !== null) {\r\n                    this.#addSlottedKeyboardHandler(select);\r\n                }\r\n                this.#select = select;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemElement: HTMLEToolBarItemElementConstructor = HTMLEToolBarItemElementBase;\r\n\r\ninterface EToolBarItemConstructor {\r\n    prototype: HTMLEToolBarItemElement;\r\n    new(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n    button(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    checkbox(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    radio(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    menubutton(init: {\r\n        name: string;\r\n        label: string;\r\n        menubutton: HTMLEMenuButtonElement;\r\n    }): HTMLEToolBarItemElement;\r\n    select(init: {\r\n        name: string;\r\n        label: string;\r\n        select: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n}\r\n\r\nvar EToolBarItem = <EToolBarItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menubutton, select} = init;\r\n        if (menubutton) {\r\n            menubutton.slot = \"menubutton\";\r\n        }\r\n        if (select) {\r\n            select.slot = \"select\";\r\n        }\r\n        return element(\"e-toolbaritem\", {\r\n            attributes: {\r\n                tabindex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type\r\n            },\r\n            children: menubutton ? [menubutton] : select ? [select] : undefined,\r\n            listeners: {\r\n                trigger: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEToolBarItemElement.prototype,\r\n        button(init: {\r\n            name: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menubutton(init: {\r\n            name: string;\r\n            label: string;\r\n            menubutton: HTMLEMenuButtonElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"menubutton\"\r\n            });\r\n        },\r\n        select(init: {\r\n            name: string;\r\n            label: string;\r\n            select: HTMLESelectElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"select\"\r\n            });\r\n        },\r\n    }\r\n);","\r\nimport { element, CustomElement, AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEToolBarItemGroupElement };\r\n\r\ninterface HTMLEToolBarItemGroupElementConstructor {\r\n    prototype: HTMLEToolBarItemGroupElement;\r\n    new(): HTMLEToolBarItemGroupElement;\r\n}\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\ninterface HTMLEToolBarItemGroupElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n    disabled: boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritemgroup\": HTMLEToolBarItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritemgroup\"\r\n})\r\nclass HTMLEToolBarItemGroupElementBase extends HTMLElement implements HTMLEToolBarItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    disabled!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            width: max-content;\r\n                            flex-direction: row;\r\n                        }\r\n\r\n                        /*:host([orientation=\"vertical\"]) {\r\n                            flex-direction: column;\r\n                        }\r\n\r\n                        :host([orientation=\"horizontal\"]) {\r\n                            flex-direction: row;\r\n                        }*/\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const label = this.shadowRoot.querySelector<HTMLLabelElement>(\"[part='label']\");\r\n                if (label) {\r\n                    label.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"disabled\": {\r\n                /*this.items.forEach((item) => {\r\n                    item.disabled = newValue !== null;\r\n                });*/\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemGroupElement: HTMLEToolBarItemGroupElementConstructor = HTMLEToolBarItemGroupElementBase;","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEToolBarItemElement } from \"./ToolBarItem\";\r\nimport { HTMLEToolBarItemGroupElement } from \"./ToolBarItemGroup\";\r\n\r\nexport { HTMLEToolBarElement };\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\ninterface HTMLEToolBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    items(): HTMLEToolBarItemElement[];\r\n    readonly activeItem: HTMLEToolBarItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n}\r\n\r\ninterface HTMLEToolbarElementConstructor {\r\n    prototype: HTMLEToolBarElement;\r\n    new(): HTMLEToolBarElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbar\": HTMLEToolBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbar\"\r\n})\r\nclass HTMLEToolBarElementBase extends HTMLElement implements HTMLEToolBarElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get activeItem(): HTMLEToolBarItemElement | null {\r\n        return this.querySelector<HTMLEToolBarItemElement>(\r\n            \"e-toolbaritem[active]\"\r\n        );\r\n    }\r\n\r\n    items(): HTMLEToolBarItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEToolBarItemElement>(\r\n            \":is(:scope, :scope > e-toolbaritemgroup) > e-toolbaritem\"\r\n        ));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    orientation!: ToolBarOrientation;\r\n\r\n    #walker: TreeWalker;\r\n    #activeIndex: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#activeIndex = -1;\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"change\", this.#handleChangeEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEToolBarItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEToolBarItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEToolBarItemElement | null>walker.previousSibling();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEToolBarItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEToolBarItemElement | null): void {\r\n        const {activeItem} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n            this.#activeIndex = this.items().indexOf(item);\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLESelectElement) {\r\n            const item = target.closest(\"e-toolbaritem\");\r\n            if (item !== null) {\r\n                const {select, type} = item;\r\n                if (target == select && select && type == \"select\") {\r\n                    const {value} = item;\r\n                    const {value: selectValue} = select;\r\n                    if (value !== selectValue) {\r\n                        item.value = selectValue;\r\n                        item.trigger();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEToolBarItemElement) {\r\n            const {type} = target;\r\n            switch (type) {\r\n                /*case \"menubutton\": {\r\n                    const {menubutton} = target;\r\n                    if (menubutton) {\r\n                        const {expanded} = menubutton;\r\n                        if (!expanded) {\r\n                            menubutton.expand();\r\n                            menubutton.menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                case \"select\": {\r\n                    const {select} = target;\r\n                    if (select) {\r\n                        select.toggle();\r\n                    }\r\n                    break;\r\n                }*/\r\n                default: {\r\n                    target.trigger();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const activeItem = this.items().find(\r\n            item_i => item_i.contains(<Node>target)\r\n        ) ?? null;\r\n        this.#setActiveItem(activeItem);\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.#setActiveItem(null);\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"menubutton\": {\r\n                            const {menubutton} = activeItem;\r\n                            if (menubutton) {\r\n                                const {expanded} = menubutton;\r\n                                if (!expanded) {\r\n                                    menubutton.expand();\r\n                                    menubutton.firstItem?.focus({preventScroll: true});\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"select\": {\r\n                            const {select} = activeItem;\r\n                            if (select) {\r\n                                select.expand();\r\n                            }\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            activeItem.trigger();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"select\": {\r\n                            activeItem.select?.expand();\r\n                            event.stopPropagation();\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    activeItem.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleTriggerEvent(event: Event): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEToolBarItemElement) {\r\n            const {type, name, value} = target;\r\n            if (type == \"radio\") {\r\n                this.querySelectorAll<HTMLEToolBarItemElement>(\r\n                    `:is(:scope, :scope > e-toolbaritemgroup) > e-toolbaritem[type=radio][name=${name}]`\r\n                ).forEach((radio_i) => {\r\n                    radio_i.checked = radio_i.value == value;\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarElement: HTMLEToolbarElementConstructor = HTMLEToolBarElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLETabPanelElement };\r\n\r\ninterface HTMLETabPanelElementConstructor {\r\n    prototype: HTMLETabPanelElement;\r\n    new(): HTMLETabPanelElement;\r\n}\r\n\r\ninterface HTMLETabPanelElement extends HTMLElement {\r\n    name: string;\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tabpanel\"\r\n})\r\nclass HTMLETabPanelElementBase extends HTMLElement implements HTMLETabPanelElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n        \r\n                        :host([hidden]) {\r\n                            display: none;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n}\r\n\r\nvar HTMLETabPanelElement: HTMLETabPanelElementConstructor = HTMLETabPanelElementBase;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tabpanel\": HTMLETabPanelElement,\r\n    }\r\n}","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLETabPanelElement } from \"./TabPanel\";\r\n\r\nexport { ETabChangeEvent };\r\nexport { HTMLETabElement };\r\n\r\ninterface HTMLETabElementConstructor {\r\n    prototype: HTMLETabElement;\r\n    new(): HTMLETabElement;\r\n}\r\n\r\ninterface HTMLETabElement extends HTMLElement {\r\n    name: string;\r\n    active: boolean;\r\n    disabled: boolean;\r\n    controls: string;\r\n    panel: HTMLETabPanelElement | null;\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ntype ETabChangeEvent = CustomEvent<{\r\n    tab: HTMLETabElement;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_tabchange\": ETabChangeEvent,\r\n    }\r\n\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tab\": HTMLETabElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tab\"\r\n})\r\nclass HTMLETabElementBase extends HTMLElement implements HTMLETabElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    #panel: HTMLETabPanelElement | null;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            user-select: none;\r\n                            white-space: nowrap;\r\n\r\n                            padding: 2px 6px;\r\n                            cursor: pointer;\r\n                        }\r\n                        \r\n                        :host([disabled]) {\r\n                            color: lightgray;\r\n                            pointer-events: none;\r\n                        }\r\n        \r\n                        :host([active]) {\r\n                            background-color: lightgray;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n        this.#panel = null;\r\n    }\r\n\r\n    get panel(): HTMLETabPanelElement | null {\r\n        return this.#panel;\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const panel = document.getElementById(this.controls);\r\n        if (panel !== this.#panel && panel instanceof HTMLETabPanelElement) {\r\n            this.#panel = panel;\r\n        }\r\n        if (panel)  {\r\n            panel.hidden = !this.active;\r\n        }\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"active\":\r\n                if (this.active) {\r\n                    this.dispatchEvent(new CustomEvent(\"e_tabchange\", {detail: {tab: this}, bubbles: true}));\r\n                }\r\n                const panel = document.getElementById(this.controls);\r\n                if (panel !== this.panel && panel instanceof HTMLETabPanelElement) {\r\n                    this.#panel = panel;\r\n                }\r\n                if (panel)  {\r\n                    panel.hidden = !this.active;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabElement: HTMLETabElementConstructor = HTMLETabElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLETabElement } from \"./Tab\";\r\n\r\nexport { HTMLETabListElement };\r\n\r\ninterface HTMLETabListElementConstructor {\r\n    prototype: HTMLETabListElement;\r\n    new(): HTMLETabListElement;\r\n}\r\n\r\ninterface HTMLETabListElement extends HTMLElement {\r\n    readonly activeTab: HTMLETabElement | null;\r\n    tabs: HTMLETabElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tablist\": HTMLETabListElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tablist\"\r\n})\r\nclass HTMLETabListElementBase extends HTMLElement implements HTMLETabListElement {\r\n\r\n    tabs: HTMLETabElement[];\r\n\r\n    #activeIndex: number;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                            position: relative;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n        \r\n        this.tabs = [];\r\n        this.#activeIndex = 1;\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeTab(): HTMLETabElement | null {\r\n        return this.tabs[this.#activeIndex] || null;\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n        const slot = this.shadowRoot!.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", (event) => {\r\n\r\n                const tabs = <HTMLETabElement[]>(<HTMLSlotElement>event.target)\r\n                    .assignedElements()\r\n                    .filter(tab => tab instanceof HTMLETabElement);\r\n                this.tabs = tabs;\r\n                this.#activeIndex = this.tabs.findIndex(tab => tab.active);\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event) => {\r\n            switch (event.key) {\r\n                case \"ArrowUp\":\r\n                    this.focusTabAt((this.activeIndex <= 0) ? this.tabs.length - 1 : this.activeIndex - 1);\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    this.focusTabAt((this.activeIndex >= this.tabs.length - 1) ? 0 : this.activeIndex + 1);\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"Enter\":\r\n                    if (this.activeTab) {\r\n                        this.activateTab(this.activeTab);\r\n                    }\r\n                    break;\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"click\", (event) => {\r\n            const target = event.target;\r\n            if (target instanceof HTMLETabElement) {\r\n                target.active = true;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"e_tabchange\", (event) => {\r\n            const targetIndex = this.tabs.indexOf(event.detail.tab);\r\n            this.#activeIndex = targetIndex;\r\n            this.tabs.forEach((thisTab, thisTabIndex) => {\r\n                if (thisTabIndex !== targetIndex) {\r\n                    thisTab.active = false;\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    focusTabAt(index: number): void {\r\n        const tab = this.tabs[index];\r\n        if (tab) {\r\n            this.#activeIndex = index;\r\n            tab.focus();\r\n        }\r\n    }\r\n\r\n    activateTab(tab: HTMLETabElement) {\r\n        if (this.tabs.includes(tab)) {\r\n            tab.active = true;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabListElement: HTMLETabListElementConstructor = HTMLETabListElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLETreeElement } from \"./Tree\";\r\nimport { HTMLETreeItemElement } from \"./TreeItem\";\r\n\r\nexport { HTMLETreeItemGroupElement };\r\n\r\ninterface HTMLETreeItemGroupElementConstructor {\r\n    prototype: HTMLETreeItemGroupElement;\r\n    new(): HTMLETreeItemGroupElement;\r\n}\r\n\r\ninterface HTMLETreeItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitemgroup\": HTMLETreeItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-treeitemgroup\"\r\n})\r\nclass HTMLETreeItemGroupElementBase extends HTMLElement implements HTMLETreeItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLETreeItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLETreeItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n            item_i.level = (() => {\r\n                let level = -1;\r\n                let closestItem: HTMLETreeItemElement | null = item_i;\r\n                while (closestItem !== null && closestItem.matches(\"e-tree :scope\")) {\r\n                    closestItem = closestItem.parentElement?.closest(\"e-treeitem\") ?? null;\r\n                    level++;\r\n                }\r\n                return level;\r\n            })();\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemGroupElement: HTMLETreeItemGroupElementConstructor = HTMLETreeItemGroupElementBase;","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\nimport { HTMLETreeElement } from \"./Tree\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeItemElement };\r\n\r\ninterface HTMLETreeItemElementConstructor {\r\n    prototype: HTMLETreeItemElement;\r\n    new(): HTMLETreeItemElement;\r\n}\r\n\r\ninterface HTMLETreeItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly group: HTMLETreeItemGroupElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    expanded: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    level: number;\r\n    type: \"leaf\" | \"parent\";\r\n    toggle(force?: boolean): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitem\": HTMLETreeItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-treeitem\"\r\n})\r\nclass HTMLETreeItemElementBase extends HTMLElement implements HTMLETreeItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get group(): HTMLETreeItemGroupElement | null {\r\n        return this.#group;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    expanded!: boolean;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number, observed: true})\r\n    level!: number;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"leaf\"})\r\n    type!: \"leaf\" | \"parent\";\r\n\r\n    #group: HTMLETreeItemGroupElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"arrow\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"group\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.#group = null;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"expanded\": {\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const labelPart = this.shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"level\": {\r\n                this.style.setProperty(\"--level\", `${this.level}`);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        this.expanded = force ?? !this.expanded;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, shiftKey, ctrlKey} = event;\r\n        const {type} = this;\r\n        if (this == target && type == \"parent\" && !(shiftKey || ctrlKey)) {\r\n            this.toggle();\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target;\r\n        switch (slotName) {\r\n            case \"group\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#group = element instanceof HTMLETreeItemGroupElement ? element : null;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemElement: HTMLETreeItemElementConstructor = HTMLETreeItemElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLETreeItemElement } from \"./TreeItem\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeElement };\r\n\r\ninterface HTMLETreeElementConstructor {\r\n    prototype: HTMLETreeElement;\r\n    new(): HTMLETreeElement;\r\n}\r\n\r\ninterface HTMLETreeElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLETreeItemElement>;\r\n    readonly activeItem: HTMLETreeItemElement | null;\r\n    readonly dropTargetItem: HTMLETreeItemElement | null;\r\n    droptarget: boolean;\r\n    name: string;\r\n    selectedItems(): HTMLETreeItemElement[];\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tree\": HTMLETreeElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-tree\"\r\n})\r\nclass HTMLETreeElementBase extends HTMLElement implements HTMLETreeElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLETreeItemElement>;\r\n\r\n    get activeItem(): HTMLETreeItemElement | null {\r\n        return this.querySelector<HTMLETreeItemElement>(\r\n            \"e-treeitem[active]\"\r\n        );\r\n    }\r\n\r\n    get dropTargetItem(): HTMLETreeItemElement | null {\r\n        return this.querySelector<HTMLETreeItemElement>(\r\n            \"e-treeitem[droptarget]\"\r\n        );\r\n    }\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.items = this.getElementsByTagName(\"e-treeitem\");\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    selectedItems(): HTMLETreeItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.#firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLETreeItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLETreeItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLETreeItemElement, to: HTMLETreeItemElement): HTMLETreeItemElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleItem = this.#nextItem(from);\r\n            while (nextVisibleItem && nextVisibleItem !== to) {\r\n                range.push(nextVisibleItem);\r\n                nextVisibleItem = this.#nextItem(nextVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleItem = this.#previousItem(from);\r\n            while (previousVisibleItem && previousVisibleItem !== to) {\r\n                range.push(previousVisibleItem);\r\n                previousVisibleItem = this.#previousItem(previousVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLETreeItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((item_i) => {\r\n            item_i.selected = false;\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLETreeItemElement | null): void {\r\n        const {activeItem} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = item;\r\n            item.active = true;\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n    \r\n    #setDropTargetItem(item: HTMLETreeItemElement | null): void {\r\n        const {dropTargetItem} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n        }\r\n    }\r\n\r\n    #firstItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousSibling = <HTMLETreeItemElement | null>walker.previousSibling();\r\n        return previousSibling ?\r\n            this.#deepestItem(previousSibling) :\r\n            <HTMLETreeItemElement | null>walker.parentNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const {type, expanded} = item;\r\n        return <HTMLETreeItemElement | null>(\r\n            type === \"leaf\" ?\r\n                walker.nextNode() :\r\n                expanded ?\r\n                    walker.nextNode() :\r\n                    walker.nextSibling() ??\r\n                    (walker.parentNode(), walker.nextSibling())\r\n        );\r\n    }\r\n\r\n    #deepestItem(item: HTMLETreeItemElement): HTMLETreeItemElement {\r\n        if (item.expanded) {\r\n            const walker = this.#walker;\r\n            const lastItem = <HTMLETreeItemElement>walker.lastChild();\r\n            if (lastItem) {\r\n                return this.#deepestItem(lastItem);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey, button} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const {selected} = target;\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setSelection(target);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            target.blur();\r\n                        }\r\n                        (!selected) ?\r\n                            this.#addToSelection(target) :\r\n                            this.#removeFromSelection(target);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const {activeItem} = this\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                target\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(target);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const {type} = target;\r\n            if (type == \"parent\") {\r\n                target.toggle(true);\r\n            }\r\n            this.#setDropTargetItem(target);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!this.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        const {root} = walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? root, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? root, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(\r\n                                firstItem,\r\n                                this.#deepestItem(lastItem)\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    if (activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                    else {\r\n                        const walker = this.#walker;\r\n                        const parentItem = <HTMLETreeItemElement>walker.parentNode();\r\n                        if (parentItem) {\r\n                            parentItem.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    if (!activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.#setActiveItem(null);\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            this.#setActiveItem(target);\r\n            this.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLETreeItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLETreeItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n            item_i.level = 0;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLETreeElement: HTMLETreeElementConstructor = HTMLETreeElementBase;","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEToolBarElement } from \"../toolbars/ToolBar\";\r\n\r\nexport { HTMLEListItemElement };\r\n\r\ninterface HTMLEListItemElementConstructor {\r\n    prototype: HTMLEListItemElement;\r\n    new(): HTMLEListItemElement;\r\n}\r\n\r\ninterface HTMLEListItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly badge: HTMLSpanElement | null;\r\n    readonly toolbar: HTMLEToolBarElement | null;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitem\": HTMLEListItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-listitem\"\r\n})\r\nclass HTMLEListItemElementBase extends HTMLElement implements HTMLEListItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    get badge(): HTMLElement | null {\r\n        return this.#badge;\r\n    }\r\n\r\n    get toolbar(): HTMLEToolBarElement | null {\r\n        return this.#toolbar;\r\n    }\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    #badge: HTMLElement | null;\r\n    #toolbar: HTMLEToolBarElement | null;\r\n    #menu: HTMLEMenuElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#badge = null;\r\n        this.#menu = null;\r\n        this.#toolbar = null;\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this))\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"toolbar\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#toolbar = element instanceof HTMLEToolBarElement ? element : null;\r\n                break;\r\n            }\r\n            case \"badge\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#badge = element instanceof HTMLSpanElement ? element : null;\r\n                break;\r\n            }\r\n            case \"menu\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#menu = element instanceof HTMLEMenuElement ? element : null;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEListItemElement: HTMLEListItemElementConstructor = HTMLEListItemElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEListItemElement } from \"./ListItem\";\r\n\r\nexport { HTMLEListItemGroupElement };\r\n\r\ninterface HTMLEListItemGroupElementConstructor {\r\n    prototype: HTMLEListItemGroupElement;\r\n    new(): HTMLEListItemGroupElement;\r\n}\r\n\r\ninterface HTMLEListItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitemgroup\": HTMLEListItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-listitemgroup\"\r\n})\r\nclass HTMLEListItemGroupElementBase extends HTMLElement implements HTMLEListItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEListItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEListItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEListItemGroupElement: HTMLEListItemGroupElementConstructor = HTMLEListItemGroupElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEListItemElement } from \"./ListItem\";\r\nimport { HTMLEListItemGroupElement } from \"./ListItemGroup\";\r\n\r\nexport { HTMLEListElement };\r\n\r\ninterface HTMLEListElementConstructor {\r\n    prototype: HTMLEListElement;\r\n    new(): HTMLEListElement;\r\n}\r\n\r\ninterface HTMLEListElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEListItemElement>;\r\n    readonly activeItem: HTMLEListItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    droptarget: boolean;\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    selectedItems(): HTMLEListItemElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-list\": HTMLEListElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-list\"\r\n})\r\nclass HTMLEListElementBase extends HTMLElement implements HTMLEListElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEListItemElement>;\r\n\r\n    get dropTargetItem(): HTMLEListItemElement | null {\r\n        return this.items[this.#dropTargetIndex] ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    #dropTargetIndex: number;\r\n    #activeIndex: number;\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        this.#dropTargetIndex = -1;\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.items = this.getElementsByTagName(\"e-listitem\");\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEListItemElement | null {\r\n        return this.items[this.activeIndex] ?? null;\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    selectedItems(): HTMLEListItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.#firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEListItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEListItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLEListItemElement, to: HTMLEListItemElement): HTMLEListItemElement[] {\r\n        const items = Array.from(this.items);\r\n        const fromIndex = items.indexOf(from);\r\n        const toIndex = items.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return items.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        selectedItems.forEach((item_i) => {\r\n            if (item_i.selected) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEListItemElement | null): void {\r\n        const {activeItem, items} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n            item.tabIndex = 0;\r\n            this.#activeIndex = Array.from(items).indexOf(item);\r\n        }\r\n    }\r\n\r\n    #setDropTargetItem(item: HTMLEListItemElement | null): void {\r\n        const {dropTargetItem, items} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n            this.#dropTargetIndex = Array.from(items).indexOf(item);\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n            this.#dropTargetIndex = -1;\r\n        }\r\n    }\r\n\r\n    #firstItem(): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLEListItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLEListItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEListItemElement): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEListItemElement | null>walker.previousNode();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEListItemElement): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const nextItem = <HTMLEListItemElement | null>walker.nextNode();\r\n        return nextItem;\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent) {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n            target.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey} = event;\r\n        const selectedItems = this.selectedItems();\r\n        if (target instanceof HTMLEListItemElement) {\r\n            if (!shiftKey && !ctrlKey) {\r\n                this.#setSelection(target);\r\n            }\r\n            else if (ctrlKey) {\r\n                (!target.selected) ?\r\n                    this.#addToSelection(target) :\r\n                    this.#removeFromSelection(target);\r\n                event.stopPropagation();\r\n            }\r\n            else if (shiftKey) {\r\n                const lastSelectedItem = selectedItems[selectedItems.length - 1];\r\n                if (lastSelectedItem) {\r\n                    const range = this.#getItemsRange(\r\n                        lastSelectedItem,\r\n                        target\r\n                    );\r\n                    if (range) {\r\n                        if (selectedItems.includes(target)) {\r\n                            this.#removeFromSelection(...range);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(...range);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.#setSelection(target);\r\n                }\r\n                event.stopPropagation();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            this.#setDropTargetItem(target);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n    \r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n        const relatedTargetHost =\r\n            relatedTargetRoot instanceof ShadowRoot ?\r\n            relatedTargetRoot.host :\r\n            relatedTarget;\r\n        if (!this.contains(<Node>relatedTargetHost)) {\r\n            this.#setDropTargetItem(null);\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    const walker = this.#walker;\r\n                    const {root} = walker;\r\n                    const firstItem = <HTMLEListItemElement>(\r\n                        walker.currentNode = walker.parentNode() ?? root, walker.firstChild()\r\n                    );\r\n                    const lastItem = <HTMLEListItemElement>(\r\n                        walker.currentNode = walker.parentNode() ?? root, walker.lastChild()\r\n                    );\r\n                    const range = this.#getItemsRange(\r\n                        firstItem,\r\n                        lastItem\r\n                    );\r\n                    if (range) {\r\n                        this.#setSelection(...range);\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                const {activeItem} = this;\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.#setActiveItem(null);\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            this.#setActiveItem(target);\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (!this.#onSelection) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEListItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEListItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEListElement: HTMLEListElementConstructor = HTMLEListElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEDraggableElement };\r\n\r\ninterface HTMLEDraggableElementConstructor {\r\n    prototype: HTMLEDraggableElement;\r\n    new(): HTMLEDraggableElement;\r\n}\r\n\r\ninterface HTMLEDraggableElement extends HTMLElement {\r\n    readonly referee: this | null;\r\n    readonly references: this[];\r\n    selected: boolean;\r\n    dragged: boolean;\r\n    dragovered: boolean;\r\n\r\n    connectedCallback(): void;\r\n    disconnectedCallback(): void;\r\n    getReference(): this;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-draggable\": HTMLEDraggableElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-draggable\"\r\n})\r\nclass HTMLEDraggableElementBase extends HTMLElement implements HTMLEDraggableElement {\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    dragovered!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    dragged!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    #referee: this | null;\r\n    readonly references: this[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            padding: 3px 4px;\r\n                            cursor: pointer;\r\n                            white-space: nowrap;\r\n                            border-radius: 4px;\r\n                            border: 1px solid black;\r\n                            user-select: none;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                            color: lightgray;\r\n                            border-color: lightgray;\r\n                        }\r\n        \r\n                        :host([selected]:active) {\r\n                            cursor: grabbing;\r\n                        }\r\n                        \r\n                        :host([selected]) {\r\n                            cursor: grab;\r\n                            font-weight: bold;\r\n                            outline: 1px auto black;\r\n                        }\r\n        \r\n                        :host([dragovered]) {\r\n                            border-style: dotted;\r\n                        }\r\n                        \r\n                        [part=\"container\"] {\r\n                            display: flex;\r\n                            align-items: center;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"container\"\r\n                },\r\n                children: [\r\n                    element(\"slot\", {\r\n                        children: [\r\n                            \"&nbsp;\"\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.references = [];\r\n        this.#referee = null;\r\n    }\r\n\r\n    get referee(): this | null {\r\n        return this.#referee;\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n        this.draggable = true;\r\n    }\r\n\r\n    disconnectedCallback(): void {\r\n        if (this.referee) {\r\n            const thisRefIndex = this.referee.references.indexOf(this);\r\n            if (thisRefIndex > -1) {\r\n                this.referee.references.splice(thisRefIndex, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    getReference(): this {\r\n        const reference = <this>this.cloneNode(true);\r\n        reference.#referee = this;\r\n        return reference;\r\n    }\r\n}\r\n\r\nvar HTMLEDraggableElement: HTMLEDraggableElementConstructor = HTMLEDraggableElementBase","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\n\r\nexport { HTMLEDragzoneElement };\r\n\r\ninterface HTMLEDragzoneElementConstructor {\r\n    prototype: HTMLEDragzoneElement;\r\n    new(): HTMLEDragzoneElement\r\n}\r\n\r\ninterface HTMLEDragzoneElement extends HTMLElement {\r\n    readonly draggables: HTMLEDraggableElement[];\r\n    readonly selectedDraggables: HTMLEDraggableElement[];\r\n    disabled: boolean;\r\n    selectDraggable(draggable: HTMLEDraggableElement): void;\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void;\r\n    clearSelection(): void;\r\n    connectedCallback(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dragzone\": HTMLEDragzoneElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dragzone\"\r\n})\r\nclass HTMLEDragzoneElementBase extends HTMLElement implements HTMLEDragzoneElement {\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    #draggables: HTMLEDraggableElement[];\r\n    #selectedDraggables: HTMLEDraggableElement[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                        }\r\n        \r\n                        [part=\"container\"] {\r\n                            position: relative;\r\n                            display: flex;\r\n                            flex-direction: column;\r\n                            padding-left: 2px;\r\n                            padding-right: 2px;\r\n                        }\r\n        \r\n                        ::slotted(*) {\r\n                            margin-top: 2px;\r\n                            margin-bottom: 2px;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"container\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n        this.#draggables = [];\r\n        this.#selectedDraggables = [];\r\n    }\r\n\r\n    get draggables(): HTMLEDraggableElement[] {\r\n        return this.#draggables;\r\n    }\r\n\r\n    get selectedDraggables(): HTMLEDraggableElement[] {\r\n        return this.#selectedDraggables;\r\n    }\r\n\r\n    selectDraggable(draggable: HTMLEDraggableElement): void {\r\n        if (!this.selectedDraggables.includes(draggable)) {\r\n            this.selectedDraggables.push(draggable);\r\n        }\r\n        if (!draggable.selected) {\r\n            draggable.selected = true;\r\n        }\r\n    }\r\n\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void {\r\n        const index = this.selectedDraggables.indexOf(draggable);\r\n        if (index > -1) {\r\n            if (draggable.selected) {\r\n                draggable.selected = false;\r\n            }\r\n            this.selectedDraggables.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.selectedDraggables.forEach((draggable) => {\r\n            draggable.selected = false;\r\n        });\r\n        this.#selectedDraggables = [];\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const draggables = slot.assignedElements().filter(\r\n                    elem => elem instanceof HTMLEDraggableElement\r\n                ) as HTMLEDraggableElement[];\r\n                this.#draggables = draggables;\r\n                this.draggables.forEach((draggable) => {\r\n                    draggable.draggable = true;\r\n                });\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Escape\":\r\n                    this.clearSelection();\r\n                    this.focus();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragstart\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                this.selectedDraggables.forEach((thisSelectedDraggable) => {\r\n                    thisSelectedDraggable.dragged = true;\r\n                });\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", this.id);\r\n                }\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event) => {\r\n            const dataTransfer = event.dataTransfer;\r\n            if (dataTransfer) {\r\n                dataTransfer.dropEffect = \"none\";\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"dragend\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                const thisDraggedDraggables = this.draggables.filter(draggable => draggable.dragged);\r\n                thisDraggedDraggables.forEach((thisDraggedDraggable) => {\r\n                    thisDraggedDraggable.dragged = false;\r\n                });\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            if (!this.contains(relatedTarget)) {\r\n                this.clearSelection();\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button == 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        if (!target.selected) {\r\n                            this.clearSelection();\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                    else if (event.ctrlKey) {\r\n                        (!target.selected) ?\r\n                            this.selectDraggable(target) :\r\n                            this.unselectDraggable(target);\r\n                    }\r\n                    else if (event.shiftKey) {\r\n                        if (this.selectedDraggables.length > 0) {\r\n                            const targetIndex = this.draggables.indexOf(target);\r\n                            const firstIndex = this.draggables.indexOf(this.selectedDraggables[0]);\r\n                            const direction = Math.sign(targetIndex - firstIndex);\r\n                            const fromIndex = (direction > 0) ? 0 : this.draggables.length - 1;\r\n                            const toIndex = (direction > 0) ? this.draggables.length - 1 : 0;\r\n                            const startRangeIndex = (direction > 0) ? firstIndex : targetIndex;\r\n                            const endRangeIndex = (direction > 0) ? targetIndex : firstIndex;\r\n                            for (let index = fromIndex; index !== (toIndex + direction); index += direction) {\r\n                                (index >= startRangeIndex && index <= endRangeIndex) ? \r\n                                    this.selectDraggable(this.draggables[index]) :\r\n                                    this.unselectDraggable(this.draggables[index]);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.clearSelection();\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mouseup\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button == 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        this.draggables.forEach((thisDraggable) => {\r\n                            if (thisDraggable !== target) {\r\n                                this.unselectDraggable(thisDraggable);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEDragzoneElement: HTMLEDragzoneElementConstructor = HTMLEDragzoneElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\nimport { HTMLEDragzoneElement } from \"./Dragzone\";\r\n\r\nexport { HTMLEDropzoneElement };\r\nexport { EDataChangeEvent };\r\n\r\ninterface HTMLEDropzoneElementConstructor {\r\n    prototype: HTMLEDropzoneElement;\r\n    new(): HTMLEDropzoneElement;\r\n}\r\n\r\ninterface HTMLEDropzoneElement extends HTMLEDragzoneElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    dragovered: DropzoneDragoveredType | null;\r\n    name: string;\r\n    multiple: boolean;\r\n    placeholder: string;\r\n\r\n    droptest: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => void) | null;\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): void;\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean): void;\r\n\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ntype DropzoneDragoveredType = \"self\" | \"draggable\" | \"appendarea\";\r\n\r\ntype EDataChangeEvent = CustomEvent<{\r\n    action: \"insert\" | \"remove\";\r\n    draggables: HTMLEDraggableElement[];\r\n    position: number;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dropzone\": HTMLEDropzoneElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"e_datachange\": EDataChangeEvent,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dropzone\"\r\n})\r\nclass HTMLEDropzoneElementBase extends HTMLEDragzoneElement implements HTMLEDropzoneElement {\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    dragovered!: DropzoneDragoveredType | null;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    placeholder!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    multiple!: boolean;\r\n\r\n    droptest!: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => boolean) | null;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.shadowRoot!.querySelector(\"style\")!.append(/*css*/`\r\n            :host {\r\n                border: 1px dashed gray;\r\n            }\r\n\r\n            :host(:not([multiple]):not(:empty)) [part=\"appendarea\"],\r\n            :host(:not(:empty):not([dragovered])) [part=\"appendarea\"] {\r\n                display: none !important;\r\n            }\r\n\r\n            [part=\"appendarea\"] {\r\n                display: block;\r\n                margin: 2px;\r\n                border-radius: 4px;\r\n                border: 1px dotted black;\r\n            }\r\n\r\n            :host(:not([dragovered=\"appendarea\"])) [part=\"appendarea\"] {\r\n                border-color: transparent;\r\n            }\r\n            \r\n            [part=\"placeholder\"] {\r\n                display: inline-block;\r\n                color: grey;\r\n                pointer-events: none;\r\n                user-select: none;\r\n            }\r\n        `);\r\n\r\n        this.shadowRoot.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"appendarea\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"placeholder\"\r\n                        },\r\n                        children: [\r\n                            \"&nbsp;\"\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.droptest = null;\r\n    }\r\n    \r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        const appendAreaPart = this.shadowRoot!.querySelector<HTMLDivElement>(\"[part='appendarea']\");\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Delete\":\r\n                    if (this == event.target) {\r\n                        this.removeDraggables();\r\n                    }\r\n                    else {\r\n                        this.removeDraggables(draggable => draggable.selected);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragover\", (event: DragEvent) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragover\", (event) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragenter\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                target.dragovered = true;\r\n                this.dragovered = \"draggable\";\r\n            }\r\n            else {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragenter\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"appendarea\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event: DragEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                if (target == this) {\r\n                    if (appendAreaPart) {\r\n                        this.dragovered = \"self\";\r\n                    }\r\n                    if (!this.draggables.includes(relatedTarget)) {\r\n                        this.dragovered = null;\r\n                    }\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                }\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragleave\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n        \r\n        this.addEventListener(\"drop\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                let dropIndex = this.draggables.length;\r\n                if (target == this) {\r\n                    this.dragovered = null;\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                    dropIndex = this.draggables.indexOf(target);\r\n                }\r\n\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    const dragzoneId = dataTransfer.getData(\"text/plain\");\r\n                    const dragzone = document.getElementById(dragzoneId);\r\n                    if (dragzone instanceof HTMLEDragzoneElement) {\r\n                        const selectedDraggables = dragzone.selectedDraggables;\r\n                        if (selectedDraggables) {\r\n                            selectedDraggables.forEach((selectedDraggable) => {\r\n                                selectedDraggable.dragged = false;\r\n                            });\r\n                            if (dragzone instanceof HTMLEDropzoneElement) {\r\n                                dragzone.removeDraggables((draggable) => selectedDraggables.includes(draggable));\r\n                            }\r\n                            dragzone.clearSelection();\r\n                            this.addDraggables(selectedDraggables, dropIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.dragovered = null;\r\n            event.preventDefault();\r\n        });\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"placeholder\": {\r\n                const placeholderPart = this.shadowRoot.querySelector(\"[part='placeholder']\");\r\n                if (placeholderPart) {\r\n                    placeholderPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): HTMLEDraggableElement[] | null {\r\n        if (draggables.length > 0) {\r\n            let dataTransferSuccess = true;\r\n            if (this.droptest) {\r\n                dataTransferSuccess = this.droptest(this, draggables);\r\n            }\r\n            \r\n            let newDraggables: HTMLEDraggableElement[] = [];\r\n            let insertionPosition = -1;\r\n            if (dataTransferSuccess) {\r\n                if (this.multiple) {\r\n                    draggables.forEach((draggable) => {\r\n                        let newDraggable = draggable.getReference();\r\n                        if (position > -1 && position < this.draggables.length) {\r\n                            this.draggables[position].insertAdjacentElement(\"beforebegin\", newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? position : insertionPosition;\r\n                        }\r\n                        else {\r\n                            this.appendChild(newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? this.draggables.length - 1 : insertionPosition;\r\n                        }\r\n                        newDraggables.push(newDraggable);\r\n                    });\r\n                }\r\n                else {\r\n                    let newDraggable = draggables[0].getReference();\r\n                    if (this.draggables.length > 0) {\r\n                        this.replaceChild(newDraggable, this.draggables[0]);\r\n                    }\r\n                    else {\r\n                        this.appendChild(newDraggable);\r\n                    }\r\n                    newDraggables.push(newDraggable);\r\n                    insertionPosition = 0;\r\n                }\r\n            }\r\n            \r\n            const slot = this.shadowRoot?.querySelector(\"slot\");\r\n            if (slot) {\r\n                slot.addEventListener(\"slotchange\", () => {\r\n                    this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                        bubbles: true,\r\n                        detail: {\r\n                            action: \"insert\",\r\n                            draggables: newDraggables,\r\n                            position: insertionPosition\r\n                        }\r\n                    }));\r\n                }, {once: true});\r\n            }\r\n            return newDraggables;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean = () => true) {\r\n        let toRemove = this.draggables.filter(\r\n            (value: HTMLEDraggableElement, index: number) => {\r\n                return predicate(value, index);\r\n            }\r\n        );\r\n        let atPosition = this.draggables.indexOf(toRemove[0]);\r\n        toRemove.forEach((draggable) => {\r\n            draggable.remove(); \r\n        });\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                    bubbles: true,\r\n                    detail: {\r\n                        action: \"remove\",\r\n                        draggables: toRemove,\r\n                        position: atPosition\r\n                    }\r\n                }));\r\n            }, {once: true});\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEDropzoneElement: HTMLEDropzoneElementConstructor = HTMLEDropzoneElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEDialogElement };\r\n\r\ninterface HTMLEDialogElementConstructor {\r\n    prototype: HTMLEDialogElement;\r\n    new(): HTMLEDialogElement;\r\n}\r\n\r\ntype DialogElementType = \"confirm\" | \"alert\";\r\n\r\ninterface HTMLEDialogElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: DialogElementType;\r\n    open(): void;\r\n    close(): void;\r\n    cancel(): void;\r\n    confirm(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dialog\": HTMLEDialogElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"open\": Event,\r\n        \"close\": Event,\r\n        \"cancel\": Event,\r\n        \"confirm\": Event,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dialog\"\r\n})\r\nclass HTMLEDialogElementBase extends HTMLElement implements HTMLEDialogElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: DialogElementType;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            padding: 6px;\r\n                            background-color: white;\r\n        \r\n                            -webkit-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            -moz-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                        }\r\n        \r\n                        button {\r\n                            cursor: pointer;\r\n                        }\r\n        \r\n                        [part=\"actions\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part=\"header\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part=\"button\"]:not(:first-child) {\r\n                            margin-left: 4px;\r\n                        }\r\n        \r\n                        :host([type=\"confirm\"]) [part=\"ok-button\"] {\r\n                            display: none !important;\r\n                        }\r\n        \r\n                        :host([type=\"alert\"]) [part=\"cancel-button\"],\r\n                        :host([type=\"alert\"]) [part=\"confirm-button\"] {\r\n                            display: none !important;\r\n                        }\r\n                    `\r\n                    ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"header\"\r\n                },\r\n                children: [\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button close-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"x\"\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"hr\", {\r\n                attributes: {\r\n                    part: \"separator\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"body\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"hr\", {\r\n                attributes: {\r\n                    part: \"separator\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"actions\",\r\n                },\r\n                children: [\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button cancel-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"Cancel\"\r\n                        ]\r\n                    }),\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button confirm-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"Confirm\"\r\n                        ]\r\n                    }),\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button ok-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"OK\"\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n        );\r\n    }\r\n\r\n    connectedCallback() {\r\n        this.shadowRoot.addEventListener(\"click\", this);\r\n    }\r\n\r\n    handleEvent(event: Event) {\r\n        const {type, target} = event;\r\n        switch (type) {\r\n            case \"click\":\r\n                const {part} = <Element>target;\r\n                if (part.contains(\"close-button\") || part.contains(\"cancel-button\")) {\r\n                    this.cancel();\r\n                }\r\n                else if (part.contains(\"confirm-button\") || part.contains(\"ok-button\")) {\r\n                    this.confirm();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    open(): void {\r\n        this.dispatchEvent(new CustomEvent(\"open\", {bubbles: true}));\r\n    }\r\n\r\n    close(): void {\r\n        this.dispatchEvent(new CustomEvent(\"close\", {bubbles: true}));\r\n    }\r\n\r\n    cancel(): void {\r\n        this.dispatchEvent(new CustomEvent(\"cancel\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n\r\n    confirm(): void {\r\n        this.dispatchEvent(new CustomEvent(\"confirm\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n}\r\n\r\nvar HTMLEDialogElement: HTMLEDialogElementConstructor = HTMLEDialogElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEHandleElement };\r\n\r\ninterface HTMLEHandleElementConstructor {\r\n    prototype: HTMLEHandleElement;\r\n    new(): HTMLEHandleElement;\r\n}\r\n\r\ninterface HTMLEHandleElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    controls: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-handle\": HTMLEHandleElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"move\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-handle\"\r\n})\r\nclass HTMLEHandleElementBase extends HTMLElement implements HTMLEHandleElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                            \r\n                            width: 24px;\r\n                            height: 12px;\r\n                            \r\n                            background-color: rgb(0, 128, 255);\r\n\r\n                            -webkit-mask-image: url(\"assets/dots.png\");\r\n                            mask-image: url(\"assets/dots.png\");\r\n\r\n                            -webkit-mask-repeat: repeat;\r\n                            mask-repeat: repeat;\r\n                            cursor: move;\r\n                        }\r\n                    `\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"controls\": {\r\n                const {controls} = this;\r\n                this.#target = document.getElementById(controls);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        this.#target = document.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            const target = this.#target;\r\n            if (target !== null) {\r\n                const targetComputedStyle = window.getComputedStyle(target);\r\n                const {movementX, movementY} = event;\r\n                const {width: rectWidth, height: rectHeight} = target.getBoundingClientRect();\r\n                const outerElement = target.parentElement ?? document.body;\r\n                const {\r\n                    left: outerRectLeft, right: outerRectRight,\r\n                    top: outerRectTop, bottom: outerRectBottom\r\n                } = outerElement.getBoundingClientRect();\r\n                const left = parseFloat(targetComputedStyle.getPropertyValue(\"left\"));\r\n                const newLeft = Math.max(outerRectLeft, Math.min(Math.trunc(left + movementX), outerRectRight - rectWidth));\r\n                const top = parseFloat(targetComputedStyle.getPropertyValue(\"top\"));\r\n                const newTop = Math.max(outerRectTop, Math.min(Math.trunc(top + movementY), outerRectBottom - rectHeight));\r\n                target.style.setProperty(\"left\", `${newLeft}px`);\r\n                target.style.setProperty(\"top\", `${newTop}px`);\r\n                this.dispatchEvent(new CustomEvent(\"move\"));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEHandleElement: HTMLEHandleElementConstructor = HTMLEHandleElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEHeightSashElement };\r\n\r\ninterface HTMLEHeightSashElementConstructor {\r\n    prototype: HTMLEHeightSashElement;\r\n    new(): HTMLEHeightSashElement;\r\n}\r\n\r\ninterface HTMLEHeightSashElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    controls: string;\r\n    growdir: \"top\" | \"bottom\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-hsash\": HTMLEHeightSashElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"resize\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-hsash\"\r\n})\r\nclass HTMLEHeightSashElementBase extends HTMLElement implements HTMLEHeightSashElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"top\"})\r\n    growdir!: \"top\" | \"bottom\";\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n    #queuedPointerCallback: FrameRequestCallback | null;\r\n    #pointerMovement: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            width: 100%;\r\n        \r\n                            max-height: 4px;\r\n                            height: 4px;\r\n                            min-height: 4px;\r\n        \r\n                            margin-top: -2px;\r\n                            margin-bottom: -2px;\r\n                            \r\n                            background-color: rgb(135, 206, 250);\r\n                            cursor: ns-resize;\r\n        \r\n                            transition-property: opacity;\r\n                            transition-delay: 0.2s;\r\n                            transition-duration: 0.2s;\r\n                            transition-timing-function: ease-out;\r\n                            opacity: 0;\r\n                        }\r\n        \r\n                        :host(:active),\r\n                        :host(:hover) {\r\n                            opacity: 1;\r\n                        }\r\n                    `\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#queuedPointerCallback = null;\r\n        this.#pointerMovement = 0;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        const rootNode = <ShadowRoot | Document>this.getRootNode();\r\n        this.#target = rootNode.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            if (this.#queuedPointerCallback == null) {\r\n                this.#pointerMovement = event.movementY;\r\n                this.#queuedPointerCallback = this.#pointerMoveCallback.bind(this);\r\n                requestAnimationFrame(this.#queuedPointerCallback);\r\n            }\r\n            else {\r\n                this.#pointerMovement += event.movementY;\r\n            }\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const {growdir} = this;\r\n            const movementY = this.#pointerMovement;\r\n            const height = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            const newHeight = Math.trunc(height + (growdir == \"top\" ? -1 : 1) * movementY);\r\n            target.style.setProperty(\"height\", `${newHeight}px`);\r\n            const computedNewHeight = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            target.style.setProperty(\"height\", `${computedNewHeight}px`);\r\n            this.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        this.#queuedPointerCallback = null;\r\n    }\r\n}\r\n\r\nvar HTMLEHeightSashElement: HTMLEHeightSashElementConstructor = HTMLEHeightSashElementBase;","import { CustomElement, AttributeProperty } from \"../Element\";\r\n\r\nexport { HTMLEImportElement };\r\n\r\ninterface HTMLEImportElementConstructor {\r\n    prototype: HTMLEImportElement;\r\n    new(): HTMLEImportElement;\r\n}\r\n\r\ninterface HTMLEImportElement extends HTMLElement {\r\n    src: string;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-import\": HTMLEImportElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"load\": Event;\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-import\"\r\n})\r\nclass HTMLEImportElementBase extends HTMLElement implements HTMLEImportElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    src!: string;\r\n    \r\n    connectedCallback(): void {\r\n        const {src} = this;\r\n        if (src) {\r\n            this.#importRequest(src);\r\n        }\r\n    }\r\n\r\n    async #importRequest(src: string): Promise<void> {\r\n        this.outerHTML = await fetch(src).then((response: Response) => {\r\n            if (response.ok) {\r\n                return response.text();\r\n            }\r\n            else {\r\n                throw new Error(response.statusText);\r\n            }\r\n        });\r\n        this.dispatchEvent(new Event(\"load\", {bubbles: true}));\r\n    }\r\n}\r\n\r\nvar HTMLEImportElement: HTMLEImportElementConstructor = HTMLEImportElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLELoaderElement };\r\n\r\ninterface HTMLELoaderElementConstructor {\r\n    prototype: HTMLELoaderElement;\r\n    new(): HTMLELoaderElement;\r\n}\r\n\r\ninterface HTMLELoaderElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    type: \"bar\" | \"circle\";\r\n    promise: Promise<any> | null;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-loader\": HTMLELoaderElement,\r\n    }\r\n}\r\n\r\nvar barShadowTemplate: HTMLTemplateElement;\r\nvar circleShadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-loader\"\r\n})\r\nclass HTMLELoaderElementBase extends HTMLElement implements HTMLELoaderElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String, defaultValue: \"bar\", observed: true})\r\n    type!: \"bar\" | \"circle\";\r\n    \r\n    #promise: Promise<any> | null;\r\n\r\n    static {\r\n        const commonStyle = element(\"style\", {\r\n            children: [\r\n                /*css*/`\r\n                    :host {\r\n                        display: inline-block;\r\n                        --default-loader-color: rgb(0, 128, 255);\r\n                        --default-animation-duration: 2s;\r\n                    }\r\n                `\r\n            ]\r\n        });\r\n        const barStyle = commonStyle.cloneNode(true);\r\n        const circleStyle = commonStyle.cloneNode(true);\r\n        barStyle.textContent += /*css*/`\r\n            :host {\r\n                display: block;\r\n            }\r\n\r\n            [part=\"bar\"] {\r\n                position: relative;\r\n                display: block;\r\n                overflow: hidden;\r\n                height: 6px;\r\n                width: 100%;\r\n            }\r\n\r\n            [part=\"slider\"] {\r\n                display: flex;\r\n                position: absolute;\r\n                width: 100%;\r\n                height: 100%;\r\n                animation-name: slider;\r\n            }\r\n\r\n            [part=\"slider\"],\r\n            [part=\"cursor\"] {\r\n                border-radius: 4px;\r\n                will-change: transform;\r\n                animation-duration: var(--animation-duration, var(--default-animation-duration));\r\n                animation-timing-function: linear;\r\n                animation-iteration-count: infinite;\r\n            }\r\n\r\n            [part=\"cursor\"] {\r\n                display: block;\r\n                width: 128px;\r\n                background-color: var(--loader-color, var(--default-loader-color));\r\n                animation-name: cursor;\r\n            }\r\n\r\n            [part=\"bar\"]:after {\r\n                animation-name: shine;\r\n                animation-duration: var(--animation-duration, var(--default-animation-duration));\r\n                animation-iteration-count: infinite;\r\n                animation-fill-mode: forwards;  \r\n                content: \"\";\r\n                position: absolute;\r\n                left: -100%;\r\n                width: 100%;\r\n                height: 100%;\r\n                top: 0;\r\n                opacity: 0;\r\n                \r\n                background: rgba(255, 255, 255, 0.13);\r\n                background: linear-gradient(\r\n                    to right, \r\n                    rgba(255, 255, 255, 0) 0%,\r\n                    rgba(255, 255, 255, 0.1) 10%,\r\n                    rgba(255, 255, 255, 0.9) 80%,\r\n                    rgba(255, 255, 255, 0) 100%\r\n                );\r\n            }\r\n\r\n            @keyframes shine {\r\n                25% {\r\n                    opacity: 1;\r\n                    left: -100%;\r\n                }\r\n                100% {\r\n                    opacity: 0;\r\n                    left: 100%;\r\n                }\r\n            }\r\n\r\n            @keyframes slider {\r\n                0% {\r\n                    transform: translateX(0%);\r\n                }\r\n                100% {\r\n                    transform: translateX(100%);\r\n                }\r\n            }\r\n\r\n            @keyframes cursor {\r\n                0% {\r\n                    transform: translateX(-100%);\r\n                }\r\n                100% {\r\n                    transform: translateX(100%);\r\n                }\r\n            }\r\n        `;\r\n        circleStyle.textContent += /*css*/`\r\n            :host {\r\n                display: inline-block;\r\n            }\r\n\r\n            [part=\"circle\"] {\r\n                width: 12px;\r\n                height: 12px;\r\n                border-top: 4px solid var(--loader-color, var(--default-loader-color));\r\n                border-right: 4px solid var(--loader-color, var(--default-loader-color));\r\n                border-left: 4px solid transparent;\r\n                border-bottom: 4px solid transparent;\r\n                border-radius: 50%;\r\n                animation-duration: 1s;\r\n                animation-name: circle;\r\n                animation-timing-function: linear;\r\n                animation-iteration-count: infinite;\r\n            }\r\n\r\n            @keyframes circle {\r\n                0% {\r\n                    transform: rotate(0);\r\n                }\r\n                100% {\r\n                    transform: rotate(360deg);\r\n                }\r\n            }\r\n        `;\r\n        barShadowTemplate = element(\"template\");\r\n        barShadowTemplate.content.append(\r\n            barStyle,\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"bar\"\r\n                },\r\n                children: [\r\n                    element(\"div\", {\r\n                        attributes: {\r\n                            part: \"slider\"\r\n                        },\r\n                        children: [\r\n                            element(\"div\", {\r\n                                attributes: {\r\n                                    part: \"cursor\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n        circleShadowTemplate = element(\"template\");\r\n        circleShadowTemplate.content.append(\r\n            circleStyle,\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"circle\"\r\n                }\r\n            })\r\n        )\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.#updateTemplate();\r\n        this.#promise = null;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"type\": {\r\n                this.#updateTemplate();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    set promise(promise: Promise<any> | null) {\r\n        if (promise) {\r\n            promise.finally(() => {\r\n                this.remove();\r\n            });\r\n        }\r\n        this.#promise = promise;\r\n    }\r\n\r\n    get promise(): Promise<any> | null {\r\n        return this.#promise;\r\n    }\r\n\r\n    #updateTemplate(): void {\r\n        const {type, shadowRoot} = this;\r\n        switch (type) {\r\n            case \"circle\": {\r\n                shadowRoot.replaceChildren(\r\n                    circleShadowTemplate.content.cloneNode(true)\r\n                );\r\n                break;\r\n            }\r\n            case \"bar\": {\r\n                shadowRoot.replaceChildren(\r\n                    barShadowTemplate.content.cloneNode(true)\r\n                );\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLELoaderElement: HTMLELoaderElementConstructor = HTMLELoaderElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEWidthSashElement };\r\n\r\ninterface HTMLEWidthSashElementConstructor {\r\n    prototype: HTMLEWidthSashElement;\r\n    new(): HTMLEWidthSashElement;\r\n}\r\n\r\ninterface HTMLEWidthSashElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    controls: string;\r\n    growdir: \"right\" | \"left\";\r\n    max: boolean;\r\n    setWidth(width: number): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-wsash\": HTMLEWidthSashElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"resize\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-wsash\"\r\n})\r\nclass HTMLEWidthSashElementBase extends HTMLElement implements HTMLEWidthSashElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"right\"})\r\n    growdir!: \"right\" | \"left\";\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    max!: boolean;\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n    #queuedPointerCallback: FrameRequestCallback | null;\r\n    #pointerMovement: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            width: 4px;\r\n                            \r\n                            background-color: transparent;\r\n                            cursor: ew-resize;\r\n        \r\n                            transition-property: opacity;\r\n                            transition-delay: 0.2s;\r\n                            transition-duration: 0.2s;\r\n                            transition-timing-function: ease-out;\r\n                        }\r\n        \r\n                        :host(:active),\r\n                        :host(:hover) {\r\n                            background-color: rgb(135, 206, 250);\r\n                        }\r\n                    `\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#queuedPointerCallback = null;\r\n        this.#pointerMovement = 0;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    setWidth(width: number): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const {max} = this;\r\n            target.style.setProperty(\"width\", `${width}px`);\r\n            if (max) {\r\n                target.style.setProperty(\"max-width\", `${width}px`);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        const rootNode = <ShadowRoot | Document>this.getRootNode();\r\n        this.#target = rootNode.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            if (this.#queuedPointerCallback == null) {\r\n                this.#queuedPointerCallback = this.#pointerMoveCallback.bind(this);\r\n                requestAnimationFrame(this.#queuedPointerCallback);\r\n            }\r\n            this.#pointerMovement += event.movementX;\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const {growdir} = this;\r\n            const movementX = this.#pointerMovement;\r\n            const width = parseFloat(targetComputedStyle.getPropertyValue(\"width\"));\r\n            const newWidth = width + (growdir == \"right\" ? 1 : -1) * movementX;\r\n            this.setWidth(newWidth);\r\n            this.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        this.#pointerMovement = 0;\r\n        this.#queuedPointerCallback = null;\r\n    }\r\n}\r\n\r\nvar HTMLEWidthSashElement: HTMLEWidthSashElementConstructor = HTMLEWidthSashElementBase;","import { areAttributesMatching, AttributeMutationMixin } from \"../elements/Element\";\r\n\r\nexport { AttributeMixinsObserver };\r\n\r\ninterface AttributeMixinsObserverConstructor {\r\n    prototype: AttributeMixinsObserver;\r\n    new(mixins: AttributeMutationMixin[]): AttributeMixinsObserver;\r\n}\r\n\r\ninterface AttributeMixinsObserver {\r\n    observe(target: Node): void;\r\n    trigger(): void;\r\n    disconnect(): void;\r\n}\r\n\r\nclass AttributeMixinsObserverBase implements AttributeMixinsObserver {\r\n    #observer: MutationObserver;\r\n    #mixins: AttributeMutationMixin[];\r\n\r\n    constructor(mixins: AttributeMutationMixin[]) {\r\n        this.#observer = new MutationObserver(\r\n            this.#callback.bind(this)\r\n        );\r\n        this.#mixins = mixins.slice();\r\n    }\r\n\r\n    trigger(): void {\r\n        this.#callback(this.#observer.takeRecords());\r\n    }\r\n\r\n    observe(target: Node): void  {\r\n        this.#observer.observe(target, {\r\n            childList: true,\r\n            subtree: true,\r\n            attributeFilter: this.#mixins.map((mixin => mixin.attributeName))\r\n        });\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#observer.disconnect();\r\n    }\r\n\r\n    #callback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            mutation.addedNodes.forEach((node: Node) => {\r\n                if (node instanceof Element) {\r\n                    this.#attachMatchingAttributeMixinsInSubtree(node);\r\n                }\r\n            });\r\n            mutation.removedNodes.forEach((node: Node) => {\r\n                if (node instanceof Element) {\r\n                    this.#detachMatchingAttributeMixinsInSubtree(node);\r\n                }\r\n            });\r\n            if (mutation.target instanceof Element) {\r\n                const targetElement = mutation.target;\r\n                const attributeName = mutation.attributeName;\r\n                if (attributeName) {\r\n                    const relatedMixins = this.#mixins.filter(mixin => mixin.attributeName == attributeName);\r\n                    relatedMixins.forEach((mixin) => {\r\n                        if (areAttributesMatching(\r\n                                mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                                attributeName!, targetElement.getAttribute(attributeName!)\r\n                            )) {\r\n                                mixin.attach(targetElement);\r\n                        }\r\n                        else {\r\n                            mixin.detach(targetElement);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    #attachMatchingAttributeMixinsInSubtree(element: Element) {\r\n        Array.from(element.attributes).forEach((attr) => {\r\n            let matchingMixins = this.#mixins.filter(\r\n                mixin => areAttributesMatching(\r\n                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                    attr.name, attr.value\r\n                )\r\n            );\r\n            matchingMixins.forEach((mixin) => {\r\n                mixin.attach(element);\r\n            });\r\n        });\r\n        let childIndex = 0;\r\n        const {children} = element;\r\n        while (childIndex < children.length) {\r\n            const child = children.item(childIndex);\r\n            if (child !== null) {\r\n                this.#attachMatchingAttributeMixinsInSubtree(child);\r\n            }\r\n            childIndex++;\r\n        }\r\n    }\r\n\r\n    #detachMatchingAttributeMixinsInSubtree(element: Element) {\r\n        Array.from(element.attributes).forEach((attr) => {\r\n            let matchingMixins = this.#mixins.filter(\r\n                mixin => areAttributesMatching(\r\n                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                    attr.name, attr.value\r\n                )\r\n            );\r\n            matchingMixins.forEach((mixin) => {\r\n                mixin.detach(element);\r\n            });\r\n        });\r\n        let childIndex = 0;\r\n        const {children} = element;\r\n        while (childIndex < children.length) {\r\n            const child = children.item(childIndex);\r\n            if (child !== null) {\r\n                this.#detachMatchingAttributeMixinsInSubtree(child);\r\n            }\r\n            childIndex++;\r\n        }\r\n    }\r\n}\r\n\r\nvar AttributeMixinsObserver: AttributeMixinsObserverConstructor = AttributeMixinsObserverBase;","import { ReactiveChildElements } from \"../../elements/Element\";\r\nimport { camelToTrain } from \"../../elements/Snippets\";\r\n\r\nexport { WidgetFactoryConstructor };\r\n\r\nexport { widget };\r\nexport { Widget };\r\nexport { WidgetFactory };\r\nexport { widgets };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {}\r\n}\r\n\r\ninterface WidgetFactoryConstructor {\r\n    prototype: WidgetFactory;\r\n    new(): WidgetFactory;\r\n}\r\n\r\ninterface WidgetFactory {\r\n    create(properties?: object): HTMLElement;\r\n    slot(root: HTMLElement, name: string | null): HTMLElement | null;\r\n}\r\n\r\nvar slotsMap: WeakMap<HTMLElement, {\r\n    widget: WidgetFactory,\r\n    element: WeakRef<HTMLElement>;\r\n    slot: string | null;\r\n}[]> = new WeakMap();\r\nvar slotsObserver = new MutationObserver(\r\n    (mutationsList: MutationRecord[]) => {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            if (target instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"childList\": {\r\n                        const slotReferences = slotsMap.get(target);\r\n                        if (slotReferences) {\r\n                            slotReferences.forEach(slotRef_i => {\r\n                                const {widget, element, slot} = slotRef_i;\r\n                                const slottedCallback = (widget as any)[\"slottedCallback\"];\r\n                                if (typeof slottedCallback == \"function\") {\r\n                                    slottedCallback(element.deref(), target, slot);\r\n                                }\r\n                            });\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n);\r\n\r\nvar widgetsMap: WeakMap<HTMLElement, WidgetFactory> = new WeakMap();\r\nvar attributesObserver = new MutationObserver(\r\n    (mutationsList: MutationRecord[]) => {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            if (target instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"attributes\": {\r\n                        const {attributeName, oldValue} = mutation;\r\n                        const widget = widgetsMap.get(target);\r\n                        if (widget) {\r\n                            const attributeChangedCallback = (widget as any)[\"attributeChangedCallback\"];\r\n                            if (typeof attributeChangedCallback == \"function\") {\r\n                                attributeChangedCallback(target, attributeName, oldValue, target.getAttribute(attributeName!));\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n);\r\n\r\nclass WidgetFactoryBase implements WidgetFactory {\r\n\r\n    constructor() {\r\n        const widget = <WidgetFactory>this;\r\n        this.create = new Proxy(\r\n            this.create, {\r\n                apply: (target, thisArg, argumentsList: Parameters<WidgetFactory[\"create\"]>) => {\r\n                    const element = <HTMLElement>Reflect.apply(target, thisArg, argumentsList);\r\n                    const observedSlots = <(string | null)[]>(widget as any)[\"observedSlots\"];\r\n                    if (Array.isArray(observedSlots)) {\r\n                        const slots = observedSlots\r\n                            .map(slotName_i => {\r\n                                return {\r\n                                    slotName: slotName_i,\r\n                                    slotElement: widget.slot(element, slotName_i)\r\n                                };\r\n                            });\r\n                        slots.forEach(slot_i => {\r\n                            const {slotElement, slotName} = slot_i;\r\n                            if (slotElement) {\r\n                                slotsObserver.observe(slotElement, {\r\n                                    childList: true\r\n                                });\r\n                                const slotReferences = slotsMap.get(slotElement);\r\n                                const slotReference = {widget, element: new WeakRef(element), slot: slotName};\r\n                                if (Array.isArray(slotReferences)) {\r\n                                    slotReferences.push(slotReference);\r\n                                }\r\n                                else {\r\n                                    slotsMap.set(slotElement, new Array(slotReference));\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                    const observedAttributes = (widget as any)[\"observedAttributes\"];\r\n                    if (Array.isArray(observedAttributes)) {\r\n                        widgetsMap.set(element, widget);\r\n                        attributesObserver.observe(element, {\r\n                            attributes: true,\r\n                            attributeFilter: observedAttributes,\r\n                            attributeOldValue: true\r\n                        });\r\n                    }\r\n                    return element;\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    create(): HTMLElement {\r\n        throw new Error(`create method is not implemented`);\r\n    }\r\n\r\n    slot(): HTMLElement | null {\r\n        return null;\r\n    }\r\n\r\n    get observedSlots(): string[] {\r\n        return [\"\"];\r\n    }\r\n}\r\n\r\nvar WidgetFactory: WidgetFactoryConstructor = WidgetFactoryBase;\r\nvar widgets: Map<string, WidgetFactory> = new Map();\r\n\r\ninterface WidgetInit<K extends keyof WidgetNameMap> {\r\n    properties?: Parameters<WidgetNameMap[K][\"create\"]>[0],\r\n    attributes?: {\r\n        [name: string]: number | string | boolean\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    slotted?: {\r\n        [slot: string]: Node | string | (Node | string)[] | NodeList | ReactiveChildElements\r\n    } | (Node | string | (Node | string)[] | NodeList | ReactiveChildElements),\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: K, init?: WidgetInit<K>): ReturnType<WidgetNameMap[K][\"create\"]>;\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: K, init?: WidgetInit<K>): HTMLElement {\r\n    const widget = widgets.get(name);\r\n    if (widget) {\r\n        if (init !== undefined) {\r\n            const {properties, attributes, dataset, slotted, listeners} = init;\r\n            const element = widget.create(properties);\r\n            if (attributes) {\r\n                Object.entries(attributes).forEach(([attributeName, attributeValue]) => {\r\n                    if (attributeValue !== undefined) {\r\n                        if (typeof attributeValue === \"boolean\") {\r\n                            element.toggleAttribute(camelToTrain(attributeName), attributeValue);\r\n                        }\r\n                        else {\r\n                            element.setAttribute(camelToTrain(attributeName), String(attributeValue));\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            if (dataset) {\r\n                const {dataset: elementDataset} = element;\r\n                Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                    elementDataset[datasetEntry_i] = String(dataset[datasetEntry_i]);\r\n                });\r\n            }\r\n            if (slotted) {\r\n                if (typeof slotted === \"function\" || Array.isArray(slotted) || slotted instanceof NodeList || typeof slotted === \"string\" || slotted instanceof Node) {\r\n                    const slot = widget.slot(element, null);\r\n                    if (slot) {\r\n                        if (typeof slotted === \"function\") {\r\n                            slot.append(...slotted(slot));\r\n                        }\r\n                        else if (typeof slotted === \"object\" && \"length\" in slotted) {\r\n                            slot.append(...Array.from(slotted));\r\n                        }\r\n                        else {\r\n                            slot.append(slotted);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    Object.entries(slotted).forEach(([slot_i, slotted]) => {\r\n                        const slot = widget.slot(element, slot_i);\r\n                        if (slot) {\r\n                            if (typeof slotted === \"function\") {\r\n                                slot.append(...slotted(slot));\r\n                            }\r\n                            else if (typeof slotted === \"object\" && \"length\" in slotted) {\r\n                                slot.append(...Array.from(slotted));\r\n                            }\r\n                            else {\r\n                                slot.append(slotted);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            if (listeners) {\r\n                Object.entries(listeners).forEach(([name_i, listener_i]) => {\r\n                    if (Array.isArray(listener_i)) {\r\n                        element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                    }\r\n                    else {\r\n                        element.addEventListener(name_i, listener_i);\r\n                    }\r\n                });\r\n            }\r\n            return element;\r\n        }\r\n        else {\r\n            return widget.create();\r\n        }\r\n    }\r\n    throw new Error(`Unknown widget ${name}. The corresponding module might not be imported.`);\r\n}\r\n\r\ninterface WidgetDecorator {\r\n    (init: {\r\n        name: string;\r\n    }): <W extends WidgetFactoryConstructor>(widget: W) => W;\r\n}\r\n\r\nconst Widget: WidgetDecorator = function(init: {\r\n    name: string;\r\n}) {\r\n    return <W extends WidgetFactoryConstructor>(\r\n        widget: W\r\n    ) => {\r\n        const {name} = init;\r\n        widgets.set(\r\n            name,\r\n            new widget()\r\n        );\r\n        return widget;\r\n    }\r\n}","import { element } from \"../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"./Widget\";\r\n\r\nexport { separatorWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"separator\": SeparatorWidgetFactory\r\n    }\r\n}\r\n\r\ninterface SeparatorWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar separatorWidget = new (\r\nWidget({\r\n    name: \"separator\"\r\n})(class SeparatorWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"separator\",\r\n                role: \"separator\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuItemWidget };\r\n\r\ntype MenuItemType = \"button\" | \"radio\" | \"checkbox\" | \"menu\" | \"submenu\";\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menuitem\": MenuItemWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        type?: MenuItemType;\r\n        checked?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void;\r\n    getMenu(item: HTMLElement): HTMLElement | null;\r\n    getKeyShortcut(item: HTMLElement): string | null;\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    getType(item: HTMLElement): MenuItemType | null;\r\n    setType(item: HTMLElement, type: MenuItemType): void;\r\n    getValue(item: HTMLElement): string;\r\n    setValue(item: HTMLElement, value: string): void;\r\n    getName(item: HTMLElement): string;\r\n    setName(item: HTMLElement, value: string): void;\r\n    getChecked(item: HTMLElement): boolean;\r\n    setChecked(item: HTMLElement, value: boolean): void;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setExpanded(item: HTMLElement, value: boolean): void;\r\n    getExpanded(item: HTMLElement): boolean;\r\n    toggle(item: HTMLElement, force?: boolean): void;\r\n    expand(item: HTMLElement): void;\r\n    collapse(item: HTMLElement): void;\r\n}\r\n\r\nvar menuItemWidget = new(\r\nWidget({\r\n    name: \"menuitem\"\r\n})(\r\nclass MenuItemWidgetFactoryBase extends WidgetFactory implements MenuItemWidgetFactory {\r\n    #iconPartTemplate: HTMLElement;\r\n    #arrowPartTemplate : HTMLElement;\r\n    #keyshortcutsPartTemplate: HTMLElement;\r\n    #template: HTMLElement;\r\n    #types: MenuItemType[];\r\n    #typesFeatures: {\r\n        [key in MenuItemType]: {\r\n            role: string,\r\n            hasIcon: boolean,\r\n            hasArrow: boolean\r\n        }\r\n    };\r\n\r\n    constructor() {\r\n        super();\r\n        this.#iconPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"icon\"\r\n            }\r\n        });\r\n        this.#arrowPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"arrow\"\r\n            }\r\n        });\r\n        this.#keyshortcutsPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"keyshortcuts\"\r\n            }\r\n        });\r\n        this.#template = element(\"button\", {\r\n            attributes: {\r\n                class: \"menuitem\",\r\n                role: \"menuitem\",\r\n                type: \"button\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                this.#iconPartTemplate.cloneNode(true),\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n        this.#types = [\"checkbox\", \"radio\", \"menu\", \"submenu\", \"button\"];\r\n        this.#typesFeatures = {\r\n            button: {\r\n                role: \"menuitem\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            checkbox: {\r\n                role: \"menuitemcheckbox\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            radio: {\r\n                role: \"menuitemradio\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            menu: {\r\n                role: \"menuitem\",\r\n                hasIcon: false,\r\n                hasArrow: false\r\n            },\r\n            submenu: {\r\n                role: \"menuitem\",\r\n                hasIcon: true,\r\n                hasArrow: true\r\n            }\r\n        }\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        type: MenuItemType;\r\n        checked?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (init !== undefined) {\r\n            const {id, classList, tabIndex, keyshortcut, checked, type, label, name, value, disabled} = init;\r\n            if (id !== undefined) {\r\n                item.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                item.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                item.tabIndex = tabIndex;\r\n            }\r\n            if (keyshortcut !== undefined) {\r\n                this.setKeyShortcut(item, keyshortcut);\r\n            }\r\n            if (checked !== undefined) {\r\n                this.setChecked(item, checked);\r\n            }\r\n            if (type !== undefined) {\r\n                if (type == \"menu\" || type == \"submenu\") {\r\n                    this.setExpanded(item, false);\r\n                }\r\n                this.setType(item, type);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(item, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(item, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(item: HTMLElement): HTMLElement | null {\r\n        return item;\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void {\r\n        const hasChildMenu = Array.from(slot.childNodes).some(\r\n            childNode_i => childNode_i instanceof HTMLElement && childNode_i.classList.contains(\"menu\")\r\n        );\r\n        item.setAttribute(\"aria-haspopup\", String(hasChildMenu));\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n\r\n    getMenu(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .menu\");\r\n    }\r\n\r\n    getKeyShortcut(item: HTMLElement): string | null {\r\n        return item.getAttribute(\"aria-keyshortcuts\");\r\n    }\r\n\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void {\r\n        let keyshortcutsPart = item.querySelector(\":scope > .keyshortcuts\");\r\n        if (value !== null) {\r\n            item.setAttribute(\"aria-keyshortcuts\", value);\r\n            if (!keyshortcutsPart) {\r\n                const labelPart = this.#label(item);\r\n                const keyshortcutsPartTemplate = this.#keyshortcutsPartTemplate;\r\n                keyshortcutsPart = <HTMLElement>keyshortcutsPartTemplate.cloneNode(true);\r\n                labelPart.after(keyshortcutsPart);\r\n            }\r\n            keyshortcutsPart.textContent = value;\r\n        }\r\n        else {\r\n            item.removeAttribute(\"aria-keyshortcuts\");\r\n            if (keyshortcutsPart) {\r\n                keyshortcutsPart.remove();\r\n            }\r\n        }\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n    \r\n    getType(item: HTMLElement): MenuItemType | null {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`menuitem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setType(item: HTMLElement, type: MenuItemType): void {\r\n        const typesFeatures = this.#typesFeatures;\r\n        const iconPartTemplate = this.#iconPartTemplate;\r\n        const arrowPartTemplate = this.#arrowPartTemplate;\r\n        const {role, hasIcon, hasArrow} = typesFeatures[type];\r\n        const oldType = this.getType(item);\r\n        const {classList} = item;\r\n        if (oldType) {\r\n            classList.remove(`menuitem-${oldType}`);\r\n        }\r\n        classList.add(`menuitem-${type}`);\r\n        item.setAttribute(\"role\", role);\r\n        const labelPart = this.#label(item);\r\n        const iconPart = item.querySelector(\":scope > .icon\");\r\n        const arrowPart = item.querySelector(\":scope > .arrow\");\r\n        if (hasIcon) {\r\n            if (!iconPart && labelPart) {\r\n                labelPart.before(iconPartTemplate.cloneNode(true));\r\n            }\r\n        }\r\n        else {\r\n            if (iconPart) {\r\n                iconPart.remove();\r\n            }\r\n        }\r\n        if (hasArrow) {\r\n            if (!arrowPart && labelPart) {\r\n                labelPart.after(arrowPartTemplate.cloneNode(true));\r\n            }\r\n        }\r\n        else {\r\n            if (arrowPart) {\r\n                arrowPart.remove();\r\n            }\r\n        }\r\n    }\r\n\r\n    getValue(item: HTMLElement): string {\r\n        return item.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"value\", value);\r\n    }\r\n    \r\n    getName(item: HTMLElement): string {\r\n        return item.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getChecked(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-checked\") ?? String(false));\r\n    }\r\n\r\n    setChecked(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-checked\", String(value));\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-expanded\", String(value));\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-expanded\") ?? String(false));\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        const expand = force ?? !this.getExpanded(item);\r\n        this.setExpanded(item, expand);\r\n        if (expand) {\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    expand(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (!expanded) {\r\n            this.setExpanded(item, true);\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    collapse(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (expanded) {\r\n            this.setExpanded(item, false);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.setChecked(targetItem, !this.getChecked(targetItem));\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.setChecked(targetItem, true);\r\n                    break;\r\n                }\r\n                case \"menu\":\r\n                case \"submenu\": {\r\n                    this.toggle(targetItem);\r\n                    if (this.getExpanded(targetItem)) {\r\n                        this.getMenu(targetItem)?.focus({preventScroll: true});\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(item: HTMLElement): void {\r\n        const menu = this.getMenu(item);\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = item.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const type = this.getType(item);\r\n            if (type == \"menu\") {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const closestMenu = item.closest(\".menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    const overflowX = itemRight + menuWidth - clientWidth;\r\n                    const overflowY = itemTop + menuHeight - clientHeight;\r\n                    menuStyle.setProperty(\"left\", `${\r\n                        overflowX > 0 ?\r\n                        itemLeft - menuWidth - closestMenuLeft :\r\n                        itemRight - closestMenuLeft\r\n                    }px`);\r\n                    const menuComputedStyle = window.getComputedStyle(menu);\r\n                    const {paddingTop, paddingBottom} = menuComputedStyle;\r\n                    const menuPaddingTop = parseFloat(paddingTop);\r\n                    const menuPaddingBottom = parseFloat(paddingBottom);\r\n                    menuStyle.setProperty(\"top\", `${\r\n                        overflowY > 0 ?\r\n                        itemBottom - menuHeight - closestMenuTop + menuPaddingBottom :\r\n                        itemTop - closestMenuTop - menuPaddingTop\r\n                    }px`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { menuItemWidget } from \"./MenuItemWidget\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuBarWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menubar\": MenuBarWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuBarWidgetFactory extends WidgetFactory {\r\n    setExpanded(menubar: HTMLElement, value: boolean): void;\r\n    getExpanded(menubar: HTMLElement): boolean;\r\n}\r\n\r\nvar menuBarWidget = new (\r\nWidget({\r\n    name: \"menubar\"\r\n})(class MenubarWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menubar\",\r\n                role: \"menubar\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        )\r\n    }\r\n\r\n    create() {\r\n        const menubar = <HTMLElement>this.#template.cloneNode(true);\r\n        menubar.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        menubar.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        menubar.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        menubar.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        menubar.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        return menubar;\r\n    }\r\n\r\n    slot(menubar: HTMLElement) {\r\n        return menubar;\r\n    }\r\n\r\n    setExpanded(menubar: HTMLElement, value: boolean): void {\r\n        menubar.toggleAttribute(\"aria-expanded\", value);\r\n    }\r\n\r\n    getExpanded(menubar: HTMLElement): boolean {\r\n        return menubar.hasAttribute(\"aria-expanded\");\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node) {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"menuitem\") && !menuItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"menuitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getActiveItem(menubar: HTMLElement): HTMLElement | null {\r\n        return menubar.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem:focus-within\"\r\n        );\r\n    }\r\n\r\n    #firstItem(menubar: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menubar;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(menubar: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menubar;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n\r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = menuItemWidget.getMenu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #isClosestMenu(menubar: HTMLElement, target: HTMLElement): boolean {\r\n        return target.closest(\":is(.menubar, .menu)\") == menubar;\r\n    }\r\n\r\n    #nearestItem(menubar: HTMLElement, target: HTMLElement): HTMLElement | null {\r\n        return Array.from(menubar.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem) {\r\n            const expanded = this.getExpanded(menubar);\r\n            const isClosestMenu = this.#isClosestMenu(menubar, targetItem);\r\n            if (isClosestMenu) {\r\n                const isExpanded = !expanded;\r\n                this.setExpanded(menubar, isExpanded);\r\n                if (isExpanded) {\r\n                    if (targetItem !== null && !menuItemWidget.getExpanded(targetItem)) {\r\n                        menuItemWidget.expand(targetItem);\r\n                    }\r\n                    const menu = menuItemWidget.getMenu(targetItem);\r\n                    menu?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    menubar.focus({preventScroll: true})\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && this.getExpanded(menubar)) {\r\n            const nearestItem = this.#nearestItem(menubar, target);\r\n            if (nearestItem) {\r\n                menuItemWidget.expand(nearestItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && !target.contains(<Element>relatedTarget)) {\r\n            const nearestItem = this.#nearestItem(menubar, target);\r\n            if (nearestItem) {\r\n                menuItemWidget.collapse(nearestItem);\r\n            }\r\n        }\r\n        const lostFocusWithin = !menubar.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.setExpanded(menubar, false);\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const activeItem = this.#getActiveItem(menubar);\r\n            const expanded = this.getExpanded(menubar);\r\n            const isClosestMenu = this.#isClosestMenu(menubar, target);\r\n            if (isClosestMenu && target !== activeItem && expanded) {\r\n                const menu = menuItemWidget.getMenu(target);\r\n                if (menu) {\r\n                    menu.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    target.focus({preventScroll: true});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        let activeItem = this.#getActiveItem(menubar);\r\n        const expanded = this.getExpanded(menubar);\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem(menubar) :\r\n                    this.#firstItem(menubar);\r\n                previousItem?.focus({preventScroll: true});\r\n                activeItem = this.#getActiveItem(menubar);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem(menubar) : \r\n                    this.#lastItem(menubar);\r\n                nextItem?.focus({preventScroll: true});\r\n                activeItem = this.#getActiveItem(menubar);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    this.setExpanded(menubar, !expanded);\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.setExpanded(menubar, false);\r\n                    if (activeItem) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    menubar.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { menuItemWidget } from \"./MenuItemWidget\";\r\n\r\nexport { menuWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menu\": MenuWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        contextual?: boolean;\r\n        position?: {x: number, y: number};\r\n    }): HTMLElement;\r\n    setPosition(menu: HTMLElement, x: number, y: number): void;\r\n    getContextual(menu: HTMLElement): boolean;\r\n    setContextual(menu: HTMLElement, value: boolean): void;\r\n    items(menu: HTMLElement): HTMLElement[];\r\n}\r\n\r\nvar mouseOverExpandDelay = 0_200;\r\nvar mouseOutCollapseDelay = 0_400;\r\n\r\nvar menuWidget = new (\r\nWidget({\r\n    name: \"menu\"\r\n})(class MenuWidgetFactoryBase extends WidgetFactory implements MenuWidgetFactory {\r\n\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #toggleTimeouts: WeakMap<HTMLElement, {clear(): void;}>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menu\",\r\n                role: \"menu\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#toggleTimeouts = new WeakMap();\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        contextual?: boolean;\r\n        position?: {x: number, y: number};\r\n    }): HTMLElement {\r\n        const menu = <HTMLElement>this.#template.cloneNode(true);\r\n        menu.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        menu.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        menu.addEventListener(\"mouseout\", this.#handleMouseOutEvent.bind(this));\r\n        menu.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        menu.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, contextual, position} = properties;\r\n            if (id !== undefined) {\r\n                menu.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                menu.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                menu.tabIndex = tabIndex;\r\n            }\r\n            if (contextual !== undefined) {\r\n                this.setContextual(menu, contextual);\r\n            }\r\n            if (position !== undefined) {\r\n                const {x, y} = position;\r\n                this.setPosition(menu, x, y);\r\n            }\r\n        }\r\n        return menu;\r\n    }\r\n\r\n    slot(menu: HTMLElement): HTMLElement | null {\r\n        return menu;\r\n    }\r\n\r\n    setPosition(menu: HTMLElement, x: number, y: number): void {\r\n        const {style} = menu;\r\n        const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        const left = x + scrollX;\r\n        const top = y + scrollY;\r\n        const {clientWidth, clientHeight} = document.body;\r\n        const overflowX = left + menuWidth - clientWidth;\r\n        const overflowY = top + menuHeight - clientHeight;\r\n        style.setProperty(\"left\", `${overflowX > 0 ? left - menuWidth : left}px`);\r\n        style.setProperty(\"top\", `${overflowY > 0 ? top - menuHeight : top}px`);\r\n    }\r\n\r\n    getContextual(menu: HTMLElement): boolean {\r\n        const {classList} = menu;\r\n        return classList.contains(\"menu-contextual\");\r\n    }\r\n\r\n    setContextual(menu: HTMLElement, value: boolean): void {\r\n        const {classList} = menu;\r\n        if (value) {\r\n            classList.add(\"menu-contextual\");\r\n        }\r\n        else {\r\n            classList.remove(\"menu-contextual\");\r\n        }\r\n    }\r\n\r\n    items(menu: HTMLElement): HTMLElement[] {\r\n        return Array.from(menu.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        ));\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"menuitem\") && !menuItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"menuitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #collapseSubmenus(menu: HTMLElement): void {\r\n        menu.querySelectorAll<HTMLElement>(\":is(:scope, :scope > .menuitemgroup) > .menuitem[aria-expanded]\")\r\n            .forEach(menuitem_i => menuItemWidget.collapse(menuitem_i));\r\n    }\r\n\r\n    #isClosestMenu(menu: HTMLElement, target: HTMLElement): boolean {\r\n        return target.closest(\".menu\") == menu;\r\n    }\r\n\r\n    #nearestItem(menu: HTMLElement, target: HTMLElement): HTMLElement | null {\r\n        return Array.from(menu.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #firstItem(menu: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menu;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(menu: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menu;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n\r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = menuItemWidget.getMenu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #getActiveItem(menu: HTMLElement): HTMLElement | null {\r\n        return menu.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem:focus-within\"\r\n        );\r\n    }\r\n\r\n    async #setItemTimeout(item: HTMLElement, delay?: number): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => {\r\n                resolve(undefined);\r\n            }, delay ?? 0);\r\n            this.#toggleTimeouts.set(item, {\r\n                clear: () => {\r\n                    clearTimeout(timeout);\r\n                    reject();\r\n                }\r\n            });\r\n        }).then(() => {\r\n            this.#toggleTimeouts.delete(item);\r\n        });\r\n    }\r\n\r\n    #clearItemTimeout(item: HTMLElement): void {\r\n        const timeout = this.#toggleTimeouts.get(item);\r\n        if (typeof timeout !== \"undefined\") {\r\n            this.#toggleTimeouts.delete(item);\r\n            timeout.clear();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem) {\r\n            const contextual = this.getContextual(targetMenu);\r\n            if (contextual) {\r\n                try {\r\n                    targetMenu.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const isClosestMenu = this.#isClosestMenu(targetMenu, targetItem);\r\n                if (isClosestMenu) {\r\n                    const type = menuItemWidget.getType(targetItem);\r\n                    const name = menuItemWidget.getName(targetItem);\r\n                    const value = menuItemWidget.getValue(targetItem);\r\n                    if (type == \"radio\") {\r\n                        targetMenu.querySelectorAll<HTMLElement>(\r\n                            `:is(:scope, :scope > .menuitemgroup) > .menuitem-radio[name=${name}]`\r\n                        )\r\n                        .forEach((radio_i) => {\r\n                            menuItemWidget.setChecked(radio_i, menuItemWidget.getValue(radio_i) == value);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetMenu.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const contextual = this.getContextual(targetMenu);\r\n            if (contextual) {\r\n                try {\r\n                    targetMenu.remove();\r\n                } catch (error) {\r\n                    undefined;\r\n                }\r\n            }\r\n            else {\r\n                const nearestItem = this.#nearestItem(targetMenu, <HTMLElement>target);\r\n                if (nearestItem) {\r\n                    menuItemWidget.collapse(nearestItem);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetMenu);\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem(targetMenu) :\r\n                    this.#firstItem(targetMenu);\r\n                previousItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem(targetMenu) :\r\n                    this.#firstItem(targetMenu);\r\n                nextItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetMenu);\r\n                firstItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetMenu);\r\n                lastItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const type = menuItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            menuItemWidget.expand(activeItem);\r\n                            const firstChildItem = this.#firstChildItem(activeItem);\r\n                            firstChildItem?.focus({preventScroll: true});\r\n                            event.preventDefault();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    const isTargetClosestMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                    ) == targetMenu;\r\n                    if (!isTargetClosestMenu) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const isTargetClosestMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                    ) == targetMenu;\r\n                    if (!isTargetClosestMenu) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const type = menuItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            const expanded = menuItemWidget.getExpanded(activeItem);\r\n                            if (!expanded) {\r\n                                menuItemWidget.expand(activeItem);\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                                event.stopPropagation();\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOutEvent(event: MouseEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const nearestItem = this.#nearestItem(targetMenu, target);\r\n            if (nearestItem !== null) {\r\n                if (menuItemWidget.getType(nearestItem) == \"submenu\" &&\r\n                    !menuItemWidget.getExpanded(nearestItem)) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                ) == targetMenu;\r\n                if (isTargetClosestMenu) {\r\n                    const activeItem = this.#getActiveItem(targetMenu);\r\n                    if (activeItem !== null &&\r\n                        menuItemWidget.getType(activeItem) == \"submenu\" &&\r\n                        menuItemWidget.getExpanded(activeItem)) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, mouseOutCollapseDelay)\r\n                            .then(() => {\r\n                                menuItemWidget.collapse(activeItem);\r\n                            })\r\n                            .catch(() => undefined);\r\n                    }\r\n                    const {clientX, clientY} = event;\r\n                    const {left, right, top, bottom} = targetMenu.getBoundingClientRect();\r\n                    const intersectsWithMouse = !(\r\n                        left > clientX || right < clientX || top > clientY || bottom < clientY\r\n                    );\r\n                    const containsRelatedTarget = targetMenu.contains(<Node>relatedTarget);\r\n                    if (intersectsWithMouse && containsRelatedTarget) {\r\n                        if (relatedTarget instanceof HTMLElement && relatedTarget.classList.contains(\"menu\") && relatedTarget !== targetMenu) {\r\n                            relatedTarget.focus({preventScroll: true});\r\n                        }\r\n                        else {\r\n                            targetMenu.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    if (!intersectsWithMouse) {\r\n                        targetMenu.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const nearestItem = this.#nearestItem(targetMenu, target); \r\n            if (nearestItem !== null) {\r\n                if (menuItemWidget.getType(nearestItem) == \"submenu\" &&\r\n                    menuItemWidget.getExpanded(nearestItem)) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                ) == targetMenu;\r\n                if (isTargetClosestMenu) {\r\n                    const activeItem = this.#getActiveItem(targetMenu);\r\n                    if (activeItem !== null) {\r\n                        if (menuItemWidget.getType(activeItem) == \"submenu\" &&\r\n                            menuItemWidget.getExpanded(activeItem) && \r\n                            !activeItem.contains(<HTMLElement>target)) {\r\n                            this.#clearItemTimeout(activeItem);\r\n                            this.#setItemTimeout(activeItem, mouseOutCollapseDelay)\r\n                                .then(() => {\r\n                                    menuItemWidget.collapse(activeItem);\r\n                                })\r\n                                .catch(() => undefined);\r\n                        }\r\n                    }\r\n                    nearestItem.focus({preventScroll: true});\r\n                    if (menuItemWidget.getType(nearestItem) == \"submenu\") {\r\n                        if (!menuItemWidget.getExpanded(nearestItem)) {\r\n                            this.#clearItemTimeout(nearestItem);\r\n                            this.#setItemTimeout(nearestItem, mouseOverExpandDelay)\r\n                                .then(() => {\r\n                                    const activeItem = this.#getActiveItem(targetMenu);\r\n                                    this.#collapseSubmenus(targetMenu);\r\n                                    if (activeItem) {\r\n                                        this.#clearItemTimeout(activeItem);\r\n                                        menuItemWidget.expand(activeItem);\r\n                                        menuItemWidget.getMenu(activeItem)?.focus({preventScroll: true});\r\n                                    }\r\n                                })\r\n                                .catch(() => undefined);\r\n                        }\r\n                        else {\r\n                            menuItemWidget.getMenu(nearestItem)?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menuitemgroup\": MenuItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar menuItemGroupWidget = new (\r\nWidget({\r\n    name: \"menuitemgroup\"\r\n})(class MenuItemGroupWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menuitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement): HTMLElement | null {\r\n        return group;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { treeItemWidget };\r\n\r\ntype TreeItemType = \"parent\" | \"leaf\";\r\n\r\ninterface TreeItemWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        type?: TreeItemType;\r\n        label?: string;\r\n        title?: string;\r\n        disabled?: boolean;\r\n        draggable?: boolean;\r\n    }): HTMLElement;\r\n    group(item: HTMLElement): HTMLElement | null;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setExpanded(item: HTMLElement, value: boolean): void;\r\n    getExpanded(item: HTMLElement): boolean;\r\n    setDraggable(row: HTMLElement, value: boolean): void;\r\n    getDraggable(item: HTMLElement): boolean;\r\n    getType(item: HTMLElement): TreeItemType | null;\r\n    setType(item: HTMLElement, value: TreeItemType): void;\r\n    toggle(item: HTMLElement, force?: boolean): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"treeitem\": TreeItemWidgetFactory,\r\n    }\r\n}\r\n\r\nvar treeItemWidget = new (\r\nWidget({\r\n    name: \"treeitem\"\r\n})(class TreeItemWidgetFactoryBase extends WidgetFactory implements TreeItemWidgetFactory {\r\n    #template: HTMLElement;\r\n    #types: TreeItemType[];\r\n\r\n    constructor() {\r\n        super();\r\n        this.#types = [\"parent\", \"leaf\"];\r\n        this.#template = element(\"li\", {\r\n            attributes: {\r\n                class: \"treeitem\",\r\n                role: \"treeitem\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"content\"\r\n                    },\r\n                    children: [\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"arrow\"\r\n                            }\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    group(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .treeitemgroup\");\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        label?: string;\r\n        title?: string;\r\n        type?: TreeItemType;\r\n        disabled?: boolean;\r\n        draggable?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, label, title, type = \"leaf\", disabled, draggable} = properties;\r\n            if (id !== undefined) {\r\n                item.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                item.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                item.tabIndex = tabIndex;\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (title !== undefined) {\r\n                this.setTitle(item, title);\r\n            }\r\n            this.setType(item, type);\r\n            if (type === \"parent\") {\r\n                this.setExpanded(item, false);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n            if (draggable !== undefined) {\r\n                this.setDraggable(item, draggable);\r\n            }\r\n            this.setSelected(item, false);\r\n        }\r\n        return item;\r\n    }\r\n\r\n    get observedSlots() {\r\n        return [\"content\", \"group\"];\r\n    }\r\n\r\n    slot(item: HTMLElement, name: string | null) {\r\n        switch (name) {\r\n            case \"content\":\r\n                return this.#content(item);\r\n            case \"group\":\r\n                return item;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #content(item: HTMLElement): HTMLElement {\r\n        const content = item.querySelector<HTMLElement>(\":scope > .content\")!;\r\n        if (!content) throw new Error(\"Missing .content slot.\");\r\n        return content;\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return item.getAttribute(\"aria-label\") ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"aria-label\", value);\r\n    }\r\n\r\n    getTitle(item: HTMLElement): string {\r\n        return item.title;\r\n    }\r\n\r\n    setTitle(item: HTMLElement, value: string): void {\r\n        item.title = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? Number(posInSet) : -1;\r\n    }\r\n\r\n    getType(item: HTMLElement): TreeItemType {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`treeitem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        throw new Error(\"Missing type.\");\r\n    }\r\n\r\n    setType(item: HTMLElement, type: TreeItemType): void {\r\n        const {classList} = item;\r\n        try {\r\n            const oldType = this.getType(item);\r\n            classList.remove(`treeitem-${oldType}`);\r\n        }\r\n        catch (e) {};\r\n        classList.add(`treeitem-${type}`);\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-expanded\", String(value));\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-expanded\") ?? String(false));\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            if (!classList.contains(\"active\")) {\r\n                classList.add(\"active\");\r\n            }\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDraggable(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"draggable\", String(value));\r\n    }\r\n\r\n    getDraggable(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"draggable\") ?? String(false));\r\n    }\r\n\r\n    setSelected(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-selected\", String(value));\r\n        item.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    setLevel(item: HTMLElement, value: number): void {\r\n        item.style.setProperty(\"--level\", String(value));\r\n    }\r\n\r\n    getLevel(item: HTMLElement): number {\r\n        return parseInt(item.style.getPropertyValue(\"--level\"));\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        this.setExpanded(item, force ?? !this.getExpanded(item));\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget, shiftKey, ctrlKey} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            if (type == \"parent\" && !(shiftKey || ctrlKey)) {\r\n                this.toggle(targetItem);\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { treeItemWidget } from \"./TreeItemWidget\";\r\n\r\nexport { treeWidget };\r\n\r\ninterface TreeWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement;\r\n    items(tree: HTMLElement): HTMLElement[];\r\n    selectedItems(tree: HTMLElement): HTMLElement[];\r\n    beginSelection(tree: HTMLElement): void;\r\n    endSelection(tree: HTMLElement): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"tree\": TreeWidgetFactory,\r\n    }\r\n}\r\n\r\nvar treeWidget = new (\r\nWidget({\r\n    name: \"tree\"\r\n})(class TreeWidgetFactoryBase extends WidgetFactory implements TreeWidgetFactory {\r\n\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"tree\",\r\n                role: \"tree\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement {\r\n        const tree = <HTMLElement>this.#template.cloneNode(true);\r\n        tree.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        tree.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        tree.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        tree.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        tree.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        tree.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        tree.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        tree.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        tree.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        tree.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        tree.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        this.#onSelection.set(tree, false);\r\n        this.#hasSelectionChanged.set(tree, false);\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, multisectable} = properties;\r\n            if (id !== undefined) {\r\n                tree.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                tree.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                tree.tabIndex = tabIndex;\r\n            }\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(tree, multisectable);\r\n            }\r\n        }\r\n        return tree;\r\n    }\r\n\r\n    slot(tree: HTMLElement) {\r\n        return tree;\r\n    }\r\n\r\n    slottedCallback(tree: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"treeitem\")) {\r\n                treeItemWidget.setPosInSet(child_i, i);\r\n                treeItemWidget.setLevel(child_i, 0);\r\n            }\r\n        });\r\n    }\r\n\r\n    items(tree: HTMLElement): HTMLElement[] {\r\n        return Array.from(tree.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .treeitemgroup) > .treeitem\"\r\n        ));\r\n    }\r\n\r\n    selectedItems(tree: HTMLElement): HTMLElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        let item = this.#firstItem(tree);\r\n        while (item !== null) {\r\n            const selected = treeItemWidget.getSelected(item);\r\n            if (selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(tree: HTMLElement): void {\r\n        this.#onSelection.set(tree, true);\r\n    }\r\n\r\n    endSelection(tree: HTMLElement): void {\r\n        this.#onSelection.set(tree, false);\r\n        if (this.#hasSelectionChanged.get(tree)) {\r\n            tree.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(tree, false);\r\n        }\r\n    }\r\n\r\n    setMultiSelectable(tree: HTMLElement, value: boolean): void {\r\n        tree.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(tree: HTMLElement): boolean {\r\n        return JSON.parse(tree.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    #getActiveItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".treeitem.active\");\r\n    }\r\n\r\n    #getDropTargetItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".treeitem.droptarget\");\r\n    }\r\n\r\n    #setDropTargetItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const {classList} = tree;\r\n        const dropTargetItem = this.#getDropTargetItem(tree);\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            treeItemWidget.setDropTarget(dropTargetItem, false);\r\n        }\r\n        if (item !== null) {\r\n            treeItemWidget.setDropTarget(item, true);\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"treeitem\") && !treeItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"treeitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextItem = this.#nextItem(from);\r\n            while (nextItem && nextItem !== to) {\r\n                range.push(nextItem);\r\n                nextItem = this.#nextItem(nextItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousItem = this.#previousItem(from);\r\n            while (previousItem && previousItem !== to) {\r\n                range.push(previousItem);\r\n                previousItem = this.#previousItem(previousItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        selectedItems.forEach((item_i) => {\r\n            if (!items.includes(item_i)) {\r\n                treeItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            const selected = treeItemWidget.getSelected(item_i);\r\n            if (tree.contains(item_i) && !selected) {\r\n                treeItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #addToSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        this.beginSelection(tree);\r\n        items.forEach((item_i) => {\r\n            if (!treeItemWidget.getSelected(item_i)) {\r\n                treeItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #removeFromSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                treeItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #clearSelection(tree: HTMLElement): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        selectedItems.forEach((item_i) => {\r\n            treeItemWidget.setSelected(item_i, false);\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #setActiveItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(tree);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            treeItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            treeItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #firstItem(tree: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(tree: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousSibling = <HTMLElement | null>walker.previousSibling();\r\n        return previousSibling ?\r\n            this.#deepestItem(previousSibling) :\r\n            <HTMLElement | null>walker.parentNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const type = treeItemWidget.getType(item);\r\n        const expanded = treeItemWidget.getExpanded(item);\r\n        return <HTMLElement | null>(\r\n            type === \"leaf\" ?\r\n                walker.nextNode() :\r\n                expanded ?\r\n                    walker.nextNode() :\r\n                    walker.nextSibling() ??\r\n                    (walker.parentNode(), walker.nextSibling())\r\n        );\r\n    }\r\n\r\n    #deepestItem(item: HTMLElement): HTMLElement {\r\n        const expanded = treeItemWidget.getExpanded(item);\r\n        if (expanded) {\r\n            const walker = this.#walker;\r\n            const lastItem = <HTMLElement>walker.lastChild();\r\n            if (lastItem) {\r\n                return this.#deepestItem(lastItem);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey, button} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        if (targetItem) {\r\n            const selected = treeItemWidget.getSelected(targetItem);\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setSelection(targetTree, targetItem);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            targetItem.blur();\r\n                            this.#removeFromSelection(targetTree, targetItem);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(targetTree, targetItem);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const activeItem = this.#getActiveItem(targetTree);\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                targetItem\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetTree, ...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                }\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(targetTree, targetItem);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            const type = treeItemWidget.getType(targetItem);\r\n            if (type == \"parent\") {\r\n                treeItemWidget.toggle(targetItem, true);\r\n            }\r\n            this.#setDropTargetItem(targetTree, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (!targetTree.contains(<Node>relatedTarget)) {\r\n            this.#setDropTargetItem(targetTree, null);\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const focusWithin = targetTree.contains(<Node>relatedTarget);\r\n        if (!focusWithin) {   \r\n            const activeItem = this.#getActiveItem(targetTree);\r\n            if (activeItem) {\r\n                activeItem.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetTree, targetItem);\r\n            targetTree.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetTree.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetTree.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetTree);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetTree, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetTree, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(\r\n                                firstItem,\r\n                                this.#deepestItem(lastItem)\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetTree, ...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const expanded = treeItemWidget.getExpanded(activeItem);\r\n                    if (expanded) {\r\n                        treeItemWidget.toggle(activeItem);\r\n                    }\r\n                    else {\r\n                        const walker = this.#walker;\r\n                        const parentItem = <HTMLElement>walker.parentNode();\r\n                        if (parentItem) {\r\n                            parentItem.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const expanded = treeItemWidget.getExpanded(activeItem);\r\n                    if (!expanded) {\r\n                        treeItemWidget.toggle(activeItem);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = treeItemWidget.getSelected(previousItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetTree, previousItem) :\r\n                                this.#addToSelection(targetTree, previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetTree);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = treeItemWidget.getSelected(nextItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetTree, nextItem) :\r\n                                this.#addToSelection(targetTree, nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetTree);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetTree);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetTree);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(targetTree, activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection(targetTree);\r\n                this.#setActiveItem(targetTree, null);\r\n                targetTree.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {target} = event;\r\n        const targetTree = <HTMLElement>target;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"treeitem\")) {\r\n            if (this.#onSelection.get(targetTree)) {\r\n                this.#hasSelectionChanged.set(target, true);\r\n            }\r\n            else {\r\n                targetTree.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { treeItemWidget } from \"./TreeItemWidget\";\r\n\r\nexport { treeItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"treeitemgroup\": TreeItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface TreeItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar treeItemGroupWidget = new (\r\nWidget({\r\n    name: \"treeitemgroup\"\r\n})(class TreeItemGroupWidgetFactoryBase extends WidgetFactory implements TreeItemGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"treeitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n\r\n    slottedCallback(group: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"treeitem\")) {\r\n                treeItemWidget.setPosInSet(child_i, i);\r\n                treeItemWidget.setLevel(child_i, (() => {\r\n                    let level = -1;\r\n                    let closestItem: HTMLElement | null = child_i;\r\n                    while (closestItem !== null && closestItem.matches(\".tree :scope\")) {\r\n                        closestItem = closestItem.parentElement?.closest(\".treeitem\") ?? null;\r\n                        level++;\r\n                    }\r\n                    return level;\r\n                })());\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { listItemWidget };\r\n\r\ninterface ListItemWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        label?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"listitem\": ListItemWidgetFactory,\r\n    }\r\n}\r\n\r\nvar listItemWidget = new (\r\nWidget({\r\n    name: \"listitem\"\r\n})(class ListItemWidgetFactoryBase extends WidgetFactory implements ListItemWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"li\", {\r\n            attributes: {\r\n                class: \"listitem\",\r\n                role: \"listitem\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        label?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {label, disabled} = init;\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n            this.setSelected(item, false);\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(root: HTMLElement): HTMLElement | null {\r\n        return root;\r\n    }\r\n\r\n    group(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .listitemgroup\");\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(row: HTMLElement, value: boolean): void {\r\n        row.setAttribute(\"aria-selected\", String(value));\r\n        row.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(row: HTMLElement): boolean {\r\n        return JSON.parse(row.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    #label(item: HTMLElement): Node {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { listItemWidget } from \"./ListItemWidget\";\r\n\r\nexport  { listWidget };\r\n\r\ninterface ListWidgetFactory extends WidgetFactory {\r\n    create(properties: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement;\r\n    items(list: HTMLElement): HTMLElement[];\r\n    beginSelection(list: HTMLElement): void;\r\n    endSelection(list: HTMLElement): void;\r\n    selectedItems(list: HTMLElement): HTMLElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"list\": ListWidgetFactory,\r\n    }\r\n}\r\n\r\nvar listWidget = new (\r\nWidget({\r\n    name: \"list\"\r\n})(class ListWidgetFactoryBase extends WidgetFactory implements ListWidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"list\",\r\n                role: \"list\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement {\r\n        const list = <HTMLElement>this.#template.cloneNode(true);\r\n        list.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        list.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        list.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        list.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        list.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        list.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        list.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        list.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        list.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        list.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        list.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        list.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, multisectable} = properties;\r\n            if (id !== undefined) {\r\n                list.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                list.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                list.tabIndex = tabIndex;\r\n            }\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(list, multisectable);\r\n            }\r\n        }\r\n        this.#onSelection.set(list, false);\r\n        this.#hasSelectionChanged.set(list, false);\r\n        return list;\r\n    }\r\n\r\n    slot(list: HTMLElement) {\r\n        return list;\r\n    }\r\n\r\n    slottedCallback(list: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"listitem\")) {\r\n                listItemWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n\r\n    setMultiSelectable(tree: HTMLElement, value: boolean): void {\r\n        tree.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(tree: HTMLElement): boolean {\r\n        return JSON.parse(tree.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    #getActiveItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".listitem.active\");\r\n    }\r\n\r\n    #getDropTargetItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".listitem.droptarget\");\r\n    }\r\n\r\n    items(list: HTMLElement): HTMLElement[] {\r\n        return Array.from(list.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .listitemgroup) > .listitem\"\r\n        ));\r\n    }\r\n\r\n    selectedItems(list: HTMLElement): HTMLElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        let item = this.#firstItem(list);\r\n        while (item !== null) {\r\n            const selected = listItemWidget.getSelected(item);\r\n            if (selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(list: HTMLElement): void {\r\n        this.#onSelection.set(list, true);\r\n    }\r\n\r\n    endSelection(list: HTMLElement): void {\r\n        this.#onSelection.set(list, false);\r\n        if (this.#hasSelectionChanged.get(list)) {\r\n            list.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(list, false);\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"listitem\") && !listItemWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"listitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextItem = this.#nextItem(from);\r\n            while (nextItem && nextItem !== to) {\r\n                range.push(nextItem);\r\n                nextItem = this.#nextItem(nextItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousItem = this.#previousItem(from);\r\n            while (previousItem && previousItem !== to) {\r\n                range.push(previousItem);\r\n                previousItem = this.#previousItem(previousItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        selectedItems.forEach((item_i) => {\r\n            if (!items.includes(item_i)) {\r\n                listItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            const selected = listItemWidget.getSelected(item_i);\r\n            if (list.contains(item_i) && !selected) {\r\n                listItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #addToSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        this.beginSelection(list);\r\n        items.forEach((item_i) => {\r\n            if (!listItemWidget.getSelected(item_i)) {\r\n                listItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #removeFromSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                listItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #clearSelection(list: HTMLElement): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        selectedItems.forEach((item_i) => {\r\n            listItemWidget.setSelected(item_i, false);\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #setActiveItem(list: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(list);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            listItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            listItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n    \r\n    #setDropTargetItem(list: HTMLElement, item: HTMLElement | null): void {\r\n        const {classList} = list;\r\n        const dropTargetItem = this.#getDropTargetItem(list);\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            listItemWidget.setDropTarget(dropTargetItem, false);\r\n        }\r\n        if (item !== null) {\r\n            listItemWidget.setDropTarget(item, false);\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    #firstItem(list: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(list: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLElement | null>walker.previousNode();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const nextItem = <HTMLElement | null>walker.nextNode();\r\n        return nextItem;\r\n    }\r\n\r\n    #handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetList, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            this.#setDropTargetItem(targetList, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!targetList.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(targetList, null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            const selectedItems = this.selectedItems(targetTree);\r\n            if (!selectedItems.includes(targetItem)) {\r\n                this.#setSelection(targetTree, targetItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetTree);\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetTree, targetItem);\r\n            targetTree.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetList);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetList, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetList, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(firstItem, lastItem);\r\n                            if (range) {\r\n                                this.#setSelection(targetList, ...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = listItemWidget.getSelected(previousItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetList, previousItem) :\r\n                                this.#addToSelection(targetList, previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetList);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = listItemWidget.getSelected(nextItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetList, nextItem) :\r\n                                this.#addToSelection(targetList, nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetList);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetList);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetList);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(targetList, activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection(targetList);\r\n                this.#setActiveItem(targetList, null);\r\n                targetList.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey, button} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            const selected = listItemWidget.getSelected(targetItem);\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setSelection(targetList, targetItem);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            targetItem.blur();\r\n                            this.#removeFromSelection(targetList, targetItem);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(targetList, targetItem);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const activeItem = this.#getActiveItem(targetList);\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                targetItem\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetList, ...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                }\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(targetList, targetItem);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetList.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetList.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetList) {\r\n            if (this.#onSelection.get(targetList)) {\r\n                this.#hasSelectionChanged.set(targetList, true);\r\n            }\r\n            else {\r\n                targetList.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { listItemWidget } from \"./ListItemWidget\";\r\n\r\nexport { listItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"listitemgroup\": ListItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ListItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar listItemGroupWidget = new (\r\nWidget({\r\n    name: \"listitemgroup\"\r\n})(class ListItemGroupWidgetFactoryBase extends WidgetFactory implements ListItemGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"listitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n\r\n    slottedCallback(group: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"listitem\")) {\r\n                listItemWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { toolbarItemWidget };\r\n\r\ntype ToolBarItemType = \"button\" | \"checkbox\" | \"radio\" | \"menubutton\";\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbaritem\": ToolBarItemWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ToolBarItemWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        id?: string;\r\n        type: ToolBarItemType;\r\n        pressed?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    menu(item: HTMLElement): HTMLElement | null;\r\n    getName(item: HTMLElement): string;\r\n    setName(item: HTMLElement, value: string): void;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setPressed(item: HTMLElement, value: boolean): void;\r\n    getPressed(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    getValue(item: HTMLElement): string;\r\n    setValue(item: HTMLElement, value: string): void;\r\n    getType(item: HTMLElement): ToolBarItemType | null;\r\n    setType(item: HTMLElement, value: ToolBarItemType): void;\r\n}\r\n\r\nvar toolbarItemWidget = new(\r\nWidget({\r\n    name: \"toolbaritem\"\r\n})(\r\nclass ToolBarItemWidgetFactoryBase extends WidgetFactory implements ToolBarItemWidgetFactory {\r\n    #template: HTMLElement;\r\n    #types: ToolBarItemType[];\r\n\r\n    constructor() {\r\n        super();\r\n        this.#types = [\"button\", \"checkbox\", \"radio\", \"menubutton\"];\r\n        this.#template = element(\"button\", {\r\n            attributes: {\r\n                class: \"toolbaritem\",\r\n                role: \"button\",\r\n                type: \"button\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        type?: ToolBarItemType;\r\n        pressed?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }) {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (init !== void 0) {\r\n            const {id, keyshortcut, pressed, type, label, name, value, disabled} = init;\r\n            if (id !== undefined) {\r\n                item.id = id;\r\n            }\r\n            if (keyshortcut !== undefined) {\r\n                this.setKeyShortcut(item, keyshortcut);\r\n            }\r\n            if (pressed !== undefined) {\r\n                this.setPressed(item, pressed);\r\n            }\r\n            if (type !== undefined) {\r\n                this.setType(item, type);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(item, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(item, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(item: HTMLElement): HTMLElement | null {\r\n        return item;\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void {\r\n        const hasChildMenu = Array.from(slot.childNodes).some(\r\n            childNode_i => childNode_i instanceof HTMLElement && childNode_i.classList.contains(\"menu\")\r\n        );\r\n        item.setAttribute(\"aria-haspopup\", String(hasChildMenu));\r\n    }\r\n\r\n    menu(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .menu\");\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-expanded\", value);\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-expanded\");\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    getKeyShortcut(item: HTMLElement): string | null {\r\n        return item.getAttribute(\"aria-keyshortcuts\");\r\n    }\r\n\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void {\r\n        if (value !== null) {\r\n            item.setAttribute(\"aria-keyshortcuts\", value);\r\n        }\r\n        else {\r\n            item.removeAttribute(\"aria-keyshortcuts\");\r\n        }\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        const expand = force ?? !this.getExpanded(item);\r\n        this.setExpanded(item, expand);\r\n        if (expand) {\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    expand(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (!expanded) {\r\n            this.setExpanded(item, true);\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    collapse(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (expanded) {\r\n            this.setExpanded(item, false);\r\n        }\r\n    }\r\n\r\n    getType(item: HTMLElement): ToolBarItemType | null {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`toolbaritem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setType(item: HTMLElement, type: ToolBarItemType): void {\r\n        const oldType = this.getType(item);\r\n        if (type !== oldType) {\r\n            const {classList} = item;\r\n            if (oldType) {\r\n                classList.remove(`toolbaritem-${oldType}`);\r\n            }\r\n            classList.add(`toolbaritem-${type}`);\r\n        }\r\n    }\r\n\r\n    getValue(item: HTMLElement): string {\r\n        return item.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"value\", value);\r\n    }\r\n\r\n    getTitle(item: HTMLElement): string {\r\n        return item.getAttribute(\"title\") ?? \"\";\r\n    }\r\n\r\n    setTitle(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"title\", value);\r\n    }\r\n\r\n    getName(item: HTMLElement): string {\r\n        return item.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getPressed(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-pressed\") ?? String(false));\r\n    }\r\n\r\n    setPressed(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-pressed\", String(value));\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetItem = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetItem.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse(targetItem);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.setPressed(targetItem, !this.getPressed(targetItem));\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.setPressed(targetItem, true);\r\n                    break;\r\n                }\r\n                case \"menubutton\": {\r\n                    const menu = this.menu(targetItem);\r\n                    if (menu && !menu.contains(<Node>target)) {\r\n                        this.toggle(targetItem);\r\n                        const expanded = this.getExpanded(targetItem);\r\n                        if (expanded) {\r\n                            menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(item: HTMLElement): void {\r\n        const type = this.getType(item);\r\n        if (type == \"menubutton\") {\r\n            const menu = this.menu(item);\r\n            if (menu !== null) {\r\n                const {style: menuStyle} = menu;\r\n                const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = item.getBoundingClientRect();\r\n                const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n                const {scrollY, scrollX} = window;\r\n                const {clientWidth, clientHeight} = document.body;\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n        }\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n}));\r\n","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { toolbarItemWidget } from \"./ToolBarItemWidget\";\r\n\r\nexport { toolbarWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbar\": ToolBarWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ToolBarWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }): HTMLElement;\r\n    setOrientation(toolbar: HTMLElement, value: ToolBarOrientation): void;\r\n    getOrientation(toolbar: HTMLElement): ToolBarOrientation;\r\n}\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\nvar toolbarWidget = new (\r\nWidget({\r\n    name: \"toolbar\"\r\n})(class ToolBarWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"toolbar\",\r\n                role: \"toolbar\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        )\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }) {\r\n        const toolbar = <HTMLElement>this.#template.cloneNode(true);\r\n        toolbar.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        toolbar.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        toolbar.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        toolbar.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        toolbar.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex} = properties;\r\n            if (id !== undefined) {\r\n                toolbar.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                toolbar.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                toolbar.tabIndex = tabIndex;\r\n            }\r\n        }\r\n        return toolbar;\r\n    }\r\n\r\n    slot(toolbar: HTMLElement) {\r\n        return toolbar;\r\n    }\r\n\r\n    #getActiveItem(toolbar: HTMLElement): HTMLElement | null {\r\n        return toolbar.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .toolbaritemgroup) > .toolbaritem.active\"\r\n        );\r\n    }\r\n\r\n    items(toolbar: HTMLElement): HTMLElement[] {\r\n        return Array.from(toolbar.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .toolbaritemgroup) > .toolbaritem\"\r\n        ));\r\n    }\r\n\r\n    setOrientation(toolbar: HTMLElement, value: ToolBarOrientation): void {\r\n        toolbar.setAttribute(\"aria-orientation\", value);\r\n    }\r\n\r\n    getOrientation(toolbar: HTMLElement): ToolBarOrientation {\r\n        return <ToolBarOrientation>toolbar.getAttribute(\"aria-orientation\") ?? \"horizontal\";\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node) {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"toolbaritem\") && !toolbarItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"toolbaritemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(toolbar: Element): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = toolbar;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(toolbar: Element): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = toolbar;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLElement | null>walker.previousSibling();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = toolbarItemWidget.menu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #setActiveItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(tree);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            toolbarItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            toolbarItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: Event): void {\r\n        const {currentTarget, target} = event;\r\n        const toolbar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem) {\r\n            const type = toolbarItemWidget.getType(targetItem);\r\n            const name = toolbarItemWidget.getName(targetItem);\r\n            const value = toolbarItemWidget.getType(targetItem);\r\n            if (type == \"radio\") {\r\n                toolbar.querySelectorAll<HTMLElement>(\r\n                    `:is(:scope, :scope > .toolbaritemgroup) > .toolbaritem[type=radio][name=${name}]`\r\n                ).forEach((radio_i) => {\r\n                    toolbarItemWidget.setPressed(radio_i, toolbarItemWidget.getValue(radio_i) == value);\r\n                });\r\n            }\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const focusWithin = targetToolbar.contains(<Node>relatedTarget);\r\n        if (!focusWithin) {\r\n            const activeItem = this.#getActiveItem(targetToolbar);\r\n            if (activeItem) {\r\n                activeItem.focus();\r\n            }\r\n            else {\r\n                const firstItem = this.#firstItem(targetToolbar);\r\n                firstItem?.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetToolbar, targetItem);\r\n            targetToolbar.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetToolbar.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.#setActiveItem(targetToolbar, null);\r\n            targetToolbar.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetToolbar);\r\n        switch (key) {\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const type = toolbarItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"menubutton\": {\r\n                            toolbarItemWidget.expand(activeItem);\r\n                            const firstChildItem = this.#firstChildItem(activeItem);\r\n                            firstChildItem?.focus({preventScroll: true});\r\n                            event.preventDefault();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetToolbar);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetToolbar);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetToolbar);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetToolbar);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    activeItem.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    targetToolbar.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { toolbarItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbaritemgroup\": MenuItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar toolbarItemGroupWidget = new (\r\nWidget({\r\n    name: \"toolbaritemgroup\"\r\n})(class MenuItemGroupWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"toolbaritemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n}));","import { element } from \"../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"./Widget\";\r\n\r\nexport { widthSashWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"widthsash\": WidthSashWidgetFactory\r\n    }\r\n}\r\n\r\ninterface WidthSashWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"left\" | \"right\";\r\n    }): HTMLElement;\r\n}\r\n\r\nvar widthSashWidget = new (\r\nWidget({\r\n    name: \"widthsash\"\r\n})(class WidthSashWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    #targets: WeakMap<HTMLElement, HTMLElement | null>;\r\n    #onCaptureFlags: WeakMap<HTMLElement, boolean>;\r\n    #queuedPointerCallbacks: WeakMap<HTMLElement, FrameRequestCallback | null>;\r\n    #pointerMovements: WeakMap<HTMLElement, number>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"widthsash\"\r\n            }\r\n        });\r\n        this.#targets = new WeakMap();\r\n        this.#onCaptureFlags = new WeakMap();\r\n        this.#queuedPointerCallbacks = new WeakMap();\r\n        this.#pointerMovements = new WeakMap();\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"left\" | \"right\";\r\n    }) {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const sash = <HTMLElement>this.#template.cloneNode(true);\r\n        sash.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        sash.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        sash.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, controls, growDir} = properties;\r\n            if (id !== undefined) {\r\n                sash.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                sash.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                sash.tabIndex = tabIndex;\r\n            }\r\n            if (controls !== undefined) {\r\n                this.setControls(sash, controls);\r\n            }\r\n            if (growDir !== undefined) {\r\n                this.setGrowDir(sash, growDir);\r\n            }\r\n        }\r\n        targets.set(sash, null);\r\n        queuedPointerCallbacks.set(sash, null);\r\n        pointerMovements.set(sash, 0);\r\n        onCaptureFlags.set(sash, false);\r\n        return sash;\r\n    }\r\n\r\n    getGrowDir(sash: HTMLElement): \"right\" | \"left\" {\r\n        return <\"right\" | \"left\">sash.getAttribute(\"data-growdir\") ?? \"right\";\r\n    }\r\n\r\n    setGrowDir(sash: HTMLElement, value: \"right\" | \"left\"): void {\r\n        sash.setAttribute(\"data-growdir\", value);\r\n    }\r\n\r\n    getControls(sash: HTMLElement): string | null {\r\n        return sash.getAttribute(\"data-controls\");\r\n    }\r\n\r\n    setControls(sash: HTMLElement, value: string): void {\r\n        sash.setAttribute(\"data-controls\", value);\r\n    }\r\n\r\n    setWidth(sash: HTMLElement, width: number): void {\r\n        const targets = this.#targets;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            target.style.setProperty(\"width\", `${width}px`);\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        sashTarget.releasePointerCapture(pointerId);\r\n        onCaptureFlags.set(sashTarget, false);\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const controls = this.getControls(sashTarget);\r\n        if (controls) {\r\n            const targets = this.#targets;\r\n            const onCaptureFlags = this.#onCaptureFlags;\r\n            const rootNode = <ShadowRoot | Document>sashTarget.getRootNode();\r\n            targets.set(sashTarget, rootNode.getElementById(controls));\r\n            onCaptureFlags.set(sashTarget, true);\r\n            sashTarget.setPointerCapture(pointerId);\r\n        }\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        const {currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const pointerMoveCallback = this.#pointerMoveCallback;\r\n        const onCaptureFlag = onCaptureFlags.get(sashTarget);\r\n        if (onCaptureFlag) {\r\n            let callback = queuedPointerCallbacks.get(sashTarget);\r\n            if (callback == null) {\r\n                callback = pointerMoveCallback.bind(this, sashTarget);\r\n                queuedPointerCallbacks.set(sashTarget, callback);\r\n                requestAnimationFrame(callback);\r\n            }\r\n            const pointerMovement = pointerMovements.get(sashTarget)! + event.movementX;\r\n            pointerMovements.set(sashTarget, pointerMovement);\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(sash: HTMLElement): void {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const growdir = this.getGrowDir(sash);\r\n            const movementX = pointerMovements.get(sash)!;\r\n            const width = parseFloat(targetComputedStyle.getPropertyValue(\"width\"));\r\n            const newWidth = width + (growdir == \"right\" ? 1 : -1) * movementX;\r\n            this.setWidth(sash, newWidth);\r\n            sash.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        pointerMovements.set(sash, 0);\r\n        queuedPointerCallbacks.set(sash, null);\r\n    }\r\n}));","import { element } from \"../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"./Widget\";\r\n\r\nexport { heightSashWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"heightsash\": HeightSashWidgetFactory\r\n    }\r\n}\r\n\r\ninterface HeightSashWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"top\" | \"bottom\";\r\n    }): HTMLElement;\r\n}\r\n\r\nvar heightSashWidget = new (\r\nWidget({\r\n    name: \"heightsash\"\r\n})(class HeightSashWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    #targets: WeakMap<HTMLElement, HTMLElement | null>;\r\n    #onCaptureFlags: WeakMap<HTMLElement, boolean>;\r\n    #queuedPointerCallbacks: WeakMap<HTMLElement, FrameRequestCallback | null>;\r\n    #pointerMovements: WeakMap<HTMLElement, number>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"heightsash\"\r\n            }\r\n        });\r\n        this.#targets = new WeakMap();\r\n        this.#onCaptureFlags = new WeakMap();\r\n        this.#queuedPointerCallbacks = new WeakMap();\r\n        this.#pointerMovements = new WeakMap();\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"top\" | \"bottom\";\r\n    }) {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const sash = <HTMLElement>this.#template.cloneNode(true);\r\n        sash.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        sash.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        sash.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, controls, growDir} = properties;\r\n            if (id !== undefined) {\r\n                sash.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                sash.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                sash.tabIndex = tabIndex;\r\n            }\r\n            if (controls !== undefined) {\r\n                this.setControls(sash, controls);\r\n            }\r\n            if (growDir !== undefined) {\r\n                this.setGrowDir(sash, growDir);\r\n            }\r\n        }\r\n        targets.set(sash, null);\r\n        queuedPointerCallbacks.set(sash, null);\r\n        pointerMovements.set(sash, 0);\r\n        onCaptureFlags.set(sash, false);\r\n        return sash;\r\n    }\r\n\r\n    getGrowDir(sash: HTMLElement): \"top\" | \"bottom\" {\r\n        return <\"top\" | \"bottom\">sash.getAttribute(\"data-growdir\") ?? \"top\";\r\n    }\r\n\r\n    setGrowDir(sash: HTMLElement, value: \"top\" | \"bottom\"): void {\r\n        sash.setAttribute(\"data-growdir\", value);\r\n    }\r\n\r\n    getControls(sash: HTMLElement): string | null {\r\n        return sash.getAttribute(\"data-controls\");\r\n    }\r\n\r\n    setControls(sash: HTMLElement, value: string): void {\r\n        sash.setAttribute(\"data-controls\", value);\r\n    }\r\n\r\n    setHeight(sash: HTMLElement, height: number): void {\r\n        const targets = this.#targets;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            target.style.setProperty(\"height\", `${height}px`);\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        sashTarget.releasePointerCapture(pointerId);\r\n        onCaptureFlags.set(sashTarget, false);\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const controls = this.getControls(sashTarget);\r\n        if (controls) {\r\n            const targets = this.#targets;\r\n            const onCaptureFlags = this.#onCaptureFlags;\r\n            const rootNode = <ShadowRoot | Document>sashTarget.getRootNode();\r\n            targets.set(sashTarget, rootNode.getElementById(controls));\r\n            onCaptureFlags.set(sashTarget, true);\r\n            sashTarget.setPointerCapture(pointerId);\r\n        }\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        const {currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const onCaptureFlag = onCaptureFlags.get(sashTarget);\r\n        if (onCaptureFlag) {\r\n            let callback = queuedPointerCallbacks.get(sashTarget);\r\n            if (callback == null) {\r\n                callback = this.#pointerMoveCallback.bind(this, sashTarget);\r\n                queuedPointerCallbacks.set(sashTarget, callback);\r\n                requestAnimationFrame(callback);\r\n            }\r\n            const pointerMovement = pointerMovements.get(sashTarget)! + event.movementX;\r\n            pointerMovements.set(sashTarget, pointerMovement);\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(sash: HTMLElement): void {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const growdir = this.getGrowDir(sash);\r\n            const movementX = pointerMovements.get(sash)!;\r\n            const height = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            const newHeight = height + (growdir == \"top\" ? -1 : 1) * movementX;\r\n            this.setHeight(sash, newHeight);\r\n            sash.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        pointerMovements.set(sash, 0);\r\n        queuedPointerCallbacks.set(sash, null);\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridCellWidget };\r\n\r\ninterface GridCellWidgetFactory extends WidgetFactory {\r\n    create(init: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        disabled?: boolean;\r\n        headers?: string;\r\n    }): HTMLElement;\r\n    getHeaders(item: HTMLElement): string;\r\n    setHeaders(item: HTMLElement, value: string): void;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridcell\": GridCellWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridCellWidget = new (\r\nWidget({\r\n    name: \"gridcell\"\r\n})(class GridCellWidgetFactoryBase extends WidgetFactory implements GridCellWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"td\", {\r\n            attributes: {\r\n                class: \"gridcell\",\r\n                role: \"gridcell\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        disabled?: boolean;\r\n        headers?: string;\r\n    }): HTMLElement {\r\n        const cell = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {id, classList, tabIndex, disabled, headers} = init;\r\n            if (id !== undefined) {\r\n                cell.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                cell.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                cell.tabIndex = tabIndex;\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(cell, disabled);\r\n            }\r\n            if (headers !== undefined) {\r\n                this.setHeaders(cell, headers);\r\n            }\r\n            this.setSelected(cell, false);\r\n        }\r\n        return cell;\r\n    }\r\n\r\n    slot(cell: HTMLElement): HTMLElement | null {\r\n        return cell;\r\n    }\r\n\r\n    getHeaders(item: HTMLElement): string {\r\n        return item.getAttribute(\"headers\") ?? \"\";\r\n    }\r\n\r\n    setHeaders(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"headers\", value);\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-selected\", String(value));\r\n        item.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .content > .label\")!;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { gridCellWidget } from \"./GridCellWidget\";\r\n\r\nexport { gridRowWidget };\r\n\r\ninterface GridRowWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        disabled?: boolean\r\n    }): HTMLElement;\r\n    cells(row: HTMLElement): HTMLElement[];\r\n    setPosInSet(row: HTMLElement, value: number): void;\r\n    getPosInSet(row: HTMLElement): number;\r\n    setActive(row: HTMLElement, value: boolean): void;\r\n    getActive(row: HTMLElement): boolean;\r\n    setDropTarget(row: HTMLElement, value: boolean): void;\r\n    getDropTarget(row: HTMLElement): boolean;\r\n    setSelected(row: HTMLElement, value: boolean): void;\r\n    getSelected(row: HTMLElement): boolean;\r\n    setDisabled(row: HTMLElement, value: boolean): void;\r\n    getDisabled(row: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridrow\": GridRowWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridRowWidget = new (\r\nWidget({\r\n    name: \"gridrow\"\r\n})(class GridRowWidgetFactoryBase extends WidgetFactory implements GridRowWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"tr\", {\r\n            attributes: {\r\n                class: \"gridrow\",\r\n                role: \"row\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const row = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {disabled} = init;\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(row, disabled);\r\n            }\r\n            this.setSelected(row, false);\r\n        }\r\n        return row;\r\n    }\r\n\r\n    slot(row: HTMLElement): HTMLElement | null {\r\n        return row;\r\n    }\r\n\r\n    cells(row: HTMLElement): HTMLElement[] {\r\n        return Array.from(row.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridcell\"\r\n        ));\r\n    }\r\n    \r\n    setPosInSet(row: HTMLElement, value: number): void {\r\n        row.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(row: HTMLElement): number {\r\n        const posInSet = row.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(row: HTMLElement, value: boolean): void {\r\n        const {classList} = row;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(row: HTMLElement): boolean {\r\n        const {classList} = row;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(row: HTMLElement, value: boolean): void {\r\n        const {classList} = row;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(row: HTMLElement): boolean {\r\n        const {classList} = row;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(row: HTMLElement, value: boolean): void {\r\n        row.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(row: HTMLElement): boolean {\r\n        return row.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(row: HTMLElement, value: boolean): void {\r\n        row.setAttribute(\"aria-selected\", String(value));\r\n        row.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(row: HTMLElement): boolean {\r\n        return JSON.parse(row.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((item_i, i) => {\r\n            if (item_i instanceof HTMLElement) {\r\n                gridCellWidget.setPosInSet(item_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { gridCellWidget } from \"./GridCellWidget\";\r\nimport { gridRowWidget } from \"./GridRowWidget\";\r\n\r\nexport { gridWidget };\r\n\r\ntype GridSelectBy = \"cell\" | \"row\";\r\n\r\ninterface GridRowWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n        selectby?: GridSelectBy\r\n    }): HTMLElement;\r\n    setSelectBy(item: HTMLElement, value: GridSelectBy): void;\r\n    getSelectBy(item: HTMLElement): GridSelectBy;\r\n    headers(grid: HTMLElement): HTMLElement[];\r\n    cells(grid: HTMLElement): HTMLElement[];\r\n    rows(grid: HTMLElement): HTMLElement[];\r\n    beginSelection(grid: HTMLElement): void;\r\n    endSelection(grid: HTMLElement): void;\r\n    selectedCells(grid: HTMLElement): HTMLElement[];\r\n    selectedRows(grid: HTMLElement): HTMLElement[];\r\n    clearSelection(grid: HTMLElement): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"grid\": GridRowWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridWidget = new (\r\nWidget({\r\n    name: \"grid\"\r\n})(class GridWidgetFactoryBase extends WidgetFactory implements GridRowWidgetFactory {\r\n\r\n    #getActiveRow(grid: HTMLElement): HTMLElement | null {\r\n        return grid.querySelector<HTMLElement>(\".gridrow.active\");\r\n    }\r\n\r\n    #getActiveCell(grid: HTMLElement): HTMLElement | null {\r\n        return grid.querySelector<HTMLElement>(\".gridcell.active\");\r\n    }\r\n\r\n    headers(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridhead > .gridheader\"\r\n        ));\r\n    }\r\n\r\n    rows(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridbody > .gridrow\"\r\n        ));\r\n    }\r\n\r\n    cells(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridbody > .gridrow > .gridcell\"\r\n        ));\r\n    }\r\n\r\n    #template: HTMLElement;\r\n    #rowsWalker: TreeWalker;\r\n    #cellsWalker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"table\", {\r\n            attributes: {\r\n                class: \"grid\",\r\n                role: \"grid\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#cellsWalker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#cellsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#rowsWalker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#rowsWalkerNodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n        selectby?: GridSelectBy;\r\n    }) {\r\n        const grid = <HTMLElement>this.#template.cloneNode(true);\r\n        //grid.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        grid.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        grid.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        grid.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        grid.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        grid.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        grid.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, selectby, multisectable} = properties;\r\n            if (id !== undefined) {\r\n                grid.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                grid.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                grid.tabIndex = tabIndex;\r\n            }\r\n            if (selectby !== undefined) {\r\n                this.setSelectBy(grid, selectby);\r\n            }\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(grid, multisectable);\r\n            }\r\n        }\r\n        return grid;\r\n    }\r\n\r\n    slot(grid: HTMLElement): HTMLElement | null {\r\n        return grid;\r\n    }\r\n\r\n    setMultiSelectable(grid: HTMLElement, value: boolean): void {\r\n        grid.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(grid: HTMLElement): boolean {\r\n        return JSON.parse(grid.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    setSelectBy(grid: HTMLElement, value: GridSelectBy): void {\r\n        grid.setAttribute(\"data-selectby\", value);\r\n    }\r\n\r\n    getSelectBy(grid: HTMLElement): GridSelectBy {\r\n        return <GridSelectBy>grid.getAttribute(\"data-selectby\") ?? \"cell\";\r\n    }\r\n\r\n    beginSelection(grid: HTMLElement): void {\r\n        this.#onSelection.set(grid, true);\r\n    }\r\n\r\n    endSelection(grid: HTMLElement): void {\r\n        this.#onSelection.set(grid, false);\r\n        if (this.#hasSelectionChanged.get(grid)) {\r\n            grid.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(grid, false);\r\n        }\r\n    }\r\n\r\n    clearSelection(grid: HTMLElement): void {\r\n        this.#clearCellsSelection(grid);\r\n        this.#clearRowsSelection(grid);\r\n    }\r\n\r\n    selectedCells(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll(\":scope > .gridbody > .gridrow > .gridcell[aria-selected=true]\"));\r\n    }\r\n\r\n    selectedRows(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll(\":scope > .gridbody > .gridrow[aria-selected=true]\"));\r\n    }\r\n\r\n    #cellsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"gridcell\") && !gridCellWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"gridrow\") || classList.contains(\"gridbody\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #rowsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"gridrow\") && !gridRowWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"gridbody\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getCellsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextCell = this.#nextCell(from);\r\n            while (nextCell && nextCell !== to) {\r\n                range.push(nextCell);\r\n                nextCell = this.#nextCell(nextCell);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousCell = this.#previousCell(from);\r\n            while (previousCell && previousCell !== to) {\r\n                range.push(previousCell);\r\n                previousCell = this.#previousRow(previousCell);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #getRowsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextRow = this.#nextRow(from);\r\n            while (nextRow && nextRow !== to) {\r\n                range.push(nextRow);\r\n                nextRow = this.#nextRow(nextRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousRow = this.#previousRow(from);\r\n            while (previousRow && previousRow !== to) {\r\n                range.push(previousRow);\r\n                previousRow = this.#previousRow(previousRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setCellsSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        selectedCells.forEach((selectedCell_i) => {\r\n            if (!cells.includes(selectedCell_i)) {\r\n                gridCellWidget.setSelected(selectedCell_i, false);\r\n            }\r\n        });\r\n        cells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (!selected) {\r\n                gridCellWidget.setSelected(cell_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #setRowsSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        selectedRows.forEach((selectedRow_i) => {\r\n            if (!rows.includes(selectedRow_i)) {\r\n                gridRowWidget.setSelected(selectedRow_i, false);\r\n            }\r\n        });\r\n        rows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (!selected) {\r\n                gridRowWidget.setSelected(row_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #addCellsToSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        cells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (!selected) {\r\n                gridCellWidget.setSelected(cell_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #addRowsToSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        rows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (!selected) {\r\n                gridRowWidget.setSelected(row_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #removeCellsFromSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        cells.forEach((cell_i) => {\r\n            if (selectedCells.includes(cell_i)) {\r\n                gridCellWidget.setSelected(cell_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #removeRowsFromSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        rows.forEach((row_i) => {\r\n            if (selectedRows.includes(row_i)) {\r\n                gridRowWidget.setSelected(row_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #clearCellsSelection(grid: HTMLElement): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        selectedCells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (selected) {\r\n                gridCellWidget.setSelected(cell_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #clearRowsSelection(grid: HTMLElement): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        selectedRows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (selected) {\r\n                gridRowWidget.setSelected(row_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #setActiveCell(grid: HTMLElement, cell: HTMLElement | null): void {\r\n        const activeCell = this.#getActiveCell(grid);\r\n        if (activeCell !== null && activeCell !== cell) {\r\n            gridCellWidget.setActive(activeCell, false);\r\n            activeCell.tabIndex = -1;\r\n        }\r\n        if (cell !== null) {\r\n            gridCellWidget.setActive(cell, true);\r\n            cell.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #setActiveRow(grid: HTMLElement, row: HTMLElement | null): void {\r\n        const activeRow = this.#getActiveRow(grid);\r\n        if (activeRow !== null && activeRow !== row) {\r\n            gridRowWidget.setActive(activeRow, false);\r\n            activeRow.tabIndex = -1;\r\n        }\r\n        if (row !== null) {\r\n            gridCellWidget.setActive(row, true);\r\n            row.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #firstCell(row: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLElement | null>cellsWalker.firstChild();\r\n    }\r\n\r\n    #lastCell(row: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLElement | null>cellsWalker.lastChild();\r\n    }\r\n\r\n    #previousCell(cell: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLElement | null>cellsWalker.previousNode();\r\n    }\r\n\r\n    #nextCell(cell: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLElement | null>cellsWalker.nextNode();\r\n    }\r\n\r\n    #closestRow(cell: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = cell;\r\n        return <HTMLElement | null>rowsWalker.parentNode();\r\n    }\r\n\r\n    #firstRow(grid: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = grid;\r\n        return <HTMLElement | null>rowsWalker.firstChild();\r\n    }\r\n\r\n    #lastRow(grid: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = grid;\r\n        return <HTMLElement | null>rowsWalker.lastChild();\r\n    }\r\n\r\n    #previousRow(row: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLElement | null>rowsWalker.previousNode();\r\n    }\r\n\r\n    #nextRow(row: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLElement | null>rowsWalker.nextNode();\r\n    }\r\n\r\n    #topCell(cell: HTMLElement): HTMLElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const closestRowCells = gridRowWidget.cells(closestRow);\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const previousRow = this.#previousRow(closestRow);\r\n            if (previousRow) {\r\n                const previousRowCells = gridRowWidget.cells(previousRow);\r\n                return previousRowCells[Math.min(cellIndex, previousRowCells.length)];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #bottomCell(cell: HTMLElement): HTMLElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const closestRowCells = gridRowWidget.cells(closestRow);\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const nextRow = this.#nextRow(closestRow);\r\n            if (nextRow) {\r\n                const nextRowCells = gridRowWidget.cells(nextRow);\r\n                return nextRowCells[Math.min(cellIndex, nextRowCells.length)];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /*#handleContextMenuEvent(event: MouseEvent) {\r\n        const {currentTarget, target} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    const selectedCells = this.selectedCells(targetGrid);\r\n                    if (!selectedCells.includes(targetCell)) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    targetCell.focus({preventScroll: true});\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    const selectedRows = this.selectedRows(targetGrid);\r\n                    if (!selectedRows.includes(targetRow)) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    targetRow.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        event.preventDefault();\r\n    }*/\r\n\r\n    /*#handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            const type = treeitemWidget.getType(targetItem);\r\n            if (type == \"parent\") {\r\n                treeitemWidget.toggle(targetItem, true);\r\n            }\r\n            this.#setDropTargetItem(targetTree, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!targetTree.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(targetTree, null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }*/\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const activeCell = this.#getActiveCell(targetGrid);\r\n                if (activeCell && relatedTarget !== activeCell) {\r\n                    activeCell.focus();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const activeRow = this.#getActiveRow(targetGrid);\r\n                if (activeRow && relatedTarget !== activeRow) {\r\n                    activeRow.focus();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    this.#setActiveCell(targetGrid, targetCell);\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    this.#setActiveRow(targetGrid, targetRow);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetGrid.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetGrid.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const activeCell = this.#getActiveCell(targetGrid);\r\n        const activeRow = this.#getActiveRow(targetGrid);\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        const multiselectable = this.getMultiSelectable(targetGrid);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey && multiselectable) {\r\n                    switch (selectby) {\r\n                        case \"cell\": {\r\n                            const firstRow = this.#firstRow(targetGrid);\r\n                            const firstCell = firstRow ? this.#firstCell(firstRow) : null;\r\n                            const lastRow = this.#lastRow(targetGrid);\r\n                            const lastCell = lastRow ? this.#lastCell(lastRow) : null;\r\n                            if (firstCell && lastCell) {\r\n                                const range = this.#getCellsRange(firstCell, lastCell);\r\n                                if (range) {\r\n                                    this.#setCellsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"row\": {\r\n                            const firstRow = this.#firstRow(targetGrid);\r\n                            const lastRow = this.#lastRow(targetGrid);\r\n                            if (firstRow && lastRow) {\r\n                                const range = this.#getRowsRange(firstRow, lastRow);\r\n                                if (range) {\r\n                                    this.#setRowsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const previousCell = this.#previousCell(activeCell);\r\n                        if (previousCell) {\r\n                            previousCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(previousCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, previousCell) :\r\n                                    this.#addCellsToSelection(targetGrid, previousCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const nextCell = this.#nextCell(activeCell);\r\n                        if (nextCell) {\r\n                            nextCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(nextCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, nextCell) :\r\n                                    this.#addCellsToSelection(targetGrid, nextCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const firstRow = activeRow ?? this.#firstRow(targetGrid);\r\n                        const topCell = activeCell ?\r\n                            this.#topCell(activeCell) :\r\n                            firstRow ?\r\n                            this.#firstCell(firstRow) :\r\n                            null;\r\n                        if (topCell) {\r\n                            topCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(topCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, topCell) :\r\n                                    this.#addCellsToSelection(targetGrid, topCell);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const previousRow = activeRow ?\r\n                            this.#previousRow(activeRow) :\r\n                            this.#firstRow(targetGrid);\r\n                        if (previousRow) {\r\n                            previousRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridRowWidget.getSelected(previousRow);\r\n                                selected ?\r\n                                    this.#removeRowsFromSelection(targetGrid, previousRow) :\r\n                                    this.#addRowsToSelection(targetGrid, previousRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const lastRow = activeRow ?? this.#lastRow(targetGrid);\r\n                        const bottomCell = activeCell ?\r\n                            this.#bottomCell(activeCell) :\r\n                            lastRow ?\r\n                            this.#lastCell(lastRow) :\r\n                            null;\r\n                            if (bottomCell) {\r\n                                bottomCell.focus({preventScroll: true});\r\n                                const {shiftKey} = event;\r\n                                if (shiftKey && multiselectable) {\r\n                                    const selected = gridCellWidget.getSelected(bottomCell);\r\n                                    selected ?\r\n                                        this.#removeCellsFromSelection(targetGrid, bottomCell) :\r\n                                        this.#addCellsToSelection(targetGrid, bottomCell);\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"row\": {\r\n                        const nextRow = activeRow ?\r\n                            this.#nextRow(activeRow) :\r\n                            this.#lastRow(targetGrid);\r\n                        if (nextRow) {\r\n                            nextRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridRowWidget.getSelected(nextRow);\r\n                                selected ?\r\n                                    this.#removeRowsFromSelection(targetGrid, nextRow) :\r\n                                    this.#addRowsToSelection(targetGrid, nextRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const firstCell = this.#firstCell(activeRow);\r\n                            if (firstCell) {\r\n                                firstCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const firstRow = this.#firstRow(targetGrid);\r\n                        if (firstRow) {\r\n                            firstRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const lastCell = this.#lastCell(activeRow);\r\n                            if (lastCell) {\r\n                                lastCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const lastRow = this.#lastRow(targetGrid);\r\n                        if (lastRow) {\r\n                            lastRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeCell) {\r\n                            this.#setCellsSelection(targetGrid, activeCell);\r\n                            activeCell.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        if (activeRow) {\r\n                            this.#setRowsSelection(targetGrid, activeRow);\r\n                            activeRow.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        this.#clearCellsSelection(targetGrid);\r\n                        this.#setActiveCell(targetGrid, null);\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        this.#clearRowsSelection(targetGrid);\r\n                        this.#setActiveRow(targetGrid, null);\r\n                        break;\r\n                    }\r\n                }\r\n                targetGrid.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        const multiselectable = this.getMultiSelectable(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    if (multiselectable) {\r\n                        if (!shiftKey && !ctrlKey) {\r\n                            this.#setCellsSelection(targetGrid, targetCell);\r\n                        }\r\n                        else if (ctrlKey) {\r\n                            const selected = gridCellWidget.getSelected(targetCell);\r\n                            !selected ?\r\n                                this.#addCellsToSelection(targetGrid, targetCell) :\r\n                                this.#removeCellsFromSelection(targetGrid, targetCell);\r\n                            event.stopPropagation();\r\n                        }\r\n                        else if (shiftKey) {\r\n                            const activeCell = this.#getActiveCell(targetGrid);\r\n                            if (activeCell) {\r\n                                const range = this.#getCellsRange(\r\n                                    activeCell,\r\n                                    targetCell\r\n                                );\r\n                                if (range) {\r\n                                    this.#setCellsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.#setCellsSelection(targetGrid, targetCell);\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    if (multiselectable) {\r\n                        if (!shiftKey && !ctrlKey) {\r\n                            this.#setRowsSelection(targetGrid, targetRow);\r\n                        }\r\n                        else if (ctrlKey) {\r\n                            const selected = gridRowWidget.getSelected(targetRow);\r\n                            !selected ?\r\n                                this.#addRowsToSelection(targetGrid, targetRow) :\r\n                                this.#removeRowsFromSelection(targetGrid, targetRow);\r\n                            event.stopPropagation();\r\n                        }\r\n                        else if (shiftKey) {\r\n                            const activeRow = this.#getActiveRow(targetGrid);\r\n                            if (activeRow) {\r\n                                const range = this.#getRowsRange(\r\n                                    activeRow,\r\n                                    targetRow\r\n                                );\r\n                                if (range) {\r\n                                    this.#setRowsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.#setRowsSelection(targetGrid, targetRow);\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetList) {\r\n            if (this.#onSelection.get(targetList)) {\r\n                this.#hasSelectionChanged.set(targetList, true);\r\n            }\r\n            else {\r\n                targetList.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { gridRowWidget } from \"./GridRowWidget\";\r\n\r\nexport { gridBodyWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridbody\": GridBodyWidgetFactory\r\n    }\r\n}\r\n\r\ninterface GridBodyWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar gridBodyWidget = new (\r\nWidget({\r\n    name: \"gridbody\"\r\n})(class GridBodyWidgetFactoryBase extends WidgetFactory implements GridBodyWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"tbody\", {\r\n            attributes: {\r\n                class: \"gridbody\",\r\n                role: \"rowgroup\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(body: HTMLElement) {\r\n        return body;\r\n    }\r\n\r\n    slottedCallback(body: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"gridrow\")) {\r\n                gridRowWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridHeadWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridhead\": GridHeadWidgetFactory\r\n    }\r\n}\r\n\r\ninterface GridHeadWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar gridHeadWidget = new (\r\nWidget({\r\n    name: \"gridhead\"\r\n})(class GridHeadWidgetFactoryBase extends WidgetFactory implements GridHeadWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"thead\", {\r\n            attributes: {\r\n                class: \"gridhead\",\r\n                role: \"rowgroup\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(head: HTMLElement) {\r\n        return head;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridHeaderWidget };\r\n\r\ninterface GridHeaderWidgetFactory extends WidgetFactory {\r\n    create(init: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }): HTMLElement;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridheader\": GridHeaderWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridHeaderWidget = new (\r\nWidget({\r\n    name: \"gridheader\"\r\n})(class GridHeaderWidgetFactoryBase extends WidgetFactory implements GridHeaderWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"th\", {\r\n            attributes: {\r\n                class: \"gridheader\",\r\n                scope: \"column\",\r\n                role: \"columnheader\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }): HTMLElement {\r\n        const header = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {id, classList, tabIndex} = init;\r\n            if (id !== undefined) {\r\n                header.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                header.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                header.tabIndex = tabIndex;\r\n            }\r\n        }\r\n        return header;\r\n    }\r\n\r\n    slot(header: HTMLElement): HTMLElement | null {\r\n        return header;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { optionWidget };\r\n\r\ninterface OptionWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        label?: string;\r\n        name?: string;\r\n        value?: string;\r\n        selected?: boolean;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    getLabel(option: HTMLElement): string;\r\n    setLabel(option: HTMLElement, value: string): void;\r\n    getValue(option: HTMLElement): string;\r\n    setValue(option: HTMLElement, value: string): void;\r\n    getName(option: HTMLElement): string;\r\n    setName(option: HTMLElement, value: string): void;\r\n    getSelected(option: HTMLElement): boolean;\r\n    setSelected(option: HTMLElement, value: boolean): void;\r\n    setDisabled(option: HTMLElement, value: boolean): void;\r\n    getDisabled(option: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"option\": OptionWidgetFactory\r\n    }\r\n}\r\n\r\nvar optionWidget = new(\r\nWidget({\r\n    name: \"option\"\r\n})(\r\nclass OptionWidgetFactoryBase extends WidgetFactory implements OptionWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"span\", {\r\n            attributes: {\r\n                class: \"option\",\r\n                role: \"option\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(properties?: {\r\n        selected?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const option = <HTMLElement>this.#template.cloneNode(true);\r\n        if (properties !== undefined) {\r\n            const {label, name, value, disabled} = properties;\r\n            let {selected} = properties;\r\n            selected = selected ?? false;\r\n            if (selected !== undefined) {\r\n                this.setSelected(option, selected);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(option, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(option, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(option, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(option, disabled);\r\n            }\r\n        }\r\n        return option;\r\n    }\r\n\r\n    get observedAttributes() {\r\n        return [\"aria-selected\"];\r\n    }\r\n\r\n    attributeChangedCallback(option: HTMLElement, name: string, oldValue: string, newValue: string) {\r\n        switch (name) {\r\n            case \"aria-selected\": {\r\n                if (JSON.parse(newValue) === true) {\r\n                    option.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #label(option: HTMLElement): HTMLElement {\r\n        return option.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n\r\n    getLabel(option: HTMLElement): string {\r\n        return this.#label(option).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(option: HTMLElement, value: string): void {\r\n        this.#label(option).textContent = value;\r\n    }\r\n\r\n    getValue(option: HTMLElement): string {\r\n        return option.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(option: HTMLElement, value: string): void {\r\n        option.setAttribute(\"value\", value);\r\n    }\r\n    \r\n    getName(option: HTMLElement): string {\r\n        return option.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(option: HTMLElement, value: string): void {\r\n        option.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getSelected(option: HTMLElement): boolean {\r\n        return JSON.parse(option.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    setSelected(option: HTMLElement, value: boolean): void {\r\n        option.setAttribute(\"aria-selected\", String(value));\r\n    }\r\n\r\n    getDisabled(option: HTMLElement): boolean {\r\n        return option.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(option: HTMLElement, value: boolean): void {\r\n        option.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { optionWidget } from \"./OptionWidget\";\r\n\r\nexport { comboBoxWidget };\r\n\r\ninterface ComboBoxWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        name?: string;\r\n        disabled?: boolean;\r\n        multiselectable?: boolean;\r\n    }): HTMLElement;\r\n    options(combobox: HTMLElement): HTMLElement[];\r\n    getName(combobox: HTMLElement): string;\r\n    setName(combobox: HTMLElement, value: string): void;\r\n    getExpanded(combobox: HTMLElement): boolean;\r\n    setExpanded(combobox: HTMLElement, value: boolean): void;\r\n    setDisabled(combobox: HTMLElement, value: boolean): void;\r\n    getDisabled(combobox: HTMLElement): boolean;\r\n    expand(combobox: HTMLElement): void;\r\n    collapse(combobox: HTMLElement): void;\r\n    toggle(combobox: HTMLElement, force?: boolean): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"combobox\": ComboBoxWidgetFactory\r\n    }\r\n}\r\n\r\nvar comboBoxWidget = new(\r\nWidget({\r\n    name: \"combobox\"\r\n})(\r\nclass ComboBoxWidgetFactoryBase extends WidgetFactory implements ComboBoxWidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #optionsObserver: MutationObserver;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#optionsObserver = new MutationObserver(\r\n            this.#optionsMutationCallback.bind(this)\r\n        );\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"combobox\",\r\n                role: \"combobox\",\r\n                tabindex: 0,\r\n            },\r\n            children: [\r\n                element(\"div\", {\r\n                    attributes: {\r\n                        class: \"content\"\r\n                    },\r\n                    children: [\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"value\"\r\n                            }\r\n                        })\r\n                    ]\r\n                }),\r\n                element(\"div\", {\r\n                    attributes: {\r\n                        class: \"box\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        name?: string;\r\n        disabled?: boolean;\r\n        multiselectable?: boolean;\r\n    }): HTMLElement {\r\n        const combobox = <HTMLElement>this.#template.cloneNode(true);\r\n        this.#optionsObserver.observe(combobox, {\r\n            childList: true,\r\n            subtree: true\r\n        });\r\n        combobox.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        combobox.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        combobox.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        combobox.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.setExpanded(combobox, false);\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, name, disabled, multiselectable} = properties;\r\n            if (id !== undefined) {\r\n                combobox.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                combobox.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                combobox.tabIndex = tabIndex;\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(combobox, name);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(combobox, disabled);\r\n            }\r\n            if (multiselectable !== undefined) {\r\n                this.setMultiSelectable(combobox, multiselectable);\r\n            }\r\n        }\r\n        return combobox;\r\n    }\r\n\r\n    slot(combobox: HTMLElement) {\r\n        return this.#box(combobox);\r\n    }\r\n\r\n    slottedCallback(combobox: HTMLElement, slot: HTMLElement, name: string | null) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement) {\r\n                //gridRowWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n\r\n    #box(combobox: HTMLElement): HTMLElement {\r\n        return combobox.querySelector<HTMLElement>(\":scope > .box\")!;\r\n    }\r\n    \r\n    options(combobox: HTMLElement): HTMLElement[] {\r\n        return Array.from(combobox.querySelectorAll<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option\"\r\n        ));\r\n    }\r\n\r\n    selectedOption(combobox: HTMLElement): HTMLElement | null {\r\n        return combobox.querySelector<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option[aria-selected=true]\"\r\n        );\r\n    }\r\n\r\n    #getActiveOption(combobox: HTMLElement): HTMLElement | null {\r\n        return combobox.querySelector<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option:focus-within\"\r\n        );\r\n    }\r\n\r\n    #value(combobox: HTMLElement): HTMLElement {\r\n        return combobox.querySelector<HTMLElement>(\":scope > .content > .value\")!;\r\n    }\r\n    \r\n    getName(combobox: HTMLElement): string {\r\n        return combobox.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(combobox: HTMLElement, value: string): void {\r\n        combobox.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getDisabled(combobox: HTMLElement): boolean {\r\n        return combobox.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(combobox: HTMLElement, value: boolean): void {\r\n        combobox.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setExpanded(combobox: HTMLElement, value: boolean): void {\r\n        combobox.setAttribute(\"aria-expanded\", String(value));\r\n    }\r\n\r\n    getExpanded(combobox: HTMLElement): boolean {\r\n        return JSON.parse(combobox.getAttribute(\"aria-expanded\") ?? String(false));\r\n    }\r\n\r\n    setMultiSelectable(combobox: HTMLElement, value: boolean): void {\r\n        combobox.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(combobox: HTMLElement): boolean {\r\n        return JSON.parse(combobox.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    expand(combobox: HTMLElement): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        if (!expanded) {\r\n            this.setExpanded(combobox, true);\r\n            this.#positionBox(combobox);\r\n            const selectedOption = this.selectedOption(combobox);\r\n            if (selectedOption) {\r\n                selectedOption.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(combobox: HTMLElement): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        if (expanded) {\r\n            this.setExpanded(combobox, false);\r\n            combobox.focus();\r\n        }\r\n    }\r\n\r\n    toggle(combobox: HTMLElement, force?: boolean): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand(combobox) : this.collapse(combobox);\r\n    }\r\n\r\n    #optionsMutationCallback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            const targetCombobox = (<HTMLElement>target).closest<HTMLElement>(\".combobox\")!;\r\n            if (targetCombobox instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"childList\": {\r\n                        const {addedNodes} = mutation;\r\n                        const selector = \".option[aria-selected=true]\";\r\n                        for (let node of addedNodes) {\r\n                            if (node instanceof HTMLElement) {\r\n                                const selectedOption = node.matches(selector) ? node :\r\n                                    node.querySelector<HTMLElement>(selector);\r\n                                if (selectedOption) {\r\n                                    this.#setSelectedOption(targetCombobox, selectedOption);\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"option\") && !optionWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"optiongroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstOption(combobox: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = this.#box(combobox);\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastOption(combobox: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = this.#box(combobox);\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousOption(option: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextOption(option: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLElement | null>walker.nextNode();\r\n    }\r\n\r\n    #selectOption(combobox: HTMLElement, option: HTMLElement) {\r\n        const selectedOption = this.selectedOption(combobox);\r\n        if (selectedOption) {\r\n            optionWidget.setSelected(selectedOption, false);\r\n        }\r\n        if (option !== selectedOption) {\r\n            optionWidget.setSelected(option, true);\r\n            this.#setSelectedOption(combobox, option);\r\n            combobox.dispatchEvent(new Event(\"change\", {bubbles: true}));\r\n        }\r\n    }\r\n    \r\n    #setSelectedOption(combobox: HTMLElement, option: HTMLElement) {\r\n        this.#value(combobox).textContent = optionWidget.getLabel(option);\r\n    }\r\n\r\n    #positionBox(combobox: HTMLElement): void {\r\n        const box = combobox.querySelector<HTMLElement>(\":scope > .box\")!;\r\n        const {style: optionsStyle} = box;  \r\n        const {bottom, left} = combobox.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        optionsStyle.setProperty(\"top\", `${bottom + scrollY}px`);\r\n        optionsStyle.setProperty(\"left\", `${left + scrollX}px`);\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        this.toggle(targetCombobox);\r\n        const expanded = this.getExpanded(targetCombobox);\r\n        if (expanded) {\r\n            const selectedOption = this.selectedOption(targetCombobox);\r\n            (selectedOption ?? this.options(targetCombobox)[0])?.focus({preventScroll: true});\r\n        }\r\n        else {\r\n            const targetOption = (<HTMLElement>target).closest<HTMLElement>(\".option\");\r\n            if (targetOption) {\r\n                this.#selectOption(targetCombobox, targetOption);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetCombobox.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse(targetCombobox);\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        const expanded = this.getExpanded(targetCombobox);\r\n        const activeOption = this.#getActiveOption(targetCombobox);\r\n        const selectedOption = this.selectedOption(targetCombobox);\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                if (expanded) {\r\n                    const previousOption = activeOption ?\r\n                        this.#previousOption(activeOption) :\r\n                        this.#firstOption(targetCombobox);\r\n                    if (previousOption) {\r\n                        previousOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const previousOption = selectedOption ?\r\n                        this.#previousOption(selectedOption) :\r\n                        this.#firstOption(targetCombobox);\r\n                    if (previousOption) {\r\n                        this.#selectOption(targetCombobox, previousOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (expanded) {\r\n                    const nextOption = activeOption ?\r\n                        this.#nextOption(activeOption) :\r\n                        this.#lastOption(targetCombobox);\r\n                    if (nextOption) {\r\n                        nextOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const nextOption = selectedOption ?\r\n                        this.#nextOption(selectedOption) :\r\n                        this.#lastOption(targetCombobox);\r\n                    if (nextOption) {\r\n                        this.#selectOption(targetCombobox, nextOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstOption = this.#firstOption(targetCombobox);\r\n                if (firstOption) {\r\n                    if (expanded) {\r\n                        firstOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(targetCombobox, firstOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastOption = this.#lastOption(targetCombobox);\r\n                if (lastOption) {\r\n                    if (expanded) {\r\n                        lastOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(targetCombobox, lastOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (expanded) {\r\n                    this.collapse(targetCombobox);\r\n                    if (activeOption) {\r\n                        this.#selectOption(targetCombobox, activeOption);\r\n                    }\r\n                }\r\n                else {\r\n                    this.expand(targetCombobox);\r\n                    selectedOption?.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.collapse(targetCombobox);\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            default: {\r\n                const {length: keyLength} = key;\r\n                if (keyLength == 1) {\r\n                    const keyCode = key.charCodeAt(0);\r\n                    const options = this.options(targetCombobox);\r\n                    const activeIndex = activeOption ? options.indexOf(activeOption) : -1;\r\n                    const matchingOption = options.find(\r\n                        (option_i, i) => optionWidget.getLabel(option_i).toLowerCase().charCodeAt(0) == keyCode && i > activeIndex\r\n                    ) ?? options.find(\r\n                        (option_i) => optionWidget.getLabel(option_i).toLowerCase().charCodeAt(0) == keyCode\r\n                    );\r\n                    if (matchingOption) {\r\n                        matchingOption.focus({preventScroll: true});\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetItem = (<Element>target).closest<HTMLElement>(\".option\");\r\n        if (targetItem) {\r\n            targetItem.focus({preventScroll: true});\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { optionGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"optiongroup\": OptionGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface OptionGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar optionGroupWidget = new (\r\nWidget({\r\n    name: \"optiongroup\"\r\n})(class OptionGroupWidgetFactoryBase extends WidgetFactory implements OptionGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"optiongroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n}));","import { ModelObject } from \"../models/Model\";\r\n\r\nexport { View };\r\n\r\ninterface View extends HTMLElement {\r\n    readonly model: ModelObject | null;\r\n    setModel(model: ModelObject): void;\r\n    renderShadow(): Node | undefined;\r\n    renderLight(): Node | undefined;\r\n    refresh(): void;\r\n}\r\n\r\ninterface ViewConstructor {\r\n    prototype: View;\r\n    new(): View;\r\n}\r\n\r\nclass ViewBase extends HTMLElement implements View {\r\n    #model: ModelObject | null;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#model = null;\r\n    }\r\n\r\n    get model(): ModelObject | null {\r\n        return this.#model;\r\n    }\r\n    \r\n    setModel(model: ModelObject): void {\r\n        if (model !== this.#model) {\r\n            this.#model = model;\r\n            this.#render();\r\n        }\r\n    }\r\n\r\n    renderLight(): Node | undefined {\r\n        return;\r\n    }\r\n\r\n    renderShadow(): Node | undefined {\r\n        return;\r\n    }\r\n\r\n    refresh(): void {\r\n        this.#render();\r\n    }\r\n\r\n    #render(): void {\r\n        const {shadowRoot} = this;\r\n        if (shadowRoot !== null) {\r\n            const shadow = this.renderShadow();\r\n            if (shadow) {\r\n                shadowRoot.replaceChildren(shadow);\r\n            }\r\n        }\r\n        const light = this.renderLight();\r\n        if (light) {\r\n            this.replaceChildren(light);\r\n        }\r\n    }\r\n}\r\n\r\nvar View: ViewConstructor = ViewBase;","import { element, reactiveChildElements, CustomElement, fragment, AttributeProperty, reactiveElement } from \"../elements/Element\";\r\nimport { ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\nimport { gridWidget } from \"./widgets/grid/GridWidget\";\r\nimport { menuWidget } from \"./widgets/menu/MenuWidget\";\r\nimport { menuItemWidget } from \"./widgets/menu/MenuItemWidget\";\r\nimport { widget } from \"./widgets/Widget\";\r\n\r\nexport { GridModel };\r\nexport { GridRowModel };\r\nexport { GridColumnModel };\r\nexport { GridView };\r\n\r\nclass GridModel extends ModelObject {\r\n    readonly rows: ModelList<GridRowModel>;\r\n    readonly columns: ModelList<GridColumnModel>;\r\n\r\n    constructor()\r\n    constructor(init: {rows: GridRowModel[], columns: GridColumnModel[]})\r\n    constructor(init?: {rows: GridRowModel[], columns: GridColumnModel[]}) {\r\n        super();\r\n        const {rows: initRows = [], columns: initColumns = []} = init ?? {};\r\n        const rows = new ModelList(initRows);\r\n        rows.setParent(this);\r\n        this.rows = rows;\r\n        const columns = new ModelList(initColumns);\r\n        columns.setParent(this);\r\n        this.columns = columns;\r\n    }\r\n\r\n    getColumnByName(name: string): GridColumnModel | null {\r\n        return Array.from(this.columns.values()).find(\r\n            column_i => column_i.name == name\r\n        ) ?? null;\r\n    }\r\n\r\n    sortByColumn(column: GridColumnModel, sortOrder: number) {\r\n        Array.from(this.columns.values()).forEach((column_i) => {\r\n            column_i.sortorder = column_i === column ? sortOrder : undefined;\r\n        });\r\n        const sortTest = (() => {\r\n            const {type} = column;\r\n            switch (type) {\r\n                case String: {\r\n                    return (row_1: GridRowModel, row_2: GridRowModel) => {\r\n                        const cell_1 = String(column.extract(row_1));\r\n                        const cell_2 = String(column.extract(row_2));\r\n                        return sortOrder * cell_1.localeCompare(cell_2);\r\n                    };\r\n                }\r\n                default: {\r\n                    return (row_1: GridRowModel, row_2: GridRowModel) => {\r\n                        const cell_1 = Number(column.extract(row_1));\r\n                        const cell_2 = Number(column.extract(row_2));\r\n                        return Math.sign(sortOrder * (cell_1 - cell_2));\r\n                    };\r\n                }\r\n            }\r\n        })();\r\n        this.rows.sort(sortTest);\r\n    }\r\n}\r\n\r\ntype Constructor = {\r\n    new(...args: any): any;\r\n    prototype: any;\r\n}\r\n\r\ntype GridRowFilter = {\r\n    filter: (row: GridRowModel) => boolean;\r\n}\r\n\r\nclass GridColumnModel<T extends Constructor = Constructor> extends ModelObject {\r\n    readonly name: string\r\n    readonly type: NumberConstructor | StringConstructor | DateConstructor;\r\n    readonly label: string;\r\n    readonly extract: (row: GridRowModel) => InstanceType<T>;\r\n    readonly filters: (GridRowFilter & {name: string})[];\r\n\r\n    @ModelProperty()\r\n    sortorder: number | undefined;\r\n\r\n    constructor(init: {\r\n        name: string,\r\n        type: NumberConstructor | StringConstructor | DateConstructor,\r\n        label: string,\r\n        extract: (row: GridRowModel) => InstanceType<T>,\r\n        filters?: (GridRowFilter & {name: string})[]\r\n    }) {\r\n        super();\r\n        const {name, type, label, extract, filters = []} = init;\r\n        this.name = name;\r\n        this.type = type;\r\n        this.label = label;\r\n        this.extract = extract;\r\n        this.filters = filters;\r\n        this.sortorder = 1;\r\n    }\r\n}\r\n\r\nclass GridRowModel extends ModelObject {\r\n    id: number;\r\n\r\n    @ModelProperty()\r\n    name: string;\r\n\r\n    @ModelProperty()\r\n    age: number;\r\n    \r\n    constructor(init: {\r\n        id: number;\r\n        name: string,\r\n        age: number\r\n    }) {\r\n        super();\r\n        const {id, name, age} = init;\r\n        this.id = id;\r\n        this.name = name;\r\n        this.age = age;\r\n    }\r\n}\r\n\r\ninterface GridViewConstructor {\r\n    prototype: GridView;\r\n    new(): GridView;\r\n    new(model: GridModel): GridView;\r\n}\r\n\r\ninterface GridView extends View {\r\n    readonly shadowRoot: ShadowRoot;\r\n    model: GridModel;\r\n    resizable: boolean;\r\n    sortable: boolean;\r\n    setColumnDelegate(delegate: (column: GridColumnModel) => string | Node): void;\r\n    setCellDelegate(delegate: (row: GridRowModel, column: GridColumnModel) => string | Node): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridview\": GridView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-gridview\"\r\n})\r\nclass GridViewBase extends View implements GridView {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly model!: GridModel;\r\n\r\n    #columnDelegate: (column: GridColumnModel) => string | Node;\r\n    #cellDelegate: (row: GridRowModel, column: GridColumnModel) => string | Node;\r\n    \r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    resizable!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    sortable!: boolean;\r\n\r\n    #displayFilters: (GridRowFilter & {name: string})[];\r\n    #searchFilter: GridRowFilter | null;\r\n    \r\n    constructor()\r\n    constructor(model: GridModel)\r\n    constructor(model?: GridModel) {\r\n        super();\r\n        this.#displayFilters = [];\r\n        this.#searchFilter = null;\r\n        this.attachShadow({mode: \"open\"});\r\n        this.#cellDelegate =\r\n            (row: GridRowModel, column: GridColumnModel) =>\r\n                element(\"label\", {\r\n                    children: column.extract(row)\r\n                });\r\n        this.#columnDelegate =\r\n            (column: GridColumnModel) =>\r\n                element(\"label\", {\r\n                    children: column.label\r\n                });\r\n        this.setModel(model ?? new GridModel());\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"resizable\":\r\n            case \"sortable\": {\r\n                this.refresh();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    get gridElement(): HTMLElement {\r\n        return this.getGridElement()!;\r\n    }\r\n\r\n    setColumnDelegate(delegate: (column: GridColumnModel) => string | Node): void {\r\n        this.#columnDelegate = delegate;\r\n    }\r\n\r\n    setCellDelegate(delegate: (row: GridRowModel, column: GridColumnModel) => string | Node): void {\r\n        this.#cellDelegate = delegate;\r\n    }\r\n\r\n    getGridElement(): HTMLElement | null {\r\n        return this.shadowRoot.querySelector(`:scope > .grid`);\r\n    }\r\n\r\n    getRowElement(row: GridRowModel): HTMLElement | null {\r\n        return this.shadowRoot.querySelector(`:scope > .grid > .gridbody > .gridrow[data-index='${row.id}']`);\r\n    }\r\n\r\n    getColumnHeaderElement(column: GridColumnModel): HTMLElement | null {\r\n        return this.shadowRoot.querySelector(`:scope > .grid > .gridhead > .gridheader[id=${column.name}]`);\r\n    }\r\n    \r\n    getColumnCellsElements(column: GridColumnModel): HTMLElement[] {\r\n        return Array.from(this.shadowRoot.querySelectorAll(`:scope > .grid > .gridbody > .gridrow > .gridcell[headers~=${column.name}]`));\r\n    }\r\n\r\n    renderShadow(): Node {\r\n        const {model} = this;\r\n        return fragment(\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/main.css\"\r\n                }\r\n            }),\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/views/gridview.css\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                children: element(\"input\", {\r\n                    attributes: {\r\n                        type: \"search\"\r\n                    },\r\n                    listeners: {\r\n                        input: <EventListener>this.#handleSearchInputEvent.bind(this)\r\n                    }\r\n                })\r\n            }),\r\n            widget(\"grid\", {\r\n                properties: {\r\n                    tabIndex: 0,\r\n                    selectby: \"row\",\r\n                    multisectable: true\r\n                },\r\n                slotted: [\r\n                    widget(\"gridhead\", {\r\n                        slotted: reactiveChildElements(\r\n                            model.columns, column => this.#renderGridColumnHeaderCell(column)\r\n                        ),\r\n                        listeners: {\r\n                            contextmenu: <EventListener>this.#handleHeadContextMenuEvent.bind(this),\r\n                            click: <EventListener>this.#handleHeadClickEvent.bind(this)\r\n                        }\r\n                    }),\r\n                    widget(\"gridbody\", {\r\n                        slotted: reactiveChildElements(\r\n                            model.rows, row => this.#renderGridBodyRow(row)\r\n                        )\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    #filter(row: GridRowModel): boolean {\r\n        const displayFilters = this.#displayFilters;\r\n        const searchFilter = this.#searchFilter;\r\n        return (displayFilters.length > 0 ? displayFilters.some(filter_i => filter_i.filter(row)) : true) &&\r\n        (searchFilter ? searchFilter.filter(row) : true);\r\n    }\r\n\r\n    setSearchFilter(filter: GridRowFilter | null): void {\r\n        const {model, gridElement} = this;\r\n        const {rows} = model;\r\n        this.#searchFilter = filter;\r\n        Array.from(rows.values()).forEach((row_i) => {\r\n            const rowElement = this.getRowElement(row_i);\r\n            if (rowElement) {\r\n                rowElement.hidden = !this.#filter(row_i);\r\n            }\r\n        });\r\n        gridWidget.clearSelection(gridElement);\r\n    }\r\n\r\n    addDisplayFilter(filter: (GridRowFilter & {name: string;})): void {\r\n        const {model, gridElement} = this;\r\n        const {rows} = model;\r\n        const displayFilters = this.#displayFilters;\r\n        if (!displayFilters.includes(filter)) {\r\n            displayFilters.push(filter);\r\n            Array.from(rows.values()).forEach((row_i) => {\r\n                const rowElement = this.getRowElement(row_i);\r\n                if (rowElement) {\r\n                    rowElement.hidden = !this.#filter(row_i);\r\n                }\r\n            });\r\n        }\r\n        gridWidget.clearSelection(gridElement);\r\n    }\r\n\r\n    removeDisplayFilter(filter: (GridRowFilter & {name: string;})): void {\r\n        const {model, gridElement} = this;\r\n        const {rows} = model;\r\n        const displayFilters = this.#displayFilters;\r\n        const filterIndex = displayFilters.indexOf(filter);\r\n        if (filterIndex > -1) {\r\n            displayFilters.splice(filterIndex, 1);\r\n            Array.from(rows.values()).forEach((row_i) => {\r\n                const rowElement = this.getRowElement(row_i);\r\n                if (rowElement) {\r\n                    rowElement.hidden = !this.#filter(row_i);\r\n                }\r\n            });\r\n        }\r\n        gridWidget.clearSelection(gridElement);\r\n    }\r\n\r\n    #renderGridColumnHeaderCell(column: GridColumnModel): Element {\r\n        const gridColumnElement = reactiveElement(\r\n            column,\r\n            widget(\"gridheader\", {\r\n                properties: {\r\n                    id: column.name\r\n                },\r\n                slotted: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            class: \"gridheader-content\"\r\n                        },\r\n                        children: (<Node[]>[\r\n                            element(\"span\", {\r\n                                attributes: {\r\n                                    class: \"gridheader-label\"\r\n                                },\r\n                                children: this.#columnDelegate(column)\r\n                            })\r\n                        ]).concat(\r\n                            this.resizable ? [\r\n                                widget(\"widthsash\", {\r\n                                    properties: {\r\n                                        controls: column.name\r\n                                    }\r\n                                })\r\n                            ] : []\r\n                        )\r\n                    })\r\n                ]\r\n            }),\r\n            [\"sortorder\"],\r\n            (cell, property, oldValue, newValue) => {\r\n                switch (property) {\r\n                    case \"sortorder\":\r\n                        const {dataset} = cell;\r\n                        if (typeof newValue !== \"undefined\") {\r\n                            dataset.sortorder = newValue.toString();\r\n                        }\r\n                        else {\r\n                            delete dataset.sortorder;\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        );\r\n        return gridColumnElement;\r\n    }\r\n\r\n    #renderGridBodyRow(row: GridRowModel): Element {\r\n        const {model} = this;\r\n        const gridRowElement = widget(\"gridrow\", {\r\n            dataset: {\r\n                index: row.id\r\n            },\r\n            slotted: reactiveChildElements(\r\n                model.columns, column => this.#renderGridDataCell(row, column)\r\n            )\r\n        });\r\n        return gridRowElement;\r\n    }\r\n\r\n    #renderGridDataCell(row: GridRowModel, column: GridColumnModel): Element {\r\n        const gridCellElement = widget(\"gridcell\", {\r\n            properties: {\r\n                headers: column.name\r\n            },\r\n            slotted: element(\"span\", {\r\n                attributes: {\r\n                    class: \"gridcell-content\"\r\n                },\r\n                children: (<Node[]>[\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            class: \"gridcell-label\"\r\n                        },\r\n                        children: this.#cellDelegate(row, column)\r\n                    })\r\n                ])\r\n            })\r\n        });\r\n        return gridCellElement;\r\n    }\r\n\r\n    #handleHeadContextMenuEvent(event: MouseEvent): void {\r\n        const {clientX, clientY, currentTarget, target} = event;\r\n        const targetHead = <HTMLElement>currentTarget;\r\n        const targetHeader = <HTMLElement>(<HTMLElement>target).closest(\".gridheader\");\r\n        const {model} = this;\r\n        if (targetHeader) {\r\n            const column = model.getColumnByName(targetHeader.id)!;\r\n            const contextMenu = widget(\"menu\",  {\r\n                properties: {\r\n                    contextual: true,\r\n                    position: {\r\n                        x: clientX,\r\n                        y: clientY\r\n                    }\r\n                },\r\n                slotted: [\r\n                    widget(\"menuitem\",  {\r\n                        properties: {\r\n                            label: \"Resize Auto\"\r\n                        },\r\n                        listeners: {\r\n                            click: () => {\r\n                                const columnHeaderElement = this.getColumnHeaderElement(column);\r\n                                if (columnHeaderElement) {\r\n                                    const {style} = columnHeaderElement;\r\n                                    const labels = this.getColumnCellsElements(column).map(\r\n                                        cell_i => cell_i.querySelector(\".gridcell-label\")!\r\n                                    );\r\n                                    const maxWidth = labels.reduce(\r\n                                        (maxWidth, label) => Math.max(maxWidth, label.getBoundingClientRect().width), 0\r\n                                    );\r\n                                    style.setProperty(\"width\", `${maxWidth}px`);\r\n                                }\r\n                            }\r\n                        }\r\n                    }),\r\n                    widget(\"menuitem\",  {\r\n                        properties: {\r\n                            label: \"Resize To Default\"\r\n                        },\r\n                        listeners: {\r\n                            click: () => {\r\n                                const columnHeaderElement = this.getColumnHeaderElement(column);\r\n                                if (columnHeaderElement) {\r\n                                    const {style} = columnHeaderElement;\r\n                                    style.removeProperty(\"width\");\r\n                                }\r\n                            }\r\n                        }\r\n                    }),\r\n                    widget(\"menuitem\",  {\r\n                        properties: {\r\n                            type: \"submenu\",\r\n                            label: \"Sort\",\r\n                        },\r\n                        slotted: [\r\n                            widget(\"menu\",  {\r\n                                slotted: [\r\n                                    widget(\"menuitem\",  {\r\n                                        properties: {\r\n                                            type: \"radio\",\r\n                                            name: \"sort\",\r\n                                            value: \"1\",\r\n                                            label: \"Ascending\"\r\n                                        }\r\n                                    }),\r\n                                    widget(\"menuitem\",  {\r\n                                        properties: {\r\n                                            type: \"radio\",\r\n                                            name: \"sort\",\r\n                                            value: \"-1\",\r\n                                            label: \"Descending\"\r\n                                        }\r\n                                    })\r\n                                ],\r\n                                listeners: {\r\n                                    click: (event) => {\r\n                                        const {target} = event;\r\n                                        const targetItem = <HTMLElement>target;\r\n                                        if (targetItem.classList.contains(\"menuitem\")) {\r\n                                            model.sortByColumn(column, Number(menuItemWidget.getValue(targetItem)));\r\n                                        }\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    }),\r\n                    widget(\"menuitem\",  {\r\n                        properties: {\r\n                            type: \"submenu\",\r\n                            label: \"Filter\"\r\n                        },\r\n                        slotted: [\r\n                            widget(\"menu\",  {\r\n                                slotted: column.filters.map((filter_i, i) =>\r\n                                    widget(\"menuitem\", {\r\n                                        properties: {\r\n                                            type: \"checkbox\",\r\n                                            checked: this.#displayFilters.includes(filter_i),\r\n                                            label: filter_i.name\r\n                                        },\r\n                                        listeners: {\r\n                                            click: (event) => {\r\n                                                const {currentTarget} = event;\r\n                                                const targetItem = <HTMLElement>currentTarget;\r\n                                                const checked = menuItemWidget.getChecked(targetItem);\r\n                                                if (checked) {\r\n                                                    this.addDisplayFilter(filter_i);\r\n                                                }\r\n                                                else {\r\n                                                    this.removeDisplayFilter(filter_i);\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    })\r\n                                )\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            });\r\n            targetHead.append(contextMenu);\r\n            contextMenu.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleSearchInputEvent(event: InputEvent) {\r\n        const {target} = event;\r\n        if (target instanceof HTMLInputElement) {\r\n            const {value} = target;\r\n            this.setSearchFilter(value !== \"\" ? {\r\n                filter: (row) => row.name.toLowerCase().includes(value.toLowerCase())\r\n            } : null);\r\n        }\r\n    }\r\n\r\n    #handleHeadClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetIsHeaderLabel = (<HTMLElement>target).matches(\":is(.gridheader-label, .gridheader-label :scope)\");\r\n        if (targetIsHeaderLabel) {\r\n            const targetHeader = <HTMLElement>(<HTMLElement>target).closest(\".gridheader\");\r\n            const {model} = this;\r\n            const {columns} = model;\r\n            if (targetHeader) {\r\n                const targetColumn = Array.from(columns.values()).find(column_i => column_i.name == targetHeader.id);\r\n                if (targetColumn) {\r\n                    const sortorder = targetColumn.sortorder !== undefined ? -targetColumn.sortorder : 1;\r\n                    model.sortByColumn(targetColumn, sortorder);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar GridView: GridViewConstructor = GridViewBase;","import { CustomElement, element, fragment, reactiveChildElements, reactiveElement } from \"../elements/Element\";\r\nimport { ModelEvent, ModelList, ModelObject } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\nimport { treeItemWidget } from \"./widgets/tree/TreeItemWidget\";\r\nimport { treeWidget } from \"./widgets/tree/TreeWidget\";\r\nimport { widget } from \"./widgets/Widget\";\r\n\r\nexport { TreeItemList };\r\nexport { TreeModel };\r\nexport { TreeItemModel };\r\nexport { TreeView };\r\n\r\nclass TreeModel extends ModelObject {\r\n    readonly items: ModelList<TreeItemModel>;\r\n    readonly childItems: ModelList<TreeItemModel>;\r\n    sortFunction: ((item_a: TreeItemModel, item_b: TreeItemModel) => number) | null;\r\n\r\n    constructor()\r\n    constructor(init: {\r\n        items: TreeItemModel[], sortFunction?: (item_a: TreeItemModel, item_b: TreeItemModel) => number;\r\n    })\r\n    constructor(init?: {\r\n        items: TreeItemModel[], sortFunction?: (item_a: TreeItemModel, item_b: TreeItemModel) => number;\r\n    }) {\r\n        super();\r\n        const {items, sortFunction} = init ?? {};\r\n        const childItems = new ModelList(items ?? []);\r\n        childItems.setParent(this);\r\n        this.childItems = childItems;\r\n        this.items = new ModelList(this.flattenItems());\r\n        this.sortFunction = sortFunction ??\r\n            function(item_a: TreeItemModel, item_b: TreeItemModel) {\r\n                return item_a.label.localeCompare(item_b.label);\r\n            };\r\n        this.addEventListener(\"modelchange\", this.#handleModelChangeEvent.bind(this));\r\n    }\r\n    \r\n    #handleModelChangeEvent(event: ModelEvent): void {\r\n        const {target} = event;\r\n        const {items, sortFunction, flattenItems} = this;\r\n        if (target instanceof ModelList) {\r\n            const records = target.getRecords();\r\n            records.forEach((record_i) => {\r\n                const {insertedItems, removedItems} = record_i;\r\n                const flattenedInsertedItems = (<TreeItemModel[]>Array.from(insertedItems.values())).flatMap(\r\n                    insertedItem_i => Array.of(insertedItem_i, ...flattenItems.call(insertedItem_i))\r\n                );\r\n                const flattenedRemovedItems = (<TreeItemModel[]>Array.from(removedItems.values())).flatMap(\r\n                    removedItem_i => Array.of(removedItem_i, ...flattenItems.call(removedItem_i))\r\n                );\r\n                items.beginChanges();\r\n                items.append(...flattenedInsertedItems);\r\n                flattenedRemovedItems.forEach((removedItem_i) => items.remove(removedItem_i));\r\n                if (sortFunction) items.sort(sortFunction);\r\n                items.endChanges();\r\n            });\r\n        }\r\n    }\r\n\r\n    flattenItems(this: TreeModel | TreeItemModel): TreeItemModel[] {\r\n        const {childItems} = this;\r\n        return Array.from(childItems.values()).flatMap(\r\n            treeItem_i => Array.of(treeItem_i, ...TreeModel.prototype.flattenItems.call(treeItem_i))\r\n        );\r\n    }\r\n\r\n    getItemByUri(this: TreeModel | TreeItemModel, uri: string): TreeItemModel | null {\r\n        const {childItems} = this;\r\n        const {length: itemsCount} = childItems;\r\n        const {length: uriLength} = uri;\r\n        for (let i = 0; i < itemsCount; i++) {\r\n            const item_i = childItems.get(i)!;\r\n            const {uri: itemUri} = item_i;\r\n            const {length: itemUriLength} = itemUri;\r\n            if (uri.startsWith(itemUri)) {\r\n                if (uri.charAt(itemUriLength) == \"/\") {\r\n                    return TreeModel.prototype.getItemByUri.call(item_i, uri);\r\n                }\r\n                else if (itemUriLength == uriLength) {\r\n                    return <TreeItemModel>item_i;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\nclass TreeItemList {\r\n    readonly items: TreeItemModel[];\r\n\r\n    constructor(items: TreeItemModel[]) {\r\n        this.items = items;\r\n    }\r\n\r\n    get count(): number {\r\n        return this.items.length;\r\n    }\r\n\r\n    remove(): void {\r\n        const {items} = this;\r\n        const removedItemsGroups = items.reduce((map, item_i) => {\r\n            const {parentNode} = item_i;\r\n            if (parentNode instanceof TreeItemModel || parentNode instanceof TreeModel) {\r\n                const {childItems} = parentNode;\r\n                const group = map.get(childItems);\r\n                if (group) group.push(item_i);\r\n                else map.set(childItems, [item_i]);\r\n            }\r\n            return map;\r\n        }, new Map<ModelList, TreeItemModel[]>());\r\n        Array.from(removedItemsGroups.entries()).forEach(\r\n            ([list_i, children_i]) => {\r\n                list_i.beginChanges();\r\n                children_i.forEach((child_i) => {\r\n                    list_i.remove(child_i);\r\n                });\r\n                list_i.endChanges();\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nclass TreeItemModel extends ModelObject {\r\n    readonly childItems: ModelList<TreeItemModel>;\r\n    readonly type: \"leaf\" | \"parent\";\r\n    readonly label: string;\r\n\r\n    get uri(): string {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return `${parentNode.uri}/${this.label}`;\r\n        }\r\n        return this.label;\r\n    }\r\n\r\n    get parentItem(): TreeItemModel | null {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return parentNode;\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    constructor(init: {label: string, type: \"leaf\" | \"parent\", items?: TreeItemModel[]}) {\r\n        super();\r\n        const {label, type, items} = init;\r\n        const childItems = new ModelList(items ?? []);\r\n        childItems.setParent(this);\r\n        this.childItems = childItems;\r\n        this.label = label;\r\n        this.type = type;\r\n    }\r\n    \r\n    remove(): void {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel || parentNode instanceof TreeModel) {\r\n            const {childItems} = parentNode;\r\n            if (childItems) {\r\n                childItems.remove(this);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface TreeViewConstructor {\r\n    prototype: TreeView;\r\n    new(): TreeView;\r\n    new(model: TreeModel): TreeView;\r\n}\r\n\r\ninterface TreeView extends View {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly model: TreeModel;\r\n    itemContentDelegate: <Item extends TreeItemModel>(item: Item) => string | Node;\r\n    itemContextMenuDelegate: <Item extends TreeItemModel>(activeItem: Item, selectedItems: Item[]) => string | Node;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeview\": TreeView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-treeview\"\r\n})\r\nclass TreeViewBase extends View implements TreeView {\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly model!: TreeModel;\r\n    #dragImages: WeakMap<TreeItemModel, WeakRef<Element>>;\r\n\r\n    itemContentDelegate: <Item extends TreeItemModel>(item: Item) => string | Node;\r\n    itemContextMenuDelegate: <Item extends TreeItemModel>(activeItem: Item, selectedItems: Item[]) => string | Node;\r\n    \r\n    constructor()\r\n    constructor(model: TreeModel)\r\n    constructor(model?: TreeModel) {\r\n        super();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.#dragImages = new WeakMap();\r\n        this.itemContentDelegate = function(item: TreeItemModel) {\r\n            return reactiveElement(\r\n                item,\r\n                element(\"span\"),\r\n                [\"label\"],\r\n                (label, property, oldValue, newValue) => {\r\n                    label.textContent = newValue;\r\n                }\r\n            );\r\n        };\r\n        this.itemContextMenuDelegate = function(activeItem: TreeItemModel, selectedItems: TreeItemModel[]) {\r\n            return fragment(\r\n                widget(\"menuitemgroup\", {\r\n                    slotted: [\r\n                        widget(\"menuitem\", {\r\n                            properties: {\r\n                                label: \"Delete\"\r\n                            },\r\n                            listeners: {\r\n                                click: () => {\r\n                                    const itemsList = new TreeItemList(selectedItems);\r\n                                    const {count} = itemsList;\r\n                                    const doRemove = confirm(`Remove ${count} items?`);\r\n                                    if (doRemove) {\r\n                                        itemsList.remove();\r\n                                    }\r\n                                }\r\n                            }\r\n                        })\r\n                    ]\r\n                })\r\n            );\r\n        };\r\n        this.setModel(model ?? new TreeModel());\r\n    }\r\n\r\n    renderShadow(): Node {\r\n        const {model} = this;\r\n        const treeElement = widget(\"tree\", {\r\n            properties: {\r\n                tabIndex: 0,\r\n            },\r\n            slotted: reactiveChildElements(\r\n                model.childItems, item => this.#renderTreeItem(item, model)\r\n            ),\r\n            listeners: {\r\n                dragstart: <EventListener>this.#handleDragStartEvent.bind(this),\r\n                drop: <EventListener>this.#handleDropEvent.bind(this),\r\n                contextmenu: <EventListener>this.#handleContextMenuEvent.bind(this),\r\n                keydown: <EventListener>this.#handleKeyDownEvent.bind(this),\r\n                focusin: <EventListener>this.#handleFocusInEvent.bind(this),\r\n                focusout: <EventListener>this.#handleFocusOutEvent.bind(this),\r\n            }\r\n        });\r\n        return fragment(\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/main.css\"\r\n                }\r\n            }),\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/views/gridview.css\"\r\n                }\r\n            }),\r\n            treeElement,\r\n            element(\"div\", {\r\n                attributes: {\r\n                    class: \"offscreen\",\r\n                    hidden: true\r\n                },\r\n                children: reactiveChildElements(model.items,\r\n                    item => this.#renderTreeItemDragImage(item)\r\n                )\r\n            })\r\n        );\r\n    }\r\n\r\n    selectedItems(tree: HTMLElement): TreeItemModel[] {\r\n        const {model} = this;\r\n        const selectedElements = treeWidget.selectedItems(tree);\r\n        return selectedElements.map(\r\n            item_i => <TreeItemModel>model.getItemByUri(item_i.dataset.uri!)\r\n        );\r\n    }\r\n\r\n    #getDragImage(model: TreeItemModel): Element | null {\r\n        return this.#dragImages.get(model)?.deref() ?? null;\r\n    }\r\n\r\n    #renderTreeItem(item: TreeItemModel, model: TreeModel): Element {\r\n        const treeItemElement = widget(\"treeitem\", {\r\n            properties: {\r\n                type: item.type,\r\n                draggable: true\r\n            },\r\n            dataset: {\r\n                uri: item.uri\r\n            },\r\n            slotted: {\r\n                content: this.itemContentDelegate.call(this, item),\r\n                group:\r\n                    <Node[]>((item.type == \"parent\") ? [\r\n                    widget(\"treeitemgroup\", {\r\n                        slotted: reactiveChildElements(item.childItems,\r\n                            item => this.#renderTreeItem(item, model)\r\n                        )\r\n                    })\r\n                ] : [])\r\n            }\r\n        });\r\n        return treeItemElement;\r\n    }\r\n\r\n    #renderTreeItemDragImage(item: TreeItemModel): Element {\r\n        const dragImageElement = reactiveElement(\r\n            item,\r\n            element(\"span\", {\r\n                attributes: {\r\n                    class: \"dragimage\"\r\n                }\r\n            }),\r\n            [\"label\"],\r\n            (span, property, oldValue, newValue) => {\r\n                span.textContent = newValue;\r\n            }\r\n        );\r\n        this.#dragImages.set(item, new WeakRef(dragImageElement));\r\n        return dragImageElement;\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n        const {model} = this;\r\n        if (targetItem) {\r\n            const {dataTransfer} = event;\r\n            const selectedElements = treeWidget.selectedItems(targetTree);\r\n            const {length: selectedCount} = selectedElements;\r\n            if (selectedCount > 0) {\r\n                const selectedUris = \r\n                    selectedElements\r\n                    .map((element_i) =>\r\n                        element_i.dataset.uri!\r\n                    )\r\n                    .filter(\r\n                        (uri_i, _, uris) => !uris.some(\r\n                            uri_j => uri_i.startsWith(`${uri_j}/`)\r\n                        )\r\n                    );\r\n                const selectedUrisString = selectedUris.join(\"\\n\");\r\n                const lastUri = selectedUris[selectedUris.length - 1];\r\n                const lastItem = model.getItemByUri(lastUri);\r\n                if (lastItem && dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", selectedUrisString);\r\n                    const dragImage = this.#getDragImage(lastItem);\r\n                    if (dragImage) {\r\n                        dataTransfer.setDragImage(dragImage, -16, 0);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n        const {model} = this;\r\n        const {sortFunction} = model;\r\n        if (targetItem) {\r\n            const {dataTransfer} = event;\r\n            if (dataTransfer) {\r\n                const targetUri = targetItem.dataset.uri!;\r\n                const targetItemModel = model.getItemByUri(targetUri)!;\r\n                const transferedUris = dataTransfer.getData(\"text/plain\").split(\"\\n\");\r\n                const targetIsWithin = transferedUris.some(uri_i => targetUri.startsWith(`${uri_i}/`) || uri_i == targetUri);\r\n                if (!targetIsWithin) {\r\n                    const transferedItems = <TreeItemModel[]>transferedUris.map(\r\n                        uri_i => model.getItemByUri(uri_i)\r\n                    ).filter(\r\n                        item_i => item_i !== null\r\n                    );\r\n                    const {type: targetType, parentItem: targetParentItem} = targetItemModel;\r\n                    const {childItems: targetList} = targetType == \"parent\" ?\r\n                        targetItemModel :\r\n                        targetParentItem ?\r\n                        targetParentItem :\r\n                        model;\r\n                    const targetItems = Array.from(targetList.values());\r\n                    targetItems.forEach((item_i) => {\r\n                        const sameLabelIndex = transferedItems.findIndex(item_j => item_j.label == item_i.label);\r\n                        if (sameLabelIndex > -1) {\r\n                            const doReplace = confirm(`Replace ${item_i.label}?`);\r\n                            if (doReplace) {\r\n                                targetList.remove(item_i);\r\n                            }\r\n                            else {\r\n                                transferedItems.copyWithin(sameLabelIndex, sameLabelIndex + 1);\r\n                                transferedItems.length--;\r\n                            }\r\n                        }\r\n                    });\r\n                    const itemsList = new TreeItemList(transferedItems);\r\n                    itemsList.remove();\r\n                    if (sortFunction) {\r\n                        targetList.beginChanges();\r\n                        targetList.append(...transferedItems);\r\n                        targetList.sort(sortFunction);\r\n                        targetList.endChanges();\r\n                    }\r\n                    else {\r\n                        targetList.insert(treeItemWidget.getPosInSet(targetItem), ...transferedItems);\r\n                    }\r\n                    \r\n                    const newElements = targetTree.querySelectorAll<HTMLElement>(`.treeitem:is(${\r\n                        transferedItems.map(item_i => `[data-uri=\"${item_i.uri}\"]`).join(\",\")\r\n                    })`);\r\n                    treeWidget.beginSelection(targetTree);\r\n                    newElements.forEach((element_i) => {\r\n                        treeItemWidget.setSelected(element_i, true);\r\n                    });\r\n                    treeWidget.endSelection(targetTree);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        const {clientX, clientY, currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n        const {model, itemContextMenuDelegate} = this;\r\n        if (itemContextMenuDelegate && targetItem) {\r\n            const activeItem = model.getItemByUri(targetItem.dataset.uri!)!;\r\n            const contextMenu = widget(\"menu\", {\r\n                properties: {\r\n                    contextual: true,\r\n                    position: {\r\n                        x: clientX,\r\n                        y: clientY\r\n                    }\r\n                },\r\n                slotted: itemContextMenuDelegate.call(this, activeItem, this.selectedItems(targetTree))!,\r\n                listeners: {\r\n                    /*click: () => {\r\n                        if (targetItem.isConnected) {\r\n                            targetItem.focus({preventScroll: true});\r\n                        }\r\n                        else {\r\n                            targetTree.focus({preventScroll: true});\r\n                        }\r\n                    },*/\r\n                    close: () => {\r\n                        targetItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            });\r\n            targetTree.append(contextMenu);\r\n            contextMenu.focus({preventScroll: true});\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetElement = <HTMLElement>target;\r\n        if (targetElement.matches(\".treeitem\")) {\r\n            const targetItem = targetElement;\r\n            const toolbar = targetItem.querySelector<HTMLElement>(\".toolbar\");\r\n            if (toolbar) {\r\n                toolbar.tabIndex = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetElement = <HTMLElement>target;\r\n        if (targetElement.matches(\".treeitem\")) {\r\n            const targetItem = targetElement;\r\n            const toolbar = targetItem.querySelector<HTMLElement>(\".toolbar\");\r\n            if (toolbar) {\r\n                toolbar.tabIndex = -1;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        switch (key) {\r\n            case \"Delete\": {\r\n                const itemsList = new TreeItemList(this.selectedItems(targetTree));\r\n                const {count} = itemsList;\r\n                const doRemove = confirm(`Remove ${count} items?`);\r\n                if (doRemove) {\r\n                    itemsList.remove();\r\n                }\r\n                targetTree.focus();\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar TreeView: TreeViewConstructor = TreeViewBase;","import { EMenuItem } from \"./src/elements/containers/menus/MenuItem\";\r\nimport { element, fragment, reactiveElement } from \"./src/elements/Element\";\r\nimport { ModelEvent, ModelList, ModelObject, ModelProperty } from \"./src/models/Model\";\r\nimport { GridColumnModel, GridModel, GridRowModel, GridView } from \"./src/views/GridView\";\r\nimport { TreeItemList, TreeItemModel, TreeModel, TreeView } from \"./src/views/TreeView\";\r\nimport { toolbarItemWidget } from \"./src/views/widgets/toolbar/ToolBarItemWidget\";\r\nimport { toolbarWidget } from \"./src/views/widgets/toolbar/ToolBarWidget\";\r\nimport { widget } from \"./src/views/widgets/Widget\";\r\n\r\nclass MyTreeItemList extends TreeItemList {\r\n    readonly items!: MyTreeItemModel[];\r\n\r\n    constructor(items: MyTreeItemModel[]) {\r\n        super(items);\r\n    }\r\n\r\n    get count(): number {\r\n        return this.items.length;\r\n    }\r\n\r\n    show(): void {\r\n        this.items.forEach(item_i => item_i.show());\r\n    }\r\n\r\n    hide(): void {\r\n        this.items.forEach(item_i => item_i.hide());\r\n    }\r\n\r\n    display(): void {\r\n        const result = this.items.reduce(\r\n            (result, item_i) => `${result} ${item_i.label}`, \"\"\r\n        );\r\n        console.log(result);\r\n    }\r\n}\r\n\r\nclass MyTreeItemModel extends TreeItemModel {\r\n    \r\n    @ModelProperty()\r\n    childCount: number;\r\n\r\n    @ModelProperty()\r\n    visibility: boolean;\r\n\r\n    constructor(init: {label: string, type: \"leaf\" | \"parent\", items?: TreeItemModel[]}) {\r\n        super(init);\r\n        this.childCount = this.childItems.length;\r\n        this.visibility = true;\r\n        this.addEventListener(\"modelchange\", this.#handleModelChangeEvent.bind(this));\r\n    }\r\n\r\n    show(): void {\r\n        this.visibility = true;\r\n    }\r\n\r\n    hide(): void {\r\n        this.visibility = false;\r\n    }\r\n\r\n    display(): void {\r\n        console.log(this.label);\r\n    }\r\n\r\n    #handleModelChangeEvent(event: ModelEvent): void {\r\n        const {target} = event;\r\n        const {childItems} = this;\r\n        if (target == childItems) {\r\n            this.childCount = childItems.length;\r\n        }\r\n    }\r\n}\r\n\r\nexport async function TreeMain() {\r\n    const gridView = new GridView();\r\n    gridView.resizable = true;\r\n    gridView.setModel(\r\n        new GridModel({\r\n            columns: [\r\n                new GridColumnModel({\r\n                    name: \"name\",\r\n                    type: String,\r\n                    label: \"Name\",\r\n                    extract: (row) => row.name\r\n                }),\r\n                new GridColumnModel({\r\n                    name: \"age\",\r\n                    type: Number,\r\n                    label: \"Age\",\r\n                    extract: (row) => row.age,\r\n                    filters: [{\r\n                        name: \"Minors\",\r\n                        filter: (row) => row.age < 18\r\n                    },{\r\n                        name: \"Majors\",\r\n                        filter: (row) => row.age >= 18\r\n                    }]\r\n                }),\r\n                new GridColumnModel({\r\n                    name: \"birthyear\",\r\n                    type: String,\r\n                    label: \"Brith Year\",\r\n                    extract: (row) => new Date().getFullYear() - row.age\r\n                }),\r\n            ],\r\n            rows: [\r\n                new GridRowModel({\r\n                    id: 1,\r\n                    name: \"Denis\",\r\n                    age: 13\r\n                }),\r\n                new GridRowModel({\r\n                    id: 2,\r\n                    name: \"Jean-Charles\",\r\n                    age: 32\r\n                }),\r\n                new GridRowModel({\r\n                    id: 3,\r\n                    name: \"Charles\",\r\n                    age: 25\r\n                }),\r\n                new GridRowModel({\r\n                    id: 4,\r\n                    name: \"Mamagubida\",\r\n                    age: 128\r\n                })\r\n            ]\r\n        })\r\n    );\r\n    document.body.append(gridView);\r\n\r\n    const treeModel = new TreeModel({\r\n        items: [\r\n            new MyTreeItemModel({\r\n                label: \"TI 0\",\r\n                type: \"parent\",\r\n                items: [\r\n                    new MyTreeItemModel({\r\n                        label: \"TI 1A\",\r\n                        type: \"parent\",\r\n                        items: [\r\n                            new MyTreeItemModel({\r\n                                type: \"leaf\",\r\n                                label: \"TI 1AX\"\r\n                            }),\r\n                        ]\r\n                    }),\r\n                    new MyTreeItemModel({\r\n                        type: \"parent\",\r\n                        label: \"TI 1B\"\r\n                    })\r\n                ]\r\n            }),\r\n            new MyTreeItemModel({\r\n                label: \"TI 1\",\r\n                type: \"parent\",\r\n                items: [\r\n                    new MyTreeItemModel({\r\n                        label: \"TI 1A\",\r\n                        type: \"parent\",\r\n                        items: [\r\n                            new MyTreeItemModel({\r\n                                type: \"leaf\",\r\n                                label: \"TI 1AX\"\r\n                            }),\r\n                        ]\r\n                    }),\r\n                    new MyTreeItemModel({\r\n                        type: \"parent\",\r\n                        label: \"TI 1B\"\r\n                    })\r\n                ]\r\n            }),\r\n            new MyTreeItemModel({\r\n                type: \"leaf\",\r\n                label: \"TI 2\"\r\n            }),\r\n            new MyTreeItemModel({\r\n                type: \"leaf\",\r\n                label: \"TI 3\"\r\n            })\r\n        ],\r\n        sortFunction: (item_a: TreeItemModel, item_b: TreeItemModel) => {\r\n            const {label: aLabel} = item_a;\r\n            const {label: bLabel} = item_b;\r\n            return bLabel.localeCompare(aLabel);\r\n        }\r\n    });\r\n    const treeView = new TreeView(treeModel);\r\n    treeView.itemContentDelegate = <typeof treeView.itemContentDelegate>(\r\n        (item: MyTreeItemModel) => {\r\n            return fragment(\r\n                ...([\r\n                    reactiveElement(\r\n                        item,\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"label\"\r\n                            }\r\n                        }),\r\n                        [\"label\"],\r\n                        (label, property, oldValue, newValue) => {\r\n                            label.textContent = newValue;\r\n                        }\r\n                    )\r\n                ]).concat(\r\n                    (item.type == \"parent\") ? [\r\n                        reactiveElement(\r\n                            item,\r\n                            element(\"span\", {\r\n                                attributes: {\r\n                                    class: \"badge\"\r\n                                }\r\n                            }),\r\n                            [\"childCount\"],\r\n                            (badge, property, oldValue, newValue) => {\r\n                                badge.textContent = `(${newValue})`;\r\n                            }\r\n                        )\r\n                    ] : []\r\n                ).concat([\r\n                    reactiveElement(\r\n                        item,\r\n                        widget(\"toolbar\", {\r\n                            slotted: [\r\n                                widget(\"toolbaritem\", {\r\n                                    properties: {\r\n                                        name: \"visibility\",\r\n                                        type: \"checkbox\",\r\n                                        label: \"Visibility\"\r\n                                    },\r\n                                    listeners: {\r\n                                        click: () => {\r\n                                            item.visibility ?\r\n                                                item.hide() :\r\n                                                item.show();\r\n                                        }\r\n                                    }\r\n                                })\r\n                            ]\r\n                        }),\r\n                        [\"visibility\"],\r\n                        (toolbar, property, oldValue, newValue) => {\r\n                            switch (property) {\r\n                                case \"visibility\": {\r\n                                    const visibilityItem = toolbarWidget.slot(toolbar)\r\n                                        ?.querySelector<HTMLElement>(\".toolbaritem[name=visibility]\");\r\n                                    if (visibilityItem) {\r\n                                        const label = newValue ? \"Hide\" : \"Show\";\r\n                                        toolbarItemWidget.setLabel(visibilityItem, label);\r\n                                        toolbarItemWidget.setTitle(visibilityItem, label);\r\n                                        toolbarItemWidget.setPressed(visibilityItem, newValue);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    )\r\n                ])\r\n            );\r\n        }\r\n    );\r\n    treeView.itemContextMenuDelegate = <typeof treeView.itemContextMenuDelegate>(\r\n        (activeItem: MyTreeItemModel, selectedItems: MyTreeItemModel[]) => {\r\n            return fragment(\r\n                widget(\"menuitemgroup\", {\r\n                    slotted: [\r\n                        widget(\"menuitem\", {\r\n                            properties: {\r\n                                label: \"Display\"\r\n                            },\r\n                            listeners: {\r\n                                click: () => {\r\n                                    const itemsList = new MyTreeItemList(selectedItems);\r\n                                    itemsList.display();\r\n                                }\r\n                            }\r\n                        }),\r\n                        widget(\"menuitem\", {\r\n                            properties: {\r\n                                label: \"Delete\"\r\n                            },\r\n                            listeners: {\r\n                                click: () => {\r\n                                    const itemsList = new MyTreeItemList(selectedItems);\r\n                                    const {count} = itemsList;\r\n                                    const doRemove = confirm(`Remove ${count} items?`);\r\n                                    if (doRemove) {\r\n                                        itemsList.remove();\r\n                                    }\r\n                                    //TODO: focus the tree\r\n                                }\r\n                            }\r\n                        })\r\n                    ]\r\n                }),\r\n                widget(\"menuitemgroup\", {\r\n                    slotted: [\r\n                        widget(\"menuitem\", {\r\n                            properties: {\r\n                                type: \"checkbox\",\r\n                                label: activeItem.visibility ? \"Hide\" : \"Show\"\r\n                            },\r\n                            listeners: {\r\n                                click: () => {\r\n                                    const itemsList = new MyTreeItemList(selectedItems);\r\n                                    activeItem.visibility ?\r\n                                        itemsList.hide() :\r\n                                        itemsList.show();\r\n                                }\r\n                            }\r\n                        })\r\n                    ]\r\n                })\r\n            )\r\n        }\r\n    );\r\n    treeView.refresh();\r\n    document.body.append(treeView);\r\n\r\n    document.body.append(\r\n        element(\"e-menubar\", {\r\n            children: element(\"e-menuitem\", {\r\n                attributes: {\r\n                    type: \"menu\",\r\n                    label: \"Menu 1\"\r\n                },\r\n                children: [\r\n                    \"Menu 1\",\r\n                    element(\"e-menu\", {\r\n                        attributes: {\r\n                            slot: \"menu\"\r\n                        },\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                attributes: {\r\n                                    type: \"checkbox\"\r\n                                },\r\n                                children: \"Hey\"\r\n                            }),\r\n                            element(\"e-menuitem\", {\r\n                                attributes: {\r\n                                    type: \"submenu\"\r\n                                },\r\n                                children: [\r\n                                    \"Submenu 1\",\r\n                                    element(\"e-menu\", {\r\n                                        attributes: {\r\n                                            slot: \"menu\"\r\n                                        },\r\n                                        children: [\r\n                                            /*element(\"e-menuitem\", {\r\n                                                attributes: {\r\n                                                    type: \"checkbox\"\r\n                                                },\r\n                                                children: \"Yo\"\r\n                                            })*/\r\n                                            new EMenuItem({\r\n                                                label: \"Yo\"\r\n                                            })\r\n                                        ]\r\n                                    })\r\n                                ]\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        })\r\n    );\r\n        \r\n    const menuView = widget(\"menubar\", {\r\n    slotted: [\r\n        widget(\"menuitem\", {\r\n            properties: {\r\n                label: \"MenuItem 0\",\r\n                name: \"MenuItem 0\",\r\n                type: \"menu\",\r\n                disabled: true\r\n            },\r\n            slotted: [\r\n                widget(\"menu\", {\r\n                    slotted: [\r\n                        widget(\"menuitem\", {\r\n                            properties: {\r\n                                label: \"MenuItem 1\",\r\n                                name: \"MenuItem 1\",\r\n                                type: \"checkbox\"\r\n                            }\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        }),\r\n        widget(\"menuitem\", {\r\n            properties: {\r\n                label: \"MenuItem 0\",\r\n                name: \"MenuItem 0\",\r\n                type: \"menu\"\r\n            },\r\n            slotted: [\r\n                widget(\"menu\", {\r\n                    slotted: [\r\n                        widget(\"menuitem\", {\r\n                            properties: {\r\n                                label: \"MenuItem 1\",\r\n                                name: \"MenuItem 1\",\r\n                                type: \"checkbox\"\r\n                            }\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        }),\r\n        widget(\"menuitem\", {\r\n            properties: {\r\n                label: \"MenuItem 1\",\r\n                name: \"MenuItem 1\",\r\n                type: \"menu\"\r\n            },\r\n            slotted: [\r\n                widget(\"menu\", {\r\n                    slotted: [\r\n                        widget(\"menuitemgroup\", {\r\n                            slotted: [\r\n                                widget(\"menuitem\", {\r\n                                    properties: {\r\n                                        label: \"MenuItem 1\",\r\n                                        type: \"checkbox\",\r\n                                        keyshortcut: \"Ctrl+B\",\r\n                                        disabled: true,\r\n                                        checked: true\r\n                                    }\r\n                                }),\r\n                                widget(\"menuitem\", {\r\n                                    properties: {\r\n                                        type: \"button\",\r\n                                        label: \"MenuItem 2\",\r\n                                        keyshortcut: \"Ctrl+A\"\r\n                                    }\r\n                                })\r\n                            ]\r\n                        }),\r\n                        widget(\"separator\"),\r\n                        widget(\"menuitem\", {\r\n                            properties: {\r\n                                label: \"Submenu\",\r\n                                type: \"submenu\"\r\n                            },\r\n                            slotted: [\r\n                                widget(\"menu\", {\r\n                                    slotted: [\r\n                                        widget(\"menuitem\", {\r\n                                            properties: {\r\n                                                label: \"MenuItem 1\",\r\n                                                type: \"radio\",\r\n                                                name: \"radio\",\r\n                                                value: \"1\"\r\n                                            }\r\n                                        }),\r\n                                        widget(\"menuitem\", {\r\n                                            properties: {\r\n                                                type: \"radio\",\r\n                                                label: \"MenuItem 2\",\r\n                                                name: \"radio\",\r\n                                                value: \"2\"\r\n                                            }\r\n                                        }),\r\n                                        widget(\"menuitem\", {\r\n                                            properties: {\r\n                                                type: \"radio\",\r\n                                                label: \"MenuItem 3\",\r\n                                                name: \"radio\",\r\n                                                value: \"3\"\r\n                                            }\r\n                                        })\r\n                                    ]\r\n                                })\r\n                            ]\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        })\r\n    ]\r\n})\r\ndocument.body.append(menuView);\r\n}","//import { MenuItemGroupWidget, MenuItemWidget, MenuWidget, MenuBarWidget } from \"./src/views/MenuBarWidget\";\r\nimport { TreeItemModel, TreeModel, TreeItemList } from \"./src/views/TreeView\";\r\n\r\nimport \"./index\";\r\nimport { ListItemModel, ListModel, ListView } from \"./src/views/ListView\";\r\nimport { GridColumnModel, GridModel, GridRowModel, GridView } from \"./src/views/GridView\";\r\nimport { element, fragment, reactiveElement } from \"./src/elements/Element\";\r\nimport { treeItemWidget } from \"./src/views/widgets/tree/TreeItemWidget\";\r\nimport { widget } from \"./src/views/widgets/Widget\";\r\nimport { Editor } from \"./src/Editor\";\r\nimport { toolbarWidget } from \"./src/views/widgets/toolbar/ToolBarWidget\";\r\nimport { toolbarItemWidget } from \"./src/views/widgets/toolbar/ToolBarItemWidget\";\r\nimport { comboBoxWidget } from \"./src/views/widgets/combobox/ComboBoxWidget\";\r\nimport { optionWidget } from \"./src/views/widgets/combobox/OptionWidget\";\r\nimport { TreeMain } from \"./TreeMain\";\r\n\r\ndeclare global {\r\n    interface ElementInternals {\r\n        role: string;\r\n    }\r\n}\r\n// const menubar = new MenuBarWidget([\r\n//     new MenuItemWidget({\r\n//         label: \"File\",\r\n//         name: \"file\",\r\n//         type: \"menu\",\r\n//         menu: new MenuWidget({\r\n//             name: \"File\",\r\n//             groups: [\r\n//                 new MenuItemGroupWidget({\r\n//                     name: \"fileActions\",\r\n//                     items: [\r\n//                         new MenuItemWidget({\r\n//                             label: \"Import file...\",\r\n//                             name: \"import\"\r\n//                         }),\r\n//                         new MenuItemWidget({\r\n//                             label: \"Export file...\",\r\n//                             name: \"export\",\r\n//                             hotkey: new HotKey(Key.B, KeyModifier.Control, KeyModifier.Alt)\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         })\r\n//     }),\r\n//     new MenuItemWidget({\r\n//         label: \"Preferences\",\r\n//         name: \"preferences\",\r\n//         type: \"menu\",\r\n//         menu: new MenuWidget({\r\n//             name: \"Preferences\",\r\n//             groups: [\r\n//                 new MenuItemGroupWidget({\r\n//                     name: \"fileActions\",\r\n//                     items: [\r\n//                         new MenuItemWidget({\r\n//                             label: \"Advanced User\",\r\n//                             name: \"advanced\",\r\n//                             type: \"checkbox\",\r\n//                             hotkey: new HotKey(Key.A, KeyModifier.Control, KeyModifier.Alt)\r\n//                         }),\r\n//                         new MenuItemWidget({\r\n//                             label: \"Layout\",\r\n//                             name: \"layout\",\r\n//                             type: \"submenu\",\r\n//                             menu: new MenuWidget({\r\n//                                 name: \"Layout\",\r\n//                                 groups: [\r\n//                                     new MenuItemGroupWidget({\r\n//                                         name: \"Layout\",\r\n//                                         items: [\r\n//                                             new MenuItemWidget({\r\n//                                                 label: \"Standard\",\r\n//                                                 name: \"standard\",\r\n//                                                 type: \"radio\"\r\n//                                             }),\r\n//                                             new MenuItemWidget({\r\n//                                                 label: \"Advanced\",\r\n//                                                 name: \"advanced\",\r\n//                                                 type: \"radio\"\r\n//                                             })\r\n//                                         ]\r\n//                                     })\r\n//                                 ]\r\n//                             })\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         })\r\n//     })\r\n// ]);\r\n\r\n// const treeModel = new TreeModel({\r\n//     itemContextMenuDelegate: (activeItem: TreeItemModel, selectedItems: TreeItemList) => \r\n//         fragment(\r\n//             widget(\"menuitemgroup\", {\r\n//                 slotted: [\r\n//                     widget(\"menuitem\", {\r\n//                         properties: {\r\n//                             label: \"Display\"\r\n//                         },\r\n//                         listeners: {\r\n//                             click: () => {\r\n//                                 selectedItems.display();\r\n//                             }\r\n//                         }\r\n//                     }),\r\n//                     widget(\"menuitem\", {\r\n//                         properties: {\r\n//                             label: \"Delete\"\r\n//                         },\r\n//                         listeners: {\r\n//                             click: () => {\r\n//                                 const {count} = selectedItems;\r\n//                                 const doRemove = confirm(`Remove ${count} items?`);\r\n//                                 if (doRemove) {\r\n//                                     selectedItems.remove();\r\n//                                 }\r\n//                             }\r\n//                         }\r\n//                     })\r\n//                 ]\r\n//             }),\r\n//             widget(\"menuitemgroup\", {\r\n//                 slotted: [\r\n//                     widget(\"menuitem\", {\r\n//                         properties: {\r\n//                             type: \"checkbox\",\r\n//                             label: activeItem.visibility ? \"Hide\" : \"Show\"\r\n//                         },\r\n//                         listeners: {\r\n//                             click: () => {\r\n//                                 activeItem.visibility ?\r\n//                                     selectedItems.hide() :\r\n//                                     selectedItems.show();\r\n//                             }\r\n//                         }\r\n//                     })\r\n//                 ]\r\n//             })\r\n//         ),\r\n//     itemContentDelegate: (item: TreeItemModel) => \r\n//         fragment(\r\n//             ...([\r\n//                 reactiveElement(\r\n//                     item,\r\n//                     element(\"span\", {\r\n//                         attributes: {\r\n//                             class: \"label\"\r\n//                         }\r\n//                     }),\r\n//                     [\"label\"],\r\n//                     (label, property, oldValue, newValue) => {\r\n//                         label.textContent = newValue;\r\n//                     }\r\n//                 )\r\n//             ]).concat(\r\n//                 (item.type == \"parent\") ? [\r\n//                     reactiveElement(\r\n//                         item,\r\n//                         element(\"span\", {\r\n//                             attributes: {\r\n//                                 class: \"badge\"\r\n//                             }\r\n//                         }),\r\n//                         [\"childCount\"],\r\n//                         (badge, property, oldValue, newValue) => {\r\n//                             badge.textContent = `(${newValue})`;\r\n//                         }\r\n//                     )\r\n//                 ] : []\r\n//             ).concat([\r\n//                 reactiveElement(\r\n//                     item,\r\n//                     widget(\"toolbar\", {\r\n//                         slotted: [\r\n//                             widget(\"toolbaritem\", {\r\n//                                 properties: {\r\n//                                     name: \"visibility\",\r\n//                                     type: \"checkbox\",\r\n//                                     label: \"Visibility\"\r\n//                                 },\r\n//                                 listeners: {\r\n//                                     click: () => {\r\n//                                         item.visibility ?\r\n//                                             item.hide() :\r\n//                                             item.show();\r\n//                                     }\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     }),\r\n//                     [\"visibility\"],\r\n//                     (toolbar, property, oldValue, newValue) => {\r\n//                         switch (property) {\r\n//                             case \"visibility\": {\r\n//                                 const visibilityItem = toolbarWidget.slot(toolbar)\r\n//                                     ?.querySelector<HTMLElement>(\".toolbaritem[name=visibility]\");\r\n//                                 if (visibilityItem) {\r\n//                                     const label = newValue ? \"Hide\" : \"Show\";\r\n//                                     toolbarItemWidget.setLabel(visibilityItem, label);\r\n//                                     toolbarItemWidget.setTitle(visibilityItem, label);\r\n//                                     toolbarItemWidget.setPressed(visibilityItem, newValue);\r\n//                                 }\r\n//                             }\r\n//                         }\r\n//                     }\r\n//                 )\r\n//             ])\r\n//         ),\r\n//     items: [\r\n//         new TreeItemModel({\r\n//             label: \"TI 0\",\r\n//             type: \"parent\",\r\n//             items: [\r\n//                 new TreeItemModel({\r\n//                     label: \"TI 1A\",\r\n//                     type: \"parent\",\r\n//                     items: [\r\n//                         new TreeItemModel({\r\n//                             type: \"leaf\",\r\n//                             label: \"TI 1AX\"\r\n//                         }),\r\n//                     ]\r\n//                 }),\r\n//                 new TreeItemModel({\r\n//                     type: \"parent\",\r\n//                     label: \"TI 1B\"\r\n//                 })\r\n//             ]\r\n//         }),\r\n//         new TreeItemModel({\r\n//             label: \"TI 1\",\r\n//             type: \"parent\",\r\n//             items: [\r\n//                 new TreeItemModel({\r\n//                     label: \"TI 1A\",\r\n//                     type: \"parent\",\r\n//                     items: [\r\n//                         new TreeItemModel({\r\n//                             type: \"leaf\",\r\n//                             label: \"TI 1AX\"\r\n//                         }),\r\n//                     ]\r\n//                 }),\r\n//                 new TreeItemModel({\r\n//                     type: \"parent\",\r\n//                     label: \"TI 1B\"\r\n//                 })\r\n//             ]\r\n//         }),\r\n//         new TreeItemModel({\r\n//             type: \"leaf\",\r\n//             label: \"TI 2\"\r\n//         }),\r\n//         new TreeItemModel({\r\n//             type: \"leaf\",\r\n//             label: \"TI 3\"\r\n//         })\r\n//     ],\r\n//     sortFunction: (item_a: TreeItemModel, item_b: TreeItemModel) => {\r\n//         const {label: aLabel} = item_a;\r\n//         const {label: bLabel} = item_b;\r\n//         return bLabel.localeCompare(aLabel);\r\n//     }\r\n// });\r\n// const treeElement = treeView.create(treeModel);\r\n// document.body.append(treeElement);\r\n\r\n// treeModel.childItems.append(\r\n//     new TreeItemModel({\r\n//         label: \"yo\",\r\n//         type: \"parent\",\r\n//         items: [\r\n//             new TreeItemModel({\r\n//                 type: \"leaf\",\r\n//                 label: \"plop\"\r\n//             })\r\n//         ]\r\n//     })\r\n// );\r\n\r\n// const listView = new ListView();\r\n// listView.setModel(\r\n//     new ListModel({\r\n//         items: [\r\n//             new ListItemModel({\r\n//                 label: \"Hey\"\r\n//             }),\r\n//             new ListItemModel({\r\n//                 label: \"Yo\"\r\n//             })\r\n//         ]\r\n//     })\r\n// );\r\n\r\n// //document.body.append(listView);\r\n\r\n// // Menu actions\r\n// // Toolbar actions\r\n// const gridView = new GridView();\r\n// gridView.resizable = true;\r\n// gridView.sortable = true;\r\n// gridView.setColumnDelegate((column) => {\r\n//     return fragment(\r\n//         element(\"label\", {\r\n//             children: column.label\r\n//         }),\r\n//         element(\"e-toolbar\", {\r\n//             children: [\r\n//                 element(\"e-toolbaritem\", {\r\n//                     attributes: {\r\n//                         type: \"button\"\r\n//                     }\r\n//                 })\r\n//             ]\r\n//         })\r\n//     );\r\n// });\r\n// const year = new Date().getFullYear();\r\n// gridView.setModel(\r\n//     new GridModel({\r\n//         columns: [\r\n//             new GridColumnModel({\r\n//                 name: \"name\",\r\n//                 type: String,\r\n//                 label: \"Name\",\r\n//                 extract: (row) => row.name\r\n//             }),\r\n//             new GridColumnModel({\r\n//                 name: \"age\",\r\n//                 type: Number,\r\n//                 label: \"Age\",\r\n//                 extract: (row) => row.age,\r\n//                 filters: [{\r\n//                     name: \"Minors\",\r\n//                     filter: (row) => row.age < 18\r\n//                 },{\r\n//                     name: \"Majors\",\r\n//                     filter: (row) => row.age >= 18\r\n//                 }]\r\n//             }),\r\n//             new GridColumnModel({\r\n//                 name: \"birthyear\",\r\n//                 type: String,\r\n//                 label: \"Brith Year\",\r\n//                 extract: (row) => year - row.age\r\n//             }),\r\n//         ],\r\n//         rows: [\r\n//             new GridRowModel({\r\n//                 id: 1,\r\n//                 name: \"Denis\",\r\n//                 age: 13\r\n//             }),\r\n//             new GridRowModel({\r\n//                 id: 2,\r\n//                 name: \"Jean-Charles\",\r\n//                 age: 32\r\n//             }),\r\n//             new GridRowModel({\r\n//                 id: 3,\r\n//                 name: \"Charles\",\r\n//                 age: 25\r\n//             }),\r\n//             new GridRowModel({\r\n//                 id: 4,\r\n//                 name: \"Mamagubida\",\r\n//                 age: 128\r\n//             })\r\n//         ]\r\n//     })\r\n// );\r\n// document.body.append(gridView);\r\n\r\n// const menuView = widget(\"menubar\", {\r\n//     slotted: [\r\n//         widget(\"menuitem\", {\r\n//             properties: {\r\n//                 label: \"MenuItem 0\",\r\n//                 name: \"MenuItem 0\",\r\n//                 type: \"menu\",\r\n//                 disabled: true\r\n//             },\r\n//             slotted: [\r\n//                 widget(\"menu\", {\r\n//                     slotted: [\r\n//                         widget(\"menuitem\", {\r\n//                             properties: {\r\n//                                 label: \"MenuItem 1\",\r\n//                                 name: \"MenuItem 1\",\r\n//                                 type: \"checkbox\"\r\n//                             }\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         }),\r\n//         widget(\"menuitem\", {\r\n//             properties: {\r\n//                 label: \"MenuItem 0\",\r\n//                 name: \"MenuItem 0\",\r\n//                 type: \"menu\"\r\n//             },\r\n//             slotted: [\r\n//                 widget(\"menu\", {\r\n//                     slotted: [\r\n//                         widget(\"menuitem\", {\r\n//                             properties: {\r\n//                                 label: \"MenuItem 1\",\r\n//                                 name: \"MenuItem 1\",\r\n//                                 type: \"checkbox\"\r\n//                             }\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         }),\r\n//         widget(\"menuitem\", {\r\n//             properties: {\r\n//                 label: \"MenuItem 1\",\r\n//                 name: \"MenuItem 1\",\r\n//                 type: \"menu\"\r\n//             },\r\n//             slotted: [\r\n//                 widget(\"menu\", {\r\n//                     slotted: [\r\n//                         widget(\"menuitemgroup\", {\r\n//                             slotted: [\r\n//                                 widget(\"menuitem\", {\r\n//                                     properties: {\r\n//                                         label: \"MenuItem 1\",\r\n//                                         type: \"checkbox\",\r\n//                                         keyshortcut: \"Ctrl+B\",\r\n//                                         disabled: true,\r\n//                                         checked: true\r\n//                                     }\r\n//                                 }),\r\n//                                 widget(\"menuitem\", {\r\n//                                     properties: {\r\n//                                         type: \"button\",\r\n//                                         label: \"MenuItem 2\",\r\n//                                         keyshortcut: \"Ctrl+A\"\r\n//                                     }\r\n//                                 })\r\n//                             ]\r\n//                         }),\r\n//                         widget(\"separator\"),\r\n//                         widget(\"menuitem\", {\r\n//                             properties: {\r\n//                                 label: \"Submenu\",\r\n//                                 type: \"submenu\"\r\n//                             },\r\n//                             slotted: [\r\n//                                 widget(\"menu\", {\r\n//                                     slotted: [\r\n//                                         widget(\"menuitem\", {\r\n//                                             properties: {\r\n//                                                 label: \"MenuItem 1\",\r\n//                                                 type: \"radio\",\r\n//                                                 name: \"radio\",\r\n//                                                 value: \"1\"\r\n//                                             }\r\n//                                         }),\r\n//                                         widget(\"menuitem\", {\r\n//                                             properties: {\r\n//                                                 type: \"radio\",\r\n//                                                 label: \"MenuItem 2\",\r\n//                                                 name: \"radio\",\r\n//                                                 value: \"2\"\r\n//                                             }\r\n//                                         }),\r\n//                                         widget(\"menuitem\", {\r\n//                                             properties: {\r\n//                                                 type: \"radio\",\r\n//                                                 label: \"MenuItem 3\",\r\n//                                                 name: \"radio\",\r\n//                                                 value: \"3\"\r\n//                                             }\r\n//                                         })\r\n//                                     ]\r\n//                                 })\r\n//                             ]\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         })\r\n//     ]\r\n// })\r\n// document.body.append(menuView);\r\n\r\n// const tree = widget(\"tree\", {\r\n//     slotted: [\r\n//         widget(\"treeitem\", {\r\n//             properties: {\r\n//                 label: \"treeitem 0\",\r\n//                 type: \"parent\",\r\n//                 draggable: true\r\n//                 //disabled: true\r\n//             },\r\n//             slotted: {\r\n//                 group: [\r\n//                     widget(\"treeitemgroup\", {\r\n//                         slotted: [\r\n//                             widget(\"treeitem\", {\r\n//                                 properties: {\r\n//                                     label: \"treeitem 1\",\r\n//                                     type: \"leaf\",\r\n//                                     draggable: true\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     })\r\n//                 ]\r\n//             },\r\n//             listeners: {\r\n//                 contextmenu: <EventListener>((event: MouseEvent) => {\r\n//                     const {target, clientX, clientY} = event;\r\n//                     const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n//                     const menu = widget(\"menu\", {\r\n//                         properties: {\r\n//                             contextual: true\r\n//                         },\r\n//                         slotted: [\r\n//                             widget(\"menuitemgroup\", {\r\n//                                 slotted: [\r\n//                                     widget(\"menuitem\", {\r\n//                                         properties: {\r\n//                                             label: \"Display\"\r\n//                                         },\r\n//                                         listeners: {\r\n//                                             click: () => {\r\n//                                                 console.log(treeItemWidget.getLabel(targetItem));\r\n//                                             }\r\n//                                         }\r\n//                                     }),\r\n//                                     widget(\"menuitem\", {\r\n//                                         properties: {\r\n//                                             label: \"Delete\"\r\n//                                         },\r\n//                                         listeners: {\r\n//                                             click: () => {\r\n//                                                 targetItem.remove();\r\n//                                             }\r\n//                                         }\r\n//                                     })\r\n//                                 ]\r\n//                             }),\r\n//                         ]\r\n//                     });\r\n//                     targetItem.append(menu);\r\n//                     menuWidget.positionContextual(menu, clientX, clientY);\r\n//                     menu.focus({preventScroll: true});\r\n//                     event.preventDefault();\r\n//                 })\r\n//             }\r\n//         }),\r\n//         widget(\"treeitem\", {\r\n//             properties: {\r\n//                 label: \"treeitem 0\",\r\n//                 type: \"parent\",\r\n//                 draggable: true,\r\n//                 disabled: true\r\n//             },\r\n//             slotted: {\r\n//                 group: [\r\n//                     widget(\"treeitemgroup\", {\r\n//                         slotted: [\r\n//                             widget(\"treeitem\", {\r\n//                                 properties: {\r\n//                                     label: \"treeitem 1\",\r\n//                                     type: \"leaf\",\r\n//                                     draggable: true\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     })\r\n//                 ]\r\n//             }\r\n//         }),\r\n//         widget(\"treeitem\", {\r\n//             properties: {\r\n//                 label: \"treeitem 1\",\r\n//                 type: \"leaf\",\r\n//                 draggable: true\r\n//             },\r\n//             slotted: {\r\n//                 content: [\r\n//                     widget(\"toolbar\", {\r\n//                         slotted: [\r\n//                             widget(\"toolbaritem\",  {\r\n//                                 properties: {\r\n//                                     label: \"First item\",\r\n//                                     type: \"button\"\r\n//                                 }\r\n//                             }),\r\n//                             widget(\"toolbaritem\",  {\r\n//                                 properties: {\r\n//                                     label: \"Second item\",\r\n//                                     type: \"checkbox\"\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     })\r\n//                 ]\r\n//             }\r\n//         })\r\n//     ]\r\n// })\r\n// document.body.append(tree);\r\n\r\n// document.body.append(\r\n//     widget(\"toolbar\", {\r\n//         slotted: [\r\n//             widget(\"toolbaritem\",  {\r\n//                 properties: {\r\n//                     label: \"First item\",\r\n//                     type: \"menubutton\"\r\n//                 },\r\n//                 slotted: [\r\n//                     widget(\"menu\", {\r\n//                         slotted: [\r\n//                             widget(\"menuitem\", {\r\n//                                 properties: {\r\n//                                     label: \"MenuItem 1\",\r\n//                                     name: \"MenuItem 1\",\r\n//                                     type: \"checkbox\"\r\n//                                 }\r\n//                             }),\r\n//                             widget(\"menuitem\", {\r\n//                                 properties: {\r\n//                                     label: \"MenuItem 2\",\r\n//                                     name: \"MenuItem 2\",\r\n//                                     type: \"checkbox\"\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     })\r\n//                 ]\r\n//             }),\r\n//             widget(\"toolbaritem\",  {\r\n//                 properties: {\r\n//                     label: \"Second item\",\r\n//                     type: \"checkbox\"\r\n//                 }\r\n//             }),\r\n//             widget(\"toolbaritem\",  {\r\n//                 properties: {\r\n//                     label: \"Third item\",\r\n//                     type: \"checkbox\",\r\n//                     disabled: true,\r\n//                 }\r\n//             }),\r\n//             widget(\"toolbaritem\",  {\r\n//                 properties: {\r\n//                     label: \"Fourth item\",\r\n//                     type: \"checkbox\"\r\n//                 }\r\n//             })\r\n//         ]\r\n//     })\r\n// );\r\n\r\n// document.body.append(\r\n//     widget(\"list\", {\r\n//         slotted: [\r\n//             widget(\"listitemgroup\",  {\r\n//                 slotted: [   \r\n//                     widget(\"listitem\",  {\r\n//                         properties: {\r\n//                             label: \"First item\"\r\n//                         }\r\n//                     })\r\n//                 ]\r\n//             }),\r\n//             widget(\"listitem\",  {\r\n//                 properties: {\r\n//                     label: \"Second item\"\r\n//                 },\r\n//                 slotted: [\r\n//                     widget(\"toolbar\", {\r\n//                         slotted: [\r\n//                             widget(\"toolbaritem\",  {\r\n//                                 properties: {\r\n//                                     label: \"First item\",\r\n//                                     type: \"button\"\r\n//                                 }\r\n//                             }),\r\n//                             widget(\"toolbaritem\",  {\r\n//                                 properties: {\r\n//                                     label: \"Second item\",\r\n//                                     type: \"checkbox\"\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     })\r\n//                 ]\r\n//             }),\r\n//             widget(\"listitem\",  {\r\n//                 properties: {\r\n//                     label: \"Third item\",\r\n//                     disabled: true,\r\n//                 }\r\n//             }),\r\n//             widget(\"listitem\",  {\r\n//                 properties: {\r\n//                     label: \"Fourth item\"\r\n//                 }\r\n//             })\r\n//         ]\r\n//     })\r\n// );\r\n\r\n// document.body.append(\r\n//     widget(\"grid\", {\r\n//         properties: {\r\n//             selectby: \"row\",\r\n//             multisectable: true\r\n//         },\r\n//         slotted: {\r\n//             headers: [\r\n//                 widget(\"gridheader\",  {\r\n//                     slotted: \"First header\"\r\n//                 }),\r\n//                 widget(\"gridheader\",  {\r\n//                     slotted: \"Second header\"\r\n//                 })\r\n//             ],\r\n//             rows: [\r\n//                 widget(\"gridrow\",  {\r\n//                     slotted: [   \r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"First cell\"\r\n//                         }),\r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Second cell\"\r\n//                         })\r\n//                     ]\r\n//                 }),\r\n//                 widget(\"gridrow\",  {\r\n//                     slotted: [   \r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Third cell\"\r\n//                         }),\r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Fourth cell\"\r\n//                         })\r\n//                     ]\r\n//                 }),\r\n//                 widget(\"gridrow\",  {\r\n//                     slotted: [   \r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Fifth cell\"\r\n//                         }),\r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Sixth cell\"\r\n//                         })\r\n//                     ]\r\n//                 }),\r\n//                 widget(\"gridrow\",  {\r\n//                     slotted: [   \r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Heighth cell\"\r\n//                         }),\r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Nineth cell\"\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         }\r\n//     })\r\n// );\r\n\r\n// document.body.append(\r\n//     widget(\"combobox\", {\r\n//         slotted: [\r\n//             widget(\"option\",  {\r\n//                 properties: {\r\n//                     label: \"First option\"\r\n//                 }\r\n//             }),\r\n//             widget(\"option\",  {\r\n//                 properties: {\r\n//                     label: \"Second option\"\r\n//                 }\r\n//             }),\r\n//             widget(\"option\",  {\r\n//                 properties: {\r\n//                     label: \"Third option\",\r\n//                     selected: true\r\n//                 }\r\n//             })\r\n//         ],\r\n//         listeners: {\r\n//             change: (event) => {\r\n//                 const {currentTarget} = event;\r\n//                 const comboBoxTarget = <HTMLElement>currentTarget;\r\n//                 console.log(optionWidget.getLabel(comboBoxWidget.selectedOption(comboBoxTarget)!));\r\n//             }\r\n//         }\r\n//     })\r\n// );\r\n\r\n// const editor = new Editor();\r\n// editor.setup();\r\n\r\n// editor.registerCheckboxAction(\"toggleAdvancedUser\", (_, newValue) => {\r\n//     console.log(`Advanced user is now ${newValue}`);\r\n// }, {hotkey: new HotKey(Key.ARROW_DOWN, KeyModifier.Alt)});\r\n\r\n// editor.registerRadioAction(\"setLayout\", (_, newValue) => {\r\n//     editor.setPair(\"layout\", newValue);\r\n// });\r\n\r\n// editor.registerButtonAction(\"execLayout\", () => {\r\n//     const layout = editor.getPair(\"layout\");\r\n//     console.log(`Layout is ${layout}`);\r\n// }, {hotkey: new HotKey(Key.ARROW_UP, KeyModifier.Alt)});\r\n\r\n\r\n// editor.registerRadioAction(\"selectTest\", (oldValue, newValue) => {\r\n//     console.log(`Test is ${newValue}`);\r\n// }, {value: \"2\", key: \"test\"});\r\n\r\n// document.addEventListener(\"slotchange\", (event) => {\r\n//     console.log(event);\r\n// });\r\n\r\n// setTimeout(() => {\r\n//     const execLayoutToolBarItem = document.querySelector<HTMLEActionElement>(\"e-toolbaritem[name=execLayout]\");\r\n//     if (execLayoutToolBarItem) {\r\n//         editor.addPairListener(\"layout\", (oldValue, newValue) => {\r\n//             if (newValue !== oldValue) {\r\n//                 execLayoutToolBarItem.value = newValue;\r\n//             }\r\n//         });\r\n//     }\r\n// }, 100);\r\n\r\n// const button = element(\"button\", {\r\n//     properties: {\r\n//         textContent: \"Focus\"\r\n//     },\r\n//     listeners: {\r\n//         click: () => {\r\n//             const menuitem = document.querySelector<HTMLEMenuItemElement>(\"e-menuitem#hey\");\r\n//             if (menuitem) {\r\n//                 menuitem.focus();\r\n//             }\r\n//         }\r\n//     }\r\n// });\r\n// document.body.append(button);\r\n// document.body.append(menubar.element);\r\n\r\n// editor.executeCheckboxAction(\"toggleAdvancedUser\", true);\r\n// editor.setCheckboxActionValue(\"toggleAdvancedUser\", false);\r\n\r\n//editor.setRadioActionValue(\"selectTest\", \"2\");\r\n\r\n//editor.executeRadioAction(\"setLayout\", \"other\");\r\nexport async function main() {\r\n    TreeMain();\r\n}"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","ModelChangeRecordBase","constructor","init","this","target","changeType","propertyName","oldValue","undefined","newValue","removedIndex","removedItems","ModelNodesList","insertedIndex","insertedItems","sortedIndices","PROPERTY_CHANGE","LIST_REMOVE","LIST_INSERT","LIST_SORT","ModelChangeRecord","items","slice","length","item","index","values","ModelEventBase","type","currentTarget","ModelEventTargetAccessor","setCurrentTarget","event","setTarget","ModelEvent","ModelNodeBase","Map","receiveEvent","callbacks","forEach","callback_i","addEventListener","callback","push","set","removeEventListener","callbackIndex","findIndex","splice","delete","dispatchEvent","super","parentNode","setParent","isCyclicReference","ancestorNode","TypeError","beginChanges","endChanges","getRecords","property","records","record","ModelNodeRecordsAccessor","triggerChange","node","handleRecord","ModelNode","ModelProperty","ModelObjectPropertiesAccessor","getProperty","setProperty","ModelObjectBase","ModelObject","ModelList","item_i","fromIndex","indexOf","sort","compareFunction","indexedItems","map","i","indexedItem_a","indexedItem_b","indexedItem_i","prepend","_items","append","insert","Math","abs","remove","clear","removedItem_i","reference","options","properties","propertiesFilter","childList","subtree","filter","record_i","includes","ModelChangeObserver","WeakMap","observe","references","listener","bind","unobserve","disconnect","camelToTrain","str","replace","toLowerCase","AttributeProperty","String","attributeName","defaultValue","observed","observedAttributes","Reflect","Array","isArray","writable","Boolean","hasAttribute","setAttribute","removeAttribute","val","getAttribute","JSON","parse","stringify","Number","parseFloat","CustomElement","elementCtor","name","customElements","define","fragment","nodes","document","createDocumentFragment","tagName","attributes","dataset","children","listeners","element","createElement","entries","attributeValue","toggleAttribute","elementDataset","keys","datasetEntry_i","from","name_i","listener_i","reactiveElementsMap","reactiveElementsFinalizationRegistry","FinalizationRegistry","heldValue","model","reactiveElement","reactiveElementsMapEntry","reactiveElementsArray","reactiveElementsPropertyObserver","reactiveElement_i","elementRef","react","deref","WeakRef","register","observerOptions","concat","property_i","Set","reactiveChildElementsMap","reactiveChildElementsFinalizationRegistry","list","reactiveChildElement","reactiveChildrenElementsMapEntry","reactiveChildElementsArray","reactiveChildElementsObserver","range","listLength","reactiveChildElements_i","parentRef","mapping","placeholder","parent","firstChild","childrenCount","removeChild","insertedItemsArray","before","removedCount","createRange","removeEndIndex","setStartBefore","setEndAfter","deleteContents","childrenArray","index_i","reactiveChildElements","reactiveChildElementsMapEntry","areAttributesMatching","referenceAttributeType","referenceAttributeName","referenceAttributeValue","RegExp","test","HTMLEActionElementBase","HTMLElement","trigger","disabled","checked","Event","bubbles","enable","disable","Key","KeyModifier","MouseButton","HTMLEActionElement","shadowTemplate","HTMLEGridCellElementBase","attachShadow","mode","content","cloneNode","attributeChangedCallback","HTMLEGridCellElement","HTMLEGridRowGroupElementBase","shadowRoot","assignedElements","element_i","posinset","HTMLEGridRowGroupElement","HTMLEMenuItemElementBase","internals","attachInternals","role","ariaChecked","ariaDisabled","ariaExpanded","ariaLabel","toggle","force","expanded","expand","connectedCallback","tabIndex","collapse","menu","style","menuStyle","top","itemTop","bottom","itemBottom","left","itemLeft","right","itemRight","getBoundingClientRect","width","menuWidth","height","menuHeight","scrollY","scrollX","window","clientWidth","clientHeight","body","overflowX","overflowY","closestMenu","closest","closestMenuTop","closestMenuLeft","menuComputedStyle","getComputedStyle","paddingTop","paddingBottom","menuPaddingTop","menuPaddingBottom","part","selector","propertyKey","getter","withinShadowRoot","querySelector","HTMLEMenuItemElement","EMenuItem","assign","label","slot","tabindex","title","button","checkbox","radio","submenu","HTMLEMenuItemGroupElementBase","textContent","toggleTimeouts","HTMLEMenuItemGroupElement","radios","HTMLEMenuElementBase","createTreeWalker","NodeFilter","SHOW_ELEMENT","querySelectorAll","activeIndex","activeItem","positionContextual","x","y","find","contains","FILTER_ACCEPT","FILTER_SKIP","FILTER_REJECT","walker","currentNode","root","lastChild","previousNode","nextNode","async","delay","Promise","resolve","reject","timeout","setTimeout","clearTimeout","then","contextual","error","radio_i","nearestItem","relatedTarget","focus","preventScroll","stopPropagation","composedPath","target_i","HTMLEMenuElement","catch","clientX","clientY","intersectsWithMouse","containsRelatedTarget","HTMLEGridRowElementBase","cells","HTMLEGridCellCollection","slotName","cell_i","HTMLEGridRowElement","HTMLEGridBodyElement","namedItem","HTMLEGridRowCollection","HTMLEGridBodyElementBase","rows","HTMLEGridElementBase","activeCellIndex","activeCell","activeRowIndex","activeRow","head","beginSelection","endSelection","clearSelection","selectedCells","selectedRows","hidden","to","toIndex","min","max","position","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","nextVisibleRow","DOCUMENT_POSITION_PRECEDING","previousVisibleRow","selectedCell_i","selected","selectedRow_i","row_i","cell","active","closestRow","row","cellsWalker","rowsWalker","closestRowCells","cellIndex","previousRow","previousRowCells","nextRow","nextRowCells","ctrlKey","shiftKey","selectby","targetCell","lastSelectedCell","targetRow","lastSelectedRow","firstRow","firstCell","lastRow","lastCell","preventDefault","previousCell","nextCell","topCell","bottomCell","click","HTMLEGridHeadElementBase","HTMLEMenuBarElementBase","previousSibling","nextSibling","Element","isExpanded","HTMLEMenuButtonElementBase","firstItem","HTMLEMenuButtonElement","HTMLEOptionElementBase","labelPart","HTMLEOptionElement","HTMLEOptionGroupElementBase","HTMLEOptionGroupElement","HTMLESelectElementBase","selectedIndex","activeOption","selectedOption","matchingOption","option","descriptionPart","description","valuePart","optionsStyle","selectBottom","selectLeft","previousOption","nextOption","firstOption","lastOption","keyLength","keyCode","charCodeAt","optionsArray","firstMatchIndex","option_i","nextMatchIndex","matchIndex","default","slottedKeyboardListeners","slottedTriggerListeners","HTMLESelectElement","HTMLEToolBarItemElementBase","menubutton","select","selectValue","HTMLEToolBarItemElement","EToolBarItem","HTMLEToolBarItemGroupElementBase","HTMLEToolBarItemGroupElement","HTMLEToolBarElementBase","previousItem","nextItem","lastItem","HTMLEToolBarElement","HTMLETabPanelElementBase","HTMLETabPanelElement","HTMLETabElementBase","panel","getElementById","controls","CustomEvent","detail","tab","HTMLETabElement","HTMLETabListElementBase","tabs","activeTab","focusTabAt","activateTab","targetIndex","thisTab","thisTabIndex","HTMLETreeItemGroupElementBase","HTMLETreeItemElement","level","closestItem","matches","parentElement","HTMLETreeItemGroupElement","HTMLETreeItemElementBase","group","HTMLETreeElementBase","getElementsByTagName","dropTargetItem","selectedItems","nextVisibleItem","previousVisibleItem","selectedItem_i","droptarget","blur","relatedTargetRoot","getRootNode","relatedTargetHost","ShadowRoot","host","parentItem","HTMLEListItemElementBase","badge","toolbar","HTMLSpanElement","HTMLEListItemElement","HTMLEListItemGroupElementBase","HTMLEListItemGroupElement","HTMLEListElementBase","lastSelectedItem","HTMLEDraggableElementBase","referee","draggable","disconnectedCallback","thisRefIndex","getReference","HTMLEDraggableElement","HTMLEDragzoneElementBase","draggables","selectedDraggables","selectDraggable","unselectDraggable","elem","thisSelectedDraggable","dragged","dataTransfer","dropEffect","setData","id","thisDraggedDraggable","firstIndex","direction","sign","startRangeIndex","endRangeIndex","thisDraggable","HTMLEDragzoneElement","HTMLEDropzoneElementBase","droptest","appendAreaPart","removeDraggables","dragovered","dropIndex","dragzoneId","getData","dragzone","selectedDraggable","HTMLEDropzoneElement","addDraggables","placeholderPart","dataTransferSuccess","newDraggables","insertionPosition","multiple","newDraggable","insertAdjacentElement","appendChild","replaceChild","action","once","predicate","toRemove","atPosition","HTMLEDialogElementBase","handleEvent","cancel","confirm","open","close","HTMLEHandleElementBase","pointerId","releasePointerCapture","setPointerCapture","targetComputedStyle","movementX","movementY","rectWidth","rectHeight","outerElement","outerRectLeft","outerRectRight","outerRectTop","outerRectBottom","getPropertyValue","newLeft","trunc","newTop","HTMLEHeightSashElementBase","rootNode","requestAnimationFrame","growdir","newHeight","computedNewHeight","HTMLEImportElementBase","src","outerHTML","fetch","response","ok","text","Error","statusText","barShadowTemplate","circleShadowTemplate","HTMLELoaderElementBase","promise","finally","replaceChildren","commonStyle","barStyle","circleStyle","HTMLEWidthSashElementBase","setWidth","newWidth","slotsMap","slotsObserver","MutationObserver","mutationsList","mutation","slotReferences","slotRef_i","widget","slottedCallback","widgetsMap","attributesObserver","WidgetFactory","create","Proxy","apply","thisArg","argumentsList","observedSlots","slotName_i","slotElement","slot_i","slotReference","attributeFilter","attributeOldValue","widgets","slotted","NodeList","Widget","class","menuItemWidget","hasIcon","hasArrow","classList","keyshortcut","add","setKeyShortcut","setChecked","setExpanded","setType","setLabel","setName","setValue","setDisabled","hasChildMenu","childNodes","some","childNode_i","getMenu","getKeyShortcut","keyshortcutsPart","after","getLabel","getType","types","type_i","typesFeatures","iconPartTemplate","arrowPartTemplate","oldType","iconPart","arrowPart","getValue","getName","getChecked","getDisabled","getExpanded","targetItem","menubar","setContextual","setPosition","getContextual","menuitem_i","targetMenu","treeItemWidget","setTitle","setDraggable","setSelected","getTitle","setPosInSet","getPosInSet","posInSet","e","setActive","getActive","setDropTarget","getDropTarget","getDraggable","getSelected","setLevel","getLevel","parseInt","treeWidget","tree","multisectable","setMultiSelectable","child_i","getMultiSelectable","targetTree","listItemWidget","targetList","toolbarItemWidget","pressed","setPressed","getPressed","toolbarWidget","setOrientation","getOrientation","targetToolbar","targets","pointerMovements","onCaptureFlags","queuedPointerCallbacks","sash","growDir","setControls","setGrowDir","getGrowDir","getControls","sashTarget","pointerMoveCallback","pointerMovement","setHeight","gridCellWidget","headers","setHeaders","getHeaders","gridRowWidget","gridWidget","grid","setSelectBy","getSelectBy","targetGrid","multiselectable","scope","header","optionWidget","combobox","targetCombobox","addedNodes","box","targetOption","ViewBase","setModel","renderLight","renderShadow","refresh","shadow","light","View","GridModel","initRows","columns","initColumns","getColumnByName","column_i","sortByColumn","column","sortOrder","sortorder","sortTest","row_1","row_2","cell_1","extract","cell_2","localeCompare","GridColumnModel","filters","GridRowModel","age","GridViewBase","gridElement","getGridElement","setColumnDelegate","delegate","setCellDelegate","getRowElement","getColumnHeaderElement","getColumnCellsElements","rel","href","input","contextmenu","setSearchFilter","rowElement","addDisplayFilter","displayFilters","removeDisplayFilter","filterIndex","searchFilter","filter_i","resizable","toString","targetHead","targetHeader","contextMenu","columnHeaderElement","maxWidth","reduce","removeProperty","HTMLInputElement","targetColumn","GridView","TreeModel","sortFunction","childItems","flattenItems","item_a","item_b","flatMap","treeItem_i","of","getItemByUri","uri","itemsCount","uriLength","itemUri","itemUriLength","startsWith","charAt","flattenedInsertedItems","insertedItem_i","flattenedRemovedItems","TreeItemList","count","removedItemsGroups","TreeItemModel","list_i","children_i","TreeViewBase","itemContentDelegate","itemContextMenuDelegate","itemsList","treeElement","dragstart","drop","keydown","focusin","focusout","treeItemElement","dragImageElement","span","selectedElements","selectedCount","selectedUris","uri_i","_","uris","uri_j","selectedUrisString","join","lastUri","dragImage","setDragImage","targetUri","targetItemModel","transferedUris","split","transferedItems","targetType","targetParentItem","sameLabelIndex","item_j","copyWithin","newElements","targetElement","TreeView","MyTreeItemList","show","hide","display","result","console","log","MyTreeItemModel","childCount","visibility","main","gridView","Date","getFullYear","treeModel","aLabel","bLabel","treeView","visibilityItem","menuView","TreeMain"],"sourceRoot":""}