{"version":3,"file":"main.js","mappings":"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","sources":["webpack://main/webpack/bootstrap","webpack://main/webpack/runtime/define property getters","webpack://main/webpack/runtime/hasOwnProperty shorthand","webpack://main/webpack/runtime/make namespace object","webpack://main/./src/commands/Command.ts","webpack://main/./src/events/EventDispatcher.ts","webpack://main/./src/elements/Snippets.ts","webpack://main/./src/elements/HTMLElement.ts","webpack://main/./src/Input.ts","webpack://main/./src/templates/menus/MenuItemGroupTemplate.ts","webpack://main/./src/templates/menus/MenuTemplate.ts","webpack://main/./src/templates/menus/MenuItemTemplate.ts","webpack://main/./src/templates/menus/MenubarTemplate.ts","webpack://main/./src/Editor.ts","webpack://main/./src/elements/containers/menus/Menu.ts","webpack://main/./src/elements/containers/menus/MenuBar.ts","webpack://main/./src/elements/containers/menus/MenuButton.ts","webpack://main/./src/elements/containers/menus/MenuItem.ts","webpack://main/./src/elements/containers/menus/MenuItemGroup.ts","webpack://main/./src/elements/containers/panels/Panel.ts","webpack://main/./src/elements/containers/panels/PanelGroup.ts","webpack://main/./src/elements/containers/status/StatusBar.ts","webpack://main/./src/elements/containers/status/StatusItem.ts","webpack://main/./src/elements/containers/tabs/TabPanel.ts","webpack://main/./src/elements/containers/tabs/Tab.ts","webpack://main/./src/elements/containers/tabs/TabList.ts","webpack://main/./src/elements/containers/trees/TreeItem.ts","webpack://main/./src/elements/containers/trees/Tree.ts","webpack://main/./src/elements/controls/breadcrumb/BreadcrumbItem.ts","webpack://main/./src/elements/controls/breadcrumb/BreadcrumbTrail.ts","webpack://main/./src/elements/controls/draggable/Draggable.ts","webpack://main/./src/elements/controls/draggable/Dragzone.ts","webpack://main/./src/elements/controls/draggable/Dropzone.ts","webpack://main/./src/elements/forms/Snippets.ts","webpack://main/./src/elements/utils/HeightSash.ts","webpack://main/./src/elements/utils/Import.ts","webpack://main/./src/elements/utils/Loader.ts","webpack://main/./src/elements/utils/Palette.ts","webpack://main/./src/elements/utils/WidthSash.ts","webpack://main/./src/models/Model.ts","webpack://main/./src/objects/StructuredFormData.ts","webpack://main/./src/templates/other/DraggableInputTemplate.ts","webpack://main/./src/templates/table/TableTemplate.ts","webpack://main/./src/views/View.ts","webpack://main/./sample/main.ts","webpack://main/./sample/formdata.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export { isCommand };\r\nexport { isUndoCommand };\r\nexport { Command };\r\nexport { UndoCommand };\r\n\r\nfunction isCommand(obj: any): obj is Command {\r\n    return (typeof obj.exec === 'function');\r\n}\r\n\r\nfunction isUndoCommand(obj: any): obj is UndoCommand {\r\n    return (typeof obj.exec === 'function')\r\n        && (typeof obj.undo === 'function');\r\n}\r\n\r\ninterface Command {\r\n    exec: (args?: any) => void;\r\n    undo?: (args?: any) => void;\r\n}\r\n\r\ninterface UndoCommand {\r\n    exec: (args?: any) => void;\r\n    undo: (args?: any) => void;\r\n}","export { EventBase };\r\nexport { Event };\r\nexport { EEvent };\r\nexport { EventDispatcher };\r\nexport { EventDispatcherBase };\r\n\r\ninterface EventConstructor {\r\n    readonly prototype: Event;\r\n    new<T extends string, D extends any>(type: T, data: D): Event<T, D>;\r\n}\r\n\r\ninterface Event<T extends string = string, D extends any = any> {\r\n    readonly type: T;\r\n    readonly data: D;\r\n}\r\n\r\ntype EEvent<T extends string = string, D extends any = any> = Event<T, D>;\r\n\r\nclass EventBase<T extends string, D extends any> implements Event<T, D> {\r\n    readonly type: T;\r\n    readonly data: D;\r\n\r\n    constructor(type: T, data: D) {\r\n        this.type = type;\r\n        this.data = data;\r\n    }\r\n}\r\n\r\nvar Event: EventConstructor = EventBase;\r\n\r\ntype EventHandler<E extends Event> = (event: E) => void;\r\n\r\ninterface EventListener<E extends Event = Event> {\r\n    handler: EventHandler<E>;\r\n    once?: boolean;\r\n}\r\n\r\ninterface EventDispatcher<Events extends {[K in Extract<keyof Events, string>]: Event<K>} = {}> {\r\n    addEventListener<K extends Extract<keyof Events, string>>(event: K, handler: (event: Events[K]) => void, once?: boolean): (event: Events[K]) => void;\r\n    addEventListener<K extends string>(event: K, handler: (event: Event<K>) => void, once?: boolean): (event: Event<K>) => void;\r\n    removeEventListener<K extends Extract<keyof Events, string>>(event: K, handler: (event: Events[K]) => void, once?: boolean): number;\r\n    removeEventListener<K extends string>(event: K, handler: (event: Event<K>) => void, once?: boolean): number;\r\n    dispatchEvent<K extends Extract<keyof Events, string>>(event: Events[K]): void;\r\n    dispatchEvent<K extends string>(event: Event<K>): void;\r\n}\r\n\r\ninterface EventDispatcherConstructor {\r\n    readonly prototype: EventDispatcher<{}>;\r\n    new<Events extends {[K in Extract<keyof Events, string>]: Event<K>} = {}>(): EventDispatcher<Events>;\r\n}\r\n\r\nclass EventDispatcherBase<Events extends {[K in Extract<keyof Events, string>]: Event<K>} = {}> implements EventDispatcher<Events> {\r\n    private _listeners: Map<string, EventListener<any>[]>;\r\n\r\n    constructor() {\r\n        this._listeners = new Map();\r\n    }\r\n\r\n    public addEventListener<K extends string>(event: K, handler: (event: Event<K>) => void, once?: boolean): (event: Event<K>) => void;\r\n    public addEventListener<K extends Extract<keyof Events, string>>(event: K, handler: (event: Events[K]) => void, once?: boolean): (event: Events[K]) => void;\r\n    public addEventListener<K extends Extract<keyof Events, string>>(event: K, handler: (event: Events[K]) => void, once?: boolean): (event: Events[K]) => void {\r\n        let listeners = this._listeners.get(event.toString());\r\n        let newListener: EventListener<any> = {\r\n            handler: handler,\r\n            once: once\r\n        };\r\n        \r\n        if (typeof listeners === \"undefined\") {\r\n            this._listeners.set(event.toString(), [newListener]);\r\n        }\r\n        else if (!listeners.find(listener => listener.handler === handler && listener.once === once)) {\r\n            listeners.push(newListener);\r\n        }\r\n\r\n        return handler;\r\n    }\r\n\r\n    public removeEventListener<K extends string>(event: string, handler: (event: Event<K>) => void, once?: boolean): number;\r\n    public removeEventListener<K extends Extract<keyof Events, string>>(event: K, handler: (event: Events[K]) => void, once?: boolean): number;\r\n    public removeEventListener<K extends Extract<keyof Events, string>>(event: K, handler: (event: Events[K]) => void, once?: boolean): number {\r\n        let listeners = this._listeners.get(event);\r\n        if (typeof listeners !== \"undefined\") {\r\n            const count = listeners.length;\r\n            const idx = listeners.findIndex(listener => listener.handler === handler && listener.once === once);\r\n            if (idx > -1) {\r\n                if (count > 1) {\r\n                    listeners[idx] = listeners.pop()!;\r\n                    return count - 1;\r\n                }\r\n                else {\r\n                    this._listeners.delete(event.toString());\r\n                    return 0;\r\n                }\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    public dispatchEvent<K extends string>(event: Event<K>): void;\r\n    public dispatchEvent<K extends Extract<keyof Events, string>>(event: Events[K]): void;\r\n    public dispatchEvent<K extends Extract<keyof Events, string>>(event: Events[K]): void {\r\n        let listeners = this._listeners.get(event.type);\r\n        if (typeof listeners !== 'undefined') {\r\n            listeners = listeners.filter((listener) => {\r\n                listener.handler(event);\r\n                return !listener.once\r\n            });\r\n            if (listeners.length === 0) {\r\n                this._listeners.delete(event.type);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst EventDispatcher: EventDispatcherConstructor = EventDispatcherBase;","export { forAllSubtreeElements };\r\nexport { forAllSubtreeNodes };\r\nexport { getPropertyFromPath };\r\nexport { setPropertyFromPath };\r\nexport { pointIntersectsWithDOMRect };\r\n\r\nfunction forAllSubtreeElements(element: Element, func: (element: Element) => void) {\r\n  let index = 0;\r\n  func(element);\r\n  while (index < element.children.length) {\r\n    let child = element.children.item(index);\r\n    if (child) {\r\n      forAllSubtreeElements(child, func);\r\n    }\r\n    index++;\r\n  }\r\n}\r\n\r\nfunction forAllSubtreeNodes(parent: Node & ParentNode, func: (childNode: Node & ChildNode, parentNode: Node & ParentNode) => void) {\r\n  let index = 0;\r\n  while (index < parent.childNodes.length) {\r\n    let child = parent.childNodes.item(index);\r\n    if (child) {\r\n      func(child, parent);\r\n      if (child.hasChildNodes()) {\r\n        forAllSubtreeNodes(child as unknown as Node & ParentNode, func);\r\n      }\r\n    }\r\n    index++;\r\n  }\r\n}\r\n\r\nfunction getPropertyFromPath(src: object, path: string): any {\r\n  const props = path.split(\".\");\r\n  let obj: {[key: string]: any} | undefined  = src;\r\n  props.forEach((prop) => {\r\n    if (prop.includes(\"[\")) {\r\n      let index = parseInt(prop.substring(prop.indexOf(\"[\") + 1, prop.indexOf(\"]\")));\r\n      if (Number.isNaN(index)) {\r\n        console.error(`Wrong indexed path: ${prop}`);\r\n      }\r\n      prop = prop.substring(0, prop.indexOf(\"[\"));\r\n      if (typeof obj === \"object\" && prop in obj && Array.isArray(obj[prop])) {\r\n        obj = obj[prop][index];\r\n      }\r\n    }\r\n    else if (typeof obj === \"object\" && prop in obj) {\r\n      obj = obj[prop];\r\n    }\r\n    else {\r\n      obj = void 0;\r\n    }\r\n  });\r\n  return obj;\r\n}\r\n\r\nfunction setPropertyFromPath(src: object, path: string, value: any): object {\r\n  const props = path.split(\".\");\r\n  let obj: {[key: string]: any} = src;\r\n  let lastPropIdx = props.length - 1;\r\n  if (src === null) {\r\n    console.error(\"Source data can't be null\");\r\n  }\r\n  props.forEach((prop, idx) => {\r\n    if (prop.includes(\"[\")) {\r\n      let index = parseInt(prop.substring(prop.indexOf(\"[\") + 1, prop.indexOf(\"]\")));\r\n      if (Number.isNaN(index)) {\r\n        console.error(`Wrong indexed path: ${prop}`);\r\n      }\r\n      prop = prop.substring(0, prop.indexOf(\"[\"));\r\n      if (!Array.isArray(obj[prop])) {\r\n        obj[prop] = [];\r\n      }\r\n      if (idx === lastPropIdx) {\r\n        obj[prop][index] = value;\r\n      }\r\n      else {\r\n        if (typeof obj[prop][index] !== \"object\") {\r\n          obj[prop][index] = {}\r\n        }\r\n        obj = obj[prop][index];\r\n      }\r\n    }\r\n    else {\r\n      if (typeof obj[prop] !== \"object\") {\r\n        obj[prop] = {}\r\n      }\r\n      if (idx === lastPropIdx) {\r\n        obj[prop] = value;\r\n      }\r\n      else {\r\n        obj = obj[prop];\r\n      }\r\n    }\r\n  });\r\n  return src;\r\n}\r\n\r\nfunction pointIntersectsWithDOMRect(x: number, y: number, rect: DOMRect) {\r\n  return !(rect.left > x || \r\n    rect.right < x || \r\n    rect.top > y ||\r\n    rect.bottom < y);\r\n}","import { ListModel, ListModelChangeEvent, ObjectModel, ObjectModelChangeEvent } from \"../models/Model\";\r\nimport { forAllSubtreeElements } from \"./Snippets\";\r\n\r\nexport { isTagElement };\r\nexport { RegisterCustomHTMLElement };\r\nexport { GenerateAttributeAccessors };\r\nexport { createTemplate };\r\nexport { bindShadowRoot };\r\nexport { HTMLElementDescription };\r\nexport { setElementProperties };\r\nexport { setElementAttributes };\r\nexport { setElementChildren };\r\nexport { HTMLElementConstructor };\r\nexport { isParentNode };\r\nexport { isReactiveNode };\r\nexport { isReactiveParentNode };\r\nexport { ReactiveNode };\r\nexport { ReactiveParentNode };\r\nexport { ReactiveChildNodes };\r\nexport { isElement };\r\nexport { Element };\r\nexport { HTMLElementInit };\r\nexport { AttributeMutationMixin };\r\nexport { AttributeType };\r\nexport { areAttributesMatching };\r\nexport { AttributeMutationMixinBase };\r\nexport { createMutationObserverCallback };\r\nexport { Fragment };\r\nexport { setHTMLElementEventListeners };\r\nexport { parseStringTemplate };\r\n\r\nfunction isTagElement<K extends keyof HTMLElementTagNameMap>(tagName: K, obj: any): obj is HTMLElementTagNameMap[K] {\r\n    return obj instanceof Node && obj.nodeType === obj.ELEMENT_NODE && (obj as Element).tagName.toLowerCase() == tagName;\r\n}\r\n\r\ninterface RegisterCustomHTMLElementDecorator {\r\n    (args: {\r\n        name: string;\r\n        observedAttributes?: string[],\r\n        options?: ElementDefinitionOptions\r\n    }): <C extends CustomElementConstructor>(elementCtor: C) => C;\r\n}\r\n\r\nfunction parseStringTemplate(template: string, items: {[key: string]: Node | string}): DocumentFragment {\r\n    const regexp = /\\[(.*?)\\]/gm;\r\n    const itemsKeys = Object.keys(items);\r\n    let result: RegExpExecArray  | null;\r\n    let resultNodes: (Node | string)[] = [];\r\n    let lastResultIndex = 0;\r\n    while ((result = regexp.exec(template)) !== null) {\r\n        if (result.index >= lastResultIndex) {\r\n            resultNodes.push(document.createTextNode(template.substring(lastResultIndex, result.index)));\r\n        }\r\n        if (itemsKeys.indexOf(result[1]) > -1) {\r\n            resultNodes.push(items[result[1]]);\r\n        }\r\n        lastResultIndex = result.index + result[0].length;\r\n    }\r\n    let fragment = new DocumentFragment();\r\n    fragment.append(...resultNodes, template.substring(lastResultIndex, template.length));\r\n    return fragment;\r\n}\r\n/*\r\nfunction fragment(parts: TemplateStringsArray, ...slots: (Node | string)[]): DocumentFragment {\r\n    let timestamp = new Date().getTime();\r\n    let html = parts.reduce((html, part, index) => {\r\n        return `${html}${part}${(index < slots.length) ? `<div id=\"${timestamp}-${index}\"></div>` : \"\"}`;\r\n    }, \"\");\r\n    let parser = new DOMParser();\r\n    let fragment = new DocumentFragment();\r\n    fragment.append(...parser.parseFromString(html, \"text/html\").body.children);\r\n    slots.forEach((slot, index) => {\r\n        let placeholder = fragment.getElementById(`${timestamp}-${index}`);\r\n        if (placeholder) {\r\n            if (slot instanceof Node) {\r\n                placeholder.replaceWith(slot);\r\n            }\r\n            else {\r\n                placeholder.replaceWith(document.createTextNode(slot));\r\n            }\r\n        }\r\n    });\r\n    return fragment;\r\n}\r\n*/\r\nconst RegisterCustomHTMLElement: RegisterCustomHTMLElementDecorator = function(args: {\r\n    name: string;\r\n    attributes?: string[],\r\n    observedAttributes?: string[],\r\n    options?: ElementDefinitionOptions\r\n}) {\r\n    return <C extends CustomElementConstructor>(\r\n        elementCtor: C\r\n    ) => {\r\n        const { name, observedAttributes, options } = args;\r\n\r\n        if (observedAttributes) {\r\n            Object.defineProperty(elementCtor.prototype.constructor, 'observedAttributes', {\r\n                get: () => {\r\n                    return observedAttributes;\r\n                }\r\n            });\r\n        }\r\n\r\n        if (!customElements.get(name)) {\r\n            customElements.define(\r\n                name,\r\n                elementCtor,\r\n                options\r\n            );\r\n        }\r\n\r\n        return elementCtor;\r\n    }\r\n}\r\n\r\ninterface GenerateAttributeAccessorsDecorator {\r\n    (attributes: {\r\n        name: string,\r\n        type?: \"string\" | \"number\" | \"boolean\" | \"json\"\r\n    }[]): <C extends CustomElementConstructor>(elementCtor: C) => C;\r\n}\r\n\r\nconst GenerateAttributeAccessors: GenerateAttributeAccessorsDecorator = function(attributes: {\r\n    name: string,\r\n    type?: \"string\" | \"number\" | \"boolean\" | \"json\"\r\n}[]) {\r\n    return <C extends CustomElementConstructor>(\r\n        elementCtor: C\r\n    ) => {\r\n        attributes.forEach((attr: {\r\n            name: string,\r\n            type?: \"string\" | \"number\" | \"boolean\" | \"json\"\r\n        }) => {\r\n            const { name,  type } = attr;\r\n            switch (type) {\r\n                case \"boolean\":\r\n                    Object.defineProperty(elementCtor.prototype, name, {\r\n                        get: function(this: HTMLElement) {\r\n                            const val = this.getAttribute(name);\r\n                            return (val === \"\" || false);\r\n                        },\r\n                        set: function(this: HTMLElement, value) {\r\n                            if (value) {\r\n                                this.setAttribute(name, \"\");\r\n                            }\r\n                            else {\r\n                                this.removeAttribute(name);\r\n                            }\r\n                        }\r\n                    });\r\n                    break;\r\n                case \"json\":\r\n                    Object.defineProperty(elementCtor.prototype, name, {\r\n                        get: function(this: HTMLElement) {\r\n                            const val = this.getAttribute(name);\r\n                            return (val !== null) ? JSON.parse(val) : null;\r\n                        },\r\n                        set: function(this: HTMLElement, value) {\r\n                            if (value !== null) {\r\n                                this.setAttribute(name, JSON.stringify(value));\r\n                            }\r\n                            else {\r\n                                this.removeAttribute(name);\r\n                            }\r\n                        }\r\n                    });\r\n                    break;\r\n                case \"number\":\r\n                    Object.defineProperty(elementCtor.prototype, name, {\r\n                        get: function(this: HTMLElement) {\r\n                            const val = this.getAttribute(name);\r\n                            return (val !== null) ? parseFloat(val) : val;\r\n                        },\r\n                        set: function(this: HTMLElement, value) {\r\n                            if (value) {\r\n                                this.setAttribute(name, value);\r\n                            }\r\n                            else {\r\n                                this.removeAttribute(name);\r\n                            }\r\n                        }\r\n                    });\r\n                    break;\r\n                case \"string\":\r\n                default:\r\n                    Object.defineProperty(elementCtor.prototype, name, {\r\n                        get: function(this: HTMLElement) {\r\n                            const val = this.getAttribute(name);\r\n                            return val;\r\n                        },\r\n                        set: function(this: HTMLElement, value) {\r\n                            if (value) {\r\n                                this.setAttribute(name, value);\r\n                            }\r\n                            else {\r\n                                this.removeAttribute(name);\r\n                            }\r\n                        }\r\n                    });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return elementCtor;\r\n    }\r\n}\r\n\r\nfunction createTemplate<E extends Element | DocumentFragment>(templateContent?: string): E {\r\n    const template = document.createElement(\"template\");\r\n    if (typeof templateContent !== \"undefined\") {\r\n        template.innerHTML = templateContent;\r\n    }\r\n    return template.content as E;\r\n}\r\n\r\nfunction bindShadowRoot(element: HTMLElement, templateContent?: string): ShadowRoot {\r\n    const root = element.attachShadow({mode: \"open\"});\r\n    const template = document.createElement(\"template\");\r\n    if (typeof templateContent !== \"undefined\") {\r\n        template.innerHTML = templateContent;\r\n    }\r\n    root.appendChild(template.content.cloneNode(true));\r\n    return root;\r\n}\r\n\r\nfunction HTMLFragment(content: string): DocumentFragment {\r\n    let template = document.createElement(\"template\");\r\n    template.innerHTML = content;\r\n    return template.content;\r\n}\r\n\r\nfunction Fragment(...nodes: (Node | string)[]): DocumentFragment {\r\n    let fragment = new DocumentFragment();\r\n    fragment.append(...nodes);\r\n    return fragment;\r\n}\r\n\r\ntype HTMLElementDescription<K extends keyof HTMLElementTagNameMap> = {\r\n    tagName: K,\r\n    init?: HTMLElementInit<K>\r\n};\r\n\r\ntype _IfEquals<X, Y, A = X, B = never> =\r\n  (<T>() => T extends X ? 1 : 2) extends\r\n  (<T>() => T extends Y ? 1 : 2) ? A : B;\r\n\r\ntype WritableKeys<T> = {\r\n    [P in keyof T]-?: _IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, P>\r\n}[keyof T];\r\n\r\ninterface HTMLElementInit<K extends keyof HTMLElementTagNameMap> {\r\n    options?: ElementCreationOptions,\r\n    props?: Partial<Pick<HTMLElementTagNameMap[K], WritableKeys<HTMLElementTagNameMap[K]>>>,\r\n    attrs?: {[name: string]: number | string | boolean},\r\n    children?: (Node | string)[],\r\n    listeners?: {\r\n        [ListenerEvent in keyof HTMLElementEventMap]?: (event: HTMLElementEventMap[ListenerEvent]) => any | [(event: HTMLElementEventMap[ListenerEvent]) => any, Partial<boolean | AddEventListenerOptions>]\r\n    }\r\n}\r\n\r\nfunction HTMLElementConstructor<K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit<K>\r\n    ): HTMLElementTagNameMap[K] {\r\n    const element = document.createElement(tagName, init?.options);\r\n    if (init) {\r\n        if (init.props) {\r\n            setElementProperties(element, init.props);\r\n        }\r\n        if (init.attrs) {\r\n            setElementAttributes(element, init.attrs);\r\n        }\r\n        if (init.children) {\r\n            setElementChildren(element, init.children);\r\n        }\r\n        if (init.listeners) {\r\n            setHTMLElementEventListeners(element, init.listeners);\r\n        }\r\n    }\r\n    return element;\r\n};\r\n\r\ninterface HTMLInit<K extends keyof HTMLElementTagNameMap> {\r\n    options?: ElementCreationOptions,\r\n    props?: Partial<Pick<HTMLElementTagNameMap[K], WritableKeys<HTMLElementTagNameMap[K]>>>,\r\n    attrs?: {[name: string]: number | string | boolean},\r\n    children?: Node[] | NodeList | ReactiveChildNodes,\r\n    listeners?: {\r\n        [ListenerEvent in keyof HTMLElementEventMap]?: (event: HTMLElementEventMap[ListenerEvent]) => any | [(event: HTMLElementEventMap[ListenerEvent]) => any, Partial<boolean | AddEventListenerOptions>]\r\n    },\r\n    styles?: {\r\n        [property: string]: string | [string, string]\r\n    };\r\n}\r\n\r\nfunction Element<K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLInit<K>): HTMLElementTagNameMap[K] {\r\n        const element = document.createElement(tagName, init?.options);\r\n        if (init) {\r\n            if (init.props) {\r\n                setElementProperties(element, init.props);\r\n            }\r\n            if (init.attrs) {\r\n                setElementAttributes(element, init.attrs);\r\n            }\r\n            if (init.children) {\r\n                if (typeof init.children === \"function\") {\r\n                    setElementChildren(element, init.children(element));\r\n                }\r\n                else {\r\n                    setElementChildren(element, init.children);\r\n                }\r\n            }\r\n            if (init.listeners) {\r\n                setHTMLElementEventListeners(element, init.listeners);\r\n            }\r\n            if (init.styles) {\r\n                setHTMLElementStyles(element, init.styles);\r\n            }\r\n        }\r\n        return element;\r\n}\r\n\r\ntype ReactiveNode = Node & {\r\n    _reactAttributes: {\r\n        _reactModel: ObjectModel<object>,\r\n        _reactEvent: \"objectmodelchange\",\r\n        _reactListener: (event: ObjectModelChangeEvent) => void;\r\n    }\r\n}\r\n\r\nfunction isParentNode(node: Node): node is Node & ParentNode {\r\n    return node.hasChildNodes();\r\n}\r\n\r\nfunction isElement(node: Node): node is Element {\r\n    return node.nodeType === node.ELEMENT_NODE;\r\n}\r\n\r\nfunction isReactiveNode(node: Node): node is ReactiveNode {\r\n    let testNode = node as ReactiveNode;\r\n    return (typeof testNode._reactAttributes !== \"undefined\") && testNode._reactAttributes._reactEvent === \"objectmodelchange\";\r\n}\r\n\r\ntype ReactiveParentNode = (Node & ParentNode) & {\r\n    _reactAttributes: {\r\n        _reactModel: ListModel<object>,\r\n        _reactEvent: \"listmodelchange\",\r\n        _reactListener: (event: ListModelChangeEvent) => void;\r\n    }\r\n}\r\n\r\nfunction isReactiveParentNode(node: Node): node is ReactiveParentNode {\r\n    let testNode = node as ReactiveParentNode;\r\n    return (isParentNode(node) && typeof testNode._reactAttributes !== \"undefined\") && testNode._reactAttributes._reactEvent === \"listmodelchange\";\r\n}\r\n\r\nfunction ReactiveNode<Data extends object, N extends Node>\r\n    (node: N, object: ObjectModel<Data>, react: <K extends keyof Data>(node: N, property: K, oldValue: Data[K], newValue: Data[K]) => void): N {\r\n        Object.assign(\r\n            node, {\r\n                _reactAttributes: {\r\n                    _reactModel: object,\r\n                    _reactEvent: \"objectmodelchange\",\r\n                    _reactListener: (event: ObjectModelChangeEvent) => {\r\n                        react(node, event.data.property as keyof Data, event.data.oldValue, event.data.newValue);\r\n                    }\r\n                }\r\n            }\r\n        ) as ReactiveNode;\r\n        const keys = Object.keys(object.data) as (keyof Data)[];\r\n        keys.forEach((key) => {\r\n            react(node, key, void 0 as any, object.data[key]);\r\n        });\r\n        return node;\r\n}\r\n\r\ninterface ReactiveChildNodes {\r\n    (parent: Node & ParentNode): (Node | string)[]\r\n}\r\n\r\nfunction ReactiveChildNodes<Item extends object>(list: ListModel<Item>, map: (item: Item) => Node | string): ReactiveChildNodes {\r\n    return (parent: Node & ParentNode) => {\r\n        Object.assign(\r\n            parent, {\r\n                _reactAttributes: {\r\n                    _reactModel: list,\r\n                    _reactEvent: \"listmodelchange\",\r\n                    _reactListener: (event: ListModelChangeEvent) => {\r\n                        //TODO: Create a direct map between model items and child nodes to get rid of index\r\n                        if (event.data.removedItems.length) {\r\n                            for (let i = 0; i < event.data.removedItems.length; i++) {\r\n                                parent!.children.item(event.data.index)!.remove();\r\n                            }\r\n                        }\r\n                        if (event.data.addedItems.length) {\r\n                            let addedElements = event.data.addedItems.map(item => map(item));\r\n                            if (event.data.index >= list.items.length) {\r\n                                parent!.append(...addedElements);\r\n                            }\r\n                            else {\r\n                                parent!.children.item(event.data.index - event.data.removedItems.length)!.before(...addedElements);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        ) as ReactiveParentNode;\r\n        return list.items.map(map);\r\n    }\r\n}\r\n\r\nfunction setHTMLElementEventListeners<K extends keyof HTMLElementTagNameMap>(\r\n    element: HTMLElementTagNameMap[K],\r\n    listeners: {\r\n        [K in keyof HTMLElementEventMap]?: (event: HTMLElementEventMap[K]) => any | [(event: HTMLElementEventMap[K]) => any, Partial<boolean | AddEventListenerOptions>]\r\n    }\r\n): HTMLElementTagNameMap[K] {\r\n    Object.entries(listeners).forEach((entry) => {\r\n        if (Array.isArray(entry[1])) {\r\n            element.addEventListener(entry[0], entry[1][0] as EventListener, entry[1][1]);\r\n        }\r\n        else {\r\n            element.addEventListener(entry[0], entry[1] as EventListener);\r\n        }\r\n    });\r\n    return element;\r\n};\r\n\r\nfunction setHTMLElementStyles<E extends HTMLElement>(\r\n    element: E,\r\n    styles: {\r\n        [property: string]: string | [string, string]\r\n    }\r\n): E {\r\n    Object.keys(styles).forEach((property) => {\r\n        if (Array.isArray(styles[property])) {\r\n            element.style.setProperty(property, styles[property][0], styles[property][1]);\r\n        }\r\n        else {\r\n            element.style.setProperty(property, styles[property] as string);\r\n        }\r\n    });\r\n    return element;\r\n};\r\n\r\nfunction setElementChildren<E extends Element>(\r\n    element: E,\r\n    children: (Node | string)[] | NodeList\r\n): E {\r\n    element.textContent = \"\";\r\n    element.append(...children);\r\n    return element;\r\n};\r\n\r\nfunction setElementProperties<E extends Element>(\r\n        element: E,\r\n        properties?: Partial<Pick<E, WritableKeys<E>>>\r\n    ): E {\r\n    for (const property in properties) {\r\n        let value = properties[property];\r\n        if (typeof value !== \"undefined\") {\r\n            element[property] = value!;\r\n        }\r\n    }\r\n    return element;\r\n};\r\n\r\nfunction setElementAttributes<E extends Element>(\r\n        element: E,\r\n        attributes?: {[attrName: string]: number | string | boolean}\r\n    ): E {\r\n    for (const key in attributes) {\r\n        const value = attributes[key];\r\n        if (typeof value === \"boolean\") {\r\n            if (value) {\r\n                element.setAttribute(key, \"\");\r\n            }\r\n        }\r\n        else {\r\n            element.setAttribute(key, value.toString());\r\n        }\r\n    }\r\n    return element;\r\n};\r\n\r\ninterface AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n    attach(element: Element): void;\r\n    detach(element: Element): void;\r\n}\r\n  \r\ntype AttributeType = \"string\" | \"boolean\" | \"listitem\";\r\n\r\nfunction areAttributesMatching(refAttributeType: AttributeType, refAttrName: string, refAttrValue: string, attrName: string, attrValue: string | null): boolean {\r\n    if (refAttrName == attrName) {\r\n        switch (refAttributeType) {\r\n            case \"boolean\":\r\n                return refAttrValue == \"\" && attrValue == \"\";\r\n            case \"string\":\r\n                return refAttrValue !== \"\" && (refAttrValue === attrValue);\r\n            case \"listitem\":\r\n                return (refAttrValue !== \"\" && attrValue !== null) && new RegExp(`${refAttrValue}\\s*?`, \"g\").test(attrValue);\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nabstract class AttributeMutationMixinBase implements AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n\r\n    constructor(attributeName: string, attributeType: AttributeType = \"boolean\", attributeValue: string = \"\") {\r\n        this.attributeName = attributeName;\r\n        this.attributeType = attributeType;\r\n        this.attributeValue = attributeValue;\r\n    }\r\n\r\n    public abstract attach(element: Element): void;\r\n    public abstract detach(element: Element): void;\r\n}\r\n\r\nfunction createMutationObserverCallback(\r\n    mixins: AttributeMutationMixin[]\r\n    ) {\r\n    return (mutationsList: MutationRecord[]) =>  {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            mutation.addedNodes.forEach((node: Node) => {\r\n                if (isElement(node)) {\r\n                    forAllSubtreeElements(node, (childElement: Element) => {\r\n                        [...childElement.attributes].forEach((attr) => {\r\n                            let matchingMixins = mixins.filter(\r\n                                mixin => areAttributesMatching(\r\n                                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                                    attr.name, attr.value\r\n                                )\r\n                            );\r\n                            matchingMixins.forEach((mixin) => {\r\n                                mixin.attach(childElement);\r\n                            });\r\n                        });\r\n                    });\r\n                }\r\n            });\r\n            mutation.removedNodes.forEach((node: Node) => {\r\n                if (isElement(node)) {\r\n                    forAllSubtreeElements(node, (childElement: Element) => {\r\n                        [...childElement.attributes].forEach((attr) => {\r\n                            let matchingMixins = mixins.filter(\r\n                                mixin => areAttributesMatching(\r\n                                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                                    attr.name, attr.value\r\n                                )\r\n                            );\r\n                            matchingMixins.forEach((mixin) => {\r\n                                mixin.detach(childElement);\r\n                            });\r\n                        });\r\n                    });\r\n                }\r\n            });\r\n            if (isElement(mutation.target)) {\r\n                let targetElement = mutation.target;\r\n                let attrName = mutation.attributeName;\r\n                if (attrName) {\r\n                    let relatedMixins = mixins.filter(mixin => mixin.attributeName === attrName);\r\n                    relatedMixins.forEach((mixin) => {\r\n                        if (areAttributesMatching(\r\n                                mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                                attrName!, targetElement.getAttribute(attrName!)\r\n                            )) {\r\n                                mixin.attach(targetElement);\r\n                        }\r\n                        else {\r\n                            mixin.detach(targetElement);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n}","export { Key };\r\nexport { KeyModifier };\r\nexport { HotKey };\r\nexport { MouseButton };\r\n\r\nenum Key {\r\n    A = 'a',\r\n    B = 'b',\r\n    C = \"c\",\r\n    D = \"d\",\r\n    E = \"e\",\r\n    F = \"f\",\r\n    G = \"g\",\r\n    H = \"h\",\r\n    I = \"i\",\r\n    J = \"j\",\r\n    K = \"k\",\r\n    L = \"l\",\r\n    M = \"m\",\r\n    O = \"o\",\r\n    P = \"p\",\r\n    Q = \"q\",\r\n    R = \"r\",\r\n    S = \"s\",\r\n    T = \"t\",\r\n    U = \"u\",\r\n    V = \"v\",\r\n    W = \"w\",\r\n    X = \"x\",\r\n    Y = \"y\",\r\n    Z = \"z\",\r\n    ENTER = \"Enter\",\r\n    BACKSPACE = \"Backspace\",\r\n    ARROW_DOWN = \"ArrowDown\",\r\n    ARROW_LEFT = \"ArrowLeft\",\r\n    ARROW_RIGHT = \"ArrowRight\",\r\n    ARROW_UP = \"ArrowUp\",\r\n    SHIFT = \"Shift\"\r\n}\r\n\r\nenum KeyModifier {\r\n    Alt = \"Alt\",\r\n    Control = \"Control\",\r\n    Shift = \"Shift\",\r\n}\r\n\r\nfunction displayKeyModifier(mode: KeyModifier): string {\r\n    switch (mode) {\r\n        case KeyModifier.Control:\r\n            return \"Ctrl\";\r\n        default:\r\n            return mode;\r\n    }\r\n}\r\n\r\nenum MouseButton {\r\n    LEFT = 1,\r\n    WHEEL = 2,\r\n    RIGHT = 3,\r\n    FORWARD = 4,\r\n    BACK = 5\r\n}\r\n\r\nconst testKeyModifier = (mod: KeyModifier, event: KeyboardEvent) => {\r\n    switch (mod) {\r\n        case 'Alt':\r\n            return event.altKey;\r\n        case 'Control':\r\n            return event.ctrlKey;\r\n        case 'Shift':\r\n            return event.shiftKey;\r\n        default:\r\n            return () => true;\r\n    }\r\n}\r\n\r\nclass HotKey {\r\n\r\n    public readonly key: Key;\r\n    public readonly mod1?: KeyModifier;\r\n    public readonly mod2?: KeyModifier;\r\n\r\n    constructor(key: Key, mod1?: KeyModifier, mod2?: KeyModifier) {\r\n        this.key = key;\r\n        this.mod1 = mod1;\r\n        this.mod2 = mod2;\r\n    }\r\n\r\n    public toString(): string {\r\n        return `${this.mod1 ? `${displayKeyModifier(this.mod1)}+` : ''}${this.mod2 ? `${displayKeyModifier(this.mod2)}+` : ''}${(this.key.length === 1) ? this.key.toUpperCase() : this.key}`;\r\n    }\r\n\r\n    public test(event: KeyboardEvent): boolean {\r\n        return ((!this.mod1 || testKeyModifier(this.mod1, event)) && (!this.mod2 || testKeyModifier(this.mod2, event)) && event.key === this.key);\r\n    }\r\n}","import { HTMLEMenuItemGroupElement } from \"../../elements/containers/menus/MenuItemGroup\";\r\nimport { HTMLElementConstructor } from \"../../elements/HTMLElement\";\r\nimport { HTMLEMenuItemTemplateDescription, HTMLEMenuItemTemplate } from \"./MenuItemTemplate\";\r\n\r\nexport { HTMLEMenuItemGroupTemplateDescription };\r\nexport { HTMLEMenuItemGroupTemplate };\r\n\r\ntype HTMLEMenuItemGroupTemplateDescription = Partial<Pick<HTMLEMenuItemGroupElement, 'id' | 'className' | 'name' | 'label'>> & {\r\n    isGroup: true,\r\n    items: HTMLEMenuItemTemplateDescription[],\r\n}\r\n\r\ninterface HTMLEMenuItemGroupTemplate {\r\n    (desc: HTMLEMenuItemGroupTemplateDescription): HTMLEMenuItemGroupElement;\r\n}\r\n\r\nconst HTMLEMenuItemGroupTemplate: HTMLEMenuItemGroupTemplate = (desc: HTMLEMenuItemGroupTemplateDescription) => {\r\n    \r\n    const items = desc.items.map((descArgs) => HTMLEMenuItemTemplate(descArgs));\r\n\r\n    return HTMLElementConstructor(\r\n        \"e-menuitemgroup\", {\r\n            props: {\r\n                id: desc.id,\r\n                className: desc.className,\r\n                name: desc.name\r\n            },\r\n            children: items\r\n        }\r\n    );\r\n}","\r\nimport { HTMLEMenuElement } from \"../../elements/containers/menus/Menu\";\r\nimport { HTMLElementConstructor } from \"../../elements/HTMLElement\";\r\nimport { HTMLEMenuItemGroupTemplate, HTMLEMenuItemGroupTemplateDescription } from \"./MenuItemGroupTemplate\";\r\nimport { HTMLEMenuItemTemplate, HTMLEMenuItemTemplateDescription } from \"./MenuItemTemplate\";\r\n\r\nexport { HTMLEMenuTemplateDescription };\r\nexport { HTMLEMenuTemplate };\r\n\r\ntype HTMLEMenuTemplateDescription = Partial<Pick<HTMLEMenuElement, 'id' | 'className' | 'name'>> & {\r\n    items: (HTMLEMenuItemTemplateDescription | HTMLEMenuItemGroupTemplateDescription)[],\r\n}\r\n\r\ninterface HTMLEMenuTemplate {\r\n    (desc: HTMLEMenuTemplateDescription): HTMLEMenuElement;\r\n}\r\n\r\nconst HTMLEMenuTemplate: HTMLEMenuTemplate = (desc: HTMLEMenuTemplateDescription) => {\r\n    \r\n    const items = desc.items.map((itemDesc) => {\r\n        if (\"isGroup\" in itemDesc) {\r\n            return HTMLEMenuItemGroupTemplate(itemDesc);\r\n        }\r\n        else {\r\n            return HTMLEMenuItemTemplate(itemDesc);\r\n        }\r\n    });\r\n\r\n    return HTMLElementConstructor(\r\n        \"e-menu\", {\r\n            props: {\r\n                id: desc.id,\r\n                className: desc.className,\r\n                name: desc.name,\r\n            },\r\n            children: items\r\n        }\r\n    );\r\n}","\r\nimport { HTMLEMenuItemElement } from \"../../elements/containers/menus/MenuItem\";\r\nimport { HTMLElementConstructor } from \"../../elements/HTMLElement\";\r\nimport { Key, KeyModifier, HotKey } from \"../../Input\";\r\nimport { HTMLEMenuTemplate, HTMLEMenuTemplateDescription } from \"./MenuTemplate\";\r\n\r\nexport { HTMLEMenuItemTemplateDescription };\r\nexport { HTMLEMenuItemTemplate };\r\n\r\ntype HTMLEMenuItemTemplateDescription = Pick<HTMLEMenuItemElement, 'name'> & Partial<Pick<HTMLEMenuItemElement, 'id' | 'className' | 'title' | 'type' | 'disabled'>> & {\r\n    label?: string;\r\n    command?: string;\r\n    commandArgs?: any;\r\n    hotkey?: {\r\n        key: Key;\r\n        mod1?: KeyModifier;\r\n        mod2?: KeyModifier;\r\n    },\r\n    value?: string,\r\n    checked?: boolean,\r\n    statekey?: string,\r\n    menu?: HTMLEMenuTemplateDescription;\r\n    disabled?: boolean;\r\n}\r\n\r\ninterface HTMLEMenuItemTemplate {\r\n    (args: HTMLEMenuItemTemplateDescription): HTMLEMenuItemElement;\r\n}\r\n\r\nconst HTMLEMenuItemTemplate: HTMLEMenuItemTemplate = (desc: HTMLEMenuItemTemplateDescription) => {\r\n    let slotted: (Node | string)[] = [];\r\n\r\n    if (desc.menu) {\r\n        let menu = HTMLEMenuTemplate(desc.menu);\r\n        menu.slot = \"menu\";\r\n        slotted.push(menu);\r\n    }\r\n\r\n    const menuItem = HTMLElementConstructor(\r\n        \"e-menuitem\", {\r\n            props: {\r\n                id: desc.id,\r\n                className: desc.className,\r\n                name: desc.name,\r\n                title: desc.title,\r\n                type: desc.type,\r\n                label: desc.label,\r\n                disabled: desc.disabled,\r\n                value: desc.value,\r\n                checked: desc.checked,\r\n                command: desc.command,\r\n                commandArgs: desc.commandArgs,\r\n                hotkey: desc.hotkey ? new HotKey(desc.hotkey.key, desc.hotkey.mod1, desc.hotkey.mod2) : void 0\r\n            },\r\n            children: [\r\n                ...slotted\r\n            ]\r\n        }\r\n    );\r\n\r\n    return menuItem;\r\n}","\r\nimport { HTMLEMenuBarElement } from \"../../elements/containers/menus/MenuBar\";\r\nimport { HTMLElementConstructor } from \"../../elements/HTMLElement\";\r\nimport { HTMLEMenuItemTemplateDescription, HTMLEMenuItemTemplate } from \"./MenuItemTemplate\";\r\n\r\n\r\nexport { HTMLEMenubarTemplateDescription };\r\nexport { HTMLEMenubarTemplate };\r\n\r\ntype HTMLEMenubarTemplateDescription = Partial<Pick<HTMLEMenuBarElement, 'id' | 'className' | 'tabIndex'>> & {\r\n    items: HTMLEMenuItemTemplateDescription[],\r\n}\r\n\r\ninterface HTMLEMenubarTemplate {\r\n    (desc: HTMLEMenubarTemplateDescription): HTMLEMenuBarElement;\r\n}\r\n\r\nconst HTMLEMenubarTemplate: HTMLEMenubarTemplate = (desc: HTMLEMenubarTemplateDescription) => {\r\n    \r\n    const items = desc.items.map((itemDesc) => {\r\n        return HTMLEMenuItemTemplate(itemDesc);\r\n    });\r\n\r\n    return HTMLElementConstructor(\r\n        \"e-menubar\", {\r\n            props: {\r\n                id: desc.id,\r\n                className: desc.className,\r\n                tabIndex: desc.tabIndex\r\n            },\r\n            children: items\r\n        }\r\n    );\r\n}","\r\nimport { Command, isUndoCommand } from \"./commands/Command\";\r\nimport { Event, EventDispatcher } from \"./events/EventDispatcher\";\r\nimport { isTagElement } from \"./elements/HTMLElement\";\r\nimport { HTMLEMenuBarElement } from \"./elements/containers/menus/MenuBar\";\r\nimport { HotKeyChangeEvent } from \"./elements/containers/menus/MenuItem\";\r\nimport { HTMLEStatusBarElement } from \"./elements/containers/status/StatusBar\";\r\nimport { getPropertyFromPath, setPropertyFromPath } from \"./elements/Snippets\";\r\nimport { HotKey } from \"./Input\";\r\nimport { HTMLEMenubarTemplate } from \"./templates/menus/MenubarTemplate\";\r\n\r\nexport { Editor };\r\nexport { EditorBase };\r\nexport { EditorCommand };\r\nexport { EditorHotKey };\r\n\r\ntype EditorEventsMap = {\r\n    \"e-context-change\": Event<\"e-context-change\">;\r\n}\r\n\r\ninterface Editor extends EventDispatcher<EditorEventsMap> {\r\n    //readonly resources: Resources;\r\n\r\n    getState(key: string): any;\r\n    setState(key: string, value: any): void;\r\n    \r\n    addStateListener(statekey: string, listener: (newValue: any) => void): number;\r\n    removeStateListener(statekey: string, listener: (newValue: any) => void): void;\r\n\r\n    addHotkeyExec(hotkey: EditorHotKey, exec: () => void): void;\r\n    removeHotkeyExec(hotkey: EditorHotKey, exec: () => void): void;\r\n\r\n    readonly statusbar: HTMLEStatusBarElement | null;\r\n    readonly menubar: HTMLEMenuBarElement | null;\r\n\r\n    registerCommand(name: string, command: EditorCommand): void;\r\n    executeCommand(name: string, args?: any, opts?: {undo?: boolean}): void;\r\n    \r\n    undoLastCommand(): void;\r\n    redoLastCommand(): void;\r\n\r\n    setContext(context: string): void;\r\n\r\n    setup(): Promise<void>;\r\n}\r\n\r\ninterface EditorCommand extends Command {\r\n    context: string;\r\n}\r\n\r\ninterface EditorCommandCall extends EditorCommand {\r\n    args: any;\r\n}\r\n\r\ninterface EditorHotKey extends HotKey {}\r\n\r\n/*\r\n\r\n\r\ncreateStatement(statementData)\r\ndeleteStatement(statement)\r\nfocusStatement(statement)\r\n\r\nexecuteRemoteStatement(statement);\r\n\r\ninvalidateStatement(statement, reason)\r\nvalidateStatement(statement, result)\r\n\r\nfetchStatements()\r\nfetchExpressions()\r\n\r\nstatments\r\nexpressions\r\n\r\n*/\r\n\r\n\r\nclass EditorBase<State extends object> extends EventDispatcher<EditorEventsMap> implements Editor {\r\n\r\n    private _commands: Map<string, EditorCommand>;\r\n    private _hotkeys: Map<EditorHotKey, (() => void)[]>;\r\n\r\n    private _undoCommandsCallStack: Array<EditorCommandCall>;\r\n    private _redoCommandsCallStack: Array<EditorCommandCall>;\r\n\r\n    private _context: string;\r\n\r\n    private _state: State;\r\n    private _stateListeners: Map<string, Array<(newValue: any) => void>>;\r\n\r\n    //readonly resources: Resources;\r\n\r\n    public menubar: HTMLEMenuBarElement | null;\r\n    public statusbar: HTMLEStatusBarElement | null;\r\n\r\n\r\n    /*readonly toolbar: HTMLElement;\r\n    readonly statusbar: HTMLElement;*/\r\n\r\n    /*public readonly state: HTMLFormElement;\r\n    */\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this._commands = new Map();\r\n        this._context = 'default';\r\n        this._hotkeys = new Map();\r\n        \r\n        this._undoCommandsCallStack = [];\r\n        this._redoCommandsCallStack = [];\r\n\r\n        this.menubar = null;\r\n        this.statusbar = null;\r\n\r\n        this._state = {} as State;\r\n        this._stateListeners = new Map();\r\n    }\r\n    \r\n    public get context(): string {\r\n        return this._context;\r\n    }\r\n\r\n    public setup(): Promise<any> {\r\n        const menubarContainer = document.getElementById(\"menubar-container\");\r\n        this.statusbar = document.body.querySelector(\"e-statusbar\");\r\n\r\n        document.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            Array.from(this._hotkeys.keys()).forEach((hotkey) => {\r\n                if (hotkey.test(event)) {\r\n                    let execs = this._hotkeys.get(hotkey);\r\n                    execs!.forEach((exec) => {\r\n                        exec();\r\n                    });\r\n                }\r\n            });\r\n        });\r\n\r\n        document.body.addEventListener(\"hotkeychange\", (event: HotKeyChangeEvent) => {\r\n            let target = event.target as any;\r\n            if (isTagElement(\"e-menuitem\", target)) {\r\n                if (event.detail.oldHotKey) {\r\n                    this.removeHotkeyExec(event.detail.oldHotKey, target.trigger.bind(target));\r\n                }\r\n                if (event.detail.newHotKey) {\r\n                    this.addHotkeyExec(event.detail.newHotKey, target.trigger.bind(target));\r\n                }\r\n            }\r\n        });\r\n\r\n        /*document.body.addEventListener(\"trigger\", (event: Event) => {\r\n            let target = event.target as any;\r\n            if (isTagElement(\"e-menuitem\", target)) {\r\n                if (target.command) {\r\n                    this.executeCommand(target.command, target.commandArgs)\r\n                }\r\n            }\r\n        });*/\r\n\r\n        return Promise.all([\r\n            new Promise<void>(\r\n                (resolve, reject) => {\r\n                    if (menubarContainer) {\r\n                        fetch(\"assets/editor/editor.json\").then((response) => {\r\n                            if (response.ok) {\r\n                                response.json().then((json) => {\r\n                                    const menubar = HTMLEMenubarTemplate(json);\r\n                                    this.menubar = menubar;\r\n                                    menubarContainer.append(menubar);\r\n                                    resolve();\r\n                                });\r\n                            }\r\n                            reject();\r\n                        });\r\n                    }\r\n                    else {\r\n                        reject();\r\n                    }\r\n                }\r\n            )\r\n        ]);\r\n    }\r\n\r\n    public setContext(context: string): void {\r\n        if (context !== this._context) {\r\n            //this.dispatchEvent(new CustomEvent(\"e-contextchange\"));\r\n            this._context = context;\r\n            /*if (this.menubar) {\r\n                this.menubar.findItems((item) => {\r\n                    return !!item.command && (item.command.context === this._context)\r\n                }).forEach((item) => {\r\n                    item.disabled = true;\r\n                });\r\n            }*/\r\n        }\r\n    }\r\n\r\n    public getState(key: string): any {\r\n        return getPropertyFromPath(this._state, key);\r\n    }\r\n\r\n    //TODO: Create a listeners object with the same structure as the state object\r\n    public setState(key: string, value: any): void {\r\n        setPropertyFromPath(this._state, key, value);\r\n        const listenedStates = Array.from(this._stateListeners.keys());\r\n        listenedStates.filter(\r\n            (state) => {\r\n                return (state.startsWith(key) && (state.charAt(key.length) === \".\" || state.charAt(key.length) === \"\")) ||\r\n                    (key.startsWith(state) && (key.charAt(state.length) === \".\" || key.charAt(state.length) === \"\"));\r\n            }\r\n        ).forEach((state) => {\r\n            let stateListeners = this._stateListeners.get(state);\r\n            if (stateListeners) {\r\n                let newStateValue = (state.length === key.length) ? value :\r\n                    (state.length >= key.length) ? getPropertyFromPath(value, state.substring(key.length + 1)) :\r\n                    getPropertyFromPath(this._state, state);\r\n                stateListeners.forEach((stateListener) => {\r\n                    stateListener(newStateValue);\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    public addStateListener(statekey: string, listener: (newValue: any) => void): number {\r\n        let stateListeners = this._stateListeners.get(statekey);\r\n        if (typeof stateListeners === \"undefined\") {\r\n            this._stateListeners.set(statekey, [listener]);\r\n            return 0;\r\n        }\r\n        else {\r\n            return stateListeners.push(listener) - 1;\r\n        }\r\n    }\r\n\r\n    public removeStateListener(statekey: string, listener: (newValue: any) => void): void {\r\n        let stateListeners = this._stateListeners.get(statekey);\r\n        if (typeof stateListeners !== \"undefined\") {\r\n            let index = stateListeners.indexOf(listener);\r\n            if (index >= 0) {\r\n                stateListeners.splice(index, 1);\r\n            }\r\n            if (stateListeners.length === 0) {\r\n                this._stateListeners.delete(statekey);\r\n            }\r\n        }\r\n    }\r\n\r\n    public registerCommand(name: string, command: EditorCommand) {\r\n        this._commands.set(name, command);\r\n    }\r\n\r\n    public executeCommand(name: string, args?: any, opts?: {undo?: boolean}): void {\r\n        const command = this._commands.get(name);\r\n        if (command && command.context === this._context) {\r\n\r\n            if (opts && opts.undo && isUndoCommand(command)) {\r\n                command.undo(args);\r\n                this._redoCommandsCallStack.push({...command, args: args});\r\n            }\r\n            else {\r\n                command.exec(args);\r\n                if (isUndoCommand(command)) {\r\n                    this._undoCommandsCallStack.push({...command, args: args});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public undoLastCommand(): void {\r\n        const lastCommand = this._undoCommandsCallStack.pop();\r\n        if (lastCommand) {\r\n            if (isUndoCommand(lastCommand) && lastCommand.context === this._context) {\r\n                lastCommand.undo();\r\n                this._redoCommandsCallStack.push(lastCommand);\r\n            }\r\n        }\r\n    }\r\n\r\n    public redoLastCommand(): void {\r\n        const lastCommand = this._redoCommandsCallStack.pop();\r\n        if (lastCommand) {\r\n            if (lastCommand.context === this._context) {\r\n                lastCommand.exec();\r\n                if (isUndoCommand(lastCommand)) {\r\n                    this._undoCommandsCallStack.push(lastCommand);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public addHotkeyExec(hotkey: EditorHotKey, exec: () => void): number {\r\n        let hotkeys = this._hotkeys.get(hotkey);\r\n        if (typeof hotkeys === \"undefined\") {\r\n            this._hotkeys.set(hotkey, [exec]);\r\n            return 0;\r\n        }\r\n        else {\r\n            return hotkeys.push(exec) - 1;\r\n        }\r\n    }\r\n\r\n    public removeHotkeyExec(hotkey: EditorHotKey, exec: () => void): void {\r\n        let hotkeys = this._hotkeys.get(hotkey);\r\n        if (typeof hotkeys !== \"undefined\") {\r\n            let index = hotkeys.indexOf(exec);\r\n            if (index >= 0) {\r\n                hotkeys.splice(index, 1);\r\n            }\r\n            if (hotkeys.length === 0) {\r\n                this._hotkeys.delete(hotkey);\r\n            }\r\n        }\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot, isTagElement } from \"../../HTMLElement\";\r\nimport { pointIntersectsWithDOMRect } from \"../../Snippets\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuElement };\r\nexport { HTMLEMenuElementBase };\r\n\r\ninterface HTMLEMenuElement extends HTMLElement {\r\n    name: string;\r\n    expanded: boolean;\r\n    overflowing: boolean;\r\n    parentItem: HTMLEMenuItemElement | null;\r\n    items: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement)[];\r\n    readonly activeIndex: number;\r\n    readonly activeItem: HTMLEMenuItemElement | HTMLEMenuItemGroupElement | null;\r\n    focusItemAt(index: number, childMenu?: boolean): void;\r\n    reset(): void;\r\n    findItem(predicate: (item: HTMLEMenuItemElement) => boolean, subitems?: boolean): HTMLEMenuItemElement | null;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-menu\",\r\n    observedAttributes: [\"expanded\"]\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"expanded\", type: \"boolean\"},\r\n    {name: \"overflowing\", type: \"boolean\"}\r\n])\r\nclass HTMLEMenuElementBase extends HTMLElement implements HTMLEMenuElement {\r\n\r\n    public name!: string;\r\n    public expanded!: boolean;\r\n    public overflowing!: boolean;\r\n\r\n    public parentItem: HTMLEMenuItemElement | null;\r\n    public items: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement)[];\r\n\r\n    private _activeIndex: number;\r\n    private _style: CSSStyleDeclaration | null;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: inline-block;\r\n                    user-select: none;\r\n\r\n                    padding: 6px 0;\r\n                    background-color: white;\r\n                    cursor: initial;\r\n                    width: max-content;\r\n\r\n                    -webkit-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                    -moz-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                    box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                }\r\n\r\n                [part~=\"container\"] {\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                }\r\n\r\n                ::slotted(hr) {\r\n                    margin: 6px 0;\r\n                }\r\n            </style>\r\n            <div part=\"container\">\r\n                <slot></slot>\r\n            </div>\r\n        `);\r\n\r\n        this.parentItem = null;\r\n        this.items = [];\r\n        this._activeIndex = -1;\r\n        this._style = null;\r\n    }\r\n\r\n    public get activeIndex(): number {\r\n        return this._activeIndex;\r\n    }\r\n\r\n    public get activeItem(): HTMLEMenuItemElement | HTMLEMenuItemGroupElement | null {\r\n        return this.items[this.activeIndex] || null;\r\n    }\r\n    \r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        this._style = window.getComputedStyle(this);\r\n        \r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const items = slot.assignedElements().filter(\r\n                    elem => isTagElement(\"e-menuitem\", elem) || isTagElement(\"e-menuitemgroup\", elem)\r\n                ) as (HTMLEMenuItemElement | HTMLEMenuItemGroupElement)[];\r\n                this.items = items;\r\n                items.forEach((item) => {\r\n                    item.parentMenu = this;\r\n                });\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            if (isTagElement(\"e-menuitem\", target)) {\r\n                let thisIncludesTarget = this.items.includes(target);\r\n                if (thisIncludesTarget) {\r\n                    target.trigger();\r\n                }\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"mouseover\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            let targetIndex = this.items.indexOf(target);\r\n            if (this === target) {\r\n                this.reset();\r\n                this.focus();\r\n            } \r\n            else if (targetIndex >= 0) {\r\n                if (isTagElement(\"e-menuitem\", target)) {\r\n                    this.focusItemAt(targetIndex, true);\r\n                }\r\n                else {\r\n                    this._activeIndex = targetIndex;\r\n                }\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"mouseout\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            let thisIntersectsWithMouse = pointIntersectsWithDOMRect(\r\n                event.clientX, event.clientY,\r\n                this.getBoundingClientRect()\r\n            );\r\n            if ((this === target || this.items.includes(target)) && !thisIntersectsWithMouse) {\r\n                this.reset();\r\n                this.focus();\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusin\", (event: FocusEvent) => {\r\n            let target = event.target as any;\r\n            this._activeIndex = this.items.findIndex(\r\n                (item) => item.contains(target)\r\n            );\r\n            this.expanded = true;\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            let newTarget = event.relatedTarget as any;\r\n            if (!this.contains(newTarget)) {  \r\n                this.reset();\r\n                this.expanded = false;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"ArrowUp\":\r\n                    this.focusItemAt((this.activeIndex <= 0) ? this.items.length - 1 : this.activeIndex - 1);\r\n                    if (isTagElement(\"e-menuitemgroup\", this.activeItem)) {\r\n                        this.activeItem.focusItemAt(this.activeItem.items.length - 1);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    this.focusItemAt((this.activeIndex >= this.items.length - 1) ? 0 : this.activeIndex + 1);\r\n                    if (isTagElement(\"e-menuitemgroup\", this.activeItem)) {\r\n                        this.activeItem.focusItemAt(0);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"Home\":\r\n                    this.focusItemAt(0);\r\n                    if (isTagElement(\"e-menuitemgroup\", this.activeItem)) {\r\n                        this.activeItem.focusItemAt(0);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"End\":\r\n                    this.focusItemAt(this.items.length - 1);\r\n                    if (isTagElement(\"e-menuitemgroup\", this.activeItem)) {\r\n                        this.activeItem.focusItemAt(this.activeItem.items.length - 1);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"Enter\":\r\n                    if (isTagElement(\"e-menuitem\", this.activeItem)) {\r\n                        this.activeItem.trigger();\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                case \"Escape\":\r\n                    if (this.parentItem) {\r\n                        let parentGroup = this.parentItem.group;\r\n                        let parentMenu = parentGroup ? parentGroup.parentMenu : this.parentItem.parentMenu;\r\n                        if (isTagElement(\"e-menu\", parentMenu)) {\r\n                            if (parentGroup) {\r\n                                parentGroup.focusItemAt(parentGroup.activeIndex);\r\n                            }\r\n                            else {\r\n                                parentMenu.focusItemAt(parentMenu.activeIndex);\r\n                            }\r\n                            this.reset();\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    else {\r\n                        document.body.focus();\r\n                    }\r\n                    break;\r\n                case \"ArrowLeft\":\r\n                    if (this.parentItem) {\r\n                        let parentGroup = this.parentItem.group;\r\n                        let parentMenu = parentGroup ? parentGroup.parentMenu : this.parentItem.parentMenu;\r\n                        if (isTagElement(\"e-menu\", parentMenu)) {\r\n                            if (parentGroup) {\r\n                                parentGroup.focusItemAt(parentGroup.activeIndex);\r\n                            }\r\n                            else {\r\n                                parentMenu.focusItemAt(parentMenu.activeIndex);\r\n                            }\r\n                            this.reset();\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"ArrowRight\":\r\n                    if (this.items.includes(event.target as any)) {\r\n                        if (isTagElement(\"e-menuitem\", this.activeItem) && this.activeItem.childMenu) {\r\n                            this.activeItem.childMenu.focusItemAt(0);\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (newValue !== oldValue) {\r\n            switch (name) {\r\n                case \"expanded\":\r\n                    if (newValue !== null) {\r\n                        let thisRect = this.getBoundingClientRect();\r\n                        let thisIsOverflowing = thisRect.right > document.body.clientWidth;\r\n                        if (thisIsOverflowing) {\r\n                            this.overflowing = true;\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.overflowing = false;\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public focusItemAt(index: number, childMenu?: boolean): void {\r\n        let item = this.items[index];\r\n        if (item) {\r\n            this._activeIndex = index;\r\n            item.focus();\r\n            if (isTagElement(\"e-menuitem\", item)) {\r\n                if (childMenu && item.childMenu) {\r\n                    item.childMenu.focus();\r\n                }\r\n            }\r\n            else {\r\n                item.focusItemAt(0);\r\n            } \r\n        }\r\n    }\r\n\r\n    public reset(): void {\r\n        let item = this.activeItem;\r\n        this._activeIndex = -1;\r\n        if (isTagElement(\"e-menuitem\", item) && item.childMenu) {\r\n            item.childMenu.reset();\r\n        }\r\n    }\r\n\r\n    public findItem(predicate: (item: HTMLEMenuItemElement) => boolean, subitems?: boolean): HTMLEMenuItemElement | null {\r\n        let foundItem: HTMLEMenuItemElement | HTMLEMenuItemGroupElement | null = null;\r\n        for (let idx = 0; idx < this.items.length; idx++) {\r\n            let item = this.items[idx];\r\n            if (isTagElement(\"e-menuitem\", item)) {\r\n                if (predicate(item)) {\r\n                    return item;\r\n                }\r\n                if (subitems && item.childMenu) {\r\n                    foundItem = item.childMenu.findItem(predicate, subitems);\r\n                    if (foundItem) {\r\n                        return foundItem;\r\n                    }\r\n                }\r\n            }\r\n            else if (isTagElement(\"e-menuitemgroup\", item)) {\r\n                foundItem = item.findItem(predicate, subitems);\r\n                if (foundItem) {\r\n                    return foundItem;\r\n                }\r\n            }\r\n        }\r\n        return foundItem;\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menu\": HTMLEMenuElement,\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot, isTagElement } from \"../../HTMLElement\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\n\r\n\r\nexport { HTMLEMenuBarElement };\r\nexport { HTMLEMenuBarElementBase };\r\n\r\ninterface HTMLEMenuBarElement extends HTMLElement {\r\n    name: string;\r\n    active: boolean;\r\n    items: HTMLEMenuItemElement[];\r\n    readonly activeIndex: number;\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    focusItemAt(index: number, childMenu?: boolean): void;\r\n    reset(): void;\r\n    findItem(predicate: (item: HTMLEMenuItemElement) => boolean, subtree?: boolean): HTMLEMenuItemElement | null;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-menubar\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"active\", type: \"boolean\"},\r\n])\r\nclass HTMLEMenuBarElementBase extends HTMLElement implements HTMLEMenuBarElement {\r\n\r\n    public name!: string;\r\n    public active!: boolean;\r\n    \r\n    public items: HTMLEMenuItemElement[];\r\n\r\n    private _activeIndex: number;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    position: relative;\r\n                    display: block;\r\n                    user-select: none;\r\n                }\r\n\r\n                :host(:not(:focus-within)) ::slotted(:hover) {\r\n                    color: black;\r\n                    background-color: gainsboro;\r\n                }\r\n\r\n                [part~=\"container\"] {\r\n                    display: flex;\r\n                    flex-direction: row;\r\n                }\r\n            </style>\r\n            <div part=\"container\">\r\n                <slot></slot>\r\n            </div>\r\n        `);\r\n\r\n        this.items = [];\r\n        this._activeIndex = -1;\r\n    }\r\n\r\n    public get activeIndex(): number {\r\n        return this._activeIndex;\r\n    }\r\n\r\n    public get activeItem(): HTMLEMenuItemElement | null {\r\n        return this.items[this.activeIndex] || null;\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n        \r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const items = slot.assignedElements()\r\n                    .filter(item => isTagElement(\"e-menuitem\", item)) as HTMLEMenuItemElement[];\r\n                this.items = items;\r\n                items.forEach((item) => {\r\n                    item.parentMenu = this;\r\n                });\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"mouseover\", (event) => {\r\n            let targetIndex = this.items.indexOf(event.target as any);\r\n            if (targetIndex >= 0) {\r\n                if (this.contains(document.activeElement)) {\r\n                    if (this.active) {\r\n                        this.focusItemAt(targetIndex, true);\r\n                    }\r\n                    else {\r\n                        this._activeIndex = targetIndex;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"keydown\", (event) => {\r\n            switch (event.key) {\r\n                case \"ArrowLeft\":\r\n                    this.focusItemAt((this.activeIndex <= 0) ? this.items.length - 1 : this.activeIndex - 1);\r\n                    if (this.active && this.activeItem?.childMenu) {\r\n                        this.activeItem.childMenu.focusItemAt(0);\r\n                    }\r\n                    break;\r\n                case \"ArrowRight\":\r\n                    this.focusItemAt((this.activeIndex >= this.items.length - 1) ? 0 : this.activeIndex + 1);\r\n                    if (this.active && this.activeItem?.childMenu) {\r\n                        this.activeItem.childMenu.focusItemAt(0);\r\n                    }\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    this.focusItemAt(this.activeIndex);\r\n                    if (this.active && this.activeItem?.childMenu) {\r\n                        this.activeItem.childMenu.focusItemAt(0);\r\n                    }\r\n                    break;\r\n                case \"Enter\":\r\n                    this.active = true;\r\n                    if (this.activeItem) {\r\n                        this.activeItem.trigger();\r\n                    }\r\n                    break;\r\n                case \"Escape\":\r\n                    this.focusItemAt(this.activeIndex);\r\n                    this.active = false;\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"mousedown\", (event) => {\r\n            let targetIndex = this.items.indexOf(event.target as any);\r\n            if (targetIndex >= 0) {\r\n                if (!this.contains(document.activeElement)) {\r\n                    this.active = true;\r\n                    this.focusItemAt(targetIndex, true);\r\n                }\r\n                else {\r\n                    this.active = false;\r\n                    document.body.focus();\r\n                }\r\n                event.preventDefault();\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focus\", () => {\r\n            this._activeIndex = 0;\r\n        });\r\n    }\r\n\r\n    public focusItemAt(index: number, childMenu?: boolean): void {\r\n        let item = this.items[index];\r\n        if (item) {\r\n            this._activeIndex = index;\r\n            item.focus();\r\n            if (childMenu && item.childMenu) {\r\n                item.childMenu.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    public reset(): void {\r\n        let item = this.activeItem;\r\n        this._activeIndex = -1;\r\n        if (item?.childMenu) {\r\n            item.childMenu.reset();\r\n        }\r\n    }\r\n\r\n    public findItem(predicate: (item: HTMLEMenuItemElement) => boolean, subtree?: boolean): HTMLEMenuItemElement | null {\r\n        let foundItem: HTMLEMenuItemElement | null = null;\r\n        for (let idx = 0; idx < this.items.length; idx++) {\r\n            let item = this.items[idx];\r\n            if (predicate(item)) {\r\n                return item;\r\n            }\r\n            if (subtree && item.childMenu) {\r\n                foundItem = item.childMenu.findItem(predicate, subtree);\r\n                if (foundItem) {\r\n                    return foundItem;\r\n                }\r\n            }\r\n        }\r\n        return foundItem;\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menubar\": HTMLEMenuBarElement,\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot, isTagElement } from \"../../HTMLElement\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\n\r\nexport { HTMLEMenuButtonElement };\r\nexport { HTMLEMenuButtonElementBase };\r\n\r\ninterface HTMLEMenuButtonElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n    disabled: boolean;\r\n    active: boolean;\r\n    childMenu: HTMLEMenuElement | null;\r\n    trigger(): void\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-menubutton\",\r\n    observedAttributes: [\"icon\", \"label\", \"checked\"]\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"active\", type: \"boolean\"},\r\n    {name: \"label\", type: \"string\"},\r\n    {name: \"disabled\", type: \"boolean\"},\r\n])\r\nclass HTMLEMenuButtonElementBase extends HTMLElement implements HTMLEMenuButtonElement {\r\n\r\n    public name!: string;\r\n    public label!: string;\r\n    public disabled!: boolean;\r\n    public active!: boolean;\r\n\r\n    public childMenu: HTMLEMenuElement | null;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    position: relative;\r\n                    display: inline-block;\r\n\r\n                    user-select: none;\r\n                    white-space: nowrap;\r\n                    cursor: pointer;\r\n                    padding: 2px;\r\n                }\r\n\r\n                :host(:hover) {\r\n                    background-color: gainsboro;\r\n                }\r\n\r\n                :host(:focus-within:not(:focus)) {\r\n                    background-color: gainsboro;\r\n                }\r\n\r\n                :host([disabled]) {\r\n                    color: lightgray;\r\n                }\r\n\r\n                ::slotted([slot=\"menu\"]) {\r\n                    z-index: 1;\r\n                    position: absolute;\r\n                    color: initial;\r\n                }\r\n\r\n                ::slotted([slot=\"menu\"]) {\r\n                    top: 100%;\r\n                    left: 0;\r\n                }\r\n                \r\n                ::slotted([slot=\"menu\"][overflowing]) {\r\n                    right: 0;\r\n                    left: auto;\r\n                }\r\n\r\n                ::slotted([slot=\"menu\"]:not([expanded])) {\r\n                    opacity: 0;\r\n                    pointer-events: none !important;\r\n                }\r\n\r\n                [part~=\"toggle_arrow\"] {\r\n                    position: relative;\r\n                    display: inline-block;\r\n                    flex: auto;\r\n                    width: 18px;\r\n                    height: 18px;\r\n                }\r\n\r\n                [part~=\"toggle_arrow\"]::after {\r\n                    display: inline-block;\r\n                    text-align: center;\r\n                    width: 18px;\r\n                    position: absolute;\r\n                    content: \"▼\";\r\n                    color: dimgray;\r\n                }\r\n            </style>\r\n            <span part=\"toggle_arrow\"></span>\r\n            <slot name=\"menu\"></slot>\r\n        `);\r\n        \r\n        this.childMenu = null;\r\n    }\r\n\r\n    public connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const menuSlot = this.shadowRoot?.querySelector<HTMLSlotElement>(\"slot[name=menu]\");\r\n        if (menuSlot) {\r\n            menuSlot.addEventListener(\"slotchange\", () => {\r\n                const menuElem = menuSlot.assignedElements()[0];\r\n                if (isTagElement(\"e-menu\", menuElem)) {\r\n                    this.childMenu = menuElem;\r\n                }\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Enter\":\r\n                    if (!this.active) {\r\n                        this.active = true;\r\n                        if (this.childMenu) {\r\n                            this.childMenu.focusItemAt(0);\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"Escape\":\r\n                    this.focus();\r\n                    this.active = false;\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"click\", (event: MouseEvent) => {\r\n            let target = event.target as Element;\r\n            if (this.childMenu && !this.childMenu.contains(target)) {\r\n                this.toggle();\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"blur\", (event: FocusEvent) => {\r\n            let containsNewFocus = (event.relatedTarget !== null) && this.contains(event.relatedTarget as Node);\r\n            if (!containsNewFocus) {\r\n                this.active = false;\r\n            }\r\n        }, {capture: true});\r\n    }\r\n\r\n    public toggle(): void {\r\n        if (!this.active) {\r\n            this.active = true;\r\n            if (this.childMenu) {\r\n                this.childMenu.focusItemAt(0);\r\n            }\r\n        }\r\n        else {\r\n            this.active = false;\r\n        }\r\n    }\r\n\r\n    public trigger(): void {\r\n        alert();\r\n        if (!this.disabled) {\r\n            this.dispatchEvent(new CustomEvent(\"trigger\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (newValue !== oldValue) {\r\n            switch (name) {\r\n                case \"label\":\r\n                    if (oldValue !== newValue) {\r\n                        const labelPart = this.shadowRoot?.querySelector(\"[part~=label]\");\r\n                        if (labelPart) {\r\n                            labelPart.textContent = newValue;\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}","import { HotKey } from \"../../../Input\";\r\nimport { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot, isTagElement } from \"../../HTMLElement\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\nimport { HTMLEMenuBarElement } from \"./MenuBar\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\n\r\nexport { EMenuItemElementType };\r\nexport { HTMLEMenuItemElement };\r\nexport { HTMLEMenuItemElementBase };\r\nexport { HotKeyChangeEvent };\r\n\r\ntype EMenuItemElementType = \"button\" | \"radio\" | \"checkbox\" | \"menu\" | \"submenu\";\r\n\r\ninterface HTMLEMenuItemElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n    type: EMenuItemElementType;\r\n    disabled: boolean;\r\n    checked: boolean;\r\n    value: string;\r\n\r\n    group: HTMLEMenuItemGroupElement | null;\r\n    parentMenu: HTMLEMenuElement | HTMLEMenuBarElement | null;\r\n    childMenu: HTMLEMenuElement | null;\r\n\r\n    hotkey: HotKey | null;\r\n    command: string | null;\r\n    commandArgs: any;\r\n\r\n    trigger(): void;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-menuitem\",\r\n    observedAttributes: [\"label\", \"checked\", \"type\"]\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"label\", type: \"string\"},\r\n    {name: \"type\", type: \"string\"},\r\n    {name: \"disabled\", type: \"boolean\"},\r\n    {name: \"checked\", type: \"boolean\"},\r\n])\r\nclass HTMLEMenuItemElementBase extends HTMLElement implements HTMLEMenuItemElement {\r\n\r\n    public name!: string;\r\n    public label!: string;\r\n    public type!: EMenuItemElementType;\r\n    public disabled!: boolean;\r\n    public checked!: boolean;\r\n    public value!: string;\r\n\r\n    public group: HTMLEMenuItemGroupElement | null;\r\n    public parentMenu: HTMLEMenuElement | HTMLEMenuBarElement | null;\r\n    public childMenu: HTMLEMenuElement | null;\r\n\r\n    public command: string | null;\r\n    public commandArgs: any;\r\n\r\n    private _hotkey: HotKey | null;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: inline-block;\r\n\r\n                    user-select: none;\r\n                    white-space: nowrap;\r\n\r\n                    padding: 2px 6px;\r\n                    cursor: pointer;\r\n                }\r\n\r\n                :host([type=\"menu\"]),\r\n                :host([type=\"submenu\"]) {\r\n                    position: relative;\r\n                }\r\n\r\n                :host(:not([type=\"menu\"])) {\r\n                    padding-left: 12px;\r\n                    padding-right: 12px;\r\n                }\r\n\r\n                :host(:focus-within) {\r\n                    color: black;\r\n                    background-color: lightgray;\r\n                }\r\n\r\n                :host([disabled]) {\r\n                    color: dimgray;\r\n                }\r\n\r\n                :host([type=\"submenu\"]) ::slotted([slot=\"menu\"]),\r\n                :host([type=\"menu\"]) ::slotted([slot=\"menu\"]) {\r\n                    z-index: 1;\r\n                    position: absolute;\r\n                    color: initial;\r\n                }\r\n\r\n                :host([type=\"menu\"]) ::slotted([slot=\"menu\"]) {\r\n                    top: 100%;\r\n                    left: 0;\r\n                }\r\n                \r\n                :host([type=\"submenu\"]) ::slotted([slot=\"menu\"]) {\r\n                    left: 100%;\r\n                    top: -6px;\r\n                }\r\n                \r\n                :host([type=\"submenu\"]) ::slotted([slot=\"menu\"][overflowing]) {\r\n                    right: 100%;\r\n                    left: auto;\r\n                }\r\n                \r\n                :host([type=\"menu\"]) ::slotted([slot=\"menu\"][overflowing]) {\r\n                    right: 0;\r\n                    left: auto;\r\n                }\r\n\r\n                :host([type=\"menu\"]) ::slotted([slot=\"menu\"]:not([expanded])),\r\n                :host([type=\"submenu\"]) ::slotted([slot=\"menu\"]:not([expanded])) {\r\n                    opacity: 0;\r\n                    pointer-events: none !important;\r\n                }\r\n\r\n                [part~=\"content\"] {\r\n                    flex: auto;\r\n                    display: flex;\r\n                    overflow: hidden;\r\n                    pointer-events: none;\r\n                }\r\n\r\n                [part~=\"input\"] {\r\n                    display: inline-block;\r\n                    flex: none;\r\n                    width: 16px;\r\n                    height: 16px;\r\n                    margin: 2px;\r\n                }\r\n\r\n                [part~=\"label\"] {\r\n                    flex: auto;\r\n                    text-align: left;\r\n                }\r\n\r\n                [part~=\"hotkey\"] {\r\n                    flex: none;\r\n                    text-align: right;\r\n                    margin-left: 16px;\r\n                }\r\n\r\n                [part~=\"hotkey\"]:empty {\r\n                    display: none !important;\r\n                }\r\n\r\n                [part~=\"arrow\"] {\r\n                    display: inline-block;\r\n                    flex: none;\r\n                    margin: auto;\r\n                    color: inherit;\r\n                    text-align: center;\r\n                    font-weight: bold;\r\n                    width: 18px;\r\n                    height: 18px;\r\n                }\r\n\r\n                [part~=\"arrow\"]::after {\r\n                    display: inline-block;\r\n                    text-align: center;\r\n                    width: 18px;\r\n                    height: 18px;\r\n                    position: absolute;\r\n                    content: \"►\";\r\n                    color: dimgray;\r\n                }\r\n\r\n                :host([type=\"menu\"]) [part~=\"arrow\"],\r\n                :host([type=\"menu\"]) [part~=\"input\"] {\r\n                    display: none;\r\n                }\r\n\r\n                :host(:not([type=\"menu\"])) [part~=\"label\"] {\r\n                    padding-left: 10px;\r\n                    padding-right: 12px;\r\n                }\r\n                \r\n                :host(:not([type=\"checkbox\"]):not([type=\"radio\"])) [part~=\"input\"] {\r\n                    visibility: hidden;\r\n                    pointer-events: none;\r\n                }\r\n                \r\n                :host(:not([type=\"submenu\"])) [part~=\"arrow\"] {\r\n                    visibility: hidden;\r\n                    pointer-events: none;\r\n                }\r\n            </style>\r\n            <span part=\"content\">\r\n                <input part=\"input\" type=\"button\" tabindex=\"-1\"></input>\r\n                <span part=\"label\"></span>\r\n                <span part=\"hotkey\"></span>\r\n                <span part=\"arrow\"></span>\r\n            </span>\r\n            <slot name=\"menu\"></slot>\r\n        `);\r\n        this.childMenu = null;\r\n        this.parentMenu = null;\r\n        this.group = null;\r\n        this.command = null;\r\n        this._hotkey = null;\r\n    }\r\n\r\n    public get hotkey(): HotKey | null {\r\n        return this._hotkey;\r\n    }\r\n\r\n    public set hotkey(hotkey: HotKey | null) {\r\n        this.dispatchEvent(\r\n            new CustomEvent(\"e-hotkeychange\", {\r\n                bubbles: true,\r\n                detail: {\r\n                    oldHotKey: this._hotkey,\r\n                    newHotKey: hotkey\r\n                }\r\n            })\r\n        );\r\n\r\n        this._hotkey = hotkey;\r\n\r\n        let hotkeyPart = this.shadowRoot?.querySelector(\"[part~=hotkey]\");\r\n        if (hotkeyPart) {\r\n            hotkeyPart.textContent = hotkey ? hotkey.toString() : \"\";\r\n        }\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        this.setAttribute(\"aria-label\", this.label);\r\n\r\n        const menuSlot = this.shadowRoot?.querySelector<HTMLSlotElement>(\"slot[name=menu]\");\r\n        if (menuSlot) {\r\n            menuSlot.addEventListener(\"slotchange\", () => {\r\n                const menuElem = menuSlot.assignedElements()[0];\r\n                if (isTagElement(\"e-menu\", menuElem)) {\r\n                    this.childMenu = menuElem;\r\n                    menuElem.parentItem = this;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (newValue !== oldValue) {\r\n            switch (name) {\r\n                case \"label\":\r\n                    if (oldValue !== newValue) {\r\n                        const labelPart = this.shadowRoot?.querySelector(\"[part~=label]\");\r\n                        if (labelPart) {\r\n                            labelPart.textContent = newValue;\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"checked\":\r\n                    if (oldValue !== newValue) {\r\n                        const inputPart = this.shadowRoot?.querySelector<HTMLInputElement>(\"[part~=input]\");\r\n                        if (inputPart) {\r\n                            inputPart.checked = (newValue !== null);\r\n                            this.dispatchEvent(new CustomEvent(\"e-change\", {bubbles: true}));\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"type\":\r\n                    if (oldValue !== newValue) {\r\n                        const inputPart = this.shadowRoot?.querySelector<HTMLInputElement>(\"[part~=input]\");\r\n                        if (inputPart) {\r\n                            switch (this.type) {\r\n                                case \"radio\":\r\n                                    inputPart.type = \"radio\";\r\n                                    break;\r\n                                case \"menu\":\r\n                                    inputPart.type = \"hidden\";\r\n                                    break;\r\n                                default:\r\n                                    inputPart.type = \"checkbox\";\r\n                                    break;\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public trigger(): void {\r\n        if (!this.disabled) {\r\n            switch (this.type) {\r\n                case \"checkbox\":\r\n                    this.checked = !this.checked;\r\n                    break;\r\n                case \"radio\":\r\n                    this.dispatchEvent(new CustomEvent(\"radiochangerequest\", {bubbles: true}));\r\n                    break;\r\n                case \"menu\":\r\n                    if (this.childMenu) {\r\n                        this.childMenu.focusItemAt(0);\r\n                    }\r\n                    break;\r\n            }\r\n            this.dispatchEvent(new CustomEvent(\"trigger\", {bubbles: true}));\r\n        }\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitem\": HTMLEMenuItemElement,\r\n    }\r\n}\r\n\r\ntype HotKeyChangeEvent = CustomEvent<{\r\n    oldHotKey: HotKey | null;\r\n    newHotKey: HotKey | null;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"hotkeychange\": HotKeyChangeEvent,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"trigger\": Event,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"radiochangerequest\": Event,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"change\": Event,\r\n    }\r\n}","\r\nimport { pointIntersectsWithDOMRect } from \"../../Snippets\";\r\nimport { bindShadowRoot, GenerateAttributeAccessors, isTagElement, RegisterCustomHTMLElement } from \"../../HTMLElement\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuItemGroupElement };\r\nexport { HTMLEMenuItemGroupElementBase };\r\n\r\ninterface HTMLEMenuItemGroupElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n    type: \"list\" | \"grid\";\r\n    rows: number;\r\n    cells: number;\r\n\r\n    parentMenu: HTMLEMenuElement | null;\r\n    items: HTMLEMenuItemElement[];\r\n\r\n    readonly activeIndex: number;\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    \r\n    focusItemAt(index: number, childMenu?: boolean): void;\r\n    reset(): void;\r\n    findItem(predicate: (item: HTMLEMenuItemElement) => boolean, subitems?: boolean): HTMLEMenuItemElement | null;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-menuitemgroup\",\r\n    observedAttributes: [\"label\"]\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"label\", type: \"string\"},\r\n    {name: \"type\", type: \"string\"},\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"rows\", type: \"number\"},\r\n    {name: \"cells\", type: \"number\"},\r\n])\r\nclass HTMLEMenuItemGroupElementBase extends HTMLElement implements HTMLEMenuItemGroupElement {\r\n    public name!: string;\r\n    public label!: string;\r\n    public type!: \"list\" | \"grid\";\r\n    public rows!: number;\r\n    public cells!: number;\r\n    \r\n    public parentMenu: HTMLEMenuElement | null;\r\n    public items: HTMLEMenuItemElement[];\r\n\r\n    private _activeIndex: number;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: inline-block;\r\n                    user-select: none;\r\n                }\r\n                \r\n                :host(:not([label])) [part~=\"label\"] {\r\n                    display: none;\r\n                }\r\n\r\n                [part~=\"label\"] {\r\n                    white-space: nowrap;\r\n                    padding: 2px 6px 6px 6px;\r\n                    font-weight: bold;\r\n                }\r\n\r\n                [part~=\"container\"] {\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                }\r\n\r\n                [part~=\"separator\"] {\r\n                    margin: 6px 0;\r\n                }\r\n\r\n                :host(:first-child) [part~=\"separator\"] {\r\n                    display: none;\r\n                }\r\n            </style>\r\n            <hr part=\"separator\"/>\r\n            <span part=\"label\"></span>\r\n            <div part=\"container\">\r\n                <slot></slot> \r\n            </div>\r\n        `);\r\n\r\n        this._activeIndex = -1;\r\n        this.parentMenu = null;\r\n        this.items = [];\r\n    }\r\n\r\n    public get activeIndex(): number {\r\n        return this._activeIndex;\r\n    }\r\n\r\n    public get activeItem(): HTMLEMenuItemElement | null {\r\n        return this.items[this.activeIndex] || null;\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const items = slot.assignedElements()\r\n                    .filter(item => isTagElement(\"e-menuitem\", item)) as HTMLEMenuItemElement[];\r\n                this.items = items;\r\n                items.forEach((item) => {\r\n                    item.group = this;\r\n                });\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            if (this.items.includes(target)) {\r\n                target.trigger();\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"mouseover\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            let targetIndex = this.items.indexOf(target);\r\n            if (this === target) {\r\n                this.reset();\r\n                this.focus();\r\n            }\r\n            else if (targetIndex >= 0) {\r\n                this.focusItemAt(this.items.indexOf(target), true);\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"mouseout\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            let thisIntersectsWithMouse = pointIntersectsWithDOMRect(\r\n                event.clientX, event.clientY,\r\n                this.getBoundingClientRect()\r\n            );\r\n            if ((this === target || this.items.includes(target)) && !thisIntersectsWithMouse) {\r\n                this.reset();\r\n                this.focus();\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusin\", (event: FocusEvent) => {\r\n            let target = event.target as any;\r\n            this._activeIndex = this.items.findIndex(\r\n                (item) => item.contains(target)\r\n            );\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            let newTarget = event.relatedTarget as any;\r\n            if (!this.contains(newTarget)) {  \r\n                this.reset();\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"radiochangerequest\", (event: Event) => {\r\n            let target = event.target as any;\r\n            if (isTagElement(\"e-menuitem\", target)) {\r\n                let item = target;\r\n                if (item.type === \"radio\" && !item.checked) {\r\n                    let checkedRadio = this.findItem(\r\n                        (item: HTMLEMenuItemElement) => {\r\n                            return item.type === \"radio\" && item.checked\r\n                        }\r\n                    );\r\n                    if (checkedRadio) {\r\n                        checkedRadio.checked = false;\r\n                    }\r\n                    item.checked = true;\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"ArrowUp\":\r\n                    if (this.activeIndex > 0) {\r\n                        this.focusItemAt(this.activeIndex - 1);\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    if (this.activeIndex < this.items.length - 1) {\r\n                        this.focusItemAt(this.activeIndex + 1);\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                case \"Enter\":\r\n                    if (this.activeItem) {\r\n                        this.activeItem.trigger();\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                case \"ArrowRight\":\r\n                    if (this.items.includes(event.target as any)) {\r\n                        if (this.activeItem?.childMenu) {\r\n                            this.activeItem.childMenu.focusItemAt(0);\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"Home\":\r\n                    this.focusItemAt(0);\r\n                    break;\r\n                case \"End\":\r\n                    this.focusItemAt(this.items.length - 1);\r\n                    break;\r\n                case \"Escape\":\r\n                    this.reset();\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (oldValue !== newValue) {\r\n            switch (name) {\r\n            case \"label\":\r\n                if (oldValue !== newValue) {\r\n                    const label = this.shadowRoot?.querySelector(\"[part~=label]\");\r\n                    if (label) {\r\n                        label.textContent = newValue;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public focusItemAt(index: number, childMenu?: boolean): void {\r\n        let item = this.items[index];\r\n        if (item) {\r\n            this._activeIndex = index;\r\n            item.focus();\r\n            if (childMenu && item.childMenu) {\r\n                item.childMenu.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    public reset(): void {\r\n        let item = this.activeItem;\r\n        this._activeIndex = -1;\r\n        if (item?.childMenu) {\r\n            item.childMenu.reset();\r\n        }\r\n    }\r\n\r\n    public findItem(predicate: (item: HTMLEMenuItemElement) => boolean, subitems?: boolean): HTMLEMenuItemElement | null {\r\n        let foundItem: HTMLEMenuItemElement | null = null;\r\n        for (let idx = 0; idx < this.items.length; idx++) {\r\n            let item = this.items[idx];\r\n            if (predicate(item)) {\r\n                return item;\r\n            }\r\n            if (subitems && item.childMenu) {\r\n                foundItem = item.childMenu.findItem(predicate, subitems);\r\n                if (foundItem) {\r\n                    return foundItem;\r\n                }\r\n            }\r\n        }\r\n        return foundItem;\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitemgroup\": HTMLEMenuItemGroupElement,\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../../HTMLElement\";\r\n\r\nexport { PanelElement };\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: 'e-panel',\r\n    observedAttributes: ['state']\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: 'label', type: 'string'},\r\n    {name: 'state', type: 'string'},\r\n])\r\nclass PanelElement extends HTMLElement {\r\n\r\n    public label!: string;\r\n    public state!: 'opened' | 'closed';\r\n\r\n    constructor() {\r\n        super();\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n                }\r\n\r\n                :host([state='closed']) #label,\r\n                :host([state='closed']) #content {\r\n                    display: none;\r\n                }\r\n\r\n                :host([state='closed']) #header {\r\n                    padding: 0;\r\n                }\r\n\r\n                :host([state='closed']) #arrow {\r\n                    display: inherit;\r\n                }\r\n                \r\n                :host([state='opened']) #label,\r\n                :host([state='opened']) #content {\r\n                    display: inherit;\r\n                }\r\n\r\n                :host([state='opened']) #arrow {\r\n                    display: none;\r\n                }\r\n\r\n                #content {\r\n                    padding: var(--content-padding, inherit);\r\n                }\r\n\r\n                #header {\r\n                    color: var(--header-color, inherit);\r\n                    text-align: center;\r\n                    padding-top: 0;\r\n\r\n                    user-select: none;\r\n                }\r\n\r\n                #header:hover {\r\n                    --color: var(--header-hover-color, var(--header-color));\r\n                    color: var(--header-hover-color, var(--header-color));\r\n                    font-weight: var(--header-hover-font-weight);\r\n                }\r\n            </style>\r\n            <div>\r\n                <div id=\"header\">\r\n                    <span id=\"arrow\"></span>\r\n                    <span id=\"label\"></span>\r\n                </div>\r\n                <div id=\"content\">\r\n                    <slot></slot>\r\n                </div>\r\n            </div>\r\n        `);\r\n \r\n        const header = this.shadowRoot!.getElementById('header')!;\r\n\r\n        header.addEventListener(\r\n            'click', () => {\r\n                this.state = (this.state === 'opened') ? 'closed' : 'opened';\r\n            }\r\n        );\r\n    }\r\n    \r\n    public async render() {\r\n        const label = this.shadowRoot!.getElementById('label')!;\r\n        const arrow = this.shadowRoot!.getElementById('arrow')!;\r\n        \r\n        let rect = this.getBoundingClientRect();\r\n        const arr = (rect.left < window.innerWidth / 2) ? '>' : '<';\r\n        arrow.innerHTML = arr;\r\n        label.innerHTML = this.label || '';\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.label = this.label || 'label';\r\n        this.state = this.state || 'opened';\r\n\r\n        this.render();\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../../HTMLElement\";\r\n\r\nexport { PanelGroupElement };\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: 'e-panel-group'\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: 'label', type: 'string'},\r\n    {name: 'state', type: 'string'},\r\n])\r\nclass PanelGroupElement extends HTMLElement {\r\n\r\n    public label!: string;\r\n    public state!: 'opened' | 'closed';\r\n\r\n    public static readonly observedAttributes = ['state'];\r\n    \r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <link rel=\"stylesheet\" href=\"css/theme.css\"/>\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n                }\r\n\r\n                :host([state='closed']) #content {\r\n                    display: none;\r\n                }\r\n\r\n                :host([state='closed']) #less {\r\n                    display: none;\r\n                }\r\n\r\n                :host([state='opened']) #more {\r\n                    display: none;\r\n                }\r\n\r\n                #toggler {\r\n                    display: flex;\r\n                }\r\n\r\n                #toggler:hover {\r\n                    font-weight: 500;\r\n                    color: var(--label-on-hover-color);\r\n                }\r\n\r\n                #label {\r\n                    flex: 1;\r\n                }\r\n            </style>\r\n            <div>\r\n                <div id=\"toggler\">\r\n                    <span id=\"arrow\"><!--<icon #less><icon #more>--></span>\r\n                    <span id=\"label\"></span>\r\n                </div>\r\n                <div id=\"content\">\r\n                    <slot></slot>\r\n                </div>\r\n            </div>\r\n        `);\r\n\r\n        \r\n        this.state = this.state || 'closed';\r\n    }\r\n\r\n    public connectedCallback() {\r\n        const toggler = this.shadowRoot!.querySelector<HTMLElement>('#toggler')!;\r\n        const arrow = this.shadowRoot!.querySelector<HTMLElement>('#arrow')!;\r\n        const label = this.shadowRoot!.querySelector<HTMLElement>('#label')!;\r\n\r\n        toggler.addEventListener(\r\n            'click', () => {\r\n                if (this.state === 'opened') {\r\n                    this.state = 'closed';\r\n                }\r\n                else if (this.state === 'closed') {\r\n                    this.state = 'opened';\r\n                }\r\n            }\r\n        );\r\n\r\n        label.innerHTML = this.label!;\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot, isTagElement } from \"../../HTMLElement\";\r\nimport { HTMLEStatusItemElement } from \"./StatusItem\";\r\n\r\nexport { HTMLEStatusBarElement };\r\nexport { HTMLEStatusBarElementBase };\r\n\r\ninterface HTMLEStatusBarElement  extends HTMLElement {\r\n    items: HTMLEStatusItemElement[];\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-statusbar\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"active\", type: \"boolean\"},\r\n])\r\nclass HTMLEStatusBarElementBase extends HTMLElement implements HTMLEStatusBarElement {\r\n\r\n    public name!: string;\r\n    public active!: boolean;\r\n    \r\n    public items: HTMLEStatusItemElement[];\r\n\r\n    public _selectedItemIndex: number;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: flex;\r\n                    position: relative; \r\n                    user-select: none;\r\n\r\n                    background-color: white;\r\n                }\r\n\r\n                :host(:focus) {\r\n                    outline: 1px solid -webkit-focus-ring-color;\r\n                }\r\n\r\n                :host(:focus) ::slotted(:first-child),\r\n                :host(:not(:focus-within)) ::slotted(:hover) {\r\n                    color: black;\r\n                    background-color: gainsboro;\r\n                }\r\n\r\n                [part~=\"ul\"] {\r\n                    display: block;\r\n                    list-style-type: none;\r\n                    padding: 0; margin: 0;\r\n                }\r\n            </style>\r\n            <ul part=\"ul\">\r\n                <slot></slot>\r\n            </ul>\r\n        `);\r\n\r\n        this.items = [];\r\n        this._selectedItemIndex = -1;\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n        \r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", (event: Event) => {\r\n                const items = (event.target as HTMLSlotElement).assignedElements()\r\n                    .filter(item => isTagElement(\"e-statusitem\", item)) as HTMLEStatusItemElement[];\r\n                this.items = items;\r\n            }, {once: true});\r\n        }\r\n    }\r\n\r\n    public get selectedItemIndex(): number {\r\n        return this._selectedItemIndex;\r\n    }\r\n\r\n    public get selectedItem(): HTMLEStatusItemElement | null {\r\n        return this.items[this.selectedItemIndex] || null;\r\n    }\r\n\r\n    public insertItem(index: number, item: HTMLEStatusItemElement): void {\r\n        index = Math.min(Math.max(index, -this.items.length), this.items.length);\r\n        this.insertBefore(item, this.children[index >= 0 ? index : this.children.length + index]);\r\n        this.items.splice(index, 0, item);\r\n        item.addEventListener(\"mouseenter\", () => {\r\n            this.selectItem(this.items.indexOf(item));\r\n        });\r\n        item.addEventListener(\"mouseleave\", () => {\r\n        });\r\n    }\r\n\r\n    public findItem(predicate: (item: HTMLEStatusItemElement) => boolean): HTMLEStatusItemElement | null {\r\n        const items = this.findItems(predicate);\r\n        if (items.length > 0) {\r\n            return items[0];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public findItems(predicate: (item: HTMLEStatusItemElement) => boolean): HTMLEStatusItemElement[] {\r\n        const items: HTMLEStatusItemElement[] = [];\r\n        this.items.forEach((item) => {\r\n            if (predicate(item)) {\r\n                items.push(item);\r\n            }\r\n        });\r\n        return items;\r\n    }\r\n\r\n    public selectItem(index: number): void {\r\n        if (index !== this.selectedItemIndex) {\r\n            this.clearSelection();\r\n            let item = this.items[index];\r\n            if (item) {\r\n                this._selectedItemIndex = index;\r\n            }\r\n        }\r\n    }\r\n\r\n    public clearSelection() {\r\n        let item = this.selectedItem;\r\n        if (item) {\r\n            this._selectedItemIndex = -1;\r\n        }\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-statusbar\": HTMLEStatusBarElement,\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../../HTMLElement\";\r\n\r\nexport { HTMLEStatusItemElement };\r\nexport { HTMLEStatusItemElementBase };\r\n\r\ninterface HTMLEStatusItemElement extends HTMLElement {\r\n\r\n}\r\n\r\ntype EStatusElementType = \"button\" | \"widget\";\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-statusitem\",\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"icon\", type: \"string\"},\r\n    {name: \"type\", type: \"string\"},\r\n])\r\nclass HTMLEStatusItemElementBase extends HTMLElement implements HTMLEStatusItemElement {\r\n\r\n    public name!: string;\r\n    public type!: EStatusElementType;\r\n    public icon!: string;\r\n\r\n    public command: string | null;\r\n\r\n    private _stateMap: ((state: any) => {content: string}) | null;\r\n\r\n    public get stateMap(): ((state: any) => {content: string}) | null {\r\n        return this._stateMap;\r\n    }\r\n\r\n    public set stateMap(stateMap: ((state: any) => {content: string}) | null) {\r\n        this._stateMap = stateMap;\r\n    }\r\n\r\n    public update(newValue: any): void {\r\n        const { content } = (typeof this.stateMap === \"function\") ? this.stateMap(newValue) : newValue;\r\n        this.textContent = content;\r\n    }\r\n\r\n\r\n    // TODO: Add sync with Promise (icons, etc.)\r\n    \r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    position: relative;\r\n                    display: inline-block;\r\n\r\n                    user-select: none;\r\n                    white-space: nowrap;\r\n\r\n                    padding: 2px 6px;\r\n                    background-color: white;\r\n                }\r\n\r\n                :host(:focus-visible) {\r\n                    outline: none;\r\n                }\r\n\r\n                :host(:hover),\r\n                :host([active]) {\r\n                    background-color: rgb(180, 180, 180);\r\n                }\r\n                \r\n                li {\r\n                    display: flex;\r\n                    height: 100%;\r\n                    list-style-type: none;\r\n                }\r\n            </style>\r\n            <li>\r\n                <slot></slot>\r\n            </li>\r\n        `);\r\n\r\n        this.command = null;\r\n        this._stateMap = null;\r\n    }\r\n\r\n    public activate() {\r\n        this.dispatchEvent(new CustomEvent(\"activate\"));\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n        \r\n        this.addEventListener(\"click\", (event: Event) => {\r\n            this.activate();\r\n            event.stopPropagation();\r\n        });\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-statusitem\": HTMLEStatusItemElement,\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../../HTMLElement\";\r\n\r\nexport { isHTMLETabPanelElement };\r\nexport { HTMLETabPanelElement };\r\nexport { BaseHTMLETabPanelElement };\r\n\r\ninterface HTMLETabPanelElement extends HTMLElement {\r\n    name: string;\r\n}\r\n\r\nfunction isHTMLETabPanelElement(obj: any): obj is BaseHTMLETabPanelElement {\r\n    return obj instanceof Node && obj.nodeType === obj.ELEMENT_NODE && (obj as Element).tagName.toLowerCase() === \"e-tabpanel\";\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-tabpanel\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"name\", type: \"string\"}\r\n])\r\nclass BaseHTMLETabPanelElement extends HTMLElement implements HTMLETabPanelElement {\r\n\r\n    public name!: string;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n                }\r\n\r\n                :host([hidden]) {\r\n                    display: none;\r\n                }\r\n            </style>\r\n            <slot></slot>\r\n        `);\r\n    }\r\n\r\n    public connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tabpanel\": HTMLETabPanelElement,\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot, isTagElement } from \"../../HTMLElement\";\r\nimport { HTMLETabPanelElement, isHTMLETabPanelElement } from \"./TabPanel\";\r\n\r\nexport { HTMLETabElement };\r\nexport { BaseHTMLETabElement };\r\n\r\ninterface HTMLETabElement extends HTMLElement {\r\n    name: string;\r\n    active: boolean;\r\n    disabled: boolean;\r\n    controls: string;\r\n    panel: HTMLETabPanelElement | null;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-tab\",\r\n    observedAttributes: [\"active\", \"controls\"]\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"active\", type: \"boolean\"},\r\n    {name: \"disabled\", type: \"boolean\"},\r\n    {name: \"controls\", type: \"string\"},\r\n])\r\nclass BaseHTMLETabElement extends HTMLElement implements HTMLETabElement {\r\n\r\n    public name!: string;\r\n    public disabled!: boolean;\r\n    public active!: boolean;\r\n    public controls!: string;\r\n\r\n    public panel: HTMLETabPanelElement | null;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n                    user-select: none;\r\n                    white-space: nowrap;\r\n                    padding: 2px 6px;\r\n                    border-left: 3px solid transparent;\r\n                    cursor: pointer;\r\n                }\r\n                \r\n                :host([disabled]) {\r\n                    color: grey;\r\n                    pointer-events: none;\r\n                }\r\n\r\n                :host([active]) {\r\n                    border-left: 3px solid dimgray;\r\n                    background-color: whitesmoke;\r\n                }\r\n\r\n                ::slotted(*) {\r\n                    pointer-events: none;\r\n                }\r\n            </style>\r\n            <slot></slot>\r\n        `);\r\n        this.panel = null;\r\n    }\r\n\r\n    public connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        let panel = document.getElementById(this.controls);\r\n        if (isTagElement(\"e-tabpanel\", panel)) {\r\n            this.panel = panel;\r\n            this.panel.hidden = !this.active;\r\n        }\r\n    }\r\n    \r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        switch (name) {\r\n            case \"controls\":\r\n                if (oldValue !== newValue) {\r\n                    let panel = document.getElementById(this.controls);\r\n                    if (isHTMLETabPanelElement(panel)) {\r\n                        this.panel = panel;\r\n                    }\r\n                }\r\n                break;\r\n            case \"active\":\r\n                if (this.active) {\r\n                    this.dispatchEvent(new CustomEvent(\"tabchange\", {detail: {tab: this}, bubbles: true}));\r\n                }\r\n                if (this.panel) {\r\n                    this.panel.hidden = !this.active;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tab\": HTMLETabElement,\r\n    }\r\n}","import { RegisterCustomHTMLElement, bindShadowRoot, isTagElement } from \"../../HTMLElement\";\r\nimport { HTMLETabElement } from \"./Tab\";\r\n\r\nexport { TabChangeEvent };\r\nexport { HTMLETabListElement };\r\nexport { BaseHTMLETabListElement };\r\n\r\ninterface HTMLETabListElement extends HTMLElement {\r\n    readonly activeTab: HTMLETabElement | null;\r\n    tabs: HTMLETabElement[];\r\n}\r\n\r\ntype TabChangeEvent = CustomEvent<{\r\n    tab: HTMLETabElement;\r\n}>\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-tablist\"\r\n})\r\nclass BaseHTMLETabListElement extends HTMLElement implements HTMLETabListElement {\r\n\r\n    public tabs: HTMLETabElement[];\r\n\r\n    private _activeIndex: number;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n                    position: relative;\r\n                }\r\n            </style>\r\n            <slot></slot>\r\n        `);\r\n        this.tabs = [];\r\n        this._activeIndex = 1;\r\n    }\r\n\r\n    public get activeIndex(): number {\r\n        return this._activeIndex;\r\n    }\r\n\r\n    public get activeTab(): HTMLETabElement | null {\r\n        return this.tabs[this._activeIndex] || null;\r\n    }\r\n\r\n    public connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot!.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", (event) => {\r\n                const tabs = (event.target as HTMLSlotElement)\r\n                    .assignedElements()\r\n                    .filter(tab => isTagElement(\"e-tab\", tab)) as HTMLETabElement[];\r\n                this.tabs = tabs;\r\n                this._activeIndex = this.tabs.findIndex(tab => tab.active);\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event) => {\r\n            switch (event.key) {\r\n                case \"ArrowUp\":\r\n                    this.focusTabAt((this.activeIndex <= 0) ? this.tabs.length - 1 : this.activeIndex - 1);\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    this.focusTabAt((this.activeIndex >= this.tabs.length - 1) ? 0 : this.activeIndex + 1);\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"Enter\":\r\n                    if (this.activeTab) {\r\n                        this.activateTab(this.activeTab);\r\n                    }\r\n                    break;\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"click\", (event) => {\r\n            let target = event.target as any;\r\n            if (isTagElement(\"e-tab\", target)) {\r\n                target.active = true;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"tabchange\", (event) => {\r\n            let targetIndex = this.tabs.indexOf(event.detail.tab);\r\n            this._activeIndex = targetIndex;\r\n            this.tabs.forEach((thisTab, thisTabIndex) => {\r\n                if (thisTabIndex !== targetIndex) {\r\n                    thisTab.active = false;\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    public focusTabAt(index: number): void {\r\n        let tab = this.tabs[index];\r\n        if (tab) {\r\n            this._activeIndex = index;\r\n            tab.focus();\r\n        }\r\n    }\r\n\r\n    public findTab(predicate: (tab: HTMLETabElement) => boolean): HTMLETabElement | null {\r\n        return this.tabs.find(predicate) || null;\r\n    }\r\n\r\n    public activateTab(tab: HTMLETabElement) {\r\n        if (this.tabs.includes(tab)) {\r\n            tab.active = true;\r\n        }\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tablist\": HTMLETabListElement,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"tabchange\": TabChangeEvent\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot, isTagElement } from \"../../HTMLElement\";\r\nimport { HTMLETreeElement } from \"./Tree\";\r\n\r\nexport { HTMLETreeItemElement };\r\nexport { HTMLETreeItemElementBase };\r\n\r\ninterface HTMLETreeItemElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n    expanded: boolean;\r\n    indent: number;\r\n    icon: string;\r\n    active: boolean;\r\n\r\n    items: HTMLETreeItemElement[];\r\n    parent: HTMLETreeItemElement | HTMLETreeElement | null;\r\n\r\n    deepestVisibleChildItem(): HTMLETreeItemElement;\r\n    previousVisibleItem(): HTMLETreeItemElement;\r\n    nextVisibleItem(): HTMLETreeItemElement;\r\n    nearestParentItem(): HTMLETreeItemElement;\r\n\r\n    toggle(): void;\r\n    trigger(): void;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-treeitem\",\r\n    observedAttributes: [\"icon\", \"label\", \"expanded\", \"indent\"]\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"label\", type: \"string\"},\r\n    {name: \"icon\", type: \"string\"},\r\n    {name: \"indent\", type: \"number\"},\r\n    {name: \"active\", type: \"boolean\"},\r\n    {name: \"expanded\", type: \"boolean\"},\r\n    {name: \"leaf\", type: \"boolean\"}\r\n])\r\nclass HTMLETreeItemElementBase extends HTMLElement implements HTMLETreeItemElement {\r\n\r\n    public name!: string;\r\n    public label!: string;\r\n    public indent!: number;\r\n    public expanded!: boolean;\r\n    public value!: string;\r\n    public icon!: string;\r\n    public active!: boolean;\r\n    public leaf!: boolean;\r\n\r\n    public items: HTMLETreeItemElement[];\r\n    public parent: HTMLETreeItemElement | HTMLETreeElement | null;\r\n    private _toggleArrow: Element;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: inline-block;\r\n\r\n                    user-select: none;\r\n                    white-space: nowrap;\r\n\r\n                    padding: 0;\r\n                    cursor: pointer;\r\n\r\n                    --indent-width: 6px;\r\n                }\r\n                \r\n                :host([active]) [part~=\"content\"],\r\n                [part~=\"content\"]:hover {\r\n                    background-color: gainsboro;\r\n                }\r\n\r\n                :host(:not([expanded])) [part~=\"container\"] {\r\n                    display: none;\r\n                }\r\n\r\n                [part~=\"content\"] {\r\n                    font-size: 1em;\r\n                    display: flex;\r\n                    padding-left: calc(var(--tree-indent) * var(--indent-width));\r\n                }\r\n\r\n                [part~=\"label\"],\r\n                ::slotted([slot=\"label\"]) {\r\n                    display: block;\r\n                    width: 100%;\r\n                    pointer-events: none;\r\n                    overflow: hidden;\r\n                    white-space: nowrap;\r\n                    text-overflow: ellipsis;\r\n                }\r\n\r\n                [part~=\"toggle_arrow\"]:hover {\r\n                    background-color: whitesmoke;\r\n                }\r\n\r\n                :host([leaf]) [part~=\"container\"],\r\n                [part~=\"container\"]:empty {\r\n                    display: none;\r\n                }\r\n\r\n                [part~=\"toggle_arrow\"] {\r\n                    flex: none;\r\n                    display: inline-block;\r\n                    width: 18px;\r\n                    height: 18px;\r\n                    margin: 2px;\r\n                    margin-right: 6px;\r\n                    border-radius: 2px;\r\n                }\r\n\r\n                :host([leaf]) [part~=\"toggle_arrow\"] {\r\n                    visibility: hidden;\r\n                }\r\n\r\n                [part~=\"toggle_arrow\"]::after {\r\n                    display: inline-block;\r\n                    width: 18px;\r\n                    height: 18px;\r\n                    position: absolute;\r\n                    color: dimgray;\r\n                    text-align: center;\r\n                }\r\n\r\n                :host(:not([expanded])) [part~=\"toggle_arrow\"]::after {\r\n                    content: \"►\";\r\n                }\r\n\r\n                :host([expanded]) [part~=\"toggle_arrow\"]::after {\r\n                    content: \"▼\";\r\n                }\r\n\r\n                [part~=\"state\"] {\r\n                    flex: none;\r\n                }\r\n\r\n                [part~=\"container\"] {\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                }\r\n            </style>\r\n            <span part=\"content\">\r\n                <span part=\"toggle_arrow\"></span>\r\n                <slot name=\"label\"><span part=\"label\"></span></slot>\r\n            </span>\r\n            <div part=\"container\">\r\n                <slot></slot>\r\n            </div>\r\n        `);\r\n        this.items = [];\r\n        this.parent = null;\r\n        this.indent = 0;\r\n\r\n        this._toggleArrow = this.shadowRoot!.querySelector(\"[part~=toggle_arrow]\")!;\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot?.querySelector<HTMLSlotElement>(\"slot:not([name])\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const items = slot.assignedElements()\r\n                    .filter(item => isTagElement(\"e-treeitem\", item)) as HTMLETreeItemElement[];\r\n                this.items = items;\r\n                this.items.forEach((item) => {\r\n                    item.parent = this;\r\n                    item.indent = this.indent + 1;\r\n                });\r\n            });\r\n        }\r\n\r\n        this.shadowRoot!.addEventListener(\"mousedown\", (event) => {\r\n            let target = event.target as Element;\r\n            if (target === this._toggleArrow) {\r\n                this.toggle();\r\n            }\r\n        });\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (newValue !== oldValue) {\r\n            switch (name) {\r\n                case \"label\":\r\n                    if (oldValue !== newValue) {\r\n                        const labelPart = this.shadowRoot?.querySelector(\"[part~=label]\");\r\n                        if (labelPart) {\r\n                            labelPart.textContent = newValue;\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"icon\":\r\n                    if (oldValue !== newValue) {\r\n                        const iconPart = this.shadowRoot?.querySelector<HTMLElement>(\"[part~=icon]\");\r\n                        if (iconPart) {\r\n                            iconPart.dataset.value = newValue;\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"indent\":\r\n                    if (oldValue !== newValue) {\r\n                        this.style.setProperty(\"--tree-indent\", newValue);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public deepestVisibleChildItem(): HTMLETreeItemElement {\r\n        if (this.expanded && this.items.length > 0) {\r\n            let lastChildItem = this.items[this.items.length - 1];\r\n            return lastChildItem.deepestVisibleChildItem();\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public previousVisibleItem(): HTMLETreeItemElement {\r\n        if (this.parent) {\r\n            let indexOfThis = this.parent.items.indexOf(this);\r\n            if (indexOfThis > 0) {\r\n                let previousItem = this.parent.items[indexOfThis - 1];\r\n                return previousItem.deepestVisibleChildItem();\r\n            }\r\n            return isTagElement(\"e-treeitem\", this.parent) ? this.parent : this;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public nextVisibleItem(): HTMLETreeItemElement {\r\n        if (this.expanded && this.items.length > 0) {\r\n            return this.items[0];\r\n        }\r\n        let nearestItem = this.nearestParentItem();\r\n        if (nearestItem.parent) {\r\n            let indexOfNearest = nearestItem.parent.items.indexOf(nearestItem);\r\n            if (indexOfNearest < nearestItem.parent.items.length - 1) {\r\n                return nearestItem.parent.items[indexOfNearest + 1];\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public nearestParentItem(): HTMLETreeItemElement {\r\n        if (isTagElement(\"e-treeitem\", this.parent)) {\r\n            let indexOfThis = this.parent.items.indexOf(this);\r\n            if (indexOfThis === this.parent.items.length - 1) {\r\n                return this.parent.nearestParentItem();\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public toggle(): void {\r\n        this.expanded = !this.expanded;\r\n        this.dispatchEvent(new CustomEvent(\"e-toggle\", {bubbles: true}));\r\n    }\r\n\r\n    public trigger(): void {\r\n        this.dispatchEvent(new CustomEvent(\"e-trigger\", {bubbles: true}));\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitem\": HTMLETreeItemElement,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e-toggle\": Event,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e-trigger\": Event,\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot, isTagElement } from \"../../HTMLElement\";\r\nimport { HTMLETreeItemElement } from \"./TreeItem\";\r\n\r\nexport { HTMLETreeElement };\r\nexport { HTMLETreeElementBase };\r\n\r\ninterface HTMLETreeElement extends HTMLElement {\r\n    name: string;\r\n    items: HTMLETreeItemElement[];\r\n    readonly activeItem: HTMLETreeItemElement | null;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-tree\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"active\", type: \"boolean\"},\r\n    {name: \"name\", type: \"string\"}\r\n])\r\nclass HTMLETreeElementBase extends HTMLElement implements HTMLETreeElement {\r\n\r\n    public active!: boolean;\r\n    public name!: string;\r\n    \r\n    public items: HTMLETreeItemElement[];\r\n\r\n    private _activeItem: HTMLETreeItemElement | null;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n                    position: relative;\r\n                    user-select: none;\r\n                }\r\n\r\n                [part~=\"container\"] {\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                }\r\n            </style>\r\n            <div part=\"container\">\r\n                <slot></slot>\r\n            </div>\r\n        `);\r\n        this.items = [];\r\n        this._activeItem = null;\r\n    }\r\n\r\n    public get activeItem(): HTMLETreeItemElement | null {\r\n        return this._activeItem;\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n        \r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const items = slot.assignedElements()\r\n                    .filter(item => isTagElement(\"e-treeitem\", item)) as HTMLETreeItemElement[];\r\n                this.items = items;\r\n                items.forEach((item) => {\r\n                    item.parent = this;\r\n                    item.indent = 1;\r\n                });\r\n            });\r\n        }\r\n        \r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"ArrowLeft\":\r\n                    if (this.activeItem) {\r\n                        if (this.activeItem.expanded) {\r\n                            this.activeItem.toggle();\r\n                        }\r\n                        else {\r\n                            if (isTagElement(\"e-treeitem\", this.activeItem.parent)) {\r\n                                this.activeItem.parent.focus();\r\n                            }\r\n                        }\r\n                    }\r\n                    event.preventDefault();\r\n                    break;\r\n                case \"ArrowRight\":\r\n                    if (this.activeItem) {\r\n                        if (!this.activeItem.expanded) {\r\n                            this.activeItem.toggle();\r\n                        }\r\n                        else {\r\n                            if (this.activeItem.items.length > 0) {\r\n                                this.activeItem.items[0].focus();\r\n                            }\r\n                        }\r\n                    }\r\n                    event.preventDefault();\r\n                    break;\r\n                case \"ArrowUp\":\r\n                    if (this.activeItem) {\r\n                        this.activeItem.previousVisibleItem().focus();\r\n                    }\r\n                    else if (this.items.length > 0) {\r\n                        this.items[0].focus();\r\n                    }\r\n                    event.preventDefault();\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    if (this.activeItem) {\r\n                        this.activeItem.nextVisibleItem().focus();\r\n                    }\r\n                    else if (this.items.length > 0) {\r\n                        this.items[this.items.length - 1].focus();\r\n                    }\r\n                    event.preventDefault();\r\n                    break;\r\n                case \"Home\":\r\n                    if (this.items.length > 0) {\r\n                        this.items[0].focus({preventScroll: true});\r\n                    }\r\n                    event.preventDefault();\r\n                    break;\r\n                case \"End\":\r\n                    if (this.items.length > 0) {\r\n                        this.items[this.items.length - 1].deepestVisibleChildItem().focus();\r\n                    }\r\n                    event.preventDefault();\r\n                    break;\r\n                case \"Enter\":\r\n                    if (this.activeItem) {\r\n                        this.activeItem.trigger();\r\n                    }\r\n                    break;\r\n                case \"Escape\":\r\n                    this.active = false;\r\n                    if (this.activeItem) {\r\n                        this.activeItem.active = false;\r\n                    }\r\n                    this.focus();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            if (isTagElement(\"e-treeitem\", target)) {\r\n                target.trigger();\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusin\", (event: FocusEvent) => {\r\n            let target = event.target as Element;\r\n            if (!this.active) {\r\n                this.active = true;\r\n            }\r\n            let closestItem = target.closest(\"e-treeitem\");\r\n            if (closestItem && this.contains(closestItem)) {\r\n                if (this._activeItem) {\r\n                    this._activeItem.active = false;\r\n                }\r\n                this._activeItem = closestItem;\r\n                this._activeItem.active = true;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            let relatedTarget = event.relatedTarget as any;\r\n            if (!this.contains(relatedTarget)) {\r\n                this.active = false;\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tree\": HTMLETreeElement,\r\n    }\r\n}\r\n","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../../HTMLElement\";\r\n\r\nexport { HTMLEBreadcrumbItemElement };\r\nexport { HTMLEBreadcrumbItemElementBase };\r\n\r\ninterface HTMLEBreadcrumbItemElement extends HTMLElement {\r\n    label: string;\r\n    active: boolean;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-breadcrumbitem\",\r\n    observedAttributes: [\"label\"]\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"label\", type: \"string\"},\r\n    {name: \"active\", type: \"boolean\"}\r\n])\r\nclass HTMLEBreadcrumbItemElementBase extends HTMLElement implements HTMLEBreadcrumbItemElement {\r\n    \r\n    public label!: string;\r\n    public active!: boolean;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        let separatorArrowUrl = JSON.stringify(\"../assets/editor/icons/chevron_right_black_18dp.svg\");\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <link rel=\"preload\" href=${separatorArrowUrl} as=\"image\" crossorigin>\r\n            <style>\r\n                :host {\r\n                    display: inline-block;\r\n                    cursor: pointer;\r\n\r\n                    --separator-arrow-url: url(${separatorArrowUrl});\r\n                }\r\n\r\n                :host([active]) {\r\n                    font-weight: bold;\r\n                }\r\n\r\n                :host([active]) [part~=\"li\"]::after {\r\n                    display: none;\r\n                }\r\n\r\n                [part~=\"li\"]::after {\r\n                    content: \"\";\r\n                    display: inline-block;\r\n                    width: 18px;\r\n                    height: 18px;\r\n                    background-color: dimgray;\r\n                    transform: scale(1.2) translateY(4%);\r\n                    -webkit-mask-image: var(--separator-arrow-url);\r\n                    mask-image: var(--separator-arrow-url);\r\n                }\r\n\r\n                :host([hidden]) {\r\n                    display: none;\r\n                }\r\n\r\n                [part~=\"li\"] {\r\n                    display: flex;\r\n                    list-style-type: none;\r\n                }\r\n            </style>\r\n            <li part=\"li\">\r\n                <slot></slot>\r\n            </li>\r\n        `);\r\n    }\r\n    \r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (newValue !== oldValue) {\r\n            switch (name) {\r\n                case \"label\":\r\n                    if (oldValue !== newValue) {\r\n                        const labelPart = this.shadowRoot?.querySelector(\"[part~=label]\");\r\n                        if (labelPart) {\r\n                            labelPart.textContent = newValue;\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-breadcrumbitem\": HTMLEBreadcrumbItemElement,\r\n    }\r\n}","import { RegisterCustomHTMLElement, bindShadowRoot, isTagElement } from \"../../HTMLElement\";\r\nimport { HTMLEBreadcrumbItemElement } from \"./BreadcrumbItem\";\r\n\r\nexport { HTMLEBreadcrumbTrailElement };\r\nexport { HTMLEBreadcrumbTrailElementBase };\r\n\r\ninterface HTMLEBreadcrumbTrailElement extends HTMLElement {\r\n    items: HTMLEBreadcrumbItemElement[];\r\n    activateItem(item: HTMLEBreadcrumbItemElement): void;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-breadcrumbtrail\"\r\n})\r\nclass HTMLEBreadcrumbTrailElementBase extends HTMLElement implements HTMLEBreadcrumbTrailElement {\r\n\r\n    public items: HTMLEBreadcrumbItemElement[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n                }\r\n                \r\n                [part~=\"ul\"] {\r\n                    display: flex;\r\n                    flex-direction: row;\r\n                    list-style-type: none;\r\n                    padding: 0; margin: 0;\r\n                }\r\n            </style>\r\n            <ul part=\"ul\">\r\n                <slot></slot>\r\n            </ul>\r\n        `);\r\n\r\n        this.items = [];\r\n    }\r\n\r\n    public activateItem(item: HTMLEBreadcrumbItemElement): void {\r\n        let itemIndex = this.items.indexOf(item);\r\n        if (itemIndex > -1) {\r\n            this.items.forEach((item, index) => {\r\n                item.active = (index == itemIndex);\r\n                item.hidden = (index > itemIndex);\r\n            });\r\n            let activeItem = this.items[itemIndex];\r\n            activeItem.dispatchEvent(new CustomEvent(\"activate\"));\r\n        }\r\n    }\r\n    \r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n        \r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const items = slot.assignedElements().filter(item => isTagElement(\"e-breadcrumbitem\", item)) as HTMLEBreadcrumbItemElement[];\r\n                this.items = items;\r\n                items.forEach((item, index) => {\r\n                    item.active = (index === items.length - 1);\r\n                });\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            if (isTagElement(\"e-breadcrumbitem\", target)) {\r\n                this.activateItem(target);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-breadcrumbtrail\": HTMLEBreadcrumbTrailElement,\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../../HTMLElement\";\r\n\r\nexport { HTMLEDraggableElement };\r\nexport { HTMLEDraggableElementBase };\r\n\r\ninterface HTMLEDraggableElement extends HTMLElement {\r\n    selected: boolean;\r\n    dragged: boolean;\r\n    type: string;\r\n    dragovered: boolean;\r\n    data: object | null;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-draggable\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"selected\", type: \"boolean\"},\r\n    {name: \"dragged\", type: \"boolean\"},\r\n    {name: \"dragovered\", type: \"boolean\"},\r\n    {name: \"disabled\", type: \"boolean\"},\r\n    {name: \"type\", type: \"string\"},\r\n    {name: \"data\", type: \"json\"}\r\n])\r\nclass HTMLEDraggableElementBase extends HTMLElement implements HTMLEDraggableElement {\r\n    \r\n    public selected!: boolean;\r\n    public dragovered!: boolean;\r\n    public dragged!: boolean;\r\n    public disabled!: boolean;\r\n\r\n    public type!: string;\r\n    public data!: object | null;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: inline-block;\r\n                    padding: 3px 4px;\r\n                    cursor: pointer;\r\n                    white-space: nowrap;\r\n                    border-radius: 4px;\r\n                    border: 1px solid black;\r\n                    user-select: none;\r\n                }\r\n\r\n                :host([disabled]) {\r\n                    pointer-events: none;\r\n                    color: gray;\r\n                    border-color: gray;\r\n                }\r\n\r\n                :host([selected]:active) {\r\n                    cursor: grabbing;\r\n                }\r\n                \r\n                :host([selected]) {\r\n                    cursor: grab;\r\n                    font-weight: bold;\r\n                    outline: 1px auto black;\r\n                }\r\n\r\n                :host([dragovered]) {\r\n                    border-style: dotted;\r\n                }\r\n                \r\n                [part=\"container\"] {\r\n                    display: flex;\r\n                    align-items: center;\r\n                }\r\n            </style>\r\n            <div part=\"container\">\r\n                <slot>&nbsp;</slot>\r\n            </div>\r\n        `);\r\n    }\r\n    \r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n        this.draggable = true;\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-draggable\": HTMLEDraggableElement,\r\n    }\r\n}","import { RegisterCustomHTMLElement, bindShadowRoot, isTagElement } from \"../../HTMLElement\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\n\r\nexport { HTMLEDragzoneElement };\r\nexport { HTMLEDragzoneElementBase };\r\n\r\ninterface HTMLEDragzoneElement extends HTMLElement {\r\n    draggables: HTMLEDraggableElement[];\r\n    selectedDraggables: HTMLEDraggableElement[];\r\n    label: string;\r\n    selectDraggable(draggable: HTMLEDraggableElement): void;\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void;\r\n    clearSelection(): void;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-dragzone\"\r\n})\r\nclass HTMLEDragzoneElementBase extends HTMLElement implements HTMLEDragzoneElement {\r\n\r\n    public label!: string;\r\n\r\n    public draggables: HTMLEDraggableElement[];\r\n    public selectedDraggables: HTMLEDraggableElement[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n                }\r\n\r\n                :host([disabled]) {\r\n                    pointer-events: none;\r\n                }\r\n\r\n                [part~=\"container\"]:empty {\r\n                    display: none !important;\r\n                }\r\n\r\n                [part~=\"container\"] {\r\n                    position: relative;\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                    padding: 2px;\r\n                }\r\n\r\n                ::slotted(e-draggable:not(:only-child)) {\r\n                    margin-top: 2px;\r\n                    margin-bottom: 2px;\r\n                }\r\n            </style>\r\n            <div part=\"container\">\r\n                <span part=\"label\"/></span>\r\n                <slot></slot>\r\n            </div>\r\n        `);\r\n        this.draggables = [];\r\n        this.selectedDraggables = [];\r\n    }\r\n\r\n    public selectDraggable(draggable: HTMLEDraggableElement): void {\r\n        draggable.selected = true;\r\n        if (!this.selectedDraggables.includes(draggable)) {\r\n            this.selectedDraggables.push(draggable);\r\n        }\r\n    }\r\n\r\n    public unselectDraggable(draggable: HTMLEDraggableElement): void {\r\n        let index = this.selectedDraggables.indexOf(draggable);\r\n        if (index > -1) {\r\n            draggable.selected = false;\r\n            this.selectedDraggables.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    public clearSelection(): void {\r\n        this.selectedDraggables.forEach((draggable) => {\r\n            draggable.selected = false;\r\n        });\r\n        this.selectedDraggables = [];\r\n    }\r\n    \r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const draggables = slot.assignedElements().filter(\r\n                    elem => isTagElement(\"e-draggable\", elem)\r\n                ) as HTMLEDraggableElement[];\r\n                this.draggables = draggables;\r\n                this.draggables.forEach((draggable) => {\r\n                    draggable.draggable = true;\r\n                });\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Escape\":\r\n                    this.clearSelection();\r\n                    this.focus();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragstart\", (event: DragEvent) => {\r\n            let target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                this.selectedDraggables.forEach((thisSelectedDraggable) => {\r\n                    thisSelectedDraggable.dragged = true;\r\n                });\r\n                let dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    dataTransfer.effectAllowed = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", this.id);\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"dragend\", (event: DragEvent) => {\r\n            let target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                let thisDraggedDraggables = this.draggables.filter(draggable => draggable.dragged);\r\n                thisDraggedDraggables.forEach((thisDraggedDraggable) => {\r\n                    thisDraggedDraggable.dragged = false;\r\n                });\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            let relatedTarget = event.relatedTarget as any;\r\n            if (!this.contains(relatedTarget)) {\r\n                this.clearSelection();\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            if (event.button === 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        if (!target.selected) {\r\n                            this.clearSelection();\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                    else if (event.ctrlKey) {\r\n                        (!target.selected) ?\r\n                            this.selectDraggable(target) :\r\n                            this.unselectDraggable(target);\r\n                    }\r\n                    else if (event.shiftKey) {\r\n                        if (this.selectedDraggables.length > 0) {\r\n                            let targetIndex = this.draggables.indexOf(target);\r\n                            let firstIndex = this.draggables.indexOf(this.selectedDraggables[0]);\r\n                            let direction = Math.sign(targetIndex - firstIndex);\r\n                            let fromIndex = (direction > 0) ? 0 : this.draggables.length - 1;\r\n                            let toIndex = (direction > 0) ? this.draggables.length - 1 : 0;\r\n                            let startRangeIndex = (direction > 0) ? firstIndex : targetIndex;\r\n                            let endRangeIndex = (direction > 0) ? targetIndex : firstIndex;\r\n                            for (let index = fromIndex; index !== toIndex; index += direction) {\r\n                                (index >= startRangeIndex && index <= endRangeIndex) ? \r\n                                    this.selectDraggable(this.draggables[index]) :\r\n                                    this.unselectDraggable(this.draggables[index]);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.clearSelection();\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mouseup\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            if (event.button === 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        this.draggables.forEach((thisDraggable) => {\r\n                            if (thisDraggable !== target) {\r\n                                this.unselectDraggable(thisDraggable);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dragzone\": HTMLEDragzoneElement,\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot, isTagElement } from \"../../HTMLElement\";\r\nimport { setPropertyFromPath } from \"../../Snippets\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\nimport { HTMLEDragzoneElement } from \"./Dragzone\";\r\n\r\nexport { DataChangeEvent };\r\nexport { HTMLEDropzoneElement };\r\nexport { HTMLEDropzoneElementBase };\r\nexport { DropzoneDataBase };\r\nexport { DropzoneData };\r\n\r\ninterface HTMLEDropzoneElement extends HTMLElement {\r\n    selectedDraggables: HTMLEDraggableElement[]\r\n    draggables: HTMLEDraggableElement[];\r\n    dragovered: DropzoneDragoveredType | null;\r\n    name: string;\r\n    type: string;\r\n    multiple: boolean;\r\n    disabled: boolean;\r\n    placeholder: string;\r\n    droptest: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => void) | null;\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): void;\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean): void;\r\n    selectDraggable(draggable: HTMLEDraggableElement): void;\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void;\r\n    clearSelection(): void;\r\n}\r\n\r\ntype DropzoneDragoveredType = \"self\" | \"draggable\" | \"appendarea\";\r\n\r\ntype DataChangeEvent = CustomEvent<{\r\n    action: \"insert\" | \"remove\";\r\n    draggables: HTMLEDraggableElement[];\r\n    position: number;\r\n}>;\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-dropzone\",\r\n    observedAttributes: [\"placeholder\", \"label\"]\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"dragovered\", type: \"string\"},\r\n    {name: \"placeholder\", type: \"string\"},\r\n    {name: \"disabled\", type: \"boolean\"},\r\n    {name: \"multiple\", type: \"boolean\"},\r\n    {name: \"input\", type: \"string\"},\r\n    {name: \"label\", type: \"string\"},\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"type\", type: \"string\"},\r\n])\r\nclass HTMLEDropzoneElementBase extends HTMLElement implements HTMLEDropzoneElement {\r\n    \r\n    public dragovered!: DropzoneDragoveredType | null;\r\n    public placeholder!: string;\r\n    public input!: string;\r\n    public multiple!: boolean;\r\n    public disabled!: boolean;\r\n    public name!: string;\r\n    public type!: string;\r\n\r\n    public droptest!: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => boolean) | null;\r\n    public value: any;\r\n\r\n    public draggables: HTMLEDraggableElement[];\r\n    public selectedDraggables: HTMLEDraggableElement[];\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        bindShadowRoot(this, /*html*/`\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n                    border: 1px dashed gray;\r\n                }\r\n\r\n                :host([disabled]) {\r\n                    pointer-events: none;\r\n                }\r\n\r\n                :host(:empty) [part~=\"container\"] {\r\n                    display: none !important;\r\n                }\r\n\r\n                [part~=\"container\"] {\r\n                    position: relative;\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                    padding: 2px;\r\n                }\r\n\r\n                ::slotted(e-draggable:not(:only-child)) {\r\n                    margin-top: 2px;\r\n                    margin-bottom: 2px;\r\n                }\r\n\r\n                :host(:not([multiple]):not(:empty)) [part=\"appendarea\"],\r\n                :host(:not(:empty):not([dragovered])) [part=\"appendarea\"] {\r\n                    display: none !important;\r\n                }\r\n\r\n                [part=\"appendarea\"] {\r\n                    display: block;\r\n                    margin: 2px;\r\n                    border-radius: 4px;\r\n                    border: 1px dotted black;\r\n                }\r\n\r\n                :host(:not([dragovered=\"appendarea\"])) [part=\"appendarea\"] {\r\n                    border-color: transparent;\r\n                }\r\n                \r\n                [part=\"placeholder\"] {\r\n                    display: inline-block;\r\n                    color: grey;\r\n                    pointer-events: none;\r\n                    user-select: none;\r\n                }\r\n            </style>\r\n            <div part=\"container\">\r\n                <slot></slot>\r\n            </div>\r\n            <div part=\"appendarea\">\r\n                <span part=\"placeholder\">&nbsp;</span>\r\n            </div>\r\n            `\r\n        );\r\n        this.draggables = [];\r\n        this.selectedDraggables = [];\r\n        this.droptest = null;\r\n    }\r\n\r\n    public selectDraggable(draggable: HTMLEDraggableElement): void {\r\n        draggable.selected = true;\r\n        if (!this.selectedDraggables.includes(draggable)) {\r\n            this.selectedDraggables.push(draggable);\r\n        }\r\n    }\r\n\r\n    public unselectDraggable(draggable: HTMLEDraggableElement): void {\r\n        let index = this.selectedDraggables.indexOf(draggable);\r\n        if (index > -1) {\r\n            draggable.selected = false;\r\n            this.selectedDraggables.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    public clearSelection(): void {\r\n        this.selectedDraggables.forEach((draggable) => {\r\n            draggable.selected = false;\r\n        });\r\n        this.selectedDraggables = [];\r\n    }\r\n    \r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const draggables = slot.assignedElements().filter(\r\n                    elem => isTagElement(\"e-draggable\", elem)\r\n                ) as HTMLEDraggableElement[];\r\n                this.draggables = draggables;\r\n                this.draggables.forEach((draggable) => {\r\n                    draggable.draggable = false;\r\n                });\r\n            });\r\n        }\r\n\r\n        const appendAreaPart = this.shadowRoot!.querySelector<HTMLDivElement>(\"[part='appendarea']\");\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Delete\":\r\n                    if (this == event.target) {\r\n                        this.removeDraggables();\r\n                    }\r\n                    else {\r\n                        this.removeDraggables(draggable => draggable.selected);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"Escape\":\r\n                    this.clearSelection();\r\n                    this.focus();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            let relatedTarget = event.relatedTarget as any;\r\n            if (!this.contains(relatedTarget)) {\r\n                this.clearSelection();\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            if (event.button === 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        if (!target.selected) {\r\n                            this.clearSelection();\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                    else if (event.ctrlKey) {\r\n                        (!target.selected) ?\r\n                            this.selectDraggable(target) :\r\n                            this.unselectDraggable(target);\r\n                    }\r\n                    else if (event.shiftKey) {\r\n                        if (this.selectedDraggables.length > 0) {\r\n                            let targetIndex = this.draggables.indexOf(target);\r\n                            let firstIndex = this.draggables.indexOf(this.selectedDraggables[0]);\r\n                            let direction = Math.sign(targetIndex - firstIndex);\r\n                            let fromIndex = (direction > 0) ? 0 : this.draggables.length - 1;\r\n                            let toIndex = (direction > 0) ? this.draggables.length - 1 : 0;\r\n                            let startRangeIndex = (direction > 0) ? firstIndex : targetIndex;\r\n                            let endRangeIndex = (direction > 0) ? targetIndex : firstIndex;\r\n                            for (let index = fromIndex; index !== toIndex; index += direction) {\r\n                                (index >= startRangeIndex && index <= endRangeIndex) ? \r\n                                    this.selectDraggable(this.draggables[index]) :\r\n                                    this.unselectDraggable(this.draggables[index]);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.clearSelection();\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mouseup\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            if (event.button === 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        this.draggables.forEach((thisDraggable) => {\r\n                            if (thisDraggable !== target) {\r\n                                this.unselectDraggable(thisDraggable);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragover\", (event: DragEvent) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragover\", (event) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragenter\", (event: DragEvent) => {\r\n            let target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                target.dragovered = true;\r\n                this.dragovered = \"draggable\";\r\n            }\r\n            else {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragenter\", (event) => {\r\n            let target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"appendarea\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event: DragEvent) => {\r\n            let relatedTarget = event.relatedTarget as any;\r\n            let target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                if (target == this) {\r\n                    if (appendAreaPart) {\r\n                        this.dragovered = \"self\";\r\n                    }\r\n                    if (!this.draggables.includes(relatedTarget)) {\r\n                        this.dragovered = null;\r\n                    }\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                }\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragleave\", (event) => {\r\n            let target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n        \r\n        this.addEventListener(\"drop\", (event) => {\r\n            let target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                let dropIndex = this.draggables.length;\r\n                if (target == this) {\r\n                    this.dragovered = null;\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                    dropIndex = this.draggables.indexOf(target);\r\n                }\r\n\r\n                let dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    let dragzoneId = dataTransfer.getData(\"text/plain\");\r\n                    let dragzone = document.getElementById(dragzoneId) as HTMLEDragzoneElement;\r\n                    if (dragzone) {\r\n                        let selectedDraggables = dragzone.selectedDraggables;\r\n                        if (selectedDraggables) {\r\n                            selectedDraggables.forEach((selectedDraggable) => {\r\n                                selectedDraggable.dragged = false;\r\n                            });\r\n                            dragzone.clearSelection();\r\n                            this.addDraggables(selectedDraggables, dropIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.dragovered = null;\r\n            event.preventDefault();\r\n        });\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (newValue !== oldValue) {\r\n            switch (name) {\r\n                case \"placeholder\":\r\n                    if (oldValue !== newValue) {\r\n                        const placeholderPart = this.shadowRoot?.querySelector(\"[part~=placeholder]\");\r\n                        if (placeholderPart) {\r\n                            placeholderPart.textContent = newValue;\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public addDraggables(draggables: HTMLEDraggableElement[], position: number): HTMLEDraggableElement[] | null {\r\n        if (draggables.length > 0) {\r\n            let dataTransferSuccess = true;\r\n            if (this.droptest) {\r\n                dataTransferSuccess = this.droptest(this, draggables);\r\n            }\r\n            \r\n            let newDraggables: HTMLEDraggableElement[] = [];\r\n            let insertionPosition = -1;\r\n            if (dataTransferSuccess) {\r\n                if (this.multiple) {\r\n                    draggables.forEach((draggable) => {\r\n                        let newDraggable = draggable.cloneNode(true) as HTMLEDraggableElement;\r\n                        if (position > -1 && position < this.draggables.length) {\r\n                            this.draggables[position].insertAdjacentElement(\"beforebegin\", newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? position : insertionPosition;\r\n                        }\r\n                        else {\r\n                            this.appendChild(newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? this.draggables.length - 1 : insertionPosition;\r\n                        }\r\n                        newDraggables.push(newDraggable);\r\n                    });\r\n                }\r\n                else {\r\n                    let newDraggable = draggables[0].cloneNode(true) as HTMLEDraggableElement;\r\n                    if (this.draggables.length > 0) {\r\n                        this.replaceChild(newDraggable, this.draggables[0]);\r\n                    }\r\n                    else {\r\n                        this.appendChild(newDraggable);\r\n                    }\r\n                    newDraggables.push(newDraggable);\r\n                    insertionPosition = 0;\r\n                }\r\n            }\r\n            \r\n            const slot = this.shadowRoot?.querySelector(\"slot\");\r\n            if (slot) {\r\n                slot.addEventListener(\"slotchange\", () => {\r\n                    this.dispatchEvent(new CustomEvent(\"datachange\", {\r\n                        bubbles: true,\r\n                        detail: {\r\n                            action: \"insert\",\r\n                            draggables: newDraggables,\r\n                            position: insertionPosition\r\n                        }\r\n                    }));\r\n                }, {once: true});\r\n            }\r\n            return newDraggables;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean = () => true) {\r\n        let toRemove = this.draggables.filter(\r\n            (value: HTMLEDraggableElement, index: number) => {\r\n                return predicate(value, index);\r\n            }\r\n        );\r\n        let atPosition = this.draggables.indexOf(toRemove[0]);\r\n        toRemove.forEach((draggable) => {\r\n            draggable.remove(); \r\n        });\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                this.dispatchEvent(new CustomEvent(\"datachange\", {\r\n                    bubbles: true,\r\n                    detail: {\r\n                        action: \"remove\",\r\n                        draggables: toRemove,\r\n                        position: atPosition\r\n                    }\r\n                }));\r\n            }, {once: true});\r\n        }\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dropzone\": HTMLEDropzoneElement,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"datachange\": DataChangeEvent,\r\n    }\r\n}\r\n\r\ninterface DropzoneData {\r\n    getData(): object | null;\r\n}\r\n\r\ninterface DropzoneDataConstructor {\r\n    readonly prototype: DropzoneData;\r\n    new(dropzone: HTMLEDropzoneElement): DropzoneData;\r\n}\r\n\r\nclass DropzoneDataBase {\r\n    private _dropzone: HTMLEDropzoneElement;\r\n\r\n    constructor(dropzone: HTMLEDropzoneElement) {\r\n        this._dropzone = dropzone;\r\n    }\r\n\r\n    public getData(): object | null {\r\n        const data = {};\r\n        const descendantDrozpones = Array.from(this._dropzone.querySelectorAll(\"e-dropzone\"));\r\n        descendantDrozpones.forEach((descendantDrozpone) => {\r\n            let pathName = \"\";\r\n            let dropzone = descendantDrozpone;\r\n            while (dropzone !== this._dropzone) {\r\n                dropzone = dropzone.parentElement!.closest(\"e-dropzone\")!;\r\n                pathName = (pathName) ? `${dropzone.name}.${pathName}` : dropzone.name;\r\n            }\r\n\r\n            let descendantDropzoneData =\r\n                descendantDrozpone.multiple ? descendantDrozpone.draggables.map(draggable => draggable.data) :\r\n                descendantDrozpone.draggables.length > 0 ? descendantDrozpone.draggables[0].data : null;\r\n\r\n            setPropertyFromPath(data, pathName, descendantDropzoneData);\r\n        })\r\n        return data;\r\n    }\r\n}\r\n\r\nvar DropzoneData: DropzoneDataConstructor = DropzoneDataBase;","import { isTagElement } from \"../HTMLElement\";\r\n\r\nexport { FormState };\r\nexport { getFormState };\r\nexport { setFormState };\r\n\r\ninterface FormState {\r\n    [name: string]: {\r\n        value: string | number | boolean | null\r\n    }\r\n};\r\n\r\nconst getFormState = (form: HTMLFormElement) => {\r\n    const elements = Array.from(form.elements);\r\n    const state: FormState = {};\r\n    elements.forEach((element) => {\r\n        if (isTagElement(\"input\", element)) {\r\n            if (element.type === \"radio\") {\r\n                if (typeof state[element.name] === \"undefined\") {\r\n                    state[element.name] = {\r\n                        value: null\r\n                    };\r\n                }\r\n                if (element.checked) {\r\n                    state[element.name] = {\r\n                        value: element.value\r\n                    };\r\n                }\r\n            }\r\n            else if (element.type === \"checkbox\") {\r\n                state[element.name] = {\r\n                    value: element.checked\r\n                };\r\n            }\r\n            else if (element.type === \"number\") {\r\n                let floatValue = parseFloat(element.value);\r\n                state[element.name] = {\r\n                    value: !isNaN(floatValue) ? floatValue : null\r\n                };\r\n            }\r\n            else {\r\n                state[element.name] = {\r\n                    value: (element.value !== \"\") ? element.value : null\r\n                };\r\n            }\r\n        }\r\n        else if (isTagElement(\"select\", element) || isTagElement(\"textarea\", element)) {\r\n            state[element.name] = {\r\n                value: (element.value !== \"\") ? element.value : null\r\n            };\r\n        }\r\n    });\r\n\r\n    return state;\r\n}\r\n\r\nconst setFormState = (form: HTMLFormElement, state: FormState) => {\r\n    const elements = Array.from(form.elements);\r\n    const names = Object.keys(state);\r\n    names.forEach((name) => {\r\n        let namedElements = elements.filter((element) => (element as any).name === name);\r\n        namedElements.forEach((element) => {\r\n            let stateValue = state[name].value;\r\n            if (isTagElement(\"input\", element)) {\r\n                if (element.type === \"radio\") {\r\n                    element.checked = (stateValue !== null && element.value === stateValue.toString());\r\n                }\r\n                else if (element.type === \"checkbox\") {\r\n                    element.checked = !!stateValue;\r\n                }\r\n                else if (element.type === \"number\") {\r\n                    element.value = (stateValue !== null) ? stateValue.toString() : \"\";\r\n                }\r\n                else {\r\n                    element.value = (stateValue !== null) ? stateValue.toString() : \"\";\r\n                }\r\n            }\r\n            else if (isTagElement(\"select\", element) || isTagElement(\"textarea\", element)) {\r\n                element.value = (stateValue !== null) ? stateValue.toString() : \"\";\r\n            }\r\n        });\r\n    });\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../HTMLElement\";\r\n\r\nexport { HTMLEHeightSashElement };\r\nexport { HTMLEHeightSashElementBase };\r\n\r\ninterface HTMLEHeightSashElement extends HTMLElement {\r\n    controls: string;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-hsash\",\r\n    observedAttributes: [\"controls\"]\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"controls\", type: \"string\"},\r\n])\r\nclass HTMLEHeightSashElementBase extends HTMLElement implements HTMLEHeightSashElement {\r\n\r\n    public controls!: string;\r\n\r\n    private _target: HTMLElement | null;\r\n    private _targetStyle: CSSStyleDeclaration | null;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n\r\n                    height: 4px;\r\n                    background-color: rgb(0, 128, 255);\r\n                    cursor: ns-resize;\r\n\r\n                    transition-property: opacity;\r\n                    transition-delay: 0.2s;\r\n                    transition-duration: 0.2s;\r\n                    transition-timing-function: ease-out;\r\n                    opacity: 0;\r\n                }\r\n\r\n                :host(:active),\r\n                :host(:hover) {\r\n                    opacity: 1;\r\n                }\r\n            </style>\r\n        `);\r\n        this._target = null;\r\n        this._targetStyle = null;\r\n    }\r\n\r\n    public connectedCallback(): void {\r\n        let onPointerMove = (event: PointerEvent) => {\r\n            if (this._target && this._targetStyle) {\r\n                let directionToTarget = Math.sign(\r\n                    ((this.getBoundingClientRect().top + this.getBoundingClientRect().bottom) / 2) -\r\n                    ((this._target.getBoundingClientRect().top + this._target.getBoundingClientRect().bottom) / 2)\r\n                );\r\n                let height = parseFloat(this._targetStyle.getPropertyValue(\"height\"));\r\n                let minHeight = parseFloat(this._targetStyle.getPropertyValue(\"min-height\"));\r\n                let maxHeight = parseFloat(this._targetStyle.getPropertyValue(\"max-height\"));\r\n                let newHeight = Math.trunc(height + directionToTarget * event.movementY);\r\n                if (!isNaN(minHeight)) {\r\n                    newHeight = Math.max(newHeight, minHeight);\r\n                }\r\n                if (!isNaN(maxHeight)) {\r\n                    newHeight = Math.min(newHeight, maxHeight);\r\n                }\r\n                this._target.style.setProperty(\"height\", `${newHeight}px`);\r\n                this.dispatchEvent(new CustomEvent(\"resize\"));\r\n            }\r\n        };\r\n\r\n        this.addEventListener(\"pointerdown\", (event: PointerEvent) => {\r\n            this.setPointerCapture(event.pointerId);\r\n            this.addEventListener(\"pointermove\", onPointerMove);\r\n            this.addEventListener(\"pointerup\", (event: PointerEvent) => {\r\n                this.removeEventListener(\"pointermove\", onPointerMove);\r\n                this.releasePointerCapture(event.pointerId);\r\n            }, {once: true});\r\n        });\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (newValue !== oldValue) {\r\n            switch (name) {\r\n                case \"controls\":\r\n                    if (oldValue !== newValue) {\r\n                        const target = document.getElementById(this.controls);\r\n                        if (target) {\r\n                            this._target = target;\r\n                            this._targetStyle = window.getComputedStyle(target);\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-hsash\": HTMLEHeightSashElement,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"resize\": CustomEvent,\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors } from \"../HTMLElement\";\r\n\r\nexport { HTMLEImportElement };\r\nexport { HTMLEImportElementBase };\r\n\r\ninterface HTMLEImportElement extends HTMLElement {\r\n    src: string;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-import\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"src\", type: \"string\"}\r\n])\r\nclass HTMLEImportElementBase extends HTMLElement {\r\n\r\n    public src!: string;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n    \r\n    public connectedCallback(): void {\r\n        const importRequest = async (src: string) => {\r\n            this.outerHTML = await fetch(src).then((response: Response) => {\r\n                if (response.ok) {\r\n                    return response.text();\r\n                }\r\n                else {\r\n                    throw new Error(response.statusText);\r\n                }\r\n            });\r\n            this.dispatchEvent(new CustomEvent(\"load\"));\r\n        }\r\n        if (this.src) {\r\n            importRequest(this.src);\r\n        }\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-import\": HTMLEImportElement,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"load\": CustomEvent\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../HTMLElement\";\r\n\r\nexport { HTMLELoaderElement };\r\nexport { HTMLELoaderElementBase };\r\n\r\ntype LoaderType = \"bar\" | \"circle\";\r\n\r\ninterface HTMLELoaderElement extends HTMLElement {\r\n    type: LoaderType;\r\n    promise: Promise<any> | null;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-loader\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"type\", type: \"string\"}\r\n])\r\nclass HTMLELoaderElementBase extends HTMLElement implements HTMLELoaderElement {\r\n\r\n    public type!: LoaderType;\r\n    private _promise: Promise<any> | null;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: inline-block;\r\n                }\r\n                \r\n                :host([type=\"bar\"]) {\r\n                    display: inline-block;\r\n                    width: 64px;\r\n                }\r\n\r\n                :host([type]:not([type=\"circle\"])) [part~=\"circle\"] {\r\n                    display: none !important;\r\n                }\r\n                \r\n                :host(:not([type=\"bar\"])) [part~=\"bar\"] {\r\n                    display: none !important;\r\n                }\r\n\r\n                [part~=\"circle\"] {\r\n                    position: relative;\r\n                    width: 12px;\r\n                    height: 12px;\r\n                    border-top: 4px solid var(--loader-color, rgb(0, 128, 255));\r\n                    border-right: 4px solid var(--loader-color, rgb(0, 128, 255));\r\n                    border-left: 4px solid transparent;\r\n                    border-bottom: 4px solid transparent;\r\n                    border-radius: 50%;\r\n                    animation-duration: 1s;\r\n                    animation-name: circle;\r\n                    animation-timing-function: linear;\r\n                    animation-iteration-count: infinite;\r\n                }\r\n\r\n                @keyframes circle {\r\n                    0% {\r\n                        transform: rotate(0);\r\n                    }\r\n                    100% {\r\n                        transform: rotate(360deg);\r\n                    }\r\n                }\r\n\r\n                [part~=\"bar\"] {\r\n                    display: block;\r\n                    position: relative;\r\n                    overflow: hidden;\r\n                }\r\n\r\n                [part~=\"slider\"] {\r\n                    position: relative;\r\n                    display: flex;\r\n                    will-change: transform;\r\n                    animation-duration: 1s;\r\n                    animation-name: slider;\r\n                    animation-timing-function: linear;\r\n                    animation-iteration-count: infinite;\r\n                }\r\n\r\n                [part~=\"cursor\"] {\r\n                    position: relative;\r\n                    display: inline-block;\r\n                    width: 32px;\r\n                    height: 4px;\r\n                    background-color: var(--loader-color, rgb(0, 128, 255));\r\n                    border-radius: 4px;\r\n\r\n                    will-change: transform;\r\n                    animation-duration: 1s;\r\n                    animation-name: cursor;\r\n                    animation-timing-function: linear;\r\n                    animation-iteration-count: infinite;\r\n                }\r\n\r\n                @keyframes slider {\r\n                    0% {\r\n                        transform: translateX(0);\r\n                    }\r\n                    100% {\r\n                        transform: translateX(100%);\r\n                    }\r\n                }\r\n\r\n                @keyframes cursor {\r\n                    0% {\r\n                        transform: translateX(-100%);\r\n                    }\r\n                    100% {\r\n                        transform: translateX(100%);\r\n                    }\r\n                }\r\n            </style>\r\n            <div part=\"bar\">\r\n                <div part=\"slider\">\r\n                    <div part=\"cursor\"></div>\r\n                </div>\r\n            </div>\r\n            <div part=\"circle\"></div>\r\n        `);\r\n        this._promise = null;\r\n    }\r\n\r\n    public set promise(promise: Promise<any> | null) {\r\n        if (promise) {\r\n            promise.finally(() => {\r\n                this.remove();\r\n            });\r\n        }\r\n        this._promise = promise;\r\n    }\r\n\r\n    public get promise(): Promise<any> | null {\r\n        return this._promise;\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-loader\": HTMLELoaderElement,\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../HTMLElement\";\r\n\r\nexport { PaletteElement };\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: 'e-palette'\r\n})\r\n@GenerateAttributeAccessors([{name: 'colors', type: 'json'}])\r\nclass PaletteElement extends HTMLElement {\r\n\r\n    public colors!: Array<string>;\r\n\r\n    constructor() {\r\n        super();\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n                    content: contains;\r\n                }\r\n\r\n               :host #container {\r\n                    display: grid;\r\n                    grid-template-cols: repeat(5, 1fr);\r\n                    grid-auto-rows: 16px;\r\n                }\r\n            </style>\r\n            <div id=\"container\">\r\n            </div>\r\n        `);\r\n    }\r\n\r\n    public connectedCallback() {\r\n                \r\n        const colors = this.colors;\r\n        if (colors.length > 0) {\r\n            this.shadowRoot!.querySelector('#container')!.append(\r\n                ...colors.map((color: string) => {\r\n                    const div = document.createElement('div');\r\n                    div.setAttribute('style', `background-color: ${color}`);                    \r\n                    return div;\r\n                })\r\n            );\r\n        }\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../HTMLElement\";\r\n\r\nexport { HTMLEWidthSashElement };\r\nexport { HTMLEWidthSashElementBase };\r\n\r\ninterface HTMLEWidthSashElement extends HTMLElement {\r\n    controls: string;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-wsash\",\r\n    observedAttributes: [\"controls\"]\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"controls\", type: \"string\"},\r\n])\r\nclass HTMLEWidthSashElementBase extends HTMLElement implements HTMLEWidthSashElement {\r\n\r\n    public controls!: string;\r\n\r\n    private _target: HTMLElement | null;\r\n    private _targetStyle: CSSStyleDeclaration | null;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n\r\n                    width: 4px;\r\n                    background-color: rgb(0, 128, 255);\r\n                    cursor: ew-resize;\r\n\r\n                    transition-property: opacity;\r\n                    transition-delay: 0.2s;\r\n                    transition-duration: 0.2s;\r\n                    transition-timing-function: ease-out;\r\n                    opacity: 0;\r\n                }\r\n\r\n                :host(:active),\r\n                :host(:hover) {\r\n                    opacity: 1;\r\n                }\r\n            </style>\r\n        `);\r\n        this._target = null;\r\n        this._targetStyle = null;\r\n    }\r\n\r\n    public connectedCallback(): void {\r\n        let onPointerMove = (event: PointerEvent) => {\r\n            if (this._target && this._targetStyle) {\r\n                let directionToTarget = Math.sign(\r\n                    ((this.getBoundingClientRect().left + this.getBoundingClientRect().right) / 2) -\r\n                    ((this._target.getBoundingClientRect().right + this._target.getBoundingClientRect().right) / 2)\r\n                );\r\n                let width = parseFloat(this._targetStyle.getPropertyValue(\"width\"));\r\n                let minWidth = parseFloat(this._targetStyle.getPropertyValue(\"min-width\"));\r\n                let maxWidth = parseFloat(this._targetStyle.getPropertyValue(\"max-width\"));\r\n                let newWidth = Math.trunc(width + directionToTarget * event.movementX);\r\n                if (!isNaN(minWidth)) {\r\n                    newWidth = Math.max(newWidth, minWidth);\r\n                }\r\n                if (!isNaN(maxWidth)) {\r\n                    newWidth = Math.min(newWidth, maxWidth);\r\n                }\r\n                this._target.style.setProperty(\"width\", `${newWidth}px`);\r\n                this.dispatchEvent(new CustomEvent(\"resize\"));\r\n            }\r\n        };\r\n\r\n        this.addEventListener(\"pointerdown\", (event: PointerEvent) => {\r\n            this.setPointerCapture(event.pointerId);\r\n            this.addEventListener(\"pointermove\", onPointerMove);\r\n            this.addEventListener(\"pointerup\", (event: PointerEvent) => {\r\n                this.removeEventListener(\"pointermove\", onPointerMove);\r\n                this.releasePointerCapture(event.pointerId);\r\n            }, {once: true});\r\n        });\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (newValue !== oldValue) {\r\n            switch (name) {\r\n                case \"controls\":\r\n                    if (oldValue !== newValue) {\r\n                        const target = document.getElementById(this.controls);\r\n                        if (target) {\r\n                            this._target = target;\r\n                            this._targetStyle = window.getComputedStyle(target);\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-wsash\": HTMLEWidthSashElement,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"resize\": CustomEvent,\r\n    }\r\n}","import { EventDispatcher, Event } from \"../events/EventDispatcher\";\r\n\r\nexport { ObjectModelChangeEvent };\r\nexport { ObjectModel };\r\nexport { ObjectModelBase };\r\nexport { ListModelChangeEvent };\r\nexport { ListModelChangeType };\r\nexport { ListModel };\r\nexport { ListModelBase };\r\n\r\ninterface ObjectModelChangeEvent {\r\n    type: \"objectmodelchange\";\r\n    data: {\r\n        property: string;\r\n        oldValue: any;\r\n        newValue: any;\r\n    };\r\n}\r\n\r\ninterface ObjectModelChangeEvents {\r\n    \"objectmodelchange\": ObjectModelChangeEvent;\r\n}\r\n\r\ninterface ObjectModel<Data extends object> extends EventDispatcher<ObjectModelChangeEvents> {\r\n    readonly data: Readonly<Data>;\r\n    setData<K extends keyof Data>(key: K, value: Data[K]): void;\r\n}\r\n\r\nclass ObjectModelBase<Data extends object> extends EventDispatcher<ObjectModelChangeEvents> implements ObjectModel<Data> {\r\n    private _data: Data;\r\n\r\n    constructor(data: Data) {\r\n        super();\r\n        this._data = data;\r\n    }\r\n\r\n    public get data(): Readonly<Data> {\r\n        return this._data;\r\n    }\r\n\r\n    public setData<K extends keyof Data>(key: K, value: Data[K]): void {\r\n        let oldValue = this._data[key];\r\n        this._data[key] = value;\r\n        this.dispatchEvent(new Event(\"objectmodelchange\", {property: key, oldValue: oldValue, newValue: value}));\r\n    }\r\n}\r\n\r\ntype ListModelChangeType = \"insert\" | \"remove\" | \"clear\";\r\n\r\ninterface ListModelChangeEvent {\r\n    type: \"listmodelchange\";\r\n    data: {\r\n        index: number;\r\n        addedItems: any[];\r\n        removedItems: any[];\r\n    };\r\n}\r\n\r\ninterface ListModelEvents {\r\n    \"listmodelchange\": ListModelChangeEvent;\r\n}\r\n\r\ninterface ListModel<Item> extends EventDispatcher<ListModelEvents> {\r\n    readonly items: ReadonlyArray<Item>;\r\n    insertItem(index: number, item: Item): void;\r\n    removeItem(index: number): void;\r\n    clearItems(): void;\r\n}\r\n\r\nclass ListModelBase<Item> extends EventDispatcher<ListModelEvents> implements ListModel<Item> {\r\n    private _items: Item[];\r\n    \r\n    constructor(items: Item[]) {\r\n        super();\r\n        this._items = items;\r\n    }\r\n\r\n    public get items(): ReadonlyArray<Item> {\r\n        return this._items;\r\n    }\r\n\r\n    public insertItem(index: number, item: Item): void {\r\n        if (index >= 0 && index <= this._items.length) {\r\n            this._items.splice(index, 0, item);\r\n            this.dispatchEvent(new Event(\"listmodelchange\", {addedItems: [item], removedItems: [], index: index}));\r\n        }\r\n    }\r\n\r\n    public removeItem(index: number): void {\r\n        if (index >= 0 && index < this._items.length) {\r\n            let item = this._items.splice(index, 1)[0];\r\n            this.dispatchEvent(new Event(\"listmodelchange\", {addedItems: [], removedItems: [item], index: index}));\r\n        }\r\n    }\r\n\r\n    public clearItems(): void {\r\n        let items = this._items;\r\n        this._items = [];\r\n        this.dispatchEvent(new Event(\"listmodelchange\", {addedItems: [], removedItems: items, index: 0}));\r\n    }\r\n}","import { isTagElement } from \"../elements/HTMLElement\";\r\nimport { setPropertyFromPath } from \"../elements/Snippets\";\r\n\r\nexport { StructuredFormData };\r\n\r\nclass StructuredFormData {\r\n    form: HTMLFormElement;\r\n\r\n    constructor (form: HTMLFormElement) {\r\n        this.form = form;\r\n    }\r\n\r\n    private resolveElementScope(element: HTMLElement & {name: string}): string {\r\n        let fullname = element.name;\r\n        let parent: HTMLElement | null = element.parentElement\r\n        while (parent && parent !== this.form) {\r\n            let scope = parent.dataset.scope;\r\n            if (typeof scope !== \"undefined\") {\r\n                fullname = `${scope}.${fullname}`;\r\n            }\r\n            parent = parent?.parentElement;\r\n        }\r\n        return fullname;\r\n    }\r\n\r\n    public getScopedData(): object {\r\n        let elements = Array.from(this.form.elements);\r\n        let data = {};\r\n        elements.forEach((element) => {\r\n            if (isTagElement(\"input\", element) || isTagElement(\"select\", element) || isTagElement(\"textarea\", element)) {\r\n                if (element.name) {\r\n                    let value: any = null;\r\n                    if (isTagElement(\"input\", element)) {\r\n                        if (element.value) {\r\n                            switch (element.type) {\r\n                                case \"text\":\r\n                                    value = element.value;\r\n                                    break;\r\n                                case \"date\":\r\n                                case \"datetime-local\":\r\n                                    value = element.value;\r\n                                    break;\r\n                                case \"checkbox\":\r\n                                case \"radio\":\r\n                                    value = (element.value == \"on\");\r\n                                    break;\r\n                                default:\r\n                                    value = element.value;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (value !== null) {\r\n                        let fullname = this.resolveElementScope(element);\r\n                        setPropertyFromPath(data, fullname, value);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        return data;\r\n    }\r\n}","import { HTMLEDraggableElement } from \"../../elements/controls/draggable/Draggable\";\r\nimport { HTMLElementConstructor } from \"../../elements/HTMLElement\";\r\n\r\nexport { HTMLDraggableInputTemplateDescription };\r\nexport { HTMLDraggableInputTemplate };\r\n\r\ntype HTMLDraggableInputTemplateDescription =\r\n    & Partial<Pick<HTMLEDraggableElement, 'id' | 'className'>>\r\n    & Partial<Pick<HTMLInputElement, 'name'>>;\r\n\r\ninterface HTMLDraggableInputTemplate {\r\n    (desc: HTMLDraggableInputTemplateDescription): HTMLEDraggableElement;\r\n}\r\n\r\nconst HTMLDraggableInputTemplate: HTMLDraggableInputTemplate = (desc: HTMLDraggableInputTemplateDescription) => {\r\n    return HTMLElementConstructor(\r\n        \"e-draggable\", {\r\n            props: {\r\n                id: desc.id,\r\n                className: desc.className\r\n            },\r\n            children: [\r\n                HTMLElementConstructor(\"input\", {\r\n                    props: {\r\n                        name: desc.name,\r\n                        hidden: true\r\n                    }\r\n                })\r\n            ]\r\n        }\r\n    );\r\n}","import { HTMLElementConstructor } from \"../../elements/HTMLElement\";\r\n\r\nexport { HTMLTableTemplateDescription };\r\nexport { HTMLTableTemplate };\r\n\r\ntype HTMLTableTemplateDescription = Partial<Pick<HTMLTableElement, \"id\" | \"className\">> & {\r\n    headerCells: (string | Node)[];\r\n\r\n    bodyCells: ((string | Node) | {\r\n        type: \"header\" | \"data\" | undefined\r\n        content: Node | string\r\n    })[][];\r\n\r\n    footerCells: (string | Node | {\r\n        type: \"header\" | \"data\" | undefined\r\n        content: Node | string\r\n    })[];\r\n}\r\n\r\ninterface HTMLTableTemplate {\r\n    (desc: HTMLTableTemplateDescription): HTMLTableElement;\r\n}\r\n\r\nconst HTMLTableTemplate: HTMLTableTemplate = (desc: HTMLTableTemplateDescription) => {\r\n    \r\n    const thead = HTMLElementConstructor(\r\n        \"thead\", {\r\n            children: [\r\n                HTMLElementConstructor(\r\n                \"tr\", {\r\n                    props: {\r\n                        id: desc.id,\r\n                        className: desc.className,\r\n                    },\r\n                    children: desc.headerCells.map((cell) => {\r\n                        return HTMLElementConstructor(\r\n                            \"th\", {\r\n                                props: {\r\n                                    scope: \"col\" \r\n                                },\r\n                                children: [\r\n                                    cell\r\n                                ]\r\n                            }\r\n                        );\r\n                    })\r\n                })\r\n            ]\r\n        }\r\n    );\r\n\r\n    const tbody = HTMLElementConstructor(\r\n        \"tbody\", {\r\n            children: desc.bodyCells.map((row) => {\r\n                return HTMLElementConstructor(\r\n                \"tr\", {\r\n                    props: {\r\n                        id: desc.id,\r\n                        className: desc.className,\r\n                    },\r\n                    children: row.map((cell) => {\r\n                        if ((typeof cell === \"object\") && !(cell instanceof Node) && (\"type\" in cell)) {\r\n                            switch (cell.type) {\r\n                                case \"data\":\r\n                                default:\r\n                                    return HTMLElementConstructor(\r\n                                        \"td\", {\r\n                                            children: [\r\n                                                cell.content\r\n                                            ]\r\n                                        }\r\n                                    );\r\n                                case \"header\":\r\n                                    return HTMLElementConstructor(\r\n                                        \"th\", {\r\n                                            props: {\r\n                                                scope: \"row\" \r\n                                            },\r\n                                            children: [\r\n                                                cell.content\r\n                                            ]\r\n                                        }\r\n                                    );\r\n                            }\r\n                        }\r\n                        else {\r\n                            return HTMLElementConstructor(\r\n                                \"td\", {\r\n                                    children: [\r\n                                        cell\r\n                                    ]\r\n                                }\r\n                            );\r\n                        }\r\n                    })\r\n                })\r\n            })\r\n        }\r\n    );\r\n\r\n    const tfoot = HTMLElementConstructor(\r\n        \"tfoot\", {\r\n            children: [\r\n                HTMLElementConstructor(\r\n                \"tr\", {\r\n                    props: {\r\n                        id: desc.id,\r\n                        className: desc.className,\r\n                    },\r\n                    children: desc.footerCells.map((cell) => {\r\n                        if ((typeof cell === \"object\") && !(cell instanceof Node) && (\"type\" in cell)) {\r\n                            switch (cell.type) {\r\n                                case \"data\":\r\n                                default:\r\n                                    return HTMLElementConstructor(\r\n                                        \"td\", {\r\n                                            children: [\r\n                                                cell.content\r\n                                            ]\r\n                                        }\r\n                                    );\r\n                                case \"header\":\r\n                                    return HTMLElementConstructor(\r\n                                        \"th\", {\r\n                                            props: {\r\n                                                scope: \"row\" \r\n                                            },\r\n                                            children: [\r\n                                                cell.content\r\n                                            ]\r\n                                        }\r\n                                    );\r\n                            }\r\n                        }\r\n                        else {\r\n                            return HTMLElementConstructor(\r\n                                \"td\", {\r\n                                    children: [\r\n                                        cell\r\n                                    ]\r\n                                }\r\n                            );\r\n                        }\r\n                    })\r\n                })\r\n            ]\r\n        }\r\n    );\r\n\r\n    const table = HTMLElementConstructor(\r\n        \"table\", {\r\n            props: {\r\n                id: desc.id,\r\n                className: desc.className,\r\n            },\r\n            children: [\r\n                thead,\r\n                tbody,\r\n                tfoot\r\n            ]\r\n        }\r\n    );\r\n\r\n    return table;\r\n}","import { isParentNode, isReactiveParentNode, isReactiveNode } from \"../elements/HTMLElement\";\r\nimport { forAllSubtreeNodes } from \"../elements/Snippets\";\r\n\r\nexport { ViewBase };\r\nexport { View };\r\n\r\ninterface View<M extends object, E extends HTMLElement> {\r\n    readonly element: E;\r\n    readonly model: M;\r\n    close(): void;\r\n    render(): E;\r\n}\r\n\r\nabstract class ViewBase<M extends object, E extends HTMLElement> implements View<M, E> {\r\n    private _element: E;\r\n    private _model: M;\r\n    private _observer: MutationObserver;\r\n\r\n    constructor(model: M) {\r\n        this._model = model;\r\n        this._element = this.render();\r\n        this._observer = new MutationObserver((mutations: MutationRecord[]) => {\r\n            mutations.forEach((record: MutationRecord) => {\r\n                Array.from(record.removedNodes).map((node) => {\r\n                    this._removeReactiveListeners(node);\r\n                });\r\n                Array.from(record.addedNodes).map((node) => {\r\n                    this._addReactiveListeners(node);\r\n                });\r\n            });\r\n        });\r\n        this._observer.observe(this._element, {\r\n            subtree: true,\r\n            childList: true\r\n        });\r\n        this._addReactiveListeners(this._element);\r\n    }\r\n\r\n    public get element(): E {\r\n        return this._element;\r\n    }\r\n\r\n    public close(): void {\r\n        this._element.remove();\r\n        this._observer.disconnect();\r\n        this._removeReactiveListeners(this._element);\r\n    }\r\n\r\n    public get model(): M {\r\n        return this._model;\r\n    }\r\n\r\n    public abstract render(): E;\r\n\r\n    private _addReactiveListeners(node: Node): void {\r\n        if (isReactiveParentNode(node) || isReactiveNode(node)) {\r\n            const { _reactModel, _reactEvent, _reactListener } = node._reactAttributes; \r\n            _reactModel.addEventListener(_reactEvent as any, _reactListener as any);\r\n        }\r\n        if (isParentNode(node)) {\r\n            forAllSubtreeNodes(node, (childNode) => {\r\n                this._addReactiveListeners(childNode);\r\n            });\r\n        }\r\n    }\r\n\r\n    private _removeReactiveListeners(node: Node): void {\r\n        if (isReactiveParentNode(node) || isReactiveNode(node)) {\r\n            const { _reactModel, _reactEvent, _reactListener } = node._reactAttributes; \r\n            _reactModel.removeEventListener(_reactEvent as any, _reactListener as any);\r\n        }\r\n        if (isParentNode(node)) {\r\n            forAllSubtreeNodes(node, (childNode) => {\r\n                this._removeReactiveListeners(childNode);\r\n            });\r\n        }\r\n    }\r\n}","import * as editor from \"../index\";\r\nimport { formdata } from \"./formdata\";\r\n\r\nexport async function main() {\r\n    console.log(\"Main loaded!\");\r\n    (window as {[key: string]: any})[\"editor\"] = editor;\r\n    let formDataImport = document.getElementById(\"formdata-import\");\r\n    if (formDataImport) {\r\n        formDataImport.addEventListener(\"load\", () => {\r\n            formdata();\r\n        });\r\n    }\r\n}","import { getFormState, setFormState } from \"../src/elements/forms/Snippets\";\r\n\r\nexport function formdata() {\r\n    const exportButton = document.getElementById(\"export-button\");\r\n    const loadButton = document.getElementById(\"load-button\");\r\n\r\n    exportButton?.addEventListener(\"click\", () => {\r\n        const form = exportButton!.closest(\"form\");\r\n        if (form) {\r\n            let formState = getFormState(form);\r\n            let dataBlob = new Blob([JSON.stringify(formState, null, 4)], {type: \"application/json\"});\r\n            let donwloadAnchor = document.createElement(\"a\");\r\n            donwloadAnchor.href = URL.createObjectURL(dataBlob);\r\n            donwloadAnchor.download = \"config.json\";\r\n            donwloadAnchor.click();\r\n        }\r\n    });\r\n\r\n    loadButton?.addEventListener(\"click\", () => {\r\n        const form = exportButton!.closest(\"form\");\r\n        if (form) {\r\n            let input = document.createElement(\"input\");\r\n            input.type = \"file\";\r\n            input.addEventListener(\"change\", () => {\r\n                let file = input.files ? input.files.length > 0 ? input.files.item(0) : null : null;\r\n                if (file) {\r\n                    file.text().then((resp) => {\r\n                        let formState = JSON.parse(resp);\r\n                        const form = exportButton!.closest(\"form\");\r\n                        if (form) {\r\n                            setFormState(form, formState);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n            input.click();\r\n        }\r\n    });\r\n}"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","isUndoCommand","exec","undo","EventBase","constructor","type","data","this","Event","EventDispatcherBase","_listeners","Map","addEventListener","event","handler","once","listeners","toString","newListener","set","find","listener","push","removeEventListener","count","length","idx","findIndex","pop","delete","dispatchEvent","filter","EventDispatcher","forAllSubtreeElements","element","func","index","children","child","item","forAllSubtreeNodes","parent","childNodes","hasChildNodes","getPropertyFromPath","src","path","props","split","forEach","includes","parseInt","substring","indexOf","Number","isNaN","console","error","Array","isArray","setPropertyFromPath","lastPropIdx","pointIntersectsWithDOMRect","x","y","rect","left","right","top","bottom","isTagElement","tagName","Node","nodeType","ELEMENT_NODE","toLowerCase","parseStringTemplate","template","items","regexp","itemsKeys","keys","result","resultNodes","lastResultIndex","document","createTextNode","fragment","DocumentFragment","append","RegisterCustomHTMLElement","args","elementCtor","name","observedAttributes","options","customElements","define","GenerateAttributeAccessors","attributes","attr","getAttribute","setAttribute","removeAttribute","val","JSON","parse","stringify","parseFloat","createTemplate","templateContent","createElement","innerHTML","content","bindShadowRoot","root","attachShadow","mode","appendChild","cloneNode","Fragment","nodes","HTMLElementConstructor","init","setElementProperties","attrs","setElementAttributes","setElementChildren","setHTMLElementEventListeners","Element","styles","property","style","setProperty","setHTMLElementStyles","isParentNode","node","isElement","isReactiveNode","testNode","_reactAttributes","_reactEvent","isReactiveParentNode","ReactiveNode","object","react","assign","_reactModel","_reactListener","oldValue","newValue","ReactiveChildNodes","list","map","removedItems","i","remove","addedItems","addedElements","before","entries","entry","textContent","properties","areAttributesMatching","refAttributeType","refAttrName","refAttrValue","attrName","attrValue","RegExp","test","AttributeMutationMixinBase","attributeName","attributeType","attributeValue","createMutationObserverCallback","mixins","mutationsList","mutation","addedNodes","childElement","mixin","attach","removedNodes","detach","target","targetElement","Key","KeyModifier","MouseButton","displayKeyModifier","Control","testKeyModifier","mod","altKey","ctrlKey","shiftKey","HotKey","mod1","mod2","toUpperCase","HTMLEMenuItemGroupTemplate","desc","descArgs","HTMLEMenuItemTemplate","id","className","HTMLEMenuTemplate","itemDesc","slotted","menu","slot","title","label","disabled","checked","command","commandArgs","hotkey","HTMLEMenubarTemplate","tabIndex","EditorBase","super","_commands","_context","_hotkeys","_undoCommandsCallStack","_redoCommandsCallStack","menubar","statusbar","_state","_stateListeners","setup","menubarContainer","getElementById","body","querySelector","from","detail","oldHotKey","removeHotkeyExec","trigger","bind","newHotKey","addHotkeyExec","Promise","all","resolve","reject","fetch","then","response","ok","json","setContext","context","getState","setState","state","startsWith","charAt","stateListeners","newStateValue","stateListener","addStateListener","statekey","removeStateListener","splice","registerCommand","executeCommand","opts","undoLastCommand","lastCommand","redoLastCommand","hotkeys","HTMLEMenuElementBase","HTMLElement","parentItem","_activeIndex","_style","activeIndex","connectedCallback","window","getComputedStyle","shadowRoot","assignedElements","elem","parentMenu","targetIndex","reset","focus","focusItemAt","thisIntersectsWithMouse","clientX","clientY","getBoundingClientRect","contains","expanded","newTarget","relatedTarget","activeItem","stopPropagation","parentGroup","group","childMenu","attributeChangedCallback","clientWidth","overflowing","findItem","predicate","subitems","foundItem","HTMLEMenuBarElementBase","activeElement","active","preventDefault","subtree","HTMLEMenuButtonElementBase","menuSlot","menuElem","toggle","capture","alert","CustomEvent","bubbles","labelPart","HTMLEMenuItemElementBase","_hotkey","hotkeyPart","inputPart","HTMLEMenuItemGroupElementBase","checkedRadio","PanelElement","arrow","arr","innerWidth","render","PanelGroupElement","toggler","HTMLEStatusBarElementBase","_selectedItemIndex","selectedItemIndex","insertItem","Math","min","max","insertBefore","selectItem","findItems","clearSelection","selectedItem","HTMLEStatusItemElementBase","_stateMap","stateMap","update","activate","isHTMLETabPanelElement","BaseHTMLETabPanelElement","BaseHTMLETabElement","panel","controls","hidden","tab","BaseHTMLETabListElement","tabs","focusTabAt","activeTab","activateTab","thisTab","thisTabIndex","findTab","HTMLETreeItemElementBase","indent","_toggleArrow","iconPart","dataset","deepestVisibleChildItem","previousVisibleItem","indexOfThis","nextVisibleItem","nearestItem","nearestParentItem","indexOfNearest","HTMLETreeElementBase","_activeItem","preventScroll","closestItem","closest","HTMLEBreadcrumbItemElementBase","separatorArrowUrl","HTMLEBreadcrumbTrailElementBase","activateItem","itemIndex","HTMLEDraggableElementBase","draggable","HTMLEDragzoneElementBase","draggables","selectedDraggables","selectDraggable","selected","unselectDraggable","thisSelectedDraggable","dragged","dataTransfer","effectAllowed","setData","thisDraggedDraggable","button","firstIndex","direction","sign","fromIndex","toIndex","startRangeIndex","endRangeIndex","thisDraggable","HTMLEDropzoneElementBase","droptest","appendAreaPart","removeDraggables","dragovered","dropIndex","dragzoneId","getData","dragzone","selectedDraggable","addDraggables","placeholderPart","position","dataTransferSuccess","newDraggables","insertionPosition","multiple","newDraggable","insertAdjacentElement","replaceChild","action","toRemove","atPosition","DropzoneDataBase","dropzone","_dropzone","querySelectorAll","descendantDrozpone","pathName","parentElement","descendantDropzoneData","DropzoneData","getFormState","form","elements","floatValue","setFormState","stateValue","HTMLEHeightSashElementBase","_target","_targetStyle","onPointerMove","directionToTarget","height","getPropertyValue","minHeight","maxHeight","newHeight","trunc","movementY","setPointerCapture","pointerId","releasePointerCapture","HTMLEImportElementBase","async","outerHTML","text","Error","statusText","importRequest","HTMLELoaderElementBase","_promise","promise","finally","PaletteElement","colors","color","div","HTMLEWidthSashElementBase","width","minWidth","maxWidth","newWidth","movementX","ObjectModelBase","_data","ListModelBase","_items","removeItem","clearItems","StructuredFormData","resolveElementScope","fullname","scope","getScopedData","HTMLDraggableInputTemplate","HTMLTableTemplate","thead","headerCells","cell","tbody","bodyCells","row","tfoot","footerCells","ViewBase","model","_model","_element","_observer","MutationObserver","mutations","record","_removeReactiveListeners","_addReactiveListeners","observe","childList","close","disconnect","childNode","main","log","formDataImport","exportButton","loadButton","formState","dataBlob","Blob","donwloadAnchor","href","URL","createObjectURL","download","click","input","file","files","resp","formdata"],"sourceRoot":""}