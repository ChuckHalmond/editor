{"version":3,"file":"main.js","mappings":"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","sources":["webpack://main/webpack/bootstrap","webpack://main/webpack/runtime/define property getters","webpack://main/webpack/runtime/hasOwnProperty shorthand","webpack://main/webpack/runtime/make namespace object","webpack://main/./src/views/widgets/Widget.ts","webpack://main/./src/models/Model.ts","webpack://main/./src/elements/Snippets.ts","webpack://main/./src/elements/Element.ts","webpack://main/./src/views/View.ts","webpack://main/./src/views/widgets/menu/MenuItemWidget.ts","webpack://main/./src/views/widgets/menu/MenuWidget.ts","webpack://main/./src/views/widgets/toolbar/ToolBarItemWidget.ts","webpack://main/./src/views/widgets/tree/TreeItemWidget.ts","webpack://main/./src/views/widgets/tree/TreeWidget.ts","webpack://main/./src/views/TreeeView.ts","webpack://main/./src/elements/containers/actions/Action.ts","webpack://main/./src/Input.ts","webpack://main/./src/elements/containers/grid/GridCell.ts","webpack://main/./src/elements/containers/grid/GridRowGroup.ts","webpack://main/./src/elements/containers/menus/MenuItem.ts","webpack://main/./src/elements/containers/menus/MenuItemGroup.ts","webpack://main/./src/elements/containers/menus/Menu.ts","webpack://main/./src/elements/containers/grid/GridRow.ts","webpack://main/./src/elements/containers/grid/GridCellCollection.ts","webpack://main/./src/elements/containers/grid/GridRowCollection.ts","webpack://main/./src/elements/containers/grid/GridBody.ts","webpack://main/./src/elements/containers/grid/Grid.ts","webpack://main/./src/elements/containers/grid/GridHead.ts","webpack://main/./src/elements/containers/menus/MenuBar.ts","webpack://main/./src/elements/containers/menus/MenuButton.ts","webpack://main/./src/elements/controls/forms/Option.ts","webpack://main/./src/elements/controls/forms/OptionGroup.ts","webpack://main/./src/elements/controls/forms/OptionCollection.ts","webpack://main/./src/elements/controls/forms/Select.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItem.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItemGroup.ts","webpack://main/./src/elements/containers/toolbars/ToolBar.ts","webpack://main/./src/elements/containers/tabs/TabPanel.ts","webpack://main/./src/elements/containers/tabs/Tab.ts","webpack://main/./src/elements/containers/tabs/TabList.ts","webpack://main/./src/elements/containers/trees/TreeItemGroup.ts","webpack://main/./src/elements/containers/trees/TreeItem.ts","webpack://main/./src/elements/containers/trees/Tree.ts","webpack://main/./src/elements/containers/lists/ListItem.ts","webpack://main/./src/elements/containers/lists/ListItemGroup.ts","webpack://main/./src/elements/containers/lists/List.ts","webpack://main/./src/elements/controls/draggable/Draggable.ts","webpack://main/./src/elements/controls/draggable/Dragzone.ts","webpack://main/./src/elements/controls/draggable/Dropzone.ts","webpack://main/./src/elements/controls/dialogs/Dialog.ts","webpack://main/./src/elements/utils/Handle.ts","webpack://main/./src/elements/utils/HeightSash.ts","webpack://main/./src/elements/utils/Import.ts","webpack://main/./src/elements/utils/Loader.ts","webpack://main/./src/elements/utils/WidthSash.ts","webpack://main/./src/observers/AttributeMixinsObserver.ts","webpack://main/./src/views/widgets/SeparatorWidget.ts","webpack://main/./src/views/widgets/menu/MenuBarWidget.ts","webpack://main/./src/views/widgets/menu/MenuItemGroupWidget.ts","webpack://main/./src/views/widgets/tree/TreeItemGroupWidget.ts","webpack://main/./src/views/widgets/list/ListItemWidget.ts","webpack://main/./src/views/widgets/list/ListWidget.ts","webpack://main/./src/views/widgets/list/ListItemGroupWidget.ts","webpack://main/./src/views/widgets/toolbar/ToolBarWidget.ts","webpack://main/./src/views/widgets/toolbar/ToolBarItemGroupWidget.ts","webpack://main/./src/views/widgets/grid/GridCellWidget.ts","webpack://main/./src/views/widgets/grid/GridRowWidget.ts","webpack://main/./src/views/widgets/grid/GridWidget.ts","webpack://main/./src/views/widgets/grid/GridHeaderWidget.ts","webpack://main/./src/views/widgets/combobox/OptionWidget.ts","webpack://main/./src/views/widgets/combobox/ComboBoxWidget.ts","webpack://main/./src/views/widgets/combobox/OptionGroupWidget.ts","webpack://main/./src/views/ListView.ts","webpack://main/./src/views/GridView.ts","webpack://main/./main.ts","webpack://main/./src/Editor.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export { WidgetFactoryConstructor };\r\n\r\nexport { WidgetFactory };\r\nexport { widgets };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {}\r\n}\r\n\r\ninterface WidgetFactoryConstructor {\r\n    readonly prototype: WidgetFactory;\r\n    new(): WidgetFactory;\r\n}\r\n\r\ninterface WidgetFactory {\r\n    create(init?: object): HTMLElement;\r\n    slot(root: HTMLElement, name: string | null): HTMLElement | null;\r\n}\r\n\r\nvar slotsMap: WeakMap<HTMLElement, {\r\n    widget: WidgetFactory,\r\n    element: WeakRef<HTMLElement>;\r\n    slot: string | null;\r\n}[]> = new WeakMap();\r\nvar slotsObserver = new MutationObserver(\r\n    (mutationsList: MutationRecord[]) => {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            if (target instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"childList\": {\r\n                        const slotReferences = slotsMap.get(target);\r\n                        if (slotReferences) {\r\n                            slotReferences.forEach(slotRef_i => {\r\n                                const {widget, element, slot} = slotRef_i;\r\n                                const slottedCallback = (widget as any)[\"slottedCallback\"];\r\n                                if (typeof slottedCallback == \"function\") {\r\n                                    slottedCallback(element.deref(), target, slot);\r\n                                }\r\n                            });\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n);\r\n\r\nvar widgetsMap: WeakMap<HTMLElement, WidgetFactory> = new WeakMap();\r\nvar attributesObserver = new MutationObserver(\r\n    (mutationsList: MutationRecord[]) => {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            if (target instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"attributes\": {\r\n                        const {attributeName, oldValue} = mutation;\r\n                        const widget = widgetsMap.get(target);\r\n                        if (widget) {\r\n                            const attributeChangedCallback = (widget as any)[\"attributeChangedCallback\"];\r\n                            if (typeof attributeChangedCallback == \"function\") {\r\n                                attributeChangedCallback(target, attributeName, oldValue, target.getAttribute(attributeName!));\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n);\r\n\r\nclass WidgetFactoryBase implements WidgetFactory {\r\n\r\n    constructor() {\r\n        const widget = <WidgetFactory>this;\r\n        this.create = new Proxy(\r\n            this.create, {\r\n                apply: (target, thisArg, argumentsList) => {\r\n                    const element = Reflect.apply(target, thisArg, argumentsList);\r\n                    const observedSlots = <(string | null)[]>(widget as any)[\"observedSlots\"];\r\n                    if (Array.isArray(observedSlots)) {\r\n                        const slots = observedSlots\r\n                            .map(slotName_i => {\r\n                                return {\r\n                                    slotName: slotName_i,\r\n                                    slotElement: widget.slot(element, slotName_i)\r\n                                };\r\n                            });\r\n                        slots.forEach(slot_i => {\r\n                            const {slotElement, slotName} = slot_i;\r\n                            if (slotElement) {\r\n                                slotsObserver.observe(slotElement, {\r\n                                    childList: true\r\n                                });\r\n                                const slotReferences = slotsMap.get(slotElement);\r\n                                const slotReference = {widget, element: new WeakRef(element), slot: slotName};\r\n                                if (Array.isArray(slotReferences)) {\r\n                                    slotReferences.push(slotReference);\r\n                                }\r\n                                else {\r\n                                    slotsMap.set(slotElement, new Array(slotReference));\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                    const observedAttributes = (widget as any)[\"observedAttributes\"];\r\n                    if (Array.isArray(observedAttributes)) {\r\n                        widgetsMap.set(element, widget);\r\n                        attributesObserver.observe(element, {\r\n                            attributes: true,\r\n                            attributeFilter: observedAttributes,\r\n                            attributeOldValue: true\r\n                        });\r\n                    }\r\n                    return element;\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    create(): HTMLElement {\r\n        throw new Error(`create method is not implemented`);\r\n    }\r\n\r\n    slot(): HTMLElement | null {\r\n        return null;\r\n    }\r\n\r\n    get observedSlots(): string[] {\r\n        return [\"_\"];\r\n    }\r\n}\r\n\r\nvar WidgetFactory: WidgetFactoryConstructor = WidgetFactoryBase;\r\nvar widgets: Map<string, WidgetFactory> = new Map();","export { ModelChangeRecord };\r\nexport { ModelEvent };\r\nexport { ModelNode };\r\nexport { ModelObject };\r\nexport { ModelProperty };\r\nexport { ModelList };\r\nexport { ModelChangeObserverOptions };\r\nexport { ModelChangeObserver };\r\n\r\ninterface ModelChangeRecordConstructor {\r\n    readonly prototype: ModelChangeRecord;\r\n    new(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ): ModelChangeRecord;\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\ninterface ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly changeType: number;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\nclass ModelChangeRecordBase implements ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList;\r\n    readonly changeType: number;\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n\r\n    constructor(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ) {\r\n        this.target = init.target;\r\n        this.changeType = init.changeType;\r\n        this.propertyName = init.propertyName ?? null;\r\n        this.oldValue = init.oldValue ?? void 0;\r\n        this.newValue = init.newValue ?? void 0;\r\n        this.removedIndex = init.removedIndex ?? 0;\r\n        this.removedItems = new ModelNodesList(init.removedItems ?? []);\r\n        this.insertedIndex = init.insertedIndex ?? 0;\r\n        this.insertedItems = new ModelNodesList(init.insertedItems ?? []);\r\n        this.sortedIndices = init.sortedIndices ?? [];\r\n    }\r\n\r\n    static get PROPERTY_CHANGE(): number {\r\n        return 1;\r\n    }\r\n\r\n    static get LIST_REMOVE(): number {\r\n        return 2;\r\n    }\r\n\r\n    static get LIST_INSERT(): number {\r\n        return 3;\r\n    }\r\n\r\n    static get LIST_SORT(): number {\r\n        return 4;\r\n    }\r\n\r\n    get PROPERTY_CHANGE(): number {\r\n        return ModelChangeRecordBase.PROPERTY_CHANGE;\r\n    }\r\n\r\n    get LIST_REMOVE(): number {\r\n        return ModelChangeRecordBase.LIST_REMOVE;\r\n    }\r\n\r\n    get LIST_INSERT(): number {\r\n        return ModelChangeRecordBase.LIST_INSERT;\r\n    }\r\n\r\n    get LIST_SORT(): number {\r\n        return ModelChangeRecordBase.LIST_SORT;\r\n    }\r\n}\r\n\r\nvar ModelChangeRecord: ModelChangeRecordConstructor = ModelChangeRecordBase;\r\n\r\ninterface ModelNodesListConstructor {\r\n    readonly prototype: ModelNodesList;\r\n    new(items: any[]): ModelNodesList;\r\n}\r\n\r\ninterface ModelNodesList {\r\n    get length(): number;\r\n    item(index: number): ModelNode | null;\r\n    values(): IterableIterator<ModelNode>;\r\n}\r\n\r\nclass ModelNodesListBase implements ModelNodesList {\r\n    #items: ModelNode[];\r\n\r\n    constructor(items: ModelNode[]) {\r\n        this.#items = items.slice();\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    item(index: number): ModelNode | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    values(): IterableIterator<ModelNode> {\r\n        return this.#items.values();\r\n    }\r\n}\r\n\r\nvar ModelNodesList: ModelNodesListConstructor = ModelNodesListBase;\r\n\r\ninterface ModelEventConstructor {\r\n    readonly prototype: ModelEvent;\r\n    new(type: string): ModelEvent;\r\n}\r\n\r\ninterface ModelEvent {\r\n    readonly type: string;\r\n    readonly currentTarget: ModelEventTarget | null;\r\n    readonly target: ModelEventTarget | null;\r\n}\r\n\r\nclass ModelEventBase implements ModelEvent {\r\n    readonly type: string;\r\n\r\n    #currentTarget: ModelEventTarget | null;\r\n    #target: ModelEventTarget | null;\r\n\r\n    constructor(type: string) {\r\n        this.type = type;\r\n        this.#currentTarget = null;\r\n        this.#target = null;\r\n    }\r\n\r\n    get currentTarget(): ModelEventTarget | null {\r\n        return this.#currentTarget;\r\n    }\r\n\r\n    get target(): ModelEventTarget | null {\r\n        return this.#target;\r\n    }\r\n\r\n    static ModelEventTargetAccessor? = new class ModelEventTargetAccessor {\r\n        setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#currentTarget = currentTarget;\r\n            }\r\n        }\r\n\r\n        setTarget(event: ModelEvent, target: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#target = target;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface ModelEventTargetAccessor {\r\n    setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void;\r\n    setTarget(event: ModelEvent, target: ModelEventTarget): void;\r\n}\r\n\r\nvar ModelEventTargetAccessor: ModelEventTargetAccessor = ModelEventBase.ModelEventTargetAccessor!;\r\ndelete ModelEventBase.ModelEventTargetAccessor;\r\n\r\nvar ModelEvent: ModelEventConstructor = ModelEventBase;\r\n\r\ninterface ModelEventTargetConstructor {\r\n    readonly prototype: ModelEventTarget;\r\n    new(): ModelEventTarget;\r\n}\r\n\r\ninterface ModelEventTarget {\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    dispatchEvent(event: ModelEvent): void;\r\n    receiveEvent(event: ModelEvent): void;\r\n}\r\n\r\nclass ModelEventTargetBase implements ModelEventTarget {\r\n    #callbacks: Map<string, ((event: ModelEvent) => void)[]>;\r\n\r\n    constructor() {\r\n        this.#callbacks = new Map();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        const {type} = event;\r\n        const callbacks = this.#callbacks.get(type);\r\n        ModelEventTargetAccessor.setCurrentTarget(event, this);\r\n        if (callbacks) {\r\n            callbacks.forEach((callback_i) => {\r\n                callback_i(event);\r\n            });\r\n        }\r\n    }\r\n\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            callbacks.push(callback);\r\n        }\r\n        else {\r\n            this.#callbacks.set(type, [callback]);\r\n        }\r\n    }\r\n\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            const callbackIndex = callbacks.findIndex(\r\n                callback_i => callback_i == callback\r\n            );\r\n            if (callbackIndex > -1) {\r\n                callbacks.splice(callbackIndex, 1);\r\n            }\r\n            if (callbacks.length == 0) {\r\n                this.#callbacks.delete(type);\r\n            }\r\n        }\r\n    }\r\n\r\n    dispatchEvent(event: ModelEvent): void {\r\n        ModelEventTargetAccessor.setTarget(event, this);\r\n        this.receiveEvent(event);\r\n    }\r\n}\r\n\r\nvar ModelEventTarget: ModelEventTargetConstructor = ModelEventTargetBase;\r\n\r\ninterface ModelNodeConstructor {\r\n    readonly prototype: ModelNode;\r\n    new(): ModelNode;\r\n}\r\n\r\ninterface ModelNode extends ModelEventTarget {\r\n    readonly parentNode: ModelNode | null;\r\n    setParent(parentNode: ModelNode | null): void;\r\n    getRecords(): ModelChangeRecord[];\r\n    beginChanges(): void;\r\n    endChanges(): void;\r\n}\r\n\r\ninterface ModelNodeRecordsAccessor {\r\n    triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void;\r\n    handleRecord(node: ModelNode, record: ModelChangeRecord): void;\r\n}\r\n\r\nclass ModelNodeBase extends ModelEventTargetBase implements ModelNode {\r\n    #parentNode: ModelNode | null;\r\n    #records: ModelChangeRecord[];\r\n    #isRecording: boolean;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#parentNode = null;\r\n        this.#records = [];\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    get parentNode(): ModelNode | null {\r\n        return this.#parentNode;\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        if (parentNode !== null) {\r\n            let isCyclicReference = parentNode == this;\r\n            let {parentNode: ancestorNode} = parentNode;\r\n            while (!isCyclicReference && ancestorNode !== null) {\r\n                ({parentNode: ancestorNode} = ancestorNode);\r\n                isCyclicReference = ancestorNode == this;\r\n            }\r\n            if (!isCyclicReference) {\r\n                this.#parentNode = parentNode;\r\n            }\r\n            else {\r\n                throw new TypeError(\"Failed to set parent on ModelNode: circular reference detected in the hierarchy.\");\r\n            }\r\n        }\r\n        else {\r\n            this.#parentNode = null;\r\n        }\r\n    }\r\n    \r\n    beginChanges(): void {\r\n        this.#isRecording = true;\r\n    }\r\n\r\n    endChanges(): void {\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        this.#records.splice(0);\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    getRecords(): ModelChangeRecord[] {\r\n        return this.#records.slice();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        super.receiveEvent(event);\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            parentNode.receiveEvent(event);\r\n        }\r\n    }\r\n\r\n    #triggerChange(property: string, oldValue: any, newValue: any): void {\r\n        const records = this.#records;\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.PROPERTY_CHANGE,\r\n            propertyName: property,\r\n            oldValue, newValue\r\n        });\r\n        records.push(record);\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        records.splice(0);\r\n    }\r\n\r\n    #handleRecord(record: ModelChangeRecord): void {\r\n        this.#records.push(record);\r\n        if (!this.#isRecording) {\r\n            this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n            this.#records.splice(0);\r\n        }\r\n    }\r\n\r\n    static ModelNodeRecordsAccessor? = new class ModelNodeRecordsAccessor {\r\n        triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#triggerChange(property, oldValue, newValue);\r\n            }\r\n        }\r\n\r\n        handleRecord(node: ModelNode, record: ModelChangeRecord): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#handleRecord(record);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelNodeRecordsAccessor: ModelNodeRecordsAccessor = ModelNodeBase.ModelNodeRecordsAccessor!;\r\ndelete ModelNodeBase.ModelNodeRecordsAccessor;\r\n\r\nvar ModelNode: ModelNodeConstructor = ModelNodeBase;\r\n\r\ninterface ModelPropertyDecorator {\r\n    (\r\n        init?: {\r\n            type: typeof String | typeof Number | typeof Boolean | typeof Date | typeof Object\r\n        }\r\n    ): <Model extends ModelObject>(target: Model, property: string) => void;\r\n}\r\n\r\nconst ModelProperty: ModelPropertyDecorator = function(\r\n    init?: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Date | typeof Object\r\n    }\r\n) {\r\n    return (\r\n        target: ModelObject, property: string\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        /*const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n        if (Array.isArray(observedAttributes)) {\r\n            observedAttributes.push(property);\r\n        }\r\n        else {\r\n            Object.defineProperty(\r\n                constructor, \"observedAttributes\", {\r\n                    value: [property],\r\n                    writable: false\r\n                }\r\n            );\r\n        }*/\r\n        const setter = function(this: ModelObject, value: any) {\r\n            const oldValue = ModelObjectPropertiesAccessor.getProperty(this, property);\r\n            ModelObjectPropertiesAccessor.setProperty(this, property, value);\r\n            if (value !== oldValue) {\r\n                ModelNodeRecordsAccessor.triggerChange(this, property, oldValue, value);\r\n            }\r\n            return true;\r\n        };\r\n        const getter = function(this: ModelObject) {\r\n            return ModelObjectPropertiesAccessor.getProperty(this, property);\r\n        };\r\n        Object.defineProperty(prototype, property, {\r\n            set: setter,\r\n            get: getter,\r\n            enumerable: true\r\n        });\r\n    }\r\n}\r\n\r\ninterface ModelObjectConstructor {\r\n    readonly prototype: ModelObject;\r\n    new(): ModelObject;\r\n}\r\n\r\ninterface ModelObject extends ModelNode {}\r\n\r\ninterface ModelObjectPropertiesAccessor {\r\n    setProperty(node: ModelNode, property: string, value: any): void;\r\n    getProperty(node: ModelNode, property: string,): any;\r\n}\r\n\r\nclass ModelObjectBase extends ModelNodeBase implements ModelObject {\r\n    #properties: Map<string, any>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#properties = new Map();\r\n    }\r\n\r\n    static ModelObjectPropertiesAccessor? = new class ModelPropertiesAccessor {\r\n        setProperty(node: ModelObject, property: string, value: any): void {\r\n            if (node instanceof ModelObjectBase) {\r\n                node.#properties.set(property, value);\r\n            }\r\n        }\r\n\r\n        getProperty(node: ModelObject, property: string): any {\r\n            if (node instanceof ModelObjectBase) {\r\n                return node.#properties.get(property);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelObjectPropertiesAccessor: ModelObjectPropertiesAccessor = ModelObjectBase.ModelObjectPropertiesAccessor!;\r\ndelete ModelObjectBase.ModelObjectPropertiesAccessor;\r\n\r\nvar ModelObject: ModelObjectConstructor = ModelObjectBase;\r\n\r\ninterface ModelListConstructor {\r\n    readonly prototype: ModelList;\r\n    new<Model extends ModelNode>(): ModelList<Model>;\r\n    new<Model extends ModelNode>(items: Model[]): ModelList<Model>;\r\n}\r\n\r\ninterface ModelList<Model extends ModelNode = ModelNode> extends ModelNode {\r\n    readonly parentNode: ModelNode | null;\r\n    readonly length: number;\r\n    index(items: Model): number;\r\n    index(items: Model, fromIndex: number): number;\r\n    get(index: number): Model | null;\r\n    values(): IterableIterator<Model>;\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void;\r\n    insert(index: number, ...items: Model[]): void;\r\n    prepend(...items: Model[]): void;\r\n    append(...items: Model[]): void;\r\n    remove(item: Model): void;\r\n    clear(): void;\r\n}\r\n\r\nclass ModelListBase<Model extends ModelNode = ModelNode> extends ModelNodeBase implements ModelList<Model> {\r\n    #items: Model[];\r\n\r\n    constructor()\r\n    constructor(items: Model[])\r\n    constructor(items?: Model[]) {\r\n        super();\r\n        this.#items = items?.slice() ?? [];\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        super.setParent(parentNode);\r\n        this.#items.forEach((item_i) => {\r\n            item_i.setParent(parentNode);\r\n        });\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    get(index: number): Model | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    index(item: Model, fromIndex?: number): number {\r\n        return this.#items.indexOf(item, fromIndex)\r\n    }\r\n\r\n    values(): IterableIterator<Model> {\r\n        return this.#items.values();\r\n    }\r\n\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void {\r\n        const items = this.#items;\r\n        const indexedItems = items.map(\r\n            (item_i, i) => {\r\n                return {\r\n                    item: item_i,\r\n                    index: i\r\n                };\r\n            }\r\n        );\r\n        indexedItems.sort(\r\n            (indexedItem_a, indexedItem_b) => {\r\n                return compareFunction(\r\n                    indexedItem_a.item, indexedItem_b.item\r\n                )\r\n            }\r\n        );\r\n        this.#items = indexedItems.map(indexedItem_i => indexedItem_i.item);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_SORT,\r\n            sortedIndices: indexedItems.map(indexedItem_i => indexedItem_i.index)\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    prepend(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.splice(0, 0, ...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: 0,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    append(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.push(...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: length,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    insert(index: number, ...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const positiveIndex = Math.abs(index);\r\n        if (positiveIndex <= length) {\r\n            if (index >= 0) {\r\n                const {parentNode} = this;\r\n                items.forEach(item_i => {\r\n                    item_i.setParent(parentNode);\r\n                });\r\n                if (index < length) {\r\n                    _items.splice(index, 0, ...items);\r\n                }\r\n                else {\r\n                    _items.push(...items);\r\n                }\r\n            }\r\n            else if (index < 0) {\r\n                index = length - index;\r\n                const {parentNode} = this;\r\n                if (parentNode) {\r\n                    items.forEach(item_i => {\r\n                        item_i.setParent(parentNode);\r\n                    });\r\n                }\r\n                _items.splice(index, 0, ...items);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_INSERT,\r\n                insertedIndex: index,\r\n                insertedItems: items.slice()\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    remove(item: Model): void {\r\n        const _items = this.#items;\r\n        const index = _items.indexOf(item);\r\n        if (index > -1) {\r\n            const item = _items.splice(index, 1)[0];\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                item.setParent(null);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: index,\r\n                removedItems: [item]\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    clear(): void {\r\n        const items = this.#items;\r\n        const {length} = items;\r\n        if (length > 0) {\r\n            const removedItems = items.splice(0);\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                removedItems.forEach((removedItem_i) => {\r\n                    removedItem_i.setParent(null);\r\n                });\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: 0,\r\n                removedItems: removedItems\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n};\r\n\r\nvar ModelList: ModelListConstructor = ModelListBase!;\r\n\r\ninterface ModelChangeObserverConstructor {\r\n    readonly prototype: ModelChangeObserver;\r\n    new(callback: (records: ModelChangeRecord[]) => void): ModelChangeObserver;\r\n}\r\n\r\ninterface ModelChangeObserver {\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void;\r\n    unobserve(node: ModelNode): void;\r\n    disconnect(): void;\r\n}\r\n\r\ntype ModelChangeObserverOptions = {\r\n    properties?: boolean;\r\n    propertiesFilter?: string[];\r\n    childList?: boolean;\r\n    subtree?: boolean;\r\n}\r\n\r\nclass ModelChangeObserverBase implements ModelChangeObserver {\r\n    #callback: (records: ModelChangeRecord[]) => void;\r\n    #records: ModelChangeRecord[];\r\n    #disconnected: boolean;\r\n\r\n    #references: WeakMap<ModelNode, {\r\n        listener: (event: ModelEvent) => void,\r\n        options: ModelChangeObserverOptions\r\n    }>;\r\n\r\n    constructor(callback: (records: ModelChangeRecord[]) => void) {\r\n        this.#callback = callback;\r\n        this.#records = [];\r\n        this.#disconnected = false;\r\n        this.#references = new WeakMap();\r\n    }\r\n\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void {\r\n        this.#disconnected = false;\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (!reference) {\r\n            const listener = this.#handleModelEvent.bind(this);\r\n            node.addEventListener(\"modelchange\", listener);\r\n            reference = {listener, options};\r\n            references.set(node, reference);\r\n        }\r\n        else {\r\n            references.set(node, reference);\r\n        }\r\n    }\r\n\r\n    unobserve(node: ModelNode): void {\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (reference) {\r\n            const {listener} = reference;\r\n            node.removeEventListener(\"modelchange\", listener);\r\n        }\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#records.splice(0);\r\n        this.#disconnected = true;\r\n    }\r\n\r\n    #trigger(): void {\r\n        const records = this.#records.splice(0);\r\n        if (records.length > 0) {\r\n            this.#callback(records);\r\n        }\r\n    }\r\n\r\n    #handleModelEvent(event: ModelEvent): void {\r\n        if (!this.#disconnected) {\r\n            const {target, currentTarget} = event;\r\n            const reference = this.#references.get(<ModelNode>currentTarget);\r\n            if (reference) {\r\n                const {options} = reference;\r\n                const {properties, propertiesFilter, childList, subtree} = options;\r\n                if (subtree) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n                else if (target == currentTarget) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelChangeObserver: ModelChangeObserverConstructor = ModelChangeObserverBase;","export { getPropertyFromPath };\r\nexport { setPropertyFromPath };\r\nexport { snakeToCamel };\r\nexport { camelToSnake };\r\nexport { trainToCamel };\r\nexport { camelToTrain };\r\n\r\nfunction getPropertyFromPath(src: object, path: string): any {\r\n  const props = path.split(\".\");\r\n  let obj: {[key: string]: any} | undefined  = src;\r\n  props.forEach((prop) => {\r\n    if (prop.includes(\"[\")) {\r\n      const index = parseInt(prop.substring(prop.indexOf(\"[\") + 1, prop.indexOf(\"]\")));\r\n      if (Number.isNaN(index)) {\r\n        console.error(`Wrong indexed path: ${prop}`);\r\n      }\r\n      prop = prop.substring(0, prop.indexOf(\"[\"));\r\n      if (typeof obj == \"object\" && prop in obj && Array.isArray(obj[prop])) {\r\n        obj = obj[prop][index];\r\n      }\r\n    }\r\n    else if (typeof obj == \"object\" && prop in obj) {\r\n      obj = obj[prop];\r\n    }\r\n    else {\r\n      obj = void 0;\r\n    }\r\n  });\r\n  return obj;\r\n}\r\n\r\nfunction setPropertyFromPath(src: object, path: string, value: any): object {\r\n  const props = path.split(\".\");\r\n  let obj: {[key: string]: any} = src;\r\n  if (src == null) {\r\n    console.error(\"Source data can't be null\");\r\n  }\r\n  props.forEach((prop, idx) => {\r\n    if (prop.includes(\"[\")) {\r\n      const index = parseInt(prop.substring(prop.indexOf(\"[\") + 1, prop.indexOf(\"]\")));\r\n      if (Number.isNaN(index)) {\r\n        console.error(`Wrong indexed path: ${prop}`);\r\n      }\r\n      prop = prop.substring(0, prop.indexOf(\"[\"));\r\n      if (!Array.isArray(obj[prop])) {\r\n        obj[prop] = [];\r\n      }\r\n      if (idx == props.length - 1) {\r\n        obj[prop][index] = value;\r\n      }\r\n      else {\r\n        if (typeof obj[prop][index] !== \"object\") {\r\n          obj[prop][index] = {}\r\n        }\r\n        obj = obj[prop][index];\r\n      }\r\n    }\r\n    else {\r\n      if (idx == props.length - 1) {\r\n        obj[prop] = value;\r\n      }\r\n      else {\r\n        if (typeof obj[prop] !== \"object\") {\r\n          obj[prop] = {}\r\n        }\r\n        obj = obj[prop];\r\n      }\r\n    }\r\n  });\r\n  return src;\r\n}\r\n\r\nfunction snakeToCamel(str: string) {\r\n  return str.split('_').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToSnake(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '_').toLowerCase();\r\n}\r\n\r\nfunction trainToCamel(str: string) {\r\n  return str.split('-').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToTrain(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '-').toLowerCase();\r\n}","import { widgets, WidgetFactoryConstructor } from \"../views/widgets/Widget\";\r\nimport { ModelList, ModelNode, ModelChangeRecord, ModelChangeObserver, ModelChangeObserverOptions } from \"../models/Model\";\r\nimport { camelToTrain } from \"./Snippets\";\r\n\r\nexport { subtreeNodes };\r\nexport { ancestorNodes };\r\nexport { CustomElement };\r\nexport { Widget };\r\nexport { widget };\r\nexport { QueryProperty };\r\nexport { QueryAllProperty };\r\nexport { AttributeProperty };\r\nexport { reactiveElement };\r\nexport { reactiveChildElements };\r\nexport { element };\r\nexport { fragment };\r\nexport { textNode };\r\nexport { AttributeMutationMixin };\r\nexport { AttributeType };\r\nexport { areAttributesMatching };\r\nexport { AttributeMutationMixinBase };\r\nexport { trimMultilineIndent };\r\nexport { Stylesheet };\r\n\r\ninterface AttributePropertyDecorator {\r\n    (\r\n        init: {\r\n            type: typeof String;\r\n            observed?: boolean;\r\n            defaultValue?: string | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Number;\r\n            observed?: boolean;\r\n            defaultValue?: number | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Boolean;\r\n            observed?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Object;\r\n            observed?: boolean;\r\n            defaultValue?: any | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n}\r\n\r\nconst AttributeProperty: AttributePropertyDecorator = function(\r\n    init: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Object;\r\n        observed?: boolean;\r\n        defaultValue?: string | number | any | null;\r\n    }\r\n) {\r\n    return <E extends HTMLElement>(\r\n        target: E, property: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = property.toString();\r\n        const attributeName = camelToTrain(propertyName);\r\n        const defaultValue = init.defaultValue ?? null;\r\n        const observed = init.observed ?? false;\r\n        if (observed) {\r\n            const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n            if (Array.isArray(observedAttributes)) {\r\n                observedAttributes.push(attributeName);\r\n            }\r\n            else {\r\n                Object.defineProperty(\r\n                    constructor, \"observedAttributes\", {\r\n                        value: [attributeName],\r\n                        writable: false\r\n                    }\r\n                );\r\n            }\r\n        }\r\n        const {type} = init;\r\n        switch (type) {\r\n            case Boolean: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        return this.hasAttribute(attributeName);\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value) {\r\n                            this.setAttribute(attributeName, \"\");\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Object: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? JSON.parse(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, JSON.stringify(value));\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Number: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? parseFloat(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case String:\r\n            default: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? val : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n    \r\nfunction Stylesheet(text: string): CSSStyleSheet {\r\n    const stylesheet = new CSSStyleSheet();\r\n    (stylesheet as any).replaceSync(text);\r\n    return stylesheet;\r\n}\r\n\r\nfunction trimMultilineIndent(text: string): string {\r\n    const newlineIndex = text.indexOf(\"\\n\");\r\n    text = text.substring(newlineIndex + 1);\r\n    const indentMatch = text.match(/^[\\s]*/);\r\n    if (indentMatch) {\r\n        const indent = text.substring(0, indentMatch[0].length);\r\n        text = text.replaceAll(indent, \"\").trimEnd();\r\n    }\r\n    return text;\r\n}\r\n\r\ninterface CustomElementDecorator {\r\n    (init: {\r\n        name: string;\r\n        options?: ElementDefinitionOptions\r\n    }): <C extends CustomElementConstructor>(elementCtor: C) => C;\r\n}\r\n\r\nconst CustomElement: CustomElementDecorator = function(init: {\r\n    name: string;\r\n    options?: ElementDefinitionOptions\r\n}) {\r\n    return <C extends CustomElementConstructor>(\r\n        elementCtor: C\r\n    ) => {\r\n        const {name, options} = init;\r\n        if (!customElements.get(name)) {\r\n            customElements.define(\r\n                name,\r\n                elementCtor,\r\n                options\r\n            );\r\n        }\r\n        return elementCtor;\r\n    }\r\n}\r\n\r\ninterface WidgetDecorator {\r\n    (init: {\r\n        name: string;\r\n    }): <W extends WidgetFactoryConstructor>(widget: W) => W;\r\n}\r\n\r\nconst Widget: WidgetDecorator = function(init: {\r\n    name: string;\r\n}) {\r\n    return <W extends WidgetFactoryConstructor>(\r\n        widget: W\r\n    ) => {\r\n        const {name} = init;\r\n        widgets.set(\r\n            name,\r\n            new widget()\r\n        );\r\n        return widget;\r\n    }\r\n}\r\n\r\nfunction *subtreeNodes(node: Node): Generator<Node> {\r\n    yield node;\r\n    const childNodes = node.childNodes;\r\n    const childNodesCount = childNodes.length;\r\n    let childIndex = 0;\r\n    while (childIndex < childNodesCount) {\r\n        const child = childNodes.item(childIndex);\r\n        if (child !== null) {\r\n            yield * subtreeNodes(child);\r\n        }\r\n        childIndex++;\r\n    }\r\n}\r\n\r\nfunction *ancestorNodes(node: Node): Generator<Node> {\r\n    const {parentNode} = node;\r\n    if (parentNode) {\r\n        yield parentNode;\r\n        yield *ancestorNodes(parentNode);\r\n    }\r\n}\r\n\r\ninterface QueryPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryProperty: QueryPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = propertyKey.toString();\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return this.shadowRoot!.querySelector(selector);\r\n        } : function(this: HTMLElement) {\r\n            return this.querySelector(selector);\r\n        }\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\ninterface QueryAllPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryAllProperty: QueryAllPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = propertyKey.toString();\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return Array.from(this.shadowRoot!.querySelectorAll(selector));\r\n        } : function(this: HTMLElement) {\r\n            return Array.from(this.querySelectorAll(selector));\r\n        };\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\nfunction fragment(...nodes: (Node | string)[]): DocumentFragment {\r\n    const fragment = document.createDocumentFragment();\r\n    fragment.append(...nodes);\r\n    return fragment;\r\n}\r\n\r\nfunction textNode(text: string): Node {\r\n    return document.createTextNode(text);\r\n}\r\n\r\ninterface HTMLElementInit {\r\n    options?: ElementCreationOptions,\r\n    attributes?: {\r\n        [name: string]: number | string | boolean | undefined\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    children?: (Node | string)[] | NodeList | ReactiveChildElements,\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction element<E extends HTMLElementTagNameMap[K], K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): E;\r\nfunction element(\r\n    tagName: string, init?: HTMLElementInit): HTMLElement;\r\nfunction element<K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): HTMLElementTagNameMap[K] {\r\n    if (init) {\r\n        const {options, attributes, dataset, children, listeners} = init;\r\n        const element = document.createElement(tagName, options);\r\n        if (attributes) {\r\n            Object.keys(attributes).forEach((attributeName) => {\r\n                const attributeValue = attributes[attributeName];\r\n                if (attributeValue !== void 0) {\r\n                    if (typeof attributeValue == \"boolean\") {\r\n                        element.toggleAttribute(camelToTrain(attributeName), attributeValue);\r\n                    }\r\n                    else {\r\n                        element.setAttribute(camelToTrain(attributeName), attributeValue.toString());\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        if (dataset) {\r\n            const {dataset: elementDataset} = element;\r\n            Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                elementDataset[datasetEntry_i] = dataset[datasetEntry_i].toString();\r\n            });\r\n        }\r\n        if (children) {\r\n            if (typeof children == \"function\") {\r\n                element.append(...children(element));\r\n            }\r\n            else {\r\n                element.append(...Array.from(children));\r\n            }\r\n        }\r\n        if (listeners) {\r\n            Object.entries(listeners).forEach(([name_i, listener_i]) => {\r\n                if (Array.isArray(listener_i)) {\r\n                    element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                }\r\n                else {\r\n                    element.addEventListener(name_i, listener_i);\r\n                }\r\n            });\r\n        }\r\n        return element;\r\n    }\r\n    return document.createElement(tagName);\r\n}\r\n\r\ninterface WidgetInit<K extends keyof WidgetNameMap> {\r\n    properties?: Parameters<WidgetNameMap[K][\"create\"]>[0],\r\n    attributes?: {\r\n        [name: string]: number | string | boolean | undefined\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    slotted?: {\r\n        [slot: string]: (Node | string)[] | NodeList | ReactiveChildElements\r\n    } | ((Node | string)[] | NodeList | ReactiveChildElements),\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: K, init?: WidgetInit<K>): ReturnType<WidgetNameMap[K][\"create\"]>;\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: K, init?: WidgetInit<K>): HTMLElement {\r\n    const widget = widgets.get(name);\r\n    if (widget) {\r\n        const element = <HTMLElement>widget.create(init?.properties);\r\n        if (init) {\r\n            const {attributes, dataset, slotted, listeners} = init;\r\n            if (attributes) {\r\n                Object.keys(attributes).forEach((attributeName) => {\r\n                    const attributeValue = attributes[attributeName];\r\n                    if (attributeValue !== void 0) {\r\n                        if (typeof attributeValue == \"boolean\") {\r\n                            element.toggleAttribute(camelToTrain(attributeName), attributeValue);\r\n                        }\r\n                        else {\r\n                            element.setAttribute(camelToTrain(attributeName), attributeValue.toString());\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            if (dataset) {\r\n                const {dataset: elementDataset} = element;\r\n                Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                    elementDataset[datasetEntry_i] = dataset[datasetEntry_i].toString();\r\n                });\r\n            }\r\n            if (slotted) {\r\n                if (typeof slotted == \"function\" || Array.isArray(slotted) || slotted instanceof NodeList) {\r\n                    const slot = widget.slot(element, null);\r\n                    if (slot) {\r\n                        if (typeof slotted == \"function\") {\r\n                            slot.append(...slotted(element));\r\n                        }\r\n                        else {\r\n                            slot.append(...Array.from(slotted));\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    Object.entries(slotted).forEach(([slot_i, slotted]) => {\r\n                        const slot = widget.slot(element, slot_i);\r\n                        if (slot) {\r\n                            if (typeof slotted == \"function\") {\r\n                                slot.append(...slotted(element));\r\n                            }\r\n                            else {\r\n                                slot.append(...Array.from(slotted));\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            if (listeners) {\r\n                Object.entries(listeners).forEach(([name_i, listener_i]) => {\r\n                    if (Array.isArray(listener_i)) {\r\n                        element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                    }\r\n                    else {\r\n                        element.addEventListener(name_i, listener_i);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return element;\r\n    }\r\n    throw new Error(`Unknown widget ${name}.`);\r\n}\r\n\r\nconst reactiveElementsMap = new WeakMap<ModelNode, {\r\n    observerOptions: ModelChangeObserverOptions,\r\n    reactiveElementsArray: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }[]\r\n}>();\r\n\r\nconst reactiveElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    model: ModelNode,\r\n    reactiveElement: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }\r\n}) => {\r\n    const {model, reactiveElement} = heldValue;\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    if (reactiveElementsMapEntry !== void 0) {\r\n        const {reactiveElementsArray} = reactiveElementsMapEntry;\r\n        reactiveElementsArray.splice(reactiveElementsArray.indexOf(reactiveElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveElementsPropertyObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    records.forEach((record_i) => {\r\n        const {target, propertyName, oldValue, newValue} = record_i;\r\n        const {reactiveElementsArray} = reactiveElementsMap.get(target)!;\r\n        reactiveElementsArray.forEach(reactiveElement_i => {\r\n            const {elementRef, react, properties} = reactiveElement_i;\r\n            const element = elementRef.deref();\r\n            if (element) {\r\n                if (properties.includes(propertyName!)) {\r\n                    react(element, propertyName!, oldValue, newValue);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveElement<M extends ModelNode, E extends Element, K extends string>(\r\n    model: M,\r\n    element: E,\r\n    properties: K[],\r\n    react: (object: E, property: K, oldValue: any, newValue: any) => void\r\n): E;\r\nfunction reactiveElement<M extends ModelNode, E extends Element>(\r\n    model: M,\r\n    element: E,\r\n    properties: string[],\r\n    react: (element: E, property: string, oldValue: any, newValue: any) => void\r\n): E {\r\n    const elementRef = new WeakRef(element);\r\n    const reactiveElement = {elementRef, react, properties};\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    reactiveElementsFinalizationRegistry.register(element, {model, reactiveElement});\r\n    if (!reactiveElementsMapEntry) {\r\n        const observerOptions = {\r\n            properties: true,\r\n            propertiesFilter: properties\r\n        };\r\n        const reactiveElementsArray = [reactiveElement];\r\n        reactiveElementsMap.set(model, {observerOptions, reactiveElementsArray});\r\n        reactiveElementsPropertyObserver.observe(model, observerOptions);\r\n    }\r\n    else {\r\n        const {reactiveElementsArray, observerOptions} = reactiveElementsMapEntry;\r\n        const {propertiesFilter} = observerOptions;\r\n        reactiveElementsArray.push(reactiveElement);\r\n        observerOptions.propertiesFilter = propertiesFilter ?\r\n            propertiesFilter.concat(properties.filter(\r\n                property_i => !propertiesFilter.includes(property_i)\r\n            )) : Array.from(new Set(properties));\r\n    }\r\n    properties.forEach((property_i) => {\r\n        if (property_i in model) {\r\n            const value = Reflect.get(model, property_i, model);\r\n            if (value !== void 0) {\r\n                react(element, <any>property_i, <any>void 0, value);\r\n            }\r\n        }\r\n    });\r\n    return element;\r\n}\r\n\r\ninterface ReactiveChildElements {\r\n    (parent: Node & ParentNode): (Node | string)[]\r\n}\r\n\r\nconst reactiveChildElementsMap = new WeakMap<ModelList, {\r\n    reactiveChildElementsArray: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }[]\r\n}>();\r\n\r\nconst reactiveChildElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    list: ModelList,\r\n    reactiveChildElement: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }\r\n}) => {\r\n    const {list, reactiveChildElement} = heldValue;\r\n    const reactiveChildrenElementsMapEntry = reactiveChildElementsMap.get(list);\r\n    if (reactiveChildrenElementsMapEntry) {\r\n        const {reactiveChildElementsArray} = reactiveChildrenElementsMapEntry;\r\n        reactiveChildElementsArray.splice(reactiveChildElementsArray.indexOf(reactiveChildElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveChildElementsObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    let range: null | Range = null;\r\n    Array.from(records.values()).forEach((record_i) => {\r\n        const {target} = record_i;\r\n        const list = <ModelList>target;\r\n        const {length: listLength} = list;\r\n        const {reactiveChildElementsArray} = reactiveChildElementsMap.get(list)!;\r\n        reactiveChildElementsArray.forEach((reactiveChildElements_i) => {\r\n            const {parentRef, mapping, placeholder} = reactiveChildElements_i;\r\n            const parent = parentRef.deref();\r\n            if (parent) {\r\n                const {firstChild, children} = parent;\r\n                const {length: childrenCount} = children;\r\n                if (placeholder && listLength > 0 && firstChild == placeholder) {\r\n                    parent.removeChild(placeholder);\r\n                }\r\n                const {changeType, LIST_INSERT, LIST_REMOVE, LIST_SORT} = record_i;\r\n                switch (changeType) {\r\n                    case LIST_INSERT: {\r\n                        const {insertedIndex, insertedItems} = record_i;\r\n                        const insertedItemsArray = Array.from(insertedItems.values()).map(mapping);\r\n                        const {length: childrenCount} = children;\r\n                        if (insertedIndex < childrenCount) {\r\n                            children[insertedIndex].before(...insertedItemsArray);\r\n                        }\r\n                        else {\r\n                            parent.append(...insertedItemsArray);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_REMOVE: {\r\n                        const {removedIndex, removedItems} = record_i;\r\n                        const {length: removedCount} = removedItems;\r\n                        range = range ?? document.createRange();\r\n                        const removeEndIndex = removedIndex + (removedCount - 1);\r\n                        if (removeEndIndex < childrenCount) {\r\n                            range.setStartBefore(children[removedIndex]);\r\n                            range.setEndAfter(children[removeEndIndex]);\r\n                            range.deleteContents();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_SORT: {\r\n                        const {sortedIndices} = record_i;\r\n                        const childrenArray = Array.from(children);\r\n                        parent.append(\r\n                            ...sortedIndices.filter(\r\n                                index_i => index_i < childrenCount\r\n                            ).map(\r\n                                index_i => childrenArray[index_i]\r\n                            )\r\n                        );\r\n                        break;\r\n                    }\r\n                }\r\n                if (listLength == 0 && placeholder) {\r\n                    parent.append(placeholder);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveChildElements<Model extends ModelNode>(\r\n    list: ModelList<Model>,\r\n    mapping: (item: Model) => Element,\r\n    placeholder?: Element\r\n): ReactiveChildElements {\r\n    return (parent: Node & ParentNode) => {\r\n        const parentRef = new WeakRef(parent);\r\n        const reactiveChildElementsMapEntry = reactiveChildElementsMap.get(list);\r\n        const reactiveChildElement = {parentRef, mapping, placeholder};\r\n        reactiveChildElementsFinalizationRegistry.register(parent, {list, reactiveChildElement});\r\n        if (!reactiveChildElementsMapEntry) {\r\n            const reactiveChildElementsArray = [reactiveChildElement];\r\n            reactiveChildElementsMap.set(list, {reactiveChildElementsArray});\r\n            reactiveChildElementsObserver.observe(list, {\r\n                childList: true\r\n            });\r\n        }\r\n        else {\r\n            const {reactiveChildElementsArray} = reactiveChildElementsMapEntry;\r\n            reactiveChildElementsArray.push(reactiveChildElement);\r\n        }\r\n        return list.length == 0 && placeholder ?\r\n            [placeholder] : Array.from(list.values()).map(mapping);\r\n    }\r\n}\r\n\r\ninterface AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n    attach(element: Element): void;\r\n    detach(element: Element): void;\r\n}\r\n\r\ntype AttributeType = \"string\" | \"boolean\" | \"list\";\r\n\r\nfunction areAttributesMatching(\r\n    referenceAttributeType: AttributeType,\r\n    referenceAttributeName: string, referenceAttributeValue: string,\r\n    attributeName: string, attributeValue: string | null): boolean {\r\n    if (referenceAttributeName == attributeName) {\r\n        switch (referenceAttributeType) {\r\n            case \"boolean\":\r\n                return referenceAttributeValue == \"\" && attributeValue == \"\";\r\n            case \"string\":\r\n                return referenceAttributeValue !== \"\" && (referenceAttributeValue == attributeValue);\r\n            case \"list\":\r\n                return (referenceAttributeValue !== \"\" && attributeValue !== null) && new RegExp(`${referenceAttributeValue}\\s*?`, \"g\").test(attributeValue );\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nclass AttributeMutationMixinBase implements AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n\r\n    constructor(attributeName: string, attributeType: AttributeType = \"boolean\", attributeValue: string = \"\") {\r\n        this.attributeName = attributeName;\r\n        this.attributeType = attributeType;\r\n        this.attributeValue = attributeValue;\r\n    }\r\n\r\n    attach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n\r\n    detach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n}","import { ModelObject } from \"../models/Model\";\r\n\r\nexport { View };\r\n\r\ninterface View extends HTMLElement {\r\n    readonly model: ModelObject | null;\r\n    setModel(model: ModelObject): void;\r\n    renderShadow(): Node | undefined;\r\n    renderLight(): Node | undefined;\r\n    refresh(): void;\r\n}\r\n\r\ninterface ViewConstructor {\r\n    readonly prototype: View;\r\n    new(): View;\r\n}\r\n\r\nclass ViewBase extends HTMLElement implements View {\r\n    #model: ModelObject | null;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#model = null;\r\n    }\r\n\r\n    get model(): ModelObject | null {\r\n        return this.#model;\r\n    }\r\n    \r\n    setModel(model: ModelObject): void {\r\n        this.#model = model;\r\n        this.#render();            \r\n    }\r\n\r\n    renderLight(): Node | undefined {\r\n        return;\r\n    }\r\n\r\n    renderShadow(): Node | undefined {\r\n        return;\r\n    }\r\n\r\n    refresh(): void {\r\n        this.#render();\r\n    }\r\n\r\n    #render(): void {\r\n        const {shadowRoot} = this;\r\n        const shadow = this.renderShadow();\r\n        if (shadow) {\r\n            if (shadowRoot) {\r\n                shadowRoot.replaceChildren(shadow);\r\n            }\r\n        }\r\n        const light = this.renderLight();\r\n        if (light) {\r\n            this.replaceChildren(light);\r\n        }\r\n    }\r\n}\r\n\r\nvar View: ViewConstructor = ViewBase;","import { Widget, element } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuItemWidget };\r\n\r\ntype MenuItemType = \"button\" | \"radio\" | \"checkbox\" | \"menu\" | \"submenu\";\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menuitem\": MenuItemWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        type?: MenuItemType;\r\n        checked?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void;\r\n    getMenu(item: HTMLElement): HTMLElement | null;\r\n    getKeyShortcut(item: HTMLElement): string | null;\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    getType(item: HTMLElement): MenuItemType | null;\r\n    setType(item: HTMLElement, type: MenuItemType): void;\r\n    getValue(item: HTMLElement): string;\r\n    setValue(item: HTMLElement, value: string): void;\r\n    getName(item: HTMLElement): string;\r\n    setName(item: HTMLElement, value: string): void;\r\n    getChecked(item: HTMLElement): boolean;\r\n    setChecked(item: HTMLElement, value: boolean): void;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setExpanded(item: HTMLElement, value: boolean): void;\r\n    getExpanded(item: HTMLElement): boolean;\r\n    toggle(item: HTMLElement, force?: boolean): void;\r\n    expand(item: HTMLElement): void;\r\n    collapse(item: HTMLElement): void;\r\n}\r\n\r\nvar menuItemWidget = new(\r\nWidget({\r\n    name: \"menuitem\"\r\n})(\r\nclass MenuItemWidgetFactoryBase extends WidgetFactory implements MenuItemWidgetFactory {\r\n    #iconPartTemplate: HTMLElement;\r\n    #arrowPartTemplate : HTMLElement;\r\n    #keyshortcutsPartTemplate: HTMLElement;\r\n    #template: HTMLElement;\r\n    #types: MenuItemType[];\r\n    #typesFeatures: {\r\n        [key in MenuItemType]: {\r\n            role: string,\r\n            hasIcon: boolean,\r\n            hasArrow: boolean\r\n        }\r\n    };\r\n\r\n    constructor() {\r\n        super();\r\n        this.#iconPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"icon\"\r\n            }\r\n        });\r\n        this.#arrowPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"arrow\"\r\n            }\r\n        });\r\n        this.#keyshortcutsPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"keyshortcuts\"\r\n            }\r\n        });\r\n        this.#template = element(\"button\", {\r\n            attributes: {\r\n                class: \"menuitem\",\r\n                role: \"menuitem\",\r\n                type: \"button\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                this.#iconPartTemplate.cloneNode(true),\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n        this.#types = [\"checkbox\", \"radio\", \"menu\", \"submenu\", \"button\"];\r\n        this.#typesFeatures = {\r\n            button: {\r\n                role: \"menuitem\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            checkbox: {\r\n                role: \"menuitemcheckbox\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            radio: {\r\n                role: \"menuitemradio\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            menu: {\r\n                role: \"menuitem\",\r\n                hasIcon: false,\r\n                hasArrow: false\r\n            },\r\n            submenu: {\r\n                role: \"menuitem\",\r\n                hasIcon: true,\r\n                hasArrow: true\r\n            }\r\n        }\r\n    }\r\n\r\n    create(init?: {\r\n        type: MenuItemType;\r\n        checked?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (init !== void 0) {\r\n            const {keyshortcut, checked, type, label, name, value, disabled} = init;\r\n            if (keyshortcut !== void 0) {\r\n                this.setKeyShortcut(item, keyshortcut);\r\n            }\r\n            if (checked !== void 0) {\r\n                this.setChecked(item, checked);\r\n            }\r\n            if (type !== void 0) {\r\n                if (type == \"menu\" || type == \"submenu\") {\r\n                    this.setExpanded(item, false);\r\n                }\r\n                this.setType(item, type);\r\n            }\r\n            if (label !== void 0) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (name !== void 0) {\r\n                this.setName(item, name);\r\n            }\r\n            if (value !== void 0) {\r\n                this.setValue(item, value);\r\n            }\r\n            if (disabled !== void 0) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(item: HTMLElement): HTMLElement | null {\r\n        return item;\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void {\r\n        const hasChildMenu = Array.from(slot.childNodes).some(\r\n            childNode_i => childNode_i instanceof HTMLElement && childNode_i.classList.contains(\"menu\")\r\n        );\r\n        item.setAttribute(\"aria-haspopup\", hasChildMenu.toString());\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n\r\n    getMenu(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .menu\");\r\n    }\r\n\r\n    getKeyShortcut(item: HTMLElement): string | null {\r\n        return item.getAttribute(\"aria-keyshortcuts\");\r\n    }\r\n\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void {\r\n        let keyshortcutsPart = item.querySelector(\":scope > .keyshortcuts\");\r\n        if (value !== null) {\r\n            item.setAttribute(\"aria-keyshortcuts\", value);\r\n            if (!keyshortcutsPart) {\r\n                const labelPart = this.#label(item);\r\n                const keyshortcutsPartTemplate = this.#keyshortcutsPartTemplate;\r\n                keyshortcutsPart = <HTMLElement>keyshortcutsPartTemplate.cloneNode(true);\r\n                labelPart.after(keyshortcutsPart);\r\n            }\r\n            keyshortcutsPart.textContent = value;\r\n        }\r\n        else {\r\n            item.removeAttribute(\"aria-keyshortcuts\");\r\n            if (keyshortcutsPart) {\r\n                keyshortcutsPart.remove();\r\n            }\r\n        }\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n    \r\n    getType(item: HTMLElement): MenuItemType | null {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`menuitem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setType(item: HTMLElement, type: MenuItemType): void {\r\n        const typesFeatures = this.#typesFeatures;\r\n        const iconPartTemplate = this.#iconPartTemplate;\r\n        const arrowPartTemplate = this.#arrowPartTemplate;\r\n        const {role, hasIcon, hasArrow} = typesFeatures[type];\r\n        const oldType = this.getType(item);\r\n        const {classList} = item;\r\n        if (oldType) {\r\n            classList.remove(`menuitem-${oldType}`);\r\n        }\r\n        classList.add(`menuitem-${type}`);\r\n        item.setAttribute(\"role\", role);\r\n        const labelPart = this.#label(item);\r\n        const iconPart = item.querySelector(\":scope > .icon\");\r\n        const arrowPart = item.querySelector(\":scope > .arrow\");\r\n        if (hasIcon) {\r\n            if (!iconPart && labelPart) {\r\n                labelPart.before(iconPartTemplate.cloneNode(true));\r\n            }\r\n        }\r\n        else {\r\n            if (iconPart) {\r\n                iconPart.remove();\r\n            }\r\n        }\r\n        if (hasArrow) {\r\n            if (!arrowPart && labelPart) {\r\n                labelPart.after(arrowPartTemplate.cloneNode(true));\r\n            }\r\n        }\r\n        else {\r\n            if (arrowPart) {\r\n                arrowPart.remove();\r\n            }\r\n        }\r\n    }\r\n\r\n    getValue(item: HTMLElement): string {\r\n        return item.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"value\", value);\r\n    }\r\n    \r\n    getName(item: HTMLElement): string {\r\n        return item.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getChecked(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-checked\") ?? false.toString());\r\n    }\r\n\r\n    setChecked(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-checked\", value.toString());\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-expanded\", value.toString());\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-expanded\") ?? false.toString());\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        const expand = force ?? !this.getExpanded(item);\r\n        this.setExpanded(item, expand);\r\n        if (expand) {\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    expand(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (!expanded) {\r\n            this.setExpanded(item, true);\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    collapse(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (expanded) {\r\n            this.setExpanded(item, false);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.setChecked(targetItem, !this.getChecked(targetItem));\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.setChecked(targetItem, true);\r\n                    break;\r\n                }\r\n                case \"menu\":\r\n                case \"submenu\": {\r\n                    this.toggle(targetItem);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(item: HTMLElement): void {\r\n        const menu = this.getMenu(item);\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = item.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const type = this.getType(item);\r\n            if (type == \"menu\") {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const closestMenu = item.closest(\".menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    const overflowX = itemRight + menuWidth - clientWidth;\r\n                    const overflowY = itemTop + menuHeight - clientHeight;\r\n                    menuStyle.setProperty(\"left\", `${\r\n                        overflowX > 0 ?\r\n                        itemLeft - menuWidth - closestMenuLeft :\r\n                        itemRight - closestMenuLeft\r\n                    }px`);\r\n                    const menuComputedStyle = window.getComputedStyle(menu);\r\n                    const {paddingTop, paddingBottom} = menuComputedStyle;\r\n                    const menuPaddingTop = parseFloat(paddingTop);\r\n                    const menuPaddingBottom = parseFloat(paddingBottom);\r\n                    menuStyle.setProperty(\"top\", `${\r\n                        overflowY > 0 ?\r\n                        itemBottom - menuHeight - closestMenuTop + menuPaddingBottom :\r\n                        itemTop - closestMenuTop - menuPaddingTop\r\n                    }px`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}));","import { Widget, element } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\nimport { menuItemWidget } from \"./MenuItemWidget\";\r\n\r\nexport { menuWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menu\": MenuWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        contextual?: boolean;\r\n    }): HTMLElement;\r\n    positionContextual(menu: HTMLElement, x: number, y: number): void;\r\n    getContextual(menu: HTMLElement): boolean;\r\n    setContextual(menu: HTMLElement, value: boolean): void;\r\n    items(menu: HTMLElement): HTMLElement[];\r\n}\r\n\r\nvar mouseOverExpandDelay = 0_200;\r\nvar mouseOutCollapseDelay = 0_400;\r\n\r\nvar menuWidget = new (\r\nWidget({\r\n    name: \"menu\"\r\n})(class MenuWidgetFactoryBase extends WidgetFactory implements MenuWidgetFactory {\r\n\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #toggleTimeouts: WeakMap<HTMLElement, {clear(): void;}>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menu\",\r\n                role: \"menu\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#toggleTimeouts = new WeakMap();\r\n    }\r\n\r\n    create(init?: {\r\n        contextual?: boolean;\r\n    }): HTMLElement {\r\n        const menu = <HTMLElement>this.#template.cloneNode(true);\r\n        menu.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        menu.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        menu.addEventListener(\"mouseout\", this.#handleMouseOutEvent.bind(this));\r\n        menu.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        menu.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        if (init !== void 0) {\r\n            const {contextual} = init;\r\n            if (contextual !== void 0) {\r\n                this.setContextual(menu, contextual);\r\n            }\r\n        }\r\n        return menu;\r\n    }\r\n\r\n    slot(menu: HTMLElement): HTMLElement | null {\r\n        return menu;\r\n    }\r\n\r\n    positionContextual(menu: HTMLElement, x: number, y: number): void {\r\n        const {style} = menu;\r\n        const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        const left = x + scrollX;\r\n        const top = y + scrollY;\r\n        const {clientWidth, clientHeight} = document.body;\r\n        const overflowX = left + menuWidth - clientWidth;\r\n        const overflowY = top + menuHeight - clientHeight;\r\n        style.setProperty(\"left\", `${overflowX > 0 ? left - menuWidth : left}px`);\r\n        style.setProperty(\"top\", `${overflowY > 0 ? top - menuHeight : top}px`);\r\n    }\r\n\r\n    getContextual(menu: HTMLElement): boolean {\r\n        const {classList} = menu;\r\n        return classList.contains(\"menu-contextual\");\r\n    }\r\n\r\n    setContextual(menu: HTMLElement, value: boolean): void {\r\n        const {classList} = menu;\r\n        if (value) {\r\n            classList.add(\"menu-contextual\");\r\n        }\r\n        else {\r\n            classList.remove(\"menu-contextual\");\r\n        }\r\n    }\r\n\r\n    items(menu: HTMLElement): HTMLElement[] {\r\n        return Array.from(menu.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        ));\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"menuitem\") && !menuItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"menuitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #collapseSubmenus(menu: HTMLElement): void {\r\n        menu.querySelectorAll<HTMLElement>(\":is(:scope, :scope > .menuitemgroup) > .menuitem[aria-expanded]\")\r\n            .forEach(menuitem_i => menuItemWidget.collapse(menuitem_i));\r\n    }\r\n\r\n    #isClosestMenu(menu: HTMLElement, target: HTMLElement): boolean {\r\n        return target.closest(\".menu\") == menu;\r\n    }\r\n\r\n    #nearestItem(menu: HTMLElement, target: HTMLElement): HTMLElement | null {\r\n        return Array.from(menu.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #firstItem(menu: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menu;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(menu: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menu;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n\r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = menuItemWidget.getMenu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #getActiveItem(menu: HTMLElement): HTMLElement | null {\r\n        return menu.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem:focus-within\"\r\n        );\r\n    }\r\n\r\n    async #setItemTimeout(item: HTMLElement, delay?: number): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => {\r\n                resolve(void 0);\r\n            }, delay ?? 0);\r\n            this.#toggleTimeouts.set(item, {\r\n                clear: () => {\r\n                    clearTimeout(timeout);\r\n                    reject();\r\n                }\r\n            });\r\n        }).then(() => {\r\n            this.#toggleTimeouts.delete(item);\r\n        });\r\n    }\r\n\r\n    #clearItemTimeout(item: HTMLElement): void {\r\n        const timeout = this.#toggleTimeouts.get(item);\r\n        if (typeof timeout !== \"undefined\") {\r\n            this.#toggleTimeouts.delete(item);\r\n            timeout.clear();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const contextual = this.getContextual(targetMenu);\r\n            if (contextual) {\r\n                try {\r\n                    targetMenu.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const isClosestMenu = this.#isClosestMenu(targetMenu, target);\r\n                if (isClosestMenu) {\r\n                    const type = menuItemWidget.getType(target);\r\n                    const name = menuItemWidget.getName(target);\r\n                    const value = menuItemWidget.getValue(target);\r\n                    if (type == \"radio\") {\r\n                        targetMenu.querySelectorAll<HTMLElement>(\r\n                            `:is(:scope, :scope > .menuitemgroup) > .menuitem-radio[name=${name}]`\r\n                        )\r\n                        .forEach((radio_i) => {\r\n                            menuItemWidget.setChecked(radio_i, menuItemWidget.getValue(radio_i) == value);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetMenu.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const contextual = this.getContextual(targetMenu);\r\n            if (contextual) {\r\n                try {\r\n                    targetMenu.remove();\r\n                } catch (error) {\r\n                    void 0;\r\n                }\r\n            }\r\n            else {\r\n                const nearestItem = this.#nearestItem(targetMenu, <HTMLElement>target);\r\n                if (nearestItem) {\r\n                    menuItemWidget.collapse(nearestItem);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetMenu);\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem(targetMenu) :\r\n                    this.#firstItem(targetMenu);\r\n                previousItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem(targetMenu) :\r\n                    this.#firstItem(targetMenu);\r\n                nextItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetMenu);\r\n                firstItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetMenu);\r\n                lastItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const type = menuItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            menuItemWidget.expand(activeItem);\r\n                            const firstChildItem = this.#firstChildItem(activeItem);\r\n                            firstChildItem?.focus({preventScroll: true});\r\n                            event.preventDefault();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    const isTargetClosestMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                    ) == targetMenu;\r\n                    if (!isTargetClosestMenu) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const isTargetClosestMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                    ) == targetMenu;\r\n                    if (!isTargetClosestMenu) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const type = menuItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            const expanded = menuItemWidget.getExpanded(activeItem);\r\n                            if (!expanded) {\r\n                                menuItemWidget.expand(activeItem);\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                                event.stopPropagation();\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOutEvent(event: MouseEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const nearestItem = this.#nearestItem(targetMenu, target);\r\n            if (nearestItem !== null) {\r\n                if (menuItemWidget.getType(nearestItem) == \"submenu\" &&\r\n                    !menuItemWidget.getExpanded(nearestItem)) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                ) == targetMenu;\r\n                if (isTargetClosestMenu) {\r\n                    const activeItem = this.#getActiveItem(targetMenu);\r\n                    if (activeItem !== null &&\r\n                        menuItemWidget.getType(activeItem) == \"submenu\" &&\r\n                        menuItemWidget.getExpanded(activeItem)) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, mouseOutCollapseDelay)\r\n                            .then(() => {\r\n                                menuItemWidget.collapse(activeItem);\r\n                            })\r\n                            .catch(() => void 0);\r\n                    }\r\n                    const {clientX, clientY} = event;\r\n                    const {left, right, top, bottom} = targetMenu.getBoundingClientRect();\r\n                    const intersectsWithMouse = !(\r\n                        left > clientX || right < clientX || top > clientY || bottom < clientY\r\n                    );\r\n                    const containsRelatedTarget = targetMenu.contains(<Node>relatedTarget);\r\n                    if (intersectsWithMouse && containsRelatedTarget) {\r\n                        if (relatedTarget instanceof HTMLElement && relatedTarget.classList.contains(\"menu\") && relatedTarget !== targetMenu) {\r\n                            relatedTarget.focus({preventScroll: true});\r\n                        }\r\n                        else {\r\n                            targetMenu.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    if (!intersectsWithMouse) {\r\n                        targetMenu.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const nearestItem = this.#nearestItem(targetMenu, target); \r\n            if (nearestItem !== null) {\r\n                if (menuItemWidget.getType(nearestItem) == \"submenu\" &&\r\n                    menuItemWidget.getExpanded(nearestItem)) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                ) == targetMenu;\r\n                if (isTargetClosestMenu) {\r\n                    const activeItem = this.#getActiveItem(targetMenu);\r\n                    if (activeItem !== null) {\r\n                        if (menuItemWidget.getType(activeItem) == \"submenu\" &&\r\n                            menuItemWidget.getExpanded(activeItem) && \r\n                            !activeItem.contains(<HTMLElement>target)) {\r\n                            this.#clearItemTimeout(activeItem);\r\n                            this.#setItemTimeout(activeItem, mouseOutCollapseDelay)\r\n                                .then(() => {\r\n                                    menuItemWidget.collapse(activeItem);\r\n                                })\r\n                                .catch(() => void 0);\r\n                        }\r\n                    }\r\n                    nearestItem.focus({preventScroll: true});\r\n                    if (menuItemWidget.getType(nearestItem) == \"submenu\") {\r\n                        if (!menuItemWidget.getExpanded(nearestItem)) {\r\n                            this.#clearItemTimeout(nearestItem);\r\n                            this.#setItemTimeout(nearestItem, mouseOverExpandDelay)\r\n                                .then(() => {\r\n                                    const activeItem = this.#getActiveItem(targetMenu);\r\n                                    this.#collapseSubmenus(targetMenu);\r\n                                    if (activeItem) {\r\n                                        this.#clearItemTimeout(activeItem);\r\n                                        menuItemWidget.expand(activeItem);\r\n                                        menuItemWidget.getMenu(activeItem)?.focus({preventScroll: true});\r\n                                    }\r\n                                })\r\n                                .catch(() => void 0);\r\n                        }\r\n                        else {\r\n                            menuItemWidget.getMenu(nearestItem)?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}));","import { element, Widget } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\n\r\nexport { toolbarItemWidget };\r\n\r\ntype ToolBarItemType = \"button\" | \"checkbox\" | \"radio\" | \"menubutton\";\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbaritem\": ToolBarItemWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ToolBarItemWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        type: ToolBarItemType;\r\n        pressed?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    menu(item: HTMLElement): HTMLElement | null;\r\n    getName(item: HTMLElement): string;\r\n    setName(item: HTMLElement, value: string): void;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setPressed(item: HTMLElement, value: boolean): void;\r\n    getPressed(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    getValue(item: HTMLElement): string;\r\n    setValue(item: HTMLElement, value: string): void;\r\n    getType(item: HTMLElement): ToolBarItemType | null;\r\n    setType(item: HTMLElement, value: ToolBarItemType): void;\r\n}\r\n\r\nvar toolbarItemWidget = new(\r\nWidget({\r\n    name: \"toolbaritem\"\r\n})(\r\nclass ToolBarItemWidgetFactoryBase extends WidgetFactory implements ToolBarItemWidgetFactory {\r\n    \r\n    #template: HTMLElement;\r\n    #types: ToolBarItemType[];\r\n\r\n    constructor() {\r\n        super();\r\n        this.#types = [\"button\", \"checkbox\", \"radio\", \"menubutton\"];\r\n        this.#template = element(\"button\", {\r\n            attributes: {\r\n                class: \"toolbaritem\",\r\n                role: \"button\",\r\n                type: \"button\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        type?: ToolBarItemType;\r\n        pressed?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }) {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (init !== void 0) {\r\n            const {keyshortcut, pressed, type, label, name, value, disabled} = init;\r\n            if (keyshortcut !== undefined) {\r\n                this.setKeyShortcut(item, keyshortcut);\r\n            }\r\n            if (pressed !== undefined) {\r\n                this.setPressed(item, pressed);\r\n            }\r\n            if (type !== undefined) {\r\n                this.setType(item, type);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(item, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(item, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(item: HTMLElement): HTMLElement | null {\r\n        return item;\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void {\r\n        const hasChildMenu = Array.from(slot.childNodes).some(\r\n            childNode_i => childNode_i instanceof HTMLElement && childNode_i.classList.contains(\"menu\")\r\n        );\r\n        item.setAttribute(\"aria-haspopup\", hasChildMenu.toString());\r\n    }\r\n\r\n    menu(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .menu\");\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-expanded\", value);\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-expanded\");\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    getKeyShortcut(item: HTMLElement): string | null {\r\n        return item.getAttribute(\"aria-keyshortcuts\");\r\n    }\r\n\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void {\r\n        if (value !== null) {\r\n            item.setAttribute(\"aria-keyshortcuts\", value);\r\n        }\r\n        else {\r\n            item.removeAttribute(\"aria-keyshortcuts\");\r\n        }\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        const expand = force ?? !this.getExpanded(item);\r\n        this.setExpanded(item, expand);\r\n        if (expand) {\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    expand(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (!expanded) {\r\n            this.setExpanded(item, true);\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    collapse(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (expanded) {\r\n            this.setExpanded(item, false);\r\n        }\r\n    }\r\n\r\n    getType(item: HTMLElement): ToolBarItemType | null {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`toolbaritem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setType(item: HTMLElement, type: ToolBarItemType): void {\r\n        const oldType = this.getType(item);\r\n        if (type !== oldType) {\r\n            const {classList} = item;\r\n            if (oldType) {\r\n                classList.remove(`toolbaritem-${oldType}`);\r\n            }\r\n            classList.add(`toolbaritem-${type}`);\r\n        }\r\n    }\r\n\r\n    getValue(item: HTMLElement): string {\r\n        return item.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"value\", value);\r\n    }\r\n\r\n    getTitle(item: HTMLElement): string {\r\n        return item.getAttribute(\"title\") ?? \"\";\r\n    }\r\n\r\n    setTitle(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"title\", value);\r\n    }\r\n\r\n    getName(item: HTMLElement): string {\r\n        return item.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getPressed(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-pressed\") ?? false.toString());\r\n    }\r\n\r\n    setPressed(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-pressed\", value.toString());\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetItem = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetItem.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse(targetItem);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.setPressed(targetItem, !this.getPressed(targetItem));\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.setPressed(targetItem, true);\r\n                    break;\r\n                }\r\n                case \"menubutton\": {\r\n                    const menu = this.menu(targetItem);\r\n                    if (menu && !menu.contains(<Node>target)) {\r\n                        this.toggle(targetItem);\r\n                        const expanded = this.getExpanded(targetItem);\r\n                        if (expanded) {\r\n                            menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(item: HTMLElement): void {\r\n        const type = this.getType(item);\r\n        if (type == \"menubutton\") {\r\n            const menu = this.menu(item);\r\n            if (menu !== null) {\r\n                const {style: menuStyle} = menu;\r\n                const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = item.getBoundingClientRect();\r\n                const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n                const {scrollY, scrollX} = window;\r\n                const {clientWidth, clientHeight} = document.body;\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n        }\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n}));\r\n","import { element, Widget } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\n\r\nexport { treeItemWidget };\r\n\r\ntype TreeItemType = \"parent\" | \"leaf\";\r\n\r\ninterface TreeItemWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        type: TreeItemType;\r\n        label?: string;\r\n        disabled?: boolean;\r\n        draggable?: boolean;\r\n    }): HTMLElement;\r\n    group(item: HTMLElement): HTMLElement | null;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setExpanded(item: HTMLElement, value: boolean): void;\r\n    getExpanded(item: HTMLElement): boolean;\r\n    setDraggable(row: HTMLElement, value: boolean): void;\r\n    getDraggable(item: HTMLElement): boolean;\r\n    getType(item: HTMLElement): TreeItemType | null;\r\n    setType(item: HTMLElement, value: TreeItemType): void;\r\n    toggle(item: HTMLElement, force?: boolean): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"treeitem\": TreeItemWidgetFactory,\r\n    }\r\n}\r\n\r\nvar treeItemWidget = new (\r\nWidget({\r\n    name: \"treeitem\"\r\n})(class TreeItemWidgetFactoryBase extends WidgetFactory implements TreeItemWidgetFactory {\r\n    #template: HTMLElement;\r\n    #types: TreeItemType[];\r\n\r\n    constructor() {\r\n        super();\r\n        this.#types = [\"parent\", \"leaf\"];\r\n        this.#template = element(\"li\", {\r\n            attributes: {\r\n                class: \"treeitem\",\r\n                role: \"treeitem\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"content\"\r\n                    },\r\n                    children: [\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"arrow\"\r\n                            }\r\n                        }),\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"label\"\r\n                            }\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    group(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .treeitemgroup\");\r\n    }\r\n\r\n    create(init?: {\r\n        type?: TreeItemType;\r\n        label?: string;\r\n        disabled?: boolean;\r\n        draggable?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (init !== void 0) {\r\n            const {label, disabled, draggable} = init;\r\n            let {type} = init;\r\n            type = type ?? \"leaf\";\r\n            this.setType(item, type);\r\n            if (type === \"parent\") {\r\n                this.setExpanded(item, false);\r\n            }\r\n            if (label !== void 0) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (disabled !== void 0) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n            if (draggable !== void 0) {\r\n                this.setDraggable(item, draggable);\r\n            }\r\n            this.setSelected(item, false);\r\n        }\r\n        return item;\r\n    }\r\n\r\n    get observedSlots() {\r\n        return [\"content\", \"group\"];\r\n    }\r\n\r\n    slot(item: HTMLElement, name: string | null) {\r\n        switch (name) {\r\n            case \"content\":\r\n                return this.#content(item);\r\n            case \"group\":\r\n                return item;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #content(item: HTMLElement): HTMLElement {\r\n        const content = item.querySelector<HTMLElement>(\":scope > .content\")!;\r\n        if (!content) throw new Error(\"Missing content.\");\r\n        return content;\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        const label = item.querySelector<HTMLElement>(\":scope > .content > .label\");\r\n        if (!label) throw new Error(\"Missing label.\");\r\n        return label;\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", value.toString());\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    getType(item: HTMLElement): TreeItemType {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`treeitem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        throw new Error(\"Missing type.\");\r\n    }\r\n\r\n    setType(item: HTMLElement, type: TreeItemType): void {\r\n        const {classList} = item;\r\n        try {\r\n            const oldType = this.getType(item);\r\n            classList.remove(`treeitem-${oldType}`);\r\n        }\r\n        catch (e) {};\r\n        classList.add(`treeitem-${type}`);\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-expanded\", value.toString());\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-expanded\") ?? false.toString());\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            if (!classList.contains(\"active\")) {\r\n                classList.add(\"active\");\r\n            }\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDraggable(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"draggable\", value.toString());\r\n    }\r\n\r\n    getDraggable(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"draggable\") ?? false.toString());\r\n    }\r\n\r\n    setSelected(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-selected\", value.toString());\r\n        item.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-selected\") ?? false.toString());\r\n    }\r\n\r\n    setLevel(item: HTMLElement, value: number): void {\r\n        item.style.setProperty(\"--level\", value.toString());\r\n    }\r\n\r\n    getLevel(item: HTMLElement): number {\r\n        return parseInt(item.style.getPropertyValue(\"--level\"));\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        this.setExpanded(item, force ?? !this.getExpanded(item));\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget, shiftKey, ctrlKey} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            if (type == \"parent\" && !(shiftKey || ctrlKey)) {\r\n                this.toggle(targetItem);\r\n            }\r\n        }\r\n    }\r\n}));","import { element, Widget } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\nimport { treeItemWidget } from \"./TreeItemWidget\";\r\n\r\nexport { treeWidget };\r\n\r\ninterface TreeWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n    items(tree: HTMLElement): HTMLElement[];\r\n    selectedItems(tree: HTMLElement): HTMLElement[];\r\n    beginSelection(tree: HTMLElement): void;\r\n    endSelection(tree: HTMLElement): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"tree\": TreeWidgetFactory,\r\n    }\r\n}\r\n\r\nvar treeWidget = new (\r\nWidget({\r\n    name: \"tree\"\r\n})(class TreeWidgetFactoryBase extends WidgetFactory implements TreeWidgetFactory {\r\n\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"tree\",\r\n                role: \"tree\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(init?: {\r\n        multisectable?: boolean;\r\n    }): HTMLElement {\r\n        const tree = <HTMLElement>this.#template.cloneNode(true);\r\n        tree.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        tree.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        tree.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        tree.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        tree.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        tree.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        tree.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        tree.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        tree.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        tree.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        tree.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        this.#onSelection.set(tree, false);\r\n        this.#hasSelectionChanged.set(tree, false);\r\n        if (init !== void 0) {\r\n            const {multisectable} = init;\r\n            if (multisectable !== void 0) {\r\n                this.setMultiSelectable(tree, multisectable);\r\n            }\r\n        }\r\n        return tree;\r\n    }\r\n\r\n    slot(tree: HTMLElement) {\r\n        return tree;\r\n    }\r\n\r\n    slottedCallback(tree: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"treeitem\")) {\r\n                treeItemWidget.setPosInSet(child_i, i);\r\n                treeItemWidget.setLevel(child_i, 0);\r\n            }\r\n        });\r\n    }\r\n\r\n    items(tree: HTMLElement): HTMLElement[] {\r\n        return Array.from(tree.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .treeitemgroup) > .treeitem\"\r\n        ));\r\n    }\r\n\r\n    selectedItems(tree: HTMLElement): HTMLElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        let item = this.#firstItem(tree);\r\n        while (item !== null) {\r\n            const selected = treeItemWidget.getSelected(item);\r\n            if (selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(tree: HTMLElement): void {\r\n        this.#onSelection.set(tree, true);\r\n    }\r\n\r\n    endSelection(tree: HTMLElement): void {\r\n        this.#onSelection.set(tree, false);\r\n        if (this.#hasSelectionChanged.get(tree)) {\r\n            tree.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(tree, false);\r\n        }\r\n    }\r\n\r\n    setMultiSelectable(tree: HTMLElement, value: boolean): void {\r\n        tree.setAttribute(\"aria-multiselectable\", value.toString());\r\n    }\r\n\r\n    getMultiSelectable(tree: HTMLElement): boolean {\r\n        return JSON.parse(tree.getAttribute(\"aria-multiselectable\") ?? false.toString());\r\n    }\r\n\r\n    #getActiveItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".treeitem.active\");\r\n    }\r\n\r\n    #getDropTargetItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".treeitem.droptarget\");\r\n    }\r\n\r\n    #setDropTargetItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const {classList} = tree;\r\n        const dropTargetItem = this.#getDropTargetItem(tree);\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            treeItemWidget.setDropTarget(dropTargetItem, false);\r\n        }\r\n        if (item !== null) {\r\n            treeItemWidget.setDropTarget(item, true);\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"treeitem\") && !treeItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"treeitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextItem = this.#nextItem(from);\r\n            while (nextItem && nextItem !== to) {\r\n                range.push(nextItem);\r\n                nextItem = this.#nextItem(nextItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousItem = this.#previousItem(from);\r\n            while (previousItem && previousItem !== to) {\r\n                range.push(previousItem);\r\n                previousItem = this.#previousItem(previousItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        selectedItems.forEach((item_i) => {\r\n            if (!items.includes(item_i)) {\r\n                treeItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            const selected = treeItemWidget.getSelected(item_i);\r\n            if (tree.contains(item_i) && !selected) {\r\n                treeItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #addToSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        this.beginSelection(tree);\r\n        items.forEach((item_i) => {\r\n            if (!treeItemWidget.getSelected(item_i)) {\r\n                treeItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #removeFromSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                treeItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #clearSelection(tree: HTMLElement): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        selectedItems.forEach((item_i) => {\r\n            treeItemWidget.setSelected(item_i, false);\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #setActiveItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(tree);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            treeItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            treeItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #firstItem(tree: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(tree: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousSibling = <HTMLElement | null>walker.previousSibling();\r\n        return previousSibling ?\r\n            this.#deepestItem(previousSibling) :\r\n            <HTMLElement | null>walker.parentNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const type = treeItemWidget.getType(item);\r\n        const expanded = treeItemWidget.getExpanded(item);\r\n        return <HTMLElement | null>(\r\n            type === \"leaf\" ?\r\n                walker.nextNode() :\r\n                expanded ?\r\n                    walker.nextNode() :\r\n                    walker.nextSibling() ??\r\n                    (walker.parentNode(), walker.nextSibling())\r\n        );\r\n    }\r\n\r\n    #deepestItem(item: HTMLElement): HTMLElement {\r\n        const expanded = treeItemWidget.getExpanded(item);\r\n        if (expanded) {\r\n            const walker = this.#walker;\r\n            const lastItem = <HTMLElement>walker.lastChild();\r\n            if (lastItem) {\r\n                return this.#deepestItem(lastItem);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey, button} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        if (targetItem) {\r\n            const selected = treeItemWidget.getSelected(targetItem);\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setSelection(targetTree, targetItem);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            targetItem.blur();\r\n                            this.#removeFromSelection(targetTree, targetItem);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(targetTree, targetItem);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const activeItem = this.#getActiveItem(targetTree);\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                targetItem\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetTree, ...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                }\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(targetTree, targetItem);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            const type = treeItemWidget.getType(targetItem);\r\n            if (type == \"parent\") {\r\n                treeItemWidget.toggle(targetItem, true);\r\n            }\r\n            this.#setDropTargetItem(targetTree, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!targetTree.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(targetTree, null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetTree);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetTree, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetTree, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(\r\n                                firstItem,\r\n                                this.#deepestItem(lastItem)\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetTree, ...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const expanded = treeItemWidget.getExpanded(activeItem);\r\n                    if (expanded) {\r\n                        treeItemWidget.toggle(activeItem);\r\n                    }\r\n                    else {\r\n                        const walker = this.#walker;\r\n                        const parentItem = <HTMLElement>walker.parentNode();\r\n                        if (parentItem) {\r\n                            parentItem.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const expanded = treeItemWidget.getExpanded(activeItem);\r\n                    if (!expanded) {\r\n                        treeItemWidget.toggle(activeItem);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = treeItemWidget.getSelected(previousItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetTree, previousItem) :\r\n                                this.#addToSelection(targetTree, previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetTree);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = treeItemWidget.getSelected(nextItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetTree, nextItem) :\r\n                                this.#addToSelection(targetTree, nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetTree);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetTree);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetTree);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(targetTree, activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection(targetTree);\r\n                this.#setActiveItem(targetTree, null);\r\n                targetTree.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetTree);\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetTree, targetItem);\r\n            targetTree.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetTree.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetTree.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {target} = event;\r\n        const targetTree = <HTMLElement>target;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"treeitem\")) {\r\n            if (this.#onSelection.get(targetTree)) {\r\n                this.#hasSelectionChanged.set(target, true);\r\n            }\r\n            else {\r\n                targetTree.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { element, reactiveChildElements, reactiveElement, CustomElement, fragment, widget } from \"../elements/Element\";\r\nimport { ModelEvent, ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\nimport { menuWidget } from \"./widgets/menu/MenuWidget\";\r\nimport { toolbarItemWidget } from \"./widgets/toolbar/ToolBarItemWidget\";\r\nimport { treeItemWidget } from \"./widgets/tree/TreeItemWidget\";\r\nimport { treeWidget } from \"./widgets/tree/TreeWidget\";\r\n\r\nexport { TreeModel };\r\nexport { TreeItemModel };\r\nexport { TreeView };\r\n\r\nclass TreeModel extends ModelObject {\r\n    readonly items: ModelList<TreeItemModel>;\r\n    readonly childItems: ModelList<TreeItemModel>;\r\n    sortFunction: ((item_a: TreeItemModel, item_b: TreeItemModel) => number) | null;\r\n    \r\n    constructor()\r\n    constructor(init: {items: TreeItemModel[], sortFunction?: (item_a: TreeItemModel, item_b: TreeItemModel) => number})\r\n    constructor(init?: {items: TreeItemModel[], sortFunction?: (item_a: TreeItemModel, item_b: TreeItemModel) => number}) {\r\n        super();\r\n        const childItems = new ModelList(init?.items ?? []);\r\n        childItems.setParent(this);\r\n        this.childItems = childItems;\r\n        this.items = new ModelList(this.flattenItems());\r\n        this.sortFunction = init?.sortFunction ??\r\n            function(item_a: TreeItemModel, item_b: TreeItemModel) {\r\n                return item_a.label.localeCompare(item_b.label);\r\n            };\r\n        this.addEventListener(\"modelchange\", this.#handleModelChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleModelChangeEvent(event: ModelEvent): void {\r\n        const {target} = event;\r\n        const {items, sortFunction, flattenItems} = this;\r\n        if (target instanceof ModelList) {\r\n            const records = target.getRecords();\r\n            records.forEach((record_i) => {\r\n                const {insertedItems, removedItems} = record_i;\r\n                const flattenedInsertedItems = (<TreeItemModel[]>Array.from(insertedItems.values())).flatMap(\r\n                    insertedItem_i => Array.of(insertedItem_i, ...flattenItems.call(insertedItem_i))\r\n                );\r\n                const flattenedRemovedItems = (<TreeItemModel[]>Array.from(removedItems.values())).flatMap(\r\n                    removedItem_i => Array.of(removedItem_i, ...flattenItems.call(removedItem_i))\r\n                );\r\n                items.beginChanges();\r\n                items.append(...flattenedInsertedItems);\r\n                flattenedRemovedItems.forEach((removedItem_i) => items.remove(removedItem_i));\r\n                if (sortFunction) items.sort(sortFunction);\r\n                items.endChanges();\r\n            });\r\n        }\r\n    }\r\n\r\n    flattenItems(this: TreeModel | TreeItemModel): TreeItemModel[] {\r\n        const {childItems} = this;\r\n        return Array.from(childItems.values()).flatMap(\r\n            treeItem_i => Array.of(treeItem_i, ...TreeModel.prototype.flattenItems.call(treeItem_i))\r\n        );\r\n    }\r\n\r\n    getItemByUri(this: TreeModel | TreeItemModel, uri: string): TreeItemModel | null {\r\n        const {childItems} = this;\r\n        const {length: itemsCount} = childItems;\r\n        const {length: uriLength} = uri;\r\n        for (let i = 0; i < itemsCount; i++) {\r\n            const item_i = childItems.get(i)!;\r\n            const {uri: itemUri} = item_i;\r\n            const {length: itemUriLength} = itemUri;\r\n            if (uri.startsWith(itemUri)) {\r\n                if (uri.charAt(itemUriLength) == \"/\") {\r\n                    return TreeModel.prototype.getItemByUri.call(item_i, uri);\r\n                }\r\n                else if (itemUriLength == uriLength) {\r\n                    return item_i;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\ninterface TreeItem {\r\n    show(): void;\r\n    hide(): void;\r\n    display(): void;\r\n    remove(): void;\r\n}\r\n\r\nclass TreeItemList implements TreeItem {\r\n    readonly items: TreeItemModel[];\r\n\r\n    constructor(items: TreeItemModel[]) {\r\n        this.items = items;\r\n    }\r\n\r\n    get count(): number {\r\n        return this.items.length;\r\n    }\r\n\r\n    static from(items: TreeItemModel[]): TreeItemList {\r\n        return new TreeItemList(items);\r\n    }\r\n\r\n    static of(...items: TreeItemModel[]): TreeItemList {\r\n        return new TreeItemList(items);\r\n    }\r\n\r\n    show(): void {\r\n        this.items.forEach(item_i => item_i.show());\r\n    }\r\n\r\n    hide(): void {\r\n        this.items.forEach(item_i => item_i.hide());\r\n    }\r\n\r\n    display(): void {\r\n        const result = this.items.reduce(\r\n            (result, item_i) => `${result} ${item_i.label}`, \"\"\r\n        );\r\n        console.log(result);\r\n    }\r\n\r\n    remove(): void {\r\n        const {items} = this;\r\n        const removedItemsGroups = items.reduce((map, item_i) => {\r\n            const {parentNode} = item_i;\r\n            if (parentNode instanceof TreeItemModel || parentNode instanceof TreeModel) {\r\n                const {childItems} = parentNode;\r\n                const group = map.get(childItems);\r\n                if (group) group.push(item_i);\r\n                else map.set(childItems, [item_i]);\r\n            }\r\n            return map;\r\n        }, new Map<ModelList, TreeItemModel[]>());\r\n        Array.from(removedItemsGroups.entries()).forEach(\r\n            ([list_i, children_i]) => {\r\n                list_i.beginChanges();\r\n                children_i.forEach((child_i) => {\r\n                    list_i.remove(child_i);\r\n                });\r\n                list_i.endChanges();\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nclass TreeItemModel extends ModelObject implements TreeItem {\r\n    readonly childItems: ModelList<TreeItemModel>;\r\n    readonly type: \"leaf\" | \"parent\";\r\n    readonly label: string;\r\n\r\n    @ModelProperty(/*{type: Number}*/)\r\n    childCount: number;\r\n\r\n    @ModelProperty(/*{type: Boolean}*/)\r\n    visibility: boolean;\r\n\r\n    get uri(): string {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return `${parentNode.uri}/${this.label}`;\r\n        }\r\n        return this.label;\r\n    }\r\n\r\n    get parentItem(): TreeItemModel | null {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return parentNode;\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    constructor(init: {label: string, type: \"leaf\" | \"parent\", items?: TreeItemModel[]}) {\r\n        super();\r\n        const {label, type} = init;\r\n        const childItems = new ModelList(init.items ?? []);\r\n        childItems.setParent(this);\r\n        this.childItems = childItems;\r\n        this.label = label;\r\n        this.type = type;\r\n        this.childCount = childItems.length;\r\n        this.visibility = true;\r\n        this.addEventListener(\"modelchange\", this.#handleModelChangeEvent.bind(this));\r\n    }\r\n\r\n    show(): void {\r\n        this.visibility = true;\r\n    }\r\n\r\n    hide(): void {\r\n        this.visibility = false;\r\n    }\r\n\r\n    display(): void {\r\n        console.log(this.label);\r\n    }\r\n    \r\n    remove(): void {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel || parentNode instanceof TreeModel) {\r\n            const {childItems} = parentNode;\r\n            if (childItems) {\r\n                childItems.remove(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleModelChangeEvent(event: ModelEvent): void {\r\n        const {target} = event;\r\n        const {childItems} = this;\r\n        if (target == childItems) {\r\n            this.childCount = childItems.length;\r\n        }\r\n    }\r\n}\r\n\r\ninterface TreeViewConstructor {\r\n    readonly prototype: TreeView;\r\n    new(): TreeView;\r\n    new(model: TreeModel): TreeView;\r\n}\r\n\r\ninterface TreeView extends View {\r\n    model: TreeModel;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"v-treee\": TreeView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"v-treee\"\r\n})\r\nclass TreeViewBase extends View implements TreeView {\r\n    readonly model!: TreeModel;\r\n    #treeElement: WeakRef<HTMLElement> | undefined;\r\n    #dragImagesElementsMap: WeakMap<TreeItemModel, WeakRef<Element>>;\r\n    #treeItemElementsMap: WeakMap<TreeItemModel, WeakRef<HTMLElement>>;\r\n    \r\n    constructor()\r\n    constructor(model: TreeModel)\r\n    constructor(model?: TreeModel) {\r\n        super();\r\n        this.#treeItemElementsMap = new WeakMap();\r\n        this.#dragImagesElementsMap = new WeakMap();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.setModel(model ?? new TreeModel());\r\n    }\r\n\r\n    getTreeElement(): HTMLElement | null {\r\n        return this.#treeElement?.deref() ?? null;\r\n    }\r\n\r\n    getTreeItemElement(model: TreeItemModel): HTMLElement | null {\r\n        return this.#treeItemElementsMap.get(model)?.deref() ?? null;\r\n    }\r\n\r\n    getDragImageElement(model: TreeItemModel): Element | null {\r\n        return this.#dragImagesElementsMap.get(model)?.deref() ?? null;\r\n    }\r\n\r\n    selectedItems(): TreeItemModel[] {\r\n        const tree = this.getTreeElement();\r\n        if (tree) {\r\n            const {model} = this;\r\n            const selectedElements = treeWidget.selectedItems(tree);\r\n            return selectedElements.map(\r\n                item_i => <TreeItemModel>model.getItemByUri(item_i.dataset.uri!)\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    renderShadow(): Node {\r\n        const {model} = this;\r\n        const treeElement = widget(\"tree\", {\r\n            attributes: {\r\n                tabindex: 0,\r\n            },\r\n            slotted: reactiveChildElements(\r\n                model.childItems, item => this.#renderTreeItem(item)\r\n            ),\r\n            listeners: {\r\n                dragstart: <EventListener>this.#handleDragStartEvent.bind(this),\r\n                drop: <EventListener>this.#handleDropEvent.bind(this),\r\n                contextmenu: <EventListener>this.#handleContextMenuEvent.bind(this),\r\n                keydown: <EventListener>this.#handleKeyDownEvent.bind(this)\r\n            }\r\n        });\r\n        this.#treeElement = new WeakRef(treeElement);\r\n        return fragment(\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/main.css\"\r\n                }\r\n            }),\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/views/treeview.css\"\r\n                }\r\n            }),\r\n            treeElement,\r\n            element(\"div\", {\r\n                attributes: {\r\n                    class: \"offscreen\",\r\n                    hidden: true\r\n                },\r\n                children: reactiveChildElements(model.items,\r\n                    item => this.#renderTreeItemDragImage(item)\r\n                )\r\n            })\r\n        );\r\n    }\r\n\r\n    #renderTreeItem(item: TreeItemModel): Element {\r\n        const treeItemElement = reactiveElement(\r\n            item,\r\n            widget(\"treeitem\", {\r\n                properties: {\r\n                    type: item.type,\r\n                    draggable: true,\r\n                    label: item.label\r\n                },\r\n                dataset: {\r\n                    uri: item.uri\r\n                },\r\n                slotted: {\r\n                    group:\r\n                        <Node[]>((item.type == \"parent\") ? [\r\n                        widget(\"treeitemgroup\", {\r\n                            slotted: reactiveChildElements(item.childItems,\r\n                                item => this.#renderTreeItem(item)\r\n                            )\r\n                        })\r\n                    ] : []),\r\n                    content: <Node[]>\r\n                        ([\r\n                            element(\"span\", {\r\n                                attributes: {\r\n                                    class: \"label\"\r\n                                }\r\n                            })\r\n                        ]).concat((item.type == \"parent\") ? [\r\n                            element(\"span\", {\r\n                                attributes: {\r\n                                    class: \"badge\"\r\n                                }\r\n                            })\r\n                        ] : []).concat([\r\n                            widget(\"toolbar\", {\r\n                                slotted: [\r\n                                    widget(\"toolbaritem\", {\r\n                                        properties: {\r\n                                            name: \"visibility\",\r\n                                            type: \"checkbox\",\r\n                                        },\r\n                                        listeners: {\r\n                                            click: () => {\r\n                                                item.visibility ?\r\n                                                    item.hide() :\r\n                                                    item.show();\r\n                                            }\r\n                                        }\r\n                                    })\r\n                                ]\r\n                            })\r\n                        ])\r\n                }\r\n            }),\r\n            [\"label\", \"childCount\", \"visibility\"],\r\n            (treeitem, property, oldValue, newValue) => {\r\n                switch (property) {\r\n                    case \"label\":\r\n                        const label = treeitem.querySelector(\":scope > .label\");\r\n                        if (label) {\r\n                            label.textContent = newValue;\r\n                        }\r\n                        break;\r\n                    case \"childCount\":\r\n                        const badge = treeitem.querySelector(\":scope > .badge\");\r\n                        if (badge) {\r\n                            badge.textContent = `(${newValue})`;\r\n                        }\r\n                        break;\r\n                    case \"visibility\": {\r\n                        const toolbar = treeitem.querySelector<HTMLElement>(\":scope > .toolbar\");\r\n                        if (toolbar) {\r\n                            const visibilityItem = toolbar.querySelector<HTMLElement>(\".toolbaritem[name=visibility]\");\r\n                            if (visibilityItem) {\r\n                                toolbarItemWidget.setTitle(visibilityItem, newValue ? \"Hide\" : \"Show\");\r\n                                toolbarItemWidget.setPressed(visibilityItem, newValue);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        );\r\n        this.#treeItemElementsMap.set(item, new WeakRef(treeItemElement));\r\n        return treeItemElement;\r\n    }\r\n\r\n    #renderTreeItemDragImage(item: TreeItemModel): Element {\r\n        const dragImageElement = reactiveElement(\r\n            item,\r\n            element(\"span\", {\r\n                attributes: {\r\n                    class: \"dragimage\"\r\n                }\r\n            }),\r\n            [\"label\"],\r\n            (span, property, oldValue, newValue) => {\r\n                span.textContent = newValue;\r\n            }\r\n        );\r\n        this.#dragImagesElementsMap.set(item, new WeakRef(dragImageElement));\r\n        return dragImageElement;\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const {model} = this;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n        if (targetItem) {\r\n            const {dataTransfer} = event;\r\n            const selectedElements = treeWidget.selectedItems(targetTree);\r\n            const {length: selectedCount} = selectedElements;\r\n            if (selectedCount > 0) {\r\n                const selectedUris = \r\n                    selectedElements\r\n                    .map((element_i) =>\r\n                        element_i.dataset.uri!\r\n                    )\r\n                    .filter(\r\n                        (uri_i, _, uris) => !uris.some(\r\n                            uri_j => uri_i.startsWith(`${uri_j}/`)\r\n                        )\r\n                    );\r\n                const selectedUrisString = selectedUris.join(\"\\n\");\r\n                const lastUri = selectedUris[selectedUris.length - 1];\r\n                const lastItem = model.getItemByUri(lastUri);\r\n                if (lastItem && dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", selectedUrisString);\r\n                    const dragImage = this.getDragImageElement(lastItem);\r\n                    if (dragImage) {\r\n                        dataTransfer.setDragImage(dragImage, -16, 0);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const {model} = this;\r\n        const {sortFunction} = model;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n        if (targetItem) {\r\n            const {dataTransfer} = event;\r\n            if (dataTransfer) {\r\n                const targetUri = targetItem.dataset.uri!;\r\n                const targetItemModel = model.getItemByUri(targetUri)!;\r\n                const transferedUris = dataTransfer.getData(\"text/plain\").split(\"\\n\");\r\n                const targetIsWithin = transferedUris.some(uri_i => targetUri.startsWith(`${uri_i}/`) || uri_i == targetUri);\r\n                if (!targetIsWithin) {\r\n                    const transferedItems = <TreeItemModel[]>transferedUris.map(\r\n                        uri_i => model.getItemByUri(uri_i)\r\n                    ).filter(\r\n                        item_i => item_i !== null\r\n                    );\r\n                    const {type: targetType, parentItem: targetParentItem} = targetItemModel;\r\n                    const targetList = targetType == \"parent\" ?\r\n                        targetItemModel.childItems :\r\n                        targetParentItem ?\r\n                        targetParentItem.childItems :\r\n                        model.childItems;\r\n                    const targetItems = Array.from(targetList.values());\r\n                    targetItems.forEach((item_i) => {\r\n                        const sameLabelIndex = transferedItems.findIndex(item_j => item_j.label == item_i.label);\r\n                        if (sameLabelIndex > -1) {\r\n                            const doReplace = confirm(`Replace ${item_i.label}?`);\r\n                            if (doReplace) {\r\n                                targetList.remove(item_i);\r\n                            }\r\n                            else {\r\n                                transferedItems.copyWithin(sameLabelIndex, sameLabelIndex + 1);\r\n                                transferedItems.length--;\r\n                            }\r\n                        }\r\n                    });\r\n                    TreeItemList.from(transferedItems).remove();\r\n                    if (sortFunction) {\r\n                        targetList.beginChanges();\r\n                        targetList.append(...transferedItems);\r\n                        targetList.sort(sortFunction);\r\n                        targetList.endChanges();\r\n                    }\r\n                    else {\r\n                        targetList.insert(treeItemWidget.getPosInSet(targetItem), ...transferedItems);\r\n                    }\r\n                    const newElements = transferedItems.map(\r\n                        item_i => this.getTreeItemElement(item_i)!\r\n                    );\r\n                    treeWidget.beginSelection(targetTree);\r\n                    newElements.forEach((element_i) => {\r\n                        treeItemWidget.setSelected(element_i, true);\r\n                    });\r\n                    treeWidget.endSelection(targetTree);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        const {clientX, clientY, currentTarget, target} = event;\r\n        const {model} = this;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n        if (targetItem) {\r\n            const activeItem = model.getItemByUri(targetItem.dataset.uri!)!;\r\n            const menu = widget(\"menu\", {\r\n                properties: {\r\n                    contextual: true\r\n                },\r\n                slotted: [\r\n                    widget(\"menuitemgroup\", {\r\n                        slotted: [\r\n                            widget(\"menuitem\", {\r\n                                properties: {\r\n                                    label: \"Display\"\r\n                                },\r\n                                listeners: {\r\n                                    click: () => {\r\n                                        TreeItemList.from(\r\n                                            this.selectedItems()\r\n                                        ).display();\r\n                                    }\r\n                                }\r\n                            }),\r\n                            widget(\"menuitem\", {\r\n                                properties: {\r\n                                    label: \"Delete\"\r\n                                },\r\n                                listeners: {\r\n                                    click: () => {\r\n                                        const itemsList = TreeItemList.from(this.selectedItems());\r\n                                        const {count} = itemsList;\r\n                                        const doRemove = confirm(`Remove ${count} items?`);\r\n                                        if (doRemove) {\r\n                                            itemsList.remove();\r\n                                        }\r\n                                        targetTree.focus();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    }),\r\n                    widget(\"menuitemgroup\", {\r\n                        slotted: [\r\n                            widget(\"menuitem\", {\r\n                                properties: {\r\n                                    type: \"checkbox\",\r\n                                    label: activeItem.visibility ? \"Hide\" : \"Show\"\r\n                                },\r\n                                listeners: {\r\n                                    click: () => {\r\n                                        const selectedItems = TreeItemList.from(\r\n                                            this.selectedItems()\r\n                                        );\r\n                                        activeItem.visibility ?\r\n                                            selectedItems.hide() :\r\n                                            selectedItems.show();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ],\r\n                listeners: {\r\n                    close: () => {\r\n                        targetItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            });\r\n            targetTree.append(menu);\r\n            menuWidget.positionContextual(menu, clientX, clientY);\r\n            menu.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        switch (key) {\r\n            case \"Delete\": {\r\n                const itemsList = TreeItemList.from(this.selectedItems());\r\n                const {count} = itemsList;\r\n                const doRemove = confirm(`Remove ${count} items?`);\r\n                if (doRemove) {\r\n                    itemsList.remove();\r\n                }\r\n                targetTree.focus();\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar TreeView: TreeViewConstructor = TreeViewBase;","import { AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEActionElement };\r\nexport { ActionType };\r\n\r\ninterface HTMLEActionElementConstructor {\r\n    readonly prototype: HTMLEActionElement;\r\n    new(): HTMLEActionElement;\r\n}\r\n\r\ninterface HTMLEActionElement extends HTMLElement {\r\n    name: string;\r\n    value: string;\r\n    checked: boolean;\r\n    type: string;\r\n    disabled: boolean;\r\n    hotkey: string;\r\n\r\n    trigger(): void;\r\n    enable(): void;\r\n    disable(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"trigger\": Event;\r\n    }\r\n}\r\n\r\ntype ActionType = \"button\" | \"checkbox\" | \"radio\" | \"select\";\r\n\r\nclass HTMLEActionElementBase extends HTMLElement implements HTMLEActionElement {\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    hotkey!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"button\"})\r\n    type!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    checked!: boolean;\r\n\r\n    trigger(): void {\r\n        if (!this.disabled) {\r\n            switch (this.type) {\r\n                case \"checkbox\":\r\n                    this.checked = !this.checked;\r\n                    break;\r\n                case \"radio\":\r\n                    this.checked = true;\r\n                    break;\r\n            }\r\n            this.dispatchEvent(new Event(\"trigger\", {\r\n                bubbles: true\r\n            }));\r\n        }\r\n    }\r\n\r\n    enable(): void {\r\n        this.disabled = false;\r\n    }\r\n\r\n    disable(): void {\r\n        this.disabled = true;\r\n    }\r\n}\r\n\r\nvar HTMLEActionElement: HTMLEActionElementConstructor = HTMLEActionElementBase;","export { Key };\r\nexport { KeyModifier };\r\nexport { HotKey };\r\nexport { MouseButton };\r\n\r\nenum Key {\r\n    A = \"a\",\r\n    B = \"b\",\r\n    C = \"c\",\r\n    D = \"d\",\r\n    E = \"e\",\r\n    F = \"f\",\r\n    G = \"g\",\r\n    H = \"h\",\r\n    I = \"i\",\r\n    J = \"j\",\r\n    K = \"k\",\r\n    L = \"l\",\r\n    M = \"m\",\r\n    O = \"o\",\r\n    P = \"p\",\r\n    Q = \"q\",\r\n    R = \"r\",\r\n    S = \"s\",\r\n    T = \"t\",\r\n    U = \"u\",\r\n    V = \"v\",\r\n    W = \"w\",\r\n    X = \"x\",\r\n    Y = \"y\",\r\n    Z = \"z\",\r\n    ENTER = \"Enter\",\r\n    BACKSPACE = \"Backspace\",\r\n    ARROW_DOWN = \"ArrowDown\",\r\n    ARROW_LEFT = \"ArrowLeft\",\r\n    ARROW_RIGHT = \"ArrowRight\",\r\n    ARROW_UP = \"ArrowUp\",\r\n    SHIFT = \"Shift\"\r\n}\r\n\r\nenum KeyModifier {\r\n    Alt = \"Alt\",\r\n    Control = \"Control\",\r\n    Shift = \"Shift\"\r\n}\r\n\r\nenum MouseButton {\r\n    LEFT = 1,\r\n    WHEEL = 2,\r\n    RIGHT = 3,\r\n    FORWARD = 4,\r\n    BACK = 5\r\n}\r\n\r\nclass HotKey {\r\n    readonly key: Key;\r\n    readonly mod1?: KeyModifier;\r\n    readonly mod2?: KeyModifier;\r\n\r\n    constructor(key: Key, mod1?: KeyModifier, mod2?: KeyModifier) {\r\n        this.key = key;\r\n        this.mod1 = mod1;\r\n        this.mod2 = mod2;\r\n    }\r\n\r\n    toString(): string {\r\n        return `${this.mod1 ? `${this.#modifierString(this.mod1)}+` : \"\"}${this.mod2 ? `${this.#modifierString(this.mod2)}+` : \"\"}${(this.key.length == 1) ? this.key.toUpperCase() : this.key}`;\r\n    }\r\n\r\n    test(event: KeyboardEvent): boolean {\r\n        return (!this.mod1 || this.#testModifier(this.mod1, event)) && (!this.mod2 || this.#testModifier(this.mod2, event)) && event.key == this.key;\r\n    }\r\n\r\n    #modifierString(mod: KeyModifier): string {\r\n        switch (mod) {\r\n            case KeyModifier.Control:\r\n                return \"Ctrl\";\r\n            default:\r\n                return mod;\r\n        }\r\n    }\r\n\r\n    #testModifier(mod: KeyModifier, event: KeyboardEvent): boolean {\r\n        switch (mod) {\r\n            case \"Alt\":\r\n                return event.altKey;\r\n            case \"Control\":\r\n                return event.ctrlKey;\r\n            case \"Shift\":\r\n                return event.shiftKey;\r\n            default:\r\n                return true;\r\n        }\r\n    }\r\n}","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEGridCellElement };\r\n\r\ninterface HTMLEGridCellElementConstructor {\r\n    readonly prototype: HTMLEGridCellElement;\r\n    new(): HTMLEGridCellElement;\r\n}\r\n\r\ninterface HTMLEGridCellElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n    headers: string;\r\n    posinset: number;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridcell\": HTMLEGridCellElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridcell\"\r\n})\r\nclass HTMLEGridCellElementBase extends HTMLElement implements HTMLEGridCellElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    headers!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridCellElement: HTMLEGridCellElementConstructor = HTMLEGridCellElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\n\r\nexport { HTMLEGridRowGroupElement };\r\n\r\ninterface HTMLEGridRowGroupElementConstructor {\r\n    readonly prototype: HTMLEGridRowGroupElement;\r\n    new(): HTMLEGridRowGroupElement;\r\n}\r\n\r\ninterface HTMLEGridRowGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrowgroup\": HTMLEGridRowGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrowgroup\"\r\n})\r\nclass HTMLEGridRowGroupElementBase extends HTMLElement implements HTMLEGridRowGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                            /*display: flex;\r\n                            flex-direction: column;*/\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowGroupElement: HTMLEGridRowGroupElementConstructor = HTMLEGridRowGroupElementBase;","import { CustomElement, AttributeProperty, QueryProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\n\r\nexport { HTMLEMenuItemElement };\r\nexport { EMenuItem };\r\n\r\ninterface HTMLEMenuItemElementConstructor {\r\n    readonly prototype: HTMLEMenuItemElement;\r\n    new(): HTMLEMenuItemElement;\r\n}\r\n\r\ninterface HTMLEMenuItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    value: string;\r\n    hotkey: string;\r\n    disabled: boolean;\r\n    checked: boolean;\r\n    expanded: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitem\": HTMLEMenuItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitem\"\r\n})\r\nclass HTMLEMenuItemElementBase extends HTMLElement implements HTMLEMenuItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    hotkey!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    checked!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"button\", observed: true})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"icon\"\r\n                }\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"label\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"arrow\"\r\n                }\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n    }\r\n\r\n    @QueryProperty({selector: \":scope > e-menu[slot=menu]\"})\r\n    readonly menu!: HTMLEMenuElement | null;\r\n\r\n    toggle(force?: boolean): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                const expand = force ?? !expanded;\r\n                this.expanded = expand;\r\n                if (expand) {\r\n                    this.#positionMenu();\r\n                }\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {type} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (!this.expanded) {\r\n                    this.expanded = true;\r\n                    this.#positionMenu();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {type} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (this.expanded) {\r\n                    this.expanded = false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const {type} = this;\r\n            if (type == \"menu\") {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const closestMenu = this.closest(\"e-menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    const overflowX = itemRight + menuWidth - clientWidth;\r\n                    const overflowY = itemTop + menuHeight - clientHeight;\r\n                    menuStyle.setProperty(\"left\", `${\r\n                        overflowX > 0 ?\r\n                        itemLeft - menuWidth - closestMenuLeft :\r\n                        itemRight - closestMenuLeft\r\n                    }px`);\r\n                    const menuComputedStyle = window.getComputedStyle(menu);\r\n                    const {paddingTop, paddingBottom} = menuComputedStyle;\r\n                    const menuPaddingTop = parseFloat(paddingTop);\r\n                    const menuPaddingBottom = parseFloat(paddingBottom);\r\n                    menuStyle.setProperty(\"top\", `${\r\n                        overflowY > 0 ?\r\n                        itemBottom - menuHeight - closestMenuTop + menuPaddingBottom :\r\n                        itemTop - closestMenuTop - menuPaddingTop\r\n                    }px`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target == this) {\r\n            const {type} = this;\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.checked = !this.checked;\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.checked = true;\r\n                    break;\r\n                }\r\n                case \"menu\":\r\n                case \"submenu\": {\r\n                    this.toggle();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemElement: HTMLEMenuItemElementConstructor = HTMLEMenuItemElementBase;\r\n\r\ninterface EMenuItemConstructor {\r\n    readonly prototype: HTMLEMenuItemElement;\r\n    new(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    button(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    checkbox(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    radio(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    menu(init: {\r\n        name: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    submenu(init: {\r\n        name: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n}\r\n\r\nvar EMenuItem = <EMenuItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menu} = init;\r\n        if (menu) {\r\n            menu.slot = \"menu\";\r\n        }\r\n        return element(\"e-menuitem\", {\r\n            attributes: {\r\n                tabindex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type\r\n            },\r\n            children: menu ? [\r\n                label,\r\n                menu\r\n            ] : [\r\n                label\r\n            ],\r\n            listeners: {\r\n                trigger: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemElement.prototype,\r\n        button(init: {\r\n            name: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menu(init: {\r\n            name: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"menu\"\r\n            });\r\n        },\r\n        submenu(init: {\r\n            name: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"submenu\"\r\n            });\r\n        }\r\n    }\r\n);","import { element, CustomElement, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuItemElement, EMenuItem } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuItemGroupElement };\r\nexport { EMenuItemGroup };\r\n\r\ninterface HTMLEMenuItemGroupElementConstructor {\r\n    readonly prototype: HTMLEMenuItemGroupElement;\r\n    new(): HTMLEMenuItemGroupElement;\r\n}\r\n\r\ninterface HTMLEMenuItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    label: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitemgroup\": HTMLEMenuItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitemgroup\"\r\n})\r\nclass HTMLEMenuItemGroupElementBase extends HTMLElement implements HTMLEMenuItemGroupElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            flex-direction: column;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEMenuItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEMenuItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            //item_i.index = i;\r\n        });\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\":\r\n                const label = this.shadowRoot.querySelector(\"[part=label]\");\r\n                if (label) {\r\n                    label.textContent = newValue;\r\n                }\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemGroupElement: HTMLEMenuItemGroupElementConstructor = HTMLEMenuItemGroupElementBase;\r\n\r\ninterface EMenuItemGroupConstructor {\r\n    readonly prototype: HTMLEMenuItemGroupElement;\r\n    new(init: {\r\n        name?: string;\r\n        items: HTMLEMenuItemElement[];\r\n    }): HTMLEMenuItemGroupElement;\r\n    radios(init: {name: string, items: {label: string, value: string}[]}): HTMLEMenuItemGroupElement;\r\n}\r\n\r\nvar EMenuItemGroup = <EMenuItemGroupConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string,\r\n        items: HTMLEMenuItemElement[]\r\n    }) {\r\n        const {name, items} = init;\r\n        return element(\"e-menuitemgroup\", {\r\n            attributes: {\r\n                name: name\r\n            },\r\n            children: items\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemGroupElement.prototype,\r\n        radios: (init: {\r\n            name: string,\r\n            items: {\r\n                label: string,\r\n                value: string\r\n            }[]\r\n        }) => {\r\n            const {name, items} = init;\r\n            return element(\"e-menuitemgroup\", {\r\n                attributes: {\r\n                    name: name\r\n                },\r\n                children: items.map(\r\n                    ({label, value}) => new EMenuItem({name, label, type: \"radio\", value})\r\n                )\r\n            });\r\n        }\r\n    }\r\n);","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuElement };\r\nexport { EMenu };\r\n\r\ninterface HTMLEMenuElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    items(): HTMLEMenuItemElement[];\r\n    name: string;\r\n    contextual: boolean;\r\n    positionContextual(x: number, y: number): void;\r\n}\r\n\r\ninterface HTMLEMenuElementConstructor {\r\n    readonly prototype: HTMLEMenuElement;\r\n    new(): HTMLEMenuElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menu\": HTMLEMenuElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar toggleTimeouts: WeakMap<HTMLEMenuItemElement, {clear(): void;}>;\r\n\r\n@CustomElement({\r\n    name: \"e-menu\"\r\n})\r\nclass HTMLEMenuElementBase extends HTMLElement implements HTMLEMenuElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    items(): HTMLEMenuItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        ));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        const {activeIndex} = this;\r\n        return this.querySelector<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem:focus-within\"\r\n        ) ?? activeIndex > -1 ? this.items()[activeIndex] ?? null : null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    contextual!: boolean;\r\n\r\n    #walker: TreeWalker;\r\n    #activeIndex: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        toggleTimeouts = new WeakMap();\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        this.#activeIndex = -1;\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"mouseout\", this.#handleMouseOutEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    positionContextual(x: number, y: number): void {\r\n        const {style} = this;\r\n        const {width: menuWidth, height: menuHeight} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        const left = x + scrollX;\r\n        const top = y + scrollY;\r\n        const {clientWidth, clientHeight} = document.body;\r\n        const overflowX = left + menuWidth - clientWidth;\r\n        const overflowY = top + menuHeight - clientHeight;\r\n        style.setProperty(\"left\", `${overflowX > 0 ? left - menuWidth : left}px`);\r\n        style.setProperty(\"top\", `${overflowY > 0 ? top - menuHeight : top}px`);\r\n    }\r\n\r\n    #collapseSubmenus(): void {\r\n        this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem[expanded]\"\r\n        )\r\n        .forEach((item_i) => {\r\n            item_i.collapse();\r\n        });\r\n    }\r\n\r\n    #isClosestMenu(target: Element): boolean {\r\n        return target.closest(\":is(e-menu)\") == this;\r\n    }\r\n\r\n    #nearestItem(target: Element): HTMLEMenuItemElement | null {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextNode();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        return menu instanceof HTMLEMenuElementBase ?\r\n            menu.#firstItem() :\r\n            null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        if (item !== null) {\r\n            this.#activeIndex = this.items().indexOf(item);\r\n        }\r\n    }\r\n\r\n    async #setItemTimeout(item: HTMLEMenuItemElement, delay?: number): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => {\r\n                resolve(void 0);\r\n            }, delay ?? 0);\r\n            toggleTimeouts.set(item, {\r\n                clear: () => {\r\n                    clearTimeout(timeout);\r\n                    reject();\r\n                }\r\n            });\r\n        }).then(() => {\r\n            toggleTimeouts.delete(item);\r\n        });\r\n    }\r\n\r\n    #clearItemTimeout(item: HTMLEMenuItemElement): void {\r\n        const timeout = toggleTimeouts.get(item);\r\n        if (typeof timeout !== \"undefined\") {\r\n            toggleTimeouts.delete(item);\r\n            timeout.clear();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const {contextual} = this;\r\n            if (contextual) {\r\n                try {\r\n                    this.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const isClosestMenu = this.#isClosestMenu(target);\r\n                if (isClosestMenu) {\r\n                    const {type, name, value} = target;\r\n                    if (type == \"radio\") {\r\n                        this.querySelectorAll<HTMLEMenuItemElement>(\r\n                            `:is(:scope, :scope > e-menuitemgroup) > e-menuitem[type=radio][name=${name}]`\r\n                        )\r\n                        .forEach((radio_i) => {\r\n                            radio_i.checked = radio_i.value == value;\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem) {\r\n                this.#setActiveItem(nearestItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const {contextual} = this;\r\n            if (contextual) {\r\n                try {\r\n                    this.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const {activeItem} = this;\r\n                if (activeItem?.expanded) {\r\n                    activeItem.collapse();\r\n                }\r\n                this.#setActiveItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.#firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem() :\r\n                    this.#firstItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                firstItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                lastItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            activeItem.expand();\r\n                            if (activeItem.expanded) {\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            if (!activeItem.expanded) {\r\n                                activeItem.expand();\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                                event.stopPropagation();\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOutEvent(event: MouseEvent): void {\r\n        const {target, relatedTarget} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem !== null) {\r\n                if (nearestItem.type == \"submenu\" &&\r\n                    !nearestItem.expanded) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLEMenuElement\r\n                ) == this;\r\n                if (isTargetClosestMenu) {\r\n                    const {activeItem} = this;\r\n                    if (activeItem?.type == \"submenu\" &&\r\n                        activeItem.expanded) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, 400)\r\n                            .then(() => {\r\n                                activeItem.collapse();\r\n                            })\r\n                            .catch(() => void 0);\r\n                    }\r\n                    const {clientX, clientY} = event;\r\n                    const {left, right, top, bottom} = this.getBoundingClientRect();\r\n                    const intersectsWithMouse = !(\r\n                        left > clientX || right < clientX || top > clientY || bottom < clientY\r\n                    );\r\n                    const containsRelatedTarget = this.contains(<Node>relatedTarget);\r\n                    if (intersectsWithMouse && containsRelatedTarget) {\r\n                        if (relatedTarget instanceof HTMLEMenuElement && relatedTarget !== this) {\r\n                            relatedTarget.focus({preventScroll: true});\r\n                        }\r\n                        else {\r\n                            this.focus({preventScroll: true});\r\n                            this.#setActiveItem(null);\r\n                        }\r\n                    }\r\n                    if (!intersectsWithMouse) {\r\n                        this.focus({preventScroll: true});\r\n                        this.#setActiveItem(null);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem !== null) {\r\n                if (nearestItem.type == \"submenu\" && nearestItem.expanded) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLEMenuElement\r\n                ) == this;\r\n                if (isTargetClosestMenu) {\r\n                    const {activeItem} = this;\r\n                    if (activeItem?.type == \"submenu\" &&\r\n                        activeItem.expanded && \r\n                        !activeItem.contains(<Node>target)) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, 400)\r\n                            .then(() => {\r\n                                activeItem.collapse();\r\n                            })\r\n                            .catch(() => void 0);\r\n                    }\r\n                    this.#setActiveItem(nearestItem);\r\n                    nearestItem.focus({preventScroll: true});\r\n                    if (nearestItem.type == \"submenu\") {\r\n                        if (!nearestItem.expanded) {\r\n                            this.#clearItemTimeout(nearestItem);\r\n                            this.#setItemTimeout(nearestItem, 200)\r\n                                .then(() => {\r\n                                    const {activeItem} = this;\r\n                                    this.#collapseSubmenus();\r\n                                    if (activeItem) {\r\n                                        this.#clearItemTimeout(activeItem);\r\n                                        activeItem.expand();\r\n                                        activeItem.menu?.focus({preventScroll: true});\r\n                                    }\r\n                                })\r\n                                .catch(() => void 0);\r\n                        }\r\n                        else {\r\n                            nearestItem.menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuElement: HTMLEMenuElementConstructor = HTMLEMenuElementBase;\r\n\r\ninterface EMenuConstructor {\r\n    readonly prototype: HTMLEMenuElement;\r\n    new(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }): HTMLEMenuElement;\r\n}\r\n\r\nvar EMenu = <EMenuConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }) {\r\n        const {name, children} = init;\r\n        return element(\"e-menu\", {\r\n            attributes: {\r\n                name: name,\r\n                tabindex: -1,\r\n            },\r\n            children: children\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuElement.prototype,\r\n    }\r\n);","import { AttributeProperty, CustomElement, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\n\r\nexport { HTMLEGridRowElement };\r\n\r\ninterface HTMLEGridRowElementConstructor {\r\n    readonly prototype: HTMLEGridRowElement;\r\n    new(): HTMLEGridRowElement;\r\n}\r\n\r\ninterface HTMLEGridRowElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    active: boolean;\r\n    selected: boolean;\r\n    posinset: number;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrow\": HTMLEGridRowElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrow\"\r\n})\r\nclass HTMLEGridRowElementBase extends HTMLElement implements HTMLEGridRowElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    #menu: HTMLEMenuElement | null;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row;\r\n                        }\r\n\r\n                        :host([droptarget]) {\r\n                            background-color: gainsboro;\r\n                        }\r\n                        \r\n                        :host(:hover) {\r\n                            background-color: rgba(135, 206, 250, 0.2);\r\n                        }\r\n\r\n                        :host([active]) {\r\n                            outline: 1px solid rgb(135, 206, 250);\r\n                            outline-offset: -1px;\r\n                        }\r\n\r\n                        :host([selected]) {\r\n                            background-color: rgba(135, 206, 250, 0.4);\r\n                            outline: 1px solid rgb(135, 206, 250);\r\n                            outline-offset: -1px;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\"),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#menu = null;\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"menu\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#menu = element instanceof HTMLEMenuElement ? element : null;\r\n                break;\r\n            }\r\n            default: {\r\n                const assignedCells = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n                    .assignedElements()\r\n                    .filter(\r\n                        element_i => element_i instanceof HTMLEGridCellElement\r\n                    );\r\n                assignedCells.forEach((cell_i, i) => {\r\n                    cell_i.posinset = i;\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowElement: HTMLEGridRowElementConstructor = HTMLEGridRowElementBase;","import { HTMLEGridElement } from \"./Grid\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\n\r\nexport { HTMLEGridCellCollection };\r\n\r\ninterface HTMLEGridCellCollectionConstructor {\r\n    readonly prototype: HTMLEGridCellCollection;\r\n    new(root: HTMLElement): HTMLEGridCellCollection;\r\n}\r\n\r\ninterface HTMLEGridCellCollection {\r\n    length: number;\r\n    item(index: number): HTMLEGridCellElement | null;\r\n    namedItem(name: string): HTMLEGridCellElement | null;\r\n    values(): IterableIterator<HTMLEGridCellElement>;\r\n}\r\n\r\nclass HTMLEGridCellCollectionBase implements HTMLEGridCellCollection {\r\n    #walker: TreeWalker;\r\n\r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridCellElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEGridCellElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEGridCellElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEGridCellElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEGridCellElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEGridCellElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEGridCellElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEGridCellElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEGridCellElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridCellCollection: HTMLEGridCellCollectionConstructor =  HTMLEGridCellCollectionBase;","import { HTMLEGridElement } from \"./Grid\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\n\r\nexport { HTMLEGridRowCollection };\r\n\r\ninterface HTMLEGridRowCollectionConstructor {\r\n    readonly prototype: HTMLEGridRowCollection;\r\n    new(root: HTMLElement): HTMLEGridRowCollection;\r\n}\r\n\r\ninterface HTMLEGridRowCollection {\r\n    length: number;\r\n    item(index: number): HTMLEGridRowElement | null;\r\n    namedItem(name: string): HTMLEGridRowElement | null;\r\n    values(): IterableIterator<HTMLEGridRowElement>;\r\n}\r\n\r\nclass HTMLEGridRowCollectionBase implements HTMLEGridRowCollection {\r\n    #walker: TreeWalker;\r\n    \r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEGridRowElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEGridRowElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEGridRowElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEGridRowElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEGridRowElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEGridRowElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEGridRowElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEGridRowElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowCollection: HTMLEGridRowCollectionConstructor =  HTMLEGridRowCollectionBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\n\r\nexport { HTMLEGridBodyElement };\r\n\r\ninterface HTMLEGridBodyElementConstructor {\r\n    readonly prototype: HTMLEGridBodyElement;\r\n    new(): HTMLEGridBodyElement;\r\n}\r\n\r\ninterface HTMLEGridBodyElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridbody\": HTMLEGridBodyElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridbody\"\r\n})\r\nclass HTMLEGridBodyElementBase extends HTMLElement implements HTMLEGridBodyElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridBodyElement: HTMLEGridBodyElementConstructor = HTMLEGridBodyElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridHeadElement } from \"./GridHead\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\n\r\nexport { HTMLEGridElement };\r\n\r\ninterface HTMLEGridElementConstructor {\r\n    readonly prototype: HTMLEGridElement;\r\n    new(): HTMLEGridElement;\r\n}\r\n\r\ninterface HTMLEGridElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly body: HTMLEGridBodyElement | null;\r\n    readonly head: HTMLEGridHeadElement | null\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n    readonly activeCell: HTMLEGridCellElement | null;\r\n    readonly activeCellIndex: number;\r\n    readonly activeRow: HTMLEGridRowElement | null;\r\n    readonly activeRowIndex: number;\r\n    selectby: \"cell\" | \"row\";\r\n    name: string;\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    clearSelection(): void;\r\n    selectedCells(): HTMLEGridCellElement[];\r\n    selectedRows(): HTMLEGridRowElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-grid\": HTMLEGridElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-grid\"\r\n})\r\nclass HTMLEGridElementBase extends HTMLElement implements HTMLEGridElement {\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    get activeCellIndex(): number {\r\n        return this.#activeCellIndex;\r\n    }\r\n\r\n    get activeCell(): HTMLEGridCellElement | null {\r\n        return this.cells.item(this.#activeCellIndex) ?? null;\r\n    }\r\n\r\n    get activeRowIndex(): number {\r\n        return this.#activeRowIndex;\r\n    }\r\n\r\n    get activeRow(): HTMLEGridRowElement | null {\r\n        return this.rows.item(this.#activeRowIndex) ?? null;\r\n    }\r\n\r\n    get body(): HTMLEGridBodyElement | null {\r\n        return this.querySelector<HTMLEGridBodyElement>(\":scope > e-gridbody\");\r\n    }\r\n\r\n    get head(): HTMLEGridHeadElement | null {\r\n        return this.querySelector<HTMLEGridHeadElement>(\":scope > e-gridhead\");\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"cell\"})\r\n    selectby!: \"cell\" | \"row\";\r\n\r\n    #activeCellIndex: number;\r\n    #activeRowIndex: number;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #cellsWalker: TreeWalker;\r\n    #rowsWalker: TreeWalker;\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#cellsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#cellsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#rowsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#rowsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeCellIndex = -1;\r\n        this.#activeRowIndex = -1;\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.#clearCellsSelection();\r\n        this.#clearRowsSelection();\r\n    }\r\n\r\n    selectedCells(): HTMLEGridCellElement[] {\r\n        return Array.from(this.querySelectorAll(\"e-gridcell[selected]\"));\r\n    }\r\n\r\n    selectedRows(): HTMLEGridRowElement[] {\r\n        return Array.from(this.querySelectorAll(\"e-gridrow[selected]\"));\r\n    }\r\n\r\n    #cellsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridCellElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #rowsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridRowElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getCellsRange(from: HTMLEGridCellElement, to: HTMLEGridCellElement): HTMLEGridCellElement[] {\r\n        const cells = Array.from(this.cells.values());\r\n        const fromIndex = cells.indexOf(from);\r\n        const toIndex = cells.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return cells.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #getRowsRange(from: HTMLEGridRowElement, to: HTMLEGridRowElement): HTMLEGridRowElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleRow = this.#nextRow(from);\r\n            while (nextVisibleRow && nextVisibleRow !== to) {\r\n                range.push(nextVisibleRow);\r\n                nextVisibleRow = this.#nextRow(nextVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleRow = this.#previousRow(from);\r\n            while (previousVisibleRow && previousVisibleRow !== to) {\r\n                range.push(previousVisibleRow);\r\n                previousVisibleRow = this.#previousRow(previousVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setCellsSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((selectedCell_i) => {\r\n            if (!cells.includes(selectedCell_i)) {\r\n                selectedCell_i.selected = false;\r\n            }\r\n        });\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setRowsSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((selectedRow_i) => {\r\n            if (!rows.includes(selectedRow_i)) {\r\n                selectedRow_i.selected = false;\r\n            }\r\n        });\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addCellsToSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addRowsToSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeCellsFromSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        cells.forEach((cell_i) => {\r\n            if (selectedCells.includes(cell_i)) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeRowsFromSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        rows.forEach((row_i) => {\r\n            if (selectedRows.includes(row_i)) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearCellsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((cell_i) => {\r\n            if (cell_i.selected) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearRowsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((row_i) => {\r\n            if (row_i.selected) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveCell(cell: HTMLEGridCellElement | null): void {\r\n        const {activeCell, cells} = this;\r\n        if (activeCell !== null && activeCell !== cell) {\r\n            activeCell.active = false;\r\n            activeCell.tabIndex = -1;\r\n        }\r\n        else if (cell !== null) {\r\n            const cellsWalker = this.#cellsWalker;\r\n            cellsWalker.currentNode = cell;\r\n            cell.active = true;\r\n            cell.tabIndex = 0;\r\n            const closestRow = this.#closestRow(cell);\r\n            if (closestRow) {\r\n                this.#setActiveRow(closestRow);\r\n            }\r\n            this.#activeCellIndex = Array.from(cells.values()).indexOf(cell);\r\n        }\r\n        else {\r\n            this.#activeCellIndex = -1;\r\n        }\r\n    }\r\n\r\n    #setActiveRow(row: HTMLEGridRowElement | null): void {\r\n        const {activeRow, rows} = this;\r\n        if (activeRow !== null && activeRow !== row) {\r\n            activeRow.active = false;\r\n            activeRow.tabIndex = -1;\r\n        }\r\n        else if (row !== null) {\r\n            const rowsWalker = this.#rowsWalker;\r\n            rowsWalker.currentNode = row;\r\n            row.active = true;\r\n            row.tabIndex = 0;\r\n            this.#activeRowIndex = Array.from(rows.values()).indexOf(row);\r\n        }\r\n        else {\r\n            this.#activeRowIndex = -1;\r\n        }\r\n    }\r\n\r\n    #firstCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.firstChild();\r\n    }\r\n\r\n    #lastCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.lastChild();\r\n    }\r\n\r\n    #previousCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.previousNode();\r\n    }\r\n\r\n    #nextCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.nextNode();\r\n    }\r\n\r\n    #closestRow(cell: HTMLEGridCellElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = cell;\r\n        return <HTMLEGridRowElement | null>rowsWalker.parentNode();\r\n    }\r\n\r\n    #firstRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.firstChild();\r\n    }\r\n\r\n    #lastRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.lastChild();\r\n    }\r\n\r\n    #previousRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.previousNode();\r\n    }\r\n\r\n    #nextRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.nextNode();\r\n    }\r\n\r\n    #topCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const {cells: closestRowCells} = closestRow;\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const previousRow = this.#previousRow(closestRow);\r\n            if (previousRow) {\r\n                const {cells: previousRowCells} = previousRow;\r\n                return previousRowCells.item(\r\n                    Math.min(cellIndex, previousRowCells.length)\r\n                );\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #bottomCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const {cells: closestRowCells} = closestRow;\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const nextRow = this.#nextRow(closestRow);\r\n            if (nextRow) {\r\n                const {cells: nextRowCells} = nextRow;\r\n                return nextRowCells.item(\r\n                    Math.min(cellIndex, nextRowCells.length)\r\n                );\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent) {\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const composedPath = event.composedPath();\r\n                const targetCell = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridCellElement\r\n                ) : null;\r\n                if (targetCell instanceof HTMLEGridCellElement) {\r\n                    const selectedCells = this.selectedCells();\r\n                    if (!selectedCells.includes(targetCell)) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    targetCell.focus({preventScroll: true});\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const composedPath = event.composedPath();\r\n                const targetRow = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridRowElement\r\n                ) : null;\r\n                if (targetRow instanceof HTMLEGridRowElement) {\r\n                    const selectedRows = this.selectedRows();\r\n                    if (!selectedRows.includes(targetRow)) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    targetRow.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {ctrlKey, shiftKey} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const composedPath = event.composedPath();\r\n                const targetCell = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridCellElement\r\n                ) : null;\r\n                const selectedCells = this.selectedCells();\r\n                if (targetCell instanceof HTMLEGridCellElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetCell.selected ?\r\n                            this.#addCellsToSelection(targetCell) :\r\n                            this.#removeCellsFromSelection(targetCell);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedCell = selectedCells[selectedCells.length - 1];\r\n                        if (lastSelectedCell) {\r\n                            const range = this.#getCellsRange(\r\n                                lastSelectedCell,\r\n                                targetCell\r\n                            );\r\n                            if (range) {\r\n                                selectedCells.includes(targetCell) ?\r\n                                    this.#removeCellsFromSelection(...range) :\r\n                                    this.#addCellsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setCellsSelection(targetCell);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const selectedRows = this.selectedRows();\r\n                const composedPath = event.composedPath();\r\n                const targetRow = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridRowElement\r\n                ) : null;\r\n                if (targetRow instanceof HTMLEGridRowElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetRow.selected ?\r\n                            this.#addRowsToSelection(targetRow) :\r\n                            this.#removeRowsFromSelection(targetRow);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedRow = selectedRows[selectedRows.length - 1];\r\n                        if (lastSelectedRow) {\r\n                            const range = this.#getRowsRange(\r\n                                lastSelectedRow,\r\n                                targetRow\r\n                            );\r\n                            if (range) {\r\n                                selectedRows.includes(targetRow) ?\r\n                                    this.#removeRowsFromSelection(...range) :\r\n                                    this.#addRowsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setRowsSelection(targetRow);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {selectby, activeCell, activeRow} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    switch (selectby) {\r\n                        case \"cell\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const firstCell = firstRow ? this.#firstCell(firstRow) : null;\r\n                            const lastRow = this.#lastRow();\r\n                            const lastCell = lastRow ? this.#lastCell(lastRow) : null;\r\n                            if (firstCell && lastCell) {\r\n                                const range = this.#getCellsRange(firstCell, lastCell);\r\n                                if (range) {\r\n                                    this.#setCellsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"row\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const lastRow = this.#lastRow();\r\n                            if (firstRow && lastRow) {\r\n                                const range = this.#getRowsRange(firstRow, lastRow);\r\n                                if (range) {\r\n                                    this.#setRowsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const previousCell = this.#previousCell(activeCell);\r\n                        if (previousCell) {\r\n                            previousCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousCell.selected ?\r\n                                    this.#removeCellsFromSelection(previousCell) :\r\n                                    this.#addCellsToSelection(previousCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const nextCell = this.#nextCell(activeCell);\r\n                        if (nextCell) {\r\n                            nextCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextCell.selected ?\r\n                                    this.#removeCellsFromSelection(nextCell) :\r\n                                    this.#addCellsToSelection(nextCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const firstRow = activeRow ?? this.#firstRow();\r\n                        const topCell = activeCell ?\r\n                            this.#topCell(activeCell) :\r\n                            firstRow ?\r\n                            this.#firstCell(firstRow) :\r\n                            null;\r\n                        if (topCell) {\r\n                            topCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                topCell.selected ?\r\n                                    this.#removeCellsFromSelection(topCell) :\r\n                                    this.#addCellsToSelection(topCell);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const previousRow = activeRow ?\r\n                            this.#previousRow(activeRow) :\r\n                            this.#firstRow();\r\n                        if (previousRow) {\r\n                            previousRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousRow.selected ?\r\n                                    this.#removeRowsFromSelection(previousRow) :\r\n                                    this.#addRowsToSelection(previousRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const lastRow = activeRow ?? this.#lastRow();\r\n                        const bottomCell = activeCell ?\r\n                            this.#bottomCell(activeCell) :\r\n                            lastRow ?\r\n                            this.#lastCell(lastRow) :\r\n                            null;\r\n                            if (bottomCell) {\r\n                                bottomCell.focus({preventScroll: true});\r\n                                const {shiftKey} = event;\r\n                                if (shiftKey) {\r\n                                    bottomCell.selected ?\r\n                                        this.#removeCellsFromSelection(bottomCell) :\r\n                                        this.#addCellsToSelection(bottomCell);\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"row\": {\r\n                        const nextRow = activeRow ?\r\n                            this.#nextRow(activeRow) :\r\n                            this.#lastRow();\r\n                        if (nextRow) {\r\n                            nextRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextRow.selected ?\r\n                                    this.#removeRowsFromSelection(nextRow) :\r\n                                    this.#addRowsToSelection(nextRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const firstCell = this.#firstCell(activeRow);\r\n                            if (firstCell) {\r\n                                firstCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const firstRow = this.#firstRow();\r\n                        if (firstRow) {\r\n                            firstRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const lastCell = this.#lastCell(activeRow);\r\n                            if (lastCell) {\r\n                                lastCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const lastRow = this.#lastRow();\r\n                        if (lastRow) {\r\n                            lastRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeCell) {\r\n                            this.#setCellsSelection(activeCell);\r\n                            activeCell.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        if (activeRow) {\r\n                            this.#setRowsSelection(activeRow);\r\n                            activeRow.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        this.#clearCellsSelection();\r\n                        this.#setActiveCell(null);\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        this.#clearRowsSelection();\r\n                        this.#setActiveRow(null);\r\n                        break;\r\n                    }\r\n                }\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const {activeCell} = this;\r\n                if (activeCell && relatedTarget !== activeCell) {\r\n                    activeCell.focus();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const {activeRow} = this;\r\n                if (activeRow && relatedTarget !== activeRow) {\r\n                    activeRow.focus();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                if (target instanceof HTMLEGridCellElement) {\r\n                    this.#setActiveCell(target);\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                if (target instanceof HTMLEGridRowElement) {\r\n                    this.#setActiveRow(target);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedRows = <HTMLEGridRowElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridRowElement\r\n            );\r\n            assignedRows.forEach((row_i, i) => {\r\n                row_i.posinset = i;\r\n            });\r\n    }\r\n}\r\n\r\nvar HTMLEGridElement: HTMLEGridElementConstructor = HTMLEGridElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\n\r\nexport { HTMLEGridHeadElement };\r\n\r\ninterface HTMLEGridHeadElementConstructor {\r\n    readonly prototype: HTMLEGridHeadElement;\r\n    new(): HTMLEGridHeadElement;\r\n}\r\n\r\ninterface HTMLEGridHeadElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridhead\": HTMLEGridHeadElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridhead\"\r\n})\r\nclass HTMLEGridHeadElementBase extends HTMLElement implements HTMLEGridHeadElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                        }\r\n                    `\r\n                    ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridHeadElement: HTMLEGridHeadElementConstructor = HTMLEGridHeadElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuBarElement };\r\n\r\ninterface HTMLEMenuBarElementConstructor {\r\n    readonly prototype: HTMLEMenuBarElement;\r\n    new(): HTMLEMenuBarElement;\r\n}\r\n\r\ninterface HTMLEMenuBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    items(): HTMLEMenuItemElement[];\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    expanded: boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menubar\": HTMLEMenuBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menubar\"\r\n})\r\nclass HTMLEMenuBarElementBase extends HTMLElement implements HTMLEMenuBarElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    #activeIndex: number;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    items(): HTMLEMenuItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        ));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        const {activeIndex} = this;\r\n        return this.querySelector<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem:focus-within\"\r\n        ) ?? activeIndex > -1 ? this.items()[activeIndex] ?? null : null;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLEMenuItemElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        const {activeItem, expanded} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.collapse();\r\n        }\r\n        if (item !== null) {\r\n            if (expanded) {\r\n                item.expand();\r\n            }\r\n            this.#activeIndex = this.items().indexOf(item);\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    get #items(): HTMLEMenuItemElement[] {\r\n        return Array.from(\r\n            this.querySelectorAll(\":is(:scope, :scope > e-menuitemgroup) > e-menuitem\")\r\n        );\r\n    }\r\n\r\n    #isClosestMenu(target: Element): boolean {\r\n        return target.closest(\":is(e-menubar, e-menu)\") == this;\r\n    }\r\n\r\n    #nearestItem(target: Element): HTMLEMenuItemElement | null {\r\n        return this.#items.find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n    \r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof Element) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            this.#setActiveItem(nearestItem);\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, relatedTarget} = event;\r\n        if (target instanceof HTMLElement && !target.contains(<Element>relatedTarget)) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem) {\r\n                nearestItem.collapse();\r\n            }\r\n        }\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.expanded = false;\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {expanded, activeItem} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu && target !== activeItem && expanded) {\r\n                const {menu} = target;\r\n                if (menu) {\r\n                    target.expand();\r\n                    menu.focus({preventScroll: true});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {expanded, activeItem} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu) {\r\n                const isExpanded = !expanded;\r\n                this.expanded = isExpanded;\r\n                if (isExpanded) {\r\n                    if (activeItem && !activeItem.expanded) {\r\n                        activeItem.expand();\r\n                    }\r\n                    const {menu} = target;\r\n                    menu?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true})\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded} = this;\r\n        let {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.#firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem() : \r\n                    this.#lastItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    this.expanded = !expanded;\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.expanded = false;\r\n                    if (activeItem) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /*#handleTriggerEvent(): void {\r\n        const {activeItem} = this;\r\n        if (activeItem?.expanded) {\r\n            activeItem.collapse();\r\n        }\r\n        this.expanded = false;\r\n        this.focus({preventScroll: true});\r\n    }*/\r\n}\r\n\r\nvar HTMLEMenuBarElement: HTMLEMenuBarElementConstructor = HTMLEMenuBarElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuButtonElement };\r\nexport { EMenuButton };\r\n\r\ninterface HTMLEMenuButtonElementConstructor {\r\n    readonly prototype: HTMLEMenuButtonElement;\r\n    new(): HTMLEMenuButtonElement;\r\n}\r\n\r\ninterface HTMLEMenuButtonElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    readonly firstItem: HTMLEMenuItemElement | null;\r\n    name: string;\r\n    disabled: boolean;\r\n    expanded: boolean;\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-menubutton\"\r\n})\r\nclass HTMLEMenuButtonElementBase extends HTMLElement implements HTMLEMenuButtonElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    #menu: HTMLEMenuElement | null;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#menu = null;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"icon\"\r\n                        }\r\n                    }),\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"label\"\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n\r\n\r\n    toggle(force?: boolean): void {\r\n        const expand = force ?? !this.expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n\r\n    expand(): void {\r\n        if (!this.expanded) {\r\n            this.expanded = true;\r\n            this.#positionMenu();\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        if (this.expanded) {\r\n            this.expanded = false;\r\n        }\r\n    }\r\n\r\n    get firstItem(): HTMLEMenuItemElement | null {\r\n        return this.querySelector<HTMLEMenuItemElement>(\r\n            \":scope > :is(e-menu, e-menu > e-menuitemgroup) > e-menuitem\"\r\n        );\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const overflowX = itemRight + menuWidth - clientWidth;\r\n            const overflowY = itemTop + menuHeight - clientHeight;\r\n            menuStyle.setProperty(\"left\", `${\r\n                overflowX > 0 ?\r\n                scrollX + itemRight - menuWidth :\r\n                scrollX + itemLeft\r\n            }px`);\r\n            menuStyle.setProperty(\"top\", `${\r\n                overflowY > 0 ?\r\n                scrollY + itemTop - menuHeight :\r\n                scrollY + itemBottom\r\n            }px`);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target == this) {\r\n            this.toggle();\r\n            const {expanded} = this;\r\n            if (expanded) {\r\n                this.menu?.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded} = this;\r\n        switch (key) {\r\n            case \"ArrowDown\":\r\n            case \"Enter\":\r\n                if (!expanded) {\r\n                    this.expand();\r\n                    this.firstItem?.focus({preventScroll: true});\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            case \"Escape\":\r\n                if (expanded) {\r\n                    this.collapse();\r\n                    this.focus({preventScroll: true});\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n        this.#menu = (element instanceof HTMLEMenuElement) ? element : null;\r\n    }\r\n\r\n    #handleTriggerEvent(): void {\r\n        this.collapse();\r\n        this.focus({preventScroll: true});\r\n    }\r\n}\r\n\r\nvar HTMLEMenuButtonElement: HTMLEMenuButtonElementConstructor = HTMLEMenuButtonElementBase;\r\n\r\ninterface EMenuButtonConstructor {\r\n    readonly prototype: HTMLEMenuButtonElement;\r\n    new(init: {\r\n        menu: HTMLEMenuElement\r\n    }): HTMLEMenuButtonElement;\r\n}\r\n\r\nvar EMenuButton = <EMenuButtonConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        menu: HTMLEMenuElement\r\n    }) {\r\n        const {menu} = init;\r\n        menu.slot = \"menu\";\r\n        return element(\"e-menubutton\", {\r\n            attributes: {\r\n                tabindex: -1\r\n            },\r\n            children: [menu]\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuButtonElement.prototype,\r\n    }\r\n);","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionElement };\r\n\r\ninterface HTMLEOptionElementConstructor {\r\n    readonly prototype: HTMLEOptionElement;\r\n    new(): HTMLEOptionElement;\r\n}\r\n\r\ninterface HTMLEOptionElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    active: boolean;\r\n    value: string;\r\n    label: string;\r\n    description: string;\r\n    disabled: boolean;\r\n    selected: boolean;\r\n    default: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-option\": HTMLEOptionElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-option\"\r\n})\r\nclass HTMLEOptionElementBase extends HTMLElement implements HTMLEOptionElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n    \r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n        \r\n    @AttributeProperty({type: String})\r\n    description!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    default!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            user-select: none;\r\n                            white-space: nowrap;\r\n                            padding: 2px 12px;\r\n                        }\r\n                        \r\n                        :host([active]) {\r\n                            color: black;\r\n                            background-color: lightgray;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            color: lightgray;\r\n                        }\r\n\r\n                        :host::before {\r\n                            display: flex;\r\n                            content: \"\";\r\n                            width: 18px;\r\n                            height: 18px;\r\n                            margin-right: 6px;\r\n\r\n                            mask-size: 18px 18px;\r\n                            -webkit-mask-size: 18px 18px;\r\n                            background-color: var(--icon-color, none);\r\n                            -webkit-mask-image: var(--icon-image, none);\r\n                            mask-image: var(--icon-image, none);\r\n                        }\r\n\r\n                        [part=\"label\"] {\r\n                            flex: auto;\r\n                            text-align: left;\r\n                        }\r\n\r\n                        :host([default])::after {\r\n                            display: inline-block;\r\n                            content: \"(default)\";\r\n                            margin-left: 24px;\r\n                            text-align: right;\r\n                        }\r\n\r\n                        [part=\"content\"] {\r\n                            flex: auto;\r\n                            display: flex;\r\n                            overflow: hidden;\r\n                            pointer-events: none;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"label\"\r\n                        }\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector<HTMLElement>(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEOptionElement: HTMLEOptionElementConstructor = HTMLEOptionElementBase;","import { CustomElement, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionGroupElement };\r\n\r\ninterface HTMLEOptionGroupElementConstructor {\r\n    readonly prototype: HTMLEOptionGroupElement;\r\n    new(): HTMLEOptionGroupElement;\r\n}\r\n\r\ninterface HTMLEOptionGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-optiongroup\": HTMLEOptionGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-optiongroup\"\r\n})\r\nclass HTMLEOptionGroupElementBase extends HTMLElement implements HTMLEOptionGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n}\r\n\r\nvar HTMLEOptionGroupElement: HTMLEOptionGroupElementConstructor = HTMLEOptionGroupElementBase;","import { HTMLEOptionElement } from \"./Option\";\r\nimport { HTMLEOptionGroupElement } from \"./OptionGroup\";\r\nimport { HTMLESelectElement } from \"./Select\";\r\n\r\nexport { HTMLEOptionCollection };\r\n\r\ninterface HTMLEOptionCollectionConstructor {\r\n    readonly prototype: HTMLEOptionCollection;\r\n    new(root: HTMLESelectElement): HTMLEOptionCollection;\r\n}\r\n\r\ninterface HTMLEOptionCollection {\r\n    length: number;\r\n    item(index: number): HTMLEOptionElement | null;\r\n    namedItem(name: string): HTMLEOptionElement | null;\r\n    values(): IterableIterator<HTMLEOptionElement>;\r\n}\r\n\r\nclass HTMLEOptionCollectionBase implements HTMLEOptionCollection {\r\n    #walker: TreeWalker;\r\n\r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    get value(): string {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        while (currentNode !== null) {\r\n            if (currentNode.selected) {\r\n                return currentNode.value;\r\n            }\r\n            currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    constructor(root: HTMLESelectElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEOptionElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEOptionGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEOptionElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEOptionElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEOptionElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        let currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEOptionElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEOptionElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEOptionElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEOptionCollection: HTMLEOptionCollectionConstructor =  HTMLEOptionCollectionBase;","import { HTMLEActionElement } from \"../../containers/actions/Action\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEOptionElement } from \"./Option\";\r\nimport { HTMLEOptionCollection } from \"./OptionCollection\";\r\nimport { HTMLEOptionGroupElement } from \"./OptionGroup\";\r\n\r\nexport { HTMLESelectElement };\r\n\r\ninterface HTMLESelectElement extends HTMLEActionElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly options: HTMLEOptionCollection;\r\n    readonly activeIndex: number;\r\n    readonly activeOption: HTMLEOptionElement | null;\r\n    readonly selectedIndex: number;\r\n    readonly selectedOption: HTMLEOptionElement | null;\r\n    name: string;\r\n    label: string;\r\n    value: string;\r\n    expanded: boolean;\r\n    expand(): void;\r\n    collapse(): void;\r\n    toggle(force?: boolean): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ninterface HTMLESelectElementConstructor {\r\n    readonly prototype: HTMLESelectElement;\r\n    new(): HTMLESelectElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-select\": HTMLESelectElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-select\"\r\n})\r\nclass HTMLESelectElementBase extends HTMLEActionElement implements HTMLESelectElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly options: HTMLEOptionCollection;\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get selectedIndex(): number {\r\n        return this.#selectedIndex;\r\n    }\r\n\r\n    get activeOption(): HTMLEOptionElement | null {\r\n        return this.options.item(this.#activeIndex) ?? null;\r\n    }\r\n\r\n    get selectedOption(): HTMLEOptionElement | null {\r\n        return this.options.item(this.#selectedIndex) ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"select\", observed: true})\r\n    type!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    #walker: TreeWalker;\r\n    #activeIndex: number;\r\n    #selectedIndex: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"label\", {\r\n                        attributes: {\r\n                            part: \"label\"\r\n                        }\r\n                    }),\r\n                    element(\"output\", {\r\n                        attributes: {\r\n                            part: \"value\"\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"options\"\r\n                },\r\n                children: [\r\n                    element(\"slot\"),\r\n                    element(\"hr\", {\r\n                        attributes: {\r\n                            part: \"separator\"\r\n                        }\r\n                    }),\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"description\"\r\n                        }\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        this.#selectedIndex = -1;\r\n        this.options = new HTMLEOptionCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"value\": {\r\n                const {options} = this;\r\n                const matchingOption = Array.from(options.values()).find(option => option.value == newValue);\r\n                if (matchingOption) {\r\n                    this.#setSelectedOption(matchingOption);\r\n                    this.dispatchEvent(new Event(\"change\", {bubbles: true}));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {expanded, options} = this;\r\n        if (!expanded) {\r\n            this.expanded = true;\r\n            const {selectedIndex} = this;\r\n            this.#positionOptions();\r\n            const option = options.item(selectedIndex);\r\n            if (option) {\r\n                option.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {expanded} = this;\r\n        if (expanded) {\r\n            this.expanded = false;\r\n            this.focus();\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {expanded} = this;\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEOptionElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEOptionGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEOptionElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEOptionElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousOption(item: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEOptionElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextOption(item: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEOptionElement | null>walker.nextNode();\r\n    }\r\n\r\n    #selectOption(option: HTMLEOptionElement): void {\r\n        if (option && !option.disabled) {\r\n            this.value = option.value;\r\n        }\r\n    }\r\n\r\n    #setActiveOption(option: HTMLEOptionElement | null): void {\r\n        const {options, activeOption} = this;\r\n        if (activeOption !== null && activeOption !== option) {\r\n            activeOption.active = false;\r\n        }\r\n        if (option !== null) {\r\n            if (!option.disabled) {\r\n                const {shadowRoot} = this;\r\n                const descriptionPart = shadowRoot.querySelector(\"[part='description']\");\r\n                if (descriptionPart) {\r\n                    descriptionPart.textContent = option.description;\r\n                }\r\n                this.#activeIndex = Array.from(options.values()).indexOf(option);\r\n            }\r\n            option.active = true;\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    #setSelectedOption(option: HTMLEOptionElement | null): void {\r\n        const {options} = this;\r\n        if (option !== null) {\r\n            if (!option.disabled) {\r\n                const {shadowRoot, selectedOption} = this;\r\n                const valuePart = shadowRoot.querySelector(\"[part='value']\");\r\n                if (valuePart) {\r\n                    valuePart.textContent = option.label;\r\n                }\r\n                option.selected = true;\r\n                if (selectedOption) {\r\n                    selectedOption.selected = false;\r\n                }\r\n                this.#selectedIndex = Array.from(options.values()).indexOf(option);\r\n            }\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    #positionOptions(): void {\r\n        const {shadowRoot} = this;\r\n        const options = shadowRoot.querySelector<HTMLElement>(\"[part=options]\")!;\r\n        const {style: optionsStyle} = options;  \r\n        const {bottom: selectBottom, left: selectLeft} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        optionsStyle.setProperty(\"top\", `${selectBottom + scrollY}px`);\r\n        optionsStyle.setProperty(\"left\", `${selectLeft + scrollX}px`);\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEOptionElement) {\r\n            this.#selectOption(target);\r\n            this.collapse();\r\n        }\r\n        else {\r\n            if (target == this) {\r\n                this.toggle();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {expanded} = this;\r\n        if (target instanceof HTMLEOptionElement) {\r\n            if (!expanded) {\r\n                this.expand();\r\n            }\r\n            this.#setActiveOption(target);\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {expanded} = this;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            if (expanded) {\r\n                this.collapse();\r\n            }\r\n            this.#setActiveOption(null);\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {options, activeOption, selectedOption, selectedIndex, expanded} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                if (expanded && activeOption !== null) {\r\n                    const previousOption = this.#previousOption(activeOption) ?? this.#firstOption();\r\n                    if (previousOption) {\r\n                        previousOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else if (!expanded && selectedOption !== null) {\r\n                    const previousOption = this.#previousOption(selectedOption) ?? this.#firstOption();\r\n                    if (previousOption) {\r\n                        this.#selectOption(previousOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (expanded && activeOption !== null) {\r\n                    const nextOption = this.#nextOption(activeOption) ?? this.#lastOption();\r\n                    if (nextOption) {\r\n                        nextOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else if (!expanded && selectedOption !== null) {\r\n                    const nextOption = this.#nextOption(selectedOption) ?? this.#lastOption();\r\n                    if (nextOption) {\r\n                        this.#selectOption(nextOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstOption = this.#firstOption();\r\n                if (firstOption !== null) {\r\n                    if (expanded) {\r\n                        firstOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(firstOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastOption = this.#lastOption();\r\n                if (lastOption !== null) {\r\n                    if (expanded) {\r\n                        lastOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(lastOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (expanded) {\r\n                    this.collapse();\r\n                    if (activeOption !== null) {\r\n                        this.#selectOption(activeOption);\r\n                    }\r\n                }\r\n                else {\r\n                    const option = options.item(selectedIndex);\r\n                    if (option !== null) {\r\n                        option.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.collapse();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            default: {\r\n                const {activeIndex} = this;\r\n                const {length: keyLength} = key;\r\n                if (keyLength == 1) {\r\n                    const keyCode = key.charCodeAt(0);\r\n                    const optionsArray = Array.from(options.values());\r\n                    const firstMatchIndex = optionsArray.findIndex(\r\n                        option_i => option_i.label.toLowerCase().charCodeAt(0) == keyCode\r\n                    );\r\n                    const nextMatchIndex = optionsArray.findIndex(\r\n                        (option_i, i) => option_i.label.toLowerCase().charCodeAt(0) == keyCode && i > activeIndex\r\n                    );\r\n                    const matchIndex = nextMatchIndex > -1 ?\r\n                        nextMatchIndex :\r\n                        firstMatchIndex;\r\n                    const option = options.item(matchIndex);\r\n                    if (option !== null) {\r\n                        option.focus({preventScroll: true});\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEOptionElement) {\r\n            target.focus({preventScroll: true});\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const options = <HTMLEOptionElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEOptionElement\r\n            );\r\n        if (options.length > 0) {\r\n            let selectedOption: HTMLEOptionElement | null = null;\r\n            let {value} = this;\r\n            if (value) {\r\n                selectedOption = options.find(option => option.value == value) ?? null;\r\n            }\r\n            if (selectedOption == null) {\r\n                selectedOption = options.find(option => option.selected) ?? null;\r\n            }\r\n            if (selectedOption == null) {\r\n                selectedOption = options.find(option => option.default) ?? null;\r\n            }\r\n            if (selectedOption == null) {\r\n                selectedOption = this.#firstOption();\r\n            }\r\n            options.forEach(option_i => {\r\n                option_i.selected = option_i == selectedOption\r\n            });\r\n            if (selectedOption !== null) {\r\n                this.#setSelectedOption(selectedOption);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLESelectElement: HTMLESelectElementConstructor = HTMLESelectElementBase;","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEActionElement } from \"../actions/Action\";\r\nimport { HTMLEMenuButtonElement } from \"../menus/MenuButton\";\r\n\r\nexport { HTMLEToolBarItemElement };\r\nexport { EToolBarItem };\r\n\r\ninterface HTMLEToolBarItemElementConstructor {\r\n    readonly prototype: HTMLEToolBarItemElement;\r\n    new(): HTMLEToolBarItemElement;\r\n}\r\n\r\ninterface HTMLEToolBarItemElement extends HTMLEActionElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menubutton: HTMLEMenuButtonElement | null;\r\n    readonly select: HTMLESelectElement | null;\r\n    name: string;\r\n    label: string;\r\n    active: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritem\": HTMLEToolBarItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar slottedKeyboardListeners: WeakMap<HTMLElement, EventListener>;\r\nvar slottedTriggerListeners: WeakMap<HTMLElement, EventListener>;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritem\"\r\n})\r\nclass HTMLEToolBarItemElementBase extends HTMLEActionElement implements HTMLEToolBarItemElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get menubutton(): HTMLEMenuButtonElement | null {\r\n        return this.#menubutton;\r\n    }\r\n    \r\n    get select(): HTMLESelectElement | null {\r\n        return this.#select;\r\n    }\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n    \r\n    #menubutton: HTMLEMenuButtonElement | null;\r\n    #select: HTMLESelectElement | null;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"icon\"\r\n                        }\r\n                    }),\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"label\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\", {\r\n                        attributes: {\r\n                            name: \"select\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\", {\r\n                        attributes: {\r\n                            name: \"menubutton\"\r\n                        }\r\n                    })\r\n                ]\r\n            })\r\n        )\r\n        slottedKeyboardListeners = new WeakMap();\r\n        slottedTriggerListeners = new WeakMap();\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#menubutton = null;\r\n        this.#select = null;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    toggle(): void {\r\n        const {type} = this;\r\n        switch (type) {\r\n            case \"menubutton\": {\r\n                const {menubutton} = this;\r\n                if (menubutton) {\r\n                    menubutton.toggle();\r\n                    if (menubutton.expanded) {\r\n                        menubutton.firstItem?.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"select\": {\r\n                const {select} = this;\r\n                if (select) {\r\n                    select.toggle();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector<HTMLSpanElement>(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"value\": {\r\n                const {type} = this;\r\n                if (type == \"select\") {\r\n                    this.#updateSelectValue();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #updateSelectValue(): void {\r\n        const {select} = this;\r\n        if (select) {\r\n            const {value} = this;\r\n            const {value: selectValue} = select;\r\n            if (selectValue !== value) {\r\n                select.value = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    #addSlottedKeyboardHandler(element: HTMLElement): void {\r\n        const listener = <EventListener>this.#handleSlottedKeyboardEvent.bind(this);\r\n        slottedKeyboardListeners.set(element, listener);\r\n        element.addEventListener(\"keydown\", listener);\r\n    }\r\n\r\n    #removeSlottedKeyboardHandler(element: HTMLElement): void {\r\n        const listener = slottedKeyboardListeners.get(element);\r\n        if (listener) {\r\n            element.removeEventListener(\"keydown\", listener);\r\n        }\r\n    }\r\n\r\n    #addSlottedTriggerHandler(element: HTMLElement): void {\r\n        const listener = <EventListener>this.#handleSlottedTriggerEvent.bind(this);\r\n        slottedTriggerListeners.set(element, listener);\r\n        element.addEventListener(\"trigger\", listener);\r\n    }\r\n\r\n    #removeSlottedTriggerHandler(element: HTMLElement): void {\r\n        const listener = slottedTriggerListeners.get(element);\r\n        if (listener) {\r\n            element.removeEventListener(\"trigger\", listener);\r\n        }\r\n    }\r\n\r\n    #handleSlottedKeyboardEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        switch (key) {\r\n            case \"Enter\":\r\n            case \"Escape\": {\r\n                this.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlottedTriggerEvent(event: KeyboardEvent): void {\r\n        this.focus({preventScroll: true});\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target;\r\n        switch (slotName) {\r\n            case \"menubutton\": {\r\n                let menubutton = this.#menubutton;\r\n                if (menubutton !== null) {\r\n                    this.#removeSlottedTriggerHandler(menubutton);\r\n                    this.#removeSlottedKeyboardHandler(menubutton);\r\n                }\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                menubutton = element instanceof HTMLEMenuButtonElement ? element : null;\r\n                if (menubutton !== null) {\r\n                    this.#addSlottedTriggerHandler(menubutton);\r\n                    this.#addSlottedKeyboardHandler(menubutton);\r\n                }\r\n                this.#menubutton = menubutton;\r\n                break;\r\n            }\r\n            case \"select\": {\r\n                let select = this.#select;\r\n                if (select !== null) {\r\n                    this.#removeSlottedKeyboardHandler(select);\r\n                }\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                select = element instanceof HTMLESelectElement ? element : null;\r\n                if (select !== null) {\r\n                    this.#addSlottedKeyboardHandler(select);\r\n                }\r\n                this.#select = select;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemElement: HTMLEToolBarItemElementConstructor = HTMLEToolBarItemElementBase;\r\n\r\ninterface EToolBarItemConstructor {\r\n    readonly prototype: HTMLEToolBarItemElement;\r\n    new(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n    button(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    checkbox(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    radio(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    menubutton(init: {\r\n        name: string;\r\n        label: string;\r\n        menubutton: HTMLEMenuButtonElement;\r\n    }): HTMLEToolBarItemElement;\r\n    select(init: {\r\n        name: string;\r\n        label: string;\r\n        select: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n}\r\n\r\nvar EToolBarItem = <EToolBarItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menubutton, select} = init;\r\n        if (menubutton) {\r\n            menubutton.slot = \"menubutton\";\r\n        }\r\n        if (select) {\r\n            select.slot = \"select\";\r\n        }\r\n        return element(\"e-toolbaritem\", {\r\n            attributes: {\r\n                tabindex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type\r\n            },\r\n            children: menubutton ? [menubutton] : select ? [select] : void 0,\r\n            listeners: {\r\n                trigger: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEToolBarItemElement.prototype,\r\n        button(init: {\r\n            name: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menubutton(init: {\r\n            name: string;\r\n            label: string;\r\n            menubutton: HTMLEMenuButtonElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"menubutton\"\r\n            });\r\n        },\r\n        select(init: {\r\n            name: string;\r\n            label: string;\r\n            select: HTMLESelectElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"select\"\r\n            });\r\n        },\r\n    }\r\n);","\r\nimport { element, CustomElement, AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEToolBarItemGroupElement };\r\n\r\ninterface HTMLEToolBarItemGroupElementConstructor {\r\n    readonly prototype: HTMLEToolBarItemGroupElement;\r\n    new(): HTMLEToolBarItemGroupElement;\r\n}\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\ninterface HTMLEToolBarItemGroupElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n    disabled: boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritemgroup\": HTMLEToolBarItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritemgroup\"\r\n})\r\nclass HTMLEToolBarItemGroupElementBase extends HTMLElement implements HTMLEToolBarItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    disabled!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            width: max-content;\r\n                            flex-direction: row;\r\n                        }\r\n\r\n                        /*:host([orientation=\"vertical\"]) {\r\n                            flex-direction: column;\r\n                        }\r\n\r\n                        :host([orientation=\"horizontal\"]) {\r\n                            flex-direction: row;\r\n                        }*/\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const label = this.shadowRoot.querySelector<HTMLLabelElement>(\"[part='label']\");\r\n                if (label) {\r\n                    label.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"disabled\": {\r\n                /*this.items.forEach((item) => {\r\n                    item.disabled = newValue !== null;\r\n                });*/\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemGroupElement: HTMLEToolBarItemGroupElementConstructor = HTMLEToolBarItemGroupElementBase;","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEToolBarItemElement } from \"./ToolBarItem\";\r\nimport { HTMLEToolBarItemGroupElement } from \"./ToolBarItemGroup\";\r\n\r\nexport { HTMLEToolBarElement };\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\ninterface HTMLEToolBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    items(): HTMLEToolBarItemElement[];\r\n    readonly activeItem: HTMLEToolBarItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n}\r\n\r\ninterface HTMLEToolbarElementConstructor {\r\n    readonly prototype: HTMLEToolBarElement;\r\n    new(): HTMLEToolBarElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbar\": HTMLEToolBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbar\"\r\n})\r\nclass HTMLEToolBarElementBase extends HTMLElement implements HTMLEToolBarElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get activeItem(): HTMLEToolBarItemElement | null {\r\n        return this.querySelector<HTMLEToolBarItemElement>(\r\n            \"e-toolbaritem[active]\"\r\n        );\r\n    }\r\n\r\n    items(): HTMLEToolBarItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEToolBarItemElement>(\r\n            \":is(:scope, :scope > e-toolbaritemgroup) > e-toolbaritem\"\r\n        ));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    orientation!: ToolBarOrientation;\r\n\r\n    #walker: TreeWalker;\r\n    #activeIndex: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#activeIndex = -1;\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"change\", this.#handleChangeEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEToolBarItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEToolBarItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEToolBarItemElement | null>walker.previousSibling();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEToolBarItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEToolBarItemElement | null): void {\r\n        const {activeItem} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n            this.#activeIndex = this.items().indexOf(item);\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLESelectElement) {\r\n            const item = target.closest(\"e-toolbaritem\");\r\n            if (item !== null) {\r\n                const {select, type} = item;\r\n                if (target == select && select && type == \"select\") {\r\n                    const {value} = item;\r\n                    const {value: selectValue} = select;\r\n                    if (value !== selectValue) {\r\n                        item.value = selectValue;\r\n                        item.trigger();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEToolBarItemElement) {\r\n            const {type} = target;\r\n            switch (type) {\r\n                /*case \"menubutton\": {\r\n                    const {menubutton} = target;\r\n                    if (menubutton) {\r\n                        const {expanded} = menubutton;\r\n                        if (!expanded) {\r\n                            menubutton.expand();\r\n                            menubutton.menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                case \"select\": {\r\n                    const {select} = target;\r\n                    if (select) {\r\n                        select.toggle();\r\n                    }\r\n                    break;\r\n                }*/\r\n                default: {\r\n                    target.trigger();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const activeItem = this.items().find(\r\n            item_i => item_i.contains(<Node>target)\r\n        ) ?? null;\r\n        this.#setActiveItem(activeItem);\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.#setActiveItem(null);\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"menubutton\": {\r\n                            const {menubutton} = activeItem;\r\n                            if (menubutton) {\r\n                                const {expanded} = menubutton;\r\n                                if (!expanded) {\r\n                                    menubutton.expand();\r\n                                    menubutton.firstItem?.focus({preventScroll: true});\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"select\": {\r\n                            const {select} = activeItem;\r\n                            if (select) {\r\n                                select.expand();\r\n                            }\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            activeItem.trigger();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"select\": {\r\n                            activeItem.select?.expand();\r\n                            event.stopPropagation();\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    activeItem.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleTriggerEvent(event: Event): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEToolBarItemElement) {\r\n            const {type, name, value} = target;\r\n            if (type == \"radio\") {\r\n                this.querySelectorAll<HTMLEToolBarItemElement>(\r\n                    `:is(:scope, :scope > e-toolbaritemgroup) > e-toolbaritem[type=radio][name=${name}]`\r\n                ).forEach((radio_i) => {\r\n                    radio_i.checked = radio_i.value == value;\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarElement: HTMLEToolbarElementConstructor = HTMLEToolBarElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLETabPanelElement };\r\n\r\ninterface HTMLETabPanelElementConstructor {\r\n    readonly prototype: HTMLETabPanelElement;\r\n    new(): HTMLETabPanelElement;\r\n}\r\n\r\ninterface HTMLETabPanelElement extends HTMLElement {\r\n    name: string;\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tabpanel\"\r\n})\r\nclass HTMLETabPanelElementBase extends HTMLElement implements HTMLETabPanelElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n        \r\n                        :host([hidden]) {\r\n                            display: none;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n}\r\n\r\nvar HTMLETabPanelElement: HTMLETabPanelElementConstructor = HTMLETabPanelElementBase;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tabpanel\": HTMLETabPanelElement,\r\n    }\r\n}","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLETabPanelElement } from \"./TabPanel\";\r\n\r\nexport { ETabChangeEvent };\r\nexport { HTMLETabElement };\r\n\r\ninterface HTMLETabElementConstructor {\r\n    readonly prototype: HTMLETabElement;\r\n    new(): HTMLETabElement;\r\n}\r\n\r\ninterface HTMLETabElement extends HTMLElement {\r\n    name: string;\r\n    active: boolean;\r\n    disabled: boolean;\r\n    controls: string;\r\n    panel: HTMLETabPanelElement | null;\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ntype ETabChangeEvent = CustomEvent<{\r\n    tab: HTMLETabElement;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_tabchange\": ETabChangeEvent,\r\n    }\r\n\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tab\": HTMLETabElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tab\"\r\n})\r\nclass HTMLETabElementBase extends HTMLElement implements HTMLETabElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    #panel: HTMLETabPanelElement | null;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            user-select: none;\r\n                            white-space: nowrap;\r\n\r\n                            padding: 2px 6px;\r\n                            cursor: pointer;\r\n                        }\r\n                        \r\n                        :host([disabled]) {\r\n                            color: lightgray;\r\n                            pointer-events: none;\r\n                        }\r\n        \r\n                        :host([active]) {\r\n                            background-color: lightgray;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n        this.#panel = null;\r\n    }\r\n\r\n    get panel(): HTMLETabPanelElement | null {\r\n        return this.#panel;\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const panel = document.getElementById(this.controls);\r\n        if (panel !== this.#panel && panel instanceof HTMLETabPanelElement) {\r\n            this.#panel = panel;\r\n        }\r\n        if (panel)  {\r\n            panel.hidden = !this.active;\r\n        }\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"active\":\r\n                if (this.active) {\r\n                    this.dispatchEvent(new CustomEvent(\"e_tabchange\", {detail: {tab: this}, bubbles: true}));\r\n                }\r\n                const panel = document.getElementById(this.controls);\r\n                if (panel !== this.panel && panel instanceof HTMLETabPanelElement) {\r\n                    this.#panel = panel;\r\n                }\r\n                if (panel)  {\r\n                    panel.hidden = !this.active;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabElement: HTMLETabElementConstructor = HTMLETabElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLETabElement } from \"./Tab\";\r\n\r\nexport { HTMLETabListElement };\r\n\r\ninterface HTMLETabListElementConstructor {\r\n    readonly prototype: HTMLETabListElement;\r\n    new(): HTMLETabListElement;\r\n}\r\n\r\ninterface HTMLETabListElement extends HTMLElement {\r\n    readonly activeTab: HTMLETabElement | null;\r\n    tabs: HTMLETabElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tablist\": HTMLETabListElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tablist\"\r\n})\r\nclass HTMLETabListElementBase extends HTMLElement implements HTMLETabListElement {\r\n\r\n    tabs: HTMLETabElement[];\r\n\r\n    #activeIndex: number;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                            position: relative;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n        \r\n        this.tabs = [];\r\n        this.#activeIndex = 1;\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeTab(): HTMLETabElement | null {\r\n        return this.tabs[this.#activeIndex] || null;\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n        const slot = this.shadowRoot!.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", (event) => {\r\n\r\n                const tabs = <HTMLETabElement[]>(<HTMLSlotElement>event.target)\r\n                    .assignedElements()\r\n                    .filter(tab => tab instanceof HTMLETabElement);\r\n                this.tabs = tabs;\r\n                this.#activeIndex = this.tabs.findIndex(tab => tab.active);\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event) => {\r\n            switch (event.key) {\r\n                case \"ArrowUp\":\r\n                    this.focusTabAt((this.activeIndex <= 0) ? this.tabs.length - 1 : this.activeIndex - 1);\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    this.focusTabAt((this.activeIndex >= this.tabs.length - 1) ? 0 : this.activeIndex + 1);\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"Enter\":\r\n                    if (this.activeTab) {\r\n                        this.activateTab(this.activeTab);\r\n                    }\r\n                    break;\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"click\", (event) => {\r\n            const target = event.target;\r\n            if (target instanceof HTMLETabElement) {\r\n                target.active = true;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"e_tabchange\", (event) => {\r\n            const targetIndex = this.tabs.indexOf(event.detail.tab);\r\n            this.#activeIndex = targetIndex;\r\n            this.tabs.forEach((thisTab, thisTabIndex) => {\r\n                if (thisTabIndex !== targetIndex) {\r\n                    thisTab.active = false;\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    focusTabAt(index: number): void {\r\n        const tab = this.tabs[index];\r\n        if (tab) {\r\n            this.#activeIndex = index;\r\n            tab.focus();\r\n        }\r\n    }\r\n\r\n    activateTab(tab: HTMLETabElement) {\r\n        if (this.tabs.includes(tab)) {\r\n            tab.active = true;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabListElement: HTMLETabListElementConstructor = HTMLETabListElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLETreeElement } from \"./Tree\";\r\nimport { HTMLETreeItemElement } from \"./TreeItem\";\r\n\r\nexport { HTMLETreeItemGroupElement };\r\n\r\ninterface HTMLETreeItemGroupElementConstructor {\r\n    readonly prototype: HTMLETreeItemGroupElement;\r\n    new(): HTMLETreeItemGroupElement;\r\n}\r\n\r\ninterface HTMLETreeItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitemgroup\": HTMLETreeItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-treeitemgroup\"\r\n})\r\nclass HTMLETreeItemGroupElementBase extends HTMLElement implements HTMLETreeItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLETreeItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLETreeItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n            item_i.level = (() => {\r\n                let level = -1;\r\n                let closestItem: HTMLETreeItemElement | null = item_i;\r\n                while (closestItem !== null && closestItem.matches(\"e-tree :scope\")) {\r\n                    closestItem = closestItem.parentElement?.closest(\"e-treeitem\") ?? null;\r\n                    level++;\r\n                }\r\n                return level;\r\n            })();\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemGroupElement: HTMLETreeItemGroupElementConstructor = HTMLETreeItemGroupElementBase;","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\nimport { HTMLETreeElement } from \"./Tree\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeItemElement };\r\n\r\ninterface HTMLETreeItemElementConstructor {\r\n    readonly prototype: HTMLETreeItemElement;\r\n    new(): HTMLETreeItemElement;\r\n}\r\n\r\ninterface HTMLETreeItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly group: HTMLETreeItemGroupElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    expanded: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    level: number;\r\n    type: \"leaf\" | \"parent\";\r\n    toggle(force?: boolean): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitem\": HTMLETreeItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-treeitem\"\r\n})\r\nclass HTMLETreeItemElementBase extends HTMLElement implements HTMLETreeItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get group(): HTMLETreeItemGroupElement | null {\r\n        return this.#group;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    expanded!: boolean;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number, observed: true})\r\n    level!: number;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"leaf\"})\r\n    type!: \"leaf\" | \"parent\";\r\n\r\n    #group: HTMLETreeItemGroupElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"arrow\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"group\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.#group = null;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"expanded\": {\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const labelPart = this.shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"level\": {\r\n                this.style.setProperty(\"--level\", `${this.level}`);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        this.expanded = force ?? !this.expanded;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, shiftKey, ctrlKey} = event;\r\n        const {type} = this;\r\n        if (this == target && type == \"parent\" && !(shiftKey || ctrlKey)) {\r\n            this.toggle();\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target;\r\n        switch (slotName) {\r\n            case \"group\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#group = element instanceof HTMLETreeItemGroupElement ? element : null;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemElement: HTMLETreeItemElementConstructor = HTMLETreeItemElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLETreeItemElement } from \"./TreeItem\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeElement };\r\n\r\ninterface HTMLETreeElementConstructor {\r\n    readonly prototype: HTMLETreeElement;\r\n    new(): HTMLETreeElement;\r\n}\r\n\r\ninterface HTMLETreeElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLETreeItemElement>;\r\n    readonly activeItem: HTMLETreeItemElement | null;\r\n    readonly dropTargetItem: HTMLETreeItemElement | null;\r\n    droptarget: boolean;\r\n    name: string;\r\n    selectedItems(): HTMLETreeItemElement[];\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tree\": HTMLETreeElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-tree\"\r\n})\r\nclass HTMLETreeElementBase extends HTMLElement implements HTMLETreeElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLETreeItemElement>;\r\n\r\n    get activeItem(): HTMLETreeItemElement | null {\r\n        return this.querySelector<HTMLETreeItemElement>(\r\n            \"e-treeitem[active]\"\r\n        );\r\n    }\r\n\r\n    get dropTargetItem(): HTMLETreeItemElement | null {\r\n        return this.querySelector<HTMLETreeItemElement>(\r\n            \"e-treeitem[droptarget]\"\r\n        );\r\n    }\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.items = this.getElementsByTagName(\"e-treeitem\");\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    selectedItems(): HTMLETreeItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.#firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLETreeItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLETreeItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLETreeItemElement, to: HTMLETreeItemElement): HTMLETreeItemElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleItem = this.#nextItem(from);\r\n            while (nextVisibleItem && nextVisibleItem !== to) {\r\n                range.push(nextVisibleItem);\r\n                nextVisibleItem = this.#nextItem(nextVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleItem = this.#previousItem(from);\r\n            while (previousVisibleItem && previousVisibleItem !== to) {\r\n                range.push(previousVisibleItem);\r\n                previousVisibleItem = this.#previousItem(previousVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLETreeItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((item_i) => {\r\n            item_i.selected = false;\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLETreeItemElement | null): void {\r\n        const {activeItem} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = item;\r\n            item.active = true;\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n    \r\n    #setDropTargetItem(item: HTMLETreeItemElement | null): void {\r\n        const {dropTargetItem} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n        }\r\n    }\r\n\r\n    #firstItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousSibling = <HTMLETreeItemElement | null>walker.previousSibling();\r\n        return previousSibling ?\r\n            this.#deepestItem(previousSibling) :\r\n            <HTMLETreeItemElement | null>walker.parentNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const {type, expanded} = item;\r\n        return <HTMLETreeItemElement | null>(\r\n            type === \"leaf\" ?\r\n                walker.nextNode() :\r\n                expanded ?\r\n                    walker.nextNode() :\r\n                    walker.nextSibling() ??\r\n                    (walker.parentNode(), walker.nextSibling())\r\n        );\r\n    }\r\n\r\n    #deepestItem(item: HTMLETreeItemElement): HTMLETreeItemElement {\r\n        if (item.expanded) {\r\n            const walker = this.#walker;\r\n            const lastItem = <HTMLETreeItemElement>walker.lastChild();\r\n            if (lastItem) {\r\n                return this.#deepestItem(lastItem);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey, button} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const {selected} = target;\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setSelection(target);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            target.blur();\r\n                        }\r\n                        (!selected) ?\r\n                            this.#addToSelection(target) :\r\n                            this.#removeFromSelection(target);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const {activeItem} = this\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                target\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(target);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const {type} = target;\r\n            if (type == \"parent\") {\r\n                target.toggle(true);\r\n            }\r\n            this.#setDropTargetItem(target);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!this.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        const {root} = walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? root, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? root, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(\r\n                                firstItem,\r\n                                this.#deepestItem(lastItem)\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    if (activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                    else {\r\n                        const walker = this.#walker;\r\n                        const parentItem = <HTMLETreeItemElement>walker.parentNode();\r\n                        if (parentItem) {\r\n                            parentItem.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    if (!activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.#setActiveItem(null);\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            this.#setActiveItem(target);\r\n            this.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLETreeItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLETreeItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n            item_i.level = 0;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLETreeElement: HTMLETreeElementConstructor = HTMLETreeElementBase;","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEToolBarElement } from \"../toolbars/ToolBar\";\r\n\r\nexport { HTMLEListItemElement };\r\n\r\ninterface HTMLEListItemElementConstructor {\r\n    readonly prototype: HTMLEListItemElement;\r\n    new(): HTMLEListItemElement;\r\n}\r\n\r\ninterface HTMLEListItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly badge: HTMLSpanElement | null;\r\n    readonly toolbar: HTMLEToolBarElement | null;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitem\": HTMLEListItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-listitem\"\r\n})\r\nclass HTMLEListItemElementBase extends HTMLElement implements HTMLEListItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    get badge(): HTMLElement | null {\r\n        return this.#badge;\r\n    }\r\n\r\n    get toolbar(): HTMLEToolBarElement | null {\r\n        return this.#toolbar;\r\n    }\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    #badge: HTMLElement | null;\r\n    #toolbar: HTMLEToolBarElement | null;\r\n    #menu: HTMLEMenuElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#badge = null;\r\n        this.#menu = null;\r\n        this.#toolbar = null;\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this))\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"toolbar\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#toolbar = element instanceof HTMLEToolBarElement ? element : null;\r\n                break;\r\n            }\r\n            case \"badge\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#badge = element instanceof HTMLSpanElement ? element : null;\r\n                break;\r\n            }\r\n            case \"menu\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#menu = element instanceof HTMLEMenuElement ? element : null;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEListItemElement: HTMLEListItemElementConstructor = HTMLEListItemElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEListItemElement } from \"./ListItem\";\r\n\r\nexport { HTMLEListItemGroupElement };\r\n\r\ninterface HTMLEListItemGroupElementConstructor {\r\n    readonly prototype: HTMLEListItemGroupElement;\r\n    new(): HTMLEListItemGroupElement;\r\n}\r\n\r\ninterface HTMLEListItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitemgroup\": HTMLEListItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-listitemgroup\"\r\n})\r\nclass HTMLEListItemGroupElementBase extends HTMLElement implements HTMLEListItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEListItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEListItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEListItemGroupElement: HTMLEListItemGroupElementConstructor = HTMLEListItemGroupElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEListItemElement } from \"./ListItem\";\r\nimport { HTMLEListItemGroupElement } from \"./ListItemGroup\";\r\n\r\nexport { HTMLEListElement };\r\n\r\ninterface HTMLEListElementConstructor {\r\n    readonly prototype: HTMLEListElement;\r\n    new(): HTMLEListElement;\r\n}\r\n\r\ninterface HTMLEListElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEListItemElement>;\r\n    readonly activeItem: HTMLEListItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    droptarget: boolean;\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    selectedItems(): HTMLEListItemElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-list\": HTMLEListElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-list\"\r\n})\r\nclass HTMLEListElementBase extends HTMLElement implements HTMLEListElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEListItemElement>;\r\n\r\n    get dropTargetItem(): HTMLEListItemElement | null {\r\n        return this.items[this.#dropTargetIndex] ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    #dropTargetIndex: number;\r\n    #activeIndex: number;\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        this.#dropTargetIndex = -1;\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.items = this.getElementsByTagName(\"e-listitem\");\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEListItemElement | null {\r\n        return this.items[this.activeIndex] ?? null;\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    selectedItems(): HTMLEListItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.#firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEListItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEListItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLEListItemElement, to: HTMLEListItemElement): HTMLEListItemElement[] {\r\n        const items = Array.from(this.items);\r\n        const fromIndex = items.indexOf(from);\r\n        const toIndex = items.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return items.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        selectedItems.forEach((item_i) => {\r\n            if (item_i.selected) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEListItemElement | null): void {\r\n        const {activeItem, items} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n            item.tabIndex = 0;\r\n            this.#activeIndex = Array.from(items).indexOf(item);\r\n        }\r\n    }\r\n\r\n    #setDropTargetItem(item: HTMLEListItemElement | null): void {\r\n        const {dropTargetItem, items} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n            this.#dropTargetIndex = Array.from(items).indexOf(item);\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n            this.#dropTargetIndex = -1;\r\n        }\r\n    }\r\n\r\n    #firstItem(): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLEListItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLEListItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEListItemElement): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEListItemElement | null>walker.previousNode();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEListItemElement): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const nextItem = <HTMLEListItemElement | null>walker.nextNode();\r\n        return nextItem;\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent) {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n            target.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey} = event;\r\n        const selectedItems = this.selectedItems();\r\n        if (target instanceof HTMLEListItemElement) {\r\n            if (!shiftKey && !ctrlKey) {\r\n                this.#setSelection(target);\r\n            }\r\n            else if (ctrlKey) {\r\n                (!target.selected) ?\r\n                    this.#addToSelection(target) :\r\n                    this.#removeFromSelection(target);\r\n                event.stopPropagation();\r\n            }\r\n            else if (shiftKey) {\r\n                const lastSelectedItem = selectedItems[selectedItems.length - 1];\r\n                if (lastSelectedItem) {\r\n                    const range = this.#getItemsRange(\r\n                        lastSelectedItem,\r\n                        target\r\n                    );\r\n                    if (range) {\r\n                        if (selectedItems.includes(target)) {\r\n                            this.#removeFromSelection(...range);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(...range);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.#setSelection(target);\r\n                }\r\n                event.stopPropagation();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            this.#setDropTargetItem(target);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n    \r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n        const relatedTargetHost =\r\n            relatedTargetRoot instanceof ShadowRoot ?\r\n            relatedTargetRoot.host :\r\n            relatedTarget;\r\n        if (!this.contains(<Node>relatedTargetHost)) {\r\n            this.#setDropTargetItem(null);\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    const walker = this.#walker;\r\n                    const {root} = walker;\r\n                    const firstItem = <HTMLEListItemElement>(\r\n                        walker.currentNode = walker.parentNode() ?? root, walker.firstChild()\r\n                    );\r\n                    const lastItem = <HTMLEListItemElement>(\r\n                        walker.currentNode = walker.parentNode() ?? root, walker.lastChild()\r\n                    );\r\n                    const range = this.#getItemsRange(\r\n                        firstItem,\r\n                        lastItem\r\n                    );\r\n                    if (range) {\r\n                        this.#setSelection(...range);\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                const {activeItem} = this;\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.#setActiveItem(null);\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            this.#setActiveItem(target);\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (!this.#onSelection) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEListItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEListItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEListElement: HTMLEListElementConstructor = HTMLEListElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEDraggableElement };\r\n\r\ninterface HTMLEDraggableElementConstructor {\r\n    readonly prototype: HTMLEDraggableElement;\r\n    new(): HTMLEDraggableElement;\r\n}\r\n\r\ninterface HTMLEDraggableElement extends HTMLElement {\r\n    readonly referee: this | null;\r\n    readonly references: this[];\r\n    selected: boolean;\r\n    dragged: boolean;\r\n    dragovered: boolean;\r\n\r\n    connectedCallback(): void;\r\n    disconnectedCallback(): void;\r\n    getReference(): this;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-draggable\": HTMLEDraggableElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-draggable\"\r\n})\r\nclass HTMLEDraggableElementBase extends HTMLElement implements HTMLEDraggableElement {\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    dragovered!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    dragged!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    #referee: this | null;\r\n    readonly references: this[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            padding: 3px 4px;\r\n                            cursor: pointer;\r\n                            white-space: nowrap;\r\n                            border-radius: 4px;\r\n                            border: 1px solid black;\r\n                            user-select: none;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                            color: lightgray;\r\n                            border-color: lightgray;\r\n                        }\r\n        \r\n                        :host([selected]:active) {\r\n                            cursor: grabbing;\r\n                        }\r\n                        \r\n                        :host([selected]) {\r\n                            cursor: grab;\r\n                            font-weight: bold;\r\n                            outline: 1px auto black;\r\n                        }\r\n        \r\n                        :host([dragovered]) {\r\n                            border-style: dotted;\r\n                        }\r\n                        \r\n                        [part=\"container\"] {\r\n                            display: flex;\r\n                            align-items: center;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"container\"\r\n                },\r\n                children: [\r\n                    element(\"slot\", {\r\n                        children: [\r\n                            \"&nbsp;\"\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.references = [];\r\n        this.#referee = null;\r\n    }\r\n\r\n    get referee(): this | null {\r\n        return this.#referee;\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n        this.draggable = true;\r\n    }\r\n\r\n    disconnectedCallback(): void {\r\n        if (this.referee) {\r\n            const thisRefIndex = this.referee.references.indexOf(this);\r\n            if (thisRefIndex > -1) {\r\n                this.referee.references.splice(thisRefIndex, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    getReference(): this {\r\n        const reference = <this>this.cloneNode(true);\r\n        reference.#referee = this;\r\n        return reference;\r\n    }\r\n}\r\n\r\nvar HTMLEDraggableElement: HTMLEDraggableElementConstructor = HTMLEDraggableElementBase","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\n\r\nexport { HTMLEDragzoneElement };\r\n\r\ninterface HTMLEDragzoneElementConstructor {\r\n    readonly prototype: HTMLEDragzoneElement;\r\n    new(): HTMLEDragzoneElement\r\n}\r\n\r\ninterface HTMLEDragzoneElement extends HTMLElement {\r\n    readonly draggables: HTMLEDraggableElement[];\r\n    readonly selectedDraggables: HTMLEDraggableElement[];\r\n    disabled: boolean;\r\n    selectDraggable(draggable: HTMLEDraggableElement): void;\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void;\r\n    clearSelection(): void;\r\n    connectedCallback(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dragzone\": HTMLEDragzoneElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dragzone\"\r\n})\r\nclass HTMLEDragzoneElementBase extends HTMLElement implements HTMLEDragzoneElement {\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    #draggables: HTMLEDraggableElement[];\r\n    #selectedDraggables: HTMLEDraggableElement[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                        }\r\n        \r\n                        [part=\"container\"] {\r\n                            position: relative;\r\n                            display: flex;\r\n                            flex-direction: column;\r\n                            padding-left: 2px;\r\n                            padding-right: 2px;\r\n                        }\r\n        \r\n                        ::slotted(*) {\r\n                            margin-top: 2px;\r\n                            margin-bottom: 2px;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"container\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n        this.#draggables = [];\r\n        this.#selectedDraggables = [];\r\n    }\r\n\r\n    get draggables(): HTMLEDraggableElement[] {\r\n        return this.#draggables;\r\n    }\r\n\r\n    get selectedDraggables(): HTMLEDraggableElement[] {\r\n        return this.#selectedDraggables;\r\n    }\r\n\r\n    selectDraggable(draggable: HTMLEDraggableElement): void {\r\n        if (!this.selectedDraggables.includes(draggable)) {\r\n            this.selectedDraggables.push(draggable);\r\n        }\r\n        if (!draggable.selected) {\r\n            draggable.selected = true;\r\n        }\r\n    }\r\n\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void {\r\n        const index = this.selectedDraggables.indexOf(draggable);\r\n        if (index > -1) {\r\n            if (draggable.selected) {\r\n                draggable.selected = false;\r\n            }\r\n            this.selectedDraggables.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.selectedDraggables.forEach((draggable) => {\r\n            draggable.selected = false;\r\n        });\r\n        this.#selectedDraggables = [];\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const draggables = slot.assignedElements().filter(\r\n                    elem => elem instanceof HTMLEDraggableElement\r\n                ) as HTMLEDraggableElement[];\r\n                this.#draggables = draggables;\r\n                this.draggables.forEach((draggable) => {\r\n                    draggable.draggable = true;\r\n                });\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Escape\":\r\n                    this.clearSelection();\r\n                    this.focus();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragstart\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                this.selectedDraggables.forEach((thisSelectedDraggable) => {\r\n                    thisSelectedDraggable.dragged = true;\r\n                });\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", this.id);\r\n                }\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event) => {\r\n            const dataTransfer = event.dataTransfer;\r\n            if (dataTransfer) {\r\n                dataTransfer.dropEffect = \"none\";\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"dragend\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                const thisDraggedDraggables = this.draggables.filter(draggable => draggable.dragged);\r\n                thisDraggedDraggables.forEach((thisDraggedDraggable) => {\r\n                    thisDraggedDraggable.dragged = false;\r\n                });\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            if (!this.contains(relatedTarget)) {\r\n                this.clearSelection();\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button == 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        if (!target.selected) {\r\n                            this.clearSelection();\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                    else if (event.ctrlKey) {\r\n                        (!target.selected) ?\r\n                            this.selectDraggable(target) :\r\n                            this.unselectDraggable(target);\r\n                    }\r\n                    else if (event.shiftKey) {\r\n                        if (this.selectedDraggables.length > 0) {\r\n                            const targetIndex = this.draggables.indexOf(target);\r\n                            const firstIndex = this.draggables.indexOf(this.selectedDraggables[0]);\r\n                            const direction = Math.sign(targetIndex - firstIndex);\r\n                            const fromIndex = (direction > 0) ? 0 : this.draggables.length - 1;\r\n                            const toIndex = (direction > 0) ? this.draggables.length - 1 : 0;\r\n                            const startRangeIndex = (direction > 0) ? firstIndex : targetIndex;\r\n                            const endRangeIndex = (direction > 0) ? targetIndex : firstIndex;\r\n                            for (let index = fromIndex; index !== (toIndex + direction); index += direction) {\r\n                                (index >= startRangeIndex && index <= endRangeIndex) ? \r\n                                    this.selectDraggable(this.draggables[index]) :\r\n                                    this.unselectDraggable(this.draggables[index]);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.clearSelection();\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mouseup\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button == 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        this.draggables.forEach((thisDraggable) => {\r\n                            if (thisDraggable !== target) {\r\n                                this.unselectDraggable(thisDraggable);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEDragzoneElement: HTMLEDragzoneElementConstructor = HTMLEDragzoneElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\nimport { HTMLEDragzoneElement } from \"./Dragzone\";\r\n\r\nexport { HTMLEDropzoneElement };\r\nexport { EDataChangeEvent };\r\n\r\ninterface HTMLEDropzoneElementConstructor {\r\n    readonly prototype: HTMLEDropzoneElement;\r\n    new(): HTMLEDropzoneElement;\r\n}\r\n\r\ninterface HTMLEDropzoneElement extends HTMLEDragzoneElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    dragovered: DropzoneDragoveredType | null;\r\n    name: string;\r\n    multiple: boolean;\r\n    placeholder: string;\r\n\r\n    droptest: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => void) | null;\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): void;\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean): void;\r\n\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ntype DropzoneDragoveredType = \"self\" | \"draggable\" | \"appendarea\";\r\n\r\ntype EDataChangeEvent = CustomEvent<{\r\n    action: \"insert\" | \"remove\";\r\n    draggables: HTMLEDraggableElement[];\r\n    position: number;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dropzone\": HTMLEDropzoneElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"e_datachange\": EDataChangeEvent,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dropzone\"\r\n})\r\nclass HTMLEDropzoneElementBase extends HTMLEDragzoneElement implements HTMLEDropzoneElement {\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    dragovered!: DropzoneDragoveredType | null;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    placeholder!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    multiple!: boolean;\r\n\r\n    droptest!: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => boolean) | null;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.shadowRoot!.querySelector(\"style\")!.append(/*css*/`\r\n            :host {\r\n                border: 1px dashed gray;\r\n            }\r\n\r\n            :host(:not([multiple]):not(:empty)) [part=\"appendarea\"],\r\n            :host(:not(:empty):not([dragovered])) [part=\"appendarea\"] {\r\n                display: none !important;\r\n            }\r\n\r\n            [part=\"appendarea\"] {\r\n                display: block;\r\n                margin: 2px;\r\n                border-radius: 4px;\r\n                border: 1px dotted black;\r\n            }\r\n\r\n            :host(:not([dragovered=\"appendarea\"])) [part=\"appendarea\"] {\r\n                border-color: transparent;\r\n            }\r\n            \r\n            [part=\"placeholder\"] {\r\n                display: inline-block;\r\n                color: grey;\r\n                pointer-events: none;\r\n                user-select: none;\r\n            }\r\n        `);\r\n\r\n        this.shadowRoot.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"appendarea\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"placeholder\"\r\n                        },\r\n                        children: [\r\n                            \"&nbsp;\"\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.droptest = null;\r\n    }\r\n    \r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        const appendAreaPart = this.shadowRoot!.querySelector<HTMLDivElement>(\"[part='appendarea']\");\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Delete\":\r\n                    if (this == event.target) {\r\n                        this.removeDraggables();\r\n                    }\r\n                    else {\r\n                        this.removeDraggables(draggable => draggable.selected);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragover\", (event: DragEvent) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragover\", (event) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragenter\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                target.dragovered = true;\r\n                this.dragovered = \"draggable\";\r\n            }\r\n            else {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragenter\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"appendarea\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event: DragEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                if (target == this) {\r\n                    if (appendAreaPart) {\r\n                        this.dragovered = \"self\";\r\n                    }\r\n                    if (!this.draggables.includes(relatedTarget)) {\r\n                        this.dragovered = null;\r\n                    }\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                }\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragleave\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n        \r\n        this.addEventListener(\"drop\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                let dropIndex = this.draggables.length;\r\n                if (target == this) {\r\n                    this.dragovered = null;\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                    dropIndex = this.draggables.indexOf(target);\r\n                }\r\n\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    const dragzoneId = dataTransfer.getData(\"text/plain\");\r\n                    const dragzone = document.getElementById(dragzoneId);\r\n                    if (dragzone instanceof HTMLEDragzoneElement) {\r\n                        const selectedDraggables = dragzone.selectedDraggables;\r\n                        if (selectedDraggables) {\r\n                            selectedDraggables.forEach((selectedDraggable) => {\r\n                                selectedDraggable.dragged = false;\r\n                            });\r\n                            if (dragzone instanceof HTMLEDropzoneElement) {\r\n                                dragzone.removeDraggables((draggable) => selectedDraggables.includes(draggable));\r\n                            }\r\n                            dragzone.clearSelection();\r\n                            this.addDraggables(selectedDraggables, dropIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.dragovered = null;\r\n            event.preventDefault();\r\n        });\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"placeholder\": {\r\n                const placeholderPart = this.shadowRoot.querySelector(\"[part='placeholder']\");\r\n                if (placeholderPart) {\r\n                    placeholderPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): HTMLEDraggableElement[] | null {\r\n        if (draggables.length > 0) {\r\n            let dataTransferSuccess = true;\r\n            if (this.droptest) {\r\n                dataTransferSuccess = this.droptest(this, draggables);\r\n            }\r\n            \r\n            let newDraggables: HTMLEDraggableElement[] = [];\r\n            let insertionPosition = -1;\r\n            if (dataTransferSuccess) {\r\n                if (this.multiple) {\r\n                    draggables.forEach((draggable) => {\r\n                        let newDraggable = draggable.getReference();\r\n                        if (position > -1 && position < this.draggables.length) {\r\n                            this.draggables[position].insertAdjacentElement(\"beforebegin\", newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? position : insertionPosition;\r\n                        }\r\n                        else {\r\n                            this.appendChild(newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? this.draggables.length - 1 : insertionPosition;\r\n                        }\r\n                        newDraggables.push(newDraggable);\r\n                    });\r\n                }\r\n                else {\r\n                    let newDraggable = draggables[0].getReference();\r\n                    if (this.draggables.length > 0) {\r\n                        this.replaceChild(newDraggable, this.draggables[0]);\r\n                    }\r\n                    else {\r\n                        this.appendChild(newDraggable);\r\n                    }\r\n                    newDraggables.push(newDraggable);\r\n                    insertionPosition = 0;\r\n                }\r\n            }\r\n            \r\n            const slot = this.shadowRoot?.querySelector(\"slot\");\r\n            if (slot) {\r\n                slot.addEventListener(\"slotchange\", () => {\r\n                    this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                        bubbles: true,\r\n                        detail: {\r\n                            action: \"insert\",\r\n                            draggables: newDraggables,\r\n                            position: insertionPosition\r\n                        }\r\n                    }));\r\n                }, {once: true});\r\n            }\r\n            return newDraggables;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean = () => true) {\r\n        let toRemove = this.draggables.filter(\r\n            (value: HTMLEDraggableElement, index: number) => {\r\n                return predicate(value, index);\r\n            }\r\n        );\r\n        let atPosition = this.draggables.indexOf(toRemove[0]);\r\n        toRemove.forEach((draggable) => {\r\n            draggable.remove(); \r\n        });\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                    bubbles: true,\r\n                    detail: {\r\n                        action: \"remove\",\r\n                        draggables: toRemove,\r\n                        position: atPosition\r\n                    }\r\n                }));\r\n            }, {once: true});\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEDropzoneElement: HTMLEDropzoneElementConstructor = HTMLEDropzoneElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEDialogElement };\r\n\r\ninterface HTMLEDialogElementConstructor {\r\n    readonly prototype: HTMLEDialogElement;\r\n    new(): HTMLEDialogElement;\r\n}\r\n\r\ntype DialogElementType = \"confirm\" | \"alert\";\r\n\r\ninterface HTMLEDialogElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: DialogElementType;\r\n    open(): void;\r\n    close(): void;\r\n    cancel(): void;\r\n    confirm(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dialog\": HTMLEDialogElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"open\": Event,\r\n        \"close\": Event,\r\n        \"cancel\": Event,\r\n        \"confirm\": Event,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dialog\"\r\n})\r\nclass HTMLEDialogElementBase extends HTMLElement implements HTMLEDialogElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: DialogElementType;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            padding: 6px;\r\n                            background-color: white;\r\n        \r\n                            -webkit-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            -moz-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                        }\r\n        \r\n                        button {\r\n                            cursor: pointer;\r\n                        }\r\n        \r\n                        [part=\"actions\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part=\"header\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part=\"button\"]:not(:first-child) {\r\n                            margin-left: 4px;\r\n                        }\r\n        \r\n                        :host([type=\"confirm\"]) [part=\"ok-button\"] {\r\n                            display: none !important;\r\n                        }\r\n        \r\n                        :host([type=\"alert\"]) [part=\"cancel-button\"],\r\n                        :host([type=\"alert\"]) [part=\"confirm-button\"] {\r\n                            display: none !important;\r\n                        }\r\n                    `\r\n                    ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"header\"\r\n                },\r\n                children: [\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button close-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"x\"\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"hr\", {\r\n                attributes: {\r\n                    part: \"separator\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"body\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"hr\", {\r\n                attributes: {\r\n                    part: \"separator\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"actions\",\r\n                },\r\n                children: [\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button cancel-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"Cancel\"\r\n                        ]\r\n                    }),\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button confirm-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"Confirm\"\r\n                        ]\r\n                    }),\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button ok-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"OK\"\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n        );\r\n    }\r\n\r\n    connectedCallback() {\r\n        this.shadowRoot.addEventListener(\"click\", this);\r\n    }\r\n\r\n    handleEvent(event: Event) {\r\n        const {type, target} = event;\r\n        switch (type) {\r\n            case \"click\":\r\n                const {part} = <Element>target;\r\n                if (part.contains(\"close-button\") || part.contains(\"cancel-button\")) {\r\n                    this.cancel();\r\n                }\r\n                else if (part.contains(\"confirm-button\") || part.contains(\"ok-button\")) {\r\n                    this.confirm();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    open(): void {\r\n        this.dispatchEvent(new CustomEvent(\"open\", {bubbles: true}));\r\n    }\r\n\r\n    close(): void {\r\n        this.dispatchEvent(new CustomEvent(\"close\", {bubbles: true}));\r\n    }\r\n\r\n    cancel(): void {\r\n        this.dispatchEvent(new CustomEvent(\"cancel\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n\r\n    confirm(): void {\r\n        this.dispatchEvent(new CustomEvent(\"confirm\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n}\r\n\r\nvar HTMLEDialogElement: HTMLEDialogElementConstructor = HTMLEDialogElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEHandleElement };\r\n\r\ninterface HTMLEHandleElementConstructor {\r\n    readonly prototype: HTMLEHandleElement;\r\n    new(): HTMLEHandleElement;\r\n}\r\n\r\ninterface HTMLEHandleElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    controls: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-handle\": HTMLEHandleElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"move\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-handle\"\r\n})\r\nclass HTMLEHandleElementBase extends HTMLElement implements HTMLEHandleElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                            \r\n                            width: 24px;\r\n                            height: 12px;\r\n                            \r\n                            background-color: rgb(0, 128, 255);\r\n\r\n                            -webkit-mask-image: url(\"assets/dots.png\");\r\n                            mask-image: url(\"assets/dots.png\");\r\n\r\n                            -webkit-mask-repeat: repeat;\r\n                            mask-repeat: repeat;\r\n                            cursor: move;\r\n                        }\r\n                    `\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"controls\": {\r\n                const {controls} = this;\r\n                this.#target = document.getElementById(controls);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        this.#target = document.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            const target = this.#target;\r\n            if (target !== null) {\r\n                const targetComputedStyle = window.getComputedStyle(target);\r\n                const {movementX, movementY} = event;\r\n                const {width: rectWidth, height: rectHeight} = target.getBoundingClientRect();\r\n                const outerElement = target.parentElement ?? document.body;\r\n                const {\r\n                    left: outerRectLeft, right: outerRectRight,\r\n                    top: outerRectTop, bottom: outerRectBottom\r\n                } = outerElement.getBoundingClientRect();\r\n                const left = parseFloat(targetComputedStyle.getPropertyValue(\"left\"));\r\n                const newLeft = Math.max(outerRectLeft, Math.min(Math.trunc(left + movementX), outerRectRight - rectWidth));\r\n                const top = parseFloat(targetComputedStyle.getPropertyValue(\"top\"));\r\n                const newTop = Math.max(outerRectTop, Math.min(Math.trunc(top + movementY), outerRectBottom - rectHeight));\r\n                target.style.setProperty(\"left\", `${newLeft}px`);\r\n                target.style.setProperty(\"top\", `${newTop}px`);\r\n                this.dispatchEvent(new CustomEvent(\"move\"));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEHandleElement: HTMLEHandleElementConstructor = HTMLEHandleElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEHeightSashElement };\r\n\r\ninterface HTMLEHeightSashElementConstructor {\r\n    readonly prototype: HTMLEHeightSashElement;\r\n    new(): HTMLEHeightSashElement;\r\n}\r\n\r\ninterface HTMLEHeightSashElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    controls: string;\r\n    growdir: \"top\" | \"bottom\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-hsash\": HTMLEHeightSashElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"resize\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-hsash\"\r\n})\r\nclass HTMLEHeightSashElementBase extends HTMLElement implements HTMLEHeightSashElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"top\"})\r\n    growdir!: \"top\" | \"bottom\";\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n    #queuedPointerCallback: FrameRequestCallback | null;\r\n    #pointerMovement: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            width: 100%;\r\n        \r\n                            max-height: 4px;\r\n                            height: 4px;\r\n                            min-height: 4px;\r\n        \r\n                            margin-top: -2px;\r\n                            margin-bottom: -2px;\r\n                            \r\n                            background-color: rgb(135, 206, 250);\r\n                            cursor: ns-resize;\r\n        \r\n                            transition-property: opacity;\r\n                            transition-delay: 0.2s;\r\n                            transition-duration: 0.2s;\r\n                            transition-timing-function: ease-out;\r\n                            opacity: 0;\r\n                        }\r\n        \r\n                        :host(:active),\r\n                        :host(:hover) {\r\n                            opacity: 1;\r\n                        }\r\n                    `\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#queuedPointerCallback = null;\r\n        this.#pointerMovement = 0;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        const rootNode = <ShadowRoot | Document>this.getRootNode();\r\n        this.#target = rootNode.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            if (this.#queuedPointerCallback == null) {\r\n                this.#pointerMovement = event.movementY;\r\n                this.#queuedPointerCallback = this.#pointerMoveCallback.bind(this);\r\n                requestAnimationFrame(this.#queuedPointerCallback);\r\n            }\r\n            else {\r\n                this.#pointerMovement += event.movementY;\r\n            }\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const {growdir} = this;\r\n            const movementY = this.#pointerMovement;\r\n            const height = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            const newHeight = Math.trunc(height + (growdir == \"top\" ? -1 : 1) * movementY);\r\n            target.style.setProperty(\"height\", `${newHeight}px`);\r\n            const computedNewHeight = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            target.style.setProperty(\"height\", `${computedNewHeight}px`);\r\n            this.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        this.#queuedPointerCallback = null;\r\n    }\r\n}\r\n\r\nvar HTMLEHeightSashElement: HTMLEHeightSashElementConstructor = HTMLEHeightSashElementBase;","import { CustomElement, AttributeProperty } from \"../Element\";\r\n\r\nexport { HTMLEImportElement };\r\n\r\ninterface HTMLEImportElementConstructor {\r\n    readonly prototype: HTMLEImportElement;\r\n    new(): HTMLEImportElement;\r\n}\r\n\r\ninterface HTMLEImportElement extends HTMLElement {\r\n    src: string;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-import\": HTMLEImportElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"load\": Event;\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-import\"\r\n})\r\nclass HTMLEImportElementBase extends HTMLElement implements HTMLEImportElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    src!: string;\r\n    \r\n    connectedCallback(): void {\r\n        const {src} = this;\r\n        if (src) {\r\n            this.#importRequest(src);\r\n        }\r\n    }\r\n\r\n    async #importRequest(src: string): Promise<void> {\r\n        this.outerHTML = await fetch(src).then((response: Response) => {\r\n            if (response.ok) {\r\n                return response.text();\r\n            }\r\n            else {\r\n                throw new Error(response.statusText);\r\n            }\r\n        });\r\n        this.dispatchEvent(new Event(\"load\", {bubbles: true}));\r\n    }\r\n}\r\n\r\nvar HTMLEImportElement: HTMLEImportElementConstructor = HTMLEImportElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLELoaderElement };\r\n\r\ninterface HTMLELoaderElementConstructor {\r\n    readonly prototype: HTMLELoaderElement;\r\n    new(): HTMLELoaderElement;\r\n}\r\n\r\ninterface HTMLELoaderElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    type: \"bar\" | \"circle\";\r\n    promise: Promise<any> | null;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-loader\": HTMLELoaderElement,\r\n    }\r\n}\r\n\r\nvar barShadowTemplate: HTMLTemplateElement;\r\nvar circleShadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-loader\"\r\n})\r\nclass HTMLELoaderElementBase extends HTMLElement implements HTMLELoaderElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String, defaultValue: \"bar\", observed: true})\r\n    type!: \"bar\" | \"circle\";\r\n    \r\n    #promise: Promise<any> | null;\r\n\r\n    static {\r\n        const commonStyle = element(\"style\", {\r\n            children: [\r\n                /*css*/`\r\n                    :host {\r\n                        display: inline-block;\r\n                        --default-loader-color: rgb(0, 128, 255);\r\n                        --default-animation-duration: 2s;\r\n                    }\r\n                `\r\n            ]\r\n        });\r\n        const barStyle = commonStyle.cloneNode(true);\r\n        const circleStyle = commonStyle.cloneNode(true);\r\n        barStyle.textContent += /*css*/`\r\n            :host {\r\n                display: block;\r\n            }\r\n\r\n            [part=\"bar\"] {\r\n                position: relative;\r\n                display: block;\r\n                overflow: hidden;\r\n                height: 6px;\r\n                width: 100%;\r\n            }\r\n\r\n            [part=\"slider\"] {\r\n                display: flex;\r\n                position: absolute;\r\n                width: 100%;\r\n                height: 100%;\r\n                animation-name: slider;\r\n            }\r\n\r\n            [part=\"slider\"],\r\n            [part=\"cursor\"] {\r\n                border-radius: 4px;\r\n                will-change: transform;\r\n                animation-duration: var(--animation-duration, var(--default-animation-duration));\r\n                animation-timing-function: linear;\r\n                animation-iteration-count: infinite;\r\n            }\r\n\r\n            [part=\"cursor\"] {\r\n                display: block;\r\n                width: 128px;\r\n                background-color: var(--loader-color, var(--default-loader-color));\r\n                animation-name: cursor;\r\n            }\r\n\r\n            [part=\"bar\"]:after {\r\n                animation-name: shine;\r\n                animation-duration: var(--animation-duration, var(--default-animation-duration));\r\n                animation-iteration-count: infinite;\r\n                animation-fill-mode: forwards;  \r\n                content: \"\";\r\n                position: absolute;\r\n                left: -100%;\r\n                width: 100%;\r\n                height: 100%;\r\n                top: 0;\r\n                opacity: 0;\r\n                \r\n                background: rgba(255, 255, 255, 0.13);\r\n                background: linear-gradient(\r\n                    to right, \r\n                    rgba(255, 255, 255, 0) 0%,\r\n                    rgba(255, 255, 255, 0.1) 10%,\r\n                    rgba(255, 255, 255, 0.9) 80%,\r\n                    rgba(255, 255, 255, 0) 100%\r\n                );\r\n            }\r\n\r\n            @keyframes shine {\r\n                25% {\r\n                    opacity: 1;\r\n                    left: -100%;\r\n                }\r\n                100% {\r\n                    opacity: 0;\r\n                    left: 100%;\r\n                }\r\n            }\r\n\r\n            @keyframes slider {\r\n                0% {\r\n                    transform: translateX(0%);\r\n                }\r\n                100% {\r\n                    transform: translateX(100%);\r\n                }\r\n            }\r\n\r\n            @keyframes cursor {\r\n                0% {\r\n                    transform: translateX(-100%);\r\n                }\r\n                100% {\r\n                    transform: translateX(100%);\r\n                }\r\n            }\r\n        `;\r\n        circleStyle.textContent += /*css*/`\r\n            :host {\r\n                display: inline-block;\r\n            }\r\n\r\n            [part=\"circle\"] {\r\n                width: 12px;\r\n                height: 12px;\r\n                border-top: 4px solid var(--loader-color, var(--default-loader-color));\r\n                border-right: 4px solid var(--loader-color, var(--default-loader-color));\r\n                border-left: 4px solid transparent;\r\n                border-bottom: 4px solid transparent;\r\n                border-radius: 50%;\r\n                animation-duration: 1s;\r\n                animation-name: circle;\r\n                animation-timing-function: linear;\r\n                animation-iteration-count: infinite;\r\n            }\r\n\r\n            @keyframes circle {\r\n                0% {\r\n                    transform: rotate(0);\r\n                }\r\n                100% {\r\n                    transform: rotate(360deg);\r\n                }\r\n            }\r\n        `;\r\n        barShadowTemplate = element(\"template\");\r\n        barShadowTemplate.content.append(\r\n            barStyle,\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"bar\"\r\n                },\r\n                children: [\r\n                    element(\"div\", {\r\n                        attributes: {\r\n                            part: \"slider\"\r\n                        },\r\n                        children: [\r\n                            element(\"div\", {\r\n                                attributes: {\r\n                                    part: \"cursor\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n        circleShadowTemplate = element(\"template\");\r\n        circleShadowTemplate.content.append(\r\n            circleStyle,\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"circle\"\r\n                }\r\n            })\r\n        )\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.#updateTemplate();\r\n        this.#promise = null;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"type\": {\r\n                this.#updateTemplate();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    set promise(promise: Promise<any> | null) {\r\n        if (promise) {\r\n            promise.finally(() => {\r\n                this.remove();\r\n            });\r\n        }\r\n        this.#promise = promise;\r\n    }\r\n\r\n    get promise(): Promise<any> | null {\r\n        return this.#promise;\r\n    }\r\n\r\n    #updateTemplate(): void {\r\n        const {type, shadowRoot} = this;\r\n        switch (type) {\r\n            case \"circle\": {\r\n                shadowRoot.replaceChildren(\r\n                    circleShadowTemplate.content.cloneNode(true)\r\n                );\r\n                break;\r\n            }\r\n            case \"bar\": {\r\n                shadowRoot.replaceChildren(\r\n                    barShadowTemplate.content.cloneNode(true)\r\n                );\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLELoaderElement: HTMLELoaderElementConstructor = HTMLELoaderElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEWidthSashElement };\r\n\r\ninterface HTMLEWidthSashElementConstructor {\r\n    readonly prototype: HTMLEWidthSashElement;\r\n    new(): HTMLEWidthSashElement;\r\n}\r\n\r\ninterface HTMLEWidthSashElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    controls: string;\r\n    growdir: \"right\" | \"left\";\r\n    max: boolean;\r\n    setWidth(width: number): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-wsash\": HTMLEWidthSashElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"resize\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-wsash\"\r\n})\r\nclass HTMLEWidthSashElementBase extends HTMLElement implements HTMLEWidthSashElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"right\"})\r\n    growdir!: \"right\" | \"left\";\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    max!: boolean;\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n    #queuedPointerCallback: FrameRequestCallback | null;\r\n    #pointerMovement: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            width: 4px;\r\n                            \r\n                            background-color: rgb(135, 206, 250);\r\n                            cursor: ew-resize;\r\n        \r\n                            transition-property: opacity;\r\n                            transition-delay: 0.2s;\r\n                            transition-duration: 0.2s;\r\n                            transition-timing-function: ease-out;\r\n                            opacity: 0;\r\n                        }\r\n        \r\n                        :host(:active),\r\n                        :host(:hover) {\r\n                            opacity: 1;\r\n                        }\r\n                    `\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#queuedPointerCallback = null;\r\n        this.#pointerMovement = 0;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    setWidth(width: number): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const {max} = this;\r\n            target.style.setProperty(\"width\", `${width}px`);\r\n            if (max) {\r\n                target.style.setProperty(\"max-width\", `${width}px`);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        const rootNode = <ShadowRoot | Document>this.getRootNode();\r\n        this.#target = rootNode.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            if (this.#queuedPointerCallback == null) {\r\n                this.#queuedPointerCallback = this.#pointerMoveCallback.bind(this);\r\n                requestAnimationFrame(this.#queuedPointerCallback);\r\n            }\r\n            this.#pointerMovement += event.movementX;\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const {growdir} = this;\r\n            const movementX = this.#pointerMovement;\r\n            const width = parseFloat(targetComputedStyle.getPropertyValue(\"width\"));\r\n            const newWidth = width + (growdir == \"right\" ? 1 : -1) * movementX;\r\n            this.setWidth(newWidth);\r\n            this.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        this.#pointerMovement = 0;\r\n        this.#queuedPointerCallback = null;\r\n    }\r\n}\r\n\r\nvar HTMLEWidthSashElement: HTMLEWidthSashElementConstructor = HTMLEWidthSashElementBase;","import { areAttributesMatching, AttributeMutationMixin } from \"../elements/Element\";\r\n\r\nexport { AttributeMixinsObserver };\r\n\r\ninterface AttributeMixinsObserverConstructor {\r\n    readonly prototype: AttributeMixinsObserver;\r\n    new(mixins: AttributeMutationMixin[]): AttributeMixinsObserver;\r\n}\r\n\r\ninterface AttributeMixinsObserver {\r\n    observe(target: Node): void;\r\n    trigger(): void;\r\n    disconnect(): void;\r\n}\r\n\r\nclass AttributeMixinsObserverBase implements AttributeMixinsObserver {\r\n    #observer: MutationObserver;\r\n    #mixins: AttributeMutationMixin[];\r\n\r\n    constructor(mixins: AttributeMutationMixin[]) {\r\n        this.#observer = new MutationObserver(\r\n            this.#callback.bind(this)\r\n        );\r\n        this.#mixins = mixins.slice();\r\n    }\r\n\r\n    trigger(): void {\r\n        this.#callback(this.#observer.takeRecords());\r\n    }\r\n\r\n    observe(target: Node): void  {\r\n        this.#observer.observe(target, {\r\n            childList: true,\r\n            subtree: true,\r\n            attributeFilter: this.#mixins.map((mixin => mixin.attributeName))\r\n        });\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#observer.disconnect();\r\n    }\r\n\r\n    #callback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            mutation.addedNodes.forEach((node: Node) => {\r\n                if (node instanceof Element) {\r\n                    this.#attachMatchingAttributeMixinsInSubtree(node);\r\n                }\r\n            });\r\n            mutation.removedNodes.forEach((node: Node) => {\r\n                if (node instanceof Element) {\r\n                    this.#detachMatchingAttributeMixinsInSubtree(node);\r\n                }\r\n            });\r\n            if (mutation.target instanceof Element) {\r\n                const targetElement = mutation.target;\r\n                const attributeName = mutation.attributeName;\r\n                if (attributeName) {\r\n                    const relatedMixins = this.#mixins.filter(mixin => mixin.attributeName == attributeName);\r\n                    relatedMixins.forEach((mixin) => {\r\n                        if (areAttributesMatching(\r\n                                mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                                attributeName!, targetElement.getAttribute(attributeName!)\r\n                            )) {\r\n                                mixin.attach(targetElement);\r\n                        }\r\n                        else {\r\n                            mixin.detach(targetElement);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    #attachMatchingAttributeMixinsInSubtree(element: Element) {\r\n        Array.from(element.attributes).forEach((attr) => {\r\n            let matchingMixins = this.#mixins.filter(\r\n                mixin => areAttributesMatching(\r\n                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                    attr.name, attr.value\r\n                )\r\n            );\r\n            matchingMixins.forEach((mixin) => {\r\n                mixin.attach(element);\r\n            });\r\n        });\r\n        let childIndex = 0;\r\n        const {children} = element;\r\n        while (childIndex < children.length) {\r\n            const child = children.item(childIndex);\r\n            if (child !== null) {\r\n                this.#attachMatchingAttributeMixinsInSubtree(child);\r\n            }\r\n            childIndex++;\r\n        }\r\n    }\r\n\r\n    #detachMatchingAttributeMixinsInSubtree(element: Element) {\r\n        Array.from(element.attributes).forEach((attr) => {\r\n            let matchingMixins = this.#mixins.filter(\r\n                mixin => areAttributesMatching(\r\n                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                    attr.name, attr.value\r\n                )\r\n            );\r\n            matchingMixins.forEach((mixin) => {\r\n                mixin.detach(element);\r\n            });\r\n        });\r\n        let childIndex = 0;\r\n        const {children} = element;\r\n        while (childIndex < children.length) {\r\n            const child = children.item(childIndex);\r\n            if (child !== null) {\r\n                this.#detachMatchingAttributeMixinsInSubtree(child);\r\n            }\r\n            childIndex++;\r\n        }\r\n    }\r\n}\r\n\r\nvar AttributeMixinsObserver: AttributeMixinsObserverConstructor = AttributeMixinsObserverBase;","import { Widget, element } from \"../../elements/Element\";\r\nimport { WidgetFactory } from \"./Widget\";\r\n\r\nexport { separatorWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"separator\": SeparatorWidgetFactory\r\n    }\r\n}\r\n\r\ninterface SeparatorWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar separatorWidget = new (\r\nWidget({\r\n    name: \"separator\"\r\n})(class SeparatorWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"separator\",\r\n                role: \"separator\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n}));","import { element, Widget } from \"../../../elements/Element\";\r\nimport { menuItemWidget } from \"./MenuItemWidget\";\r\nimport { WidgetFactory } from \"../Widget\";\r\n\r\nexport { menubarWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menubar\": MenuBarWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuBarWidgetFactory extends WidgetFactory {\r\n    setExpanded(menubar: HTMLElement, value: boolean): void;\r\n    getExpanded(menubar: HTMLElement): boolean;\r\n}\r\n\r\nvar menubarWidget = new (\r\nWidget({\r\n    name: \"menubar\"\r\n})(class MenubarWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menubar\",\r\n                role: \"menubar\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        )\r\n    }\r\n\r\n    create() {\r\n        const menubar = <HTMLElement>this.#template.cloneNode(true);\r\n        menubar.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        menubar.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        menubar.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        menubar.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        menubar.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        return menubar;\r\n    }\r\n\r\n    setExpanded(menubar: HTMLElement, value: boolean): void {\r\n        menubar.toggleAttribute(\"aria-expanded\", value);\r\n    }\r\n\r\n    getExpanded(menubar: HTMLElement): boolean {\r\n        return menubar.hasAttribute(\"aria-expanded\");\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node) {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"menuitem\") && !menuItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"menuitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getActiveItem(menubar: HTMLElement): HTMLElement | null {\r\n        return menubar.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem:focus-within\"\r\n        );\r\n    }\r\n\r\n    #firstItem(menubar: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menubar;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(menubar: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menubar;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n\r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = menuItemWidget.getMenu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #isClosestMenu(menubar: HTMLElement, target: HTMLElement): boolean {\r\n        return target.closest(\":is(.menubar, .menu)\") == menubar;\r\n    }\r\n\r\n    #nearestItem(menubar: HTMLElement, target: HTMLElement): HTMLElement | null {\r\n        return Array.from(menubar.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && this.getExpanded(menubar)) {\r\n            const nearestItem = this.#nearestItem(menubar, target);\r\n            if (nearestItem) {\r\n                menuItemWidget.expand(nearestItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && !target.contains(<Element>relatedTarget)) {\r\n            const nearestItem = this.#nearestItem(menubar, target);\r\n            if (nearestItem) {\r\n                menuItemWidget.collapse(nearestItem);\r\n            }\r\n        }\r\n        const lostFocusWithin = !menubar.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.setExpanded(menubar, false);\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const activeItem = this.#getActiveItem(menubar);\r\n            const expanded = this.getExpanded(menubar);\r\n            const isClosestMenu = this.#isClosestMenu(menubar, target);\r\n            if (isClosestMenu && target !== activeItem && expanded) {\r\n                const menu = menuItemWidget.getMenu(target);\r\n                if (menu) {\r\n                    menu.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    target.focus({preventScroll: true});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(menubar);\r\n        const expanded = this.getExpanded(menubar);\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const isClosestMenu = this.#isClosestMenu(menubar, target);\r\n            if (isClosestMenu) {\r\n                const isExpanded = !expanded;\r\n                this.setExpanded(menubar, isExpanded);\r\n                if (isExpanded) {\r\n                    if (activeItem !== null && !menuItemWidget.getExpanded(activeItem)) {\r\n                        menuItemWidget.expand(activeItem);\r\n                    }\r\n                    const menu = menuItemWidget.getMenu(target);\r\n                    menu?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    menubar.focus({preventScroll: true})\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        let activeItem = this.#getActiveItem(menubar);\r\n        const expanded = this.getExpanded(menubar);\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem(menubar) :\r\n                    this.#firstItem(menubar);\r\n                previousItem?.focus({preventScroll: true});\r\n                activeItem = this.#getActiveItem(menubar);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem(menubar) : \r\n                    this.#lastItem(menubar);\r\n                nextItem?.focus({preventScroll: true});\r\n                activeItem = this.#getActiveItem(menubar);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    this.setExpanded(menubar, !expanded);\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.setExpanded(menubar, false);\r\n                    if (activeItem) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    menubar.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}));","import { Widget, element } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menuitemgroup\": MenuItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar menuItemGroupWidget = new (\r\nWidget({\r\n    name: \"menuitemgroup\"\r\n})(class MenuItemGroupWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menuitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement): HTMLElement | null {\r\n        return group;\r\n    }\r\n}));","import { Widget, element } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\nimport { treeItemWidget } from \"./TreeItemWidget\";\r\n\r\nexport { treeItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"treeitemgroup\": TreeItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface TreeItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar treeItemGroupWidget = new (\r\nWidget({\r\n    name: \"treeitemgroup\"\r\n})(class TreeItemGroupWidgetFactoryBase extends WidgetFactory implements TreeItemGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"treeitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(root: HTMLElement) {\r\n        return root;\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"treeitem\")) {\r\n                treeItemWidget.setPosInSet(child_i, i);\r\n                treeItemWidget.setLevel(child_i, (() => {\r\n                    let level = -1;\r\n                    let closestItem: HTMLElement | null = child_i;\r\n                    while (closestItem !== null && closestItem.matches(\".tree :scope\")) {\r\n                        closestItem = closestItem.parentElement?.closest(\".treeitem\") ?? null;\r\n                        level++;\r\n                    }\r\n                    return level;\r\n                })());\r\n            }\r\n        });\r\n    }\r\n}));","import { element, Widget } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\n\r\nexport { listItemWidget };\r\n\r\ninterface ListItemWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        label?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"listitem\": ListItemWidgetFactory,\r\n    }\r\n}\r\n\r\nvar listItemWidget = new (\r\nWidget({\r\n    name: \"listitem\"\r\n})(class ListItemWidgetFactoryBase extends WidgetFactory implements ListItemWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"li\", {\r\n            attributes: {\r\n                class: \"listitem\",\r\n                role: \"listitem\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        label?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== void 0) {\r\n            const {label, disabled} = init;\r\n            if (label !== void 0) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (disabled !== void 0) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n            this.setSelected(item, false);\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(root: HTMLElement): HTMLElement | null {\r\n        return root;\r\n    }\r\n\r\n    group(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .listitemgroup\");\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", value.toString());\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(row: HTMLElement, value: boolean): void {\r\n        row.setAttribute(\"aria-selected\", value.toString());\r\n        row.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(row: HTMLElement): boolean {\r\n        return JSON.parse(row.getAttribute(\"aria-selected\") ?? false.toString());\r\n    }\r\n\r\n    #label(item: HTMLElement): Node {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n}));","import { element, Widget } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\nimport { listItemWidget } from \"./ListItemWidget\";\r\n\r\nexport  { listWidget };\r\n\r\ninterface ListWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n    items(list: HTMLElement): HTMLElement[];\r\n    beginSelection(list: HTMLElement): void;\r\n    endSelection(list: HTMLElement): void;\r\n    selectedItems(list: HTMLElement): HTMLElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"list\": ListWidgetFactory,\r\n    }\r\n}\r\n\r\nvar listWidget = new (\r\nWidget({\r\n    name: \"list\"\r\n})(class ListWidgetFactoryBase extends WidgetFactory implements ListWidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"list\",\r\n                role: \"list\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(init?: {\r\n        multisectable?: boolean;\r\n    }): HTMLElement {\r\n        const list = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== void 0) {\r\n            const {multisectable} = init;\r\n            if (multisectable !== void 0) {\r\n                this.setMultiSelectable(list, multisectable);\r\n            }\r\n        }\r\n        list.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        list.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        list.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        list.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        list.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        list.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        list.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        list.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        list.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        list.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        list.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        list.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        this.#onSelection.set(list, false);\r\n        this.#hasSelectionChanged.set(list, false);\r\n        return list;\r\n    }\r\n\r\n    slot(list: HTMLElement) {\r\n        return list;\r\n    }\r\n\r\n    slottedCallback(list: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"listitem\")) {\r\n                listItemWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n\r\n    setMultiSelectable(tree: HTMLElement, value: boolean): void {\r\n        tree.setAttribute(\"aria-multiselectable\", value.toString());\r\n    }\r\n\r\n    getMultiSelectable(tree: HTMLElement): boolean {\r\n        return JSON.parse(tree.getAttribute(\"aria-multiselectable\") ?? false.toString());\r\n    }\r\n\r\n    #getActiveItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".listitem.active\");\r\n    }\r\n\r\n    #getDropTargetItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".listitem.droptarget\");\r\n    }\r\n\r\n    items(list: HTMLElement): HTMLElement[] {\r\n        return Array.from(list.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .listitemgroup) > .listitem\"\r\n        ));\r\n    }\r\n\r\n    selectedItems(list: HTMLElement): HTMLElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        let item = this.#firstItem(list);\r\n        while (item !== null) {\r\n            const selected = listItemWidget.getSelected(item);\r\n            if (selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(list: HTMLElement): void {\r\n        this.#onSelection.set(list, true);\r\n    }\r\n\r\n    endSelection(list: HTMLElement): void {\r\n        this.#onSelection.set(list, false);\r\n        if (this.#hasSelectionChanged.get(list)) {\r\n            list.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(list, false);\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"listitem\") && !listItemWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"listitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextItem = this.#nextItem(from);\r\n            while (nextItem && nextItem !== to) {\r\n                range.push(nextItem);\r\n                nextItem = this.#nextItem(nextItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousItem = this.#previousItem(from);\r\n            while (previousItem && previousItem !== to) {\r\n                range.push(previousItem);\r\n                previousItem = this.#previousItem(previousItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        selectedItems.forEach((item_i) => {\r\n            if (!items.includes(item_i)) {\r\n                listItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            const selected = listItemWidget.getSelected(item_i);\r\n            if (list.contains(item_i) && !selected) {\r\n                listItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #addToSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        this.beginSelection(list);\r\n        items.forEach((item_i) => {\r\n            if (!listItemWidget.getSelected(item_i)) {\r\n                listItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #removeFromSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                listItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #clearSelection(list: HTMLElement): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        selectedItems.forEach((item_i) => {\r\n            listItemWidget.setSelected(item_i, false);\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #setActiveItem(list: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(list);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            listItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            listItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n    \r\n    #setDropTargetItem(list: HTMLElement, item: HTMLElement | null): void {\r\n        const {classList} = list;\r\n        const dropTargetItem = this.#getDropTargetItem(list);\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            listItemWidget.setDropTarget(dropTargetItem, false);\r\n        }\r\n        if (item !== null) {\r\n            listItemWidget.setDropTarget(item, false);\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    #firstItem(list: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(list: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLElement | null>walker.previousNode();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const nextItem = <HTMLElement | null>walker.nextNode();\r\n        return nextItem;\r\n    }\r\n\r\n    #handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetList, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            this.#setDropTargetItem(targetList, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!targetList.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(targetList, null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"treeitem\")) {\r\n            const selectedItems = this.selectedItems(targetTree);\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(targetTree, target);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetTree);\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetTree, targetItem);\r\n            targetTree.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetList);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetList, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetList, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(firstItem, lastItem);\r\n                            if (range) {\r\n                                this.#setSelection(targetList, ...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = listItemWidget.getSelected(previousItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetList, previousItem) :\r\n                                this.#addToSelection(targetList, previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetList);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = listItemWidget.getSelected(nextItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetList, nextItem) :\r\n                                this.#addToSelection(targetList, nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetList);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetList);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetList);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(targetList, activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection(targetList);\r\n                this.#setActiveItem(targetList, null);\r\n                targetList.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey, button} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            const selected = listItemWidget.getSelected(targetItem);\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setSelection(targetList, targetItem);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            targetItem.blur();\r\n                            this.#removeFromSelection(targetList, targetItem);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(targetList, targetItem);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const activeItem = this.#getActiveItem(targetList);\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                targetItem\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetList, ...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                }\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(targetList, targetItem);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetList.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetList.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetList) {\r\n            if (this.#onSelection.get(targetList)) {\r\n                this.#hasSelectionChanged.set(targetList, true);\r\n            }\r\n            else {\r\n                targetList.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { Widget, element } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\nimport { listItemWidget } from \"./ListItemWidget\";\r\n\r\nexport { listItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"listitemgroup\": ListItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ListItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar listItemGroupWidget = new (\r\nWidget({\r\n    name: \"listitemgroup\"\r\n})(class ListItemGroupWidgetFactoryBase extends WidgetFactory implements ListItemGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"listitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n\r\n    slottedCallback(group: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"listitem\")) {\r\n                listItemWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { element, Widget } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\nimport { toolbarItemWidget } from \"./ToolBarItemWidget\";\r\n\r\nexport { toolbarWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbar\": ToolBarWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ToolBarWidgetFactory extends WidgetFactory {\r\n    setOrientation(toolbar: HTMLElement, value: ToolBarOrientation): void;\r\n    getOrientation(toolbar: HTMLElement): ToolBarOrientation;\r\n}\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\nvar toolbarWidget = new (\r\nWidget({\r\n    name: \"toolbar\"\r\n})(class ToolBarWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"toolbar\",\r\n                role: \"toolbar\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        )\r\n    }\r\n\r\n    create() {\r\n        const toolbar = <HTMLElement>this.#template.cloneNode(true);\r\n        toolbar.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        toolbar.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        toolbar.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        toolbar.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        toolbar.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        return toolbar;\r\n    }\r\n\r\n    #getActiveItem(toolbar: HTMLElement): HTMLElement | null {\r\n        return toolbar.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .toolbaritemgroup) > .toolbaritem.active\"\r\n        );\r\n    }\r\n\r\n    items(toolbar: HTMLElement): HTMLElement[] {\r\n        return Array.from(toolbar.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .toolbaritemgroup) > .toolbaritem\"\r\n        ));\r\n    }\r\n\r\n    setOrientation(toolbar: HTMLElement, value: ToolBarOrientation): void {\r\n        toolbar.setAttribute(\"aria-orientation\", value);\r\n    }\r\n\r\n    getOrientation(toolbar: HTMLElement): ToolBarOrientation {\r\n        return <ToolBarOrientation>toolbar.getAttribute(\"aria-orientation\") ?? \"horizontal\";\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node) {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"toolbaritem\") && !toolbarItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"toolbaritemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(toolbar: Element): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = toolbar;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(toolbar: Element): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = toolbar;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLElement | null>walker.previousSibling();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = toolbarItemWidget.menu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #setActiveItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(tree);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            toolbarItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            toolbarItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetToolbar);\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"toolbaritem\")) {\r\n            this.#setActiveItem(targetToolbar, target);\r\n            targetToolbar.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetToolbar.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetToolbar.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetToolbar);\r\n        switch (key) {\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const type = toolbarItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"menubutton\": {\r\n                            toolbarItemWidget.expand(activeItem);\r\n                            const firstChildItem = this.#firstChildItem(activeItem);\r\n                            firstChildItem?.focus({preventScroll: true});\r\n                            event.preventDefault();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetToolbar);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetToolbar);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetToolbar);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetToolbar);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    activeItem.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    targetToolbar.focus({preventScroll: true});\r\n                }\r\n                //this.#setActiveItem(targetToolbar, null);\r\n                //targetToolbar.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: Event): void {\r\n        const {currentTarget, target} = event;\r\n        const toolbar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"toolbaritem\")) {\r\n            const type = toolbarItemWidget.getType(target);\r\n            const name = toolbarItemWidget.getName(target);\r\n            const value = toolbarItemWidget.getType(target);\r\n            if (type == \"radio\") {\r\n                toolbar.querySelectorAll<HTMLElement>(\r\n                    `:is(:scope, :scope > .toolbaritemgroup) > .toolbaritem[type=radio][name=${name}]`\r\n                ).forEach((radio_i) => {\r\n                    toolbarItemWidget.setPressed(radio_i, toolbarItemWidget.getValue(radio_i) == value);\r\n                });\r\n            }\r\n        }\r\n    }\r\n}));","import { Widget, element } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\n\r\nexport { toolbarItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbaritemgroup\": MenuItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar toolbarItemGroupWidget = new (\r\nWidget({\r\n    name: \"toolbaritemgroup\"\r\n})(class MenuItemGroupWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"toolbaritemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n}));","import { Widget, element } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridCellWidget };\r\n\r\ninterface GridCellWidgetFactory extends WidgetFactory {\r\n    create(init: {\r\n        label?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    getHeaders(item: HTMLElement): string;\r\n    setHeaders(item: HTMLElement, value: string): void;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridcell\": GridCellWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridCellWidget = new (\r\nWidget({\r\n    name: \"gridcell\"\r\n})(class GridCellWidgetFactoryBase extends WidgetFactory implements GridCellWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"td\", {\r\n            attributes: {\r\n                class: \"gridcell\",\r\n                role: \"gridcell\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"content\"\r\n                    },\r\n                    children: [\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"label\"\r\n                            }\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        label?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const cell = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== void 0) {\r\n            const {label, disabled} = init;\r\n            if (label !== void 0) {\r\n                this.setLabel(cell, label);\r\n            }\r\n            if (disabled !== void 0) {\r\n                this.setDisabled(cell, disabled);\r\n            }\r\n            this.setSelected(cell, false);\r\n        }\r\n        return cell;\r\n    }\r\n\r\n    slot(cell: HTMLElement): HTMLElement | null {\r\n        return cell;\r\n    }\r\n\r\n    getHeaders(item: HTMLElement): string {\r\n        return item.getAttribute(\"headers\") ?? \"\";\r\n    }\r\n\r\n    setHeaders(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"headers\", value);\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", value.toString());\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-selected\", value.toString());\r\n        item.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-selected\") ?? false.toString());\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .content > .label\")!;\r\n    }\r\n}));","import { element, Widget } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\nimport { gridCellWidget } from \"./GridCellWidget\";\r\n\r\nexport { gridRowWidget };\r\n\r\ninterface GridRowWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        disabled?: boolean\r\n    }): HTMLElement;\r\n    cells(row: HTMLElement): HTMLElement[];\r\n    setPosInSet(row: HTMLElement, value: number): void;\r\n    getPosInSet(row: HTMLElement): number;\r\n    setActive(row: HTMLElement, value: boolean): void;\r\n    getActive(row: HTMLElement): boolean;\r\n    setDropTarget(row: HTMLElement, value: boolean): void;\r\n    getDropTarget(row: HTMLElement): boolean;\r\n    setSelected(row: HTMLElement, value: boolean): void;\r\n    getSelected(row: HTMLElement): boolean;\r\n    setDisabled(row: HTMLElement, value: boolean): void;\r\n    getDisabled(row: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridrow\": GridRowWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridRowWidget = new (\r\nWidget({\r\n    name: \"gridrow\"\r\n})(class GridRowWidgetFactoryBase extends WidgetFactory implements GridRowWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"tr\", {\r\n            attributes: {\r\n                class: \"gridrow\",\r\n                role: \"row\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const row = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== void 0) {\r\n            const {disabled} = init;\r\n            if (disabled !== void 0) {\r\n                this.setDisabled(row, disabled);\r\n            }\r\n            this.setSelected(row, false);\r\n        }\r\n        return row;\r\n    }\r\n\r\n    slot(row: HTMLElement): HTMLElement | null {\r\n        return row;\r\n    }\r\n\r\n    cells(row: HTMLElement): HTMLElement[] {\r\n        return Array.from(row.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridcell\"\r\n        ));\r\n    }\r\n    \r\n    setPosInSet(row: HTMLElement, value: number): void {\r\n        row.setAttribute(\"aria-posinset\", value.toString());\r\n    }\r\n\r\n    getPosInSet(row: HTMLElement): number {\r\n        const posInSet = row.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(row: HTMLElement, value: boolean): void {\r\n        const {classList} = row;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(row: HTMLElement): boolean {\r\n        const {classList} = row;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(row: HTMLElement, value: boolean): void {\r\n        const {classList} = row;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(row: HTMLElement): boolean {\r\n        const {classList} = row;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(row: HTMLElement, value: boolean): void {\r\n        row.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(row: HTMLElement): boolean {\r\n        return row.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(row: HTMLElement, value: boolean): void {\r\n        row.setAttribute(\"aria-selected\", value.toString());\r\n        row.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(row: HTMLElement): boolean {\r\n        return JSON.parse(row.getAttribute(\"aria-selected\") ?? false.toString());\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((item_i, i) => {\r\n            if (item_i instanceof HTMLElement) {\r\n                gridCellWidget.setPosInSet(item_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { element, Widget } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\nimport { gridCellWidget } from \"./GridCellWidget\";\r\nimport { gridRowWidget } from \"./GridRowWidget\";\r\n\r\nexport { gridWidget };\r\n\r\ntype GridSelectBy = \"cell\" | \"row\";\r\n\r\ninterface GridRowWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        multisectable?: boolean;\r\n        selectby?: GridSelectBy\r\n    }): HTMLElement;\r\n    setSelectBy(item: HTMLElement, value: GridSelectBy): void;\r\n    getSelectBy(item: HTMLElement): GridSelectBy;\r\n    headers(grid: HTMLElement): HTMLElement[];\r\n    cells(grid: HTMLElement): HTMLElement[];\r\n    rows(grid: HTMLElement): HTMLElement[];\r\n    beginSelection(grid: HTMLElement): void;\r\n    endSelection(grid: HTMLElement): void;\r\n    selectedCells(grid: HTMLElement): HTMLElement[];\r\n    selectedRows(grid: HTMLElement): HTMLElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"grid\": GridRowWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridWidget = new (\r\nWidget({\r\n    name: \"grid\"\r\n})(class GridWidgetFactoryBase extends WidgetFactory implements GridRowWidgetFactory {\r\n\r\n    #getActiveRow(grid: HTMLElement): HTMLElement | null {\r\n        return grid.querySelector<HTMLElement>(\".gridrow.active\");\r\n    }\r\n\r\n    #getActiveCell(grid: HTMLElement): HTMLElement | null {\r\n        return grid.querySelector<HTMLElement>(\".gridcell.active\");\r\n    }\r\n\r\n    headers(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridhead > .gridheader\"\r\n        ));\r\n    }\r\n\r\n    rows(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridbody > .gridrow\"\r\n        ));\r\n    }\r\n\r\n    cells(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridbody > .gridrow > .gridcell\"\r\n        ));\r\n    }\r\n\r\n    #template: HTMLElement;\r\n    #rowsWalker: TreeWalker;\r\n    #cellsWalker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"table\", {\r\n            attributes: {\r\n                class: \"grid\",\r\n                role: \"grid\",\r\n                tabindex: 0\r\n            },\r\n            children: [\r\n                element(\"thead\", {\r\n                    attributes: {\r\n                        class: \"gridhead\",\r\n                        role: \"row\"\r\n                    }\r\n                }),\r\n                element(\"tbody\", {\r\n                    attributes: {\r\n                        class: \"gridbody\",\r\n                        role: \"rowgroup\"\r\n                    }\r\n                }),\r\n            ]\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#cellsWalker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#cellsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#rowsWalker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#rowsWalkerNodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(init?: {\r\n        multisectable?: boolean;\r\n        selectby?: GridSelectBy;\r\n    }) {\r\n        const grid = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== void 0) {\r\n            const {selectby, multisectable} = init;\r\n            if (selectby !== void 0) {\r\n                this.setSelectBy(grid, selectby);\r\n            }\r\n            if (multisectable !== void 0) {\r\n                this.setMultiSelectable(grid, multisectable);\r\n            }\r\n        }\r\n        grid.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        grid.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        grid.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        grid.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        grid.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        grid.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        grid.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        return grid;\r\n    }\r\n\r\n    slot(grid: HTMLElement, name: string | null): HTMLElement | null {\r\n        switch (name) {\r\n            case \"headers\":\r\n                return grid.querySelector(\":scope > .gridhead\");\r\n            case \"rows\":\r\n            default:\r\n                return grid.querySelector(\":scope > .gridbody\");\r\n        }\r\n    }\r\n\r\n    slottedCallback(grid: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement) {\r\n                gridRowWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n\r\n    setMultiSelectable(grid: HTMLElement, value: boolean): void {\r\n        grid.setAttribute(\"aria-multiselectable\", value.toString());\r\n    }\r\n\r\n    getMultiSelectable(grid: HTMLElement): boolean {\r\n        return JSON.parse(grid.getAttribute(\"aria-multiselectable\") ?? false.toString());\r\n    }\r\n\r\n    setSelectBy(grid: HTMLElement, value: GridSelectBy): void {\r\n        grid.setAttribute(\"data-selectby\", value);\r\n    }\r\n\r\n    getSelectBy(grid: HTMLElement): GridSelectBy {\r\n        return <GridSelectBy>grid.getAttribute(\"data-selectby\") ?? \"cell\";\r\n    }\r\n\r\n    beginSelection(grid: HTMLElement): void {\r\n        this.#onSelection.set(grid, true);\r\n    }\r\n\r\n    endSelection(grid: HTMLElement): void {\r\n        this.#onSelection.set(grid, false);\r\n        if (this.#hasSelectionChanged.get(grid)) {\r\n            grid.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(grid, false);\r\n        }\r\n    }\r\n\r\n    #clearSelection(grid: HTMLElement): void {\r\n        this.#clearCellsSelection(grid);\r\n        this.#clearRowsSelection(grid);\r\n    }\r\n\r\n    selectedCells(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll(\":scope > .gridbody > .gridrow > .gridcell[aria-selected=true]\"));\r\n    }\r\n\r\n    selectedRows(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll(\":scope > .gridbody > .gridrow[aria-selected=true]\"));\r\n    }\r\n\r\n    #cellsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"gridcell\") && !gridCellWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"gridrow\") || classList.contains(\"gridbody\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #rowsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"gridrow\") && !gridRowWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"gridbody\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getCellsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextCell = this.#nextCell(from);\r\n            while (nextCell && nextCell !== to) {\r\n                range.push(nextCell);\r\n                nextCell = this.#nextCell(nextCell);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousCell = this.#previousCell(from);\r\n            while (previousCell && previousCell !== to) {\r\n                range.push(previousCell);\r\n                previousCell = this.#previousRow(previousCell);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #getRowsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextRow = this.#nextRow(from);\r\n            while (nextRow && nextRow !== to) {\r\n                range.push(nextRow);\r\n                nextRow = this.#nextRow(nextRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousRow = this.#previousRow(from);\r\n            while (previousRow && previousRow !== to) {\r\n                range.push(previousRow);\r\n                previousRow = this.#previousRow(previousRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setCellsSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        selectedCells.forEach((selectedCell_i) => {\r\n            if (!cells.includes(selectedCell_i)) {\r\n                gridCellWidget.setSelected(selectedCell_i, false);\r\n            }\r\n        });\r\n        cells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (!selected) {\r\n                gridCellWidget.setSelected(cell_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #setRowsSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        selectedRows.forEach((selectedRow_i) => {\r\n            if (!rows.includes(selectedRow_i)) {\r\n                gridRowWidget.setSelected(selectedRow_i, false);\r\n            }\r\n        });\r\n        rows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (!selected) {\r\n                gridRowWidget.setSelected(row_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #addCellsToSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        cells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (!selected) {\r\n                gridCellWidget.setSelected(cell_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #addRowsToSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        rows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (!selected) {\r\n                gridRowWidget.setSelected(row_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #removeCellsFromSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        cells.forEach((cell_i) => {\r\n            if (selectedCells.includes(cell_i)) {\r\n                gridCellWidget.setSelected(cell_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #removeRowsFromSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        rows.forEach((row_i) => {\r\n            if (selectedRows.includes(row_i)) {\r\n                gridRowWidget.setSelected(row_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #clearCellsSelection(grid: HTMLElement): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        selectedCells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (selected) {\r\n                gridCellWidget.setSelected(cell_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #clearRowsSelection(grid: HTMLElement): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        selectedRows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (selected) {\r\n                gridRowWidget.setSelected(row_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #setActiveCell(grid: HTMLElement, cell: HTMLElement | null): void {\r\n        const activeCell = this.#getActiveCell(grid);\r\n        if (activeCell !== null && activeCell !== cell) {\r\n            gridCellWidget.setActive(activeCell, false);\r\n            activeCell.tabIndex = -1;\r\n        }\r\n        if (cell !== null) {\r\n            gridCellWidget.setActive(cell, true);\r\n            cell.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #setActiveRow(grid: HTMLElement, row: HTMLElement | null): void {\r\n        const activeRow = this.#getActiveRow(grid);\r\n        if (activeRow !== null && activeRow !== row) {\r\n            gridRowWidget.setActive(activeRow, false);\r\n            activeRow.tabIndex = -1;\r\n        }\r\n        if (row !== null) {\r\n            gridCellWidget.setActive(row, true);\r\n            row.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #firstCell(row: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLElement | null>cellsWalker.firstChild();\r\n    }\r\n\r\n    #lastCell(row: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLElement | null>cellsWalker.lastChild();\r\n    }\r\n\r\n    #previousCell(cell: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLElement | null>cellsWalker.previousNode();\r\n    }\r\n\r\n    #nextCell(cell: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLElement | null>cellsWalker.nextNode();\r\n    }\r\n\r\n    #closestRow(cell: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = cell;\r\n        return <HTMLElement | null>rowsWalker.parentNode();\r\n    }\r\n\r\n    #firstRow(grid: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = grid;\r\n        return <HTMLElement | null>rowsWalker.firstChild();\r\n    }\r\n\r\n    #lastRow(grid: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = grid;\r\n        return <HTMLElement | null>rowsWalker.lastChild();\r\n    }\r\n\r\n    #previousRow(row: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLElement | null>rowsWalker.previousNode();\r\n    }\r\n\r\n    #nextRow(row: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLElement | null>rowsWalker.nextNode();\r\n    }\r\n\r\n    #topCell(cell: HTMLElement): HTMLElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const closestRowCells = gridRowWidget.cells(closestRow);\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const previousRow = this.#previousRow(closestRow);\r\n            if (previousRow) {\r\n                const previousRowCells = gridRowWidget.cells(previousRow);\r\n                return previousRowCells[Math.min(cellIndex, previousRowCells.length)];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #bottomCell(cell: HTMLElement): HTMLElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const closestRowCells = gridRowWidget.cells(closestRow);\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const nextRow = this.#nextRow(closestRow);\r\n            if (nextRow) {\r\n                const nextRowCells = gridRowWidget.cells(nextRow);\r\n                return nextRowCells[Math.min(cellIndex, nextRowCells.length)];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent) {\r\n        const {currentTarget, target} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    const selectedCells = this.selectedCells(targetGrid);\r\n                    if (!selectedCells.includes(targetCell)) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    targetCell.focus({preventScroll: true});\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    const selectedRows = this.selectedRows(targetGrid);\r\n                    if (!selectedRows.includes(targetRow)) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    targetRow.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    /*#handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            const type = treeitemWidget.getType(targetItem);\r\n            if (type == \"parent\") {\r\n                treeitemWidget.toggle(targetItem, true);\r\n            }\r\n            this.#setDropTargetItem(targetTree, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!targetTree.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(targetTree, null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }*/\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const activeCell = this.#getActiveCell(targetGrid);\r\n                if (activeCell && relatedTarget !== activeCell) {\r\n                    activeCell.focus();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const activeRow = this.#getActiveRow(targetGrid);\r\n                if (activeRow && relatedTarget !== activeRow) {\r\n                    activeRow.focus();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    this.#setActiveCell(targetGrid, targetCell);\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    this.#setActiveRow(targetGrid, targetRow);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetGrid.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetGrid.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const activeCell = this.#getActiveCell(targetGrid);\r\n        const activeRow = this.#getActiveRow(targetGrid);\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        const multiselectable = this.getMultiSelectable(targetGrid);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey && multiselectable) {\r\n                    switch (selectby) {\r\n                        case \"cell\": {\r\n                            const firstRow = this.#firstRow(targetGrid);\r\n                            const firstCell = firstRow ? this.#firstCell(firstRow) : null;\r\n                            const lastRow = this.#lastRow(targetGrid);\r\n                            const lastCell = lastRow ? this.#lastCell(lastRow) : null;\r\n                            if (firstCell && lastCell) {\r\n                                const range = this.#getCellsRange(firstCell, lastCell);\r\n                                if (range) {\r\n                                    this.#setCellsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"row\": {\r\n                            const firstRow = this.#firstRow(targetGrid);\r\n                            const lastRow = this.#lastRow(targetGrid);\r\n                            if (firstRow && lastRow) {\r\n                                const range = this.#getRowsRange(firstRow, lastRow);\r\n                                if (range) {\r\n                                    this.#setRowsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const previousCell = this.#previousCell(activeCell);\r\n                        if (previousCell) {\r\n                            previousCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(previousCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, previousCell) :\r\n                                    this.#addCellsToSelection(targetGrid, previousCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const nextCell = this.#nextCell(activeCell);\r\n                        if (nextCell) {\r\n                            nextCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(nextCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, nextCell) :\r\n                                    this.#addCellsToSelection(targetGrid, nextCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const firstRow = activeRow ?? this.#firstRow(targetGrid);\r\n                        const topCell = activeCell ?\r\n                            this.#topCell(activeCell) :\r\n                            firstRow ?\r\n                            this.#firstCell(firstRow) :\r\n                            null;\r\n                        if (topCell) {\r\n                            topCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(topCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, topCell) :\r\n                                    this.#addCellsToSelection(targetGrid, topCell);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const previousRow = activeRow ?\r\n                            this.#previousRow(activeRow) :\r\n                            this.#firstRow(targetGrid);\r\n                        if (previousRow) {\r\n                            previousRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridRowWidget.getSelected(previousRow);\r\n                                selected ?\r\n                                    this.#removeRowsFromSelection(targetGrid, previousRow) :\r\n                                    this.#addRowsToSelection(targetGrid, previousRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const lastRow = activeRow ?? this.#lastRow(targetGrid);\r\n                        const bottomCell = activeCell ?\r\n                            this.#bottomCell(activeCell) :\r\n                            lastRow ?\r\n                            this.#lastCell(lastRow) :\r\n                            null;\r\n                            if (bottomCell) {\r\n                                bottomCell.focus({preventScroll: true});\r\n                                const {shiftKey} = event;\r\n                                if (shiftKey && multiselectable) {\r\n                                    const selected = gridCellWidget.getSelected(bottomCell);\r\n                                    selected ?\r\n                                        this.#removeCellsFromSelection(targetGrid, bottomCell) :\r\n                                        this.#addCellsToSelection(targetGrid, bottomCell);\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"row\": {\r\n                        const nextRow = activeRow ?\r\n                            this.#nextRow(activeRow) :\r\n                            this.#lastRow(targetGrid);\r\n                        if (nextRow) {\r\n                            nextRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridRowWidget.getSelected(nextRow);\r\n                                selected ?\r\n                                    this.#removeRowsFromSelection(targetGrid, nextRow) :\r\n                                    this.#addRowsToSelection(targetGrid, nextRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const firstCell = this.#firstCell(activeRow);\r\n                            if (firstCell) {\r\n                                firstCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const firstRow = this.#firstRow(targetGrid);\r\n                        if (firstRow) {\r\n                            firstRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const lastCell = this.#lastCell(activeRow);\r\n                            if (lastCell) {\r\n                                lastCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const lastRow = this.#lastRow(targetGrid);\r\n                        if (lastRow) {\r\n                            lastRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeCell) {\r\n                            this.#setCellsSelection(targetGrid, activeCell);\r\n                            activeCell.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        if (activeRow) {\r\n                            this.#setRowsSelection(targetGrid, activeRow);\r\n                            activeRow.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        this.#clearCellsSelection(targetGrid);\r\n                        this.#setActiveCell(targetGrid, null);\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        this.#clearRowsSelection(targetGrid);\r\n                        this.#setActiveRow(targetGrid, null);\r\n                        break;\r\n                    }\r\n                }\r\n                targetGrid.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        const multiselectable = this.getMultiSelectable(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    if (multiselectable) {\r\n                        if (!shiftKey && !ctrlKey) {\r\n                            this.#setCellsSelection(targetGrid, targetCell);\r\n                        }\r\n                        else if (ctrlKey) {\r\n                            const selected = gridCellWidget.getSelected(targetCell);\r\n                            !selected ?\r\n                                this.#addCellsToSelection(targetGrid, targetCell) :\r\n                                this.#removeCellsFromSelection(targetGrid, targetCell);\r\n                            event.stopPropagation();\r\n                        }\r\n                        else if (shiftKey) {\r\n                            const activeCell = this.#getActiveCell(targetGrid);\r\n                            if (activeCell) {\r\n                                const range = this.#getCellsRange(\r\n                                    activeCell,\r\n                                    targetCell\r\n                                );\r\n                                if (range) {\r\n                                    this.#setCellsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.#setCellsSelection(targetGrid, targetCell);\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    if (multiselectable) {\r\n                        if (!shiftKey && !ctrlKey) {\r\n                            this.#setRowsSelection(targetGrid, targetRow);\r\n                        }\r\n                        else if (ctrlKey) {\r\n                            const selected = gridRowWidget.getSelected(targetRow);\r\n                            !selected ?\r\n                                this.#addRowsToSelection(targetGrid, targetRow) :\r\n                                this.#removeRowsFromSelection(targetGrid, targetRow);\r\n                            event.stopPropagation();\r\n                        }\r\n                        else if (shiftKey) {\r\n                            const activeRow = this.#getActiveRow(targetGrid);\r\n                            if (activeRow) {\r\n                                const range = this.#getRowsRange(\r\n                                    activeRow,\r\n                                    targetRow\r\n                                );\r\n                                if (range) {\r\n                                    this.#setRowsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.#setRowsSelection(targetGrid, targetRow);\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetList) {\r\n            if (this.#onSelection.get(targetList)) {\r\n                this.#hasSelectionChanged.set(targetList, true);\r\n            }\r\n            else {\r\n                targetList.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { Widget, element } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridcellWidget };\r\n\r\ninterface GridHeaderWidgetFactory extends WidgetFactory {\r\n    create(init: {\r\n        label?: string;\r\n    }): HTMLElement;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridheader\": GridHeaderWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridcellWidget = new (\r\nWidget({\r\n    name: \"gridheader\"\r\n})(class GridHeaderWidgetFactoryBase extends WidgetFactory implements GridHeaderWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"th\", {\r\n            attributes: {\r\n                class: \"gridheader\",\r\n                scope: \"column\",\r\n                role: \"columnheader\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        label?: string;\r\n    }): HTMLElement {\r\n        const header = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== void 0) {\r\n            const {label} = init;\r\n            if (label !== void 0) {\r\n                this.setLabel(header, label);\r\n            }\r\n        }\r\n        return header;\r\n    }\r\n\r\n    getLabel(header: HTMLElement): string {\r\n        return this.#label(header).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(header: HTMLElement, value: string): void {\r\n        this.#label(header).textContent = value;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    #label(header: HTMLElement): HTMLElement {\r\n        return header.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n}));","import { element, Widget } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\n\r\nexport { optionWidget };\r\n\r\ninterface OptionWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        label?: string;\r\n        name?: string;\r\n        value?: string;\r\n        selected?: boolean;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    getLabel(option: HTMLElement): string;\r\n    setLabel(option: HTMLElement, value: string): void;\r\n    getValue(option: HTMLElement): string;\r\n    setValue(option: HTMLElement, value: string): void;\r\n    getName(option: HTMLElement): string;\r\n    setName(option: HTMLElement, value: string): void;\r\n    getSelected(option: HTMLElement): boolean;\r\n    setSelected(option: HTMLElement, value: boolean): void;\r\n    setDisabled(option: HTMLElement, value: boolean): void;\r\n    getDisabled(option: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"option\": OptionWidgetFactory\r\n    }\r\n}\r\n\r\nvar optionWidget = new(\r\nWidget({\r\n    name: \"option\"\r\n})(\r\nclass OptionWidgetFactoryBase extends WidgetFactory implements OptionWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"span\", {\r\n            attributes: {\r\n                class: \"option\",\r\n                role: \"option\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        selected?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const option = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== void 0) {\r\n            const {label, name, value, disabled} = init;\r\n            let {selected} = init;\r\n            selected = selected ?? false;\r\n            if (selected !== void 0) {\r\n                this.setSelected(option, selected);\r\n            }\r\n            if (label !== void 0) {\r\n                this.setLabel(option, label);\r\n            }\r\n            if (name !== void 0) {\r\n                this.setName(option, name);\r\n            }\r\n            if (value !== void 0) {\r\n                this.setValue(option, value);\r\n            }\r\n            if (disabled !== void 0) {\r\n                this.setDisabled(option, disabled);\r\n            }\r\n        }\r\n        return option;\r\n    }\r\n\r\n    get observedAttributes() {\r\n        return [\"aria-selected\"];\r\n    }\r\n\r\n    attributeChangedCallback(option: HTMLElement, name: string, oldValue: string, newValue: string) {\r\n        switch (name) {\r\n            case \"aria-selected\": {\r\n                if (JSON.parse(newValue) === true) {\r\n                    option.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #label(option: HTMLElement): HTMLElement {\r\n        return option.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n\r\n    getLabel(option: HTMLElement): string {\r\n        return this.#label(option).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(option: HTMLElement, value: string): void {\r\n        this.#label(option).textContent = value;\r\n    }\r\n\r\n    getValue(option: HTMLElement): string {\r\n        return option.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(option: HTMLElement, value: string): void {\r\n        option.setAttribute(\"value\", value);\r\n    }\r\n    \r\n    getName(option: HTMLElement): string {\r\n        return option.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(option: HTMLElement, value: string): void {\r\n        option.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getSelected(option: HTMLElement): boolean {\r\n        return JSON.parse(option.getAttribute(\"aria-selected\") ?? false.toString());\r\n    }\r\n\r\n    setSelected(option: HTMLElement, value: boolean): void {\r\n        option.setAttribute(\"aria-selected\", value.toString());\r\n    }\r\n\r\n    getDisabled(option: HTMLElement): boolean {\r\n        return option.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(option: HTMLElement, value: boolean): void {\r\n        option.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n}));","import { element, Widget } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\nimport { optionWidget } from \"./OptionWidget\";\r\n\r\nexport { comboBoxWidget };\r\n\r\ninterface ComboBoxWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        name?: string;\r\n        disabled?: boolean;\r\n        multiselectable?: boolean;\r\n    }): HTMLElement;\r\n    options(combobox: HTMLElement): HTMLElement[];\r\n    getName(combobox: HTMLElement): string;\r\n    setName(combobox: HTMLElement, value: string): void;\r\n    getExpanded(combobox: HTMLElement): boolean;\r\n    setExpanded(combobox: HTMLElement, value: boolean): void;\r\n    setDisabled(combobox: HTMLElement, value: boolean): void;\r\n    getDisabled(combobox: HTMLElement): boolean;\r\n    expand(combobox: HTMLElement): void;\r\n    collapse(combobox: HTMLElement): void;\r\n    toggle(combobox: HTMLElement, force?: boolean): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"combobox\": ComboBoxWidgetFactory\r\n    }\r\n}\r\n\r\nvar comboBoxWidget = new(\r\nWidget({\r\n    name: \"combobox\"\r\n})(\r\nclass ComboBoxWidgetFactoryBase extends WidgetFactory implements ComboBoxWidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #optionsObserver: MutationObserver;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#optionsObserver = new MutationObserver(\r\n            this.#optionsMutationCallback.bind(this)\r\n        );\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"combobox\",\r\n                role: \"combobox\",\r\n                tabindex: 0,\r\n            },\r\n            children: [\r\n                element(\"div\", {\r\n                    attributes: {\r\n                        class: \"content\"\r\n                    },\r\n                    children: [\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"value\"\r\n                            }\r\n                        })\r\n                    ]\r\n                }),\r\n                element(\"div\", {\r\n                    attributes: {\r\n                        class: \"box\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        name?: string;\r\n        disabled?: boolean;\r\n        multiselectable?: boolean;\r\n    }): HTMLElement {\r\n        const combobox = <HTMLElement>this.#template.cloneNode(true);\r\n        this.#optionsObserver.observe(combobox, {\r\n            childList: true,\r\n            subtree: true\r\n        });\r\n        combobox.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        combobox.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        combobox.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        combobox.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.setExpanded(combobox, false);\r\n        if (init !== void 0) {\r\n            const {name, disabled, multiselectable} = init;\r\n            if (name !== void 0) {\r\n                this.setName(combobox, name);\r\n            }\r\n            if (disabled !== void 0) {\r\n                this.setDisabled(combobox, disabled);\r\n            }\r\n            if (multiselectable !== void 0) {\r\n                this.setMultiSelectable(combobox, multiselectable);\r\n            }\r\n        }\r\n        return combobox;\r\n    }\r\n\r\n    slot(combobox: HTMLElement) {\r\n        return this.#box(combobox);\r\n    }\r\n\r\n    slottedCallback(combobox: HTMLElement, slot: HTMLElement, name: string | null) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement) {\r\n                //gridRowWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n\r\n    #box(combobox: HTMLElement): HTMLElement {\r\n        return combobox.querySelector<HTMLElement>(\":scope > .box\")!;\r\n    }\r\n    \r\n    options(combobox: HTMLElement): HTMLElement[] {\r\n        return Array.from(combobox.querySelectorAll<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option\"\r\n        ));\r\n    }\r\n\r\n    selectedOption(combobox: HTMLElement): HTMLElement | null {\r\n        return combobox.querySelector<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option[aria-selected=true]\"\r\n        );\r\n    }\r\n\r\n    #getActiveOption(combobox: HTMLElement): HTMLElement | null {\r\n        return combobox.querySelector<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option:focus-within\"\r\n        );\r\n    }\r\n\r\n    #value(combobox: HTMLElement): HTMLElement {\r\n        return combobox.querySelector<HTMLElement>(\":scope > .content > .value\")!;\r\n    }\r\n    \r\n    getName(combobox: HTMLElement): string {\r\n        return combobox.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(combobox: HTMLElement, value: string): void {\r\n        combobox.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getDisabled(combobox: HTMLElement): boolean {\r\n        return combobox.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(combobox: HTMLElement, value: boolean): void {\r\n        combobox.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setExpanded(combobox: HTMLElement, value: boolean): void {\r\n        combobox.setAttribute(\"aria-expanded\", value.toString());\r\n    }\r\n\r\n    getExpanded(combobox: HTMLElement): boolean {\r\n        return JSON.parse(combobox.getAttribute(\"aria-expanded\") ?? false.toString());\r\n    }\r\n\r\n    setMultiSelectable(combobox: HTMLElement, value: boolean): void {\r\n        combobox.setAttribute(\"aria-multiselectable\", value.toString());\r\n    }\r\n\r\n    getMultiSelectable(combobox: HTMLElement): boolean {\r\n        return JSON.parse(combobox.getAttribute(\"aria-multiselectable\") ?? false.toString());\r\n    }\r\n\r\n    expand(combobox: HTMLElement): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        if (!expanded) {\r\n            this.setExpanded(combobox, true);\r\n            this.#positionBox(combobox);\r\n            const selectedOption = this.selectedOption(combobox);\r\n            if (selectedOption) {\r\n                selectedOption.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(combobox: HTMLElement): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        if (expanded) {\r\n            this.setExpanded(combobox, false);\r\n            combobox.focus();\r\n        }\r\n    }\r\n\r\n    toggle(combobox: HTMLElement, force?: boolean): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand(combobox) : this.collapse(combobox);\r\n    }\r\n\r\n    #optionsMutationCallback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            const targetCombobox = (<HTMLElement>target).closest<HTMLElement>(\".combobox\")!;\r\n            if (targetCombobox instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"childList\": {\r\n                        const {addedNodes} = mutation;\r\n                        const selector = \".option[aria-selected=true]\";\r\n                        for (let node of addedNodes) {\r\n                            if (node instanceof HTMLElement) {\r\n                                const selectedOption = node.matches(selector) ? node :\r\n                                    node.querySelector<HTMLElement>(selector);\r\n                                if (selectedOption) {\r\n                                    this.#setSelectedOption(targetCombobox, selectedOption);\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"option\") && !optionWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"optiongroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstOption(combobox: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = this.#box(combobox);\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastOption(combobox: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = this.#box(combobox);\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousOption(option: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextOption(option: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLElement | null>walker.nextNode();\r\n    }\r\n\r\n    #selectOption(combobox: HTMLElement, option: HTMLElement) {\r\n        const selectedOption = this.selectedOption(combobox);\r\n        if (selectedOption) {\r\n            optionWidget.setSelected(selectedOption, false);\r\n        }\r\n        if (option !== selectedOption) {\r\n            optionWidget.setSelected(option, true);\r\n            this.#setSelectedOption(combobox, option);\r\n            combobox.dispatchEvent(new Event(\"change\", {bubbles: true}));\r\n        }\r\n    }\r\n    \r\n    #setSelectedOption(combobox: HTMLElement, option: HTMLElement) {\r\n        this.#value(combobox).textContent = optionWidget.getLabel(option);\r\n    }\r\n\r\n    #positionBox(combobox: HTMLElement): void {\r\n        const box = combobox.querySelector<HTMLElement>(\":scope > .box\")!;\r\n        const {style: optionsStyle} = box;  \r\n        const {bottom, left} = combobox.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        optionsStyle.setProperty(\"top\", `${bottom + scrollY}px`);\r\n        optionsStyle.setProperty(\"left\", `${left + scrollX}px`);\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        this.toggle(targetCombobox);\r\n        const expanded = this.getExpanded(targetCombobox);\r\n        if (expanded) {\r\n            const selectedOption = this.selectedOption(targetCombobox);\r\n            (selectedOption ?? this.options(targetCombobox)[0])?.focus({preventScroll: true});\r\n        }\r\n        else {\r\n            const targetOption = (<HTMLElement>target).closest<HTMLElement>(\".option\");\r\n            if (targetOption) {\r\n                this.#selectOption(targetCombobox, targetOption);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetCombobox.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse(targetCombobox);\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        const expanded = this.getExpanded(targetCombobox);\r\n        const activeOption = this.#getActiveOption(targetCombobox);\r\n        const selectedOption = this.selectedOption(targetCombobox);\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                if (expanded) {\r\n                    const previousOption = activeOption ?\r\n                        this.#previousOption(activeOption) :\r\n                        this.#firstOption(targetCombobox);\r\n                    if (previousOption) {\r\n                        previousOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const previousOption = selectedOption ?\r\n                        this.#previousOption(selectedOption) :\r\n                        this.#firstOption(targetCombobox);\r\n                    if (previousOption) {\r\n                        this.#selectOption(targetCombobox, previousOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (expanded) {\r\n                    const nextOption = activeOption ?\r\n                        this.#nextOption(activeOption) :\r\n                        this.#lastOption(targetCombobox);\r\n                    if (nextOption) {\r\n                        nextOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const nextOption = selectedOption ?\r\n                        this.#nextOption(selectedOption) :\r\n                        this.#lastOption(targetCombobox);\r\n                    if (nextOption) {\r\n                        this.#selectOption(targetCombobox, nextOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstOption = this.#firstOption(targetCombobox);\r\n                if (firstOption) {\r\n                    if (expanded) {\r\n                        firstOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(targetCombobox, firstOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastOption = this.#lastOption(targetCombobox);\r\n                if (lastOption) {\r\n                    if (expanded) {\r\n                        lastOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(targetCombobox, lastOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (expanded) {\r\n                    this.collapse(targetCombobox);\r\n                    if (activeOption) {\r\n                        this.#selectOption(targetCombobox, activeOption);\r\n                    }\r\n                }\r\n                else {\r\n                    this.expand(targetCombobox);\r\n                    selectedOption?.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.collapse(targetCombobox);\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            default: {\r\n                const {length: keyLength} = key;\r\n                if (keyLength == 1) {\r\n                    const keyCode = key.charCodeAt(0);\r\n                    const options = this.options(targetCombobox);\r\n                    const activeIndex = activeOption ? options.indexOf(activeOption) : -1;\r\n                    const matchingOption = options.find(\r\n                        (option_i, i) => optionWidget.getLabel(option_i).toLowerCase().charCodeAt(0) == keyCode && i > activeIndex\r\n                    ) ?? options.find(\r\n                        (option_i) => optionWidget.getLabel(option_i).toLowerCase().charCodeAt(0) == keyCode\r\n                    );\r\n                    if (matchingOption) {\r\n                        matchingOption.focus({preventScroll: true});\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetItem = (<Element>target).closest<HTMLElement>(\".option\");\r\n        if (targetItem) {\r\n            targetItem.focus({preventScroll: true});\r\n        }\r\n    }\r\n}));","import { Widget, element } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\nimport { optionWidget } from \"./OptionWidget\";\r\n\r\nexport { optionGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"optiongroup\": OptionGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface OptionGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar optionGroupWidget = new (\r\nWidget({\r\n    name: \"optiongroup\"\r\n})(class OptionGroupWidgetFactoryBase extends WidgetFactory implements OptionGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"optiongroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n\r\n    slottedCallback(group: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"option\")) {\r\n                //optionWidget.setPosInSet(item_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { HTMLEListElement } from \"../elements/containers/lists/List\";\r\nimport { HTMLEListItemElement } from \"../elements/containers/lists/ListItem\";\r\nimport { EMenu } from \"../elements/containers/menus/Menu\";\r\nimport { EMenuButton } from \"../elements/containers/menus/MenuButton\";\r\nimport { HTMLEMenuItemElement, EMenuItem } from \"../elements/containers/menus/MenuItem\";\r\nimport { EMenuItemGroup } from \"../elements/containers/menus/MenuItemGroup\";\r\nimport { EToolBarItem } from \"../elements/containers/toolbars/ToolBarItem\";\r\nimport { element, reactiveChildElements, reactiveElement, CustomElement, fragment } from \"../elements/Element\";\r\nimport { ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\n\r\nexport { ListModel };\r\nexport { ListItemModel };\r\nexport { ListView };\r\n\r\nclass ListModel extends ModelObject {\r\n    readonly items: ModelList<ListItemModel>;\r\n    sortFunction: ((item_a: ListItemModel, item_b: ListItemModel) => number) | null;\r\n    \r\n    constructor()\r\n    constructor(init: {items: ListItemModel[], sortFunction?: (item_a: ListItemModel, item_b: ListItemModel) => number})\r\n    constructor(init?: {items: ListItemModel[], sortFunction?: (item_a: ListItemModel, item_b: ListItemModel) => number}) {\r\n        super();\r\n        const sortFunction = init?.sortFunction ?? function(item_a: ListItemModel, item_b: ListItemModel) {\r\n            return item_a.label.localeCompare(item_b.label);\r\n        };\r\n        const items = new ModelList(init?.items ?? []);\r\n        items.setParent(this);\r\n        this.sortFunction = sortFunction;\r\n        this.items = items;\r\n    }\r\n\r\n    getItemByIndex(index: number): ListItemModel | null {\r\n        return this.items.get(index);\r\n    }\r\n}\r\n\r\ninterface TreeItem {\r\n    show(): void;\r\n    hide(): void;\r\n    display(): void;\r\n    remove(): void;\r\n}\r\n\r\nclass ListItemList implements TreeItem {\r\n    #items: ListItemModel[];\r\n\r\n    constructor(items: ListItemModel[]) {\r\n        this.#items = items;\r\n    }\r\n\r\n    static from(items: ListItemModel[]): ListItemList {\r\n        return new ListItemList(items);\r\n    }\r\n\r\n    show(): void {\r\n        const items = this.#items;\r\n        items.forEach(item_i => {\r\n            item_i.show();\r\n        });\r\n    }\r\n\r\n    hide(): void {\r\n        const items = this.#items;\r\n        items.forEach(item_i => {\r\n            item_i.hide();\r\n        });\r\n    }\r\n\r\n    display(): void {\r\n        const items = this.#items;\r\n        const result = items.reduce(\r\n            (result, item_i) => `${result} ${item_i.label}`, \"\"\r\n        );\r\n        console.log(result);\r\n    }\r\n\r\n    remove(): void {\r\n        const items = this.#items;\r\n        const removedItemsGroups = items.reduce((map, item_i) => {\r\n            const {parentNode} = item_i;\r\n            if (parentNode instanceof ListModel) {\r\n                const {items} = parentNode;\r\n                const group = map.get(items);\r\n                if (group) group.push(item_i);\r\n                else map.set(items, [item_i]);\r\n            }\r\n            return map;\r\n        }, new Map<ModelList, ListItemModel[]>());\r\n        Array.from(removedItemsGroups.entries()).forEach(\r\n            ([list_i, children_i]) => {\r\n                list_i.beginChanges();\r\n                children_i.forEach((child_i) => {\r\n                    list_i.remove(child_i);\r\n                });\r\n                list_i.endChanges();\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nclass ListItemModel extends ModelObject implements TreeItem {\r\n    readonly label: string;\r\n\r\n    @ModelProperty()\r\n    visibility: boolean;\r\n    \r\n    constructor(init: {label: string}) {\r\n        super();\r\n        const {label} = init;\r\n        this.label = label;\r\n        this.visibility = true;\r\n    }\r\n\r\n    get index(): number {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof ListModel) {\r\n            return parentNode.items.index(this);\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    show(): void {\r\n        this.visibility = true;\r\n    }\r\n\r\n    hide(): void {\r\n        this.visibility = false;\r\n    }\r\n\r\n    display(): void {\r\n        console.log(this.label);\r\n    }\r\n    \r\n    remove(): void {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof ListModel) {\r\n            const {items} = parentNode;\r\n            if (items) {\r\n                items.remove(this);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface ListViewConstructor {\r\n    readonly prototype: ListView;\r\n    new(): ListView;\r\n    new(model: ListModel): ListView;\r\n}\r\n\r\ninterface ListView extends View {\r\n    model: ListModel;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"v-list\": ListView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"v-list\"\r\n})\r\nclass ListViewBase extends View implements ListView {\r\n    readonly model!: ListModel;\r\n    #listElementMap: WeakMap<ListModel, WeakRef<HTMLEListElement>>;\r\n    #listItemElementsMap: WeakMap<ListItemModel, WeakRef<HTMLEListItemElement>>;\r\n\r\n    constructor()\r\n    constructor(model: ListModel)\r\n    constructor(model?: ListModel) {\r\n        super();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.#listElementMap = new WeakMap();\r\n        this.#listItemElementsMap = new WeakMap();\r\n        this.setModel(model ?? new ListModel());\r\n    }\r\n\r\n    getListElement(): HTMLEListElement | null {\r\n        const {model} = this;\r\n        return this.#listElementMap.get(model)?.deref() ?? null;\r\n    }\r\n\r\n    getListItemElement(model: ListItemModel): HTMLEListItemElement | null {\r\n        return this.#listItemElementsMap.get(model)?.deref()  ?? null;\r\n    }\r\n\r\n    selectedItems(): ListItemModel[] {\r\n        const list = this.getListElement();\r\n        if (list) {\r\n            const {model} = this;\r\n            const selectedElements = list.selectedItems();\r\n            return selectedElements.map(\r\n                item_i => <ListItemModel>model.getItemByIndex(\r\n                    item_i.posinset\r\n                )\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    renderShadow(): Node {\r\n        return fragment(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    renderLight(): Node {\r\n        const {model} = this;\r\n        const listElement = element(\"e-list\", {\r\n            attributes: {\r\n                tabindex: 0\r\n            },\r\n            children: [\r\n                element(\"e-listitemgroup\", {\r\n                    children: reactiveChildElements(\r\n                        model.items, item => this.#renderListItem(item)\r\n                    )\r\n                })\r\n            ],\r\n            listeners: {\r\n                contextmenu: <EventListener>this.#handleContextMenuEvent.bind(this),\r\n                keydown: <EventListener>this.#handleKeyDownEvent.bind(this)\r\n            }\r\n        });\r\n        this.#listElementMap.set(model, new WeakRef(listElement));\r\n        return listElement;\r\n    }\r\n\r\n    #renderListItem(item: ListItemModel): Element {\r\n        const listItemElement = element(\"e-listitem\", {\r\n            attributes: {\r\n                tabindex: -1,\r\n                name: item.label,\r\n                draggable: \"true\"\r\n            },\r\n            dataset: {\r\n                index: item.index\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    children: [\r\n                        item.label\r\n                    ]\r\n                }),\r\n                element(\"e-toolbar\", {\r\n                    attributes: {\r\n                        //slot: \"toolbar\",\r\n                        tabindex: 0\r\n                    },\r\n                    children: [\r\n                        element(\"e-toolbaritemgroup\", {\r\n                            children: [\r\n                                EToolBarItem.menubutton({\r\n                                    name: \"settings\",\r\n                                    label: \"Actions\",\r\n                                    menubutton: new EMenuButton({\r\n                                        menu: reactiveElement(\r\n                                            item,\r\n                                            new EMenu({\r\n                                                children: [\r\n                                                    new EMenuItemGroup({\r\n                                                        items: [\r\n                                                            EMenuItem.button({\r\n                                                                name: \"display\",\r\n                                                                label: \"Display\",\r\n                                                                trigger: () => {\r\n                                                                    item.display();\r\n                                                                }\r\n                                                            }),\r\n                                                            EMenuItem.button({\r\n                                                                name: \"delete\",\r\n                                                                label: \"Delete\",\r\n                                                                trigger: () => {\r\n                                                                    item.remove();\r\n                                                                }\r\n                                                            })\r\n                                                        ]\r\n                                                    }),\r\n                                                    new EMenuItemGroup({\r\n                                                        items: [\r\n                                                            EMenuItem.button({\r\n                                                                name: \"visibility\",\r\n                                                                label: \"Visibility\",\r\n                                                                trigger: () => {\r\n                                                                    item.visibility ?\r\n                                                                    item.hide() :\r\n                                                                    item.show();\r\n                                                                }\r\n                                                            })\r\n                                                        ]\r\n                                                    })\r\n                                                ]\r\n                                            }),\r\n                                            [\"visibility\"],\r\n                                            (menu, property, oldValue, newValue) => {\r\n                                                //const {items} = menu;\r\n                                                switch (property) {\r\n                                                    case \"visibility\": {\r\n                                                        /*const item = <HTMLEMenuItemElement>items.namedItem(\"visibility\");\r\n                                                        item.textContent = newValue ? \"Hide\" : \"Show\";\r\n                                                        item.title = newValue ? \"Hide\" : \"Show\";*/\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        )\r\n                                    })\r\n                                }),\r\n                                reactiveElement(\r\n                                    item,\r\n                                    element(\"e-toolbaritem\", {\r\n                                        attributes: {\r\n                                            name: \"visibility\",\r\n                                            type: \"checkbox\",\r\n                                            tabindex: -1\r\n                                        },\r\n                                        listeners: {\r\n                                            trigger: () => {\r\n                                                item.visibility ?\r\n                                                    item.hide() :\r\n                                                    item.show();\r\n                                            }\r\n                                        }\r\n                                    }),\r\n                                    [\"visibility\"],\r\n                                    (toolbaritem, property, oldValue, newValue) => {\r\n                                        toolbaritem.title = newValue ? \"Hide\" : \"Show\";\r\n                                        toolbaritem.checked = newValue;\r\n                                    }\r\n                                )\r\n                            ]\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        });\r\n        this.#listItemElementsMap.set(item, new WeakRef(listItemElement));\r\n        return listItemElement;\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        const {clientX, clientY, currentTarget, target} = event;\r\n        const {model} = this;\r\n        if (currentTarget instanceof HTMLEListElement && target instanceof HTMLEListItemElement) {\r\n            const activeItem = model.getItemByIndex(\r\n                parseInt(target.dataset.index!)\r\n            )!;\r\n            const menu = element(\"e-menu\", {\r\n                attributes: {\r\n                    tabindex: -1,\r\n                    contextual: true\r\n                },\r\n                children: [\r\n                    element(\"e-menuitemgroup\", {\r\n                        attributes: {\r\n                            tabindex: -1\r\n                        },\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                attributes: {\r\n                                    tabindex: -1\r\n                                },\r\n                                children: [\r\n                                    \"Display\"\r\n                                ],\r\n                                listeners: {\r\n                                    trigger: () => {\r\n                                        ListItemList.from(\r\n                                            this.selectedItems()\r\n                                        ).display();\r\n                                    }\r\n                                }\r\n                            }),\r\n                            element(\"e-menuitem\", {\r\n                                attributes: {\r\n                                    tabindex: -1\r\n                                },\r\n                                children: [\r\n                                    \"Delete\"\r\n                                ],\r\n                                listeners: {\r\n                                    trigger: () => {\r\n                                        ListItemList.from(\r\n                                            this.selectedItems()\r\n                                        ).remove();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    }),\r\n                    element(\"e-menuitemgroup\", {\r\n                        attributes: {\r\n                            tabindex: -1\r\n                        },\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                attributes: {\r\n                                    tabindex: -1,\r\n                                    type: \"checkbox\"\r\n                                },\r\n                                children: [\r\n                                    activeItem.visibility ? \"Hide\" : \"Show\"\r\n                                ],\r\n                                listeners: {\r\n                                    trigger: () => {\r\n                                        const selectedItems = ListItemList.from(\r\n                                            this.selectedItems()\r\n                                        );\r\n                                        activeItem.visibility ?\r\n                                            selectedItems.hide() :\r\n                                            selectedItems.show();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ],\r\n                listeners: {\r\n                    close: () => {\r\n                        target.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            });\r\n            target.append(menu);\r\n            menu.positionContextual(clientX, clientY);\r\n            menu.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        if (currentTarget instanceof HTMLEListElement) {\r\n            switch (key) {\r\n                case \"Delete\": {\r\n                    ListItemList.from(\r\n                        this.selectedItems()\r\n                    ).remove();\r\n                    event.preventDefault();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ListView: ListViewConstructor = ListViewBase;","import { HTMLEGridElement } from \"../elements/containers/grid/Grid\";\r\nimport { HTMLEGridCellElement } from \"../elements/containers/grid/GridCell\";\r\nimport { HTMLEGridRowElement } from \"../elements/containers/grid/GridRow\";\r\nimport { element, reactiveChildElements, CustomElement, fragment, AttributeProperty, reactiveElement } from \"../elements/Element\";\r\nimport { ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\nimport { HTMLEMenuItemElement } from \"../elements/containers/menus/MenuItem\";\r\n\r\nexport { GridModel };\r\nexport { GridRowModel };\r\nexport { GridColumnModel };\r\nexport { GridView };\r\n\r\nclass GridModel extends ModelObject {\r\n    readonly rows: ModelList<GridRowModel>;\r\n    readonly columns: ModelList<GridColumnModel>;\r\n\r\n    constructor()\r\n    constructor(init: {rows: GridRowModel[], columns: GridColumnModel[]})\r\n    constructor(init?: {rows: GridRowModel[], columns: GridColumnModel[]}) {\r\n        super();\r\n        const rows = new ModelList(init?.rows ?? []);\r\n        rows.setParent(this);\r\n        this.rows = rows;\r\n        const columns = new ModelList(init?.columns ?? []);\r\n        columns.setParent(this);\r\n        this.columns = columns;\r\n    }\r\n\r\n    getColumnByName(name: string): GridColumnModel | null {\r\n        return Array.from(this.columns.values()).find(\r\n            column_i => column_i.name == name\r\n        ) ?? null;\r\n    }\r\n\r\n    sortByColumn(column: GridColumnModel, sortOrder: number) {\r\n        Array.from(this.columns.values()).forEach((column_i) => {\r\n            column_i.sortorder = column_i == column ? sortOrder : void 0;\r\n        });\r\n        this.rows.sort(\r\n            (row_1, row_2) => {\r\n                const cell_1 = <string>column.extract(row_1).toString();\r\n                const cell_2 = <string>column.extract(row_2).toString();\r\n                return sortOrder * cell_1.localeCompare(cell_2);\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\ntype Constructor = {\r\n    new(...args: any): any;\r\n    readonly prototype: any;\r\n}\r\n\r\ntype GridRowFilter = {\r\n    filter: (row: GridRowModel) => boolean;\r\n}\r\n\r\nclass GridColumnModel<T extends Constructor = Constructor> extends ModelObject {\r\n    readonly name: string;\r\n    readonly label: string;\r\n    readonly type: T;\r\n    readonly extract: (row: GridRowModel) => InstanceType<T>;\r\n    readonly filters: (GridRowFilter & {name: string})[];\r\n\r\n    @ModelProperty()\r\n    sortorder: number | undefined;\r\n\r\n    constructor(init: {\r\n        name: string,\r\n        label: string,\r\n        type: T,\r\n        extract: (row: GridRowModel) => InstanceType<T>,\r\n        filters?: (GridRowFilter & {name: string})[]\r\n    }) {\r\n        super();\r\n        const {name, label, type, extract} = init;\r\n        this.name = name;\r\n        this.label = label;\r\n        this.type = type;\r\n        this.extract = extract;\r\n        this.filters = init.filters ?? [];\r\n        this.sortorder = 1;\r\n    }\r\n}\r\n\r\nclass GridRowModel extends ModelObject {\r\n    @ModelProperty()\r\n    name: string;\r\n\r\n    @ModelProperty()\r\n    age: number;\r\n    \r\n    constructor(init: {name: string, age: number}) {\r\n        super();\r\n        const {name, age} = init;\r\n        this.name = name;\r\n        this.age = age;\r\n    }\r\n}\r\n\r\ninterface GridViewConstructor {\r\n    readonly prototype: GridView;\r\n    new(): GridView;\r\n    new(model: GridModel): GridView;\r\n}\r\n\r\ninterface GridView extends View {\r\n    readonly shadowRoot: ShadowRoot;\r\n    model: GridModel;\r\n    resizable: boolean;\r\n    sortable: boolean;\r\n    setColumnDelegate(delegate: (column: GridColumnModel) => string | Node): void;\r\n    setCellDelegate(delegate: (row: GridRowModel, column: GridColumnModel) => string | Node): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"v-grid\": GridView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"v-grid\"\r\n})\r\nclass GridViewBase extends View implements GridView {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly model!: GridModel;\r\n\r\n    #columnDelegate: (column: GridColumnModel) => string | Node;\r\n    #cellDelegate: (row: GridRowModel, column: GridColumnModel) => string | Node;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    resizable!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    sortable!: boolean;\r\n\r\n    #displayFilters: (GridRowFilter & {name: string})[];\r\n    #searchFilter: GridRowFilter | null;\r\n\r\n    #gridRowElementsMap: WeakMap<GridRowModel, WeakRef<HTMLEGridRowElement>>\r\n    \r\n    constructor()\r\n    constructor(model: GridModel)\r\n    constructor(model?: GridModel) {\r\n        super();\r\n        this.#displayFilters = [];\r\n        this.#searchFilter = null;\r\n        this.#gridRowElementsMap = new WeakMap();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.setModel(model ?? new GridModel());\r\n        this.#cellDelegate = (row: GridRowModel, column: GridColumnModel) => {\r\n            return element(\"label\", {\r\n                children: [\r\n                    column.extract(row)\r\n                ]\r\n            });\r\n        };\r\n        this.#columnDelegate = (column: GridColumnModel) => {\r\n            return element(\"label\", {\r\n                children: [\r\n                    column.label\r\n                ]\r\n            });\r\n        };\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"resizable\":\r\n            case \"sortable\": {\r\n                this.refresh();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    get gridElement(): HTMLEGridElement {\r\n        return this.getGridElement()!;\r\n    }\r\n\r\n    setColumnDelegate(delegate: (column: GridColumnModel) => string | Node): void {\r\n        this.#columnDelegate = delegate;\r\n    }\r\n\r\n    setCellDelegate(delegate: (row: GridRowModel, column: GridColumnModel) => string | Node): void {\r\n        this.#cellDelegate = delegate;\r\n    }\r\n\r\n    getGridElement(): HTMLEGridElement | null {\r\n        return this.shadowRoot.querySelector(`:scope > e-grid`);\r\n    }\r\n\r\n    getRowElement(row: GridRowModel): HTMLEGridRowElement | null {\r\n        return this.#gridRowElementsMap.get(row)?.deref() ?? null;\r\n    }\r\n\r\n    getColumnHeaderElement(column: GridColumnModel): HTMLEGridCellElement | null {\r\n        return this.shadowRoot.querySelector(`:scope > e-grid > e-gridhead > e-gridrow > e-gridcell[type=columnheader][name=${column.name}]`);\r\n    }\r\n\r\n    getColumnDataElements(column: GridColumnModel): HTMLEGridCellElement[] {\r\n        return Array.from(this.shadowRoot.querySelectorAll(`:scope > e-grid > e-gridbody > e-gridrow > e-gridcell[headers~=${column.name}]`));\r\n    }\r\n\r\n    renderShadow(): Node {\r\n        const {model} = this;\r\n        return fragment(\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/main.css\"\r\n                }\r\n            }),\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/views/gridview.css\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                children: [\r\n                    element(\"input\", {\r\n                        attributes: {\r\n                            type: \"search\"\r\n                        },\r\n                        listeners: {\r\n                            input: <EventListener>this.#handleSearchInputEvent.bind(this)\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"e-grid\", {\r\n                attributes: {\r\n                    tabindex: 0,\r\n                    selectby: \"row\"\r\n                },\r\n                children: [\r\n                    element(\"e-gridhead\", {\r\n                        children: [\r\n                            element(\"e-gridrow\", {\r\n                                children: reactiveChildElements(\r\n                                    model.columns, column => this.#renderGridColumnHeaderCell(column)\r\n                                )\r\n                            })\r\n                        ]\r\n                    }),\r\n                    element(\"e-gridbody\", {\r\n                        children: reactiveChildElements(\r\n                            model.rows, row => this.#renderGridBodyRow(row)\r\n                        )\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    setSearchFilter(filter: GridRowFilter | null): void {\r\n        this.#searchFilter = filter;\r\n        Array.from(this.model.rows.values()).forEach((row_i) => {\r\n            const rowElement = this.getRowElement(row_i);\r\n            if (rowElement) {\r\n                rowElement.hidden =\r\n                    !this.#displayFilters.some(filter_i => filter_i.filter(row_i))\r\n                    && !(filter?.filter(row_i) ?? true);\r\n            }\r\n        });\r\n        const {gridElement} = this;\r\n        gridElement.beginSelection();\r\n        gridElement.selectedRows().forEach(selectedRow_i => selectedRow_i.selected = false);\r\n        gridElement.endSelection();\r\n    }\r\n\r\n    addDisplayFilter(filter: (GridRowFilter & {name: string;})): void {\r\n        const displayFilters = this.#displayFilters;\r\n        if (!displayFilters.includes(filter)) {\r\n            this.#displayFilters.push(filter);\r\n            Array.from(this.model.rows.values()).forEach((row_i) => {\r\n                const rowElement = this.getRowElement(row_i);\r\n                if (rowElement) {\r\n                    rowElement.hidden = !this.#displayFilters.some(filter_i => filter_i.filter(row_i));\r\n                }\r\n            });\r\n        }\r\n        const {gridElement} = this;\r\n        gridElement.beginSelection();\r\n        gridElement.selectedRows().forEach(selectedRow_i => selectedRow_i.selected = false);\r\n        gridElement.endSelection();\r\n    }\r\n\r\n    removeDisplayFilter(filter: (GridRowFilter & {name: string;})): void {\r\n        const displayFilters = this.#displayFilters;\r\n        const filterIndex = displayFilters.indexOf(filter);\r\n        if (filterIndex > -1) {\r\n            displayFilters.splice(filterIndex, 1);\r\n            Array.from(this.model.rows.values()).forEach((row_i) => {\r\n                const rowElement = this.getRowElement(row_i);\r\n                if (rowElement) {\r\n                    rowElement.hidden = !this.#displayFilters.every(filter_i => filter_i.filter(row_i));\r\n                }\r\n            });\r\n        }\r\n        const {gridElement} = this;\r\n        gridElement.beginSelection();\r\n        gridElement.selectedRows().forEach(selectedRow_i => selectedRow_i.selected = false);\r\n        gridElement.endSelection();\r\n    }\r\n\r\n    #renderGridColumnHeaderCell(column: GridColumnModel): Element {\r\n        const {model} = this;\r\n        const gridColumnElement = reactiveElement(\r\n            column,\r\n            element(\"e-gridcell\", {\r\n                attributes: {\r\n                    tabindex: -1,\r\n                    name: column.name,\r\n                    id: this.resizable ? `${column.name}-columnheader` : void 0,\r\n                    type: \"columnheader\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            class: \"gridcell-content\"\r\n                        },\r\n                        children: (<Node[]>[\r\n                            element(\"label\", {\r\n                                attributes: {\r\n                                    class: \"gridcell-label\"\r\n                                },\r\n                                children: [\r\n                                    column.label\r\n                                ],\r\n                                listeners: {\r\n                                    click: <EventListener>this.#handleColumnLabelClickEvent.bind(this)\r\n                                }\r\n                            }),\r\n                            element(\"e-toolbar\", {\r\n                                attributes: {\r\n                                    tabindex: -1,\r\n                                },\r\n                                children: [\r\n                                    element(\"e-toolbaritem\", {\r\n                                        attributes: {\r\n                                            type: \"menubutton\",\r\n                                            tabindex: -1,\r\n                                        },\r\n                                        children: [\r\n                                            element(\"e-menubutton\",  {\r\n                                                attributes: {\r\n                                                    slot: \"menubutton\",\r\n                                                    tabindex: -1,\r\n                                                },\r\n                                                children: [\r\n                                                    element(\"e-menu\",  {\r\n                                                        attributes: {\r\n                                                            slot: \"menu\",\r\n                                                            tabindex: -1,\r\n                                                        },\r\n                                                        children: [\r\n                                                            element(\"e-menuitem\",  {\r\n                                                                attributes: {\r\n                                                                    type: \"button\",\r\n                                                                    tabindex: -1,\r\n                                                                },\r\n                                                                children: [\r\n                                                                    \"Resize Column\"\r\n                                                                ],\r\n                                                                listeners: {\r\n                                                                    trigger: () => {\r\n                                                                        const columnHeaderElement = this.getColumnHeaderElement(column);\r\n                                                                        if (columnHeaderElement) {\r\n                                                                            const {style} = columnHeaderElement;\r\n                                                                            style.removeProperty(\"width\");\r\n                                                                            style.removeProperty(\"max-width\");\r\n                                                                            this.getColumnDataElements(column).forEach(\r\n                                                                                cell_i => cell_i.style.maxWidth = \"unset\"\r\n                                                                            );\r\n                                                                        }\r\n                                                                    }\r\n                                                                }\r\n                                                            }),\r\n                                                            element(\"e-menuitem\",  {\r\n                                                                attributes: {\r\n                                                                    type: \"submenu\",\r\n                                                                    tabindex: -1,\r\n                                                                },\r\n                                                                children: [\r\n                                                                    \"Sort\",\r\n                                                                    reactiveElement(\r\n                                                                        column,\r\n                                                                        element(\"e-menu\",  {\r\n                                                                            attributes: {\r\n                                                                                slot: \"menu\",\r\n                                                                                tabindex: -1,\r\n                                                                            },\r\n                                                                            children: [\r\n                                                                                element(\"e-menuitem\",  {\r\n                                                                                    attributes: {\r\n                                                                                        type: \"radio\",\r\n                                                                                        name: \"sort\",\r\n                                                                                        value: \"1\",\r\n                                                                                        tabindex: -1,\r\n                                                                                    },\r\n                                                                                    children: [\r\n                                                                                        \"Ascending\"\r\n                                                                                    ]\r\n                                                                                }),\r\n                                                                                element(\"e-menuitem\",  {\r\n                                                                                    attributes: {\r\n                                                                                        type: \"radio\",\r\n                                                                                        name: \"sort\",\r\n                                                                                        value: \"-1\",\r\n                                                                                        tabindex: -1,\r\n                                                                                    },\r\n                                                                                    children: [\r\n                                                                                        \"Descending\"\r\n                                                                                    ]\r\n                                                                                })\r\n                                                                            ],\r\n                                                                            listeners: {\r\n                                                                                trigger: (event) => {\r\n                                                                                    const {target} = event;\r\n                                                                                    const sortOrder = (<HTMLEMenuItemElement>target).value;\r\n                                                                                    model.sortByColumn(column, parseInt(sortOrder));\r\n                                                                                }\r\n                                                                            }\r\n                                                                        }),\r\n                                                                        [\"sortorder\"],\r\n                                                                        (menu, property, oldValue, newValue) => {\r\n                                                                            menu.querySelectorAll<HTMLEMenuItemElement>(\"e-menuitem[name^=sort]\")\r\n                                                                            .forEach(sortRadioItem_i => {\r\n                                                                                sortRadioItem_i.checked = parseInt(sortRadioItem_i.value) === newValue;\r\n                                                                            });\r\n                                                                        }\r\n                                                                    )\r\n                                                                ]\r\n                                                            }),\r\n                                                            element(\"e-menuitem\",  {\r\n                                                                attributes: {\r\n                                                                    type: \"submenu\",\r\n                                                                    tabindex: -1,\r\n                                                                },\r\n                                                                children: [\r\n                                                                    \"Filter\",\r\n                                                                    element(\"e-menu\",  {\r\n                                                                        attributes: {\r\n                                                                            slot: \"menu\",\r\n                                                                            tabindex: -1,\r\n                                                                        },\r\n                                                                        children: column.filters.map((filter_i, i) =>\r\n                                                                            element(\"e-menuitem\", {\r\n                                                                                attributes: {\r\n                                                                                    tabindex: -1,\r\n                                                                                    type: \"checkbox\",\r\n                                                                                    checked: this.#displayFilters.includes(filter_i)\r\n                                                                                },\r\n                                                                                children: [\r\n                                                                                    filter_i.name\r\n                                                                                ],\r\n                                                                                listeners: {\r\n                                                                                    trigger: (event) => {\r\n                                                                                        const {currentTarget} = event;\r\n                                                                                        if (currentTarget instanceof HTMLEMenuItemElement) {\r\n                                                                                            const {checked} = currentTarget;\r\n                                                                                            if (checked) {\r\n                                                                                                this.addDisplayFilter(filter_i);\r\n                                                                                            }\r\n                                                                                            else {\r\n                                                                                                this.removeDisplayFilter(filter_i);\r\n                                                                                            }\r\n                                                                                        }\r\n                                                                                    }\r\n                                                                                }\r\n                                                                            })\r\n                                                                        )\r\n                                                                    })\r\n                                                                ]\r\n                                                            })\r\n                                                        ]\r\n                                                    })\r\n                                                ]\r\n                                            })\r\n                                        ]\r\n                                    })\r\n                                ]\r\n                            })\r\n                        ]).concat(\r\n                            this.resizable ? [\r\n                                element(\"e-wsash\", {\r\n                                    attributes: {\r\n                                        controls: `${column.name}-columnheader`\r\n                                    },\r\n                                    listeners: {\r\n                                        resize: () => {\r\n                                            this.getColumnDataElements(column).forEach(\r\n                                                cell_i => cell_i.style.removeProperty(\"max-width\")\r\n                                            );\r\n                                        }\r\n                                    }\r\n                                })\r\n                            ] : []\r\n                        )\r\n                    })\r\n                ]\r\n            }),\r\n            [\"sortorder\"],\r\n            (cell, property, oldValue, newValue) => {\r\n                switch (property) {\r\n                    case \"sortorder\":\r\n                        if (typeof newValue !== \"undefined\") {\r\n                            cell.dataset.sortorder = newValue.toString();\r\n                        }\r\n                        else {\r\n                            delete cell.dataset.sortorder;\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        );\r\n        return gridColumnElement;\r\n    }\r\n\r\n    #renderGridBodyRow(row: GridRowModel): Element {\r\n        const {model} = this;\r\n        const gridRowElement = element(\"e-gridrow\", {\r\n            attributes: {\r\n                tabindex: -1\r\n            },\r\n            children: reactiveChildElements(\r\n                model.columns, column => this.#renderGridDataCell(row, column)\r\n            )\r\n        });\r\n        this.#gridRowElementsMap.set(row, new WeakRef(gridRowElement));\r\n        return gridRowElement;\r\n    }\r\n\r\n    #renderGridDataCell(row: GridRowModel, column: GridColumnModel): Element {\r\n        const gridCellElement = element(\"e-gridcell\", {\r\n            attributes: {\r\n                type: \"gridcell\",\r\n                headers: column.name\r\n            },\r\n            children: [\r\n                this.#cellDelegate(row, column)\r\n            ]\r\n        });\r\n        return gridCellElement;\r\n    }\r\n\r\n    #handleSearchInputEvent(event: InputEvent) {\r\n        const {target} = event;\r\n        if (target instanceof HTMLInputElement) {\r\n            const {value} = target;\r\n            this.setSearchFilter(value !== \"\" ? {\r\n                filter: (row) => row.name.toLowerCase().startsWith(value.toLowerCase())\r\n            } : null);\r\n        }\r\n    }\r\n\r\n    #handleColumnLabelClickEvent(event: MouseEvent): void {\r\n        const {currentTarget} = event;\r\n        const {model} = this;\r\n        const {columns} = model;\r\n        if (currentTarget instanceof Element) {\r\n            const targetCell = currentTarget.closest(\"e-gridcell\");\r\n            if (targetCell) {\r\n                const targetColumn = Array.from(columns.values()).find(column_i => column_i.name == targetCell.name);\r\n                if (targetColumn) {\r\n                    const sortorder = targetColumn.sortorder !== undefined ? -targetColumn.sortorder : 1;\r\n                    model.sortByColumn(targetColumn, sortorder);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar GridView: GridViewConstructor = GridViewBase;","//import { MenuItemGroupWidget, MenuItemWidget, MenuWidget, MenuBarWidget } from \"./src/views/MenuBarWidget\";\r\nimport { TreeItemModel, TreeModel, TreeView } from \"./src/views/TreeeView\";\r\n\r\nimport \"./index\";\r\nimport { ListItemModel, ListModel, ListView } from \"./src/views/ListView\";\r\nimport { GridColumnModel, GridModel, GridRowModel, GridView } from \"./src/views/GridView\";\r\nimport { element, fragment, widget } from \"./src/elements/Element\";\r\nimport { treeItemWidget } from \"./src/views/widgets/tree/TreeItemWidget\";\r\nimport { Editor } from \"./src/Editor\";\r\nimport { comboBoxWidget, menuWidget, optionWidget } from \"./index\";\r\n\r\nexport async function main() {\r\n    \r\n    /*const menubar = new MenuBarWidget([\r\n        new MenuItemWidget({\r\n            label: \"File\",\r\n            name: \"file\",\r\n            type: \"menu\",\r\n            menu: new MenuWidget({\r\n                name: \"File\",\r\n                groups: [\r\n                    new MenuItemGroupWidget({\r\n                        name: \"fileActions\",\r\n                        items: [\r\n                            new MenuItemWidget({\r\n                                label: \"Import file...\",\r\n                                name: \"import\"\r\n                            }),\r\n                            new MenuItemWidget({\r\n                                label: \"Export file...\",\r\n                                name: \"export\",\r\n                                hotkey: new HotKey(Key.B, KeyModifier.Control, KeyModifier.Alt)\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        }),\r\n        new MenuItemWidget({\r\n            label: \"Preferences\",\r\n            name: \"preferences\",\r\n            type: \"menu\",\r\n            menu: new MenuWidget({\r\n                name: \"Preferences\",\r\n                groups: [\r\n                    new MenuItemGroupWidget({\r\n                        name: \"fileActions\",\r\n                        items: [\r\n                            new MenuItemWidget({\r\n                                label: \"Advanced User\",\r\n                                name: \"advanced\",\r\n                                type: \"checkbox\",\r\n                                hotkey: new HotKey(Key.A, KeyModifier.Control, KeyModifier.Alt)\r\n                            }),\r\n                            new MenuItemWidget({\r\n                                label: \"Layout\",\r\n                                name: \"layout\",\r\n                                type: \"submenu\",\r\n                                menu: new MenuWidget({\r\n                                    name: \"Layout\",\r\n                                    groups: [\r\n                                        new MenuItemGroupWidget({\r\n                                            name: \"Layout\",\r\n                                            items: [\r\n                                                new MenuItemWidget({\r\n                                                    label: \"Standard\",\r\n                                                    name: \"standard\",\r\n                                                    type: \"radio\"\r\n                                                }),\r\n                                                new MenuItemWidget({\r\n                                                    label: \"Advanced\",\r\n                                                    name: \"advanced\",\r\n                                                    type: \"radio\"\r\n                                                })\r\n                                            ]\r\n                                        })\r\n                                    ]\r\n                                })\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        })\r\n    ]);*/\r\n\r\n    const treeView = new TreeView();\r\n    const treeModel = new TreeModel({\r\n        items: [\r\n            new TreeItemModel({\r\n                label: \"TI 0\",\r\n                type: \"parent\",\r\n                items: [\r\n                    new TreeItemModel({\r\n                        label: \"TI 1A\",\r\n                        type: \"parent\",\r\n                        items: [\r\n                            new TreeItemModel({\r\n                                type: \"leaf\",\r\n                                label: \"TI 1AX\"\r\n                            }),\r\n                        ]\r\n                    }),\r\n                    new TreeItemModel({\r\n                        type: \"parent\",\r\n                        label: \"TI 1B\"\r\n                    })\r\n                ]\r\n            }),\r\n            new TreeItemModel({\r\n                label: \"TI 1\",\r\n                type: \"parent\",\r\n                items: [\r\n                    new TreeItemModel({\r\n                        label: \"TI 1A\",\r\n                        type: \"parent\",\r\n                        items: [\r\n                            new TreeItemModel({\r\n                                type: \"leaf\",\r\n                                label: \"TI 1AX\"\r\n                            }),\r\n                        ]\r\n                    }),\r\n                    new TreeItemModel({\r\n                        type: \"parent\",\r\n                        label: \"TI 1B\"\r\n                    })\r\n                ]\r\n            }),\r\n            new TreeItemModel({\r\n                type: \"leaf\",\r\n                label: \"TI 2\"\r\n            }),\r\n            new TreeItemModel({\r\n                type: \"leaf\",\r\n                label: \"TI 3\"\r\n            })\r\n        ],\r\n        sortFunction: (item_a: TreeItemModel, item_b: TreeItemModel) => {\r\n            const {label: aLabel} = item_a;\r\n            const {label: bLabel} = item_b;\r\n            return bLabel.localeCompare(aLabel);\r\n        }\r\n    });\r\n    treeView.setModel(treeModel);\r\n    document.body.append(treeView);\r\n    \r\n    treeModel.childItems.append(\r\n        new TreeItemModel({\r\n            label: \"yo\",\r\n            type: \"parent\",\r\n            items: [\r\n                new TreeItemModel({\r\n                    type: \"leaf\",\r\n                    label: \"plop\"\r\n                })\r\n            ]\r\n        })\r\n    );\r\n\r\n    const listView = new ListView();\r\n    listView.setModel(\r\n        new ListModel({\r\n            items: [\r\n                new ListItemModel({\r\n                    label: \"Hey\"\r\n                }),\r\n                new ListItemModel({\r\n                    label: \"Yo\"\r\n                })\r\n            ]\r\n        })\r\n    );\r\n\r\n    document.body.append(listView);\r\n\r\n    // Menu actions\r\n    // Toolbar actions\r\n    const gridView = new GridView();\r\n    gridView.resizable = true;\r\n    gridView.sortable = true;\r\n    gridView.setColumnDelegate((column) => {\r\n        return fragment(\r\n            element(\"label\", {\r\n                children: [\r\n                    column.label\r\n                ]\r\n            })/*,\r\n            element(\"e-toolbar\", {\r\n                children: [\r\n                    element(\"e-toolbaritem\", {\r\n                        attributes: {\r\n                            type: \"button\"\r\n                        }\r\n                    })\r\n                ]\r\n            })*/\r\n        );\r\n    });\r\n    gridView.setModel(\r\n        new GridModel({\r\n            columns: [\r\n                new GridColumnModel({\r\n                    name: \"name\",\r\n                    label: \"Name\",\r\n                    type: String,\r\n                    extract: (row) => row.name\r\n                }),\r\n                new GridColumnModel({\r\n                    name: \"age\",\r\n                    label: \"Age\",\r\n                    type: Number,\r\n                    extract: (row) => row.age,\r\n                    filters: [{\r\n                        name: \"Minors\",\r\n                        filter: (row) => row.age < 18\r\n                    },{\r\n                        name: \"Majors\",\r\n                        filter: (row) => row.age >= 18\r\n                    }]\r\n                })\r\n            ],\r\n            rows: [\r\n                new GridRowModel({\r\n                    name: \"Denis\",\r\n                    age: 13\r\n                }),\r\n                new GridRowModel({\r\n                    name: \"Jean-Charles\",\r\n                    age: 32\r\n                }),\r\n                new GridRowModel({\r\n                    name: \"Charles\",\r\n                    age: 25\r\n                })\r\n            ]\r\n        })\r\n    );\r\n\r\n    document.body.append(gridView);\r\n    \r\n    const menuView = widget(\"menubar\", {\r\n        slotted: [\r\n            widget(\"menuitem\", {\r\n                properties: {\r\n                    label: \"MenuItem 0\",\r\n                    name: \"MenuItem 0\",\r\n                    type: \"menu\",\r\n                    disabled: true\r\n                },\r\n                slotted: [\r\n                    widget(\"menu\", {\r\n                        slotted: [\r\n                            widget(\"menuitem\", {\r\n                                properties: {\r\n                                    label: \"MenuItem 1\",\r\n                                    name: \"MenuItem 1\",\r\n                                    type: \"checkbox\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            widget(\"menuitem\", {\r\n                properties: {\r\n                    label: \"MenuItem 1\",\r\n                    name: \"MenuItem 1\",\r\n                    type: \"menu\"\r\n                },\r\n                slotted: [\r\n                    widget(\"menu\", {\r\n                        slotted: [\r\n                            widget(\"menuitemgroup\", {\r\n                                slotted: [\r\n                                    widget(\"menuitem\", {\r\n                                        properties: {\r\n                                            label: \"MenuItem 1\",\r\n                                            type: \"checkbox\",\r\n                                            keyshortcut: \"Ctrl+B\",\r\n                                            disabled: true,\r\n                                            checked: true\r\n                                        }\r\n                                    }),\r\n                                    widget(\"menuitem\", {\r\n                                        properties: {\r\n                                            type: \"button\",\r\n                                            label: \"MenuItem 2\",\r\n                                            keyshortcut: \"Ctrl+A\"\r\n                                        }\r\n                                    })\r\n                                ]\r\n                            }),\r\n                            widget(\"separator\"),\r\n                            widget(\"menuitem\", {\r\n                                properties: {\r\n                                    label: \"Submenu\",\r\n                                    type: \"submenu\"\r\n                                },\r\n                                slotted: [\r\n                                    widget(\"menu\", {\r\n                                        slotted: [\r\n                                            widget(\"menuitem\", {\r\n                                                properties: {\r\n                                                    label: \"MenuItem 1\",\r\n                                                    type: \"radio\",\r\n                                                    name: \"radio\",\r\n                                                    value: \"1\"\r\n                                                }\r\n                                            }),\r\n                                            widget(\"menuitem\", {\r\n                                                properties: {\r\n                                                    type: \"radio\",\r\n                                                    label: \"MenuItem 2\",\r\n                                                    name: \"radio\",\r\n                                                    value: \"2\"\r\n                                                }\r\n                                            }),\r\n                                            widget(\"menuitem\", {\r\n                                                properties: {\r\n                                                    type: \"radio\",\r\n                                                    label: \"MenuItem 3\",\r\n                                                    name: \"radio\",\r\n                                                    value: \"3\"\r\n                                                }\r\n                                            })\r\n                                        ]\r\n                                    })\r\n                                ]\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        ]\r\n    })\r\n    document.body.append(menuView);\r\n\r\n\r\n    const tree = widget(\"tree\", {\r\n        slotted: [\r\n            widget(\"treeitem\", {\r\n                properties: {\r\n                    label: \"treeitem 0\",\r\n                    type: \"parent\",\r\n                    draggable: true\r\n                    //disabled: true\r\n                },\r\n                slotted: {\r\n                    group: [\r\n                        widget(\"treeitemgroup\", {\r\n                            slotted: [\r\n                                widget(\"treeitem\", {\r\n                                    properties: {\r\n                                        label: \"treeitem 1\",\r\n                                        type: \"leaf\",\r\n                                        draggable: true\r\n                                    }\r\n                                })\r\n                            ]\r\n                        })\r\n                    ]\r\n                },\r\n                listeners: {\r\n                    contextmenu: <EventListener>((event: MouseEvent) => {\r\n                        const {target, clientX, clientY} = event;\r\n                        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n                        const menu = widget(\"menu\", {\r\n                            properties: {\r\n                                contextual: true\r\n                            },\r\n                            slotted: [\r\n                                widget(\"menuitemgroup\", {\r\n                                    slotted: [\r\n                                        widget(\"menuitem\", {\r\n                                            properties: {\r\n                                                label: \"Display\"\r\n                                            },\r\n                                            listeners: {\r\n                                                click: () => {\r\n                                                    console.log(treeItemWidget.getLabel(targetItem));\r\n                                                }\r\n                                            }\r\n                                        }),\r\n                                        widget(\"menuitem\", {\r\n                                            properties: {\r\n                                                label: \"Delete\"\r\n                                            },\r\n                                            listeners: {\r\n                                                click: () => {\r\n                                                    targetItem.remove();\r\n                                                }\r\n                                            }\r\n                                        })\r\n                                    ]\r\n                                }),\r\n                            ]\r\n                        });\r\n                        targetItem.append(menu);\r\n                        menuWidget.positionContextual(menu, clientX, clientY);\r\n                        menu.focus({preventScroll: true});\r\n                        event.preventDefault();\r\n                    })\r\n                }\r\n            }),\r\n            widget(\"treeitem\", {\r\n                properties: {\r\n                    label: \"treeitem 0\",\r\n                    type: \"parent\",\r\n                    draggable: true,\r\n                    disabled: true\r\n                },\r\n                slotted: {\r\n                    group: [\r\n                        widget(\"treeitemgroup\", {\r\n                            slotted: [\r\n                                widget(\"treeitem\", {\r\n                                    properties: {\r\n                                        label: \"treeitem 1\",\r\n                                        type: \"leaf\",\r\n                                        draggable: true\r\n                                    }\r\n                                })\r\n                            ]\r\n                        })\r\n                    ]\r\n                }\r\n            }),\r\n            widget(\"treeitem\", {\r\n                properties: {\r\n                    label: \"treeitem 1\",\r\n                    type: \"leaf\",\r\n                    draggable: true\r\n                },\r\n                slotted: {\r\n                    content: [\r\n                        widget(\"toolbar\", {\r\n                            slotted: [\r\n                                widget(\"toolbaritem\",  {\r\n                                    properties: {\r\n                                        label: \"First item\",\r\n                                        type: \"button\"\r\n                                    }\r\n                                }),\r\n                                widget(\"toolbaritem\",  {\r\n                                    properties: {\r\n                                        label: \"Second item\",\r\n                                        type: \"checkbox\"\r\n                                    }\r\n                                })\r\n                            ]\r\n                        })\r\n                    ]\r\n                }\r\n            })\r\n        ]\r\n    })\r\n    document.body.append(tree);\r\n\r\n    document.body.append(\r\n        widget(\"toolbar\", {\r\n            slotted: [\r\n                widget(\"toolbaritem\",  {\r\n                    properties: {\r\n                        label: \"First item\",\r\n                        type: \"menubutton\"\r\n                    },\r\n                    slotted: [\r\n                        widget(\"menu\", {\r\n                            slotted: [\r\n                                widget(\"menuitem\", {\r\n                                    properties: {\r\n                                        label: \"MenuItem 1\",\r\n                                        name: \"MenuItem 1\",\r\n                                        type: \"checkbox\"\r\n                                    }\r\n                                }),\r\n                                widget(\"menuitem\", {\r\n                                    properties: {\r\n                                        label: \"MenuItem 2\",\r\n                                        name: \"MenuItem 2\",\r\n                                        type: \"checkbox\"\r\n                                    }\r\n                                })\r\n                            ]\r\n                        })\r\n                    ]\r\n                }),\r\n                widget(\"toolbaritem\",  {\r\n                    properties: {\r\n                        label: \"Second item\",\r\n                        type: \"checkbox\"\r\n                    }\r\n                }),\r\n                widget(\"toolbaritem\",  {\r\n                    properties: {\r\n                        label: \"Third item\",\r\n                        type: \"checkbox\",\r\n                        disabled: true,\r\n                    }\r\n                }),\r\n                widget(\"toolbaritem\",  {\r\n                    properties: {\r\n                        label: \"Fourth item\",\r\n                        type: \"checkbox\"\r\n                    }\r\n                })\r\n            ]\r\n        })\r\n    );\r\n\r\n    document.body.append(\r\n        widget(\"list\", {\r\n            slotted: [\r\n                widget(\"listitemgroup\",  {\r\n                    slotted: [   \r\n                        widget(\"listitem\",  {\r\n                            properties: {\r\n                                label: \"First item\"\r\n                            }\r\n                        })\r\n                    ]\r\n                }),\r\n                widget(\"listitem\",  {\r\n                    properties: {\r\n                        label: \"Second item\"\r\n                    },\r\n                    slotted: [\r\n                        widget(\"toolbar\", {\r\n                            slotted: [\r\n                                widget(\"toolbaritem\",  {\r\n                                    properties: {\r\n                                        label: \"First item\",\r\n                                        type: \"button\"\r\n                                    }\r\n                                }),\r\n                                widget(\"toolbaritem\",  {\r\n                                    properties: {\r\n                                        label: \"Second item\",\r\n                                        type: \"checkbox\"\r\n                                    }\r\n                                })\r\n                            ]\r\n                        })\r\n                    ]\r\n                }),\r\n                widget(\"listitem\",  {\r\n                    properties: {\r\n                        label: \"Third item\",\r\n                        disabled: true,\r\n                    }\r\n                }),\r\n                widget(\"listitem\",  {\r\n                    properties: {\r\n                        label: \"Fourth item\"\r\n                    }\r\n                })\r\n            ]\r\n        })\r\n    );\r\n\r\n    document.body.append(\r\n        widget(\"grid\", {\r\n            properties: {\r\n                selectby: \"row\",\r\n                multisectable: true\r\n            },\r\n            slotted: {\r\n                headers: [\r\n                    widget(\"gridheader\",  {\r\n                        properties: {\r\n                            label: \"First header\"\r\n                        }\r\n                    }),\r\n                    widget(\"gridheader\",  {\r\n                        properties: {\r\n                            label: \"Second header\"\r\n                        }\r\n                    })\r\n                ],\r\n                rows: [\r\n                    widget(\"gridrow\",  {\r\n                        slotted: [   \r\n                            widget(\"gridcell\",  {\r\n                                properties: {\r\n                                    label: \"First cell\"\r\n                                }\r\n                            }),\r\n                            widget(\"gridcell\",  {\r\n                                properties: {\r\n                                    label: \"Second cell\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    }),\r\n                    widget(\"gridrow\",  {\r\n                        slotted: [   \r\n                            widget(\"gridcell\",  {\r\n                                properties: {\r\n                                    label: \"Third cell\"\r\n                                }\r\n                            }),\r\n                            widget(\"gridcell\",  {\r\n                                properties: {\r\n                                    label: \"Fourth cell\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    }),\r\n                    widget(\"gridrow\",  {\r\n                        slotted: [   \r\n                            widget(\"gridcell\",  {\r\n                                properties: {\r\n                                    label: \"Fifth cell\"\r\n                                }\r\n                            }),\r\n                            widget(\"gridcell\",  {\r\n                                properties: {\r\n                                    label: \"Sixth cell\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    }),\r\n                    widget(\"gridrow\",  {\r\n                        slotted: [   \r\n                            widget(\"gridcell\",  {\r\n                                properties: {\r\n                                    label: \"Heighth cell\"\r\n                                }\r\n                            }),\r\n                            widget(\"gridcell\",  {\r\n                                properties: {\r\n                                    label: \"Nineth cell\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            }\r\n        })\r\n    );\r\n\r\n    document.body.append(\r\n        widget(\"combobox\", {\r\n            slotted: [\r\n                widget(\"option\",  {\r\n                    properties: {\r\n                        label: \"First option\"\r\n                    }\r\n                }),\r\n                widget(\"option\",  {\r\n                    properties: {\r\n                        label: \"Second option\"\r\n                    }\r\n                }),\r\n                widget(\"option\",  {\r\n                    properties: {\r\n                        label: \"Third option\",\r\n                        selected: true\r\n                    }\r\n                })\r\n            ],\r\n            listeners: {\r\n                change: (event) => {\r\n                    const {currentTarget} = event;\r\n                    const comboBoxTarget = <HTMLElement>currentTarget;\r\n                    console.log(optionWidget.getLabel(comboBoxWidget.selectedOption(comboBoxTarget)!));\r\n                }\r\n            }\r\n        })\r\n    );\r\n    \r\n    const editor = new Editor();\r\n    editor.setup();\r\n\r\n    /*editor.registerCheckboxAction(\"toggleAdvancedUser\", (_, newValue) => {\r\n        console.log(`Advanced user is now ${newValue}`);\r\n    }, {hotkey: new HotKey(Key.ARROW_DOWN, KeyModifier.Alt)});\r\n\r\n    editor.registerRadioAction(\"setLayout\", (_, newValue) => {\r\n        editor.setPair(\"layout\", newValue);\r\n    });\r\n\r\n    editor.registerButtonAction(\"execLayout\", () => {\r\n        const layout = editor.getPair(\"layout\");\r\n        console.log(`Layout is ${layout}`);\r\n    }, {hotkey: new HotKey(Key.ARROW_UP, KeyModifier.Alt)});*/\r\n\r\n\r\n    /*editor.registerRadioAction(\"selectTest\", (oldValue, newValue) => {\r\n        console.log(`Test is ${newValue}`);\r\n    }, {value: \"2\", key: \"test\"});\r\n\r\n    document.addEventListener(\"slotchange\", (event) => {\r\n        console.log(event);\r\n    });*/\r\n    \r\n    /*setTimeout(() => {\r\n        const execLayoutToolBarItem = document.querySelector<HTMLEActionElement>(\"e-toolbaritem[name=execLayout]\");\r\n        if (execLayoutToolBarItem) {\r\n            editor.addPairListener(\"layout\", (oldValue, newValue) => {\r\n                if (newValue !== oldValue) {\r\n                    execLayoutToolBarItem.value = newValue;\r\n                }\r\n            });\r\n        }\r\n    }, 100);\r\n\r\n    const button = element(\"button\", {\r\n        properties: {\r\n            textContent: \"Focus\"\r\n        },\r\n        listeners: {\r\n            click: () => {\r\n                const menuitem = document.querySelector<HTMLEMenuItemElement>(\"e-menuitem#hey\");\r\n                if (menuitem) {\r\n                    menuitem.focus();\r\n                }\r\n            }\r\n        }\r\n    });\r\n    document.body.append(button);\r\n    document.body.append(menubar.element);\r\n    \r\n    editor.executeCheckboxAction(\"toggleAdvancedUser\", true);\r\n    editor.setCheckboxActionValue(\"toggleAdvancedUser\", false);*/\r\n\r\n    //editor.setRadioActionValue(\"selectTest\", \"2\");\r\n\r\n    //editor.executeRadioAction(\"setLayout\", \"other\");\r\n}","import { ActionType, HTMLEActionElement } from \"./elements/containers/actions/Action\";\r\nimport { subtreeNodes } from \"./elements/Element\";\r\nimport { HotKey } from \"./Input\";\r\n\r\nexport { Editor };\r\nexport { EditorBase };\r\n\r\ninterface Action {\r\n    name: string;\r\n    type: ActionType;\r\n    trigger: (oldValue: any, newValue: any) => void;\r\n    key?: string;\r\n    value?: string;\r\n    checked?: boolean;\r\n}\r\n\r\ninterface ButtonAction {\r\n    name: string;\r\n    type: \"button\";\r\n    trigger: () => void;\r\n}\r\n\r\ninterface RadioAction {\r\n    name: string;\r\n    type: \"radio\";\r\n    trigger: (oldValue: string, newValue: string) => void;\r\n    value: string;\r\n    key?: string;\r\n}\r\n\r\ninterface CheckboxAction {\r\n    name: string;\r\n    type: \"checkbox\";\r\n    trigger: (oldValue: boolean, newValue: boolean) => void;\r\n    checked: boolean;\r\n    key?: string;\r\n}\r\n\r\ninterface EditorConstructor {\r\n    readonly prototype: Editor;\r\n    new(): Editor;\r\n}\r\n\r\ninterface Editor {\r\n    /*registerWidget(widget: Widget): void;\r\n    unregisterWidget(widget: Widget): void;*/\r\n    \r\n    /*setPair(key: string, value: any): void;\r\n    getPair<T>(key: string): T;\r\n    addPairListener(key: string, listener: (oldValue: any, newValue: any) => void): void;\r\n    removePairListener(key: string, listener: (oldValue: any, newValue: any) => void): void;*/\r\n\r\n    registerButtonAction(\r\n        name: string,\r\n        trigger: () => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n        }): ButtonAction;\r\n    registerRadioAction(\r\n        name: string,\r\n        trigger: (oldValue: string, newValue: string) => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            value?: string;\r\n        }): RadioAction;\r\n    registerCheckboxAction(\r\n        name: string,\r\n        trigger: (oldValue: boolean, newValue: boolean) => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            checked?: boolean;\r\n        }): CheckboxAction;\r\n    \r\n    executeButtonAction(name: string): void;\r\n    executeCheckboxAction(name: string, newChecked: boolean): void;\r\n    executeRadioAction(name: string, newValue: string): void;\r\n\r\n    setCheckboxActionValue(name: string, checked: boolean): void;\r\n    setRadioActionValue(name: string, value: string): void;\r\n\r\n    unregisterActionElement(action: string, element: HTMLEActionElement): void;\r\n    registerActionElement(action: string, element: HTMLEActionElement): void;\r\n    setup(): void;\r\n}\r\n\r\nclass EditorBase implements Editor {\r\n    //private _widgets: Array<Widget>;\r\n    private _actions: Array<Action>;\r\n    private _actionElements: Array<Array<HTMLEActionElement>>;\r\n    private _hotkeys: Array<HotKey>;\r\n    private _pairs: Map<string, any>;\r\n    private _pairsListeners: Map<string, Array<(oldValue: any, newValue: any) => void>>;\r\n\r\n    private _actionsObserver: MutationObserver;\r\n\r\n    constructor() {\r\n        //this._widgets = new Array();\r\n        this._actions = new Array();\r\n        this._actionElements = new Array();\r\n        this._hotkeys = new Array();\r\n        this._pairs = new Map();\r\n        this._pairsListeners = new Map();\r\n\r\n        this._actionsObserver =  new MutationObserver(this._actionsObserverCallback.bind(this));\r\n    }\r\n\r\n    private _actionsObserverCallback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            mutation.addedNodes.forEach((node: Node) => {\r\n                Array.from(subtreeNodes(node)).forEach((node) => {\r\n                    if (node instanceof HTMLEActionElement) {\r\n                        this.registerActionElement(node.name, node);\r\n                    }\r\n                });\r\n            });\r\n            mutation.removedNodes.forEach((node: Node) => {\r\n                Array.from(subtreeNodes(node)).forEach((node) => {\r\n                    if (node instanceof HTMLEActionElement) {\r\n                        this.unregisterActionElement(node.name, node);\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n    \r\n    public setup(): void {\r\n        document.body.addEventListener(\"keydown\", this);\r\n        document.body.addEventListener(\"trigger\", this);\r\n\r\n        this._actionsObserver.observe(document.body, {\r\n            childList: true,\r\n            subtree: true\r\n        });\r\n    }\r\n\r\n    /*public getPair<T>(key: string): T {\r\n        return this._pairs.get(key) as T;\r\n    }\r\n\r\n    public setPair(key: string, value: any): void {\r\n        const oldValue = this._pairs.get(key);\r\n        this._pairs.set(key, value);\r\n        const listeners = this._pairsListeners.get(key);\r\n        if (typeof listeners !== \"undefined\") {\r\n            listeners.forEach((listener_i) => {\r\n                listener_i(oldValue, value);\r\n            });\r\n        }\r\n    }\r\n\r\n    public addPairListener(key: string, listener: (oldValue: any, newValue: any) => void): void {\r\n        const listeners = this._pairsListeners.get(key);\r\n        if (typeof listeners !== \"undefined\") {\r\n            listeners.push(listener);\r\n        }\r\n        else {\r\n            this._pairsListeners.set(key, [listener]);\r\n        }\r\n    }\r\n\r\n    public removePairListener(name: string, listener: (oldValue: any, newValue: any) => void): void {\r\n        const listeners = this._pairsListeners.get(name);\r\n        if (typeof listeners !== \"undefined\") {\r\n            const listenerIndex = listeners.findIndex(listener_i => listener_i == listener);\r\n            if (listenerIndex > -1) {\r\n                listeners.copyWithin(listenerIndex, listenerIndex + 1);\r\n                listeners.length--;\r\n            }\r\n        }\r\n    }*/\r\n    \r\n    /*public registerWidget(widget: Widget): void {\r\n        widget.element.addEventListener(\"focusin\", this);\r\n        this._widgets.push(widget);\r\n    }\r\n\r\n    public unregisterWidget(widget: Widget): void {\r\n        if (this._widgets.includes(widget)) {\r\n            widget.element.removeEventListener(\"focusin\", this);\r\n            this._widgets.splice(this._widgets.indexOf(widget), 1);\r\n        }\r\n    }*/\r\n\r\n    public handleEvent(event: Event): void {\r\n        const target = event.target;\r\n        switch (event.type) {\r\n            case \"keydown\":\r\n                const actionsIndices = this._hotkeys\r\n                    .map((hotkey_i, i) => hotkey_i.test(event as KeyboardEvent) ? i : -1)\r\n                    .filter(i => i > -1);\r\n                actionsIndices.forEach((index) => {\r\n                    const {name, type, value, checked} = this._actions[index];\r\n                    switch (type) {\r\n                        case \"button\":\r\n                            this.executeButtonAction(name);\r\n                            break;\r\n                        case \"checkbox\":\r\n                            this.executeCheckboxAction(name, checked!);\r\n                            break;\r\n                        case \"radio\":\r\n                            this.executeRadioAction(name, value!);\r\n                            break;\r\n                    }\r\n                });\r\n                break;\r\n            case \"trigger\":\r\n                if (target instanceof HTMLEActionElement) {\r\n                    switch (target.type) {\r\n                        case \"button\":\r\n                            this.executeButtonAction(target.name);\r\n                            break;\r\n                        case \"checkbox\":\r\n                            this.executeCheckboxAction(target.name, target.checked);\r\n                            break;\r\n                        case \"radio\":\r\n                        case \"select\":\r\n                            this.executeRadioAction(target.name, target.value);\r\n                            break;\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    \r\n    public registerButtonAction(\r\n        name: string,\r\n        trigger: () => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n        }): ButtonAction {\r\n            return this.registerAction(name, trigger, \"button\", init);\r\n    }\r\n\r\n    public registerRadioAction(\r\n        name: string,\r\n        trigger: (oldValue: string, newValue: string) => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            value?: string;\r\n        }): RadioAction {\r\n            return this.registerAction(name, trigger, \"radio\", init);\r\n    }\r\n\r\n    public registerCheckboxAction(\r\n        name: string,\r\n        trigger: (oldValue: boolean, newValue: boolean) => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            checked?: boolean;\r\n        }): CheckboxAction {\r\n            return this.registerAction(name, trigger, \"checkbox\", init);\r\n    }\r\n\r\n    public registerAction(\r\n        name: string,\r\n        trigger: () => void,\r\n        type: \"button\",\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n        }): ButtonAction;\r\n    public registerAction(\r\n        name: string,\r\n        trigger: (oldValue: boolean, newValue: boolean) => void,\r\n        type: \"checkbox\",\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            checked?: boolean;\r\n        }): CheckboxAction;\r\n    public registerAction(\r\n        name: string,\r\n        trigger: (oldValue: string, newValue: string) => void,\r\n        type: \"radio\",\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            value?: string;\r\n        }): RadioAction;\r\n    public registerAction(\r\n        name: string,\r\n        trigger: (oldValue: any, newValue: any) => void,\r\n        type: ActionType,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            value?: string;\r\n            checked?: boolean;\r\n        }): Action {\r\n        const hotkey = init?.hotkey;\r\n        const key = init?.key;\r\n        const value = init?.value;\r\n        const checked = init?.checked;\r\n        const action: Action = {name, trigger, key, type};\r\n        if (value ?? false) {\r\n            action.value = value;\r\n        }\r\n        if (key !== void 0 && value !== void 0) {\r\n            localStorage.setItem(key, value);\r\n        }\r\n        if (checked ?? false) {\r\n            action.checked = checked;\r\n        }\r\n        const index = this._actions.push(action) - 1;\r\n        if (hotkey) {\r\n            this._hotkeys[index] = hotkey;\r\n        }\r\n        return action;\r\n    }\r\n\r\n    public executeButtonAction(name: string): void {\r\n        this.executeAction(name, \"button\");\r\n    }\r\n\r\n    public executeCheckboxAction(name: string, newChecked: boolean): void {\r\n        this.executeAction(name, \"checkbox\", newChecked);\r\n    }\r\n\r\n    public executeRadioAction(name: string, newValue: string): void {\r\n        this.executeAction(name, \"radio\", newValue);\r\n    }\r\n\r\n    public executeAction(name: string, type: \"button\"): void;\r\n    public executeAction(name: string, type: \"checkbox\", newChecked: boolean): void;\r\n    public executeAction(name: string, type: \"radio\", newValue: string): void;\r\n    public executeAction(name: string, type: ActionType, newValue?: any): void {\r\n        const actionIndex = this._actions.findIndex(\r\n            action_i => action_i.name == name\r\n        );\r\n        if (actionIndex > -1) {\r\n            const action = this._actions[actionIndex];\r\n            let oldValue;\r\n            switch (type) {\r\n                case \"radio\":\r\n                    oldValue = action.value ?? \"\";\r\n                    break;\r\n                case \"checkbox\":\r\n                    oldValue = action.value ?? false;\r\n                    break;\r\n            }\r\n            action.trigger(oldValue, newValue);\r\n            this.setActionValue(name, newValue);\r\n            /*action.value = newValue;\r\n            \r\n            const actionElements = this._actionElements[actionIndex];\r\n            if (actionElements) {\r\n                switch (type) {\r\n                    case \"radio\":\r\n                        actionElements.forEach((actionElement_i) => {\r\n                            if (actionElement_i.type == \"radio\") {\r\n                                actionElement_i.checked = (actionElement_i.value == newValue);\r\n                            }\r\n                            else if (actionElement_i.type == \"select\") {\r\n                                actionElement_i.value = newValue;\r\n                            }\r\n                        });\r\n                        break;\r\n                    case \"checkbox\":\r\n                        actionElements.forEach((actionElement_i) => {\r\n                            actionElement_i.checked = newValue;\r\n                        });\r\n                        break;\r\n                }\r\n            }*/\r\n        }\r\n    }\r\n\r\n    public setCheckboxActionValue(name: string, checked: boolean): void {\r\n        this.setActionValue(name, checked);\r\n    }\r\n\r\n    public setRadioActionValue(name: string, value: string): void {\r\n        this.setActionValue(name, value);\r\n    }\r\n\r\n    public setActionValue(name: string, value?: any): void {\r\n        const actionIndex = this._actions.findIndex(\r\n            action_i => action_i.name == name\r\n        );\r\n        if (actionIndex > -1) {\r\n            const action = this._actions[actionIndex];\r\n            const {type, key} = action;\r\n            action.value = value;\r\n            if (key) {\r\n                localStorage.setItem(key, value);\r\n            }\r\n            \r\n            const actionElements = this._actionElements[actionIndex];\r\n            if (actionElements) {\r\n                switch (type) {\r\n                    case \"radio\":\r\n                        actionElements.forEach((actionElement_i) => {\r\n                            if (actionElement_i.type == \"radio\") {\r\n                                actionElement_i.checked = (actionElement_i.value == value);\r\n                            }\r\n                            else if (actionElement_i.type == \"select\") {\r\n                                actionElement_i.value = value;\r\n                            }\r\n                        });\r\n                        break;\r\n                    case \"checkbox\":\r\n                        actionElements.forEach((actionElement_i) => {\r\n                            actionElement_i.checked = value;\r\n                        });\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public registerActionElement(name: string, element: HTMLEActionElement): void {\r\n        const actionIndex = this._actions.findIndex(action_i => action_i.name == name);\r\n        if (actionIndex > -1) {\r\n            const elements = this._actionElements[actionIndex];\r\n            if (elements) {\r\n                if (!elements.includes(element)) {\r\n                    elements.push(element);\r\n                }\r\n            }\r\n            else {\r\n                this._actionElements[actionIndex] = [element];\r\n            }\r\n\r\n            const action = this._actions[actionIndex];\r\n            const {type, value, checked} = action;\r\n            switch (type) {\r\n                case \"radio\":\r\n                    if (element.type == \"radio\") {\r\n                        element.checked = (element.value == value!);\r\n                    }\r\n                    else if (element.type == \"select\") {\r\n                        element.value = value!;\r\n                    }\r\n                    break;\r\n                case \"checkbox\":\r\n                    element.checked = checked!;\r\n                    break;\r\n            }\r\n\r\n            const hotkey = this._hotkeys[actionIndex];\r\n            if (hotkey) {\r\n                element.hotkey = hotkey.toString();\r\n            }\r\n        }\r\n    }\r\n\r\n    public unregisterActionElement(name: string, element: HTMLEActionElement): void {\r\n        const actionIndex = this._actions.findIndex(action_i => action_i.name == name);\r\n        if (actionIndex > -1) {\r\n            const elements = this._actionElements[actionIndex];\r\n            if (elements) {\r\n                const elementIndex = elements.findIndex(element_i => element_i == element);\r\n                if (elementIndex > -1) {\r\n                    elements.copyWithin(elementIndex, elementIndex + 1);\r\n                    elements.length--;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar Editor: EditorConstructor = EditorBase;"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","slotsMap","WeakMap","slotsObserver","MutationObserver","mutationsList","forEach","mutation","target","type","HTMLElement","slotReferences","slotRef_i","widget","element","slot","slottedCallback","deref","widgetsMap","attributesObserver","attributeName","oldValue","attributeChangedCallback","getAttribute","WidgetFactory","constructor","this","create","Proxy","apply","thisArg","argumentsList","Reflect","observedSlots","Array","isArray","map","slotName_i","slotName","slotElement","slot_i","observe","childList","slotReference","WeakRef","push","set","observedAttributes","attributes","attributeFilter","attributeOldValue","Error","widgets","Map","ModelChangeRecordBase","init","changeType","propertyName","newValue","removedIndex","removedItems","ModelNodesList","insertedIndex","insertedItems","sortedIndices","PROPERTY_CHANGE","LIST_REMOVE","LIST_INSERT","LIST_SORT","ModelChangeRecord","items","slice","length","item","index","values","ModelEventBase","ModelEventTargetAccessor","setCurrentTarget","event","currentTarget","setTarget","ModelEvent","ModelNodeBase","receiveEvent","callbacks","callback_i","addEventListener","callback","removeEventListener","callbackIndex","findIndex","splice","delete","dispatchEvent","super","setParent","parentNode","isCyclicReference","ancestorNode","TypeError","beginChanges","endChanges","getRecords","property","records","record","ModelNodeRecordsAccessor","triggerChange","node","handleRecord","ModelNode","ModelProperty","ModelObjectPropertiesAccessor","getProperty","setProperty","ModelObjectBase","ModelObject","ModelList","item_i","fromIndex","indexOf","sort","compareFunction","indexedItems","i","indexedItem_a","indexedItem_b","indexedItem_i","prepend","_items","append","insert","Math","abs","remove","clear","removedItem_i","reference","options","properties","propertiesFilter","subtree","filter","record_i","includes","ModelChangeObserver","references","listener","bind","unobserve","disconnect","camelToTrain","str","replace","toLowerCase","AttributeProperty","toString","defaultValue","observed","writable","Boolean","hasAttribute","setAttribute","removeAttribute","val","JSON","parse","stringify","Number","parseFloat","String","CustomElement","elementCtor","name","customElements","define","Widget","subtreeNodes","childNodes","childNodesCount","childIndex","child","fragment","nodes","document","createDocumentFragment","tagName","dataset","children","listeners","createElement","keys","attributeValue","toggleAttribute","elementDataset","datasetEntry_i","from","entries","name_i","listener_i","slotted","NodeList","reactiveElementsMap","reactiveElementsFinalizationRegistry","FinalizationRegistry","heldValue","model","reactiveElement","reactiveElementsMapEntry","reactiveElementsArray","reactiveElementsPropertyObserver","reactiveElement_i","elementRef","react","register","observerOptions","concat","property_i","Set","reactiveChildElementsMap","reactiveChildElementsFinalizationRegistry","list","reactiveChildElement","reactiveChildrenElementsMapEntry","reactiveChildElementsArray","reactiveChildElementsObserver","range","listLength","reactiveChildElements_i","parentRef","mapping","placeholder","parent","firstChild","childrenCount","removeChild","insertedItemsArray","before","removedCount","createRange","removeEndIndex","setStartBefore","setEndAfter","deleteContents","childrenArray","index_i","reactiveChildElements","reactiveChildElementsMapEntry","areAttributesMatching","referenceAttributeType","referenceAttributeName","referenceAttributeValue","RegExp","test","ViewBase","setModel","renderLight","renderShadow","refresh","shadowRoot","shadow","replaceChildren","light","View","menuItemWidget","class","role","tabindex","cloneNode","button","hasIcon","hasArrow","checkbox","radio","menu","submenu","keyshortcut","checked","label","disabled","setKeyShortcut","setChecked","setExpanded","setType","setLabel","setName","setValue","setDisabled","hasChildMenu","some","childNode_i","classList","contains","getMenu","querySelector","getKeyShortcut","keyshortcutsPart","labelPart","after","textContent","getLabel","getType","types","type_i","typesFeatures","iconPartTemplate","arrowPartTemplate","oldType","add","iconPart","arrowPart","getValue","getName","getChecked","getDisabled","getExpanded","toggle","force","expand","collapse","targetItem","closest","style","menuStyle","top","itemTop","bottom","itemBottom","left","itemLeft","right","itemRight","getBoundingClientRect","width","menuWidth","height","menuHeight","scrollY","scrollX","window","clientWidth","clientHeight","body","overflowX","overflowY","closestMenu","closestMenuTop","closestMenuLeft","menuComputedStyle","getComputedStyle","paddingTop","paddingBottom","menuPaddingTop","menuPaddingBottom","menuWidget","createTreeWalker","NodeFilter","SHOW_ELEMENT","contextual","setContextual","positionContextual","x","y","getContextual","querySelectorAll","FILTER_ACCEPT","FILTER_SKIP","FILTER_REJECT","menuitem_i","find","walker","currentNode","lastChild","previousSibling","nextSibling","async","delay","Promise","resolve","reject","timeout","setTimeout","clearTimeout","then","targetMenu","error","radio_i","relatedTarget","nearestItem","activeItem","focus","preventScroll","stopPropagation","preventDefault","composedPath","target_i","catch","clientX","clientY","intersectsWithMouse","containsRelatedTarget","toolbarItemWidget","pressed","undefined","setPressed","getTitle","setTitle","getPressed","setActive","getActive","treeItemWidget","group","draggable","setDraggable","setSelected","setPosInSet","getPosInSet","posInSet","parseInt","e","setDropTarget","getDropTarget","getDraggable","Event","bubbles","getSelected","setLevel","getLevel","getPropertyValue","content","shiftKey","ctrlKey","treeWidget","tree","multisectable","setMultiSelectable","child_i","selectedItems","beginSelection","endSelection","getMultiSelectable","dropTargetItem","to","position","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","nextItem","DOCUMENT_POSITION_PRECEDING","previousItem","selected","tabIndex","expanded","nextNode","lastItem","targetTree","blur","relatedTargetRoot","getRootNode","relatedTargetHost","ShadowRoot","host","firstItem","parentItem","click","TreeModel","childItems","flattenItems","sortFunction","item_a","item_b","localeCompare","flatMap","treeItem_i","of","getItemByUri","uri","itemsCount","uriLength","itemUri","itemUriLength","startsWith","charAt","flattenedInsertedItems","insertedItem_i","flattenedRemovedItems","TreeItemList","show","hide","display","result","reduce","console","log","removedItemsGroups","TreeItemModel","list_i","children_i","childCount","visibility","TreeViewBase","attachShadow","mode","getTreeElement","getTreeItemElement","getDragImageElement","treeElement","dragstart","drop","contextmenu","keydown","rel","href","hidden","treeItemElement","treeitem","badge","toolbar","visibilityItem","dragImageElement","span","dataTransfer","selectedElements","selectedCount","selectedUris","element_i","uri_i","_","uris","uri_j","selectedUrisString","join","lastUri","dropEffect","setData","dragImage","setDragImage","targetUri","targetItemModel","transferedUris","getData","split","transferedItems","targetType","targetParentItem","targetList","sameLabelIndex","item_j","confirm","copyWithin","newElements","itemsList","count","close","TreeView","HTMLEActionElementBase","trigger","enable","disable","Key","KeyModifier","MouseButton","HTMLEActionElement","shadowTemplate","HTMLEGridCellElementBase","HTMLEGridCellElement","HTMLEGridRowGroupElementBase","assignedElements","posinset","HTMLEGridRowGroupElement","HTMLEMenuItemElementBase","part","selector","propertyKey","getter","withinShadowRoot","HTMLEMenuItemElement","EMenuItem","assign","title","HTMLEMenuItemGroupElementBase","toggleTimeouts","HTMLEMenuItemGroupElement","EMenuItemGroup","radios","HTMLEMenuElementBase","activeIndex","root","previousNode","HTMLEMenuElement","EMenu","HTMLEGridRowElementBase","cells","HTMLEGridCellCollection","cell_i","HTMLEGridRowElement","HTMLEGridBodyElement","namedItem","HTMLEGridRowCollection","HTMLEGridBodyElementBase","rows","HTMLEGridElementBase","clearSelection","selectedCells","selectedRows","toIndex","min","max","nextVisibleRow","previousVisibleRow","selectedCell_i","selectedRow_i","row_i","cell","activeCell","active","closestRow","row","activeRow","cellsWalker","rowsWalker","closestRowCells","cellIndex","previousRow","previousRowCells","nextRow","nextRowCells","selectby","targetCell","targetRow","lastSelectedCell","lastSelectedRow","firstRow","firstCell","lastRow","lastCell","previousCell","nextCell","topCell","bottomCell","HTMLEGridHeadElementBase","HTMLEMenuBarElementBase","Element","isExpanded","HTMLEMenuButtonElementBase","HTMLEMenuButtonElement","EMenuButton","HTMLEOptionElementBase","HTMLEOptionElement","HTMLEOptionGroupElementBase","HTMLEOptionGroupElement","HTMLESelectElementBase","matchingOption","option","selectedIndex","activeOption","descriptionPart","description","selectedOption","valuePart","optionsStyle","selectBottom","selectLeft","previousOption","nextOption","firstOption","lastOption","keyLength","keyCode","charCodeAt","optionsArray","firstMatchIndex","option_i","nextMatchIndex","matchIndex","default","slottedKeyboardListeners","slottedTriggerListeners","HTMLESelectElement","HTMLEToolBarItemElementBase","menubutton","select","selectValue","HTMLEToolBarItemElement","EToolBarItem","HTMLEToolBarItemGroupElementBase","HTMLEToolBarItemGroupElement","HTMLEToolBarElementBase","HTMLEToolBarElement","HTMLETabPanelElementBase","HTMLETabPanelElement","HTMLETabElementBase","connectedCallback","panel","getElementById","controls","CustomEvent","detail","tab","HTMLETabElement","HTMLETabListElementBase","tabs","focusTabAt","activeTab","activateTab","targetIndex","thisTab","thisTabIndex","HTMLETreeItemGroupElementBase","HTMLETreeItemElement","level","closestItem","matches","parentElement","HTMLETreeItemGroupElement","HTMLETreeItemElementBase","HTMLETreeElementBase","getElementsByTagName","nextVisibleItem","previousVisibleItem","selectedItem_i","droptarget","HTMLEListItemElementBase","HTMLSpanElement","HTMLEListItemElement","HTMLEListItemGroupElementBase","HTMLEListItemGroupElement","HTMLEListElementBase","lastSelectedItem","HTMLEListElement","HTMLEDraggableElementBase","disconnectedCallback","referee","thisRefIndex","getReference","HTMLEDraggableElement","HTMLEDragzoneElementBase","selectDraggable","selectedDraggables","unselectDraggable","draggables","elem","thisSelectedDraggable","dragged","id","thisDraggedDraggable","firstIndex","direction","sign","startRangeIndex","endRangeIndex","thisDraggable","HTMLEDragzoneElement","HTMLEDropzoneElementBase","droptest","appendAreaPart","removeDraggables","dragovered","dropIndex","dragzoneId","dragzone","selectedDraggable","HTMLEDropzoneElement","addDraggables","placeholderPart","dataTransferSuccess","newDraggables","insertionPosition","multiple","newDraggable","insertAdjacentElement","appendChild","replaceChild","action","once","predicate","toRemove","atPosition","HTMLEDialogElementBase","handleEvent","cancel","open","HTMLEHandleElementBase","pointerId","releasePointerCapture","setPointerCapture","targetComputedStyle","movementX","movementY","rectWidth","rectHeight","outerElement","outerRectLeft","outerRectRight","outerRectTop","outerRectBottom","newLeft","trunc","newTop","HTMLEHeightSashElementBase","rootNode","requestAnimationFrame","growdir","newHeight","computedNewHeight","HTMLEImportElementBase","src","outerHTML","fetch","response","ok","text","statusText","barShadowTemplate","circleShadowTemplate","HTMLELoaderElementBase","promise","finally","commonStyle","barStyle","circleStyle","HTMLEWidthSashElementBase","setWidth","newWidth","menubar","listItemWidget","setOrientation","getOrientation","targetToolbar","gridCellWidget","getHeaders","setHeaders","gridRowWidget","headers","grid","setSelectBy","getSelectBy","targetGrid","multiselectable","scope","header","optionWidget","comboBoxWidget","combobox","targetCombobox","addedNodes","box","targetOption","ListModel","getItemByIndex","ListItemList","ListItemModel","ListViewBase","getListElement","getListItemElement","listElement","listItemElement","toolbaritem","ListView","GridModel","columns","getColumnByName","column_i","sortByColumn","column","sortOrder","sortorder","row_1","row_2","cell_1","extract","cell_2","GridColumnModel","filters","GridRowModel","age","GridViewBase","getGridElement","setColumnDelegate","delegate","setCellDelegate","getRowElement","getColumnHeaderElement","getColumnDataElements","input","setSearchFilter","rowElement","filter_i","gridElement","addDisplayFilter","removeDisplayFilter","displayFilters","filterIndex","every","resizable","columnHeaderElement","removeProperty","maxWidth","sortRadioItem_i","resize","gridRowElement","HTMLInputElement","targetColumn","GridView","main","treeView","treeModel","aLabel","bLabel","listView","gridView","sortable","menuView","change","comboBoxTarget","_actions","_actionElements","_hotkeys","_pairs","_pairsListeners","_actionsObserver","_actionsObserverCallback","registerActionElement","removedNodes","unregisterActionElement","setup","hotkey_i","executeButtonAction","executeCheckboxAction","executeRadioAction","registerButtonAction","registerAction","registerRadioAction","registerCheckboxAction","hotkey","localStorage","setItem","executeAction","newChecked","actionIndex","action_i","setActionValue","setCheckboxActionValue","setRadioActionValue","actionElements","actionElement_i","elements","elementIndex"],"sourceRoot":""}