{"version":3,"file":"main.js","mappings":"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","sources":["webpack://main/webpack/bootstrap","webpack://main/webpack/runtime/define property getters","webpack://main/webpack/runtime/hasOwnProperty shorthand","webpack://main/webpack/runtime/make namespace object","webpack://main/./src/models/Model.ts","webpack://main/./src/elements/Snippets.ts","webpack://main/./src/elements/Element.ts","webpack://main/./src/elements/containers/trees/TreeItemGroup.ts","webpack://main/./src/elements/containers/trees/TreeItem.ts","webpack://main/./src/elements/containers/trees/Tree.ts","webpack://main/./src/views/View.ts","webpack://main/./src/views/TreeView.ts","webpack://main/./src/elements/containers/actions/Action.ts","webpack://main/./src/Input.ts","webpack://main/./src/elements/containers/grid/GridCell.ts","webpack://main/./src/elements/containers/grid/GridRowGroup.ts","webpack://main/./src/elements/containers/menus/MenuItem.ts","webpack://main/./src/elements/containers/menus/MenuItemGroup.ts","webpack://main/./src/elements/containers/menus/Menu.ts","webpack://main/./src/elements/containers/grid/GridRow.ts","webpack://main/./src/elements/containers/grid/GridCellCollection.ts","webpack://main/./src/elements/containers/grid/GridRowCollection.ts","webpack://main/./src/elements/containers/grid/GridBody.ts","webpack://main/./src/elements/containers/grid/GridHead.ts","webpack://main/./src/elements/containers/grid/Grid.ts","webpack://main/./src/elements/containers/menus/MenuItemCollection.ts","webpack://main/./src/elements/containers/menus/MenuBar.ts","webpack://main/./src/elements/containers/menus/MenuButton.ts","webpack://main/./src/elements/controls/forms/Option.ts","webpack://main/./src/elements/controls/forms/OptionGroup.ts","webpack://main/./src/elements/controls/forms/OptionCollection.ts","webpack://main/./src/elements/controls/forms/Select.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItem.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItemGroup.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItemCollection.ts","webpack://main/./src/elements/containers/toolbars/ToolBar.ts","webpack://main/./src/elements/containers/tabs/TabPanel.ts","webpack://main/./src/elements/containers/tabs/Tab.ts","webpack://main/./src/elements/containers/tabs/TabList.ts","webpack://main/./src/elements/containers/lists/ListItem.ts","webpack://main/./src/elements/containers/lists/ListItemGroup.ts","webpack://main/./src/elements/containers/lists/List.ts","webpack://main/./src/elements/controls/draggable/Draggable.ts","webpack://main/./src/elements/controls/draggable/Dragzone.ts","webpack://main/./src/elements/controls/draggable/Dropzone.ts","webpack://main/./src/elements/controls/dialogs/Dialog.ts","webpack://main/./src/elements/utils/Handle.ts","webpack://main/./src/elements/utils/HeightSash.ts","webpack://main/./src/elements/utils/Import.ts","webpack://main/./src/elements/utils/Loader.ts","webpack://main/./src/elements/utils/WidthSash.ts","webpack://main/./src/observers/AttributeMixinsObserver.ts","webpack://main/./src/views/ListView.ts","webpack://main/./src/views/GridView.ts","webpack://main/./src/views/widgets/Widget.ts","webpack://main/./src/views/widgets/MenuWidget.ts","webpack://main/./src/views/widgets/MenuItemWidget.ts","webpack://main/./main.ts","webpack://main/./src/Editor.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export { ModelChangeRecord };\r\nexport { ModelEvent };\r\nexport { ModelNode };\r\nexport { ModelObject };\r\nexport { ModelProperty };\r\nexport { ModelList };\r\nexport { ModelChangeObserverOptions };\r\nexport { ModelChangeObserver };\r\n\r\ninterface ModelChangeRecordConstructor {\r\n    readonly prototype: ModelChangeRecord;\r\n    new(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ): ModelChangeRecord;\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\ninterface ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly changeType: number;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\nclass ModelChangeRecordBase implements ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList;\r\n    readonly changeType: number;\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n\r\n    constructor(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ) {\r\n        this.target = init.target;\r\n        this.changeType = init.changeType;\r\n        this.propertyName = init.propertyName ?? null;\r\n        this.oldValue = init.oldValue ?? void 0;\r\n        this.newValue = init.newValue ?? void 0;\r\n        this.removedIndex = init.removedIndex ?? 0;\r\n        this.removedItems = new ModelNodesList(init.removedItems ?? []);\r\n        this.insertedIndex = init.insertedIndex ?? 0;\r\n        this.insertedItems = new ModelNodesList(init.insertedItems ?? []);\r\n        this.sortedIndices = init.sortedIndices ?? [];\r\n    }\r\n\r\n    static get PROPERTY_CHANGE(): number {\r\n        return 1;\r\n    }\r\n\r\n    static get LIST_REMOVE(): number {\r\n        return 2;\r\n    }\r\n\r\n    static get LIST_INSERT(): number {\r\n        return 3;\r\n    }\r\n\r\n    static get LIST_SORT(): number {\r\n        return 4;\r\n    }\r\n\r\n    get PROPERTY_CHANGE(): number {\r\n        return ModelChangeRecordBase.PROPERTY_CHANGE;\r\n    }\r\n\r\n    get LIST_REMOVE(): number {\r\n        return ModelChangeRecordBase.LIST_REMOVE;\r\n    }\r\n\r\n    get LIST_INSERT(): number {\r\n        return ModelChangeRecordBase.LIST_INSERT;\r\n    }\r\n\r\n    get LIST_SORT(): number {\r\n        return ModelChangeRecordBase.LIST_SORT;\r\n    }\r\n}\r\n\r\nvar ModelChangeRecord: ModelChangeRecordConstructor = ModelChangeRecordBase;\r\n\r\ninterface ModelNodesListConstructor {\r\n    readonly prototype: ModelNodesList;\r\n    new(items: any[]): ModelNodesList;\r\n}\r\n\r\ninterface ModelNodesList {\r\n    get length(): number;\r\n    item(index: number): ModelNode | null;\r\n    values(): IterableIterator<ModelNode>;\r\n}\r\n\r\nclass ModelNodesListBase implements ModelNodesList {\r\n    #items: ModelNode[];\r\n\r\n    constructor(items: ModelNode[]) {\r\n        this.#items = items.slice();\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    item(index: number): ModelNode | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    values(): IterableIterator<ModelNode> {\r\n        return this.#items.values();\r\n    }\r\n}\r\n\r\nvar ModelNodesList: ModelNodesListConstructor = ModelNodesListBase;\r\n\r\ninterface ModelEventConstructor {\r\n    readonly prototype: ModelEvent;\r\n    new(type: string): ModelEvent;\r\n}\r\n\r\ninterface ModelEvent {\r\n    readonly type: string;\r\n    readonly currentTarget: ModelEventTarget | null;\r\n    readonly target: ModelEventTarget | null;\r\n}\r\n\r\nclass ModelEventBase implements ModelEvent {\r\n    readonly type: string;\r\n\r\n    #currentTarget: ModelEventTarget | null;\r\n    #target: ModelEventTarget | null;\r\n\r\n    constructor(type: string) {\r\n        this.type = type;\r\n        this.#currentTarget = null;\r\n        this.#target = null;\r\n    }\r\n\r\n    get currentTarget(): ModelEventTarget | null {\r\n        return this.#currentTarget;\r\n    }\r\n\r\n    get target(): ModelEventTarget | null {\r\n        return this.#target;\r\n    }\r\n\r\n    static ModelEventTargetAccessor? = new class ModelEventTargetAccessor {\r\n        setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#currentTarget = currentTarget;\r\n            }\r\n        }\r\n\r\n        setTarget(event: ModelEvent, target: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#target = target;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface ModelEventTargetAccessor {\r\n    setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void;\r\n    setTarget(event: ModelEvent, target: ModelEventTarget): void;\r\n}\r\n\r\nvar ModelEventTargetAccessor: ModelEventTargetAccessor = ModelEventBase.ModelEventTargetAccessor!;\r\ndelete ModelEventBase.ModelEventTargetAccessor;\r\n\r\nvar ModelEvent: ModelEventConstructor = ModelEventBase;\r\n\r\ninterface ModelEventTargetConstructor {\r\n    readonly prototype: ModelEventTarget;\r\n    new(): ModelEventTarget;\r\n}\r\n\r\ninterface ModelEventTarget {\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    dispatchEvent(event: ModelEvent): void;\r\n    receiveEvent(event: ModelEvent): void;\r\n}\r\n\r\nclass ModelEventTargetBase implements ModelEventTarget {\r\n    #callbacks: Map<string, ((event: ModelEvent) => void)[]>;\r\n\r\n    constructor() {\r\n        this.#callbacks = new Map();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        const {type} = event;\r\n        const callbacks = this.#callbacks.get(type);\r\n        ModelEventTargetAccessor.setCurrentTarget(event, this);\r\n        if (callbacks) {\r\n            callbacks.forEach((callback_i) => {\r\n                callback_i(event);\r\n            });\r\n        }\r\n    }\r\n\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            callbacks.push(callback);\r\n        }\r\n        else {\r\n            this.#callbacks.set(type, [callback]);\r\n        }\r\n    }\r\n\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            const callbackIndex = callbacks.findIndex(\r\n                callback_i => callback_i == callback\r\n            );\r\n            if (callbackIndex > -1) {\r\n                callbacks.splice(callbackIndex, 1);\r\n            }\r\n            if (callbacks.length == 0) {\r\n                this.#callbacks.delete(type);\r\n            }\r\n        }\r\n    }\r\n\r\n    dispatchEvent(event: ModelEvent): void {\r\n        ModelEventTargetAccessor.setTarget(event, this);\r\n        this.receiveEvent(event);\r\n    }\r\n}\r\n\r\nvar ModelEventTarget: ModelEventTargetConstructor = ModelEventTargetBase;\r\n\r\ninterface ModelNodeConstructor {\r\n    readonly prototype: ModelNode;\r\n    new(): ModelNode;\r\n}\r\n\r\ninterface ModelNode extends ModelEventTarget {\r\n    readonly parentNode: ModelNode | null;\r\n    setParent(parentNode: ModelNode | null): void;\r\n    getRecords(): ModelChangeRecord[];\r\n    beginChanges(): void;\r\n    endChanges(): void;\r\n}\r\n\r\ninterface ModelNodeRecordsAccessor {\r\n    triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void;\r\n    handleRecord(node: ModelNode, record: ModelChangeRecord): void;\r\n}\r\n\r\nclass ModelNodeBase extends ModelEventTargetBase implements ModelNode {\r\n    #parentNode: ModelNode | null;\r\n    #records: ModelChangeRecord[];\r\n    #isRecording: boolean;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#parentNode = null;\r\n        this.#records = [];\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    get parentNode(): ModelNode | null {\r\n        return this.#parentNode;\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        if (parentNode !== null) {\r\n            let isCyclicReference = parentNode == this;\r\n            let {parentNode: ancestorNode} = parentNode;\r\n            while (!isCyclicReference && ancestorNode !== null) {\r\n                ({parentNode: ancestorNode} = ancestorNode);\r\n                isCyclicReference = ancestorNode == this;\r\n            }\r\n            if (!isCyclicReference) {\r\n                this.#parentNode = parentNode;\r\n            }\r\n            else {\r\n                throw new TypeError(\"Failed to set parent on ModelNode: circular reference detected in the hierarchy.\");\r\n            }\r\n        }\r\n        else {\r\n            this.#parentNode = null;\r\n        }\r\n    }\r\n    \r\n    beginChanges(): void {\r\n        this.#isRecording = true;\r\n    }\r\n\r\n    endChanges(): void {\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        this.#records.splice(0);\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    getRecords(): ModelChangeRecord[] {\r\n        return this.#records.slice();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        super.receiveEvent(event);\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            parentNode.receiveEvent(event);\r\n        }\r\n    }\r\n\r\n    #triggerChange(property: string, oldValue: any, newValue: any): void {\r\n        const records = this.#records;\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.PROPERTY_CHANGE,\r\n            propertyName: property,\r\n            oldValue, newValue\r\n        });\r\n        records.push(record);\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        records.splice(0);\r\n    }\r\n\r\n    #handleRecord(record: ModelChangeRecord): void {\r\n        this.#records.push(record);\r\n        if (!this.#isRecording) {\r\n            this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n            this.#records.splice(0);\r\n        }\r\n    }\r\n\r\n    static ModelNodeRecordsAccessor? = new class ModelNodeRecordsAccessor {\r\n        triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#triggerChange(property, oldValue, newValue);\r\n            }\r\n        }\r\n\r\n        handleRecord(node: ModelNode, record: ModelChangeRecord): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#handleRecord(record);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelNodeRecordsAccessor: ModelNodeRecordsAccessor = ModelNodeBase.ModelNodeRecordsAccessor!;\r\ndelete ModelNodeBase.ModelNodeRecordsAccessor;\r\n\r\nvar ModelNode: ModelNodeConstructor = ModelNodeBase;\r\n\r\ninterface ModelPropertyDecorator {\r\n    (\r\n        init?: {\r\n            type: typeof String | typeof Number | typeof Boolean | typeof Date | typeof Object\r\n        }\r\n    ): <Model extends ModelObject>(target: Model, property: string) => void;\r\n}\r\n\r\nconst ModelProperty: ModelPropertyDecorator = function(\r\n    init?: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Date | typeof Object\r\n    }\r\n) {\r\n    return (\r\n        target: ModelObject, property: string\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        /*const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n        if (Array.isArray(observedAttributes)) {\r\n            observedAttributes.push(property);\r\n        }\r\n        else {\r\n            Object.defineProperty(\r\n                constructor, \"observedAttributes\", {\r\n                    value: [property],\r\n                    writable: false\r\n                }\r\n            );\r\n        }*/\r\n        const setter = function(this: ModelObject, value: any) {\r\n            const oldValue = ModelObjectPropertiesAccessor.getProperty(this, property);\r\n            ModelObjectPropertiesAccessor.setProperty(this, property, value);\r\n            if (value !== oldValue) {\r\n                ModelNodeRecordsAccessor.triggerChange(this, property, oldValue, value);\r\n            }\r\n            return true;\r\n        };\r\n        const getter = function(this: ModelObject) {\r\n            return ModelObjectPropertiesAccessor.getProperty(this, property);\r\n        };\r\n        Object.defineProperty(prototype, property, {\r\n            set: setter,\r\n            get: getter,\r\n            enumerable: true\r\n        });\r\n    }\r\n}\r\n\r\ninterface ModelObjectConstructor {\r\n    readonly prototype: ModelObject;\r\n    new(): ModelObject;\r\n}\r\n\r\ninterface ModelObject extends ModelNode {}\r\n\r\ninterface ModelObjectPropertiesAccessor {\r\n    setProperty(node: ModelNode, property: string, value: any): void;\r\n    getProperty(node: ModelNode, property: string,): any;\r\n}\r\n\r\nclass ModelObjectBase extends ModelNodeBase implements ModelObject {\r\n    #properties: Map<string, any>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#properties = new Map();\r\n    }\r\n\r\n    static ModelObjectPropertiesAccessor? = new class ModelPropertiesAccessor {\r\n        setProperty(node: ModelObject, property: string, value: any): void {\r\n            if (node instanceof ModelObjectBase) {\r\n                node.#properties.set(property, value);\r\n            }\r\n        }\r\n\r\n        getProperty(node: ModelObject, property: string): any {\r\n            if (node instanceof ModelObjectBase) {\r\n                return node.#properties.get(property);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelObjectPropertiesAccessor: ModelObjectPropertiesAccessor = ModelObjectBase.ModelObjectPropertiesAccessor!;\r\ndelete ModelObjectBase.ModelObjectPropertiesAccessor;\r\n\r\nvar ModelObject: ModelObjectConstructor = ModelObjectBase;\r\n\r\ninterface ModelListConstructor {\r\n    readonly prototype: ModelList;\r\n    new<Model extends ModelNode>(): ModelList<Model>;\r\n    new<Model extends ModelNode>(items: Model[]): ModelList<Model>;\r\n}\r\n\r\ninterface ModelList<Model extends ModelNode = ModelNode> extends ModelNode {\r\n    readonly parentNode: ModelNode | null;\r\n    readonly length: number;\r\n    index(items: Model): number;\r\n    index(items: Model, fromIndex: number): number;\r\n    get(index: number): Model | null;\r\n    values(): IterableIterator<Model>;\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void;\r\n    insert(index: number, ...items: Model[]): void;\r\n    prepend(...items: Model[]): void;\r\n    append(...items: Model[]): void;\r\n    remove(item: Model): void;\r\n    clear(): void;\r\n}\r\n\r\nclass ModelListBase<Model extends ModelNode = ModelNode> extends ModelNodeBase implements ModelList<Model> {\r\n    #items: Model[];\r\n\r\n    constructor()\r\n    constructor(items: Model[])\r\n    constructor(items?: Model[]) {\r\n        super();\r\n        this.#items = items?.slice() ?? [];\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        super.setParent(parentNode);\r\n        this.#items.forEach((item_i) => {\r\n            item_i.setParent(parentNode);\r\n        });\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    get(index: number): Model | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    index(item: Model, fromIndex?: number): number {\r\n        return this.#items.indexOf(item, fromIndex)\r\n    }\r\n\r\n    values(): IterableIterator<Model> {\r\n        return this.#items.values();\r\n    }\r\n\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void {\r\n        const items = this.#items;\r\n        const indexedItems = items.map(\r\n            (item_i, i) => {\r\n                return {\r\n                    item: item_i,\r\n                    index: i\r\n                };\r\n            }\r\n        );\r\n        indexedItems.sort(\r\n            (indexedItem_a, indexedItem_b) => {\r\n                return compareFunction(\r\n                    indexedItem_a.item, indexedItem_b.item\r\n                )\r\n            }\r\n        );\r\n        this.#items = indexedItems.map(indexedItem_i => indexedItem_i.item);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_SORT,\r\n            sortedIndices: indexedItems.map(indexedItem_i => indexedItem_i.index)\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    prepend(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.splice(0, 0, ...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: 0,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    append(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.push(...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: length,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    insert(index: number, ...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const positiveIndex = Math.abs(index);\r\n        if (positiveIndex <= length) {\r\n            if (index >= 0) {\r\n                const {parentNode} = this;\r\n                items.forEach(item_i => {\r\n                    item_i.setParent(parentNode);\r\n                });\r\n                if (index < length) {\r\n                    _items.splice(index, 0, ...items);\r\n                }\r\n                else {\r\n                    _items.push(...items);\r\n                }\r\n            }\r\n            else if (index < 0) {\r\n                index = length - index;\r\n                const {parentNode} = this;\r\n                if (parentNode) {\r\n                    items.forEach(item_i => {\r\n                        item_i.setParent(parentNode);\r\n                    });\r\n                }\r\n                _items.splice(index, 0, ...items);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_INSERT,\r\n                insertedIndex: index,\r\n                insertedItems: items.slice()\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    remove(item: Model): void {\r\n        const _items = this.#items;\r\n        const index = _items.indexOf(item);\r\n        if (index > -1) {\r\n            const item = _items.splice(index, 1)[0];\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                item.setParent(null);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: index,\r\n                removedItems: [item]\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    clear(): void {\r\n        const items = this.#items;\r\n        const {length} = items;\r\n        if (length > 0) {\r\n            const removedItems = items.splice(0);\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                removedItems.forEach((removedItem_i) => {\r\n                    removedItem_i.setParent(null);\r\n                });\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: 0,\r\n                removedItems: removedItems\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n};\r\n\r\nvar ModelList: ModelListConstructor = ModelListBase!;\r\n\r\ninterface ModelChangeObserverConstructor {\r\n    readonly prototype: ModelChangeObserver;\r\n    new(callback: (records: ModelChangeRecord[]) => void): ModelChangeObserver;\r\n}\r\n\r\ninterface ModelChangeObserver {\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void;\r\n    unobserve(node: ModelNode): void;\r\n    disconnect(): void;\r\n}\r\n\r\ntype ModelChangeObserverOptions = {\r\n    properties?: boolean;\r\n    propertiesFilter?: string[];\r\n    childList?: boolean;\r\n    subtree?: boolean;\r\n}\r\n\r\nclass ModelChangeObserverBase implements ModelChangeObserver {\r\n    #callback: (records: ModelChangeRecord[]) => void;\r\n    #records: ModelChangeRecord[];\r\n    #disconnected: boolean;\r\n\r\n    #references: WeakMap<ModelNode, {\r\n        listener: (event: ModelEvent) => void,\r\n        options: ModelChangeObserverOptions\r\n    }>;\r\n\r\n    constructor(callback: (records: ModelChangeRecord[]) => void) {\r\n        this.#callback = callback;\r\n        this.#records = [];\r\n        this.#disconnected = false;\r\n        this.#references = new WeakMap();\r\n    }\r\n\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void {\r\n        this.#disconnected = false;\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (!reference) {\r\n            const listener = this.#handleModelEvent.bind(this);\r\n            node.addEventListener(\"modelchange\", listener);\r\n            reference = {listener, options};\r\n            references.set(node, reference);\r\n        }\r\n        else {\r\n            references.set(node, reference);\r\n        }\r\n    }\r\n\r\n    unobserve(node: ModelNode): void {\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (reference) {\r\n            const {listener} = reference;\r\n            node.removeEventListener(\"modelchange\", listener);\r\n        }\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#records.splice(0);\r\n        this.#disconnected = true;\r\n    }\r\n\r\n    #trigger(): void {\r\n        const records = this.#records.splice(0);\r\n        if (records.length > 0) {\r\n            this.#callback(records);\r\n        }\r\n    }\r\n\r\n    #handleModelEvent(event: ModelEvent): void {\r\n        if (!this.#disconnected) {\r\n            const {target, currentTarget} = event;\r\n            const reference = this.#references.get(<ModelNode>currentTarget);\r\n            if (reference) {\r\n                const {options} = reference;\r\n                const {properties, propertiesFilter, childList, subtree} = options;\r\n                if (subtree) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n                else if (target == currentTarget) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelChangeObserver: ModelChangeObserverConstructor = ModelChangeObserverBase;","export { getPropertyFromPath };\r\nexport { setPropertyFromPath };\r\nexport { snakeToCamel };\r\nexport { camelToSnake };\r\nexport { trainToCamel };\r\nexport { camelToTrain };\r\n\r\nfunction getPropertyFromPath(src: object, path: string): any {\r\n  const props = path.split(\".\");\r\n  let obj: {[key: string]: any} | undefined  = src;\r\n  props.forEach((prop) => {\r\n    if (prop.includes(\"[\")) {\r\n      const index = parseInt(prop.substring(prop.indexOf(\"[\") + 1, prop.indexOf(\"]\")));\r\n      if (Number.isNaN(index)) {\r\n        console.error(`Wrong indexed path: ${prop}`);\r\n      }\r\n      prop = prop.substring(0, prop.indexOf(\"[\"));\r\n      if (typeof obj == \"object\" && prop in obj && Array.isArray(obj[prop])) {\r\n        obj = obj[prop][index];\r\n      }\r\n    }\r\n    else if (typeof obj == \"object\" && prop in obj) {\r\n      obj = obj[prop];\r\n    }\r\n    else {\r\n      obj = void 0;\r\n    }\r\n  });\r\n  return obj;\r\n}\r\n\r\nfunction setPropertyFromPath(src: object, path: string, value: any): object {\r\n  const props = path.split(\".\");\r\n  let obj: {[key: string]: any} = src;\r\n  if (src == null) {\r\n    console.error(\"Source data can't be null\");\r\n  }\r\n  props.forEach((prop, idx) => {\r\n    if (prop.includes(\"[\")) {\r\n      const index = parseInt(prop.substring(prop.indexOf(\"[\") + 1, prop.indexOf(\"]\")));\r\n      if (Number.isNaN(index)) {\r\n        console.error(`Wrong indexed path: ${prop}`);\r\n      }\r\n      prop = prop.substring(0, prop.indexOf(\"[\"));\r\n      if (!Array.isArray(obj[prop])) {\r\n        obj[prop] = [];\r\n      }\r\n      if (idx == props.length - 1) {\r\n        obj[prop][index] = value;\r\n      }\r\n      else {\r\n        if (typeof obj[prop][index] !== \"object\") {\r\n          obj[prop][index] = {}\r\n        }\r\n        obj = obj[prop][index];\r\n      }\r\n    }\r\n    else {\r\n      if (idx == props.length - 1) {\r\n        obj[prop] = value;\r\n      }\r\n      else {\r\n        if (typeof obj[prop] !== \"object\") {\r\n          obj[prop] = {}\r\n        }\r\n        obj = obj[prop];\r\n      }\r\n    }\r\n  });\r\n  return src;\r\n}\r\n\r\nfunction snakeToCamel(str: string) {\r\n  return str.split('_').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToSnake(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '_').toLowerCase();\r\n}\r\n\r\nfunction trainToCamel(str: string) {\r\n  return str.split('-').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToTrain(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '-').toLowerCase();\r\n}","import { ModelList, ModelNode, ModelChangeRecord, ModelChangeObserver, ModelChangeObserverOptions } from \"../models/Model\";\r\nimport { camelToTrain } from \"./Snippets\";\r\n\r\nexport { subtreeNodes };\r\nexport { ancestorNodes };\r\nexport { CustomElement };\r\nexport { Collection };\r\nexport { QueryProperty };\r\nexport { QueryAllProperty };\r\nexport { AttributeProperty };\r\nexport { reactiveElement };\r\nexport { reactiveChildElements };\r\nexport { element };\r\nexport { Fragment };\r\nexport { TextNode };\r\nexport { AttributeMutationMixin };\r\nexport { AttributeType };\r\nexport { areAttributesMatching };\r\nexport { AttributeMutationMixinBase };\r\nexport { trimMultilineIndent };\r\nexport { Stylesheet };\r\n\r\ninterface AttributePropertyDecorator {\r\n    (\r\n        init: {\r\n            type: typeof String;\r\n            observed?: boolean;\r\n            defaultValue?: string | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Number;\r\n            observed?: boolean;\r\n            defaultValue?: number | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Boolean;\r\n            observed?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Object;\r\n            observed?: boolean;\r\n            defaultValue?: any | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n}\r\n\r\nconst AttributeProperty: AttributePropertyDecorator = function(\r\n    init: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Object;\r\n        observed?: boolean;\r\n        defaultValue?: string | number | any | null;\r\n    }\r\n) {\r\n    return <E extends HTMLElement>(\r\n        target: E, property: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = property.toString();\r\n        const attributeName = camelToTrain(propertyName);\r\n        const defaultValue = init.defaultValue ?? null;\r\n        const observed = init.observed ?? false;\r\n        if (observed) {\r\n            const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n            if (Array.isArray(observedAttributes)) {\r\n                observedAttributes.push(attributeName);\r\n            }\r\n            else {\r\n                Object.defineProperty(\r\n                    constructor, \"observedAttributes\", {\r\n                        value: [attributeName],\r\n                        writable: false\r\n                    }\r\n                );\r\n            }\r\n        }\r\n        const {type} = init;\r\n        switch (type) {\r\n            case Boolean: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        return this.hasAttribute(attributeName);\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value) {\r\n                            this.setAttribute(attributeName, \"\");\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Object: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? JSON.parse(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, JSON.stringify(value));\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Number: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? parseFloat(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case String:\r\n            default: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? val : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n    \r\nfunction Stylesheet(text: string): CSSStyleSheet {\r\n    const stylesheet = new CSSStyleSheet();\r\n    (stylesheet as any).replaceSync(text);\r\n    return stylesheet;\r\n}\r\n\r\nfunction trimMultilineIndent(text: string): string {\r\n    const newlineIndex = text.indexOf(\"\\n\");\r\n    text = text.substring(newlineIndex + 1);\r\n    const indentMatch = text.match(/^[\\s]*/);\r\n    if (indentMatch) {\r\n        const indent = text.substring(0, indentMatch[0].length);\r\n        text = text.replaceAll(indent, \"\").trimEnd();\r\n    }\r\n    return text;\r\n}\r\n\r\ninterface CustomElementDecorator {\r\n    (init: {\r\n        name: string;\r\n        options?: ElementDefinitionOptions\r\n    }): <C extends CustomElementConstructor>(elementCtor: C) => C;\r\n}\r\n\r\nconst CustomElement: CustomElementDecorator = function(init: {\r\n    name: string;\r\n    options?: ElementDefinitionOptions\r\n}) {\r\n    return <C extends CustomElementConstructor>(\r\n        elementCtor: C\r\n    ) => {\r\n        return registerCustomElement(elementCtor, init);\r\n    }\r\n}\r\n\r\nconst registerCustomElement = function<C extends CustomElementConstructor>(\r\n    elementCtor: C,\r\n    init: {\r\n        name: string;\r\n        options?: ElementDefinitionOptions\r\n    }): C {\r\n    const {name, options} = init;\r\n\r\n    if (!customElements.get(name)) {\r\n        customElements.define(\r\n            name,\r\n            elementCtor,\r\n            options\r\n        );\r\n    }\r\n\r\n    return elementCtor;\r\n}\r\n\r\nfunction *subtreeNodes(node: Node): Generator<Node> {\r\n    yield node;\r\n    const childNodes = node.childNodes;\r\n    const childNodesCount = childNodes.length;\r\n    let childIndex = 0;\r\n    while (childIndex < childNodesCount) {\r\n        const child = childNodes.item(childIndex);\r\n        if (child !== null) {\r\n            yield * subtreeNodes(child);\r\n        }\r\n        childIndex++;\r\n    }\r\n}\r\n\r\nfunction *ancestorNodes(node: Node): Generator<Node> {\r\n    const {parentNode} = node;\r\n    if (parentNode) {\r\n        yield parentNode;\r\n        yield *ancestorNodes(parentNode);\r\n    }\r\n}\r\n\r\ninterface QueryPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryProperty: QueryPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = propertyKey.toString();\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return this.shadowRoot!.querySelector(selector);\r\n        } : function(this: HTMLElement) {\r\n            return this.querySelector(selector);\r\n        }\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\ninterface QueryAllPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryAllProperty: QueryAllPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = propertyKey.toString();\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return Array.from(this.shadowRoot!.querySelectorAll(selector));\r\n        } : function(this: HTMLElement) {\r\n            return Array.from(this.querySelectorAll(selector));\r\n        };\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\nfunction Fragment(...nodes: (Node | string)[]): DocumentFragment {\r\n    const fragment = document.createDocumentFragment();\r\n    fragment.append(...nodes);\r\n    return fragment;\r\n}\r\n\r\nfunction TextNode(text: string): Node {\r\n    return document.createTextNode(text);\r\n}\r\n\r\ntype IfEquals<X, Y, A = X, B = never> =\r\n  (<T>() => T extends X ? 1 : 2) extends\r\n  (<T>() => T extends Y ? 1 : 2) ? A : B;\r\n\r\ntype WritableKeys<T> = {\r\n  [P in keyof T]-?: IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, P, never>\r\n}[keyof T];\r\n\r\ntype ReadonlyKeys<T> = {\r\n  [P in keyof T]-?: IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, never, P>\r\n}[keyof T];\r\n\r\ninterface HTMLInit<E extends HTMLElement> {\r\n    options?: ElementCreationOptions,\r\n    properties?: Partial<Pick<E, WritableKeys<E>>>,\r\n    part?: string[],\r\n    exportParts?: string[],\r\n    attributes?: {[name: string]: number | string | boolean},\r\n    style?: {\r\n        [property: string]: string | [string, string]\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    children?: (Node | string)[] | NodeList | ReactiveChildElements,\r\n    eventListeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\ninterface HTMLInitMap {\r\n    \"template\": HTMLTemplateInit;\r\n}\r\n\r\ninterface HTMLTemplateInit extends HTMLInit<HTMLTemplateElement> {\r\n    content?: (Node | string)[] | NodeList;\r\n}\r\n\r\nfunction element<E extends HTMLElementTagNameMap[K], K extends keyof HTMLInitMap>(\r\n    tagName: K, init?: HTMLInitMap[K]): E;\r\nfunction element<E extends HTMLElementTagNameMap[K], K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLInit<E>): E;\r\nfunction element(\r\n    tagName: string, init?: HTMLInit<HTMLElement>): HTMLElement;\r\nfunction element<K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLInit<HTMLElementTagNameMap[K]>): HTMLElementTagNameMap[K] {\r\n    if (init) {\r\n        const {options, properties, part, exportParts, attributes, dataset, children, eventListeners, style} = init;\r\n        const element = document.createElement(tagName, options);\r\n        if (options) {\r\n            const {is: isBuiltinElement} = options;\r\n            if (isBuiltinElement) {\r\n                element.setAttribute(\"is\", isBuiltinElement)\r\n            }\r\n        }\r\n        if (properties) {\r\n            const keys = <(keyof Partial<Pick<HTMLElementTagNameMap[K], WritableKeys<HTMLElementTagNameMap[K]>>>)[]>Object.keys(properties);\r\n            keys.forEach((key_i) => {\r\n                const value = properties[key_i];\r\n                if (typeof properties[key_i] !== \"undefined\") {\r\n                    Object.assign(\r\n                        element, {\r\n                            [key_i]: value\r\n                        }\r\n                    );\r\n                }\r\n            });\r\n        }\r\n        if (properties) {\r\n            const keys = <(keyof Partial<Pick<HTMLElementTagNameMap[K], WritableKeys<HTMLElementTagNameMap[K]>>>)[]>Object.keys(properties);\r\n            keys.forEach((key_i) => {\r\n                const value = properties[key_i];\r\n                if (typeof properties[key_i] !== \"undefined\") {\r\n                    Object.assign(\r\n                        element, {\r\n                            [key_i]: value\r\n                        }\r\n                    );\r\n                }\r\n            });\r\n        }\r\n        if (part) {\r\n            const {part: elementPart} = element;\r\n            part.forEach((part) => {\r\n                elementPart.add(part);\r\n            });\r\n        }\r\n        if (exportParts) {\r\n            element.setAttribute(\"exportparts\", exportParts.join(\", \"));\r\n        }\r\n        if (attributes) {\r\n            Object.keys(attributes).forEach((attributeName) => {\r\n                const attributeValue = attributes[attributeName];\r\n                if (typeof attributeValue == \"boolean\") {\r\n                    if (attributeValue) {\r\n                        element.setAttribute(camelToTrain(attributeName), \"\");\r\n                    }\r\n                }\r\n                else {\r\n                    element.setAttribute(camelToTrain(attributeName), attributeValue.toString());\r\n                }\r\n            });\r\n        }\r\n        if (style) {\r\n            const {style: elementStyle} = element;\r\n            Object.keys(style).forEach((property_i) => {\r\n                if (Array.isArray(style[property_i])) {\r\n                    elementStyle.setProperty(property_i, style[property_i][0], style[property_i][1]);\r\n                }\r\n                else {\r\n                    elementStyle.setProperty(property_i, <string>style[property_i]);\r\n                }\r\n            });\r\n        }\r\n        if (dataset) {\r\n            const {dataset: elementDataset} = element;\r\n            Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                elementDataset[datasetEntry_i] = dataset[datasetEntry_i].toString();\r\n            });\r\n        }\r\n        if (children) {\r\n            if (typeof children == \"function\") {\r\n                element.append(...children(element));\r\n            }\r\n            else {\r\n                element.append(...Array.from(children));\r\n            }\r\n        }\r\n        if (eventListeners) {\r\n            Object.entries(eventListeners).forEach(([name_i, listener_i]) => {\r\n                if (Array.isArray(listener_i)) {\r\n                    element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                }\r\n                else {\r\n                    element.addEventListener(name_i, listener_i);\r\n                }\r\n            });\r\n        }\r\n        switch (tagName) {\r\n            case \"template\":\r\n                const {content} = init as HTMLTemplateInit;\r\n                if (content) {\r\n                    (<HTMLTemplateElement>element).content.append(\r\n                        ...Array.from(content)\r\n                    );\r\n                }\r\n                break;\r\n        }\r\n        return element;\r\n    }\r\n    return document.createElement(tagName);\r\n}\r\n\r\ntype ReactiveElement = Element & {\r\n    _reactiveNodeAttributes: {\r\n        addReactListener: () => void;\r\n        removeReactListener: () => void;\r\n    }\r\n};\r\n\r\nconst reactiveElementsMap = new WeakMap<ModelNode, {\r\n    observerOptions: ModelChangeObserverOptions,\r\n    reactiveElementsArray: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }[]\r\n}>();\r\n\r\nconst reactiveElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    model: ModelNode,\r\n    reactiveElement: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }\r\n}) => {\r\n    const {model, reactiveElement} = heldValue;\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    if (reactiveElementsMapEntry) {\r\n        const {reactiveElementsArray} = reactiveElementsMapEntry;\r\n        reactiveElementsArray.splice(reactiveElementsArray.indexOf(reactiveElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveElementPropertyObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    records.forEach((record_i) => {\r\n        const {target, propertyName, oldValue, newValue} = record_i;\r\n        const {reactiveElementsArray} = reactiveElementsMap.get(target)!;\r\n        reactiveElementsArray.forEach((reactiveElement_i) => {\r\n            const {elementRef, react, properties} = reactiveElement_i;\r\n            const element = elementRef.deref();\r\n            if (element) {\r\n                if (properties.includes(propertyName!)) {\r\n                    react(element, propertyName!, oldValue, newValue);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveElement<M extends ModelNode, E extends Element, K extends string>(\r\n    model: M,\r\n    element: E,\r\n    properties: K[],\r\n    react: (element: E, property: K, oldValue: any, newValue: any) => void\r\n): E ;\r\nfunction reactiveElement<M extends ModelNode, E extends Element>(\r\n    model: M,\r\n    element: E,\r\n    properties: string[],\r\n    react: (element: E, property: string, oldValue: any, newValue: any) => void\r\n): E {\r\n    const elementRef = new WeakRef(element);\r\n    const reactiveElement = {elementRef, react, properties};\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    reactiveElementsFinalizationRegistry.register(element, {model, reactiveElement});\r\n    if (!reactiveElementsMapEntry) {\r\n        const observerOptions = {\r\n            properties: true,\r\n            propertiesFilter: properties\r\n        };\r\n        const reactiveElementsArray = [reactiveElement];\r\n        reactiveElementsMap.set(model, {observerOptions, reactiveElementsArray});\r\n        reactiveElementPropertyObserver.observe(model, observerOptions);\r\n    }\r\n    else {\r\n        const {reactiveElementsArray, observerOptions} = reactiveElementsMapEntry;\r\n        const {propertiesFilter} = observerOptions;\r\n        reactiveElementsArray.push(reactiveElement);\r\n        observerOptions.propertiesFilter = propertiesFilter ?\r\n            propertiesFilter.concat(properties.filter(\r\n                property_i => !propertiesFilter.includes(property_i)\r\n            )) : Array.from(new Set(properties));\r\n    }\r\n    properties.forEach((property_i) => {\r\n        if (property_i in model) {\r\n            const value = Reflect.get(model, property_i, model);\r\n            if (value !== void 0) {\r\n                react(element, <any>property_i, <any>void 0, value);\r\n            }\r\n        }\r\n    });\r\n    return element;\r\n}\r\n\r\ninterface ReactiveChildElements {\r\n    (parent: Node & ParentNode): (Node | string)[]\r\n}\r\n\r\nconst reactiveChildElementsMap = new WeakMap<ModelList, {\r\n    reactiveChildElementsArray: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }[]\r\n}>();\r\n\r\nconst reactiveChildElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    list: ModelList,\r\n    reactiveChildElement: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }\r\n}) => {\r\n    const {list, reactiveChildElement} = heldValue;\r\n    const reactiveChildrenElementsMapEntry = reactiveChildElementsMap.get(list);\r\n    if (reactiveChildrenElementsMapEntry) {\r\n        const {reactiveChildElementsArray} = reactiveChildrenElementsMapEntry;\r\n        reactiveChildElementsArray.splice(reactiveChildElementsArray.indexOf(reactiveChildElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveChildElementsObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    let range: null | Range = null;\r\n    Array.from(records.values()).forEach((record_i) => {\r\n        const {target} = record_i;\r\n        const list = <ModelList>target;\r\n        const {length: listLength} = list;\r\n        const {reactiveChildElementsArray} = reactiveChildElementsMap.get(list)!;\r\n        reactiveChildElementsArray.forEach((reactiveChildElements_i) => {\r\n            const {parentRef, mapping, placeholder} = reactiveChildElements_i;\r\n            const parent = parentRef.deref();\r\n            if (parent) {\r\n                const {firstChild, children} = parent;\r\n                const {length: childrenCount} = children;\r\n                if (placeholder && listLength > 0 && firstChild == placeholder) {\r\n                    parent.removeChild(placeholder);\r\n                }\r\n                const {changeType, LIST_INSERT, LIST_REMOVE, LIST_SORT} = record_i;\r\n                switch (changeType) {\r\n                    case LIST_INSERT: {\r\n                        const {insertedIndex, insertedItems} = record_i;\r\n                        const insertedItemsArray = Array.from(insertedItems.values())\r\n                            .map(item_i => mapping(item_i));\r\n                        const {length: childrenCount} = children;\r\n                        if (insertedIndex < childrenCount) {\r\n                            children[insertedIndex].before(...insertedItemsArray);\r\n                        }\r\n                        else {\r\n                            parent.append(...insertedItemsArray);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_REMOVE: {\r\n                        const {removedIndex, removedItems} = record_i;\r\n                        const {length: removedCount} = removedItems;\r\n                        range = range ?? document.createRange();\r\n                        const removeEndIndex = removedIndex + (removedCount - 1);\r\n                        if (removeEndIndex < childrenCount) {\r\n                            range.setStartBefore(children[removedIndex]);\r\n                            range.setEndAfter(children[removeEndIndex]);\r\n                            range.deleteContents();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_SORT: {\r\n                        const {sortedIndices} = record_i;\r\n                        const childrenArray = Array.from(children);\r\n                        parent.append(\r\n                            ...sortedIndices.filter(\r\n                                index_i => index_i < childrenCount\r\n                            ).map(\r\n                                index_i => childrenArray[index_i]\r\n                            )\r\n                        );\r\n                        break;\r\n                    }\r\n                }\r\n                if (listLength == 0 && placeholder) {\r\n                    parent.append(placeholder);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveChildElements<Model extends ModelNode>(\r\n    list: ModelList<Model>,\r\n    mapping: (item: Model) => Element,\r\n    placeholder?: Element\r\n): ReactiveChildElements {\r\n    return (parent: Node & ParentNode) => {\r\n        const parentRef = new WeakRef(parent);\r\n        const reactiveChildElementsMapEntry = reactiveChildElementsMap.get(list);\r\n        const reactiveChildElement = {parentRef, mapping, placeholder};\r\n        reactiveChildElementsFinalizationRegistry.register(parent, {list, reactiveChildElement});\r\n        if (!reactiveChildElementsMapEntry) {\r\n            const reactiveChildElementsArray = [reactiveChildElement];\r\n            reactiveChildElementsMap.set(list, {reactiveChildElementsArray});\r\n            reactiveChildElementsObserver.observe(list, {\r\n                childList: true\r\n            });\r\n        }\r\n        else {\r\n            const {reactiveChildElementsArray} = reactiveChildElementsMapEntry;\r\n            reactiveChildElementsArray.push(reactiveChildElement);\r\n        }\r\n        return list.length == 0 && placeholder ?\r\n            [placeholder] : Array.from(list.values()).map(mapping);\r\n    }\r\n}\r\n\r\ninterface Collection<E extends Element = Element> {\r\n    item(index: number): E | null;\r\n    namedItem(name: string): E | null;\r\n}\r\n\r\ninterface AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n    attach(element: Element): void;\r\n    detach(element: Element): void;\r\n}\r\n\r\ntype AttributeType = \"string\" | \"boolean\" | \"list\";\r\n\r\nfunction areAttributesMatching(\r\n    referenceAttributeType: AttributeType,\r\n    referenceAttributeName: string, referenceAttributeValue: string,\r\n    attributeName: string, attributeValue: string | null): boolean {\r\n    if (referenceAttributeName == attributeName) {\r\n        switch (referenceAttributeType) {\r\n            case \"boolean\":\r\n                return referenceAttributeValue == \"\" && attributeValue == \"\";\r\n            case \"string\":\r\n                return referenceAttributeValue !== \"\" && (referenceAttributeValue == attributeValue);\r\n            case \"list\":\r\n                return (referenceAttributeValue !== \"\" && attributeValue !== null) && new RegExp(`${referenceAttributeValue}\\s*?`, \"g\").test(attributeValue );\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nclass AttributeMutationMixinBase implements AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n\r\n    constructor(attributeName: string, attributeType: AttributeType = \"boolean\", attributeValue: string = \"\") {\r\n        this.attributeName = attributeName;\r\n        this.attributeType = attributeType;\r\n        this.attributeValue = attributeValue;\r\n    }\r\n\r\n    attach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n\r\n    detach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n}","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLETreeItemElement } from \"./TreeItem\";\r\n\r\nexport { HTMLETreeItemGroupElement };\r\n\r\ninterface HTMLETreeItemGroupElementConstructor {\r\n    readonly prototype: HTMLETreeItemGroupElement;\r\n    new(): HTMLETreeItemGroupElement;\r\n}\r\n\r\ninterface HTMLETreeItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitemgroup\": HTMLETreeItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-treeitemgroup\"\r\n})\r\nclass HTMLETreeItemGroupElementBase extends HTMLElement implements HTMLETreeItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    textContent: /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLETreeItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLETreeItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemGroupElement: HTMLETreeItemGroupElementConstructor = HTMLETreeItemGroupElementBase;","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\nimport { HTMLETreeElement } from \"./Tree\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeItemElement };\r\n\r\ninterface HTMLETreeItemElementConstructor {\r\n    readonly prototype: HTMLETreeItemElement;\r\n    new(): HTMLETreeItemElement;\r\n}\r\n\r\ninterface HTMLETreeItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly group: HTMLETreeItemGroupElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    expanded: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    level: number;\r\n    type: \"leaf\" | \"parent\";\r\n    toggle(force?: boolean): void;\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitem\": HTMLETreeItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-treeitem\"\r\n})\r\nclass HTMLETreeItemElementBase extends HTMLElement implements HTMLETreeItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get group(): HTMLETreeItemGroupElement | null {\r\n        return this.#group;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    expanded!: boolean;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number, observed: true})\r\n    level!: number;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"leaf\"})\r\n    type!: \"leaf\" | \"parent\";\r\n\r\n    #group: HTMLETreeItemGroupElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\", {\r\n            content: [\r\n                element(\"div\", {\r\n                    part: [\"content\"],\r\n                    children: [\r\n                        element(\"span\", {\r\n                            part: [\"arrow\"]\r\n                        }),\r\n                        element(\"slot\")\r\n                    ]\r\n                }),\r\n                element(\"slot\", {\r\n                    properties: {\r\n                        name: \"group\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.#group = null;\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        this.level = (() => {\r\n            let level = 0;\r\n            let {parentElement} = this;\r\n            while (parentElement instanceof HTMLETreeItemGroupElement) {\r\n                level++;\r\n                ({parentElement} = parentElement);\r\n                if (!(parentElement instanceof HTMLETreeItemElement)) {\r\n                    return level;\r\n                }\r\n                ({parentElement} = parentElement);\r\n            }\r\n            if (parentElement instanceof HTMLETreeElement) {\r\n                level++;\r\n            }\r\n            return level;\r\n        })();\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"expanded\": {\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const labelPart = this.shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"level\": {\r\n                this.style.setProperty(\"--level\", `${this.level}`);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        this.expanded = force ?? !this.expanded;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, shiftKey, ctrlKey} = event;\r\n        const {type} = this;\r\n        if (this == target && type == \"parent\" && !(shiftKey || ctrlKey)) {\r\n            this.toggle();\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"group\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#group = element instanceof HTMLETreeItemGroupElement ? element : null;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemElement: HTMLETreeItemElementConstructor = HTMLETreeItemElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLETreeItemElement } from \"./TreeItem\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeElement };\r\n\r\ninterface HTMLETreeElementConstructor {\r\n    readonly prototype: HTMLETreeElement;\r\n    new(): HTMLETreeElement;\r\n}\r\n\r\ninterface HTMLETreeElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLETreeItemElement>;\r\n    readonly activeItem: HTMLETreeItemElement | null;\r\n    readonly dropTargetItem: HTMLETreeItemElement | null;\r\n    droptarget: boolean;\r\n    name: string;\r\n    selectedItems(): HTMLETreeItemElement[];\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tree\": HTMLETreeElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-tree\"\r\n})\r\nclass HTMLETreeElementBase extends HTMLElement implements HTMLETreeElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLETreeItemElement>;\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLETreeItemElement | null {\r\n        return this.items.item(this.#activeIndex) ?? null;\r\n    }\r\n\r\n    get dropTargetItem(): HTMLETreeItemElement | null {\r\n        return this.items.item(this.#dropTargetIndex) ?? null;\r\n    }\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    #activeIndex: number;\r\n    #dropTargetIndex: number;\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        this.#dropTargetIndex = -1;\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.items = this.getElementsByTagName(\"e-treeitem\");\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this), true);\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    selectedItems(): HTMLETreeItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.#firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLETreeItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLETreeItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLETreeItemElement, to: HTMLETreeItemElement): HTMLETreeItemElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleItem = this.#nextItem(from);\r\n            while (nextVisibleItem && nextVisibleItem !== to) {\r\n                range.push(nextVisibleItem);\r\n                nextVisibleItem = this.#nextItem(nextVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleItem = this.#previousItem(from);\r\n            while (previousVisibleItem && previousVisibleItem !== to) {\r\n                range.push(previousVisibleItem);\r\n                previousVisibleItem = this.#previousItem(previousVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLETreeItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((item_i) => {\r\n            item_i.selected = false;\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLETreeItemElement | null): void {\r\n        const {activeItem, items} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = item;\r\n            item.active = true;\r\n            item.tabIndex = 0;\r\n            this.#activeIndex = Array.from(items).indexOf(item);\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n    \r\n    #setDropTargetItem(item: HTMLETreeItemElement | null): void {\r\n        const {dropTargetItem, items} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n            this.#dropTargetIndex = Array.from(items).indexOf(item);\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n            this.#dropTargetIndex = -1;\r\n        }\r\n    }\r\n\r\n    #firstItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousSibling = <HTMLETreeItemElement | null>walker.previousSibling();\r\n        return previousSibling ?\r\n            this.#deepestItem(previousSibling) :\r\n            <HTMLETreeItemElement | null>walker.parentNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const {type, expanded} = item;\r\n        return <HTMLETreeItemElement | null>(\r\n            type === \"leaf\" ?\r\n                walker.nextNode() :\r\n                expanded ?\r\n                    walker.nextNode() :\r\n                    walker.nextSibling() ??\r\n                    (walker.parentNode(), walker.nextSibling())\r\n        );\r\n    }\r\n\r\n    #deepestItem(item: HTMLETreeItemElement): HTMLETreeItemElement {\r\n        if (item.expanded) {\r\n            const walker = this.#walker;\r\n            const lastItem = <HTMLETreeItemElement>walker.lastChild();\r\n            if (lastItem) {\r\n                return this.#deepestItem(lastItem);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey} = event;\r\n        const selectedItems = this.selectedItems();\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            if (!shiftKey && !ctrlKey) {\r\n                this.#setSelection(target);\r\n            }\r\n            else if (ctrlKey) {\r\n                const {selected} = target;\r\n                if (selected) {\r\n                    target.blur();\r\n                }\r\n                (!selected) ?\r\n                    this.#addToSelection(target) :\r\n                    this.#removeFromSelection(target);\r\n                event.stopPropagation();\r\n            }\r\n            else if (shiftKey) {\r\n                const lastSelectedItem = selectedItems[selectedItems.length - 1];\r\n                if (lastSelectedItem) {\r\n                    const range = this.#getItemsRange(\r\n                        lastSelectedItem,\r\n                        target\r\n                    );\r\n                    if (range) {\r\n                        if (selectedItems.includes(target)) {\r\n                            this.#removeFromSelection(...range);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(...range);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.#setSelection(target);\r\n                }\r\n                event.stopPropagation();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const {type} = target;\r\n            if (type == \"parent\") {\r\n                target.toggle(true);\r\n            }\r\n            this.#setDropTargetItem(target);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!this.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        const {root} = walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? root, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? root, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(\r\n                                firstItem,\r\n                                this.#deepestItem(lastItem)\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    if (activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                    else {\r\n                        const walker = this.#walker;\r\n                        const parentItem = <HTMLETreeItemElement>walker.parentNode();\r\n                        if (parentItem) {\r\n                            parentItem.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    if (!activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.#setActiveItem(null);\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            this.#setActiveItem(target);\r\n            this.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLETreeItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLETreeItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLETreeElement: HTMLETreeElementConstructor = HTMLETreeElementBase;","import { ModelObject } from \"../models/Model\";\r\n\r\nexport { View };\r\n\r\ninterface View extends HTMLElement {\r\n    readonly model: ModelObject | null;\r\n    setModel(model: ModelObject): void;\r\n    renderShadow(): Node | undefined;\r\n    renderLight(): Node | undefined;\r\n    refresh(): void;\r\n}\r\n\r\ninterface ViewConstructor {\r\n    readonly prototype: View;\r\n    new(): View;\r\n}\r\n\r\nclass ViewBase extends HTMLElement implements View {\r\n    #model: ModelObject | null;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#model = null;\r\n    }\r\n\r\n    get model(): ModelObject | null {\r\n        return this.#model;\r\n    }\r\n    \r\n    setModel(model: ModelObject): void {\r\n        this.#model = model;\r\n        this.#render();            \r\n    }\r\n\r\n    renderLight(): Node | undefined {\r\n        return;\r\n    }\r\n\r\n    renderShadow(): Node | undefined {\r\n        return;\r\n    }\r\n\r\n    refresh(): void {\r\n        this.#render();\r\n    }\r\n\r\n    #render(): void {\r\n        const {shadowRoot} = this;\r\n        const shadow = this.renderShadow();\r\n        if (shadow) {\r\n            if (shadowRoot) {\r\n                shadowRoot.replaceChildren(shadow);\r\n            }\r\n        }\r\n        const light = this.renderLight();\r\n        if (light) {\r\n            this.replaceChildren(light);\r\n        }\r\n    }\r\n}\r\n\r\nvar View: ViewConstructor = ViewBase;","import { HTMLEToolBarElement } from \"../..\";\r\nimport { HTMLEToolBarItemElement } from \"../elements/containers/toolbars/ToolBarItem\";\r\nimport { HTMLETreeElement } from \"../elements/containers/trees/Tree\";\r\nimport { HTMLETreeItemElement } from \"../elements/containers/trees/TreeItem\";\r\nimport { element, reactiveChildElements, reactiveElement, CustomElement, Fragment, TextNode } from \"../elements/Element\";\r\nimport { ModelEvent, ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\n\r\nexport { TreeModel };\r\nexport { TreeItemModel };\r\nexport { TreeView };\r\n\r\nclass TreeModel extends ModelObject {\r\n    readonly items: ModelList<TreeItemModel>;\r\n    readonly childItems: ModelList<TreeItemModel>;\r\n    sortFunction: ((item_a: TreeItemModel, item_b: TreeItemModel) => number) | null;\r\n    \r\n    constructor()\r\n    constructor(init: {items: TreeItemModel[], sortFunction?: (item_a: TreeItemModel, item_b: TreeItemModel) => number})\r\n    constructor(init?: {items: TreeItemModel[], sortFunction?: (item_a: TreeItemModel, item_b: TreeItemModel) => number}) {\r\n        super();\r\n        const childItems = new ModelList(init?.items ?? []);\r\n        childItems.setParent(this);\r\n        this.childItems = childItems;\r\n        this.items = new ModelList(this.flattenItems());\r\n        this.sortFunction = init?.sortFunction ??\r\n            function(item_a: TreeItemModel, item_b: TreeItemModel) {\r\n                return item_a.label.localeCompare(item_b.label);\r\n            };\r\n        this.addEventListener(\"modelchange\", this.#handleModelChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleModelChangeEvent(event: ModelEvent): void {\r\n        const {target} = event;\r\n        const {items, sortFunction, flattenItems} = this;\r\n        if (target instanceof ModelList) {\r\n            const records = target.getRecords();\r\n            records.forEach((record_i) => {\r\n                const {insertedItems, removedItems} = record_i;\r\n                const flattenedInsertedItems = (<TreeItemModel[]>Array.from(insertedItems.values())).flatMap(\r\n                    insertedItem_i => Array.of(insertedItem_i, ...flattenItems.call(insertedItem_i))\r\n                );\r\n                const flattenedRemovedItems = (<TreeItemModel[]>Array.from(removedItems.values())).flatMap(\r\n                    removedItem_i => Array.of(removedItem_i, ...flattenItems.call(removedItem_i))\r\n                );\r\n                items.beginChanges();\r\n                items.append(...flattenedInsertedItems);\r\n                flattenedRemovedItems.forEach((removedItem_i) => items.remove(removedItem_i));\r\n                if (sortFunction) items.sort(sortFunction);\r\n                items.endChanges();\r\n            });\r\n        }\r\n    }\r\n\r\n    flattenItems(this: TreeModel | TreeItemModel): TreeItemModel[] {\r\n        const {childItems} = this;\r\n        return Array.from(childItems.values()).flatMap(\r\n            treeItem_i => Array.of(treeItem_i, ...TreeModel.prototype.flattenItems.call(treeItem_i))\r\n        );\r\n    }\r\n\r\n    getItemByUri(this: TreeModel | TreeItemModel, uri: string): TreeItemModel | null {\r\n        const {childItems} = this;\r\n        const {length: itemsCount} = childItems;\r\n        const {length: uriLength} = uri;\r\n        for (let i = 0; i < itemsCount; i++) {\r\n            const item_i = childItems.get(i)!;\r\n            const {uri: itemUri} = item_i;\r\n            const {length: itemUriLength} = itemUri;\r\n            if (uri.startsWith(itemUri)) {\r\n                if (uri.charAt(itemUriLength) == \"/\") {\r\n                    return TreeModel.prototype.getItemByUri.call(item_i, uri);\r\n                }\r\n                else if (itemUriLength == uriLength) {\r\n                    return item_i;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\ninterface TreeItem {\r\n    show(): void;\r\n    hide(): void;\r\n    display(): void;\r\n    remove(): void;\r\n}\r\n\r\nclass TreeItemList implements TreeItem {\r\n    #items: TreeItemModel[];\r\n\r\n    constructor(items: TreeItemModel[]) {\r\n        this.#items = items;\r\n    }\r\n\r\n    static from(items: TreeItemModel[]): TreeItemList {\r\n        return new TreeItemList(items);\r\n    }\r\n\r\n    static of(...items: TreeItemModel[]): TreeItemList {\r\n        return new TreeItemList(items);\r\n    }\r\n\r\n    show(): void {\r\n        console.log(this.#items);\r\n        this.#items.forEach(item_i => item_i.show());\r\n    }\r\n\r\n    hide(): void {\r\n        this.#items.forEach(item_i => item_i.hide());\r\n    }\r\n\r\n    display(): void {\r\n        const items = this.#items;\r\n        const result = items.reduce(\r\n            (result, item_i) => `${result} ${item_i.label}`, \"\"\r\n        );\r\n        console.log(result);\r\n    }\r\n\r\n    remove(): void {\r\n        const items = this.#items;\r\n        const removedItemsGroups = items.reduce((map, item_i) => {\r\n            const {parentNode} = item_i;\r\n            if (parentNode instanceof TreeItemModel || parentNode instanceof TreeModel) {\r\n                const {childItems} = parentNode;\r\n                const group = map.get(childItems);\r\n                if (group) group.push(item_i);\r\n                else map.set(childItems, [item_i]);\r\n            }\r\n            return map;\r\n        }, new Map<ModelList, TreeItemModel[]>());\r\n        Array.from(removedItemsGroups.entries()).forEach(\r\n            ([list_i, children_i]) => {\r\n                list_i.beginChanges();\r\n                children_i.forEach((child_i) => {\r\n                    \r\n                    list_i.remove(child_i);\r\n                });\r\n                list_i.endChanges();\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nclass TreeItemModel extends ModelObject implements TreeItem {\r\n    readonly childItems: ModelList<TreeItemModel>;\r\n    readonly type: \"leaf\" | \"parent\";\r\n    readonly label: string;\r\n\r\n    @ModelProperty(/*{type: Number}*/)\r\n    childCount: number;\r\n\r\n    @ModelProperty(/*{type: Boolean}*/)\r\n    visibility: boolean;\r\n\r\n    get uri(): string {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return `${parentNode.uri}/${this.label}`;\r\n        }\r\n        return this.label;\r\n    }\r\n\r\n    get parentItem(): TreeItemModel | null {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return parentNode;\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    constructor(init: {label: string, type: \"leaf\" | \"parent\", items?: TreeItemModel[]}) {\r\n        super();\r\n        const {label, type} = init;\r\n        const childItems = new ModelList(init.items ?? []);\r\n        childItems.setParent(this);\r\n        this.childItems = childItems;\r\n        this.label = label;\r\n        this.type = type;\r\n        this.childCount = childItems.length;\r\n        this.visibility = true;\r\n        this.addEventListener(\"modelchange\", this.#handleModelChangeEvent.bind(this));\r\n    }\r\n\r\n    show(): void {\r\n        this.visibility = true;\r\n    }\r\n\r\n    hide(): void {\r\n        this.visibility = false;\r\n    }\r\n\r\n    display(): void {\r\n        console.log(this.label);\r\n    }\r\n    \r\n    remove(): void {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel || parentNode instanceof TreeModel) {\r\n            const {childItems} = parentNode;\r\n            if (childItems) {\r\n                childItems.remove(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleModelChangeEvent(event: ModelEvent): void {\r\n        const {target} = event;\r\n        const {childItems} = this;\r\n        if (target == childItems) {\r\n            this.childCount = childItems.length;\r\n        }\r\n    }\r\n}\r\n\r\ninterface TreeViewConstructor {\r\n    readonly prototype: TreeView;\r\n    new(): TreeView;\r\n    new(model: TreeModel): TreeView;\r\n}\r\n\r\ninterface TreeView extends View {\r\n    model: TreeModel;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"v-tree\": TreeView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"v-tree\"\r\n})\r\nclass TreeViewBase extends View implements TreeView {\r\n    readonly model!: TreeModel;\r\n    #treeElement: WeakRef<HTMLETreeElement> | undefined;\r\n    #dragImagesElementsMap: WeakMap<TreeItemModel, WeakRef<Element>>;\r\n    #treeItemElementsMap: WeakMap<TreeItemModel, WeakRef<HTMLETreeItemElement>>;\r\n    \r\n    constructor()\r\n    constructor(model: TreeModel)\r\n    constructor(model?: TreeModel) {\r\n        super();\r\n        this.#treeItemElementsMap = new WeakMap();\r\n        this.#dragImagesElementsMap = new WeakMap();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.setModel(model ?? new TreeModel());\r\n    }\r\n\r\n    getTreeElement(): HTMLETreeElement | null {\r\n        return this.#treeElement?.deref() ?? null;\r\n    }\r\n\r\n    getTreeItemElement(model: TreeItemModel): HTMLETreeItemElement | null {\r\n        return this.#treeItemElementsMap.get(model)?.deref() ?? null;\r\n    }\r\n\r\n    getDragImageElement(model: TreeItemModel): Element | null {\r\n        return this.#dragImagesElementsMap.get(model)?.deref() ?? null;\r\n    }\r\n\r\n    selectedItems(): TreeItemModel[] {\r\n        const tree = this.getTreeElement();\r\n        if (tree) {\r\n            const {model} = this;\r\n            const selectedElements = tree.selectedItems();\r\n            return selectedElements.map(\r\n                item_i => <TreeItemModel>model.getItemByUri(item_i.dataset.uri!)\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    renderShadow(): Node {\r\n        const {model} = this;\r\n        const treeElement = element(\"e-tree\", {\r\n            properties: {\r\n                tabIndex: 0,\r\n            },\r\n            children: reactiveChildElements(\r\n                model.childItems, item => this.#renderTreeItem(item)\r\n            ),\r\n            eventListeners: {\r\n                dragstart: <EventListener>this.#handleDragStartEvent.bind(this),\r\n                drop: <EventListener>this.#handleDropEvent.bind(this),\r\n                contextmenu: <EventListener>this.#handleContextMenuEvent.bind(this),\r\n                keydown: <EventListener>this.#handleKeyDownEvent.bind(this)\r\n            }\r\n        });\r\n        this.#treeElement = new WeakRef(treeElement);\r\n        return Fragment(\r\n            element(\"link\", {\r\n                properties: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/main.css\"\r\n                }\r\n            }),\r\n            element(\"link\", {\r\n                properties: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/views/treeview.css\"\r\n                }\r\n            }),\r\n            treeElement,\r\n            element(\"div\", {\r\n                properties: {\r\n                    className: \"offscreen\",\r\n                    hidden: true\r\n                },\r\n                children: reactiveChildElements(model.items,\r\n                    item => this.#renderTreeItemDragImage(item)\r\n                )\r\n            })\r\n        );\r\n    }\r\n\r\n    #renderTreeItem(item: TreeItemModel): Element {\r\n        const treeItemElement = reactiveElement(\r\n            item,\r\n            element(\"e-treeitem\", {\r\n                properties: {\r\n                    tabIndex: -1,\r\n                    label: item.label,\r\n                    type: item.type,\r\n                    draggable: true\r\n                },\r\n                dataset: {\r\n                    uri: item.uri\r\n                },\r\n                children:\r\n                    ((item.type == \"parent\") ? [\r\n                        element(\"e-treeitemgroup\", {\r\n                            properties: {\r\n                                slot: \"group\"\r\n                            },\r\n                            children: reactiveChildElements(item.childItems,\r\n                                item => this.#renderTreeItem(item)\r\n                            )\r\n                        })\r\n                    ] : []).concat([\r\n                        element(\"span\", {\r\n                            properties: {\r\n                                className: \"label\"\r\n                            }\r\n                        })\r\n                    ]).concat((item.type == \"parent\") ? [\r\n                        element(\"span\", {\r\n                            properties: {\r\n                                className: \"badge\"\r\n                            }\r\n                        })\r\n                    ] : []).concat([\r\n                        element(\"e-toolbar\", {\r\n                            properties: {\r\n                                tabIndex: 0\r\n                            },\r\n                            children: [\r\n                                element(\"e-toolbaritem\", {\r\n                                    properties: {\r\n                                        name: \"visibility\",\r\n                                        type: \"checkbox\",\r\n                                        tabIndex: -1\r\n                                    },\r\n                                    eventListeners: {\r\n                                        trigger: () => {\r\n                                            item.visibility ?\r\n                                                item.hide() :\r\n                                                item.show();\r\n                                        }\r\n                                    }\r\n                                })\r\n                            ]\r\n                        })\r\n                    ])\r\n            }),\r\n            [\"label\", \"childCount\", \"visibility\"],\r\n            (treeitem, property, oldValue, newValue) => {\r\n                switch (property) {\r\n                    case \"label\":\r\n                        const label = treeitem.querySelector(\":scope > .label\");\r\n                        if (label) {\r\n                            label.textContent = newValue;\r\n                        }\r\n                        break;\r\n                    case \"childCount\":\r\n                        const badge = treeitem.querySelector(\":scope > .badge\");\r\n                        if (badge) {\r\n                            badge.textContent = `(${newValue})`;\r\n                        }\r\n                        break;\r\n                    case \"visibility\": {\r\n                        const toolbar = treeitem.querySelector<HTMLEToolBarElement>(\":scope > e-toolbar\");\r\n                        if (toolbar) {\r\n                            const visibilityItem = <HTMLEToolBarItemElement>toolbar.items.namedItem(\"visibility\");\r\n                            if (visibilityItem) {\r\n                                visibilityItem.title = newValue ? \"Hide\" : \"Show\";\r\n                                visibilityItem.checked = newValue;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        );\r\n        this.#treeItemElementsMap.set(item, new WeakRef(treeItemElement));\r\n        return treeItemElement;\r\n    }\r\n\r\n    #renderTreeItemDragImage(item: TreeItemModel): Element {\r\n        const dragImageElement = reactiveElement(\r\n            item,\r\n            element(\"span\", {\r\n                properties: {\r\n                    className: \"dragimage\"\r\n                }\r\n            }),\r\n            [\"label\"],\r\n            (span, property, oldValue, newValue) => {\r\n                span.textContent = newValue;\r\n            }\r\n        );\r\n        this.#dragImagesElementsMap.set(item, new WeakRef(dragImageElement));\r\n        return dragImageElement;\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const {model} = this;\r\n        if (currentTarget instanceof HTMLETreeElement && target instanceof HTMLETreeItemElement) {\r\n            const {dataTransfer} = event;\r\n            const selectedElements = currentTarget.selectedItems();\r\n            const {length: selectedCount} = selectedElements;\r\n            if (selectedCount > 0) {\r\n                const selectedUris = \r\n                    selectedElements\r\n                    .map((element_i) =>\r\n                        element_i.dataset.uri!\r\n                    )\r\n                    .filter(\r\n                        (uri_i, _, uris) => !uris.some(\r\n                            uri_j => uri_i.startsWith(`${uri_j}/`)\r\n                        )\r\n                    );\r\n                const selectedUrisString = selectedUris.join(\"\\n\");\r\n                const lastUri = selectedUris[selectedUris.length - 1];\r\n                const lastItem = model.getItemByUri(lastUri);\r\n                if (lastItem && dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", selectedUrisString);\r\n                    const dragImage = this.getDragImageElement(lastItem);\r\n                    if (dragImage) {\r\n                        dataTransfer.setDragImage(dragImage, -16, 0);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const {model} = this;\r\n        const {sortFunction} = model;\r\n        if (currentTarget instanceof HTMLETreeElement && target instanceof HTMLETreeItemElement) {\r\n            const {dataTransfer} = event;\r\n            if (dataTransfer) {\r\n                const targetUri = target.dataset.uri!;\r\n                const targetItem = model.getItemByUri(targetUri)!;\r\n                const transferedUris = dataTransfer.getData(\"text/plain\").split(\"\\n\");\r\n                const targetIsWithin = transferedUris.some(uri_i => targetUri.startsWith(`${uri_i}/`) || uri_i == targetUri);\r\n                if (!targetIsWithin) {\r\n                    const transferedItems = <TreeItemModel[]>transferedUris.map(\r\n                        uri_i => model.getItemByUri(uri_i)\r\n                    ).filter(\r\n                        item_i => item_i !== null\r\n                    );\r\n                    //TODO: handle items with same label (replace or cancel)\r\n                    const {type: targetType, parentItem: targetParentItem} = targetItem;\r\n                    const targetList = targetType == \"parent\" ?\r\n                        targetItem.childItems :\r\n                        targetParentItem ?\r\n                        targetParentItem.childItems :\r\n                        model.childItems;\r\n                    TreeItemList.from(transferedItems).remove();\r\n                    if (sortFunction) {\r\n                        targetList.beginChanges();\r\n                        targetList.append(...transferedItems);\r\n                        targetList.sort(sortFunction);\r\n                        targetList.endChanges();\r\n                    }\r\n                    else {\r\n                        targetList.insert(target.posinset, ...transferedItems);\r\n                    }\r\n                    const newElements = transferedItems.map(\r\n                        item_i => this.getTreeItemElement(item_i)!\r\n                    );\r\n                    currentTarget.beginSelection();\r\n                    newElements.forEach(\r\n                        (element_i) => {\r\n                            element_i.selected = true;\r\n                        }\r\n                    );\r\n                    currentTarget.endSelection();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        const {clientX, clientY, currentTarget, target} = event;\r\n        const {model} = this;\r\n        if (currentTarget instanceof HTMLETreeElement && target instanceof HTMLETreeItemElement) {\r\n            const activeItem = model.getItemByUri(target.dataset.uri!)!;\r\n            const menu = element(\"e-menu\", {\r\n                properties: {\r\n                    tabIndex: -1,\r\n                    contextual: true,\r\n                    contextX: clientX,\r\n                    contextY: clientY\r\n                },\r\n                children: [\r\n                    element(\"e-menuitemgroup\", {\r\n                        properties: {\r\n                            tabIndex: -1\r\n                        },\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                properties: {\r\n                                    tabIndex: -1,\r\n                                    textContent: \"Display\"\r\n                                },\r\n                                eventListeners: {\r\n                                    trigger: () => {\r\n                                        TreeItemList.from(\r\n                                            this.selectedItems()\r\n                                        ).display();\r\n                                    }\r\n                                }\r\n                            }),\r\n                            element(\"e-menuitem\", {\r\n                                properties: {\r\n                                    tabIndex: -1,\r\n                                    textContent: \"Delete\"\r\n                                },\r\n                                eventListeners: {\r\n                                    trigger: () => {\r\n                                        TreeItemList.from(\r\n                                            this.selectedItems()\r\n                                        ).remove();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    }),\r\n                    element(\"e-menuitemgroup\", {\r\n                        properties: {\r\n                            tabIndex: -1\r\n                        },\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                properties: {\r\n                                    tabIndex: -1,\r\n                                    type: \"checkbox\",\r\n                                    textContent: activeItem.visibility ? \"Hide\" : \"Show\"\r\n                                },\r\n                                eventListeners: {\r\n                                    trigger: () => {\r\n                                        const selectedItems = TreeItemList.from(\r\n                                            this.selectedItems()\r\n                                        );\r\n                                        activeItem.visibility ?\r\n                                            selectedItems.hide() :\r\n                                            selectedItems.show();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ],\r\n                eventListeners: {\r\n                    close: () => {\r\n                        target.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            });\r\n            document.body.append(menu);\r\n            menu.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        if (currentTarget instanceof HTMLETreeElement) {\r\n            switch (key) {\r\n                case \"Delete\": {\r\n                    TreeItemList.from(\r\n                        this.selectedItems()\r\n                    ).remove();\r\n                    event.preventDefault();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar TreeView: TreeViewConstructor = TreeViewBase;","import { AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEActionElement };\r\nexport { ActionType };\r\n\r\ninterface HTMLEActionElementConstructor {\r\n    readonly prototype: HTMLEActionElement;\r\n    new(): HTMLEActionElement;\r\n}\r\n\r\ninterface HTMLEActionElement extends HTMLElement {\r\n    name: string;\r\n    value: string;\r\n    checked: boolean;\r\n    type: string;\r\n    disabled: boolean;\r\n    hotkey: string;\r\n\r\n    trigger(): void;\r\n    enable(): void;\r\n    disable(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"trigger\": Event;\r\n    }\r\n}\r\n\r\ntype ActionType = \"button\" | \"checkbox\" | \"radio\" | \"select\";\r\n\r\nclass HTMLEActionElementBase extends HTMLElement implements HTMLEActionElement {\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    hotkey!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"button\"})\r\n    type!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    checked!: boolean;\r\n\r\n    trigger(): void {\r\n        if (!this.disabled) {\r\n            switch (this.type) {\r\n                case \"checkbox\":\r\n                    this.checked = !this.checked;\r\n                    break;\r\n                case \"radio\":\r\n                    this.checked = true;\r\n                    break;\r\n            }\r\n            this.dispatchEvent(new Event(\"trigger\", {\r\n                bubbles: true\r\n            }));\r\n        }\r\n    }\r\n\r\n    enable(): void {\r\n        this.disabled = false;\r\n    }\r\n\r\n    disable(): void {\r\n        this.disabled = true;\r\n    }\r\n}\r\n\r\nvar HTMLEActionElement: HTMLEActionElementConstructor = HTMLEActionElementBase;","export { Key };\r\nexport { KeyModifier };\r\nexport { HotKey };\r\nexport { MouseButton };\r\n\r\nenum Key {\r\n    A = \"a\",\r\n    B = \"b\",\r\n    C = \"c\",\r\n    D = \"d\",\r\n    E = \"e\",\r\n    F = \"f\",\r\n    G = \"g\",\r\n    H = \"h\",\r\n    I = \"i\",\r\n    J = \"j\",\r\n    K = \"k\",\r\n    L = \"l\",\r\n    M = \"m\",\r\n    O = \"o\",\r\n    P = \"p\",\r\n    Q = \"q\",\r\n    R = \"r\",\r\n    S = \"s\",\r\n    T = \"t\",\r\n    U = \"u\",\r\n    V = \"v\",\r\n    W = \"w\",\r\n    X = \"x\",\r\n    Y = \"y\",\r\n    Z = \"z\",\r\n    ENTER = \"Enter\",\r\n    BACKSPACE = \"Backspace\",\r\n    ARROW_DOWN = \"ArrowDown\",\r\n    ARROW_LEFT = \"ArrowLeft\",\r\n    ARROW_RIGHT = \"ArrowRight\",\r\n    ARROW_UP = \"ArrowUp\",\r\n    SHIFT = \"Shift\"\r\n}\r\n\r\nenum KeyModifier {\r\n    Alt = \"Alt\",\r\n    Control = \"Control\",\r\n    Shift = \"Shift\"\r\n}\r\n\r\nenum MouseButton {\r\n    LEFT = 1,\r\n    WHEEL = 2,\r\n    RIGHT = 3,\r\n    FORWARD = 4,\r\n    BACK = 5\r\n}\r\n\r\nclass HotKey {\r\n    readonly key: Key;\r\n    readonly mod1?: KeyModifier;\r\n    readonly mod2?: KeyModifier;\r\n\r\n    constructor(key: Key, mod1?: KeyModifier, mod2?: KeyModifier) {\r\n        this.key = key;\r\n        this.mod1 = mod1;\r\n        this.mod2 = mod2;\r\n    }\r\n\r\n    toString(): string {\r\n        return `${this.mod1 ? `${this.#modifierString(this.mod1)}+` : \"\"}${this.mod2 ? `${this.#modifierString(this.mod2)}+` : \"\"}${(this.key.length == 1) ? this.key.toUpperCase() : this.key}`;\r\n    }\r\n\r\n    test(event: KeyboardEvent): boolean {\r\n        return (!this.mod1 || this.#testModifier(this.mod1, event)) && (!this.mod2 || this.#testModifier(this.mod2, event)) && event.key == this.key;\r\n    }\r\n\r\n    #modifierString(mod: KeyModifier): string {\r\n        switch (mod) {\r\n            case KeyModifier.Control:\r\n                return \"Ctrl\";\r\n            default:\r\n                return mod;\r\n        }\r\n    }\r\n\r\n    #testModifier(mod: KeyModifier, event: KeyboardEvent): boolean {\r\n        switch (mod) {\r\n            case \"Alt\":\r\n                return event.altKey;\r\n            case \"Control\":\r\n                return event.ctrlKey;\r\n            case \"Shift\":\r\n                return event.shiftKey;\r\n            default:\r\n                return true;\r\n        }\r\n    }\r\n}","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\n\r\nexport { HTMLEGridCellElement };\r\n\r\ninterface HTMLEGridCellElementConstructor {\r\n    readonly prototype: HTMLEGridCellElement;\r\n    new(): HTMLEGridCellElement;\r\n}\r\n\r\ninterface HTMLEGridCellElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n    headers: string;\r\n    posinset: number;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridcell\": HTMLEGridCellElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridcell\"\r\n})\r\nclass HTMLEGridCellElementBase extends HTMLElement implements HTMLEGridCellElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    headers!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridCellElement: HTMLEGridCellElementConstructor = HTMLEGridCellElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\n\r\nexport { HTMLEGridRowGroupElement };\r\n\r\ninterface HTMLEGridRowGroupElementConstructor {\r\n    readonly prototype: HTMLEGridRowGroupElement;\r\n    new(): HTMLEGridRowGroupElement;\r\n}\r\n\r\ninterface HTMLEGridRowGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrowgroup\": HTMLEGridRowGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrowgroup\"\r\n})\r\nclass HTMLEGridRowGroupElementBase extends HTMLElement implements HTMLEGridRowGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    textContent: /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                            /*display: flex;\r\n                            flex-direction: column;*/\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowGroupElement: HTMLEGridRowGroupElementConstructor = HTMLEGridRowGroupElementBase;","import { CustomElement, AttributeProperty, QueryProperty, element } from \"../../Element\";\r\nimport { HTMLEActionElement } from \"../actions/Action\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\n\r\nexport { HTMLEMenuItemElement };\r\nexport { EMenuItem };\r\n\r\ninterface HTMLEMenuItemElementConstructor {\r\n    readonly prototype: HTMLEMenuItemElement;\r\n    new(): HTMLEMenuItemElement;\r\n}\r\n\r\ninterface HTMLEMenuItemElement extends HTMLEActionElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    active: boolean;\r\n    index: number;\r\n    expanded: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitem\": HTMLEMenuItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitem\"\r\n})\r\nclass HTMLEMenuItemElementBase extends HTMLEActionElement implements HTMLEMenuItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Number})\r\n    index!: number;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"button\", observed: true})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\", {\r\n            content: [\r\n                element(\"span\", {\r\n                    part: [\"content\"],\r\n                    children: [\r\n                        element(\"span\", {part: [\"icon\"]}),\r\n                        element(\"span\", {\r\n                            part: [\"label\"],\r\n                            children: [\r\n                                element(\"slot\")\r\n                            ]\r\n                        }),\r\n                        element(\"span\", {part: [\"arrow\"]})\r\n                    ]\r\n                }),\r\n                element(\"slot\", {\r\n                    properties: {\r\n                        name: \"menu\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n    \r\n    @QueryProperty({selector: \"e-menu[slot=menu]\"})\r\n    readonly menu!: HTMLEMenuElement | null;\r\n\r\n    toggle(force?: boolean): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                const expand = force ?? !expanded;\r\n                this.expanded = expand;\r\n                if (expand) {\r\n                    this.#positionMenu();\r\n                }\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {type} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (!this.expanded) {\r\n                    this.expanded = true;\r\n                    this.#positionMenu();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {type} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (this.expanded) {\r\n                    this.expanded = false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const {type} = this;\r\n            if (type == \"menu\") {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const closestMenu = this.closest(\"e-menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    const overflowX = itemRight + menuWidth - clientWidth;\r\n                    const overflowY = itemTop + menuHeight - clientHeight;\r\n                    menuStyle.setProperty(\"left\", `${\r\n                        overflowX > 0 ?\r\n                        itemLeft - menuWidth - closestMenuLeft :\r\n                        itemRight - closestMenuLeft\r\n                    }px`);\r\n                    const menuComputedStyle = window.getComputedStyle(menu);\r\n                    const {paddingTop, paddingBottom} = menuComputedStyle;\r\n                    const menuPaddingTop = parseFloat(paddingTop);\r\n                    const menuPaddingBottom = parseFloat(paddingBottom);\r\n                    menuStyle.setProperty(\"top\", `${\r\n                        overflowY > 0 ?\r\n                        itemBottom - menuHeight - closestMenuTop + menuPaddingBottom :\r\n                        itemTop - closestMenuTop - menuPaddingTop\r\n                    }px`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemElement: HTMLEMenuItemElementConstructor = HTMLEMenuItemElementBase;\r\n\r\ninterface EMenuItemConstructor {\r\n    readonly prototype: HTMLEMenuItemElement;\r\n    new(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    button(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    checkbox(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    radio(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    menu(init: {\r\n        name: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    submenu(init: {\r\n        name: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n}\r\n\r\nvar EMenuItem = <EMenuItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menu} = init;\r\n        if (menu) {\r\n            menu.slot = \"menu\";\r\n        }\r\n        return element(\"e-menuitem\", {\r\n            properties: {\r\n                tabIndex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type,\r\n                textContent: label\r\n            },\r\n            children: menu ? [menu] : void 0,\r\n            eventListeners: {\r\n                trigger: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemElement.prototype,\r\n        button(init: {\r\n            name: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menu(init: {\r\n            name: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"menu\"\r\n            });\r\n        },\r\n        submenu(init: {\r\n            name: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"submenu\"\r\n            });\r\n        }\r\n    }\r\n);","import { element, CustomElement, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuItemElement, EMenuItem } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuItemGroupElement };\r\nexport { EMenuItemGroup };\r\n\r\ninterface HTMLEMenuItemGroupElementConstructor {\r\n    readonly prototype: HTMLEMenuItemGroupElement;\r\n    new(): HTMLEMenuItemGroupElement;\r\n}\r\n\r\ninterface HTMLEMenuItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    label: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitemgroup\": HTMLEMenuItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitemgroup\"\r\n})\r\nclass HTMLEMenuItemGroupElementBase extends HTMLElement implements HTMLEMenuItemGroupElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    textContent: /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            flex-direction: column;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEMenuItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEMenuItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.index = i;\r\n        });\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\":\r\n                const label = this.shadowRoot.querySelector(\"[part=label]\");\r\n                if (label) {\r\n                    label.textContent = newValue;\r\n                }\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemGroupElement: HTMLEMenuItemGroupElementConstructor = HTMLEMenuItemGroupElementBase;\r\n\r\ninterface EMenuItemGroupConstructor {\r\n    readonly prototype: HTMLEMenuItemGroupElement;\r\n    new(init: {\r\n        name?: string;\r\n        items: HTMLEMenuItemElement[];\r\n    }): HTMLEMenuItemGroupElement;\r\n    radios(init: {name: string, items: {label: string, value: string}[]}): HTMLEMenuItemGroupElement;\r\n}\r\n\r\nvar EMenuItemGroup = <EMenuItemGroupConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string,\r\n        items: HTMLEMenuItemElement[]\r\n    }) {\r\n        const {name, items} = init;\r\n        return element(\"e-menuitemgroup\", {\r\n            properties: {\r\n                name: name\r\n            },\r\n            children: items\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemGroupElement.prototype,\r\n        radios: (init: {\r\n            name: string,\r\n            items: {\r\n                label: string,\r\n                value: string\r\n            }[]\r\n        }) => {\r\n            const {name, items} = init;\r\n            return element(\"e-menuitemgroup\", {\r\n                properties: {\r\n                    name: name\r\n                },\r\n                children: items.map(\r\n                    ({label, value}) => new EMenuItem({name, label, type: \"radio\", value})\r\n                )\r\n            });\r\n        }\r\n    }\r\n);","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuElement };\r\nexport { EMenu };\r\n\r\ninterface HTMLEMenuElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEMenuItemElement>;\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    contextual: boolean;\r\n    contextX: number;\r\n    contextY: number;\r\n}\r\n\r\ninterface HTMLEMenuElementConstructor {\r\n    readonly prototype: HTMLEMenuElement;\r\n    new(): HTMLEMenuElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menu\": HTMLEMenuElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar toggleTimeouts: WeakMap<HTMLEMenuItemElement, {clear(): void;}>;\r\n\r\n@CustomElement({\r\n    name: \"e-menu\"\r\n})\r\nclass HTMLEMenuElementBase extends HTMLElement implements HTMLEMenuElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEMenuItemElement>;\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        return this.items.item(this.#activeIndex);\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    contextual!: boolean;\r\n\r\n    @AttributeProperty({type: Number, defaultValue: 0})\r\n    contextX!: number;\r\n\r\n    @AttributeProperty({type: Number, defaultValue: 0})\r\n    contextY!: number;\r\n\r\n    #activeIndex: number;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\", {\r\n            content: [\r\n                element(\"slot\")\r\n            ]\r\n        });\r\n        toggleTimeouts = new WeakMap();\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        this.items = this.getElementsByTagName(\"e-menuitem\");\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"mouseout\", this.#handleMouseOutEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {contextual} = this;\r\n        if (contextual) {\r\n            this.#position();\r\n        }\r\n    }\r\n\r\n    #position(): void {\r\n        const {contextX, contextY} = this;\r\n        const {style} = this;\r\n        const {width: menuWidth, height: menuHeight} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        const left = contextX + scrollX;\r\n        const top = contextY + scrollY;\r\n        const {clientWidth, clientHeight} = document.body;\r\n        const overflowX = left + menuWidth - clientWidth;\r\n        const overflowY = top + menuHeight - clientHeight;\r\n        style.setProperty(\"left\", `${overflowX > 0 ? left - menuWidth : left}px`);\r\n        style.setProperty(\"top\", `${overflowY > 0 ? top - menuHeight : top}px`);\r\n    }\r\n\r\n    #collapseSubmenus(): void {\r\n        Array.from(this.items)\r\n            .forEach((item_i) => {\r\n                if (item_i.expanded) {\r\n                    item_i.collapse();\r\n                }\r\n            });\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextNode();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        return menu instanceof HTMLEMenuElementBase ?\r\n            menu.#firstItem() :\r\n            null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        const {activeItem, items} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n            this.#activeIndex = Array.from(items).indexOf(item);\r\n        }\r\n        if (item == null) {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {items} = this;\r\n        const targetClosestItem = Array.from(items).find(\r\n            item_i => item_i.contains(<Node>target)\r\n        ) ?? null;\r\n        if (targetClosestItem) {\r\n            targetClosestItem.trigger();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {items} = this;\r\n        const targetClosestItem = Array.from(items).find(\r\n            item_i => item_i.contains(<Node>target)\r\n        ) ?? null;\r\n        if (targetClosestItem) {\r\n            this.#setActiveItem(targetClosestItem);\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const {contextual} = this;\r\n            if (contextual) {\r\n                try {\r\n                    this.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const {activeItem} = this;\r\n                if (activeItem?.expanded) {\r\n                    activeItem.collapse();\r\n                }\r\n                this.#setActiveItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    async #setItemTimeout(item: HTMLEMenuItemElement, delay?: number): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => {\r\n                resolve(void 0);\r\n            }, delay ?? 0);\r\n            toggleTimeouts.set(item, {\r\n                clear: () => {\r\n                    clearTimeout(timeout);\r\n                    reject();\r\n                }\r\n            });\r\n        }).then(() => {\r\n            toggleTimeouts.delete(item);\r\n        });\r\n    }\r\n\r\n    #clearItemTimeout(item: HTMLEMenuItemElement): void {\r\n        const timeout = toggleTimeouts.get(item);\r\n        if (typeof timeout !== \"undefined\") {\r\n            toggleTimeouts.delete(item);\r\n            timeout.clear();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.#firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem() :\r\n                    this.#firstItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                firstItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                lastItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            activeItem.expand();\r\n                            if (activeItem.expanded) {\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                            }\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            activeItem.trigger();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            if (!activeItem.expanded) {\r\n                                activeItem.expand();\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                                event.stopPropagation();\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOutEvent(event: MouseEvent): void {\r\n        const {target, relatedTarget} = event;\r\n        const {items} = this;\r\n        const targetClosestItem = Array.from(items).find(\r\n            item_i => item_i.contains(<Node>target)\r\n        ) ?? null;\r\n        if (targetClosestItem?.type == \"submenu\" &&\r\n            !targetClosestItem.expanded) {\r\n            this.#clearItemTimeout(targetClosestItem);\r\n        }\r\n        const isTargetClosestMenu = event.composedPath().find(\r\n            target_i => target_i instanceof HTMLEMenuElement\r\n        ) == this;\r\n        if (isTargetClosestMenu) {\r\n            const {clientX, clientY} = event;\r\n            const {left, right, top, bottom} = this.getBoundingClientRect();\r\n            const intersectsWithMouse = !(\r\n                left > clientX || right < clientX || top > clientY || bottom < clientY\r\n            );\r\n            const containsRelatedTarget = this.contains(<Node>relatedTarget);\r\n            if (intersectsWithMouse && containsRelatedTarget) {\r\n                if (relatedTarget instanceof HTMLEMenuElement && relatedTarget !== this) {\r\n                    relatedTarget.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    const activeIndex = this.#activeIndex;\r\n                    this.focus({preventScroll: true});\r\n                    this.#setActiveItem(null);\r\n                    this.#activeIndex = activeIndex;\r\n                }\r\n            }\r\n            if (!intersectsWithMouse) {\r\n                this.focus({preventScroll: true});\r\n                this.#setActiveItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {items} = this;\r\n        const targetClosestItem = Array.from(items).find(\r\n            item_i => item_i.contains(<Node>target)\r\n        ) ?? null;\r\n        if (targetClosestItem?.type == \"submenu\" &&\r\n            targetClosestItem.expanded) {\r\n            this.#clearItemTimeout(targetClosestItem);\r\n        }\r\n        const isTargetClosestMenu = event.composedPath().find(\r\n            target_i => target_i instanceof HTMLEMenuElement\r\n        ) == this;\r\n        if (isTargetClosestMenu) {\r\n            const {activeItem} = this;\r\n            if (activeItem?.type == \"submenu\" &&\r\n                activeItem.expanded && \r\n                !activeItem.contains(<Node>target)) {\r\n                this.#clearItemTimeout(activeItem);\r\n                this.#setItemTimeout(activeItem, 400)\r\n                    .then(() => {\r\n                        activeItem.collapse();\r\n                    })\r\n                    .catch(() => void 0);\r\n            }\r\n            if (targetClosestItem !== null) {\r\n                this.#setActiveItem(targetClosestItem);\r\n                targetClosestItem.focus({preventScroll: true});\r\n                if (targetClosestItem.type == \"submenu\") {\r\n                    if (!targetClosestItem.expanded) {\r\n                        this.#clearItemTimeout(targetClosestItem);\r\n                        this.#setItemTimeout(targetClosestItem, 200)\r\n                            .then(() => {\r\n                                const {activeItem} = this;\r\n                                this.#collapseSubmenus();\r\n                                if (activeItem) {\r\n                                    this.#clearItemTimeout(activeItem);\r\n                                    activeItem.expand();\r\n                                    activeItem.menu?.focus({preventScroll: true});\r\n                                }\r\n                            })\r\n                            .catch(() => void 0);\r\n                    }\r\n                    else {\r\n                        targetClosestItem.menu?.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleTriggerEvent(event: Event): void {\r\n        const {target} = event;\r\n        const composedPath = event.composedPath();\r\n        const {contextual} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestTargetMenu = composedPath.find(\r\n                target_i => target_i instanceof HTMLEMenuElement\r\n            ) == this;\r\n            if (isClosestTargetMenu) {\r\n                const {type, name, value} = target;\r\n                if (type == \"radio\") {\r\n                    Array.from(this.items).filter(item_i => item_i.type == \"radio\" && item_i.name === name).\r\n                        forEach((radio_i) => {\r\n                            radio_i.checked = radio_i.value == value;\r\n                        });\r\n                }\r\n            }\r\n            if (contextual) {\r\n                try {\r\n                    this.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuElement: HTMLEMenuElementConstructor = HTMLEMenuElementBase;\r\n\r\ninterface EMenuConstructor {\r\n    readonly prototype: HTMLEMenuElement;\r\n    new(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }): HTMLEMenuElement;\r\n}\r\n\r\nvar EMenu = <EMenuConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }) {\r\n        const {name, children} = init;\r\n        return element(\"e-menu\", {\r\n            properties: {\r\n                name: name,\r\n                tabIndex: -1,\r\n            },\r\n            children: children\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuElement.prototype,\r\n    }\r\n);","import { AttributeProperty, CustomElement, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\n\r\nexport { HTMLEGridRowElement };\r\n\r\ninterface HTMLEGridRowElementConstructor {\r\n    readonly prototype: HTMLEGridRowElement;\r\n    new(): HTMLEGridRowElement;\r\n}\r\n\r\ninterface HTMLEGridRowElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    active: boolean;\r\n    selected: boolean;\r\n    posinset: number;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrow\": HTMLEGridRowElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrow\"\r\n})\r\nclass HTMLEGridRowElementBase extends HTMLElement implements HTMLEGridRowElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    #menu: HTMLEMenuElement | null;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    textContent: /*css*/`\r\n                        :host {\r\n                            display: table-row;\r\n                        }\r\n\r\n                        :host([droptarget]) {\r\n                            background-color: gainsboro;\r\n                        }\r\n                        \r\n                        :host(:hover) {\r\n                            background-color: rgba(135, 206, 250, 0.2);\r\n                        }\r\n\r\n                        :host([active]) {\r\n                            outline: 1px solid rgb(135, 206, 250);\r\n                            outline-offset: -1px;\r\n                        }\r\n\r\n                        :host([selected]) {\r\n                            background-color: rgba(135, 206, 250, 0.4);\r\n                            outline: 1px solid rgb(135, 206, 250);\r\n                            outline-offset: -1px;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\"),\r\n            element(\"slot\", {\r\n                properties: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#menu = null;\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"menu\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#menu = element instanceof HTMLEMenuElement ? element : null;\r\n                break;\r\n            }\r\n            default: {\r\n                const assignedCells = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n                    .assignedElements()\r\n                    .filter(\r\n                        element_i => element_i instanceof HTMLEGridCellElement\r\n                    );\r\n                assignedCells.forEach((cell_i, i) => {\r\n                    cell_i.posinset = i;\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowElement: HTMLEGridRowElementConstructor = HTMLEGridRowElementBase;","import { HTMLEGridElement } from \"./Grid\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\n\r\nexport { HTMLEGridCellCollection };\r\n\r\ninterface HTMLEGridCellCollectionConstructor {\r\n    readonly prototype: HTMLEGridCellCollection;\r\n    new(root: HTMLElement): HTMLEGridCellCollection;\r\n}\r\n\r\ninterface HTMLEGridCellCollection {\r\n    length: number;\r\n    item(index: number): HTMLEGridCellElement | null;\r\n    namedItem(name: string): HTMLEGridCellElement | null;\r\n    values(): IterableIterator<HTMLEGridCellElement>;\r\n}\r\n\r\nclass HTMLEGridCellCollectionBase implements HTMLEGridCellCollection {\r\n    #walker: TreeWalker;\r\n\r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridCellElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEGridCellElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEGridCellElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEGridCellElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEGridCellElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEGridCellElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEGridCellElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEGridCellElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEGridCellElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridCellCollection: HTMLEGridCellCollectionConstructor =  HTMLEGridCellCollectionBase;","import { HTMLEGridElement } from \"./Grid\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\n\r\nexport { HTMLEGridRowCollection };\r\n\r\ninterface HTMLEGridRowCollectionConstructor {\r\n    readonly prototype: HTMLEGridRowCollection;\r\n    new(root: HTMLElement): HTMLEGridRowCollection;\r\n}\r\n\r\ninterface HTMLEGridRowCollection {\r\n    length: number;\r\n    item(index: number): HTMLEGridRowElement | null;\r\n    namedItem(name: string): HTMLEGridRowElement | null;\r\n    values(): IterableIterator<HTMLEGridRowElement>;\r\n}\r\n\r\nclass HTMLEGridRowCollectionBase implements HTMLEGridRowCollection {\r\n    #walker: TreeWalker;\r\n    \r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEGridRowElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEGridRowElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEGridRowElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEGridRowElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEGridRowElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEGridRowElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEGridRowElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEGridRowElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowCollection: HTMLEGridRowCollectionConstructor =  HTMLEGridRowCollectionBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\n\r\nexport { HTMLEGridBodyElement };\r\n\r\ninterface HTMLEGridBodyElementConstructor {\r\n    readonly prototype: HTMLEGridBodyElement;\r\n    new(): HTMLEGridBodyElement;\r\n}\r\n\r\ninterface HTMLEGridBodyElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridbody\": HTMLEGridBodyElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridbody\"\r\n})\r\nclass HTMLEGridBodyElementBase extends HTMLElement implements HTMLEGridBodyElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    textContent: /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridBodyElement: HTMLEGridBodyElementConstructor = HTMLEGridBodyElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\n\r\nexport { HTMLEGridHeadElement };\r\n\r\ninterface HTMLEGridHeadElementConstructor {\r\n    readonly prototype: HTMLEGridHeadElement;\r\n    new(): HTMLEGridHeadElement;\r\n}\r\n\r\ninterface HTMLEGridHeadElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridhead\": HTMLEGridHeadElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridhead\"\r\n})\r\nclass HTMLEGridHeadElementBase extends HTMLElement implements HTMLEGridHeadElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    textContent: /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridHeadElement: HTMLEGridHeadElementConstructor = HTMLEGridHeadElementBase;","import { CustomElement, AttributeProperty, trimMultilineIndent, Stylesheet, element } from \"../../Element\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridHeadElement } from \"./GridHead\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\n\r\nexport { HTMLEGridElement };\r\n\r\ninterface HTMLEGridElementConstructor {\r\n    readonly prototype: HTMLEGridElement;\r\n    new(): HTMLEGridElement;\r\n}\r\n\r\ninterface HTMLEGridElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly body: HTMLEGridBodyElement | null;\r\n    readonly head: HTMLEGridHeadElement | null\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n    readonly activeCell: HTMLEGridCellElement | null;\r\n    readonly activeCellIndex: number;\r\n    readonly activeRow: HTMLEGridRowElement | null;\r\n    readonly activeRowIndex: number;\r\n    selectby: \"cell\" | \"row\";\r\n    name: string;\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    clearSelection(): void;\r\n    selectedCells(): HTMLEGridCellElement[];\r\n    selectedRows(): HTMLEGridRowElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-grid\": HTMLEGridElement,\r\n    }\r\n}\r\n\r\nclass HTMLEGridElementBase extends HTMLElement implements HTMLEGridElement {\r\n\r\n    static {\r\n        CustomElement({\r\n            name: \"e-grid\"\r\n        })(this);\r\n    }\r\n    \r\n    static readonly #shadowTemplate = element(\"template\", {\r\n        content: [\r\n            element(\"slot\")\r\n        ]\r\n    });\r\n    static readonly #shadowStylesheet = Stylesheet(\r\n        trimMultilineIndent(/*css*/`\r\n            :host {\r\n                display: table;\r\n            }\r\n\r\n            :host([droptarget]) {\r\n                background-color: gainsboro;\r\n            }\r\n        `)\r\n    )\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    get activeCellIndex(): number {\r\n        return this.#activeCellIndex;\r\n    }\r\n\r\n    get activeCell(): HTMLEGridCellElement | null {\r\n        return this.cells.item(this.#activeCellIndex) ?? null;\r\n    }\r\n\r\n    get activeRowIndex(): number {\r\n        return this.#activeRowIndex;\r\n    }\r\n\r\n    get activeRow(): HTMLEGridRowElement | null {\r\n        return this.rows.item(this.#activeRowIndex) ?? null;\r\n    }\r\n\r\n    get body(): HTMLEGridBodyElement | null {\r\n        return <HTMLEGridBodyElement>Array.from(this.childNodes).find(\r\n            node_i => node_i instanceof HTMLEGridBodyElement\r\n        ) ?? null;\r\n    }\r\n\r\n    get head(): HTMLEGridHeadElement | null {\r\n        return <HTMLEGridHeadElement>Array.from(this.childNodes).find(\r\n            node_i => node_i instanceof HTMLEGridHeadElement\r\n        ) ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"cell\"})\r\n    selectby!: \"cell\" | \"row\";\r\n\r\n    #activeCellIndex: number;\r\n    #activeRowIndex: number;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #cellsWalker: TreeWalker;\r\n    #rowsWalker: TreeWalker;\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#cellsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#cellsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#rowsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#rowsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeCellIndex = -1;\r\n        this.#activeRowIndex = -1;\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        \r\n        (shadowRoot as any)[\"adoptedStyleSheets\"] = [\r\n            HTMLEGridElementBase.#shadowStylesheet\r\n        ];\r\n        shadowRoot.append(\r\n            HTMLEGridElementBase.#shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.#clearCellsSelection();\r\n        this.#clearRowsSelection();\r\n    }\r\n\r\n    selectedCells(): HTMLEGridCellElement[] {\r\n        /*const selectedCells = <HTMLEGridCellElement[]>[];\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cellsWalker.root;\r\n        let cell = <HTMLEGridCellElement | null>cellsWalker.firstChild();\r\n        while (cell !== null) {\r\n            if (cell.selected) {\r\n                selectedCells.push(cell);\r\n            }\r\n            cell = <HTMLEGridCellElement | null>cellsWalker.nextNode();\r\n        }\r\n        return selectedCells;*/\r\n        return Array.from(this.querySelectorAll(\"e-gridcell[selected]\"));\r\n    }\r\n\r\n    selectedRows(): HTMLEGridRowElement[] {\r\n        /*const selectedRows = <HTMLEGridRowElement[]>[];\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = rowsWalker.root;\r\n        let row = <HTMLEGridRowElement | null>rowsWalker.firstChild();\r\n        while (row !== null) {\r\n            if (row.selected) {\r\n                selectedRows.push(row);\r\n            }\r\n            row = <HTMLEGridRowElement | null>rowsWalker.nextNode();\r\n        }\r\n        return selectedRows;*/\r\n        return Array.from(this.querySelectorAll(\"e-gridrow[selected]\"));\r\n    }\r\n\r\n    #cellsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridCellElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #rowsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridRowElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getCellsRange(from: HTMLEGridCellElement, to: HTMLEGridCellElement): HTMLEGridCellElement[] {\r\n        const cells = Array.from(this.cells.values());\r\n        const fromIndex = cells.indexOf(from);\r\n        const toIndex = cells.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return cells.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #getRowsRange(from: HTMLEGridRowElement, to: HTMLEGridRowElement): HTMLEGridRowElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleRow = this.#nextRow(from);\r\n            while (nextVisibleRow && nextVisibleRow !== to) {\r\n                range.push(nextVisibleRow);\r\n                nextVisibleRow = this.#nextRow(nextVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleRow = this.#previousRow(from);\r\n            while (previousVisibleRow && previousVisibleRow !== to) {\r\n                range.push(previousVisibleRow);\r\n                previousVisibleRow = this.#previousRow(previousVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setCellsSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((selectedCell_i) => {\r\n            if (!cells.includes(selectedCell_i)) {\r\n                selectedCell_i.selected = false;\r\n            }\r\n        });\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setRowsSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((selectedRow_i) => {\r\n            if (!rows.includes(selectedRow_i)) {\r\n                selectedRow_i.selected = false;\r\n            }\r\n        });\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addCellsToSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addRowsToSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeCellsFromSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        cells.forEach((cell_i) => {\r\n            if (selectedCells.includes(cell_i)) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeRowsFromSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        rows.forEach((row_i) => {\r\n            if (selectedRows.includes(row_i)) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearCellsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((cell_i) => {\r\n            if (cell_i.selected) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearRowsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((row_i) => {\r\n            if (row_i.selected) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveCell(cell: HTMLEGridCellElement): void {\r\n        const {activeCell, cells} = this;\r\n        if (activeCell !== null && activeCell !== cell) {\r\n            activeCell.active = false;\r\n            activeCell.tabIndex = -1;\r\n        }\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        cell.active = true;\r\n        cell.tabIndex = 0;\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            this.#setActiveRow(closestRow);\r\n        }\r\n        this.#activeCellIndex = Array.from(cells.values()).indexOf(cell);\r\n    }\r\n\r\n    #setActiveRow(row: HTMLEGridRowElement): void {\r\n        const {activeRow, rows} = this;\r\n        if (activeRow !== null && activeRow !== row) {\r\n            activeRow.active = false;\r\n            activeRow.tabIndex = -1;\r\n        }\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        row.active = true;\r\n        row.tabIndex = 0;\r\n        this.#activeRowIndex = Array.from(rows.values()).indexOf(row);\r\n    }\r\n\r\n    #firstCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.firstChild();\r\n    }\r\n\r\n    #lastCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.lastChild();\r\n    }\r\n\r\n    #previousCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.previousNode();\r\n    }\r\n\r\n    #nextCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.nextNode();\r\n    }\r\n\r\n    #closestRow(cell: HTMLEGridCellElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = cell;\r\n        return <HTMLEGridRowElement | null>rowsWalker.parentNode();\r\n    }\r\n\r\n    #firstRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.firstChild();\r\n    }\r\n\r\n    #lastRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.lastChild();\r\n    }\r\n\r\n    #previousRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.previousNode();\r\n    }\r\n\r\n    #nextRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.nextNode();\r\n    }\r\n\r\n    #topCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const {cells: closestRowCells} = closestRow;\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const previousRow = this.#previousRow(closestRow);\r\n            if (previousRow) {\r\n                const {cells: previousRowCells} = previousRow;\r\n                return previousRowCells.item(\r\n                    Math.min(cellIndex, previousRowCells.length)\r\n                );\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #bottomCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const {cells: closestRowCells} = closestRow;\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const nextRow = this.#nextRow(closestRow);\r\n            if (nextRow) {\r\n                const {cells: nextRowCells} = nextRow;\r\n                return nextRowCells.item(\r\n                    Math.min(cellIndex, nextRowCells.length)\r\n                );\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent) {\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const composedPath = event.composedPath();\r\n                const targetCell = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridCellElement\r\n                ) : null;\r\n                if (targetCell instanceof HTMLEGridCellElement) {\r\n                    const selectedCells = this.selectedCells();\r\n                    if (!selectedCells.includes(targetCell)) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    targetCell.focus({preventScroll: true});\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const composedPath = event.composedPath();\r\n                const targetRow = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridRowElement\r\n                ) : null;\r\n                if (targetRow instanceof HTMLEGridRowElement) {\r\n                    const selectedRows = this.selectedRows();\r\n                    if (!selectedRows.includes(targetRow)) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    targetRow.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {ctrlKey, shiftKey} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const composedPath = event.composedPath();\r\n                const targetCell = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridCellElement\r\n                ) : null;\r\n                const selectedCells = this.selectedCells();\r\n                if (targetCell instanceof HTMLEGridCellElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetCell.selected ?\r\n                            this.#addCellsToSelection(targetCell) :\r\n                            this.#removeCellsFromSelection(targetCell);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedCell = selectedCells[selectedCells.length - 1];\r\n                        if (lastSelectedCell) {\r\n                            const range = this.#getCellsRange(\r\n                                lastSelectedCell,\r\n                                targetCell\r\n                            );\r\n                            if (range) {\r\n                                selectedCells.includes(targetCell) ?\r\n                                    this.#removeCellsFromSelection(...range) :\r\n                                    this.#addCellsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setCellsSelection(targetCell);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const selectedRows = this.selectedRows();\r\n                const composedPath = event.composedPath();\r\n                const targetRow = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridRowElement\r\n                ) : null;\r\n                if (targetRow instanceof HTMLEGridRowElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetRow.selected ?\r\n                            this.#addRowsToSelection(targetRow) :\r\n                            this.#removeRowsFromSelection(targetRow);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedRow = selectedRows[selectedRows.length - 1];\r\n                        if (lastSelectedRow) {\r\n                            const range = this.#getRowsRange(\r\n                                lastSelectedRow,\r\n                                targetRow\r\n                            );\r\n                            if (range) {\r\n                                selectedRows.includes(targetRow) ?\r\n                                    this.#removeRowsFromSelection(...range) :\r\n                                    this.#addRowsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setRowsSelection(targetRow);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {selectby, activeCell, activeRow} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    switch (selectby) {\r\n                        case \"cell\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const firstCell = firstRow ? this.#firstCell(firstRow) : null;\r\n                            const lastRow = this.#lastRow();\r\n                            const lastCell = lastRow ? this.#lastCell(lastRow) : null;\r\n                            if (firstCell && lastCell) {\r\n                                const range = this.#getCellsRange(firstCell, lastCell);\r\n                                if (range) {\r\n                                    this.#setCellsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"row\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const lastRow = this.#lastRow();\r\n                            if (firstRow && lastRow) {\r\n                                const range = this.#getRowsRange(firstRow, lastRow);\r\n                                if (range) {\r\n                                    this.#setRowsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const previousCell = this.#previousCell(activeCell);\r\n                        if (previousCell) {\r\n                            previousCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousCell.selected ?\r\n                                    this.#removeCellsFromSelection(previousCell) :\r\n                                    this.#addCellsToSelection(previousCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const nextCell = this.#nextCell(activeCell);\r\n                        if (nextCell) {\r\n                            nextCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextCell.selected ?\r\n                                    this.#removeCellsFromSelection(nextCell) :\r\n                                    this.#addCellsToSelection(nextCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const firstRow = activeRow ?? this.#firstRow();\r\n                        const topCell = activeCell ?\r\n                            this.#topCell(activeCell) :\r\n                            firstRow ?\r\n                            this.#firstCell(firstRow) :\r\n                            null;\r\n                        if (topCell) {\r\n                            topCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                topCell.selected ?\r\n                                    this.#removeCellsFromSelection(topCell) :\r\n                                    this.#addCellsToSelection(topCell);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const previousRow = activeRow ?\r\n                            this.#previousRow(activeRow) :\r\n                            this.#firstRow();\r\n                        if (previousRow) {\r\n                            previousRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousRow.selected ?\r\n                                    this.#removeRowsFromSelection(previousRow) :\r\n                                    this.#addRowsToSelection(previousRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const lastRow = activeRow ?? this.#lastRow();\r\n                        const bottomCell = activeCell ?\r\n                            this.#bottomCell(activeCell) :\r\n                            lastRow ?\r\n                            this.#lastCell(lastRow) :\r\n                            null;\r\n                            if (bottomCell) {\r\n                                bottomCell.focus({preventScroll: true});\r\n                                const {shiftKey} = event;\r\n                                if (shiftKey) {\r\n                                    bottomCell.selected ?\r\n                                        this.#removeCellsFromSelection(bottomCell) :\r\n                                        this.#addCellsToSelection(bottomCell);\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"row\": {\r\n                        const nextRow = activeRow ?\r\n                            this.#nextRow(activeRow) :\r\n                            this.#lastRow();\r\n                        if (nextRow) {\r\n                            nextRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextRow.selected ?\r\n                                    this.#removeRowsFromSelection(nextRow) :\r\n                                    this.#addRowsToSelection(nextRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const firstCell = this.#firstCell(activeRow);\r\n                            if (firstCell) {\r\n                                firstCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const firstRow = this.#firstRow();\r\n                        if (firstRow) {\r\n                            firstRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const lastCell = this.#lastCell(activeRow);\r\n                            if (lastCell) {\r\n                                lastCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const lastRow = this.#lastRow();\r\n                        if (lastRow) {\r\n                            lastRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeCell) {\r\n                            this.#setCellsSelection(activeCell);\r\n                            activeCell.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        if (activeRow) {\r\n                            this.#setRowsSelection(activeRow);\r\n                            activeRow.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        this.#clearCellsSelection();\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        this.#clearRowsSelection();\r\n                        break;\r\n                    }\r\n                }\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const {activeCell} = this;\r\n                if (activeCell && relatedTarget !== activeCell) {\r\n                    activeCell.focus();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const {activeRow} = this;\r\n                if (activeRow && relatedTarget !== activeRow) {\r\n                    activeRow.focus();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                if (target instanceof HTMLEGridCellElement) {\r\n                    this.#setActiveCell(target);\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                if (target instanceof HTMLEGridRowElement) {\r\n                    this.#setActiveRow(target);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedRows = <HTMLEGridRowElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridRowElement\r\n            );\r\n            assignedRows.forEach((row_i, i) => {\r\n                row_i.posinset = i;\r\n            });\r\n    }\r\n}\r\n\r\nvar HTMLEGridElement: HTMLEGridElementConstructor = HTMLEGridElementBase;","import { HTMLEMenuElement } from \"./Menu\";\r\nimport { HTMLEMenuBarElement } from \"./MenuBar\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuItemRadioList };\r\nexport { HTMLEMenuItemCollection };\r\n\r\ninterface HTMLEMenuItemCollectionConstructor {\r\n    readonly prototype: HTMLEMenuItemCollection;\r\n    new(root: HTMLEMenuElement | HTMLEMenuBarElement): HTMLEMenuItemCollection;\r\n}\r\n\r\ninterface HTMLEMenuItemCollection {\r\n    length: number;\r\n    item(index: number): HTMLEMenuItemElement | null;\r\n    namedItem(name: string): HTMLEMenuItemElement | HTMLEMenuItemRadioList | null;\r\n    values(): IterableIterator<HTMLEMenuItemElement>;\r\n}\r\n\r\ninterface HTMLEMenuItemRadioListConstructor {\r\n    readonly prototype: HTMLEMenuItemRadioList;\r\n    new(root: HTMLEMenuElement | HTMLEMenuBarElement, name: string): HTMLEMenuItemRadioList;\r\n}\r\n\r\ninterface HTMLEMenuItemRadioList {\r\n    value: string;\r\n    values(): IterableIterator<HTMLEMenuItemElement>;\r\n}\r\n\r\nclass HTMLEMenuItemCollectionBase implements HTMLEMenuItemCollection {\r\n    #walker: TreeWalker;\r\n\r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLEMenuElement | HTMLEMenuBarElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEMenuItemElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEMenuItemElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEMenuItemElement | HTMLEMenuItemRadioList | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        let currentNode = <HTMLEMenuItemElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEMenuItemElement | null>walker.nextNode();\r\n        }\r\n        if (currentNode?.type == \"radio\") {\r\n            return new HTMLEMenuItemRadioList(<HTMLEMenuElement | HTMLEMenuBarElement>root, name);\r\n        }\r\n        return <HTMLEMenuItemElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEMenuItemElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEMenuItemElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n\r\n    static HTMLEMenuItemRadioListBase? = class HTMLEMenuItemRadioListBase implements HTMLEMenuItemRadioList {\r\n        #walker: TreeWalker;\r\n        #name: string;\r\n\r\n        get value(): string {\r\n            const name = this.#name;\r\n            const walker = this.#walker;\r\n            walker.currentNode = walker.root;\r\n            let currentNode = <HTMLEMenuItemElement | null>walker.nextNode();\r\n            while (currentNode !== null) {\r\n                if (currentNode.name == name && currentNode.type == \"radio\" && currentNode.checked) {\r\n                    return currentNode.value;\r\n                }\r\n                currentNode = <HTMLEMenuItemElement | null>walker.nextNode();\r\n            }\r\n            return \"\";\r\n        }\r\n\r\n        constructor(root: HTMLEMenuElement | HTMLEMenuBarElement, name: string) {\r\n            this.#walker = document.createTreeWalker(\r\n                root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n            );\r\n            this.#name = name;\r\n        }\r\n        \r\n        #nodeFilter(node: Node): number {\r\n            if (node instanceof HTMLEMenuItemElement) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            if (node instanceof HTMLEMenuItemGroupElement) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n            return NodeFilter.FILTER_REJECT;\r\n        }\r\n\r\n        *values(): IterableIterator<HTMLEMenuItemElement> {\r\n            const name = this.#name;\r\n            const walker = this.#walker;\r\n            walker.currentNode = walker.root;\r\n            let currentNode = <HTMLEMenuItemElement | null>walker.nextNode();\r\n            while (currentNode !== null) {\r\n                const {name: itemName, type: itemType} = currentNode;\r\n                if (itemName == name && itemType == \"radio\") {\r\n                    yield currentNode;\r\n                }\r\n                currentNode = <HTMLEMenuItemElement | null>walker.nextNode();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemCollection: HTMLEMenuItemCollectionConstructor =  HTMLEMenuItemCollectionBase;\r\nvar HTMLEMenuItemRadioList: HTMLEMenuItemRadioListConstructor = HTMLEMenuItemCollectionBase.HTMLEMenuItemRadioListBase!;\r\ndelete HTMLEMenuItemCollectionBase.HTMLEMenuItemRadioListBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemCollection } from \"./MenuItemCollection\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuBarElement };\r\n\r\ninterface HTMLEMenuBarElementConstructor {\r\n    readonly prototype: HTMLEMenuBarElement;\r\n    new(): HTMLEMenuBarElement;\r\n}\r\n\r\ninterface HTMLEMenuBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLEMenuItemCollection;\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    active: boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menubar\": HTMLEMenuBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menubar\"\r\n})\r\nclass HTMLEMenuBarElementBase extends HTMLElement implements HTMLEMenuBarElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLEMenuItemCollection;\r\n\r\n    #activeIndex: number;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.items = new HTMLEMenuItemCollection(this);\r\n        this.#activeIndex = -1;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        return this.items.item(this.#activeIndex) ?? null;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEMenuItemElement | null>walker.previousSibling();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        if (menu) {\r\n            return menu.items.item(0);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        const {activeItem, active, items} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.collapse();\r\n            activeItem.active = false;\r\n        }\r\n        if (item !== null) {\r\n            if (active) {\r\n                item.expand();\r\n            }\r\n            item.active = true;\r\n            this.#activeIndex = Array.from(items.values()).indexOf(item);\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n    \r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {items} = this;\r\n        const targetClosestItem = Array.from(items.values()).find(\r\n            item_i => item_i.contains(<Node>target)\r\n        ) ?? null;\r\n        this.#setActiveItem(targetClosestItem);\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const {activeItem} = this;\r\n            if (activeItem?.expanded) {\r\n                activeItem.collapse();\r\n            }\r\n            this.#setActiveItem(null);\r\n            this.active = false;\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {active, activeItem, items} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const includesTarget = Array.from(items.values()).includes(target);\r\n            if (includesTarget && target !== activeItem && active) {\r\n                const {menu} = target;\r\n                if (menu) {\r\n                    target.expand();\r\n                    menu.focus({preventScroll: true});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {active, activeItem, items} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const includesTarget = Array.from(items.values()).includes(target);\r\n            if (includesTarget) {\r\n                const isActive = !active;\r\n                this.active = isActive;\r\n                if (isActive) {\r\n                    if (activeItem && !activeItem.expanded) {\r\n                        activeItem.expand();\r\n                    }\r\n                    const {menu} = target;\r\n                    menu?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true})\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {active} = this;\r\n        let {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.#firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (active && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem() : \r\n                    this.#lastItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (active && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.active = !active;\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (active) {\r\n                    this.active = false;\r\n                    if (activeItem) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleTriggerEvent(): void {\r\n        const {activeItem} = this;\r\n        if (activeItem?.expanded) {\r\n            activeItem.collapse();\r\n        }\r\n        this.active = false;\r\n        this.focus({preventScroll: true});\r\n    }\r\n}\r\n\r\nvar HTMLEMenuBarElement: HTMLEMenuBarElementConstructor = HTMLEMenuBarElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\n\r\nexport { HTMLEMenuButtonElement };\r\nexport { EMenuButton };\r\n\r\ninterface HTMLEMenuButtonElementConstructor {\r\n    readonly prototype: HTMLEMenuButtonElement;\r\n    new(): HTMLEMenuButtonElement;\r\n}\r\n\r\ninterface HTMLEMenuButtonElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    disabled: boolean;\r\n    expanded: boolean;\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-menubutton\"\r\n})\r\nclass HTMLEMenuButtonElementBase extends HTMLElement implements HTMLEMenuButtonElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    #menu: HTMLEMenuElement | null;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#menu = null;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            element(\"span\", {\r\n                part: [\"content\"],\r\n                children: [\r\n                    element(\"span\", {\r\n                        part: [\"icon\"]\r\n                    }),\r\n                    element(\"span\", {\r\n                        part: [\"label\"]\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                properties: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const expand = force ?? !this.expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n\r\n    expand(): void {\r\n        if (!this.expanded) {\r\n            this.expanded = true;\r\n            this.#positionMenu();\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        if (this.expanded) {\r\n            this.expanded = false;\r\n        }\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const overflowX = itemRight + menuWidth - clientWidth;\r\n            const overflowY = itemTop + menuHeight - clientHeight;\r\n            menuStyle.setProperty(\"left\", `${\r\n                overflowX > 0 ?\r\n                scrollX + itemRight - menuWidth :\r\n                scrollX + itemLeft\r\n            }px`);\r\n            menuStyle.setProperty(\"top\", `${\r\n                overflowY > 0 ?\r\n                scrollY + itemTop - menuHeight :\r\n                scrollY + itemBottom\r\n            }px`);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target == this) {\r\n            this.toggle();\r\n            const {expanded} = this;\r\n            if (expanded) {\r\n                this.menu?.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded} = this;\r\n        switch (key) {\r\n            case \"ArrowDown\":\r\n            case \"Enter\":\r\n                if (!expanded) {\r\n                    this.expand();\r\n                    this.menu?.items.item(0)?.focus({preventScroll: true});\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            case \"Escape\":\r\n                if (expanded) {\r\n                    this.collapse();\r\n                    this.focus({preventScroll: true});\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n        this.#menu = (element instanceof HTMLEMenuElement) ? element : null;\r\n    }\r\n\r\n    #handleTriggerEvent(): void {\r\n        this.collapse();\r\n        this.focus({preventScroll: true});\r\n    }\r\n}\r\n\r\nvar HTMLEMenuButtonElement: HTMLEMenuButtonElementConstructor = HTMLEMenuButtonElementBase;\r\n\r\ninterface EMenuButtonConstructor {\r\n    readonly prototype: HTMLEMenuButtonElement;\r\n    new(init: {\r\n        menu: HTMLEMenuElement\r\n    }): HTMLEMenuButtonElement;\r\n}\r\n\r\nvar EMenuButton = <EMenuButtonConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        menu: HTMLEMenuElement\r\n    }) {\r\n        const {menu} = init;\r\n        menu.slot = \"menu\";\r\n        return element(\"e-menubutton\", {\r\n            properties: {\r\n                tabIndex: -1\r\n            },\r\n            children: [menu]\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuButtonElement.prototype,\r\n    }\r\n);","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionElement };\r\n\r\ninterface HTMLEOptionElementConstructor {\r\n    readonly prototype: HTMLEOptionElement;\r\n    new(): HTMLEOptionElement;\r\n}\r\n\r\ninterface HTMLEOptionElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    active: boolean;\r\n    value: string;\r\n    label: string;\r\n    description: string;\r\n    disabled: boolean;\r\n    selected: boolean;\r\n    default: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-option\": HTMLEOptionElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-option\"\r\n})\r\nclass HTMLEOptionElementBase extends HTMLElement implements HTMLEOptionElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n    \r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n        \r\n    @AttributeProperty({type: String})\r\n    description!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    default!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            user-select: none;\r\n                            white-space: nowrap;\r\n                            padding: 2px 12px;\r\n                        }\r\n                        \r\n                        :host([active]) {\r\n                            color: black;\r\n                            background-color: lightgray;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            color: lightgray;\r\n                        }\r\n\r\n                        :host::before {\r\n                            display: flex;\r\n                            content: \"\";\r\n                            width: 18px;\r\n                            height: 18px;\r\n                            margin-right: 6px;\r\n\r\n                            mask-size: 18px 18px;\r\n                            -webkit-mask-size: 18px 18px;\r\n                            background-color: var(--icon-color, none);\r\n                            -webkit-mask-image: var(--icon-image, none);\r\n                            mask-image: var(--icon-image, none);\r\n                        }\r\n\r\n                        [part=\"label\"] {\r\n                            flex: auto;\r\n                            text-align: left;\r\n                        }\r\n\r\n                        :host([default])::after {\r\n                            display: inline-block;\r\n                            content: \"(default)\";\r\n                            margin-left: 24px;\r\n                            text-align: right;\r\n                        }\r\n\r\n                        [part=\"content\"] {\r\n                            flex: auto;\r\n                            display: flex;\r\n                            overflow: hidden;\r\n                            pointer-events: none;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"span\", {\r\n                part: [\"content\"],\r\n                children: [\r\n                    element(\"span\", {\r\n                        part: [\"label\"]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector<HTMLElement>(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEOptionElement: HTMLEOptionElementConstructor = HTMLEOptionElementBase;","import { CustomElement, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionGroupElement };\r\n\r\ninterface HTMLEOptionGroupElementConstructor {\r\n    readonly prototype: HTMLEOptionGroupElement;\r\n    new(): HTMLEOptionGroupElement;\r\n}\r\n\r\ninterface HTMLEOptionGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-optiongroup\": HTMLEOptionGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-optiongroup\"\r\n})\r\nclass HTMLEOptionGroupElementBase extends HTMLElement implements HTMLEOptionGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    textContent: /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n}\r\n\r\nvar HTMLEOptionGroupElement: HTMLEOptionGroupElementConstructor = HTMLEOptionGroupElementBase;","import { HTMLEOptionElement } from \"./Option\";\r\nimport { HTMLEOptionGroupElement } from \"./OptionGroup\";\r\nimport { HTMLESelectElement } from \"./Select\";\r\n\r\nexport { HTMLEOptionCollection };\r\n\r\ninterface HTMLEOptionCollectionConstructor {\r\n    readonly prototype: HTMLEOptionCollection;\r\n    new(root: HTMLESelectElement): HTMLEOptionCollection;\r\n}\r\n\r\ninterface HTMLEOptionCollection {\r\n    length: number;\r\n    item(index: number): HTMLEOptionElement | null;\r\n    namedItem(name: string): HTMLEOptionElement | null;\r\n    values(): IterableIterator<HTMLEOptionElement>;\r\n}\r\n\r\nclass HTMLEOptionCollectionBase implements HTMLEOptionCollection {\r\n    #walker: TreeWalker;\r\n\r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    get value(): string {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        while (currentNode !== null) {\r\n            if (currentNode.selected) {\r\n                return currentNode.value;\r\n            }\r\n            currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    constructor(root: HTMLESelectElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEOptionElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEOptionGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEOptionElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEOptionElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEOptionElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        let currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEOptionElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEOptionElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEOptionElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEOptionCollection: HTMLEOptionCollectionConstructor =  HTMLEOptionCollectionBase;","import { HTMLEActionElement } from \"../../containers/actions/Action\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEOptionElement } from \"./Option\";\r\nimport { HTMLEOptionCollection } from \"./OptionCollection\";\r\nimport { HTMLEOptionGroupElement } from \"./OptionGroup\";\r\n\r\nexport { HTMLESelectElement };\r\n\r\ninterface HTMLESelectElement extends HTMLEActionElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly options: HTMLEOptionCollection;\r\n    readonly activeIndex: number;\r\n    readonly activeOption: HTMLEOptionElement | null;\r\n    readonly selectedIndex: number;\r\n    readonly selectedOption: HTMLEOptionElement | null;\r\n    name: string;\r\n    label: string;\r\n    value: string;\r\n    expanded: boolean;\r\n    expand(): void;\r\n    collapse(): void;\r\n    toggle(force?: boolean): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ninterface HTMLESelectElementConstructor {\r\n    readonly prototype: HTMLESelectElement;\r\n    new(): HTMLESelectElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-select\": HTMLESelectElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-select\"\r\n})\r\nclass HTMLESelectElementBase extends HTMLEActionElement implements HTMLESelectElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly options: HTMLEOptionCollection;\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get selectedIndex(): number {\r\n        return this.#selectedIndex;\r\n    }\r\n\r\n    get activeOption(): HTMLEOptionElement | null {\r\n        return this.options.item(this.#activeIndex) ?? null;\r\n    }\r\n\r\n    get selectedOption(): HTMLEOptionElement | null {\r\n        return this.options.item(this.#selectedIndex) ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"select\", observed: true})\r\n    type!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    #walker: TreeWalker;\r\n    #activeIndex: number;\r\n    #selectedIndex: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                part: [\"content\"],\r\n                children: [\r\n                    element(\"label\", {\r\n                        part: [\"label\"]\r\n                    }),\r\n                    element(\"output\", {\r\n                        part: [\"value\"]\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                part: [\"options\"],\r\n                children: [\r\n                    element(\"slot\"),\r\n                    element(\"hr\", {\r\n                        part: [\"separator\"]\r\n                    }),\r\n                    element(\"span\", {\r\n                        part: [\"description\"]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        this.#selectedIndex = -1;\r\n        this.options = new HTMLEOptionCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"value\": {\r\n                const {options} = this;\r\n                const matchingOption = Array.from(options.values()).find(option => option.value == newValue);\r\n                if (matchingOption) {\r\n                    this.#setSelectedOption(matchingOption);\r\n                    this.dispatchEvent(new Event(\"change\", {bubbles: true}));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {expanded, options} = this;\r\n        if (!expanded) {\r\n            this.expanded = true;\r\n            const {selectedIndex} = this;\r\n            this.#positionOptions();\r\n            const option = options.item(selectedIndex);\r\n            if (option) {\r\n                option.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {expanded} = this;\r\n        if (expanded) {\r\n            this.expanded = false;\r\n            this.focus();\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {expanded} = this;\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEOptionElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEOptionGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEOptionElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEOptionElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousOption(item: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEOptionElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextOption(item: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEOptionElement | null>walker.nextNode();\r\n    }\r\n\r\n    #selectOption(option: HTMLEOptionElement): void {\r\n        if (option && !option.disabled) {\r\n            this.value = option.value;\r\n        }\r\n    }\r\n\r\n    #setActiveOption(option: HTMLEOptionElement | null): void {\r\n        const {options, activeOption} = this;\r\n        if (activeOption !== null && activeOption !== option) {\r\n            activeOption.active = false;\r\n        }\r\n        if (option !== null) {\r\n            if (!option.disabled) {\r\n                const {shadowRoot} = this;\r\n                const descriptionPart = shadowRoot.querySelector(\"[part='description']\");\r\n                if (descriptionPart) {\r\n                    descriptionPart.textContent = option.description;\r\n                }\r\n                this.#activeIndex = Array.from(options.values()).indexOf(option);\r\n            }\r\n            option.active = true;\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    #setSelectedOption(option: HTMLEOptionElement | null): void {\r\n        const {options} = this;\r\n        if (option !== null) {\r\n            if (!option.disabled) {\r\n                const {shadowRoot, selectedOption} = this;\r\n                const valuePart = shadowRoot.querySelector(\"[part='value']\");\r\n                if (valuePart) {\r\n                    valuePart.textContent = option.label;\r\n                }\r\n                option.selected = true;\r\n                if (selectedOption) {\r\n                    selectedOption.selected = false;\r\n                }\r\n                this.#selectedIndex = Array.from(options.values()).indexOf(option);\r\n            }\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    #positionOptions(): void {\r\n        const {shadowRoot} = this;\r\n        const options = shadowRoot.querySelector<HTMLElement>(\"[part=options]\")!;\r\n        const {style: optionsStyle} = options;  \r\n        const {bottom: selectBottom, left: selectLeft} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        optionsStyle.setProperty(\"top\", `${selectBottom + scrollY}px`);\r\n        optionsStyle.setProperty(\"left\", `${selectLeft + scrollX}px`);\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEOptionElement) {\r\n            this.#selectOption(target);\r\n            this.collapse();\r\n        }\r\n        else {\r\n            if (target == this) {\r\n                this.toggle();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {expanded} = this;\r\n        if (target instanceof HTMLEOptionElement) {\r\n            if (!expanded) {\r\n                this.expand();\r\n            }\r\n            this.#setActiveOption(target);\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {expanded} = this;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            if (expanded) {\r\n                this.collapse();\r\n            }\r\n            this.#setActiveOption(null);\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {options, activeOption, selectedOption, selectedIndex, expanded} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                if (expanded && activeOption !== null) {\r\n                    const previousOption = this.#previousOption(activeOption) ?? this.#firstOption();\r\n                    if (previousOption) {\r\n                        previousOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else if (!expanded && selectedOption !== null) {\r\n                    const previousOption = this.#previousOption(selectedOption) ?? this.#firstOption();\r\n                    if (previousOption) {\r\n                        this.#selectOption(previousOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (expanded && activeOption !== null) {\r\n                    const nextOption = this.#nextOption(activeOption) ?? this.#lastOption();\r\n                    if (nextOption) {\r\n                        nextOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else if (!expanded && selectedOption !== null) {\r\n                    const nextOption = this.#nextOption(selectedOption) ?? this.#lastOption();\r\n                    if (nextOption) {\r\n                        this.#selectOption(nextOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstOption = this.#firstOption();\r\n                if (firstOption !== null) {\r\n                    if (expanded) {\r\n                        firstOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(firstOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastOption = this.#lastOption();\r\n                if (lastOption !== null) {\r\n                    if (expanded) {\r\n                        lastOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(lastOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (expanded) {\r\n                    this.collapse();\r\n                    if (activeOption !== null) {\r\n                        this.#selectOption(activeOption);\r\n                    }\r\n                }\r\n                else {\r\n                    const option = options.item(selectedIndex);\r\n                    if (option !== null) {\r\n                        option.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.collapse();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            default: {\r\n                const {activeIndex} = this;\r\n                const {length: keyLength} = key;\r\n                if (keyLength == 1) {\r\n                    const keyCode = key.charCodeAt(0);\r\n                    const optionsArray = Array.from(options.values());\r\n                    const firstMatchIndex = optionsArray.findIndex(\r\n                        option_i => option_i.label.toLowerCase().charCodeAt(0) == keyCode\r\n                    );\r\n                    const nextMatchIndex = optionsArray.findIndex(\r\n                        (option_i, i) => option_i.label.toLowerCase().charCodeAt(0) == keyCode && i > activeIndex\r\n                    );\r\n                    const matchIndex = nextMatchIndex > -1 ?\r\n                        nextMatchIndex :\r\n                        firstMatchIndex;\r\n                    const option = options.item(matchIndex);\r\n                    if (option !== null) {\r\n                        option.focus({preventScroll: true});\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEOptionElement) {\r\n            target.focus({preventScroll: true});\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const options = <HTMLEOptionElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEOptionElement\r\n            );\r\n        if (options.length > 0) {\r\n            let selectedOption: HTMLEOptionElement | null = null;\r\n            /*let {value} = this;\r\n            if (value) {\r\n                selectedOption = options.find(option => option.value == value) ?? null;\r\n            }*/\r\n            if (selectedOption == null) {\r\n                selectedOption = options.find(option => option.selected) ?? null;\r\n            }\r\n            if (selectedOption == null) {\r\n                selectedOption = options.find(option => option.default) ?? null;\r\n            }\r\n            if (selectedOption == null) {\r\n                selectedOption = this.#firstOption();\r\n            }\r\n            console.log(selectedOption);\r\n            options.forEach(option_i => {\r\n                option_i.selected = option_i == selectedOption\r\n            });\r\n            if (selectedOption !== null) {\r\n                this.#setSelectedOption(selectedOption);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLESelectElement: HTMLESelectElementConstructor = HTMLESelectElementBase;","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEActionElement } from \"../actions/Action\";\r\nimport { HTMLEMenuButtonElement } from \"../menus/MenuButton\";\r\n\r\nexport { HTMLEToolBarItemElement };\r\nexport { EToolBarItem };\r\n\r\ninterface HTMLEToolBarItemElementConstructor {\r\n    readonly prototype: HTMLEToolBarItemElement;\r\n    new(): HTMLEToolBarItemElement;\r\n}\r\n\r\ninterface HTMLEToolBarItemElement extends HTMLEActionElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menubutton: HTMLEMenuButtonElement | null;\r\n    readonly select: HTMLESelectElement | null;\r\n    name: string;\r\n    label: string;\r\n    active: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritem\": HTMLEToolBarItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar slottedKeyboardListeners: WeakMap<HTMLElement, EventListener>;\r\nvar slottedTriggerListeners: WeakMap<HTMLElement, EventListener>;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritem\"\r\n})\r\nclass HTMLEToolBarItemElementBase extends HTMLEActionElement implements HTMLEToolBarItemElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get menubutton(): HTMLEMenuButtonElement | null {\r\n        return this.#menubutton;\r\n    }\r\n    \r\n    get select(): HTMLESelectElement | null {\r\n        return this.#select;\r\n    }\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n    \r\n    #menubutton: HTMLEMenuButtonElement | null;\r\n    #select: HTMLESelectElement | null;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\", {\r\n            content: [\r\n                element(\"span\", {\r\n                    part: [\"content\"],\r\n                    children: [\r\n                        element(\"span\", {\r\n                            part: [\"icon\"]\r\n                        }),\r\n                        element(\"span\", {\r\n                            part: [\"label\"]\r\n                        }),\r\n                        element(\"slot\", {\r\n                            properties: {\r\n                                name: \"select\"\r\n                            }\r\n                        }),\r\n                        element(\"slot\", {\r\n                            properties: {\r\n                                name: \"menubutton\"\r\n                            }\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        });\r\n        slottedKeyboardListeners = new WeakMap();\r\n        slottedTriggerListeners = new WeakMap();\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#menubutton = null;\r\n        this.#select = null;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    toggle(): void {\r\n        const {type} = this;\r\n        switch (type) {\r\n            case \"menubutton\": {\r\n                const {menubutton} = this;\r\n                if (menubutton) {\r\n                    menubutton.toggle();\r\n                    if (menubutton.expanded) {\r\n                        menubutton.menu?.items.item(0)?.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"select\": {\r\n                const {select} = this;\r\n                if (select) {\r\n                    select.toggle();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector<HTMLSpanElement>(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"value\": {\r\n                const {type} = this;\r\n                if (type == \"select\") {\r\n                    this.#updateSelectValue();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #updateSelectValue(): void {\r\n        const {select} = this;\r\n        if (select) {\r\n            const {value} = this;\r\n            const {value: selectValue} = select;\r\n            if (selectValue !== value) {\r\n                select.value = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    #addSlottedKeyboardHandler(element: HTMLElement): void {\r\n        const listener = <EventListener>this.#handleSlottedKeyboardEvent.bind(this);\r\n        slottedKeyboardListeners.set(element, listener);\r\n        element.addEventListener(\"keydown\", listener);\r\n    }\r\n\r\n    #removeSlottedKeyboardHandler(element: HTMLElement): void {\r\n        const listener = slottedKeyboardListeners.get(element);\r\n        if (listener) {\r\n            element.removeEventListener(\"keydown\", listener);\r\n        }\r\n    }\r\n\r\n    #addSlottedTriggerHandler(element: HTMLElement): void {\r\n        const listener = <EventListener>this.#handleSlottedTriggerEvent.bind(this);\r\n        slottedTriggerListeners.set(element, listener);\r\n        element.addEventListener(\"trigger\", listener);\r\n    }\r\n\r\n    #removeSlottedTriggerHandler(element: HTMLElement): void {\r\n        const listener = slottedTriggerListeners.get(element);\r\n        if (listener) {\r\n            element.removeEventListener(\"trigger\", listener);\r\n        }\r\n    }\r\n\r\n    #handleSlottedKeyboardEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        switch (key) {\r\n            case \"Enter\":\r\n            case \"Escape\": {\r\n                this.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlottedTriggerEvent(event: KeyboardEvent): void {\r\n        this.focus({preventScroll: true});\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target;\r\n        switch (slotName) {\r\n            case \"menubutton\": {\r\n                let menubutton = this.#menubutton;\r\n                if (menubutton !== null) {\r\n                    this.#removeSlottedTriggerHandler(menubutton);\r\n                    this.#removeSlottedKeyboardHandler(menubutton);\r\n                }\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                menubutton = element instanceof HTMLEMenuButtonElement ? element : null;\r\n                if (menubutton !== null) {\r\n                    this.#addSlottedTriggerHandler(menubutton);\r\n                    this.#addSlottedKeyboardHandler(menubutton);\r\n                }\r\n                this.#menubutton = menubutton;\r\n                break;\r\n            }\r\n            case \"select\": {\r\n                let select = this.#select;\r\n                if (select !== null) {\r\n                    this.#removeSlottedKeyboardHandler(select);\r\n                }\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                select = element instanceof HTMLESelectElement ? element : null;\r\n                if (select !== null) {\r\n                    this.#addSlottedKeyboardHandler(select);\r\n                }\r\n                this.#select = select;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemElement: HTMLEToolBarItemElementConstructor = HTMLEToolBarItemElementBase;\r\n\r\ninterface EToolBarItemConstructor {\r\n    readonly prototype: HTMLEToolBarItemElement;\r\n    new(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n    button(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    checkbox(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    radio(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    menubutton(init: {\r\n        name: string;\r\n        label: string;\r\n        menubutton: HTMLEMenuButtonElement;\r\n    }): HTMLEToolBarItemElement;\r\n    select(init: {\r\n        name: string;\r\n        label: string;\r\n        select: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n}\r\n\r\nvar EToolBarItem = <EToolBarItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menubutton, select} = init;\r\n        if (menubutton) {\r\n            menubutton.slot = \"menubutton\";\r\n        }\r\n        if (select) {\r\n            select.slot = \"select\";\r\n        }\r\n        return element(\"e-toolbaritem\", {\r\n            properties: {\r\n                tabIndex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type\r\n            },\r\n            children: menubutton ? [menubutton] : select ? [select] : void 0,\r\n            eventListeners: {\r\n                trigger: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEToolBarItemElement.prototype,\r\n        button(init: {\r\n            name: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menubutton(init: {\r\n            name: string;\r\n            label: string;\r\n            menubutton: HTMLEMenuButtonElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"menubutton\"\r\n            });\r\n        },\r\n        select(init: {\r\n            name: string;\r\n            label: string;\r\n            select: HTMLESelectElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"select\"\r\n            });\r\n        },\r\n    }\r\n);","\r\nimport { element, CustomElement, AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEToolBarItemGroupElement };\r\n\r\ninterface HTMLEToolBarItemGroupElementConstructor {\r\n    readonly prototype: HTMLEToolBarItemGroupElement;\r\n    new(): HTMLEToolBarItemGroupElement;\r\n}\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\ninterface HTMLEToolBarItemGroupElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n    disabled: boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritemgroup\": HTMLEToolBarItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritemgroup\"\r\n})\r\nclass HTMLEToolBarItemGroupElementBase extends HTMLElement implements HTMLEToolBarItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    disabled!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    textContent: /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            width: max-content;\r\n                            flex-direction: row;\r\n                        }\r\n\r\n                        /*:host([orientation=\"vertical\"]) {\r\n                            flex-direction: column;\r\n                        }\r\n\r\n                        :host([orientation=\"horizontal\"]) {\r\n                            flex-direction: row;\r\n                        }*/\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const label = this.shadowRoot.querySelector<HTMLLabelElement>(\"[part='label']\");\r\n                if (label) {\r\n                    label.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"disabled\": {\r\n                /*this.items.forEach((item) => {\r\n                    item.disabled = newValue !== null;\r\n                });*/\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemGroupElement: HTMLEToolBarItemGroupElementConstructor = HTMLEToolBarItemGroupElementBase;","import { HTMLEToolBarElement } from \"./ToolBar\";\r\nimport { HTMLEToolBarItemElement } from \"./ToolBarItem\";\r\nimport { HTMLEToolBarItemGroupElement } from \"./ToolBarItemGroup\";\r\n\r\nexport { HTMLEToolBarItemRadioList };\r\nexport { HTMLEToolBarItemCollection };\r\n\r\ninterface HTMLEToolBarItemCollectionConstructor {\r\n    readonly prototype: HTMLEToolBarItemCollection;\r\n    new(root: HTMLEToolBarElement): HTMLEToolBarItemCollection;\r\n}\r\n\r\ninterface HTMLEToolBarItemCollection {\r\n    length: number;\r\n    item(index: number): HTMLEToolBarItemElement | null;\r\n    namedItem(name: string): HTMLEToolBarItemElement | HTMLEToolBarItemRadioList | null;\r\n    values(): IterableIterator<HTMLEToolBarItemElement>;\r\n}\r\n\r\ninterface HTMLEToolBarItemRadioListConstructor {\r\n    readonly prototype: HTMLEToolBarItemRadioList;\r\n    new(root: HTMLEToolBarElement, name: string): HTMLEToolBarItemRadioList;\r\n}\r\n\r\ninterface HTMLEToolBarItemRadioList {\r\n    value: string;\r\n    values(): IterableIterator<HTMLEToolBarItemElement>;\r\n}\r\n\r\nclass HTMLEToolBarItemCollectionBase implements HTMLEToolBarItemCollection {\r\n    #walker: TreeWalker;\r\n\r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLEToolBarElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEToolBarItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEToolBarItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEToolBarItemElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEToolBarItemElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEToolBarItemElement | HTMLEToolBarItemRadioList | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEToolBarItemElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEToolBarItemElement | null>walker.nextNode();\r\n        }\r\n        if (currentNode && currentNode.type == \"radio\") {\r\n            return new HTMLEToolBarItemRadioList(<HTMLEToolBarElement>walker.root, name);\r\n        }\r\n        return <HTMLEToolBarItemElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEToolBarItemElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEToolBarItemElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n\r\n    static HTMLEToolBarItemRadioListBase? = class HTMLEToolBarItemRadioListBase implements HTMLEToolBarItemRadioList {\r\n        #walker: TreeWalker;\r\n        #name: string;\r\n\r\n        get value(): string {\r\n            const name = this.#name;\r\n            const walker = this.#walker;\r\n            walker.currentNode = walker.root;\r\n            let currentNode = <HTMLEToolBarItemElement | null>walker.nextNode();\r\n            while (currentNode !== null) {\r\n                if (currentNode.name == name && currentNode.type == \"radio\" && currentNode.checked) {\r\n                    return currentNode.value;\r\n                }\r\n                currentNode = <HTMLEToolBarItemElement | null>walker.nextNode();\r\n            }\r\n            return \"\";\r\n        }\r\n\r\n        constructor(root: HTMLEToolBarElement, name: string) {\r\n            this.#walker = document.createTreeWalker(\r\n                root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n            );\r\n            this.#name = name;\r\n        }\r\n        \r\n        #nodeFilter(node: Node): number {\r\n            if (node instanceof HTMLEToolBarItemElement) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            if (node instanceof HTMLEToolBarItemGroupElement) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n            return NodeFilter.FILTER_REJECT;\r\n        }\r\n\r\n        *values(): IterableIterator<HTMLEToolBarItemElement> {\r\n            const name = this.#name;\r\n            const walker = this.#walker;\r\n            walker.currentNode = walker.root;\r\n            let currentNode = <HTMLEToolBarItemElement | null>walker.nextNode();\r\n            while (currentNode !== null) {\r\n                const {name: itemName, type: itemType} = currentNode;\r\n                if (itemName == name && itemType == \"radio\") {\r\n                    yield currentNode;\r\n                }\r\n                currentNode = <HTMLEToolBarItemElement | null>walker.nextNode();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemCollection: HTMLEToolBarItemCollectionConstructor =  HTMLEToolBarItemCollectionBase;\r\nvar HTMLEToolBarItemRadioList: HTMLEToolBarItemRadioListConstructor = HTMLEToolBarItemCollectionBase.HTMLEToolBarItemRadioListBase!;\r\ndelete HTMLEToolBarItemCollectionBase.HTMLEToolBarItemRadioListBase;","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEToolBarItemElement } from \"./ToolBarItem\";\r\nimport { HTMLEToolBarItemCollection, HTMLEToolBarItemRadioList } from \"./ToolBarItemCollection\";\r\nimport { HTMLEToolBarItemGroupElement } from \"./ToolBarItemGroup\";\r\n\r\nexport { HTMLEToolBarElement };\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\ninterface HTMLEToolBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLEToolBarItemCollection;\r\n    readonly activeItem: HTMLEToolBarItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n}\r\n\r\ninterface HTMLEToolbarElementConstructor {\r\n    readonly prototype: HTMLEToolBarElement;\r\n    new(): HTMLEToolBarElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbar\": HTMLEToolBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbar\"\r\n})\r\nclass HTMLEToolBarElementBase extends HTMLElement implements HTMLEToolBarElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLEToolBarItemCollection;\r\n\r\n    get activeItem(): HTMLEToolBarItemElement | null {\r\n        return this.items.item(this.#activeIndex) ?? null;\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    orientation!: ToolBarOrientation;\r\n\r\n    #walker: TreeWalker;\r\n    #activeIndex: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#activeIndex = -1;\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        this.items = new HTMLEToolBarItemCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"change\", this.#handleChangeEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEToolBarItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEToolBarItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEToolBarItemElement | null>walker.previousSibling();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEToolBarItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEToolBarItemElement | null): void {\r\n        const {activeItem, items} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n            this.#activeIndex = Array.from(items.values()).indexOf(item);\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLESelectElement) {\r\n            const item = target.closest(\"e-toolbaritem\");\r\n            if (item !== null) {\r\n                const {select, type} = item;\r\n                if (target == select && select && type == \"select\") {\r\n                    const {value} = item;\r\n                    const {value: selectValue} = select;\r\n                    if (value !== selectValue) {\r\n                        item.value = selectValue;\r\n                        item.trigger();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEToolBarItemElement) {\r\n            const {type} = target;\r\n            switch (type) {\r\n                /*case \"menubutton\": {\r\n                    const {menubutton} = target;\r\n                    if (menubutton) {\r\n                        const {expanded} = menubutton;\r\n                        if (!expanded) {\r\n                            menubutton.expand();\r\n                            menubutton.menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                case \"select\": {\r\n                    const {select} = target;\r\n                    if (select) {\r\n                        select.toggle();\r\n                    }\r\n                    break;\r\n                }*/\r\n                default: {\r\n                    target.trigger();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {items} = this;\r\n        const activeItem = Array.from(items.values()).find(\r\n            item_i => item_i.contains(<Node>target)\r\n        ) ?? null;\r\n        this.#setActiveItem(activeItem);\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.#setActiveItem(null);\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"menubutton\": {\r\n                            const {menubutton} = activeItem;\r\n                            if (menubutton) {\r\n                                const {expanded} = menubutton;\r\n                                if (!expanded) {\r\n                                    menubutton.expand();\r\n                                    menubutton.menu?.items.item(0)?.focus({preventScroll: true});\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"select\": {\r\n                            const {select} = activeItem;\r\n                            if (select) {\r\n                                select.expand();\r\n                            }\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            activeItem.trigger();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"select\": {\r\n                            activeItem.select?.expand();\r\n                            event.stopPropagation();\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    activeItem.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleTriggerEvent(event: Event): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEToolBarItemElement) {\r\n            const {type, name, value} = target;\r\n            if (type == \"radio\") {\r\n                Array.from(new HTMLEToolBarItemRadioList(this, name).values()).forEach((radio_i) => {\r\n                    radio_i.checked = radio_i.value == value;\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarElement: HTMLEToolbarElementConstructor = HTMLEToolBarElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLETabPanelElement };\r\n\r\ninterface HTMLETabPanelElementConstructor {\r\n    readonly prototype: HTMLETabPanelElement;\r\n    new(): HTMLETabPanelElement;\r\n}\r\n\r\ninterface HTMLETabPanelElement extends HTMLElement {\r\n    name: string;\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tabpanel\"\r\n})\r\nclass HTMLETabPanelElementBase extends HTMLElement implements HTMLETabPanelElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n        \r\n                        :host([hidden]) {\r\n                            display: none;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n}\r\n\r\nvar HTMLETabPanelElement: HTMLETabPanelElementConstructor = HTMLETabPanelElementBase;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tabpanel\": HTMLETabPanelElement,\r\n    }\r\n}","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLETabPanelElement } from \"./TabPanel\";\r\n\r\nexport { ETabChangeEvent };\r\nexport { HTMLETabElement };\r\n\r\ninterface HTMLETabElementConstructor {\r\n    readonly prototype: HTMLETabElement;\r\n    new(): HTMLETabElement;\r\n}\r\n\r\ninterface HTMLETabElement extends HTMLElement {\r\n    name: string;\r\n    active: boolean;\r\n    disabled: boolean;\r\n    controls: string;\r\n    panel: HTMLETabPanelElement | null;\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ntype ETabChangeEvent = CustomEvent<{\r\n    tab: HTMLETabElement;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_tabchange\": ETabChangeEvent,\r\n    }\r\n\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tab\": HTMLETabElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tab\"\r\n})\r\nclass HTMLETabElementBase extends HTMLElement implements HTMLETabElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    #panel: HTMLETabPanelElement | null;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            user-select: none;\r\n                            white-space: nowrap;\r\n\r\n                            padding: 2px 6px;\r\n                            cursor: pointer;\r\n                        }\r\n                        \r\n                        :host([disabled]) {\r\n                            color: lightgray;\r\n                            pointer-events: none;\r\n                        }\r\n        \r\n                        :host([active]) {\r\n                            background-color: lightgray;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n        this.#panel = null;\r\n    }\r\n\r\n    get panel(): HTMLETabPanelElement | null {\r\n        return this.#panel;\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const panel = document.getElementById(this.controls);\r\n        if (panel !== this.#panel && panel instanceof HTMLETabPanelElement) {\r\n            this.#panel = panel;\r\n        }\r\n        if (panel)  {\r\n            panel.hidden = !this.active;\r\n        }\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"active\":\r\n                if (this.active) {\r\n                    this.dispatchEvent(new CustomEvent(\"e_tabchange\", {detail: {tab: this}, bubbles: true}));\r\n                }\r\n                const panel = document.getElementById(this.controls);\r\n                if (panel !== this.panel && panel instanceof HTMLETabPanelElement) {\r\n                    this.#panel = panel;\r\n                }\r\n                if (panel)  {\r\n                    panel.hidden = !this.active;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabElement: HTMLETabElementConstructor = HTMLETabElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLETabElement } from \"./Tab\";\r\n\r\nexport { HTMLETabListElement };\r\n\r\ninterface HTMLETabListElementConstructor {\r\n    readonly prototype: HTMLETabListElement;\r\n    new(): HTMLETabListElement;\r\n}\r\n\r\ninterface HTMLETabListElement extends HTMLElement {\r\n    readonly activeTab: HTMLETabElement | null;\r\n    tabs: HTMLETabElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tablist\": HTMLETabListElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tablist\"\r\n})\r\nclass HTMLETabListElementBase extends HTMLElement implements HTMLETabListElement {\r\n\r\n    tabs: HTMLETabElement[];\r\n\r\n    #activeIndex: number;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                            position: relative;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n        \r\n        this.tabs = [];\r\n        this.#activeIndex = 1;\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeTab(): HTMLETabElement | null {\r\n        return this.tabs[this.#activeIndex] || null;\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n        const slot = this.shadowRoot!.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", (event) => {\r\n\r\n                const tabs = <HTMLETabElement[]>(<HTMLSlotElement>event.target)\r\n                    .assignedElements()\r\n                    .filter(tab => tab instanceof HTMLETabElement);\r\n                this.tabs = tabs;\r\n                this.#activeIndex = this.tabs.findIndex(tab => tab.active);\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event) => {\r\n            switch (event.key) {\r\n                case \"ArrowUp\":\r\n                    this.focusTabAt((this.activeIndex <= 0) ? this.tabs.length - 1 : this.activeIndex - 1);\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    this.focusTabAt((this.activeIndex >= this.tabs.length - 1) ? 0 : this.activeIndex + 1);\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"Enter\":\r\n                    if (this.activeTab) {\r\n                        this.activateTab(this.activeTab);\r\n                    }\r\n                    break;\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"click\", (event) => {\r\n            const target = event.target;\r\n            if (target instanceof HTMLETabElement) {\r\n                target.active = true;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"e_tabchange\", (event) => {\r\n            const targetIndex = this.tabs.indexOf(event.detail.tab);\r\n            this.#activeIndex = targetIndex;\r\n            this.tabs.forEach((thisTab, thisTabIndex) => {\r\n                if (thisTabIndex !== targetIndex) {\r\n                    thisTab.active = false;\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    focusTabAt(index: number): void {\r\n        const tab = this.tabs[index];\r\n        if (tab) {\r\n            this.#activeIndex = index;\r\n            tab.focus();\r\n        }\r\n    }\r\n\r\n    activateTab(tab: HTMLETabElement) {\r\n        if (this.tabs.includes(tab)) {\r\n            tab.active = true;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabListElement: HTMLETabListElementConstructor = HTMLETabListElementBase;","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEToolBarElement } from \"../toolbars/ToolBar\";\r\n\r\nexport { HTMLEListItemElement };\r\n\r\ninterface HTMLEListItemElementConstructor {\r\n    readonly prototype: HTMLEListItemElement;\r\n    new(): HTMLEListItemElement;\r\n}\r\n\r\ninterface HTMLEListItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly badge: HTMLSpanElement | null;\r\n    readonly toolbar: HTMLEToolBarElement | null;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitem\": HTMLEListItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-listitem\"\r\n})\r\nclass HTMLEListItemElementBase extends HTMLElement implements HTMLEListItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    get badge(): HTMLElement | null {\r\n        return this.#badge;\r\n    }\r\n\r\n    get toolbar(): HTMLEToolBarElement | null {\r\n        return this.#toolbar;\r\n    }\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    #badge: HTMLElement | null;\r\n    #toolbar: HTMLEToolBarElement | null;\r\n    #menu: HTMLEMenuElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    textContent: /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                            user-select: none;\r\n                        }\r\n                        \r\n                        :host([droptarget]) {\r\n                            background-color: gainsboro;\r\n                        }\r\n                        \r\n                        [part=\"content\"]:hover {\r\n                            background-color: whitesmoke;\r\n                        }\r\n\r\n                        :host([active]) [part=\"content\"] {\r\n                            background-color: whitesmoke;\r\n                            outline: 1px solid black;\r\n                            outline-offset: -1px;\r\n                        }\r\n\r\n                        :host([selected]) [part=\"content\"] {\r\n                            background-color: gainsboro;\r\n                        }\r\n\r\n                        [part=\"content\"] {\r\n                            display: flex;\r\n                            line-height: 22px;\r\n                        }\r\n                        \r\n                        [part=\"label\"] {\r\n                            order: 0;\r\n                            margin-right: auto;\r\n                            overflow: hidden;\r\n                            text-overflow: ellipsis;\r\n                            white-space: nowrap;\r\n                            pointer-events: none;\r\n                        }\r\n\r\n                        ::slotted([slot=\"toolbar\"]) {\r\n                            order: 1;\r\n                        }\r\n\r\n                        ::slotted([slot=\"badge\"]) {\r\n                            order: 2;\r\n                            pointer-events: none;\r\n                        }\r\n\r\n                        ::slotted([slot=\"menu\"]) {\r\n                            position: absolute;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                part: [\"content\"],\r\n                children: [\r\n                    element(\"span\", {\r\n                        part: [\"label\"]\r\n                    }),\r\n                    element(\"slot\", {\r\n                        properties: {\r\n                            name: \"toolbar\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\", {\r\n                        properties: {\r\n                            name: \"badge\"\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                properties: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#badge = null;\r\n        this.#menu = null;\r\n        this.#toolbar = null;\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this))\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"toolbar\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#toolbar = element instanceof HTMLEToolBarElement ? element : null;\r\n                break;\r\n            }\r\n            case \"badge\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#badge = element instanceof HTMLSpanElement ? element : null;\r\n                break;\r\n            }\r\n            case \"menu\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#menu = element instanceof HTMLEMenuElement ? element : null;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEListItemElement: HTMLEListItemElementConstructor = HTMLEListItemElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEListItemElement } from \"./ListItem\";\r\n\r\nexport { HTMLEListItemGroupElement };\r\n\r\ninterface HTMLEListItemGroupElementConstructor {\r\n    readonly prototype: HTMLEListItemGroupElement;\r\n    new(): HTMLEListItemGroupElement;\r\n}\r\n\r\ninterface HTMLEListItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitemgroup\": HTMLEListItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-listitemgroup\"\r\n})\r\nclass HTMLEListItemGroupElementBase extends HTMLElement implements HTMLEListItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    textContent: /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEListItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEListItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEListItemGroupElement: HTMLEListItemGroupElementConstructor = HTMLEListItemGroupElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEListItemElement } from \"./ListItem\";\r\nimport { HTMLEListItemGroupElement } from \"./ListItemGroup\";\r\n\r\nexport { HTMLEListElement };\r\n\r\ninterface HTMLEListElementConstructor {\r\n    readonly prototype: HTMLEListElement;\r\n    new(): HTMLEListElement;\r\n}\r\n\r\ninterface HTMLEListElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEListItemElement>;\r\n    readonly activeItem: HTMLEListItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    droptarget: boolean;\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    selectedItems(): HTMLEListItemElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-list\": HTMLEListElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-list\"\r\n})\r\nclass HTMLEListElementBase extends HTMLElement implements HTMLEListElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEListItemElement>;\r\n\r\n    get dropTargetItem(): HTMLEListItemElement | null {\r\n        return this.items[this.#dropTargetIndex] ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    #dropTargetIndex: number;\r\n    #activeIndex: number;\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n\r\n                        :host([droptarget]) {\r\n                            outline: 1px solid black;\r\n                            outline-offset: -1px;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\", {\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        this.#dropTargetIndex = -1;\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.items = this.getElementsByTagName(\"e-listitem\");\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEListItemElement | null {\r\n        return this.items[this.activeIndex] ?? null;\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    selectedItems(): HTMLEListItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.#firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEListItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEListItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLEListItemElement, to: HTMLEListItemElement): HTMLEListItemElement[] {\r\n        const items = Array.from(this.items);\r\n        const fromIndex = items.indexOf(from);\r\n        const toIndex = items.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return items.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        selectedItems.forEach((item_i) => {\r\n            if (item_i.selected) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEListItemElement): void {\r\n        const {activeItem, items} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        item.active = true;\r\n        item.tabIndex = 0;\r\n        this.#activeIndex = Array.from(items).indexOf(item);\r\n    }\r\n\r\n    #setDropTargetItem(item: HTMLEListItemElement | null): void {\r\n        const {dropTargetItem, items} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n            this.#dropTargetIndex = Array.from(items).indexOf(item);\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n            this.#dropTargetIndex = -1;\r\n        }\r\n    }\r\n\r\n    #firstItem(): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLEListItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLEListItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEListItemElement): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEListItemElement | null>walker.previousNode();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEListItemElement): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const nextItem = <HTMLEListItemElement | null>walker.nextNode();\r\n        return nextItem;\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent) {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n            target.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey} = event;\r\n        const selectedItems = this.selectedItems();\r\n        if (target instanceof HTMLEListItemElement) {\r\n            if (!shiftKey && !ctrlKey) {\r\n                this.#setSelection(target);\r\n            }\r\n            else if (ctrlKey) {\r\n                (!target.selected) ?\r\n                    this.#addToSelection(target) :\r\n                    this.#removeFromSelection(target);\r\n                event.stopPropagation();\r\n            }\r\n            else if (shiftKey) {\r\n                const lastSelectedItem = selectedItems[selectedItems.length - 1];\r\n                if (lastSelectedItem) {\r\n                    const range = this.#getItemsRange(\r\n                        lastSelectedItem,\r\n                        target\r\n                    );\r\n                    if (range) {\r\n                        if (selectedItems.includes(target)) {\r\n                            this.#removeFromSelection(...range);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(...range);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.#setSelection(target);\r\n                }\r\n                event.stopPropagation();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            this.#setDropTargetItem(target);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n    \r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n        const relatedTargetHost =\r\n            relatedTargetRoot instanceof ShadowRoot ?\r\n            relatedTargetRoot.host :\r\n            relatedTarget;\r\n        if (!this.contains(<Node>relatedTargetHost)) {\r\n            this.#setDropTargetItem(null);\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    const walker = this.#walker;\r\n                    const {root} = walker;\r\n                    const firstItem = <HTMLEListItemElement>(\r\n                        walker.currentNode = walker.parentNode() ?? root, walker.firstChild()\r\n                    );\r\n                    const lastItem = <HTMLEListItemElement>(\r\n                        walker.currentNode = walker.parentNode() ?? root, walker.lastChild()\r\n                    );\r\n                    const range = this.#getItemsRange(\r\n                        firstItem,\r\n                        lastItem\r\n                    );\r\n                    if (range) {\r\n                        this.#setSelection(...range);\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                const {activeItem} = this;\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            this.#setActiveItem(target);\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (!this.#onSelection) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEListItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEListItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEListElement: HTMLEListElementConstructor = HTMLEListElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEDraggableElement };\r\n\r\ninterface HTMLEDraggableElementConstructor {\r\n    readonly prototype: HTMLEDraggableElement;\r\n    new(): HTMLEDraggableElement;\r\n}\r\n\r\ninterface HTMLEDraggableElement extends HTMLElement {\r\n    readonly referee: this | null;\r\n    readonly references: this[];\r\n    selected: boolean;\r\n    dragged: boolean;\r\n    dragovered: boolean;\r\n\r\n    connectedCallback(): void;\r\n    disconnectedCallback(): void;\r\n    getReference(): this;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-draggable\": HTMLEDraggableElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-draggable\"\r\n})\r\nclass HTMLEDraggableElementBase extends HTMLElement implements HTMLEDraggableElement {\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    dragovered!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    dragged!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    #referee: this | null;\r\n    readonly references: this[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            padding: 3px 4px;\r\n                            cursor: pointer;\r\n                            white-space: nowrap;\r\n                            border-radius: 4px;\r\n                            border: 1px solid black;\r\n                            user-select: none;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                            color: lightgray;\r\n                            border-color: lightgray;\r\n                        }\r\n        \r\n                        :host([selected]:active) {\r\n                            cursor: grabbing;\r\n                        }\r\n                        \r\n                        :host([selected]) {\r\n                            cursor: grab;\r\n                            font-weight: bold;\r\n                            outline: 1px auto black;\r\n                        }\r\n        \r\n                        :host([dragovered]) {\r\n                            border-style: dotted;\r\n                        }\r\n                        \r\n                        [part=\"container\"] {\r\n                            display: flex;\r\n                            align-items: center;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                part: [\"container\"],\r\n                children: [\r\n                    element(\"slot\", {\r\n                        properties: {\r\n                            textContent: \"&nbsp;\"\r\n                        }\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.references = [];\r\n        this.#referee = null;\r\n    }\r\n\r\n    get referee(): this | null {\r\n        return this.#referee;\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n        this.draggable = true;\r\n    }\r\n\r\n    disconnectedCallback(): void {\r\n        if (this.referee) {\r\n            const thisRefIndex = this.referee.references.indexOf(this);\r\n            if (thisRefIndex > -1) {\r\n                this.referee.references.splice(thisRefIndex, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    getReference(): this {\r\n        const reference = <this>this.cloneNode(true);\r\n        reference.#referee = this;\r\n        return reference;\r\n    }\r\n}\r\n\r\nvar HTMLEDraggableElement: HTMLEDraggableElementConstructor = HTMLEDraggableElementBase","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\n\r\nexport { HTMLEDragzoneElement };\r\n\r\ninterface HTMLEDragzoneElementConstructor {\r\n    readonly prototype: HTMLEDragzoneElement;\r\n    new(): HTMLEDragzoneElement\r\n}\r\n\r\ninterface HTMLEDragzoneElement extends HTMLElement {\r\n    readonly draggables: HTMLEDraggableElement[];\r\n    readonly selectedDraggables: HTMLEDraggableElement[];\r\n    disabled: boolean;\r\n    selectDraggable(draggable: HTMLEDraggableElement): void;\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void;\r\n    clearSelection(): void;\r\n    connectedCallback(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dragzone\": HTMLEDragzoneElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dragzone\"\r\n})\r\nclass HTMLEDragzoneElementBase extends HTMLElement implements HTMLEDragzoneElement {\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    #draggables: HTMLEDraggableElement[];\r\n    #selectedDraggables: HTMLEDraggableElement[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                        }\r\n        \r\n                        [part=\"container\"] {\r\n                            position: relative;\r\n                            display: flex;\r\n                            flex-direction: column;\r\n                            padding-left: 2px;\r\n                            padding-right: 2px;\r\n                        }\r\n        \r\n                        ::slotted(*) {\r\n                            margin-top: 2px;\r\n                            margin-bottom: 2px;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                part: [\"container\"],\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n        this.#draggables = [];\r\n        this.#selectedDraggables = [];\r\n    }\r\n\r\n    get draggables(): HTMLEDraggableElement[] {\r\n        return this.#draggables;\r\n    }\r\n\r\n    get selectedDraggables(): HTMLEDraggableElement[] {\r\n        return this.#selectedDraggables;\r\n    }\r\n\r\n    selectDraggable(draggable: HTMLEDraggableElement): void {\r\n        if (!this.selectedDraggables.includes(draggable)) {\r\n            this.selectedDraggables.push(draggable);\r\n        }\r\n        if (!draggable.selected) {\r\n            draggable.selected = true;\r\n        }\r\n    }\r\n\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void {\r\n        const index = this.selectedDraggables.indexOf(draggable);\r\n        if (index > -1) {\r\n            if (draggable.selected) {\r\n                draggable.selected = false;\r\n            }\r\n            this.selectedDraggables.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.selectedDraggables.forEach((draggable) => {\r\n            draggable.selected = false;\r\n        });\r\n        this.#selectedDraggables = [];\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const draggables = slot.assignedElements().filter(\r\n                    elem => elem instanceof HTMLEDraggableElement\r\n                ) as HTMLEDraggableElement[];\r\n                this.#draggables = draggables;\r\n                this.draggables.forEach((draggable) => {\r\n                    draggable.draggable = true;\r\n                });\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Escape\":\r\n                    this.clearSelection();\r\n                    this.focus();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragstart\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                this.selectedDraggables.forEach((thisSelectedDraggable) => {\r\n                    thisSelectedDraggable.dragged = true;\r\n                });\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", this.id);\r\n                }\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event) => {\r\n            const dataTransfer = event.dataTransfer;\r\n            if (dataTransfer) {\r\n                dataTransfer.dropEffect = \"none\";\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"dragend\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                const thisDraggedDraggables = this.draggables.filter(draggable => draggable.dragged);\r\n                thisDraggedDraggables.forEach((thisDraggedDraggable) => {\r\n                    thisDraggedDraggable.dragged = false;\r\n                });\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            if (!this.contains(relatedTarget)) {\r\n                this.clearSelection();\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button == 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        if (!target.selected) {\r\n                            this.clearSelection();\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                    else if (event.ctrlKey) {\r\n                        (!target.selected) ?\r\n                            this.selectDraggable(target) :\r\n                            this.unselectDraggable(target);\r\n                    }\r\n                    else if (event.shiftKey) {\r\n                        if (this.selectedDraggables.length > 0) {\r\n                            const targetIndex = this.draggables.indexOf(target);\r\n                            const firstIndex = this.draggables.indexOf(this.selectedDraggables[0]);\r\n                            const direction = Math.sign(targetIndex - firstIndex);\r\n                            const fromIndex = (direction > 0) ? 0 : this.draggables.length - 1;\r\n                            const toIndex = (direction > 0) ? this.draggables.length - 1 : 0;\r\n                            const startRangeIndex = (direction > 0) ? firstIndex : targetIndex;\r\n                            const endRangeIndex = (direction > 0) ? targetIndex : firstIndex;\r\n                            for (let index = fromIndex; index !== (toIndex + direction); index += direction) {\r\n                                (index >= startRangeIndex && index <= endRangeIndex) ? \r\n                                    this.selectDraggable(this.draggables[index]) :\r\n                                    this.unselectDraggable(this.draggables[index]);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.clearSelection();\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mouseup\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button == 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        this.draggables.forEach((thisDraggable) => {\r\n                            if (thisDraggable !== target) {\r\n                                this.unselectDraggable(thisDraggable);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEDragzoneElement: HTMLEDragzoneElementConstructor = HTMLEDragzoneElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\nimport { HTMLEDragzoneElement } from \"./Dragzone\";\r\n\r\nexport { HTMLEDropzoneElement };\r\nexport { EDataChangeEvent };\r\n\r\ninterface HTMLEDropzoneElementConstructor {\r\n    readonly prototype: HTMLEDropzoneElement;\r\n    new(): HTMLEDropzoneElement;\r\n}\r\n\r\ninterface HTMLEDropzoneElement extends HTMLEDragzoneElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    dragovered: DropzoneDragoveredType | null;\r\n    name: string;\r\n    multiple: boolean;\r\n    placeholder: string;\r\n\r\n    droptest: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => void) | null;\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): void;\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean): void;\r\n\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ntype DropzoneDragoveredType = \"self\" | \"draggable\" | \"appendarea\";\r\n\r\ntype EDataChangeEvent = CustomEvent<{\r\n    action: \"insert\" | \"remove\";\r\n    draggables: HTMLEDraggableElement[];\r\n    position: number;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dropzone\": HTMLEDropzoneElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"e_datachange\": EDataChangeEvent,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dropzone\"\r\n})\r\nclass HTMLEDropzoneElementBase extends HTMLEDragzoneElement implements HTMLEDropzoneElement {\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    dragovered!: DropzoneDragoveredType | null;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    placeholder!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    multiple!: boolean;\r\n\r\n    droptest!: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => boolean) | null;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.shadowRoot!.querySelector(\"style\")!.append(/*css*/`\r\n            :host {\r\n                border: 1px dashed gray;\r\n            }\r\n\r\n            :host(:not([multiple]):not(:empty)) [part=\"appendarea\"],\r\n            :host(:not(:empty):not([dragovered])) [part=\"appendarea\"] {\r\n                display: none !important;\r\n            }\r\n\r\n            [part=\"appendarea\"] {\r\n                display: block;\r\n                margin: 2px;\r\n                border-radius: 4px;\r\n                border: 1px dotted black;\r\n            }\r\n\r\n            :host(:not([dragovered=\"appendarea\"])) [part=\"appendarea\"] {\r\n                border-color: transparent;\r\n            }\r\n            \r\n            [part=\"placeholder\"] {\r\n                display: inline-block;\r\n                color: grey;\r\n                pointer-events: none;\r\n                user-select: none;\r\n            }\r\n        `);\r\n\r\n        this.shadowRoot.append(\r\n            element(\"div\", {\r\n                part: [\"appendarea\"],\r\n                children: [\r\n                    element(\"span\", {\r\n                        part: [\"placeholder\"],\r\n                        properties: {\r\n                            textContent: \"&nbsp;\"\r\n                        }\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.droptest = null;\r\n    }\r\n    \r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        const appendAreaPart = this.shadowRoot!.querySelector<HTMLDivElement>(\"[part='appendarea']\");\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Delete\":\r\n                    if (this == event.target) {\r\n                        this.removeDraggables();\r\n                    }\r\n                    else {\r\n                        this.removeDraggables(draggable => draggable.selected);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragover\", (event: DragEvent) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragover\", (event) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragenter\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                target.dragovered = true;\r\n                this.dragovered = \"draggable\";\r\n            }\r\n            else {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragenter\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"appendarea\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event: DragEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                if (target == this) {\r\n                    if (appendAreaPart) {\r\n                        this.dragovered = \"self\";\r\n                    }\r\n                    if (!this.draggables.includes(relatedTarget)) {\r\n                        this.dragovered = null;\r\n                    }\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                }\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragleave\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n        \r\n        this.addEventListener(\"drop\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                let dropIndex = this.draggables.length;\r\n                if (target == this) {\r\n                    this.dragovered = null;\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                    dropIndex = this.draggables.indexOf(target);\r\n                }\r\n\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    const dragzoneId = dataTransfer.getData(\"text/plain\");\r\n                    const dragzone = document.getElementById(dragzoneId);\r\n                    if (dragzone instanceof HTMLEDragzoneElement) {\r\n                        const selectedDraggables = dragzone.selectedDraggables;\r\n                        if (selectedDraggables) {\r\n                            selectedDraggables.forEach((selectedDraggable) => {\r\n                                selectedDraggable.dragged = false;\r\n                            });\r\n                            if (dragzone instanceof HTMLEDropzoneElement) {\r\n                                dragzone.removeDraggables((draggable) => selectedDraggables.includes(draggable));\r\n                            }\r\n                            dragzone.clearSelection();\r\n                            this.addDraggables(selectedDraggables, dropIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.dragovered = null;\r\n            event.preventDefault();\r\n        });\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"placeholder\": {\r\n                const placeholderPart = this.shadowRoot.querySelector(\"[part='placeholder']\");\r\n                if (placeholderPart) {\r\n                    placeholderPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): HTMLEDraggableElement[] | null {\r\n        if (draggables.length > 0) {\r\n            let dataTransferSuccess = true;\r\n            if (this.droptest) {\r\n                dataTransferSuccess = this.droptest(this, draggables);\r\n            }\r\n            \r\n            let newDraggables: HTMLEDraggableElement[] = [];\r\n            let insertionPosition = -1;\r\n            if (dataTransferSuccess) {\r\n                if (this.multiple) {\r\n                    draggables.forEach((draggable) => {\r\n                        let newDraggable = draggable.getReference();\r\n                        if (position > -1 && position < this.draggables.length) {\r\n                            this.draggables[position].insertAdjacentElement(\"beforebegin\", newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? position : insertionPosition;\r\n                        }\r\n                        else {\r\n                            this.appendChild(newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? this.draggables.length - 1 : insertionPosition;\r\n                        }\r\n                        newDraggables.push(newDraggable);\r\n                    });\r\n                }\r\n                else {\r\n                    let newDraggable = draggables[0].getReference();\r\n                    if (this.draggables.length > 0) {\r\n                        this.replaceChild(newDraggable, this.draggables[0]);\r\n                    }\r\n                    else {\r\n                        this.appendChild(newDraggable);\r\n                    }\r\n                    newDraggables.push(newDraggable);\r\n                    insertionPosition = 0;\r\n                }\r\n            }\r\n            \r\n            const slot = this.shadowRoot?.querySelector(\"slot\");\r\n            if (slot) {\r\n                slot.addEventListener(\"slotchange\", () => {\r\n                    this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                        bubbles: true,\r\n                        detail: {\r\n                            action: \"insert\",\r\n                            draggables: newDraggables,\r\n                            position: insertionPosition\r\n                        }\r\n                    }));\r\n                }, {once: true});\r\n            }\r\n            return newDraggables;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean = () => true) {\r\n        let toRemove = this.draggables.filter(\r\n            (value: HTMLEDraggableElement, index: number) => {\r\n                return predicate(value, index);\r\n            }\r\n        );\r\n        let atPosition = this.draggables.indexOf(toRemove[0]);\r\n        toRemove.forEach((draggable) => {\r\n            draggable.remove(); \r\n        });\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                    bubbles: true,\r\n                    detail: {\r\n                        action: \"remove\",\r\n                        draggables: toRemove,\r\n                        position: atPosition\r\n                    }\r\n                }));\r\n            }, {once: true});\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEDropzoneElement: HTMLEDropzoneElementConstructor = HTMLEDropzoneElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEDialogElement };\r\n\r\ninterface HTMLEDialogElementConstructor {\r\n    readonly prototype: HTMLEDialogElement;\r\n    new(): HTMLEDialogElement;\r\n}\r\n\r\ntype DialogElementType = \"confirm\" | \"alert\";\r\n\r\ninterface HTMLEDialogElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: DialogElementType;\r\n    open(): void;\r\n    close(): void;\r\n    cancel(): void;\r\n    confirm(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dialog\": HTMLEDialogElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"open\": Event,\r\n        \"close\": Event,\r\n        \"cancel\": Event,\r\n        \"confirm\": Event,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dialog\"\r\n})\r\nclass HTMLEDialogElementBase extends HTMLElement implements HTMLEDialogElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: DialogElementType;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            padding: 6px;\r\n                            background-color: white;\r\n        \r\n                            -webkit-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            -moz-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                        }\r\n        \r\n                        button {\r\n                            cursor: pointer;\r\n                        }\r\n        \r\n                        [part=\"actions\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part=\"header\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part=\"button\"]:not(:first-child) {\r\n                            margin-left: 4px;\r\n                        }\r\n        \r\n                        :host([type=\"confirm\"]) [part=\"ok-button\"] {\r\n                            display: none !important;\r\n                        }\r\n        \r\n                        :host([type=\"alert\"]) [part=\"cancel-button\"],\r\n                        :host([type=\"alert\"]) [part=\"confirm-button\"] {\r\n                            display: none !important;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                part: [\"header\"],\r\n                children: [\r\n                    element(\"button\", {\r\n                        part: [\"button\", \"close-button\"],\r\n                        properties: {\r\n                            textContent: \"x\",\r\n                            type: \"button\",\r\n                            tabIndex: 0\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"hr\", {\r\n                part: [\"separator\"]\r\n            }),\r\n            element(\"div\", {\r\n                part: [\"body\"],\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"hr\", {\r\n                part: [\"separator\"]\r\n            }),\r\n            element(\"div\", {\r\n                part: [\"actions\"],\r\n                children: [\r\n                    element(\"button\", {\r\n                        part: [\"button\", \"cancel-button\"],\r\n                        properties: {\r\n                            textContent: \"Cancel\",\r\n                            type: \"button\",\r\n                            tabIndex: 0\r\n                        }\r\n                    }),\r\n                    element(\"button\", {\r\n                        part: [\"button\", \"confirm-button\"],\r\n                        properties: {\r\n                            textContent: \"Confirm\",\r\n                            type: \"button\",\r\n                            tabIndex: 0\r\n                        }\r\n                    }),\r\n                    element(\"button\", {\r\n                        part: [\"button\", \"ok-button\"],\r\n                        properties: {\r\n                            textContent: \"OK\",\r\n                            type: \"button\",\r\n                            tabIndex: 0\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n        );\r\n    }\r\n\r\n    connectedCallback() {\r\n        this.shadowRoot.addEventListener(\"click\", this);\r\n    }\r\n\r\n    handleEvent(event: Event) {\r\n        const {type, target} = event;\r\n        switch (type) {\r\n            case \"click\":\r\n                const {part} = <Element>target;\r\n                if (part.contains(\"close-button\") || part.contains(\"cancel-button\")) {\r\n                    this.cancel();\r\n                }\r\n                else if (part.contains(\"confirm-button\") || part.contains(\"ok-button\")) {\r\n                    this.confirm();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    open(): void {\r\n        this.dispatchEvent(new CustomEvent(\"open\", {bubbles: true}));\r\n    }\r\n\r\n    close(): void {\r\n        this.dispatchEvent(new CustomEvent(\"close\", {bubbles: true}));\r\n    }\r\n\r\n    cancel(): void {\r\n        this.dispatchEvent(new CustomEvent(\"cancel\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n\r\n    confirm(): void {\r\n        this.dispatchEvent(new CustomEvent(\"confirm\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n}\r\n\r\nvar HTMLEDialogElement: HTMLEDialogElementConstructor = HTMLEDialogElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEHandleElement };\r\n\r\ninterface HTMLEHandleElementConstructor {\r\n    readonly prototype: HTMLEHandleElement;\r\n    new(): HTMLEHandleElement;\r\n}\r\n\r\ninterface HTMLEHandleElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    controls: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-handle\": HTMLEHandleElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"move\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-handle\"\r\n})\r\nclass HTMLEHandleElementBase extends HTMLElement implements HTMLEHandleElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                            \r\n                            width: 24px;\r\n                            height: 12px;\r\n                            \r\n                            background-color: rgb(0, 128, 255);\r\n\r\n                            -webkit-mask-image: url(\"assets/dots.png\");\r\n                            mask-image: url(\"assets/dots.png\");\r\n\r\n                            -webkit-mask-repeat: repeat;\r\n                            mask-repeat: repeat;\r\n                            cursor: move;\r\n                        }\r\n                    `\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"controls\": {\r\n                const {controls} = this;\r\n                this.#target = document.getElementById(controls);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        this.#target = document.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            const target = this.#target;\r\n            if (target !== null) {\r\n                const targetComputedStyle = window.getComputedStyle(target);\r\n                const {movementX, movementY} = event;\r\n                const {width: rectWidth, height: rectHeight} = target.getBoundingClientRect();\r\n                const outerElement = target.parentElement ?? document.body;\r\n                const {\r\n                    left: outerRectLeft, right: outerRectRight,\r\n                    top: outerRectTop, bottom: outerRectBottom\r\n                } = outerElement.getBoundingClientRect();\r\n                const left = parseFloat(targetComputedStyle.getPropertyValue(\"left\"));\r\n                const newLeft = Math.max(outerRectLeft, Math.min(Math.trunc(left + movementX), outerRectRight - rectWidth));\r\n                const top = parseFloat(targetComputedStyle.getPropertyValue(\"top\"));\r\n                const newTop = Math.max(outerRectTop, Math.min(Math.trunc(top + movementY), outerRectBottom - rectHeight));\r\n                target.style.setProperty(\"left\", `${newLeft}px`);\r\n                target.style.setProperty(\"top\", `${newTop}px`);\r\n                this.dispatchEvent(new CustomEvent(\"move\"));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEHandleElement: HTMLEHandleElementConstructor = HTMLEHandleElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEHeightSashElement };\r\n\r\ninterface HTMLEHeightSashElementConstructor {\r\n    readonly prototype: HTMLEHeightSashElement;\r\n    new(): HTMLEHeightSashElement;\r\n}\r\n\r\ninterface HTMLEHeightSashElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    controls: string;\r\n    growdir: \"top\" | \"bottom\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-hsash\": HTMLEHeightSashElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"resize\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-hsash\"\r\n})\r\nclass HTMLEHeightSashElementBase extends HTMLElement implements HTMLEHeightSashElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"top\"})\r\n    growdir!: \"top\" | \"bottom\";\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n    #queuedPointerCallback: FrameRequestCallback | null;\r\n    #pointerMovement: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            width: 100%;\r\n        \r\n                            max-height: 4px;\r\n                            height: 4px;\r\n                            min-height: 4px;\r\n        \r\n                            margin-top: -2px;\r\n                            margin-bottom: -2px;\r\n                            \r\n                            background-color: rgb(135, 206, 250);\r\n                            cursor: ns-resize;\r\n        \r\n                            transition-property: opacity;\r\n                            transition-delay: 0.2s;\r\n                            transition-duration: 0.2s;\r\n                            transition-timing-function: ease-out;\r\n                            opacity: 0;\r\n                        }\r\n        \r\n                        :host(:active),\r\n                        :host(:hover) {\r\n                            opacity: 1;\r\n                        }\r\n                    `\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#queuedPointerCallback = null;\r\n        this.#pointerMovement = 0;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        const rootNode = <ShadowRoot | Document>this.getRootNode();\r\n        this.#target = rootNode.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            if (this.#queuedPointerCallback == null) {\r\n                this.#pointerMovement = event.movementY;\r\n                this.#queuedPointerCallback = this.#pointerMoveCallback.bind(this);\r\n                requestAnimationFrame(this.#queuedPointerCallback);\r\n            }\r\n            else {\r\n                this.#pointerMovement += event.movementY;\r\n            }\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const {growdir} = this;\r\n            const movementY = this.#pointerMovement;\r\n            const height = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            const newHeight = Math.trunc(height + (growdir == \"top\" ? -1 : 1) * movementY);\r\n            target.style.setProperty(\"height\", `${newHeight}px`);\r\n            const computedNewHeight = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            target.style.setProperty(\"height\", `${computedNewHeight}px`);\r\n            this.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        this.#queuedPointerCallback = null;\r\n    }\r\n}\r\n\r\nvar HTMLEHeightSashElement: HTMLEHeightSashElementConstructor = HTMLEHeightSashElementBase;","import { CustomElement, AttributeProperty } from \"../Element\";\r\n\r\nexport { HTMLEImportElement };\r\n\r\ninterface HTMLEImportElementConstructor {\r\n    readonly prototype: HTMLEImportElement;\r\n    new(): HTMLEImportElement;\r\n}\r\n\r\ninterface HTMLEImportElement extends HTMLElement {\r\n    src: string;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-import\": HTMLEImportElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"load\": Event;\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-import\"\r\n})\r\nclass HTMLEImportElementBase extends HTMLElement implements HTMLEImportElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    src!: string;\r\n    \r\n    connectedCallback(): void {\r\n        const {src} = this;\r\n        if (src) {\r\n            this.#importRequest(src);\r\n        }\r\n    }\r\n\r\n    async #importRequest(src: string): Promise<void> {\r\n        this.outerHTML = await fetch(src).then((response: Response) => {\r\n            if (response.ok) {\r\n                return response.text();\r\n            }\r\n            else {\r\n                throw new Error(response.statusText);\r\n            }\r\n        });\r\n        this.dispatchEvent(new Event(\"load\", {bubbles: true}));\r\n    }\r\n}\r\n\r\nvar HTMLEImportElement: HTMLEImportElementConstructor = HTMLEImportElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLELoaderElement };\r\n\r\ninterface HTMLELoaderElementConstructor {\r\n    readonly prototype: HTMLELoaderElement;\r\n    new(): HTMLELoaderElement;\r\n}\r\n\r\ninterface HTMLELoaderElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    type: \"bar\" | \"circle\";\r\n    promise: Promise<any> | null;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-loader\": HTMLELoaderElement,\r\n    }\r\n}\r\n\r\nvar barShadowTemplate: HTMLTemplateElement;\r\nvar circleShadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-loader\"\r\n})\r\nclass HTMLELoaderElementBase extends HTMLElement implements HTMLELoaderElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String, defaultValue: \"bar\", observed: true})\r\n    type!: \"bar\" | \"circle\";\r\n    \r\n    #promise: Promise<any> | null;\r\n\r\n    static {\r\n        const commonStyle = element(\"style\", {\r\n            properties: {\r\n                innerText: /*css*/`\r\n                    :host {\r\n                        display: inline-block;\r\n                        --default-loader-color: rgb(0, 128, 255);\r\n                        --default-animation-duration: 2s;\r\n                    }\r\n                `\r\n            }\r\n        });\r\n        const barStyle = commonStyle.cloneNode(true);\r\n        const circleStyle = commonStyle.cloneNode(true);\r\n        barStyle.textContent += /*css*/`\r\n            :host {\r\n                display: block;\r\n            }\r\n\r\n            [part=\"bar\"] {\r\n                position: relative;\r\n                display: block;\r\n                overflow: hidden;\r\n                height: 6px;\r\n                width: 100%;\r\n            }\r\n\r\n            [part=\"slider\"] {\r\n                display: flex;\r\n                position: absolute;\r\n                width: 100%;\r\n                height: 100%;\r\n                animation-name: slider;\r\n            }\r\n\r\n            [part=\"slider\"],\r\n            [part=\"cursor\"] {\r\n                border-radius: 4px;\r\n                will-change: transform;\r\n                animation-duration: var(--animation-duration, var(--default-animation-duration));\r\n                animation-timing-function: linear;\r\n                animation-iteration-count: infinite;\r\n            }\r\n\r\n            [part=\"cursor\"] {\r\n                display: block;\r\n                width: 128px;\r\n                background-color: var(--loader-color, var(--default-loader-color));\r\n                animation-name: cursor;\r\n            }\r\n\r\n            [part=\"bar\"]:after {\r\n                animation-name: shine;\r\n                animation-duration: var(--animation-duration, var(--default-animation-duration));\r\n                animation-iteration-count: infinite;\r\n                animation-fill-mode: forwards;  \r\n                content: \"\";\r\n                position: absolute;\r\n                left: -100%;\r\n                width: 100%;\r\n                height: 100%;\r\n                top: 0;\r\n                opacity: 0;\r\n                \r\n                background: rgba(255, 255, 255, 0.13);\r\n                background: linear-gradient(\r\n                    to right, \r\n                    rgba(255, 255, 255, 0) 0%,\r\n                    rgba(255, 255, 255, 0.1) 10%,\r\n                    rgba(255, 255, 255, 0.9) 80%,\r\n                    rgba(255, 255, 255, 0) 100%\r\n                );\r\n            }\r\n\r\n            @keyframes shine {\r\n                25% {\r\n                    opacity: 1;\r\n                    left: -100%;\r\n                }\r\n                100% {\r\n                    opacity: 0;\r\n                    left: 100%;\r\n                }\r\n            }\r\n\r\n            @keyframes slider {\r\n                0% {\r\n                    transform: translateX(0%);\r\n                }\r\n                100% {\r\n                    transform: translateX(100%);\r\n                }\r\n            }\r\n\r\n            @keyframes cursor {\r\n                0% {\r\n                    transform: translateX(-100%);\r\n                }\r\n                100% {\r\n                    transform: translateX(100%);\r\n                }\r\n            }\r\n        `;\r\n        circleStyle.textContent += /*css*/`\r\n            :host {\r\n                display: inline-block;\r\n            }\r\n\r\n            [part=\"circle\"] {\r\n                width: 12px;\r\n                height: 12px;\r\n                border-top: 4px solid var(--loader-color, var(--default-loader-color));\r\n                border-right: 4px solid var(--loader-color, var(--default-loader-color));\r\n                border-left: 4px solid transparent;\r\n                border-bottom: 4px solid transparent;\r\n                border-radius: 50%;\r\n                animation-duration: 1s;\r\n                animation-name: circle;\r\n                animation-timing-function: linear;\r\n                animation-iteration-count: infinite;\r\n            }\r\n\r\n            @keyframes circle {\r\n                0% {\r\n                    transform: rotate(0);\r\n                }\r\n                100% {\r\n                    transform: rotate(360deg);\r\n                }\r\n            }\r\n        `;\r\n        barShadowTemplate = element(\"template\");\r\n        barShadowTemplate.content.append(\r\n            barStyle,\r\n            element(\"div\", {\r\n                part: [\"bar\"],\r\n                children: [\r\n                    element(\"div\", {\r\n                        part: [\"slider\"],\r\n                        children: [\r\n                            element(\"div\", {\r\n                                part: [\"cursor\"]\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n        circleShadowTemplate = element(\"template\");\r\n        circleShadowTemplate.content.append(\r\n            circleStyle,\r\n            element(\"div\", {\r\n                part: [\"circle\"]\r\n            })\r\n        )\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.#updateTemplate();\r\n        this.#promise = null;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"type\": {\r\n                this.#updateTemplate();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    set promise(promise: Promise<any> | null) {\r\n        if (promise) {\r\n            promise.finally(() => {\r\n                this.remove();\r\n            });\r\n        }\r\n        this.#promise = promise;\r\n    }\r\n\r\n    get promise(): Promise<any> | null {\r\n        return this.#promise;\r\n    }\r\n\r\n    #updateTemplate(): void {\r\n        const {type, shadowRoot} = this;\r\n        switch (type) {\r\n            case \"circle\": {\r\n                shadowRoot.replaceChildren(\r\n                    circleShadowTemplate.content.cloneNode(true)\r\n                );\r\n                break;\r\n            }\r\n            case \"bar\": {\r\n                shadowRoot.replaceChildren(\r\n                    barShadowTemplate.content.cloneNode(true)\r\n                );\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLELoaderElement: HTMLELoaderElementConstructor = HTMLELoaderElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEWidthSashElement };\r\n\r\ninterface HTMLEWidthSashElementConstructor {\r\n    readonly prototype: HTMLEWidthSashElement;\r\n    new(): HTMLEWidthSashElement;\r\n}\r\n\r\ninterface HTMLEWidthSashElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    controls: string;\r\n    growdir: \"right\" | \"left\";\r\n    max: boolean;\r\n    setWidth(width: number): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-wsash\": HTMLEWidthSashElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"resize\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-wsash\"\r\n})\r\nclass HTMLEWidthSashElementBase extends HTMLElement implements HTMLEWidthSashElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"right\"})\r\n    growdir!: \"right\" | \"left\";\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    max!: boolean;\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n    #queuedPointerCallback: FrameRequestCallback | null;\r\n    #pointerMovement: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            width: 4px;\r\n                            \r\n                            background-color: rgb(135, 206, 250);\r\n                            cursor: ew-resize;\r\n        \r\n                            transition-property: opacity;\r\n                            transition-delay: 0.2s;\r\n                            transition-duration: 0.2s;\r\n                            transition-timing-function: ease-out;\r\n                            opacity: 0;\r\n                        }\r\n        \r\n                        :host(:active),\r\n                        :host(:hover) {\r\n                            opacity: 1;\r\n                        }\r\n                    `\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#queuedPointerCallback = null;\r\n        this.#pointerMovement = 0;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    setWidth(width: number): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const {max} = this;\r\n            target.style.setProperty(\"width\", `${width}px`);\r\n            if (max) {\r\n                target.style.setProperty(\"max-width\", `${width}px`);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        const rootNode = <ShadowRoot | Document>this.getRootNode();\r\n        this.#target = rootNode.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            if (this.#queuedPointerCallback == null) {\r\n                this.#queuedPointerCallback = this.#pointerMoveCallback.bind(this);\r\n                requestAnimationFrame(this.#queuedPointerCallback);\r\n            }\r\n            this.#pointerMovement += event.movementX;\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const {growdir} = this;\r\n            const movementX = this.#pointerMovement;\r\n            const width = parseFloat(targetComputedStyle.getPropertyValue(\"width\"));\r\n            const newWidth = width + (growdir == \"right\" ? 1 : -1) * movementX;\r\n            this.setWidth(newWidth);\r\n            this.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        this.#pointerMovement = 0;\r\n        this.#queuedPointerCallback = null;\r\n    }\r\n}\r\n\r\nvar HTMLEWidthSashElement: HTMLEWidthSashElementConstructor = HTMLEWidthSashElementBase;","import { areAttributesMatching, AttributeMutationMixin } from \"../elements/Element\";\r\n\r\nexport { AttributeMixinsObserver };\r\n\r\ninterface AttributeMixinsObserverConstructor {\r\n    readonly prototype: AttributeMixinsObserver;\r\n    new(mixins: AttributeMutationMixin[]): AttributeMixinsObserver;\r\n}\r\n\r\ninterface AttributeMixinsObserver {\r\n    observe(target: Node): void;\r\n    trigger(): void;\r\n    disconnect(): void;\r\n}\r\n\r\nclass AttributeMixinsObserverBase implements AttributeMixinsObserver {\r\n    #observer: MutationObserver;\r\n    #mixins: AttributeMutationMixin[];\r\n\r\n    constructor(mixins: AttributeMutationMixin[]) {\r\n        this.#observer = new MutationObserver(\r\n            this.#callback.bind(this)\r\n        );\r\n        this.#mixins = mixins.slice();\r\n    }\r\n\r\n    trigger(): void {\r\n        this.#callback(this.#observer.takeRecords());\r\n    }\r\n\r\n    observe(target: Node): void  {\r\n        this.#observer.observe(target, {\r\n            childList: true,\r\n            subtree: true,\r\n            attributeFilter: this.#mixins.map((mixin => mixin.attributeName))\r\n        });\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#observer.disconnect();\r\n    }\r\n\r\n    #callback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            mutation.addedNodes.forEach((node: Node) => {\r\n                if (node instanceof Element) {\r\n                    this.#attachMatchingAttributeMixinsInSubtree(node);\r\n                }\r\n            });\r\n            mutation.removedNodes.forEach((node: Node) => {\r\n                if (node instanceof Element) {\r\n                    this.#detachMatchingAttributeMixinsInSubtree(node);\r\n                }\r\n            });\r\n            if (mutation.target instanceof Element) {\r\n                const targetElement = mutation.target;\r\n                const attributeName = mutation.attributeName;\r\n                if (attributeName) {\r\n                    const relatedMixins = this.#mixins.filter(mixin => mixin.attributeName == attributeName);\r\n                    relatedMixins.forEach((mixin) => {\r\n                        if (areAttributesMatching(\r\n                                mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                                attributeName!, targetElement.getAttribute(attributeName!)\r\n                            )) {\r\n                                mixin.attach(targetElement);\r\n                        }\r\n                        else {\r\n                            mixin.detach(targetElement);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    #attachMatchingAttributeMixinsInSubtree(element: Element) {\r\n        Array.from(element.attributes).forEach((attr) => {\r\n            let matchingMixins = this.#mixins.filter(\r\n                mixin => areAttributesMatching(\r\n                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                    attr.name, attr.value\r\n                )\r\n            );\r\n            matchingMixins.forEach((mixin) => {\r\n                mixin.attach(element);\r\n            });\r\n        });\r\n        let childIndex = 0;\r\n        const {children} = element;\r\n        while (childIndex < children.length) {\r\n            const child = children.item(childIndex);\r\n            if (child !== null) {\r\n                this.#attachMatchingAttributeMixinsInSubtree(child);\r\n            }\r\n            childIndex++;\r\n        }\r\n    }\r\n\r\n    #detachMatchingAttributeMixinsInSubtree(element: Element) {\r\n        Array.from(element.attributes).forEach((attr) => {\r\n            let matchingMixins = this.#mixins.filter(\r\n                mixin => areAttributesMatching(\r\n                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                    attr.name, attr.value\r\n                )\r\n            );\r\n            matchingMixins.forEach((mixin) => {\r\n                mixin.detach(element);\r\n            });\r\n        });\r\n        let childIndex = 0;\r\n        const {children} = element;\r\n        while (childIndex < children.length) {\r\n            const child = children.item(childIndex);\r\n            if (child !== null) {\r\n                this.#detachMatchingAttributeMixinsInSubtree(child);\r\n            }\r\n            childIndex++;\r\n        }\r\n    }\r\n}\r\n\r\nvar AttributeMixinsObserver: AttributeMixinsObserverConstructor = AttributeMixinsObserverBase;","import { HTMLEListElement } from \"../elements/containers/lists/List\";\r\nimport { HTMLEListItemElement } from \"../elements/containers/lists/ListItem\";\r\nimport { EMenu } from \"../elements/containers/menus/Menu\";\r\nimport { EMenuButton } from \"../elements/containers/menus/MenuButton\";\r\nimport { HTMLEMenuItemElement, EMenuItem } from \"../elements/containers/menus/MenuItem\";\r\nimport { EMenuItemGroup } from \"../elements/containers/menus/MenuItemGroup\";\r\nimport { EToolBarItem } from \"../elements/containers/toolbars/ToolBarItem\";\r\nimport { element, reactiveChildElements, reactiveElement, CustomElement, Fragment } from \"../elements/Element\";\r\nimport { ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\n\r\nexport { ListModel };\r\nexport { ListItemModel };\r\nexport { ListView };\r\n\r\nclass ListModel extends ModelObject {\r\n    readonly items: ModelList<ListItemModel>;\r\n    sortFunction: ((item_a: ListItemModel, item_b: ListItemModel) => number) | null;\r\n    \r\n    constructor()\r\n    constructor(init: {items: ListItemModel[], sortFunction?: (item_a: ListItemModel, item_b: ListItemModel) => number})\r\n    constructor(init?: {items: ListItemModel[], sortFunction?: (item_a: ListItemModel, item_b: ListItemModel) => number}) {\r\n        super();\r\n        const sortFunction = init?.sortFunction ?? function(item_a: ListItemModel, item_b: ListItemModel) {\r\n            return item_a.label.localeCompare(item_b.label);\r\n        };\r\n        const items = new ModelList(init?.items ?? []);\r\n        items.setParent(this);\r\n        this.sortFunction = sortFunction;\r\n        this.items = items;\r\n    }\r\n\r\n    getItemByIndex(index: number): ListItemModel | null {\r\n        return this.items.get(index);\r\n    }\r\n}\r\n\r\ninterface TreeItem {\r\n    show(): void;\r\n    hide(): void;\r\n    display(): void;\r\n    remove(): void;\r\n}\r\n\r\nclass ListItemList implements TreeItem {\r\n    #items: ListItemModel[];\r\n\r\n    constructor(items: ListItemModel[]) {\r\n        this.#items = items;\r\n    }\r\n\r\n    static from(items: ListItemModel[]): ListItemList {\r\n        return new ListItemList(items);\r\n    }\r\n\r\n    show(): void {\r\n        const items = this.#items;\r\n        items.forEach(item_i => {\r\n            item_i.show();\r\n        });\r\n    }\r\n\r\n    hide(): void {\r\n        const items = this.#items;\r\n        items.forEach(item_i => {\r\n            item_i.hide();\r\n        });\r\n    }\r\n\r\n    display(): void {\r\n        const items = this.#items;\r\n        const result = items.reduce(\r\n            (result, item_i) => `${result} ${item_i.label}`, \"\"\r\n        );\r\n        console.log(result);\r\n    }\r\n\r\n    remove(): void {\r\n        const items = this.#items;\r\n        const removedItemsGroups = items.reduce((map, item_i) => {\r\n            const {parentNode} = item_i;\r\n            if (parentNode instanceof ListModel) {\r\n                const {items} = parentNode;\r\n                const group = map.get(items);\r\n                if (group) group.push(item_i);\r\n                else map.set(items, [item_i]);\r\n            }\r\n            return map;\r\n        }, new Map<ModelList, ListItemModel[]>());\r\n        Array.from(removedItemsGroups.entries()).forEach(\r\n            ([list_i, children_i]) => {\r\n                list_i.beginChanges();\r\n                children_i.forEach((child_i) => {\r\n                    list_i.remove(child_i);\r\n                });\r\n                list_i.endChanges();\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nclass ListItemModel extends ModelObject implements TreeItem {\r\n    readonly label: string;\r\n\r\n    @ModelProperty()\r\n    visibility: boolean;\r\n    \r\n    constructor(init: {label: string}) {\r\n        super();\r\n        const {label} = init;\r\n        this.label = label;\r\n        this.visibility = true;\r\n    }\r\n\r\n    get index(): number {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof ListModel) {\r\n            return parentNode.items.index(this);\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    show(): void {\r\n        this.visibility = true;\r\n    }\r\n\r\n    hide(): void {\r\n        this.visibility = false;\r\n    }\r\n\r\n    display(): void {\r\n        console.log(this.label);\r\n    }\r\n    \r\n    remove(): void {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof ListModel) {\r\n            const {items} = parentNode;\r\n            if (items) {\r\n                items.remove(this);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface ListViewConstructor {\r\n    readonly prototype: ListView;\r\n    new(): ListView;\r\n    new(model: ListModel): ListView;\r\n}\r\n\r\ninterface ListView extends View {\r\n    model: ListModel;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"v-list\": ListView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"v-list\"\r\n})\r\nclass ListViewBase extends View implements ListView {\r\n    readonly model!: ListModel;\r\n    #listElementMap: WeakMap<ListModel, WeakRef<HTMLEListElement>>;\r\n    #listItemElementsMap: WeakMap<ListItemModel, WeakRef<HTMLEListItemElement>>;\r\n\r\n    constructor()\r\n    constructor(model: ListModel)\r\n    constructor(model?: ListModel) {\r\n        super();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.#listElementMap = new WeakMap();\r\n        this.#listItemElementsMap = new WeakMap();\r\n        this.setModel(model ?? new ListModel());\r\n    }\r\n\r\n    getListElement(): HTMLEListElement | null {\r\n        const {model} = this;\r\n        return this.#listElementMap.get(model)?.deref() ?? null;\r\n    }\r\n\r\n    getListItemElement(model: ListItemModel): HTMLEListItemElement | null {\r\n        return this.#listItemElementsMap.get(model)?.deref()  ?? null;\r\n    }\r\n\r\n    selectedItems(): ListItemModel[] {\r\n        const list = this.getListElement();\r\n        if (list) {\r\n            const {model} = this;\r\n            const selectedElements = list.selectedItems();\r\n            return selectedElements.map(\r\n                item_i => <ListItemModel>model.getItemByIndex(\r\n                    item_i.posinset\r\n                )\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    renderShadow(): Node {\r\n        return Fragment(\r\n            element(\"style\", {\r\n                properties: {\r\n                    textContent: /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    renderLight(): Node {\r\n        const {model} = this;\r\n        const listElement = element(\"e-list\", {\r\n            properties: {\r\n                tabIndex: 0\r\n            },\r\n            children: [\r\n                element(\"e-listitemgroup\", {\r\n                    children: reactiveChildElements(\r\n                        model.items, item => this.#renderListItem(item)\r\n                    )\r\n                })\r\n            ],\r\n            eventListeners: {\r\n                contextmenu: <EventListener>this.#handleContextMenuEvent.bind(this),\r\n                keydown: <EventListener>this.#handleKeyDownEvent.bind(this)\r\n            }\r\n        });\r\n        this.#listElementMap.set(model, new WeakRef(listElement));\r\n        return listElement;\r\n    }\r\n\r\n    #renderListItem(item: ListItemModel): Element {\r\n        const listItemElement = element(\"e-listitem\", {\r\n            properties: {\r\n                tabIndex: -1,\r\n                label: item.label,\r\n                name: item.label,\r\n                draggable: true\r\n            },\r\n            dataset: {\r\n                index: item.index\r\n            },\r\n            children: [\r\n                element(\"e-toolbar\", {\r\n                    properties: {\r\n                        slot: \"toolbar\",\r\n                        tabIndex: 0\r\n                    },\r\n                    children: [\r\n                        element(\"e-toolbaritemgroup\", {\r\n                            children: [\r\n                                EToolBarItem.menubutton({\r\n                                    name: \"settings\",\r\n                                    label: \"Actions\",\r\n                                    menubutton: new EMenuButton({\r\n                                        menu: reactiveElement(\r\n                                            item,\r\n                                            new EMenu({\r\n                                                children: [\r\n                                                    new EMenuItemGroup({\r\n                                                        items: [\r\n                                                            EMenuItem.button({\r\n                                                                name: \"display\",\r\n                                                                label: \"Display\",\r\n                                                                trigger: () => {\r\n                                                                    item.display();\r\n                                                                }\r\n                                                            }),\r\n                                                            EMenuItem.button({\r\n                                                                name: \"delete\",\r\n                                                                label: \"Delete\",\r\n                                                                trigger: () => {\r\n                                                                    item.remove();\r\n                                                                }\r\n                                                            })\r\n                                                        ]\r\n                                                    }),\r\n                                                    new EMenuItemGroup({\r\n                                                        items: [\r\n                                                            EMenuItem.button({\r\n                                                                name: \"visibility\",\r\n                                                                label: \"Visibility\",\r\n                                                                trigger: () => {\r\n                                                                    item.visibility ?\r\n                                                                    item.hide() :\r\n                                                                    item.show();\r\n                                                                }\r\n                                                            })\r\n                                                        ]\r\n                                                    })\r\n                                                ]\r\n                                            }),\r\n                                            [\"visibility\"],\r\n                                            (menu, property, oldValue, newValue) => {\r\n                                                const {items} = menu;\r\n                                                switch (property) {\r\n                                                    case \"visibility\": {\r\n                                                        const item = <HTMLEMenuItemElement>items.namedItem(\"visibility\");\r\n                                                        item.textContent = newValue ? \"Hide\" : \"Show\";\r\n                                                        item.title = newValue ? \"Hide\" : \"Show\";\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        )\r\n                                    })\r\n                                }),\r\n                                reactiveElement(\r\n                                    item,\r\n                                    element(\"e-toolbaritem\", {\r\n                                        properties: {\r\n                                            name: \"visibility\",\r\n                                            type: \"checkbox\",\r\n                                            tabIndex: -1\r\n                                        },\r\n                                        eventListeners: {\r\n                                            trigger: () => {\r\n                                                item.visibility ?\r\n                                                    item.hide() :\r\n                                                    item.show();\r\n                                            }\r\n                                        }\r\n                                    }),\r\n                                    [\"visibility\"],\r\n                                    (toolbaritem, property, oldValue, newValue) => {\r\n                                        toolbaritem.title = newValue ? \"Hide\" : \"Show\";\r\n                                        toolbaritem.checked = newValue;\r\n                                    }\r\n                                )\r\n                            ]\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        });\r\n        this.#listItemElementsMap.set(item, new WeakRef(listItemElement));\r\n        return listItemElement;\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        const {clientX, clientY, currentTarget, target} = event;\r\n        const {model} = this;\r\n        if (currentTarget instanceof HTMLEListElement && target instanceof HTMLEListItemElement) {\r\n            const activeItem = model.getItemByIndex(\r\n                parseInt(target.dataset.index!)\r\n            )!;\r\n            const menu = element(\"e-menu\", {\r\n                properties: {\r\n                    tabIndex: -1,\r\n                    contextual: true,\r\n                    contextX: clientX,\r\n                    contextY: clientY,\r\n                    slot: \"menu\"\r\n                },\r\n                children: [\r\n                    element(\"e-menuitemgroup\", {\r\n                        properties: {\r\n                            tabIndex: -1\r\n                        },\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                properties: {\r\n                                    tabIndex: -1,\r\n                                    textContent: \"Display\"\r\n                                },\r\n                                eventListeners: {\r\n                                    trigger: () => {\r\n                                        ListItemList.from(\r\n                                            this.selectedItems()\r\n                                        ).display();\r\n                                    }\r\n                                }\r\n                            }),\r\n                            element(\"e-menuitem\", {\r\n                                properties: {\r\n                                    tabIndex: -1,\r\n                                    textContent: \"Delete\"\r\n                                },\r\n                                eventListeners: {\r\n                                    trigger: () => {\r\n                                        ListItemList.from(\r\n                                            this.selectedItems()\r\n                                        ).remove();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    }),\r\n                    element(\"e-menuitemgroup\", {\r\n                        properties: {\r\n                            tabIndex: -1\r\n                        },\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                properties: {\r\n                                    tabIndex: -1,\r\n                                    type: \"checkbox\",\r\n                                    textContent: activeItem.visibility ? \"Hide\" : \"Show\"\r\n                                },\r\n                                eventListeners: {\r\n                                    trigger: () => {\r\n                                        const selectedItems = ListItemList.from(\r\n                                            this.selectedItems()\r\n                                        );\r\n                                        activeItem.visibility ?\r\n                                            selectedItems.hide() :\r\n                                            selectedItems.show();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ],\r\n                eventListeners: {\r\n                    close: () => {\r\n                        target.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            });\r\n            target.append(menu);\r\n            menu.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        if (currentTarget instanceof HTMLEListElement) {\r\n            switch (key) {\r\n                case \"Delete\": {\r\n                    ListItemList.from(\r\n                        this.selectedItems()\r\n                    ).remove();\r\n                    event.preventDefault();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ListView: ListViewConstructor = ListViewBase;","import { HTMLEGridElement } from \"../elements/containers/grid/Grid\";\r\nimport { HTMLEGridCellElement } from \"../elements/containers/grid/GridCell\";\r\nimport { HTMLEGridRowElement } from \"../elements/containers/grid/GridRow\";\r\nimport { element, reactiveChildElements, CustomElement, Fragment, AttributeProperty, trimMultilineIndent, reactiveElement } from \"../elements/Element\";\r\nimport { HTMLEWidthSashElement } from \"../elements/utils/WidthSash\";\r\nimport { ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\nimport { HTMLEMenuItemElement } from \"../elements/containers/menus/MenuItem\";\r\nimport { HTMLEMenuItemRadioList } from \"../elements/containers/menus/MenuItemCollection\";\r\n\r\nexport { GridModel };\r\nexport { GridRowModel };\r\nexport { GridColumnModel };\r\nexport { GridView };\r\n\r\nclass GridModel extends ModelObject {\r\n    readonly rows: ModelList<GridRowModel>;\r\n    readonly columns: ModelList<GridColumnModel>;\r\n\r\n    constructor()\r\n    constructor(init: {rows: GridRowModel[], columns: GridColumnModel[]})\r\n    constructor(init?: {rows: GridRowModel[], columns: GridColumnModel[]}) {\r\n        super();\r\n        const rows = new ModelList(init?.rows ?? []);\r\n        rows.setParent(this);\r\n        this.rows = rows;\r\n        const columns = new ModelList(init?.columns ?? []);\r\n        columns.setParent(this);\r\n        this.columns = columns;\r\n    }\r\n\r\n    getColumnByName(name: string): GridColumnModel | null {\r\n        return Array.from(this.columns.values()).find(\r\n            column_i => column_i.name == name\r\n        ) ?? null;\r\n    }\r\n\r\n    sortByColumn(column: GridColumnModel, sortOrder: number) {\r\n        Array.from(this.columns.values()).forEach((column_i) => {\r\n            column_i.sortorder = column_i == column ? sortOrder : void 0;\r\n        });\r\n        this.rows.sort(\r\n            (row_1, row_2) => {\r\n                const cell_1 = <string>column.extract(row_1).toString();\r\n                const cell_2 = <string>column.extract(row_2).toString();\r\n                return sortOrder * cell_1.localeCompare(cell_2);\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\ntype Constructor = {\r\n    new(...args: any): any;\r\n    readonly prototype: any;\r\n}\r\n\r\ntype GridRowFilter = {\r\n    filter: (row: GridRowModel) => boolean;\r\n}\r\n\r\nclass GridColumnModel<T extends Constructor = Constructor> extends ModelObject {\r\n    readonly name: string;\r\n    readonly label: string;\r\n    readonly type: T;\r\n    readonly extract: (row: GridRowModel) => InstanceType<T>;\r\n    readonly filters: (GridRowFilter & {name: string})[];\r\n\r\n    @ModelProperty()\r\n    sortorder: number | undefined;\r\n\r\n    constructor(init: {\r\n        name: string,\r\n        label: string,\r\n        type: T,\r\n        extract: (row: GridRowModel) => InstanceType<T>,\r\n        filters?: (GridRowFilter & {name: string})[]\r\n    }) {\r\n        super();\r\n        const {name, label, type, extract} = init;\r\n        this.name = name;\r\n        this.label = label;\r\n        this.type = type;\r\n        this.extract = extract;\r\n        this.filters = init.filters ?? [];\r\n        this.sortorder = 1;\r\n    }\r\n}\r\n\r\nclass GridRowModel extends ModelObject {\r\n    @ModelProperty()\r\n    name: string;\r\n\r\n    @ModelProperty()\r\n    age: number;\r\n    \r\n    constructor(init: {name: string, age: number}) {\r\n        super();\r\n        const {name, age} = init;\r\n        this.name = name;\r\n        this.age = age;\r\n    }\r\n}\r\n\r\ninterface GridViewConstructor {\r\n    readonly prototype: GridView;\r\n    new(): GridView;\r\n    new(model: GridModel): GridView;\r\n}\r\n\r\ninterface GridView extends View {\r\n    readonly shadowRoot: ShadowRoot;\r\n    model: GridModel;\r\n    resizable: boolean;\r\n    sortable: boolean;\r\n    setColumnDelegate(delegate: (column: GridColumnModel) => string | Node): void;\r\n    setCellDelegate(delegate: (row: GridRowModel, column: GridColumnModel) => string | Node): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"v-grid\": GridView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"v-grid\"\r\n})\r\nclass GridViewBase extends View implements GridView {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly model!: GridModel;\r\n\r\n    #columnDelegate: (column: GridColumnModel) => string | Node;\r\n    #cellDelegate: (row: GridRowModel, column: GridColumnModel) => string | Node;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    resizable!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    sortable!: boolean;\r\n\r\n    #displayFilters: (GridRowFilter & {name: string})[];\r\n    #searchFilter: GridRowFilter | null;\r\n\r\n    #gridRowElementsMap: WeakMap<GridRowModel, WeakRef<HTMLEGridRowElement>>\r\n    \r\n    constructor()\r\n    constructor(model: GridModel)\r\n    constructor(model?: GridModel) {\r\n        super();\r\n        this.#displayFilters = [];\r\n        this.#searchFilter = null;\r\n        this.#gridRowElementsMap = new WeakMap();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.setModel(model ?? new GridModel());\r\n        this.#cellDelegate = (row: GridRowModel, column: GridColumnModel) => {\r\n            return element(\"label\", {\r\n                properties: {\r\n                    textContent: column.extract(row)\r\n                }\r\n            });\r\n        };\r\n        this.#columnDelegate = (column: GridColumnModel) => {\r\n            return element(\"label\", {\r\n                properties: {\r\n                    textContent: column.label\r\n                }\r\n            });\r\n        };\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"resizable\":\r\n            case \"sortable\": {\r\n                this.refresh();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    get gridElement(): HTMLEGridElement {\r\n        return this.getGridElement()!;\r\n    }\r\n\r\n    setColumnDelegate(delegate: (column: GridColumnModel) => string | Node): void {\r\n        this.#columnDelegate = delegate;\r\n    }\r\n\r\n    setCellDelegate(delegate: (row: GridRowModel, column: GridColumnModel) => string | Node): void {\r\n        this.#cellDelegate = delegate;\r\n    }\r\n\r\n    getGridElement(): HTMLEGridElement | null {\r\n        return this.shadowRoot.querySelector(`:scope > e-grid`);\r\n    }\r\n\r\n    getRowElement(row: GridRowModel): HTMLEGridRowElement | null {\r\n        return this.#gridRowElementsMap.get(row)?.deref() ?? null;\r\n    }\r\n\r\n    getColumnHeaderElement(column: GridColumnModel): HTMLEGridCellElement | null {\r\n        return this.shadowRoot.querySelector(`:scope > e-grid > e-gridhead > e-gridrow > e-gridcell[type=columnheader][name=${column.name}]`);\r\n    }\r\n\r\n    getColumnDataElements(column: GridColumnModel): HTMLEGridCellElement[] {\r\n        return Array.from(this.shadowRoot.querySelectorAll(`:scope > e-grid > e-gridbody > e-gridrow > e-gridcell[headers~=${column.name}]`));\r\n    }\r\n\r\n    renderShadow(): Node {\r\n        const {model} = this;\r\n        return Fragment(\r\n            element(\"link\", {\r\n                properties: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/main.css\"\r\n                }\r\n            }),\r\n            element(\"link\", {\r\n                properties: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/views/gridview.css\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                children: [\r\n                    element(\"input\", {\r\n                        properties: {\r\n                            type: \"search\"\r\n                        },\r\n                        eventListeners: {\r\n                            input: <EventListener>this.#handleSearchInputEvent.bind(this)\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"e-grid\", {\r\n                properties: {\r\n                    tabIndex: 0,\r\n                    selectby: \"row\"\r\n                },\r\n                children: [\r\n                    element(\"e-gridhead\", {\r\n                        children: [\r\n                            element(\"e-gridrow\", {\r\n                                children: reactiveChildElements(\r\n                                    model.columns, column => this.#renderGridColumnHeaderCell(column)\r\n                                )\r\n                            })\r\n                        ]\r\n                    }),\r\n                    element(\"e-gridbody\", {\r\n                        children: reactiveChildElements(\r\n                            model.rows, row => this.#renderGridBodyRow(row)\r\n                        )\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    setSearchFilter(filter: GridRowFilter | null): void {\r\n        this.#searchFilter = filter;\r\n        Array.from(this.model.rows.values()).forEach((row_i) => {\r\n            const rowElement = this.getRowElement(row_i);\r\n            if (rowElement) {\r\n                rowElement.hidden =\r\n                    !this.#displayFilters.some(filter_i => filter_i.filter(row_i))\r\n                    && !(filter?.filter(row_i) ?? true);\r\n            }\r\n        });\r\n        const {gridElement} = this;\r\n        gridElement.beginSelection();\r\n        gridElement.selectedRows().forEach(selectedRow_i => selectedRow_i.selected = false);\r\n        gridElement.endSelection();\r\n    }\r\n\r\n    addDisplayFilter(filter: (GridRowFilter & {name: string;})): void {\r\n        const displayFilters = this.#displayFilters;\r\n        if (!displayFilters.includes(filter)) {\r\n            this.#displayFilters.push(filter);\r\n            Array.from(this.model.rows.values()).forEach((row_i) => {\r\n                const rowElement = this.getRowElement(row_i);\r\n                if (rowElement) {\r\n                    rowElement.hidden = !this.#displayFilters.some(filter_i => filter_i.filter(row_i));\r\n                }\r\n            });\r\n        }\r\n        const {gridElement} = this;\r\n        gridElement.beginSelection();\r\n        gridElement.selectedRows().forEach(selectedRow_i => selectedRow_i.selected = false);\r\n        gridElement.endSelection();\r\n    }\r\n\r\n    removeDisplayFilter(filter: (GridRowFilter & {name: string;})): void {\r\n        const displayFilters = this.#displayFilters;\r\n        const filterIndex = displayFilters.indexOf(filter);\r\n        if (filterIndex > -1) {\r\n            displayFilters.splice(filterIndex, 1);\r\n            Array.from(this.model.rows.values()).forEach((row_i) => {\r\n                const rowElement = this.getRowElement(row_i);\r\n                if (rowElement) {\r\n                    rowElement.hidden = !this.#displayFilters.every(filter_i => filter_i.filter(row_i));\r\n                }\r\n            });\r\n        }\r\n        const {gridElement} = this;\r\n        gridElement.beginSelection();\r\n        gridElement.selectedRows().forEach(selectedRow_i => selectedRow_i.selected = false);\r\n        gridElement.endSelection();\r\n    }\r\n\r\n    #renderGridColumnHeaderCell(column: GridColumnModel): Element {\r\n        const {model} = this;\r\n        const gridColumnElement = reactiveElement(\r\n            column,\r\n            element(\"e-gridcell\", {\r\n                properties: {\r\n                    tabIndex: -1,\r\n                    name: column.name,\r\n                    id: this.resizable ? `${column.name}-columnheader` : void 0,\r\n                    type: \"columnheader\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        properties: {\r\n                            className: \"gridcell-content\"\r\n                        },\r\n                        children: (<Node[]>[\r\n                            element(\"label\", {\r\n                                properties: {\r\n                                    className: \"gridcell-label\",\r\n                                    textContent: column.label\r\n                                },\r\n                                eventListeners: {\r\n                                    click: <EventListener>this.#handleColumnLabelClickEvent.bind(this)\r\n                                }\r\n                            }),\r\n                            element(\"e-toolbar\", {\r\n                                properties: {\r\n                                    tabIndex: -1,\r\n                                },\r\n                                children: [\r\n                                    element(\"e-toolbaritem\", {\r\n                                        properties: {\r\n                                            type: \"menubutton\",\r\n                                            tabIndex: -1,\r\n                                        },\r\n                                        children: [\r\n                                            element(\"e-menubutton\",  {\r\n                                                properties: {\r\n                                                    slot: \"menubutton\",\r\n                                                    tabIndex: -1,\r\n                                                },\r\n                                                children: [\r\n                                                    element(\"e-menu\",  {\r\n                                                        properties: {\r\n                                                            slot: \"menu\",\r\n                                                            tabIndex: -1,\r\n                                                        },\r\n                                                        children: [\r\n                                                            element(\"e-menuitem\",  {\r\n                                                                properties: {\r\n                                                                    type: \"button\",\r\n                                                                    textContent: \"Resize column\",\r\n                                                                    tabIndex: -1,\r\n                                                                },\r\n                                                                eventListeners: {\r\n                                                                    trigger: () => {\r\n                                                                        const columnHeaderElement = this.getColumnHeaderElement(column);\r\n                                                                        if (columnHeaderElement) {\r\n                                                                            columnHeaderElement.style.removeProperty(\"width\");\r\n                                                                            columnHeaderElement.style.removeProperty(\"max-width\");\r\n                                                                            this.getColumnDataElements(column).forEach(\r\n                                                                                cell_i => cell_i.style.maxWidth = \"unset\"\r\n                                                                            );\r\n                                                                        }\r\n                                                                    }\r\n                                                                }\r\n                                                            }),\r\n                                                            element(\"e-menuitem\",  {\r\n                                                                properties: {\r\n                                                                    type: \"submenu\",\r\n                                                                    textContent: \"Sort\",\r\n                                                                    tabIndex: -1,\r\n                                                                },\r\n                                                                children: [\r\n                                                                    reactiveElement(\r\n                                                                        column,\r\n                                                                        element(\"e-menu\",  {\r\n                                                                            properties: {\r\n                                                                                slot: \"menu\",\r\n                                                                                tabIndex: -1,\r\n                                                                            },\r\n                                                                            children: [\r\n                                                                                element(\"e-menuitem\",  {\r\n                                                                                    properties: {\r\n                                                                                        type: \"radio\",\r\n                                                                                        name: \"sort\",\r\n                                                                                        textContent: \"Ascending\",\r\n                                                                                        value: \"1\",\r\n                                                                                        tabIndex: -1,\r\n                                                                                    }\r\n                                                                                }),\r\n                                                                                element(\"e-menuitem\",  {\r\n                                                                                    properties: {\r\n                                                                                        type: \"radio\",\r\n                                                                                        name: \"sort\",\r\n                                                                                        textContent: \"Descending\",\r\n                                                                                        value: \"-1\",\r\n                                                                                        tabIndex: -1,\r\n                                                                                    }\r\n                                                                                })\r\n                                                                            ],\r\n                                                                            eventListeners: {\r\n                                                                                trigger: (event) => {\r\n                                                                                    const {target} = event;\r\n                                                                                    const sortOrder = (<HTMLEMenuItemElement>target).value;\r\n                                                                                    model.sortByColumn(column, parseInt(sortOrder));\r\n                                                                                }\r\n                                                                            }\r\n                                                                        }),\r\n                                                                        [\"sortorder\"],\r\n                                                                        (menu, property, oldValue, newValue) => {\r\n                                                                            Array.from(menu.items).filter(item_i => item_i.name.startsWith(\"sort\"))\r\n                                                                                .forEach((sortRadioItem_i => {\r\n                                                                                    sortRadioItem_i.checked = parseInt(sortRadioItem_i.value) === newValue;\r\n                                                                                })\r\n                                                                            );\r\n                                                                        }\r\n                                                                    )\r\n                                                                ]\r\n                                                            }),\r\n                                                            element(\"e-menuitem\",  {\r\n                                                                properties: {\r\n                                                                    type: \"submenu\",\r\n                                                                    textContent: \"Filter\",\r\n                                                                    tabIndex: -1,\r\n                                                                },\r\n                                                                children: [\r\n                                                                    element(\"e-menu\",  {\r\n                                                                        properties: {\r\n                                                                            slot: \"menu\",\r\n                                                                            tabIndex: -1,\r\n                                                                        },\r\n                                                                        children: column.filters.map((filter_i, i) =>\r\n                                                                            element(\"e-menuitem\", {\r\n                                                                                properties: {\r\n                                                                                    tabIndex: -1,\r\n                                                                                    textContent: filter_i.name,\r\n                                                                                    type: \"checkbox\",\r\n                                                                                    checked: this.#displayFilters.includes(filter_i)\r\n                                                                                },\r\n                                                                                eventListeners: {\r\n                                                                                    trigger: (event) => {\r\n                                                                                        const {currentTarget} = event;\r\n                                                                                        if (currentTarget instanceof HTMLEMenuItemElement) {\r\n                                                                                            const {checked} = currentTarget;\r\n                                                                                            if (checked) {\r\n                                                                                                this.addDisplayFilter(filter_i);\r\n                                                                                            }\r\n                                                                                            else {\r\n                                                                                                this.removeDisplayFilter(filter_i);\r\n                                                                                            }\r\n                                                                                        }\r\n                                                                                    }\r\n                                                                                }\r\n                                                                            })\r\n                                                                        )\r\n                                                                    })\r\n                                                                ]\r\n                                                            })\r\n                                                        ]\r\n                                                    })\r\n                                                ]\r\n                                            })\r\n                                        ]\r\n                                    })\r\n                                ]\r\n                            })\r\n                        ]).concat(\r\n                            this.resizable ? [\r\n                                element(\"e-wsash\", {\r\n                                    properties: {\r\n                                        controls: `${column.name}-columnheader`\r\n                                    },\r\n                                    eventListeners: {\r\n                                        resize: () => {\r\n                                            this.getColumnDataElements(column).forEach(\r\n                                                cell_i => cell_i.style.removeProperty(\"max-width\")\r\n                                            );\r\n                                        }\r\n                                    }\r\n                                })\r\n                            ] : []\r\n                        )\r\n                    })\r\n                ]\r\n            }),\r\n            [\"sortorder\"],\r\n            (cell, property, oldValue, newValue) => {\r\n                switch (property) {\r\n                    case \"sortorder\":\r\n                        if (typeof newValue !== \"undefined\") {\r\n                            cell.dataset.sortorder = newValue.toString();\r\n                        }\r\n                        else {\r\n                            delete cell.dataset.sortorder;\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        );\r\n        return gridColumnElement;\r\n    }\r\n\r\n    #renderGridBodyRow(row: GridRowModel): Element {\r\n        const {model} = this;\r\n        const gridRowElement = element(\"e-gridrow\", {\r\n            properties: {\r\n                tabIndex: -1\r\n            },\r\n            children: reactiveChildElements(\r\n                model.columns, column => this.#renderGridDataCell(row, column)\r\n            )\r\n        });\r\n        this.#gridRowElementsMap.set(row, new WeakRef(gridRowElement));\r\n        return gridRowElement;\r\n    }\r\n\r\n    #renderGridDataCell(row: GridRowModel, column: GridColumnModel): Element {\r\n        const gridCellElement = element(\"e-gridcell\", {\r\n            properties: {\r\n                type: \"gridcell\",\r\n                headers: column.name\r\n            },\r\n            children: [\r\n                this.#cellDelegate(row, column)\r\n            ]\r\n        });\r\n        return gridCellElement;\r\n    }\r\n\r\n    #handleSearchInputEvent(event: InputEvent) {\r\n        const {target} = event;\r\n        if (target instanceof HTMLInputElement) {\r\n            const {value} = target;\r\n            this.setSearchFilter(value !== \"\" ? {\r\n                filter: (row) => row.name.toLowerCase().startsWith(value.toLowerCase())\r\n            } : null);\r\n        }\r\n    }\r\n\r\n    #handleColumnLabelClickEvent(event: MouseEvent): void {\r\n        const {currentTarget} = event;\r\n        const {model} = this;\r\n        const {columns} = model;\r\n        if (currentTarget instanceof Element) {\r\n            const targetCell = currentTarget.closest(\"e-gridcell\");\r\n            if (targetCell) {\r\n                const targetColumn = Array.from(columns.values()).find(column_i => column_i.name == targetCell.name);\r\n                if (targetColumn) {\r\n                    const sortorder = typeof targetColumn.sortorder !== \"undefined\" ? -targetColumn.sortorder : 1;\r\n                    model.sortByColumn(targetColumn, sortorder);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar GridView: GridViewConstructor = GridViewBase;","export { Widget };\r\n\r\ninterface WidgetConstructor {\r\n    readonly prototype: Widget;\r\n    new(): Widget;\r\n    new<Element extends HTMLElement>(): Widget<Element>;\r\n}\r\n\r\ninterface Widget<Element extends HTMLElement = HTMLElement> {\r\n    readonly element: Element;\r\n    click(): void;\r\n    focus(options?: FocusOptions | undefined): void;\r\n    blur(): void;\r\n    contains(node: Node): boolean;\r\n    render(): Element\r\n}\r\n\r\nclass WidgetBase<Element extends HTMLElement = HTMLElement> implements Widget<Element> {\r\n    readonly element: Element;\r\n\r\n    constructor() {\r\n        this.element = this.render();\r\n    }\r\n    \r\n    click(): void {\r\n        this.element.click();\r\n    }\r\n\r\n    focus(options?: FocusOptions | undefined): void {\r\n        this.element.focus(options);\r\n    }\r\n\r\n    blur(): void {\r\n        this.element.blur();\r\n    }\r\n\r\n    contains(node: Node): boolean {\r\n        return this.element.contains(node);\r\n    }\r\n\r\n    render(): Element {\r\n        throw new Error();\r\n    }\r\n}\r\n\r\nvar Widget: WidgetConstructor = WidgetBase;","import { element } from \"../../elements/Element\";\r\nimport { MenuItemWidget } from \"./MenuItemWidget\";\r\nimport { Widget } from \"./Widget\";\r\n\r\nexport { MenuWidget };\r\n\r\ninterface MenuWidgetConstructor {\r\n    readonly prototype: MenuWidget;\r\n    new(items: MenuItemWidget[]): MenuWidget;\r\n}\r\n\r\ninterface MenuWidget extends Widget {\r\n    readonly items: MenuItemWidget[];\r\n    readonly activeItem: MenuItemWidget | null;\r\n    readonly activeIndex: number;\r\n    insertItem(index: number, ...items: MenuItemWidget[]): void;\r\n\r\n}\r\n\r\nclass MenuWidgetBase extends Widget implements MenuWidget {\r\n\r\n    readonly items: MenuItemWidget[];\r\n\r\n    get activeItem(): MenuItemWidget | null {\r\n        return this.items[this.#activeIndex] ?? null;\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    #activeIndex: number;\r\n    #toggleTimeouts: WeakMap<MenuItemWidget, {clear(): void;}>;\r\n    #walker: TreeWalker;\r\n\r\n    constructor(items: MenuItemWidget[]) {\r\n        super();\r\n        const {element} = this;\r\n        this.items = [];\r\n        this.insertItem(0, ...items);\r\n        this.#activeIndex = -1;\r\n        this.#toggleTimeouts = new WeakMap();\r\n        this.#walker = document.createTreeWalker(\r\n            element, NodeFilter.SHOW_ELEMENT, <NodeFilter>this.#walkerNodeFilter.bind(this)\r\n        );\r\n        element.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        element.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        element.addEventListener(\"mouseout\", this.#handleMouseOutEvent.bind(this));\r\n        element.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        element.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        element.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        element.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n    }\r\n\r\n    render() {\r\n        return element(\"menu\", {\r\n            properties: {\r\n                className: \"menu\",\r\n                tabIndex: -1\r\n            },\r\n            attributes: {\r\n                role: \"menu\"\r\n            }\r\n        });\r\n    }\r\n\r\n    insertItem(index: number, ...items: MenuItemWidget[]): void {\r\n        const {element} = this;\r\n        this.items.splice(index, 0, ...items);\r\n        if (element.children.length === 0) {\r\n            element.append(...items.map(item => item.element));\r\n        }\r\n        else {\r\n            element.children.item(Math.max(element.children.length, index))!\r\n                .before(...items.map(item => item.element)\r\n            );\r\n        }\r\n    }\r\n\r\n    #walkerNodeFilter(element: Element): number {\r\n        const {classList} = element;\r\n        if (classList.contains(\"menuitem\")) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        else if (classList.contains(\"menuitemgroup\")) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        else {\r\n            return NodeFilter.FILTER_REJECT;\r\n        }\r\n    }\r\n\r\n    #collapseSubmenus(): void {\r\n        Array.from(this.items)\r\n            .forEach((item_i) => {\r\n                item_i.collapse()\r\n            });\r\n    }\r\n\r\n    #firstItem(): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: MenuItemWidget): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item.element;\r\n        return <HTMLElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextItem(item: MenuItemWidget): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item.element;\r\n        return <HTMLElement | null>walker.nextNode();\r\n    }\r\n\r\n    #firstChildItem(item: MenuItemWidget): HTMLElement | null {\r\n        const {menu} = item;\r\n        return menu ?\r\n            menu.items[0]?.element ?? null :\r\n            null;\r\n    }\r\n\r\n    #setActiveItem(item: MenuItemWidget | null): void {\r\n        const {activeItem, items} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n        }\r\n        if (item !== null && activeItem !== item) {\r\n            item.active = true;\r\n            this.#activeIndex = Array.from(items).indexOf(item);\r\n        }\r\n        if (item == null) {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {items} = this;\r\n        const targetClosestItem = Array.from(items).find(\r\n            item_i => item_i.contains(<Node>target)\r\n        ) ?? null;\r\n        if (targetClosestItem) {\r\n            targetClosestItem.trigger();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {items} = this;\r\n        const targetClosestItem = Array.from(items).find(\r\n            item_i => item_i.contains(<HTMLElement>target)\r\n        ) ?? null;\r\n        if (targetClosestItem) {\r\n            this.#setActiveItem(targetClosestItem);\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<HTMLElement>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            /*const {contextual} = this;\r\n            if (contextual) {\r\n                this.remove();\r\n            }\r\n            else {*/\r\n                const {activeItem} = this;\r\n                activeItem?.collapse();\r\n                this.#setActiveItem(null);\r\n            //}\r\n        }\r\n    }\r\n\r\n    async #setItemTimeout(item: MenuItemWidget, delay?: number): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => {\r\n                resolve(void 0);\r\n            }, delay ?? 0);\r\n            this.#toggleTimeouts.set(item, {\r\n                clear: () => {\r\n                    clearTimeout(timeout);\r\n                    reject();\r\n                }\r\n            });\r\n        }).then(() => {\r\n            this.#toggleTimeouts.delete(item);\r\n        });\r\n    }\r\n\r\n    #clearItemTimeout(item: MenuItemWidget): void {\r\n        const timeout = this.#toggleTimeouts.get(item);\r\n        if (typeof timeout !== \"undefined\") {\r\n            this.#toggleTimeouts.delete(item);\r\n            timeout.clear();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {element, activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.#firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem() :\r\n                    this.#firstItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                firstItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                lastItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    const {hasPopup} = activeItem;\r\n                    if (hasPopup) {\r\n                        activeItem.expand();\r\n                        if (activeItem.expanded) {\r\n                            const firstChildItem = this.#firstChildItem(activeItem);\r\n                            firstChildItem?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    else {\r\n                        activeItem.click();\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLMenuElement\r\n                    ) == element;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLMenuElement\r\n                    ) == element;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const {hasPopup} = activeItem;\r\n                    if (hasPopup) {\r\n                        activeItem.expand();\r\n                        const firstChildItem = this.#firstChildItem(activeItem);\r\n                        firstChildItem?.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #closestItem(target: Element): MenuItemWidget | null {\r\n        const {items} = this;\r\n        const targetClosestItem = Array.from(items).find(\r\n            item_i => item_i.contains(<HTMLElement>target)\r\n        ) ?? null;\r\n        return targetClosestItem;\r\n    }\r\n\r\n    #handleMouseOutEvent(event: MouseEvent): void {\r\n        const {target, relatedTarget} = event;\r\n        const {element} = this;\r\n        const targetClosestItemWidget = target instanceof Element ? this.#closestItem(target) : null; \r\n        if (targetClosestItemWidget?.hasPopup && !targetClosestItemWidget.expanded) {\r\n            this.#clearItemTimeout(targetClosestItemWidget);\r\n        }\r\n        const isTargetClosestMenu = event.composedPath().find(\r\n            target_i => target_i instanceof HTMLMenuElement\r\n            ) == element;\r\n        if (isTargetClosestMenu) {\r\n            const {clientX, clientY} = event;\r\n            const {left, right, top, bottom} = element.getBoundingClientRect();\r\n            const intersectsWithMouse = !(\r\n                left > clientX || right < clientX || top > clientY || bottom < clientY\r\n            );\r\n            const containsRelatedTarget = element.contains(<Node>relatedTarget);\r\n            if (intersectsWithMouse && containsRelatedTarget) {\r\n                if (relatedTarget instanceof HTMLMenuElement && relatedTarget !== element) {\r\n                    relatedTarget.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    const activeIndex = this.#activeIndex;\r\n                    element.focus({preventScroll: true});\r\n                    this.#setActiveItem(null);\r\n                    this.#activeIndex = activeIndex;\r\n                }\r\n            }\r\n            if (!intersectsWithMouse) {\r\n                element.focus({preventScroll: true});\r\n                this.#setActiveItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {element} = this;\r\n        const targetClosestItemWidget = target instanceof Element ? this.#closestItem(target) : null; \r\n        if (targetClosestItemWidget?.hasPopup && targetClosestItemWidget.expanded) {\r\n            this.#clearItemTimeout(targetClosestItemWidget);\r\n        }\r\n        const isTargetClosestMenu = event.composedPath().find(\r\n            target_i => target_i instanceof HTMLMenuElement\r\n        ) == element;\r\n        if (isTargetClosestMenu) {\r\n            const {activeItem} = this;\r\n            if (activeItem?.hasPopup && activeItem.expanded && \r\n                !activeItem.contains(<HTMLElement>target)) {\r\n                this.#clearItemTimeout(activeItem);\r\n                this.#setItemTimeout(activeItem, 400)\r\n                    .then(() => {\r\n                        activeItem.collapse();\r\n                    })\r\n                    .catch(() => void 0);\r\n            }\r\n            if (targetClosestItemWidget !== null) {\r\n                this.#setActiveItem(targetClosestItemWidget);\r\n                targetClosestItemWidget.focus({preventScroll: true});\r\n                if (targetClosestItemWidget.hasPopup) {\r\n                    if (!targetClosestItemWidget.expanded) {\r\n                        this.#clearItemTimeout(targetClosestItemWidget);\r\n                        this.#setItemTimeout(targetClosestItemWidget, 200)\r\n                            .then(() => {\r\n                                const {activeItem} = this;\r\n                                this.#collapseSubmenus();\r\n                                if (activeItem) {\r\n                                    this.#clearItemTimeout(activeItem);\r\n                                    activeItem.expand();\r\n                                    activeItem.menu?.focus({preventScroll: true});\r\n                                }\r\n                            })\r\n                            .catch(() => void 0);\r\n                    }\r\n                    else {\r\n                        if (activeItem) {\r\n                            activeItem.menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleTriggerEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {element} = this;\r\n        const isClosestTargetMenu = event.composedPath().find(\r\n            target_i => target_i instanceof HTMLMenuElement\r\n        ) == element;\r\n        if (isClosestTargetMenu) {\r\n            \r\n        }\r\n    }\r\n}\r\n\r\nvar MenuWidget: MenuWidgetConstructor = MenuWidgetBase;","import { element } from \"../../elements/Element\";\r\nimport { MenuWidget } from \"./MenuWidget\";\r\nimport { Widget } from \"./Widget\";\r\n\r\ntype MenuItemType = \"button\" | \"radio\" | \"checkbox\" | \"menu\" | \"submenu\";\r\n\r\nexport { MenuItemWidget };\r\n\r\ninterface MenuItemWidgetConstructor {\r\n    readonly prototype: MenuItemWidget;\r\n    new(init: {\r\n        type: MenuItemType;\r\n        label: string;\r\n        menu?: MenuWidget;\r\n    }): MenuItemWidget;\r\n}\r\n\r\ninterface MenuItemWidget extends Widget {\r\n    type: MenuItemType;\r\n    label: string;\r\n    active: boolean;\r\n    hasPopup: boolean;\r\n    expanded: boolean;\r\n    menu: MenuWidget | null;\r\n    checked: boolean;\r\n    trigger(): void;\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\nclass MenuItemWidgetBase extends Widget implements MenuItemWidget {\r\n\r\n    #menu: MenuWidget | null = null;\r\n\r\n    constructor(init: {\r\n        type: MenuItemType;\r\n        label: string;\r\n        menu?: MenuWidget;\r\n    }) {\r\n        super();\r\n        const {label, type, menu} = init;\r\n        this.label = label;\r\n        this.type = type;\r\n        this.menu = menu ?? null;\r\n    }\r\n\r\n    render() {\r\n        return element(\"button\", {\r\n            properties: {\r\n                className: \"menuitem\"\r\n            },\r\n            attributes: {\r\n                role: \"menuitem\"\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    properties: {\r\n                        className: \"content\"\r\n                    },\r\n                    children: [\r\n                        element(\"span\", {\r\n                            properties: {\r\n                                className: \"icon\"\r\n                            }\r\n                        }),\r\n                        element(\"span\", {\r\n                            properties: {\r\n                                className: \"label\"\r\n                            }\r\n                        }),\r\n                        element(\"span\", {\r\n                            properties: {\r\n                                className: \"arrow\"\r\n                            }\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    get #labelElement() {\r\n        return this.element.querySelector(\":scope > .content > .label\")!;\r\n    }\r\n\r\n    get checked(): boolean {\r\n        return this.element.hasAttribute(\"aria-checked\");\r\n    }\r\n\r\n    set checked(value: boolean) {\r\n        this.element.toggleAttribute(\"aria-checked\", value);\r\n    }\r\n\r\n    get label(): string {\r\n        return this.#labelElement.textContent ?? \"\";\r\n    }\r\n\r\n    set label(value: string) {\r\n        this.#labelElement.textContent = value;\r\n    }\r\n\r\n    get type(): MenuItemType {\r\n        return <MenuItemType>this.element.dataset.type ?? \"button\";\r\n    }\r\n\r\n    set type(value: MenuItemType) {\r\n        this.element.dataset.type = value;\r\n    }\r\n\r\n    get menu(): MenuWidget | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    set menu(value: MenuWidget | null) {\r\n        const menu = this.#menu;\r\n        if (menu !== null && value !== null) {\r\n            menu.element.replaceWith(value.element);\r\n            this.hasPopup = true;\r\n        }\r\n        else {\r\n            if (menu !== null) {\r\n                menu.element.remove();\r\n                this.hasPopup = false;\r\n            }\r\n            if (value !== null) {\r\n                this.element.append(value.element);\r\n                this.hasPopup = true;\r\n            }\r\n        }\r\n        this.#menu = value;\r\n    }\r\n\r\n    get active(): boolean {\r\n        return this.element.hasAttribute(\"aria-active\");\r\n    }\r\n\r\n    set active(value: boolean) {\r\n        this.element.toggleAttribute(\"aria-active\", value);\r\n    }\r\n\r\n    get hasPopup(): boolean {\r\n        return this.element.hasAttribute(\"aria-haspopup\");\r\n    }\r\n\r\n    set hasPopup(value: boolean) {\r\n        this.element.setAttribute(\"aria-haspopup\", value.toString());\r\n    }\r\n\r\n    get expanded(): boolean {\r\n        return this.element.hasAttribute(\"aria-expanded\");\r\n    }\r\n\r\n    set expanded(value: boolean) {\r\n        this.element.toggleAttribute(\"aria-expanded\", value);\r\n    }\r\n\r\n    trigger(): void {\r\n        const {type, element} = this;\r\n        switch (type) {\r\n            case \"checkbox\": {\r\n                this.checked = !this.checked;\r\n                break;\r\n            }\r\n            case \"radio\": {\r\n                this.checked = true;\r\n                break;\r\n            }\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                this.toggle();\r\n                break;\r\n            }\r\n        }\r\n        element.dispatchEvent(new Event(\"trigger\", {\r\n            bubbles: true\r\n        }));\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {element, type} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                const expand = force ?? !this.expanded;\r\n                this.expanded = expand;\r\n                if (expand) {\r\n                    this.#positionMenu();\r\n                }\r\n                element.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {type} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                const {expanded} = this;\r\n                if (!expanded) {\r\n                    this.expanded = true;\r\n                    this.#positionMenu();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {type} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                const {expanded} = this;\r\n                if (expanded) {\r\n                    this.expanded = false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {element, menu} = this;\r\n        if (menu !== null) {\r\n            const {element: menuElement} = menu;\r\n            const {style: menuStyle} = menuElement;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = element.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menuElement.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const {type} = this;\r\n            if (type == \"menu\") {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const closestMenu = element.closest(\".menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    const overflowX = itemRight + menuWidth - clientWidth;\r\n                    const overflowY = itemTop + menuHeight - clientHeight;\r\n                    menuStyle.setProperty(\"left\", `${\r\n                        overflowX > 0 ?\r\n                        itemLeft - menuWidth - closestMenuLeft :\r\n                        itemRight - closestMenuLeft\r\n                    }px`);\r\n                    const menuComputedStyle = window.getComputedStyle(menuElement);\r\n                    const {paddingTop, paddingBottom} = menuComputedStyle;\r\n                    const menuPaddingTop = parseFloat(paddingTop);\r\n                    const menuPaddingBottom = parseFloat(paddingBottom);\r\n                    menuStyle.setProperty(\"top\", `${\r\n                        overflowY > 0 ?\r\n                        itemBottom - menuHeight - closestMenuTop + menuPaddingBottom :\r\n                        itemTop - closestMenuTop - menuPaddingTop\r\n                    }px`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar MenuItemWidget: MenuItemWidgetConstructor = MenuItemWidgetBase;","//import { MenuItemGroupWidget, MenuItemWidget, MenuWidget, MenuBarWidget } from \"./src/views/MenuBarWidget\";\r\nimport { TreeItemModel, TreeModel, TreeView } from \"./src/views/TreeView\";\r\nimport { Editor, HotKey, Key, KeyModifier } from \"./index\";\r\n\r\nimport \"./index\";\r\nimport { ListItemModel, ListModel, ListView } from \"./src/views/ListView\";\r\nimport { GridColumnModel, GridModel, GridRowModel, GridView } from \"./src/views/GridView\";\r\nimport { element, Fragment } from \"./src/elements/Element\";\r\nimport { MenuWidget } from \"./src/views/widgets/MenuWidget\";\r\nimport { MenuItemWidget } from \"./src/views/widgets/MenuItemWidget\";\r\n\r\nexport async function main() {\r\n    \r\n    /*const menubar = new MenuBarWidget([\r\n        new MenuItemWidget({\r\n            label: \"File\",\r\n            name: \"file\",\r\n            type: \"menu\",\r\n            menu: new MenuWidget({\r\n                name: \"File\",\r\n                groups: [\r\n                    new MenuItemGroupWidget({\r\n                        name: \"fileActions\",\r\n                        items: [\r\n                            new MenuItemWidget({\r\n                                label: \"Import file...\",\r\n                                name: \"import\"\r\n                            }),\r\n                            new MenuItemWidget({\r\n                                label: \"Export file...\",\r\n                                name: \"export\",\r\n                                hotkey: new HotKey(Key.B, KeyModifier.Control, KeyModifier.Alt)\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        }),\r\n        new MenuItemWidget({\r\n            label: \"Preferences\",\r\n            name: \"preferences\",\r\n            type: \"menu\",\r\n            menu: new MenuWidget({\r\n                name: \"Preferences\",\r\n                groups: [\r\n                    new MenuItemGroupWidget({\r\n                        name: \"fileActions\",\r\n                        items: [\r\n                            new MenuItemWidget({\r\n                                label: \"Advanced User\",\r\n                                name: \"advanced\",\r\n                                type: \"checkbox\",\r\n                                hotkey: new HotKey(Key.A, KeyModifier.Control, KeyModifier.Alt)\r\n                            }),\r\n                            new MenuItemWidget({\r\n                                label: \"Layout\",\r\n                                name: \"layout\",\r\n                                type: \"submenu\",\r\n                                menu: new MenuWidget({\r\n                                    name: \"Layout\",\r\n                                    groups: [\r\n                                        new MenuItemGroupWidget({\r\n                                            name: \"Layout\",\r\n                                            items: [\r\n                                                new MenuItemWidget({\r\n                                                    label: \"Standard\",\r\n                                                    name: \"standard\",\r\n                                                    type: \"radio\"\r\n                                                }),\r\n                                                new MenuItemWidget({\r\n                                                    label: \"Advanced\",\r\n                                                    name: \"advanced\",\r\n                                                    type: \"radio\"\r\n                                                })\r\n                                            ]\r\n                                        })\r\n                                    ]\r\n                                })\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        })\r\n    ]);*/\r\n\r\n    const treeView = new TreeView();\r\n    const treeModel = new TreeModel({\r\n        items: [\r\n            new TreeItemModel({\r\n                label: \"TI 0\",\r\n                type: \"parent\",\r\n                items: [\r\n                    new TreeItemModel({\r\n                        label: \"TI 1A\",\r\n                        type: \"parent\",\r\n                        items: [\r\n                            new TreeItemModel({\r\n                                type: \"leaf\",\r\n                                label: \"TI 1AX\"\r\n                            }),\r\n                        ]\r\n                    }),\r\n                    new TreeItemModel({\r\n                        type: \"parent\",\r\n                        label: \"TI 1B\"\r\n                    })\r\n                ]\r\n            }),\r\n            new TreeItemModel({\r\n                label: \"TI 1\",\r\n                type: \"parent\",\r\n                items: [\r\n                    new TreeItemModel({\r\n                        label: \"TI 1A\",\r\n                        type: \"parent\",\r\n                        items: [\r\n                            new TreeItemModel({\r\n                                type: \"leaf\",\r\n                                label: \"TI 1AX\"\r\n                            }),\r\n                        ]\r\n                    }),\r\n                    new TreeItemModel({\r\n                        type: \"parent\",\r\n                        label: \"TI 1B\"\r\n                    })\r\n                ]\r\n            }),\r\n            new TreeItemModel({\r\n                type: \"leaf\",\r\n                label: \"TI 2\"\r\n            }),\r\n            new TreeItemModel({\r\n                type: \"leaf\",\r\n                label: \"TI 3\"\r\n            })\r\n        ],\r\n        sortFunction: (item_a: TreeItemModel, item_b: TreeItemModel) => {\r\n            const {label: aLabel} = item_a;\r\n            const {label: bLabel} = item_b;\r\n            return bLabel.localeCompare(aLabel);\r\n        }\r\n    });\r\n    treeView.setModel(treeModel);\r\n    document.body.append(treeView);\r\n    \r\n    treeModel.childItems.append(\r\n        new TreeItemModel({\r\n            label: \"yo\",\r\n            type: \"parent\",\r\n            items: [\r\n                new TreeItemModel({\r\n                    type: \"leaf\",\r\n                    label: \"plop\"\r\n                })\r\n            ]\r\n        })\r\n    );\r\n\r\n    const listView = new ListView();\r\n    listView.setModel(\r\n        new ListModel({\r\n            items: [\r\n                new ListItemModel({\r\n                    label: \"Hey\"\r\n                }),\r\n                new ListItemModel({\r\n                    label: \"Yo\"\r\n                })\r\n            ]\r\n        })\r\n    );\r\n\r\n    document.body.append(listView);\r\n\r\n    // Menu actions\r\n    // Toolbar actions\r\n    const gridView = new GridView();\r\n    gridView.resizable = true;\r\n    gridView.sortable = true;\r\n    gridView.setColumnDelegate((column) => {\r\n        return Fragment(\r\n            element(\"label\", {\r\n                properties: {\r\n                    textContent: column.label\r\n                }\r\n            })/*,\r\n            element(\"e-toolbar\", {\r\n                children: [\r\n                    element(\"e-toolbaritem\", {\r\n                        properties: {\r\n                            type: \"button\"\r\n                        }\r\n                    })\r\n                ]\r\n            })*/\r\n        );\r\n    });\r\n    gridView.setModel(\r\n        new GridModel({\r\n            columns: [\r\n                new GridColumnModel({\r\n                    name: \"name\",\r\n                    label: \"Name\",\r\n                    type: String,\r\n                    extract: (row) => row.name\r\n                }),\r\n                new GridColumnModel({\r\n                    name: \"age\",\r\n                    label: \"Age\",\r\n                    type: Number,\r\n                    extract: (row) => row.age,\r\n                    filters: [{\r\n                        name: \"Minors\",\r\n                        filter: (row) => row.age < 18\r\n                    },{\r\n                        name: \"Majors\",\r\n                        filter: (row) => row.age >= 18\r\n                    }]\r\n                })\r\n            ],\r\n            rows: [\r\n                new GridRowModel({\r\n                    name: \"Denis\",\r\n                    age: 13\r\n                }),\r\n                new GridRowModel({\r\n                    name: \"Jean-Charles\",\r\n                    age: 32\r\n                }),\r\n                new GridRowModel({\r\n                    name: \"Charles\",\r\n                    age: 25\r\n                })\r\n            ]\r\n        })\r\n    );\r\n\r\n    //document.body.append(gridView);\r\n    const menuWidget = new MenuWidget([\r\n        new MenuItemWidget({\r\n            label: \"MenuItem A1\",\r\n            type: \"checkbox\"\r\n        }),\r\n        new MenuItemWidget({\r\n            label: \"MenuItem A2\",\r\n            type: \"submenu\",\r\n            menu: new MenuWidget([\r\n                new MenuItemWidget({label: \"MenuItem B1\", type: \"checkbox\"}),\r\n                new MenuItemWidget({label: \"MenuItem B2\", type: \"checkbox\"})\r\n            ])\r\n        })\r\n    ]);\r\n    document.body.append(menuWidget.element);\r\n    \r\n    \r\n    const editor = new Editor();\r\n    editor.setup();\r\n\r\n    /*editor.registerCheckboxAction(\"toggleAdvancedUser\", (_, newValue) => {\r\n        console.log(`Advanced user is now ${newValue}`);\r\n    }, {hotkey: new HotKey(Key.ARROW_DOWN, KeyModifier.Alt)});\r\n\r\n    editor.registerRadioAction(\"setLayout\", (_, newValue) => {\r\n        editor.setPair(\"layout\", newValue);\r\n    });\r\n\r\n    editor.registerButtonAction(\"execLayout\", () => {\r\n        const layout = editor.getPair(\"layout\");\r\n        console.log(`Layout is ${layout}`);\r\n    }, {hotkey: new HotKey(Key.ARROW_UP, KeyModifier.Alt)});*/\r\n\r\n\r\n    /*editor.registerRadioAction(\"selectTest\", (oldValue, newValue) => {\r\n        console.log(`Test is ${newValue}`);\r\n    }, {value: \"2\", key: \"test\"});\r\n\r\n    document.addEventListener(\"slotchange\", (event) => {\r\n        console.log(event);\r\n    });*/\r\n    \r\n    /*setTimeout(() => {\r\n        const execLayoutToolBarItem = document.querySelector<HTMLEActionElement>(\"e-toolbaritem[name=execLayout]\");\r\n        if (execLayoutToolBarItem) {\r\n            editor.addPairListener(\"layout\", (oldValue, newValue) => {\r\n                if (newValue !== oldValue) {\r\n                    execLayoutToolBarItem.value = newValue;\r\n                }\r\n            });\r\n        }\r\n    }, 100);\r\n\r\n    const button = element(\"button\", {\r\n        properties: {\r\n            textContent: \"Focus\"\r\n        },\r\n        listeners: {\r\n            click: () => {\r\n                const menuitem = document.querySelector<HTMLEMenuItemElement>(\"e-menuitem#hey\");\r\n                if (menuitem) {\r\n                    menuitem.focus();\r\n                }\r\n            }\r\n        }\r\n    });\r\n    document.body.append(button);\r\n    document.body.append(menubar.element);\r\n    \r\n    editor.executeCheckboxAction(\"toggleAdvancedUser\", true);\r\n    editor.setCheckboxActionValue(\"toggleAdvancedUser\", false);*/\r\n\r\n    //editor.setRadioActionValue(\"selectTest\", \"2\");\r\n\r\n    //editor.executeRadioAction(\"setLayout\", \"other\");\r\n}","import { ActionType, HTMLEActionElement } from \"./elements/containers/actions/Action\";\r\nimport { subtreeNodes } from \"./elements/Element\";\r\nimport { HotKey } from \"./Input\";\r\nimport { Widget } from \"./views/widgets/Widget\";\r\n\r\nexport { Editor };\r\nexport { EditorBase };\r\n\r\ninterface Action {\r\n    name: string;\r\n    type: ActionType;\r\n    trigger: (oldValue: any, newValue: any) => void;\r\n    key?: string;\r\n    value?: string;\r\n    checked?: boolean;\r\n}\r\n\r\ninterface ButtonAction {\r\n    name: string;\r\n    type: \"button\";\r\n    trigger: () => void;\r\n}\r\n\r\ninterface RadioAction {\r\n    name: string;\r\n    type: \"radio\";\r\n    trigger: (oldValue: string, newValue: string) => void;\r\n    value: string;\r\n    key?: string;\r\n}\r\n\r\ninterface CheckboxAction {\r\n    name: string;\r\n    type: \"checkbox\";\r\n    trigger: (oldValue: boolean, newValue: boolean) => void;\r\n    checked: boolean;\r\n    key?: string;\r\n}\r\n\r\ninterface EditorConstructor {\r\n    readonly prototype: Editor;\r\n    new(): Editor;\r\n}\r\n\r\ninterface Editor {\r\n    registerWidget(widget: Widget): void;\r\n    unregisterWidget(widget: Widget): void;\r\n    \r\n    /*setPair(key: string, value: any): void;\r\n    getPair<T>(key: string): T;\r\n    addPairListener(key: string, listener: (oldValue: any, newValue: any) => void): void;\r\n    removePairListener(key: string, listener: (oldValue: any, newValue: any) => void): void;*/\r\n\r\n    registerButtonAction(\r\n        name: string,\r\n        trigger: () => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n        }): ButtonAction;\r\n    registerRadioAction(\r\n        name: string,\r\n        trigger: (oldValue: string, newValue: string) => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            value?: string;\r\n        }): RadioAction;\r\n    registerCheckboxAction(\r\n        name: string,\r\n        trigger: (oldValue: boolean, newValue: boolean) => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            checked?: boolean;\r\n        }): CheckboxAction;\r\n    \r\n    executeButtonAction(name: string): void;\r\n    executeCheckboxAction(name: string, newChecked: boolean): void;\r\n    executeRadioAction(name: string, newValue: string): void;\r\n\r\n    setCheckboxActionValue(name: string, checked: boolean): void;\r\n    setRadioActionValue(name: string, value: string): void;\r\n\r\n    unregisterActionElement(action: string, element: HTMLEActionElement): void;\r\n    registerActionElement(action: string, element: HTMLEActionElement): void;\r\n    setup(): void;\r\n}\r\n\r\nclass EditorBase implements Editor {\r\n    private _widgets: Array<Widget>;\r\n    private _actions: Array<Action>;\r\n    private _actionElements: Array<Array<HTMLEActionElement>>;\r\n    private _hotkeys: Array<HotKey>;\r\n    private _pairs: Map<string, any>;\r\n    private _pairsListeners: Map<string, Array<(oldValue: any, newValue: any) => void>>;\r\n\r\n    private _actionsObserver: MutationObserver;\r\n\r\n    constructor() {\r\n        this._widgets = new Array();\r\n        this._actions = new Array();\r\n        this._actionElements = new Array();\r\n        this._hotkeys = new Array();\r\n        this._pairs = new Map();\r\n        this._pairsListeners = new Map();\r\n\r\n        this._actionsObserver =  new MutationObserver(this._actionsObserverCallback.bind(this));\r\n    }\r\n\r\n    private _actionsObserverCallback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            mutation.addedNodes.forEach((node: Node) => {\r\n                Array.from(subtreeNodes(node)).forEach((node) => {\r\n                    if (node instanceof HTMLEActionElement) {\r\n                        this.registerActionElement(node.name, node);\r\n                    }\r\n                });\r\n            });\r\n            mutation.removedNodes.forEach((node: Node) => {\r\n                Array.from(subtreeNodes(node)).forEach((node) => {\r\n                    if (node instanceof HTMLEActionElement) {\r\n                        this.unregisterActionElement(node.name, node);\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n    \r\n    public setup(): void {\r\n        document.body.addEventListener(\"keydown\", this);\r\n        document.body.addEventListener(\"trigger\", this);\r\n\r\n        this._actionsObserver.observe(document.body, {\r\n            childList: true,\r\n            subtree: true\r\n        });\r\n    }\r\n\r\n    /*public getPair<T>(key: string): T {\r\n        return this._pairs.get(key) as T;\r\n    }\r\n\r\n    public setPair(key: string, value: any): void {\r\n        const oldValue = this._pairs.get(key);\r\n        this._pairs.set(key, value);\r\n        const listeners = this._pairsListeners.get(key);\r\n        if (typeof listeners !== \"undefined\") {\r\n            listeners.forEach((listener_i) => {\r\n                listener_i(oldValue, value);\r\n            });\r\n        }\r\n    }\r\n\r\n    public addPairListener(key: string, listener: (oldValue: any, newValue: any) => void): void {\r\n        const listeners = this._pairsListeners.get(key);\r\n        if (typeof listeners !== \"undefined\") {\r\n            listeners.push(listener);\r\n        }\r\n        else {\r\n            this._pairsListeners.set(key, [listener]);\r\n        }\r\n    }\r\n\r\n    public removePairListener(name: string, listener: (oldValue: any, newValue: any) => void): void {\r\n        const listeners = this._pairsListeners.get(name);\r\n        if (typeof listeners !== \"undefined\") {\r\n            const listenerIndex = listeners.findIndex(listener_i => listener_i == listener);\r\n            if (listenerIndex > -1) {\r\n                listeners.copyWithin(listenerIndex, listenerIndex + 1);\r\n                listeners.length--;\r\n            }\r\n        }\r\n    }*/\r\n    \r\n    public registerWidget(widget: Widget): void {\r\n        widget.element.addEventListener(\"focusin\", this);\r\n        this._widgets.push(widget);\r\n    }\r\n\r\n    public unregisterWidget(widget: Widget): void {\r\n        if (this._widgets.includes(widget)) {\r\n            widget.element.removeEventListener(\"focusin\", this);\r\n            this._widgets.splice(this._widgets.indexOf(widget), 1);\r\n        }\r\n    }\r\n\r\n    public handleEvent(event: Event): void {\r\n        const target = event.target;\r\n        switch (event.type) {\r\n            case \"keydown\":\r\n                const actionsIndices = this._hotkeys\r\n                    .map((hotkey_i, i) => hotkey_i.test(event as KeyboardEvent) ? i : -1)\r\n                    .filter(i => i > -1);\r\n                actionsIndices.forEach((index) => {\r\n                    const {name, type, value, checked} = this._actions[index];\r\n                    switch (type) {\r\n                        case \"button\":\r\n                            this.executeButtonAction(name);\r\n                            break;\r\n                        case \"checkbox\":\r\n                            this.executeCheckboxAction(name, checked!);\r\n                            break;\r\n                        case \"radio\":\r\n                            this.executeRadioAction(name, value!);\r\n                            break;\r\n                    }\r\n                });\r\n                break;\r\n            case \"trigger\":\r\n                if (target instanceof HTMLEActionElement) {\r\n                    switch (target.type) {\r\n                        case \"button\":\r\n                            this.executeButtonAction(target.name);\r\n                            break;\r\n                        case \"checkbox\":\r\n                            this.executeCheckboxAction(target.name, target.checked);\r\n                            break;\r\n                        case \"radio\":\r\n                        case \"select\":\r\n                            this.executeRadioAction(target.name, target.value);\r\n                            break;\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    \r\n    public registerButtonAction(\r\n        name: string,\r\n        trigger: () => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n        }): ButtonAction {\r\n            return this.registerAction(name, trigger, \"button\", init);\r\n    }\r\n\r\n    public registerRadioAction(\r\n        name: string,\r\n        trigger: (oldValue: string, newValue: string) => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            value?: string;\r\n        }): RadioAction {\r\n            return this.registerAction(name, trigger, \"radio\", init);\r\n    }\r\n\r\n    public registerCheckboxAction(\r\n        name: string,\r\n        trigger: (oldValue: boolean, newValue: boolean) => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            checked?: boolean;\r\n        }): CheckboxAction {\r\n            return this.registerAction(name, trigger, \"checkbox\", init);\r\n    }\r\n\r\n    public registerAction(\r\n        name: string,\r\n        trigger: () => void,\r\n        type: \"button\",\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n        }): ButtonAction;\r\n    public registerAction(\r\n        name: string,\r\n        trigger: (oldValue: boolean, newValue: boolean) => void,\r\n        type: \"checkbox\",\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            checked?: boolean;\r\n        }): CheckboxAction;\r\n    public registerAction(\r\n        name: string,\r\n        trigger: (oldValue: string, newValue: string) => void,\r\n        type: \"radio\",\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            value?: string;\r\n        }): RadioAction;\r\n    public registerAction(\r\n        name: string,\r\n        trigger: (oldValue: any, newValue: any) => void,\r\n        type: ActionType,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            value?: string;\r\n            checked?: boolean;\r\n        }): Action {\r\n        const hotkey = init?.hotkey;\r\n        const key = init?.key;\r\n        const value = init?.value;\r\n        const checked = init?.checked;\r\n        const action: Action = {name, trigger, key, type};\r\n        if (value ?? false) {\r\n            action.value = value;\r\n        }\r\n        if (key !== void 0 && value !== void 0) {\r\n            localStorage.setItem(key, value);\r\n        }\r\n        if (checked ?? false) {\r\n            action.checked = checked;\r\n        }\r\n        const index = this._actions.push(action) - 1;\r\n        if (hotkey) {\r\n            this._hotkeys[index] = hotkey;\r\n        }\r\n        return action;\r\n    }\r\n\r\n    public executeButtonAction(name: string): void {\r\n        this.executeAction(name, \"button\");\r\n    }\r\n\r\n    public executeCheckboxAction(name: string, newChecked: boolean): void {\r\n        this.executeAction(name, \"checkbox\", newChecked);\r\n    }\r\n\r\n    public executeRadioAction(name: string, newValue: string): void {\r\n        this.executeAction(name, \"radio\", newValue);\r\n    }\r\n\r\n    public executeAction(name: string, type: \"button\"): void;\r\n    public executeAction(name: string, type: \"checkbox\", newChecked: boolean): void;\r\n    public executeAction(name: string, type: \"radio\", newValue: string): void;\r\n    public executeAction(name: string, type: ActionType, newValue?: any): void {\r\n        const actionIndex = this._actions.findIndex(\r\n            action_i => action_i.name == name\r\n        );\r\n        if (actionIndex > -1) {\r\n            const action = this._actions[actionIndex];\r\n            let oldValue;\r\n            switch (type) {\r\n                case \"radio\":\r\n                    oldValue = action.value ?? \"\";\r\n                    break;\r\n                case \"checkbox\":\r\n                    oldValue = action.value ?? false;\r\n                    break;\r\n            }\r\n            action.trigger(oldValue, newValue);\r\n            this.setActionValue(name, newValue);\r\n            /*action.value = newValue;\r\n            \r\n            const actionElements = this._actionElements[actionIndex];\r\n            if (actionElements) {\r\n                switch (type) {\r\n                    case \"radio\":\r\n                        actionElements.forEach((actionElement_i) => {\r\n                            if (actionElement_i.type == \"radio\") {\r\n                                actionElement_i.checked = (actionElement_i.value == newValue);\r\n                            }\r\n                            else if (actionElement_i.type == \"select\") {\r\n                                actionElement_i.value = newValue;\r\n                            }\r\n                        });\r\n                        break;\r\n                    case \"checkbox\":\r\n                        actionElements.forEach((actionElement_i) => {\r\n                            actionElement_i.checked = newValue;\r\n                        });\r\n                        break;\r\n                }\r\n            }*/\r\n        }\r\n    }\r\n\r\n    public setCheckboxActionValue(name: string, checked: boolean): void {\r\n        this.setActionValue(name, checked);\r\n    }\r\n\r\n    public setRadioActionValue(name: string, value: string): void {\r\n        this.setActionValue(name, value);\r\n    }\r\n\r\n    public setActionValue(name: string, value?: any): void {\r\n        const actionIndex = this._actions.findIndex(\r\n            action_i => action_i.name == name\r\n        );\r\n        if (actionIndex > -1) {\r\n            const action = this._actions[actionIndex];\r\n            const {type, key} = action;\r\n            action.value = value;\r\n            if (key) {\r\n                localStorage.setItem(key, value);\r\n            }\r\n            \r\n            const actionElements = this._actionElements[actionIndex];\r\n            if (actionElements) {\r\n                switch (type) {\r\n                    case \"radio\":\r\n                        actionElements.forEach((actionElement_i) => {\r\n                            if (actionElement_i.type == \"radio\") {\r\n                                actionElement_i.checked = (actionElement_i.value == value);\r\n                            }\r\n                            else if (actionElement_i.type == \"select\") {\r\n                                actionElement_i.value = value;\r\n                            }\r\n                        });\r\n                        break;\r\n                    case \"checkbox\":\r\n                        actionElements.forEach((actionElement_i) => {\r\n                            actionElement_i.checked = value;\r\n                        });\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public registerActionElement(name: string, element: HTMLEActionElement): void {\r\n        const actionIndex = this._actions.findIndex(action_i => action_i.name == name);\r\n        if (actionIndex > -1) {\r\n            const elements = this._actionElements[actionIndex];\r\n            if (elements) {\r\n                if (!elements.includes(element)) {\r\n                    elements.push(element);\r\n                }\r\n            }\r\n            else {\r\n                this._actionElements[actionIndex] = [element];\r\n            }\r\n\r\n            const action = this._actions[actionIndex];\r\n            const {type, value, checked} = action;\r\n            switch (type) {\r\n                case \"radio\":\r\n                    if (element.type == \"radio\") {\r\n                        element.checked = (element.value == value!);\r\n                    }\r\n                    else if (element.type == \"select\") {\r\n                        element.value = value!;\r\n                    }\r\n                    break;\r\n                case \"checkbox\":\r\n                    element.checked = checked!;\r\n                    break;\r\n            }\r\n\r\n            const hotkey = this._hotkeys[actionIndex];\r\n            if (hotkey) {\r\n                element.hotkey = hotkey.toString();\r\n            }\r\n        }\r\n    }\r\n\r\n    public unregisterActionElement(name: string, element: HTMLEActionElement): void {\r\n        const actionIndex = this._actions.findIndex(action_i => action_i.name == name);\r\n        if (actionIndex > -1) {\r\n            const elements = this._actionElements[actionIndex];\r\n            if (elements) {\r\n                const elementIndex = elements.findIndex(element_i => element_i == element);\r\n                if (elementIndex > -1) {\r\n                    elements.copyWithin(elementIndex, elementIndex + 1);\r\n                    elements.length--;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar Editor: EditorConstructor = EditorBase;"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","ModelChangeRecordBase","constructor","init","this","target","changeType","propertyName","oldValue","newValue","removedIndex","removedItems","ModelNodesList","insertedIndex","insertedItems","sortedIndices","PROPERTY_CHANGE","LIST_REMOVE","LIST_INSERT","LIST_SORT","ModelChangeRecord","items","slice","length","item","index","values","ModelEventBase","type","ModelEventTargetAccessor","setCurrentTarget","event","currentTarget","setTarget","ModelEvent","ModelNodeBase","Map","receiveEvent","callbacks","forEach","callback_i","addEventListener","callback","push","set","removeEventListener","callbackIndex","findIndex","splice","delete","dispatchEvent","super","setParent","parentNode","isCyclicReference","ancestorNode","TypeError","beginChanges","endChanges","getRecords","property","records","record","ModelNodeRecordsAccessor","triggerChange","node","handleRecord","ModelNode","ModelProperty","ModelObjectPropertiesAccessor","getProperty","setProperty","ModelObjectBase","ModelObject","ModelList","item_i","fromIndex","indexOf","sort","compareFunction","indexedItems","map","i","indexedItem_a","indexedItem_b","indexedItem_i","prepend","_items","append","insert","Math","abs","remove","clear","removedItem_i","reference","options","properties","propertiesFilter","childList","subtree","filter","record_i","includes","ModelChangeObserver","WeakMap","observe","references","listener","bind","unobserve","disconnect","camelToTrain","str","replace","toLowerCase","AttributeProperty","toString","attributeName","defaultValue","observed","observedAttributes","Reflect","Array","isArray","writable","Boolean","hasAttribute","setAttribute","removeAttribute","val","getAttribute","JSON","parse","stringify","Number","parseFloat","String","CustomElement","elementCtor","registerCustomElement","name","customElements","define","subtreeNodes","childNodes","childNodesCount","childIndex","child","Fragment","nodes","fragment","document","createDocumentFragment","tagName","part","exportParts","attributes","dataset","children","eventListeners","style","element","createElement","is","isBuiltinElement","keys","key_i","assign","elementPart","add","join","attributeValue","elementStyle","property_i","elementDataset","datasetEntry_i","from","entries","name_i","listener_i","content","reactiveElementsMap","reactiveElementsFinalizationRegistry","FinalizationRegistry","heldValue","model","reactiveElement","reactiveElementsMapEntry","reactiveElementsArray","reactiveElementPropertyObserver","reactiveElement_i","elementRef","react","deref","WeakRef","register","observerOptions","concat","Set","reactiveChildElementsMap","reactiveChildElementsFinalizationRegistry","list","reactiveChildElement","reactiveChildrenElementsMapEntry","reactiveChildElementsArray","reactiveChildElementsObserver","range","listLength","reactiveChildElements_i","parentRef","mapping","placeholder","parent","firstChild","childrenCount","removeChild","insertedItemsArray","before","removedCount","createRange","removeEndIndex","setStartBefore","setEndAfter","deleteContents","childrenArray","index_i","reactiveChildElements","reactiveChildElementsMapEntry","areAttributesMatching","referenceAttributeType","referenceAttributeName","referenceAttributeValue","RegExp","test","shadowTemplate","HTMLETreeItemGroupElementBase","HTMLElement","shadowRoot","attachShadow","mode","cloneNode","assignedElements","element_i","HTMLETreeItemElement","posinset","textContent","HTMLETreeItemGroupElement","HTMLETreeItemElementBase","connectedCallback","level","parentElement","HTMLETreeElement","attributeChangedCallback","Event","bubbles","labelPart","querySelector","toggle","force","expanded","shiftKey","ctrlKey","slotName","HTMLETreeElementBase","createTreeWalker","NodeFilter","SHOW_ELEMENT","getElementsByTagName","selectedItems","walker","currentNode","root","selected","beginSelection","endSelection","FILTER_ACCEPT","FILTER_SKIP","FILTER_REJECT","to","position","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","nextVisibleItem","DOCUMENT_POSITION_PRECEDING","previousVisibleItem","selectedItem_i","contains","activeItem","active","tabIndex","dropTargetItem","droptarget","lastChild","previousSibling","nextNode","nextSibling","lastItem","blur","stopPropagation","lastSelectedItem","preventDefault","relatedTarget","relatedTargetRoot","getRootNode","relatedTargetHost","ShadowRoot","host","firstItem","parentItem","focus","preventScroll","previousItem","nextItem","click","ViewBase","setModel","renderLight","renderShadow","refresh","shadow","replaceChildren","light","View","TreeModel","childItems","flattenItems","sortFunction","item_a","item_b","label","localeCompare","flatMap","treeItem_i","of","getItemByUri","uri","itemsCount","uriLength","itemUri","itemUriLength","startsWith","charAt","flattenedInsertedItems","insertedItem_i","flattenedRemovedItems","TreeItemList","show","console","log","hide","display","result","reduce","removedItemsGroups","TreeItemModel","group","list_i","children_i","child_i","childCount","visibility","TreeViewBase","getTreeElement","getTreeItemElement","getDragImageElement","tree","treeElement","dragstart","drop","contextmenu","keydown","rel","href","className","hidden","treeItemElement","draggable","slot","trigger","treeitem","badge","toolbar","visibilityItem","namedItem","title","checked","dragImageElement","span","dataTransfer","selectedElements","selectedCount","selectedUris","uri_i","_","uris","some","uri_j","selectedUrisString","lastUri","dropEffect","setData","dragImage","setDragImage","targetUri","targetItem","transferedUris","getData","split","transferedItems","targetType","targetParentItem","targetList","newElements","clientX","clientY","menu","contextual","contextX","contextY","close","body","TreeView","HTMLEActionElementBase","disabled","enable","disable","Key","KeyModifier","MouseButton","HTMLEActionElement","HTMLEGridCellElementBase","HTMLEGridCellElement","HTMLEGridRowGroupElementBase","HTMLEGridRowGroupElement","HTMLEMenuItemElementBase","expand","collapse","menuStyle","top","itemTop","bottom","itemBottom","left","itemLeft","right","itemRight","getBoundingClientRect","width","menuWidth","height","menuHeight","scrollY","scrollX","window","clientWidth","clientHeight","overflowX","overflowY","closestMenu","closest","closestMenuTop","closestMenuLeft","menuComputedStyle","getComputedStyle","paddingTop","paddingBottom","menuPaddingTop","menuPaddingBottom","selector","propertyKey","getter","withinShadowRoot","HTMLEMenuItemElement","EMenuItem","button","checkbox","radio","submenu","HTMLEMenuItemGroupElementBase","toggleTimeouts","HTMLEMenuItemGroupElement","EMenuItemGroup","radios","HTMLEMenuElementBase","previousNode","targetClosestItem","find","error","async","delay","Promise","resolve","reject","timeout","setTimeout","clearTimeout","then","composedPath","target_i","HTMLEMenuElement","intersectsWithMouse","containsRelatedTarget","activeIndex","catch","radio_i","EMenu","HTMLEGridRowElementBase","cells","HTMLEGridCellCollection","cell_i","HTMLEGridRowElement","HTMLEGridBodyElement","HTMLEGridRowCollection","HTMLEGridBodyElementBase","rows","HTMLEGridHeadElementBase","HTMLEGridHeadElement","HTMLEGridElementBase","node_i","clearSelection","selectedCells","querySelectorAll","selectedRows","toIndex","min","max","nextVisibleRow","previousVisibleRow","selectedCell_i","selectedRow_i","row_i","cell","activeCell","closestRow","row","activeRow","cellsWalker","rowsWalker","closestRowCells","cellIndex","previousRow","previousRowCells","nextRow","nextRowCells","selectby","targetCell","targetRow","lastSelectedCell","lastSelectedRow","firstRow","firstCell","lastRow","lastCell","previousCell","nextCell","topCell","bottomCell","text","stylesheet","CSSStyleSheet","replaceSync","Stylesheet","newlineIndex","indentMatch","substring","match","indent","replaceAll","trimEnd","trimMultilineIndent","HTMLEMenuItemCollectionBase","HTMLEMenuItemRadioList","HTMLEMenuItemRadioListBase","itemName","itemType","HTMLEMenuItemCollection","HTMLEMenuBarElementBase","isActive","HTMLEMenuButtonElementBase","HTMLEMenuButtonElement","EMenuButton","HTMLEOptionElementBase","innerText","HTMLEOptionElement","HTMLEOptionGroupElementBase","HTMLEOptionGroupElement","HTMLESelectElementBase","matchingOption","option","selectedIndex","activeOption","descriptionPart","description","selectedOption","valuePart","optionsStyle","selectBottom","selectLeft","previousOption","nextOption","firstOption","lastOption","keyLength","keyCode","charCodeAt","optionsArray","firstMatchIndex","option_i","nextMatchIndex","matchIndex","default","slottedKeyboardListeners","slottedTriggerListeners","HTMLESelectElement","HTMLEToolBarItemElementBase","menubutton","select","selectValue","HTMLEToolBarItemElement","EToolBarItem","HTMLEToolBarItemGroupElementBase","HTMLEToolBarItemGroupElement","HTMLEToolBarItemCollectionBase","HTMLEToolBarItemRadioList","HTMLEToolBarItemRadioListBase","HTMLEToolBarItemCollection","HTMLEToolBarElementBase","HTMLEToolBarElement","HTMLETabPanelElementBase","HTMLETabPanelElement","HTMLETabElementBase","panel","getElementById","controls","CustomEvent","detail","tab","HTMLETabElement","HTMLETabListElementBase","tabs","focusTabAt","activeTab","activateTab","targetIndex","thisTab","thisTabIndex","HTMLEListItemElementBase","HTMLSpanElement","HTMLEListItemElement","HTMLEListItemGroupElementBase","HTMLEListItemGroupElement","HTMLEListElementBase","HTMLEListElement","HTMLEDraggableElementBase","disconnectedCallback","referee","thisRefIndex","getReference","HTMLEDraggableElement","HTMLEDragzoneElementBase","selectDraggable","selectedDraggables","unselectDraggable","draggables","elem","thisSelectedDraggable","dragged","id","thisDraggedDraggable","firstIndex","direction","sign","startRangeIndex","endRangeIndex","thisDraggable","HTMLEDragzoneElement","HTMLEDropzoneElementBase","droptest","appendAreaPart","removeDraggables","dragovered","dropIndex","dragzoneId","dragzone","selectedDraggable","HTMLEDropzoneElement","addDraggables","placeholderPart","dataTransferSuccess","newDraggables","insertionPosition","multiple","newDraggable","insertAdjacentElement","appendChild","replaceChild","action","once","predicate","toRemove","atPosition","HTMLEDialogElementBase","handleEvent","cancel","confirm","open","HTMLEHandleElementBase","pointerId","releasePointerCapture","setPointerCapture","targetComputedStyle","movementX","movementY","rectWidth","rectHeight","outerElement","outerRectLeft","outerRectRight","outerRectTop","outerRectBottom","getPropertyValue","newLeft","trunc","newTop","HTMLEHeightSashElementBase","rootNode","requestAnimationFrame","growdir","newHeight","computedNewHeight","HTMLEImportElementBase","src","outerHTML","fetch","response","ok","Error","statusText","barShadowTemplate","circleShadowTemplate","HTMLELoaderElementBase","promise","finally","commonStyle","barStyle","circleStyle","HTMLEWidthSashElementBase","setWidth","newWidth","ListModel","getItemByIndex","ListItemList","ListItemModel","ListViewBase","getListElement","getListItemElement","listElement","listItemElement","toolbaritem","parseInt","ListView","GridModel","columns","getColumnByName","column_i","sortByColumn","column","sortOrder","sortorder","row_1","row_2","cell_1","extract","cell_2","GridColumnModel","filters","GridRowModel","age","GridViewBase","getGridElement","setColumnDelegate","delegate","setCellDelegate","getRowElement","getColumnHeaderElement","getColumnDataElements","input","setSearchFilter","rowElement","filter_i","gridElement","addDisplayFilter","removeDisplayFilter","displayFilters","filterIndex","every","resizable","columnHeaderElement","removeProperty","maxWidth","sortRadioItem_i","resize","gridRowElement","headers","HTMLInputElement","Element","targetColumn","GridView","Widget","render","classList","hasPopup","HTMLMenuElement","targetClosestItemWidget","MenuWidget","insertItem","role","menuElement","MenuItemWidget","toggleAttribute","replaceWith","main","treeView","treeModel","aLabel","bLabel","listView","gridView","sortable","menuWidget","_widgets","_actions","_actionElements","_hotkeys","_pairs","_pairsListeners","_actionsObserver","MutationObserver","_actionsObserverCallback","mutationsList","mutation","addedNodes","registerActionElement","removedNodes","unregisterActionElement","setup","registerWidget","widget","unregisterWidget","hotkey_i","executeButtonAction","executeCheckboxAction","executeRadioAction","registerButtonAction","registerAction","registerRadioAction","registerCheckboxAction","hotkey","localStorage","setItem","executeAction","newChecked","actionIndex","action_i","setActionValue","setCheckboxActionValue","setRadioActionValue","actionElements","actionElement_i","elements","elementIndex","copyWithin"],"sourceRoot":""}