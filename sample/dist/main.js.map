{"version":3,"file":"main.js","mappings":"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","sources":["webpack://main/webpack/bootstrap","webpack://main/webpack/runtime/define property getters","webpack://main/webpack/runtime/hasOwnProperty shorthand","webpack://main/webpack/runtime/make namespace object","webpack://main/./src/elements/Snippets.ts","webpack://main/./src/elements/HTMLElement.ts","webpack://main/./src/events/EventDispatcher.ts","webpack://main/./src/models/Model.ts","webpack://main/./src/Editor.ts","webpack://main/./src/commands/Command.ts","webpack://main/./src/Input.ts","webpack://main/./src/elements/containers/menus/Menu.ts","webpack://main/./src/elements/containers/menus/MenuBar.ts","webpack://main/./src/elements/containers/menus/MenuButton.ts","webpack://main/./src/elements/containers/menus/MenuItem.ts","webpack://main/./src/elements/containers/menus/MenuItemGroup.ts","webpack://main/./src/elements/containers/panels/Panel.ts","webpack://main/./src/elements/containers/panels/PanelGroup.ts","webpack://main/./src/elements/containers/status/StatusBar.ts","webpack://main/./src/elements/containers/status/StatusItem.ts","webpack://main/./src/elements/containers/tabs/Tab.ts","webpack://main/./src/elements/containers/tabs/TabList.ts","webpack://main/./src/elements/containers/tabs/TabPanel.ts","webpack://main/./src/elements/containers/trees/TreeItem.ts","webpack://main/./src/elements/containers/trees/Tree.ts","webpack://main/./src/elements/controls/draggable/Draggable.ts","webpack://main/./src/elements/controls/draggable/Dragzone.ts","webpack://main/./src/elements/controls/draggable/Dropzone.ts","webpack://main/./src/elements/controls/dialogs/Dialog.ts","webpack://main/./src/elements/forms/Snippets.ts","webpack://main/./src/elements/utils/HeightSash.ts","webpack://main/./src/elements/utils/Import.ts","webpack://main/./src/elements/utils/Loader.ts","webpack://main/./src/elements/utils/Palette.ts","webpack://main/./src/elements/utils/WidthSash.ts","webpack://main/./src/observers/AttributeMixinsObserver.ts","webpack://main/./src/observers/ReactiveNodesObserver.ts","webpack://main/./src/templates/menus/MenuItemGroupTemplate.ts","webpack://main/./src/templates/menus/MenuTemplate.ts","webpack://main/./src/templates/menus/MenuItemTemplate.ts","webpack://main/./src/templates/menus/MenubarTemplate.ts","webpack://main/./src/templates/table/TableTemplate.ts","webpack://main/./src/views/View.ts","webpack://main/./sample/main.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export { forAllSubtreeElements };\r\nexport { forAllSubtreeNodes };\r\nexport { getPropertyFromPath };\r\nexport { setPropertyFromPath };\r\nexport { pointIntersectsWithDOMRect };\r\nexport { snakeToCamel };\r\nexport { camelToSnake };\r\nexport { trainToCamel };\r\nexport { camelToTrain };\r\nexport { titlize };\r\n\r\nfunction forAllSubtreeElements(element: Element, func: (element: Element) => void) {\r\n  let index = 0;\r\n  func(element);\r\n  while (index < element.children.length) {\r\n    let child = element.children.item(index);\r\n    if (child) {\r\n      forAllSubtreeElements(child, func);\r\n    }\r\n    index++;\r\n  }\r\n}\r\n\r\nfunction forAllSubtreeNodes(parent: Node & ParentNode, func: (childNode: Node & ChildNode, parentNode: Node & ParentNode) => void) {\r\n  let index = 0;\r\n  while (index < parent.childNodes.length) {\r\n    let child = parent.childNodes.item(index);\r\n    if (child) {\r\n      func(child, parent);\r\n      if (child.hasChildNodes()) {\r\n        forAllSubtreeNodes(child as unknown as Node & ParentNode, func);\r\n      }\r\n    }\r\n    index++;\r\n  }\r\n}\r\n\r\nfunction getPropertyFromPath(src: object, path: string): any {\r\n  const props = path.split(\".\");\r\n  let obj: {[key: string]: any} | undefined  = src;\r\n  props.forEach((prop) => {\r\n    if (prop.includes(\"[\")) {\r\n      let index = parseInt(prop.substring(prop.indexOf(\"[\") + 1, prop.indexOf(\"]\")));\r\n      if (Number.isNaN(index)) {\r\n        console.error(`Wrong indexed path: ${prop}`);\r\n      }\r\n      prop = prop.substring(0, prop.indexOf(\"[\"));\r\n      if (typeof obj === \"object\" && prop in obj && Array.isArray(obj[prop])) {\r\n        obj = obj[prop][index];\r\n      }\r\n    }\r\n    else if (typeof obj === \"object\" && prop in obj) {\r\n      obj = obj[prop];\r\n    }\r\n    else {\r\n      obj = void 0;\r\n    }\r\n  });\r\n  return obj;\r\n}\r\n\r\nfunction setPropertyFromPath(src: object, path: string, value: any): object {\r\n  const props = path.split(\".\");\r\n  let obj: {[key: string]: any} = src;\r\n  if (src == null) {\r\n    console.error(\"Source data can't be null\");\r\n  }\r\n  props.forEach((prop, idx) => {\r\n    if (prop.includes(\"[\")) {\r\n      let index = parseInt(prop.substring(prop.indexOf(\"[\") + 1, prop.indexOf(\"]\")));\r\n      if (Number.isNaN(index)) {\r\n        console.error(`Wrong indexed path: ${prop}`);\r\n      }\r\n      prop = prop.substring(0, prop.indexOf(\"[\"));\r\n      if (!Array.isArray(obj[prop])) {\r\n        obj[prop] = [];\r\n      }\r\n      if (idx === props.length - 1) {\r\n        obj[prop][index] = value;\r\n      }\r\n      else {\r\n        if (typeof obj[prop][index] !== \"object\") {\r\n          obj[prop][index] = {}\r\n        }\r\n        obj = obj[prop][index];\r\n      }\r\n    }\r\n    else {\r\n      if (idx === props.length - 1) {\r\n        obj[prop] = value;\r\n      }\r\n      else {\r\n        if (typeof obj[prop] !== \"object\") {\r\n          obj[prop] = {}\r\n        }\r\n        //else {\r\n        obj = obj[prop];\r\n        //}\r\n      }\r\n    }\r\n  });\r\n  return src;\r\n}\r\n\r\nfunction pointIntersectsWithDOMRect(x: number, y: number, rect: DOMRect) {\r\n  return !(rect.left > x || \r\n    rect.right < x || \r\n    rect.top > y ||\r\n    rect.bottom < y);\r\n}\r\n\r\nfunction titlize(str: string) {\r\n  return `${str.charAt(0).toUpperCase()}${str.substr(1).toLowerCase()}`;\r\n}\r\n\r\nfunction snakeToCamel(str: string) {\r\n  return str.split('_').map(str =>  str.charAt(0).toUpperCase() + str.substr(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToSnake(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '_').toLowerCase();\r\n}\r\n\r\nfunction trainToCamel(str: string) {\r\n  return str.split('-').map(str =>  str.charAt(0).toUpperCase() + str.substr(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToTrain(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '-').toLowerCase();\r\n}","import { ListModel, ListModelChangeEvent, ObjectModel, ObjectModelChangeEvent } from \"../models/Model\";\r\nimport { camelToTrain, forAllSubtreeElements, forAllSubtreeNodes } from \"./Snippets\";\r\n\r\nexport { isTagElement };\r\nexport { RegisterCustomHTMLElement };\r\nexport { GenerateAttributeAccessors };\r\nexport { bindShadowRoot };\r\nexport { setElementProperties };\r\nexport { setElementAttributes };\r\nexport { isParentNode };\r\nexport { isReactiveNode };\r\nexport { isReactiveParentNode };\r\nexport { ReactiveNode };\r\nexport { ReactiveParentNode };\r\nexport { ReactiveChildNodes };\r\nexport { isElement };\r\nexport { Element };\r\nexport { AttributeMutationMixin };\r\nexport { AttributeType };\r\nexport { areAttributesMatching };\r\nexport { AttributeMutationMixinBase };\r\nexport { Fragment };\r\nexport { TextNode };\r\nexport { setHTMLElementEventListeners };\r\n\r\nfunction isTagElement<K extends keyof HTMLElementTagNameMap>(tagName: K, obj: any): obj is HTMLElementTagNameMap[K] {\r\n    return obj instanceof Node && obj.nodeType === obj.ELEMENT_NODE && (obj as Element).tagName.toLowerCase() == tagName;\r\n}\r\n\r\ninterface RegisterCustomHTMLElementDecorator {\r\n    (args: {\r\n        name: string;\r\n        observedAttributes?: string[],\r\n        options?: ElementDefinitionOptions\r\n    }): <C extends CustomElementConstructor>(elementCtor: C) => C;\r\n}\r\n\r\nconst RegisterCustomHTMLElement: RegisterCustomHTMLElementDecorator = function(args: {\r\n    name: string;\r\n    attributes?: string[],\r\n    observedAttributes?: string[],\r\n    options?: ElementDefinitionOptions\r\n}) {\r\n    return <C extends CustomElementConstructor>(\r\n        elementCtor: C\r\n    ) => {\r\n        const { name, observedAttributes, options } = args;\r\n\r\n        if (observedAttributes) {\r\n            Object.defineProperty(elementCtor.prototype.constructor, 'observedAttributes', {\r\n                get: () => {\r\n                    return observedAttributes;\r\n                }\r\n            });\r\n        }\r\n\r\n        if (!customElements.get(name)) {\r\n            customElements.define(\r\n                name,\r\n                elementCtor,\r\n                options\r\n            );\r\n        }\r\n\r\n        return elementCtor;\r\n    }\r\n}\r\n\r\ninterface GenerateAttributeAccessorsDecorator {\r\n    (attributes: {\r\n        name: string,\r\n        type?: \"string\" | \"number\" | \"boolean\" | \"json\"\r\n    }[]): <C extends CustomElementConstructor>(elementCtor: C) => C;\r\n}\r\n\r\nconst GenerateAttributeAccessors: GenerateAttributeAccessorsDecorator = function(attributes: {\r\n    name: string,\r\n    type?: \"string\" | \"number\" | \"boolean\" | \"json\"\r\n}[]) {\r\n    return <C extends CustomElementConstructor>(\r\n        elementCtor: C\r\n    ) => {\r\n        attributes.forEach((attr: {\r\n            name: string,\r\n            type?: \"string\" | \"number\" | \"boolean\" | \"json\"\r\n        }) => {\r\n            const { name,  type } = attr;\r\n            switch (type) {\r\n                case \"boolean\":\r\n                    Object.defineProperty(elementCtor.prototype, name, {\r\n                        get: function(this: HTMLElement) {\r\n                            const val = this.getAttribute(name);\r\n                            return (val === \"\" || false);\r\n                        },\r\n                        set: function(this: HTMLElement, value) {\r\n                            if (value) {\r\n                                this.setAttribute(name, \"\");\r\n                            }\r\n                            else {\r\n                                this.removeAttribute(name);\r\n                            }\r\n                        }\r\n                    });\r\n                    break;\r\n                case \"json\":\r\n                    Object.defineProperty(elementCtor.prototype, name, {\r\n                        get: function(this: HTMLElement) {\r\n                            const val = this.getAttribute(name);\r\n                            return (val !== null) ? JSON.parse(val) : null;\r\n                        },\r\n                        set: function(this: HTMLElement, value) {\r\n                            if (value !== null) {\r\n                                this.setAttribute(name, JSON.stringify(value));\r\n                            }\r\n                            else {\r\n                                this.removeAttribute(name);\r\n                            }\r\n                        }\r\n                    });\r\n                    break;\r\n                case \"number\":\r\n                    Object.defineProperty(elementCtor.prototype, name, {\r\n                        get: function(this: HTMLElement) {\r\n                            const val = this.getAttribute(name);\r\n                            return (val !== null) ? parseFloat(val) : val;\r\n                        },\r\n                        set: function(this: HTMLElement, value) {\r\n                            if (value) {\r\n                                this.setAttribute(name, value);\r\n                            }\r\n                            else {\r\n                                this.removeAttribute(name);\r\n                            }\r\n                        }\r\n                    });\r\n                    break;\r\n                case \"string\":\r\n                default:\r\n                    Object.defineProperty(elementCtor.prototype, name, {\r\n                        get: function(this: HTMLElement) {\r\n                            const val = this.getAttribute(name);\r\n                            return val;\r\n                        },\r\n                        set: function(this: HTMLElement, value) {\r\n                            if (value) {\r\n                                this.setAttribute(name, value);\r\n                            }\r\n                            else {\r\n                                this.removeAttribute(name);\r\n                            }\r\n                        }\r\n                    });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return elementCtor;\r\n    }\r\n}\r\n\r\nfunction bindShadowRoot(element: HTMLElement, templateContent?: string): ShadowRoot {\r\n    const root = element.attachShadow({mode: \"open\"});\r\n    const template = document.createElement(\"template\");\r\n    if (typeof templateContent !== \"undefined\") {\r\n        template.innerHTML = templateContent;\r\n    }\r\n    root.appendChild(template.content.cloneNode(true));\r\n    return root;\r\n}\r\n\r\nfunction Fragment(...nodes: (Node | string)[]): DocumentFragment {\r\n    let fragment = document.createDocumentFragment();\r\n    fragment.append(...nodes);\r\n    return fragment;\r\n}\r\n\r\nfunction TextNode(text: string = \"\"): Node {\r\n    return document.createTextNode(text);\r\n}\r\n\r\ntype _IfEquals<X, Y, A = X, B = never> =\r\n  (<T>() => T extends X ? 1 : 2) extends\r\n  (<T>() => T extends Y ? 1 : 2) ? A : B;\r\n\r\ntype WritableKeys<T> = {\r\n    [P in keyof T]-?: _IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, P>\r\n}[keyof T];\r\n\r\ninterface HTMLInit<K extends keyof HTMLElementTagNameMap> {\r\n    options?: ElementCreationOptions,\r\n    props?: Partial<Pick<HTMLElementTagNameMap[K], WritableKeys<HTMLElementTagNameMap[K]>>>,\r\n    attrs?: {[name: string]: number | string | boolean},\r\n    children?: Node[] | NodeList | ReactiveChildNodes,\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: (event: HTMLElementEventMap[EventName]) => void | [(event: HTMLElementEventMap[EventName]) => void, Partial<boolean | AddEventListenerOptions>]\r\n    },\r\n    styles?: {\r\n        [property: string]: string | [string, string]\r\n    }\r\n}\r\n\r\nfunction Element<K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLInit<K>): HTMLElementTagNameMap[K] {\r\n        const element = document.createElement(tagName, init?.options);\r\n        if (init) {\r\n            if (init.props) {\r\n                setElementProperties(element, init.props);\r\n            }\r\n            if (init.attrs) {\r\n                setElementAttributes(element, init.attrs);\r\n            }\r\n            if (init.children) {\r\n                if (typeof init.children === \"function\") {\r\n                    element.replaceChildren(...init.children(element));\r\n                }\r\n                else {\r\n                    element.replaceChildren(...init.children);\r\n                }\r\n            }\r\n            if (init.listeners) {\r\n                setHTMLElementEventListeners(element, init.listeners);\r\n            }\r\n            if (init.styles) {\r\n                setHTMLElementStyles(element, init.styles);\r\n            }\r\n        }\r\n        return element;\r\n}\r\n\r\ntype ReactiveNode = Node & {\r\n    _reactiveNodeAttributes: {\r\n        addReactListener: () => void;\r\n        removeReactListener: () => void;\r\n    }\r\n};\r\n\r\ntype ReactiveParentNode = Node & {\r\n    _reactiveParentNodeAttributes: {\r\n        addReactListener: () => void;\r\n        removeReactListener: () => void;\r\n    }\r\n};\r\n\r\nfunction isParentNode(node: Node): node is Node & ParentNode {\r\n    return node.hasChildNodes();\r\n}\r\n\r\nfunction isElement(node: Node): node is Element {\r\n    return node.nodeType === node.ELEMENT_NODE;\r\n}\r\n\r\nfunction isReactiveNode(node: Node): node is ReactiveNode {\r\n    return typeof (node as ReactiveNode)._reactiveNodeAttributes === \"object\" &&\r\n        typeof (node as ReactiveNode)._reactiveNodeAttributes.addReactListener === \"function\" &&\r\n        typeof (node as ReactiveNode)._reactiveNodeAttributes.removeReactListener === \"function\";\r\n}\r\n\r\nfunction isReactiveParentNode(node: Node): node is ReactiveParentNode {\r\n    return typeof (node as ReactiveParentNode)._reactiveParentNodeAttributes === \"object\" &&\r\n        typeof (node as ReactiveParentNode)._reactiveParentNodeAttributes.addReactListener === \"function\" &&\r\n        typeof (node as ReactiveParentNode)._reactiveParentNodeAttributes.removeReactListener === \"function\";\r\n}\r\n\r\nfunction ReactiveNode<Data extends object, N extends Node>\r\n    (list: ListModel<Data>, node: N, react: (node: N, addedItems: Data[], removedItems: Data[], index: number) => void): N\r\nfunction ReactiveNode<Data extends object, N extends Node>\r\n    (object: ObjectModel<Data>, node: N, react: <K extends keyof Data>(node: N, property: K, oldValue: Data[K], newValue: Data[K]) => void): N\r\nfunction ReactiveNode<Data extends object, N extends Node>\r\n    (objectOrList: ObjectModel<Data> | ListModel<Data>, node: N, react: (<K extends keyof Data>(node: N, property: K, oldValue: Data[K], newValue: Data[K]) => void)\r\n    | ((node: N, addedItems: Data[], removedItems: Data[], index: number) => void)): N {\r\n        if (\"items\" in objectOrList) {\r\n            const listener = (event: ListModelChangeEvent) => {\r\n                react(node,  event.data.addedItems as any, event.data.removedItems as any, event.data.index as any);\r\n            };\r\n            Object.assign(\r\n                node, {\r\n                    _reactiveNodeAttributes: {\r\n                        addReactListener: () => {\r\n                            objectOrList.addEventListener(\"listmodelchange\", listener);\r\n                        },\r\n                        removeReactListener: () => {\r\n                            objectOrList.removeEventListener(\"listmodelchange\", listener);\r\n                        }\r\n                    }\r\n                }\r\n            ) as ReactiveNode;\r\n            react(node, objectOrList.items as any, [], 0 as any);\r\n        }\r\n        else {\r\n            const listener = (event: ObjectModelChangeEvent) => {\r\n                react(node, event.data.property as any, event.data.oldValue, event.data.newValue);\r\n            };\r\n            Object.assign(\r\n                node, {\r\n                    _reactiveNodeAttributes: {\r\n                        addReactListener: () => {\r\n                            objectOrList.addEventListener(\"objectmodelchange\", listener);\r\n                        },\r\n                        removeReactListener: () => {\r\n                            objectOrList.removeEventListener(\"objectmodelchange\", listener);\r\n                        }\r\n                    }\r\n                }\r\n            ) as ReactiveNode;\r\n            const keys = Object.keys(objectOrList.data) as (keyof Data)[];\r\n            keys.forEach((key) => {\r\n                react(node, key as any, void 0 as any, objectOrList.data[key] as any);\r\n            });\r\n        }\r\n        return node;\r\n}\r\n\r\ninterface ReactiveChildNodes {\r\n    (parent: Node & ParentNode): (Node | string)[]\r\n}\r\n\r\nfunction ReactiveChildNodes<Item extends object>(list: ListModel<Item>, map: (item: Item) => Node | string, placeholder?: Node): ReactiveChildNodes {\r\n    return (parent: Node & ParentNode) => {\r\n        const listener = (event: ListModelChangeEvent) => {\r\n            if (event.data.addedItems.length === list.items.length) {\r\n                parent.textContent = \"\";\r\n            }\r\n            if (event.data.removedItems.length) {\r\n                for (let i = 0; i < event.data.removedItems.length; i++) {\r\n                    if (parent.childNodes.length > event.data.index) {\r\n                        parent.childNodes.item(event.data.index).remove();\r\n                    }\r\n                }\r\n            }\r\n            if (event.data.addedItems.length) {\r\n                let addedElements = event.data.addedItems.map(item => map(item));\r\n                if (event.data.index >= list.items.length - event.data.addedItems.length) {\r\n                    parent.append(...addedElements);\r\n                }\r\n                else {\r\n                    parent.childNodes.item(event.data.index - event.data.removedItems.length)!.before(...addedElements);\r\n                }\r\n            }\r\n            if (list.items.length === 0 && placeholder) {\r\n                parent.append(placeholder);\r\n            }\r\n        };\r\n        Object.assign(\r\n            parent, {\r\n                _reactiveParentNodeAttributes: {\r\n                    addReactListener: () => {\r\n                        list.addEventListener(\"listmodelchange\", listener);\r\n                    },\r\n                    removeReactListener: () => {\r\n                        list.removeEventListener(\"listmodelchange\", listener);\r\n                    }\r\n                }\r\n            }\r\n        ) as ReactiveParentNode;\r\n        const children = placeholder && list.items.length === 0 ? [placeholder] : list.items.map(map);\r\n        return children;\r\n    }\r\n}\r\n\r\nfunction setHTMLElementEventListeners<K extends keyof HTMLElementTagNameMap>(\r\n    element: HTMLElementTagNameMap[K],\r\n    listeners: {\r\n        [K in keyof HTMLElementEventMap]?: (event: HTMLElementEventMap[K]) => void | [(event: HTMLElementEventMap[K]) => void, Partial<boolean | AddEventListenerOptions>]\r\n    }\r\n): HTMLElementTagNameMap[K] {\r\n    Object.entries(listeners).forEach((entry) => {\r\n        if (Array.isArray(entry[1])) {\r\n            element.addEventListener(entry[0], entry[1][0] as EventListener, entry[1][1]);\r\n        }\r\n        else {\r\n            element.addEventListener(entry[0], entry[1] as EventListener);\r\n        }\r\n    });\r\n    return element;\r\n};\r\n\r\nfunction setHTMLElementStyles<E extends HTMLElement>(\r\n    element: E,\r\n    styles: {\r\n        [property: string]: string | [string, string]\r\n    }\r\n): E {\r\n    Object.keys(styles).forEach((property) => {\r\n        if (Array.isArray(styles[property])) {\r\n            element.style.setProperty(property, styles[property][0], styles[property][1]);\r\n        }\r\n        else {\r\n            element.style.setProperty(property, styles[property] as string);\r\n        }\r\n    });\r\n    return element;\r\n};\r\n\r\nfunction setElementProperties<E extends Element>(\r\n        element: E,\r\n        properties?: Partial<Pick<E, WritableKeys<E>>>\r\n    ): E {\r\n    for (const property in properties) {\r\n        let value = properties[property];\r\n        if (typeof value !== \"undefined\") {\r\n            element[property] = value!;\r\n        }\r\n    }\r\n    return element;\r\n};\r\n\r\nfunction setElementAttributes<E extends Element>(\r\n        element: E,\r\n        attributes?: {[attrName: string]: number | string | boolean}\r\n    ): E {\r\n    for (const key in attributes) {\r\n        const value = attributes[key];\r\n        const attributeName = camelToTrain(key);\r\n        if (typeof value === \"boolean\") {\r\n            if (value) {\r\n                element.setAttribute(attributeName, \"\");\r\n            }\r\n        }\r\n        else {\r\n            element.setAttribute(attributeName, value.toString());\r\n        }\r\n    }\r\n    return element;\r\n};\r\n\r\ninterface AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n    attach(element: Element): void;\r\n    detach(element: Element): void;\r\n}\r\n\r\ntype AttributeType = \"string\" | \"boolean\" | \"listitem\";\r\n\r\nfunction areAttributesMatching(refAttributeType: AttributeType, refAttrName: string, refAttrValue: string, attrName: string, attrValue: string | null): boolean {\r\n    if (refAttrName == attrName) {\r\n        switch (refAttributeType) {\r\n            case \"boolean\":\r\n                return refAttrValue == \"\" && attrValue == \"\";\r\n            case \"string\":\r\n                return refAttrValue !== \"\" && (refAttrValue === attrValue);\r\n            case \"listitem\":\r\n                return (refAttrValue !== \"\" && attrValue !== null) && new RegExp(`${refAttrValue}\\s*?`, \"g\").test(attrValue);\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nabstract class AttributeMutationMixinBase implements AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n\r\n    constructor(attributeName: string, attributeType: AttributeType = \"boolean\", attributeValue: string = \"\") {\r\n        this.attributeName = attributeName;\r\n        this.attributeType = attributeType;\r\n        this.attributeValue = attributeValue;\r\n    }\r\n\r\n    public abstract attach(element: Element): void;\r\n    public abstract detach(element: Element): void;\r\n}","export { EventBase };\r\nexport { Event };\r\nexport { EEvent };\r\nexport { EventDispatcher };\r\nexport { EventDispatcherBase };\r\n\r\ninterface EventConstructor {\r\n    readonly prototype: Event;\r\n    new<T extends string, D extends any>(type: T, data: D): Event<T, D>;\r\n}\r\n\r\ninterface Event<T extends string = string, D extends any = any> {\r\n    readonly type: T;\r\n    readonly data: D;\r\n}\r\n\r\ntype EEvent<T extends string = string, D extends any = any> = Event<T, D>;\r\n\r\nclass EventBase<T extends string, D extends any> implements Event<T, D> {\r\n    readonly type: T;\r\n    readonly data: D;\r\n\r\n    constructor(type: T, data: D) {\r\n        this.type = type;\r\n        this.data = data;\r\n    }\r\n}\r\n\r\nvar Event: EventConstructor = EventBase;\r\n\r\ntype EventHandler<E extends Event> = (event: E) => void;\r\n\r\ninterface EventListener<E extends Event = Event> {\r\n    handler: EventHandler<E>;\r\n    once?: boolean;\r\n}\r\n\r\ninterface EventDispatcher<Events extends {[K in Extract<keyof Events, string>]: Event<K>} = {}> {\r\n    addEventListener<K extends Extract<keyof Events, string>>(event: K, handler: (event: Events[K]) => void, once?: boolean): (event: Events[K]) => void;\r\n    addEventListener<K extends string>(event: K, handler: (event: Event<K>) => void, once?: boolean): (event: Event<K>) => void;\r\n    removeEventListener<K extends Extract<keyof Events, string>>(event: K, handler: (event: Events[K]) => void, once?: boolean): number;\r\n    removeEventListener<K extends string>(event: K, handler: (event: Event<K>) => void, once?: boolean): number;\r\n    dispatchEvent<K extends Extract<keyof Events, string>>(event: Events[K]): void;\r\n    dispatchEvent<K extends string>(event: Event<K>): void;\r\n}\r\n\r\ninterface EventDispatcherConstructor {\r\n    readonly prototype: EventDispatcher<{}>;\r\n    new<Events extends {[K in Extract<keyof Events, string>]: Event<K>} = {}>(): EventDispatcher<Events>;\r\n}\r\n\r\nclass EventDispatcherBase<Events extends {[K in Extract<keyof Events, string>]: Event<K>} = {}> implements EventDispatcher<Events> {\r\n    private _listeners: Map<string, EventListener<any>[]>;\r\n\r\n    constructor() {\r\n        this._listeners = new Map();\r\n    }\r\n\r\n    public addEventListener<K extends string>(event: K, handler: (event: Event<K>) => void, once?: boolean): (event: Event<K>) => void;\r\n    public addEventListener<K extends Extract<keyof Events, string>>(event: K, handler: (event: Events[K]) => void, once?: boolean): (event: Events[K]) => void;\r\n    public addEventListener<K extends Extract<keyof Events, string>>(event: K, handler: (event: Events[K]) => void, once?: boolean): (event: Events[K]) => void {\r\n        let listeners = this._listeners.get(event.toString());\r\n        let newListener: EventListener<any> = {\r\n            handler: handler,\r\n            once: once\r\n        };\r\n        \r\n        if (typeof listeners === \"undefined\") {\r\n            this._listeners.set(event.toString(), [newListener]);\r\n        }\r\n        else if (!listeners.find(listener => listener.handler === handler && listener.once === once)) {\r\n            listeners.push(newListener);\r\n        }\r\n\r\n        return handler;\r\n    }\r\n\r\n    public removeEventListener<K extends string>(event: string, handler: (event: Event<K>) => void, once?: boolean): number;\r\n    public removeEventListener<K extends Extract<keyof Events, string>>(event: K, handler: (event: Events[K]) => void, once?: boolean): number;\r\n    public removeEventListener<K extends Extract<keyof Events, string>>(event: K, handler: (event: Events[K]) => void, once?: boolean): number {\r\n        let listeners = this._listeners.get(event);\r\n        if (typeof listeners !== \"undefined\") {\r\n            const count = listeners.length;\r\n            const idx = listeners.findIndex(listener => listener.handler === handler && listener.once === once);\r\n            if (idx > -1) {\r\n                if (count > 1) {\r\n                    listeners[idx] = listeners.pop()!;\r\n                    return count - 1;\r\n                }\r\n                else {\r\n                    this._listeners.delete(event.toString());\r\n                    return 0;\r\n                }\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    public dispatchEvent<K extends string>(event: Event<K>): void;\r\n    public dispatchEvent<K extends Extract<keyof Events, string>>(event: Events[K]): void;\r\n    public dispatchEvent<K extends Extract<keyof Events, string>>(event: Events[K]): void {\r\n        let listeners = this._listeners.get(event.type);\r\n        if (typeof listeners !== \"undefined\") {\r\n            listeners = listeners.filter((listener) => {\r\n                listener.handler(event);\r\n                return !listener.once\r\n            });\r\n            if (listeners.length === 0) {\r\n                this._listeners.delete(event.type);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst EventDispatcher: EventDispatcherConstructor = EventDispatcherBase;","import { EventDispatcher, Event } from \"../events/EventDispatcher\";\r\n\r\nexport { ObjectModelChangeEvent };\r\nexport { ObjectModel };\r\nexport { isObjectModel };\r\nexport { ObjectModelBase };\r\nexport { ListModelChangeEvent };\r\nexport { ListModelChangeType };\r\nexport { isListModel };\r\nexport { ListModel };\r\nexport { ListModelBase };\r\n\r\ninterface ObjectModelChangeEvent {\r\n    type: \"objectmodelchange\";\r\n    data: {\r\n        property: string;\r\n        oldValue: any;\r\n        newValue: any;\r\n    };\r\n}\r\n\r\ninterface ObjectModelChangeEvents {\r\n    \"objectmodelchange\": ObjectModelChangeEvent;\r\n}\r\n\r\ninterface ObjectModel<Data extends object = object> extends EventDispatcher<ObjectModelChangeEvents> {\r\n    readonly data: Readonly<Data>;\r\n    set<K extends keyof Data>(key: K, value: Data[K]): void;\r\n}\r\n\r\nfunction isObjectModel(obj: any): obj is ObjectModel {\r\n    return typeof (obj as ObjectModel) === \"object\" && \r\n        typeof (obj as ObjectModel).data === \"object\" &&\r\n        typeof (obj as ObjectModel).set === \"function\";\r\n}\r\n\r\nclass ObjectModelBase<Data extends object> extends EventDispatcher<ObjectModelChangeEvents> implements ObjectModel<Data> {\r\n    private _data: Data;\r\n    \r\n    constructor(data: Data) {\r\n        super();\r\n        this._data = data;\r\n    }\r\n\r\n    public get data(): Readonly<Data> {\r\n        return this._data;\r\n    }\r\n\r\n    public set<K extends keyof Data>(key: K, value: Data[K]): void {\r\n        const oldValue = this._data[key];\r\n        this._data[key] = value;\r\n        this.dispatchEvent(new Event(\"objectmodelchange\", {property: key, oldValue: oldValue, newValue: value}));\r\n    }\r\n}\r\n\r\ntype ListModelChangeType = \"insert\" | \"remove\" | \"clear\";\r\n\r\ninterface ListModelChangeEvent {\r\n    type: \"listmodelchange\";\r\n    data: {\r\n        addedItems: any[];\r\n        removedItems: any[];\r\n        index: number;\r\n    };\r\n}\r\n\r\ninterface ListModelEvents {\r\n    \"listmodelchange\": ListModelChangeEvent;\r\n}\r\n\r\ninterface ListModel<Item = {}> extends EventDispatcher<ListModelEvents> {\r\n    readonly items: ReadonlyArray<Item>;\r\n    set(index: number, item: Item): void;\r\n    insert(index: number, ...items: Item[]): void;\r\n    push(...items: Item[]): number;\r\n    pop(): Item | undefined;\r\n    remove(item: Item): void;\r\n    clear(): void;\r\n}\r\n\r\nfunction isListModel(obj: any): obj is ListModel {\r\n    return typeof (obj as ListModel) === \"object\" && \r\n        Array.isArray((obj as ListModel).items) &&\r\n        typeof (obj as ListModel).set === \"function\" &&\r\n        typeof (obj as ListModel).insert === \"function\" &&\r\n        typeof (obj as ListModel).push === \"function\" &&\r\n        typeof (obj as ListModel).pop === \"function\" &&\r\n        typeof (obj as ListModel).remove === \"function\" &&\r\n        typeof (obj as ListModel).clear === \"function\";\r\n}\r\n\r\nclass ListModelBase<Item> extends EventDispatcher<ListModelEvents> implements ListModel<Item> {\r\n    private _items: Item[];\r\n    \r\n    constructor(items: Item[] = []) {\r\n        super();\r\n        this._items = items;\r\n    }\r\n\r\n    public get items(): ReadonlyArray<Item> {\r\n        return this._items;\r\n    }\r\n\r\n    public set(index: number, item: Item): void {\r\n        if (index >= 0 && index < this._items.length) {\r\n            this._items[index] = item;\r\n            this.dispatchEvent(new Event(\"listmodelchange\", {addedItems: [item], removedItems: [], index: index}));\r\n        }\r\n    }\r\n\r\n    public push(...items: Item[]): number {\r\n        const newLength = this._items.push(...items);\r\n        this.dispatchEvent(new Event(\"listmodelchange\", {addedItems: items, removedItems: [], index: newLength - items.length}));\r\n        return newLength;\r\n    }\r\n\r\n    public pop(): Item | undefined {\r\n        const item = this._items.pop();\r\n        if (item) {\r\n            this.dispatchEvent(new Event(\"listmodelchange\", {addedItems: [], removedItems: [item], index: this._items.length}));\r\n        }\r\n        return item;\r\n    }\r\n\r\n    public insert(index: number, ...items: Item[]): void {\r\n        if (index > this._items.length) {\r\n            index = this._items.length;\r\n        }\r\n        else if (index < 0) {\r\n            if (index < -this._items.length) {\r\n                index = 0;\r\n            }\r\n            else {\r\n                index = this._items.length + index;\r\n            }\r\n        }\r\n        this._items.splice(index, 0, ...items);\r\n        this.dispatchEvent(new Event(\"listmodelchange\", {addedItems: items, removedItems: [], index: index}));\r\n    }\r\n\r\n    public remove(item: Item): void {\r\n        const itemIndex = this._items.indexOf(item);\r\n        if (itemIndex > -1) {\r\n            this._items.splice(itemIndex, 1);\r\n            this.dispatchEvent(new Event(\"listmodelchange\", {addedItems: [], removedItems: [item], index: itemIndex}));\r\n        }\r\n    }\r\n\r\n    public clear(): void {\r\n        const removedItems = this._items.slice();\r\n        this._items.splice(0, this._items.length);\r\n        this.dispatchEvent(new Event(\"listmodelchange\", {addedItems: [], removedItems: removedItems, index: 0}));\r\n    }\r\n}","\r\nimport { Command, isUndoCommand } from \"./commands/Command\";\r\nimport { isTagElement } from \"./elements/HTMLElement\";\r\nimport { HotKeyChangeEvent } from \"./elements/containers/menus/MenuItem\";\r\nimport { HotKey } from \"./Input\";\r\nimport { ObjectModel, ObjectModelBase } from \"./models/Model\";\r\n\r\nexport { Editor };\r\nexport { EditorBase };\r\n\r\ninterface EditorConstructor {\r\n    readonly prototype: Editor;\r\n    new(): Editor;\r\n}\r\n\r\ninterface Editor {\r\n    addHotkeyExec(hotkey: HotKey, exec: () => void): void;\r\n    removeHotkeyExec(hotkey: HotKey, exec: () => void): void;\r\n    registerCommand(name: string, command: Command): void;\r\n    executeCommand(name: string, args?: any, opts?: {undo?: boolean}): void;\r\n    setup(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface EditorState {}\r\n}\r\n\r\nclass EditorBase implements Editor {\r\n    readonly state: ObjectModel<EditorState>;\r\n    private _commands: Map<string, Command>;\r\n    private _hotkeys: Map<HotKey, (() => void)[]>;\r\n\r\n    constructor() {\r\n        this._commands = new Map();\r\n        this._hotkeys = new Map();\r\n        this.state = new ObjectModelBase({});\r\n    }\r\n    \r\n    public setup(): void {\r\n        document.body.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            Array.from(this._hotkeys.keys()).forEach((hotkey) => {\r\n                if (hotkey.test(event)) {\r\n                    const execs = this._hotkeys.get(hotkey);\r\n                    if (execs) {\r\n                        execs.forEach((exec) => {\r\n                            exec();\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        });\r\n        \r\n        document.body.addEventListener(\"e_hotkeychange\", (event: HotKeyChangeEvent) => {\r\n            const target = event.target;\r\n            if (isTagElement(\"e-menuitem\", target)) {\r\n                if (event.detail.oldHotKey) {\r\n                    this.removeHotkeyExec(event.detail.oldHotKey, target.trigger.bind(target));\r\n                }\r\n                if (event.detail.newHotKey) {\r\n                    this.addHotkeyExec(event.detail.newHotKey, target.trigger.bind(target));\r\n                }\r\n            }\r\n        });\r\n\r\n        document.body.addEventListener(\"e_trigger\", (event) => {\r\n            const target = event.target;\r\n            if (isTagElement(\"e-menuitem\", target)) {\r\n                if (target.command) {\r\n                    this.executeCommand(target.command, target.commandArgs)\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public registerCommand(name: string, command: Command) {\r\n        this._commands.set(name, command);\r\n    }\r\n\r\n    public executeCommand(name: string, args?: any, opts?: {undo?: boolean}): void {\r\n        const command = this._commands.get(name);\r\n        if (command) {\r\n            if (opts && opts.undo && isUndoCommand(command)) {\r\n                command.undo(args);\r\n            }\r\n            else {\r\n                command.exec(args);\r\n            }\r\n        }\r\n    }\r\n\r\n    public addHotkeyExec(hotkey: HotKey, exec: () => void): void {\r\n        const hotkeys = this._hotkeys.get(hotkey);\r\n        if (typeof hotkeys === \"undefined\") {\r\n            this._hotkeys.set(hotkey, [exec]);\r\n        };\r\n    }\r\n\r\n    public removeHotkeyExec(hotkey: HotKey, exec: () => void): void {\r\n        const hotkeys = this._hotkeys.get(hotkey);\r\n        if (typeof hotkeys !== \"undefined\") {\r\n            const index = hotkeys.indexOf(exec);\r\n            if (index >= 0) {\r\n                hotkeys.splice(index, 1);\r\n            }\r\n            if (hotkeys.length === 0) {\r\n                this._hotkeys.delete(hotkey);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar Editor: EditorConstructor = EditorBase;","export { isCommand };\r\nexport { isUndoCommand };\r\nexport { Command };\r\nexport { UndoCommand };\r\n\r\nfunction isCommand(obj: any): obj is Command {\r\n    return (typeof obj.exec === 'function');\r\n}\r\n\r\nfunction isUndoCommand(obj: any): obj is UndoCommand {\r\n    return (typeof obj.exec === 'function')\r\n        && (typeof obj.undo === 'function');\r\n}\r\n\r\ninterface Command {\r\n    exec: (args?: any) => void;\r\n    undo?: (args?: any) => void;\r\n}\r\n\r\ninterface UndoCommand {\r\n    exec: (args?: any) => void;\r\n    undo: (args?: any) => void;\r\n}","export { Key };\r\nexport { KeyModifier };\r\nexport { HotKey };\r\nexport { MouseButton };\r\n\r\nenum Key {\r\n    A = 'a',\r\n    B = 'b',\r\n    C = \"c\",\r\n    D = \"d\",\r\n    E = \"e\",\r\n    F = \"f\",\r\n    G = \"g\",\r\n    H = \"h\",\r\n    I = \"i\",\r\n    J = \"j\",\r\n    K = \"k\",\r\n    L = \"l\",\r\n    M = \"m\",\r\n    O = \"o\",\r\n    P = \"p\",\r\n    Q = \"q\",\r\n    R = \"r\",\r\n    S = \"s\",\r\n    T = \"t\",\r\n    U = \"u\",\r\n    V = \"v\",\r\n    W = \"w\",\r\n    X = \"x\",\r\n    Y = \"y\",\r\n    Z = \"z\",\r\n    ENTER = \"Enter\",\r\n    BACKSPACE = \"Backspace\",\r\n    ARROW_DOWN = \"ArrowDown\",\r\n    ARROW_LEFT = \"ArrowLeft\",\r\n    ARROW_RIGHT = \"ArrowRight\",\r\n    ARROW_UP = \"ArrowUp\",\r\n    SHIFT = \"Shift\"\r\n}\r\n\r\nenum KeyModifier {\r\n    Alt = \"Alt\",\r\n    Control = \"Control\",\r\n    Shift = \"Shift\",\r\n}\r\n\r\nfunction displayKeyModifier(mode: KeyModifier): string {\r\n    switch (mode) {\r\n        case KeyModifier.Control:\r\n            return \"Ctrl\";\r\n        default:\r\n            return mode;\r\n    }\r\n}\r\n\r\nenum MouseButton {\r\n    LEFT = 1,\r\n    WHEEL = 2,\r\n    RIGHT = 3,\r\n    FORWARD = 4,\r\n    BACK = 5\r\n}\r\n\r\nconst testKeyModifier = (mod: KeyModifier, event: KeyboardEvent) => {\r\n    switch (mod) {\r\n        case 'Alt':\r\n            return event.altKey;\r\n        case 'Control':\r\n            return event.ctrlKey;\r\n        case 'Shift':\r\n            return event.shiftKey;\r\n        default:\r\n            return () => true;\r\n    }\r\n}\r\n\r\nclass HotKey {\r\n    public readonly key: Key;\r\n    public readonly mod1?: KeyModifier;\r\n    public readonly mod2?: KeyModifier;\r\n\r\n    constructor(key: Key, mod1?: KeyModifier, mod2?: KeyModifier) {\r\n        this.key = key;\r\n        this.mod1 = mod1;\r\n        this.mod2 = mod2;\r\n    }\r\n\r\n    public toString(): string {\r\n        return `${this.mod1 ? `${displayKeyModifier(this.mod1)}+` : ''}${this.mod2 ? `${displayKeyModifier(this.mod2)}+` : ''}${(this.key.length === 1) ? this.key.toUpperCase() : this.key}`;\r\n    }\r\n\r\n    public test(event: KeyboardEvent): boolean {\r\n        return ((!this.mod1 || testKeyModifier(this.mod1, event)) && (!this.mod2 || testKeyModifier(this.mod2, event)) && event.key === this.key);\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot, isTagElement } from \"../../HTMLElement\";\r\nimport { pointIntersectsWithDOMRect } from \"../../Snippets\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuElement };\r\nexport { HTMLEMenuElementBase };\r\n\r\ninterface HTMLEMenuElement extends HTMLElement {\r\n    name: string;\r\n    expanded: boolean;\r\n    overflowing: boolean;\r\n    parentItem: HTMLEMenuItemElement | null;\r\n    items: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement)[];\r\n    readonly activeIndex: number;\r\n    readonly activeItem: HTMLEMenuItemElement | HTMLEMenuItemGroupElement | null;\r\n    focusItemAt(index: number, childMenu?: boolean): void;\r\n    reset(): void;\r\n    findItem(predicate: (item: HTMLEMenuItemElement) => boolean, subitems?: boolean): HTMLEMenuItemElement | null;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-menu\",\r\n    observedAttributes: [\"expanded\"]\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"expanded\", type: \"boolean\"},\r\n    {name: \"overflowing\", type: \"boolean\"}\r\n])\r\nclass HTMLEMenuElementBase extends HTMLElement implements HTMLEMenuElement {\r\n\r\n    public name!: string;\r\n    public expanded!: boolean;\r\n    public overflowing!: boolean;\r\n\r\n    public parentItem: HTMLEMenuItemElement | null;\r\n    public items: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement)[];\r\n\r\n    private _activeIndex: number;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: inline-block;\r\n                    user-select: none;\r\n\r\n                    padding: 6px 0;\r\n                    background-color: white;\r\n                    cursor: initial;\r\n                    width: max-content;\r\n\r\n                    -webkit-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                    -moz-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                    box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                }\r\n\r\n                [part~=\"container\"] {\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                }\r\n\r\n                ::slotted(hr) {\r\n                    margin: 6px 0;\r\n                }\r\n            </style>\r\n            <div part=\"container\">\r\n                <slot></slot>\r\n            </div>\r\n        `);\r\n\r\n        this.parentItem = null;\r\n        this.items = [];\r\n        this._activeIndex = -1;\r\n    }\r\n\r\n    public get activeIndex(): number {\r\n        return this._activeIndex;\r\n    }\r\n\r\n    public get activeItem(): HTMLEMenuItemElement | HTMLEMenuItemGroupElement | null {\r\n        return this.items[this.activeIndex] || null;\r\n    }\r\n    \r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n        \r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const items = slot.assignedElements().filter(\r\n                    elem => isTagElement(\"e-menuitem\", elem) || isTagElement(\"e-menuitemgroup\", elem)\r\n                ) as (HTMLEMenuItemElement | HTMLEMenuItemGroupElement)[];\r\n                this.items = items;\r\n                items.forEach((item) => {\r\n                    item.parentMenu = this;\r\n                });\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            if (isTagElement(\"e-menuitem\", target)) {\r\n                let thisIncludesTarget = this.items.includes(target);\r\n                if (thisIncludesTarget) {\r\n                    target.trigger();\r\n                }\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"mouseover\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            let targetIndex = this.items.indexOf(target);\r\n            if (this === target) {\r\n                this.reset();\r\n                this.focus();\r\n            } \r\n            else if (targetIndex >= 0) {\r\n                if (isTagElement(\"e-menuitem\", target)) {\r\n                    this.focusItemAt(targetIndex, true);\r\n                }\r\n                else {\r\n                    this._activeIndex = targetIndex;\r\n                }\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"mouseout\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            let thisIntersectsWithMouse = pointIntersectsWithDOMRect(\r\n                event.clientX, event.clientY,\r\n                this.getBoundingClientRect()\r\n            );\r\n            if ((this === target || this.items.includes(target)) && !thisIntersectsWithMouse) {\r\n                this.reset();\r\n                this.focus();\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusin\", (event: FocusEvent) => {\r\n            let target = event.target as any;\r\n            this._activeIndex = this.items.findIndex(\r\n                (item) => item.contains(target)\r\n            );\r\n            this.expanded = true;\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            let newTarget = event.relatedTarget as any;\r\n            if (!this.contains(newTarget)) {  \r\n                this.reset();\r\n                this.expanded = false;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"ArrowUp\":\r\n                    this.focusItemAt((this.activeIndex <= 0) ? this.items.length - 1 : this.activeIndex - 1);\r\n                    if (isTagElement(\"e-menuitemgroup\", this.activeItem)) {\r\n                        this.activeItem.focusItemAt(this.activeItem.items.length - 1);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    this.focusItemAt((this.activeIndex >= this.items.length - 1) ? 0 : this.activeIndex + 1);\r\n                    if (isTagElement(\"e-menuitemgroup\", this.activeItem)) {\r\n                        this.activeItem.focusItemAt(0);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"Home\":\r\n                    this.focusItemAt(0);\r\n                    if (isTagElement(\"e-menuitemgroup\", this.activeItem)) {\r\n                        this.activeItem.focusItemAt(0);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"End\":\r\n                    this.focusItemAt(this.items.length - 1);\r\n                    if (isTagElement(\"e-menuitemgroup\", this.activeItem)) {\r\n                        this.activeItem.focusItemAt(this.activeItem.items.length - 1);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"Enter\":\r\n                    if (isTagElement(\"e-menuitem\", this.activeItem)) {\r\n                        this.activeItem.trigger();\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                case \"Escape\":\r\n                    if (this.parentItem) {\r\n                        let parentGroup = this.parentItem.group;\r\n                        let parentMenu = parentGroup ? parentGroup.parentMenu : this.parentItem.parentMenu;\r\n                        if (isTagElement(\"e-menu\", parentMenu)) {\r\n                            if (parentGroup) {\r\n                                parentGroup.focusItemAt(parentGroup.activeIndex);\r\n                            }\r\n                            else {\r\n                                parentMenu.focusItemAt(parentMenu.activeIndex);\r\n                            }\r\n                            this.reset();\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    else {\r\n                        document.body.focus();\r\n                    }\r\n                    break;\r\n                case \"ArrowLeft\":\r\n                    if (this.parentItem) {\r\n                        let parentGroup = this.parentItem.group;\r\n                        let parentMenu = parentGroup ? parentGroup.parentMenu : this.parentItem.parentMenu;\r\n                        if (isTagElement(\"e-menu\", parentMenu)) {\r\n                            if (parentGroup) {\r\n                                parentGroup.focusItemAt(parentGroup.activeIndex);\r\n                            }\r\n                            else {\r\n                                parentMenu.focusItemAt(parentMenu.activeIndex);\r\n                            }\r\n                            this.reset();\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"ArrowRight\":\r\n                    if (this.items.includes(event.target as any)) {\r\n                        if (isTagElement(\"e-menuitem\", this.activeItem) && this.activeItem.childMenu) {\r\n                            this.activeItem.childMenu.focusItemAt(0);\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (newValue !== oldValue) {\r\n            switch (name) {\r\n                case \"expanded\":\r\n                    if (newValue !== null) {\r\n                        let thisRect = this.getBoundingClientRect();\r\n                        let thisIsOverflowing = thisRect.right > document.body.clientWidth;\r\n                        if (thisIsOverflowing) {\r\n                            this.overflowing = true;\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.overflowing = false;\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public focusItemAt(index: number, childMenu?: boolean): void {\r\n        let item = this.items[index];\r\n        if (item) {\r\n            this._activeIndex = index;\r\n            item.focus();\r\n            if (isTagElement(\"e-menuitem\", item)) {\r\n                if (childMenu && item.childMenu) {\r\n                    item.childMenu.focus();\r\n                }\r\n            }\r\n            else {\r\n                item.focusItemAt(0);\r\n            } \r\n        }\r\n    }\r\n\r\n    public reset(): void {\r\n        let item = this.activeItem;\r\n        this._activeIndex = -1;\r\n        if (isTagElement(\"e-menuitem\", item) && item.childMenu) {\r\n            item.childMenu.reset();\r\n        }\r\n    }\r\n\r\n    public findItem(predicate: (item: HTMLEMenuItemElement) => boolean, subitems?: boolean): HTMLEMenuItemElement | null {\r\n        let foundItem: HTMLEMenuItemElement | HTMLEMenuItemGroupElement | null = null;\r\n        for (let item of this.items) {\r\n            if (isTagElement(\"e-menuitem\", item)) {\r\n                if (predicate(item)) {\r\n                    return item;\r\n                }\r\n                if (subitems && item.childMenu) {\r\n                    foundItem = item.childMenu.findItem(predicate, subitems);\r\n                    if (foundItem) {\r\n                        return foundItem;\r\n                    }\r\n                }\r\n            }\r\n            else if (isTagElement(\"e-menuitemgroup\", item)) {\r\n                foundItem = item.findItem(predicate, subitems);\r\n                if (foundItem) {\r\n                    return foundItem;\r\n                }\r\n            }\r\n        }\r\n        return foundItem;\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menu\": HTMLEMenuElement,\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot, isTagElement } from \"../../HTMLElement\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuBarElement };\r\nexport { HTMLEMenuBarElementBase };\r\n\r\ninterface HTMLEMenuBarElement extends HTMLElement {\r\n    name: string;\r\n    active: boolean;\r\n    items: HTMLEMenuItemElement[];\r\n    readonly activeIndex: number;\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    focusItemAt(index: number, childMenu?: boolean): void;\r\n    reset(): void;\r\n    findItem(predicate: (item: HTMLEMenuItemElement) => boolean, subtree?: boolean): HTMLEMenuItemElement | null;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-menubar\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"active\", type: \"boolean\"},\r\n])\r\nclass HTMLEMenuBarElementBase extends HTMLElement implements HTMLEMenuBarElement {\r\n\r\n    public name!: string;\r\n    public active!: boolean;\r\n    \r\n    public items: HTMLEMenuItemElement[];\r\n\r\n    private _activeIndex: number;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    position: relative;\r\n                    display: block;\r\n                    user-select: none;\r\n                }\r\n\r\n                :host(:not(:focus-within)) ::slotted(:hover) {\r\n                    color: black;\r\n                    background-color: gainsboro;\r\n                }\r\n\r\n                [part~=\"container\"] {\r\n                    display: flex;\r\n                    flex-direction: row;\r\n                }\r\n            </style>\r\n            <div part=\"container\">\r\n                <slot></slot>\r\n            </div>\r\n        `);\r\n\r\n        this.items = [];\r\n        this._activeIndex = -1;\r\n    }\r\n\r\n    public get activeIndex(): number {\r\n        return this._activeIndex;\r\n    }\r\n\r\n    public get activeItem(): HTMLEMenuItemElement | null {\r\n        return this.items[this.activeIndex] || null;\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n        \r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const items = slot.assignedElements()\r\n                    .filter(item => isTagElement(\"e-menuitem\", item)) as HTMLEMenuItemElement[];\r\n                this.items = items;\r\n                items.forEach((item) => {\r\n                    item.parentMenu = this;\r\n                });\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"mouseover\", (event) => {\r\n            let targetIndex = this.items.indexOf(event.target as any);\r\n            if (targetIndex >= 0) {\r\n                if (this.contains(document.activeElement)) {\r\n                    if (this.active) {\r\n                        this.focusItemAt(targetIndex, true);\r\n                    }\r\n                    else {\r\n                        this._activeIndex = targetIndex;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"keydown\", (event) => {\r\n            switch (event.key) {\r\n                case \"ArrowLeft\":\r\n                    this.focusItemAt((this.activeIndex <= 0) ? this.items.length - 1 : this.activeIndex - 1);\r\n                    if (this.active && this.activeItem?.childMenu) {\r\n                        this.activeItem.childMenu.focusItemAt(0);\r\n                    }\r\n                    break;\r\n                case \"ArrowRight\":\r\n                    this.focusItemAt((this.activeIndex >= this.items.length - 1) ? 0 : this.activeIndex + 1);\r\n                    if (this.active && this.activeItem?.childMenu) {\r\n                        this.activeItem.childMenu.focusItemAt(0);\r\n                    }\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    this.focusItemAt(this.activeIndex);\r\n                    if (this.active && this.activeItem?.childMenu) {\r\n                        this.activeItem.childMenu.focusItemAt(0);\r\n                    }\r\n                    break;\r\n                case \"Enter\":\r\n                    this.active = true;\r\n                    if (this.activeItem) {\r\n                        this.activeItem.trigger();\r\n                    }\r\n                    break;\r\n                case \"Escape\":\r\n                    this.focusItemAt(this.activeIndex);\r\n                    this.active = false;\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"mousedown\", (event) => {\r\n            let targetIndex = this.items.indexOf(event.target as any);\r\n            if (targetIndex >= 0) {\r\n                if (!this.contains(document.activeElement)) {\r\n                    this.active = true;\r\n                    this.focusItemAt(targetIndex, true);\r\n                }\r\n                else {\r\n                    this.active = false;\r\n                    document.body.focus();\r\n                }\r\n                event.preventDefault();\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focus\", () => {\r\n            this._activeIndex = 0;\r\n        });\r\n    }\r\n\r\n    public focusItemAt(index: number, childMenu?: boolean): void {\r\n        let item = this.items[index];\r\n        if (item) {\r\n            this._activeIndex = index;\r\n            item.focus();\r\n            if (childMenu && item.childMenu) {\r\n                item.childMenu.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    public reset(): void {\r\n        let item = this.activeItem;\r\n        this._activeIndex = -1;\r\n        if (item?.childMenu) {\r\n            item.childMenu.reset();\r\n        }\r\n    }\r\n\r\n    public findItem(predicate: (item: HTMLEMenuItemElement) => boolean, subtree?: boolean): HTMLEMenuItemElement | null {\r\n        let foundItem: HTMLEMenuItemElement | null = null;\r\n        for (let item of this.items) {\r\n            if (predicate(item)) {\r\n                return item;\r\n            }\r\n            if (subtree && item.childMenu) {\r\n                foundItem = item.childMenu.findItem(predicate, subtree);\r\n                if (foundItem) {\r\n                    return foundItem;\r\n                }\r\n            }\r\n        }\r\n        return foundItem;\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menubar\": HTMLEMenuBarElement,\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot, isTagElement } from \"../../HTMLElement\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\n\r\nexport { HTMLEMenuButtonElement };\r\nexport { HTMLEMenuButtonElementBase };\r\n\r\ninterface HTMLEMenuButtonElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n    disabled: boolean;\r\n    active: boolean;\r\n    childMenu: HTMLEMenuElement | null;\r\n    trigger(): void\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-menubutton\",\r\n    observedAttributes: [\"icon\", \"label\", \"checked\"]\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"active\", type: \"boolean\"},\r\n    {name: \"label\", type: \"string\"},\r\n    {name: \"disabled\", type: \"boolean\"},\r\n])\r\nclass HTMLEMenuButtonElementBase extends HTMLElement implements HTMLEMenuButtonElement {\r\n\r\n    public name!: string;\r\n    public label!: string;\r\n    public disabled!: boolean;\r\n    public active!: boolean;\r\n\r\n    public childMenu: HTMLEMenuElement | null;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    position: relative;\r\n                    display: inline-block;\r\n\r\n                    user-select: none;\r\n                    white-space: nowrap;\r\n                    cursor: pointer;\r\n                    padding: 2px;\r\n                }\r\n\r\n                :host(:hover) {\r\n                    background-color: gainsboro;\r\n                }\r\n\r\n                :host(:focus-within:not(:focus)) {\r\n                    background-color: gainsboro;\r\n                }\r\n\r\n                :host([disabled]) {\r\n                    color: lightgray;\r\n                }\r\n\r\n                ::slotted([slot=\"menu\"]) {\r\n                    z-index: 1;\r\n                    position: absolute;\r\n                    color: initial;\r\n                }\r\n\r\n                ::slotted([slot=\"menu\"]) {\r\n                    top: 100%;\r\n                    left: 0;\r\n                }\r\n                \r\n                ::slotted([slot=\"menu\"][overflowing]) {\r\n                    right: 0;\r\n                    left: auto;\r\n                }\r\n\r\n                ::slotted([slot=\"menu\"]:not([expanded])) {\r\n                    opacity: 0;\r\n                    pointer-events: none !important;\r\n                }\r\n\r\n                [part~=\"toggle_arrow\"] {\r\n                    position: relative;\r\n                    display: inline-block;\r\n                    flex: auto;\r\n                    width: 18px;\r\n                    height: 18px;\r\n                }\r\n\r\n                [part~=\"toggle_arrow\"]::after {\r\n                    display: inline-block;\r\n                    text-align: center;\r\n                    width: 18px;\r\n                    position: absolute;\r\n                    content: \"▼\";\r\n                    color: dimgray;\r\n                }\r\n            </style>\r\n            <span part=\"toggle_arrow\"></span>\r\n            <slot name=\"menu\"></slot>\r\n        `);\r\n        \r\n        this.childMenu = null;\r\n    }\r\n\r\n    public connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const menuSlot = this.shadowRoot?.querySelector<HTMLSlotElement>(\"slot[name=menu]\");\r\n        if (menuSlot) {\r\n            menuSlot.addEventListener(\"slotchange\", () => {\r\n                const menuElem = menuSlot.assignedElements()[0];\r\n                if (isTagElement(\"e-menu\", menuElem)) {\r\n                    this.childMenu = menuElem;\r\n                }\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Enter\":\r\n                    if (!this.active) {\r\n                        this.active = true;\r\n                        if (this.childMenu) {\r\n                            this.childMenu.focusItemAt(0);\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"Escape\":\r\n                    this.focus();\r\n                    this.active = false;\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"click\", (event: MouseEvent) => {\r\n            let target = event.target as Element;\r\n            if (this.childMenu && !this.childMenu.contains(target)) {\r\n                this.toggle();\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"blur\", (event: FocusEvent) => {\r\n            let containsNewFocus = (event.relatedTarget !== null) && this.contains(event.relatedTarget as Node);\r\n            if (!containsNewFocus) {\r\n                this.active = false;\r\n            }\r\n        }, {capture: true});\r\n    }\r\n\r\n    public toggle(): void {\r\n        if (!this.active) {\r\n            this.active = true;\r\n            if (this.childMenu) {\r\n                this.childMenu.focusItemAt(0);\r\n            }\r\n        }\r\n        else {\r\n            this.active = false;\r\n        }\r\n    }\r\n\r\n    public trigger(): void {\r\n        alert();\r\n        if (!this.disabled) {\r\n            this.dispatchEvent(new CustomEvent(\"trigger\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (newValue !== oldValue) {\r\n            switch (name) {\r\n                case \"label\":\r\n                    if (oldValue !== newValue) {\r\n                        const labelPart = this.shadowRoot?.querySelector(\"[part~=label]\");\r\n                        if (labelPart) {\r\n                            labelPart.textContent = newValue;\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}","import { HotKey } from \"../../../Input\";\r\nimport { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot, isTagElement } from \"../../HTMLElement\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\nimport { HTMLEMenuBarElement } from \"./MenuBar\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { EMenuItemElementType };\r\nexport { HTMLEMenuItemElement };\r\nexport { HTMLEMenuItemElementBase };\r\nexport { HotKeyChangeEvent };\r\n\r\ntype EMenuItemElementType = \"button\" | \"radio\" | \"checkbox\" | \"menu\" | \"submenu\";\r\n\r\ninterface HTMLEMenuItemElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n    type: EMenuItemElementType;\r\n    disabled: boolean;\r\n    checked: boolean;\r\n    value: string;\r\n\r\n    group: HTMLEMenuItemGroupElement | null;\r\n    parentMenu: HTMLEMenuElement | HTMLEMenuBarElement | null;\r\n    childMenu: HTMLEMenuElement | null;\r\n\r\n    hotkey: HotKey | null;\r\n    command: string | null;\r\n    commandArgs: any;\r\n\r\n    trigger(): void;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-menuitem\",\r\n    observedAttributes: [\"label\", \"checked\", \"type\"]\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"label\", type: \"string\"},\r\n    {name: \"type\", type: \"string\"},\r\n    {name: \"disabled\", type: \"boolean\"},\r\n    {name: \"checked\", type: \"boolean\"},\r\n])\r\nclass HTMLEMenuItemElementBase extends HTMLElement implements HTMLEMenuItemElement {\r\n\r\n    public name!: string;\r\n    public label!: string;\r\n    public type!: EMenuItemElementType;\r\n    public disabled!: boolean;\r\n    public checked!: boolean;\r\n    public value!: string;\r\n\r\n    public group: HTMLEMenuItemGroupElement | null;\r\n    public parentMenu: HTMLEMenuElement | HTMLEMenuBarElement | null;\r\n    public childMenu: HTMLEMenuElement | null;\r\n\r\n    public command: string | null;\r\n    public commandArgs: any;\r\n\r\n    private _hotkey: HotKey | null;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    position: relative;\r\n                    display: inline-block;\r\n\r\n                    user-select: none;\r\n                    white-space: nowrap;\r\n\r\n                    padding: 2px 6px;\r\n                    cursor: pointer;\r\n                }\r\n\r\n                :host(:not([type=\"menu\"])) {\r\n                    padding-left: 12px;\r\n                    padding-right: 12px;\r\n                }\r\n\r\n                :host(:focus-within) {\r\n                    color: black;\r\n                    background-color: lightgray;\r\n                }\r\n\r\n                :host([disabled]) {\r\n                    color: dimgray;\r\n                }\r\n\r\n                :host([type=\"submenu\"]) ::slotted([slot=\"menu\"]),\r\n                :host([type=\"menu\"]) ::slotted([slot=\"menu\"]) {\r\n                    z-index: 1;\r\n                    position: absolute;\r\n                    color: initial;\r\n                }\r\n\r\n                :host([type=\"menu\"]) ::slotted([slot=\"menu\"]) {\r\n                    top: 100%;\r\n                    left: 0;\r\n                }\r\n                \r\n                :host([type=\"submenu\"]) ::slotted([slot=\"menu\"]) {\r\n                    left: 100%;\r\n                    top: -6px;\r\n                }\r\n                \r\n                :host([type=\"submenu\"]) ::slotted([slot=\"menu\"][overflowing]) {\r\n                    right: 100%;\r\n                    left: auto;\r\n                }\r\n                \r\n                :host([type=\"menu\"]) ::slotted([slot=\"menu\"][overflowing]) {\r\n                    right: 0;\r\n                    left: auto;\r\n                }\r\n\r\n                :host([type=\"menu\"]) ::slotted([slot=\"menu\"]:not([expanded])),\r\n                :host([type=\"submenu\"]) ::slotted([slot=\"menu\"]:not([expanded])) {\r\n                    opacity: 0;\r\n                    pointer-events: none !important;\r\n                }\r\n\r\n                [part~=\"content\"] {\r\n                    flex: auto;\r\n                    display: flex;\r\n                    overflow: hidden;\r\n                    pointer-events: none;\r\n                }\r\n\r\n                [part~=\"input\"] {\r\n                    display: inline-block;\r\n                    flex: none;\r\n                    width: 16px;\r\n                    height: 16px;\r\n                    margin: 2px;\r\n                }\r\n\r\n                [part~=\"label\"] {\r\n                    flex: auto;\r\n                    text-align: left;\r\n                }\r\n\r\n                [part~=\"hotkey\"] {\r\n                    flex: none;\r\n                    text-align: right;\r\n                    margin-left: 16px;\r\n                }\r\n\r\n                [part~=\"hotkey\"]:empty {\r\n                    display: none !important;\r\n                }\r\n\r\n                [part~=\"arrow\"] {\r\n                    display: inline-block;\r\n                    flex: none;\r\n                    margin: auto;\r\n                    color: inherit;\r\n                    text-align: center;\r\n                    font-weight: bold;\r\n                    width: 18px;\r\n                    height: 18px;\r\n                }\r\n\r\n                [part~=\"arrow\"]::after {\r\n                    display: inline-block;\r\n                    text-align: center;\r\n                    width: 18px;\r\n                    height: 18px;\r\n                    position: absolute;\r\n                    content: \"►\";\r\n                    color: dimgray;\r\n                }\r\n\r\n                :host([type=\"menu\"]) [part~=\"arrow\"],\r\n                :host([type=\"menu\"]) [part~=\"input\"] {\r\n                    display: none;\r\n                }\r\n\r\n                :host(:not([type=\"menu\"])) [part~=\"label\"] {\r\n                    padding-left: 10px;\r\n                    padding-right: 12px;\r\n                }\r\n                \r\n                :host(:not([type=\"checkbox\"]):not([type=\"radio\"])) [part~=\"input\"] {\r\n                    visibility: hidden;\r\n                    pointer-events: none;\r\n                }\r\n                \r\n                :host(:not([type=\"submenu\"])) [part~=\"arrow\"] {\r\n                    visibility: hidden;\r\n                    pointer-events: none;\r\n                }\r\n            </style>\r\n            <span part=\"content\">\r\n                <input part=\"input\" type=\"button\" tabindex=\"-1\"></input>\r\n                <span part=\"label\"></span>\r\n                <span part=\"hotkey\"></span>\r\n                <span part=\"arrow\"></span>\r\n            </span>\r\n            <slot name=\"menu\"></slot>\r\n        `);\r\n        this.childMenu = null;\r\n        this.parentMenu = null;\r\n        this.group = null;\r\n        this.command = null;\r\n        this._hotkey = null;\r\n    }\r\n\r\n    public get hotkey(): HotKey | null {\r\n        return this._hotkey;\r\n    }\r\n\r\n    public set hotkey(hotkey: HotKey | null) {\r\n        this.dispatchEvent(\r\n            new CustomEvent(\"e_hotkeychange\", {\r\n                bubbles: true,\r\n                detail: {\r\n                    oldHotKey: this._hotkey,\r\n                    newHotKey: hotkey\r\n                }\r\n            })\r\n        );\r\n\r\n        this._hotkey = hotkey;\r\n\r\n        let hotkeyPart = this.shadowRoot?.querySelector(\"[part~=hotkey]\");\r\n        if (hotkeyPart) {\r\n            hotkeyPart.textContent = hotkey ? hotkey.toString() : \"\";\r\n        }\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        this.setAttribute(\"aria-label\", this.label);\r\n\r\n        const menuSlot = this.shadowRoot?.querySelector<HTMLSlotElement>(\"slot[name=menu]\");\r\n        if (menuSlot) {\r\n            menuSlot.addEventListener(\"slotchange\", () => {\r\n                const menuElem = menuSlot.assignedElements()[0];\r\n                if (isTagElement(\"e-menu\", menuElem)) {\r\n                    this.childMenu = menuElem;\r\n                    menuElem.parentItem = this;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (newValue !== oldValue) {\r\n            switch (name) {\r\n                case \"label\":\r\n                    if (oldValue !== newValue) {\r\n                        const labelPart = this.shadowRoot?.querySelector(\"[part~=label]\");\r\n                        if (labelPart) {\r\n                            labelPart.textContent = newValue;\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"checked\":\r\n                    if (oldValue !== newValue) {\r\n                        const inputPart = this.shadowRoot?.querySelector<HTMLInputElement>(\"[part~=input]\");\r\n                        if (inputPart) {\r\n                            inputPart.checked = (newValue !== null);\r\n                            this.dispatchEvent(new CustomEvent(\"e_change\", {bubbles: true}));\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"type\":\r\n                    if (oldValue !== newValue) {\r\n                        const inputPart = this.shadowRoot?.querySelector<HTMLInputElement>(\"[part~=input]\");\r\n                        if (inputPart) {\r\n                            switch (this.type) {\r\n                                case \"radio\":\r\n                                    inputPart.type = \"radio\";\r\n                                    break;\r\n                                case \"menu\":\r\n                                    inputPart.type = \"hidden\";\r\n                                    break;\r\n                                default:\r\n                                    inputPart.type = \"checkbox\";\r\n                                    break;\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public trigger(): void {\r\n        if (!this.disabled) {\r\n            switch (this.type) {\r\n                case \"checkbox\":\r\n                    this.checked = !this.checked;\r\n                    break;\r\n                case \"radio\":\r\n                    this.dispatchEvent(new CustomEvent(\"e_radiochangerequest\", {bubbles: true}));\r\n                    break;\r\n                case \"menu\":\r\n                    if (this.childMenu) {\r\n                        this.childMenu.focusItemAt(0);\r\n                    }\r\n                    break;\r\n            }\r\n            this.dispatchEvent(new CustomEvent(\"e_trigger\", {bubbles: true}));\r\n        }\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitem\": HTMLEMenuItemElement,\r\n    }\r\n}\r\n\r\ntype HotKeyChangeEvent = CustomEvent<{\r\n    oldHotKey: HotKey | null;\r\n    newHotKey: HotKey | null;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_hotkeychange\": HotKeyChangeEvent,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_trigger\": Event,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_radiochangerequest\": Event,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_change\": Event,\r\n    }\r\n}","\r\nimport { pointIntersectsWithDOMRect } from \"../../Snippets\";\r\nimport { bindShadowRoot, GenerateAttributeAccessors, isTagElement, RegisterCustomHTMLElement } from \"../../HTMLElement\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuItemGroupElement };\r\nexport { HTMLEMenuItemGroupElementBase };\r\n\r\ninterface HTMLEMenuItemGroupElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n    type: \"list\" | \"grid\";\r\n    rows: number;\r\n    cells: number;\r\n\r\n    parentMenu: HTMLEMenuElement | null;\r\n    items: HTMLEMenuItemElement[];\r\n\r\n    readonly activeIndex: number;\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    \r\n    focusItemAt(index: number, childMenu?: boolean): void;\r\n    reset(): void;\r\n    findItem(predicate: (item: HTMLEMenuItemElement) => boolean, subitems?: boolean): HTMLEMenuItemElement | null;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-menuitemgroup\",\r\n    observedAttributes: [\"label\"]\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"label\", type: \"string\"},\r\n    {name: \"type\", type: \"string\"},\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"rows\", type: \"number\"},\r\n    {name: \"cells\", type: \"number\"},\r\n])\r\nclass HTMLEMenuItemGroupElementBase extends HTMLElement implements HTMLEMenuItemGroupElement {\r\n    public name!: string;\r\n    public label!: string;\r\n    public type!: \"list\" | \"grid\";\r\n    public rows!: number;\r\n    public cells!: number;\r\n    \r\n    public parentMenu: HTMLEMenuElement | null;\r\n    public items: HTMLEMenuItemElement[];\r\n\r\n    private _activeIndex: number;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    position: relative;\r\n                    display: inline-block;\r\n                    user-select: none;\r\n                }\r\n                \r\n                :host(:not([label])) [part~=\"label\"] {\r\n                    display: none;\r\n                }\r\n\r\n                [part~=\"label\"] {\r\n                    white-space: nowrap;\r\n                    padding: 2px 6px 6px 6px;\r\n                    font-weight: bold;\r\n                }\r\n\r\n                [part~=\"container\"] {\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                }\r\n\r\n                [part~=\"separator\"] {\r\n                    margin: 6px 0;\r\n                }\r\n\r\n                :host(:first-child) [part~=\"separator\"] {\r\n                    display: none;\r\n                }\r\n            </style>\r\n            <hr part=\"separator\"/>\r\n            <span part=\"label\"></span>\r\n            <div part=\"container\">\r\n                <slot></slot> \r\n            </div>\r\n        `);\r\n\r\n        this._activeIndex = -1;\r\n        this.parentMenu = null;\r\n        this.items = [];\r\n    }\r\n\r\n    public get activeIndex(): number {\r\n        return this._activeIndex;\r\n    }\r\n\r\n    public get activeItem(): HTMLEMenuItemElement | null {\r\n        return this.items[this.activeIndex] || null;\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const items = slot.assignedElements()\r\n                    .filter(item => isTagElement(\"e-menuitem\", item)) as HTMLEMenuItemElement[];\r\n                this.items = items;\r\n                items.forEach((item) => {\r\n                    item.group = this;\r\n                });\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            if (this.items.includes(target)) {\r\n                target.trigger();\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"mouseover\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            let targetIndex = this.items.indexOf(target);\r\n            if (this === target) {\r\n                this.reset();\r\n                this.focus();\r\n            }\r\n            else if (targetIndex >= 0) {\r\n                this.focusItemAt(this.items.indexOf(target), true);\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"mouseout\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            let thisIntersectsWithMouse = pointIntersectsWithDOMRect(\r\n                event.clientX, event.clientY,\r\n                this.getBoundingClientRect()\r\n            );\r\n            if ((this === target || this.items.includes(target)) && !thisIntersectsWithMouse) {\r\n                this.reset();\r\n                this.focus();\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusin\", (event: FocusEvent) => {\r\n            let target = event.target as any;\r\n            this._activeIndex = this.items.findIndex(\r\n                (item) => item.contains(target)\r\n            );\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            let newTarget = event.relatedTarget as any;\r\n            if (!this.contains(newTarget)) {  \r\n                this.reset();\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"e_radiochangerequest\", (event: Event) => {\r\n            let target = event.target as any;\r\n            if (isTagElement(\"e-menuitem\", target)) {\r\n                let item = target;\r\n                if (item.type === \"radio\" && !item.checked) {\r\n                    let checkedRadio = this.findItem(\r\n                        (item: HTMLEMenuItemElement) => {\r\n                            return item.type === \"radio\" && item.checked\r\n                        }\r\n                    );\r\n                    if (checkedRadio) {\r\n                        checkedRadio.checked = false;\r\n                    }\r\n                    item.checked = true;\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"ArrowUp\":\r\n                    if (this.activeIndex > 0) {\r\n                        this.focusItemAt(this.activeIndex - 1);\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    if (this.activeIndex < this.items.length - 1) {\r\n                        this.focusItemAt(this.activeIndex + 1);\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                case \"Enter\":\r\n                    if (this.activeItem) {\r\n                        this.activeItem.trigger();\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                case \"ArrowRight\":\r\n                    if (this.items.includes(event.target as any)) {\r\n                        if (this.activeItem?.childMenu) {\r\n                            this.activeItem.childMenu.focusItemAt(0);\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"Home\":\r\n                    this.focusItemAt(0);\r\n                    break;\r\n                case \"End\":\r\n                    this.focusItemAt(this.items.length - 1);\r\n                    break;\r\n                case \"Escape\":\r\n                    this.reset();\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (oldValue !== newValue) {\r\n            switch (name) {\r\n            case \"label\":\r\n                if (oldValue !== newValue) {\r\n                    const label = this.shadowRoot?.querySelector(\"[part~=label]\");\r\n                    if (label) {\r\n                        label.textContent = newValue;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public focusItemAt(index: number, childMenu?: boolean): void {\r\n        let item = this.items[index];\r\n        if (item) {\r\n            this._activeIndex = index;\r\n            item.focus();\r\n            if (childMenu && item.childMenu) {\r\n                item.childMenu.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    public reset(): void {\r\n        let item = this.activeItem;\r\n        this._activeIndex = -1;\r\n        if (item?.childMenu) {\r\n            item.childMenu.reset();\r\n        }\r\n    }\r\n\r\n    public findItem(predicate: (item: HTMLEMenuItemElement) => boolean, subitems?: boolean): HTMLEMenuItemElement | null {\r\n        let foundItem: HTMLEMenuItemElement | null = null;\r\n        for (let item of this.items) {\r\n            if (predicate(item)) {\r\n                return item;\r\n            }\r\n            if (subitems && item.childMenu) {\r\n                foundItem = item.childMenu.findItem(predicate, subitems);\r\n                if (foundItem) {\r\n                    return foundItem;\r\n                }\r\n            }\r\n        }\r\n        return foundItem;\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitemgroup\": HTMLEMenuItemGroupElement,\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../../HTMLElement\";\r\n\r\nexport { PanelElement };\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: 'e-panel',\r\n    observedAttributes: ['state']\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: 'label', type: 'string'},\r\n    {name: 'state', type: 'string'},\r\n])\r\nclass PanelElement extends HTMLElement {\r\n\r\n    public label!: string;\r\n    public state!: 'opened' | 'closed';\r\n\r\n    constructor() {\r\n        super();\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n                }\r\n\r\n                :host([state='closed']) #label,\r\n                :host([state='closed']) #content {\r\n                    display: none;\r\n                }\r\n\r\n                :host([state='closed']) #header {\r\n                    padding: 0;\r\n                }\r\n\r\n                :host([state='closed']) #arrow {\r\n                    display: inherit;\r\n                }\r\n                \r\n                :host([state='opened']) #label,\r\n                :host([state='opened']) #content {\r\n                    display: inherit;\r\n                }\r\n\r\n                :host([state='opened']) #arrow {\r\n                    display: none;\r\n                }\r\n\r\n                #content {\r\n                    padding: var(--content-padding, inherit);\r\n                }\r\n\r\n                #header {\r\n                    color: var(--header-color, inherit);\r\n                    text-align: center;\r\n                    padding-top: 0;\r\n\r\n                    user-select: none;\r\n                }\r\n\r\n                #header:hover {\r\n                    --color: var(--header-hover-color, var(--header-color));\r\n                    color: var(--header-hover-color, var(--header-color));\r\n                    font-weight: var(--header-hover-font-weight);\r\n                }\r\n            </style>\r\n            <div>\r\n                <div id=\"header\">\r\n                    <span id=\"arrow\"></span>\r\n                    <span id=\"label\"></span>\r\n                </div>\r\n                <div id=\"content\">\r\n                    <slot></slot>\r\n                </div>\r\n            </div>\r\n        `);\r\n \r\n        const header = this.shadowRoot!.getElementById('header')!;\r\n\r\n        header.addEventListener(\r\n            'click', () => {\r\n                this.state = (this.state === 'opened') ? 'closed' : 'opened';\r\n            }\r\n        );\r\n    }\r\n    \r\n    public async render() {\r\n        const label = this.shadowRoot!.getElementById('label')!;\r\n        const arrow = this.shadowRoot!.getElementById('arrow')!;\r\n        \r\n        let rect = this.getBoundingClientRect();\r\n        const arr = (rect.left < window.innerWidth / 2) ? '>' : '<';\r\n        arrow.innerHTML = arr;\r\n        label.innerHTML = this.label || '';\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.label = this.label || 'label';\r\n        this.state = this.state || 'opened';\r\n\r\n        this.render();\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../../HTMLElement\";\r\n\r\nexport { PanelGroupElement };\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: 'e-panel-group'\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: 'label', type: 'string'},\r\n    {name: 'state', type: 'string'},\r\n])\r\nclass PanelGroupElement extends HTMLElement {\r\n\r\n    public label!: string;\r\n    public state!: 'opened' | 'closed';\r\n\r\n    public static readonly observedAttributes = ['state'];\r\n    \r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <link rel=\"stylesheet\" href=\"css/theme.css\"/>\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n                }\r\n\r\n                :host([state='closed']) #content {\r\n                    display: none;\r\n                }\r\n\r\n                :host([state='closed']) #less {\r\n                    display: none;\r\n                }\r\n\r\n                :host([state='opened']) #more {\r\n                    display: none;\r\n                }\r\n\r\n                #toggler {\r\n                    display: flex;\r\n                }\r\n\r\n                #toggler:hover {\r\n                    font-weight: 500;\r\n                    color: var(--label-on-hover-color);\r\n                }\r\n\r\n                #label {\r\n                    flex: 1;\r\n                }\r\n            </style>\r\n            <div>\r\n                <div id=\"toggler\">\r\n                    <span id=\"arrow\"><!--<icon #less><icon #more>--></span>\r\n                    <span id=\"label\"></span>\r\n                </div>\r\n                <div id=\"content\">\r\n                    <slot></slot>\r\n                </div>\r\n            </div>\r\n        `);\r\n\r\n        \r\n        this.state = this.state || 'closed';\r\n    }\r\n\r\n    public connectedCallback() {\r\n        const toggler = this.shadowRoot!.querySelector<HTMLElement>('#toggler')!;\r\n        const arrow = this.shadowRoot!.querySelector<HTMLElement>('#arrow')!;\r\n        const label = this.shadowRoot!.querySelector<HTMLElement>('#label')!;\r\n\r\n        toggler.addEventListener(\r\n            'click', () => {\r\n                if (this.state === 'opened') {\r\n                    this.state = 'closed';\r\n                }\r\n                else if (this.state === 'closed') {\r\n                    this.state = 'opened';\r\n                }\r\n            }\r\n        );\r\n\r\n        label.innerHTML = this.label!;\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot, isTagElement } from \"../../HTMLElement\";\r\nimport { HTMLEStatusItemElement } from \"./StatusItem\";\r\n\r\nexport { HTMLEStatusBarElement };\r\nexport { HTMLEStatusBarElementBase };\r\n\r\ninterface HTMLEStatusBarElement  extends HTMLElement {\r\n    items: HTMLEStatusItemElement[];\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-statusbar\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"active\", type: \"boolean\"},\r\n])\r\nclass HTMLEStatusBarElementBase extends HTMLElement implements HTMLEStatusBarElement {\r\n\r\n    public name!: string;\r\n    public active!: boolean;\r\n    \r\n    public items: HTMLEStatusItemElement[];\r\n\r\n    public _selectedItemIndex: number;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: flex;\r\n                    position: relative; \r\n                    user-select: none;\r\n\r\n                    background-color: white;\r\n                }\r\n\r\n                :host(:focus) {\r\n                    outline: 1px solid -webkit-focus-ring-color;\r\n                }\r\n\r\n                :host(:focus) ::slotted(:first-child),\r\n                :host(:not(:focus-within)) ::slotted(:hover) {\r\n                    color: black;\r\n                    background-color: gainsboro;\r\n                }\r\n\r\n                [part~=\"ul\"] {\r\n                    display: block;\r\n                    list-style-type: none;\r\n                    padding: 0; margin: 0;\r\n                }\r\n            </style>\r\n            <ul part=\"ul\">\r\n                <slot></slot>\r\n            </ul>\r\n        `);\r\n\r\n        this.items = [];\r\n        this._selectedItemIndex = -1;\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n        \r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", (event: Event) => {\r\n                const items = (event.target as HTMLSlotElement).assignedElements()\r\n                    .filter(item => isTagElement(\"e-statusitem\", item)) as HTMLEStatusItemElement[];\r\n                this.items = items;\r\n            }, {once: true});\r\n        }\r\n    }\r\n\r\n    public get selectedItemIndex(): number {\r\n        return this._selectedItemIndex;\r\n    }\r\n\r\n    public get selectedItem(): HTMLEStatusItemElement | null {\r\n        return this.items[this.selectedItemIndex] || null;\r\n    }\r\n\r\n    public insertItem(index: number, item: HTMLEStatusItemElement): void {\r\n        index = Math.min(Math.max(index, -this.items.length), this.items.length);\r\n        this.insertBefore(item, this.children[index >= 0 ? index : this.children.length + index]);\r\n        this.items.splice(index, 0, item);\r\n        item.addEventListener(\"mouseenter\", () => {\r\n            this.selectItem(this.items.indexOf(item));\r\n        });\r\n        item.addEventListener(\"mouseleave\", () => {\r\n        });\r\n    }\r\n\r\n    public findItem(predicate: (item: HTMLEStatusItemElement) => boolean): HTMLEStatusItemElement | null {\r\n        const items = this.findItems(predicate);\r\n        if (items.length > 0) {\r\n            return items[0];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public findItems(predicate: (item: HTMLEStatusItemElement) => boolean): HTMLEStatusItemElement[] {\r\n        const items: HTMLEStatusItemElement[] = [];\r\n        this.items.forEach((item) => {\r\n            if (predicate(item)) {\r\n                items.push(item);\r\n            }\r\n        });\r\n        return items;\r\n    }\r\n\r\n    public selectItem(index: number): void {\r\n        if (index !== this.selectedItemIndex) {\r\n            this.clearSelection();\r\n            let item = this.items[index];\r\n            if (item) {\r\n                this._selectedItemIndex = index;\r\n            }\r\n        }\r\n    }\r\n\r\n    public clearSelection() {\r\n        let item = this.selectedItem;\r\n        if (item) {\r\n            this._selectedItemIndex = -1;\r\n        }\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-statusbar\": HTMLEStatusBarElement,\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../../HTMLElement\";\r\n\r\nexport { HTMLEStatusItemElement };\r\nexport { HTMLEStatusItemElementBase };\r\n\r\ninterface HTMLEStatusItemElement extends HTMLElement {\r\n\r\n}\r\n\r\ntype EStatusElementType = \"button\" | \"widget\";\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-statusitem\",\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"icon\", type: \"string\"},\r\n    {name: \"type\", type: \"string\"},\r\n])\r\nclass HTMLEStatusItemElementBase extends HTMLElement implements HTMLEStatusItemElement {\r\n\r\n    public name!: string;\r\n    public type!: EStatusElementType;\r\n    public icon!: string;\r\n\r\n    public command: string | null;\r\n\r\n    private _stateMap: ((state: any) => {content: string}) | null;\r\n\r\n    public get stateMap(): ((state: any) => {content: string}) | null {\r\n        return this._stateMap;\r\n    }\r\n\r\n    public set stateMap(stateMap: ((state: any) => {content: string}) | null) {\r\n        this._stateMap = stateMap;\r\n    }\r\n\r\n    public update(newValue: any): void {\r\n        const { content } = (typeof this.stateMap === \"function\") ? this.stateMap(newValue) : newValue;\r\n        this.textContent = content;\r\n    }\r\n\r\n\r\n    // TODO: Add sync with Promise (icons, etc.)\r\n    \r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    position: relative;\r\n                    display: inline-block;\r\n\r\n                    user-select: none;\r\n                    white-space: nowrap;\r\n\r\n                    padding: 2px 6px;\r\n                    background-color: white;\r\n                }\r\n\r\n                :host(:focus-visible) {\r\n                    outline: none;\r\n                }\r\n\r\n                :host(:hover),\r\n                :host([active]) {\r\n                    background-color: rgb(180, 180, 180);\r\n                }\r\n                \r\n                li {\r\n                    display: flex;\r\n                    height: 100%;\r\n                    list-style-type: none;\r\n                }\r\n            </style>\r\n            <li>\r\n                <slot></slot>\r\n            </li>\r\n        `);\r\n\r\n        this.command = null;\r\n        this._stateMap = null;\r\n    }\r\n\r\n    public activate() {\r\n        this.dispatchEvent(new CustomEvent(\"activate\"));\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n        \r\n        this.addEventListener(\"click\", (event: Event) => {\r\n            this.activate();\r\n            event.stopPropagation();\r\n        });\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-statusitem\": HTMLEStatusItemElement,\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot, isTagElement } from \"../../HTMLElement\";\r\nimport { HTMLETabPanelElement } from \"./TabPanel\";\r\n\r\nexport { ETabChangeEvent };\r\nexport { HTMLETabElement };\r\nexport { BaseHTMLETabElement };\r\n\r\ninterface HTMLETabElement extends HTMLElement {\r\n    name: string;\r\n    active: boolean;\r\n    disabled: boolean;\r\n    controls: string;\r\n    panel: HTMLETabPanelElement | null;\r\n}\r\n\r\ntype ETabChangeEvent = CustomEvent<{\r\n    tab: HTMLETabElement;\r\n}>;\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-tab\",\r\n    observedAttributes: [\"active\", \"controls\"]\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"active\", type: \"boolean\"},\r\n    {name: \"disabled\", type: \"boolean\"},\r\n    {name: \"controls\", type: \"string\"},\r\n])\r\nclass BaseHTMLETabElement extends HTMLElement implements HTMLETabElement {\r\n\r\n    public name!: string;\r\n    public disabled!: boolean;\r\n    public active!: boolean;\r\n    public controls!: string;\r\n\r\n    public panel: HTMLETabPanelElement | null;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: inline-block;\r\n                    position: relative;\r\n                    \r\n                    user-select: none;\r\n                    white-space: nowrap;\r\n                    padding: 2px 6px;\r\n                    border-left: 3px solid transparent;\r\n                    cursor: pointer;\r\n                }\r\n                \r\n                :host([disabled]) {\r\n                    color: grey;\r\n                    pointer-events: none;\r\n                }\r\n\r\n                :host([active]) {\r\n                    border-left: 3px solid dimgray;\r\n                    background-color: whitesmoke;\r\n                }\r\n\r\n                ::slotted(*) {\r\n                    pointer-events: none;\r\n                }\r\n            </style>\r\n            <slot></slot>\r\n        `);\r\n        this.panel = null;\r\n    }\r\n\r\n    public connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const panel = document.getElementById(this.controls);\r\n        if (panel !== this.panel && isTagElement(\"e-tabpanel\", panel)) {\r\n            this.panel = panel;\r\n        }\r\n        if (this.panel)  {\r\n            this.panel.hidden = !this.active;\r\n        }\r\n    }\r\n    \r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (newValue !== oldValue) {\r\n            switch (name) {\r\n                case \"active\":\r\n                    if (this.active) {\r\n                        this.dispatchEvent(new CustomEvent(\"e_tabchange\", {detail: {tab: this}, bubbles: true}));\r\n                    }\r\n                    const panel = document.getElementById(this.controls);\r\n                    if (panel !== this.panel && isTagElement(\"e-tabpanel\", panel)) {\r\n                        this.panel = panel;\r\n                    }\r\n                    if (this.panel)  {\r\n                        this.panel.hidden = !this.active;\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tab\": HTMLETabElement,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_tabchange\": ETabChangeEvent,\r\n    }\r\n}","import { RegisterCustomHTMLElement, bindShadowRoot, isTagElement } from \"../../HTMLElement\";\r\nimport { HTMLETabElement } from \"./Tab\";\r\n\r\nexport { TabChangeEvent };\r\nexport { HTMLETabListElement };\r\nexport { BaseHTMLETabListElement };\r\n\r\ninterface HTMLETabListElement extends HTMLElement {\r\n    readonly activeTab: HTMLETabElement | null;\r\n    tabs: HTMLETabElement[];\r\n}\r\n\r\ntype TabChangeEvent = CustomEvent<{\r\n    tab: HTMLETabElement;\r\n}>\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-tablist\"\r\n})\r\nclass BaseHTMLETabListElement extends HTMLElement implements HTMLETabListElement {\r\n\r\n    public tabs: HTMLETabElement[];\r\n\r\n    private _activeIndex: number;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n                    position: relative;\r\n                }\r\n            </style>\r\n            <slot></slot>\r\n        `);\r\n        this.tabs = [];\r\n        this._activeIndex = 1;\r\n    }\r\n\r\n    public get activeIndex(): number {\r\n        return this._activeIndex;\r\n    }\r\n\r\n    public get activeTab(): HTMLETabElement | null {\r\n        return this.tabs[this._activeIndex] || null;\r\n    }\r\n\r\n    public connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot!.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", (event) => {\r\n                const tabs = (event.target as HTMLSlotElement)\r\n                    .assignedElements()\r\n                    .filter(tab => isTagElement(\"e-tab\", tab)) as HTMLETabElement[];\r\n                this.tabs = tabs;\r\n                this._activeIndex = this.tabs.findIndex(tab => tab.active);\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event) => {\r\n            switch (event.key) {\r\n                case \"ArrowUp\":\r\n                    this.focusTabAt((this.activeIndex <= 0) ? this.tabs.length - 1 : this.activeIndex - 1);\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    this.focusTabAt((this.activeIndex >= this.tabs.length - 1) ? 0 : this.activeIndex + 1);\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"Enter\":\r\n                    if (this.activeTab) {\r\n                        this.activateTab(this.activeTab);\r\n                    }\r\n                    break;\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"click\", (event) => {\r\n            const target = event.target;\r\n            if (isTagElement(\"e-tab\", target)) {\r\n                target.active = true;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"e_tabchange\", (event) => {\r\n            const targetIndex = this.tabs.indexOf(event.detail.tab);\r\n            this._activeIndex = targetIndex;\r\n            this.tabs.forEach((thisTab, thisTabIndex) => {\r\n                if (thisTabIndex !== targetIndex) {\r\n                    thisTab.active = false;\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    public focusTabAt(index: number): void {\r\n        const tab = this.tabs[index];\r\n        if (tab) {\r\n            this._activeIndex = index;\r\n            tab.focus();\r\n        }\r\n    }\r\n\r\n    public findTab(predicate: (tab: HTMLETabElement) => boolean): HTMLETabElement | null {\r\n        return this.tabs.find(predicate) || null;\r\n    }\r\n\r\n    public activateTab(tab: HTMLETabElement) {\r\n        if (this.tabs.includes(tab)) {\r\n            tab.active = true;\r\n        }\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tablist\": HTMLETabListElement,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"tabchange\": TabChangeEvent\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../../HTMLElement\";\r\n\r\nexport { isHTMLETabPanelElement };\r\nexport { HTMLETabPanelElement };\r\nexport { BaseHTMLETabPanelElement };\r\n\r\ninterface HTMLETabPanelElement extends HTMLElement {\r\n    name: string;\r\n}\r\n\r\nfunction isHTMLETabPanelElement(obj: any): obj is BaseHTMLETabPanelElement {\r\n    return obj instanceof Node && obj.nodeType === obj.ELEMENT_NODE && (obj as Element).tagName.toLowerCase() === \"e-tabpanel\";\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-tabpanel\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"name\", type: \"string\"}\r\n])\r\nclass BaseHTMLETabPanelElement extends HTMLElement implements HTMLETabPanelElement {\r\n\r\n    public name!: string;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n                }\r\n\r\n                :host([hidden]) {\r\n                    display: none;\r\n                }\r\n            </style>\r\n            <slot></slot>\r\n        `);\r\n    }\r\n\r\n    public connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tabpanel\": HTMLETabPanelElement,\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot, isTagElement } from \"../../HTMLElement\";\r\nimport { HTMLETreeElement } from \"./Tree\";\r\n\r\nexport { HTMLETreeItemElement };\r\nexport { HTMLETreeItemElementBase };\r\n\r\ninterface HTMLETreeItemElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n    expanded: boolean;\r\n    indent: number;\r\n    icon: string;\r\n    selected: boolean;\r\n    active: boolean;\r\n    leaf: boolean;\r\n\r\n    items: HTMLETreeItemElement[];\r\n    parent: HTMLETreeItemElement | HTMLETreeElement | null;\r\n\r\n    deepestVisibleChildItem(): HTMLETreeItemElement;\r\n    previousVisibleItem(): HTMLETreeItemElement;\r\n    nextVisibleItem(): HTMLETreeItemElement;\r\n    nearestParentItem(): HTMLETreeItemElement;\r\n\r\n    toggle(): void;\r\n    trigger(): void;\r\n\r\n    findItem(predicate: (item: HTMLETreeItemElement) => boolean, subtree?: boolean): HTMLETreeItemElement | null;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-treeitem\",\r\n    observedAttributes: [\"icon\", \"label\", \"expanded\", \"indent\"]\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"label\", type: \"string\"},\r\n    {name: \"icon\", type: \"string\"},\r\n    {name: \"indent\", type: \"number\"},\r\n    {name: \"active\", type: \"boolean\"},\r\n    {name: \"selected\", type: \"boolean\"},\r\n    {name: \"expanded\", type: \"boolean\"},\r\n    {name: \"leaf\", type: \"boolean\"}\r\n])\r\nclass HTMLETreeItemElementBase extends HTMLElement implements HTMLETreeItemElement {\r\n\r\n    public name!: string;\r\n    public label!: string;\r\n    public indent!: number;\r\n    public expanded!: boolean;\r\n    public value!: string;\r\n    public icon!: string;\r\n    public selected!: boolean;\r\n    public active!: boolean;\r\n    public leaf!: boolean;\r\n\r\n    public items: HTMLETreeItemElement[];\r\n    public parent: HTMLETreeItemElement | HTMLETreeElement | null;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: inline-block;\r\n\r\n                    user-select: none;\r\n                    white-space: nowrap;\r\n\r\n                    padding: 0;\r\n                    cursor: pointer;\r\n\r\n                    --indent-width: 6px;\r\n                }\r\n                \r\n                [part~=\"content\"]:hover,\r\n                :host([active]:not([selected])) [part~=\"content\"] {\r\n                    background-color: whitesmoke;\r\n                }\r\n\r\n                :host([selected]) [part~=\"content\"] {\r\n                    background-color: gainsboro;\r\n                }\r\n\r\n                :host(:not([expanded])) [part~=\"container\"] {\r\n                    display: none;\r\n                }\r\n\r\n                [part~=\"content\"] {\r\n                    font-size: 1em;\r\n                    display: flex;\r\n                    padding-left: calc(var(--tree-indent) * var(--indent-width));\r\n                }\r\n\r\n                [part~=\"label\"],\r\n                ::slotted([slot=\"label\"]) {\r\n                    display: block;\r\n                    width: 100%;\r\n                    pointer-events: none;\r\n                    overflow: hidden;\r\n                    white-space: nowrap;\r\n                    text-overflow: ellipsis;\r\n                }\r\n\r\n                :host([leaf]) [part~=\"container\"],\r\n                [part~=\"container\"]:empty {\r\n                    display: none;\r\n                }\r\n\r\n                [part~=\"toggle_arrow\"] {\r\n                    flex: none;\r\n                    display: inline-block;\r\n                    width: 18px;\r\n                    height: 18px;\r\n                    margin: 2px;\r\n                    margin-right: 6px;\r\n                    border-radius: 2px;\r\n                }\r\n\r\n                :host([leaf]) [part~=\"toggle_arrow\"] {\r\n                    visibility: hidden;\r\n                }\r\n\r\n                [part~=\"toggle_arrow\"]::after {\r\n                    display: inline-block;\r\n                    width: 18px;\r\n                    height: 18px;\r\n                    position: absolute;\r\n                    color: dimgray;\r\n                    text-align: center;\r\n                }\r\n\r\n                :host(:not([expanded])) [part~=\"toggle_arrow\"]::after {\r\n                    content: \"►\";\r\n                }\r\n\r\n                :host([expanded]) [part~=\"toggle_arrow\"]::after {\r\n                    content: \"▼\";\r\n                }\r\n\r\n                [part~=\"state\"] {\r\n                    flex: none;\r\n                }\r\n\r\n                [part~=\"container\"] {\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                }\r\n            </style>\r\n            <span part=\"content\">\r\n                <span part=\"toggle_arrow\"></span>\r\n                <slot name=\"label\"><span part=\"label\"></span></slot>\r\n            </span>\r\n            <div part=\"container\">\r\n                <slot></slot>\r\n            </div>\r\n        `);\r\n        this.items = [];\r\n        this.parent = null;\r\n        this.indent = 0;\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot?.querySelector<HTMLSlotElement>(\"slot:not([name])\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const items = slot.assignedElements()\r\n                    .filter(item => isTagElement(\"e-treeitem\", item)) as HTMLETreeItemElement[];\r\n                this.items = items;\r\n                this.items.forEach((item) => {\r\n                    item.parent = this;\r\n                    item.indent = this.indent + 1;\r\n                });\r\n            });\r\n        }\r\n\r\n        const content = this.shadowRoot!.querySelector(\"[part=content]\")!;\r\n        content.addEventListener(\"click\", () => {\r\n            this.toggle();\r\n        });\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (newValue !== oldValue) {\r\n            switch (name) {\r\n                case \"label\":\r\n                    if (oldValue !== newValue) {\r\n                        const labelPart = this.shadowRoot?.querySelector(\"[part~=label]\");\r\n                        if (labelPart) {\r\n                            labelPart.textContent = newValue;\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"icon\":\r\n                    if (oldValue !== newValue) {\r\n                        const iconPart = this.shadowRoot?.querySelector<HTMLElement>(\"[part~=icon]\");\r\n                        if (iconPart) {\r\n                            iconPart.dataset.value = newValue;\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"indent\":\r\n                    if (oldValue !== newValue) {\r\n                        this.style.setProperty(\"--tree-indent\", newValue);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public deepestVisibleChildItem(): HTMLETreeItemElement {\r\n        if (this.expanded && this.items.length > 0) {\r\n            let lastChildItem = this.items[this.items.length - 1];\r\n            return lastChildItem.deepestVisibleChildItem();\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public previousVisibleItem(): HTMLETreeItemElement {\r\n        if (this.parent) {\r\n            let indexOfThis = this.parent.items.indexOf(this);\r\n            if (indexOfThis > 0) {\r\n                let previousItem = this.parent.items[indexOfThis - 1];\r\n                return previousItem.deepestVisibleChildItem();\r\n            }\r\n            return isTagElement(\"e-treeitem\", this.parent) ? this.parent : this;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public nextVisibleItem(): HTMLETreeItemElement {\r\n        if (this.expanded && this.items.length > 0) {\r\n            return this.items[0];\r\n        }\r\n        let nearestItem = this.nearestParentItem();\r\n        if (nearestItem.parent) {\r\n            let indexOfNearest = nearestItem.parent.items.indexOf(nearestItem);\r\n            if (indexOfNearest < nearestItem.parent.items.length - 1) {\r\n                return nearestItem.parent.items[indexOfNearest + 1];\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public nearestParentItem(): HTMLETreeItemElement {\r\n        if (isTagElement(\"e-treeitem\", this.parent)) {\r\n            let indexOfThis = this.parent.items.indexOf(this);\r\n            if (indexOfThis === this.parent.items.length - 1) {\r\n                return this.parent.nearestParentItem();\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public toggle(): void {\r\n        this.expanded = !this.expanded;\r\n        this.dispatchEvent(new CustomEvent(\"e_toggle\", {bubbles: true}));\r\n    }\r\n\r\n    public trigger(): void {\r\n        this.dispatchEvent(new CustomEvent(\"e_trigger\", {bubbles: true}));\r\n    }\r\n\r\n    public findItem(predicate: (item: HTMLETreeItemElement) => boolean, subtree?: boolean): HTMLETreeItemElement | null {\r\n        let foundItem: HTMLETreeItemElement | null = null;\r\n        for (let item of this.items) {\r\n            if (predicate(item)) {\r\n                return item;\r\n            }\r\n            if (subtree && item.items) {\r\n                for (let subitem of item.items) {\r\n                    foundItem = subitem.findItem(predicate, subtree);\r\n                    if (foundItem) {\r\n                        return foundItem;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return foundItem;\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitem\": HTMLETreeItemElement,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_toggle\": Event,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_trigger\": Event,\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot, isTagElement } from \"../../HTMLElement\";\r\nimport { HTMLETreeItemElement } from \"./TreeItem\";\r\n\r\nexport { HTMLETreeElement };\r\nexport { HTMLETreeElementBase };\r\n\r\ninterface HTMLETreeElement extends HTMLElement {\r\n    name: string;\r\n    items: HTMLETreeItemElement[];\r\n    readonly activeItem: HTMLETreeItemElement | null;\r\n    readonly selectedItem: HTMLETreeItemElement | null;\r\n    findItem(predicate: (item: HTMLETreeItemElement) => boolean, subtree?: boolean): HTMLETreeItemElement | null;\r\n    reset(): void;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-tree\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"active\", type: \"boolean\"},\r\n    {name: \"name\", type: \"string\"}\r\n])\r\nclass HTMLETreeElementBase extends HTMLElement implements HTMLETreeElement {\r\n\r\n    public active!: boolean;\r\n    public name!: string;\r\n    \r\n    public items: HTMLETreeItemElement[];\r\n\r\n    private _activeItem: HTMLETreeItemElement | null;\r\n    private _selectedItem: HTMLETreeItemElement | null;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n                    position: relative;\r\n                    user-select: none;\r\n                }\r\n\r\n                [part~=\"container\"] {\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                }\r\n            </style>\r\n            <div part=\"container\">\r\n                <slot></slot>\r\n            </div>\r\n        `);\r\n        this.items = [];\r\n        this._activeItem = null;\r\n        this._selectedItem = null;\r\n    }\r\n\r\n    public get activeItem(): HTMLETreeItemElement | null {\r\n        return this._activeItem;\r\n    }\r\n\r\n    public get selectedItem(): HTMLETreeItemElement | null {\r\n        return this._selectedItem;\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n        \r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const items = slot.assignedElements()\r\n                    .filter(item => isTagElement(\"e-treeitem\", item)) as HTMLETreeItemElement[];\r\n                this.items = items;\r\n                items.forEach((item) => {\r\n                    item.parent = this;\r\n                    item.indent = 1;\r\n                });\r\n            });\r\n        }\r\n        \r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"ArrowLeft\":\r\n                    if (this.activeItem) {\r\n                        if (this.activeItem.expanded) {\r\n                            this.activeItem.toggle();\r\n                        }\r\n                        else {\r\n                            if (isTagElement(\"e-treeitem\", this.activeItem.parent)) {\r\n                                this.focusItem(this.activeItem.parent);\r\n                            }\r\n                        }\r\n                    }\r\n                    event.preventDefault();\r\n                    break;\r\n                case \"ArrowRight\":\r\n                    if (this.activeItem) {\r\n                        if (!this.activeItem.expanded) {\r\n                            this.activeItem.toggle();\r\n                        }\r\n                        else {\r\n                            if (this.activeItem.items.length > 0) {\r\n                                this.focusItem(this.activeItem.items[0]);\r\n                            }\r\n                        }\r\n                    }\r\n                    event.preventDefault();\r\n                    break;\r\n                case \"ArrowUp\":\r\n                    if (this.activeItem) {\r\n                        this.focusItem(this.activeItem.previousVisibleItem());\r\n                    }\r\n                    else if (this.items.length > 0) {\r\n                        this.focusItem(this.items[0]);\r\n                    }\r\n                    event.preventDefault();\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    if (this.activeItem) {\r\n                        this.focusItem(this.activeItem.nextVisibleItem());\r\n                    }\r\n                    else if (this.items.length > 0) {\r\n                        this.focusItem(this.items[this.items.length - 1]);\r\n                    }\r\n                    event.preventDefault();\r\n                    break;\r\n                case \"Home\":\r\n                    if (this.items.length > 0) {\r\n                        this.focusItem(this.items[0]);\r\n                    }\r\n                    event.preventDefault();\r\n                    break;\r\n                case \"End\":\r\n                    if (this.items.length > 0) {\r\n                        this.focusItem(this.items[this.items.length - 1].deepestVisibleChildItem());\r\n                    }\r\n                    event.preventDefault();\r\n                    break;\r\n                case \"Enter\":\r\n                    if (this.activeItem) {\r\n                        this.selectItem(this.activeItem);\r\n                        this.activeItem.trigger();\r\n                    }\r\n                    break;\r\n                case \"Escape\":\r\n                    this.active = false;\r\n                    this.reset();\r\n                    this.focus();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"click\", (event: MouseEvent) => {\r\n            const target = event.target as Element;\r\n            if (isTagElement(\"e-treeitem\", target)) {\r\n                this.selectItem(target);\r\n                target.trigger();\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusin\", (event: FocusEvent) => {\r\n            const target = event.target as Element;\r\n            if (!this.active) {\r\n                this.active = true;\r\n            }\r\n            const closestItem = target.closest(\"e-treeitem\");\r\n            if (closestItem && this.contains(closestItem)) {\r\n                this.focusItem(closestItem);\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            const relatedTarget = event.relatedTarget as Element;\r\n            if (!this.contains(relatedTarget)) {\r\n                this.active = false;\r\n                if (this.activeItem) {\r\n                    this.activeItem.active = false;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public focusItem(item: HTMLETreeItemElement) {\r\n        if (this.activeItem) {\r\n            this.activeItem.active = false;\r\n        }\r\n        this._activeItem = item;\r\n        this._activeItem.active = true;\r\n        item.focus();\r\n    }\r\n\r\n    public selectItem(item: HTMLETreeItemElement) {\r\n        if (this._selectedItem) {\r\n            this._selectedItem.selected = false;\r\n        }\r\n        this._selectedItem = item;\r\n        this._selectedItem.selected = true;\r\n    }\r\n\r\n    public reset(): void {\r\n        if (this.activeItem) {\r\n            this.activeItem.active = false;\r\n        }\r\n        if (this._selectedItem) {\r\n            this._selectedItem.selected = false;\r\n        }\r\n    }\r\n\r\n    public findItem(predicate: (item: HTMLETreeItemElement) => boolean, subtree?: boolean): HTMLETreeItemElement | null {\r\n        let foundItem: HTMLETreeItemElement | null = null;\r\n        for (let item of this.items) {\r\n            if (predicate(item)) {\r\n                return item;\r\n            }\r\n            if (subtree && item.items) {\r\n                for (let subitem of item.items) {\r\n                    foundItem = subitem.findItem(predicate, subtree);\r\n                    if (foundItem) {\r\n                        return foundItem;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return foundItem;\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tree\": HTMLETreeElement,\r\n    }\r\n}\r\n","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../../HTMLElement\";\r\nimport { forAllSubtreeElements } from \"../../Snippets\";\r\n\r\nexport { HTMLEDraggableElement };\r\nexport { HTMLEDraggableElementBase };\r\n\r\ninterface HTMLEDraggableElement extends HTMLElement {\r\n    selected: boolean;\r\n    dragged: boolean;\r\n    type: string;\r\n    dragovered: boolean;\r\n    data: object | null;\r\n\r\n    getReference(): HTMLEDraggableElement;\r\n    readonly referee: HTMLEDraggableElement | null;\r\n    readonly references: HTMLEDraggableElement[];\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-draggable\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"selected\", type: \"boolean\"},\r\n    {name: \"dragged\", type: \"boolean\"},\r\n    {name: \"dragovered\", type: \"boolean\"},\r\n    {name: \"disabled\", type: \"boolean\"},\r\n    {name: \"type\", type: \"string\"},\r\n    {name: \"data\", type: \"json\"}\r\n])\r\nclass HTMLEDraggableElementBase extends HTMLElement implements HTMLEDraggableElement {\r\n    \r\n    public selected!: boolean;\r\n    public dragovered!: boolean;\r\n    public dragged!: boolean;\r\n    public disabled!: boolean;\r\n\r\n    public type!: string;\r\n    public data!: object | null;\r\n\r\n    private _referee: HTMLEDraggableElementBase | null;\r\n    public readonly references: HTMLEDraggableElementBase[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: inline-block;\r\n                    padding: 3px 4px;\r\n                    cursor: pointer;\r\n                    white-space: nowrap;\r\n                    border-radius: 4px;\r\n                    border: 1px solid black;\r\n                    user-select: none;\r\n                }\r\n\r\n                :host([disabled]) {\r\n                    pointer-events: none;\r\n                    color: gray;\r\n                    border-color: gray;\r\n                }\r\n\r\n                :host([selected]:active) {\r\n                    cursor: grabbing;\r\n                }\r\n                \r\n                :host([selected]) {\r\n                    cursor: grab;\r\n                    font-weight: bold;\r\n                    outline: 1px auto black;\r\n                }\r\n\r\n                :host([dragovered]) {\r\n                    border-style: dotted;\r\n                }\r\n                \r\n                [part=\"container\"] {\r\n                    display: flex;\r\n                    align-items: center;\r\n                }\r\n            </style>\r\n            <div part=\"container\">\r\n                <slot>&nbsp;</slot>\r\n            </div>\r\n        `);\r\n        this.references = [];\r\n        this._referee = null;\r\n    }\r\n\r\n    public get referee(): HTMLEDraggableElementBase | null {\r\n        return this._referee;\r\n    }\r\n    \r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n        this.draggable = true;\r\n    }\r\n\r\n    public disconnectedCallback() {\r\n        if (this.referee) {\r\n            const thisRefIndex = this.referee.references.indexOf(this);\r\n            if (thisRefIndex > -1) {\r\n                this.referee.references.splice(thisRefIndex, 1);\r\n                const refereeId = this.referee.id;\r\n                if (refereeId) {\r\n                    this.referee.references.slice(thisRefIndex).forEach((reference, index) => {\r\n                        forAllSubtreeElements(reference, (element) => {\r\n                            if (element.id) {\r\n                                element.id = `${element.id}-${thisRefIndex + index + 1}`;\r\n                            }\r\n                        });\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public getReference(): HTMLEDraggableElementBase {\r\n        const reference = this.cloneNode(true) as HTMLEDraggableElementBase;\r\n        const referenceIdx = this.references.push(reference);\r\n        reference._referee = this;\r\n        if (this.id) {\r\n            forAllSubtreeElements(reference, (element) => {\r\n                if (element.id) {\r\n                    element.id = `${element.id}-${referenceIdx}`;\r\n                }\r\n            });\r\n        }\r\n        return reference;\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-draggable\": HTMLEDraggableElement,\r\n    }\r\n}","import { RegisterCustomHTMLElement, bindShadowRoot, isTagElement, GenerateAttributeAccessors } from \"../../HTMLElement\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\n\r\nexport { HTMLEDragzoneElement };\r\nexport { HTMLEDragzoneElementBase };\r\n\r\ninterface HTMLEDragzoneElement extends HTMLElement {\r\n    draggables: HTMLEDraggableElement[];\r\n    selectedDraggables: HTMLEDraggableElement[];\r\n    disabled: boolean;\r\n    selectDraggable(draggable: HTMLEDraggableElement): void;\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void;\r\n    clearSelection(): void;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-dragzone\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"disabled\", type: \"boolean\"},\r\n])\r\nclass HTMLEDragzoneElementBase extends HTMLElement implements HTMLEDragzoneElement {\r\n\r\n    public disabled!: boolean;\r\n\r\n    public draggables: HTMLEDraggableElement[];\r\n    public selectedDraggables: HTMLEDraggableElement[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n                }\r\n\r\n                :host([disabled]) {\r\n                    pointer-events: none;\r\n                }\r\n\r\n                [part~=\"container\"]:empty {\r\n                    display: none !important;\r\n                }\r\n\r\n                [part~=\"container\"] {\r\n                    position: relative;\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                    padding: 2px;\r\n                }\r\n\r\n                ::slotted(e-draggable:not(:only-child)) {\r\n                    margin-top: 2px;\r\n                    margin-bottom: 2px;\r\n                }\r\n            </style>\r\n            <div part=\"container\">\r\n                <slot></slot>\r\n            </div>\r\n        `);\r\n        this.draggables = [];\r\n        this.selectedDraggables = [];\r\n    }\r\n\r\n    public selectDraggable(draggable: HTMLEDraggableElement): void {\r\n        draggable.selected = true;\r\n        if (!this.selectedDraggables.includes(draggable)) {\r\n            this.selectedDraggables.push(draggable);\r\n        }\r\n    }\r\n\r\n    public unselectDraggable(draggable: HTMLEDraggableElement): void {\r\n        let index = this.selectedDraggables.indexOf(draggable);\r\n        if (index > -1) {\r\n            draggable.selected = false;\r\n            this.selectedDraggables.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    public clearSelection(): void {\r\n        this.selectedDraggables.forEach((draggable) => {\r\n            draggable.selected = false;\r\n        });\r\n        this.selectedDraggables = [];\r\n    }\r\n    \r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const draggables = slot.assignedElements().filter(\r\n                    elem => isTagElement(\"e-draggable\", elem)\r\n                ) as HTMLEDraggableElement[];\r\n                this.draggables = draggables;\r\n                this.draggables.forEach((draggable) => {\r\n                    draggable.draggable = true;\r\n                });\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Escape\":\r\n                    this.clearSelection();\r\n                    this.focus();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragstart\", (event: DragEvent) => {\r\n            let target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                this.selectedDraggables.forEach((thisSelectedDraggable) => {\r\n                    thisSelectedDraggable.dragged = true;\r\n                });\r\n                let dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    dataTransfer.effectAllowed = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", this.id);\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"dragend\", (event: DragEvent) => {\r\n            let target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                let thisDraggedDraggables = this.draggables.filter(draggable => draggable.dragged);\r\n                thisDraggedDraggables.forEach((thisDraggedDraggable) => {\r\n                    thisDraggedDraggable.dragged = false;\r\n                });\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            let relatedTarget = event.relatedTarget as any;\r\n            if (!this.contains(relatedTarget)) {\r\n                this.clearSelection();\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            if (event.button === 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        if (!target.selected) {\r\n                            this.clearSelection();\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                    else if (event.ctrlKey) {\r\n                        (!target.selected) ?\r\n                            this.selectDraggable(target) :\r\n                            this.unselectDraggable(target);\r\n                    }\r\n                    else if (event.shiftKey) {\r\n                        if (this.selectedDraggables.length > 0) {\r\n                            let targetIndex = this.draggables.indexOf(target);\r\n                            let firstIndex = this.draggables.indexOf(this.selectedDraggables[0]);\r\n                            let direction = Math.sign(targetIndex - firstIndex);\r\n                            let fromIndex = (direction > 0) ? 0 : this.draggables.length - 1;\r\n                            let toIndex = (direction > 0) ? this.draggables.length - 1 : 0;\r\n                            let startRangeIndex = (direction > 0) ? firstIndex : targetIndex;\r\n                            let endRangeIndex = (direction > 0) ? targetIndex : firstIndex;\r\n                            for (let index = fromIndex; index !== (toIndex + direction); index += direction) {\r\n                                (index >= startRangeIndex && index <= endRangeIndex) ? \r\n                                    this.selectDraggable(this.draggables[index]) :\r\n                                    this.unselectDraggable(this.draggables[index]);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.clearSelection();\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mouseup\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            if (event.button === 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        this.draggables.forEach((thisDraggable) => {\r\n                            if (thisDraggable !== target) {\r\n                                this.unselectDraggable(thisDraggable);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dragzone\": HTMLEDragzoneElement,\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot, isTagElement } from \"../../HTMLElement\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\nimport { HTMLEDragzoneElement } from \"./Dragzone\";\r\n\r\nexport { EDataChangeEvent };\r\nexport { HTMLEDropzoneElement };\r\nexport { HTMLEDropzoneElementBase };\r\nexport { DropzoneDataBase };\r\nexport { DropzoneData };\r\n\r\ninterface HTMLEDropzoneElement extends HTMLElement {\r\n    selectedDraggables: HTMLEDraggableElement[]\r\n    draggables: HTMLEDraggableElement[];\r\n    dragovered: DropzoneDragoveredType | null;\r\n    name: string;\r\n    type: string;\r\n    multiple: boolean;\r\n    disabled: boolean;\r\n    placeholder: string;\r\n    droptest: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => void) | null;\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): void;\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean): void;\r\n    selectDraggable(draggable: HTMLEDraggableElement): void;\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void;\r\n    clearSelection(): void;\r\n}\r\n\r\ntype DropzoneDragoveredType = \"self\" | \"draggable\" | \"appendarea\";\r\n\r\ntype EDataChangeEvent = CustomEvent<{\r\n    action: \"insert\" | \"remove\";\r\n    draggables: HTMLEDraggableElement[];\r\n    position: number;\r\n}>;\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-dropzone\",\r\n    observedAttributes: [\"placeholder\", \"label\"]\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"dragovered\", type: \"string\"},\r\n    {name: \"placeholder\", type: \"string\"},\r\n    {name: \"disabled\", type: \"boolean\"},\r\n    {name: \"multiple\", type: \"boolean\"},\r\n    {name: \"input\", type: \"string\"},\r\n    {name: \"label\", type: \"string\"},\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"type\", type: \"string\"},\r\n])\r\nclass HTMLEDropzoneElementBase extends HTMLElement implements HTMLEDropzoneElement {\r\n    \r\n    public dragovered!: DropzoneDragoveredType | null;\r\n    public placeholder!: string;\r\n    public input!: string;\r\n    public multiple!: boolean;\r\n    public disabled!: boolean;\r\n    public name!: string;\r\n    public type!: string;\r\n\r\n    public droptest!: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => boolean) | null;\r\n    public value: any;\r\n\r\n    public draggables: HTMLEDraggableElement[];\r\n    public selectedDraggables: HTMLEDraggableElement[];\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        bindShadowRoot(this, /*html*/`\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n                    border: 1px dashed gray;\r\n                }\r\n\r\n                :host([disabled]) {\r\n                    pointer-events: none;\r\n                    opacity: 0.3;\r\n                }\r\n\r\n                :host(:empty) [part~=\"container\"] {\r\n                    display: none !important;\r\n                }\r\n\r\n                [part~=\"container\"] {\r\n                    position: relative;\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                    padding: 2px;\r\n                }\r\n\r\n                ::slotted(e-draggable:not(:only-child)) {\r\n                    margin-top: 2px;\r\n                    margin-bottom: 2px;\r\n                }\r\n\r\n                :host(:not([multiple]):not(:empty)) [part=\"appendarea\"],\r\n                :host(:not(:empty):not([dragovered])) [part=\"appendarea\"] {\r\n                    display: none !important;\r\n                }\r\n\r\n                [part=\"appendarea\"] {\r\n                    display: block;\r\n                    margin: 2px;\r\n                    border-radius: 4px;\r\n                    border: 1px dotted black;\r\n                }\r\n\r\n                :host(:not([dragovered=\"appendarea\"])) [part=\"appendarea\"] {\r\n                    border-color: transparent;\r\n                }\r\n                \r\n                [part=\"placeholder\"] {\r\n                    display: inline-block;\r\n                    color: grey;\r\n                    pointer-events: none;\r\n                    user-select: none;\r\n                }\r\n            </style>\r\n            <div part=\"container\">\r\n                <slot></slot>\r\n            </div>\r\n            <div part=\"appendarea\">\r\n                <span part=\"placeholder\">&nbsp;</span>\r\n            </div>\r\n            `\r\n        );\r\n        this.draggables = [];\r\n        this.selectedDraggables = [];\r\n        this.droptest = null;\r\n    }\r\n\r\n    public selectDraggable(draggable: HTMLEDraggableElement): void {\r\n        draggable.selected = true;\r\n        if (!this.selectedDraggables.includes(draggable)) {\r\n            this.selectedDraggables.push(draggable);\r\n        }\r\n    }\r\n\r\n    public unselectDraggable(draggable: HTMLEDraggableElement): void {\r\n        let index = this.selectedDraggables.indexOf(draggable);\r\n        if (index > -1) {\r\n            draggable.selected = false;\r\n            this.selectedDraggables.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    public clearSelection(): void {\r\n        this.selectedDraggables.forEach((draggable) => {\r\n            draggable.selected = false;\r\n        });\r\n        this.selectedDraggables = [];\r\n    }\r\n    \r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const draggables = slot.assignedElements().filter(\r\n                    elem => isTagElement(\"e-draggable\", elem)\r\n                ) as HTMLEDraggableElement[];\r\n                this.draggables = draggables;\r\n                this.draggables.forEach((draggable) => {\r\n                    draggable.draggable = false;\r\n                });\r\n            });\r\n        }\r\n\r\n        const appendAreaPart = this.shadowRoot!.querySelector<HTMLDivElement>(\"[part='appendarea']\");\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Delete\":\r\n                    if (this == event.target) {\r\n                        this.removeDraggables();\r\n                    }\r\n                    else {\r\n                        this.removeDraggables(draggable => draggable.selected);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"Escape\":\r\n                    this.clearSelection();\r\n                    this.focus();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            let relatedTarget = event.relatedTarget as any;\r\n            if (!this.contains(relatedTarget)) {\r\n                this.clearSelection();\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            if (event.button === 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        if (!target.selected) {\r\n                            this.clearSelection();\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                    else if (event.ctrlKey) {\r\n                        (!target.selected) ?\r\n                            this.selectDraggable(target) :\r\n                            this.unselectDraggable(target);\r\n                    }\r\n                    else if (event.shiftKey) {\r\n                        if (this.selectedDraggables.length > 0) {\r\n                            let targetIndex = this.draggables.indexOf(target);\r\n                            let firstIndex = this.draggables.indexOf(this.selectedDraggables[0]);\r\n                            let direction = Math.sign(targetIndex - firstIndex);\r\n                            let fromIndex = (direction > 0) ? 0 : this.draggables.length - 1;\r\n                            let toIndex = (direction > 0) ? this.draggables.length - 1 : 0;\r\n                            let startRangeIndex = (direction > 0) ? firstIndex : targetIndex;\r\n                            let endRangeIndex = (direction > 0) ? targetIndex : firstIndex;\r\n                            for (let index = fromIndex; index !== (toIndex + direction); index += direction) {\r\n                                (index >= startRangeIndex && index <= endRangeIndex) ? \r\n                                    this.selectDraggable(this.draggables[index]) :\r\n                                    this.unselectDraggable(this.draggables[index]);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.clearSelection();\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mouseup\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            if (event.button === 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        this.draggables.forEach((thisDraggable) => {\r\n                            if (thisDraggable !== target) {\r\n                                this.unselectDraggable(thisDraggable);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragover\", (event: DragEvent) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragover\", (event) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragenter\", (event: DragEvent) => {\r\n            let target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                target.dragovered = true;\r\n                this.dragovered = \"draggable\";\r\n            }\r\n            else {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragenter\", (event) => {\r\n            let target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"appendarea\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event: DragEvent) => {\r\n            let relatedTarget = event.relatedTarget as any;\r\n            let target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                if (target == this) {\r\n                    if (appendAreaPart) {\r\n                        this.dragovered = \"self\";\r\n                    }\r\n                    if (!this.draggables.includes(relatedTarget)) {\r\n                        this.dragovered = null;\r\n                    }\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                }\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragleave\", (event) => {\r\n            let target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n        \r\n        this.addEventListener(\"drop\", (event) => {\r\n            let target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                let dropIndex = this.draggables.length;\r\n                if (target == this) {\r\n                    this.dragovered = null;\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                    dropIndex = this.draggables.indexOf(target);\r\n                }\r\n\r\n                let dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    let dragzoneId = dataTransfer.getData(\"text/plain\");\r\n                    let dragzone = document.getElementById(dragzoneId) as HTMLEDragzoneElement;\r\n                    if (dragzone) {\r\n                        let selectedDraggables = dragzone.selectedDraggables;\r\n                        if (selectedDraggables) {\r\n                            selectedDraggables.forEach((selectedDraggable) => {\r\n                                selectedDraggable.dragged = false;\r\n                            });\r\n                            dragzone.clearSelection();\r\n                            this.addDraggables(selectedDraggables, dropIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.dragovered = null;\r\n            event.preventDefault();\r\n        });\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (newValue !== oldValue) {\r\n            switch (name) {\r\n                case \"placeholder\":\r\n                    if (oldValue !== newValue) {\r\n                        const placeholderPart = this.shadowRoot?.querySelector(\"[part~=placeholder]\");\r\n                        if (placeholderPart) {\r\n                            placeholderPart.textContent = newValue;\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public addDraggables(draggables: HTMLEDraggableElement[], position: number): HTMLEDraggableElement[] | null {\r\n        if (draggables.length > 0) {\r\n            let dataTransferSuccess = true;\r\n            if (this.droptest) {\r\n                dataTransferSuccess = this.droptest(this, draggables);\r\n            }\r\n            \r\n            let newDraggables: HTMLEDraggableElement[] = [];\r\n            let insertionPosition = -1;\r\n            if (dataTransferSuccess) {\r\n                if (this.multiple) {\r\n                    draggables.forEach((draggable) => {\r\n                        let newDraggable = draggable.getReference();\r\n                        if (position > -1 && position < this.draggables.length) {\r\n                            this.draggables[position].insertAdjacentElement(\"beforebegin\", newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? position : insertionPosition;\r\n                        }\r\n                        else {\r\n                            this.appendChild(newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? this.draggables.length - 1 : insertionPosition;\r\n                        }\r\n                        newDraggables.push(newDraggable);\r\n                    });\r\n                }\r\n                else {\r\n                    let newDraggable = draggables[0].getReference();\r\n                    if (this.draggables.length > 0) {\r\n                        this.replaceChild(newDraggable, this.draggables[0]);\r\n                    }\r\n                    else {\r\n                        this.appendChild(newDraggable);\r\n                    }\r\n                    newDraggables.push(newDraggable);\r\n                    insertionPosition = 0;\r\n                }\r\n            }\r\n            \r\n            const slot = this.shadowRoot?.querySelector(\"slot\");\r\n            if (slot) {\r\n                slot.addEventListener(\"slotchange\", () => {\r\n                    this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                        bubbles: true,\r\n                        detail: {\r\n                            action: \"insert\",\r\n                            draggables: newDraggables,\r\n                            position: insertionPosition\r\n                        }\r\n                    }));\r\n                }, {once: true});\r\n            }\r\n            return newDraggables;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean = () => true) {\r\n        let toRemove = this.draggables.filter(\r\n            (value: HTMLEDraggableElement, index: number) => {\r\n                return predicate(value, index);\r\n            }\r\n        );\r\n        let atPosition = this.draggables.indexOf(toRemove[0]);\r\n        toRemove.forEach((draggable) => {\r\n            draggable.remove(); \r\n        });\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                    bubbles: true,\r\n                    detail: {\r\n                        action: \"remove\",\r\n                        draggables: toRemove,\r\n                        position: atPosition\r\n                    }\r\n                }));\r\n            }, {once: true});\r\n        }\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dropzone\": HTMLEDropzoneElement,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_datachange\": EDataChangeEvent,\r\n    }\r\n}\r\n\r\ninterface DropzoneData {\r\n    getData(): object | null;\r\n}\r\n\r\ninterface DropzoneDataConstructor {\r\n    readonly prototype: DropzoneData;\r\n    new(dropzone: HTMLEDropzoneElement): DropzoneData;\r\n}\r\n\r\nclass DropzoneDataBase {\r\n    private _dropzone: HTMLEDropzoneElement;\r\n\r\n    constructor(dropzone: HTMLEDropzoneElement) {\r\n        this._dropzone = dropzone;\r\n    }\r\n\r\n    public getData(): object | null {\r\n        const dropzoneData = \r\n            this._dropzone.multiple ? this._dropzone.draggables.map(draggable => draggable.data) :\r\n            this._dropzone.draggables.length > 0 ? this._dropzone.draggables[0].data : null;\r\n\r\n        const childDropzones = Array.from(this._dropzone.querySelectorAll(\"e-dropzone\")).filter(\r\n            dropzone => dropzone.parentElement!.closest(\"e-dropzone\") === this._dropzone\r\n        );\r\n\r\n        childDropzones.forEach((childDropzone) => {\r\n            const childDropzoneData = new DropzoneDataBase(childDropzone).getData();\r\n            Object.assign(dropzoneData, {\r\n                ...childDropzoneData\r\n            });\r\n        });\r\n\r\n        return dropzoneData;\r\n    }\r\n}\r\n\r\nvar DropzoneData: DropzoneDataConstructor = DropzoneDataBase;","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot, isTagElement } from \"../../HTMLElement\";\r\n\r\nexport { HTMLEDialogElement };\r\nexport { HTMLEDialogElementBase };\r\n\r\ntype EDialogElementType = \"confirm\" | \"alert\";\r\n\r\ninterface HTMLEDialogElement extends HTMLElement {\r\n    name: string;\r\n    type: EDialogElementType;\r\n    open(): void;\r\n    close(): void;\r\n    cancel(): void;\r\n    confirm(): void;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-dialog\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"type\", type: \"string\"},\r\n])\r\nclass HTMLEDialogElementBase extends HTMLElement implements HTMLEDialogElement {\r\n\r\n    public name!: string;\r\n    public type!: EDialogElementType;\r\n\r\n    private _closeButton: HTMLButtonElement;\r\n    private _cancelButton: HTMLButtonElement;\r\n    private _confirmButton: HTMLButtonElement;\r\n    private _okButton: HTMLButtonElement;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: inline-block;\r\n\r\n                    padding: 6px;\r\n                    background-color: white;\r\n\r\n                    -webkit-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                    -moz-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                    box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                }\r\n\r\n                button {\r\n                    cursor: pointer;\r\n                }\r\n\r\n                [part~=\"actions\"] {\r\n                    display: flex;\r\n                    flex-direction: row;\r\n                    justify-content: flex-end;\r\n                }\r\n\r\n                [part~=\"header\"] {\r\n                    display: flex;\r\n                    flex-direction: row;\r\n                    justify-content: flex-end;\r\n                }\r\n\r\n                [part~=\"button\"]:not(:first-child) {\r\n                    margin-left: 4px;\r\n                }\r\n\r\n                :host([type=\"confirm\"]) [part~=\"ok-button\"] {\r\n                    display: none !important;\r\n                }\r\n\r\n                :host([type=\"alert\"]) [part~=\"cancel-button\"],\r\n                :host([type=\"alert\"]) [part~=\"confirm-button\"] {\r\n                    display: none !important;\r\n                }\r\n            </style>\r\n            <div part=\"header\">\r\n                <button type=\"button\" tabindex=\"0\" part=\"button close-button\">x</button>\r\n            </div>\r\n            <hr part=\"separator\"/>\r\n            <div part=\"body\">\r\n                <slot></slot>\r\n            </div>\r\n            <hr part=\"separator\"/>\r\n            <div part=\"actions\">\r\n                <button type=\"button\" tabindex=\"0\" part=\"button cancel-button\">Cancel</button>\r\n                <button type=\"button\" tabindex=\"0\" part=\"button confirm-button\">Confirm</button>\r\n                <button type=\"button\" tabindex=\"0\" part=\"button ok-button\">OK</button>\r\n            </div>\r\n        `);\r\n\r\n        this._closeButton = this.shadowRoot!.querySelector(\"[part~='close-button']\")!;\r\n        this._cancelButton = this.shadowRoot!.querySelector(\"[part~='cancel-button']\")!;\r\n        this._confirmButton = this.shadowRoot!.querySelector(\"[part~='confirm-button']\")!;\r\n        this._okButton = this.shadowRoot!.querySelector(\"[part~='ok-button']\")!;\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        this.shadowRoot!.addEventListener(\"mousedown\", (event) => {\r\n            let target = event.target as Element;\r\n            if (target === this._closeButton || target === this._cancelButton) {\r\n                this.cancel();\r\n            }\r\n            else if (target === this._confirmButton || target === this._okButton) {\r\n                this.confirm();\r\n            }\r\n        });\r\n    }\r\n\r\n    public open(): void {\r\n        this.dispatchEvent(new CustomEvent(\"e_open\", {bubbles: true}));\r\n    }\r\n\r\n    public close(): void {\r\n        this.dispatchEvent(new CustomEvent(\"e_close\", {bubbles: true}));\r\n    }\r\n\r\n    public cancel(): void {\r\n        this.dispatchEvent(new CustomEvent(\"e_cancel\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n\r\n    public confirm(): void {\r\n        this.dispatchEvent(new CustomEvent(\"e_confirm\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dialog\": HTMLEDialogElement,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_open\": Event,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_close\": Event,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_cancel\": Event,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_confirm\": Event,\r\n    }\r\n}","import { isTagElement } from \"../HTMLElement\";\r\n\r\nexport { FormState };\r\nexport { getFormState };\r\nexport { setFormState };\r\n\r\ninterface FormState {\r\n    [name: string]: {\r\n        value: string | number | boolean | null;\r\n        _control?: string;\r\n    }\r\n};\r\n\r\nconst getFormState = (form: HTMLFormElement) => {\r\n    const elements = Array.from(form.elements);\r\n    const state: FormState = {};\r\n    elements.forEach((element) => {\r\n        if (isTagElement(\"input\", element)) {\r\n            if (element.type === \"radio\") {\r\n                if (typeof state[element.name] === \"undefined\") {\r\n                    state[element.name] = {\r\n                        value: null,\r\n                        _control: element.type\r\n                    };\r\n                }\r\n                if (element.checked) {\r\n                    state[element.name] = {\r\n                        value: element.value,\r\n                        _control: element.type\r\n                    };\r\n                }\r\n            }\r\n            else if (element.type === \"checkbox\") {\r\n                state[element.name] = {\r\n                    value: element.checked,\r\n                    _control: element.type\r\n                };\r\n            }\r\n            else if (element.type === \"number\") {\r\n                let floatValue = parseFloat(element.value);\r\n                state[element.name] = {\r\n                    value: !isNaN(floatValue) ? floatValue : null,\r\n                    _control: element.type\r\n                };\r\n            }\r\n            else if (element.type === \"file\") {\r\n                let files = element.files;\r\n                if (files !== null) {\r\n                    state[element.name] = {\r\n                        value: files[0].name,\r\n                        _control: element.type\r\n                    };\r\n                }\r\n            }\r\n            else {\r\n                state[element.name] = {\r\n                    value: (element.value !== \"\") ? element.value : null,\r\n                    _control: element.type\r\n                };\r\n            }\r\n        }\r\n        else if (isTagElement(\"select\", element) || isTagElement(\"textarea\", element)) {\r\n            state[element.name] = {\r\n                value: (element.value !== \"\") ? element.value : null,\r\n                _control: element.type\r\n            };\r\n        }\r\n    });\r\n\r\n    return state;\r\n}\r\n\r\nconst setFormState = (form: HTMLFormElement, state: FormState) => {\r\n    const elements = Array.from(form.elements);\r\n    const names = Object.keys(state);\r\n    names.forEach((name) => {\r\n        let namedElements = elements.filter((element) => (element as any).name === name);\r\n        namedElements.forEach((element) => {\r\n            let stateValue = state[name].value;\r\n            if (isTagElement(\"input\", element)) {\r\n                if (element.type === \"radio\") {\r\n                    element.checked = (stateValue !== null && element.value === stateValue.toString());\r\n                }\r\n                else if (element.type === \"checkbox\") {\r\n                    element.checked = !!stateValue;\r\n                }\r\n                else if (element.type === \"number\") {\r\n                    element.value = (stateValue !== null) ? stateValue.toString() : \"\";\r\n                }\r\n                else {\r\n                    element.value = (stateValue !== null) ? stateValue.toString() : \"\";\r\n                }\r\n            }\r\n            else if (isTagElement(\"select\", element) || isTagElement(\"textarea\", element)) {\r\n                element.value = (stateValue !== null) ? stateValue.toString() : \"\";\r\n            }\r\n        });\r\n    });\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../HTMLElement\";\r\n\r\nexport { HTMLEHeightSashElement };\r\nexport { HTMLEHeightSashElementBase };\r\n\r\ntype EHeightSashDirection = \"top\" | \"bottom\";\r\n\r\ninterface HTMLEHeightSashElement extends HTMLElement {\r\n    controls: string;\r\n    growdir: EHeightSashDirection;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-hsash\",\r\n    observedAttributes: [\"controls\"]\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"controls\", type: \"string\"},\r\n    {name: \"growdir\", type: \"string\"},\r\n])\r\nclass HTMLEHeightSashElementBase extends HTMLElement implements HTMLEHeightSashElement {\r\n\r\n    public controls!: string;\r\n    public growdir!: EHeightSashDirection;\r\n\r\n    private _target: HTMLElement | null;\r\n    private _targetStyle: CSSStyleDeclaration | null;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n                    z-index: 1;\r\n\r\n                    height: 4px;\r\n                    margin-top: -2px;\r\n                    margin-bottom: -2px;\r\n                    background-color: rgb(0, 128, 255);\r\n                    cursor: ns-resize;\r\n\r\n                    transition-property: opacity;\r\n                    transition-delay: 0.2s;\r\n                    transition-duration: 0.2s;\r\n                    transition-timing-function: ease-out;\r\n                    opacity: 0;\r\n                }\r\n\r\n                :host(:active),\r\n                :host(:hover) {\r\n                    opacity: 1;\r\n                }\r\n            </style>\r\n        `);\r\n        this._target = null;\r\n        this._targetStyle = null;\r\n    }\r\n\r\n    public connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        let onPointerMove = (event: PointerEvent) => {\r\n            if (this._target && this._targetStyle) {\r\n                let height = parseFloat(this._targetStyle.getPropertyValue(\"height\"));\r\n                let newHeight = Math.trunc(height + ((this.growdir === \"top\") ? -1 : 1) * event.movementY);\r\n                this._target.style.setProperty(\"height\", `${newHeight}px`);\r\n                this.dispatchEvent(new CustomEvent(\"e_resize\"));\r\n            }\r\n        };\r\n\r\n        this.addEventListener(\"pointerdown\", (event: PointerEvent) => {\r\n            const target = document.getElementById(this.controls);\r\n            if (target && this._target !== target) {\r\n                this._target = target;\r\n                this._targetStyle = window.getComputedStyle(target);\r\n            }\r\n            this.setPointerCapture(event.pointerId);\r\n            this.addEventListener(\"pointermove\", onPointerMove);\r\n            this.addEventListener(\"pointerup\", (event) => {\r\n                this.removeEventListener(\"pointermove\", onPointerMove);\r\n                this.releasePointerCapture(event.pointerId);\r\n            });\r\n        });\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (newValue !== oldValue) {\r\n            switch (name) {\r\n                case \"controls\":\r\n                    if (oldValue !== newValue) {\r\n                        const target = document.getElementById(this.controls);\r\n                        if (target) {\r\n                            this._target = target;\r\n                            this._targetStyle = window.getComputedStyle(target);\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-hsash\": HTMLEHeightSashElement,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_resize\": CustomEvent,\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors } from \"../HTMLElement\";\r\n\r\nexport { HTMLEImportElement };\r\nexport { HTMLEImportElementBase };\r\n\r\ninterface HTMLEImportElement extends HTMLElement {\r\n    src: string;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-import\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"src\", type: \"string\"}\r\n])\r\nclass HTMLEImportElementBase extends HTMLElement {\r\n\r\n    public src!: string;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n    \r\n    public connectedCallback(): void {\r\n        const importRequest = async (src: string) => {\r\n            this.outerHTML = await fetch(src).then((response: Response) => {\r\n                if (response.ok) {\r\n                    return response.text();\r\n                }\r\n                else {\r\n                    throw new Error(response.statusText);\r\n                }\r\n            });\r\n            this.dispatchEvent(new CustomEvent(\"e_load\"));\r\n        }\r\n        if (this.src) {\r\n            importRequest(this.src);\r\n        }\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-import\": HTMLEImportElement,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_load\": CustomEvent\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../HTMLElement\";\r\n\r\nexport { HTMLELoaderElement };\r\nexport { HTMLELoaderElementBase };\r\n\r\ntype LoaderType = \"bar\" | \"circle\";\r\n\r\ninterface HTMLELoaderElement extends HTMLElement {\r\n    type: LoaderType;\r\n    promise: Promise<any> | null;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-loader\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"type\", type: \"string\"}\r\n])\r\nclass HTMLELoaderElementBase extends HTMLElement implements HTMLELoaderElement {\r\n\r\n    public type!: LoaderType;\r\n    private _promise: Promise<any> | null;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: inline-block;\r\n                }\r\n                \r\n                :host([type=\"bar\"]) {\r\n                    display: inline-block;\r\n                    width: 64px;\r\n                }\r\n\r\n                :host([type]:not([type=\"circle\"])) [part~=\"circle\"] {\r\n                    display: none !important;\r\n                }\r\n                \r\n                :host(:not([type=\"bar\"])) [part~=\"bar\"] {\r\n                    display: none !important;\r\n                }\r\n\r\n                [part~=\"circle\"] {\r\n                    position: relative;\r\n                    width: 12px;\r\n                    height: 12px;\r\n                    border-top: 4px solid var(--loader-color, rgb(0, 128, 255));\r\n                    border-right: 4px solid var(--loader-color, rgb(0, 128, 255));\r\n                    border-left: 4px solid transparent;\r\n                    border-bottom: 4px solid transparent;\r\n                    border-radius: 50%;\r\n                    animation-duration: 1s;\r\n                    animation-name: circle;\r\n                    animation-timing-function: linear;\r\n                    animation-iteration-count: infinite;\r\n                }\r\n\r\n                @keyframes circle {\r\n                    0% {\r\n                        transform: rotate(0);\r\n                    }\r\n                    100% {\r\n                        transform: rotate(360deg);\r\n                    }\r\n                }\r\n\r\n                [part~=\"bar\"] {\r\n                    display: block;\r\n                    position: relative;\r\n                    overflow: hidden;\r\n                }\r\n\r\n                [part~=\"slider\"] {\r\n                    position: relative;\r\n                    display: flex;\r\n                    will-change: transform;\r\n                    animation-duration: 1s;\r\n                    animation-name: slider;\r\n                    animation-timing-function: linear;\r\n                    animation-iteration-count: infinite;\r\n                }\r\n\r\n                [part~=\"cursor\"] {\r\n                    position: relative;\r\n                    display: inline-block;\r\n                    width: 32px;\r\n                    height: 4px;\r\n                    background-color: var(--loader-color, rgb(0, 128, 255));\r\n                    border-radius: 4px;\r\n\r\n                    will-change: transform;\r\n                    animation-duration: 1s;\r\n                    animation-name: cursor;\r\n                    animation-timing-function: linear;\r\n                    animation-iteration-count: infinite;\r\n                }\r\n\r\n                @keyframes slider {\r\n                    0% {\r\n                        transform: translateX(0);\r\n                    }\r\n                    100% {\r\n                        transform: translateX(100%);\r\n                    }\r\n                }\r\n\r\n                @keyframes cursor {\r\n                    0% {\r\n                        transform: translateX(-100%);\r\n                    }\r\n                    100% {\r\n                        transform: translateX(100%);\r\n                    }\r\n                }\r\n            </style>\r\n            <div part=\"bar\">\r\n                <div part=\"slider\">\r\n                    <div part=\"cursor\"></div>\r\n                </div>\r\n            </div>\r\n            <div part=\"circle\"></div>\r\n        `);\r\n        this._promise = null;\r\n    }\r\n\r\n    public set promise(promise: Promise<any> | null) {\r\n        if (promise) {\r\n            promise.finally(() => {\r\n                this.remove();\r\n            });\r\n        }\r\n        this._promise = promise;\r\n    }\r\n\r\n    public get promise(): Promise<any> | null {\r\n        return this._promise;\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-loader\": HTMLELoaderElement,\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../HTMLElement\";\r\n\r\nexport { PaletteElement };\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: 'e-palette'\r\n})\r\n@GenerateAttributeAccessors([{name: 'colors', type: 'json'}])\r\nclass PaletteElement extends HTMLElement {\r\n\r\n    public colors!: Array<string>;\r\n\r\n    constructor() {\r\n        super();\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n                    content: contains;\r\n                }\r\n\r\n               :host #container {\r\n                    display: grid;\r\n                    grid-template-cols: repeat(5, 1fr);\r\n                    grid-auto-rows: 16px;\r\n                }\r\n            </style>\r\n            <div id=\"container\">\r\n            </div>\r\n        `);\r\n    }\r\n\r\n    public connectedCallback() {\r\n                \r\n        const colors = this.colors;\r\n        if (colors.length > 0) {\r\n            this.shadowRoot!.querySelector('#container')!.append(\r\n                ...colors.map((color: string) => {\r\n                    const div = document.createElement('div');\r\n                    div.setAttribute('style', `background-color: ${color}`);                    \r\n                    return div;\r\n                })\r\n            );\r\n        }\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../HTMLElement\";\r\n\r\nexport { HTMLEWidthSashElement };\r\nexport { HTMLEWidthSashElementBase };\r\n\r\ntype EWidthSashDirection = \"left\" | \"right\";\r\n\r\ninterface HTMLEWidthSashElement extends HTMLElement {\r\n    controls: string;\r\n    growdir: EWidthSashDirection;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-wsash\",\r\n    observedAttributes: [\"controls\"]\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"controls\", type: \"string\"},\r\n    {name: \"growdir\", type: \"string\"},\r\n])\r\nclass HTMLEWidthSashElementBase extends HTMLElement implements HTMLEWidthSashElement {\r\n\r\n    public controls!: string;\r\n    public growdir!: EWidthSashDirection;\r\n\r\n    private _target: HTMLElement | null;\r\n    private _targetStyle: CSSStyleDeclaration | null;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n                    z-index: 1;\r\n\r\n                    width: 4px;\r\n                    margin-left: -2px;\r\n                    margin-right: -2px;\r\n                    background-color: rgb(0, 128, 255);\r\n                    cursor: ew-resize;\r\n\r\n                    transition-property: opacity;\r\n                    transition-delay: 0.2s;\r\n                    transition-duration: 0.2s;\r\n                    transition-timing-function: ease-out;\r\n                    opacity: 0;\r\n                }\r\n\r\n                :host(:active),\r\n                :host(:hover) {\r\n                    opacity: 1;\r\n                }\r\n            </style>\r\n        `);\r\n        this._target = null;\r\n        this._targetStyle = null;\r\n    }\r\n\r\n    public connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        let onPointerMove = (event: PointerEvent) => {\r\n            if (this._target && this._targetStyle) {\r\n                let width = parseFloat(this._targetStyle.getPropertyValue(\"width\"));\r\n                let newWidth = Math.trunc(width + ((this.growdir === \"left\") ? -1 : 1) * event.movementX);\r\n                this._target.style.setProperty(\"width\", `${newWidth}px`);\r\n                this.dispatchEvent(new CustomEvent(\"e_resize\"));\r\n            }\r\n        };\r\n\r\n        this.addEventListener(\"pointerdown\", (event: PointerEvent) => {\r\n            const target = document.getElementById(this.controls);\r\n            if (target && this._target !== target) {\r\n                this._target = target;\r\n                this._targetStyle = window.getComputedStyle(target);\r\n            }\r\n            this.setPointerCapture(event.pointerId);\r\n            this.addEventListener(\"pointermove\", onPointerMove);\r\n            this.addEventListener(\"pointerup\", () => {\r\n                this.removeEventListener(\"pointermove\", onPointerMove);\r\n                this.releasePointerCapture(event.pointerId);\r\n            });\r\n        });\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (newValue !== oldValue) {\r\n            switch (name) {\r\n                case \"controls\":\r\n                    if (oldValue !== newValue) {\r\n                        const target = document.getElementById(this.controls);\r\n                        if (target) {\r\n                            this._target = target;\r\n                            this._targetStyle = window.getComputedStyle(target);\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-wsash\": HTMLEWidthSashElement,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_resize\": CustomEvent,\r\n    }\r\n}","import { areAttributesMatching, AttributeMutationMixin, isElement } from \"../elements/HTMLElement\";\r\nimport { forAllSubtreeElements } from \"../elements/Snippets\";\r\n\r\nexport { AttributeMixinsObserverConstructor };\r\nexport { AttributeMixinsObserver };\r\nexport { AttributeMixinsObserverBase };\r\n\r\ninterface AttributeMixinsObserverConstructor {\r\n    readonly prototype: AttributeMixinsObserver;\r\n    new(mixins: AttributeMutationMixin[]): AttributeMixinsObserver;\r\n}\r\n\r\ninterface AttributeMixinsObserver {\r\n    observe(target: Node): void;\r\n    disconnect(): void;\r\n}\r\n\r\nclass AttributeMixinsObserverBase implements AttributeMixinsObserver {\r\n    private _observer: MutationObserver;\r\n    private _mixins: AttributeMutationMixin[];\r\n\r\n    constructor(mixins: AttributeMutationMixin[]) {\r\n        this._observer = new MutationObserver(\r\n            this.callback.bind(this)\r\n        );\r\n        this._mixins = mixins.slice();\r\n    }\r\n\r\n    public callback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            mutation.addedNodes.forEach((node: Node) => {\r\n                if (isElement(node)) {\r\n                    forAllSubtreeElements(node, (childElement: Element) => {\r\n                        [...childElement.attributes].forEach((attr) => {\r\n                            let matchingMixins = this._mixins.filter(\r\n                                mixin => areAttributesMatching(\r\n                                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                                    attr.name, attr.value\r\n                                )\r\n                            );\r\n                            matchingMixins.forEach((mixin) => {\r\n                                mixin.attach(childElement);\r\n                            });\r\n                        });\r\n                    });\r\n                }\r\n            });\r\n            mutation.removedNodes.forEach((node: Node) => {\r\n                if (isElement(node)) {\r\n                    forAllSubtreeElements(node, (childElement: Element) => {\r\n                        [...childElement.attributes].forEach((attr) => {\r\n                            let matchingMixins = this._mixins.filter(\r\n                                mixin => areAttributesMatching(\r\n                                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                                    attr.name, attr.value\r\n                                )\r\n                            );\r\n                            matchingMixins.forEach((mixin) => {\r\n                                mixin.detach(childElement);\r\n                            });\r\n                        });\r\n                    });\r\n                }\r\n            });\r\n            if (isElement(mutation.target)) {\r\n                let targetElement = mutation.target;\r\n                let attrName = mutation.attributeName;\r\n                if (attrName) {\r\n                    let relatedMixins = this._mixins.filter(mixin => mixin.attributeName === attrName);\r\n                    relatedMixins.forEach((mixin) => {\r\n                        if (areAttributesMatching(\r\n                                mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                                attrName!, targetElement.getAttribute(attrName!)\r\n                            )) {\r\n                                mixin.attach(targetElement);\r\n                        }\r\n                        else {\r\n                            mixin.detach(targetElement);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public observe(target: Node): void  {\r\n        this._observer.observe(target, {\r\n            childList: true,\r\n            subtree: true,\r\n            attributeFilter: this._mixins.map((mixin => mixin.attributeName))\r\n        });\r\n    }\r\n\r\n    public disconnect(): void {\r\n        this._observer.disconnect();\r\n    }\r\n}\r\n\r\nvar AttributeMixinsObserver: AttributeMixinsObserverConstructor = AttributeMixinsObserverBase;","import { isParentNode, isReactiveNode, isReactiveParentNode } from \"../elements/HTMLElement\";\r\nimport { forAllSubtreeNodes } from \"../elements/Snippets\";\r\n\r\nexport { ReactiveNodesObserverConstructor };\r\nexport { ReactiveNodesObserver };\r\nexport { ReactiveNodesObserverBase };\r\n\r\ninterface ReactiveNodesObserverConstructor {\r\n    readonly prototype: ReactiveNodesObserver;\r\n    new(): ReactiveNodesObserver;\r\n}\r\n\r\ninterface ReactiveNodesObserver {\r\n    observe(target: Node): void;\r\n    disconnect(): void;\r\n}\r\n\r\nclass ReactiveNodesObserverBase implements ReactiveNodesObserver {\r\n    private _observer: MutationObserver;\r\n\r\n    constructor() {\r\n        this._observer = new MutationObserver(\r\n            this.callback.bind(this)\r\n        );\r\n    }\r\n\r\n    public callback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            mutation.addedNodes.forEach((node: Node) => {\r\n                if (isReactiveNode(node)) {\r\n                    node._reactiveNodeAttributes.addReactListener();\r\n                }\r\n                if (isReactiveParentNode(node)) {\r\n                    node._reactiveParentNodeAttributes.addReactListener();\r\n                }\r\n                if (isParentNode(node)) {\r\n                    forAllSubtreeNodes(node, (childNode) => {\r\n                        if (isReactiveNode(childNode)) {\r\n                            childNode._reactiveNodeAttributes.addReactListener();\r\n                        }\r\n                        if (isReactiveParentNode(childNode)) {\r\n                            childNode._reactiveParentNodeAttributes.addReactListener();\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n            mutation.removedNodes.forEach((node: Node) => {\r\n                if (isReactiveNode(node)) {\r\n                    node._reactiveNodeAttributes.addReactListener();\r\n                }\r\n                if (isReactiveParentNode(node)) {\r\n                    node._reactiveParentNodeAttributes.addReactListener();\r\n                }\r\n                if (isParentNode(node)) {\r\n                    forAllSubtreeNodes(node, (childNode) => {\r\n                        if (isReactiveNode(childNode)) {\r\n                            childNode._reactiveNodeAttributes.addReactListener();\r\n                        }\r\n                        if (isReactiveParentNode(childNode)) {\r\n                            childNode._reactiveParentNodeAttributes.addReactListener();\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    public observe(target: Node): void  {\r\n        this._observer.observe(target, {\r\n            childList: true,\r\n            subtree: true\r\n        });\r\n    }\r\n\r\n    public disconnect(): void {\r\n        this._observer.disconnect();\r\n    }\r\n}\r\n\r\nvar ReactiveNodesObserver: ReactiveNodesObserverConstructor = ReactiveNodesObserverBase;","import { HTMLEMenuItemGroupElement } from \"../../elements/containers/menus/MenuItemGroup\";\r\nimport { Element } from \"../../elements/HTMLElement\";\r\nimport { HTMLEMenuItemTemplateDescription, HTMLEMenuItemTemplate } from \"./MenuItemTemplate\";\r\n\r\nexport { HTMLEMenuItemGroupTemplateDescription };\r\nexport { HTMLEMenuItemGroupTemplate };\r\n\r\ntype HTMLEMenuItemGroupTemplateDescription = Partial<Pick<HTMLEMenuItemGroupElement, 'id' | 'className' | 'name' | 'label'>> & {\r\n    isGroup: true,\r\n    items: HTMLEMenuItemTemplateDescription[],\r\n}\r\n\r\ninterface HTMLEMenuItemGroupTemplate {\r\n    (desc: HTMLEMenuItemGroupTemplateDescription): HTMLEMenuItemGroupElement;\r\n}\r\n\r\nconst HTMLEMenuItemGroupTemplate: HTMLEMenuItemGroupTemplate = (desc: HTMLEMenuItemGroupTemplateDescription) => {\r\n    \r\n    const items = desc.items.map((descArgs) => HTMLEMenuItemTemplate(descArgs));\r\n\r\n    return Element(\r\n        \"e-menuitemgroup\", {\r\n            props: {\r\n                id: desc.id,\r\n                className: desc.className,\r\n                name: desc.name\r\n            },\r\n            children: items\r\n        }\r\n    );\r\n}","\r\nimport { HTMLEMenuElement } from \"../../elements/containers/menus/Menu\";\r\nimport { Element } from \"../../elements/HTMLElement\";\r\nimport { HTMLEMenuItemGroupTemplate, HTMLEMenuItemGroupTemplateDescription } from \"./MenuItemGroupTemplate\";\r\nimport { HTMLEMenuItemTemplate, HTMLEMenuItemTemplateDescription } from \"./MenuItemTemplate\";\r\n\r\nexport { HTMLEMenuTemplateDescription };\r\nexport { HTMLEMenuTemplate };\r\n\r\ntype HTMLEMenuTemplateDescription = Partial<Pick<HTMLEMenuElement, 'id' | 'className' | 'name'>> & {\r\n    items: (HTMLEMenuItemTemplateDescription | HTMLEMenuItemGroupTemplateDescription)[],\r\n}\r\n\r\ninterface HTMLEMenuTemplate {\r\n    (desc: HTMLEMenuTemplateDescription): HTMLEMenuElement;\r\n}\r\n\r\nconst HTMLEMenuTemplate: HTMLEMenuTemplate = (desc: HTMLEMenuTemplateDescription) => {\r\n    \r\n    const items = desc.items.map((itemDesc) => {\r\n        if (\"isGroup\" in itemDesc) {\r\n            return HTMLEMenuItemGroupTemplate(itemDesc);\r\n        }\r\n        else {\r\n            return HTMLEMenuItemTemplate(itemDesc);\r\n        }\r\n    });\r\n\r\n    return Element(\r\n        \"e-menu\", {\r\n            props: {\r\n                id: desc.id,\r\n                className: desc.className,\r\n                name: desc.name,\r\n            },\r\n            children: items\r\n        }\r\n    );\r\n}","\r\nimport { HTMLEMenuItemElement } from \"../../elements/containers/menus/MenuItem\";\r\nimport { Element, TextNode } from \"../../elements/HTMLElement\";\r\nimport { Key, KeyModifier, HotKey } from \"../../Input\";\r\nimport { HTMLEMenuTemplate, HTMLEMenuTemplateDescription } from \"./MenuTemplate\";\r\n\r\nexport { HTMLEMenuItemTemplateDescription };\r\nexport { HTMLEMenuItemTemplate };\r\n\r\ntype HTMLEMenuItemTemplateDescription = Pick<HTMLEMenuItemElement, 'name'> & Partial<Pick<HTMLEMenuItemElement, 'id' | 'className' | 'title' | 'type' | 'disabled'>> & {\r\n    label?: string;\r\n    command?: string;\r\n    commandArgs?: any;\r\n    hotkey?: {\r\n        key: Key;\r\n        mod1?: KeyModifier;\r\n        mod2?: KeyModifier;\r\n    },\r\n    value?: string,\r\n    checked?: boolean,\r\n    statekey?: string,\r\n    menu?: HTMLEMenuTemplateDescription;\r\n    disabled?: boolean;\r\n}\r\n\r\ninterface HTMLEMenuItemTemplate {\r\n    (args: HTMLEMenuItemTemplateDescription): HTMLEMenuItemElement;\r\n}\r\n\r\nconst HTMLEMenuItemTemplate: HTMLEMenuItemTemplate = (desc: HTMLEMenuItemTemplateDescription) => {\r\n    let slotted: (Node | string)[] = [];\r\n\r\n    if (desc.menu) {\r\n        let menu = HTMLEMenuTemplate(desc.menu);\r\n        menu.slot = \"menu\";\r\n        slotted.push(menu);\r\n    }\r\n\r\n    const menuItem = Element(\r\n        \"e-menuitem\", {\r\n            props: {\r\n                id: desc.id,\r\n                className: desc.className,\r\n                name: desc.name,\r\n                title: desc.title,\r\n                type: desc.type,\r\n                label: desc.label,\r\n                disabled: desc.disabled,\r\n                value: desc.value,\r\n                checked: desc.checked,\r\n                command: desc.command,\r\n                commandArgs: desc.commandArgs,\r\n                hotkey: desc.hotkey ? new HotKey(desc.hotkey.key, desc.hotkey.mod1, desc.hotkey.mod2) : void 0\r\n            },\r\n            children: slotted.map((slotted) => (typeof slotted === \"string\") ? TextNode(slotted) : slotted)\r\n        }\r\n    );\r\n\r\n    return menuItem;\r\n}","\r\nimport { HTMLEMenuBarElement } from \"../../elements/containers/menus/MenuBar\";\r\nimport { Element } from \"../../elements/HTMLElement\";\r\nimport { HTMLEMenuItemTemplateDescription, HTMLEMenuItemTemplate } from \"./MenuItemTemplate\";\r\n\r\n\r\nexport { HTMLEMenubarTemplateDescription };\r\nexport { HTMLEMenubarTemplate };\r\n\r\ntype HTMLEMenubarTemplateDescription = Partial<Pick<HTMLEMenuBarElement, 'id' | 'className' | 'tabIndex'>> & {\r\n    items: HTMLEMenuItemTemplateDescription[],\r\n}\r\n\r\ninterface HTMLEMenubarTemplate {\r\n    (desc: HTMLEMenubarTemplateDescription): HTMLEMenuBarElement;\r\n}\r\n\r\nconst HTMLEMenubarTemplate: HTMLEMenubarTemplate = (desc: HTMLEMenubarTemplateDescription) => {\r\n    \r\n    const items = desc.items.map((itemDesc) => {\r\n        return HTMLEMenuItemTemplate(itemDesc);\r\n    });\r\n\r\n    return Element(\r\n        \"e-menubar\", {\r\n            props: {\r\n                id: desc.id,\r\n                className: desc.className,\r\n                tabIndex: desc.tabIndex\r\n            },\r\n            children: items\r\n        }\r\n    );\r\n}","import { Element, TextNode } from \"../../elements/HTMLElement\";\r\n\r\nexport { HTMLTableTemplateDescription };\r\nexport { HTMLTableTemplate };\r\n\r\ntype HTMLTableTemplateDescription = Partial<Pick<HTMLTableElement, \"id\" | \"className\">> & {\r\n    headerCells: (string | Node)[];\r\n\r\n    bodyCells: ((string | Node) | {\r\n        type: \"header\" | \"data\" | undefined\r\n        content: Node | string\r\n    })[][];\r\n\r\n    footerCells: (string | Node | {\r\n        type: \"header\" | \"data\" | undefined\r\n        content: Node | string\r\n    })[];\r\n}\r\n\r\ninterface HTMLTableTemplate {\r\n    (desc: HTMLTableTemplateDescription): HTMLTableElement;\r\n}\r\n\r\nconst HTMLTableTemplate: HTMLTableTemplate = (desc: HTMLTableTemplateDescription) => {\r\n    \r\n    const thead = Element(\r\n        \"thead\", {\r\n            children: [\r\n                Element(\r\n                \"tr\", {\r\n                    props: {\r\n                        id: desc.id,\r\n                        className: desc.className,\r\n                    },\r\n                    children: desc.headerCells.map((cell) => {\r\n                        return Element(\r\n                            \"th\", {\r\n                                props: {\r\n                                    scope: \"col\" \r\n                                },\r\n                                children: [\r\n                                    (typeof cell === \"string\") ? TextNode(cell) : cell\r\n                                ]\r\n                            }\r\n                        );\r\n                    })\r\n                })\r\n            ]\r\n        }\r\n    );\r\n\r\n    const tbody = Element(\r\n        \"tbody\", {\r\n            children: desc.bodyCells.map((row) => {\r\n                return Element(\r\n                \"tr\", {\r\n                    props: {\r\n                        id: desc.id,\r\n                        className: desc.className,\r\n                    },\r\n                    children: row.map((cell) => {\r\n                        if ((typeof cell === \"object\") && !(cell instanceof Node) && (\"type\" in cell)) {\r\n                            switch (cell.type) {\r\n                                case \"data\":\r\n                                default:\r\n                                    return Element(\r\n                                        \"td\", {\r\n                                            children: [\r\n                                                (typeof cell.content === \"string\") ? TextNode(cell.content) : cell.content\r\n                                            ]\r\n                                        }\r\n                                    );\r\n                                case \"header\":\r\n                                    return Element(\r\n                                        \"th\", {\r\n                                            props: {\r\n                                                scope: \"row\" \r\n                                            },\r\n                                            children: [\r\n                                                (typeof cell.content === \"string\") ? TextNode(cell.content) : cell.content\r\n                                            ]\r\n                                        }\r\n                                    );\r\n                            }\r\n                        }\r\n                        else {\r\n                            return Element(\r\n                                \"td\", {\r\n                                    children: [\r\n                                        (typeof cell === \"string\") ? TextNode(cell) : cell\r\n                                    ]\r\n                                }\r\n                            );\r\n                        }\r\n                    })\r\n                })\r\n            })\r\n        }\r\n    );\r\n\r\n    const tfoot = Element(\r\n        \"tfoot\", {\r\n            children: [\r\n                Element(\r\n                \"tr\", {\r\n                    props: {\r\n                        id: desc.id,\r\n                        className: desc.className,\r\n                    },\r\n                    children: desc.footerCells.map((cell) => {\r\n                        if ((typeof cell === \"object\") && !(cell instanceof Node) && (\"type\" in cell)) {\r\n                            switch (cell.type) {\r\n                                case \"data\":\r\n                                default:\r\n                                    return Element(\r\n                                        \"td\", {\r\n                                            children: [\r\n                                                (typeof cell.content === \"string\") ? TextNode(cell.content) : cell.content\r\n                                            ]\r\n                                        }\r\n                                    );\r\n                                case \"header\":\r\n                                    return Element(\r\n                                        \"th\", {\r\n                                            props: {\r\n                                                scope: \"row\" \r\n                                            },\r\n                                            children: [\r\n                                                (typeof cell.content === \"string\") ? TextNode(cell.content) : cell.content\r\n                                            ]\r\n                                        }\r\n                                    );\r\n                            }\r\n                        }\r\n                        else {\r\n                            return Element(\r\n                                \"td\", {\r\n                                    children: [\r\n                                        (typeof cell === \"string\") ? TextNode(cell) : cell\r\n                                    ]\r\n                                }\r\n                            );\r\n                        }\r\n                    })\r\n                })\r\n            ]\r\n        }\r\n    );\r\n\r\n    const table = Element(\r\n        \"table\", {\r\n            props: {\r\n                id: desc.id,\r\n                className: desc.className,\r\n            },\r\n            children: [\r\n                thead,\r\n                tbody,\r\n                tfoot\r\n            ]\r\n        }\r\n    );\r\n\r\n    return table;\r\n}","import { isParentNode, isReactiveNode, isReactiveParentNode } from \"../elements/HTMLElement\";\r\nimport { forAllSubtreeNodes } from \"../elements/Snippets\";\r\n\r\nexport { ViewRoot };\r\nexport { isViewRoot };\r\nexport { View };\r\nexport { ViewBase };\r\nexport { ReactiveView };\r\nexport { ReactiveViewBase };\r\n\r\ntype ViewRoot = Element & {\r\n    _view: View;\r\n}\r\n\r\ninterface View<M extends object = object> {\r\n    root: ViewRoot;\r\n    readonly model: M;\r\n    render(): Element;\r\n}\r\n\r\nfunction isViewRoot(root: Node): root is ViewRoot {\r\n    return typeof (root as ViewRoot)._view !== \"undefined\";\r\n}\r\n\r\nabstract class ViewBase<M extends object = object> implements View {\r\n    public readonly root: ViewRoot;\r\n    public readonly model: M;\r\n\r\n    constructor(model: M) {\r\n        this.model = model;\r\n        this.root = Object.assign(\r\n            this.render(), {\r\n                _view: this\r\n            }\r\n        );\r\n    }\r\n    \r\n    public abstract render(): Element;\r\n}\r\n\r\ninterface ReactiveView<M extends object = object> extends View<M> {\r\n    disconnect(): void;\r\n}\r\n\r\nabstract class ReactiveViewBase<M extends object = object> extends ViewBase<M> implements ReactiveView<M> {\r\n    readonly observer: MutationObserver;\r\n    \r\n    constructor(model: M) {\r\n        super(model);\r\n        this.observer = new MutationObserver((mutations: MutationRecord[]) => {\r\n            mutations.forEach((record: MutationRecord) => {\r\n                Array.from(record.removedNodes).map((node) => {\r\n                    if (!isViewRoot(node)) {\r\n                        this.removeReactiveListeners(node);\r\n                    }\r\n                });\r\n                Array.from(record.addedNodes).map((node) => {\r\n                    if (!isViewRoot(node)) {\r\n                        this.addReactiveListeners(node);\r\n                    }\r\n                });\r\n            });\r\n        });\r\n        this.observer.observe(this.root, {\r\n            subtree: true,\r\n            childList: true\r\n        });\r\n        this.addReactiveListeners(this.root);\r\n    }\r\n\r\n    public disconnect(): void {\r\n        this.observer.disconnect();\r\n        this.removeReactiveListeners(this.root);\r\n    }\r\n\r\n    public addReactiveListeners(node: Node): void {\r\n        if (isReactiveNode(node)) {\r\n            node._reactiveNodeAttributes.addReactListener();\r\n        }\r\n        if (isReactiveParentNode(node)) {\r\n            node._reactiveParentNodeAttributes.addReactListener();\r\n        }\r\n        if (isParentNode(node)) {\r\n            forAllSubtreeNodes(node, (childNode) => {\r\n                if (!isViewRoot(childNode)) {\r\n                    this.addReactiveListeners(childNode);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    public removeReactiveListeners(node: Node): void {\r\n        if (isReactiveNode(node)) {\r\n            node._reactiveNodeAttributes.addReactListener();\r\n        }\r\n        if (isReactiveParentNode(node)) {\r\n            node._reactiveParentNodeAttributes.addReactListener();\r\n        }\r\n        if (isParentNode(node)) {\r\n            forAllSubtreeNodes(node, (childNode) => {\r\n                if (!isViewRoot(childNode)) {\r\n                    this.removeReactiveListeners(childNode);\r\n                }\r\n            });\r\n        }\r\n    }\r\n}","import * as editor from \"../index\";\r\n\r\neditor;\r\n\r\nexport async function main() {\r\n    console.log(\"Main loaded!\");\r\n    /*(window as {[key: string]: any})[\"editor\"] = editor;\r\n    let formDataImport = document.getElementById(\"formdata-import\");\r\n    if (formDataImport) {\r\n        formDataImport.addEventListener(\"load\", () => {\r\n            formdata();\r\n        });\r\n    }*/\r\n}"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","forAllSubtreeElements","element","func","index","children","length","child","item","forAllSubtreeNodes","parent","childNodes","hasChildNodes","getPropertyFromPath","src","path","props","split","forEach","includes","parseInt","substring","indexOf","Number","isNaN","console","error","Array","isArray","setPropertyFromPath","idx","pointIntersectsWithDOMRect","x","y","rect","left","right","top","bottom","titlize","str","charAt","toUpperCase","substr","toLowerCase","snakeToCamel","map","join","camelToSnake","replace","trainToCamel","camelToTrain","isTagElement","tagName","Node","nodeType","ELEMENT_NODE","RegisterCustomHTMLElement","args","elementCtor","name","observedAttributes","options","constructor","customElements","define","GenerateAttributeAccessors","attributes","attr","type","this","getAttribute","set","setAttribute","removeAttribute","val","JSON","parse","stringify","parseFloat","bindShadowRoot","templateContent","root","attachShadow","mode","template","document","createElement","innerHTML","appendChild","content","cloneNode","Fragment","nodes","fragment","createDocumentFragment","append","TextNode","text","createTextNode","Element","init","setElementProperties","attrs","setElementAttributes","replaceChildren","listeners","setHTMLElementEventListeners","styles","keys","property","style","setProperty","setHTMLElementStyles","isParentNode","node","isElement","isReactiveNode","_reactiveNodeAttributes","addReactListener","removeReactListener","isReactiveParentNode","_reactiveParentNodeAttributes","ReactiveNode","objectOrList","react","listener","event","data","addedItems","removedItems","assign","addEventListener","removeEventListener","items","oldValue","newValue","ReactiveChildNodes","list","placeholder","textContent","i","remove","addedElements","before","entries","entry","properties","attributeName","toString","areAttributesMatching","refAttributeType","refAttrName","refAttrValue","attrName","attrValue","RegExp","test","AttributeMutationMixinBase","attributeType","attributeValue","EventBase","Event","EventDispatcherBase","_listeners","Map","handler","once","newListener","find","push","count","findIndex","pop","delete","dispatchEvent","filter","EventDispatcher","isObjectModel","ObjectModelBase","super","_data","isListModel","insert","clear","ListModelBase","_items","newLength","splice","itemIndex","slice","EditorBase","_commands","_hotkeys","state","setup","body","from","hotkey","execs","exec","target","detail","oldHotKey","removeHotkeyExec","trigger","bind","newHotKey","addHotkeyExec","command","executeCommand","commandArgs","registerCommand","opts","undo","hotkeys","Key","KeyModifier","MouseButton","Editor","displayKeyModifier","Control","testKeyModifier","mod","altKey","ctrlKey","shiftKey","HotKey","mod1","mod2","HTMLEMenuElementBase","HTMLElement","parentItem","_activeIndex","activeIndex","connectedCallback","tabIndex","slot","shadowRoot","querySelector","assignedElements","elem","parentMenu","targetIndex","reset","focus","focusItemAt","thisIntersectsWithMouse","clientX","clientY","getBoundingClientRect","contains","expanded","newTarget","relatedTarget","activeItem","stopPropagation","parentGroup","group","childMenu","attributeChangedCallback","clientWidth","overflowing","findItem","predicate","subitems","foundItem","HTMLEMenuBarElementBase","activeElement","active","preventDefault","subtree","HTMLEMenuButtonElementBase","menuSlot","menuElem","toggle","capture","alert","disabled","CustomEvent","bubbles","labelPart","HTMLEMenuItemElementBase","_hotkey","hotkeyPart","label","inputPart","checked","HTMLEMenuItemGroupElementBase","checkedRadio","PanelElement","getElementById","arrow","arr","window","innerWidth","render","PanelGroupElement","toggler","HTMLEStatusBarElementBase","_selectedItemIndex","selectedItemIndex","insertItem","Math","min","max","insertBefore","selectItem","findItems","clearSelection","selectedItem","HTMLEStatusItemElementBase","_stateMap","stateMap","update","activate","BaseHTMLETabElement","panel","controls","hidden","tab","BaseHTMLETabListElement","tabs","focusTabAt","activeTab","activateTab","thisTab","thisTabIndex","findTab","isHTMLETabPanelElement","BaseHTMLETabPanelElement","HTMLETreeItemElementBase","indent","iconPart","dataset","deepestVisibleChildItem","previousVisibleItem","indexOfThis","nextVisibleItem","nearestItem","nearestParentItem","indexOfNearest","subitem","HTMLETreeElementBase","_activeItem","_selectedItem","focusItem","closestItem","closest","selected","HTMLEDraggableElementBase","references","_referee","draggable","disconnectedCallback","referee","thisRefIndex","id","reference","getReference","referenceIdx","HTMLEDragzoneElementBase","draggables","selectedDraggables","selectDraggable","unselectDraggable","thisSelectedDraggable","dragged","dataTransfer","effectAllowed","setData","thisDraggedDraggable","button","firstIndex","direction","sign","fromIndex","toIndex","startRangeIndex","endRangeIndex","thisDraggable","HTMLEDropzoneElementBase","droptest","appendAreaPart","removeDraggables","dragovered","dropIndex","dragzoneId","getData","dragzone","selectedDraggable","addDraggables","placeholderPart","position","dataTransferSuccess","newDraggables","insertionPosition","multiple","newDraggable","insertAdjacentElement","replaceChild","action","toRemove","atPosition","DropzoneDataBase","dropzone","_dropzone","dropzoneData","querySelectorAll","parentElement","childDropzone","childDropzoneData","DropzoneData","HTMLEDialogElementBase","_closeButton","_cancelButton","_confirmButton","_okButton","cancel","confirm","open","close","getFormState","form","elements","_control","floatValue","files","setFormState","stateValue","HTMLEHeightSashElementBase","_target","_targetStyle","onPointerMove","height","getPropertyValue","newHeight","trunc","growdir","movementY","getComputedStyle","setPointerCapture","pointerId","releasePointerCapture","HTMLEImportElementBase","async","outerHTML","fetch","then","response","ok","Error","statusText","importRequest","HTMLELoaderElementBase","_promise","promise","finally","PaletteElement","colors","color","div","HTMLEWidthSashElementBase","width","newWidth","movementX","AttributeMixinsObserverBase","mixins","_observer","MutationObserver","callback","_mixins","mutationsList","mutation","addedNodes","childElement","mixin","attach","removedNodes","detach","targetElement","observe","childList","attributeFilter","disconnect","AttributeMixinsObserver","ReactiveNodesObserverBase","childNode","ReactiveNodesObserver","HTMLEMenuItemGroupTemplate","desc","descArgs","HTMLEMenuItemTemplate","className","HTMLEMenuTemplate","itemDesc","slotted","menu","title","HTMLEMenubarTemplate","HTMLTableTemplate","thead","headerCells","cell","scope","tbody","bodyCells","row","tfoot","footerCells","isViewRoot","_view","ViewBase","model","ReactiveViewBase","observer","mutations","record","removeReactiveListeners","addReactiveListeners","main","log"],"sourceRoot":""}