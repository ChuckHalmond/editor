{"version":3,"file":"main.js","mappings":"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","sources":["webpack://main/webpack/bootstrap","webpack://main/webpack/runtime/define property getters","webpack://main/webpack/runtime/hasOwnProperty shorthand","webpack://main/webpack/runtime/make namespace object","webpack://main/./src/models/Model.ts","webpack://main/./src/elements/Snippets.ts","webpack://main/./src/elements/Element.ts","webpack://main/./src/elements/containers/menus/MenuItem.ts","webpack://main/./src/views/View.ts","webpack://main/./src/views/GridView.ts","webpack://main/./src/views/TreeView.ts","webpack://main/./src/views/widgets/Widget.ts","webpack://main/./src/views/widgets/toolbar/ToolBarItemWidget.ts","webpack://main/./src/views/widgets/toolbar/ToolBarWidget.ts","webpack://main/./TreeMain.ts","webpack://main/./src/Input.ts","webpack://main/./src/elements/containers/actions/Action.ts","webpack://main/./src/elements/containers/grid/GridCell.ts","webpack://main/./src/elements/containers/grid/GridRowGroup.ts","webpack://main/./src/elements/containers/menus/MenuItemGroup.ts","webpack://main/./src/elements/containers/menus/Menu.ts","webpack://main/./src/elements/containers/grid/GridRow.ts","webpack://main/./src/elements/containers/grid/GridCellCollection.ts","webpack://main/./src/elements/containers/grid/GridRowCollection.ts","webpack://main/./src/elements/containers/grid/GridBody.ts","webpack://main/./src/elements/containers/grid/Grid.ts","webpack://main/./src/elements/containers/grid/GridHead.ts","webpack://main/./src/elements/containers/menus/MenuBar.ts","webpack://main/./src/elements/containers/menus/MenuButton.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItem.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItemGroup.ts","webpack://main/./src/elements/containers/toolbars/ToolBar.ts","webpack://main/./src/elements/containers/tabs/TabPanel.ts","webpack://main/./src/elements/containers/tabs/Tab.ts","webpack://main/./src/elements/containers/tabs/TabList.ts","webpack://main/./src/elements/containers/trees/TreeItemGroup.ts","webpack://main/./src/elements/containers/trees/TreeItem.ts","webpack://main/./src/elements/containers/trees/Tree.ts","webpack://main/./src/elements/containers/lists/ListItem.ts","webpack://main/./src/elements/containers/lists/ListItemGroup.ts","webpack://main/./src/elements/containers/lists/List.ts","webpack://main/./src/elements/controls/draggable/Draggable.ts","webpack://main/./src/elements/controls/draggable/Dragzone.ts","webpack://main/./src/elements/controls/draggable/Dropzone.ts","webpack://main/./src/elements/controls/dialogs/Dialog.ts","webpack://main/./src/elements/controls/forms/Option.ts","webpack://main/./src/elements/controls/forms/OptionGroup.ts","webpack://main/./src/elements/controls/forms/Select.ts","webpack://main/./src/elements/utils/Handle.ts","webpack://main/./src/elements/utils/HeightSash.ts","webpack://main/./src/elements/utils/Import.ts","webpack://main/./src/elements/utils/Loader.ts","webpack://main/./src/elements/utils/WidthSash.ts","webpack://main/./src/observers/AttributeMixinsObserver.ts","webpack://main/./src/views/widgets/SeparatorWidget.ts","webpack://main/./src/views/widgets/menu/MenuItemWidget.ts","webpack://main/./src/views/widgets/menu/MenuBarWidget.ts","webpack://main/./src/views/widgets/menu/MenuWidget.ts","webpack://main/./src/views/widgets/menu/MenuItemGroupWidget.ts","webpack://main/./src/views/widgets/tree/TreeItemWidget.ts","webpack://main/./src/views/widgets/tree/TreeWidget.ts","webpack://main/./src/views/widgets/tree/TreeItemGroupWidget.ts","webpack://main/./src/views/widgets/list/ListItemWidget.ts","webpack://main/./src/views/widgets/list/ListWidget.ts","webpack://main/./src/views/widgets/list/ListItemGroupWidget.ts","webpack://main/./src/views/widgets/toolbar/ToolBarItemGroupWidget.ts","webpack://main/./src/views/widgets/WidthSashWidget.ts","webpack://main/./src/views/widgets/HeightSashWidget.ts","webpack://main/./src/views/widgets/grid/GridCellWidget.ts","webpack://main/./src/views/widgets/grid/GridRowWidget.ts","webpack://main/./src/views/widgets/grid/GridWidget.ts","webpack://main/./src/views/widgets/grid/GridBodyWidget.ts","webpack://main/./src/views/widgets/grid/GridHeadWidget.ts","webpack://main/./src/views/widgets/grid/GridHeaderWidget.ts","webpack://main/./src/views/widgets/combobox/OptionWidget.ts","webpack://main/./src/views/widgets/combobox/ComboBoxWidget.ts","webpack://main/./main.ts","webpack://main/./src/views/widgets/combobox/OptionGroupWidget.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export { ModelChangeRecord };\r\nexport { ModelEvent };\r\nexport { ModelNode };\r\nexport { ModelObject };\r\nexport { ModelProperty };\r\nexport { ModelList };\r\nexport { ModelChangeObserverOptions };\r\nexport { ModelChangeObserver };\r\n\r\ninterface ModelChangeRecordConstructor {\r\n    prototype: ModelChangeRecord;\r\n    new(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ): ModelChangeRecord;\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\ninterface ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly changeType: number;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\nclass ModelChangeRecordBase implements ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList;\r\n    readonly changeType: number;\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n\r\n    constructor(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ) {\r\n        this.target = init.target;\r\n        this.changeType = init.changeType;\r\n        this.propertyName = init.propertyName ?? null;\r\n        this.oldValue = init.oldValue ?? undefined;\r\n        this.newValue = init.newValue ?? undefined;\r\n        this.removedIndex = init.removedIndex ?? 0;\r\n        this.removedItems = new ModelNodesList(init.removedItems ?? []);\r\n        this.insertedIndex = init.insertedIndex ?? 0;\r\n        this.insertedItems = new ModelNodesList(init.insertedItems ?? []);\r\n        this.sortedIndices = init.sortedIndices ?? [];\r\n    }\r\n\r\n    static get PROPERTY_CHANGE(): number {\r\n        return 1;\r\n    }\r\n\r\n    static get LIST_REMOVE(): number {\r\n        return 2;\r\n    }\r\n\r\n    static get LIST_INSERT(): number {\r\n        return 3;\r\n    }\r\n\r\n    static get LIST_SORT(): number {\r\n        return 4;\r\n    }\r\n\r\n    get PROPERTY_CHANGE(): number {\r\n        return ModelChangeRecordBase.PROPERTY_CHANGE;\r\n    }\r\n\r\n    get LIST_REMOVE(): number {\r\n        return ModelChangeRecordBase.LIST_REMOVE;\r\n    }\r\n\r\n    get LIST_INSERT(): number {\r\n        return ModelChangeRecordBase.LIST_INSERT;\r\n    }\r\n\r\n    get LIST_SORT(): number {\r\n        return ModelChangeRecordBase.LIST_SORT;\r\n    }\r\n}\r\n\r\nvar ModelChangeRecord: ModelChangeRecordConstructor = ModelChangeRecordBase;\r\n\r\ninterface ModelNodesListConstructor {\r\n    prototype: ModelNodesList;\r\n    new(items: any[]): ModelNodesList;\r\n}\r\n\r\ninterface ModelNodesList {\r\n    get length(): number;\r\n    item(index: number): ModelNode | null;\r\n    values(): IterableIterator<ModelNode>;\r\n}\r\n\r\nclass ModelNodesListBase implements ModelNodesList {\r\n    #items: ModelNode[];\r\n\r\n    constructor(items: ModelNode[]) {\r\n        this.#items = items.slice();\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    item(index: number): ModelNode | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    values(): IterableIterator<ModelNode> {\r\n        return this.#items.values();\r\n    }\r\n}\r\n\r\nvar ModelNodesList: ModelNodesListConstructor = ModelNodesListBase;\r\n\r\ninterface ModelEventConstructor {\r\n    prototype: ModelEvent;\r\n    new(type: string): ModelEvent;\r\n}\r\n\r\ninterface ModelEvent {\r\n    readonly type: string;\r\n    readonly currentTarget: ModelEventTarget | null;\r\n    readonly target: ModelEventTarget | null;\r\n}\r\n\r\nclass ModelEventBase implements ModelEvent {\r\n    readonly type: string;\r\n\r\n    #currentTarget: ModelEventTarget | null;\r\n    #target: ModelEventTarget | null;\r\n\r\n    constructor(type: string) {\r\n        this.type = type;\r\n        this.#currentTarget = null;\r\n        this.#target = null;\r\n    }\r\n\r\n    get currentTarget(): ModelEventTarget | null {\r\n        return this.#currentTarget;\r\n    }\r\n\r\n    get target(): ModelEventTarget | null {\r\n        return this.#target;\r\n    }\r\n\r\n    static ModelEventTargetAccessor? = new class ModelEventTargetAccessor {\r\n        setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#currentTarget = currentTarget;\r\n            }\r\n        }\r\n\r\n        setTarget(event: ModelEvent, target: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#target = target;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface ModelEventTargetAccessor {\r\n    setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void;\r\n    setTarget(event: ModelEvent, target: ModelEventTarget): void;\r\n}\r\n\r\nvar ModelEventTargetAccessor: ModelEventTargetAccessor = ModelEventBase.ModelEventTargetAccessor!;\r\ndelete ModelEventBase.ModelEventTargetAccessor;\r\n\r\nvar ModelEvent: ModelEventConstructor = ModelEventBase;\r\n\r\ninterface ModelEventTargetConstructor {\r\n    prototype: ModelEventTarget;\r\n    new(): ModelEventTarget;\r\n}\r\n\r\ninterface ModelEventTarget {\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    dispatchEvent(event: ModelEvent): void;\r\n    receiveEvent(event: ModelEvent): void;\r\n}\r\n\r\nclass ModelEventTargetBase implements ModelEventTarget {\r\n    #callbacks: Map<string, ((event: ModelEvent) => void)[]>;\r\n\r\n    constructor() {\r\n        this.#callbacks = new Map();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        const {type} = event;\r\n        const callbacks = this.#callbacks.get(type);\r\n        ModelEventTargetAccessor.setCurrentTarget(event, this);\r\n        if (callbacks) {\r\n            callbacks.forEach((callback_i) => {\r\n                callback_i(event);\r\n            });\r\n        }\r\n    }\r\n\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            callbacks.push(callback);\r\n        }\r\n        else {\r\n            this.#callbacks.set(type, [callback]);\r\n        }\r\n    }\r\n\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            const callbackIndex = callbacks.findIndex(\r\n                callback_i => callback_i == callback\r\n            );\r\n            if (callbackIndex > -1) {\r\n                callbacks.splice(callbackIndex, 1);\r\n            }\r\n            if (callbacks.length == 0) {\r\n                this.#callbacks.delete(type);\r\n            }\r\n        }\r\n    }\r\n\r\n    dispatchEvent(event: ModelEvent): void {\r\n        ModelEventTargetAccessor.setTarget(event, this);\r\n        this.receiveEvent(event);\r\n    }\r\n}\r\n\r\nvar ModelEventTarget: ModelEventTargetConstructor = ModelEventTargetBase;\r\n\r\ninterface ModelNodeConstructor {\r\n    prototype: ModelNode;\r\n    new(): ModelNode;\r\n}\r\n\r\ninterface ModelNode extends ModelEventTarget {\r\n    readonly parentNode: ModelNode | null;\r\n    setParent(parentNode: ModelNode | null): void;\r\n    getRecords(): ModelChangeRecord[];\r\n    beginChanges(): void;\r\n    endChanges(): void;\r\n}\r\n\r\ninterface ModelNodeRecordsAccessor {\r\n    triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void;\r\n    handleRecord(node: ModelNode, record: ModelChangeRecord): void;\r\n}\r\n\r\nclass ModelNodeBase extends ModelEventTargetBase implements ModelNode {\r\n    #parentNode: ModelNode | null;\r\n    #records: ModelChangeRecord[];\r\n    #isRecording: boolean;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#parentNode = null;\r\n        this.#records = [];\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    get parentNode(): ModelNode | null {\r\n        return this.#parentNode;\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        if (parentNode !== null) {\r\n            let isCyclicReference = parentNode == this;\r\n            let {parentNode: ancestorNode} = parentNode;\r\n            while (!isCyclicReference && ancestorNode !== null) {\r\n                ({parentNode: ancestorNode} = ancestorNode);\r\n                isCyclicReference = ancestorNode == this;\r\n            }\r\n            if (!isCyclicReference) {\r\n                this.#parentNode = parentNode;\r\n            }\r\n            else {\r\n                throw new TypeError(\"Failed to set parent on ModelNode: circular reference detected in the hierarchy.\");\r\n            }\r\n        }\r\n        else {\r\n            this.#parentNode = null;\r\n        }\r\n    }\r\n    \r\n    beginChanges(): void {\r\n        this.#isRecording = true;\r\n    }\r\n\r\n    endChanges(): void {\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        this.#records.splice(0);\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    getRecords(): ModelChangeRecord[] {\r\n        return this.#records.slice();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        super.receiveEvent(event);\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            parentNode.receiveEvent(event);\r\n        }\r\n    }\r\n\r\n    #triggerChange(property: string, oldValue: any, newValue: any): void {\r\n        const records = this.#records;\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.PROPERTY_CHANGE,\r\n            propertyName: property,\r\n            oldValue, newValue\r\n        });\r\n        records.push(record);\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        records.splice(0);\r\n    }\r\n\r\n    #handleRecord(record: ModelChangeRecord): void {\r\n        this.#records.push(record);\r\n        if (!this.#isRecording) {\r\n            this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n            this.#records.splice(0);\r\n        }\r\n    }\r\n\r\n    static ModelNodeRecordsAccessor? = new class ModelNodeRecordsAccessor {\r\n        triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#triggerChange(property, oldValue, newValue);\r\n            }\r\n        }\r\n\r\n        handleRecord(node: ModelNode, record: ModelChangeRecord): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#handleRecord(record);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelNodeRecordsAccessor: ModelNodeRecordsAccessor = ModelNodeBase.ModelNodeRecordsAccessor!;\r\ndelete ModelNodeBase.ModelNodeRecordsAccessor;\r\n\r\nvar ModelNode: ModelNodeConstructor = ModelNodeBase;\r\n\r\ninterface ModelPropertyDecorator {\r\n    (\r\n        init?: {\r\n            type: typeof String | typeof Number | typeof Boolean | typeof Date | typeof Object\r\n        }\r\n    ): <Model extends ModelObject>(target: Model, property: string) => void;\r\n}\r\n\r\nconst ModelProperty: ModelPropertyDecorator = function(\r\n    init?: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Date | typeof Object\r\n    }\r\n) {\r\n    return (\r\n        target: ModelObject, property: string\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        /*const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n        if (Array.isArray(observedAttributes)) {\r\n            observedAttributes.push(property);\r\n        }\r\n        else {\r\n            Object.defineProperty(\r\n                constructor, \"observedAttributes\", {\r\n                    value: [property],\r\n                    writable: false\r\n                }\r\n            );\r\n        }*/\r\n        const setter = function(this: ModelObject, value: any) {\r\n            const oldValue = ModelObjectPropertiesAccessor.getProperty(this, property);\r\n            ModelObjectPropertiesAccessor.setProperty(this, property, value);\r\n            if (value !== oldValue) {\r\n                ModelNodeRecordsAccessor.triggerChange(this, property, oldValue, value);\r\n            }\r\n            return true;\r\n        };\r\n        const getter = function(this: ModelObject) {\r\n            return ModelObjectPropertiesAccessor.getProperty(this, property);\r\n        };\r\n        Object.defineProperty(prototype, property, {\r\n            set: setter,\r\n            get: getter,\r\n            enumerable: true\r\n        });\r\n    }\r\n}\r\n\r\ninterface ModelObjectConstructor {\r\n    prototype: ModelObject;\r\n    new(): ModelObject;\r\n}\r\n\r\ninterface ModelObject extends ModelNode {}\r\n\r\ninterface ModelObjectPropertiesAccessor {\r\n    setProperty(node: ModelNode, property: string, value: any): void;\r\n    getProperty(node: ModelNode, property: string,): any;\r\n}\r\n\r\nclass ModelObjectBase extends ModelNodeBase implements ModelObject {\r\n    #properties: Map<string, any>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#properties = new Map();\r\n    }\r\n\r\n    static ModelObjectPropertiesAccessor? = new class ModelPropertiesAccessor {\r\n        setProperty(node: ModelObject, property: string, value: any): void {\r\n            if (node instanceof ModelObjectBase) {\r\n                node.#properties.set(property, value);\r\n            }\r\n        }\r\n\r\n        getProperty(node: ModelObject, property: string): any {\r\n            if (node instanceof ModelObjectBase) {\r\n                return node.#properties.get(property);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelObjectPropertiesAccessor: ModelObjectPropertiesAccessor = ModelObjectBase.ModelObjectPropertiesAccessor!;\r\ndelete ModelObjectBase.ModelObjectPropertiesAccessor;\r\n\r\nvar ModelObject: ModelObjectConstructor = ModelObjectBase;\r\n\r\ninterface ModelListConstructor {\r\n    prototype: ModelList;\r\n    new<Model extends ModelNode>(): ModelList<Model>;\r\n    new<Model extends ModelNode>(items: Model[]): ModelList<Model>;\r\n}\r\n\r\ninterface ModelList<Model extends ModelNode = ModelNode> extends ModelNode {\r\n    readonly parentNode: ModelNode | null;\r\n    readonly length: number;\r\n    index(items: Model): number;\r\n    index(items: Model, fromIndex: number): number;\r\n    get(index: number): Model | null;\r\n    values(): IterableIterator<Model>;\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void;\r\n    insert(index: number, ...items: Model[]): void;\r\n    prepend(...items: Model[]): void;\r\n    append(...items: Model[]): void;\r\n    remove(item: Model): void;\r\n    clear(): void;\r\n}\r\n\r\nclass ModelListBase<Model extends ModelNode = ModelNode> extends ModelNodeBase implements ModelList<Model> {\r\n    #items: Model[];\r\n\r\n    constructor()\r\n    constructor(items: Model[])\r\n    constructor(items?: Model[]) {\r\n        super();\r\n        this.#items = items?.slice() ?? [];\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        super.setParent(parentNode);\r\n        this.#items.forEach((item_i) => {\r\n            item_i.setParent(parentNode);\r\n        });\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    get(index: number): Model | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    index(item: Model, fromIndex?: number): number {\r\n        return this.#items.indexOf(item, fromIndex)\r\n    }\r\n\r\n    values(): IterableIterator<Model> {\r\n        return this.#items.values();\r\n    }\r\n\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void {\r\n        const items = this.#items;\r\n        const indexedItems = items.map(\r\n            (item_i, i) => {\r\n                return {\r\n                    item: item_i,\r\n                    index: i\r\n                };\r\n            }\r\n        );\r\n        indexedItems.sort(\r\n            (indexedItem_a, indexedItem_b) => {\r\n                return compareFunction(\r\n                    indexedItem_a.item, indexedItem_b.item\r\n                )\r\n            }\r\n        );\r\n        this.#items = indexedItems.map(indexedItem_i => indexedItem_i.item);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_SORT,\r\n            sortedIndices: indexedItems.map(indexedItem_i => indexedItem_i.index)\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    prepend(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.splice(0, 0, ...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: 0,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    append(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.push(...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: length,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    insert(index: number, ...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const positiveIndex = Math.abs(index);\r\n        if (positiveIndex <= length) {\r\n            if (index >= 0) {\r\n                const {parentNode} = this;\r\n                items.forEach(item_i => {\r\n                    item_i.setParent(parentNode);\r\n                });\r\n                if (index < length) {\r\n                    _items.splice(index, 0, ...items);\r\n                }\r\n                else {\r\n                    _items.push(...items);\r\n                }\r\n            }\r\n            else if (index < 0) {\r\n                index = length - index;\r\n                const {parentNode} = this;\r\n                if (parentNode) {\r\n                    items.forEach(item_i => {\r\n                        item_i.setParent(parentNode);\r\n                    });\r\n                }\r\n                _items.splice(index, 0, ...items);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_INSERT,\r\n                insertedIndex: index,\r\n                insertedItems: items.slice()\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    remove(item: Model): void {\r\n        const _items = this.#items;\r\n        const index = _items.indexOf(item);\r\n        if (index > -1) {\r\n            const item = _items.splice(index, 1)[0];\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                item.setParent(null);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: index,\r\n                removedItems: [item]\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    clear(): void {\r\n        const items = this.#items;\r\n        const {length} = items;\r\n        if (length > 0) {\r\n            const removedItems = items.splice(0);\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                removedItems.forEach((removedItem_i) => {\r\n                    removedItem_i.setParent(null);\r\n                });\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: 0,\r\n                removedItems: removedItems\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n};\r\n\r\nvar ModelList: ModelListConstructor = ModelListBase!;\r\n\r\ninterface ModelChangeObserverConstructor {\r\n    prototype: ModelChangeObserver;\r\n    new(callback: (records: ModelChangeRecord[]) => void): ModelChangeObserver;\r\n}\r\n\r\ninterface ModelChangeObserver {\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void;\r\n    unobserve(node: ModelNode): void;\r\n    disconnect(): void;\r\n}\r\n\r\ntype ModelChangeObserverOptions = {\r\n    properties?: boolean;\r\n    propertiesFilter?: string[];\r\n    childList?: boolean;\r\n    subtree?: boolean;\r\n}\r\n\r\nclass ModelChangeObserverBase implements ModelChangeObserver {\r\n    #callback: (records: ModelChangeRecord[]) => void;\r\n    #records: ModelChangeRecord[];\r\n    #disconnected: boolean;\r\n\r\n    #references: WeakMap<ModelNode, {\r\n        listener: (event: ModelEvent) => void,\r\n        options: ModelChangeObserverOptions\r\n    }>;\r\n\r\n    constructor(callback: (records: ModelChangeRecord[]) => void) {\r\n        this.#callback = callback;\r\n        this.#records = [];\r\n        this.#disconnected = false;\r\n        this.#references = new WeakMap();\r\n    }\r\n\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void {\r\n        this.#disconnected = false;\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (!reference) {\r\n            const listener = this.#handleModelEvent.bind(this);\r\n            node.addEventListener(\"modelchange\", listener);\r\n            reference = {listener, options};\r\n            references.set(node, reference);\r\n        }\r\n        else {\r\n            references.set(node, reference);\r\n        }\r\n    }\r\n\r\n    unobserve(node: ModelNode): void {\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (reference) {\r\n            const {listener} = reference;\r\n            node.removeEventListener(\"modelchange\", listener);\r\n        }\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#records.splice(0);\r\n        this.#disconnected = true;\r\n    }\r\n\r\n    #trigger(): void {\r\n        const records = this.#records.splice(0);\r\n        if (records.length > 0) {\r\n            this.#callback(records);\r\n        }\r\n    }\r\n\r\n    #handleModelEvent(event: ModelEvent): void {\r\n        if (!this.#disconnected) {\r\n            const {target, currentTarget} = event;\r\n            const reference = this.#references.get(<ModelNode>currentTarget);\r\n            if (reference) {\r\n                const {options} = reference;\r\n                const {properties, propertiesFilter, childList, subtree} = options;\r\n                if (subtree) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n                else if (target == currentTarget) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelChangeObserver: ModelChangeObserverConstructor = ModelChangeObserverBase;","export { getPropertyFromPath };\r\nexport { setPropertyFromPath };\r\nexport { snakeToCamel };\r\nexport { camelToSnake };\r\nexport { trainToCamel };\r\nexport { camelToTrain };\r\n\r\nfunction getPropertyFromPath(src: object, path: string): any {\r\n  const props = path.split(\".\");\r\n  let obj: {[key: string]: any} | undefined  = src;\r\n  props.forEach((prop) => {\r\n    if (prop.includes(\"[\")) {\r\n      const index = parseInt(prop.substring(prop.indexOf(\"[\") + 1, prop.indexOf(\"]\")));\r\n      if (Number.isNaN(index)) {\r\n        console.error(`Wrong indexed path: ${prop}`);\r\n      }\r\n      prop = prop.substring(0, prop.indexOf(\"[\"));\r\n      if (typeof obj == \"object\" && prop in obj && Array.isArray(obj[prop])) {\r\n        obj = obj[prop][index];\r\n      }\r\n    }\r\n    else if (typeof obj == \"object\" && prop in obj) {\r\n      obj = obj[prop];\r\n    }\r\n    else {\r\n      obj = undefined;\r\n    }\r\n  });\r\n  return obj;\r\n}\r\n\r\nfunction setPropertyFromPath(src: object, path: string, value: any): object {\r\n  const props = path.split(\".\");\r\n  let obj: {[key: string]: any} = src;\r\n  if (src == null) {\r\n    console.error(\"Source data can't be null\");\r\n  }\r\n  props.forEach((prop, idx) => {\r\n    if (prop.includes(\"[\")) {\r\n      const index = parseInt(prop.substring(prop.indexOf(\"[\") + 1, prop.indexOf(\"]\")));\r\n      if (Number.isNaN(index)) {\r\n        console.error(`Wrong indexed path: ${prop}`);\r\n      }\r\n      prop = prop.substring(0, prop.indexOf(\"[\"));\r\n      if (!Array.isArray(obj[prop])) {\r\n        obj[prop] = [];\r\n      }\r\n      if (idx == props.length - 1) {\r\n        obj[prop][index] = value;\r\n      }\r\n      else {\r\n        if (typeof obj[prop][index] !== \"object\") {\r\n          obj[prop][index] = {}\r\n        }\r\n        obj = obj[prop][index];\r\n      }\r\n    }\r\n    else {\r\n      if (idx == props.length - 1) {\r\n        obj[prop] = value;\r\n      }\r\n      else {\r\n        if (typeof obj[prop] !== \"object\") {\r\n          obj[prop] = {}\r\n        }\r\n        obj = obj[prop];\r\n      }\r\n    }\r\n  });\r\n  return src;\r\n}\r\n\r\nfunction snakeToCamel(str: string) {\r\n  return str.split('_').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToSnake(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '_').toLowerCase();\r\n}\r\n\r\nfunction trainToCamel(str: string) {\r\n  return str.split('-').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToTrain(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '-').toLowerCase();\r\n}","import { ModelList, ModelNode, ModelChangeRecord, ModelChangeObserver, ModelChangeObserverOptions } from \"../models/Model\";\r\nimport { camelToTrain } from \"./Snippets\";\r\n\r\nexport { subtreeNodes };\r\nexport { ancestorNodes };\r\nexport { CustomElement };\r\nexport { ReactiveChildElements };\r\nexport { QueryProperty };\r\nexport { QueryAllProperty };\r\nexport { AttributeProperty };\r\nexport { reactiveElement };\r\nexport { reactiveChildElements };\r\nexport { element };\r\nexport { fragment };\r\nexport { textNode };\r\nexport { AttributeMutationMixin };\r\nexport { AttributeType };\r\nexport { areAttributesMatching };\r\nexport { AttributeMutationMixinBase };\r\nexport { trimMultilineIndent };\r\nexport { Stylesheet };\r\n\r\ninterface AttributePropertyDecorator {\r\n    (\r\n        init: {\r\n            type: typeof String;\r\n            observed?: boolean;\r\n            defaultValue?: string | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Number;\r\n            observed?: boolean;\r\n            defaultValue?: number | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Boolean;\r\n            observed?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Object;\r\n            observed?: boolean;\r\n            defaultValue?: any | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n}\r\n\r\nconst AttributeProperty: AttributePropertyDecorator = function(\r\n    init: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Object;\r\n        observed?: boolean;\r\n        defaultValue?: string | number | any | null;\r\n    }\r\n) {\r\n    return <E extends HTMLElement>(\r\n        target: E, property: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(property);\r\n        const attributeName = camelToTrain(propertyName);\r\n        const defaultValue = init.defaultValue ?? null;\r\n        const observed = init.observed ?? false;\r\n        if (observed) {\r\n            const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n            if (Array.isArray(observedAttributes)) {\r\n                observedAttributes.push(attributeName);\r\n            }\r\n            else {\r\n                Object.defineProperty(\r\n                    constructor, \"observedAttributes\", {\r\n                        value: [attributeName],\r\n                        writable: false\r\n                    }\r\n                );\r\n            }\r\n        }\r\n        const {type} = init;\r\n        switch (type) {\r\n            case Boolean: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        return this.hasAttribute(attributeName);\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value) {\r\n                            this.setAttribute(attributeName, \"\");\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Object: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? JSON.parse(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, JSON.stringify(value));\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Number: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? parseFloat(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case String:\r\n            default: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? val : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n    \r\nfunction Stylesheet(text: string): CSSStyleSheet {\r\n    const stylesheet = new CSSStyleSheet();\r\n    (stylesheet as any).replaceSync(text);\r\n    return stylesheet;\r\n}\r\n\r\nfunction trimMultilineIndent(text: string): string {\r\n    const newlineIndex = text.indexOf(\"\\n\");\r\n    text = text.substring(newlineIndex + 1);\r\n    const indentMatch = text.match(/^[\\s]*/);\r\n    if (indentMatch) {\r\n        const indent = text.substring(0, indentMatch[0].length);\r\n        text = text.replaceAll(indent, \"\").trimEnd();\r\n    }\r\n    return text;\r\n}\r\n\r\ninterface CustomElementDecorator {\r\n    (init: {\r\n        name: string;\r\n        options?: ElementDefinitionOptions\r\n    }): <C extends CustomElementConstructor>(elementCtor: C) => C;\r\n}\r\n\r\nconst CustomElement: CustomElementDecorator = function(init: {\r\n    name: string;\r\n    options?: ElementDefinitionOptions\r\n}) {\r\n    return <C extends CustomElementConstructor>(\r\n        elementCtor: C\r\n    ) => {\r\n        const {name, options} = init;\r\n        if (!customElements.get(name)) {\r\n            customElements.define(\r\n                name,\r\n                elementCtor,\r\n                options\r\n            );\r\n        }\r\n        return elementCtor;\r\n    }\r\n}\r\n\r\nfunction *subtreeNodes(node: Node): Generator<Node> {\r\n    yield node;\r\n    const childNodes = node.childNodes;\r\n    const childNodesCount = childNodes.length;\r\n    let childIndex = 0;\r\n    while (childIndex < childNodesCount) {\r\n        const child = childNodes.item(childIndex);\r\n        if (child !== null) {\r\n            yield * subtreeNodes(child);\r\n        }\r\n        childIndex++;\r\n    }\r\n}\r\n\r\nfunction *ancestorNodes(node: Node): Generator<Node> {\r\n    const {parentNode} = node;\r\n    if (parentNode) {\r\n        yield parentNode;\r\n        yield *ancestorNodes(parentNode);\r\n    }\r\n}\r\n\r\ninterface QueryPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryProperty: QueryPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(propertyKey);\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return this.shadowRoot!.querySelector(selector);\r\n        } : function(this: HTMLElement) {\r\n            return this.querySelector(selector);\r\n        }\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\ninterface QueryAllPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryAllProperty: QueryAllPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(propertyKey);\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return Array.from(this.shadowRoot!.querySelectorAll(selector));\r\n        } : function(this: HTMLElement) {\r\n            return Array.from(this.querySelectorAll(selector));\r\n        };\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\nfunction fragment(...nodes: (Node | string)[]): DocumentFragment {\r\n    const fragment = document.createDocumentFragment();\r\n    fragment.append(...nodes);\r\n    return fragment;\r\n}\r\n\r\nfunction textNode(text: string): Node {\r\n    return document.createTextNode(text);\r\n}\r\n\r\ninterface HTMLElementInit {\r\n    options?: ElementCreationOptions,\r\n    attributes?: {\r\n        [name: string]: number | string | boolean | undefined\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    children?: Node | string | (Node | string)[] | NodeList | ReactiveChildElements,\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction element<E extends HTMLElementTagNameMap[K], K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): E;\r\nfunction element(\r\n    tagName: string, init?: HTMLElementInit): HTMLElement;\r\nfunction element<K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): HTMLElementTagNameMap[K] {\r\n    if (init) {\r\n        const {options, attributes, dataset, children, listeners} = init;\r\n        const element = document.createElement(tagName, options);\r\n        if (attributes) {\r\n            Object.entries(attributes).forEach(([attributeName, attributeValue]) => {\r\n                if (attributeValue !== undefined) {\r\n                    if (typeof attributeValue === \"boolean\") {\r\n                        element.toggleAttribute(camelToTrain(attributeName), attributeValue);\r\n                    }\r\n                    else {\r\n                        element.setAttribute(camelToTrain(attributeName), String(attributeValue));\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        if (dataset) {\r\n            const {dataset: elementDataset} = element;\r\n            Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                elementDataset[datasetEntry_i] = String(dataset[datasetEntry_i]);\r\n            });\r\n        }\r\n        if (children) {\r\n            if (typeof children === \"function\") {\r\n                element.append(...children(element));\r\n            }\r\n            else if (typeof children === \"object\" && \"length\" in children) {\r\n                element.append(...Array.from(children));\r\n            }\r\n            else {\r\n                element.append(children);\r\n            }\r\n        }\r\n        if (listeners) {\r\n            Object.entries(listeners).forEach(([name_i, listener_i]) => {\r\n                if (Array.isArray(listener_i)) {\r\n                    element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                }\r\n                else {\r\n                    element.addEventListener(name_i, listener_i);\r\n                }\r\n            });\r\n        }\r\n        return element;\r\n    }\r\n    return document.createElement(tagName);\r\n}\r\n\r\nconst reactiveElementsMap = new WeakMap<ModelNode, {\r\n    observerOptions: ModelChangeObserverOptions,\r\n    reactiveElementsArray: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }[]\r\n}>();\r\n\r\nconst reactiveElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    model: ModelNode,\r\n    reactiveElement: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }\r\n}) => {\r\n    const {model, reactiveElement} = heldValue;\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    if (reactiveElementsMapEntry !== undefined) {\r\n        const {reactiveElementsArray} = reactiveElementsMapEntry;\r\n        reactiveElementsArray.splice(reactiveElementsArray.indexOf(reactiveElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveElementsPropertyObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    records.forEach((record_i) => {\r\n        const {target, propertyName, oldValue, newValue} = record_i;\r\n        const {reactiveElementsArray} = reactiveElementsMap.get(target)!;\r\n        reactiveElementsArray.forEach(reactiveElement_i => {\r\n            const {elementRef, react, properties} = reactiveElement_i;\r\n            const element = elementRef.deref();\r\n            if (element) {\r\n                if (properties.includes(propertyName!)) {\r\n                    react(element, propertyName!, oldValue, newValue);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveElement<M extends ModelNode, E extends Element, K extends string>(\r\n    model: M,\r\n    element: E,\r\n    properties: K[],\r\n    react: (object: E, property: K, oldValue: any, newValue: any) => void\r\n): E;\r\nfunction reactiveElement<M extends ModelNode, E extends Element>(\r\n    model: M,\r\n    element: E,\r\n    properties: string[],\r\n    react: (element: E, property: string, oldValue: any, newValue: any) => void\r\n): E {\r\n    const elementRef = new WeakRef(element);\r\n    const reactiveElement = {elementRef, react, properties};\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    reactiveElementsFinalizationRegistry.register(element, {model, reactiveElement});\r\n    if (!reactiveElementsMapEntry) {\r\n        const observerOptions = {\r\n            properties: true,\r\n            propertiesFilter: properties\r\n        };\r\n        const reactiveElementsArray = [reactiveElement];\r\n        reactiveElementsMap.set(model, {observerOptions, reactiveElementsArray});\r\n        reactiveElementsPropertyObserver.observe(model, observerOptions);\r\n    }\r\n    else {\r\n        const {reactiveElementsArray, observerOptions} = reactiveElementsMapEntry;\r\n        const {propertiesFilter} = observerOptions;\r\n        reactiveElementsArray.push(reactiveElement);\r\n        observerOptions.propertiesFilter = propertiesFilter ?\r\n            propertiesFilter.concat(properties.filter(\r\n                property_i => !propertiesFilter.includes(property_i)\r\n            )) : Array.from(new Set(properties));\r\n    }\r\n    properties.forEach((property_i) => {\r\n        if (property_i in model) {\r\n            const value = Reflect.get(model, property_i, model);\r\n            if (value !== undefined) {\r\n                react(element, <any>property_i, <any>undefined, value);\r\n            }\r\n        }\r\n    });\r\n    return element;\r\n}\r\n\r\ninterface ReactiveChildElements {\r\n    (parent: Node & ParentNode): (Node | string)[]\r\n}\r\n\r\nconst reactiveChildElementsMap = new WeakMap<ModelList, {\r\n    reactiveChildElementsArray: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }[]\r\n}>();\r\n\r\nconst reactiveChildElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    list: ModelList,\r\n    reactiveChildElement: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }\r\n}) => {\r\n    const {list, reactiveChildElement} = heldValue;\r\n    const reactiveChildrenElementsMapEntry = reactiveChildElementsMap.get(list);\r\n    if (reactiveChildrenElementsMapEntry) {\r\n        const {reactiveChildElementsArray} = reactiveChildrenElementsMapEntry;\r\n        reactiveChildElementsArray.splice(reactiveChildElementsArray.indexOf(reactiveChildElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveChildElementsObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    let range: null | Range = null;\r\n    Array.from(records.values()).forEach((record_i) => {\r\n        const {target} = record_i;\r\n        const list = <ModelList>target;\r\n        const {length: listLength} = list;\r\n        const {reactiveChildElementsArray} = reactiveChildElementsMap.get(list)!;\r\n        reactiveChildElementsArray.forEach((reactiveChildElements_i) => {\r\n            const {parentRef, mapping, placeholder} = reactiveChildElements_i;\r\n            const parent = parentRef.deref();\r\n            if (parent) {\r\n                const {firstChild, children} = parent;\r\n                const {length: childrenCount} = children;\r\n                if (placeholder && listLength > 0 && firstChild == placeholder) {\r\n                    parent.removeChild(placeholder);\r\n                }\r\n                const {changeType, LIST_INSERT, LIST_REMOVE, LIST_SORT} = record_i;\r\n                switch (changeType) {\r\n                    case LIST_INSERT: {\r\n                        const {insertedIndex, insertedItems} = record_i;\r\n                        const insertedItemsArray = Array.from(insertedItems.values()).map(mapping);\r\n                        const {length: childrenCount} = children;\r\n                        if (insertedIndex < childrenCount) {\r\n                            children[insertedIndex].before(...insertedItemsArray);\r\n                        }\r\n                        else {\r\n                            parent.append(...insertedItemsArray);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_REMOVE: {\r\n                        const {removedIndex, removedItems} = record_i;\r\n                        const {length: removedCount} = removedItems;\r\n                        range = range ?? document.createRange();\r\n                        const removeEndIndex = removedIndex + (removedCount - 1);\r\n                        if (removeEndIndex < childrenCount) {\r\n                            range.setStartBefore(children[removedIndex]);\r\n                            range.setEndAfter(children[removeEndIndex]);\r\n                            range.deleteContents();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_SORT: {\r\n                        const {sortedIndices} = record_i;\r\n                        const childrenArray = Array.from(children);\r\n                        parent.append(\r\n                            ...sortedIndices.filter(\r\n                                index_i => index_i < childrenCount\r\n                            ).map(\r\n                                index_i => childrenArray[index_i]\r\n                            )\r\n                        );\r\n                        break;\r\n                    }\r\n                }\r\n                if (listLength == 0 && placeholder) {\r\n                    parent.append(placeholder);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveChildElements<Model extends ModelNode>(\r\n    list: ModelList<Model>,\r\n    mapping: (item: Model) => Element,\r\n    placeholder?: Element\r\n): ReactiveChildElements {\r\n    return (parent: Node & ParentNode) => {\r\n        const parentRef = new WeakRef(parent);\r\n        const reactiveChildElementsMapEntry = reactiveChildElementsMap.get(list);\r\n        const reactiveChildElement = {parentRef, mapping, placeholder};\r\n        reactiveChildElementsFinalizationRegistry.register(parent, {list, reactiveChildElement});\r\n        if (!reactiveChildElementsMapEntry) {\r\n            const reactiveChildElementsArray = [reactiveChildElement];\r\n            reactiveChildElementsMap.set(list, {reactiveChildElementsArray});\r\n            reactiveChildElementsObserver.observe(list, {\r\n                childList: true\r\n            });\r\n        }\r\n        else {\r\n            const {reactiveChildElementsArray} = reactiveChildElementsMapEntry;\r\n            reactiveChildElementsArray.push(reactiveChildElement);\r\n        }\r\n        return list.length == 0 && placeholder ?\r\n            [placeholder] : Array.from(list.values()).map(mapping);\r\n    }\r\n}\r\n\r\ninterface AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n    attach(element: Element): void;\r\n    detach(element: Element): void;\r\n}\r\n\r\ntype AttributeType = \"string\" | \"boolean\" | \"list\";\r\n\r\nfunction areAttributesMatching(\r\n    referenceAttributeType: AttributeType,\r\n    referenceAttributeName: string, referenceAttributeValue: string,\r\n    attributeName: string, attributeValue: string | null): boolean {\r\n    if (referenceAttributeName == attributeName) {\r\n        switch (referenceAttributeType) {\r\n            case \"boolean\":\r\n                return referenceAttributeValue == \"\" && attributeValue == \"\";\r\n            case \"string\":\r\n                return referenceAttributeValue !== \"\" && (referenceAttributeValue == attributeValue);\r\n            case \"list\":\r\n                return (referenceAttributeValue !== \"\" && attributeValue !== null) && new RegExp(`${referenceAttributeValue}\\s*?`, \"g\").test(attributeValue );\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nclass AttributeMutationMixinBase implements AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n\r\n    constructor(attributeName: string, attributeType: AttributeType = \"boolean\", attributeValue: string = \"\") {\r\n        this.attributeName = attributeName;\r\n        this.attributeType = attributeType;\r\n        this.attributeValue = attributeValue;\r\n    }\r\n\r\n    attach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n\r\n    detach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n}","import { CustomElement, AttributeProperty, QueryProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\n\r\nexport { HTMLEMenuItemElement };\r\nexport { EMenuItem };\r\n\r\ninterface HTMLEMenuItemElementConstructor {\r\n    prototype: HTMLEMenuItemElement;\r\n    new(): HTMLEMenuItemElement;\r\n}\r\n\r\ninterface HTMLEMenuItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    get menu(): HTMLEMenuElement | null;\r\n    name: string;\r\n    label: string | null;\r\n    value: string;\r\n    hotkey: string;\r\n    disabled: boolean;\r\n    checked: boolean;\r\n    expanded: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitem\": HTMLEMenuItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitem\"\r\n})\r\nclass HTMLEMenuItemElementBase extends HTMLElement implements HTMLEMenuItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n    \r\n    @QueryProperty({selector: \":scope > e-menu[slot=menu]\"})\r\n    menu!: HTMLEMenuElement | null;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string | null;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    hotkey!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    checked!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    expanded!: boolean;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"button\", observed: true})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n\r\n    attributeChangedCallback(attributeName: string, oldValue: string | null, newValue: string | null) {\r\n        const {internals} = this;\r\n        switch (attributeName) {\r\n            case \"type\": {\r\n                switch (newValue) {\r\n                    case \"checkbox\":\r\n                    case \"radio\": {\r\n                        internals.role = `menuitem${newValue}`;\r\n                        break;\r\n                    }\r\n                    default: {\r\n                        internals.role = \"menuitem\";\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"checked\": {\r\n                internals.ariaChecked = String(newValue !== null);\r\n                break;\r\n            }\r\n            case \"disabled\": {\r\n                internals.ariaDisabled = String(newValue !== null);\r\n                break;\r\n            }\r\n            case \"expanded\": {\r\n                internals.ariaExpanded = String(newValue !== null);\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                internals.ariaLabel = newValue;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"icon\"\r\n                }\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"label\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"arrow\"\r\n                }\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const internals = this.attachInternals();\r\n        this.internals = internals;\r\n        internals.role = \"menuitem\";\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                const expand = force ?? !expanded;\r\n                this.expanded = expand;\r\n                if (expand) {\r\n                    this.#positionMenu();\r\n                }\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (!expanded) {\r\n                    this.expanded = true;\r\n                    this.#positionMenu();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (expanded) {\r\n                    this.expanded = false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const {type} = this;\r\n            if (type == \"menu\") {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const closestMenu = this.closest(\"e-menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    const overflowX = itemRight + menuWidth - clientWidth;\r\n                    const overflowY = itemTop + menuHeight - clientHeight;\r\n                    menuStyle.setProperty(\"left\", `${\r\n                        overflowX > 0 ?\r\n                        itemLeft - menuWidth - closestMenuLeft :\r\n                        itemRight - closestMenuLeft\r\n                    }px`);\r\n                    const menuComputedStyle = window.getComputedStyle(menu);\r\n                    const {paddingTop, paddingBottom} = menuComputedStyle;\r\n                    const menuPaddingTop = parseFloat(paddingTop);\r\n                    const menuPaddingBottom = parseFloat(paddingBottom);\r\n                    menuStyle.setProperty(\"top\", `${\r\n                        overflowY > 0 ?\r\n                        itemBottom - menuHeight - closestMenuTop + menuPaddingBottom :\r\n                        itemTop - closestMenuTop - menuPaddingTop\r\n                    }px`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetMenuItem = (<HTMLElement>target).closest(\"e-menuitem\");\r\n        if (targetMenuItem === this) {\r\n            const {type} = this;\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.checked = !this.checked;\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.checked = true;\r\n                    break;\r\n                }\r\n                case \"menu\":\r\n                case \"submenu\": {\r\n                    this.toggle();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemElement: HTMLEMenuItemElementConstructor = HTMLEMenuItemElementBase;\r\n\r\ninterface EMenuItemConstructor {\r\n    prototype: HTMLEMenuItemElement;\r\n    new(init: {\r\n        name?: string;\r\n        label: string;\r\n        type?: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    button(init: {\r\n        name?: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    checkbox(init: {\r\n        name?: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    radio(init: {\r\n        name?: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    menu(init: {\r\n        name?: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    submenu(init: {\r\n        name?: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n}\r\n\r\nvar EMenuItem = <EMenuItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string;\r\n        label: string;\r\n        type?: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menu} = init;\r\n        if (menu) {\r\n            menu.slot = \"menu\";\r\n        }\r\n        return element(\"e-menuitem\", {\r\n            attributes: {\r\n                tabindex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type\r\n            },\r\n            children: menu ? [\r\n                label,\r\n                menu\r\n            ] : [\r\n                label\r\n            ],\r\n            listeners: {\r\n                trigger: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemElement.prototype,\r\n        button(init: {\r\n            name?: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name?: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name?: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menu(init: {\r\n            name?: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"menu\"\r\n            });\r\n        },\r\n        submenu(init: {\r\n            name?: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"submenu\"\r\n            });\r\n        }\r\n    }\r\n);","import { ModelObject } from \"../models/Model\";\r\n\r\nexport { View };\r\n\r\ninterface View extends HTMLElement {\r\n    readonly model: ModelObject | null;\r\n    setModel(model: ModelObject): void;\r\n    renderShadow(): Node | undefined;\r\n    renderLight(): Node | undefined;\r\n    refresh(): void;\r\n}\r\n\r\ninterface ViewConstructor {\r\n    prototype: View;\r\n    new(): View;\r\n}\r\n\r\nclass ViewBase extends HTMLElement implements View {\r\n    #model: ModelObject | null;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#model = null;\r\n    }\r\n\r\n    get model(): ModelObject | null {\r\n        return this.#model;\r\n    }\r\n    \r\n    setModel(model: ModelObject): void {\r\n        if (model !== this.#model) {\r\n            this.#model = model;\r\n            this.#render();\r\n        }\r\n    }\r\n\r\n    renderLight(): Node | undefined {\r\n        return;\r\n    }\r\n\r\n    renderShadow(): Node | undefined {\r\n        return;\r\n    }\r\n\r\n    refresh(): void {\r\n        this.#render();\r\n    }\r\n\r\n    #render(): void {\r\n        const {shadowRoot} = this;\r\n        if (shadowRoot !== null) {\r\n            const shadow = this.renderShadow();\r\n            if (shadow) {\r\n                shadowRoot.replaceChildren(shadow);\r\n            }\r\n        }\r\n        const light = this.renderLight();\r\n        if (light) {\r\n            this.replaceChildren(light);\r\n        }\r\n    }\r\n}\r\n\r\nvar View: ViewConstructor = ViewBase;","import { element, reactiveChildElements, CustomElement, fragment, AttributeProperty, reactiveElement } from \"../elements/Element\";\r\nimport { ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\nimport { HTMLEGridCellElement } from \"../elements/containers/grid/GridCell\";\r\nimport { HTMLEGridElement } from \"../elements/containers/grid/Grid\";\r\nimport { HTMLEGridRowElement } from \"../elements/containers/grid/GridRow\";\r\nimport { HTMLEMenuItemElement } from \"../elements/containers/menus/MenuItem\";\r\n\r\nexport { GridModel };\r\nexport { GridRowModel };\r\nexport { GridColumnModel };\r\nexport { GridView };\r\n\r\nclass GridModel extends ModelObject {\r\n    readonly rows: ModelList<GridRowModel>;\r\n    readonly columns: ModelList<GridColumnModel>;\r\n\r\n    constructor()\r\n    constructor(init: {rows: GridRowModel[], columns: GridColumnModel[]})\r\n    constructor(init?: {rows: GridRowModel[], columns: GridColumnModel[]}) {\r\n        super();\r\n        const {rows: initRows = [], columns: initColumns = []} = init ?? {};\r\n        const rows = new ModelList(initRows);\r\n        rows.setParent(this);\r\n        this.rows = rows;\r\n        const columns = new ModelList(initColumns);\r\n        columns.setParent(this);\r\n        this.columns = columns;\r\n    }\r\n\r\n    getColumnByName(name: string): GridColumnModel | null {\r\n        return Array.from(this.columns.values()).find(\r\n            column_i => column_i.name == name\r\n        ) ?? null;\r\n    }\r\n\r\n    sortByColumn(column: GridColumnModel, sortOrder: number) {\r\n        Array.from(this.columns.values()).forEach((column_i) => {\r\n            column_i.sortorder = column_i === column ? sortOrder : undefined;\r\n        });\r\n        const sortTest = (() => {\r\n            const {type} = column;\r\n            switch (type) {\r\n                case String: {\r\n                    return (row_1: GridRowModel, row_2: GridRowModel) => {\r\n                        const cell_1 = String(column.extract(row_1));\r\n                        const cell_2 = String(column.extract(row_2));\r\n                        return sortOrder * cell_1.localeCompare(cell_2);\r\n                    };\r\n                }\r\n                default: {\r\n                    return (row_1: GridRowModel, row_2: GridRowModel) => {\r\n                        const cell_1 = Number(column.extract(row_1));\r\n                        const cell_2 = Number(column.extract(row_2));\r\n                        return Math.sign(sortOrder * (cell_1 - cell_2));\r\n                    };\r\n                }\r\n            }\r\n        })();\r\n        this.rows.sort(sortTest);\r\n    }\r\n}\r\n\r\ntype Constructor = {\r\n    new(...args: any): any;\r\n    prototype: any;\r\n}\r\n\r\ntype GridRowFilter = {\r\n    filter: (row: GridRowModel) => boolean;\r\n}\r\n\r\nclass GridColumnModel<T extends Constructor = Constructor> extends ModelObject {\r\n    readonly name: string\r\n    readonly type: NumberConstructor | StringConstructor | DateConstructor;\r\n    readonly label: string;\r\n    readonly extract: (row: GridRowModel) => InstanceType<T>;\r\n    readonly filters: (GridRowFilter & {name: string})[];\r\n\r\n    @ModelProperty()\r\n    sortorder: number | undefined;\r\n\r\n    constructor(init: {\r\n        name: string,\r\n        type: NumberConstructor | StringConstructor | DateConstructor,\r\n        label: string,\r\n        extract: (row: GridRowModel) => InstanceType<T>,\r\n        filters?: (GridRowFilter & {name: string})[]\r\n    }) {\r\n        super();\r\n        const {name, type, label, extract, filters = []} = init;\r\n        this.name = name;\r\n        this.type = type;\r\n        this.label = label;\r\n        this.extract = extract;\r\n        this.filters = filters;\r\n        this.sortorder = 1;\r\n    }\r\n}\r\n\r\nclass GridRowModel extends ModelObject {\r\n    id: number;\r\n\r\n    @ModelProperty()\r\n    name: string;\r\n\r\n    @ModelProperty()\r\n    age: number;\r\n    \r\n    constructor(init: {\r\n        id: number;\r\n        name: string,\r\n        age: number\r\n    }) {\r\n        super();\r\n        const {id, name, age} = init;\r\n        this.id = id;\r\n        this.name = name;\r\n        this.age = age;\r\n    }\r\n}\r\n\r\ninterface GridViewConstructor {\r\n    prototype: GridView;\r\n    new(): GridView;\r\n    new(model: GridModel): GridView;\r\n}\r\n\r\ninterface GridView extends View {\r\n    readonly shadowRoot: ShadowRoot;\r\n    model: GridModel;\r\n    resizable: boolean;\r\n    sortable: boolean;\r\n    setColumnDelegate(delegate: (column: GridColumnModel) => string | Node): void;\r\n    setCellDelegate(delegate: (row: GridRowModel, column: GridColumnModel) => string | Node): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridview\": GridView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-gridview\"\r\n})\r\nclass GridViewBase extends View implements GridView {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly model!: GridModel;\r\n\r\n    #columnDelegate: (column: GridColumnModel) => string | Node;\r\n    #cellDelegate: (row: GridRowModel, column: GridColumnModel) => string | Node;\r\n    \r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    resizable!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    sortable!: boolean;\r\n\r\n    #displayFilters: (GridRowFilter & {name: string})[];\r\n    #searchFilter: GridRowFilter | null;\r\n    \r\n    constructor()\r\n    constructor(model: GridModel)\r\n    constructor(model?: GridModel) {\r\n        super();\r\n        this.#displayFilters = [];\r\n        this.#searchFilter = null;\r\n        this.attachShadow({mode: \"open\"});\r\n        this.#cellDelegate =\r\n            (row: GridRowModel, column: GridColumnModel) =>\r\n                element(\"label\", {\r\n                    children: column.extract(row)\r\n                });\r\n        this.#columnDelegate =\r\n            (column: GridColumnModel) =>\r\n                element(\"label\", {\r\n                    children: column.label\r\n                });\r\n        this.setModel(model ?? new GridModel());\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"resizable\":\r\n            case \"sortable\": {\r\n                this.refresh();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    get gridElement(): HTMLEGridElement {\r\n        return this.shadowRoot.querySelector(\"e-grid\")!;\r\n    }\r\n\r\n    setColumnDelegate(delegate: (column: GridColumnModel) => string | Node): void {\r\n        this.#columnDelegate = delegate;\r\n    }\r\n\r\n    setCellDelegate(delegate: (row: GridRowModel, column: GridColumnModel) => string | Node): void {\r\n        this.#cellDelegate = delegate;\r\n    }\r\n\r\n    getRowElement(row: GridRowModel): HTMLEGridRowElement | null {\r\n        return this.shadowRoot.querySelector(`e-grid > e-gridbody > e-gridrow[data-index='${row.id}']`);\r\n    }\r\n\r\n    getColumnHeaderElement(column: GridColumnModel): HTMLEGridCellElement | null {\r\n        return this.shadowRoot.querySelector(`e-grid > e-gridhead > e-gridcell[id=${column.name}]`);\r\n    }\r\n    \r\n    getColumnCellsElements(column: GridColumnModel): HTMLEGridCellElement[] {\r\n        return Array.from(this.shadowRoot.querySelectorAll(`e-grid > e-gridbody > e-gridrow > e-gridcell[headers~=${column.name}]`));\r\n    }\r\n\r\n    renderShadow(): Node {\r\n        const {model} = this;\r\n        return fragment(\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/main.css\"\r\n                }\r\n            }),\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/views/gridview.css\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                children: element(\"input\", {\r\n                    attributes: {\r\n                        type: \"search\"\r\n                    },\r\n                    listeners: {\r\n                        input: <EventListener>this.#handleSearchInputEvent.bind(this)\r\n                    }\r\n                })\r\n            }),\r\n            element(\"e-grid\", {\r\n                attributes: {\r\n                    tabindex: 0,\r\n                    selectby: \"row\",\r\n                    multisectable: true\r\n                },\r\n                children: [\r\n                    element(\"e-gridhead\", {\r\n                        children: reactiveChildElements(\r\n                            model.columns, column => this.#renderGridColumnHeaderCell(column)\r\n                        ),\r\n                        listeners: {\r\n                            contextmenu: <EventListener>this.#handleHeadContextMenuEvent.bind(this),\r\n                            click: <EventListener>this.#handleHeadClickEvent.bind(this)\r\n                        }\r\n                    }),\r\n                    element(\"e-gridbody\", {\r\n                        children: reactiveChildElements(\r\n                            model.rows, row => this.#renderGridBodyRow(row)\r\n                        )\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    #filter(row: GridRowModel): boolean {\r\n        const displayFilters = this.#displayFilters;\r\n        const searchFilter = this.#searchFilter;\r\n        return (displayFilters.length > 0 ? displayFilters.some(filter_i => filter_i.filter(row)) : true) &&\r\n        (searchFilter ? searchFilter.filter(row) : true);\r\n    }\r\n\r\n    setSearchFilter(filter: GridRowFilter | null): void {\r\n        const {model, gridElement} = this;\r\n        const {rows} = model;\r\n        this.#searchFilter = filter;\r\n        Array.from(rows.values()).forEach((row_i) => {\r\n            const rowElement = this.getRowElement(row_i);\r\n            if (rowElement) {\r\n                rowElement.hidden = !this.#filter(row_i);\r\n            }\r\n        });\r\n        gridElement.clearSelection();\r\n    }\r\n\r\n    addDisplayFilter(filter: (GridRowFilter & {name: string;})): void {\r\n        const {model, gridElement} = this;\r\n        const {rows} = model;\r\n        const displayFilters = this.#displayFilters;\r\n        if (!displayFilters.includes(filter)) {\r\n            displayFilters.push(filter);\r\n            Array.from(rows.values()).forEach((row_i) => {\r\n                const rowElement = this.getRowElement(row_i);\r\n                console.log(rowElement);\r\n                if (rowElement) {\r\n                    rowElement.hidden = !this.#filter(row_i);\r\n                }\r\n            });\r\n        }\r\n        gridElement.clearSelection();\r\n    }\r\n\r\n    removeDisplayFilter(filter: (GridRowFilter & {name: string;})): void {\r\n        const {model, gridElement} = this;\r\n        const {rows} = model;\r\n        const displayFilters = this.#displayFilters;\r\n        const filterIndex = displayFilters.indexOf(filter);\r\n        if (filterIndex > -1) {\r\n            displayFilters.splice(filterIndex, 1);\r\n            Array.from(rows.values()).forEach((row_i) => {\r\n                const rowElement = this.getRowElement(row_i);\r\n                if (rowElement) {\r\n                    rowElement.hidden = !this.#filter(row_i);\r\n                }\r\n            });\r\n        }\r\n        gridElement.clearSelection();\r\n    }\r\n\r\n    #renderGridColumnHeaderCell(column: GridColumnModel): Element {\r\n        const gridColumnElement = reactiveElement(\r\n            column,\r\n            element(\"e-gridcell\", {\r\n                attributes: {\r\n                    type: \"columnheader\",\r\n                    id: column.name\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            class: \"gridheader-content\"\r\n                        },\r\n                        children: (<Node[]>[\r\n                            element(\"span\", {\r\n                                attributes: {\r\n                                    class: \"gridheader-label\"\r\n                                },\r\n                                children: this.#columnDelegate(column)\r\n                            })\r\n                        ]).concat(\r\n                            this.resizable ? [\r\n                                element(\"e-wsash\", {\r\n                                    attributes: {\r\n                                        controls: column.name\r\n                                    }\r\n                                })\r\n                            ] : []\r\n                        )\r\n                    })\r\n                ]\r\n            }),\r\n            [\"sortorder\"],\r\n            (cell, property, oldValue, newValue) => {\r\n                switch (property) {\r\n                    case \"sortorder\":\r\n                        const {dataset} = cell;\r\n                        if (typeof newValue !== \"undefined\") {\r\n                            dataset.sortorder = newValue.toString();\r\n                        }\r\n                        else {\r\n                            delete dataset.sortorder;\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        );\r\n        return gridColumnElement;\r\n    }\r\n\r\n    #renderGridBodyRow(row: GridRowModel): Element {\r\n        const {model} = this;\r\n        const gridRowElement = element(\"e-gridrow\", {\r\n            dataset: {\r\n                index: row.id\r\n            },\r\n            children: reactiveChildElements(\r\n                model.columns, column => this.#renderGridDataCell(row, column)\r\n            )\r\n        });\r\n        return gridRowElement;\r\n    }\r\n\r\n    #renderGridDataCell(row: GridRowModel, column: GridColumnModel): Element {\r\n        const gridCellElement = element(\"e-gridcell\", {\r\n            attributes: {\r\n                type: \"gridcell\",\r\n                headers: column.name\r\n            },\r\n            children: element(\"span\", {\r\n                attributes: {\r\n                    class: \"gridcell-content\"\r\n                },\r\n                children: (<Node[]>[\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            class: \"gridcell-label\"\r\n                        },\r\n                        children: this.#cellDelegate(row, column)\r\n                    })\r\n                ])\r\n            })\r\n        });\r\n        return gridCellElement;\r\n    }\r\n\r\n    #handleHeadContextMenuEvent(event: MouseEvent): void {\r\n        const {clientX, clientY, currentTarget, target} = event;\r\n        const targetHead = <HTMLElement>currentTarget;\r\n        const targetHeader = <HTMLEGridCellElement>(<HTMLElement>target).closest(\"e-gridcell\");\r\n        const {model} = this;\r\n        if (targetHeader) {\r\n            const column = model.getColumnByName(targetHeader.id)!;\r\n            const contextMenu = element(\"e-menu\",  {\r\n                attributes: {\r\n                    contextual: true,\r\n                },\r\n                children: [\r\n                    element(\"e-menuitem\",  {\r\n                        attributes: {\r\n                            label: \"Resize Auto\"\r\n                        },\r\n                        children: \"Resize auto\",\r\n                        listeners: {\r\n                            click: () => {\r\n                                const columnHeaderElement = this.getColumnHeaderElement(column);\r\n                                if (columnHeaderElement) {\r\n                                    const {style} = columnHeaderElement;\r\n                                    const labels = this.getColumnCellsElements(column).map(\r\n                                        cell_i => cell_i.querySelector(\".gridcell-label\")!\r\n                                    );\r\n                                    const maxWidth = labels.reduce(\r\n                                        (maxWidth, label) => Math.max(maxWidth, label.getBoundingClientRect().width), 0\r\n                                    );\r\n                                    style.setProperty(\"width\", `${maxWidth}px`);\r\n                                }\r\n                            }\r\n                        }\r\n                    }),\r\n                    element(\"e-menuitem\",  {\r\n                        attributes: {\r\n                            label: \"Resize To Default\"\r\n                        },\r\n                        children: \"Resize to Default\",\r\n                        listeners: {\r\n                            click: () => {\r\n                                const columnHeaderElement = this.getColumnHeaderElement(column);\r\n                                if (columnHeaderElement) {\r\n                                    const {style} = columnHeaderElement;\r\n                                    style.removeProperty(\"width\");\r\n                                }\r\n                            }\r\n                        }\r\n                    }),\r\n                    element(\"e-menuitem\",  {\r\n                        attributes: {\r\n                            type: \"submenu\",\r\n                            label: \"Sort\",\r\n                        },\r\n                        children: [\r\n                            \"Sort\",\r\n                            element(\"e-menu\",  {\r\n                                attributes: {\r\n                                    slot: \"menu\"\r\n                                },\r\n                                children: [\r\n                                    element(\"e-menuitem\",  {\r\n                                        attributes: {\r\n                                            type: \"radio\",\r\n                                            name: \"sort\",\r\n                                            value: \"1\",\r\n                                            label: \"Ascending\"\r\n                                        },\r\n                                        children: \"Ascending\"\r\n                                    }),\r\n                                    element(\"e-menuitem\",  {\r\n                                        attributes: {\r\n                                            type: \"radio\",\r\n                                            name: \"sort\",\r\n                                            value: \"-1\",\r\n                                            label: \"Descending\"\r\n                                        },\r\n                                        children: \"Descending\"\r\n                                    })\r\n                                ],\r\n                                listeners: {\r\n                                    click: (event) => {\r\n                                        const {target} = event;\r\n                                        const targetItem = (<HTMLElement>target).closest(\"e-menuitem\");\r\n                                        if (targetItem) {\r\n                                            model.sortByColumn(column, Number(targetItem.value));\r\n                                        }\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    }),\r\n                    element(\"e-menuitem\",  {\r\n                        attributes: {\r\n                            type: \"submenu\",\r\n                            label: \"Filter\"\r\n                        },\r\n                        children: [\r\n                            \"Filter\",\r\n                            element(\"e-menu\",  {\r\n                                attributes: {\r\n                                    slot: \"menu\"\r\n                                },\r\n                                children: column.filters.map((filter_i, i) =>\r\n                                    element(\"e-menuitem\", {\r\n                                        attributes: {\r\n                                            type: \"checkbox\",\r\n                                            checked: this.#displayFilters.includes(filter_i),\r\n                                            label: filter_i.name\r\n                                        },\r\n                                        children: filter_i.name,\r\n                                        listeners: {\r\n                                            click: (event) => {\r\n                                                const {currentTarget} = event;\r\n                                                const targetItem = <HTMLEMenuItemElement>currentTarget;\r\n                                                const {checked} = targetItem;\r\n                                                if (checked) {\r\n                                                    this.addDisplayFilter(filter_i);\r\n                                                }\r\n                                                else {\r\n                                                    this.removeDisplayFilter(filter_i);\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    })\r\n                                )\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            });\r\n            targetHead.append(contextMenu);\r\n            contextMenu.positionContextual(clientX, clientY);\r\n            contextMenu.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleSearchInputEvent(event: InputEvent) {\r\n        const {target} = event;\r\n        if (target instanceof HTMLInputElement) {\r\n            const {value} = target;\r\n            this.setSearchFilter(value !== \"\" ? {\r\n                filter: (row) => row.name.toLowerCase().includes(value.toLowerCase())\r\n            } : null);\r\n        }\r\n    }\r\n\r\n    #handleHeadClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetIsHeaderLabel = (<HTMLElement>target).matches(\":is(.gridheader-label, .gridheader-label :scope)\");\r\n        if (targetIsHeaderLabel) {\r\n            const targetHeader = <HTMLEGridCellElement>(<HTMLElement>target).closest(\"e-gridcell\");\r\n            const {model} = this;\r\n            const {columns} = model;\r\n            if (targetHeader) {\r\n                const targetColumn = Array.from(columns.values()).find(column_i => column_i.name == targetHeader.id);\r\n                if (targetColumn) {\r\n                    const sortorder = targetColumn.sortorder !== undefined ? -targetColumn.sortorder : 1;\r\n                    model.sortByColumn(targetColumn, sortorder);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar GridView: GridViewConstructor = GridViewBase;","import { HTMLETreeElement } from \"../elements/containers/trees/Tree\";\r\nimport { HTMLETreeItemElement } from \"../elements/containers/trees/TreeItem\";\r\nimport { CustomElement, element, fragment, reactiveChildElements, reactiveElement } from \"../elements/Element\";\r\nimport { ModelEvent, ModelList, ModelObject } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\nimport { treeItemWidget } from \"./widgets/tree/TreeItemWidget\";\r\nimport { treeWidget } from \"./widgets/tree/TreeWidget\";\r\nimport { widget } from \"./widgets/Widget\";\r\n\r\nexport { TreeItemList };\r\nexport { TreeModel };\r\nexport { TreeItemModel };\r\nexport { TreeView };\r\n\r\nclass TreeModel extends ModelObject {\r\n    readonly items: ModelList<TreeItemModel>;\r\n    readonly childItems: ModelList<TreeItemModel>;\r\n    sortFunction: ((item_a: TreeItemModel, item_b: TreeItemModel) => number) | null;\r\n\r\n    constructor()\r\n    constructor(init: {\r\n        items: TreeItemModel[], sortFunction?: (item_a: TreeItemModel, item_b: TreeItemModel) => number;\r\n    })\r\n    constructor(init?: {\r\n        items: TreeItemModel[], sortFunction?: (item_a: TreeItemModel, item_b: TreeItemModel) => number;\r\n    }) {\r\n        super();\r\n        const {items, sortFunction} = init ?? {};\r\n        const childItems = new ModelList(items ?? []);\r\n        childItems.setParent(this);\r\n        this.childItems = childItems;\r\n        this.items = new ModelList(this.flattenItems());\r\n        this.sortFunction = sortFunction ??\r\n            function(item_a: TreeItemModel, item_b: TreeItemModel) {\r\n                return item_a.label.localeCompare(item_b.label);\r\n            };\r\n        this.addEventListener(\"modelchange\", this.#handleModelChangeEvent.bind(this));\r\n    }\r\n    \r\n    #handleModelChangeEvent(event: ModelEvent): void {\r\n        const {target} = event;\r\n        const {items, sortFunction, flattenItems} = this;\r\n        if (target instanceof ModelList) {\r\n            const records = target.getRecords();\r\n            records.forEach((record_i) => {\r\n                const {insertedItems, removedItems} = record_i;\r\n                const flattenedInsertedItems = (<TreeItemModel[]>Array.from(insertedItems.values())).flatMap(\r\n                    insertedItem_i => Array.of(insertedItem_i, ...flattenItems.call(insertedItem_i))\r\n                );\r\n                const flattenedRemovedItems = (<TreeItemModel[]>Array.from(removedItems.values())).flatMap(\r\n                    removedItem_i => Array.of(removedItem_i, ...flattenItems.call(removedItem_i))\r\n                );\r\n                items.beginChanges();\r\n                items.append(...flattenedInsertedItems);\r\n                flattenedRemovedItems.forEach((removedItem_i) => items.remove(removedItem_i));\r\n                if (sortFunction) items.sort(sortFunction);\r\n                items.endChanges();\r\n            });\r\n        }\r\n    }\r\n\r\n    flattenItems(this: TreeModel | TreeItemModel): TreeItemModel[] {\r\n        const {childItems} = this;\r\n        return Array.from(childItems.values()).flatMap(\r\n            treeItem_i => Array.of(treeItem_i, ...TreeModel.prototype.flattenItems.call(treeItem_i))\r\n        );\r\n    }\r\n\r\n    getItemByUri(this: TreeModel | TreeItemModel, uri: string): TreeItemModel | null {\r\n        const {childItems} = this;\r\n        const {length: itemsCount} = childItems;\r\n        const {length: uriLength} = uri;\r\n        for (let i = 0; i < itemsCount; i++) {\r\n            const item_i = childItems.get(i)!;\r\n            const {uri: itemUri} = item_i;\r\n            const {length: itemUriLength} = itemUri;\r\n            if (uri.startsWith(itemUri)) {\r\n                if (uri.charAt(itemUriLength) == \"/\") {\r\n                    return TreeModel.prototype.getItemByUri.call(item_i, uri);\r\n                }\r\n                else if (itemUriLength == uriLength) {\r\n                    return <TreeItemModel>item_i;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\nclass TreeItemList {\r\n    readonly items: TreeItemModel[];\r\n\r\n    constructor(items: TreeItemModel[]) {\r\n        this.items = items;\r\n    }\r\n\r\n    get count(): number {\r\n        return this.items.length;\r\n    }\r\n\r\n    remove(): void {\r\n        const {items} = this;\r\n        const removedItemsGroups = items.reduce((map, item_i) => {\r\n            const {parentNode} = item_i;\r\n            if (parentNode instanceof TreeItemModel || parentNode instanceof TreeModel) {\r\n                const {childItems} = parentNode;\r\n                const group = map.get(childItems);\r\n                if (group) group.push(item_i);\r\n                else map.set(childItems, [item_i]);\r\n            }\r\n            return map;\r\n        }, new Map<ModelList, TreeItemModel[]>());\r\n        Array.from(removedItemsGroups.entries()).forEach(\r\n            ([list_i, children_i]) => {\r\n                list_i.beginChanges();\r\n                children_i.forEach((child_i) => {\r\n                    list_i.remove(child_i);\r\n                });\r\n                list_i.endChanges();\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nclass TreeItemModel extends ModelObject {\r\n    readonly childItems: ModelList<TreeItemModel>;\r\n    readonly type: \"leaf\" | \"parent\";\r\n    readonly label: string;\r\n\r\n    get uri(): string {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return `${parentNode.uri}/${this.label}`;\r\n        }\r\n        return this.label;\r\n    }\r\n\r\n    get parentItem(): TreeItemModel | null {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return parentNode;\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    constructor(init: {label: string, type: \"leaf\" | \"parent\", items?: TreeItemModel[]}) {\r\n        super();\r\n        const {label, type, items} = init;\r\n        const childItems = new ModelList(items ?? []);\r\n        childItems.setParent(this);\r\n        this.childItems = childItems;\r\n        this.label = label;\r\n        this.type = type;\r\n    }\r\n    \r\n    remove(): void {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel || parentNode instanceof TreeModel) {\r\n            const {childItems} = parentNode;\r\n            if (childItems) {\r\n                childItems.remove(this);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface TreeViewConstructor {\r\n    prototype: TreeView;\r\n    new(): TreeView;\r\n    new(model: TreeModel): TreeView;\r\n}\r\n\r\ninterface TreeView extends View {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly model: TreeModel;\r\n    treeElement(): HTMLElement;\r\n    treeItemElement(item: TreeItemModel): HTMLElement;\r\n    itemContentDelegate: <Item extends TreeItemModel>(item: Item) => string | Node;\r\n    itemContextMenuDelegate: <Item extends TreeItemModel>(activeItem: Item, selectedItems: Item[]) => string | Node;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeview\": TreeView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-treeview\"\r\n})\r\nclass TreeViewBase extends View implements TreeView {\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly model!: TreeModel;\r\n    #dragImages: WeakMap<TreeItemModel, WeakRef<Element>>;\r\n\r\n    itemContentDelegate: <Item extends TreeItemModel>(item: Item) => string | Node;\r\n    itemContextMenuDelegate: <Item extends TreeItemModel>(activeItem: Item, selectedItems: Item[]) => string | Node;\r\n    \r\n    constructor()\r\n    constructor(model: TreeModel)\r\n    constructor(model?: TreeModel) {\r\n        super();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.#dragImages = new WeakMap();\r\n        this.itemContentDelegate = function(item: TreeItemModel) {\r\n            return reactiveElement(\r\n                item,\r\n                element(\"span\"),\r\n                [\"label\"],\r\n                (label, property, oldValue, newValue) => {\r\n                    label.textContent = newValue;\r\n                }\r\n            );\r\n        };\r\n        this.itemContextMenuDelegate = function(activeItem: TreeItemModel, selectedItems: TreeItemModel[]) {\r\n            return fragment(\r\n                element(\"e-menuitemgroup\", {\r\n                    children: [\r\n                        element(\"e-menuitem\", {\r\n                            attributes: {\r\n                                label: \"Delete\"\r\n                            },\r\n                            listeners: {\r\n                                click: () => {\r\n                                    const itemsList = new TreeItemList(selectedItems);\r\n                                    const {count} = itemsList;\r\n                                    const doRemove = confirm(`Remove ${count} items?`);\r\n                                    if (doRemove) {\r\n                                        itemsList.remove();\r\n                                    }\r\n                                }\r\n                            }\r\n                        })\r\n                    ]\r\n                })\r\n            );\r\n        };\r\n        this.setModel(model ?? new TreeModel());\r\n    }\r\n\r\n    treeElement(): HTMLETreeElement {\r\n        return this.shadowRoot.querySelector<HTMLETreeElement>(\"e-tree\")!;\r\n    }\r\n\r\n    treeItemElement(item: TreeItemModel): HTMLETreeItemElement {\r\n        return this.shadowRoot.querySelector<HTMLETreeItemElement>(`e-treeitem[uri=${item.uri}]`)!;\r\n    }\r\n\r\n    renderShadow(): Node {\r\n        const {model} = this;\r\n        const treeElement = element(\"e-tree\", {\r\n            attributes: {\r\n                tabindex: 0,\r\n            },\r\n            children: reactiveChildElements(\r\n                model.childItems, item => this.#renderTreeItem(item, model)\r\n            ),\r\n            listeners: {\r\n                dragstart: <EventListener>this.#handleDragStartEvent.bind(this),\r\n                drop: <EventListener>this.#handleDropEvent.bind(this),\r\n                contextmenu: <EventListener>this.#handleContextMenuEvent.bind(this),\r\n                keydown: <EventListener>this.#handleKeyDownEvent.bind(this),\r\n                //focusin: <EventListener>this.#handleFocusInEvent.bind(this),\r\n                //focusout: <EventListener>this.#handleFocusOutEvent.bind(this),\r\n            }\r\n        });\r\n        return fragment(\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/main.css\"\r\n                }\r\n            }),\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/views/gridview.css\"\r\n                }\r\n            }),\r\n            treeElement,\r\n            element(\"div\", {\r\n                attributes: {\r\n                    class: \"offscreen\",\r\n                    hidden: true\r\n                },\r\n                children: reactiveChildElements(model.items,\r\n                    item => this.#renderTreeItemDragImage(item)\r\n                )\r\n            })\r\n        );\r\n    }\r\n\r\n    selectedItems(tree: HTMLETreeElement): TreeItemModel[] {\r\n        const {model} = this;\r\n        const selectedElements = tree.selectedItems();\r\n        return selectedElements.map(\r\n            item_i => <TreeItemModel>model.getItemByUri(item_i.dataset.uri!)\r\n        );\r\n    }\r\n\r\n    #getDragImage(model: TreeItemModel): Element | null {\r\n        return this.#dragImages.get(model)?.deref() ?? null;\r\n    }\r\n\r\n    #renderTreeItem(item: TreeItemModel, model: TreeModel): Element {\r\n        const treeItemElement = /*widget(\"treeitem\", {\r\n            properties: {\r\n                type: item.type,\r\n                draggable: true\r\n            },\r\n            dataset: {\r\n                uri: item.uri\r\n            },\r\n            slotted: {\r\n                content: this.itemContentDelegate(item),\r\n                group:\r\n                    <Node[]>((item.type == \"parent\") ? [\r\n                    widget(\"treeitemgroup\", {\r\n                        slotted: reactiveChildElements(item.childItems,\r\n                            item => this.#renderTreeItem(item, model)\r\n                        )\r\n                    })\r\n                ] : [])\r\n            }\r\n        });*/\r\n        element(\"e-treeitem\", {\r\n            attributes: {\r\n                type: item.type,\r\n                draggable: String(true),\r\n                tabindex: -1\r\n            },\r\n            dataset: {\r\n                uri: item.uri\r\n            },\r\n            children: [\r\n                this.itemContentDelegate(item),\r\n                ].concat(\r\n                    (item.type == \"parent\") ? [\r\n                        element(\"e-treeitemgroup\", {\r\n                            attributes: {\r\n                                slot: \"group\"\r\n                            },\r\n                            children: reactiveChildElements(item.childItems,\r\n                                item => this.#renderTreeItem(item, model)\r\n                            )\r\n                        })\r\n                    ] : []\r\n                )\r\n        });\r\n        return treeItemElement;\r\n    }\r\n\r\n    #renderTreeItemDragImage(item: TreeItemModel): Element {\r\n        const dragImageElement = reactiveElement(\r\n            item,\r\n            element(\"span\", {\r\n                attributes: {\r\n                    class: \"dragimage\"\r\n                }\r\n            }),\r\n            [\"label\"],\r\n            (span, property, oldValue, newValue) => {\r\n                span.textContent = newValue;\r\n            }\r\n        );\r\n        this.#dragImages.set(item, new WeakRef(dragImageElement));\r\n        return dragImageElement;\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        // const targetTree = <HTMLElement>currentTarget;\r\n        // const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLETreeElement>currentTarget;\r\n        const targetItem = <HTMLETreeItemElement>(<HTMLElement>target).closest(\"e-treeitem\");\r\n        const {model} = this;\r\n        if (targetItem) {\r\n            const {dataTransfer} = event;\r\n            //const selectedElements = treeWidget.selectedItems(targetTree);\r\n            const selectedElements = targetTree.selectedItems();\r\n            const {length: selectedCount} = selectedElements;\r\n            if (selectedCount > 0) {\r\n                const selectedUris = \r\n                    selectedElements\r\n                    .map((element_i) =>\r\n                        element_i.dataset.uri!\r\n                    )\r\n                    .filter(\r\n                        (uri_i, _, uris) => !uris.some(\r\n                            uri_j => uri_i.startsWith(`${uri_j}/`)\r\n                        )\r\n                    );\r\n                const selectedUrisString = selectedUris.join(\"\\n\");\r\n                const lastUri = selectedUris[selectedUris.length - 1];\r\n                const lastItem = model.getItemByUri(lastUri);\r\n                if (lastItem && dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", selectedUrisString);\r\n                    const dragImage = this.#getDragImage(lastItem);\r\n                    if (dragImage) {\r\n                        dataTransfer.setDragImage(dragImage, -16, 0);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        // const targetTree = <HTMLElement>currentTarget;\r\n        // const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLETreeElement>currentTarget;\r\n        const targetItem = <HTMLETreeItemElement>(<HTMLElement>target).closest(\"e-treeitem\");\r\n        const {model} = this;\r\n        const {sortFunction} = model;\r\n        if (targetItem) {\r\n            const {dataTransfer} = event;\r\n            if (dataTransfer) {\r\n                const targetUri = targetItem.dataset.uri!;\r\n                const targetItemModel = model.getItemByUri(targetUri)!;\r\n                const transferedUris = dataTransfer.getData(\"text/plain\").split(\"\\n\");\r\n                const targetIsWithin = transferedUris.some(uri_i => targetUri.startsWith(`${uri_i}/`) || uri_i == targetUri);\r\n                if (!targetIsWithin) {\r\n                    const transferedItems = <TreeItemModel[]>transferedUris.map(\r\n                        uri_i => model.getItemByUri(uri_i)\r\n                    ).filter(\r\n                        item_i => item_i !== null\r\n                    );\r\n                    const {type: targetType, parentItem: targetParentItem} = targetItemModel;\r\n                    const {childItems: targetList} = targetType == \"parent\" ?\r\n                        targetItemModel :\r\n                        targetParentItem ?\r\n                        targetParentItem :\r\n                        model;\r\n                    const targetItems = Array.from(targetList.values());\r\n                    targetItems.forEach((item_i) => {\r\n                        const sameLabelIndex = transferedItems.findIndex(item_j => item_j.label == item_i.label);\r\n                        if (sameLabelIndex > -1) {\r\n                            const doReplace = confirm(`Replace ${item_i.label}?`);\r\n                            if (doReplace) {\r\n                                targetList.remove(item_i);\r\n                            }\r\n                            else {\r\n                                transferedItems.copyWithin(sameLabelIndex, sameLabelIndex + 1);\r\n                                transferedItems.length--;\r\n                            }\r\n                        }\r\n                    });\r\n                    const itemsList = new TreeItemList(transferedItems);\r\n                    itemsList.remove();\r\n                    if (sortFunction) {\r\n                        targetList.beginChanges();\r\n                        targetList.append(...transferedItems);\r\n                        targetList.sort(sortFunction);\r\n                        targetList.endChanges();\r\n                    }\r\n                    else {\r\n                        targetList.insert(/*treeItemWidget.getPosInSet(targetItem)*/targetItem.posinset, ...transferedItems);\r\n                    }\r\n                    \r\n                    const newElements = targetTree.querySelectorAll<HTMLETreeItemElement>(`e-treeitem:is(${\r\n                        transferedItems.map(item_i => `[data-uri=\"${item_i.uri}\"]`).join(\",\")\r\n                    })`);\r\n                    //treeWidget.beginSelection(targetTree);\r\n                    targetTree.beginSelection();\r\n                    newElements.forEach((element_i) => {\r\n                        /*treeItemWidget.setSelected(element_i, true);*/\r\n                        element_i.selected = true;\r\n                    });\r\n                    targetTree.endSelection();\r\n                    //treeWidget.endSelection(targetTree);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        const {clientX, clientY, currentTarget, target} = event;\r\n        // const targetTree = <HTMLElement>currentTarget;\r\n        // const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLETreeElement>currentTarget;\r\n        const targetItem = <HTMLETreeItemElement>(<HTMLElement>target).closest(\"e-treeitem\");\r\n        const {model} = this;\r\n        if (targetItem) {\r\n            const activeItem = model.getItemByUri(targetItem.dataset.uri!)!;\r\n            const contextMenu = element(\"e-menu\", {\r\n                attributes: {\r\n                    contextual: true,\r\n                    tabindex: -1\r\n                },\r\n                children: this.itemContextMenuDelegate(activeItem, this.selectedItems(targetTree)),\r\n                listeners: {\r\n                    close: () => {\r\n                        targetItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            });\r\n            targetTree.append(contextMenu);\r\n            contextMenu.positionContextual(clientX, clientY);\r\n            contextMenu.focus({preventScroll: true});\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    /*#handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetElement = <HTMLElement>target;\r\n        if (targetElement instanceof HTMLETreeItemElement) {\r\n            const targetItem = targetElement;\r\n            const toolbar = targetItem.querySelector<HTMLElement>(\"e-toolbar\");\r\n            if (toolbar) {\r\n                toolbar.tabIndex = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetElement = <HTMLElement>target;\r\n        if (targetElement instanceof HTMLETreeItemElement) {\r\n            const targetItem = targetElement;\r\n            const toolbar = targetItem.querySelector<HTMLElement>(\"e-toolbar\");\r\n            if (toolbar) {\r\n                toolbar.tabIndex = -1;\r\n            }\r\n        }\r\n    }*/\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        const targetTree = <HTMLETreeElement>currentTarget;\r\n        switch (key) {\r\n            case \"Delete\": {\r\n                const itemsList = new TreeItemList(this.selectedItems(targetTree));\r\n                const {count} = itemsList;\r\n                const doRemove = confirm(`Remove ${count} items?`);\r\n                if (doRemove) {\r\n                    itemsList.remove();\r\n                }\r\n                targetTree.focus();\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar TreeView: TreeViewConstructor = TreeViewBase;","import { ReactiveChildElements } from \"../../elements/Element\";\r\nimport { camelToTrain } from \"../../elements/Snippets\";\r\n\r\nexport { WidgetFactoryConstructor };\r\n\r\nexport { widget };\r\nexport { Widget };\r\nexport { WidgetFactory };\r\nexport { widgets };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {}\r\n}\r\n\r\ninterface WidgetFactoryConstructor {\r\n    prototype: WidgetFactory;\r\n    new(): WidgetFactory;\r\n}\r\n\r\ninterface WidgetFactory {\r\n    create(properties?: object): HTMLElement;\r\n    slot(root: HTMLElement, name: string | null): HTMLElement | null;\r\n}\r\n\r\nvar slotsMap: WeakMap<HTMLElement, {\r\n    widget: WidgetFactory,\r\n    element: WeakRef<HTMLElement>;\r\n    slot: string | null;\r\n}[]> = new WeakMap();\r\nvar slotsObserver = new MutationObserver(\r\n    (mutationsList: MutationRecord[]) => {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            if (target instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"childList\": {\r\n                        const slotReferences = slotsMap.get(target);\r\n                        if (slotReferences) {\r\n                            slotReferences.forEach(slotRef_i => {\r\n                                const {widget, element, slot} = slotRef_i;\r\n                                const slottedCallback = (widget as any)[\"slottedCallback\"];\r\n                                if (typeof slottedCallback == \"function\") {\r\n                                    slottedCallback(element.deref(), target, slot);\r\n                                }\r\n                            });\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n);\r\n\r\nvar widgetsMap: WeakMap<HTMLElement, WidgetFactory> = new WeakMap();\r\nvar attributesObserver = new MutationObserver(\r\n    (mutationsList: MutationRecord[]) => {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            if (target instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"attributes\": {\r\n                        const {attributeName, oldValue} = mutation;\r\n                        const widget = widgetsMap.get(target);\r\n                        if (widget) {\r\n                            const attributeChangedCallback = (widget as any)[\"attributeChangedCallback\"];\r\n                            if (typeof attributeChangedCallback == \"function\") {\r\n                                attributeChangedCallback(target, attributeName, oldValue, target.getAttribute(attributeName!));\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n);\r\n\r\nclass WidgetFactoryBase implements WidgetFactory {\r\n\r\n    constructor() {\r\n        const widget = <WidgetFactory>this;\r\n        this.create = new Proxy(\r\n            this.create, {\r\n                apply: (target, thisArg, argumentsList: Parameters<WidgetFactory[\"create\"]>) => {\r\n                    const element = <HTMLElement>Reflect.apply(target, thisArg, argumentsList);\r\n                    const observedSlots = <(string | null)[]>(widget as any)[\"observedSlots\"];\r\n                    if (Array.isArray(observedSlots)) {\r\n                        const slots = observedSlots\r\n                            .map(slotName_i => {\r\n                                return {\r\n                                    slotName: slotName_i,\r\n                                    slotElement: widget.slot(element, slotName_i)\r\n                                };\r\n                            });\r\n                        slots.forEach(slot_i => {\r\n                            const {slotElement, slotName} = slot_i;\r\n                            if (slotElement) {\r\n                                slotsObserver.observe(slotElement, {\r\n                                    childList: true\r\n                                });\r\n                                const slotReferences = slotsMap.get(slotElement);\r\n                                const slotReference = {widget, element: new WeakRef(element), slot: slotName};\r\n                                if (Array.isArray(slotReferences)) {\r\n                                    slotReferences.push(slotReference);\r\n                                }\r\n                                else {\r\n                                    slotsMap.set(slotElement, new Array(slotReference));\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                    const observedAttributes = (widget as any)[\"observedAttributes\"];\r\n                    if (Array.isArray(observedAttributes)) {\r\n                        widgetsMap.set(element, widget);\r\n                        attributesObserver.observe(element, {\r\n                            attributes: true,\r\n                            attributeFilter: observedAttributes,\r\n                            attributeOldValue: true\r\n                        });\r\n                    }\r\n                    return element;\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    create(): HTMLElement {\r\n        throw new Error(`create method is not implemented`);\r\n    }\r\n\r\n    slot(): HTMLElement | null {\r\n        return null;\r\n    }\r\n\r\n    get observedSlots(): string[] {\r\n        return [\"\"];\r\n    }\r\n}\r\n\r\nvar WidgetFactory: WidgetFactoryConstructor = WidgetFactoryBase;\r\nvar widgets: Map<string, WidgetFactory> = new Map();\r\n\r\ninterface WidgetInit<K extends keyof WidgetNameMap> {\r\n    properties?: Parameters<WidgetNameMap[K][\"create\"]>[0],\r\n    attributes?: {\r\n        [name: string]: number | string | boolean\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    slotted?: {\r\n        [slot: string]: Node | string | (Node | string)[] | NodeList | ReactiveChildElements\r\n    } | (Node | string | (Node | string)[] | NodeList | ReactiveChildElements),\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: K, init?: WidgetInit<K>): ReturnType<WidgetNameMap[K][\"create\"]>;\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: K, init?: WidgetInit<K>): HTMLElement {\r\n    const widget = widgets.get(name);\r\n    if (widget) {\r\n        if (init !== undefined) {\r\n            const {properties, attributes, dataset, slotted, listeners} = init;\r\n            const element = widget.create(properties);\r\n            if (attributes) {\r\n                Object.entries(attributes).forEach(([attributeName, attributeValue]) => {\r\n                    if (attributeValue !== undefined) {\r\n                        if (typeof attributeValue === \"boolean\") {\r\n                            element.toggleAttribute(camelToTrain(attributeName), attributeValue);\r\n                        }\r\n                        else {\r\n                            element.setAttribute(camelToTrain(attributeName), String(attributeValue));\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            if (dataset) {\r\n                const {dataset: elementDataset} = element;\r\n                Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                    elementDataset[datasetEntry_i] = String(dataset[datasetEntry_i]);\r\n                });\r\n            }\r\n            if (slotted) {\r\n                if (typeof slotted === \"function\" || Array.isArray(slotted) || slotted instanceof NodeList || typeof slotted === \"string\" || slotted instanceof Node) {\r\n                    const slot = widget.slot(element, null);\r\n                    if (slot) {\r\n                        if (typeof slotted === \"function\") {\r\n                            slot.append(...slotted(slot));\r\n                        }\r\n                        else if (typeof slotted === \"object\" && \"length\" in slotted) {\r\n                            slot.append(...Array.from(slotted));\r\n                        }\r\n                        else {\r\n                            slot.append(slotted);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    Object.entries(slotted).forEach(([slot_i, slotted]) => {\r\n                        const slot = widget.slot(element, slot_i);\r\n                        if (slot) {\r\n                            if (typeof slotted === \"function\") {\r\n                                slot.append(...slotted(slot));\r\n                            }\r\n                            else if (typeof slotted === \"object\" && \"length\" in slotted) {\r\n                                slot.append(...Array.from(slotted));\r\n                            }\r\n                            else {\r\n                                slot.append(slotted);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            if (listeners) {\r\n                Object.entries(listeners).forEach(([name_i, listener_i]) => {\r\n                    if (Array.isArray(listener_i)) {\r\n                        element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                    }\r\n                    else {\r\n                        element.addEventListener(name_i, listener_i);\r\n                    }\r\n                });\r\n            }\r\n            return element;\r\n        }\r\n        else {\r\n            return widget.create();\r\n        }\r\n    }\r\n    throw new Error(`Unknown widget ${name}. The corresponding module might not be imported.`);\r\n}\r\n\r\ninterface WidgetDecorator {\r\n    (init: {\r\n        name: string;\r\n    }): <W extends WidgetFactoryConstructor>(widget: W) => W;\r\n}\r\n\r\nconst Widget: WidgetDecorator = function(init: {\r\n    name: string;\r\n}) {\r\n    return <W extends WidgetFactoryConstructor>(\r\n        widget: W\r\n    ) => {\r\n        const {name} = init;\r\n        widgets.set(\r\n            name,\r\n            new widget()\r\n        );\r\n        return widget;\r\n    }\r\n}","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { toolbarItemWidget };\r\n\r\ntype ToolBarItemType = \"button\" | \"checkbox\" | \"radio\" | \"menubutton\";\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbaritem\": ToolBarItemWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ToolBarItemWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        id?: string;\r\n        type: ToolBarItemType;\r\n        pressed?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    menu(item: HTMLElement): HTMLElement | null;\r\n    getName(item: HTMLElement): string;\r\n    setName(item: HTMLElement, value: string): void;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setPressed(item: HTMLElement, value: boolean): void;\r\n    getPressed(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    getValue(item: HTMLElement): string;\r\n    setValue(item: HTMLElement, value: string): void;\r\n    getType(item: HTMLElement): ToolBarItemType | null;\r\n    setType(item: HTMLElement, value: ToolBarItemType): void;\r\n}\r\n\r\nvar toolbarItemWidget = new(\r\nWidget({\r\n    name: \"toolbaritem\"\r\n})(\r\nclass ToolBarItemWidgetFactoryBase extends WidgetFactory implements ToolBarItemWidgetFactory {\r\n    #template: HTMLElement;\r\n    #types: ToolBarItemType[];\r\n\r\n    constructor() {\r\n        super();\r\n        this.#types = [\"button\", \"checkbox\", \"radio\", \"menubutton\"];\r\n        this.#template = element(\"button\", {\r\n            attributes: {\r\n                class: \"toolbaritem\",\r\n                role: \"button\",\r\n                type: \"button\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        type?: ToolBarItemType;\r\n        pressed?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }) {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (init !== void 0) {\r\n            const {id, keyshortcut, pressed, type, label, name, value, disabled} = init;\r\n            if (id !== undefined) {\r\n                item.id = id;\r\n            }\r\n            if (keyshortcut !== undefined) {\r\n                this.setKeyShortcut(item, keyshortcut);\r\n            }\r\n            if (pressed !== undefined) {\r\n                this.setPressed(item, pressed);\r\n            }\r\n            if (type !== undefined) {\r\n                this.setType(item, type);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(item, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(item, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(item: HTMLElement): HTMLElement | null {\r\n        return item;\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void {\r\n        const hasChildMenu = Array.from(slot.childNodes).some(\r\n            childNode_i => childNode_i instanceof HTMLElement && childNode_i.classList.contains(\"menu\")\r\n        );\r\n        item.setAttribute(\"aria-haspopup\", String(hasChildMenu));\r\n    }\r\n\r\n    menu(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .menu\");\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-expanded\", value);\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-expanded\");\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    getKeyShortcut(item: HTMLElement): string | null {\r\n        return item.getAttribute(\"aria-keyshortcuts\");\r\n    }\r\n\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void {\r\n        if (value !== null) {\r\n            item.setAttribute(\"aria-keyshortcuts\", value);\r\n        }\r\n        else {\r\n            item.removeAttribute(\"aria-keyshortcuts\");\r\n        }\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        const expand = force ?? !this.getExpanded(item);\r\n        this.setExpanded(item, expand);\r\n        if (expand) {\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    expand(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (!expanded) {\r\n            this.setExpanded(item, true);\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    collapse(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (expanded) {\r\n            this.setExpanded(item, false);\r\n        }\r\n    }\r\n\r\n    getType(item: HTMLElement): ToolBarItemType | null {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`toolbaritem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setType(item: HTMLElement, type: ToolBarItemType): void {\r\n        const oldType = this.getType(item);\r\n        if (type !== oldType) {\r\n            const {classList} = item;\r\n            if (oldType) {\r\n                classList.remove(`toolbaritem-${oldType}`);\r\n            }\r\n            classList.add(`toolbaritem-${type}`);\r\n        }\r\n    }\r\n\r\n    getValue(item: HTMLElement): string {\r\n        return item.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"value\", value);\r\n    }\r\n\r\n    getTitle(item: HTMLElement): string {\r\n        return item.getAttribute(\"title\") ?? \"\";\r\n    }\r\n\r\n    setTitle(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"title\", value);\r\n    }\r\n\r\n    getName(item: HTMLElement): string {\r\n        return item.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getPressed(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-pressed\") ?? String(false));\r\n    }\r\n\r\n    setPressed(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-pressed\", String(value));\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetItem = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetItem.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse(targetItem);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.setPressed(targetItem, !this.getPressed(targetItem));\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.setPressed(targetItem, true);\r\n                    break;\r\n                }\r\n                case \"menubutton\": {\r\n                    const menu = this.menu(targetItem);\r\n                    if (menu && !menu.contains(<Node>target)) {\r\n                        this.toggle(targetItem);\r\n                        const expanded = this.getExpanded(targetItem);\r\n                        if (expanded) {\r\n                            menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(item: HTMLElement): void {\r\n        const type = this.getType(item);\r\n        if (type == \"menubutton\") {\r\n            const menu = this.menu(item);\r\n            if (menu !== null) {\r\n                const {style: menuStyle} = menu;\r\n                const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = item.getBoundingClientRect();\r\n                const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n                const {scrollY, scrollX} = window;\r\n                const {clientWidth, clientHeight} = document.body;\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n        }\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n}));\r\n","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { toolbarItemWidget } from \"./ToolBarItemWidget\";\r\n\r\nexport { toolbarWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbar\": ToolBarWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ToolBarWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }): HTMLElement;\r\n    setOrientation(toolbar: HTMLElement, value: ToolBarOrientation): void;\r\n    getOrientation(toolbar: HTMLElement): ToolBarOrientation;\r\n}\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\nvar toolbarWidget = new (\r\nWidget({\r\n    name: \"toolbar\"\r\n})(class ToolBarWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"toolbar\",\r\n                role: \"toolbar\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        )\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }) {\r\n        const toolbar = <HTMLElement>this.#template.cloneNode(true);\r\n        toolbar.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        toolbar.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        toolbar.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        toolbar.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        toolbar.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex} = properties;\r\n            if (id !== undefined) {\r\n                toolbar.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                toolbar.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                toolbar.tabIndex = tabIndex;\r\n            }\r\n        }\r\n        return toolbar;\r\n    }\r\n\r\n    slot(toolbar: HTMLElement) {\r\n        return toolbar;\r\n    }\r\n\r\n    #getActiveItem(toolbar: HTMLElement): HTMLElement | null {\r\n        return toolbar.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .toolbaritemgroup) > .toolbaritem.active\"\r\n        );\r\n    }\r\n\r\n    items(toolbar: HTMLElement): HTMLElement[] {\r\n        return Array.from(toolbar.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .toolbaritemgroup) > .toolbaritem\"\r\n        ));\r\n    }\r\n\r\n    setOrientation(toolbar: HTMLElement, value: ToolBarOrientation): void {\r\n        toolbar.setAttribute(\"aria-orientation\", value);\r\n    }\r\n\r\n    getOrientation(toolbar: HTMLElement): ToolBarOrientation {\r\n        return <ToolBarOrientation>toolbar.getAttribute(\"aria-orientation\") ?? \"horizontal\";\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node) {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"toolbaritem\") && !toolbarItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"toolbaritemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(toolbar: Element): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = toolbar;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(toolbar: Element): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = toolbar;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLElement | null>walker.previousSibling();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = toolbarItemWidget.menu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #setActiveItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(tree);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            toolbarItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            toolbarItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: Event): void {\r\n        const {currentTarget, target} = event;\r\n        const toolbar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem) {\r\n            const type = toolbarItemWidget.getType(targetItem);\r\n            const name = toolbarItemWidget.getName(targetItem);\r\n            const value = toolbarItemWidget.getType(targetItem);\r\n            if (type == \"radio\") {\r\n                toolbar.querySelectorAll<HTMLElement>(\r\n                    `:is(:scope, :scope > .toolbaritemgroup) > .toolbaritem[type=radio][name=${name}]`\r\n                ).forEach((radio_i) => {\r\n                    toolbarItemWidget.setPressed(radio_i, toolbarItemWidget.getValue(radio_i) == value);\r\n                });\r\n            }\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const focusWithin = targetToolbar.contains(<Node>relatedTarget);\r\n        if (!focusWithin) {\r\n            const activeItem = this.#getActiveItem(targetToolbar);\r\n            if (activeItem) {\r\n                activeItem.focus();\r\n            }\r\n            else {\r\n                const firstItem = this.#firstItem(targetToolbar);\r\n                firstItem?.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetToolbar, targetItem);\r\n            targetToolbar.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetToolbar.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.#setActiveItem(targetToolbar, null);\r\n            targetToolbar.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetToolbar);\r\n        switch (key) {\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const type = toolbarItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"menubutton\": {\r\n                            toolbarItemWidget.expand(activeItem);\r\n                            const firstChildItem = this.#firstChildItem(activeItem);\r\n                            firstChildItem?.focus({preventScroll: true});\r\n                            event.preventDefault();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetToolbar);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetToolbar);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetToolbar);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetToolbar);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    activeItem.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    targetToolbar.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}));","import { EMenuItem } from \"./src/elements/containers/menus/MenuItem\";\r\nimport { HTMLEToolBarItemElement } from \"./src/elements/containers/toolbars/ToolBarItem\";\r\nimport { element, fragment, reactiveElement } from \"./src/elements/Element\";\r\nimport { ModelEvent, ModelList, ModelObject, ModelProperty } from \"./src/models/Model\";\r\nimport { GridColumnModel, GridModel, GridRowModel, GridView } from \"./src/views/GridView\";\r\nimport { TreeItemList, TreeItemModel, TreeModel, TreeView } from \"./src/views/TreeView\";\r\nimport { toolbarItemWidget } from \"./src/views/widgets/toolbar/ToolBarItemWidget\";\r\nimport { toolbarWidget } from \"./src/views/widgets/toolbar/ToolBarWidget\";\r\nimport { widget } from \"./src/views/widgets/Widget\";\r\n\r\nclass MyTreeItemList extends TreeItemList {\r\n    readonly items!: MyTreeItemModel[];\r\n\r\n    constructor(items: MyTreeItemModel[]) {\r\n        super(items);\r\n    }\r\n\r\n    get count(): number {\r\n        return this.items.length;\r\n    }\r\n\r\n    show(): void {\r\n        this.items.forEach(item_i => item_i.show());\r\n    }\r\n\r\n    hide(): void {\r\n        this.items.forEach(item_i => item_i.hide());\r\n    }\r\n\r\n    display(): void {\r\n        const result = this.items.reduce(\r\n            (result, item_i) => `${result} ${item_i.label}`, \"\"\r\n        );\r\n        console.log(result);\r\n    }\r\n}\r\n\r\nclass MyTreeItemModel extends TreeItemModel {\r\n    \r\n    @ModelProperty()\r\n    childCount: number;\r\n\r\n    @ModelProperty()\r\n    visibility: boolean;\r\n\r\n    constructor(init: {label: string, type: \"leaf\" | \"parent\", items?: TreeItemModel[]}) {\r\n        super(init);\r\n        this.childCount = this.childItems.length;\r\n        this.visibility = true;\r\n        this.addEventListener(\"modelchange\", this.#handleModelChangeEvent.bind(this));\r\n    }\r\n\r\n    show(): void {\r\n        this.visibility = true;\r\n    }\r\n\r\n    hide(): void {\r\n        this.visibility = false;\r\n    }\r\n\r\n    display(): void {\r\n        console.log(this.label);\r\n    }\r\n\r\n    #handleModelChangeEvent(event: ModelEvent): void {\r\n        const {target} = event;\r\n        const {childItems} = this;\r\n        if (target == childItems) {\r\n            this.childCount = childItems.length;\r\n        }\r\n    }\r\n}\r\n\r\nexport async function TreeMain() {\r\n    const gridView = new GridView();\r\n    gridView.resizable = true;\r\n    gridView.setModel(\r\n        new GridModel({\r\n            columns: [\r\n                new GridColumnModel({\r\n                    name: \"name\",\r\n                    type: String,\r\n                    label: \"Name\",\r\n                    extract: (row) => row.name\r\n                }),\r\n                new GridColumnModel({\r\n                    name: \"age\",\r\n                    type: Number,\r\n                    label: \"Age\",\r\n                    extract: (row) => row.age,\r\n                    filters: [{\r\n                        name: \"Minors\",\r\n                        filter: (row) => row.age < 18\r\n                    },{\r\n                        name: \"Majors\",\r\n                        filter: (row) => row.age >= 18\r\n                    }]\r\n                }),\r\n                new GridColumnModel({\r\n                    name: \"birthyear\",\r\n                    type: String,\r\n                    label: \"Brith Year\",\r\n                    extract: (row) => new Date().getFullYear() - row.age\r\n                }),\r\n            ],\r\n            rows: [\r\n                new GridRowModel({\r\n                    id: 1,\r\n                    name: \"Denis\",\r\n                    age: 13\r\n                }),\r\n                new GridRowModel({\r\n                    id: 2,\r\n                    name: \"Jean-Charles\",\r\n                    age: 32\r\n                }),\r\n                new GridRowModel({\r\n                    id: 3,\r\n                    name: \"Charles\",\r\n                    age: 25\r\n                }),\r\n                new GridRowModel({\r\n                    id: 4,\r\n                    name: \"Mamagubida\",\r\n                    age: 128\r\n                })\r\n            ]\r\n        })\r\n    );\r\n    document.body.append(gridView);\r\n\r\n    const treeModel = new TreeModel({\r\n        items: [\r\n            new MyTreeItemModel({\r\n                label: \"TI 0\",\r\n                type: \"parent\",\r\n                items: [\r\n                    new MyTreeItemModel({\r\n                        label: \"TI 1A\",\r\n                        type: \"parent\",\r\n                        items: [\r\n                            new MyTreeItemModel({\r\n                                type: \"leaf\",\r\n                                label: \"TI 1AX\"\r\n                            }),\r\n                        ]\r\n                    }),\r\n                    new MyTreeItemModel({\r\n                        type: \"parent\",\r\n                        label: \"TI 1B\"\r\n                    })\r\n                ]\r\n            }),\r\n            new MyTreeItemModel({\r\n                label: \"TI 1\",\r\n                type: \"parent\",\r\n                items: [\r\n                    new MyTreeItemModel({\r\n                        label: \"TI 1A\",\r\n                        type: \"parent\",\r\n                        items: [\r\n                            new MyTreeItemModel({\r\n                                type: \"leaf\",\r\n                                label: \"TI 1AX\"\r\n                            }),\r\n                        ]\r\n                    }),\r\n                    new MyTreeItemModel({\r\n                        type: \"parent\",\r\n                        label: \"TI 1B\"\r\n                    })\r\n                ]\r\n            }),\r\n            new MyTreeItemModel({\r\n                type: \"leaf\",\r\n                label: \"TI 2\"\r\n            }),\r\n            new MyTreeItemModel({\r\n                type: \"leaf\",\r\n                label: \"TI 3\"\r\n            })\r\n        ],\r\n        sortFunction: (item_a: TreeItemModel, item_b: TreeItemModel) => {\r\n            const {label: aLabel} = item_a;\r\n            const {label: bLabel} = item_b;\r\n            return bLabel.localeCompare(aLabel);\r\n        }\r\n    });\r\n    const treeView = new TreeView(treeModel);\r\n    treeView.itemContentDelegate = <typeof treeView.itemContentDelegate>(\r\n        (item: MyTreeItemModel) => {\r\n            return fragment(\r\n                ...([\r\n                    reactiveElement(\r\n                        item,\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"label\"\r\n                            }\r\n                        }),\r\n                        [\"label\"],\r\n                        (label, property, oldValue, newValue) => {\r\n                            label.textContent = newValue;\r\n                        }\r\n                    )\r\n                ]).concat(\r\n                    (item.type == \"parent\") ? [\r\n                        reactiveElement(\r\n                            item,\r\n                            element(\"span\", {\r\n                                attributes: {\r\n                                    class: \"badge\"\r\n                                }\r\n                            }),\r\n                            [\"childCount\"],\r\n                            (badge, property, oldValue, newValue) => {\r\n                                badge.textContent = `(${newValue})`;\r\n                            }\r\n                        )\r\n                    ] : []\r\n                ).concat([\r\n                    reactiveElement(\r\n                        item,\r\n                        element(\"e-toolbar\", {\r\n                            children: [\r\n                                element(\"e-toolbaritem\", {\r\n                                    attributes: {\r\n                                        name: \"visibility\",\r\n                                        type: \"checkbox\",\r\n                                        label: \"Visibility\"\r\n                                    },\r\n                                    listeners: {\r\n                                        click: () => {\r\n                                            item.visibility ?\r\n                                                item.hide() :\r\n                                                item.show();\r\n                                        }\r\n                                    }\r\n                                })\r\n                            ]\r\n                        }),\r\n                        [\"visibility\"],\r\n                        (toolbar, property, oldValue, newValue) => {\r\n                            switch (property) {\r\n                                case \"visibility\": {\r\n                                    const visibilityItem = toolbarWidget.slot(toolbar)\r\n                                        ?.querySelector<HTMLEToolBarItemElement>(\"e-toolbaritem[name=visibility]\");\r\n                                    if (visibilityItem) {\r\n                                        const label = newValue ? \"Hide\" : \"Show\";\r\n                                        visibilityItem.label = label;\r\n                                        visibilityItem.title = label;\r\n                                        visibilityItem.pressed = newValue;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    )\r\n                ])\r\n            );\r\n        }\r\n    );\r\n    treeView.itemContextMenuDelegate = <typeof treeView.itemContextMenuDelegate>(\r\n        (activeItem: MyTreeItemModel, selectedItems: MyTreeItemModel[]) => {\r\n            return fragment(\r\n                element(\"e-menuitemgroup\", {\r\n                    children: [\r\n                        element(\"e-menuitem\", {\r\n                            attributes: {\r\n                                label: \"Display\"\r\n                            },\r\n                            children: \"Display\",\r\n                            listeners: {\r\n                                click: () => {\r\n                                    const itemsList = new MyTreeItemList(selectedItems);\r\n                                    itemsList.display();\r\n                                }\r\n                            }\r\n                        }),\r\n                        element(\"e-menuitem\", {\r\n                            attributes: {\r\n                                label: \"Delete\"\r\n                            },\r\n                            children: \"Delete\",\r\n                            listeners: {\r\n                                click: () => {\r\n                                    const itemsList = new MyTreeItemList(selectedItems);\r\n                                    const {count} = itemsList;\r\n                                    const doRemove = confirm(`Remove ${count} items?`);\r\n                                    if (doRemove) {\r\n                                        itemsList.remove();\r\n                                    }\r\n                                    treeView.treeElement().focus();\r\n                                }\r\n                            }\r\n                        })\r\n                    ]\r\n                }),\r\n                element(\"e-menuitemgroup\", {\r\n                    children: [\r\n                        element(\"e-menuitem\", {\r\n                            attributes: {\r\n                                type: \"checkbox\",\r\n                                label: activeItem.visibility ? \"Hide\" : \"Show\"\r\n                            },\r\n                            children: activeItem.visibility ? \"Hide\" : \"Show\",\r\n                            listeners: {\r\n                                click: () => {\r\n                                    const itemsList = new MyTreeItemList(selectedItems);\r\n                                    activeItem.visibility ?\r\n                                        itemsList.hide() :\r\n                                        itemsList.show();\r\n                                }\r\n                            }\r\n                        })\r\n                    ]\r\n                })\r\n            )\r\n        }\r\n    );\r\n    treeView.refresh();\r\n    document.body.append(treeView);\r\n\r\n    document.body.append(\r\n        element(\"e-menubar\", {\r\n            children: element(\"e-menuitem\", {\r\n                attributes: {\r\n                    type: \"menu\",\r\n                    label: \"Menu 1\"\r\n                },\r\n                children: [\r\n                    \"Menu 1\",\r\n                    element(\"e-menu\", {\r\n                        attributes: {\r\n                            slot: \"menu\"\r\n                        },\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                attributes: {\r\n                                    type: \"checkbox\"\r\n                                },\r\n                                children: \"Hey\"\r\n                            }),\r\n                            element(\"e-menuitem\", {\r\n                                attributes: {\r\n                                    type: \"submenu\"\r\n                                },\r\n                                children: [\r\n                                    \"Submenu 1\",\r\n                                    element(\"e-menu\", {\r\n                                        attributes: {\r\n                                            slot: \"menu\"\r\n                                        },\r\n                                        children: [\r\n                                            /*element(\"e-menuitem\", {\r\n                                                attributes: {\r\n                                                    type: \"checkbox\"\r\n                                                },\r\n                                                children: \"Yo\"\r\n                                            })*/\r\n                                            new EMenuItem({\r\n                                                label: \"Yo\"\r\n                                            })\r\n                                        ]\r\n                                    })\r\n                                ]\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        })\r\n    );\r\n        \r\n    const menuView = widget(\"menubar\", {\r\n        slotted: [\r\n            widget(\"menuitem\", {\r\n                properties: {\r\n                    label: \"MenuItem 0\",\r\n                    name: \"MenuItem 0\",\r\n                    type: \"menu\",\r\n                    disabled: true\r\n                },\r\n                slotted: [\r\n                    widget(\"menu\", {\r\n                        slotted: [\r\n                            widget(\"menuitem\", {\r\n                                properties: {\r\n                                    label: \"MenuItem 1\",\r\n                                    name: \"MenuItem 1\",\r\n                                    type: \"checkbox\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            widget(\"menuitem\", {\r\n                properties: {\r\n                    label: \"MenuItem 0\",\r\n                    name: \"MenuItem 0\",\r\n                    type: \"menu\"\r\n                },\r\n                slotted: [\r\n                    widget(\"menu\", {\r\n                        slotted: [\r\n                            widget(\"menuitem\", {\r\n                                properties: {\r\n                                    label: \"MenuItem 1\",\r\n                                    name: \"MenuItem 1\",\r\n                                    type: \"checkbox\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            widget(\"menuitem\", {\r\n                properties: {\r\n                    label: \"MenuItem 1\",\r\n                    name: \"MenuItem 1\",\r\n                    type: \"menu\"\r\n                },\r\n                slotted: [\r\n                    widget(\"menu\", {\r\n                        slotted: [\r\n                            widget(\"menuitemgroup\", {\r\n                                slotted: [\r\n                                    widget(\"menuitem\", {\r\n                                        properties: {\r\n                                            label: \"MenuItem 1\",\r\n                                            type: \"checkbox\",\r\n                                            keyshortcut: \"Ctrl+B\",\r\n                                            disabled: true,\r\n                                            checked: true\r\n                                        }\r\n                                    }),\r\n                                    widget(\"menuitem\", {\r\n                                        properties: {\r\n                                            type: \"button\",\r\n                                            label: \"MenuItem 2\",\r\n                                            keyshortcut: \"Ctrl+A\"\r\n                                        }\r\n                                    })\r\n                                ]\r\n                            }),\r\n                            widget(\"separator\"),\r\n                            widget(\"menuitem\", {\r\n                                properties: {\r\n                                    label: \"Submenu\",\r\n                                    type: \"submenu\"\r\n                                },\r\n                                slotted: [\r\n                                    widget(\"menu\", {\r\n                                        slotted: [\r\n                                            widget(\"menuitem\", {\r\n                                                properties: {\r\n                                                    label: \"MenuItem 1\",\r\n                                                    type: \"radio\",\r\n                                                    name: \"radio\",\r\n                                                    value: \"1\"\r\n                                                }\r\n                                            }),\r\n                                            widget(\"menuitem\", {\r\n                                                properties: {\r\n                                                    type: \"radio\",\r\n                                                    label: \"MenuItem 2\",\r\n                                                    name: \"radio\",\r\n                                                    value: \"2\"\r\n                                                }\r\n                                            }),\r\n                                            widget(\"menuitem\", {\r\n                                                properties: {\r\n                                                    type: \"radio\",\r\n                                                    label: \"MenuItem 3\",\r\n                                                    name: \"radio\",\r\n                                                    value: \"3\"\r\n                                                }\r\n                                            })\r\n                                        ]\r\n                                    })\r\n                                ]\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        ]\r\n    })\r\n    document.body.append(menuView);\r\n\r\n    document.body.append(\r\n        widget(\"combobox\", {\r\n            slotted: [\r\n                widget(\"option\",  {\r\n                    properties: {\r\n                        label: \"First option\"\r\n                    }\r\n                }),\r\n                widget(\"option\",  {\r\n                    properties: {\r\n                        label: \"Second option\"\r\n                    }\r\n                }),\r\n                widget(\"option\",  {\r\n                    properties: {\r\n                        label: \"Third option\",\r\n                        selected: true\r\n                    }\r\n                })\r\n            ]\r\n        })\r\n    );\r\n\r\n    document.body.append(\r\n        widget(\"toolbar\", {\r\n            slotted: [\r\n                widget(\"toolbaritem\",  {\r\n                    properties: {\r\n                        type: \"menubutton\"\r\n                    },\r\n                    slotted: [\r\n                        \"Yo!\",\r\n                        widget(\"menu\", {\r\n                            slotted: [\r\n                                widget(\"menuitem\", {\r\n                                    properties: {\r\n                                        label: \"MenuItem 1\",\r\n                                        type: \"radio\",\r\n                                        name: \"radio\",\r\n                                        value: \"1\"\r\n                                    }\r\n                                }),\r\n                                widget(\"menuitem\", {\r\n                                    properties: {\r\n                                        type: \"radio\",\r\n                                        label: \"MenuItem 2\",\r\n                                        name: \"radio\",\r\n                                        value: \"2\"\r\n                                    }\r\n                                }),\r\n                                widget(\"menuitem\", {\r\n                                    properties: {\r\n                                        type: \"radio\",\r\n                                        label: \"MenuItem 3\",\r\n                                        name: \"radio\",\r\n                                        value: \"3\"\r\n                                    }\r\n                                })\r\n                            ]\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        })\r\n    );\r\n}","export { Key };\r\nexport { KeyModifier };\r\nexport { HotKey };\r\nexport { MouseButton };\r\n\r\nenum Key {\r\n    A = \"a\",\r\n    B = \"b\",\r\n    C = \"c\",\r\n    D = \"d\",\r\n    E = \"e\",\r\n    F = \"f\",\r\n    G = \"g\",\r\n    H = \"h\",\r\n    I = \"i\",\r\n    J = \"j\",\r\n    K = \"k\",\r\n    L = \"l\",\r\n    M = \"m\",\r\n    O = \"o\",\r\n    P = \"p\",\r\n    Q = \"q\",\r\n    R = \"r\",\r\n    S = \"s\",\r\n    T = \"t\",\r\n    U = \"u\",\r\n    V = \"v\",\r\n    W = \"w\",\r\n    X = \"x\",\r\n    Y = \"y\",\r\n    Z = \"z\",\r\n    ENTER = \"Enter\",\r\n    BACKSPACE = \"Backspace\",\r\n    ARROW_DOWN = \"ArrowDown\",\r\n    ARROW_LEFT = \"ArrowLeft\",\r\n    ARROW_RIGHT = \"ArrowRight\",\r\n    ARROW_UP = \"ArrowUp\",\r\n    SHIFT = \"Shift\"\r\n}\r\n\r\nenum KeyModifier {\r\n    Alt = \"Alt\",\r\n    Control = \"Control\",\r\n    Shift = \"Shift\"\r\n}\r\n\r\nenum MouseButton {\r\n    LEFT = 1,\r\n    WHEEL = 2,\r\n    RIGHT = 3,\r\n    FORWARD = 4,\r\n    BACK = 5\r\n}\r\n\r\nclass HotKey {\r\n    readonly key: Key;\r\n    readonly mod1?: KeyModifier;\r\n    readonly mod2?: KeyModifier;\r\n\r\n    constructor(key: Key, mod1?: KeyModifier, mod2?: KeyModifier) {\r\n        this.key = key;\r\n        this.mod1 = mod1;\r\n        this.mod2 = mod2;\r\n    }\r\n\r\n    toString(): string {\r\n        return `${this.mod1 ? `${this.#modifierString(this.mod1)}+` : \"\"}${this.mod2 ? `${this.#modifierString(this.mod2)}+` : \"\"}${(this.key.length == 1) ? this.key.toUpperCase() : this.key}`;\r\n    }\r\n\r\n    test(event: KeyboardEvent): boolean {\r\n        return (!this.mod1 || this.#testModifier(this.mod1, event)) && (!this.mod2 || this.#testModifier(this.mod2, event)) && event.key == this.key;\r\n    }\r\n\r\n    #modifierString(mod: KeyModifier): string {\r\n        switch (mod) {\r\n            case KeyModifier.Control:\r\n                return \"Ctrl\";\r\n            default:\r\n                return mod;\r\n        }\r\n    }\r\n\r\n    #testModifier(mod: KeyModifier, event: KeyboardEvent): boolean {\r\n        switch (mod) {\r\n            case \"Alt\":\r\n                return event.altKey;\r\n            case \"Control\":\r\n                return event.ctrlKey;\r\n            case \"Shift\":\r\n                return event.shiftKey;\r\n            default:\r\n                return true;\r\n        }\r\n    }\r\n}","import { AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEActionElement };\r\nexport { ActionType };\r\n\r\ninterface HTMLEActionElementConstructor {\r\n    prototype: HTMLEActionElement;\r\n    new(): HTMLEActionElement;\r\n}\r\n\r\ninterface HTMLEActionElement extends HTMLElement {\r\n    name: string;\r\n    value: string;\r\n    checked: boolean;\r\n    type: string;\r\n    disabled: boolean;\r\n    hotkey: string;\r\n\r\n    trigger(): void;\r\n    enable(): void;\r\n    disable(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"trigger\": Event;\r\n    }\r\n}\r\n\r\ntype ActionType = \"button\" | \"checkbox\" | \"radio\" | \"select\";\r\n\r\nclass HTMLEActionElementBase extends HTMLElement implements HTMLEActionElement {\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    hotkey!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"button\"})\r\n    type!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    checked!: boolean;\r\n\r\n    trigger(): void {\r\n        if (!this.disabled) {\r\n            switch (this.type) {\r\n                case \"checkbox\":\r\n                    this.checked = !this.checked;\r\n                    break;\r\n                case \"radio\":\r\n                    this.checked = true;\r\n                    break;\r\n            }\r\n            this.dispatchEvent(new Event(\"trigger\", {\r\n                bubbles: true\r\n            }));\r\n        }\r\n    }\r\n\r\n    enable(): void {\r\n        this.disabled = false;\r\n    }\r\n\r\n    disable(): void {\r\n        this.disabled = true;\r\n    }\r\n}\r\n\r\nvar HTMLEActionElement: HTMLEActionElementConstructor = HTMLEActionElementBase;","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEGridCellElement };\r\n\r\ninterface HTMLEGridCellElementConstructor {\r\n    prototype: HTMLEGridCellElement;\r\n    new(): HTMLEGridCellElement;\r\n}\r\n\r\ninterface HTMLEGridCellElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n    headers: string;\r\n    posinset: number;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridcell\": HTMLEGridCellElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridcell\"\r\n})\r\nclass HTMLEGridCellElementBase extends HTMLElement implements HTMLEGridCellElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    headers!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridCellElement: HTMLEGridCellElementConstructor = HTMLEGridCellElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\n\r\nexport { HTMLEGridRowGroupElement };\r\n\r\ninterface HTMLEGridRowGroupElementConstructor {\r\n    prototype: HTMLEGridRowGroupElement;\r\n    new(): HTMLEGridRowGroupElement;\r\n}\r\n\r\ninterface HTMLEGridRowGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrowgroup\": HTMLEGridRowGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrowgroup\"\r\n})\r\nclass HTMLEGridRowGroupElementBase extends HTMLElement implements HTMLEGridRowGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                            /*display: flex;\r\n                            flex-direction: column;*/\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowGroupElement: HTMLEGridRowGroupElementConstructor = HTMLEGridRowGroupElementBase;","import { element, CustomElement, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuItemElement, EMenuItem } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuItemGroupElement };\r\nexport { EMenuItemGroup };\r\n\r\ninterface HTMLEMenuItemGroupElementConstructor {\r\n    prototype: HTMLEMenuItemGroupElement;\r\n    new(): HTMLEMenuItemGroupElement;\r\n}\r\n\r\ninterface HTMLEMenuItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    label: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitemgroup\": HTMLEMenuItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitemgroup\"\r\n})\r\nclass HTMLEMenuItemGroupElementBase extends HTMLElement implements HTMLEMenuItemGroupElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            flex-direction: column;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEMenuItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEMenuItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            //item_i.index = i;\r\n        });\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\":\r\n                const label = this.shadowRoot.querySelector(\"[part=label]\");\r\n                if (label) {\r\n                    label.textContent = newValue;\r\n                }\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemGroupElement: HTMLEMenuItemGroupElementConstructor = HTMLEMenuItemGroupElementBase;\r\n\r\ninterface EMenuItemGroupConstructor {\r\n    prototype: HTMLEMenuItemGroupElement;\r\n    new(init: {\r\n        name?: string;\r\n        items: HTMLEMenuItemElement[];\r\n    }): HTMLEMenuItemGroupElement;\r\n    radios(init: {name: string, items: {label: string, value: string}[]}): HTMLEMenuItemGroupElement;\r\n}\r\n\r\nvar EMenuItemGroup = <EMenuItemGroupConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string,\r\n        items: HTMLEMenuItemElement[]\r\n    }) {\r\n        const {name, items} = init;\r\n        return element(\"e-menuitemgroup\", {\r\n            attributes: {\r\n                name: name\r\n            },\r\n            children: items\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemGroupElement.prototype,\r\n        radios: (init: {\r\n            name: string,\r\n            items: {\r\n                label: string,\r\n                value: string\r\n            }[]\r\n        }) => {\r\n            const {name, items} = init;\r\n            return element(\"e-menuitemgroup\", {\r\n                attributes: {\r\n                    name: name\r\n                },\r\n                children: items.map(\r\n                    ({label, value}) => new EMenuItem({name, label, type: \"radio\", value})\r\n                )\r\n            });\r\n        }\r\n    }\r\n);","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuElement };\r\nexport { EMenu };\r\n\r\ninterface HTMLEMenuElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    firstItem(): HTMLEMenuItemElement | null;\r\n    items(): HTMLEMenuItemElement[];\r\n    name: string;\r\n    contextual: boolean;\r\n    positionContextual(x: number, y: number): void;\r\n}\r\n\r\ninterface HTMLEMenuElementConstructor {\r\n    prototype: HTMLEMenuElement;\r\n    new(): HTMLEMenuElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menu\": HTMLEMenuElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar toggleTimeouts: WeakMap<HTMLEMenuItemElement, {clear(): void;}>;\r\n\r\n@CustomElement({\r\n    name: \"e-menu\"\r\n})\r\nclass HTMLEMenuElementBase extends HTMLElement implements HTMLEMenuElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    items(): HTMLEMenuItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        ));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        const {activeIndex} = this;\r\n        return this.querySelector<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem:focus-within\"\r\n        ) ?? activeIndex > -1 ? this.items()[activeIndex] ?? null : null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    contextual!: boolean;\r\n\r\n    #walker: TreeWalker;\r\n    #activeIndex: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        toggleTimeouts = new WeakMap();\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        this.#activeIndex = -1;\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"mouseout\", this.#handleMouseOutEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    positionContextual(x: number, y: number): void {\r\n        const {style} = this;\r\n        const {width: menuWidth, height: menuHeight} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        const left = x + scrollX;\r\n        const top = y + scrollY;\r\n        const {clientWidth, clientHeight} = document.body;\r\n        const overflowX = left + menuWidth - clientWidth;\r\n        const overflowY = top + menuHeight - clientHeight;\r\n        style.setProperty(\"left\", `${overflowX > 0 ? left - menuWidth : left}px`);\r\n        style.setProperty(\"top\", `${overflowY > 0 ? top - menuHeight : top}px`);\r\n    }\r\n\r\n    #collapseSubmenus(): void {\r\n        this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem[expanded]\"\r\n        )\r\n        .forEach((item_i) => {\r\n            item_i.collapse();\r\n        });\r\n    }\r\n\r\n    #isClosestMenu(target: Element): boolean {\r\n        return target.closest(\":is(e-menu)\") == this;\r\n    }\r\n\r\n    #nearestItem(target: Element): HTMLEMenuItemElement | null {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextNode();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        return menu instanceof HTMLEMenuElementBase ?\r\n            menu.firstItem() :\r\n            null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        if (item !== null) {\r\n            this.#activeIndex = this.items().indexOf(item);\r\n        }\r\n    }\r\n\r\n    async #setItemTimeout(item: HTMLEMenuItemElement, delay?: number): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => {\r\n                resolve(undefined);\r\n            }, delay ?? 0);\r\n            toggleTimeouts.set(item, {\r\n                clear: () => {\r\n                    clearTimeout(timeout);\r\n                    reject();\r\n                }\r\n            });\r\n        }).then(() => {\r\n            toggleTimeouts.delete(item);\r\n        });\r\n    }\r\n\r\n    #clearItemTimeout(item: HTMLEMenuItemElement): void {\r\n        const timeout = toggleTimeouts.get(item);\r\n        if (typeof timeout !== \"undefined\") {\r\n            toggleTimeouts.delete(item);\r\n            timeout.clear();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const {contextual} = this;\r\n            if (contextual) {\r\n                try {\r\n                    this.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const isClosestMenu = this.#isClosestMenu(target);\r\n                if (isClosestMenu) {\r\n                    const {type, name, value} = target;\r\n                    if (type == \"radio\") {\r\n                        this.querySelectorAll<HTMLEMenuItemElement>(\r\n                            `:is(:scope, :scope > e-menuitemgroup) > e-menuitem[type=radio][name=${name}]`\r\n                        )\r\n                        .forEach((radio_i) => {\r\n                            radio_i.checked = radio_i.value == value;\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem) {\r\n                this.#setActiveItem(nearestItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const {contextual} = this;\r\n            if (contextual) {\r\n                try {\r\n                    this.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const {activeItem} = this;\r\n                if (activeItem?.expanded) {\r\n                    activeItem.collapse();\r\n                }\r\n                this.#setActiveItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.firstItem() :\r\n                    this.firstItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.firstItem();\r\n                firstItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                lastItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"menu\":\r\n                        case \"submenu\": {\r\n                            activeItem.expand();\r\n                            if (activeItem.expanded) {\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                            }\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            activeItem.click();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            if (!activeItem.expanded) {\r\n                                activeItem.expand();\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                                event.stopPropagation();\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOutEvent(event: MouseEvent): void {\r\n        const {target, relatedTarget} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem !== null) {\r\n                if (nearestItem.type == \"submenu\" &&\r\n                    !nearestItem.expanded) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLEMenuElement\r\n                ) == this;\r\n                if (isTargetClosestMenu) {\r\n                    const {activeItem} = this;\r\n                    if (activeItem?.type == \"submenu\" &&\r\n                        activeItem.expanded) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, 400)\r\n                            .then(() => {\r\n                                activeItem.collapse();\r\n                            })\r\n                            .catch(() => undefined);\r\n                    }\r\n                    const {clientX, clientY} = event;\r\n                    const {left, right, top, bottom} = this.getBoundingClientRect();\r\n                    const intersectsWithMouse = !(\r\n                        left > clientX || right < clientX || top > clientY || bottom < clientY\r\n                    );\r\n                    const containsRelatedTarget = this.contains(<Node>relatedTarget);\r\n                    if (intersectsWithMouse && containsRelatedTarget) {\r\n                        if (relatedTarget instanceof HTMLEMenuElement && relatedTarget !== this) {\r\n                            relatedTarget.focus({preventScroll: true});\r\n                        }\r\n                        else {\r\n                            this.focus({preventScroll: true});\r\n                            this.#setActiveItem(null);\r\n                        }\r\n                    }\r\n                    if (!intersectsWithMouse) {\r\n                        this.focus({preventScroll: true});\r\n                        this.#setActiveItem(null);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem !== null) {\r\n                if (nearestItem.type == \"submenu\" && nearestItem.expanded) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLEMenuElement\r\n                ) == this;\r\n                if (isTargetClosestMenu) {\r\n                    const {activeItem} = this;\r\n                    if (activeItem?.type == \"submenu\" &&\r\n                        activeItem.expanded && \r\n                        !activeItem.contains(<Node>target)) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, 400)\r\n                            .then(() => {\r\n                                activeItem.collapse();\r\n                            })\r\n                            .catch(() => undefined);\r\n                    }\r\n                    this.#setActiveItem(nearestItem);\r\n                    nearestItem.focus({preventScroll: true});\r\n                    if (nearestItem.type == \"submenu\") {\r\n                        if (!nearestItem.expanded) {\r\n                            this.#clearItemTimeout(nearestItem);\r\n                            this.#setItemTimeout(nearestItem, 200)\r\n                                .then(() => {\r\n                                    const {activeItem} = this;\r\n                                    this.#collapseSubmenus();\r\n                                    if (activeItem) {\r\n                                        this.#clearItemTimeout(activeItem);\r\n                                        activeItem.expand();\r\n                                        activeItem.menu?.focus({preventScroll: true});\r\n                                    }\r\n                                })\r\n                                .catch(() => undefined);\r\n                        }\r\n                        else {\r\n                            nearestItem.menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuElement: HTMLEMenuElementConstructor = HTMLEMenuElementBase;\r\n\r\ninterface EMenuConstructor {\r\n    prototype: HTMLEMenuElement;\r\n    new(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }): HTMLEMenuElement;\r\n}\r\n\r\nvar EMenu = <EMenuConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }) {\r\n        const {name, children} = init;\r\n        return element(\"e-menu\", {\r\n            attributes: {\r\n                name: name,\r\n                tabindex: -1,\r\n            },\r\n            children: children\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuElement.prototype,\r\n    }\r\n);","import { AttributeProperty, CustomElement, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\n\r\nexport { HTMLEGridRowElement };\r\n\r\ninterface HTMLEGridRowElementConstructor {\r\n    prototype: HTMLEGridRowElement;\r\n    new(): HTMLEGridRowElement;\r\n}\r\n\r\ninterface HTMLEGridRowElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    active: boolean;\r\n    selected: boolean;\r\n    posinset: number;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrow\": HTMLEGridRowElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrow\"\r\n})\r\nclass HTMLEGridRowElementBase extends HTMLElement implements HTMLEGridRowElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    #menu: HTMLEMenuElement | null;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row;\r\n                        }\r\n\r\n                        :host([droptarget]) {\r\n                            background-color: gainsboro;\r\n                        }\r\n                        \r\n                        :host(:hover) {\r\n                            background-color: rgba(135, 206, 250, 0.2);\r\n                        }\r\n\r\n                        :host([active]) {\r\n                            outline: 1px solid rgb(135, 206, 250);\r\n                            outline-offset: -1px;\r\n                        }\r\n\r\n                        :host([selected]) {\r\n                            background-color: rgba(135, 206, 250, 0.4);\r\n                            outline: 1px solid rgb(135, 206, 250);\r\n                            outline-offset: -1px;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\"),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#menu = null;\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"menu\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#menu = element instanceof HTMLEMenuElement ? element : null;\r\n                break;\r\n            }\r\n            default: {\r\n                const assignedCells = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n                    .assignedElements()\r\n                    .filter(\r\n                        element_i => element_i instanceof HTMLEGridCellElement\r\n                    );\r\n                assignedCells.forEach((cell_i, i) => {\r\n                    cell_i.posinset = i;\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowElement: HTMLEGridRowElementConstructor = HTMLEGridRowElementBase;","import { HTMLEGridElement } from \"./Grid\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\n\r\nexport { HTMLEGridCellCollection };\r\n\r\ninterface HTMLEGridCellCollectionConstructor {\r\n    prototype: HTMLEGridCellCollection;\r\n    new(root: HTMLElement): HTMLEGridCellCollection;\r\n}\r\n\r\ninterface HTMLEGridCellCollection {\r\n    length: number;\r\n    item(index: number): HTMLEGridCellElement | null;\r\n    namedItem(name: string): HTMLEGridCellElement | null;\r\n    values(): IterableIterator<HTMLEGridCellElement>;\r\n}\r\n\r\nclass HTMLEGridCellCollectionBase implements HTMLEGridCellCollection {\r\n    #walker: TreeWalker;\r\n\r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridCellElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEGridCellElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEGridCellElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEGridCellElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEGridCellElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEGridCellElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEGridCellElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEGridCellElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEGridCellElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridCellCollection: HTMLEGridCellCollectionConstructor =  HTMLEGridCellCollectionBase;","import { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\n\r\nexport { HTMLEGridRowCollection };\r\n\r\ninterface HTMLEGridRowCollectionConstructor {\r\n    prototype: HTMLEGridRowCollection;\r\n    new(root: HTMLElement): HTMLEGridRowCollection;\r\n}\r\n\r\ninterface HTMLEGridRowCollection {\r\n    length: number;\r\n    item(index: number): HTMLEGridRowElement | null;\r\n    namedItem(name: string): HTMLEGridRowElement | null;\r\n    values(): IterableIterator<HTMLEGridRowElement>;\r\n}\r\n\r\nclass HTMLEGridRowCollectionBase implements HTMLEGridRowCollection {\r\n    #walker: TreeWalker;\r\n    \r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement || node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEGridRowElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEGridRowElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEGridRowElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEGridRowElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEGridRowElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEGridRowElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEGridRowElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEGridRowElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowCollection: HTMLEGridRowCollectionConstructor =  HTMLEGridRowCollectionBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\n\r\nexport { HTMLEGridBodyElement };\r\n\r\ninterface HTMLEGridBodyElementConstructor {\r\n    prototype: HTMLEGridBodyElement;\r\n    new(): HTMLEGridBodyElement;\r\n}\r\n\r\ninterface HTMLEGridBodyElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridbody\": HTMLEGridBodyElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridbody\"\r\n})\r\nclass HTMLEGridBodyElementBase extends HTMLElement implements HTMLEGridBodyElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridBodyElement: HTMLEGridBodyElementConstructor = HTMLEGridBodyElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridHeadElement } from \"./GridHead\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\n\r\nexport { HTMLEGridElement };\r\n\r\ninterface HTMLEGridElementConstructor {\r\n    prototype: HTMLEGridElement;\r\n    new(): HTMLEGridElement;\r\n}\r\n\r\ninterface HTMLEGridElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly body: HTMLEGridBodyElement | null;\r\n    readonly head: HTMLEGridHeadElement | null\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n    readonly activeCell: HTMLEGridCellElement | null;\r\n    readonly activeRow: HTMLEGridRowElement | null;\r\n    selectby: \"cell\" | \"row\";\r\n    name: string;\r\n    multiselectable: boolean;\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    clearSelection(): void;\r\n    selectedCells(): HTMLEGridCellElement[];\r\n    selectedRows(): HTMLEGridRowElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-grid\": HTMLEGridElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-grid\"\r\n})\r\nclass HTMLEGridElementBase extends HTMLElement implements HTMLEGridElement {\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    get activeCell(): HTMLEGridCellElement | null {\r\n        return this.querySelector<HTMLEGridCellElement>(\"e-gridcell[active]\");\r\n    }\r\n\r\n    get activeRow(): HTMLEGridRowElement | null {\r\n        return this.querySelector<HTMLEGridRowElement>(\"e-gridrow[active]\");\r\n    }\r\n\r\n    get body(): HTMLEGridBodyElement | null {\r\n        return this.querySelector<HTMLEGridBodyElement>(\":scope > e-gridbody\");\r\n    }\r\n\r\n    get head(): HTMLEGridHeadElement | null {\r\n        return this.querySelector<HTMLEGridHeadElement>(\":scope > e-gridhead\");\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"cell\"})\r\n    selectby!: \"cell\" | \"row\";\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    multiselectable!: boolean;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #cellsWalker: TreeWalker;\r\n    #rowsWalker: TreeWalker;\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#cellsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#cellsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#rowsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#rowsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.#clearCellsSelection();\r\n        this.#clearRowsSelection();\r\n    }\r\n\r\n    selectedCells(): HTMLEGridCellElement[] {\r\n        return Array.from(this.querySelectorAll(\"e-gridcell[selected]\"));\r\n    }\r\n\r\n    selectedRows(): HTMLEGridRowElement[] {\r\n        return Array.from(this.querySelectorAll(\"e-gridrow[selected]\"));\r\n    }\r\n\r\n    #cellsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridCellElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement || node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #rowsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridRowElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement || node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getCellsRange(from: HTMLEGridCellElement, to: HTMLEGridCellElement): HTMLEGridCellElement[] {\r\n        const cells = Array.from(this.cells.values());\r\n        const fromIndex = cells.indexOf(from);\r\n        const toIndex = cells.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return cells.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #getRowsRange(from: HTMLEGridRowElement, to: HTMLEGridRowElement): HTMLEGridRowElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleRow = this.#nextRow(from);\r\n            while (nextVisibleRow && nextVisibleRow !== to) {\r\n                range.push(nextVisibleRow);\r\n                nextVisibleRow = this.#nextRow(nextVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleRow = this.#previousRow(from);\r\n            while (previousVisibleRow && previousVisibleRow !== to) {\r\n                range.push(previousVisibleRow);\r\n                previousVisibleRow = this.#previousRow(previousVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setCellsSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((selectedCell_i) => {\r\n            if (!cells.includes(selectedCell_i)) {\r\n                selectedCell_i.selected = false;\r\n            }\r\n        });\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setRowsSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((selectedRow_i) => {\r\n            if (!rows.includes(selectedRow_i)) {\r\n                selectedRow_i.selected = false;\r\n            }\r\n        });\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addCellsToSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addRowsToSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeCellsFromSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        cells.forEach((cell_i) => {\r\n            if (selectedCells.includes(cell_i)) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeRowsFromSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        rows.forEach((row_i) => {\r\n            if (selectedRows.includes(row_i)) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearCellsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((cell_i) => {\r\n            if (cell_i.selected) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearRowsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((row_i) => {\r\n            if (row_i.selected) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveCell(cell: HTMLEGridCellElement | null): void {\r\n        const {activeCell} = this;\r\n        if (activeCell !== null && activeCell !== cell) {\r\n            activeCell.active = false;\r\n            activeCell.tabIndex = -1;\r\n        }\r\n        if (cell !== null) {\r\n            const cellsWalker = this.#cellsWalker;\r\n            cellsWalker.currentNode = cell;\r\n            cell.active = true;\r\n            cell.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #setActiveRow(row: HTMLEGridRowElement | null): void {\r\n        const {activeRow} = this;\r\n        if (activeRow !== null && activeRow !== row) {\r\n            activeRow.active = false;\r\n            activeRow.tabIndex = -1;\r\n        }\r\n        if (row !== null) {\r\n            const rowsWalker = this.#rowsWalker;\r\n            rowsWalker.currentNode = row;\r\n            row.active = true;\r\n            row.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #firstCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.firstChild();\r\n    }\r\n\r\n    #lastCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.lastChild();\r\n    }\r\n\r\n    #previousCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.previousNode();\r\n    }\r\n\r\n    #nextCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.nextNode();\r\n    }\r\n\r\n    #closestRow(cell: HTMLEGridCellElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = cell;\r\n        return <HTMLEGridRowElement | null>rowsWalker.parentNode();\r\n    }\r\n\r\n    #firstRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.firstChild();\r\n    }\r\n\r\n    #lastRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.lastChild();\r\n    }\r\n\r\n    #previousRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.previousNode();\r\n    }\r\n\r\n    #nextRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.nextNode();\r\n    }\r\n\r\n    #topCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const {cells: closestRowCells} = closestRow;\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const previousRow = this.#previousRow(closestRow);\r\n            if (previousRow) {\r\n                const {cells: previousRowCells} = previousRow;\r\n                return previousRowCells.item(\r\n                    Math.min(cellIndex, previousRowCells.length)\r\n                );\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #bottomCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const {cells: closestRowCells} = closestRow;\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const nextRow = this.#nextRow(closestRow);\r\n            if (nextRow) {\r\n                const {cells: nextRowCells} = nextRow;\r\n                return nextRowCells.item(\r\n                    Math.min(cellIndex, nextRowCells.length)\r\n                );\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {ctrlKey, shiftKey} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const composedPath = event.composedPath();\r\n                const targetCell = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridCellElement\r\n                ) : null;\r\n                const selectedCells = this.selectedCells();\r\n                if (targetCell instanceof HTMLEGridCellElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetCell.selected ?\r\n                            this.#addCellsToSelection(targetCell) :\r\n                            this.#removeCellsFromSelection(targetCell);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedCell = selectedCells[selectedCells.length - 1];\r\n                        if (lastSelectedCell) {\r\n                            const range = this.#getCellsRange(\r\n                                lastSelectedCell,\r\n                                targetCell\r\n                            );\r\n                            if (range) {\r\n                                selectedCells.includes(targetCell) ?\r\n                                    this.#removeCellsFromSelection(...range) :\r\n                                    this.#addCellsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setCellsSelection(targetCell);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const selectedRows = this.selectedRows();\r\n                const composedPath = event.composedPath();\r\n                const targetRow = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridRowElement\r\n                ) : null;\r\n                if (targetRow instanceof HTMLEGridRowElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetRow.selected ?\r\n                            this.#addRowsToSelection(targetRow) :\r\n                            this.#removeRowsFromSelection(targetRow);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedRow = selectedRows[selectedRows.length - 1];\r\n                        if (lastSelectedRow) {\r\n                            const range = this.#getRowsRange(\r\n                                lastSelectedRow,\r\n                                targetRow\r\n                            );\r\n                            if (range) {\r\n                                selectedRows.includes(targetRow) ?\r\n                                    this.#removeRowsFromSelection(...range) :\r\n                                    this.#addRowsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setRowsSelection(targetRow);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {selectby, activeCell, activeRow} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    switch (selectby) {\r\n                        case \"cell\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const firstCell = firstRow ? this.#firstCell(firstRow) : null;\r\n                            const lastRow = this.#lastRow();\r\n                            const lastCell = lastRow ? this.#lastCell(lastRow) : null;\r\n                            if (firstCell && lastCell) {\r\n                                const range = this.#getCellsRange(firstCell, lastCell);\r\n                                if (range) {\r\n                                    this.#setCellsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"row\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const lastRow = this.#lastRow();\r\n                            if (firstRow && lastRow) {\r\n                                const range = this.#getRowsRange(firstRow, lastRow);\r\n                                if (range) {\r\n                                    this.#setRowsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const previousCell = this.#previousCell(activeCell);\r\n                        if (previousCell) {\r\n                            previousCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousCell.selected ?\r\n                                    this.#removeCellsFromSelection(previousCell) :\r\n                                    this.#addCellsToSelection(previousCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const nextCell = this.#nextCell(activeCell);\r\n                        if (nextCell) {\r\n                            nextCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextCell.selected ?\r\n                                    this.#removeCellsFromSelection(nextCell) :\r\n                                    this.#addCellsToSelection(nextCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const firstRow = activeRow ?? this.#firstRow();\r\n                        const topCell = activeCell ?\r\n                            this.#topCell(activeCell) :\r\n                            firstRow ?\r\n                            this.#firstCell(firstRow) :\r\n                            null;\r\n                        if (topCell) {\r\n                            topCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                topCell.selected ?\r\n                                    this.#removeCellsFromSelection(topCell) :\r\n                                    this.#addCellsToSelection(topCell);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const previousRow = activeRow ?\r\n                            this.#previousRow(activeRow) :\r\n                            this.#firstRow();\r\n                        if (previousRow) {\r\n                            previousRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousRow.selected ?\r\n                                    this.#removeRowsFromSelection(previousRow) :\r\n                                    this.#addRowsToSelection(previousRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const lastRow = activeRow ?? this.#lastRow();\r\n                        const bottomCell = activeCell ?\r\n                            this.#bottomCell(activeCell) :\r\n                            lastRow ?\r\n                            this.#lastCell(lastRow) :\r\n                            null;\r\n                            if (bottomCell) {\r\n                                bottomCell.focus({preventScroll: true});\r\n                                const {shiftKey} = event;\r\n                                if (shiftKey) {\r\n                                    bottomCell.selected ?\r\n                                        this.#removeCellsFromSelection(bottomCell) :\r\n                                        this.#addCellsToSelection(bottomCell);\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"row\": {\r\n                        const nextRow = activeRow ?\r\n                            this.#nextRow(activeRow) :\r\n                            this.#lastRow();\r\n                        if (nextRow) {\r\n                            nextRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextRow.selected ?\r\n                                    this.#removeRowsFromSelection(nextRow) :\r\n                                    this.#addRowsToSelection(nextRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const firstCell = this.#firstCell(activeRow);\r\n                            if (firstCell) {\r\n                                firstCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const firstRow = this.#firstRow();\r\n                        if (firstRow) {\r\n                            firstRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const lastCell = this.#lastCell(activeRow);\r\n                            if (lastCell) {\r\n                                lastCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const lastRow = this.#lastRow();\r\n                        if (lastRow) {\r\n                            lastRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeCell) {\r\n                            this.#setCellsSelection(activeCell);\r\n                            activeCell.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        if (activeRow) {\r\n                            this.#setRowsSelection(activeRow);\r\n                            activeRow.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        this.#clearCellsSelection();\r\n                        this.#setActiveCell(null);\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        this.#clearRowsSelection();\r\n                        this.#setActiveRow(null);\r\n                        break;\r\n                    }\r\n                }\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const {activeCell} = this;\r\n                if (activeCell && relatedTarget !== activeCell) {\r\n                    activeCell.focus();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const {activeRow} = this;\r\n                if (activeRow && relatedTarget !== activeRow) {\r\n                    activeRow.focus();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLEGridCellElement>(\"e-gridcell\");\r\n                if (targetCell) {\r\n                    this.#setActiveCell(targetCell);\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLEGridRowElement>(\"e-gridrow\");\r\n                if (targetRow) {\r\n                    this.#setActiveRow(targetRow);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedRows = <HTMLEGridRowElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridRowElement\r\n            );\r\n            assignedRows.forEach((row_i, i) => {\r\n                row_i.posinset = i;\r\n            });\r\n    }\r\n}\r\n\r\nvar HTMLEGridElement: HTMLEGridElementConstructor = HTMLEGridElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\n\r\nexport { HTMLEGridHeadElement };\r\n\r\ninterface HTMLEGridHeadElementConstructor {\r\n    prototype: HTMLEGridHeadElement;\r\n    new(): HTMLEGridHeadElement;\r\n}\r\n\r\ninterface HTMLEGridHeadElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridhead\": HTMLEGridHeadElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridhead\"\r\n})\r\nclass HTMLEGridHeadElementBase extends HTMLElement implements HTMLEGridHeadElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                        }\r\n                    `\r\n                    ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridHeadElement: HTMLEGridHeadElementConstructor = HTMLEGridHeadElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuBarElement };\r\n\r\ninterface HTMLEMenuBarElementConstructor {\r\n    prototype: HTMLEMenuBarElement;\r\n    new(): HTMLEMenuBarElement;\r\n}\r\n\r\ninterface HTMLEMenuBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    items(): HTMLEMenuItemElement[];\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    expanded: boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menubar\": HTMLEMenuBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menubar\"\r\n})\r\nclass HTMLEMenuBarElementBase extends HTMLElement implements HTMLEMenuBarElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    #activeIndex: number;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    items(): HTMLEMenuItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        ));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        const {activeIndex} = this;\r\n        return this.querySelector<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem:focus-within\"\r\n        ) ?? activeIndex > -1 ? this.items()[activeIndex] ?? null : null;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLEMenuItemElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        const {activeItem, expanded} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.collapse();\r\n        }\r\n        if (item !== null) {\r\n            if (expanded) {\r\n                item.expand();\r\n            }\r\n            this.#activeIndex = this.items().indexOf(item);\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    get #items(): HTMLEMenuItemElement[] {\r\n        return Array.from(\r\n            this.querySelectorAll(\":is(:scope, :scope > e-menuitemgroup) > e-menuitem\")\r\n        );\r\n    }\r\n\r\n    #isClosestMenu(target: Element): boolean {\r\n        return target.closest(\":is(e-menubar, e-menu)\") == this;\r\n    }\r\n\r\n    #nearestItem(target: Element): HTMLEMenuItemElement | null {\r\n        return this.#items.find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n    \r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof Element) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            this.#setActiveItem(nearestItem);\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, relatedTarget} = event;\r\n        if (target instanceof HTMLElement && !target.contains(<Element>relatedTarget)) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem) {\r\n                nearestItem.collapse();\r\n            }\r\n        }\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.expanded = false;\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {expanded, activeItem} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu && target !== activeItem && expanded) {\r\n                const {menu} = target;\r\n                if (menu) {\r\n                    target.expand();\r\n                    menu.focus({preventScroll: true});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {expanded, activeItem} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu) {\r\n                const isExpanded = !expanded;\r\n                this.expanded = isExpanded;\r\n                if (isExpanded) {\r\n                    if (activeItem && !activeItem.expanded) {\r\n                        activeItem.expand();\r\n                    }\r\n                    const {menu} = target;\r\n                    menu?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true})\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded} = this;\r\n        let {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.#firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem() : \r\n                    this.#lastItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    this.expanded = !expanded;\r\n                    if (!expanded) {\r\n                        const firstChildItem = this.#firstChildItem(activeItem);\r\n                        firstChildItem?.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.expanded = false;\r\n                    if (activeItem) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /*#handleTriggerEvent(): void {\r\n        const {activeItem} = this;\r\n        if (activeItem?.expanded) {\r\n            activeItem.collapse();\r\n        }\r\n        this.expanded = false;\r\n        this.focus({preventScroll: true});\r\n    }*/\r\n}\r\n\r\nvar HTMLEMenuBarElement: HTMLEMenuBarElementConstructor = HTMLEMenuBarElementBase;","import { CustomElement, AttributeProperty, element, QueryProperty } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuButtonElement };\r\nexport { EMenuButton };\r\n\r\ninterface HTMLEMenuButtonElementConstructor {\r\n    prototype: HTMLEMenuButtonElement;\r\n    new(): HTMLEMenuButtonElement;\r\n}\r\n\r\ninterface HTMLEMenuButtonElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    readonly firstItem: HTMLEMenuItemElement | null;\r\n    name: string;\r\n    disabled: boolean;\r\n    expanded: boolean;\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-menubutton\"\r\n})\r\nclass HTMLEMenuButtonElementBase extends HTMLElement implements HTMLEMenuButtonElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @QueryProperty({selector: \":scope > e-menu[slot=menu]\"})\r\n    readonly menu!: HTMLEMenuElement | null;\r\n    \r\n    @QueryProperty({selector: \":scope > e-menu[slot=menu] e-menuitem\"})\r\n    readonly firstItem!: HTMLEMenuItemElement | null;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n    }\r\n\r\n\r\n    toggle(force?: boolean): void {\r\n        const {expanded} = this;\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n\r\n    expand(): void {\r\n        const {expanded} = this;\r\n        if (!expanded) {\r\n            this.expanded = true;\r\n            this.#positionMenu();\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {expanded} = this;\r\n        if (expanded) {\r\n            this.expanded = false;\r\n        }\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const overflowX = itemRight + menuWidth - clientWidth;\r\n            const overflowY = itemTop + menuHeight - clientHeight;\r\n            menuStyle.setProperty(\"left\", `${\r\n                overflowX > 0 ?\r\n                scrollX + itemRight - menuWidth :\r\n                scrollX + itemLeft\r\n            }px`);\r\n            menuStyle.setProperty(\"top\", `${\r\n                overflowY > 0 ?\r\n                scrollY + itemTop - menuHeight :\r\n                scrollY + itemBottom\r\n            }px`);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {menu} = this;\r\n        if (menu && !menu.contains(<Node>target)) {\r\n            this.toggle();\r\n            const {expanded} = this;\r\n            if (expanded) {\r\n                menu?.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded} = this;\r\n        switch (key) {\r\n            case \"ArrowDown\":\r\n            case \"Enter\":\r\n                if (!expanded) {\r\n                    this.expand();\r\n                    this.firstItem?.focus({preventScroll: true});\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            case \"Escape\":\r\n                if (expanded) {\r\n                    this.collapse();\r\n                }\r\n                this.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuButtonElement: HTMLEMenuButtonElementConstructor = HTMLEMenuButtonElementBase;\r\n\r\ninterface EMenuButtonConstructor {\r\n    prototype: HTMLEMenuButtonElement;\r\n    new(init: {\r\n        menu: HTMLEMenuElement\r\n    }): HTMLEMenuButtonElement;\r\n}\r\n\r\nvar EMenuButton = <EMenuButtonConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        menu: HTMLEMenuElement\r\n    }) {\r\n        const {menu} = init;\r\n        menu.slot = \"menu\";\r\n        return element(\"e-menubutton\", {\r\n            attributes: {\r\n                tabindex: -1\r\n            },\r\n            children: [menu]\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuButtonElement.prototype,\r\n    }\r\n);","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element, QueryProperty } from \"../../Element\";\r\nimport { HTMLEMenuButtonElement } from \"../menus/MenuButton\";\r\n\r\nexport { HTMLEToolBarItemElement };\r\nexport { EToolBarItem };\r\n\r\ninterface HTMLEToolBarItemElementConstructor {\r\n    prototype: HTMLEToolBarItemElement;\r\n    new(): HTMLEToolBarItemElement;\r\n}\r\n\r\ninterface HTMLEToolBarItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menubutton: HTMLEMenuButtonElement | null;\r\n    readonly select: HTMLESelectElement | null;\r\n    value: string;\r\n    name: string;\r\n    label: string;\r\n    active: boolean;\r\n    pressed: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritem\": HTMLEToolBarItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritem\"\r\n})\r\nclass HTMLEToolBarItemElementBase extends HTMLElement implements HTMLEToolBarItemElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @QueryProperty({selector: \":scope > e-menubutton[slot=menubutton]\"})\r\n    readonly menubutton!: HTMLEMenuButtonElement | null;\r\n    \r\n    @QueryProperty({selector: \":scope > e-select[slot=select]\"})\r\n    readonly select!: HTMLESelectElement | null;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    pressed!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n\r\n    #wasExpandedOnMouseDown?: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"icon\"\r\n                }\r\n            }),\r\n            element(\"slot\"),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"select\"\r\n                }\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menubutton\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector<HTMLSpanElement>(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"value\": {\r\n                const {type} = this;\r\n                if (type == \"select\") {\r\n                    this.#updateSelectValue();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #updateSelectValue(): void {\r\n        const {select} = this;\r\n        if (select) {\r\n            const {value} = this;\r\n            const {value: selectValue} = select;\r\n            if (selectValue !== value) {\r\n                select.value = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetToolbarItem = (<HTMLElement>target).closest(\"e-toolbaritem\");\r\n        if (targetToolbarItem === this) {\r\n            const {type} = this;\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.pressed = !this.pressed;\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.pressed = true;\r\n                    break;\r\n                }\r\n                case \"menubutton\": {\r\n                    const {menubutton} = this;\r\n                    if (menubutton && !menubutton.contains(<Node>target)) {\r\n                        const force = !this.#wasExpandedOnMouseDown ?? true;\r\n                        menubutton.toggle(force);\r\n                        if (force) {\r\n                            menubutton.firstItem?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                case \"select\": {\r\n                    const {select} = this;\r\n                    if (select && !select.contains(<Node>target)) {\r\n                        const force = !this.#wasExpandedOnMouseDown ?? true;\r\n                        select.toggle(force);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetToolbarItem = (<HTMLElement>target).closest(\"e-toolbaritem\");\r\n        if (targetToolbarItem === this) {\r\n            const {type} = this;\r\n            switch (type) {\r\n                case \"menubutton\": {\r\n                    const {menubutton} = this;\r\n                    if (menubutton && !menubutton.contains(<Node>target)) {\r\n                        this.#wasExpandedOnMouseDown = menubutton.expanded;\r\n                    }\r\n                    break;\r\n                }\r\n                case \"select\": {\r\n                    const {select} = this;\r\n                    if (select && !select.contains(<Node>target)) {\r\n                        this.#wasExpandedOnMouseDown = select.expanded;\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemElement: HTMLEToolBarItemElementConstructor = HTMLEToolBarItemElementBase;\r\n\r\ninterface EToolBarItemConstructor {\r\n    prototype: HTMLEToolBarItemElement;\r\n    new(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n    button(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    checkbox(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    radio(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    menubutton(init: {\r\n        name: string;\r\n        label: string;\r\n        menubutton: HTMLEMenuButtonElement;\r\n    }): HTMLEToolBarItemElement;\r\n    select(init: {\r\n        name: string;\r\n        label: string;\r\n        select: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n}\r\n\r\nvar EToolBarItem = <EToolBarItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menubutton, select} = init;\r\n        if (menubutton) {\r\n            menubutton.slot = \"menubutton\";\r\n        }\r\n        if (select) {\r\n            select.slot = \"select\";\r\n        }\r\n        return element(\"e-toolbaritem\", {\r\n            attributes: {\r\n                tabindex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type\r\n            },\r\n            children: menubutton ? [menubutton] : select ? [select] : undefined,\r\n            listeners: {\r\n                trigger: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEToolBarItemElement.prototype,\r\n        button(init: {\r\n            name: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menubutton(init: {\r\n            name: string;\r\n            label: string;\r\n            menubutton: HTMLEMenuButtonElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"menubutton\"\r\n            });\r\n        },\r\n        select(init: {\r\n            name: string;\r\n            label: string;\r\n            select: HTMLESelectElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"select\"\r\n            });\r\n        },\r\n    }\r\n);","\r\nimport { element, CustomElement, AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEToolBarItemGroupElement };\r\n\r\ninterface HTMLEToolBarItemGroupElementConstructor {\r\n    prototype: HTMLEToolBarItemGroupElement;\r\n    new(): HTMLEToolBarItemGroupElement;\r\n}\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\ninterface HTMLEToolBarItemGroupElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n    disabled: boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritemgroup\": HTMLEToolBarItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritemgroup\"\r\n})\r\nclass HTMLEToolBarItemGroupElementBase extends HTMLElement implements HTMLEToolBarItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    disabled!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            width: max-content;\r\n                            flex-direction: row;\r\n                        }\r\n\r\n                        /*:host([orientation=\"vertical\"]) {\r\n                            flex-direction: column;\r\n                        }\r\n\r\n                        :host([orientation=\"horizontal\"]) {\r\n                            flex-direction: row;\r\n                        }*/\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const label = this.shadowRoot.querySelector<HTMLLabelElement>(\"[part='label']\");\r\n                if (label) {\r\n                    label.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"disabled\": {\r\n                /*this.items.forEach((item) => {\r\n                    item.disabled = newValue !== null;\r\n                });*/\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemGroupElement: HTMLEToolBarItemGroupElementConstructor = HTMLEToolBarItemGroupElementBase;","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEToolBarItemElement } from \"./ToolBarItem\";\r\nimport { HTMLEToolBarItemGroupElement } from \"./ToolBarItemGroup\";\r\n\r\nexport { HTMLEToolBarElement };\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\ninterface HTMLEToolBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    items(): HTMLEToolBarItemElement[];\r\n    readonly activeItem: HTMLEToolBarItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n}\r\n\r\ninterface HTMLEToolbarElementConstructor {\r\n    prototype: HTMLEToolBarElement;\r\n    new(): HTMLEToolBarElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbar\": HTMLEToolBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbar\"\r\n})\r\nclass HTMLEToolBarElementBase extends HTMLElement implements HTMLEToolBarElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get activeItem(): HTMLEToolBarItemElement | null {\r\n        return this.querySelector<HTMLEToolBarItemElement>(\r\n            \"e-toolbaritem[active]\"\r\n        );\r\n    }\r\n\r\n    items(): HTMLEToolBarItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEToolBarItemElement>(\r\n            \":is(:scope, :scope > e-toolbaritemgroup) > e-toolbaritem\"\r\n        ));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    orientation!: ToolBarOrientation;\r\n\r\n    #walker: TreeWalker;\r\n    #activeIndex: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#activeIndex = -1;\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEToolBarItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEToolBarItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEToolBarItemElement | null>walker.previousSibling();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEToolBarItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEToolBarItemElement | null): void {\r\n        const {activeItem} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n            this.#activeIndex = this.items().indexOf(item);\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    /*#handleChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLESelectElement) {\r\n            const item = target.closest(\"e-toolbaritem\");\r\n            if (item !== null) {\r\n                const {select, type} = item;\r\n                if (target == select && select && type == \"select\") {\r\n                    const {value} = item;\r\n                    const {value: selectValue} = select;\r\n                    if (value !== selectValue) {\r\n                        item.value = selectValue;\r\n                        item.trigger();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }*/\r\n\r\n    /*#handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEToolBarItemElement) {\r\n            const {type} = target;\r\n            switch (type) {\r\n                case \"menubutton\": {\r\n                    const {menubutton} = target;\r\n                    if (menubutton) {\r\n                        const {expanded} = menubutton;\r\n                        if (!expanded) {\r\n                            menubutton.expand();\r\n                            menubutton.menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                case \"select\": {\r\n                    const {select} = target;\r\n                    if (select) {\r\n                        select.toggle();\r\n                    }\r\n                    break;\r\n                }\r\n                default: {\r\n                    target.trigger();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }*/\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetItem = <HTMLEToolBarItemElement | null>(<HTMLElement>target).closest(\"e-toolbaritem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetItem);\r\n            this.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.#setActiveItem(null);\r\n            this.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"menubutton\": {\r\n                            const {menubutton} = activeItem;\r\n                            if (menubutton) {\r\n                                menubutton.expand();\r\n                                menubutton.firstItem?.focus({preventScroll: true});\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"select\": {\r\n                            const {select} = activeItem;\r\n                            if (select) {\r\n                                select.expand();\r\n                            }\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            activeItem.click();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"select\": {\r\n                            activeItem.select?.expand();\r\n                            event.stopPropagation();\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    activeItem.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarElement: HTMLEToolbarElementConstructor = HTMLEToolBarElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLETabPanelElement };\r\n\r\ninterface HTMLETabPanelElementConstructor {\r\n    prototype: HTMLETabPanelElement;\r\n    new(): HTMLETabPanelElement;\r\n}\r\n\r\ninterface HTMLETabPanelElement extends HTMLElement {\r\n    name: string;\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tabpanel\"\r\n})\r\nclass HTMLETabPanelElementBase extends HTMLElement implements HTMLETabPanelElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n        \r\n                        :host([hidden]) {\r\n                            display: none;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n}\r\n\r\nvar HTMLETabPanelElement: HTMLETabPanelElementConstructor = HTMLETabPanelElementBase;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tabpanel\": HTMLETabPanelElement,\r\n    }\r\n}","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLETabPanelElement } from \"./TabPanel\";\r\n\r\nexport { ETabChangeEvent };\r\nexport { HTMLETabElement };\r\n\r\ninterface HTMLETabElementConstructor {\r\n    prototype: HTMLETabElement;\r\n    new(): HTMLETabElement;\r\n}\r\n\r\ninterface HTMLETabElement extends HTMLElement {\r\n    name: string;\r\n    active: boolean;\r\n    disabled: boolean;\r\n    controls: string;\r\n    panel: HTMLETabPanelElement | null;\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ntype ETabChangeEvent = CustomEvent<{\r\n    tab: HTMLETabElement;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_tabchange\": ETabChangeEvent,\r\n    }\r\n\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tab\": HTMLETabElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tab\"\r\n})\r\nclass HTMLETabElementBase extends HTMLElement implements HTMLETabElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    #panel: HTMLETabPanelElement | null;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            user-select: none;\r\n                            white-space: nowrap;\r\n\r\n                            padding: 2px 6px;\r\n                            cursor: pointer;\r\n                        }\r\n                        \r\n                        :host([disabled]) {\r\n                            color: lightgray;\r\n                            pointer-events: none;\r\n                        }\r\n        \r\n                        :host([active]) {\r\n                            background-color: lightgray;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n        this.#panel = null;\r\n    }\r\n\r\n    get panel(): HTMLETabPanelElement | null {\r\n        return this.#panel;\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const panel = document.getElementById(this.controls);\r\n        if (panel !== this.#panel && panel instanceof HTMLETabPanelElement) {\r\n            this.#panel = panel;\r\n        }\r\n        if (panel)  {\r\n            panel.hidden = !this.active;\r\n        }\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"active\":\r\n                if (this.active) {\r\n                    this.dispatchEvent(new CustomEvent(\"e_tabchange\", {detail: {tab: this}, bubbles: true}));\r\n                }\r\n                const panel = document.getElementById(this.controls);\r\n                if (panel !== this.panel && panel instanceof HTMLETabPanelElement) {\r\n                    this.#panel = panel;\r\n                }\r\n                if (panel)  {\r\n                    panel.hidden = !this.active;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabElement: HTMLETabElementConstructor = HTMLETabElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLETabElement } from \"./Tab\";\r\n\r\nexport { HTMLETabListElement };\r\n\r\ninterface HTMLETabListElementConstructor {\r\n    prototype: HTMLETabListElement;\r\n    new(): HTMLETabListElement;\r\n}\r\n\r\ninterface HTMLETabListElement extends HTMLElement {\r\n    readonly activeTab: HTMLETabElement | null;\r\n    tabs: HTMLETabElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tablist\": HTMLETabListElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tablist\"\r\n})\r\nclass HTMLETabListElementBase extends HTMLElement implements HTMLETabListElement {\r\n\r\n    tabs: HTMLETabElement[];\r\n\r\n    #activeIndex: number;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                            position: relative;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n        \r\n        this.tabs = [];\r\n        this.#activeIndex = 1;\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeTab(): HTMLETabElement | null {\r\n        return this.tabs[this.#activeIndex] || null;\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n        const slot = this.shadowRoot!.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", (event) => {\r\n\r\n                const tabs = <HTMLETabElement[]>(<HTMLSlotElement>event.target)\r\n                    .assignedElements()\r\n                    .filter(tab => tab instanceof HTMLETabElement);\r\n                this.tabs = tabs;\r\n                this.#activeIndex = this.tabs.findIndex(tab => tab.active);\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event) => {\r\n            switch (event.key) {\r\n                case \"ArrowUp\":\r\n                    this.focusTabAt((this.activeIndex <= 0) ? this.tabs.length - 1 : this.activeIndex - 1);\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    this.focusTabAt((this.activeIndex >= this.tabs.length - 1) ? 0 : this.activeIndex + 1);\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"Enter\":\r\n                    if (this.activeTab) {\r\n                        this.activateTab(this.activeTab);\r\n                    }\r\n                    break;\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"click\", (event) => {\r\n            const target = event.target;\r\n            if (target instanceof HTMLETabElement) {\r\n                target.active = true;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"e_tabchange\", (event) => {\r\n            const targetIndex = this.tabs.indexOf(event.detail.tab);\r\n            this.#activeIndex = targetIndex;\r\n            this.tabs.forEach((thisTab, thisTabIndex) => {\r\n                if (thisTabIndex !== targetIndex) {\r\n                    thisTab.active = false;\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    focusTabAt(index: number): void {\r\n        const tab = this.tabs[index];\r\n        if (tab) {\r\n            this.#activeIndex = index;\r\n            tab.focus();\r\n        }\r\n    }\r\n\r\n    activateTab(tab: HTMLETabElement) {\r\n        if (this.tabs.includes(tab)) {\r\n            tab.active = true;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabListElement: HTMLETabListElementConstructor = HTMLETabListElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLETreeElement } from \"./Tree\";\r\nimport { HTMLETreeItemElement } from \"./TreeItem\";\r\n\r\nexport { HTMLETreeItemGroupElement };\r\n\r\ninterface HTMLETreeItemGroupElementConstructor {\r\n    prototype: HTMLETreeItemGroupElement;\r\n    new(): HTMLETreeItemGroupElement;\r\n}\r\n\r\ninterface HTMLETreeItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitemgroup\": HTMLETreeItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-treeitemgroup\"\r\n})\r\nclass HTMLETreeItemGroupElementBase extends HTMLElement implements HTMLETreeItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLETreeItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLETreeItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n            item_i.level = (() => {\r\n                let level = -1;\r\n                let closestItem: HTMLETreeItemElement | null = item_i;\r\n                while (closestItem !== null && closestItem.matches(\"e-tree :scope\")) {\r\n                    closestItem = closestItem.parentElement?.closest(\"e-treeitem\") ?? null;\r\n                    level++;\r\n                }\r\n                return level;\r\n            })();\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemGroupElement: HTMLETreeItemGroupElementConstructor = HTMLETreeItemGroupElementBase;","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeItemElement };\r\n\r\ninterface HTMLETreeItemElementConstructor {\r\n    prototype: HTMLETreeItemElement;\r\n    new(): HTMLETreeItemElement;\r\n}\r\n\r\ninterface HTMLETreeItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly group: HTMLETreeItemGroupElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    expanded: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    level: number;\r\n    type: \"leaf\" | \"parent\";\r\n    toggle(force?: boolean): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitem\": HTMLETreeItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-treeitem\"\r\n})\r\nclass HTMLETreeItemElementBase extends HTMLElement implements HTMLETreeItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get group(): HTMLETreeItemGroupElement | null {\r\n        return this.#group;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    expanded!: boolean;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number, observed: true})\r\n    level!: number;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"leaf\"})\r\n    type!: \"leaf\" | \"parent\";\r\n\r\n    #group: HTMLETreeItemGroupElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"arrow\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"group\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.#group = null;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"expanded\": {\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const labelPart = this.shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"level\": {\r\n                this.style.setProperty(\"--level\", `${this.level}`);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        this.expanded = force ?? !this.expanded;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, shiftKey, ctrlKey} = event;\r\n        const {type} = this;\r\n        if (this == target && type == \"parent\" && !(shiftKey || ctrlKey)) {\r\n            this.toggle();\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target;\r\n        switch (slotName) {\r\n            case \"group\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#group = element instanceof HTMLETreeItemGroupElement ? element : null;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemElement: HTMLETreeItemElementConstructor = HTMLETreeItemElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLETreeItemElement } from \"./TreeItem\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeElement };\r\n\r\ninterface HTMLETreeElementConstructor {\r\n    prototype: HTMLETreeElement;\r\n    new(): HTMLETreeElement;\r\n}\r\n\r\ninterface HTMLETreeElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLETreeItemElement>;\r\n    readonly activeItem: HTMLETreeItemElement | null;\r\n    readonly dropTargetItem: HTMLETreeItemElement | null;\r\n    droptarget: boolean;\r\n    name: string;\r\n    selectedItems(): HTMLETreeItemElement[];\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tree\": HTMLETreeElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-tree\"\r\n})\r\nclass HTMLETreeElementBase extends HTMLElement implements HTMLETreeElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLETreeItemElement>;\r\n\r\n    get activeItem(): HTMLETreeItemElement | null {\r\n        return this.querySelector<HTMLETreeItemElement>(\r\n            \"e-treeitem[active]\"\r\n        );\r\n    }\r\n\r\n    get dropTargetItem(): HTMLETreeItemElement | null {\r\n        return this.querySelector<HTMLETreeItemElement>(\r\n            \"e-treeitem[droptarget]\"\r\n        );\r\n    }\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.items = this.getElementsByTagName(\"e-treeitem\");\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    selectedItems(): HTMLETreeItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.#firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLETreeItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLETreeItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLETreeItemElement, to: HTMLETreeItemElement): HTMLETreeItemElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleItem = this.#nextItem(from);\r\n            while (nextVisibleItem && nextVisibleItem !== to) {\r\n                range.push(nextVisibleItem);\r\n                nextVisibleItem = this.#nextItem(nextVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleItem = this.#previousItem(from);\r\n            while (previousVisibleItem && previousVisibleItem !== to) {\r\n                range.push(previousVisibleItem);\r\n                previousVisibleItem = this.#previousItem(previousVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLETreeItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((item_i) => {\r\n            item_i.selected = false;\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLETreeItemElement | null): void {\r\n        const {activeItem} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = item;\r\n            item.active = true;\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n    \r\n    #setDropTargetItem(item: HTMLETreeItemElement | null): void {\r\n        const {dropTargetItem} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n        }\r\n    }\r\n\r\n    #firstItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousSibling = <HTMLETreeItemElement | null>walker.previousSibling();\r\n        return previousSibling ?\r\n            this.#deepestItem(previousSibling) :\r\n            <HTMLETreeItemElement | null>walker.parentNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const {type, expanded} = item;\r\n        return <HTMLETreeItemElement | null>(\r\n            type === \"leaf\" ?\r\n                walker.nextNode() :\r\n                expanded ?\r\n                    walker.nextNode() :\r\n                    walker.nextSibling() ??\r\n                    (walker.parentNode(), walker.nextSibling())\r\n        );\r\n    }\r\n\r\n    #deepestItem(item: HTMLETreeItemElement): HTMLETreeItemElement {\r\n        if (item.expanded) {\r\n            const walker = this.#walker;\r\n            const lastItem = <HTMLETreeItemElement>walker.lastChild();\r\n            if (lastItem) {\r\n                return this.#deepestItem(lastItem);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey, button} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const {selected} = target;\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setSelection(target);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            target.blur();\r\n                        }\r\n                        (!selected) ?\r\n                            this.#addToSelection(target) :\r\n                            this.#removeFromSelection(target);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const {activeItem} = this\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                target\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(target);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const {type} = target;\r\n            if (type == \"parent\") {\r\n                target.toggle(true);\r\n            }\r\n            this.#setDropTargetItem(target);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!this.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        const {root} = walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? root, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? root, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(\r\n                                firstItem,\r\n                                this.#deepestItem(lastItem)\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    if (activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                    else {\r\n                        const walker = this.#walker;\r\n                        const parentItem = <HTMLETreeItemElement>walker.parentNode();\r\n                        if (parentItem) {\r\n                            parentItem.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    if (!activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.#setActiveItem(null);\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            this.#setActiveItem(target);\r\n            this.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLETreeItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLETreeItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n            item_i.level = 0;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLETreeElement: HTMLETreeElementConstructor = HTMLETreeElementBase;","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEToolBarElement } from \"../toolbars/ToolBar\";\r\n\r\nexport { HTMLEListItemElement };\r\n\r\ninterface HTMLEListItemElementConstructor {\r\n    prototype: HTMLEListItemElement;\r\n    new(): HTMLEListItemElement;\r\n}\r\n\r\ninterface HTMLEListItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly badge: HTMLSpanElement | null;\r\n    readonly toolbar: HTMLEToolBarElement | null;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitem\": HTMLEListItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-listitem\"\r\n})\r\nclass HTMLEListItemElementBase extends HTMLElement implements HTMLEListItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    get badge(): HTMLElement | null {\r\n        return this.#badge;\r\n    }\r\n\r\n    get toolbar(): HTMLEToolBarElement | null {\r\n        return this.#toolbar;\r\n    }\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    #badge: HTMLElement | null;\r\n    #toolbar: HTMLEToolBarElement | null;\r\n    #menu: HTMLEMenuElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#badge = null;\r\n        this.#menu = null;\r\n        this.#toolbar = null;\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this))\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"toolbar\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#toolbar = element instanceof HTMLEToolBarElement ? element : null;\r\n                break;\r\n            }\r\n            case \"badge\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#badge = element instanceof HTMLSpanElement ? element : null;\r\n                break;\r\n            }\r\n            case \"menu\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#menu = element instanceof HTMLEMenuElement ? element : null;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEListItemElement: HTMLEListItemElementConstructor = HTMLEListItemElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEListItemElement } from \"./ListItem\";\r\n\r\nexport { HTMLEListItemGroupElement };\r\n\r\ninterface HTMLEListItemGroupElementConstructor {\r\n    prototype: HTMLEListItemGroupElement;\r\n    new(): HTMLEListItemGroupElement;\r\n}\r\n\r\ninterface HTMLEListItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitemgroup\": HTMLEListItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-listitemgroup\"\r\n})\r\nclass HTMLEListItemGroupElementBase extends HTMLElement implements HTMLEListItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEListItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEListItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEListItemGroupElement: HTMLEListItemGroupElementConstructor = HTMLEListItemGroupElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEListItemElement } from \"./ListItem\";\r\nimport { HTMLEListItemGroupElement } from \"./ListItemGroup\";\r\n\r\nexport { HTMLEListElement };\r\n\r\ninterface HTMLEListElementConstructor {\r\n    prototype: HTMLEListElement;\r\n    new(): HTMLEListElement;\r\n}\r\n\r\ninterface HTMLEListElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEListItemElement>;\r\n    readonly activeItem: HTMLEListItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    droptarget: boolean;\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    selectedItems(): HTMLEListItemElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-list\": HTMLEListElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-list\"\r\n})\r\nclass HTMLEListElementBase extends HTMLElement implements HTMLEListElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEListItemElement>;\r\n\r\n    get dropTargetItem(): HTMLEListItemElement | null {\r\n        return this.items[this.#dropTargetIndex] ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    #dropTargetIndex: number;\r\n    #activeIndex: number;\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        this.#dropTargetIndex = -1;\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.items = this.getElementsByTagName(\"e-listitem\");\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEListItemElement | null {\r\n        return this.items[this.activeIndex] ?? null;\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    selectedItems(): HTMLEListItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.#firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEListItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEListItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLEListItemElement, to: HTMLEListItemElement): HTMLEListItemElement[] {\r\n        const items = Array.from(this.items);\r\n        const fromIndex = items.indexOf(from);\r\n        const toIndex = items.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return items.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        selectedItems.forEach((item_i) => {\r\n            if (item_i.selected) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEListItemElement | null): void {\r\n        const {activeItem, items} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n            item.tabIndex = 0;\r\n            this.#activeIndex = Array.from(items).indexOf(item);\r\n        }\r\n    }\r\n\r\n    #setDropTargetItem(item: HTMLEListItemElement | null): void {\r\n        const {dropTargetItem, items} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n            this.#dropTargetIndex = Array.from(items).indexOf(item);\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n            this.#dropTargetIndex = -1;\r\n        }\r\n    }\r\n\r\n    #firstItem(): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLEListItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLEListItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEListItemElement): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEListItemElement | null>walker.previousNode();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEListItemElement): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const nextItem = <HTMLEListItemElement | null>walker.nextNode();\r\n        return nextItem;\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent) {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n            target.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey} = event;\r\n        const selectedItems = this.selectedItems();\r\n        if (target instanceof HTMLEListItemElement) {\r\n            if (!shiftKey && !ctrlKey) {\r\n                this.#setSelection(target);\r\n            }\r\n            else if (ctrlKey) {\r\n                (!target.selected) ?\r\n                    this.#addToSelection(target) :\r\n                    this.#removeFromSelection(target);\r\n                event.stopPropagation();\r\n            }\r\n            else if (shiftKey) {\r\n                const lastSelectedItem = selectedItems[selectedItems.length - 1];\r\n                if (lastSelectedItem) {\r\n                    const range = this.#getItemsRange(\r\n                        lastSelectedItem,\r\n                        target\r\n                    );\r\n                    if (range) {\r\n                        if (selectedItems.includes(target)) {\r\n                            this.#removeFromSelection(...range);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(...range);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.#setSelection(target);\r\n                }\r\n                event.stopPropagation();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            this.#setDropTargetItem(target);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n    \r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n        const relatedTargetHost =\r\n            relatedTargetRoot instanceof ShadowRoot ?\r\n            relatedTargetRoot.host :\r\n            relatedTarget;\r\n        if (!this.contains(<Node>relatedTargetHost)) {\r\n            this.#setDropTargetItem(null);\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    const walker = this.#walker;\r\n                    const {root} = walker;\r\n                    const firstItem = <HTMLEListItemElement>(\r\n                        walker.currentNode = walker.parentNode() ?? root, walker.firstChild()\r\n                    );\r\n                    const lastItem = <HTMLEListItemElement>(\r\n                        walker.currentNode = walker.parentNode() ?? root, walker.lastChild()\r\n                    );\r\n                    const range = this.#getItemsRange(\r\n                        firstItem,\r\n                        lastItem\r\n                    );\r\n                    if (range) {\r\n                        this.#setSelection(...range);\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                const {activeItem} = this;\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.#setActiveItem(null);\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            this.#setActiveItem(target);\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (!this.#onSelection) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEListItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEListItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEListElement: HTMLEListElementConstructor = HTMLEListElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEDraggableElement };\r\n\r\ninterface HTMLEDraggableElementConstructor {\r\n    prototype: HTMLEDraggableElement;\r\n    new(): HTMLEDraggableElement;\r\n}\r\n\r\ninterface HTMLEDraggableElement extends HTMLElement {\r\n    readonly referee: this | null;\r\n    readonly references: this[];\r\n    selected: boolean;\r\n    dragged: boolean;\r\n    dragovered: boolean;\r\n\r\n    connectedCallback(): void;\r\n    disconnectedCallback(): void;\r\n    getReference(): this;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-draggable\": HTMLEDraggableElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-draggable\"\r\n})\r\nclass HTMLEDraggableElementBase extends HTMLElement implements HTMLEDraggableElement {\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    dragovered!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    dragged!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    #referee: this | null;\r\n    readonly references: this[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            padding: 3px 4px;\r\n                            cursor: pointer;\r\n                            white-space: nowrap;\r\n                            border-radius: 4px;\r\n                            border: 1px solid black;\r\n                            user-select: none;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                            color: lightgray;\r\n                            border-color: lightgray;\r\n                        }\r\n        \r\n                        :host([selected]:active) {\r\n                            cursor: grabbing;\r\n                        }\r\n                        \r\n                        :host([selected]) {\r\n                            cursor: grab;\r\n                            font-weight: bold;\r\n                            outline: 1px auto black;\r\n                        }\r\n        \r\n                        :host([dragovered]) {\r\n                            border-style: dotted;\r\n                        }\r\n                        \r\n                        [part=\"container\"] {\r\n                            display: flex;\r\n                            align-items: center;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"container\"\r\n                },\r\n                children: [\r\n                    element(\"slot\", {\r\n                        children: [\r\n                            \"&nbsp;\"\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.references = [];\r\n        this.#referee = null;\r\n    }\r\n\r\n    get referee(): this | null {\r\n        return this.#referee;\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n        this.draggable = true;\r\n    }\r\n\r\n    disconnectedCallback(): void {\r\n        if (this.referee) {\r\n            const thisRefIndex = this.referee.references.indexOf(this);\r\n            if (thisRefIndex > -1) {\r\n                this.referee.references.splice(thisRefIndex, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    getReference(): this {\r\n        const reference = <this>this.cloneNode(true);\r\n        reference.#referee = this;\r\n        return reference;\r\n    }\r\n}\r\n\r\nvar HTMLEDraggableElement: HTMLEDraggableElementConstructor = HTMLEDraggableElementBase","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\n\r\nexport { HTMLEDragzoneElement };\r\n\r\ninterface HTMLEDragzoneElementConstructor {\r\n    prototype: HTMLEDragzoneElement;\r\n    new(): HTMLEDragzoneElement\r\n}\r\n\r\ninterface HTMLEDragzoneElement extends HTMLElement {\r\n    readonly draggables: HTMLEDraggableElement[];\r\n    readonly selectedDraggables: HTMLEDraggableElement[];\r\n    disabled: boolean;\r\n    selectDraggable(draggable: HTMLEDraggableElement): void;\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void;\r\n    clearSelection(): void;\r\n    connectedCallback(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dragzone\": HTMLEDragzoneElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dragzone\"\r\n})\r\nclass HTMLEDragzoneElementBase extends HTMLElement implements HTMLEDragzoneElement {\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    #draggables: HTMLEDraggableElement[];\r\n    #selectedDraggables: HTMLEDraggableElement[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                        }\r\n        \r\n                        [part=\"container\"] {\r\n                            position: relative;\r\n                            display: flex;\r\n                            flex-direction: column;\r\n                            padding-left: 2px;\r\n                            padding-right: 2px;\r\n                        }\r\n        \r\n                        ::slotted(*) {\r\n                            margin-top: 2px;\r\n                            margin-bottom: 2px;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"container\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n        this.#draggables = [];\r\n        this.#selectedDraggables = [];\r\n    }\r\n\r\n    get draggables(): HTMLEDraggableElement[] {\r\n        return this.#draggables;\r\n    }\r\n\r\n    get selectedDraggables(): HTMLEDraggableElement[] {\r\n        return this.#selectedDraggables;\r\n    }\r\n\r\n    selectDraggable(draggable: HTMLEDraggableElement): void {\r\n        if (!this.selectedDraggables.includes(draggable)) {\r\n            this.selectedDraggables.push(draggable);\r\n        }\r\n        if (!draggable.selected) {\r\n            draggable.selected = true;\r\n        }\r\n    }\r\n\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void {\r\n        const index = this.selectedDraggables.indexOf(draggable);\r\n        if (index > -1) {\r\n            if (draggable.selected) {\r\n                draggable.selected = false;\r\n            }\r\n            this.selectedDraggables.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.selectedDraggables.forEach((draggable) => {\r\n            draggable.selected = false;\r\n        });\r\n        this.#selectedDraggables = [];\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const draggables = slot.assignedElements().filter(\r\n                    elem => elem instanceof HTMLEDraggableElement\r\n                ) as HTMLEDraggableElement[];\r\n                this.#draggables = draggables;\r\n                this.draggables.forEach((draggable) => {\r\n                    draggable.draggable = true;\r\n                });\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Escape\":\r\n                    this.clearSelection();\r\n                    this.focus();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragstart\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                this.selectedDraggables.forEach((thisSelectedDraggable) => {\r\n                    thisSelectedDraggable.dragged = true;\r\n                });\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", this.id);\r\n                }\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event) => {\r\n            const dataTransfer = event.dataTransfer;\r\n            if (dataTransfer) {\r\n                dataTransfer.dropEffect = \"none\";\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"dragend\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                const thisDraggedDraggables = this.draggables.filter(draggable => draggable.dragged);\r\n                thisDraggedDraggables.forEach((thisDraggedDraggable) => {\r\n                    thisDraggedDraggable.dragged = false;\r\n                });\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            if (!this.contains(relatedTarget)) {\r\n                this.clearSelection();\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button == 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        if (!target.selected) {\r\n                            this.clearSelection();\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                    else if (event.ctrlKey) {\r\n                        (!target.selected) ?\r\n                            this.selectDraggable(target) :\r\n                            this.unselectDraggable(target);\r\n                    }\r\n                    else if (event.shiftKey) {\r\n                        if (this.selectedDraggables.length > 0) {\r\n                            const targetIndex = this.draggables.indexOf(target);\r\n                            const firstIndex = this.draggables.indexOf(this.selectedDraggables[0]);\r\n                            const direction = Math.sign(targetIndex - firstIndex);\r\n                            const fromIndex = (direction > 0) ? 0 : this.draggables.length - 1;\r\n                            const toIndex = (direction > 0) ? this.draggables.length - 1 : 0;\r\n                            const startRangeIndex = (direction > 0) ? firstIndex : targetIndex;\r\n                            const endRangeIndex = (direction > 0) ? targetIndex : firstIndex;\r\n                            for (let index = fromIndex; index !== (toIndex + direction); index += direction) {\r\n                                (index >= startRangeIndex && index <= endRangeIndex) ? \r\n                                    this.selectDraggable(this.draggables[index]) :\r\n                                    this.unselectDraggable(this.draggables[index]);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.clearSelection();\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mouseup\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button == 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        this.draggables.forEach((thisDraggable) => {\r\n                            if (thisDraggable !== target) {\r\n                                this.unselectDraggable(thisDraggable);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEDragzoneElement: HTMLEDragzoneElementConstructor = HTMLEDragzoneElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\nimport { HTMLEDragzoneElement } from \"./Dragzone\";\r\n\r\nexport { HTMLEDropzoneElement };\r\nexport { EDataChangeEvent };\r\n\r\ninterface HTMLEDropzoneElementConstructor {\r\n    prototype: HTMLEDropzoneElement;\r\n    new(): HTMLEDropzoneElement;\r\n}\r\n\r\ninterface HTMLEDropzoneElement extends HTMLEDragzoneElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    dragovered: DropzoneDragoveredType | null;\r\n    name: string;\r\n    multiple: boolean;\r\n    placeholder: string;\r\n\r\n    droptest: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => void) | null;\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): void;\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean): void;\r\n\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ntype DropzoneDragoveredType = \"self\" | \"draggable\" | \"appendarea\";\r\n\r\ntype EDataChangeEvent = CustomEvent<{\r\n    action: \"insert\" | \"remove\";\r\n    draggables: HTMLEDraggableElement[];\r\n    position: number;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dropzone\": HTMLEDropzoneElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"e_datachange\": EDataChangeEvent,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dropzone\"\r\n})\r\nclass HTMLEDropzoneElementBase extends HTMLEDragzoneElement implements HTMLEDropzoneElement {\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    dragovered!: DropzoneDragoveredType | null;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    placeholder!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    multiple!: boolean;\r\n\r\n    droptest!: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => boolean) | null;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.shadowRoot!.querySelector(\"style\")!.append(/*css*/`\r\n            :host {\r\n                border: 1px dashed gray;\r\n            }\r\n\r\n            :host(:not([multiple]):not(:empty)) [part=\"appendarea\"],\r\n            :host(:not(:empty):not([dragovered])) [part=\"appendarea\"] {\r\n                display: none !important;\r\n            }\r\n\r\n            [part=\"appendarea\"] {\r\n                display: block;\r\n                margin: 2px;\r\n                border-radius: 4px;\r\n                border: 1px dotted black;\r\n            }\r\n\r\n            :host(:not([dragovered=\"appendarea\"])) [part=\"appendarea\"] {\r\n                border-color: transparent;\r\n            }\r\n            \r\n            [part=\"placeholder\"] {\r\n                display: inline-block;\r\n                color: grey;\r\n                pointer-events: none;\r\n                user-select: none;\r\n            }\r\n        `);\r\n\r\n        this.shadowRoot.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"appendarea\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"placeholder\"\r\n                        },\r\n                        children: [\r\n                            \"&nbsp;\"\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.droptest = null;\r\n    }\r\n    \r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        const appendAreaPart = this.shadowRoot!.querySelector<HTMLDivElement>(\"[part='appendarea']\");\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Delete\":\r\n                    if (this == event.target) {\r\n                        this.removeDraggables();\r\n                    }\r\n                    else {\r\n                        this.removeDraggables(draggable => draggable.selected);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragover\", (event: DragEvent) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragover\", (event) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragenter\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                target.dragovered = true;\r\n                this.dragovered = \"draggable\";\r\n            }\r\n            else {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragenter\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"appendarea\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event: DragEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                if (target == this) {\r\n                    if (appendAreaPart) {\r\n                        this.dragovered = \"self\";\r\n                    }\r\n                    if (!this.draggables.includes(relatedTarget)) {\r\n                        this.dragovered = null;\r\n                    }\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                }\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragleave\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n        \r\n        this.addEventListener(\"drop\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                let dropIndex = this.draggables.length;\r\n                if (target == this) {\r\n                    this.dragovered = null;\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                    dropIndex = this.draggables.indexOf(target);\r\n                }\r\n\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    const dragzoneId = dataTransfer.getData(\"text/plain\");\r\n                    const dragzone = document.getElementById(dragzoneId);\r\n                    if (dragzone instanceof HTMLEDragzoneElement) {\r\n                        const selectedDraggables = dragzone.selectedDraggables;\r\n                        if (selectedDraggables) {\r\n                            selectedDraggables.forEach((selectedDraggable) => {\r\n                                selectedDraggable.dragged = false;\r\n                            });\r\n                            if (dragzone instanceof HTMLEDropzoneElement) {\r\n                                dragzone.removeDraggables((draggable) => selectedDraggables.includes(draggable));\r\n                            }\r\n                            dragzone.clearSelection();\r\n                            this.addDraggables(selectedDraggables, dropIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.dragovered = null;\r\n            event.preventDefault();\r\n        });\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"placeholder\": {\r\n                const placeholderPart = this.shadowRoot.querySelector(\"[part='placeholder']\");\r\n                if (placeholderPart) {\r\n                    placeholderPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): HTMLEDraggableElement[] | null {\r\n        if (draggables.length > 0) {\r\n            let dataTransferSuccess = true;\r\n            if (this.droptest) {\r\n                dataTransferSuccess = this.droptest(this, draggables);\r\n            }\r\n            \r\n            let newDraggables: HTMLEDraggableElement[] = [];\r\n            let insertionPosition = -1;\r\n            if (dataTransferSuccess) {\r\n                if (this.multiple) {\r\n                    draggables.forEach((draggable) => {\r\n                        let newDraggable = draggable.getReference();\r\n                        if (position > -1 && position < this.draggables.length) {\r\n                            this.draggables[position].insertAdjacentElement(\"beforebegin\", newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? position : insertionPosition;\r\n                        }\r\n                        else {\r\n                            this.appendChild(newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? this.draggables.length - 1 : insertionPosition;\r\n                        }\r\n                        newDraggables.push(newDraggable);\r\n                    });\r\n                }\r\n                else {\r\n                    let newDraggable = draggables[0].getReference();\r\n                    if (this.draggables.length > 0) {\r\n                        this.replaceChild(newDraggable, this.draggables[0]);\r\n                    }\r\n                    else {\r\n                        this.appendChild(newDraggable);\r\n                    }\r\n                    newDraggables.push(newDraggable);\r\n                    insertionPosition = 0;\r\n                }\r\n            }\r\n            \r\n            const slot = this.shadowRoot?.querySelector(\"slot\");\r\n            if (slot) {\r\n                slot.addEventListener(\"slotchange\", () => {\r\n                    this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                        bubbles: true,\r\n                        detail: {\r\n                            action: \"insert\",\r\n                            draggables: newDraggables,\r\n                            position: insertionPosition\r\n                        }\r\n                    }));\r\n                }, {once: true});\r\n            }\r\n            return newDraggables;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean = () => true) {\r\n        let toRemove = this.draggables.filter(\r\n            (value: HTMLEDraggableElement, index: number) => {\r\n                return predicate(value, index);\r\n            }\r\n        );\r\n        let atPosition = this.draggables.indexOf(toRemove[0]);\r\n        toRemove.forEach((draggable) => {\r\n            draggable.remove(); \r\n        });\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                    bubbles: true,\r\n                    detail: {\r\n                        action: \"remove\",\r\n                        draggables: toRemove,\r\n                        position: atPosition\r\n                    }\r\n                }));\r\n            }, {once: true});\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEDropzoneElement: HTMLEDropzoneElementConstructor = HTMLEDropzoneElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEDialogElement };\r\n\r\ninterface HTMLEDialogElementConstructor {\r\n    prototype: HTMLEDialogElement;\r\n    new(): HTMLEDialogElement;\r\n}\r\n\r\ntype DialogElementType = \"confirm\" | \"alert\";\r\n\r\ninterface HTMLEDialogElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: DialogElementType;\r\n    open(): void;\r\n    close(): void;\r\n    cancel(): void;\r\n    confirm(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dialog\": HTMLEDialogElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"open\": Event,\r\n        \"close\": Event,\r\n        \"cancel\": Event,\r\n        \"confirm\": Event,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dialog\"\r\n})\r\nclass HTMLEDialogElementBase extends HTMLElement implements HTMLEDialogElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: DialogElementType;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            padding: 6px;\r\n                            background-color: white;\r\n        \r\n                            -webkit-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            -moz-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                        }\r\n        \r\n                        button {\r\n                            cursor: pointer;\r\n                        }\r\n        \r\n                        [part=\"actions\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part=\"header\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part=\"button\"]:not(:first-child) {\r\n                            margin-left: 4px;\r\n                        }\r\n        \r\n                        :host([type=\"confirm\"]) [part=\"ok-button\"] {\r\n                            display: none !important;\r\n                        }\r\n        \r\n                        :host([type=\"alert\"]) [part=\"cancel-button\"],\r\n                        :host([type=\"alert\"]) [part=\"confirm-button\"] {\r\n                            display: none !important;\r\n                        }\r\n                    `\r\n                    ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"header\"\r\n                },\r\n                children: [\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button close-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"x\"\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"hr\", {\r\n                attributes: {\r\n                    part: \"separator\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"body\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"hr\", {\r\n                attributes: {\r\n                    part: \"separator\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"actions\",\r\n                },\r\n                children: [\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button cancel-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"Cancel\"\r\n                        ]\r\n                    }),\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button confirm-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"Confirm\"\r\n                        ]\r\n                    }),\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button ok-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"OK\"\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n        );\r\n    }\r\n\r\n    connectedCallback() {\r\n        this.shadowRoot.addEventListener(\"click\", this);\r\n    }\r\n\r\n    handleEvent(event: Event) {\r\n        const {type, target} = event;\r\n        switch (type) {\r\n            case \"click\":\r\n                const {part} = <Element>target;\r\n                if (part.contains(\"close-button\") || part.contains(\"cancel-button\")) {\r\n                    this.cancel();\r\n                }\r\n                else if (part.contains(\"confirm-button\") || part.contains(\"ok-button\")) {\r\n                    this.confirm();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    open(): void {\r\n        this.dispatchEvent(new CustomEvent(\"open\", {bubbles: true}));\r\n    }\r\n\r\n    close(): void {\r\n        this.dispatchEvent(new CustomEvent(\"close\", {bubbles: true}));\r\n    }\r\n\r\n    cancel(): void {\r\n        this.dispatchEvent(new CustomEvent(\"cancel\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n\r\n    confirm(): void {\r\n        this.dispatchEvent(new CustomEvent(\"confirm\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n}\r\n\r\nvar HTMLEDialogElement: HTMLEDialogElementConstructor = HTMLEDialogElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionElement };\r\n\r\ninterface HTMLEOptionElementConstructor {\r\n    prototype: HTMLEOptionElement;\r\n    new(): HTMLEOptionElement;\r\n}\r\n\r\ninterface HTMLEOptionElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    value: string;\r\n    label: string;\r\n    disabled: boolean;\r\n    selected: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-option\": HTMLEOptionElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-option\"\r\n})\r\nclass HTMLEOptionElementBase extends HTMLElement implements HTMLEOptionElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n    \r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"label\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector<HTMLElement>(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEOptionElement: HTMLEOptionElementConstructor = HTMLEOptionElementBase;","import { CustomElement, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionGroupElement };\r\n\r\ninterface HTMLEOptionGroupElementConstructor {\r\n    prototype: HTMLEOptionGroupElement;\r\n    new(): HTMLEOptionGroupElement;\r\n}\r\n\r\ninterface HTMLEOptionGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-optiongroup\": HTMLEOptionGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-optiongroup\"\r\n})\r\nclass HTMLEOptionGroupElementBase extends HTMLElement implements HTMLEOptionGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n}\r\n\r\nvar HTMLEOptionGroupElement: HTMLEOptionGroupElementConstructor = HTMLEOptionGroupElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEOptionElement } from \"./Option\";\r\nimport { HTMLEOptionGroupElement } from \"./OptionGroup\";\r\n\r\nexport { HTMLESelectElement };\r\n\r\ninterface HTMLESelectElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    get options(): HTMLEOptionElement[];\r\n    get activeOption(): HTMLEOptionElement | null;\r\n    get selectedOption(): HTMLEOptionElement | null;\r\n    name: string;\r\n    label: string;\r\n    value: string;\r\n    expanded: boolean;\r\n    expand(): void;\r\n    collapse(): void;\r\n    toggle(force?: boolean): void;\r\n}\r\n\r\ninterface HTMLESelectElementConstructor {\r\n    prototype: HTMLESelectElement;\r\n    new(): HTMLESelectElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-select\": HTMLESelectElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-select\"\r\n})\r\nclass HTMLESelectElementBase extends HTMLElement implements HTMLESelectElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get options(): HTMLEOptionElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEOptionElement>(\r\n            \"e-option\"\r\n        ));\r\n    }\r\n\r\n    get activeOption(): HTMLEOptionElement | null {\r\n        return this.querySelector(\"e-option:focus-within\") ?? null;\r\n    }\r\n\r\n    get selectedOption(): HTMLEOptionElement | null {\r\n        return this.querySelector(\"e-option[selected]\") ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"select\", observed: true})\r\n    type!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"label\", {\r\n                        attributes: {\r\n                            part: \"label\"\r\n                        }\r\n                    }),\r\n                    element(\"output\", {\r\n                        attributes: {\r\n                            part: \"value\"\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"box\"\r\n                },\r\n                children: element(\"slot\")\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector<HTMLElement>(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {expanded} = this;\r\n        if (!expanded) {\r\n            this.expanded = true;\r\n            this.#positionBox();\r\n            const {selectedOption} = this;\r\n            if (selectedOption) {\r\n                selectedOption.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {expanded} = this;\r\n        if (expanded) {\r\n            this.expanded = false;\r\n            this.focus();\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {expanded} = this;\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n\r\n    #value(): HTMLElement {\r\n        return this.shadowRoot.querySelector<HTMLElement>(\"[part=value]\")!;\r\n    }\r\n\r\n    #box(): HTMLElement {\r\n        return this.shadowRoot.querySelector<HTMLElement>(\"[part=box]\")!;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEOptionElement && !node.disabled && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        else if (node instanceof HTMLEOptionGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = this;\r\n        return <HTMLEOptionElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = this;\r\n        return <HTMLEOptionElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousOption(option: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLEOptionElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextOption(option: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLEOptionElement | null>walker.nextNode();\r\n    }\r\n\r\n    #selectOption(option: HTMLEOptionElement) {\r\n        const {selectedOption} = this;\r\n        if (option !== selectedOption) {\r\n            option.selected = true;\r\n            this.dispatchEvent(new Event(\"change\", {bubbles: true}));\r\n        }\r\n    }\r\n    \r\n    #setSelectedOption(option: HTMLEOptionElement) {\r\n        this.#value().textContent = option.label;\r\n    }\r\n\r\n    #positionBox(): void {\r\n        const box = this.#box()\r\n        const {style: optionsStyle} = box;  \r\n        const {bottom, left} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        optionsStyle.setProperty(\"top\", `${bottom + scrollY}px`);\r\n        optionsStyle.setProperty(\"left\", `${left + scrollX}px`);\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        this.toggle();\r\n        const {expanded} = this;\r\n        if (expanded) {\r\n            const {selectedOption} = this;\r\n            (selectedOption ?? this.options[0])?.focus({preventScroll: true});\r\n        }\r\n        else {\r\n            const targetOption = (<HTMLElement>target).closest<HTMLEOptionElement>(\"e-option\");\r\n            if (targetOption) {\r\n                this.#selectOption(targetOption);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded, activeOption, selectedOption} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                if (expanded) {\r\n                    const previousOption = activeOption ?\r\n                        this.#previousOption(activeOption) :\r\n                        this.#firstOption();\r\n                    if (previousOption) {\r\n                        previousOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const previousOption = selectedOption ?\r\n                        this.#previousOption(selectedOption) :\r\n                        this.#firstOption();\r\n                    if (previousOption) {\r\n                        this.#selectOption(previousOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (expanded) {\r\n                    const nextOption = activeOption ?\r\n                        this.#nextOption(activeOption) :\r\n                        this.#lastOption();\r\n                    if (nextOption) {\r\n                        nextOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const nextOption = selectedOption ?\r\n                        this.#nextOption(selectedOption) :\r\n                        this.#lastOption();\r\n                    if (nextOption) {\r\n                        this.#selectOption(nextOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstOption = this.#firstOption();\r\n                if (firstOption) {\r\n                    if (expanded) {\r\n                        firstOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(firstOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastOption = this.#lastOption();\r\n                if (lastOption) {\r\n                    if (expanded) {\r\n                        lastOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(lastOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (expanded) {\r\n                    this.collapse();\r\n                    if (activeOption) {\r\n                        this.#selectOption(activeOption);\r\n                    }\r\n                }\r\n                else {\r\n                    this.expand();\r\n                    selectedOption?.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.collapse();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            default: {\r\n                const {length: keyLength} = key;\r\n                if (keyLength == 1) {\r\n                    const keyCode = key.charCodeAt(0);\r\n                    const {options} = this;\r\n                    const activeIndex = activeOption ? options.indexOf(activeOption) : -1;\r\n                    const matchingOption = options.find(\r\n                        (option_i, i) => option_i.label.toLowerCase().charCodeAt(0) == keyCode && i > activeIndex\r\n                    ) ?? options.find(\r\n                        (option_i) => option_i.label.toLowerCase().charCodeAt(0) == keyCode\r\n                    );\r\n                    if (matchingOption) {\r\n                        matchingOption.focus({preventScroll: true});\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetOption = (<Element>target).closest<HTMLEOptionElement>(\"e-option\");\r\n        if (targetOption) {\r\n            targetOption.focus({preventScroll: true});\r\n        }\r\n    }\r\n    \r\n    #handleSelectEvent(event: Event) {\r\n        const {target} = event;\r\n        const targetOption = <HTMLEOptionElement>target;\r\n        if (targetOption.selected) {\r\n            const {options} = this;\r\n            options.forEach((option_i) => {\r\n                if (option_i !== targetOption && option_i.selected) {\r\n                    option_i.selected = false;\r\n                }\r\n            });\r\n            this.#setSelectedOption(targetOption);\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLESelectElement: HTMLESelectElementConstructor = HTMLESelectElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEHandleElement };\r\n\r\ninterface HTMLEHandleElementConstructor {\r\n    prototype: HTMLEHandleElement;\r\n    new(): HTMLEHandleElement;\r\n}\r\n\r\ninterface HTMLEHandleElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    controls: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-handle\": HTMLEHandleElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"move\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-handle\"\r\n})\r\nclass HTMLEHandleElementBase extends HTMLElement implements HTMLEHandleElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                            \r\n                            width: 24px;\r\n                            height: 12px;\r\n                            \r\n                            background-color: rgb(0, 128, 255);\r\n\r\n                            -webkit-mask-image: url(\"assets/dots.png\");\r\n                            mask-image: url(\"assets/dots.png\");\r\n\r\n                            -webkit-mask-repeat: repeat;\r\n                            mask-repeat: repeat;\r\n                            cursor: move;\r\n                        }\r\n                    `\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"controls\": {\r\n                const {controls} = this;\r\n                this.#target = document.getElementById(controls);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        this.#target = document.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            const target = this.#target;\r\n            if (target !== null) {\r\n                const targetComputedStyle = window.getComputedStyle(target);\r\n                const {movementX, movementY} = event;\r\n                const {width: rectWidth, height: rectHeight} = target.getBoundingClientRect();\r\n                const outerElement = target.parentElement ?? document.body;\r\n                const {\r\n                    left: outerRectLeft, right: outerRectRight,\r\n                    top: outerRectTop, bottom: outerRectBottom\r\n                } = outerElement.getBoundingClientRect();\r\n                const left = parseFloat(targetComputedStyle.getPropertyValue(\"left\"));\r\n                const newLeft = Math.max(outerRectLeft, Math.min(Math.trunc(left + movementX), outerRectRight - rectWidth));\r\n                const top = parseFloat(targetComputedStyle.getPropertyValue(\"top\"));\r\n                const newTop = Math.max(outerRectTop, Math.min(Math.trunc(top + movementY), outerRectBottom - rectHeight));\r\n                target.style.setProperty(\"left\", `${newLeft}px`);\r\n                target.style.setProperty(\"top\", `${newTop}px`);\r\n                this.dispatchEvent(new CustomEvent(\"move\"));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEHandleElement: HTMLEHandleElementConstructor = HTMLEHandleElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEHeightSashElement };\r\n\r\ninterface HTMLEHeightSashElementConstructor {\r\n    prototype: HTMLEHeightSashElement;\r\n    new(): HTMLEHeightSashElement;\r\n}\r\n\r\ninterface HTMLEHeightSashElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    controls: string;\r\n    growdir: \"top\" | \"bottom\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-hsash\": HTMLEHeightSashElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"resize\": Event;\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-hsash\"\r\n})\r\nclass HTMLEHeightSashElementBase extends HTMLElement implements HTMLEHeightSashElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"top\"})\r\n    growdir!: \"top\" | \"bottom\";\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n    #queuedPointerCallback: FrameRequestCallback | null;\r\n    #pointerMovement: number;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#target = null;\r\n        this.#queuedPointerCallback = null;\r\n        this.#pointerMovement = 0;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        const rootNode = <ShadowRoot | Document>this.getRootNode();\r\n        this.#target = rootNode.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            if (this.#queuedPointerCallback == null) {\r\n                this.#pointerMovement = event.movementY;\r\n                this.#queuedPointerCallback = this.#pointerMoveCallback.bind(this);\r\n                requestAnimationFrame(this.#queuedPointerCallback);\r\n            }\r\n            else {\r\n                this.#pointerMovement += event.movementY;\r\n            }\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const {growdir} = this;\r\n            const movementY = this.#pointerMovement;\r\n            const height = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            const newHeight = Math.trunc(height + (growdir == \"top\" ? -1 : 1) * movementY);\r\n            target.style.setProperty(\"height\", `${newHeight}px`);\r\n            const computedNewHeight = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            target.style.setProperty(\"height\", `${computedNewHeight}px`);\r\n            this.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        this.#queuedPointerCallback = null;\r\n    }\r\n}\r\n\r\nvar HTMLEHeightSashElement: HTMLEHeightSashElementConstructor = HTMLEHeightSashElementBase;","import { CustomElement, AttributeProperty } from \"../Element\";\r\n\r\nexport { HTMLEImportElement };\r\n\r\ninterface HTMLEImportElementConstructor {\r\n    prototype: HTMLEImportElement;\r\n    new(): HTMLEImportElement;\r\n}\r\n\r\ninterface HTMLEImportElement extends HTMLElement {\r\n    src: string;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-import\": HTMLEImportElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"load\": Event;\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-import\"\r\n})\r\nclass HTMLEImportElementBase extends HTMLElement implements HTMLEImportElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    src!: string;\r\n    \r\n    connectedCallback(): void {\r\n        const {src} = this;\r\n        if (src) {\r\n            this.#importRequest(src);\r\n        }\r\n    }\r\n\r\n    async #importRequest(src: string): Promise<void> {\r\n        this.outerHTML = await fetch(src).then((response: Response) => {\r\n            if (response.ok) {\r\n                return response.text();\r\n            }\r\n            else {\r\n                throw new Error(response.statusText);\r\n            }\r\n        });\r\n        this.dispatchEvent(new Event(\"load\", {bubbles: true}));\r\n    }\r\n}\r\n\r\nvar HTMLEImportElement: HTMLEImportElementConstructor = HTMLEImportElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLELoaderElement };\r\n\r\ninterface HTMLELoaderElementConstructor {\r\n    prototype: HTMLELoaderElement;\r\n    new(): HTMLELoaderElement;\r\n}\r\n\r\ninterface HTMLELoaderElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    type: \"bar\" | \"circle\";\r\n    promise: Promise<any> | null;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-loader\": HTMLELoaderElement,\r\n    }\r\n}\r\n\r\nvar barShadowTemplate: HTMLTemplateElement;\r\nvar circleShadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-loader\"\r\n})\r\nclass HTMLELoaderElementBase extends HTMLElement implements HTMLELoaderElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String, defaultValue: \"bar\", observed: true})\r\n    type!: \"bar\" | \"circle\";\r\n    \r\n    #promise: Promise<any> | null;\r\n\r\n    static {\r\n        const commonStyle = element(\"style\", {\r\n            children: [\r\n                /*css*/`\r\n                    :host {\r\n                        display: inline-block;\r\n                        --default-loader-color: rgb(0, 128, 255);\r\n                        --default-animation-duration: 2s;\r\n                    }\r\n                `\r\n            ]\r\n        });\r\n        const barStyle = commonStyle.cloneNode(true);\r\n        const circleStyle = commonStyle.cloneNode(true);\r\n        barStyle.textContent += /*css*/`\r\n            :host {\r\n                display: block;\r\n            }\r\n\r\n            [part=\"bar\"] {\r\n                position: relative;\r\n                display: block;\r\n                overflow: hidden;\r\n                height: 6px;\r\n                width: 100%;\r\n            }\r\n\r\n            [part=\"slider\"] {\r\n                display: flex;\r\n                position: absolute;\r\n                width: 100%;\r\n                height: 100%;\r\n                animation-name: slider;\r\n            }\r\n\r\n            [part=\"slider\"],\r\n            [part=\"cursor\"] {\r\n                border-radius: 4px;\r\n                will-change: transform;\r\n                animation-duration: var(--animation-duration, var(--default-animation-duration));\r\n                animation-timing-function: linear;\r\n                animation-iteration-count: infinite;\r\n            }\r\n\r\n            [part=\"cursor\"] {\r\n                display: block;\r\n                width: 128px;\r\n                background-color: var(--loader-color, var(--default-loader-color));\r\n                animation-name: cursor;\r\n            }\r\n\r\n            [part=\"bar\"]:after {\r\n                animation-name: shine;\r\n                animation-duration: var(--animation-duration, var(--default-animation-duration));\r\n                animation-iteration-count: infinite;\r\n                animation-fill-mode: forwards;  \r\n                content: \"\";\r\n                position: absolute;\r\n                left: -100%;\r\n                width: 100%;\r\n                height: 100%;\r\n                top: 0;\r\n                opacity: 0;\r\n                \r\n                background: rgba(255, 255, 255, 0.13);\r\n                background: linear-gradient(\r\n                    to right, \r\n                    rgba(255, 255, 255, 0) 0%,\r\n                    rgba(255, 255, 255, 0.1) 10%,\r\n                    rgba(255, 255, 255, 0.9) 80%,\r\n                    rgba(255, 255, 255, 0) 100%\r\n                );\r\n            }\r\n\r\n            @keyframes shine {\r\n                25% {\r\n                    opacity: 1;\r\n                    left: -100%;\r\n                }\r\n                100% {\r\n                    opacity: 0;\r\n                    left: 100%;\r\n                }\r\n            }\r\n\r\n            @keyframes slider {\r\n                0% {\r\n                    transform: translateX(0%);\r\n                }\r\n                100% {\r\n                    transform: translateX(100%);\r\n                }\r\n            }\r\n\r\n            @keyframes cursor {\r\n                0% {\r\n                    transform: translateX(-100%);\r\n                }\r\n                100% {\r\n                    transform: translateX(100%);\r\n                }\r\n            }\r\n        `;\r\n        circleStyle.textContent += /*css*/`\r\n            :host {\r\n                display: inline-block;\r\n            }\r\n\r\n            [part=\"circle\"] {\r\n                width: 12px;\r\n                height: 12px;\r\n                border-top: 4px solid var(--loader-color, var(--default-loader-color));\r\n                border-right: 4px solid var(--loader-color, var(--default-loader-color));\r\n                border-left: 4px solid transparent;\r\n                border-bottom: 4px solid transparent;\r\n                border-radius: 50%;\r\n                animation-duration: 1s;\r\n                animation-name: circle;\r\n                animation-timing-function: linear;\r\n                animation-iteration-count: infinite;\r\n            }\r\n\r\n            @keyframes circle {\r\n                0% {\r\n                    transform: rotate(0);\r\n                }\r\n                100% {\r\n                    transform: rotate(360deg);\r\n                }\r\n            }\r\n        `;\r\n        barShadowTemplate = element(\"template\");\r\n        barShadowTemplate.content.append(\r\n            barStyle,\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"bar\"\r\n                },\r\n                children: [\r\n                    element(\"div\", {\r\n                        attributes: {\r\n                            part: \"slider\"\r\n                        },\r\n                        children: [\r\n                            element(\"div\", {\r\n                                attributes: {\r\n                                    part: \"cursor\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n        circleShadowTemplate = element(\"template\");\r\n        circleShadowTemplate.content.append(\r\n            circleStyle,\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"circle\"\r\n                }\r\n            })\r\n        )\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.#updateTemplate();\r\n        this.#promise = null;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"type\": {\r\n                this.#updateTemplate();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    set promise(promise: Promise<any> | null) {\r\n        if (promise) {\r\n            promise.finally(() => {\r\n                this.remove();\r\n            });\r\n        }\r\n        this.#promise = promise;\r\n    }\r\n\r\n    get promise(): Promise<any> | null {\r\n        return this.#promise;\r\n    }\r\n\r\n    #updateTemplate(): void {\r\n        const {type, shadowRoot} = this;\r\n        switch (type) {\r\n            case \"circle\": {\r\n                shadowRoot.replaceChildren(\r\n                    circleShadowTemplate.content.cloneNode(true)\r\n                );\r\n                break;\r\n            }\r\n            case \"bar\": {\r\n                shadowRoot.replaceChildren(\r\n                    barShadowTemplate.content.cloneNode(true)\r\n                );\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLELoaderElement: HTMLELoaderElementConstructor = HTMLELoaderElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEWidthSashElement };\r\n\r\ninterface HTMLEWidthSashElementConstructor {\r\n    prototype: HTMLEWidthSashElement;\r\n    new(): HTMLEWidthSashElement;\r\n}\r\n\r\ninterface HTMLEWidthSashElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    controls: string;\r\n    growdir: \"right\" | \"left\";\r\n    max: boolean;\r\n    setWidth(width: number): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-wsash\": HTMLEWidthSashElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"resize\": Event;\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-wsash\"\r\n})\r\nclass HTMLEWidthSashElementBase extends HTMLElement implements HTMLEWidthSashElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"right\"})\r\n    growdir!: \"right\" | \"left\";\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    max!: boolean;\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n    #queuedPointerCallback: FrameRequestCallback | null;\r\n    #pointerMovement: number;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#target = null;\r\n        this.#queuedPointerCallback = null;\r\n        this.#pointerMovement = 0;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    setWidth(width: number): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const {max} = this;\r\n            target.style.setProperty(\"width\", `${width}px`);\r\n            if (max) {\r\n                target.style.setProperty(\"max-width\", `${width}px`);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        const rootNode = <ShadowRoot | Document>this.getRootNode();\r\n        this.#target = rootNode.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            if (this.#queuedPointerCallback == null) {\r\n                this.#queuedPointerCallback = this.#pointerMoveCallback.bind(this);\r\n                requestAnimationFrame(this.#queuedPointerCallback);\r\n            }\r\n            this.#pointerMovement += event.movementX;\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const {growdir} = this;\r\n            const movementX = this.#pointerMovement;\r\n            const width = parseFloat(targetComputedStyle.getPropertyValue(\"width\"));\r\n            const newWidth = width + (growdir == \"right\" ? 1 : -1) * movementX;\r\n            this.setWidth(newWidth);\r\n            this.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        this.#pointerMovement = 0;\r\n        this.#queuedPointerCallback = null;\r\n    }\r\n}\r\n\r\nvar HTMLEWidthSashElement: HTMLEWidthSashElementConstructor = HTMLEWidthSashElementBase;","import { areAttributesMatching, AttributeMutationMixin } from \"../elements/Element\";\r\n\r\nexport { AttributeMixinsObserver };\r\n\r\ninterface AttributeMixinsObserverConstructor {\r\n    prototype: AttributeMixinsObserver;\r\n    new(mixins: AttributeMutationMixin[]): AttributeMixinsObserver;\r\n}\r\n\r\ninterface AttributeMixinsObserver {\r\n    observe(target: Node): void;\r\n    trigger(): void;\r\n    disconnect(): void;\r\n}\r\n\r\nclass AttributeMixinsObserverBase implements AttributeMixinsObserver {\r\n    #observer: MutationObserver;\r\n    #mixins: AttributeMutationMixin[];\r\n\r\n    constructor(mixins: AttributeMutationMixin[]) {\r\n        this.#observer = new MutationObserver(\r\n            this.#callback.bind(this)\r\n        );\r\n        this.#mixins = mixins.slice();\r\n    }\r\n\r\n    trigger(): void {\r\n        this.#callback(this.#observer.takeRecords());\r\n    }\r\n\r\n    observe(target: Node): void  {\r\n        this.#observer.observe(target, {\r\n            childList: true,\r\n            subtree: true,\r\n            attributeFilter: this.#mixins.map((mixin => mixin.attributeName))\r\n        });\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#observer.disconnect();\r\n    }\r\n\r\n    #callback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            mutation.addedNodes.forEach((node: Node) => {\r\n                if (node instanceof Element) {\r\n                    this.#attachMatchingAttributeMixinsInSubtree(node);\r\n                }\r\n            });\r\n            mutation.removedNodes.forEach((node: Node) => {\r\n                if (node instanceof Element) {\r\n                    this.#detachMatchingAttributeMixinsInSubtree(node);\r\n                }\r\n            });\r\n            if (mutation.target instanceof Element) {\r\n                const targetElement = mutation.target;\r\n                const attributeName = mutation.attributeName;\r\n                if (attributeName) {\r\n                    const relatedMixins = this.#mixins.filter(mixin => mixin.attributeName == attributeName);\r\n                    relatedMixins.forEach((mixin) => {\r\n                        if (areAttributesMatching(\r\n                                mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                                attributeName!, targetElement.getAttribute(attributeName!)\r\n                            )) {\r\n                                mixin.attach(targetElement);\r\n                        }\r\n                        else {\r\n                            mixin.detach(targetElement);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    #attachMatchingAttributeMixinsInSubtree(element: Element) {\r\n        Array.from(element.attributes).forEach((attr) => {\r\n            let matchingMixins = this.#mixins.filter(\r\n                mixin => areAttributesMatching(\r\n                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                    attr.name, attr.value\r\n                )\r\n            );\r\n            matchingMixins.forEach((mixin) => {\r\n                mixin.attach(element);\r\n            });\r\n        });\r\n        let childIndex = 0;\r\n        const {children} = element;\r\n        while (childIndex < children.length) {\r\n            const child = children.item(childIndex);\r\n            if (child !== null) {\r\n                this.#attachMatchingAttributeMixinsInSubtree(child);\r\n            }\r\n            childIndex++;\r\n        }\r\n    }\r\n\r\n    #detachMatchingAttributeMixinsInSubtree(element: Element) {\r\n        Array.from(element.attributes).forEach((attr) => {\r\n            let matchingMixins = this.#mixins.filter(\r\n                mixin => areAttributesMatching(\r\n                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                    attr.name, attr.value\r\n                )\r\n            );\r\n            matchingMixins.forEach((mixin) => {\r\n                mixin.detach(element);\r\n            });\r\n        });\r\n        let childIndex = 0;\r\n        const {children} = element;\r\n        while (childIndex < children.length) {\r\n            const child = children.item(childIndex);\r\n            if (child !== null) {\r\n                this.#detachMatchingAttributeMixinsInSubtree(child);\r\n            }\r\n            childIndex++;\r\n        }\r\n    }\r\n}\r\n\r\nvar AttributeMixinsObserver: AttributeMixinsObserverConstructor = AttributeMixinsObserverBase;","import { element } from \"../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"./Widget\";\r\n\r\nexport { separatorWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"separator\": SeparatorWidgetFactory\r\n    }\r\n}\r\n\r\ninterface SeparatorWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar separatorWidget = new (\r\nWidget({\r\n    name: \"separator\"\r\n})(class SeparatorWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"separator\",\r\n                role: \"separator\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuItemWidget };\r\n\r\ntype MenuItemType = \"button\" | \"radio\" | \"checkbox\" | \"menu\" | \"submenu\";\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menuitem\": MenuItemWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        type?: MenuItemType;\r\n        checked?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void;\r\n    getMenu(item: HTMLElement): HTMLElement | null;\r\n    getKeyShortcut(item: HTMLElement): string | null;\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    getType(item: HTMLElement): MenuItemType | null;\r\n    setType(item: HTMLElement, type: MenuItemType): void;\r\n    getValue(item: HTMLElement): string;\r\n    setValue(item: HTMLElement, value: string): void;\r\n    getName(item: HTMLElement): string;\r\n    setName(item: HTMLElement, value: string): void;\r\n    getChecked(item: HTMLElement): boolean;\r\n    setChecked(item: HTMLElement, value: boolean): void;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setExpanded(item: HTMLElement, value: boolean): void;\r\n    getExpanded(item: HTMLElement): boolean;\r\n    toggle(item: HTMLElement, force?: boolean): void;\r\n    expand(item: HTMLElement): void;\r\n    collapse(item: HTMLElement): void;\r\n}\r\n\r\nvar menuItemWidget = new(\r\nWidget({\r\n    name: \"menuitem\"\r\n})(\r\nclass MenuItemWidgetFactoryBase extends WidgetFactory implements MenuItemWidgetFactory {\r\n    #iconPartTemplate: HTMLElement;\r\n    #arrowPartTemplate : HTMLElement;\r\n    #keyshortcutsPartTemplate: HTMLElement;\r\n    #template: HTMLElement;\r\n    #types: MenuItemType[];\r\n    #typesFeatures: {\r\n        [key in MenuItemType]: {\r\n            role: string,\r\n            hasIcon: boolean,\r\n            hasArrow: boolean\r\n        }\r\n    };\r\n\r\n    constructor() {\r\n        super();\r\n        this.#iconPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"icon\"\r\n            }\r\n        });\r\n        this.#arrowPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"arrow\"\r\n            }\r\n        });\r\n        this.#keyshortcutsPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"keyshortcuts\"\r\n            }\r\n        });\r\n        this.#template = element(\"button\", {\r\n            attributes: {\r\n                class: \"menuitem\",\r\n                role: \"menuitem\",\r\n                type: \"button\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                this.#iconPartTemplate.cloneNode(true),\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n        this.#types = [\"checkbox\", \"radio\", \"menu\", \"submenu\", \"button\"];\r\n        this.#typesFeatures = {\r\n            button: {\r\n                role: \"menuitem\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            checkbox: {\r\n                role: \"menuitemcheckbox\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            radio: {\r\n                role: \"menuitemradio\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            menu: {\r\n                role: \"menuitem\",\r\n                hasIcon: false,\r\n                hasArrow: false\r\n            },\r\n            submenu: {\r\n                role: \"menuitem\",\r\n                hasIcon: true,\r\n                hasArrow: true\r\n            }\r\n        }\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        type: MenuItemType;\r\n        checked?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (init !== undefined) {\r\n            const {id, classList, tabIndex, keyshortcut, checked, type, label, name, value, disabled} = init;\r\n            if (id !== undefined) {\r\n                item.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                item.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                item.tabIndex = tabIndex;\r\n            }\r\n            if (keyshortcut !== undefined) {\r\n                this.setKeyShortcut(item, keyshortcut);\r\n            }\r\n            if (checked !== undefined) {\r\n                this.setChecked(item, checked);\r\n            }\r\n            if (type !== undefined) {\r\n                if (type == \"menu\" || type == \"submenu\") {\r\n                    this.setExpanded(item, false);\r\n                }\r\n                this.setType(item, type);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(item, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(item, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(item: HTMLElement): HTMLElement | null {\r\n        return item;\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void {\r\n        const hasChildMenu = Array.from(slot.childNodes).some(\r\n            childNode_i => childNode_i instanceof HTMLElement && childNode_i.classList.contains(\"menu\")\r\n        );\r\n        item.setAttribute(\"aria-haspopup\", String(hasChildMenu));\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n\r\n    getMenu(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .menu\");\r\n    }\r\n\r\n    getKeyShortcut(item: HTMLElement): string | null {\r\n        return item.getAttribute(\"aria-keyshortcuts\");\r\n    }\r\n\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void {\r\n        let keyshortcutsPart = item.querySelector(\":scope > .keyshortcuts\");\r\n        if (value !== null) {\r\n            item.setAttribute(\"aria-keyshortcuts\", value);\r\n            if (!keyshortcutsPart) {\r\n                const labelPart = this.#label(item);\r\n                const keyshortcutsPartTemplate = this.#keyshortcutsPartTemplate;\r\n                keyshortcutsPart = <HTMLElement>keyshortcutsPartTemplate.cloneNode(true);\r\n                labelPart.after(keyshortcutsPart);\r\n            }\r\n            keyshortcutsPart.textContent = value;\r\n        }\r\n        else {\r\n            item.removeAttribute(\"aria-keyshortcuts\");\r\n            if (keyshortcutsPart) {\r\n                keyshortcutsPart.remove();\r\n            }\r\n        }\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n    \r\n    getType(item: HTMLElement): MenuItemType | null {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`menuitem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setType(item: HTMLElement, type: MenuItemType): void {\r\n        const typesFeatures = this.#typesFeatures;\r\n        const iconPartTemplate = this.#iconPartTemplate;\r\n        const arrowPartTemplate = this.#arrowPartTemplate;\r\n        const {role, hasIcon, hasArrow} = typesFeatures[type];\r\n        const oldType = this.getType(item);\r\n        const {classList} = item;\r\n        if (oldType) {\r\n            classList.remove(`menuitem-${oldType}`);\r\n        }\r\n        classList.add(`menuitem-${type}`);\r\n        item.setAttribute(\"role\", role);\r\n        const labelPart = this.#label(item);\r\n        const iconPart = item.querySelector(\":scope > .icon\");\r\n        const arrowPart = item.querySelector(\":scope > .arrow\");\r\n        if (hasIcon) {\r\n            if (!iconPart && labelPart) {\r\n                labelPart.before(iconPartTemplate.cloneNode(true));\r\n            }\r\n        }\r\n        else {\r\n            if (iconPart) {\r\n                iconPart.remove();\r\n            }\r\n        }\r\n        if (hasArrow) {\r\n            if (!arrowPart && labelPart) {\r\n                labelPart.after(arrowPartTemplate.cloneNode(true));\r\n            }\r\n        }\r\n        else {\r\n            if (arrowPart) {\r\n                arrowPart.remove();\r\n            }\r\n        }\r\n    }\r\n\r\n    getValue(item: HTMLElement): string {\r\n        return item.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"value\", value);\r\n    }\r\n    \r\n    getName(item: HTMLElement): string {\r\n        return item.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getChecked(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-checked\") ?? String(false));\r\n    }\r\n\r\n    setChecked(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-checked\", String(value));\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-expanded\", String(value));\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-expanded\") ?? String(false));\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        const expand = force ?? !this.getExpanded(item);\r\n        this.setExpanded(item, expand);\r\n        if (expand) {\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    expand(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (!expanded) {\r\n            this.setExpanded(item, true);\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    collapse(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (expanded) {\r\n            this.setExpanded(item, false);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.setChecked(targetItem, !this.getChecked(targetItem));\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.setChecked(targetItem, true);\r\n                    break;\r\n                }\r\n                case \"menu\":\r\n                case \"submenu\": {\r\n                    this.toggle(targetItem);\r\n                    if (this.getExpanded(targetItem)) {\r\n                        this.getMenu(targetItem)?.focus({preventScroll: true});\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(item: HTMLElement): void {\r\n        const menu = this.getMenu(item);\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = item.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const type = this.getType(item);\r\n            if (type == \"menu\") {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const closestMenu = item.closest(\".menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    const overflowX = itemRight + menuWidth - clientWidth;\r\n                    const overflowY = itemTop + menuHeight - clientHeight;\r\n                    menuStyle.setProperty(\"left\", `${\r\n                        overflowX > 0 ?\r\n                        itemLeft - menuWidth - closestMenuLeft :\r\n                        itemRight - closestMenuLeft\r\n                    }px`);\r\n                    const menuComputedStyle = window.getComputedStyle(menu);\r\n                    const {paddingTop, paddingBottom} = menuComputedStyle;\r\n                    const menuPaddingTop = parseFloat(paddingTop);\r\n                    const menuPaddingBottom = parseFloat(paddingBottom);\r\n                    menuStyle.setProperty(\"top\", `${\r\n                        overflowY > 0 ?\r\n                        itemBottom - menuHeight - closestMenuTop + menuPaddingBottom :\r\n                        itemTop - closestMenuTop - menuPaddingTop\r\n                    }px`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { menuItemWidget } from \"./MenuItemWidget\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuBarWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menubar\": MenuBarWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuBarWidgetFactory extends WidgetFactory {\r\n    setExpanded(menubar: HTMLElement, value: boolean): void;\r\n    getExpanded(menubar: HTMLElement): boolean;\r\n}\r\n\r\nvar menuBarWidget = new (\r\nWidget({\r\n    name: \"menubar\"\r\n})(class MenubarWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menubar\",\r\n                role: \"menubar\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        )\r\n    }\r\n\r\n    create() {\r\n        const menubar = <HTMLElement>this.#template.cloneNode(true);\r\n        menubar.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        menubar.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        menubar.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        menubar.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        menubar.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        return menubar;\r\n    }\r\n\r\n    slot(menubar: HTMLElement) {\r\n        return menubar;\r\n    }\r\n\r\n    setExpanded(menubar: HTMLElement, value: boolean): void {\r\n        menubar.toggleAttribute(\"aria-expanded\", value);\r\n    }\r\n\r\n    getExpanded(menubar: HTMLElement): boolean {\r\n        return menubar.hasAttribute(\"aria-expanded\");\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node) {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"menuitem\") && !menuItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"menuitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getActiveItem(menubar: HTMLElement): HTMLElement | null {\r\n        return menubar.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem:focus-within\"\r\n        );\r\n    }\r\n\r\n    #firstItem(menubar: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menubar;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(menubar: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menubar;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n\r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = menuItemWidget.getMenu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #isClosestMenu(menubar: HTMLElement, target: HTMLElement): boolean {\r\n        return target.closest(\":is(.menubar, .menu)\") == menubar;\r\n    }\r\n\r\n    #nearestItem(menubar: HTMLElement, target: HTMLElement): HTMLElement | null {\r\n        return Array.from(menubar.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem) {\r\n            const expanded = this.getExpanded(menubar);\r\n            const isClosestMenu = this.#isClosestMenu(menubar, targetItem);\r\n            if (isClosestMenu) {\r\n                const isExpanded = !expanded;\r\n                this.setExpanded(menubar, isExpanded);\r\n                if (isExpanded) {\r\n                    if (targetItem !== null && !menuItemWidget.getExpanded(targetItem)) {\r\n                        menuItemWidget.expand(targetItem);\r\n                    }\r\n                    const menu = menuItemWidget.getMenu(targetItem);\r\n                    menu?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    menubar.focus({preventScroll: true})\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && this.getExpanded(menubar)) {\r\n            const nearestItem = this.#nearestItem(menubar, target);\r\n            if (nearestItem) {\r\n                menuItemWidget.expand(nearestItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && !target.contains(<Element>relatedTarget)) {\r\n            const nearestItem = this.#nearestItem(menubar, target);\r\n            if (nearestItem) {\r\n                menuItemWidget.collapse(nearestItem);\r\n            }\r\n        }\r\n        const lostFocusWithin = !menubar.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.setExpanded(menubar, false);\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const activeItem = this.#getActiveItem(menubar);\r\n            const expanded = this.getExpanded(menubar);\r\n            const isClosestMenu = this.#isClosestMenu(menubar, target);\r\n            if (isClosestMenu && target !== activeItem && expanded) {\r\n                const menu = menuItemWidget.getMenu(target);\r\n                if (menu) {\r\n                    menu.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    target.focus({preventScroll: true});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        let activeItem = this.#getActiveItem(menubar);\r\n        const expanded = this.getExpanded(menubar);\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem(menubar) :\r\n                    this.#firstItem(menubar);\r\n                previousItem?.focus({preventScroll: true});\r\n                activeItem = this.#getActiveItem(menubar);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem(menubar) : \r\n                    this.#lastItem(menubar);\r\n                nextItem?.focus({preventScroll: true});\r\n                activeItem = this.#getActiveItem(menubar);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    this.setExpanded(menubar, !expanded);\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.setExpanded(menubar, false);\r\n                    if (activeItem) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    menubar.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { menuItemWidget } from \"./MenuItemWidget\";\r\n\r\nexport { menuWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menu\": MenuWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        contextual?: boolean;\r\n        position?: {x: number, y: number};\r\n    }): HTMLElement;\r\n    setPosition(menu: HTMLElement, x: number, y: number): void;\r\n    getContextual(menu: HTMLElement): boolean;\r\n    setContextual(menu: HTMLElement, value: boolean): void;\r\n    items(menu: HTMLElement): HTMLElement[];\r\n}\r\n\r\nvar mouseOverExpandDelay = 0_200;\r\nvar mouseOutCollapseDelay = 0_400;\r\n\r\nvar menuWidget = new (\r\nWidget({\r\n    name: \"menu\"\r\n})(class MenuWidgetFactoryBase extends WidgetFactory implements MenuWidgetFactory {\r\n\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #toggleTimeouts: WeakMap<HTMLElement, {clear(): void;}>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menu\",\r\n                role: \"menu\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#toggleTimeouts = new WeakMap();\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        contextual?: boolean;\r\n        position?: {x: number, y: number};\r\n    }): HTMLElement {\r\n        const menu = <HTMLElement>this.#template.cloneNode(true);\r\n        menu.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        menu.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        menu.addEventListener(\"mouseout\", this.#handleMouseOutEvent.bind(this));\r\n        menu.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        menu.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, contextual, position} = properties;\r\n            if (id !== undefined) {\r\n                menu.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                menu.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                menu.tabIndex = tabIndex;\r\n            }\r\n            if (contextual !== undefined) {\r\n                this.setContextual(menu, contextual);\r\n            }\r\n            if (position !== undefined) {\r\n                const {x, y} = position;\r\n                this.setPosition(menu, x, y);\r\n            }\r\n        }\r\n        return menu;\r\n    }\r\n\r\n    slot(menu: HTMLElement): HTMLElement | null {\r\n        return menu;\r\n    }\r\n\r\n    setPosition(menu: HTMLElement, x: number, y: number): void {\r\n        const {style} = menu;\r\n        const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        const left = x + scrollX;\r\n        const top = y + scrollY;\r\n        const {clientWidth, clientHeight} = document.body;\r\n        const overflowX = left + menuWidth - clientWidth;\r\n        const overflowY = top + menuHeight - clientHeight;\r\n        style.setProperty(\"left\", `${overflowX > 0 ? left - menuWidth : left}px`);\r\n        style.setProperty(\"top\", `${overflowY > 0 ? top - menuHeight : top}px`);\r\n    }\r\n\r\n    getContextual(menu: HTMLElement): boolean {\r\n        const {classList} = menu;\r\n        return classList.contains(\"menu-contextual\");\r\n    }\r\n\r\n    setContextual(menu: HTMLElement, value: boolean): void {\r\n        const {classList} = menu;\r\n        if (value) {\r\n            classList.add(\"menu-contextual\");\r\n        }\r\n        else {\r\n            classList.remove(\"menu-contextual\");\r\n        }\r\n    }\r\n\r\n    items(menu: HTMLElement): HTMLElement[] {\r\n        return Array.from(menu.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        ));\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"menuitem\") && !menuItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"menuitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #collapseSubmenus(menu: HTMLElement): void {\r\n        menu.querySelectorAll<HTMLElement>(\":is(:scope, :scope > .menuitemgroup) > .menuitem[aria-expanded]\")\r\n            .forEach(menuitem_i => menuItemWidget.collapse(menuitem_i));\r\n    }\r\n\r\n    #isClosestMenu(menu: HTMLElement, target: HTMLElement): boolean {\r\n        return target.closest(\".menu\") == menu;\r\n    }\r\n\r\n    #nearestItem(menu: HTMLElement, target: HTMLElement): HTMLElement | null {\r\n        return Array.from(menu.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #firstItem(menu: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menu;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(menu: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menu;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n\r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = menuItemWidget.getMenu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #getActiveItem(menu: HTMLElement): HTMLElement | null {\r\n        return menu.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem:focus-within\"\r\n        );\r\n    }\r\n\r\n    async #setItemTimeout(item: HTMLElement, delay?: number): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => {\r\n                resolve(undefined);\r\n            }, delay ?? 0);\r\n            this.#toggleTimeouts.set(item, {\r\n                clear: () => {\r\n                    clearTimeout(timeout);\r\n                    reject();\r\n                }\r\n            });\r\n        }).then(() => {\r\n            this.#toggleTimeouts.delete(item);\r\n        });\r\n    }\r\n\r\n    #clearItemTimeout(item: HTMLElement): void {\r\n        const timeout = this.#toggleTimeouts.get(item);\r\n        if (typeof timeout !== \"undefined\") {\r\n            this.#toggleTimeouts.delete(item);\r\n            timeout.clear();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem) {\r\n            const contextual = this.getContextual(targetMenu);\r\n            if (contextual) {\r\n                try {\r\n                    targetMenu.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const isClosestMenu = this.#isClosestMenu(targetMenu, targetItem);\r\n                if (isClosestMenu) {\r\n                    const type = menuItemWidget.getType(targetItem);\r\n                    const name = menuItemWidget.getName(targetItem);\r\n                    const value = menuItemWidget.getValue(targetItem);\r\n                    if (type == \"radio\") {\r\n                        targetMenu.querySelectorAll<HTMLElement>(\r\n                            `:is(:scope, :scope > .menuitemgroup) > .menuitem-radio[name=${name}]`\r\n                        )\r\n                        .forEach((radio_i) => {\r\n                            menuItemWidget.setChecked(radio_i, menuItemWidget.getValue(radio_i) == value);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetMenu.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const contextual = this.getContextual(targetMenu);\r\n            if (contextual) {\r\n                try {\r\n                    targetMenu.remove();\r\n                } catch (error) {\r\n                    undefined;\r\n                }\r\n            }\r\n            else {\r\n                const nearestItem = this.#nearestItem(targetMenu, <HTMLElement>target);\r\n                if (nearestItem) {\r\n                    menuItemWidget.collapse(nearestItem);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetMenu);\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem(targetMenu) :\r\n                    this.#firstItem(targetMenu);\r\n                previousItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem(targetMenu) :\r\n                    this.#firstItem(targetMenu);\r\n                nextItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetMenu);\r\n                firstItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetMenu);\r\n                lastItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const type = menuItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            menuItemWidget.expand(activeItem);\r\n                            const firstChildItem = this.#firstChildItem(activeItem);\r\n                            firstChildItem?.focus({preventScroll: true});\r\n                            event.preventDefault();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    const isTargetClosestMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                    ) == targetMenu;\r\n                    if (!isTargetClosestMenu) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const isTargetClosestMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                    ) == targetMenu;\r\n                    if (!isTargetClosestMenu) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const type = menuItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            const expanded = menuItemWidget.getExpanded(activeItem);\r\n                            if (!expanded) {\r\n                                menuItemWidget.expand(activeItem);\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                                event.stopPropagation();\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOutEvent(event: MouseEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const nearestItem = this.#nearestItem(targetMenu, target);\r\n            if (nearestItem !== null) {\r\n                if (menuItemWidget.getType(nearestItem) == \"submenu\" &&\r\n                    !menuItemWidget.getExpanded(nearestItem)) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                ) == targetMenu;\r\n                if (isTargetClosestMenu) {\r\n                    const activeItem = this.#getActiveItem(targetMenu);\r\n                    if (activeItem !== null &&\r\n                        menuItemWidget.getType(activeItem) == \"submenu\" &&\r\n                        menuItemWidget.getExpanded(activeItem)) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, mouseOutCollapseDelay)\r\n                            .then(() => {\r\n                                menuItemWidget.collapse(activeItem);\r\n                            })\r\n                            .catch(() => undefined);\r\n                    }\r\n                    const {clientX, clientY} = event;\r\n                    const {left, right, top, bottom} = targetMenu.getBoundingClientRect();\r\n                    const intersectsWithMouse = !(\r\n                        left > clientX || right < clientX || top > clientY || bottom < clientY\r\n                    );\r\n                    const containsRelatedTarget = targetMenu.contains(<Node>relatedTarget);\r\n                    if (intersectsWithMouse && containsRelatedTarget) {\r\n                        if (relatedTarget instanceof HTMLElement && relatedTarget.classList.contains(\"menu\") && relatedTarget !== targetMenu) {\r\n                            relatedTarget.focus({preventScroll: true});\r\n                        }\r\n                        else {\r\n                            targetMenu.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    if (!intersectsWithMouse) {\r\n                        targetMenu.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const nearestItem = this.#nearestItem(targetMenu, target); \r\n            if (nearestItem !== null) {\r\n                if (menuItemWidget.getType(nearestItem) == \"submenu\" &&\r\n                    menuItemWidget.getExpanded(nearestItem)) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                ) == targetMenu;\r\n                if (isTargetClosestMenu) {\r\n                    const activeItem = this.#getActiveItem(targetMenu);\r\n                    if (activeItem !== null) {\r\n                        if (menuItemWidget.getType(activeItem) == \"submenu\" &&\r\n                            menuItemWidget.getExpanded(activeItem) && \r\n                            !activeItem.contains(<HTMLElement>target)) {\r\n                            this.#clearItemTimeout(activeItem);\r\n                            this.#setItemTimeout(activeItem, mouseOutCollapseDelay)\r\n                                .then(() => {\r\n                                    menuItemWidget.collapse(activeItem);\r\n                                })\r\n                                .catch(() => undefined);\r\n                        }\r\n                    }\r\n                    nearestItem.focus({preventScroll: true});\r\n                    if (menuItemWidget.getType(nearestItem) == \"submenu\") {\r\n                        if (!menuItemWidget.getExpanded(nearestItem)) {\r\n                            this.#clearItemTimeout(nearestItem);\r\n                            this.#setItemTimeout(nearestItem, mouseOverExpandDelay)\r\n                                .then(() => {\r\n                                    const activeItem = this.#getActiveItem(targetMenu);\r\n                                    this.#collapseSubmenus(targetMenu);\r\n                                    if (activeItem) {\r\n                                        this.#clearItemTimeout(activeItem);\r\n                                        menuItemWidget.expand(activeItem);\r\n                                        menuItemWidget.getMenu(activeItem)?.focus({preventScroll: true});\r\n                                    }\r\n                                })\r\n                                .catch(() => undefined);\r\n                        }\r\n                        else {\r\n                            menuItemWidget.getMenu(nearestItem)?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menuitemgroup\": MenuItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar menuItemGroupWidget = new (\r\nWidget({\r\n    name: \"menuitemgroup\"\r\n})(class MenuItemGroupWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menuitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement): HTMLElement | null {\r\n        return group;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { treeItemWidget };\r\n\r\ntype TreeItemType = \"parent\" | \"leaf\";\r\n\r\ninterface TreeItemWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        type?: TreeItemType;\r\n        label?: string;\r\n        title?: string;\r\n        disabled?: boolean;\r\n        draggable?: boolean;\r\n    }): HTMLElement;\r\n    group(item: HTMLElement): HTMLElement | null;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setExpanded(item: HTMLElement, value: boolean): void;\r\n    getExpanded(item: HTMLElement): boolean;\r\n    setDraggable(row: HTMLElement, value: boolean): void;\r\n    getDraggable(item: HTMLElement): boolean;\r\n    getType(item: HTMLElement): TreeItemType | null;\r\n    setType(item: HTMLElement, value: TreeItemType): void;\r\n    toggle(item: HTMLElement, force?: boolean): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"treeitem\": TreeItemWidgetFactory,\r\n    }\r\n}\r\n\r\nvar treeItemWidget = new (\r\nWidget({\r\n    name: \"treeitem\"\r\n})(class TreeItemWidgetFactoryBase extends WidgetFactory implements TreeItemWidgetFactory {\r\n    #template: HTMLElement;\r\n    #types: TreeItemType[];\r\n\r\n    constructor() {\r\n        super();\r\n        this.#types = [\"parent\", \"leaf\"];\r\n        this.#template = element(\"li\", {\r\n            attributes: {\r\n                class: \"treeitem\",\r\n                role: \"treeitem\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"content\"\r\n                    },\r\n                    children: [\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"arrow\"\r\n                            }\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    group(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .treeitemgroup\");\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        label?: string;\r\n        title?: string;\r\n        type?: TreeItemType;\r\n        disabled?: boolean;\r\n        draggable?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, label, title, type = \"leaf\", disabled, draggable} = properties;\r\n            if (id !== undefined) {\r\n                item.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                item.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                item.tabIndex = tabIndex;\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (title !== undefined) {\r\n                this.setTitle(item, title);\r\n            }\r\n            this.setType(item, type);\r\n            if (type === \"parent\") {\r\n                this.setExpanded(item, false);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n            if (draggable !== undefined) {\r\n                this.setDraggable(item, draggable);\r\n            }\r\n            this.setSelected(item, false);\r\n        }\r\n        return item;\r\n    }\r\n\r\n    get observedSlots() {\r\n        return [\"content\", \"group\"];\r\n    }\r\n\r\n    slot(item: HTMLElement, name: string | null) {\r\n        switch (name) {\r\n            case \"content\":\r\n                return this.#content(item);\r\n            case \"group\":\r\n                return item;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #content(item: HTMLElement): HTMLElement {\r\n        const content = item.querySelector<HTMLElement>(\":scope > .content\")!;\r\n        if (!content) throw new Error(\"Missing .content slot.\");\r\n        return content;\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return item.getAttribute(\"aria-label\") ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"aria-label\", value);\r\n    }\r\n\r\n    getTitle(item: HTMLElement): string {\r\n        return item.title;\r\n    }\r\n\r\n    setTitle(item: HTMLElement, value: string): void {\r\n        item.title = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? Number(posInSet) : -1;\r\n    }\r\n\r\n    getType(item: HTMLElement): TreeItemType {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`treeitem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        throw new Error(\"Missing type.\");\r\n    }\r\n\r\n    setType(item: HTMLElement, type: TreeItemType): void {\r\n        const {classList} = item;\r\n        try {\r\n            const oldType = this.getType(item);\r\n            classList.remove(`treeitem-${oldType}`);\r\n        }\r\n        catch (e) {};\r\n        classList.add(`treeitem-${type}`);\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-expanded\", String(value));\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-expanded\") ?? String(false));\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            if (!classList.contains(\"active\")) {\r\n                classList.add(\"active\");\r\n            }\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDraggable(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"draggable\", String(value));\r\n    }\r\n\r\n    getDraggable(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"draggable\") ?? String(false));\r\n    }\r\n\r\n    setSelected(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-selected\", String(value));\r\n        item.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    setLevel(item: HTMLElement, value: number): void {\r\n        item.style.setProperty(\"--level\", String(value));\r\n    }\r\n\r\n    getLevel(item: HTMLElement): number {\r\n        return parseInt(item.style.getPropertyValue(\"--level\"));\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        this.setExpanded(item, force ?? !this.getExpanded(item));\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget, shiftKey, ctrlKey} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            if (type == \"parent\" && !(shiftKey || ctrlKey)) {\r\n                this.toggle(targetItem);\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { treeItemWidget } from \"./TreeItemWidget\";\r\n\r\nexport { treeWidget };\r\n\r\ninterface TreeWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement;\r\n    items(tree: HTMLElement): HTMLElement[];\r\n    selectedItems(tree: HTMLElement): HTMLElement[];\r\n    beginSelection(tree: HTMLElement): void;\r\n    endSelection(tree: HTMLElement): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"tree\": TreeWidgetFactory,\r\n    }\r\n}\r\n\r\nvar treeWidget = new (\r\nWidget({\r\n    name: \"tree\"\r\n})(class TreeWidgetFactoryBase extends WidgetFactory implements TreeWidgetFactory {\r\n\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"tree\",\r\n                role: \"tree\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement {\r\n        const tree = <HTMLElement>this.#template.cloneNode(true);\r\n        tree.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        tree.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        tree.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        tree.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        tree.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        tree.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        tree.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        tree.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        tree.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        tree.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        tree.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        this.#onSelection.set(tree, false);\r\n        this.#hasSelectionChanged.set(tree, false);\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, multisectable} = properties;\r\n            if (id !== undefined) {\r\n                tree.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                tree.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                tree.tabIndex = tabIndex;\r\n            }\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(tree, multisectable);\r\n            }\r\n        }\r\n        return tree;\r\n    }\r\n\r\n    slot(tree: HTMLElement) {\r\n        return tree;\r\n    }\r\n\r\n    slottedCallback(tree: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"treeitem\")) {\r\n                treeItemWidget.setPosInSet(child_i, i);\r\n                treeItemWidget.setLevel(child_i, 0);\r\n            }\r\n        });\r\n    }\r\n\r\n    items(tree: HTMLElement): HTMLElement[] {\r\n        return Array.from(tree.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .treeitemgroup) > .treeitem\"\r\n        ));\r\n    }\r\n\r\n    selectedItems(tree: HTMLElement): HTMLElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        let item = this.#firstItem(tree);\r\n        while (item !== null) {\r\n            const selected = treeItemWidget.getSelected(item);\r\n            if (selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(tree: HTMLElement): void {\r\n        this.#onSelection.set(tree, true);\r\n    }\r\n\r\n    endSelection(tree: HTMLElement): void {\r\n        this.#onSelection.set(tree, false);\r\n        if (this.#hasSelectionChanged.get(tree)) {\r\n            tree.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(tree, false);\r\n        }\r\n    }\r\n\r\n    setMultiSelectable(tree: HTMLElement, value: boolean): void {\r\n        tree.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(tree: HTMLElement): boolean {\r\n        return JSON.parse(tree.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    #getActiveItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".treeitem.active\");\r\n    }\r\n\r\n    #getDropTargetItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".treeitem.droptarget\");\r\n    }\r\n\r\n    #setDropTargetItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const {classList} = tree;\r\n        const dropTargetItem = this.#getDropTargetItem(tree);\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            treeItemWidget.setDropTarget(dropTargetItem, false);\r\n        }\r\n        if (item !== null) {\r\n            treeItemWidget.setDropTarget(item, true);\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"treeitem\") && !treeItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"treeitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextItem = this.#nextItem(from);\r\n            while (nextItem && nextItem !== to) {\r\n                range.push(nextItem);\r\n                nextItem = this.#nextItem(nextItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousItem = this.#previousItem(from);\r\n            while (previousItem && previousItem !== to) {\r\n                range.push(previousItem);\r\n                previousItem = this.#previousItem(previousItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        selectedItems.forEach((item_i) => {\r\n            if (!items.includes(item_i)) {\r\n                treeItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            const selected = treeItemWidget.getSelected(item_i);\r\n            if (tree.contains(item_i) && !selected) {\r\n                treeItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #addToSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        this.beginSelection(tree);\r\n        items.forEach((item_i) => {\r\n            if (!treeItemWidget.getSelected(item_i)) {\r\n                treeItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #removeFromSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                treeItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #clearSelection(tree: HTMLElement): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        selectedItems.forEach((item_i) => {\r\n            treeItemWidget.setSelected(item_i, false);\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #setActiveItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(tree);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            treeItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            treeItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #firstItem(tree: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(tree: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousSibling = <HTMLElement | null>walker.previousSibling();\r\n        return previousSibling ?\r\n            this.#deepestItem(previousSibling) :\r\n            <HTMLElement | null>walker.parentNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const type = treeItemWidget.getType(item);\r\n        const expanded = treeItemWidget.getExpanded(item);\r\n        return <HTMLElement | null>(\r\n            type === \"leaf\" ?\r\n                walker.nextNode() :\r\n                expanded ?\r\n                    walker.nextNode() :\r\n                    walker.nextSibling() ??\r\n                    (walker.parentNode(), walker.nextSibling())\r\n        );\r\n    }\r\n\r\n    #deepestItem(item: HTMLElement): HTMLElement {\r\n        const expanded = treeItemWidget.getExpanded(item);\r\n        if (expanded) {\r\n            const walker = this.#walker;\r\n            const lastItem = <HTMLElement>walker.lastChild();\r\n            if (lastItem) {\r\n                return this.#deepestItem(lastItem);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey, button} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        if (targetItem) {\r\n            const selected = treeItemWidget.getSelected(targetItem);\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setSelection(targetTree, targetItem);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            targetItem.blur();\r\n                            this.#removeFromSelection(targetTree, targetItem);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(targetTree, targetItem);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const activeItem = this.#getActiveItem(targetTree);\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                targetItem\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetTree, ...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                }\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(targetTree, targetItem);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            const type = treeItemWidget.getType(targetItem);\r\n            if (type == \"parent\") {\r\n                treeItemWidget.toggle(targetItem, true);\r\n            }\r\n            this.#setDropTargetItem(targetTree, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (!targetTree.contains(<Node>relatedTarget)) {\r\n            this.#setDropTargetItem(targetTree, null);\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const focusWithin = targetTree.contains(<Node>relatedTarget);\r\n        if (!focusWithin) {   \r\n            const activeItem = this.#getActiveItem(targetTree);\r\n            if (activeItem) {\r\n                activeItem.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetTree, targetItem);\r\n            targetTree.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetTree.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetTree.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetTree);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetTree, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetTree, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(\r\n                                firstItem,\r\n                                this.#deepestItem(lastItem)\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetTree, ...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const expanded = treeItemWidget.getExpanded(activeItem);\r\n                    if (expanded) {\r\n                        treeItemWidget.toggle(activeItem);\r\n                    }\r\n                    else {\r\n                        const walker = this.#walker;\r\n                        const parentItem = <HTMLElement>walker.parentNode();\r\n                        if (parentItem) {\r\n                            parentItem.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const expanded = treeItemWidget.getExpanded(activeItem);\r\n                    if (!expanded) {\r\n                        treeItemWidget.toggle(activeItem);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = treeItemWidget.getSelected(previousItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetTree, previousItem) :\r\n                                this.#addToSelection(targetTree, previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetTree);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = treeItemWidget.getSelected(nextItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetTree, nextItem) :\r\n                                this.#addToSelection(targetTree, nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetTree);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetTree);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetTree);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(targetTree, activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection(targetTree);\r\n                this.#setActiveItem(targetTree, null);\r\n                targetTree.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {target} = event;\r\n        const targetTree = <HTMLElement>target;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"treeitem\")) {\r\n            if (this.#onSelection.get(targetTree)) {\r\n                this.#hasSelectionChanged.set(target, true);\r\n            }\r\n            else {\r\n                targetTree.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { treeItemWidget } from \"./TreeItemWidget\";\r\n\r\nexport { treeItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"treeitemgroup\": TreeItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface TreeItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar treeItemGroupWidget = new (\r\nWidget({\r\n    name: \"treeitemgroup\"\r\n})(class TreeItemGroupWidgetFactoryBase extends WidgetFactory implements TreeItemGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"treeitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n\r\n    slottedCallback(group: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"treeitem\")) {\r\n                treeItemWidget.setPosInSet(child_i, i);\r\n                treeItemWidget.setLevel(child_i, (() => {\r\n                    let level = -1;\r\n                    let closestItem: HTMLElement | null = child_i;\r\n                    while (closestItem !== null && closestItem.matches(\".tree :scope\")) {\r\n                        closestItem = closestItem.parentElement?.closest(\".treeitem\") ?? null;\r\n                        level++;\r\n                    }\r\n                    return level;\r\n                })());\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { listItemWidget };\r\n\r\ninterface ListItemWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        label?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"listitem\": ListItemWidgetFactory,\r\n    }\r\n}\r\n\r\nvar listItemWidget = new (\r\nWidget({\r\n    name: \"listitem\"\r\n})(class ListItemWidgetFactoryBase extends WidgetFactory implements ListItemWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"li\", {\r\n            attributes: {\r\n                class: \"listitem\",\r\n                role: \"listitem\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        label?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {label, disabled} = init;\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n            this.setSelected(item, false);\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(root: HTMLElement): HTMLElement | null {\r\n        return root;\r\n    }\r\n\r\n    group(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .listitemgroup\");\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(row: HTMLElement, value: boolean): void {\r\n        row.setAttribute(\"aria-selected\", String(value));\r\n        row.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(row: HTMLElement): boolean {\r\n        return JSON.parse(row.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    #label(item: HTMLElement): Node {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { listItemWidget } from \"./ListItemWidget\";\r\n\r\nexport  { listWidget };\r\n\r\ninterface ListWidgetFactory extends WidgetFactory {\r\n    create(properties: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement;\r\n    items(list: HTMLElement): HTMLElement[];\r\n    beginSelection(list: HTMLElement): void;\r\n    endSelection(list: HTMLElement): void;\r\n    selectedItems(list: HTMLElement): HTMLElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"list\": ListWidgetFactory,\r\n    }\r\n}\r\n\r\nvar listWidget = new (\r\nWidget({\r\n    name: \"list\"\r\n})(class ListWidgetFactoryBase extends WidgetFactory implements ListWidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"list\",\r\n                role: \"list\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement {\r\n        const list = <HTMLElement>this.#template.cloneNode(true);\r\n        list.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        list.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        list.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        list.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        list.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        list.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        list.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        list.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        list.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        list.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        list.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        list.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, multisectable} = properties;\r\n            if (id !== undefined) {\r\n                list.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                list.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                list.tabIndex = tabIndex;\r\n            }\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(list, multisectable);\r\n            }\r\n        }\r\n        this.#onSelection.set(list, false);\r\n        this.#hasSelectionChanged.set(list, false);\r\n        return list;\r\n    }\r\n\r\n    slot(list: HTMLElement) {\r\n        return list;\r\n    }\r\n\r\n    slottedCallback(list: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"listitem\")) {\r\n                listItemWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n\r\n    setMultiSelectable(tree: HTMLElement, value: boolean): void {\r\n        tree.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(tree: HTMLElement): boolean {\r\n        return JSON.parse(tree.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    #getActiveItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".listitem.active\");\r\n    }\r\n\r\n    #getDropTargetItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".listitem.droptarget\");\r\n    }\r\n\r\n    items(list: HTMLElement): HTMLElement[] {\r\n        return Array.from(list.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .listitemgroup) > .listitem\"\r\n        ));\r\n    }\r\n\r\n    selectedItems(list: HTMLElement): HTMLElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        let item = this.#firstItem(list);\r\n        while (item !== null) {\r\n            const selected = listItemWidget.getSelected(item);\r\n            if (selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(list: HTMLElement): void {\r\n        this.#onSelection.set(list, true);\r\n    }\r\n\r\n    endSelection(list: HTMLElement): void {\r\n        this.#onSelection.set(list, false);\r\n        if (this.#hasSelectionChanged.get(list)) {\r\n            list.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(list, false);\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"listitem\") && !listItemWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"listitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextItem = this.#nextItem(from);\r\n            while (nextItem && nextItem !== to) {\r\n                range.push(nextItem);\r\n                nextItem = this.#nextItem(nextItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousItem = this.#previousItem(from);\r\n            while (previousItem && previousItem !== to) {\r\n                range.push(previousItem);\r\n                previousItem = this.#previousItem(previousItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        selectedItems.forEach((item_i) => {\r\n            if (!items.includes(item_i)) {\r\n                listItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            const selected = listItemWidget.getSelected(item_i);\r\n            if (list.contains(item_i) && !selected) {\r\n                listItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #addToSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        this.beginSelection(list);\r\n        items.forEach((item_i) => {\r\n            if (!listItemWidget.getSelected(item_i)) {\r\n                listItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #removeFromSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                listItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #clearSelection(list: HTMLElement): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        selectedItems.forEach((item_i) => {\r\n            listItemWidget.setSelected(item_i, false);\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #setActiveItem(list: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(list);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            listItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            listItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n    \r\n    #setDropTargetItem(list: HTMLElement, item: HTMLElement | null): void {\r\n        const {classList} = list;\r\n        const dropTargetItem = this.#getDropTargetItem(list);\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            listItemWidget.setDropTarget(dropTargetItem, false);\r\n        }\r\n        if (item !== null) {\r\n            listItemWidget.setDropTarget(item, false);\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    #firstItem(list: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(list: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLElement | null>walker.previousNode();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const nextItem = <HTMLElement | null>walker.nextNode();\r\n        return nextItem;\r\n    }\r\n\r\n    #handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetList, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            this.#setDropTargetItem(targetList, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!targetList.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(targetList, null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            const selectedItems = this.selectedItems(targetTree);\r\n            if (!selectedItems.includes(targetItem)) {\r\n                this.#setSelection(targetTree, targetItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetTree);\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetTree, targetItem);\r\n            targetTree.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetList);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetList, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetList, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(firstItem, lastItem);\r\n                            if (range) {\r\n                                this.#setSelection(targetList, ...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = listItemWidget.getSelected(previousItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetList, previousItem) :\r\n                                this.#addToSelection(targetList, previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetList);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = listItemWidget.getSelected(nextItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetList, nextItem) :\r\n                                this.#addToSelection(targetList, nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetList);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetList);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetList);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(targetList, activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection(targetList);\r\n                this.#setActiveItem(targetList, null);\r\n                targetList.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey, button} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            const selected = listItemWidget.getSelected(targetItem);\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setSelection(targetList, targetItem);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            targetItem.blur();\r\n                            this.#removeFromSelection(targetList, targetItem);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(targetList, targetItem);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const activeItem = this.#getActiveItem(targetList);\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                targetItem\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetList, ...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                }\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(targetList, targetItem);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetList.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetList.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetList) {\r\n            if (this.#onSelection.get(targetList)) {\r\n                this.#hasSelectionChanged.set(targetList, true);\r\n            }\r\n            else {\r\n                targetList.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { listItemWidget } from \"./ListItemWidget\";\r\n\r\nexport { listItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"listitemgroup\": ListItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ListItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar listItemGroupWidget = new (\r\nWidget({\r\n    name: \"listitemgroup\"\r\n})(class ListItemGroupWidgetFactoryBase extends WidgetFactory implements ListItemGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"listitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n\r\n    slottedCallback(group: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"listitem\")) {\r\n                listItemWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { toolbarItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbaritemgroup\": MenuItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar toolbarItemGroupWidget = new (\r\nWidget({\r\n    name: \"toolbaritemgroup\"\r\n})(class MenuItemGroupWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"toolbaritemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n}));","import { element } from \"../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"./Widget\";\r\n\r\nexport { widthSashWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"widthsash\": WidthSashWidgetFactory\r\n    }\r\n}\r\n\r\ninterface WidthSashWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"left\" | \"right\";\r\n    }): HTMLElement;\r\n}\r\n\r\nvar widthSashWidget = new (\r\nWidget({\r\n    name: \"widthsash\"\r\n})(class WidthSashWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    #targets: WeakMap<HTMLElement, HTMLElement | null>;\r\n    #onCaptureFlags: WeakMap<HTMLElement, boolean>;\r\n    #queuedPointerCallbacks: WeakMap<HTMLElement, FrameRequestCallback | null>;\r\n    #pointerMovements: WeakMap<HTMLElement, number>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"widthsash\"\r\n            }\r\n        });\r\n        this.#targets = new WeakMap();\r\n        this.#onCaptureFlags = new WeakMap();\r\n        this.#queuedPointerCallbacks = new WeakMap();\r\n        this.#pointerMovements = new WeakMap();\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"left\" | \"right\";\r\n    }) {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const sash = <HTMLElement>this.#template.cloneNode(true);\r\n        sash.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        sash.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        sash.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, controls, growDir} = properties;\r\n            if (id !== undefined) {\r\n                sash.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                sash.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                sash.tabIndex = tabIndex;\r\n            }\r\n            if (controls !== undefined) {\r\n                this.setControls(sash, controls);\r\n            }\r\n            if (growDir !== undefined) {\r\n                this.setGrowDir(sash, growDir);\r\n            }\r\n        }\r\n        targets.set(sash, null);\r\n        queuedPointerCallbacks.set(sash, null);\r\n        pointerMovements.set(sash, 0);\r\n        onCaptureFlags.set(sash, false);\r\n        return sash;\r\n    }\r\n\r\n    getGrowDir(sash: HTMLElement): \"right\" | \"left\" {\r\n        return <\"right\" | \"left\">sash.getAttribute(\"data-growdir\") ?? \"right\";\r\n    }\r\n\r\n    setGrowDir(sash: HTMLElement, value: \"right\" | \"left\"): void {\r\n        sash.setAttribute(\"data-growdir\", value);\r\n    }\r\n\r\n    getControls(sash: HTMLElement): string | null {\r\n        return sash.getAttribute(\"data-controls\");\r\n    }\r\n\r\n    setControls(sash: HTMLElement, value: string): void {\r\n        sash.setAttribute(\"data-controls\", value);\r\n    }\r\n\r\n    setWidth(sash: HTMLElement, width: number): void {\r\n        const targets = this.#targets;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            target.style.setProperty(\"width\", `${width}px`);\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        sashTarget.releasePointerCapture(pointerId);\r\n        onCaptureFlags.set(sashTarget, false);\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const controls = this.getControls(sashTarget);\r\n        if (controls) {\r\n            const targets = this.#targets;\r\n            const onCaptureFlags = this.#onCaptureFlags;\r\n            const rootNode = <ShadowRoot | Document>sashTarget.getRootNode();\r\n            targets.set(sashTarget, rootNode.getElementById(controls));\r\n            onCaptureFlags.set(sashTarget, true);\r\n            sashTarget.setPointerCapture(pointerId);\r\n        }\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        const {currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const pointerMoveCallback = this.#pointerMoveCallback;\r\n        const onCaptureFlag = onCaptureFlags.get(sashTarget);\r\n        if (onCaptureFlag) {\r\n            let callback = queuedPointerCallbacks.get(sashTarget);\r\n            if (callback == null) {\r\n                callback = pointerMoveCallback.bind(this, sashTarget);\r\n                queuedPointerCallbacks.set(sashTarget, callback);\r\n                requestAnimationFrame(callback);\r\n            }\r\n            const pointerMovement = pointerMovements.get(sashTarget)! + event.movementX;\r\n            pointerMovements.set(sashTarget, pointerMovement);\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(sash: HTMLElement): void {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const growdir = this.getGrowDir(sash);\r\n            const movementX = pointerMovements.get(sash)!;\r\n            const width = parseFloat(targetComputedStyle.getPropertyValue(\"width\"));\r\n            const newWidth = width + (growdir == \"right\" ? 1 : -1) * movementX;\r\n            this.setWidth(sash, newWidth);\r\n            sash.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        pointerMovements.set(sash, 0);\r\n        queuedPointerCallbacks.set(sash, null);\r\n    }\r\n}));","import { element } from \"../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"./Widget\";\r\n\r\nexport { heightSashWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"heightsash\": HeightSashWidgetFactory\r\n    }\r\n}\r\n\r\ninterface HeightSashWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"top\" | \"bottom\";\r\n    }): HTMLElement;\r\n}\r\n\r\nvar heightSashWidget = new (\r\nWidget({\r\n    name: \"heightsash\"\r\n})(class HeightSashWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    #targets: WeakMap<HTMLElement, HTMLElement | null>;\r\n    #onCaptureFlags: WeakMap<HTMLElement, boolean>;\r\n    #queuedPointerCallbacks: WeakMap<HTMLElement, FrameRequestCallback | null>;\r\n    #pointerMovements: WeakMap<HTMLElement, number>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"heightsash\"\r\n            }\r\n        });\r\n        this.#targets = new WeakMap();\r\n        this.#onCaptureFlags = new WeakMap();\r\n        this.#queuedPointerCallbacks = new WeakMap();\r\n        this.#pointerMovements = new WeakMap();\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"top\" | \"bottom\";\r\n    }) {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const sash = <HTMLElement>this.#template.cloneNode(true);\r\n        sash.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        sash.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        sash.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, controls, growDir} = properties;\r\n            if (id !== undefined) {\r\n                sash.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                sash.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                sash.tabIndex = tabIndex;\r\n            }\r\n            if (controls !== undefined) {\r\n                this.setControls(sash, controls);\r\n            }\r\n            if (growDir !== undefined) {\r\n                this.setGrowDir(sash, growDir);\r\n            }\r\n        }\r\n        targets.set(sash, null);\r\n        queuedPointerCallbacks.set(sash, null);\r\n        pointerMovements.set(sash, 0);\r\n        onCaptureFlags.set(sash, false);\r\n        return sash;\r\n    }\r\n\r\n    getGrowDir(sash: HTMLElement): \"top\" | \"bottom\" {\r\n        return <\"top\" | \"bottom\">sash.getAttribute(\"data-growdir\") ?? \"top\";\r\n    }\r\n\r\n    setGrowDir(sash: HTMLElement, value: \"top\" | \"bottom\"): void {\r\n        sash.setAttribute(\"data-growdir\", value);\r\n    }\r\n\r\n    getControls(sash: HTMLElement): string | null {\r\n        return sash.getAttribute(\"data-controls\");\r\n    }\r\n\r\n    setControls(sash: HTMLElement, value: string): void {\r\n        sash.setAttribute(\"data-controls\", value);\r\n    }\r\n\r\n    setHeight(sash: HTMLElement, height: number): void {\r\n        const targets = this.#targets;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            target.style.setProperty(\"height\", `${height}px`);\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        sashTarget.releasePointerCapture(pointerId);\r\n        onCaptureFlags.set(sashTarget, false);\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const controls = this.getControls(sashTarget);\r\n        if (controls) {\r\n            const targets = this.#targets;\r\n            const onCaptureFlags = this.#onCaptureFlags;\r\n            const rootNode = <ShadowRoot | Document>sashTarget.getRootNode();\r\n            targets.set(sashTarget, rootNode.getElementById(controls));\r\n            onCaptureFlags.set(sashTarget, true);\r\n            sashTarget.setPointerCapture(pointerId);\r\n        }\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        const {currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const onCaptureFlag = onCaptureFlags.get(sashTarget);\r\n        if (onCaptureFlag) {\r\n            let callback = queuedPointerCallbacks.get(sashTarget);\r\n            if (callback == null) {\r\n                callback = this.#pointerMoveCallback.bind(this, sashTarget);\r\n                queuedPointerCallbacks.set(sashTarget, callback);\r\n                requestAnimationFrame(callback);\r\n            }\r\n            const pointerMovement = pointerMovements.get(sashTarget)! + event.movementX;\r\n            pointerMovements.set(sashTarget, pointerMovement);\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(sash: HTMLElement): void {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const growdir = this.getGrowDir(sash);\r\n            const movementX = pointerMovements.get(sash)!;\r\n            const height = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            const newHeight = height + (growdir == \"top\" ? -1 : 1) * movementX;\r\n            this.setHeight(sash, newHeight);\r\n            sash.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        pointerMovements.set(sash, 0);\r\n        queuedPointerCallbacks.set(sash, null);\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridCellWidget };\r\n\r\ninterface GridCellWidgetFactory extends WidgetFactory {\r\n    create(init: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        disabled?: boolean;\r\n        headers?: string;\r\n    }): HTMLElement;\r\n    getHeaders(item: HTMLElement): string;\r\n    setHeaders(item: HTMLElement, value: string): void;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridcell\": GridCellWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridCellWidget = new (\r\nWidget({\r\n    name: \"gridcell\"\r\n})(class GridCellWidgetFactoryBase extends WidgetFactory implements GridCellWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"td\", {\r\n            attributes: {\r\n                class: \"gridcell\",\r\n                role: \"gridcell\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        disabled?: boolean;\r\n        headers?: string;\r\n    }): HTMLElement {\r\n        const cell = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {id, classList, tabIndex, disabled, headers} = init;\r\n            if (id !== undefined) {\r\n                cell.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                cell.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                cell.tabIndex = tabIndex;\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(cell, disabled);\r\n            }\r\n            if (headers !== undefined) {\r\n                this.setHeaders(cell, headers);\r\n            }\r\n            this.setSelected(cell, false);\r\n        }\r\n        return cell;\r\n    }\r\n\r\n    slot(cell: HTMLElement): HTMLElement | null {\r\n        return cell;\r\n    }\r\n\r\n    getHeaders(item: HTMLElement): string {\r\n        return item.getAttribute(\"headers\") ?? \"\";\r\n    }\r\n\r\n    setHeaders(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"headers\", value);\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-selected\", String(value));\r\n        item.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .content > .label\")!;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { gridCellWidget } from \"./GridCellWidget\";\r\n\r\nexport { gridRowWidget };\r\n\r\ninterface GridRowWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        disabled?: boolean\r\n    }): HTMLElement;\r\n    cells(row: HTMLElement): HTMLElement[];\r\n    setPosInSet(row: HTMLElement, value: number): void;\r\n    getPosInSet(row: HTMLElement): number;\r\n    setActive(row: HTMLElement, value: boolean): void;\r\n    getActive(row: HTMLElement): boolean;\r\n    setDropTarget(row: HTMLElement, value: boolean): void;\r\n    getDropTarget(row: HTMLElement): boolean;\r\n    setSelected(row: HTMLElement, value: boolean): void;\r\n    getSelected(row: HTMLElement): boolean;\r\n    setDisabled(row: HTMLElement, value: boolean): void;\r\n    getDisabled(row: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridrow\": GridRowWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridRowWidget = new (\r\nWidget({\r\n    name: \"gridrow\"\r\n})(class GridRowWidgetFactoryBase extends WidgetFactory implements GridRowWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"tr\", {\r\n            attributes: {\r\n                class: \"gridrow\",\r\n                role: \"row\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const row = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {disabled} = init;\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(row, disabled);\r\n            }\r\n            this.setSelected(row, false);\r\n        }\r\n        return row;\r\n    }\r\n\r\n    slot(row: HTMLElement): HTMLElement | null {\r\n        return row;\r\n    }\r\n\r\n    cells(row: HTMLElement): HTMLElement[] {\r\n        return Array.from(row.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridcell\"\r\n        ));\r\n    }\r\n    \r\n    setPosInSet(row: HTMLElement, value: number): void {\r\n        row.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(row: HTMLElement): number {\r\n        const posInSet = row.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(row: HTMLElement, value: boolean): void {\r\n        const {classList} = row;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(row: HTMLElement): boolean {\r\n        const {classList} = row;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(row: HTMLElement, value: boolean): void {\r\n        const {classList} = row;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(row: HTMLElement): boolean {\r\n        const {classList} = row;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(row: HTMLElement, value: boolean): void {\r\n        row.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(row: HTMLElement): boolean {\r\n        return row.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(row: HTMLElement, value: boolean): void {\r\n        row.setAttribute(\"aria-selected\", String(value));\r\n        row.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(row: HTMLElement): boolean {\r\n        return JSON.parse(row.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((item_i, i) => {\r\n            if (item_i instanceof HTMLElement) {\r\n                gridCellWidget.setPosInSet(item_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { gridCellWidget } from \"./GridCellWidget\";\r\nimport { gridRowWidget } from \"./GridRowWidget\";\r\n\r\nexport { gridWidget };\r\n\r\ntype GridSelectBy = \"cell\" | \"row\";\r\n\r\ninterface GridRowWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n        selectby?: GridSelectBy\r\n    }): HTMLElement;\r\n    setSelectBy(item: HTMLElement, value: GridSelectBy): void;\r\n    getSelectBy(item: HTMLElement): GridSelectBy;\r\n    headers(grid: HTMLElement): HTMLElement[];\r\n    cells(grid: HTMLElement): HTMLElement[];\r\n    rows(grid: HTMLElement): HTMLElement[];\r\n    beginSelection(grid: HTMLElement): void;\r\n    endSelection(grid: HTMLElement): void;\r\n    selectedCells(grid: HTMLElement): HTMLElement[];\r\n    selectedRows(grid: HTMLElement): HTMLElement[];\r\n    clearSelection(grid: HTMLElement): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"grid\": GridRowWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridWidget = new (\r\nWidget({\r\n    name: \"grid\"\r\n})(class GridWidgetFactoryBase extends WidgetFactory implements GridRowWidgetFactory {\r\n\r\n    #getActiveRow(grid: HTMLElement): HTMLElement | null {\r\n        return grid.querySelector<HTMLElement>(\".gridrow.active\");\r\n    }\r\n\r\n    #getActiveCell(grid: HTMLElement): HTMLElement | null {\r\n        return grid.querySelector<HTMLElement>(\".gridcell.active\");\r\n    }\r\n\r\n    headers(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridhead > .gridheader\"\r\n        ));\r\n    }\r\n\r\n    rows(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridbody > .gridrow\"\r\n        ));\r\n    }\r\n\r\n    cells(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridbody > .gridrow > .gridcell\"\r\n        ));\r\n    }\r\n\r\n    #template: HTMLElement;\r\n    #rowsWalker: TreeWalker;\r\n    #cellsWalker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"table\", {\r\n            attributes: {\r\n                class: \"grid\",\r\n                role: \"grid\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#cellsWalker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#cellsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#rowsWalker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#rowsWalkerNodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n        selectby?: GridSelectBy;\r\n    }) {\r\n        const grid = <HTMLElement>this.#template.cloneNode(true);\r\n        //grid.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        grid.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        grid.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        grid.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        grid.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        grid.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        grid.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, selectby, multisectable} = properties;\r\n            if (id !== undefined) {\r\n                grid.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                grid.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                grid.tabIndex = tabIndex;\r\n            }\r\n            if (selectby !== undefined) {\r\n                this.setSelectBy(grid, selectby);\r\n            }\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(grid, multisectable);\r\n            }\r\n        }\r\n        return grid;\r\n    }\r\n\r\n    slot(grid: HTMLElement): HTMLElement | null {\r\n        return grid;\r\n    }\r\n\r\n    setMultiSelectable(grid: HTMLElement, value: boolean): void {\r\n        grid.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(grid: HTMLElement): boolean {\r\n        return JSON.parse(grid.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    setSelectBy(grid: HTMLElement, value: GridSelectBy): void {\r\n        grid.setAttribute(\"data-selectby\", value);\r\n    }\r\n\r\n    getSelectBy(grid: HTMLElement): GridSelectBy {\r\n        return <GridSelectBy>grid.getAttribute(\"data-selectby\") ?? \"cell\";\r\n    }\r\n\r\n    beginSelection(grid: HTMLElement): void {\r\n        this.#onSelection.set(grid, true);\r\n    }\r\n\r\n    endSelection(grid: HTMLElement): void {\r\n        this.#onSelection.set(grid, false);\r\n        if (this.#hasSelectionChanged.get(grid)) {\r\n            grid.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(grid, false);\r\n        }\r\n    }\r\n\r\n    clearSelection(grid: HTMLElement): void {\r\n        this.#clearCellsSelection(grid);\r\n        this.#clearRowsSelection(grid);\r\n    }\r\n\r\n    selectedCells(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll(\":scope > .gridbody > .gridrow > .gridcell[aria-selected=true]\"));\r\n    }\r\n\r\n    selectedRows(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll(\":scope > .gridbody > .gridrow[aria-selected=true]\"));\r\n    }\r\n\r\n    #cellsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"gridcell\") && !gridCellWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"gridrow\") || classList.contains(\"gridbody\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #rowsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"gridrow\") && !gridRowWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"gridbody\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getCellsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextCell = this.#nextCell(from);\r\n            while (nextCell && nextCell !== to) {\r\n                range.push(nextCell);\r\n                nextCell = this.#nextCell(nextCell);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousCell = this.#previousCell(from);\r\n            while (previousCell && previousCell !== to) {\r\n                range.push(previousCell);\r\n                previousCell = this.#previousRow(previousCell);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #getRowsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextRow = this.#nextRow(from);\r\n            while (nextRow && nextRow !== to) {\r\n                range.push(nextRow);\r\n                nextRow = this.#nextRow(nextRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousRow = this.#previousRow(from);\r\n            while (previousRow && previousRow !== to) {\r\n                range.push(previousRow);\r\n                previousRow = this.#previousRow(previousRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setCellsSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        selectedCells.forEach((selectedCell_i) => {\r\n            if (!cells.includes(selectedCell_i)) {\r\n                gridCellWidget.setSelected(selectedCell_i, false);\r\n            }\r\n        });\r\n        cells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (!selected) {\r\n                gridCellWidget.setSelected(cell_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #setRowsSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        selectedRows.forEach((selectedRow_i) => {\r\n            if (!rows.includes(selectedRow_i)) {\r\n                gridRowWidget.setSelected(selectedRow_i, false);\r\n            }\r\n        });\r\n        rows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (!selected) {\r\n                gridRowWidget.setSelected(row_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #addCellsToSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        cells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (!selected) {\r\n                gridCellWidget.setSelected(cell_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #addRowsToSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        rows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (!selected) {\r\n                gridRowWidget.setSelected(row_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #removeCellsFromSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        cells.forEach((cell_i) => {\r\n            if (selectedCells.includes(cell_i)) {\r\n                gridCellWidget.setSelected(cell_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #removeRowsFromSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        rows.forEach((row_i) => {\r\n            if (selectedRows.includes(row_i)) {\r\n                gridRowWidget.setSelected(row_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #clearCellsSelection(grid: HTMLElement): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        selectedCells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (selected) {\r\n                gridCellWidget.setSelected(cell_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #clearRowsSelection(grid: HTMLElement): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        selectedRows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (selected) {\r\n                gridRowWidget.setSelected(row_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #setActiveCell(grid: HTMLElement, cell: HTMLElement | null): void {\r\n        const activeCell = this.#getActiveCell(grid);\r\n        if (activeCell !== null && activeCell !== cell) {\r\n            gridCellWidget.setActive(activeCell, false);\r\n            activeCell.tabIndex = -1;\r\n        }\r\n        if (cell !== null) {\r\n            gridCellWidget.setActive(cell, true);\r\n            cell.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #setActiveRow(grid: HTMLElement, row: HTMLElement | null): void {\r\n        const activeRow = this.#getActiveRow(grid);\r\n        if (activeRow !== null && activeRow !== row) {\r\n            gridRowWidget.setActive(activeRow, false);\r\n            activeRow.tabIndex = -1;\r\n        }\r\n        if (row !== null) {\r\n            gridCellWidget.setActive(row, true);\r\n            row.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #firstCell(row: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLElement | null>cellsWalker.firstChild();\r\n    }\r\n\r\n    #lastCell(row: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLElement | null>cellsWalker.lastChild();\r\n    }\r\n\r\n    #previousCell(cell: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLElement | null>cellsWalker.previousNode();\r\n    }\r\n\r\n    #nextCell(cell: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLElement | null>cellsWalker.nextNode();\r\n    }\r\n\r\n    #closestRow(cell: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = cell;\r\n        return <HTMLElement | null>rowsWalker.parentNode();\r\n    }\r\n\r\n    #firstRow(grid: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = grid;\r\n        return <HTMLElement | null>rowsWalker.firstChild();\r\n    }\r\n\r\n    #lastRow(grid: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = grid;\r\n        return <HTMLElement | null>rowsWalker.lastChild();\r\n    }\r\n\r\n    #previousRow(row: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLElement | null>rowsWalker.previousNode();\r\n    }\r\n\r\n    #nextRow(row: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLElement | null>rowsWalker.nextNode();\r\n    }\r\n\r\n    #topCell(cell: HTMLElement): HTMLElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const closestRowCells = gridRowWidget.cells(closestRow);\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const previousRow = this.#previousRow(closestRow);\r\n            if (previousRow) {\r\n                const previousRowCells = gridRowWidget.cells(previousRow);\r\n                return previousRowCells[Math.min(cellIndex, previousRowCells.length)];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #bottomCell(cell: HTMLElement): HTMLElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const closestRowCells = gridRowWidget.cells(closestRow);\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const nextRow = this.#nextRow(closestRow);\r\n            if (nextRow) {\r\n                const nextRowCells = gridRowWidget.cells(nextRow);\r\n                return nextRowCells[Math.min(cellIndex, nextRowCells.length)];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /*#handleContextMenuEvent(event: MouseEvent) {\r\n        const {currentTarget, target} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    const selectedCells = this.selectedCells(targetGrid);\r\n                    if (!selectedCells.includes(targetCell)) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    targetCell.focus({preventScroll: true});\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    const selectedRows = this.selectedRows(targetGrid);\r\n                    if (!selectedRows.includes(targetRow)) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    targetRow.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        event.preventDefault();\r\n    }*/\r\n\r\n    /*#handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            const type = treeitemWidget.getType(targetItem);\r\n            if (type == \"parent\") {\r\n                treeitemWidget.toggle(targetItem, true);\r\n            }\r\n            this.#setDropTargetItem(targetTree, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!targetTree.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(targetTree, null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }*/\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const activeCell = this.#getActiveCell(targetGrid);\r\n                if (activeCell && relatedTarget !== activeCell) {\r\n                    activeCell.focus();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const activeRow = this.#getActiveRow(targetGrid);\r\n                if (activeRow && relatedTarget !== activeRow) {\r\n                    activeRow.focus();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    this.#setActiveCell(targetGrid, targetCell);\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    this.#setActiveRow(targetGrid, targetRow);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetGrid.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetGrid.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const activeCell = this.#getActiveCell(targetGrid);\r\n        const activeRow = this.#getActiveRow(targetGrid);\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        const multiselectable = this.getMultiSelectable(targetGrid);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey && multiselectable) {\r\n                    switch (selectby) {\r\n                        case \"cell\": {\r\n                            const firstRow = this.#firstRow(targetGrid);\r\n                            const firstCell = firstRow ? this.#firstCell(firstRow) : null;\r\n                            const lastRow = this.#lastRow(targetGrid);\r\n                            const lastCell = lastRow ? this.#lastCell(lastRow) : null;\r\n                            if (firstCell && lastCell) {\r\n                                const range = this.#getCellsRange(firstCell, lastCell);\r\n                                if (range) {\r\n                                    this.#setCellsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"row\": {\r\n                            const firstRow = this.#firstRow(targetGrid);\r\n                            const lastRow = this.#lastRow(targetGrid);\r\n                            if (firstRow && lastRow) {\r\n                                const range = this.#getRowsRange(firstRow, lastRow);\r\n                                if (range) {\r\n                                    this.#setRowsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const previousCell = this.#previousCell(activeCell);\r\n                        if (previousCell) {\r\n                            previousCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(previousCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, previousCell) :\r\n                                    this.#addCellsToSelection(targetGrid, previousCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const nextCell = this.#nextCell(activeCell);\r\n                        if (nextCell) {\r\n                            nextCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(nextCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, nextCell) :\r\n                                    this.#addCellsToSelection(targetGrid, nextCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const firstRow = activeRow ?? this.#firstRow(targetGrid);\r\n                        const topCell = activeCell ?\r\n                            this.#topCell(activeCell) :\r\n                            firstRow ?\r\n                            this.#firstCell(firstRow) :\r\n                            null;\r\n                        if (topCell) {\r\n                            topCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(topCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, topCell) :\r\n                                    this.#addCellsToSelection(targetGrid, topCell);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const previousRow = activeRow ?\r\n                            this.#previousRow(activeRow) :\r\n                            this.#firstRow(targetGrid);\r\n                        if (previousRow) {\r\n                            previousRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridRowWidget.getSelected(previousRow);\r\n                                selected ?\r\n                                    this.#removeRowsFromSelection(targetGrid, previousRow) :\r\n                                    this.#addRowsToSelection(targetGrid, previousRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const lastRow = activeRow ?? this.#lastRow(targetGrid);\r\n                        const bottomCell = activeCell ?\r\n                            this.#bottomCell(activeCell) :\r\n                            lastRow ?\r\n                            this.#lastCell(lastRow) :\r\n                            null;\r\n                            if (bottomCell) {\r\n                                bottomCell.focus({preventScroll: true});\r\n                                const {shiftKey} = event;\r\n                                if (shiftKey && multiselectable) {\r\n                                    const selected = gridCellWidget.getSelected(bottomCell);\r\n                                    selected ?\r\n                                        this.#removeCellsFromSelection(targetGrid, bottomCell) :\r\n                                        this.#addCellsToSelection(targetGrid, bottomCell);\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"row\": {\r\n                        const nextRow = activeRow ?\r\n                            this.#nextRow(activeRow) :\r\n                            this.#lastRow(targetGrid);\r\n                        if (nextRow) {\r\n                            nextRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridRowWidget.getSelected(nextRow);\r\n                                selected ?\r\n                                    this.#removeRowsFromSelection(targetGrid, nextRow) :\r\n                                    this.#addRowsToSelection(targetGrid, nextRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const firstCell = this.#firstCell(activeRow);\r\n                            if (firstCell) {\r\n                                firstCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const firstRow = this.#firstRow(targetGrid);\r\n                        if (firstRow) {\r\n                            firstRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const lastCell = this.#lastCell(activeRow);\r\n                            if (lastCell) {\r\n                                lastCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const lastRow = this.#lastRow(targetGrid);\r\n                        if (lastRow) {\r\n                            lastRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeCell) {\r\n                            this.#setCellsSelection(targetGrid, activeCell);\r\n                            activeCell.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        if (activeRow) {\r\n                            this.#setRowsSelection(targetGrid, activeRow);\r\n                            activeRow.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        this.#clearCellsSelection(targetGrid);\r\n                        this.#setActiveCell(targetGrid, null);\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        this.#clearRowsSelection(targetGrid);\r\n                        this.#setActiveRow(targetGrid, null);\r\n                        break;\r\n                    }\r\n                }\r\n                targetGrid.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        const multiselectable = this.getMultiSelectable(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    if (multiselectable) {\r\n                        if (!shiftKey && !ctrlKey) {\r\n                            this.#setCellsSelection(targetGrid, targetCell);\r\n                        }\r\n                        else if (ctrlKey) {\r\n                            const selected = gridCellWidget.getSelected(targetCell);\r\n                            !selected ?\r\n                                this.#addCellsToSelection(targetGrid, targetCell) :\r\n                                this.#removeCellsFromSelection(targetGrid, targetCell);\r\n                            event.stopPropagation();\r\n                        }\r\n                        else if (shiftKey) {\r\n                            const activeCell = this.#getActiveCell(targetGrid);\r\n                            if (activeCell) {\r\n                                const range = this.#getCellsRange(\r\n                                    activeCell,\r\n                                    targetCell\r\n                                );\r\n                                if (range) {\r\n                                    this.#setCellsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.#setCellsSelection(targetGrid, targetCell);\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    if (multiselectable) {\r\n                        if (!shiftKey && !ctrlKey) {\r\n                            this.#setRowsSelection(targetGrid, targetRow);\r\n                        }\r\n                        else if (ctrlKey) {\r\n                            const selected = gridRowWidget.getSelected(targetRow);\r\n                            !selected ?\r\n                                this.#addRowsToSelection(targetGrid, targetRow) :\r\n                                this.#removeRowsFromSelection(targetGrid, targetRow);\r\n                            event.stopPropagation();\r\n                        }\r\n                        else if (shiftKey) {\r\n                            const activeRow = this.#getActiveRow(targetGrid);\r\n                            if (activeRow) {\r\n                                const range = this.#getRowsRange(\r\n                                    activeRow,\r\n                                    targetRow\r\n                                );\r\n                                if (range) {\r\n                                    this.#setRowsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.#setRowsSelection(targetGrid, targetRow);\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetList) {\r\n            if (this.#onSelection.get(targetList)) {\r\n                this.#hasSelectionChanged.set(targetList, true);\r\n            }\r\n            else {\r\n                targetList.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { gridRowWidget } from \"./GridRowWidget\";\r\n\r\nexport { gridBodyWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridbody\": GridBodyWidgetFactory\r\n    }\r\n}\r\n\r\ninterface GridBodyWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar gridBodyWidget = new (\r\nWidget({\r\n    name: \"gridbody\"\r\n})(class GridBodyWidgetFactoryBase extends WidgetFactory implements GridBodyWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"tbody\", {\r\n            attributes: {\r\n                class: \"gridbody\",\r\n                role: \"rowgroup\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(body: HTMLElement) {\r\n        return body;\r\n    }\r\n\r\n    slottedCallback(body: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"gridrow\")) {\r\n                gridRowWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridHeadWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridhead\": GridHeadWidgetFactory\r\n    }\r\n}\r\n\r\ninterface GridHeadWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar gridHeadWidget = new (\r\nWidget({\r\n    name: \"gridhead\"\r\n})(class GridHeadWidgetFactoryBase extends WidgetFactory implements GridHeadWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"thead\", {\r\n            attributes: {\r\n                class: \"gridhead\",\r\n                role: \"rowgroup\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(head: HTMLElement) {\r\n        return head;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridHeaderWidget };\r\n\r\ninterface GridHeaderWidgetFactory extends WidgetFactory {\r\n    create(init: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }): HTMLElement;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridheader\": GridHeaderWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridHeaderWidget = new (\r\nWidget({\r\n    name: \"gridheader\"\r\n})(class GridHeaderWidgetFactoryBase extends WidgetFactory implements GridHeaderWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"th\", {\r\n            attributes: {\r\n                class: \"gridheader\",\r\n                scope: \"column\",\r\n                role: \"columnheader\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }): HTMLElement {\r\n        const header = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {id, classList, tabIndex} = init;\r\n            if (id !== undefined) {\r\n                header.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                header.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                header.tabIndex = tabIndex;\r\n            }\r\n        }\r\n        return header;\r\n    }\r\n\r\n    slot(header: HTMLElement): HTMLElement | null {\r\n        return header;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { optionWidget };\r\n\r\ninterface OptionWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        label?: string;\r\n        name?: string;\r\n        value?: string;\r\n        selected?: boolean;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    getLabel(option: HTMLElement): string;\r\n    setLabel(option: HTMLElement, value: string): void;\r\n    getValue(option: HTMLElement): string;\r\n    setValue(option: HTMLElement, value: string): void;\r\n    getName(option: HTMLElement): string;\r\n    setName(option: HTMLElement, value: string): void;\r\n    getSelected(option: HTMLElement): boolean;\r\n    setSelected(option: HTMLElement, value: boolean): void;\r\n    setDisabled(option: HTMLElement, value: boolean): void;\r\n    getDisabled(option: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"option\": OptionWidgetFactory\r\n    }\r\n}\r\n\r\nvar optionWidget = new(\r\nWidget({\r\n    name: \"option\"\r\n})(\r\nclass OptionWidgetFactoryBase extends WidgetFactory implements OptionWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"span\", {\r\n            attributes: {\r\n                class: \"option\",\r\n                role: \"option\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(properties?: {\r\n        selected?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const option = <HTMLElement>this.#template.cloneNode(true);\r\n        if (properties !== undefined) {\r\n            const {label, name, value, disabled} = properties;\r\n            let {selected} = properties;\r\n            selected = selected ?? false;\r\n            if (selected !== undefined) {\r\n                this.setSelected(option, selected);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(option, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(option, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(option, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(option, disabled);\r\n            }\r\n        }\r\n        return option;\r\n    }\r\n\r\n    get observedAttributes() {\r\n        return [\"aria-selected\"];\r\n    }\r\n\r\n    attributeChangedCallback(option: HTMLElement, name: string, oldValue: string, newValue: string) {\r\n        switch (name) {\r\n            case \"aria-selected\": {\r\n                if (JSON.parse(newValue) === true) {\r\n                    option.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #label(option: HTMLElement): HTMLElement {\r\n        return option.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n\r\n    getLabel(option: HTMLElement): string {\r\n        return this.#label(option).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(option: HTMLElement, value: string): void {\r\n        this.#label(option).textContent = value;\r\n    }\r\n\r\n    getValue(option: HTMLElement): string {\r\n        return option.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(option: HTMLElement, value: string): void {\r\n        option.setAttribute(\"value\", value);\r\n    }\r\n    \r\n    getName(option: HTMLElement): string {\r\n        return option.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(option: HTMLElement, value: string): void {\r\n        option.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getSelected(option: HTMLElement): boolean {\r\n        return JSON.parse(option.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    setSelected(option: HTMLElement, value: boolean): void {\r\n        option.setAttribute(\"aria-selected\", String(value));\r\n    }\r\n\r\n    getDisabled(option: HTMLElement): boolean {\r\n        return option.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(option: HTMLElement, value: boolean): void {\r\n        option.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { optionWidget } from \"./OptionWidget\";\r\n\r\nexport { comboBoxWidget };\r\n\r\ninterface ComboBoxWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        name?: string;\r\n        disabled?: boolean;\r\n        multiselectable?: boolean;\r\n    }): HTMLElement;\r\n    options(combobox: HTMLElement): HTMLElement[];\r\n    getName(combobox: HTMLElement): string;\r\n    setName(combobox: HTMLElement, value: string): void;\r\n    getExpanded(combobox: HTMLElement): boolean;\r\n    setExpanded(combobox: HTMLElement, value: boolean): void;\r\n    setDisabled(combobox: HTMLElement, value: boolean): void;\r\n    getDisabled(combobox: HTMLElement): boolean;\r\n    expand(combobox: HTMLElement): void;\r\n    collapse(combobox: HTMLElement): void;\r\n    toggle(combobox: HTMLElement, force?: boolean): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"combobox\": ComboBoxWidgetFactory\r\n    }\r\n}\r\n\r\nvar comboBoxWidget = new(\r\nWidget({\r\n    name: \"combobox\"\r\n})(\r\nclass ComboBoxWidgetFactoryBase extends WidgetFactory implements ComboBoxWidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #optionsObserver: MutationObserver;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#optionsObserver = new MutationObserver(\r\n            this.#optionsMutationCallback.bind(this)\r\n        );\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"combobox\",\r\n                role: \"combobox\",\r\n                tabindex: 0,\r\n            },\r\n            children: [\r\n                element(\"div\", {\r\n                    attributes: {\r\n                        class: \"content\"\r\n                    },\r\n                    children: [\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"value\"\r\n                            }\r\n                        })\r\n                    ]\r\n                }),\r\n                element(\"div\", {\r\n                    attributes: {\r\n                        class: \"box\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        name?: string;\r\n        disabled?: boolean;\r\n        multiselectable?: boolean;\r\n    }): HTMLElement {\r\n        const combobox = <HTMLElement>this.#template.cloneNode(true);\r\n        this.#optionsObserver.observe(combobox, {\r\n            childList: true,\r\n            subtree: true\r\n        });\r\n        combobox.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        combobox.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        combobox.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        combobox.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.setExpanded(combobox, false);\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, name, disabled, multiselectable} = properties;\r\n            if (id !== undefined) {\r\n                combobox.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                combobox.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                combobox.tabIndex = tabIndex;\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(combobox, name);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(combobox, disabled);\r\n            }\r\n            if (multiselectable !== undefined) {\r\n                this.setMultiSelectable(combobox, multiselectable);\r\n            }\r\n        }\r\n        return combobox;\r\n    }\r\n\r\n    slot(combobox: HTMLElement) {\r\n        return this.#box(combobox);\r\n    }\r\n\r\n    slottedCallback(combobox: HTMLElement, slot: HTMLElement, name: string | null) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement) {\r\n                //gridRowWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n\r\n    #box(combobox: HTMLElement): HTMLElement {\r\n        return combobox.querySelector<HTMLElement>(\":scope > .box\")!;\r\n    }\r\n    \r\n    options(combobox: HTMLElement): HTMLElement[] {\r\n        return Array.from(combobox.querySelectorAll<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option\"\r\n        ));\r\n    }\r\n\r\n    selectedOption(combobox: HTMLElement): HTMLElement | null {\r\n        return combobox.querySelector<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option[aria-selected=true]\"\r\n        );\r\n    }\r\n\r\n    #getActiveOption(combobox: HTMLElement): HTMLElement | null {\r\n        return combobox.querySelector<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option:focus-within\"\r\n        );\r\n    }\r\n\r\n    #value(combobox: HTMLElement): HTMLElement {\r\n        return combobox.querySelector<HTMLElement>(\":scope > .content > .value\")!;\r\n    }\r\n    \r\n    getName(combobox: HTMLElement): string {\r\n        return combobox.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(combobox: HTMLElement, value: string): void {\r\n        combobox.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getDisabled(combobox: HTMLElement): boolean {\r\n        return combobox.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(combobox: HTMLElement, value: boolean): void {\r\n        combobox.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setExpanded(combobox: HTMLElement, value: boolean): void {\r\n        combobox.setAttribute(\"aria-expanded\", String(value));\r\n    }\r\n\r\n    getExpanded(combobox: HTMLElement): boolean {\r\n        return JSON.parse(combobox.getAttribute(\"aria-expanded\") ?? String(false));\r\n    }\r\n\r\n    setMultiSelectable(combobox: HTMLElement, value: boolean): void {\r\n        combobox.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(combobox: HTMLElement): boolean {\r\n        return JSON.parse(combobox.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    expand(combobox: HTMLElement): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        if (!expanded) {\r\n            this.setExpanded(combobox, true);\r\n            this.#positionBox(combobox);\r\n            const selectedOption = this.selectedOption(combobox);\r\n            if (selectedOption) {\r\n                selectedOption.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(combobox: HTMLElement): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        if (expanded) {\r\n            this.setExpanded(combobox, false);\r\n            combobox.focus();\r\n        }\r\n    }\r\n\r\n    toggle(combobox: HTMLElement, force?: boolean): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand(combobox) : this.collapse(combobox);\r\n    }\r\n\r\n    #optionsMutationCallback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            const targetCombobox = (<HTMLElement>target).closest<HTMLElement>(\".combobox\")!;\r\n            if (targetCombobox instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"childList\": {\r\n                        const {addedNodes} = mutation;\r\n                        const selector = \".option[aria-selected=true]\";\r\n                        for (let node of addedNodes) {\r\n                            if (node instanceof HTMLElement) {\r\n                                const selectedOption = node.matches(selector) ? node :\r\n                                    node.querySelector<HTMLElement>(selector);\r\n                                if (selectedOption) {\r\n                                    this.#setSelectedOption(targetCombobox, selectedOption);\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"option\") && !optionWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"optiongroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstOption(combobox: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = this.#box(combobox);\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastOption(combobox: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = this.#box(combobox);\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousOption(option: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextOption(option: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLElement | null>walker.nextNode();\r\n    }\r\n\r\n    #selectOption(combobox: HTMLElement, option: HTMLElement) {\r\n        const selectedOption = this.selectedOption(combobox);\r\n        if (selectedOption) {\r\n            optionWidget.setSelected(selectedOption, false);\r\n        }\r\n        if (option !== selectedOption) {\r\n            optionWidget.setSelected(option, true);\r\n            this.#setSelectedOption(combobox, option);\r\n            combobox.dispatchEvent(new Event(\"change\", {bubbles: true}));\r\n        }\r\n    }\r\n    \r\n    #setSelectedOption(combobox: HTMLElement, option: HTMLElement) {\r\n        this.#value(combobox).textContent = optionWidget.getLabel(option);\r\n    }\r\n\r\n    #positionBox(combobox: HTMLElement): void {\r\n        const box = combobox.querySelector<HTMLElement>(\":scope > .box\")!;\r\n        const {style: optionsStyle} = box;  \r\n        const {bottom, left} = combobox.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        optionsStyle.setProperty(\"top\", `${bottom + scrollY}px`);\r\n        optionsStyle.setProperty(\"left\", `${left + scrollX}px`);\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        this.toggle(targetCombobox);\r\n        const expanded = this.getExpanded(targetCombobox);\r\n        if (expanded) {\r\n            const selectedOption = this.selectedOption(targetCombobox);\r\n            (selectedOption ?? this.options(targetCombobox)[0])?.focus({preventScroll: true});\r\n        }\r\n        else {\r\n            const targetOption = (<HTMLElement>target).closest<HTMLElement>(\".option\");\r\n            if (targetOption) {\r\n                this.#selectOption(targetCombobox, targetOption);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetCombobox.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse(targetCombobox);\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        const expanded = this.getExpanded(targetCombobox);\r\n        const activeOption = this.#getActiveOption(targetCombobox);\r\n        const selectedOption = this.selectedOption(targetCombobox);\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                if (expanded) {\r\n                    const previousOption = activeOption ?\r\n                        this.#previousOption(activeOption) :\r\n                        this.#firstOption(targetCombobox);\r\n                    if (previousOption) {\r\n                        previousOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const previousOption = selectedOption ?\r\n                        this.#previousOption(selectedOption) :\r\n                        this.#firstOption(targetCombobox);\r\n                    if (previousOption) {\r\n                        this.#selectOption(targetCombobox, previousOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (expanded) {\r\n                    const nextOption = activeOption ?\r\n                        this.#nextOption(activeOption) :\r\n                        this.#lastOption(targetCombobox);\r\n                    if (nextOption) {\r\n                        nextOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const nextOption = selectedOption ?\r\n                        this.#nextOption(selectedOption) :\r\n                        this.#lastOption(targetCombobox);\r\n                    if (nextOption) {\r\n                        this.#selectOption(targetCombobox, nextOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstOption = this.#firstOption(targetCombobox);\r\n                if (firstOption) {\r\n                    if (expanded) {\r\n                        firstOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(targetCombobox, firstOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastOption = this.#lastOption(targetCombobox);\r\n                if (lastOption) {\r\n                    if (expanded) {\r\n                        lastOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(targetCombobox, lastOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (expanded) {\r\n                    this.collapse(targetCombobox);\r\n                    if (activeOption) {\r\n                        this.#selectOption(targetCombobox, activeOption);\r\n                    }\r\n                }\r\n                else {\r\n                    this.expand(targetCombobox);\r\n                    selectedOption?.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.collapse(targetCombobox);\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            default: {\r\n                const {length: keyLength} = key;\r\n                if (keyLength == 1) {\r\n                    const keyCode = key.charCodeAt(0);\r\n                    const options = this.options(targetCombobox);\r\n                    const activeIndex = activeOption ? options.indexOf(activeOption) : -1;\r\n                    const matchingOption = options.find(\r\n                        (option_i, i) => optionWidget.getLabel(option_i).toLowerCase().charCodeAt(0) == keyCode && i > activeIndex\r\n                    ) ?? options.find(\r\n                        (option_i) => optionWidget.getLabel(option_i).toLowerCase().charCodeAt(0) == keyCode\r\n                    );\r\n                    if (matchingOption) {\r\n                        matchingOption.focus({preventScroll: true});\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetItem = (<Element>target).closest<HTMLElement>(\".option\");\r\n        if (targetItem) {\r\n            targetItem.focus({preventScroll: true});\r\n        }\r\n    }\r\n}));","//import { MenuItemGroupWidget, MenuItemWidget, MenuWidget, MenuBarWidget } from \"./src/views/MenuBarWidget\";\r\nimport { TreeItemModel, TreeModel, TreeItemList } from \"./src/views/TreeView\";\r\n\r\nimport { ListItemModel, ListModel, ListView } from \"./src/views/ListView\";\r\nimport { GridColumnModel, GridModel, GridRowModel, GridView } from \"./src/views/GridView\";\r\nimport { element, fragment, reactiveElement } from \"./src/elements/Element\";\r\nimport { treeItemWidget } from \"./src/views/widgets/tree/TreeItemWidget\";\r\nimport { widget } from \"./src/views/widgets/Widget\";\r\nimport { Editor } from \"./src/Editor\";\r\nimport { toolbarWidget } from \"./src/views/widgets/toolbar/ToolBarWidget\";\r\nimport { toolbarItemWidget } from \"./src/views/widgets/toolbar/ToolBarItemWidget\";\r\nimport { comboBoxWidget } from \"./src/views/widgets/combobox/ComboBoxWidget\";\r\nimport { optionWidget } from \"./src/views/widgets/combobox/OptionWidget\";\r\nimport { TreeMain } from \"./TreeMain\";\r\n\r\nimport \"./index\";\r\n\r\ndeclare global {\r\n    interface ElementInternals {\r\n        role: string;\r\n    }\r\n}\r\n// const menubar = new MenuBarWidget([\r\n//     new MenuItemWidget({\r\n//         label: \"File\",\r\n//         name: \"file\",\r\n//         type: \"menu\",\r\n//         menu: new MenuWidget({\r\n//             name: \"File\",\r\n//             groups: [\r\n//                 new MenuItemGroupWidget({\r\n//                     name: \"fileActions\",\r\n//                     items: [\r\n//                         new MenuItemWidget({\r\n//                             label: \"Import file...\",\r\n//                             name: \"import\"\r\n//                         }),\r\n//                         new MenuItemWidget({\r\n//                             label: \"Export file...\",\r\n//                             name: \"export\",\r\n//                             hotkey: new HotKey(Key.B, KeyModifier.Control, KeyModifier.Alt)\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         })\r\n//     }),\r\n//     new MenuItemWidget({\r\n//         label: \"Preferences\",\r\n//         name: \"preferences\",\r\n//         type: \"menu\",\r\n//         menu: new MenuWidget({\r\n//             name: \"Preferences\",\r\n//             groups: [\r\n//                 new MenuItemGroupWidget({\r\n//                     name: \"fileActions\",\r\n//                     items: [\r\n//                         new MenuItemWidget({\r\n//                             label: \"Advanced User\",\r\n//                             name: \"advanced\",\r\n//                             type: \"checkbox\",\r\n//                             hotkey: new HotKey(Key.A, KeyModifier.Control, KeyModifier.Alt)\r\n//                         }),\r\n//                         new MenuItemWidget({\r\n//                             label: \"Layout\",\r\n//                             name: \"layout\",\r\n//                             type: \"submenu\",\r\n//                             menu: new MenuWidget({\r\n//                                 name: \"Layout\",\r\n//                                 groups: [\r\n//                                     new MenuItemGroupWidget({\r\n//                                         name: \"Layout\",\r\n//                                         items: [\r\n//                                             new MenuItemWidget({\r\n//                                                 label: \"Standard\",\r\n//                                                 name: \"standard\",\r\n//                                                 type: \"radio\"\r\n//                                             }),\r\n//                                             new MenuItemWidget({\r\n//                                                 label: \"Advanced\",\r\n//                                                 name: \"advanced\",\r\n//                                                 type: \"radio\"\r\n//                                             })\r\n//                                         ]\r\n//                                     })\r\n//                                 ]\r\n//                             })\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         })\r\n//     })\r\n// ]);\r\n\r\n// const treeModel = new TreeModel({\r\n//     itemContextMenuDelegate: (activeItem: TreeItemModel, selectedItems: TreeItemList) => \r\n//         fragment(\r\n//             widget(\"menuitemgroup\", {\r\n//                 slotted: [\r\n//                     widget(\"menuitem\", {\r\n//                         properties: {\r\n//                             label: \"Display\"\r\n//                         },\r\n//                         listeners: {\r\n//                             click: () => {\r\n//                                 selectedItems.display();\r\n//                             }\r\n//                         }\r\n//                     }),\r\n//                     widget(\"menuitem\", {\r\n//                         properties: {\r\n//                             label: \"Delete\"\r\n//                         },\r\n//                         listeners: {\r\n//                             click: () => {\r\n//                                 const {count} = selectedItems;\r\n//                                 const doRemove = confirm(`Remove ${count} items?`);\r\n//                                 if (doRemove) {\r\n//                                     selectedItems.remove();\r\n//                                 }\r\n//                             }\r\n//                         }\r\n//                     })\r\n//                 ]\r\n//             }),\r\n//             widget(\"menuitemgroup\", {\r\n//                 slotted: [\r\n//                     widget(\"menuitem\", {\r\n//                         properties: {\r\n//                             type: \"checkbox\",\r\n//                             label: activeItem.visibility ? \"Hide\" : \"Show\"\r\n//                         },\r\n//                         listeners: {\r\n//                             click: () => {\r\n//                                 activeItem.visibility ?\r\n//                                     selectedItems.hide() :\r\n//                                     selectedItems.show();\r\n//                             }\r\n//                         }\r\n//                     })\r\n//                 ]\r\n//             })\r\n//         ),\r\n//     itemContentDelegate: (item: TreeItemModel) => \r\n//         fragment(\r\n//             ...([\r\n//                 reactiveElement(\r\n//                     item,\r\n//                     element(\"span\", {\r\n//                         attributes: {\r\n//                             class: \"label\"\r\n//                         }\r\n//                     }),\r\n//                     [\"label\"],\r\n//                     (label, property, oldValue, newValue) => {\r\n//                         label.textContent = newValue;\r\n//                     }\r\n//                 )\r\n//             ]).concat(\r\n//                 (item.type == \"parent\") ? [\r\n//                     reactiveElement(\r\n//                         item,\r\n//                         element(\"span\", {\r\n//                             attributes: {\r\n//                                 class: \"badge\"\r\n//                             }\r\n//                         }),\r\n//                         [\"childCount\"],\r\n//                         (badge, property, oldValue, newValue) => {\r\n//                             badge.textContent = `(${newValue})`;\r\n//                         }\r\n//                     )\r\n//                 ] : []\r\n//             ).concat([\r\n//                 reactiveElement(\r\n//                     item,\r\n//                     widget(\"toolbar\", {\r\n//                         slotted: [\r\n//                             widget(\"toolbaritem\", {\r\n//                                 properties: {\r\n//                                     name: \"visibility\",\r\n//                                     type: \"checkbox\",\r\n//                                     label: \"Visibility\"\r\n//                                 },\r\n//                                 listeners: {\r\n//                                     click: () => {\r\n//                                         item.visibility ?\r\n//                                             item.hide() :\r\n//                                             item.show();\r\n//                                     }\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     }),\r\n//                     [\"visibility\"],\r\n//                     (toolbar, property, oldValue, newValue) => {\r\n//                         switch (property) {\r\n//                             case \"visibility\": {\r\n//                                 const visibilityItem = toolbarWidget.slot(toolbar)\r\n//                                     ?.querySelector<HTMLElement>(\".toolbaritem[name=visibility]\");\r\n//                                 if (visibilityItem) {\r\n//                                     const label = newValue ? \"Hide\" : \"Show\";\r\n//                                     toolbarItemWidget.setLabel(visibilityItem, label);\r\n//                                     toolbarItemWidget.setTitle(visibilityItem, label);\r\n//                                     toolbarItemWidget.setPressed(visibilityItem, newValue);\r\n//                                 }\r\n//                             }\r\n//                         }\r\n//                     }\r\n//                 )\r\n//             ])\r\n//         ),\r\n//     items: [\r\n//         new TreeItemModel({\r\n//             label: \"TI 0\",\r\n//             type: \"parent\",\r\n//             items: [\r\n//                 new TreeItemModel({\r\n//                     label: \"TI 1A\",\r\n//                     type: \"parent\",\r\n//                     items: [\r\n//                         new TreeItemModel({\r\n//                             type: \"leaf\",\r\n//                             label: \"TI 1AX\"\r\n//                         }),\r\n//                     ]\r\n//                 }),\r\n//                 new TreeItemModel({\r\n//                     type: \"parent\",\r\n//                     label: \"TI 1B\"\r\n//                 })\r\n//             ]\r\n//         }),\r\n//         new TreeItemModel({\r\n//             label: \"TI 1\",\r\n//             type: \"parent\",\r\n//             items: [\r\n//                 new TreeItemModel({\r\n//                     label: \"TI 1A\",\r\n//                     type: \"parent\",\r\n//                     items: [\r\n//                         new TreeItemModel({\r\n//                             type: \"leaf\",\r\n//                             label: \"TI 1AX\"\r\n//                         }),\r\n//                     ]\r\n//                 }),\r\n//                 new TreeItemModel({\r\n//                     type: \"parent\",\r\n//                     label: \"TI 1B\"\r\n//                 })\r\n//             ]\r\n//         }),\r\n//         new TreeItemModel({\r\n//             type: \"leaf\",\r\n//             label: \"TI 2\"\r\n//         }),\r\n//         new TreeItemModel({\r\n//             type: \"leaf\",\r\n//             label: \"TI 3\"\r\n//         })\r\n//     ],\r\n//     sortFunction: (item_a: TreeItemModel, item_b: TreeItemModel) => {\r\n//         const {label: aLabel} = item_a;\r\n//         const {label: bLabel} = item_b;\r\n//         return bLabel.localeCompare(aLabel);\r\n//     }\r\n// });\r\n// const treeElement = treeView.create(treeModel);\r\n// document.body.append(treeElement);\r\n\r\n// treeModel.childItems.append(\r\n//     new TreeItemModel({\r\n//         label: \"yo\",\r\n//         type: \"parent\",\r\n//         items: [\r\n//             new TreeItemModel({\r\n//                 type: \"leaf\",\r\n//                 label: \"plop\"\r\n//             })\r\n//         ]\r\n//     })\r\n// );\r\n\r\n// const listView = new ListView();\r\n// listView.setModel(\r\n//     new ListModel({\r\n//         items: [\r\n//             new ListItemModel({\r\n//                 label: \"Hey\"\r\n//             }),\r\n//             new ListItemModel({\r\n//                 label: \"Yo\"\r\n//             })\r\n//         ]\r\n//     })\r\n// );\r\n\r\n// //document.body.append(listView);\r\n\r\n// // Menu actions\r\n// // Toolbar actions\r\n// const gridView = new GridView();\r\n// gridView.resizable = true;\r\n// gridView.sortable = true;\r\n// gridView.setColumnDelegate((column) => {\r\n//     return fragment(\r\n//         element(\"label\", {\r\n//             children: column.label\r\n//         }),\r\n//         element(\"e-toolbar\", {\r\n//             children: [\r\n//                 element(\"e-toolbaritem\", {\r\n//                     attributes: {\r\n//                         type: \"button\"\r\n//                     }\r\n//                 })\r\n//             ]\r\n//         })\r\n//     );\r\n// });\r\n// const year = new Date().getFullYear();\r\n// gridView.setModel(\r\n//     new GridModel({\r\n//         columns: [\r\n//             new GridColumnModel({\r\n//                 name: \"name\",\r\n//                 type: String,\r\n//                 label: \"Name\",\r\n//                 extract: (row) => row.name\r\n//             }),\r\n//             new GridColumnModel({\r\n//                 name: \"age\",\r\n//                 type: Number,\r\n//                 label: \"Age\",\r\n//                 extract: (row) => row.age,\r\n//                 filters: [{\r\n//                     name: \"Minors\",\r\n//                     filter: (row) => row.age < 18\r\n//                 },{\r\n//                     name: \"Majors\",\r\n//                     filter: (row) => row.age >= 18\r\n//                 }]\r\n//             }),\r\n//             new GridColumnModel({\r\n//                 name: \"birthyear\",\r\n//                 type: String,\r\n//                 label: \"Brith Year\",\r\n//                 extract: (row) => year - row.age\r\n//             }),\r\n//         ],\r\n//         rows: [\r\n//             new GridRowModel({\r\n//                 id: 1,\r\n//                 name: \"Denis\",\r\n//                 age: 13\r\n//             }),\r\n//             new GridRowModel({\r\n//                 id: 2,\r\n//                 name: \"Jean-Charles\",\r\n//                 age: 32\r\n//             }),\r\n//             new GridRowModel({\r\n//                 id: 3,\r\n//                 name: \"Charles\",\r\n//                 age: 25\r\n//             }),\r\n//             new GridRowModel({\r\n//                 id: 4,\r\n//                 name: \"Mamagubida\",\r\n//                 age: 128\r\n//             })\r\n//         ]\r\n//     })\r\n// );\r\n// document.body.append(gridView);\r\n\r\n// const menuView = widget(\"menubar\", {\r\n//     slotted: [\r\n//         widget(\"menuitem\", {\r\n//             properties: {\r\n//                 label: \"MenuItem 0\",\r\n//                 name: \"MenuItem 0\",\r\n//                 type: \"menu\",\r\n//                 disabled: true\r\n//             },\r\n//             slotted: [\r\n//                 widget(\"menu\", {\r\n//                     slotted: [\r\n//                         widget(\"menuitem\", {\r\n//                             properties: {\r\n//                                 label: \"MenuItem 1\",\r\n//                                 name: \"MenuItem 1\",\r\n//                                 type: \"checkbox\"\r\n//                             }\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         }),\r\n//         widget(\"menuitem\", {\r\n//             properties: {\r\n//                 label: \"MenuItem 0\",\r\n//                 name: \"MenuItem 0\",\r\n//                 type: \"menu\"\r\n//             },\r\n//             slotted: [\r\n//                 widget(\"menu\", {\r\n//                     slotted: [\r\n//                         widget(\"menuitem\", {\r\n//                             properties: {\r\n//                                 label: \"MenuItem 1\",\r\n//                                 name: \"MenuItem 1\",\r\n//                                 type: \"checkbox\"\r\n//                             }\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         }),\r\n//         widget(\"menuitem\", {\r\n//             properties: {\r\n//                 label: \"MenuItem 1\",\r\n//                 name: \"MenuItem 1\",\r\n//                 type: \"menu\"\r\n//             },\r\n//             slotted: [\r\n//                 widget(\"menu\", {\r\n//                     slotted: [\r\n//                         widget(\"menuitemgroup\", {\r\n//                             slotted: [\r\n//                                 widget(\"menuitem\", {\r\n//                                     properties: {\r\n//                                         label: \"MenuItem 1\",\r\n//                                         type: \"checkbox\",\r\n//                                         keyshortcut: \"Ctrl+B\",\r\n//                                         disabled: true,\r\n//                                         checked: true\r\n//                                     }\r\n//                                 }),\r\n//                                 widget(\"menuitem\", {\r\n//                                     properties: {\r\n//                                         type: \"button\",\r\n//                                         label: \"MenuItem 2\",\r\n//                                         keyshortcut: \"Ctrl+A\"\r\n//                                     }\r\n//                                 })\r\n//                             ]\r\n//                         }),\r\n//                         widget(\"separator\"),\r\n//                         widget(\"menuitem\", {\r\n//                             properties: {\r\n//                                 label: \"Submenu\",\r\n//                                 type: \"submenu\"\r\n//                             },\r\n//                             slotted: [\r\n//                                 widget(\"menu\", {\r\n//                                     slotted: [\r\n//                                         widget(\"menuitem\", {\r\n//                                             properties: {\r\n//                                                 label: \"MenuItem 1\",\r\n//                                                 type: \"radio\",\r\n//                                                 name: \"radio\",\r\n//                                                 value: \"1\"\r\n//                                             }\r\n//                                         }),\r\n//                                         widget(\"menuitem\", {\r\n//                                             properties: {\r\n//                                                 type: \"radio\",\r\n//                                                 label: \"MenuItem 2\",\r\n//                                                 name: \"radio\",\r\n//                                                 value: \"2\"\r\n//                                             }\r\n//                                         }),\r\n//                                         widget(\"menuitem\", {\r\n//                                             properties: {\r\n//                                                 type: \"radio\",\r\n//                                                 label: \"MenuItem 3\",\r\n//                                                 name: \"radio\",\r\n//                                                 value: \"3\"\r\n//                                             }\r\n//                                         })\r\n//                                     ]\r\n//                                 })\r\n//                             ]\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         })\r\n//     ]\r\n// })\r\n// document.body.append(menuView);\r\n\r\n// const tree = widget(\"tree\", {\r\n//     slotted: [\r\n//         widget(\"treeitem\", {\r\n//             properties: {\r\n//                 label: \"treeitem 0\",\r\n//                 type: \"parent\",\r\n//                 draggable: true\r\n//                 //disabled: true\r\n//             },\r\n//             slotted: {\r\n//                 group: [\r\n//                     widget(\"treeitemgroup\", {\r\n//                         slotted: [\r\n//                             widget(\"treeitem\", {\r\n//                                 properties: {\r\n//                                     label: \"treeitem 1\",\r\n//                                     type: \"leaf\",\r\n//                                     draggable: true\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     })\r\n//                 ]\r\n//             },\r\n//             listeners: {\r\n//                 contextmenu: <EventListener>((event: MouseEvent) => {\r\n//                     const {target, clientX, clientY} = event;\r\n//                     const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n//                     const menu = widget(\"menu\", {\r\n//                         properties: {\r\n//                             contextual: true\r\n//                         },\r\n//                         slotted: [\r\n//                             widget(\"menuitemgroup\", {\r\n//                                 slotted: [\r\n//                                     widget(\"menuitem\", {\r\n//                                         properties: {\r\n//                                             label: \"Display\"\r\n//                                         },\r\n//                                         listeners: {\r\n//                                             click: () => {\r\n//                                                 console.log(treeItemWidget.getLabel(targetItem));\r\n//                                             }\r\n//                                         }\r\n//                                     }),\r\n//                                     widget(\"menuitem\", {\r\n//                                         properties: {\r\n//                                             label: \"Delete\"\r\n//                                         },\r\n//                                         listeners: {\r\n//                                             click: () => {\r\n//                                                 targetItem.remove();\r\n//                                             }\r\n//                                         }\r\n//                                     })\r\n//                                 ]\r\n//                             }),\r\n//                         ]\r\n//                     });\r\n//                     targetItem.append(menu);\r\n//                     menuWidget.positionContextual(menu, clientX, clientY);\r\n//                     menu.focus({preventScroll: true});\r\n//                     event.preventDefault();\r\n//                 })\r\n//             }\r\n//         }),\r\n//         widget(\"treeitem\", {\r\n//             properties: {\r\n//                 label: \"treeitem 0\",\r\n//                 type: \"parent\",\r\n//                 draggable: true,\r\n//                 disabled: true\r\n//             },\r\n//             slotted: {\r\n//                 group: [\r\n//                     widget(\"treeitemgroup\", {\r\n//                         slotted: [\r\n//                             widget(\"treeitem\", {\r\n//                                 properties: {\r\n//                                     label: \"treeitem 1\",\r\n//                                     type: \"leaf\",\r\n//                                     draggable: true\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     })\r\n//                 ]\r\n//             }\r\n//         }),\r\n//         widget(\"treeitem\", {\r\n//             properties: {\r\n//                 label: \"treeitem 1\",\r\n//                 type: \"leaf\",\r\n//                 draggable: true\r\n//             },\r\n//             slotted: {\r\n//                 content: [\r\n//                     widget(\"toolbar\", {\r\n//                         slotted: [\r\n//                             widget(\"toolbaritem\",  {\r\n//                                 properties: {\r\n//                                     label: \"First item\",\r\n//                                     type: \"button\"\r\n//                                 }\r\n//                             }),\r\n//                             widget(\"toolbaritem\",  {\r\n//                                 properties: {\r\n//                                     label: \"Second item\",\r\n//                                     type: \"checkbox\"\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     })\r\n//                 ]\r\n//             }\r\n//         })\r\n//     ]\r\n// })\r\n// document.body.append(tree);\r\n\r\n// document.body.append(\r\n//     widget(\"toolbar\", {\r\n//         slotted: [\r\n//             widget(\"toolbaritem\",  {\r\n//                 properties: {\r\n//                     label: \"First item\",\r\n//                     type: \"menubutton\"\r\n//                 },\r\n//                 slotted: [\r\n//                     widget(\"menu\", {\r\n//                         slotted: [\r\n//                             widget(\"menuitem\", {\r\n//                                 properties: {\r\n//                                     label: \"MenuItem 1\",\r\n//                                     name: \"MenuItem 1\",\r\n//                                     type: \"checkbox\"\r\n//                                 }\r\n//                             }),\r\n//                             widget(\"menuitem\", {\r\n//                                 properties: {\r\n//                                     label: \"MenuItem 2\",\r\n//                                     name: \"MenuItem 2\",\r\n//                                     type: \"checkbox\"\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     })\r\n//                 ]\r\n//             }),\r\n//             widget(\"toolbaritem\",  {\r\n//                 properties: {\r\n//                     label: \"Second item\",\r\n//                     type: \"checkbox\"\r\n//                 }\r\n//             }),\r\n//             widget(\"toolbaritem\",  {\r\n//                 properties: {\r\n//                     label: \"Third item\",\r\n//                     type: \"checkbox\",\r\n//                     disabled: true,\r\n//                 }\r\n//             }),\r\n//             widget(\"toolbaritem\",  {\r\n//                 properties: {\r\n//                     label: \"Fourth item\",\r\n//                     type: \"checkbox\"\r\n//                 }\r\n//             })\r\n//         ]\r\n//     })\r\n// );\r\n\r\n// document.body.append(\r\n//     widget(\"list\", {\r\n//         slotted: [\r\n//             widget(\"listitemgroup\",  {\r\n//                 slotted: [   \r\n//                     widget(\"listitem\",  {\r\n//                         properties: {\r\n//                             label: \"First item\"\r\n//                         }\r\n//                     })\r\n//                 ]\r\n//             }),\r\n//             widget(\"listitem\",  {\r\n//                 properties: {\r\n//                     label: \"Second item\"\r\n//                 },\r\n//                 slotted: [\r\n//                     widget(\"toolbar\", {\r\n//                         slotted: [\r\n//                             widget(\"toolbaritem\",  {\r\n//                                 properties: {\r\n//                                     label: \"First item\",\r\n//                                     type: \"button\"\r\n//                                 }\r\n//                             }),\r\n//                             widget(\"toolbaritem\",  {\r\n//                                 properties: {\r\n//                                     label: \"Second item\",\r\n//                                     type: \"checkbox\"\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     })\r\n//                 ]\r\n//             }),\r\n//             widget(\"listitem\",  {\r\n//                 properties: {\r\n//                     label: \"Third item\",\r\n//                     disabled: true,\r\n//                 }\r\n//             }),\r\n//             widget(\"listitem\",  {\r\n//                 properties: {\r\n//                     label: \"Fourth item\"\r\n//                 }\r\n//             })\r\n//         ]\r\n//     })\r\n// );\r\n\r\n// document.body.append(\r\n//     widget(\"grid\", {\r\n//         properties: {\r\n//             selectby: \"row\",\r\n//             multisectable: true\r\n//         },\r\n//         slotted: {\r\n//             headers: [\r\n//                 widget(\"gridheader\",  {\r\n//                     slotted: \"First header\"\r\n//                 }),\r\n//                 widget(\"gridheader\",  {\r\n//                     slotted: \"Second header\"\r\n//                 })\r\n//             ],\r\n//             rows: [\r\n//                 widget(\"gridrow\",  {\r\n//                     slotted: [   \r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"First cell\"\r\n//                         }),\r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Second cell\"\r\n//                         })\r\n//                     ]\r\n//                 }),\r\n//                 widget(\"gridrow\",  {\r\n//                     slotted: [   \r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Third cell\"\r\n//                         }),\r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Fourth cell\"\r\n//                         })\r\n//                     ]\r\n//                 }),\r\n//                 widget(\"gridrow\",  {\r\n//                     slotted: [   \r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Fifth cell\"\r\n//                         }),\r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Sixth cell\"\r\n//                         })\r\n//                     ]\r\n//                 }),\r\n//                 widget(\"gridrow\",  {\r\n//                     slotted: [   \r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Heighth cell\"\r\n//                         }),\r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Nineth cell\"\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         }\r\n//     })\r\n// );\r\n\r\n// document.body.append(\r\n//     widget(\"combobox\", {\r\n//         slotted: [\r\n//             widget(\"option\",  {\r\n//                 properties: {\r\n//                     label: \"First option\"\r\n//                 }\r\n//             }),\r\n//             widget(\"option\",  {\r\n//                 properties: {\r\n//                     label: \"Second option\"\r\n//                 }\r\n//             }),\r\n//             widget(\"option\",  {\r\n//                 properties: {\r\n//                     label: \"Third option\",\r\n//                     selected: true\r\n//                 }\r\n//             })\r\n//         ],\r\n//         listeners: {\r\n//             change: (event) => {\r\n//                 const {currentTarget} = event;\r\n//                 const comboBoxTarget = <HTMLElement>currentTarget;\r\n//                 console.log(optionWidget.getLabel(comboBoxWidget.selectedOption(comboBoxTarget)!));\r\n//             }\r\n//         }\r\n//     })\r\n// );\r\n\r\n// const editor = new Editor();\r\n// editor.setup();\r\n\r\n// editor.registerCheckboxAction(\"toggleAdvancedUser\", (_, newValue) => {\r\n//     console.log(`Advanced user is now ${newValue}`);\r\n// }, {hotkey: new HotKey(Key.ARROW_DOWN, KeyModifier.Alt)});\r\n\r\n// editor.registerRadioAction(\"setLayout\", (_, newValue) => {\r\n//     editor.setPair(\"layout\", newValue);\r\n// });\r\n\r\n// editor.registerButtonAction(\"execLayout\", () => {\r\n//     const layout = editor.getPair(\"layout\");\r\n//     console.log(`Layout is ${layout}`);\r\n// }, {hotkey: new HotKey(Key.ARROW_UP, KeyModifier.Alt)});\r\n\r\n\r\n// editor.registerRadioAction(\"selectTest\", (oldValue, newValue) => {\r\n//     console.log(`Test is ${newValue}`);\r\n// }, {value: \"2\", key: \"test\"});\r\n\r\n// document.addEventListener(\"slotchange\", (event) => {\r\n//     console.log(event);\r\n// });\r\n\r\n// setTimeout(() => {\r\n//     const execLayoutToolBarItem = document.querySelector<HTMLEActionElement>(\"e-toolbaritem[name=execLayout]\");\r\n//     if (execLayoutToolBarItem) {\r\n//         editor.addPairListener(\"layout\", (oldValue, newValue) => {\r\n//             if (newValue !== oldValue) {\r\n//                 execLayoutToolBarItem.value = newValue;\r\n//             }\r\n//         });\r\n//     }\r\n// }, 100);\r\n\r\n// const button = element(\"button\", {\r\n//     properties: {\r\n//         textContent: \"Focus\"\r\n//     },\r\n//     listeners: {\r\n//         click: () => {\r\n//             const menuitem = document.querySelector<HTMLEMenuItemElement>(\"e-menuitem#hey\");\r\n//             if (menuitem) {\r\n//                 menuitem.focus();\r\n//             }\r\n//         }\r\n//     }\r\n// });\r\n// document.body.append(button);\r\n// document.body.append(menubar.element);\r\n\r\n// editor.executeCheckboxAction(\"toggleAdvancedUser\", true);\r\n// editor.setCheckboxActionValue(\"toggleAdvancedUser\", false);\r\n\r\n//editor.setRadioActionValue(\"selectTest\", \"2\");\r\n\r\n//editor.executeRadioAction(\"setLayout\", \"other\");\r\nexport async function main() {\r\n    TreeMain();\r\n}","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { optionGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"optiongroup\": OptionGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface OptionGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar optionGroupWidget = new (\r\nWidget({\r\n    name: \"optiongroup\"\r\n})(class OptionGroupWidgetFactoryBase extends WidgetFactory implements OptionGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"optiongroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n}));"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","ModelChangeRecordBase","constructor","init","this","target","changeType","propertyName","oldValue","undefined","newValue","removedIndex","removedItems","ModelNodesList","insertedIndex","insertedItems","sortedIndices","PROPERTY_CHANGE","LIST_REMOVE","LIST_INSERT","LIST_SORT","ModelChangeRecord","items","slice","length","item","index","values","ModelEventBase","type","ModelEventTargetAccessor","setCurrentTarget","event","currentTarget","setTarget","ModelEvent","ModelNodeBase","Map","receiveEvent","callbacks","forEach","callback_i","addEventListener","callback","push","set","removeEventListener","callbackIndex","findIndex","splice","delete","dispatchEvent","super","setParent","parentNode","isCyclicReference","ancestorNode","TypeError","beginChanges","endChanges","getRecords","property","records","record","ModelNodeRecordsAccessor","triggerChange","node","handleRecord","ModelNode","ModelProperty","ModelObjectPropertiesAccessor","getProperty","setProperty","ModelObjectBase","ModelObject","ModelList","item_i","fromIndex","indexOf","sort","compareFunction","indexedItems","map","i","indexedItem_a","indexedItem_b","indexedItem_i","prepend","_items","append","insert","Math","abs","remove","clear","removedItem_i","reference","options","properties","propertiesFilter","childList","subtree","filter","record_i","includes","ModelChangeObserver","WeakMap","observe","references","listener","bind","unobserve","disconnect","camelToTrain","str","replace","toLowerCase","AttributeProperty","String","attributeName","defaultValue","observed","observedAttributes","Reflect","Array","isArray","writable","Boolean","hasAttribute","setAttribute","removeAttribute","val","getAttribute","JSON","parse","stringify","Number","parseFloat","CustomElement","elementCtor","name","customElements","define","QueryProperty","propertyKey","selector","getter","withinShadowRoot","shadowRoot","querySelector","fragment","nodes","document","createDocumentFragment","tagName","attributes","dataset","children","listeners","element","createElement","entries","attributeValue","toggleAttribute","elementDataset","keys","datasetEntry_i","from","name_i","listener_i","reactiveElementsMap","reactiveElementsFinalizationRegistry","FinalizationRegistry","heldValue","model","reactiveElement","reactiveElementsMapEntry","reactiveElementsArray","reactiveElementsPropertyObserver","reactiveElement_i","elementRef","react","deref","WeakRef","register","observerOptions","concat","property_i","Set","reactiveChildElementsMap","reactiveChildElementsFinalizationRegistry","list","reactiveChildElement","reactiveChildrenElementsMapEntry","reactiveChildElementsArray","reactiveChildElementsObserver","range","listLength","reactiveChildElements_i","parentRef","mapping","placeholder","parent","firstChild","childrenCount","removeChild","insertedItemsArray","before","removedCount","createRange","removeEndIndex","setStartBefore","setEndAfter","deleteContents","childrenArray","index_i","reactiveChildElements","reactiveChildElementsMapEntry","areAttributesMatching","referenceAttributeType","referenceAttributeName","referenceAttributeValue","RegExp","test","shadowTemplate","HTMLEMenuItemElementBase","HTMLElement","attachShadow","mode","internals","attachInternals","role","content","cloneNode","attributeChangedCallback","ariaChecked","ariaDisabled","ariaExpanded","ariaLabel","connectedCallback","tabIndex","toggle","force","expanded","expand","Event","bubbles","collapse","menu","style","menuStyle","top","itemTop","bottom","itemBottom","left","itemLeft","right","itemRight","getBoundingClientRect","width","menuWidth","height","menuHeight","scrollY","scrollX","window","clientWidth","clientHeight","body","overflowX","overflowY","closestMenu","closest","closestMenuTop","closestMenuLeft","menuComputedStyle","getComputedStyle","paddingTop","paddingBottom","menuPaddingTop","menuPaddingBottom","checked","part","HTMLEMenuItemElement","EMenuItem","assign","label","trigger","slot","tabindex","title","button","checkbox","radio","submenu","ViewBase","setModel","renderLight","renderShadow","refresh","shadow","replaceChildren","light","View","GridModel","rows","initRows","columns","initColumns","getColumnByName","find","column_i","sortByColumn","column","sortOrder","sortorder","sortTest","row_1","row_2","cell_1","extract","cell_2","localeCompare","sign","GridColumnModel","filters","GridRowModel","id","age","GridViewBase","row","setColumnDelegate","delegate","setCellDelegate","getRowElement","getColumnHeaderElement","getColumnCellsElements","querySelectorAll","rel","href","input","selectby","multisectable","contextmenu","click","setSearchFilter","gridElement","row_i","rowElement","hidden","clearSelection","addDisplayFilter","displayFilters","console","log","removeDisplayFilter","filterIndex","searchFilter","some","filter_i","class","resizable","controls","cell","toString","headers","clientX","clientY","targetHead","targetHeader","contextMenu","contextual","columnHeaderElement","maxWidth","cell_i","reduce","max","removeProperty","targetItem","positionContextual","focus","preventScroll","preventDefault","HTMLInputElement","matches","targetColumn","GridView","TreeModel","sortFunction","childItems","flattenItems","item_a","item_b","flatMap","treeItem_i","of","getItemByUri","uri","itemsCount","uriLength","itemUri","itemUriLength","startsWith","charAt","flattenedInsertedItems","insertedItem_i","flattenedRemovedItems","TreeItemList","removedItemsGroups","TreeItemModel","group","list_i","children_i","child_i","TreeViewBase","itemContentDelegate","textContent","itemContextMenuDelegate","activeItem","selectedItems","itemsList","count","confirm","treeElement","treeItemElement","dragstart","drop","keydown","tree","draggable","dragImageElement","span","targetTree","dataTransfer","selectedElements","selectedCount","selectedUris","element_i","uri_i","_","uris","uri_j","selectedUrisString","join","lastUri","lastItem","dropEffect","setData","dragImage","setDragImage","targetUri","targetItemModel","transferedUris","getData","split","transferedItems","targetType","parentItem","targetParentItem","targetList","sameLabelIndex","item_j","copyWithin","posinset","newElements","beginSelection","selected","endSelection","close","TreeView","slotsMap","slotsObserver","MutationObserver","mutationsList","mutation","slotReferences","slotRef_i","widget","slottedCallback","widgetsMap","attributesObserver","WidgetFactory","create","Proxy","apply","thisArg","argumentsList","observedSlots","slotName_i","slotName","slotElement","slot_i","slotReference","attributeFilter","attributeOldValue","Error","widgets","slotted","NodeList","Node","Widget","toolbarItemWidget","keyshortcut","pressed","disabled","setKeyShortcut","setPressed","setType","setLabel","setName","setValue","setDisabled","hasChildMenu","childNodes","childNode_i","classList","contains","setExpanded","getExpanded","getLabel","getKeyShortcut","getType","types","type_i","oldType","add","getValue","getTitle","setTitle","getName","getPressed","getDisabled","setActive","getActive","relatedTarget","toolbarWidget","createTreeWalker","NodeFilter","SHOW_ELEMENT","toolbar","setOrientation","getOrientation","FILTER_ACCEPT","FILTER_SKIP","FILTER_REJECT","walker","currentNode","lastChild","previousSibling","nextSibling","radio_i","stopPropagation","targetToolbar","previousItem","firstItem","nextItem","MyTreeItemList","show","hide","display","result","MyTreeItemModel","childCount","visibility","Key","KeyModifier","MouseButton","HTMLEActionElementBase","enable","disable","HTMLEGridCellElementBase","HTMLEGridCellElement","HTMLEGridRowGroupElementBase","assignedElements","HTMLEGridRowGroupElement","HTMLEMenuItemGroupElementBase","toggleTimeouts","HTMLEMenuItemGroupElement","radios","HTMLEMenuElementBase","activeIndex","x","y","root","previousNode","nextNode","async","delay","Promise","resolve","reject","timeout","setTimeout","clearTimeout","then","error","nearestItem","composedPath","target_i","HTMLEMenuElement","catch","intersectsWithMouse","containsRelatedTarget","HTMLEGridRowElementBase","cells","HTMLEGridCellCollection","HTMLEGridRowElement","HTMLEGridBodyElement","namedItem","HTMLEGridRowCollection","HTMLEGridBodyElementBase","HTMLEGridElementBase","selectedCells","selectedRows","to","toIndex","min","position","compareDocumentPosition","DOCUMENT_POSITION_FOLLOWING","nextVisibleRow","DOCUMENT_POSITION_PRECEDING","previousVisibleRow","selectedCell_i","selectedRow_i","activeCell","active","activeRow","cellsWalker","rowsWalker","closestRow","closestRowCells","cellIndex","previousRow","previousRowCells","nextRow","nextRowCells","ctrlKey","shiftKey","targetCell","lastSelectedCell","targetRow","lastSelectedRow","firstRow","firstCell","lastRow","lastCell","previousCell","nextCell","topCell","bottomCell","HTMLEGridHeadElementBase","HTMLEMenuBarElementBase","Element","isExpanded","HTMLEMenuButtonElementBase","HTMLEMenuButtonElement","HTMLEToolBarItemElementBase","labelPart","select","selectValue","menubutton","HTMLEToolBarItemElement","EToolBarItem","HTMLEToolBarItemGroupElementBase","HTMLEToolBarItemGroupElement","HTMLEToolBarElementBase","HTMLEToolBarElement","HTMLETabPanelElementBase","HTMLETabPanelElement","HTMLETabElementBase","panel","getElementById","CustomEvent","detail","tab","HTMLETabElement","HTMLETabListElementBase","tabs","focusTabAt","activeTab","activateTab","targetIndex","thisTab","thisTabIndex","HTMLETreeItemGroupElementBase","HTMLETreeItemElement","level","closestItem","parentElement","HTMLETreeItemGroupElement","HTMLETreeItemElementBase","HTMLETreeElementBase","getElementsByTagName","nextVisibleItem","previousVisibleItem","selectedItem_i","dropTargetItem","droptarget","blur","relatedTargetRoot","getRootNode","relatedTargetHost","ShadowRoot","host","HTMLEListItemElementBase","HTMLSpanElement","HTMLEListItemElement","HTMLEListItemGroupElementBase","HTMLEListItemGroupElement","HTMLEListElementBase","lastSelectedItem","HTMLEDraggableElementBase","disconnectedCallback","referee","thisRefIndex","getReference","HTMLEDraggableElement","HTMLEDragzoneElementBase","selectDraggable","selectedDraggables","unselectDraggable","draggables","elem","thisSelectedDraggable","dragged","thisDraggedDraggable","firstIndex","direction","startRangeIndex","endRangeIndex","thisDraggable","HTMLEDragzoneElement","HTMLEDropzoneElementBase","droptest","appendAreaPart","removeDraggables","dragovered","dropIndex","dragzoneId","dragzone","selectedDraggable","HTMLEDropzoneElement","addDraggables","placeholderPart","dataTransferSuccess","newDraggables","insertionPosition","multiple","newDraggable","insertAdjacentElement","appendChild","replaceChild","action","once","predicate","toRemove","atPosition","HTMLEDialogElementBase","handleEvent","cancel","open","HTMLEOptionElementBase","HTMLEOptionElement","HTMLEOptionGroupElementBase","HTMLEOptionGroupElement","HTMLESelectElementBase","selectedOption","option","box","optionsStyle","targetOption","activeOption","previousOption","nextOption","firstOption","lastOption","keyLength","keyCode","charCodeAt","matchingOption","option_i","HTMLEHandleElementBase","pointerId","releasePointerCapture","setPointerCapture","targetComputedStyle","movementX","movementY","rectWidth","rectHeight","outerElement","outerRectLeft","outerRectRight","outerRectTop","outerRectBottom","getPropertyValue","newLeft","trunc","newTop","HTMLEHeightSashElementBase","rootNode","requestAnimationFrame","growdir","newHeight","computedNewHeight","HTMLEImportElementBase","src","outerHTML","fetch","response","ok","text","statusText","barShadowTemplate","circleShadowTemplate","HTMLELoaderElementBase","promise","finally","commonStyle","barStyle","circleStyle","HTMLEWidthSashElementBase","setWidth","newWidth","menuItemWidget","hasIcon","hasArrow","setChecked","getMenu","keyshortcutsPart","after","typesFeatures","iconPartTemplate","arrowPartTemplate","iconPart","arrowPart","getChecked","menubar","setContextual","setPosition","getContextual","menuitem_i","targetMenu","treeItemWidget","setDraggable","setSelected","setPosInSet","getPosInSet","posInSet","e","setDropTarget","getDropTarget","getDraggable","getSelected","setLevel","getLevel","parseInt","setMultiSelectable","getMultiSelectable","listItemWidget","targets","pointerMovements","onCaptureFlags","queuedPointerCallbacks","sash","growDir","setControls","setGrowDir","getGrowDir","getControls","sashTarget","pointerMoveCallback","pointerMovement","setHeight","gridCellWidget","setHeaders","getHeaders","gridRowWidget","grid","setSelectBy","getSelectBy","targetGrid","multiselectable","head","scope","header","optionWidget","combobox","targetCombobox","addedNodes","main","gridView","Date","getFullYear","treeModel","aLabel","bLabel","treeView","badge","visibilityItem","menuView","TreeMain"],"sourceRoot":""}