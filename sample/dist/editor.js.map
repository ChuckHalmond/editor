{"version":3,"file":"editor.js","mappings":"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","sources":["webpack://editor/webpack/bootstrap","webpack://editor/webpack/runtime/define property getters","webpack://editor/webpack/runtime/hasOwnProperty shorthand","webpack://editor/webpack/runtime/make namespace object","webpack://editor/./src/Input.ts","webpack://editor/./src/models/Model.ts","webpack://editor/./src/elements/Snippets.ts","webpack://editor/./src/elements/Element.ts","webpack://editor/./src/elements/containers/grid/GridCell.ts","webpack://editor/./src/elements/containers/grid/GridRowGroup.ts","webpack://editor/./src/elements/containers/menus/MenuItem.ts","webpack://editor/./src/elements/containers/menus/MenuItemGroup.ts","webpack://editor/./src/elements/containers/menus/Menu.ts","webpack://editor/./src/elements/containers/grid/GridRow.ts","webpack://editor/./src/elements/containers/grid/GridCellCollection.ts","webpack://editor/./src/elements/containers/grid/GridRowCollection.ts","webpack://editor/./src/elements/containers/grid/GridBody.ts","webpack://editor/./src/elements/containers/grid/Grid.ts","webpack://editor/./src/elements/containers/grid/GridHead.ts","webpack://editor/./src/elements/containers/menus/MenuBar.ts","webpack://editor/./src/elements/containers/menus/MenuButton.ts","webpack://editor/./src/elements/containers/toolbars/ToolBarItem.ts","webpack://editor/./src/elements/containers/toolbars/ToolBarItemGroup.ts","webpack://editor/./src/elements/containers/toolbars/ToolBar.ts","webpack://editor/./src/elements/containers/tabs/Tab.ts","webpack://editor/./src/elements/containers/tabs/TabList.ts","webpack://editor/./src/elements/containers/tabs/TabPanel.ts","webpack://editor/./src/elements/containers/trees/TreeItem.ts","webpack://editor/./src/elements/containers/trees/TreeItemGroup.ts","webpack://editor/./src/elements/containers/trees/Tree.ts","webpack://editor/./src/elements/containers/lists/ListItem.ts","webpack://editor/./src/elements/containers/lists/ListItemGroup.ts","webpack://editor/./src/elements/containers/lists/List.ts","webpack://editor/./src/elements/controls/draggable/Draggable.ts","webpack://editor/./src/elements/controls/draggable/Dragzone.ts","webpack://editor/./src/elements/controls/draggable/Dropzone.ts","webpack://editor/./src/elements/controls/dialogs/Dialog.ts","webpack://editor/./src/elements/controls/forms/Option.ts","webpack://editor/./src/elements/controls/forms/OptionGroup.ts","webpack://editor/./src/elements/controls/forms/Select.ts","webpack://editor/./src/elements/misc/Separator.ts","webpack://editor/./src/elements/misc/ToolTip.ts","webpack://editor/./src/elements/misc/Handle.ts","webpack://editor/./src/elements/misc/HeightSash.ts","webpack://editor/./src/elements/misc/Import.ts","webpack://editor/./src/elements/misc/Loader.ts","webpack://editor/./src/elements/misc/WidthSash.ts","webpack://editor/./src/observers/AttributeMixinsObserver.ts","webpack://editor/./src/views/widgets/Widget.ts","webpack://editor/./src/views/widgets/SeparatorWidget.ts","webpack://editor/./src/views/widgets/menu/MenuItemWidget.ts","webpack://editor/./src/views/widgets/menu/MenuBarWidget.ts","webpack://editor/./src/views/widgets/menu/MenuWidget.ts","webpack://editor/./src/views/widgets/menu/MenuItemGroupWidget.ts","webpack://editor/./src/views/widgets/tree/TreeItemWidget.ts","webpack://editor/./src/views/widgets/tree/TreeWidget.ts","webpack://editor/./src/views/widgets/tree/TreeItemGroupWidget.ts","webpack://editor/./src/views/widgets/list/ListItemWidget.ts","webpack://editor/./src/views/widgets/list/ListWidget.ts","webpack://editor/./src/views/widgets/list/ListItemGroupWidget.ts","webpack://editor/./src/views/widgets/toolbar/ToolBarItemWidget.ts","webpack://editor/./src/views/widgets/toolbar/ToolBarWidget.ts","webpack://editor/./src/views/widgets/toolbar/ToolBarItemGroupWidget.ts","webpack://editor/./src/views/widgets/WidthSashWidget.ts","webpack://editor/./src/views/widgets/HeightSashWidget.ts","webpack://editor/./src/views/widgets/grid/GridCellWidget.ts","webpack://editor/./src/views/widgets/grid/GridRowWidget.ts","webpack://editor/./src/views/widgets/grid/GridWidget.ts","webpack://editor/./src/views/widgets/grid/GridBodyWidget.ts","webpack://editor/./src/views/widgets/grid/GridHeadWidget.ts","webpack://editor/./src/views/widgets/grid/GridHeaderWidget.ts","webpack://editor/./src/views/widgets/combobox/OptionWidget.ts","webpack://editor/./src/views/widgets/combobox/ComboBoxWidget.ts","webpack://editor/./src/views/widgets/combobox/OptionGroupWidget.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export { Key };\r\nexport { KeyModifier };\r\nexport { HotKey };\r\nexport { MouseButton };\r\n\r\nenum Key {\r\n    A = \"a\",\r\n    B = \"b\",\r\n    C = \"c\",\r\n    D = \"d\",\r\n    E = \"e\",\r\n    F = \"f\",\r\n    G = \"g\",\r\n    H = \"h\",\r\n    I = \"i\",\r\n    J = \"j\",\r\n    K = \"k\",\r\n    L = \"l\",\r\n    M = \"m\",\r\n    O = \"o\",\r\n    P = \"p\",\r\n    Q = \"q\",\r\n    R = \"r\",\r\n    S = \"s\",\r\n    T = \"t\",\r\n    U = \"u\",\r\n    V = \"v\",\r\n    W = \"w\",\r\n    X = \"x\",\r\n    Y = \"y\",\r\n    Z = \"z\",\r\n    ENTER = \"Enter\",\r\n    BACKSPACE = \"Backspace\",\r\n    ARROW_DOWN = \"ArrowDown\",\r\n    ARROW_LEFT = \"ArrowLeft\",\r\n    ARROW_RIGHT = \"ArrowRight\",\r\n    ARROW_UP = \"ArrowUp\",\r\n    SHIFT = \"Shift\"\r\n}\r\n\r\nenum KeyModifier {\r\n    Alt = \"Alt\",\r\n    Control = \"Control\",\r\n    Shift = \"Shift\"\r\n}\r\n\r\nenum MouseButton {\r\n    LEFT = 1,\r\n    WHEEL = 2,\r\n    RIGHT = 3,\r\n    FORWARD = 4,\r\n    BACK = 5\r\n}\r\n\r\nclass HotKey {\r\n    readonly key: Key;\r\n    readonly mod1?: KeyModifier;\r\n    readonly mod2?: KeyModifier;\r\n\r\n    constructor(key: Key, mod1?: KeyModifier, mod2?: KeyModifier) {\r\n        this.key = key;\r\n        this.mod1 = mod1;\r\n        this.mod2 = mod2;\r\n    }\r\n\r\n    toString(): string {\r\n        return `${this.mod1 ? `${this.#modifierString(this.mod1)}+` : \"\"}${this.mod2 ? `${this.#modifierString(this.mod2)}+` : \"\"}${(this.key.length == 1) ? this.key.toUpperCase() : this.key}`;\r\n    }\r\n\r\n    test(event: KeyboardEvent): boolean {\r\n        return (!this.mod1 || this.#testModifier(this.mod1, event)) && (!this.mod2 || this.#testModifier(this.mod2, event)) && event.key == this.key;\r\n    }\r\n\r\n    #modifierString(mod: KeyModifier): string {\r\n        switch (mod) {\r\n            case KeyModifier.Control:\r\n                return \"Ctrl\";\r\n            default:\r\n                return mod;\r\n        }\r\n    }\r\n\r\n    #testModifier(mod: KeyModifier, event: KeyboardEvent): boolean {\r\n        switch (mod) {\r\n            case \"Alt\":\r\n                return event.altKey;\r\n            case \"Control\":\r\n                return event.ctrlKey;\r\n            case \"Shift\":\r\n                return event.shiftKey;\r\n            default:\r\n                return true;\r\n        }\r\n    }\r\n}","export { ModelChangeRecord };\r\nexport { ModelEvent };\r\nexport { ModelNode };\r\nexport { ModelObject };\r\nexport { ModelProperty };\r\nexport { ModelList };\r\nexport { ModelChangeObserverOptions };\r\nexport { ModelChangeObserver };\r\n\r\ninterface ModelChangeRecordConstructor {\r\n    prototype: ModelChangeRecord;\r\n    new(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ): ModelChangeRecord;\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\ninterface ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly changeType: number;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\nclass ModelChangeRecordBase implements ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList;\r\n    readonly changeType: number;\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n\r\n    constructor(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ) {\r\n        this.target = init.target;\r\n        this.changeType = init.changeType;\r\n        this.propertyName = init.propertyName ?? null;\r\n        this.oldValue = init.oldValue ?? undefined;\r\n        this.newValue = init.newValue ?? undefined;\r\n        this.removedIndex = init.removedIndex ?? 0;\r\n        this.removedItems = new ModelNodesList(init.removedItems ?? []);\r\n        this.insertedIndex = init.insertedIndex ?? 0;\r\n        this.insertedItems = new ModelNodesList(init.insertedItems ?? []);\r\n        this.sortedIndices = init.sortedIndices ?? [];\r\n    }\r\n\r\n    static get PROPERTY_CHANGE(): number {\r\n        return 1;\r\n    }\r\n\r\n    static get LIST_REMOVE(): number {\r\n        return 2;\r\n    }\r\n\r\n    static get LIST_INSERT(): number {\r\n        return 3;\r\n    }\r\n\r\n    static get LIST_SORT(): number {\r\n        return 4;\r\n    }\r\n\r\n    get PROPERTY_CHANGE(): number {\r\n        return ModelChangeRecordBase.PROPERTY_CHANGE;\r\n    }\r\n\r\n    get LIST_REMOVE(): number {\r\n        return ModelChangeRecordBase.LIST_REMOVE;\r\n    }\r\n\r\n    get LIST_INSERT(): number {\r\n        return ModelChangeRecordBase.LIST_INSERT;\r\n    }\r\n\r\n    get LIST_SORT(): number {\r\n        return ModelChangeRecordBase.LIST_SORT;\r\n    }\r\n}\r\n\r\nvar ModelChangeRecord: ModelChangeRecordConstructor = ModelChangeRecordBase;\r\n\r\ninterface ModelNodesListConstructor {\r\n    prototype: ModelNodesList;\r\n    new(items: any[]): ModelNodesList;\r\n}\r\n\r\ninterface ModelNodesList {\r\n    get length(): number;\r\n    item(index: number): ModelNode | null;\r\n    values(): IterableIterator<ModelNode>;\r\n}\r\n\r\nclass ModelNodesListBase implements ModelNodesList {\r\n    #items: ModelNode[];\r\n\r\n    constructor(items: ModelNode[]) {\r\n        this.#items = items.slice();\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    item(index: number): ModelNode | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    values(): IterableIterator<ModelNode> {\r\n        return this.#items.values();\r\n    }\r\n}\r\n\r\nvar ModelNodesList: ModelNodesListConstructor = ModelNodesListBase;\r\n\r\ninterface ModelEventConstructor {\r\n    prototype: ModelEvent;\r\n    new(type: string): ModelEvent;\r\n}\r\n\r\ninterface ModelEvent {\r\n    readonly type: string;\r\n    readonly currentTarget: ModelEventTarget | null;\r\n    readonly target: ModelEventTarget | null;\r\n}\r\n\r\nclass ModelEventBase implements ModelEvent {\r\n    readonly type: string;\r\n\r\n    #currentTarget: ModelEventTarget | null;\r\n    #target: ModelEventTarget | null;\r\n\r\n    constructor(type: string) {\r\n        this.type = type;\r\n        this.#currentTarget = null;\r\n        this.#target = null;\r\n    }\r\n\r\n    get currentTarget(): ModelEventTarget | null {\r\n        return this.#currentTarget;\r\n    }\r\n\r\n    get target(): ModelEventTarget | null {\r\n        return this.#target;\r\n    }\r\n\r\n    static ModelEventTargetAccessor? = new class ModelEventTargetAccessor {\r\n        setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#currentTarget = currentTarget;\r\n            }\r\n        }\r\n\r\n        setTarget(event: ModelEvent, target: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#target = target;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface ModelEventTargetAccessor {\r\n    setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void;\r\n    setTarget(event: ModelEvent, target: ModelEventTarget): void;\r\n}\r\n\r\nvar ModelEventTargetAccessor: ModelEventTargetAccessor = ModelEventBase.ModelEventTargetAccessor!;\r\ndelete ModelEventBase.ModelEventTargetAccessor;\r\n\r\nvar ModelEvent: ModelEventConstructor = ModelEventBase;\r\n\r\ninterface ModelEventTargetConstructor {\r\n    prototype: ModelEventTarget;\r\n    new(): ModelEventTarget;\r\n}\r\n\r\ninterface ModelEventTarget {\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    dispatchEvent(event: ModelEvent): void;\r\n    receiveEvent(event: ModelEvent): void;\r\n}\r\n\r\nclass ModelEventTargetBase implements ModelEventTarget {\r\n    #callbacks: Map<string, ((event: ModelEvent) => void)[]>;\r\n\r\n    constructor() {\r\n        this.#callbacks = new Map();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        const {type} = event;\r\n        const callbacks = this.#callbacks.get(type);\r\n        ModelEventTargetAccessor.setCurrentTarget(event, this);\r\n        if (callbacks) {\r\n            callbacks.forEach((callback_i) => {\r\n                callback_i(event);\r\n            });\r\n        }\r\n    }\r\n\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            callbacks.push(callback);\r\n        }\r\n        else {\r\n            this.#callbacks.set(type, [callback]);\r\n        }\r\n    }\r\n\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            const callbackIndex = callbacks.findIndex(\r\n                callback_i => callback_i == callback\r\n            );\r\n            if (callbackIndex > -1) {\r\n                callbacks.splice(callbackIndex, 1);\r\n            }\r\n            if (callbacks.length == 0) {\r\n                this.#callbacks.delete(type);\r\n            }\r\n        }\r\n    }\r\n\r\n    dispatchEvent(event: ModelEvent): void {\r\n        ModelEventTargetAccessor.setTarget(event, this);\r\n        this.receiveEvent(event);\r\n    }\r\n}\r\n\r\nvar ModelEventTarget: ModelEventTargetConstructor = ModelEventTargetBase;\r\n\r\ninterface ModelNodeConstructor {\r\n    prototype: ModelNode;\r\n    new(): ModelNode;\r\n}\r\n\r\ninterface ModelNode extends ModelEventTarget {\r\n    readonly parentNode: ModelNode | null;\r\n    setParent(parentNode: ModelNode | null): void;\r\n    getRecords(): ModelChangeRecord[];\r\n    beginChanges(): void;\r\n    endChanges(): void;\r\n}\r\n\r\ninterface ModelNodeRecordsAccessor {\r\n    triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void;\r\n    handleRecord(node: ModelNode, record: ModelChangeRecord): void;\r\n}\r\n\r\nclass ModelNodeBase extends ModelEventTargetBase implements ModelNode {\r\n    #parentNode: ModelNode | null;\r\n    #records: ModelChangeRecord[];\r\n    #isRecording: boolean;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#parentNode = null;\r\n        this.#records = [];\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    get parentNode(): ModelNode | null {\r\n        return this.#parentNode;\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        if (parentNode !== null) {\r\n            let isCyclicReference = parentNode == this;\r\n            let {parentNode: ancestorNode} = parentNode;\r\n            while (!isCyclicReference && ancestorNode !== null) {\r\n                ({parentNode: ancestorNode} = ancestorNode);\r\n                isCyclicReference = ancestorNode == this;\r\n            }\r\n            if (!isCyclicReference) {\r\n                this.#parentNode = parentNode;\r\n            }\r\n            else {\r\n                throw new TypeError(\"Failed to set parent on ModelNode: circular reference detected in the hierarchy.\");\r\n            }\r\n        }\r\n        else {\r\n            this.#parentNode = null;\r\n        }\r\n    }\r\n    \r\n    beginChanges(): void {\r\n        this.#isRecording = true;\r\n    }\r\n\r\n    endChanges(): void {\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        this.#records.splice(0);\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    getRecords(): ModelChangeRecord[] {\r\n        return this.#records.slice();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        super.receiveEvent(event);\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            parentNode.receiveEvent(event);\r\n        }\r\n    }\r\n\r\n    #triggerChange(property: string, oldValue: any, newValue: any): void {\r\n        const records = this.#records;\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.PROPERTY_CHANGE,\r\n            propertyName: property,\r\n            oldValue, newValue\r\n        });\r\n        records.push(record);\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        records.splice(0);\r\n    }\r\n\r\n    #handleRecord(record: ModelChangeRecord): void {\r\n        this.#records.push(record);\r\n        if (!this.#isRecording) {\r\n            this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n            this.#records.splice(0);\r\n        }\r\n    }\r\n\r\n    static ModelNodeRecordsAccessor? = new class ModelNodeRecordsAccessor {\r\n        triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#triggerChange(property, oldValue, newValue);\r\n            }\r\n        }\r\n\r\n        handleRecord(node: ModelNode, record: ModelChangeRecord): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#handleRecord(record);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelNodeRecordsAccessor: ModelNodeRecordsAccessor = ModelNodeBase.ModelNodeRecordsAccessor!;\r\ndelete ModelNodeBase.ModelNodeRecordsAccessor;\r\n\r\nvar ModelNode: ModelNodeConstructor = ModelNodeBase;\r\n\r\ninterface ModelPropertyDecorator {\r\n    (\r\n        init?: {\r\n            type: typeof String | typeof Number | typeof Boolean | typeof Date | typeof Object\r\n        }\r\n    ): <Model extends ModelObject>(target: Model, property: string) => void;\r\n}\r\n\r\nconst ModelProperty: ModelPropertyDecorator = function(\r\n    init?: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Date | typeof Object\r\n    }\r\n) {\r\n    return (\r\n        target: ModelObject, property: string\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        /*const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n        if (Array.isArray(observedAttributes)) {\r\n            observedAttributes.push(property);\r\n        }\r\n        else {\r\n            Object.defineProperty(\r\n                constructor, \"observedAttributes\", {\r\n                    value: [property],\r\n                    writable: false\r\n                }\r\n            );\r\n        }*/\r\n        const setter = function(this: ModelObject, value: any) {\r\n            const oldValue = ModelObjectPropertiesAccessor.getProperty(this, property);\r\n            ModelObjectPropertiesAccessor.setProperty(this, property, value);\r\n            if (value !== oldValue) {\r\n                ModelNodeRecordsAccessor.triggerChange(this, property, oldValue, value);\r\n            }\r\n            return true;\r\n        };\r\n        const getter = function(this: ModelObject) {\r\n            return ModelObjectPropertiesAccessor.getProperty(this, property);\r\n        };\r\n        Object.defineProperty(prototype, property, {\r\n            set: setter,\r\n            get: getter,\r\n            enumerable: true\r\n        });\r\n    }\r\n}\r\n\r\ninterface ModelObjectConstructor {\r\n    prototype: ModelObject;\r\n    new(): ModelObject;\r\n}\r\n\r\ninterface ModelObject extends ModelNode {}\r\n\r\ninterface ModelObjectPropertiesAccessor {\r\n    setProperty(node: ModelNode, property: string, value: any): void;\r\n    getProperty(node: ModelNode, property: string,): any;\r\n}\r\n\r\nclass ModelObjectBase extends ModelNodeBase implements ModelObject {\r\n    #properties: Map<string, any>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#properties = new Map();\r\n    }\r\n\r\n    static ModelObjectPropertiesAccessor? = new class ModelPropertiesAccessor {\r\n        setProperty(node: ModelObject, property: string, value: any): void {\r\n            if (node instanceof ModelObjectBase) {\r\n                node.#properties.set(property, value);\r\n            }\r\n        }\r\n\r\n        getProperty(node: ModelObject, property: string): any {\r\n            if (node instanceof ModelObjectBase) {\r\n                return node.#properties.get(property);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelObjectPropertiesAccessor: ModelObjectPropertiesAccessor = ModelObjectBase.ModelObjectPropertiesAccessor!;\r\ndelete ModelObjectBase.ModelObjectPropertiesAccessor;\r\n\r\nvar ModelObject: ModelObjectConstructor = ModelObjectBase;\r\n\r\ninterface ModelListConstructor {\r\n    prototype: ModelList;\r\n    new<Model extends ModelNode>(): ModelList<Model>;\r\n    new<Model extends ModelNode>(items: Model[]): ModelList<Model>;\r\n}\r\n\r\ninterface ModelList<Model extends ModelNode = ModelNode> extends ModelNode {\r\n    readonly parentNode: ModelNode | null;\r\n    readonly length: number;\r\n    index(item: Model): number;\r\n    get(index: number): Model | null;\r\n    values(): IterableIterator<Model>;\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void;\r\n    insert(index: number, ...items: Model[]): void;\r\n    prepend(...items: Model[]): void;\r\n    append(...items: Model[]): void;\r\n    remove(item: Model): void;\r\n    clear(): void;\r\n}\r\n\r\nclass ModelListBase<Model extends ModelNode = ModelNode> extends ModelNodeBase implements ModelList<Model> {\r\n    #items: Model[];\r\n\r\n    constructor()\r\n    constructor(items: Model[])\r\n    constructor(items?: Model[]) {\r\n        super();\r\n        this.#items = items?.slice() ?? [];\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        super.setParent(parentNode);\r\n        this.#items.forEach((item_i) => {\r\n            item_i.setParent(parentNode);\r\n        });\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    get(index: number): Model | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    index(item: Model): number {\r\n        return this.#items.indexOf(item);\r\n    }\r\n\r\n    values(): IterableIterator<Model> {\r\n        return this.#items.values();\r\n    }\r\n\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void {\r\n        const items = this.#items;\r\n        const indexedItems = items.map(\r\n            (item_i, i) => {\r\n                return {\r\n                    item: item_i,\r\n                    index: i\r\n                };\r\n            }\r\n        );\r\n        indexedItems.sort(\r\n            (indexedItem_a, indexedItem_b) => {\r\n                return compareFunction(\r\n                    indexedItem_a.item, indexedItem_b.item\r\n                )\r\n            }\r\n        );\r\n        this.#items = indexedItems.map(indexedItem_i => indexedItem_i.item);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_SORT,\r\n            sortedIndices: indexedItems.map(indexedItem_i => indexedItem_i.index)\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    prepend(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.splice(0, 0, ...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: 0,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    append(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.push(...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: length,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    insert(index: number, ...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const positiveIndex = Math.abs(index);\r\n        if (positiveIndex <= length) {\r\n            if (index >= 0) {\r\n                const {parentNode} = this;\r\n                items.forEach(item_i => {\r\n                    item_i.setParent(parentNode);\r\n                });\r\n                if (index < length) {\r\n                    _items.splice(index, 0, ...items);\r\n                }\r\n                else {\r\n                    _items.push(...items);\r\n                }\r\n            }\r\n            else if (index < 0) {\r\n                index = length - index;\r\n                const {parentNode} = this;\r\n                if (parentNode) {\r\n                    items.forEach(item_i => {\r\n                        item_i.setParent(parentNode);\r\n                    });\r\n                }\r\n                _items.splice(index, 0, ...items);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_INSERT,\r\n                insertedIndex: index,\r\n                insertedItems: items.slice()\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    remove(item: Model): void {\r\n        const _items = this.#items;\r\n        const index = _items.indexOf(item);\r\n        if (index > -1) {\r\n            const item = _items.splice(index, 1)[0];\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                item.setParent(null);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: index,\r\n                removedItems: [item]\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    clear(): void {\r\n        const items = this.#items;\r\n        const {length} = items;\r\n        if (length > 0) {\r\n            const removedItems = items.splice(0);\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                removedItems.forEach((removedItem_i) => {\r\n                    removedItem_i.setParent(null);\r\n                });\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: 0,\r\n                removedItems: removedItems\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n};\r\n\r\nvar ModelList: ModelListConstructor = ModelListBase!;\r\n\r\ninterface ModelChangeObserverConstructor {\r\n    prototype: ModelChangeObserver;\r\n    new(callback: (records: ModelChangeRecord[]) => void): ModelChangeObserver;\r\n}\r\n\r\ninterface ModelChangeObserver {\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void;\r\n    unobserve(node: ModelNode): void;\r\n    disconnect(): void;\r\n}\r\n\r\ntype ModelChangeObserverOptions = {\r\n    properties?: boolean;\r\n    propertiesFilter?: string[];\r\n    childList?: boolean;\r\n    subtree?: boolean;\r\n}\r\n\r\nclass ModelChangeObserverBase implements ModelChangeObserver {\r\n    #callback: (records: ModelChangeRecord[]) => void;\r\n    #records: ModelChangeRecord[];\r\n    #disconnected: boolean;\r\n\r\n    #references: WeakMap<ModelNode, {\r\n        listener: (event: ModelEvent) => void,\r\n        options: ModelChangeObserverOptions\r\n    }>;\r\n\r\n    constructor(callback: (records: ModelChangeRecord[]) => void) {\r\n        this.#callback = callback;\r\n        this.#records = [];\r\n        this.#disconnected = false;\r\n        this.#references = new WeakMap();\r\n    }\r\n\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void {\r\n        this.#disconnected = false;\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (!reference) {\r\n            const listener = this.#handleModelEvent.bind(this);\r\n            node.addEventListener(\"modelchange\", listener);\r\n            reference = {listener, options};\r\n            references.set(node, reference);\r\n        }\r\n        else {\r\n            references.set(node, reference);\r\n        }\r\n    }\r\n\r\n    unobserve(node: ModelNode): void {\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (reference) {\r\n            const {listener} = reference;\r\n            node.removeEventListener(\"modelchange\", listener);\r\n        }\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#records.splice(0);\r\n        this.#disconnected = true;\r\n    }\r\n\r\n    #trigger(): void {\r\n        const records = this.#records.splice(0);\r\n        if (records.length > 0) {\r\n            this.#callback(records);\r\n        }\r\n    }\r\n\r\n    #handleModelEvent(event: ModelEvent): void {\r\n        if (!this.#disconnected) {\r\n            const {target, currentTarget} = event;\r\n            const reference = this.#references.get(<ModelNode>currentTarget);\r\n            if (reference) {\r\n                const {options} = reference;\r\n                const {properties, propertiesFilter, childList, subtree} = options;\r\n                if (subtree) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n                else if (target == currentTarget) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelChangeObserver: ModelChangeObserverConstructor = ModelChangeObserverBase;","\r\nexport { snakeToCamel };\r\nexport { camelToSnake };\r\nexport { trainToCamel };\r\nexport { camelToTrain };\r\n\r\nfunction snakeToCamel(str: string) {\r\n  return str.split('_').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToSnake(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '_').toLowerCase();\r\n}\r\n\r\nfunction trainToCamel(str: string) {\r\n  return str.split('-').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToTrain(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '-').toLowerCase();\r\n}","import { ModelList, ModelNode, ModelChangeRecord, ModelChangeObserver, ModelChangeObserverOptions } from \"../models/Model\";\r\nimport { camelToTrain } from \"./Snippets\";\r\n/*\r\nexport { subtreeNodes };\r\nexport { ancestorNodes };*/\r\nexport { CustomElement };\r\nexport { ReactiveChildElements };\r\nexport { QueryProperty };\r\nexport { QueryAllProperty };\r\nexport { AttributeProperty };\r\nexport { reactiveElement };\r\nexport { reactiveChildElements };\r\nexport { element };\r\nexport { fragment };\r\nexport { textNode };\r\nexport { AttributeMutationMixin };\r\nexport { AttributeType };\r\nexport { areAttributesMatching };\r\nexport { AttributeMutationMixinBase };\r\nexport { trimMultilineIndent };\r\nexport { Stylesheet };\r\n\r\ninterface AttributePropertyDecorator {\r\n    (\r\n        init: {\r\n            type: typeof String;\r\n            observed?: boolean;\r\n            defaultValue?: string | null;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Number;\r\n            observed?: boolean;\r\n            defaultValue?: number | null;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Boolean;\r\n            observed?: boolean;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Object;\r\n            observed?: boolean;\r\n            defaultValue?: any | null;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n}\r\n\r\nconst AttributeProperty: AttributePropertyDecorator = function(\r\n    init: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Object;\r\n        observed?: boolean;\r\n        defaultValue?: string | number | any | null;\r\n        name?: string;\r\n    }\r\n) {\r\n    return <E extends HTMLElement>(\r\n        target: E, property: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(property);\r\n        const {defaultValue = null, observed = false, name = camelToTrain(propertyName)} = init;\r\n        if (observed) {\r\n            const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n            if (Array.isArray(observedAttributes)) {\r\n                observedAttributes.push(name);\r\n            }\r\n            else {\r\n                Object.defineProperty(\r\n                    constructor, \"observedAttributes\", {\r\n                        value: [name],\r\n                        writable: false\r\n                    }\r\n                );\r\n            }\r\n        }\r\n        const {type} = init;\r\n        switch (type) {\r\n            case Boolean: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        return this.hasAttribute(name);\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value) {\r\n                            this.setAttribute(name, \"\");\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Object: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(name);\r\n                        return (val !== null) ? JSON.parse(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(name, JSON.stringify(value));\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Number: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(name);\r\n                        return (val !== null) ? parseFloat(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(name, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case String:\r\n            default: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(name);\r\n                        return (val !== null) ? val : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(name, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n    \r\nfunction Stylesheet(text: string): CSSStyleSheet {\r\n    const stylesheet = new CSSStyleSheet();\r\n    (stylesheet as any).replaceSync(text);\r\n    return stylesheet;\r\n}\r\n\r\nfunction trimMultilineIndent(text: string): string {\r\n    const newlineIndex = text.indexOf(\"\\n\");\r\n    text = text.substring(newlineIndex + 1);\r\n    const indentMatch = text.match(/^[\\s]*/);\r\n    if (indentMatch) {\r\n        const indent = text.substring(0, indentMatch[0].length);\r\n        text = text.replaceAll(indent, \"\").trimEnd();\r\n    }\r\n    return text;\r\n}\r\n\r\ninterface CustomElementDecorator {\r\n    (init: {\r\n        name: string;\r\n        options?: ElementDefinitionOptions\r\n    }): <C extends CustomElementConstructor>(elementCtor: C) => C;\r\n}\r\n\r\nconst CustomElement: CustomElementDecorator = function(init: {\r\n    name: string;\r\n    options?: ElementDefinitionOptions\r\n}) {\r\n    return <C extends CustomElementConstructor>(\r\n        elementCtor: C\r\n    ) => {\r\n        const {name, options} = init;\r\n        if (!customElements.get(name)) {\r\n            customElements.define(\r\n                name,\r\n                elementCtor,\r\n                options\r\n            );\r\n        }\r\n        return elementCtor;\r\n    }\r\n}\r\n\r\ninterface QueryPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryProperty: QueryPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(propertyKey);\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return this.shadowRoot!.querySelector(selector);\r\n        } : function(this: HTMLElement) {\r\n            return this.querySelector(selector);\r\n        }\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\ninterface QueryAllPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryAllProperty: QueryAllPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(propertyKey);\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return Array.from(this.shadowRoot!.querySelectorAll(selector));\r\n        } : function(this: HTMLElement) {\r\n            return Array.from(this.querySelectorAll(selector));\r\n        };\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\nfunction fragment(...nodes: (Node | string)[]): DocumentFragment {\r\n    const fragment = document.createDocumentFragment();\r\n    fragment.append(...nodes);\r\n    return fragment;\r\n}\r\n\r\nfunction textNode(text: string): Node {\r\n    return document.createTextNode(text);\r\n}\r\n\r\ninterface HTMLElementInit {\r\n    options?: ElementCreationOptions,\r\n    attributes?: {\r\n        [name: string]: number | string | boolean | undefined\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    children?: Node | string | (Node | string)[] | NodeList | ReactiveChildElements,\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction element<E extends HTMLElementTagNameMap[K], K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): E;\r\nfunction element(\r\n    tagName: string, init?: HTMLElementInit): HTMLElement;\r\nfunction element<K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): HTMLElementTagNameMap[K] {\r\n    if (init) {\r\n        const {options, attributes, dataset, children, listeners} = init;\r\n        const element = document.createElement(tagName, options);\r\n        if (attributes) {\r\n            Object.entries(attributes).forEach(([attributeName, attributeValue]) => {\r\n                if (attributeValue !== undefined) {\r\n                    if (typeof attributeValue === \"boolean\") {\r\n                        element.toggleAttribute(camelToTrain(attributeName), attributeValue);\r\n                    }\r\n                    else {\r\n                        element.setAttribute(camelToTrain(attributeName), String(attributeValue));\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        if (dataset) {\r\n            const {dataset: elementDataset} = element;\r\n            Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                elementDataset[datasetEntry_i] = String(dataset[datasetEntry_i]);\r\n            });\r\n        }\r\n        if (children) {\r\n            if (typeof children === \"function\") {\r\n                element.append(...children(element));\r\n            }\r\n            else if (typeof children === \"object\" && \"length\" in children) {\r\n                element.append(...Array.from(children));\r\n            }\r\n            else {\r\n                element.append(children);\r\n            }\r\n        }\r\n        if (listeners) {\r\n            Object.entries(listeners).forEach(([name_i, listener_i]) => {\r\n                if (Array.isArray(listener_i)) {\r\n                    element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                }\r\n                else {\r\n                    element.addEventListener(name_i, listener_i);\r\n                }\r\n            });\r\n        }\r\n        return element;\r\n    }\r\n    return document.createElement(tagName);\r\n}\r\n\r\nconst reactiveElementsMap = new WeakMap<ModelNode, {\r\n    observerOptions: ModelChangeObserverOptions,\r\n    reactiveElementsArray: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }[]\r\n}>();\r\n\r\nconst reactiveElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    model: ModelNode,\r\n    reactiveElement: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }\r\n}) => {\r\n    const {model, reactiveElement} = heldValue;\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    if (reactiveElementsMapEntry !== undefined) {\r\n        const {reactiveElementsArray} = reactiveElementsMapEntry;\r\n        reactiveElementsArray.splice(reactiveElementsArray.indexOf(reactiveElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveElementsPropertyObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    records.forEach((record_i) => {\r\n        const {target, propertyName, oldValue, newValue} = record_i;\r\n        const {reactiveElementsArray} = reactiveElementsMap.get(target)!;\r\n        reactiveElementsArray.forEach(reactiveElement_i => {\r\n            const {elementRef, react, properties} = reactiveElement_i;\r\n            const element = elementRef.deref();\r\n            if (element) {\r\n                if (properties.includes(propertyName!)) {\r\n                    react(element, propertyName!, oldValue, newValue);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveElement<M extends ModelNode, E extends Element, K extends string>(\r\n    model: M,\r\n    element: E,\r\n    properties: K[],\r\n    react: (object: E, property: K, oldValue: any, newValue: any) => void\r\n): E;\r\nfunction reactiveElement<M extends ModelNode, E extends Element>(\r\n    model: M,\r\n    element: E,\r\n    properties: string[],\r\n    react: (element: E, property: string, oldValue: any, newValue: any) => void\r\n): E {\r\n    const elementRef = new WeakRef(element);\r\n    const reactiveElement = {elementRef, react, properties};\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    reactiveElementsFinalizationRegistry.register(element, {model, reactiveElement});\r\n    if (!reactiveElementsMapEntry) {\r\n        const observerOptions = {\r\n            properties: true,\r\n            propertiesFilter: properties\r\n        };\r\n        const reactiveElementsArray = [reactiveElement];\r\n        reactiveElementsMap.set(model, {observerOptions, reactiveElementsArray});\r\n        reactiveElementsPropertyObserver.observe(model, observerOptions);\r\n    }\r\n    else {\r\n        const {reactiveElementsArray, observerOptions} = reactiveElementsMapEntry;\r\n        const {propertiesFilter} = observerOptions;\r\n        reactiveElementsArray.push(reactiveElement);\r\n        observerOptions.propertiesFilter = propertiesFilter ?\r\n            propertiesFilter.concat(properties.filter(\r\n                property_i => !propertiesFilter.includes(property_i)\r\n            )) : properties.filter(\r\n                (property_i, i, properties) => properties.indexOf(property_i) === i\r\n            )\r\n    }\r\n    properties.forEach((property_i) => {\r\n        if (property_i in model) {\r\n            const value = Reflect.get(model, property_i, model);\r\n            if (value !== undefined) {\r\n                react(element, <any>property_i, <any>undefined, value);\r\n            }\r\n        }\r\n    });\r\n    return element;\r\n}\r\n\r\ninterface ReactiveChildElements {\r\n    (parent: Node & ParentNode): (Node | string)[]\r\n}\r\n\r\nconst reactiveChildElementsMap = new WeakMap<ModelList, {\r\n    reactiveChildElementsArray: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }[]\r\n}>();\r\n\r\nconst reactiveChildElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    list: ModelList,\r\n    reactiveChildElement: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }\r\n}) => {\r\n    const {list, reactiveChildElement} = heldValue;\r\n    const reactiveChildrenElementsMapEntry = reactiveChildElementsMap.get(list);\r\n    if (reactiveChildrenElementsMapEntry) {\r\n        const {reactiveChildElementsArray} = reactiveChildrenElementsMapEntry;\r\n        reactiveChildElementsArray.splice(reactiveChildElementsArray.indexOf(reactiveChildElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveChildElementsObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    let range: null | Range = null;\r\n    Array.from(records.values()).forEach((record_i) => {\r\n        const {target} = record_i;\r\n        const list = <ModelList>target;\r\n        const {length: listLength} = list;\r\n        const {reactiveChildElementsArray} = reactiveChildElementsMap.get(list)!;\r\n        reactiveChildElementsArray.forEach((reactiveChildElements_i) => {\r\n            const {parentRef, mapping, placeholder} = reactiveChildElements_i;\r\n            const parent = parentRef.deref();\r\n            if (parent) {\r\n                const {firstChild, children} = parent;\r\n                const {length: childrenCount} = children;\r\n                if (placeholder && listLength > 0 && firstChild == placeholder) {\r\n                    parent.removeChild(placeholder);\r\n                }\r\n                const {changeType, LIST_INSERT, LIST_REMOVE, LIST_SORT} = record_i;\r\n                switch (changeType) {\r\n                    case LIST_INSERT: {\r\n                        const {insertedIndex, insertedItems} = record_i;\r\n                        const insertedItemsArray = Array.from(insertedItems.values()).map(mapping);\r\n                        const {length: childrenCount} = children;\r\n                        if (insertedIndex < childrenCount) {\r\n                            children[insertedIndex].before(...insertedItemsArray);\r\n                        }\r\n                        else {\r\n                            parent.append(...insertedItemsArray);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_REMOVE: {\r\n                        const {removedIndex, removedItems} = record_i;\r\n                        const {length: removedCount} = removedItems;\r\n                        range = range ?? document.createRange();\r\n                        const removeEndIndex = removedIndex + (removedCount - 1);\r\n                        if (removeEndIndex < childrenCount) {\r\n                            range.setStartBefore(children[removedIndex]);\r\n                            range.setEndAfter(children[removeEndIndex]);\r\n                            range.deleteContents();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_SORT: {\r\n                        const {sortedIndices} = record_i;\r\n                        const childrenArray = Array.from(children);\r\n                        parent.append(\r\n                            ...sortedIndices.filter(\r\n                                index_i => index_i < childrenCount\r\n                            ).map(\r\n                                index_i => childrenArray[index_i]\r\n                            )\r\n                        );\r\n                        break;\r\n                    }\r\n                }\r\n                if (listLength == 0 && placeholder) {\r\n                    parent.append(placeholder);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveChildElements<Model extends ModelNode>(\r\n    list: ModelList<Model>,\r\n    mapping: (item: Model) => Element,\r\n    placeholder?: Element\r\n): ReactiveChildElements {\r\n    return (parent: Node & ParentNode) => {\r\n        const parentRef = new WeakRef(parent);\r\n        const reactiveChildElementsMapEntry = reactiveChildElementsMap.get(list);\r\n        const reactiveChildElement = {parentRef, mapping, placeholder};\r\n        reactiveChildElementsFinalizationRegistry.register(parent, {list, reactiveChildElement});\r\n        if (!reactiveChildElementsMapEntry) {\r\n            const reactiveChildElementsArray = [reactiveChildElement];\r\n            reactiveChildElementsMap.set(list, {reactiveChildElementsArray});\r\n            reactiveChildElementsObserver.observe(list, {\r\n                childList: true\r\n            });\r\n        }\r\n        else {\r\n            const {reactiveChildElementsArray} = reactiveChildElementsMapEntry;\r\n            reactiveChildElementsArray.push(reactiveChildElement);\r\n        }\r\n        return list.length == 0 && placeholder ?\r\n            [placeholder] : Array.from(list.values()).map(mapping);\r\n    }\r\n}\r\n\r\ninterface AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n    attach(element: Element): void;\r\n    detach(element: Element): void;\r\n}\r\n\r\ntype AttributeType = \"string\" | \"boolean\" | \"list\";\r\n\r\nfunction areAttributesMatching(\r\n    referenceAttributeType: AttributeType,\r\n    referenceAttributeName: string, referenceAttributeValue: string,\r\n    attributeName: string, attributeValue: string | null): boolean {\r\n    if (referenceAttributeName == attributeName) {\r\n        switch (referenceAttributeType) {\r\n            case \"boolean\":\r\n                return referenceAttributeValue == \"\" && attributeValue == \"\";\r\n            case \"string\":\r\n                return referenceAttributeValue !== \"\" && (referenceAttributeValue == attributeValue);\r\n            case \"list\":\r\n                return (referenceAttributeValue !== \"\" && attributeValue !== null) && new RegExp(`${referenceAttributeValue}\\s*?`, \"g\").test(attributeValue );\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nclass AttributeMutationMixinBase implements AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n\r\n    constructor(attributeName: string, attributeType: AttributeType = \"boolean\", attributeValue: string = \"\") {\r\n        this.attributeName = attributeName;\r\n        this.attributeType = attributeType;\r\n        this.attributeValue = attributeValue;\r\n    }\r\n\r\n    attach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n\r\n    detach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n}","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEGridCellElement };\r\n\r\ninterface HTMLEGridCellElementConstructor {\r\n    prototype: HTMLEGridCellElement;\r\n    new(): HTMLEGridCellElement;\r\n}\r\n\r\ninterface HTMLEGridCellElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n    headers: string;\r\n    posinset: number;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridcell\": HTMLEGridCellElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridcell\"\r\n})\r\nclass HTMLEGridCellElementBase extends HTMLElement implements HTMLEGridCellElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    headers!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridCellElement: HTMLEGridCellElementConstructor = HTMLEGridCellElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\n\r\nexport { HTMLEGridRowGroupElement };\r\n\r\ninterface HTMLEGridRowGroupElementConstructor {\r\n    prototype: HTMLEGridRowGroupElement;\r\n    new(): HTMLEGridRowGroupElement;\r\n}\r\n\r\ninterface HTMLEGridRowGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrowgroup\": HTMLEGridRowGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrowgroup\"\r\n})\r\nclass HTMLEGridRowGroupElementBase extends HTMLElement implements HTMLEGridRowGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                            /*display: flex;\r\n                            flex-direction: column;*/\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowGroupElement: HTMLEGridRowGroupElementConstructor = HTMLEGridRowGroupElementBase;","import { CustomElement, AttributeProperty, QueryProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\n\r\nexport { HTMLEMenuItemElement };\r\nexport { EMenuItem };\r\n\r\ninterface HTMLEMenuItemElementConstructor {\r\n    prototype: HTMLEMenuItemElement;\r\n    new(): HTMLEMenuItemElement;\r\n}\r\n\r\ninterface HTMLEMenuItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n    get menu(): HTMLEMenuElement | null;\r\n    name: string;\r\n    label: string | null;\r\n    value: string;\r\n    hotkey: string;\r\n    disabled: boolean;\r\n    checked: boolean;\r\n    expanded: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(attributeName: string, oldValue: string | null, newValue: string | null): void;\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitem\": HTMLEMenuItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitem\"\r\n})\r\nclass HTMLEMenuItemElementBase extends HTMLElement implements HTMLEMenuItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n    \r\n    @QueryProperty({selector: \":scope > e-menu[slot=menu]\"})\r\n    menu!: HTMLEMenuElement | null;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string | null;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    hotkey!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    checked!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    expanded!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    overflown!: boolean;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"button\", observed: true})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n\r\n    attributeChangedCallback(attributeName: string, oldValue: string | null, newValue: string | null): void {\r\n        const {internals} = this;\r\n        switch (attributeName) {\r\n            case \"type\": {\r\n                switch (newValue) {\r\n                    case \"checkbox\":\r\n                    case \"radio\": {\r\n                        internals.role = `menuitem${newValue}`;\r\n                        break;\r\n                    }\r\n                    default: {\r\n                        internals.role = \"menuitem\";\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"checked\": {\r\n                internals.ariaChecked = String(newValue !== null);\r\n                break;\r\n            }\r\n            case \"disabled\": {\r\n                internals.ariaDisabled = String(newValue !== null);\r\n                break;\r\n            }\r\n            case \"expanded\": {\r\n                internals.ariaExpanded = String(newValue !== null);\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                internals.ariaLabel = newValue;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"icon\"\r\n                }\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"label\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"arrow\"\r\n                }\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const internals = this.attachInternals();\r\n        this.internals = internals;\r\n        internals.role = \"menuitem\";\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const tabindex = this.getAttribute(\"tabindex\");\r\n        this.tabIndex = tabindex !== null ? parseInt(tabindex) : -1;\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                const expand = force ?? !expanded;\r\n                this.expanded = expand;\r\n                if (expand) {\r\n                    this.#positionMenu();\r\n                }\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (!expanded) {\r\n                    this.expanded = true;\r\n                    this.#positionMenu();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (expanded) {\r\n                    this.expanded = false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const {type} = this;\r\n            if (type == \"menu\") {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemRight - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const closestMenu = this.closest(\"e-menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    const overflowX = itemRight + menuWidth - clientWidth;\r\n                    const overflowY = itemTop + menuHeight - clientHeight;\r\n                    menuStyle.setProperty(\"left\", `${\r\n                        overflowX > 0 ?\r\n                        itemLeft - menuWidth - closestMenuLeft :\r\n                        itemRight - closestMenuLeft\r\n                    }px`);\r\n                    menuStyle.setProperty(\"top\", `${\r\n                        overflowY > 0 ?\r\n                        itemBottom  - menuHeight - closestMenuTop :\r\n                        itemTop - closestMenuTop\r\n                    }px`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemElement: HTMLEMenuItemElementConstructor = HTMLEMenuItemElementBase;\r\n\r\ninterface EMenuItemConstructor {\r\n    prototype: HTMLEMenuItemElement;\r\n    new(init: {\r\n        name?: string;\r\n        label: string;\r\n        type?: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    button(init: {\r\n        name?: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    checkbox(init: {\r\n        name?: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    radio(init: {\r\n        name?: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    menu(init: {\r\n        name?: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    submenu(init: {\r\n        name?: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n}\r\n\r\nvar EMenuItem = <EMenuItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string;\r\n        label: string;\r\n        type?: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menu} = init;\r\n        if (menu) {\r\n            menu.slot = \"menu\";\r\n        }\r\n        return element(\"e-menuitem\", {\r\n            attributes: {\r\n                tabindex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type\r\n            },\r\n            children: menu ? [\r\n                label,\r\n                menu\r\n            ] : [\r\n                label\r\n            ],\r\n            listeners: {\r\n                click: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemElement.prototype,\r\n        button(init: {\r\n            name?: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name?: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name?: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menu(init: {\r\n            name?: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"menu\"\r\n            });\r\n        },\r\n        submenu(init: {\r\n            name?: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"submenu\"\r\n            });\r\n        }\r\n    }\r\n);","import { element, CustomElement, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuItemElement, EMenuItem } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuItemGroupElement };\r\nexport { EMenuItemGroup };\r\n\r\ninterface HTMLEMenuItemGroupElementConstructor {\r\n    prototype: HTMLEMenuItemGroupElement;\r\n    new(): HTMLEMenuItemGroupElement;\r\n}\r\n\r\ninterface HTMLEMenuItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    label: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitemgroup\": HTMLEMenuItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitemgroup\"\r\n})\r\nclass HTMLEMenuItemGroupElementBase extends HTMLElement implements HTMLEMenuItemGroupElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"label\"\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        const internals = this.attachInternals();\r\n        internals.role = \"group\";\r\n        this.internals = internals;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        const {internals} = this;\r\n        switch (name) {\r\n            case \"label\":\r\n                internals.ariaLabel = newValue;\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemGroupElement: HTMLEMenuItemGroupElementConstructor = HTMLEMenuItemGroupElementBase;\r\n\r\ninterface EMenuItemGroupConstructor {\r\n    prototype: HTMLEMenuItemGroupElement;\r\n    new(init: {\r\n        name?: string;\r\n        items: HTMLEMenuItemElement[];\r\n    }): HTMLEMenuItemGroupElement;\r\n    radios(init: {name: string, items: {label: string, value: string}[]}): HTMLEMenuItemGroupElement;\r\n}\r\n\r\nvar EMenuItemGroup = <EMenuItemGroupConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string,\r\n        items: HTMLEMenuItemElement[]\r\n    }) {\r\n        const {name, items} = init;\r\n        return element(\"e-menuitemgroup\", {\r\n            attributes: {\r\n                name: name\r\n            },\r\n            children: items\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemGroupElement.prototype,\r\n        radios: (init: {\r\n            name: string,\r\n            items: {\r\n                label: string,\r\n                value: string\r\n            }[]\r\n        }) => {\r\n            const {name, items} = init;\r\n            return element(\"e-menuitemgroup\", {\r\n                attributes: {\r\n                    name: name\r\n                },\r\n                children: items.map(\r\n                    ({label, value}) => new EMenuItem({name, label, type: \"radio\", value})\r\n                )\r\n            });\r\n        }\r\n    }\r\n);","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuElement };\r\nexport { EMenu };\r\n\r\ninterface HTMLEMenuElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    firstItem(): HTMLEMenuItemElement | null;\r\n    items(): HTMLEMenuItemElement[];\r\n    name: string;\r\n    contextual: boolean;\r\n    connectedCallback(): void;\r\n    positionContextual(x: number, y: number): void;\r\n}\r\n\r\ninterface HTMLEMenuElementConstructor {\r\n    prototype: HTMLEMenuElement;\r\n    new(): HTMLEMenuElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menu\": HTMLEMenuElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar toggleAnimations: WeakMap<HTMLEMenuItemElement, Animation>;\r\nvar HIDE_DELAY_MS = 200;\r\nvar SHOW_DELAY_MS = 400;\r\n\r\n@CustomElement({\r\n    name: \"e-menu\"\r\n})\r\nclass HTMLEMenuElementBase extends HTMLElement implements HTMLEMenuElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    items(): HTMLEMenuItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        ));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        const {activeIndex} = this;\r\n        return this.querySelector<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem:focus-within\"\r\n        ) ?? activeIndex > -1 ? this.items()[activeIndex] ?? null : null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    contextual!: boolean;\r\n\r\n    #walker: TreeWalker;\r\n    #activeIndex: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        toggleAnimations = new WeakMap();\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        this.#activeIndex = -1;\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"mouseout\", this.#handleMouseOutEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const tabindex = this.getAttribute(\"tabindex\");\r\n        this.tabIndex = tabindex !== null ? parseInt(tabindex) : -1;\r\n    }\r\n\r\n    positionContextual(x: number, y: number): void {\r\n        const {style} = this;\r\n        const {width: menuWidth, height: menuHeight} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        const left = x + scrollX;\r\n        const top = y + scrollY;\r\n        const {clientWidth, clientHeight} = document.body;\r\n        const overflowX = left + menuWidth - clientWidth;\r\n        const overflowY = top + menuHeight - clientHeight;\r\n        style.setProperty(\"left\", `${overflowX > 0 ? left - menuWidth : left}px`);\r\n        style.setProperty(\"top\", `${overflowY > 0 ? top - menuHeight : top}px`);\r\n    }\r\n\r\n    #collapseSubmenus(): void {\r\n        this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem[expanded]\"\r\n        )\r\n        .forEach((item_i) => {\r\n            item_i.collapse();\r\n        });\r\n    }\r\n    \r\n    #nearestItem(target: Element): HTMLEMenuItemElement | null {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextNode();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        return menu instanceof HTMLEMenuElementBase ?\r\n            menu.firstItem() :\r\n            null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        if (item !== null) {\r\n            this.#activeIndex = this.items().indexOf(item);\r\n        }\r\n    }\r\n    \r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetItem = (<HTMLElement>target).closest(\"e-menuitem\");\r\n        if (targetItem) {\r\n            const {type, checked} = targetItem;\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    targetItem.checked = !checked;\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    const {name, value} = targetItem;\r\n                    targetItem.checked = true;\r\n                    this.querySelectorAll<HTMLEMenuItemElement>(\r\n                        `:is(:scope, :scope > e-menuitemgroup) > e-menuitem[type=radio][name=${name}]`\r\n                    )\r\n                    .forEach((radio_i) => {\r\n                        radio_i.checked = radio_i.value == value;\r\n                    });\r\n                    break;\r\n                }\r\n                case \"menu\":\r\n                case \"submenu\": {\r\n                    targetItem.toggle();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem) {\r\n                this.#setActiveItem(nearestItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const {contextual} = this;\r\n            if (contextual) {\r\n                try {\r\n                    this.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const {activeItem} = this;\r\n                if (activeItem?.expanded) {\r\n                    activeItem.collapse();\r\n                }\r\n                this.#setActiveItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.firstItem() :\r\n                    this.firstItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.firstItem();\r\n                firstItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                lastItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"menu\":\r\n                        case \"submenu\": {\r\n                            activeItem.expand();\r\n                            if (activeItem.expanded) {\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                            }\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            activeItem.click();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                    else {\r\n                        const {contextual} = this;\r\n                        if (contextual) {\r\n                            this.blur();\r\n                            this.dispatchEvent(new Event(\"close\", {bubbles: true}));\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            if (!activeItem.expanded) {\r\n                                activeItem.expand();\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                                event.stopPropagation();\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOutEvent(event: MouseEvent): void {\r\n        const {target, relatedTarget} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem !== null) {\r\n                if (nearestItem.type == \"submenu\" &&\r\n                    !nearestItem.expanded) {\r\n                    toggleAnimations.get(nearestItem)?.cancel();\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLEMenuElement\r\n                ) == this;\r\n                if (isTargetClosestMenu) {\r\n                    const {activeItem} = this;\r\n                    if (activeItem?.type == \"submenu\" &&\r\n                        activeItem.expanded) {\r\n                        let toggleAnimation = toggleAnimations.get(activeItem);\r\n                        if (toggleAnimation) {\r\n                            toggleAnimation.cancel();\r\n                        }\r\n                        toggleAnimation = activeItem.animate(null, {\r\n                            duration: HIDE_DELAY_MS\r\n                        });\r\n                        toggleAnimations.set(activeItem, toggleAnimation);\r\n                        const {finished} = toggleAnimation;\r\n                        finished\r\n                            .then(() => {\r\n                                activeItem.collapse();\r\n                            })\r\n                            .catch(() => undefined)\r\n                            .finally(() => {\r\n                                toggleAnimations.delete(activeItem);\r\n                            });\r\n                    }\r\n                    const {clientX, clientY} = event;\r\n                    const {left, right, top, bottom} = this.getBoundingClientRect();\r\n                    const intersectsWithMouse = !(\r\n                        left > clientX || right < clientX || top > clientY || bottom < clientY\r\n                    );\r\n                    const containsRelatedTarget = this.contains(<Node>relatedTarget);\r\n                    if (intersectsWithMouse && containsRelatedTarget) {\r\n                        if (relatedTarget instanceof HTMLEMenuElement && relatedTarget !== this) {\r\n                            relatedTarget.focus({preventScroll: true});\r\n                        }\r\n                        else {\r\n                            this.focus({preventScroll: true});\r\n                            this.#setActiveItem(null);\r\n                        }\r\n                    }\r\n                    if (!intersectsWithMouse) {\r\n                        this.focus({preventScroll: true});\r\n                        this.#setActiveItem(null);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem !== null) {\r\n                if (nearestItem.type === \"submenu\" && nearestItem.expanded) {\r\n                    toggleAnimations.get(nearestItem)?.cancel();\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLEMenuElement\r\n                ) == this;\r\n                if (isTargetClosestMenu) {\r\n                    const {activeItem} = this;\r\n                    if (activeItem?.type === \"submenu\" &&\r\n                        activeItem.expanded && \r\n                        !activeItem.contains(<Node>target)) {\r\n                        let toggleAnimation = toggleAnimations.get(activeItem);\r\n                        if (toggleAnimation) {\r\n                            toggleAnimation.cancel();\r\n                        }\r\n                        toggleAnimation = activeItem.animate(null, {\r\n                            duration: SHOW_DELAY_MS\r\n                        });\r\n                        toggleAnimations.set(activeItem, toggleAnimation);\r\n                        const {finished} = toggleAnimation;\r\n                        finished\r\n                            .then(() => {\r\n                                activeItem.collapse();\r\n                            })\r\n                            .catch(() => undefined)\r\n                            .finally(() => {\r\n                                toggleAnimations.delete(activeItem);\r\n                            });\r\n                    }\r\n                    this.#setActiveItem(nearestItem);\r\n                    nearestItem.focus({preventScroll: true});\r\n                    if (nearestItem.type === \"submenu\") {\r\n                        if (!nearestItem.expanded) {\r\n                            let toggleAnimation = toggleAnimations.get(nearestItem);\r\n                            if (toggleAnimation) {\r\n                                toggleAnimation.cancel();\r\n                            }\r\n                            toggleAnimation = nearestItem.animate(null, {\r\n                                duration: HIDE_DELAY_MS\r\n                            });\r\n                            toggleAnimations.set(nearestItem, toggleAnimation);\r\n                            const {finished} = toggleAnimation;\r\n                            finished\r\n                                .then(() => {\r\n                                    const {activeItem} = this;\r\n                                    this.#collapseSubmenus();\r\n                                    if (activeItem) {\r\n                                        toggleAnimations.get(activeItem)?.cancel();\r\n                                        activeItem.expand();\r\n                                        activeItem.menu?.focus({preventScroll: true});\r\n                                    }\r\n                                })\r\n                                .catch(() => undefined)\r\n                                .finally(() => {\r\n                                    toggleAnimations.delete(nearestItem);\r\n                                });\r\n                        }\r\n                        else {\r\n                            nearestItem.menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuElement: HTMLEMenuElementConstructor = HTMLEMenuElementBase;\r\n\r\ninterface EMenuConstructor {\r\n    prototype: HTMLEMenuElement;\r\n    new(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }): HTMLEMenuElement;\r\n}\r\n\r\nvar EMenu = <EMenuConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }) {\r\n        const {name, children} = init;\r\n        return element(\"e-menu\", {\r\n            attributes: {\r\n                name: name,\r\n                tabindex: -1,\r\n            },\r\n            children: children\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuElement.prototype,\r\n    }\r\n);","import { AttributeProperty, CustomElement, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\n\r\nexport { HTMLEGridRowElement };\r\n\r\ninterface HTMLEGridRowElementConstructor {\r\n    prototype: HTMLEGridRowElement;\r\n    new(): HTMLEGridRowElement;\r\n}\r\n\r\ninterface HTMLEGridRowElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    active: boolean;\r\n    selected: boolean;\r\n    posinset: number;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrow\": HTMLEGridRowElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrow\"\r\n})\r\nclass HTMLEGridRowElementBase extends HTMLElement implements HTMLEGridRowElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    #menu: HTMLEMenuElement | null;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row;\r\n                        }\r\n\r\n                        :host([droptarget]) {\r\n                            background-color: gainsboro;\r\n                        }\r\n                        \r\n                        :host(:hover) {\r\n                            background-color: rgba(135, 206, 250, 0.2);\r\n                        }\r\n\r\n                        :host([active]) {\r\n                            outline: 1px solid rgb(135, 206, 250);\r\n                            outline-offset: -1px;\r\n                        }\r\n\r\n                        :host([selected]) {\r\n                            background-color: rgba(135, 206, 250, 0.4);\r\n                            outline: 1px solid rgb(135, 206, 250);\r\n                            outline-offset: -1px;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\"),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#menu = null;\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"menu\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#menu = element instanceof HTMLEMenuElement ? element : null;\r\n                break;\r\n            }\r\n            default: {\r\n                const assignedCells = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n                    .assignedElements()\r\n                    .filter(\r\n                        element_i => element_i instanceof HTMLEGridCellElement\r\n                    );\r\n                assignedCells.forEach((cell_i, i) => {\r\n                    cell_i.posinset = i;\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowElement: HTMLEGridRowElementConstructor = HTMLEGridRowElementBase;","import { HTMLEGridElement } from \"./Grid\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\n\r\nexport { HTMLEGridCellCollection };\r\n\r\ninterface HTMLEGridCellCollectionConstructor {\r\n    prototype: HTMLEGridCellCollection;\r\n    new(root: HTMLElement): HTMLEGridCellCollection;\r\n}\r\n\r\ninterface HTMLEGridCellCollection {\r\n    length: number;\r\n    item(index: number): HTMLEGridCellElement | null;\r\n    namedItem(name: string): HTMLEGridCellElement | null;\r\n    values(): IterableIterator<HTMLEGridCellElement>;\r\n}\r\n\r\nclass HTMLEGridCellCollectionBase implements HTMLEGridCellCollection {\r\n    #walker: TreeWalker;\r\n\r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridCellElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEGridCellElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEGridCellElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEGridCellElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEGridCellElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEGridCellElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEGridCellElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEGridCellElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEGridCellElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridCellCollection: HTMLEGridCellCollectionConstructor =  HTMLEGridCellCollectionBase;","import { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\n\r\nexport { HTMLEGridRowCollection };\r\n\r\ninterface HTMLEGridRowCollectionConstructor {\r\n    prototype: HTMLEGridRowCollection;\r\n    new(root: HTMLElement): HTMLEGridRowCollection;\r\n}\r\n\r\ninterface HTMLEGridRowCollection {\r\n    length: number;\r\n    item(index: number): HTMLEGridRowElement | null;\r\n    namedItem(name: string): HTMLEGridRowElement | null;\r\n    values(): IterableIterator<HTMLEGridRowElement>;\r\n}\r\n\r\nclass HTMLEGridRowCollectionBase implements HTMLEGridRowCollection {\r\n    #walker: TreeWalker;\r\n    \r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement || node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEGridRowElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEGridRowElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEGridRowElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEGridRowElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEGridRowElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEGridRowElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEGridRowElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEGridRowElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowCollection: HTMLEGridRowCollectionConstructor =  HTMLEGridRowCollectionBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\n\r\nexport { HTMLEGridBodyElement };\r\n\r\ninterface HTMLEGridBodyElementConstructor {\r\n    prototype: HTMLEGridBodyElement;\r\n    new(): HTMLEGridBodyElement;\r\n}\r\n\r\ninterface HTMLEGridBodyElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridbody\": HTMLEGridBodyElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridbody\"\r\n})\r\nclass HTMLEGridBodyElementBase extends HTMLElement implements HTMLEGridBodyElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridBodyElement: HTMLEGridBodyElementConstructor = HTMLEGridBodyElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridHeadElement } from \"./GridHead\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\n\r\nexport { HTMLEGridElement };\r\n\r\ninterface HTMLEGridElementConstructor {\r\n    prototype: HTMLEGridElement;\r\n    new(): HTMLEGridElement;\r\n}\r\n\r\ninterface HTMLEGridElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly body: HTMLEGridBodyElement | null;\r\n    readonly head: HTMLEGridHeadElement | null\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n    readonly activeCell: HTMLEGridCellElement | null;\r\n    readonly activeRow: HTMLEGridRowElement | null;\r\n    selectby: \"cell\" | \"row\";\r\n    name: string;\r\n    multiselectable: boolean;\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    clearSelection(): void;\r\n    selectedCells(): HTMLEGridCellElement[];\r\n    selectedRows(): HTMLEGridRowElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-grid\": HTMLEGridElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-grid\"\r\n})\r\nclass HTMLEGridElementBase extends HTMLElement implements HTMLEGridElement {\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    get activeCell(): HTMLEGridCellElement | null {\r\n        return this.querySelector<HTMLEGridCellElement>(\"e-gridcell[active]\");\r\n    }\r\n\r\n    get activeRow(): HTMLEGridRowElement | null {\r\n        return this.querySelector<HTMLEGridRowElement>(\"e-gridrow[active]\");\r\n    }\r\n\r\n    get body(): HTMLEGridBodyElement | null {\r\n        return this.querySelector<HTMLEGridBodyElement>(\":scope > e-gridbody\");\r\n    }\r\n\r\n    get head(): HTMLEGridHeadElement | null {\r\n        return this.querySelector<HTMLEGridHeadElement>(\":scope > e-gridhead\");\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"cell\"})\r\n    selectby!: \"cell\" | \"row\";\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    multiselectable!: boolean;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #cellsWalker: TreeWalker;\r\n    #rowsWalker: TreeWalker;\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#cellsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#cellsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#rowsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#rowsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"dblclick\", this.#handleDblClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.#clearCellsSelection();\r\n        this.#clearRowsSelection();\r\n    }\r\n\r\n    selectedCells(): HTMLEGridCellElement[] {\r\n        return Array.from(this.querySelectorAll(\"e-gridcell[selected]\"));\r\n    }\r\n\r\n    selectedRows(): HTMLEGridRowElement[] {\r\n        return Array.from(this.querySelectorAll(\"e-gridrow[selected]\"));\r\n    }\r\n\r\n    #cellsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridCellElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement || node instanceof HTMLEGridRowGroupElement || node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #rowsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridRowElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement || node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getCellsRange(from: HTMLEGridCellElement, to: HTMLEGridCellElement): HTMLEGridCellElement[] {\r\n        const cells = Array.from(this.cells.values());\r\n        const fromIndex = cells.indexOf(from);\r\n        const toIndex = cells.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return cells.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #getRowsRange(from: HTMLEGridRowElement, to: HTMLEGridRowElement): HTMLEGridRowElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleRow = this.#nextRow(from);\r\n            while (nextVisibleRow && nextVisibleRow !== to) {\r\n                range.push(nextVisibleRow);\r\n                nextVisibleRow = this.#nextRow(nextVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleRow = this.#previousRow(from);\r\n            while (previousVisibleRow && previousVisibleRow !== to) {\r\n                range.push(previousVisibleRow);\r\n                previousVisibleRow = this.#previousRow(previousVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setCellsSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((selectedCell_i) => {\r\n            if (!cells.includes(selectedCell_i)) {\r\n                selectedCell_i.selected = false;\r\n            }\r\n        });\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setRowsSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((selectedRow_i) => {\r\n            if (!rows.includes(selectedRow_i)) {\r\n                selectedRow_i.selected = false;\r\n            }\r\n        });\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addCellsToSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addRowsToSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeCellsFromSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        cells.forEach((cell_i) => {\r\n            if (selectedCells.includes(cell_i)) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeRowsFromSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        rows.forEach((row_i) => {\r\n            if (selectedRows.includes(row_i)) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearCellsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((cell_i) => {\r\n            if (cell_i.selected) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearRowsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((row_i) => {\r\n            if (row_i.selected) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveCell(cell: HTMLEGridCellElement | null): void {\r\n        const {activeCell} = this;\r\n        if (activeCell !== null && activeCell !== cell) {\r\n            activeCell.active = false;\r\n            activeCell.tabIndex = -1;\r\n        }\r\n        if (cell !== null) {\r\n            const cellsWalker = this.#cellsWalker;\r\n            cellsWalker.currentNode = cell;\r\n            cell.active = true;\r\n            cell.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #setActiveRow(row: HTMLEGridRowElement | null): void {\r\n        const {activeRow} = this;\r\n        if (activeRow !== null && activeRow !== row) {\r\n            activeRow.active = false;\r\n            activeRow.tabIndex = -1;\r\n        }\r\n        if (row !== null) {\r\n            const rowsWalker = this.#rowsWalker;\r\n            rowsWalker.currentNode = row;\r\n            row.active = true;\r\n            row.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #firstCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.firstChild();\r\n    }\r\n\r\n    #lastCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.lastChild();\r\n    }\r\n\r\n    #previousCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.previousNode();\r\n    }\r\n\r\n    #nextCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.nextNode();\r\n    }\r\n\r\n    #closestRow(cell: HTMLEGridCellElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = cell;\r\n        return <HTMLEGridRowElement | null>rowsWalker.parentNode();\r\n    }\r\n\r\n    #firstRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.firstChild();\r\n    }\r\n\r\n    #lastRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.lastChild();\r\n    }\r\n\r\n    #previousRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.previousNode();\r\n    }\r\n\r\n    #nextRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.nextNode();\r\n    }\r\n\r\n    #topCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const {cells: closestRowCells} = closestRow;\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const previousRow = this.#previousRow(closestRow);\r\n            if (previousRow) {\r\n                const {cells: previousRowCells} = previousRow;\r\n                return previousRowCells.item(\r\n                    Math.min(cellIndex, previousRowCells.length)\r\n                );\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #bottomCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const {cells: closestRowCells} = closestRow;\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const nextRow = this.#nextRow(closestRow);\r\n            if (nextRow) {\r\n                const {cells: nextRowCells} = nextRow;\r\n                return nextRowCells.item(\r\n                    Math.min(cellIndex, nextRowCells.length)\r\n                );\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {ctrlKey, shiftKey} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const composedPath = event.composedPath();\r\n                const targetCell = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridCellElement\r\n                ) : null;\r\n                const selectedCells = this.selectedCells();\r\n                if (targetCell instanceof HTMLEGridCellElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetCell.selected ?\r\n                            this.#addCellsToSelection(targetCell) :\r\n                            this.#removeCellsFromSelection(targetCell);\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedCell = selectedCells[selectedCells.length - 1];\r\n                        if (lastSelectedCell) {\r\n                            const range = this.#getCellsRange(\r\n                                lastSelectedCell,\r\n                                targetCell\r\n                            );\r\n                            if (range) {\r\n                                selectedCells.includes(targetCell) ?\r\n                                    this.#removeCellsFromSelection(...range) :\r\n                                    this.#addCellsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setCellsSelection(targetCell);\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const selectedRows = this.selectedRows();\r\n                const composedPath = event.composedPath();\r\n                const targetRow = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridRowElement\r\n                ) : null;\r\n                if (targetRow instanceof HTMLEGridRowElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetRow.selected ?\r\n                            this.#addRowsToSelection(targetRow) :\r\n                            this.#removeRowsFromSelection(targetRow);\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedRow = selectedRows[selectedRows.length - 1];\r\n                        if (lastSelectedRow) {\r\n                            const range = this.#getRowsRange(\r\n                                lastSelectedRow,\r\n                                targetRow\r\n                            );\r\n                            if (range) {\r\n                                selectedRows.includes(targetRow) ?\r\n                                    this.#removeRowsFromSelection(...range) :\r\n                                    this.#addRowsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setRowsSelection(targetRow);\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleDblClickEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {selectby, activeCell, activeRow} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    switch (selectby) {\r\n                        case \"cell\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const firstCell = firstRow ? this.#firstCell(firstRow) : null;\r\n                            const lastRow = this.#lastRow();\r\n                            const lastCell = lastRow ? this.#lastCell(lastRow) : null;\r\n                            if (firstCell && lastCell) {\r\n                                const range = this.#getCellsRange(firstCell, lastCell);\r\n                                if (range) {\r\n                                    this.#setCellsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"row\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const lastRow = this.#lastRow();\r\n                            if (firstRow && lastRow) {\r\n                                const range = this.#getRowsRange(firstRow, lastRow);\r\n                                if (range) {\r\n                                    this.#setRowsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const previousCell = this.#previousCell(activeCell);\r\n                        if (previousCell) {\r\n                            previousCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousCell.selected ?\r\n                                    this.#removeCellsFromSelection(previousCell) :\r\n                                    this.#addCellsToSelection(previousCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const nextCell = this.#nextCell(activeCell);\r\n                        if (nextCell) {\r\n                            nextCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextCell.selected ?\r\n                                    this.#removeCellsFromSelection(nextCell) :\r\n                                    this.#addCellsToSelection(nextCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const firstRow = activeRow ?? this.#firstRow();\r\n                        const topCell = activeCell ?\r\n                            this.#topCell(activeCell) :\r\n                            firstRow ?\r\n                            this.#firstCell(firstRow) :\r\n                            null;\r\n                        if (topCell) {\r\n                            topCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                topCell.selected ?\r\n                                    this.#removeCellsFromSelection(topCell) :\r\n                                    this.#addCellsToSelection(topCell);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const previousRow = activeRow ?\r\n                            this.#previousRow(activeRow) :\r\n                            this.#firstRow();\r\n                        if (previousRow) {\r\n                            previousRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousRow.selected ?\r\n                                    this.#removeRowsFromSelection(previousRow) :\r\n                                    this.#addRowsToSelection(previousRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const lastRow = activeRow ?? this.#lastRow();\r\n                        const bottomCell = activeCell ?\r\n                            this.#bottomCell(activeCell) :\r\n                            lastRow ?\r\n                            this.#lastCell(lastRow) :\r\n                            null;\r\n                            if (bottomCell) {\r\n                                bottomCell.focus({preventScroll: true});\r\n                                const {shiftKey} = event;\r\n                                if (shiftKey) {\r\n                                    bottomCell.selected ?\r\n                                        this.#removeCellsFromSelection(bottomCell) :\r\n                                        this.#addCellsToSelection(bottomCell);\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"row\": {\r\n                        const nextRow = activeRow ?\r\n                            this.#nextRow(activeRow) :\r\n                            this.#lastRow();\r\n                        if (nextRow) {\r\n                            nextRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextRow.selected ?\r\n                                    this.#removeRowsFromSelection(nextRow) :\r\n                                    this.#addRowsToSelection(nextRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const firstCell = this.#firstCell(activeRow);\r\n                            if (firstCell) {\r\n                                firstCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const firstRow = this.#firstRow();\r\n                        if (firstRow) {\r\n                            firstRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const lastCell = this.#lastCell(activeRow);\r\n                            if (lastCell) {\r\n                                lastCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const lastRow = this.#lastRow();\r\n                        if (lastRow) {\r\n                            lastRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeCell) {\r\n                            this.#setCellsSelection(activeCell);\r\n                            activeCell.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        if (activeRow) {\r\n                            this.#setRowsSelection(activeRow);\r\n                            activeRow.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        this.#clearCellsSelection();\r\n                        this.#setActiveCell(null);\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        this.#clearRowsSelection();\r\n                        this.#setActiveRow(null);\r\n                        break;\r\n                    }\r\n                }\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const {activeCell} = this;\r\n                if (activeCell && relatedTarget !== activeCell) {\r\n                    activeCell.focus();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const {activeRow} = this;\r\n                if (activeRow && relatedTarget !== activeRow) {\r\n                    activeRow.focus();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLEGridCellElement>(\"e-gridcell\");\r\n                if (targetCell) {\r\n                    this.#setActiveCell(targetCell);\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLEGridRowElement>(\"e-gridrow\");\r\n                if (targetRow) {\r\n                    this.#setActiveRow(targetRow);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedRows = <HTMLEGridRowElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridRowElement\r\n            );\r\n            assignedRows.forEach((row_i, i) => {\r\n                row_i.posinset = i;\r\n            });\r\n    }\r\n}\r\n\r\nvar HTMLEGridElement: HTMLEGridElementConstructor = HTMLEGridElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\n\r\nexport { HTMLEGridHeadElement };\r\n\r\ninterface HTMLEGridHeadElementConstructor {\r\n    prototype: HTMLEGridHeadElement;\r\n    new(): HTMLEGridHeadElement;\r\n}\r\n\r\ninterface HTMLEGridHeadElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridhead\": HTMLEGridHeadElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridhead\"\r\n})\r\nclass HTMLEGridHeadElementBase extends HTMLElement implements HTMLEGridHeadElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                        }\r\n                    `\r\n                    ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridHeadElement: HTMLEGridHeadElementConstructor = HTMLEGridHeadElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuBarElement };\r\n\r\ninterface HTMLEMenuBarElementConstructor {\r\n    prototype: HTMLEMenuBarElement;\r\n    new(): HTMLEMenuBarElement;\r\n}\r\n\r\ninterface HTMLEMenuBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    items(): HTMLEMenuItemElement[];\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    expanded: boolean;\r\n    connectedCallback(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menubar\": HTMLEMenuBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menubar\"\r\n})\r\nclass HTMLEMenuBarElementBase extends HTMLElement implements HTMLEMenuBarElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    #activeIndex: number;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const tabindex = this.getAttribute(\"tabindex\");\r\n        this.tabIndex = tabindex !== null ? parseInt(tabindex) : -1;\r\n    }\r\n\r\n    items(): HTMLEMenuItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        ));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        const {activeIndex} = this;\r\n        return this.querySelector<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem:focus-within\"\r\n        ) ?? activeIndex > -1 ? this.items()[activeIndex] ?? null : null;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement && !(node.disabled || node.hidden)) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLEMenuItemElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        const {activeItem, expanded} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.collapse();\r\n        }\r\n        if (item !== null) {\r\n            if (expanded) {\r\n                item.expand();\r\n            }\r\n            this.#activeIndex = this.items().indexOf(item);\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    get #items(): HTMLEMenuItemElement[] {\r\n        return Array.from(\r\n            this.querySelectorAll(\":is(:scope, :scope > e-menuitemgroup) > e-menuitem\")\r\n        );\r\n    }\r\n\r\n    #isClosestMenu(target: Element): boolean {\r\n        return target.closest(\":is(e-menubar, e-menu)\") == this;\r\n    }\r\n\r\n    #nearestItem(target: Element): HTMLEMenuItemElement | null {\r\n        return this.#items.find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n    \r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (!this.contains(<Node | null>relatedTarget)) {\r\n            (activeItem ?? this.firstItem())?.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof Element) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            this.#setActiveItem(nearestItem);\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, relatedTarget} = event;\r\n        if (target instanceof HTMLElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem) {\r\n                nearestItem.collapse();\r\n            }\r\n        }\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.expanded = false;\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {expanded, activeItem} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu && target !== activeItem && expanded) {\r\n                const {menu} = target;\r\n                if (menu) {\r\n                    target.expand();\r\n                    menu.focus({preventScroll: true});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {expanded, activeItem} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu) {\r\n                const isExpanded = !expanded;\r\n                this.expanded = isExpanded;\r\n                if (isExpanded) {\r\n                    if (activeItem && !activeItem.expanded) {\r\n                        activeItem.expand();\r\n                    }\r\n                    const {menu} = target;\r\n                    menu?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    document.body.focus();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded} = this;\r\n        let {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.firstItem() : \r\n                    this.#lastItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    this.expanded = !expanded;\r\n                    if (!expanded) {\r\n                        const firstChildItem = this.#firstChildItem(activeItem);\r\n                        firstChildItem?.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.expanded = false;\r\n                    if (activeItem) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuBarElement: HTMLEMenuBarElementConstructor = HTMLEMenuBarElementBase;","import { CustomElement, AttributeProperty, element, QueryProperty } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuButtonElement };\r\nexport { EMenuButton };\r\n\r\ninterface HTMLEMenuButtonElementConstructor {\r\n    prototype: HTMLEMenuButtonElement;\r\n    new(): HTMLEMenuButtonElement;\r\n}\r\n\r\ninterface HTMLEMenuButtonElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    readonly firstItem: HTMLEMenuItemElement | null;\r\n    name: string;\r\n    disabled: boolean;\r\n    expanded: boolean;\r\n    connectedCallback(): void;\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-menubutton\"\r\n})\r\nclass HTMLEMenuButtonElementBase extends HTMLElement implements HTMLEMenuButtonElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @QueryProperty({selector: \":scope > e-menu[slot=menu]\"})\r\n    readonly menu!: HTMLEMenuElement | null;\r\n    \r\n    @QueryProperty({selector: \":scope > e-menu[slot=menu] e-menuitem\"})\r\n    readonly firstItem!: HTMLEMenuItemElement | null;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const tabindex = this.getAttribute(\"tabindex\");\r\n        this.tabIndex = tabindex !== null ? parseInt(tabindex) : -1;\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {expanded} = this;\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n\r\n    expand(): void {\r\n        const {expanded} = this;\r\n        if (!expanded) {\r\n            this.expanded = true;\r\n            this.#positionMenu();\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {expanded} = this;\r\n        if (expanded) {\r\n            this.expanded = false;\r\n        }\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const overflowX = itemRight + menuWidth - clientWidth;\r\n            const overflowY = itemTop + menuHeight - clientHeight;\r\n            menuStyle.setProperty(\"left\", `${\r\n                overflowX > 0 ?\r\n                scrollX + itemRight - menuWidth :\r\n                scrollX + itemLeft\r\n            }px`);\r\n            menuStyle.setProperty(\"top\", `${\r\n                overflowY > 0 ?\r\n                scrollY + itemTop - menuHeight :\r\n                scrollY + itemBottom\r\n            }px`);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {menu} = this;\r\n        if (menu && !menu.contains(<Node>target)) {\r\n            this.toggle();\r\n            const {expanded} = this;\r\n            if (expanded) {\r\n                menu?.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded} = this;\r\n        switch (key) {\r\n            case \"ArrowDown\":\r\n            case \"Enter\":\r\n                if (!expanded) {\r\n                    this.expand();\r\n                    this.firstItem?.focus({preventScroll: true});\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            case \"Escape\":\r\n                if (expanded) {\r\n                    this.collapse();\r\n                }\r\n                this.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuButtonElement: HTMLEMenuButtonElementConstructor = HTMLEMenuButtonElementBase;\r\n\r\ninterface EMenuButtonConstructor {\r\n    prototype: HTMLEMenuButtonElement;\r\n    new(init: {\r\n        menu: HTMLEMenuElement\r\n    }): HTMLEMenuButtonElement;\r\n}\r\n\r\nvar EMenuButton = <EMenuButtonConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        menu: HTMLEMenuElement\r\n    }) {\r\n        const {menu} = init;\r\n        menu.slot = \"menu\";\r\n        return element(\"e-menubutton\", {\r\n            attributes: {\r\n                tabindex: -1\r\n            },\r\n            children: [menu]\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuButtonElement.prototype,\r\n    }\r\n);","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element, QueryProperty } from \"../../Element\";\r\nimport { HTMLEMenuButtonElement } from \"../menus/MenuButton\";\r\n\r\nexport { HTMLEToolBarItemElement };\r\nexport { EToolBarItem };\r\n\r\ninterface HTMLEToolBarItemElementConstructor {\r\n    prototype: HTMLEToolBarItemElement;\r\n    new(): HTMLEToolBarItemElement;\r\n}\r\n\r\ninterface HTMLEToolBarItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menubutton: HTMLEMenuButtonElement | null;\r\n    readonly select: HTMLESelectElement | null;\r\n    value: string;\r\n    name: string;\r\n    label: string;\r\n    active: boolean;\r\n    pressed: boolean;\r\n    iconed: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritem\": HTMLEToolBarItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar iconPart: HTMLElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritem\"\r\n})\r\nclass HTMLEToolBarItemElementBase extends HTMLElement implements HTMLEToolBarItemElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @QueryProperty({selector: \":scope > e-menubutton[slot=menubutton]\"})\r\n    readonly menubutton!: HTMLEMenuButtonElement | null;\r\n    \r\n    @QueryProperty({selector: \":scope > e-select[slot=select]\"})\r\n    readonly select!: HTMLESelectElement | null;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    pressed!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    iconed!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\"),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"select\"\r\n                }\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menubutton\"\r\n                }\r\n            })\r\n        );\r\n        iconPart = element(\"span\", {\r\n            attributes: {\r\n                part: \"icon\"\r\n            }\r\n        });\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                //...\r\n                break;\r\n            }\r\n            case \"iconed\": {\r\n                const {shadowRoot} = this;\r\n                if (newValue !== null) {\r\n                    shadowRoot.prepend(iconPart.cloneNode(true));\r\n                }\r\n                else {\r\n                    const iconPart = shadowRoot.querySelector<HTMLElement>(\"[part=icon]\");\r\n                    if (iconPart) {\r\n                        iconPart.remove();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemElement: HTMLEToolBarItemElementConstructor = HTMLEToolBarItemElementBase;\r\n\r\ninterface EToolBarItemConstructor {\r\n    prototype: HTMLEToolBarItemElement;\r\n    new(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n    button(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    checkbox(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    radio(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    menubutton(init: {\r\n        name: string;\r\n        label: string;\r\n        menubutton: HTMLEMenuButtonElement;\r\n    }): HTMLEToolBarItemElement;\r\n    select(init: {\r\n        name: string;\r\n        label: string;\r\n        select: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n}\r\n\r\nvar EToolBarItem = <EToolBarItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menubutton, select} = init;\r\n        if (menubutton) {\r\n            menubutton.slot = \"menubutton\";\r\n        }\r\n        if (select) {\r\n            select.slot = \"select\";\r\n        }\r\n        return element(\"e-toolbaritem\", {\r\n            attributes: {\r\n                tabindex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type\r\n            },\r\n            children: menubutton ? [menubutton] : select ? [select] : undefined,\r\n            listeners: {\r\n                click: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEToolBarItemElement.prototype,\r\n        button(init: {\r\n            name: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menubutton(init: {\r\n            name: string;\r\n            label: string;\r\n            menubutton: HTMLEMenuButtonElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"menubutton\"\r\n            });\r\n        },\r\n        select(init: {\r\n            name: string;\r\n            label: string;\r\n            select: HTMLESelectElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"select\"\r\n            });\r\n        },\r\n    }\r\n);","\r\nimport { element, CustomElement, AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEToolBarItemGroupElement };\r\n\r\ninterface HTMLEToolBarItemGroupElementConstructor {\r\n    prototype: HTMLEToolBarItemGroupElement;\r\n    new(): HTMLEToolBarItemGroupElement;\r\n}\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\ninterface HTMLEToolBarItemGroupElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritemgroup\": HTMLEToolBarItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritemgroup\"\r\n})\r\nclass HTMLEToolBarItemGroupElementBase extends HTMLElement implements HTMLEToolBarItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            width: max-content;\r\n                            flex-direction: row;\r\n                        }\r\n\r\n                        /*:host([orientation=\"vertical\"]) {\r\n                            flex-direction: column;\r\n                        }\r\n\r\n                        :host([orientation=\"horizontal\"]) {\r\n                            flex-direction: row;\r\n                        }*/\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const label = this.shadowRoot.querySelector<HTMLLabelElement>(\"[part='label']\");\r\n                if (label) {\r\n                    label.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemGroupElement: HTMLEToolBarItemGroupElementConstructor = HTMLEToolBarItemGroupElementBase;","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEToolBarItemElement } from \"./ToolBarItem\";\r\nimport { HTMLEToolBarItemGroupElement } from \"./ToolBarItemGroup\";\r\n\r\nexport { HTMLEToolBarElement };\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\ninterface HTMLEToolBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly activeItem: HTMLEToolBarItemElement | null;\r\n    items(): HTMLEToolBarItemElement[];\r\n    firstItem(): HTMLEToolBarItemElement | null;\r\n    name: string;\r\n    orientation: ToolBarOrientation;\r\n}\r\n\r\ninterface HTMLEToolbarElementConstructor {\r\n    prototype: HTMLEToolBarElement;\r\n    new(): HTMLEToolBarElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbar\": HTMLEToolBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar wasExpandedOnMouseDown: WeakMap<HTMLEToolBarItemElement, boolean>;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbar\"\r\n})\r\nclass HTMLEToolBarElementBase extends HTMLElement implements HTMLEToolBarElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get activeItem(): HTMLEToolBarItemElement | null {\r\n        return this.querySelector<HTMLEToolBarItemElement>(\r\n            \"e-toolbaritem[active]\"\r\n        );\r\n    }\r\n\r\n    items(): HTMLEToolBarItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEToolBarItemElement>(\r\n            \":is(:scope, :scope > e-toolbaritemgroup) > e-toolbaritem\"\r\n        ));\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    orientation!: ToolBarOrientation;\r\n\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        wasExpandedOnMouseDown = new WeakMap();\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"dblclick\", this.#handleDblClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEToolBarItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEToolBarItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    firstItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEToolBarItemElement | null>walker.previousSibling();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEToolBarItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEToolBarItemElement | null): void {\r\n        const {activeItem} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetItem = (<HTMLElement>target).closest(\"e-toolbaritem\");\r\n        if (targetItem) {\r\n            const {type, pressed} = targetItem;\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    targetItem.pressed = !pressed;\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    targetItem.pressed = true;\r\n                    break;\r\n                }\r\n                case \"menubutton\": {\r\n                    const {menubutton} = targetItem;\r\n                    if (menubutton && !menubutton.contains(<Node>target)) {\r\n                        const force = !wasExpandedOnMouseDown.get(targetItem) ?? true;\r\n                        menubutton.toggle(force);\r\n                        if (force) {\r\n                            menubutton.firstItem?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                case \"select\": {\r\n                    const {select} = targetItem;\r\n                    if (select && !select.contains(<Node>target)) {\r\n                        const force = !wasExpandedOnMouseDown.get(targetItem) ?? true;\r\n                        select.toggle(force);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleDblClickEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (!this.contains(<Node>relatedTarget)) {\r\n            (activeItem ?? this.firstItem())?.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetItem = <HTMLEToolBarItemElement | null>(<HTMLElement>target).closest(\"e-toolbaritem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetItem);\r\n            this.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetItem = (<HTMLElement>target).closest(\"e-toolbaritem\");\r\n        if (targetItem) {\r\n            const {type} = targetItem;\r\n            switch (type) {\r\n                case \"menubutton\": {\r\n                    const {menubutton} = targetItem;\r\n                    if (menubutton && !menubutton.contains(<Node>target)) {\r\n                        wasExpandedOnMouseDown.set(targetItem, menubutton.expanded);\r\n                    }\r\n                    break;\r\n                }\r\n                case \"select\": {\r\n                    const {select} = targetItem;\r\n                    if (select && !select.contains(<Node>target)) {\r\n                        wasExpandedOnMouseDown.set(targetItem, select.expanded);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"menubutton\": {\r\n                            const {menubutton} = activeItem;\r\n                            if (menubutton) {\r\n                                menubutton.expand();\r\n                                menubutton.firstItem?.focus({preventScroll: true});\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"select\": {\r\n                            const {select} = activeItem;\r\n                            if (select) {\r\n                                select.expand();\r\n                            }\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            activeItem.click();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"select\": {\r\n                            activeItem.select?.expand();\r\n                            event.stopPropagation();\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarElement: HTMLEToolbarElementConstructor = HTMLEToolBarElementBase;","import { CustomElement, AttributeProperty } from \"../../Element\";\r\nimport { HTMLETabPanelElement } from \"./TabPanel\";\r\n\r\nexport { HTMLETabElement };\r\n\r\ninterface HTMLETabElementConstructor {\r\n    prototype: HTMLETabElement;\r\n    new(): HTMLETabElement;\r\n}\r\n\r\ninterface HTMLETabElement extends HTMLElement {\r\n    get panel(): HTMLETabPanelElement | null;\r\n    name: string;\r\n    active: boolean;\r\n    disabled: boolean;\r\n    controls: string;\r\n    selected: boolean;\r\n    select(): void;\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tab\": HTMLETabElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tab\"\r\n})\r\nclass HTMLETabElementBase extends HTMLElement implements HTMLETabElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n    \r\n    get panel(): HTMLETabPanelElement | null {\r\n        const {controls} = this;\r\n        return (<Document | ShadowRoot>this.getRootNode()).querySelector<HTMLETabPanelElement>(`e-tabpanel#${controls}`);\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    select(): void {\r\n        this.selected = true;\r\n    }\r\n}\r\n\r\nvar HTMLETabElement: HTMLETabElementConstructor = HTMLETabElementBase;","import { CustomElement } from \"../../Element\";\r\nimport { HTMLETabElement } from \"./Tab\";\r\n\r\nexport { HTMLETabListElement };\r\n\r\ninterface HTMLETabListElementConstructor {\r\n    prototype: HTMLETabListElement;\r\n    new(): HTMLETabListElement;\r\n}\r\n\r\ninterface HTMLETabListElement extends HTMLElement {\r\n    get activeTab(): HTMLETabElement | null;\r\n    get selectedTab(): HTMLETabElement | null;\r\n    get tabs(): HTMLETabElement[];\r\n    firstItem(): HTMLETabElement | null;\r\n    connectedCallback(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tablist\": HTMLETabListElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tablist\"\r\n})\r\nclass HTMLETabListElementBase extends HTMLElement implements HTMLETabListElement {\r\n\r\n    #walker: TreeWalker;\r\n    \r\n    get tabs(): HTMLETabElement[] {\r\n        return Array.from(\r\n            this.querySelectorAll(\"e-tab\")\r\n        );\r\n    }\r\n\r\n    get activeTab(): HTMLETabElement | null {\r\n        return this.querySelector(\r\n            \"e-tab[active]\"\r\n        );\r\n    }\r\n\r\n    get selectedTab(): HTMLETabElement | null {\r\n        return this.querySelector(\r\n            \"e-tab[selected]\"\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex, selectedTab} = this;\r\n        this.tabIndex = tabIndex;\r\n        customElements.upgrade(this);\r\n        const tabToSelect = selectedTab ?? this.firstItem();\r\n        if (tabToSelect) {\r\n            this.#selectTab(tabToSelect);\r\n        }\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLETabElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    firstItem(): HTMLETabElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLETabElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLETabElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLETabElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLETabElement): HTMLETabElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLETabElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLETabElement): HTMLETabElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLETabElement | null>walker.nextNode();\r\n    }\r\n\r\n    #setActiveTab(item: HTMLETabElement | null): void {\r\n        const {activeTab} = this;\r\n        if (activeTab !== null && activeTab !== item) {\r\n            activeTab.active = false;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n        }\r\n    }\r\n\r\n    #selectTab(tab: HTMLETabElement) {\r\n        const {selectedTab} = this;\r\n        if (tab !== selectedTab) {\r\n            tab.selected = true;\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetTab = (<Element>target).closest(\"e-tab\");\r\n        if (targetTab) {\r\n            targetTab.select();\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {selectedTab} = this;\r\n        if (!this.contains(<Node>relatedTarget)) {\r\n            (selectedTab ?? this.firstItem())?.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetTab = <HTMLETabElement | null>(<HTMLElement>target).closest(\"e-tab\");\r\n        if (targetTab) {\r\n            this.#setActiveTab(targetTab);\r\n            this.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeTab} = this;\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousTab = activeTab ?\r\n                    this.#previousItem(activeTab) ?? this.#lastItem() :\r\n                    this.firstItem();\r\n                previousTab?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextTab = activeTab ?\r\n                    this.#nextItem(activeTab) ?? this.firstItem() :\r\n                    this.#lastItem();\r\n                nextTab?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                activeTab?.click();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event) {\r\n        const {target} = event;\r\n        const targetTab = <HTMLETabElement>target;\r\n        if (targetTab.selected) {\r\n            const {tabs} = this;\r\n            tabs.forEach((tab_i) => {\r\n                if (tab_i !== targetTab) {\r\n                    //const {selected} = tab_i;\r\n                    //if (selected) {\r\n                        tab_i.selected = false;\r\n                    //}\r\n                    const {panel} = tab_i;\r\n                    if (panel) {\r\n                        panel.hidden = true;\r\n                    }\r\n                }\r\n            });\r\n            const {panel} = targetTab;\r\n            if (panel) {\r\n                panel.hidden = false;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabListElement: HTMLETabListElementConstructor = HTMLETabListElementBase;","import { CustomElement } from \"../../Element\";\r\nimport { HTMLETabElement } from \"./Tab\";\r\n\r\nexport { HTMLETabPanelElement };\r\n\r\ninterface HTMLETabPanelElementConstructor {\r\n    prototype: HTMLETabPanelElement;\r\n    new(): HTMLETabPanelElement;\r\n}\r\n\r\ninterface HTMLETabPanelElement extends HTMLElement {\r\n    get tab(): HTMLETabElement | null;\r\n    connectedCallback(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tabpanel\": HTMLETabPanelElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tabpanel\"\r\n})\r\nclass HTMLETabPanelElementBase extends HTMLElement implements HTMLETabPanelElement {\r\n\r\n    get tab(): HTMLETabElement | null {\r\n        const {id} = this;\r\n        return (<Document | ShadowRoot>this.getRootNode()).querySelector<HTMLETabElement>(`e-tab[controls=${id}]`);\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n        const {tab} = this;\r\n        if (tab) {\r\n            customElements.upgrade(tab);\r\n            const {selected} = tab;\r\n            this.hidden = !selected;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabPanelElement: HTMLETabPanelElementConstructor = HTMLETabPanelElementBase;\r\n","import { CustomElement, element, AttributeProperty, QueryProperty } from \"../../Element\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeItemElement };\r\n\r\ninterface HTMLETreeItemElementConstructor {\r\n    prototype: HTMLETreeItemElement;\r\n    new(): HTMLETreeItemElement;\r\n}\r\n\r\ninterface HTMLETreeItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly group: HTMLETreeItemGroupElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    expanded: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    level: number;\r\n    type: \"leaf\" | \"parent\";\r\n    toggle(force?: boolean): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitem\": HTMLETreeItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-treeitem\"\r\n})\r\nclass HTMLETreeItemElementBase extends HTMLElement implements HTMLETreeItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    expanded!: boolean;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number, observed: true})\r\n    level!: number;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"leaf\"})\r\n    type!: \"leaf\" | \"parent\";\r\n\r\n    @QueryProperty({selector: \":scope > e-treeitemgroup[slot=group]\"})\r\n    group!: HTMLETreeItemGroupElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"arrow\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"group\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"expanded\": {\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const labelPart = this.shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"level\": {\r\n                this.style.setProperty(\"--level\", `${this.level}`);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {expanded} = this;\r\n        this.expanded = force ?? !expanded;\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemElement: HTMLETreeItemElementConstructor = HTMLETreeItemElementBase;","import { CustomElement } from \"../../Element\";\r\n\r\nexport { HTMLETreeItemGroupElement };\r\n\r\ninterface HTMLETreeItemGroupElementConstructor {\r\n    prototype: HTMLETreeItemGroupElement;\r\n    new(): HTMLETreeItemGroupElement;\r\n}\r\n\r\ninterface HTMLETreeItemGroupElement extends HTMLElement {}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitemgroup\": HTMLETreeItemGroupElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-treeitemgroup\"\r\n})\r\nclass HTMLETreeItemGroupElementBase extends HTMLElement implements HTMLETreeItemGroupElement {\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemGroupElement: HTMLETreeItemGroupElementConstructor = HTMLETreeItemGroupElementBase;","import { CustomElement, AttributeProperty } from \"../../Element\";\r\nimport { HTMLETreeItemElement } from \"./TreeItem\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeElement };\r\n\r\ninterface HTMLETreeElementConstructor {\r\n    prototype: HTMLETreeElement;\r\n    new(): HTMLETreeElement;\r\n}\r\n\r\ninterface HTMLETreeElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLETreeItemElement>;\r\n    readonly activeItem: HTMLETreeItemElement | null;\r\n    readonly dropTargetItem: HTMLETreeItemElement | null;\r\n    firstItem(): HTMLETreeItemElement | null;\r\n    droptarget: boolean;\r\n    name: string;\r\n    selectedItems(): HTMLETreeItemElement[];\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tree\": HTMLETreeElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tree\"\r\n})\r\nclass HTMLETreeElementBase extends HTMLElement implements HTMLETreeElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLETreeItemElement>;\r\n\r\n    get activeItem(): HTMLETreeItemElement | null {\r\n        return this.querySelector<HTMLETreeItemElement>(\r\n            \"e-treeitem[active]\"\r\n        );\r\n    }\r\n\r\n    get dropTargetItem(): HTMLETreeItemElement | null {\r\n        return this.querySelector<HTMLETreeItemElement>(\r\n            \"e-treeitem[droptarget]\"\r\n        );\r\n    }\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.items = this.getElementsByTagName(\"e-treeitem\");\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"dblclick\", this.#handleDblClickEvent.bind(this));\r\n        this.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    selectedItems(): HTMLETreeItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLETreeItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLETreeItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLETreeItemElement, to: HTMLETreeItemElement): HTMLETreeItemElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleItem = this.#nextItem(from);\r\n            while (nextVisibleItem && nextVisibleItem !== to) {\r\n                range.push(nextVisibleItem);\r\n                nextVisibleItem = this.#nextItem(nextVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleItem = this.#previousItem(from);\r\n            while (previousVisibleItem && previousVisibleItem !== to) {\r\n                range.push(previousVisibleItem);\r\n                previousVisibleItem = this.#previousItem(previousVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLETreeItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((item_i) => {\r\n            item_i.selected = false;\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLETreeItemElement | null): void {\r\n        const {activeItem} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = item;\r\n            item.active = true;\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n    \r\n    #setDropTargetItem(item: HTMLETreeItemElement | null): void {\r\n        const {dropTargetItem} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n        }\r\n    }\r\n\r\n    firstItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousSibling = <HTMLETreeItemElement | null>walker.previousSibling();\r\n        return previousSibling ?\r\n            this.#deepestItem(previousSibling) :\r\n            <HTMLETreeItemElement | null>walker.parentNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const {type, expanded} = item;\r\n        return <HTMLETreeItemElement | null>(\r\n            type === \"leaf\" ?\r\n                walker.nextNode() :\r\n                expanded ?\r\n                    walker.nextNode() :\r\n                    walker.nextSibling() ??\r\n                    (walker.parentNode(), walker.nextSibling())\r\n        );\r\n    }\r\n\r\n    #deepestItem(item: HTMLETreeItemElement): HTMLETreeItemElement {\r\n        if (item.expanded) {\r\n            const walker = this.#walker;\r\n            const lastItem = <HTMLETreeItemElement>walker.lastChild();\r\n            if (lastItem) {\r\n                return this.#deepestItem(lastItem);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, shiftKey, ctrlKey} = event;\r\n        const targetItem = <HTMLETreeItemElement | null>(<HTMLElement>target).closest(\"e-treeitem\");\r\n        if (targetItem) {\r\n            if (!shiftKey && !ctrlKey) {\r\n                this.#setSelection(targetItem);\r\n                const {type} = targetItem;\r\n                if (type == \"parent\") {\r\n                    targetItem.toggle();\r\n                }\r\n            }\r\n        }\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleDblClickEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        const targetItem = <HTMLETreeItemElement | null>(<HTMLElement>target).closest(\"e-treeitem\");\r\n        if (targetItem) {\r\n            const {type} = targetItem;\r\n            if (type == \"parent\") {\r\n                targetItem.toggle(true);\r\n            }\r\n            this.#setDropTargetItem(targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!this.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        const {root} = walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? root, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? root, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(\r\n                                firstItem,\r\n                                this.#deepestItem(lastItem)\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    if (activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                    else {\r\n                        const walker = this.#walker;\r\n                        const parentItem = <HTMLETreeItemElement>walker.parentNode();\r\n                        if (parentItem) {\r\n                            parentItem.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    if (!activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.#setActiveItem(null);\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (!this.contains(<Node | null>relatedTarget)) {\r\n            (activeItem ?? this.firstItem())?.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetItem = <HTMLETreeItemElement | null>(<HTMLElement>target).closest(\"e-treeitem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetItem);\r\n            this.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node | null>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey, button} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const {selected} = target;\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey && !selected) {\r\n                        this.#setSelection(target);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            target.blur();\r\n                        }\r\n                        (!selected) ?\r\n                            this.#addToSelection(target) :\r\n                            this.#removeFromSelection(target);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const {activeItem} = this\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                target\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(target);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETreeElement: HTMLETreeElementConstructor = HTMLETreeElementBase;","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEToolBarElement } from \"../toolbars/ToolBar\";\r\n\r\nexport { HTMLEListItemElement };\r\n\r\ninterface HTMLEListItemElementConstructor {\r\n    prototype: HTMLEListItemElement;\r\n    new(): HTMLEListItemElement;\r\n}\r\n\r\ninterface HTMLEListItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly badge: HTMLSpanElement | null;\r\n    readonly toolbar: HTMLEToolBarElement | null;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitem\": HTMLEListItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-listitem\"\r\n})\r\nclass HTMLEListItemElementBase extends HTMLElement implements HTMLEListItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    get badge(): HTMLElement | null {\r\n        return this.#badge;\r\n    }\r\n\r\n    get toolbar(): HTMLEToolBarElement | null {\r\n        return this.#toolbar;\r\n    }\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    #badge: HTMLElement | null;\r\n    #toolbar: HTMLEToolBarElement | null;\r\n    #menu: HTMLEMenuElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#badge = null;\r\n        this.#menu = null;\r\n        this.#toolbar = null;\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this))\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"toolbar\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#toolbar = element instanceof HTMLEToolBarElement ? element : null;\r\n                break;\r\n            }\r\n            case \"badge\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#badge = element instanceof HTMLSpanElement ? element : null;\r\n                break;\r\n            }\r\n            case \"menu\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#menu = element instanceof HTMLEMenuElement ? element : null;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEListItemElement: HTMLEListItemElementConstructor = HTMLEListItemElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEListItemElement } from \"./ListItem\";\r\n\r\nexport { HTMLEListItemGroupElement };\r\n\r\ninterface HTMLEListItemGroupElementConstructor {\r\n    prototype: HTMLEListItemGroupElement;\r\n    new(): HTMLEListItemGroupElement;\r\n}\r\n\r\ninterface HTMLEListItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitemgroup\": HTMLEListItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-listitemgroup\"\r\n})\r\nclass HTMLEListItemGroupElementBase extends HTMLElement implements HTMLEListItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEListItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEListItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEListItemGroupElement: HTMLEListItemGroupElementConstructor = HTMLEListItemGroupElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEListItemElement } from \"./ListItem\";\r\nimport { HTMLEListItemGroupElement } from \"./ListItemGroup\";\r\n\r\nexport { HTMLEListElement };\r\n\r\ninterface HTMLEListElementConstructor {\r\n    prototype: HTMLEListElement;\r\n    new(): HTMLEListElement;\r\n}\r\n\r\ninterface HTMLEListElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEListItemElement>;\r\n    readonly activeItem: HTMLEListItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    droptarget: boolean;\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    selectedItems(): HTMLEListItemElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-list\": HTMLEListElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-list\"\r\n})\r\nclass HTMLEListElementBase extends HTMLElement implements HTMLEListElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEListItemElement>;\r\n\r\n    get dropTargetItem(): HTMLEListItemElement | null {\r\n        return this.items[this.#dropTargetIndex] ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    #dropTargetIndex: number;\r\n    #activeIndex: number;\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        this.#dropTargetIndex = -1;\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.items = this.getElementsByTagName(\"e-listitem\");\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEListItemElement | null {\r\n        return this.items[this.activeIndex] ?? null;\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    selectedItems(): HTMLEListItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.#firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEListItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEListItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLEListItemElement, to: HTMLEListItemElement): HTMLEListItemElement[] {\r\n        const items = Array.from(this.items);\r\n        const fromIndex = items.indexOf(from);\r\n        const toIndex = items.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return items.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        selectedItems.forEach((item_i) => {\r\n            if (item_i.selected) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEListItemElement | null): void {\r\n        const {activeItem, items} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n            item.tabIndex = 0;\r\n            this.#activeIndex = Array.from(items).indexOf(item);\r\n        }\r\n    }\r\n\r\n    #setDropTargetItem(item: HTMLEListItemElement | null): void {\r\n        const {dropTargetItem, items} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n            this.#dropTargetIndex = Array.from(items).indexOf(item);\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n            this.#dropTargetIndex = -1;\r\n        }\r\n    }\r\n\r\n    #firstItem(): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLEListItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLEListItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEListItemElement): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEListItemElement | null>walker.previousNode();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEListItemElement): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const nextItem = <HTMLEListItemElement | null>walker.nextNode();\r\n        return nextItem;\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent) {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n            target.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey} = event;\r\n        const selectedItems = this.selectedItems();\r\n        if (target instanceof HTMLEListItemElement) {\r\n            if (!shiftKey && !ctrlKey) {\r\n                this.#setSelection(target);\r\n            }\r\n            else if (ctrlKey) {\r\n                (!target.selected) ?\r\n                    this.#addToSelection(target) :\r\n                    this.#removeFromSelection(target);\r\n                event.stopPropagation();\r\n            }\r\n            else if (shiftKey) {\r\n                const lastSelectedItem = selectedItems[selectedItems.length - 1];\r\n                if (lastSelectedItem) {\r\n                    const range = this.#getItemsRange(\r\n                        lastSelectedItem,\r\n                        target\r\n                    );\r\n                    if (range) {\r\n                        if (selectedItems.includes(target)) {\r\n                            this.#removeFromSelection(...range);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(...range);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.#setSelection(target);\r\n                }\r\n                event.stopPropagation();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            this.#setDropTargetItem(target);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n    \r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n        const relatedTargetHost =\r\n            relatedTargetRoot instanceof ShadowRoot ?\r\n            relatedTargetRoot.host :\r\n            relatedTarget;\r\n        if (!this.contains(<Node>relatedTargetHost)) {\r\n            this.#setDropTargetItem(null);\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    const walker = this.#walker;\r\n                    const {root} = walker;\r\n                    const firstItem = <HTMLEListItemElement>(\r\n                        walker.currentNode = walker.parentNode() ?? root, walker.firstChild()\r\n                    );\r\n                    const lastItem = <HTMLEListItemElement>(\r\n                        walker.currentNode = walker.parentNode() ?? root, walker.lastChild()\r\n                    );\r\n                    const range = this.#getItemsRange(\r\n                        firstItem,\r\n                        lastItem\r\n                    );\r\n                    if (range) {\r\n                        this.#setSelection(...range);\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                const {activeItem} = this;\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.#setActiveItem(null);\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            this.#setActiveItem(target);\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (!this.#onSelection) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEListItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEListItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEListElement: HTMLEListElementConstructor = HTMLEListElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEDraggableElement };\r\n\r\ninterface HTMLEDraggableElementConstructor {\r\n    prototype: HTMLEDraggableElement;\r\n    new(): HTMLEDraggableElement;\r\n}\r\n\r\ninterface HTMLEDraggableElement extends HTMLElement {\r\n    readonly referee: this | null;\r\n    readonly references: this[];\r\n    selected: boolean;\r\n    dragged: boolean;\r\n    dragovered: boolean;\r\n\r\n    connectedCallback(): void;\r\n    disconnectedCallback(): void;\r\n    getReference(): this;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-draggable\": HTMLEDraggableElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-draggable\"\r\n})\r\nclass HTMLEDraggableElementBase extends HTMLElement implements HTMLEDraggableElement {\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    dragovered!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    dragged!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    #referee: this | null;\r\n    readonly references: this[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            padding: 3px 4px;\r\n                            cursor: pointer;\r\n                            white-space: nowrap;\r\n                            border-radius: 4px;\r\n                            border: 1px solid black;\r\n                            user-select: none;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                            color: lightgray;\r\n                            border-color: lightgray;\r\n                        }\r\n        \r\n                        :host([selected]:active) {\r\n                            cursor: grabbing;\r\n                        }\r\n                        \r\n                        :host([selected]) {\r\n                            cursor: grab;\r\n                            font-weight: bold;\r\n                            outline: 1px auto black;\r\n                        }\r\n        \r\n                        :host([dragovered]) {\r\n                            border-style: dotted;\r\n                        }\r\n                        \r\n                        [part=\"container\"] {\r\n                            display: flex;\r\n                            align-items: center;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"container\"\r\n                },\r\n                children: [\r\n                    element(\"slot\", {\r\n                        children: [\r\n                            \"&nbsp;\"\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.references = [];\r\n        this.#referee = null;\r\n    }\r\n\r\n    get referee(): this | null {\r\n        return this.#referee;\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n        this.draggable = true;\r\n    }\r\n\r\n    disconnectedCallback(): void {\r\n        if (this.referee) {\r\n            const thisRefIndex = this.referee.references.indexOf(this);\r\n            if (thisRefIndex > -1) {\r\n                this.referee.references.splice(thisRefIndex, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    getReference(): this {\r\n        const reference = <this>this.cloneNode(true);\r\n        reference.#referee = this;\r\n        return reference;\r\n    }\r\n}\r\n\r\nvar HTMLEDraggableElement: HTMLEDraggableElementConstructor = HTMLEDraggableElementBase","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\n\r\nexport { HTMLEDragzoneElement };\r\n\r\ninterface HTMLEDragzoneElementConstructor {\r\n    prototype: HTMLEDragzoneElement;\r\n    new(): HTMLEDragzoneElement\r\n}\r\n\r\ninterface HTMLEDragzoneElement extends HTMLElement {\r\n    readonly draggables: HTMLEDraggableElement[];\r\n    readonly selectedDraggables: HTMLEDraggableElement[];\r\n    disabled: boolean;\r\n    selectDraggable(draggable: HTMLEDraggableElement): void;\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void;\r\n    clearSelection(): void;\r\n    connectedCallback(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dragzone\": HTMLEDragzoneElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dragzone\"\r\n})\r\nclass HTMLEDragzoneElementBase extends HTMLElement implements HTMLEDragzoneElement {\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    #draggables: HTMLEDraggableElement[];\r\n    #selectedDraggables: HTMLEDraggableElement[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                        }\r\n        \r\n                        [part=\"container\"] {\r\n                            position: relative;\r\n                            display: flex;\r\n                            flex-direction: column;\r\n                            padding-left: 2px;\r\n                            padding-right: 2px;\r\n                        }\r\n        \r\n                        ::slotted(*) {\r\n                            margin-top: 2px;\r\n                            margin-bottom: 2px;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"container\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n        this.#draggables = [];\r\n        this.#selectedDraggables = [];\r\n    }\r\n\r\n    get draggables(): HTMLEDraggableElement[] {\r\n        return this.#draggables;\r\n    }\r\n\r\n    get selectedDraggables(): HTMLEDraggableElement[] {\r\n        return this.#selectedDraggables;\r\n    }\r\n\r\n    selectDraggable(draggable: HTMLEDraggableElement): void {\r\n        if (!this.selectedDraggables.includes(draggable)) {\r\n            this.selectedDraggables.push(draggable);\r\n        }\r\n        if (!draggable.selected) {\r\n            draggable.selected = true;\r\n        }\r\n    }\r\n\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void {\r\n        const index = this.selectedDraggables.indexOf(draggable);\r\n        if (index > -1) {\r\n            if (draggable.selected) {\r\n                draggable.selected = false;\r\n            }\r\n            this.selectedDraggables.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.selectedDraggables.forEach((draggable) => {\r\n            draggable.selected = false;\r\n        });\r\n        this.#selectedDraggables = [];\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const draggables = slot.assignedElements().filter(\r\n                    elem => elem instanceof HTMLEDraggableElement\r\n                ) as HTMLEDraggableElement[];\r\n                this.#draggables = draggables;\r\n                this.draggables.forEach((draggable) => {\r\n                    draggable.draggable = true;\r\n                });\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Escape\":\r\n                    this.clearSelection();\r\n                    this.focus();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragstart\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                this.selectedDraggables.forEach((thisSelectedDraggable) => {\r\n                    thisSelectedDraggable.dragged = true;\r\n                });\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", this.id);\r\n                }\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event) => {\r\n            const dataTransfer = event.dataTransfer;\r\n            if (dataTransfer) {\r\n                dataTransfer.dropEffect = \"none\";\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"dragend\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                const thisDraggedDraggables = this.draggables.filter(draggable => draggable.dragged);\r\n                thisDraggedDraggables.forEach((thisDraggedDraggable) => {\r\n                    thisDraggedDraggable.dragged = false;\r\n                });\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            if (!this.contains(relatedTarget)) {\r\n                this.clearSelection();\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button == 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        if (!target.selected) {\r\n                            this.clearSelection();\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                    else if (event.ctrlKey) {\r\n                        (!target.selected) ?\r\n                            this.selectDraggable(target) :\r\n                            this.unselectDraggable(target);\r\n                    }\r\n                    else if (event.shiftKey) {\r\n                        if (this.selectedDraggables.length > 0) {\r\n                            const targetIndex = this.draggables.indexOf(target);\r\n                            const firstIndex = this.draggables.indexOf(this.selectedDraggables[0]);\r\n                            const direction = Math.sign(targetIndex - firstIndex);\r\n                            const fromIndex = (direction > 0) ? 0 : this.draggables.length - 1;\r\n                            const toIndex = (direction > 0) ? this.draggables.length - 1 : 0;\r\n                            const startRangeIndex = (direction > 0) ? firstIndex : targetIndex;\r\n                            const endRangeIndex = (direction > 0) ? targetIndex : firstIndex;\r\n                            for (let index = fromIndex; index !== (toIndex + direction); index += direction) {\r\n                                (index >= startRangeIndex && index <= endRangeIndex) ? \r\n                                    this.selectDraggable(this.draggables[index]) :\r\n                                    this.unselectDraggable(this.draggables[index]);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.clearSelection();\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mouseup\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button == 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        this.draggables.forEach((thisDraggable) => {\r\n                            if (thisDraggable !== target) {\r\n                                this.unselectDraggable(thisDraggable);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEDragzoneElement: HTMLEDragzoneElementConstructor = HTMLEDragzoneElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\nimport { HTMLEDragzoneElement } from \"./Dragzone\";\r\n\r\nexport { HTMLEDropzoneElement };\r\nexport { EDataChangeEvent };\r\n\r\ninterface HTMLEDropzoneElementConstructor {\r\n    prototype: HTMLEDropzoneElement;\r\n    new(): HTMLEDropzoneElement;\r\n}\r\n\r\ninterface HTMLEDropzoneElement extends HTMLEDragzoneElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    dragovered: DropzoneDragoveredType | null;\r\n    name: string;\r\n    multiple: boolean;\r\n    placeholder: string;\r\n\r\n    droptest: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => void) | null;\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): void;\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean): void;\r\n\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ntype DropzoneDragoveredType = \"self\" | \"draggable\" | \"appendarea\";\r\n\r\ntype EDataChangeEvent = CustomEvent<{\r\n    action: \"insert\" | \"remove\";\r\n    draggables: HTMLEDraggableElement[];\r\n    position: number;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dropzone\": HTMLEDropzoneElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"e_datachange\": EDataChangeEvent,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dropzone\"\r\n})\r\nclass HTMLEDropzoneElementBase extends HTMLEDragzoneElement implements HTMLEDropzoneElement {\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    dragovered!: DropzoneDragoveredType | null;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    placeholder!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    multiple!: boolean;\r\n\r\n    droptest!: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => boolean) | null;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.shadowRoot!.querySelector(\"style\")!.append(/*css*/`\r\n            :host {\r\n                border: 1px dashed gray;\r\n            }\r\n\r\n            :host(:not([multiple]):not(:empty)) [part=\"appendarea\"],\r\n            :host(:not(:empty):not([dragovered])) [part=\"appendarea\"] {\r\n                display: none !important;\r\n            }\r\n\r\n            [part=\"appendarea\"] {\r\n                display: block;\r\n                margin: 2px;\r\n                border-radius: 4px;\r\n                border: 1px dotted black;\r\n            }\r\n\r\n            :host(:not([dragovered=\"appendarea\"])) [part=\"appendarea\"] {\r\n                border-color: transparent;\r\n            }\r\n            \r\n            [part=\"placeholder\"] {\r\n                display: inline-block;\r\n                color: grey;\r\n                pointer-events: none;\r\n                user-select: none;\r\n            }\r\n        `);\r\n\r\n        this.shadowRoot.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"appendarea\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"placeholder\"\r\n                        },\r\n                        children: [\r\n                            \"&nbsp;\"\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.droptest = null;\r\n    }\r\n    \r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        const appendAreaPart = this.shadowRoot!.querySelector<HTMLDivElement>(\"[part='appendarea']\");\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Delete\":\r\n                    if (this == event.target) {\r\n                        this.removeDraggables();\r\n                    }\r\n                    else {\r\n                        this.removeDraggables(draggable => draggable.selected);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragover\", (event: DragEvent) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragover\", (event) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragenter\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                target.dragovered = true;\r\n                this.dragovered = \"draggable\";\r\n            }\r\n            else {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragenter\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"appendarea\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event: DragEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                if (target == this) {\r\n                    if (appendAreaPart) {\r\n                        this.dragovered = \"self\";\r\n                    }\r\n                    if (!this.draggables.includes(relatedTarget)) {\r\n                        this.dragovered = null;\r\n                    }\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                }\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragleave\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n        \r\n        this.addEventListener(\"drop\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                let dropIndex = this.draggables.length;\r\n                if (target == this) {\r\n                    this.dragovered = null;\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                    dropIndex = this.draggables.indexOf(target);\r\n                }\r\n\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    const dragzoneId = dataTransfer.getData(\"text/plain\");\r\n                    const dragzone = document.getElementById(dragzoneId);\r\n                    if (dragzone instanceof HTMLEDragzoneElement) {\r\n                        const selectedDraggables = dragzone.selectedDraggables;\r\n                        if (selectedDraggables) {\r\n                            selectedDraggables.forEach((selectedDraggable) => {\r\n                                selectedDraggable.dragged = false;\r\n                            });\r\n                            if (dragzone instanceof HTMLEDropzoneElement) {\r\n                                dragzone.removeDraggables((draggable) => selectedDraggables.includes(draggable));\r\n                            }\r\n                            dragzone.clearSelection();\r\n                            this.addDraggables(selectedDraggables, dropIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.dragovered = null;\r\n            event.preventDefault();\r\n        });\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"placeholder\": {\r\n                const placeholderPart = this.shadowRoot.querySelector(\"[part='placeholder']\");\r\n                if (placeholderPart) {\r\n                    placeholderPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): HTMLEDraggableElement[] | null {\r\n        if (draggables.length > 0) {\r\n            let dataTransferSuccess = true;\r\n            if (this.droptest) {\r\n                dataTransferSuccess = this.droptest(this, draggables);\r\n            }\r\n            \r\n            let newDraggables: HTMLEDraggableElement[] = [];\r\n            let insertionPosition = -1;\r\n            if (dataTransferSuccess) {\r\n                if (this.multiple) {\r\n                    draggables.forEach((draggable) => {\r\n                        let newDraggable = draggable.getReference();\r\n                        if (position > -1 && position < this.draggables.length) {\r\n                            this.draggables[position].insertAdjacentElement(\"beforebegin\", newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? position : insertionPosition;\r\n                        }\r\n                        else {\r\n                            this.appendChild(newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? this.draggables.length - 1 : insertionPosition;\r\n                        }\r\n                        newDraggables.push(newDraggable);\r\n                    });\r\n                }\r\n                else {\r\n                    let newDraggable = draggables[0].getReference();\r\n                    if (this.draggables.length > 0) {\r\n                        this.replaceChild(newDraggable, this.draggables[0]);\r\n                    }\r\n                    else {\r\n                        this.appendChild(newDraggable);\r\n                    }\r\n                    newDraggables.push(newDraggable);\r\n                    insertionPosition = 0;\r\n                }\r\n            }\r\n            \r\n            const slot = this.shadowRoot?.querySelector(\"slot\");\r\n            if (slot) {\r\n                slot.addEventListener(\"slotchange\", () => {\r\n                    this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                        bubbles: true,\r\n                        detail: {\r\n                            action: \"insert\",\r\n                            draggables: newDraggables,\r\n                            position: insertionPosition\r\n                        }\r\n                    }));\r\n                }, {once: true});\r\n            }\r\n            return newDraggables;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean = () => true) {\r\n        let toRemove = this.draggables.filter(\r\n            (value: HTMLEDraggableElement, index: number) => {\r\n                return predicate(value, index);\r\n            }\r\n        );\r\n        let atPosition = this.draggables.indexOf(toRemove[0]);\r\n        toRemove.forEach((draggable) => {\r\n            draggable.remove(); \r\n        });\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                    bubbles: true,\r\n                    detail: {\r\n                        action: \"remove\",\r\n                        draggables: toRemove,\r\n                        position: atPosition\r\n                    }\r\n                }));\r\n            }, {once: true});\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEDropzoneElement: HTMLEDropzoneElementConstructor = HTMLEDropzoneElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEDialogElement };\r\n\r\ninterface HTMLEDialogElementConstructor {\r\n    prototype: HTMLEDialogElement;\r\n    new(): HTMLEDialogElement;\r\n}\r\n\r\ntype DialogElementType = \"confirm\" | \"alert\";\r\n\r\ninterface HTMLEDialogElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: DialogElementType;\r\n    open(): void;\r\n    close(): void;\r\n    cancel(): void;\r\n    confirm(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dialog\": HTMLEDialogElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"open\": Event,\r\n        \"close\": Event,\r\n        \"cancel\": Event,\r\n        \"confirm\": Event,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dialog\"\r\n})\r\nclass HTMLEDialogElementBase extends HTMLElement implements HTMLEDialogElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: DialogElementType;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            padding: 6px;\r\n                            background-color: white;\r\n        \r\n                            -webkit-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            -moz-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                        }\r\n        \r\n                        button {\r\n                            cursor: pointer;\r\n                        }\r\n        \r\n                        [part=\"actions\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part=\"header\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part=\"button\"]:not(:first-child) {\r\n                            margin-left: 4px;\r\n                        }\r\n        \r\n                        :host([type=\"confirm\"]) [part=\"ok-button\"] {\r\n                            display: none !important;\r\n                        }\r\n        \r\n                        :host([type=\"alert\"]) [part=\"cancel-button\"],\r\n                        :host([type=\"alert\"]) [part=\"confirm-button\"] {\r\n                            display: none !important;\r\n                        }\r\n                    `\r\n                    ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"header\"\r\n                },\r\n                children: [\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button close-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"x\"\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"hr\", {\r\n                attributes: {\r\n                    part: \"separator\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"body\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"hr\", {\r\n                attributes: {\r\n                    part: \"separator\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"actions\",\r\n                },\r\n                children: [\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button cancel-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"Cancel\"\r\n                        ]\r\n                    }),\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button confirm-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"Confirm\"\r\n                        ]\r\n                    }),\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button ok-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"OK\"\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n        );\r\n    }\r\n\r\n    connectedCallback() {\r\n        this.shadowRoot.addEventListener(\"click\", this);\r\n    }\r\n\r\n    handleEvent(event: Event) {\r\n        const {type, target} = event;\r\n        switch (type) {\r\n            case \"click\":\r\n                const {part} = <Element>target;\r\n                if (part.contains(\"close-button\") || part.contains(\"cancel-button\")) {\r\n                    this.cancel();\r\n                }\r\n                else if (part.contains(\"confirm-button\") || part.contains(\"ok-button\")) {\r\n                    this.confirm();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    open(): void {\r\n        this.dispatchEvent(new CustomEvent(\"open\", {bubbles: true}));\r\n    }\r\n\r\n    close(): void {\r\n        this.dispatchEvent(new CustomEvent(\"close\", {bubbles: true}));\r\n    }\r\n\r\n    cancel(): void {\r\n        this.dispatchEvent(new CustomEvent(\"cancel\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n\r\n    confirm(): void {\r\n        this.dispatchEvent(new CustomEvent(\"confirm\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n}\r\n\r\nvar HTMLEDialogElement: HTMLEDialogElementConstructor = HTMLEDialogElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionElement };\r\n\r\ninterface HTMLEOptionElementConstructor {\r\n    prototype: HTMLEOptionElement;\r\n    new(): HTMLEOptionElement;\r\n}\r\n\r\ninterface HTMLEOptionElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n    name: string;\r\n    value: string;\r\n    label: string;\r\n    disabled: boolean;\r\n    selected: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-option\": HTMLEOptionElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-option\"\r\n})\r\nclass HTMLEOptionElementBase extends HTMLElement implements HTMLEOptionElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n    \r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"label\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const internals = this.attachInternals();\r\n        internals.role = \"option\";\r\n        this.internals = internals;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector<HTMLElement>(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"selected\": {\r\n                const {internals, selected} = this;\r\n                internals.ariaSelected = String(selected);\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEOptionElement: HTMLEOptionElementConstructor = HTMLEOptionElementBase;","import { CustomElement, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionGroupElement };\r\n\r\ninterface HTMLEOptionGroupElementConstructor {\r\n    prototype: HTMLEOptionGroupElement;\r\n    new(): HTMLEOptionGroupElement;\r\n}\r\n\r\ninterface HTMLEOptionGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-optiongroup\": HTMLEOptionGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-optiongroup\"\r\n})\r\nclass HTMLEOptionGroupElementBase extends HTMLElement implements HTMLEOptionGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n}\r\n\r\nvar HTMLEOptionGroupElement: HTMLEOptionGroupElementConstructor = HTMLEOptionGroupElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEOptionElement } from \"./Option\";\r\nimport { HTMLEOptionGroupElement } from \"./OptionGroup\";\r\n\r\nexport { HTMLESelectElement };\r\n\r\ninterface HTMLESelectElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n    get options(): HTMLEOptionElement[];\r\n    get activeOption(): HTMLEOptionElement | null;\r\n    get selectedOption(): HTMLEOptionElement | null;\r\n    name: string;\r\n    value: string;\r\n    expanded: boolean;\r\n    expand(): void;\r\n    collapse(): void;\r\n    toggle(force?: boolean): void;\r\n}\r\n\r\ninterface HTMLESelectElementConstructor {\r\n    prototype: HTMLESelectElement;\r\n    new(): HTMLESelectElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-select\": HTMLESelectElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar mutationObserver: MutationObserver;\r\n\r\n@CustomElement({\r\n    name: \"e-select\"\r\n})\r\nclass HTMLESelectElementBase extends HTMLElement implements HTMLESelectElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n\r\n    static get formAssociated(): boolean {\r\n        return true;\r\n    }\r\n\r\n    get options(): HTMLEOptionElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEOptionElement>(\r\n            \"e-option\"\r\n        ));\r\n    }\r\n\r\n    get activeOption(): HTMLEOptionElement | null {\r\n        return this.querySelector(\"e-option:focus-within\") ?? null;\r\n    }\r\n\r\n    get selectedOption(): HTMLEOptionElement | null {\r\n        return this.querySelector(\"e-option[selected]\") ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"select\", observed: true})\r\n    type!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    #walker: TreeWalker;\r\n    #wasExpandedOnMouseDown: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"output\", {\r\n                        attributes: {\r\n                            part: \"value\"\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"box\"\r\n                },\r\n                children: element(\"slot\")\r\n            })\r\n        );\r\n        mutationObserver = new MutationObserver(\r\n            (mutationsList: MutationRecord[]) => {\r\n                mutationsList.forEach((mutation: MutationRecord) => {\r\n                    const {target} = mutation;\r\n                    const select = <HTMLESelectElementBase>target;\r\n                    const {selectedOption, value, options} = select;\r\n                    if (!selectedOption) {\r\n                        const optionToSelect = value ? options.find(\r\n                            option_i => option_i.value === value\r\n                        ) : select.#firstOption();\r\n                        if (optionToSelect) {\r\n                            optionToSelect.selected = true;\r\n                        }\r\n                        else {\r\n                            select.#setSelectedOption(null);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        )\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const internals = this.attachInternals();\r\n        internals.role = \"combobox\";\r\n        this.internals = internals;\r\n        this.#wasExpandedOnMouseDown = false;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        mutationObserver.observe(\r\n            this, {\r\n                childList: true,\r\n                subtree: true\r\n            }\r\n        );\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {options, selectedOption, value} = this;\r\n        const tabindex = this.getAttribute(\"tabindex\");\r\n        this.tabIndex = tabindex !== null ? parseInt(tabindex) : 0;\r\n        customElements.upgrade(this);\r\n        const optionToSelect = selectedOption ?? (\r\n            value ? options.find(\r\n                option_i => option_i.value === value\r\n            ) : null\r\n        ) ?? this.#firstOption();\r\n        if (optionToSelect) {\r\n            if (optionToSelect === selectedOption) {\r\n                this.#setSelectedOption(selectedOption);\r\n            }\r\n            else {\r\n                this.#selectOption(optionToSelect);\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {expanded} = this;\r\n        if (!expanded) {\r\n            this.expanded = true;\r\n            this.#positionBox();\r\n            const {selectedOption} = this;\r\n            if (selectedOption) {\r\n                selectedOption.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {expanded} = this;\r\n        if (expanded) {\r\n            this.expanded = false;\r\n            this.focus();\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {expanded} = this;\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n    \r\n    #value(): HTMLElement {\r\n        return this.shadowRoot.querySelector<HTMLElement>(\"[part=value]\")!;\r\n    }\r\n\r\n    #box(): HTMLElement {\r\n        return this.shadowRoot.querySelector<HTMLElement>(\"[part=box]\")!;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEOptionElement && !node.disabled && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        else if (node instanceof HTMLEOptionGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEOptionElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEOptionElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousOption(option: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLEOptionElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextOption(option: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLEOptionElement | null>walker.nextNode();\r\n    }\r\n\r\n    #selectOption(option: HTMLEOptionElement) {\r\n        const {selectedOption} = this;\r\n        if (option !== selectedOption) {\r\n            option.selected = true;\r\n        }\r\n    }\r\n    \r\n    #setSelectedOption(option: HTMLEOptionElement | null) {\r\n        const {label, value} = option ?? {\r\n            label: \"\",\r\n            value: \"\"\r\n        };\r\n        const {internals} = this;\r\n        this.#value().textContent = label;\r\n        internals.setFormValue(value);\r\n    }\r\n\r\n    #positionBox(): void {\r\n        const box = this.#box()\r\n        const {style: optionsStyle} = box;\r\n        const {bottom, left} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        optionsStyle.setProperty(\"top\", `${bottom + scrollY}px`);\r\n        optionsStyle.setProperty(\"left\", `${left + scrollX}px`);\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const wasExpandedOnMouseDown = this.#wasExpandedOnMouseDown;\r\n        if (!wasExpandedOnMouseDown) {\r\n            const {selectedOption} = this;\r\n            this.expand();\r\n            (selectedOption ?? this.#firstOption() ?? this).focus({preventScroll: true});\r\n        }\r\n        else {\r\n            this.collapse();\r\n            const targetOption = (<HTMLElement>target).closest<HTMLEOptionElement>(\"e-option\");\r\n            if (targetOption) {\r\n                this.#selectOption(targetOption);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin || this === relatedTarget) {\r\n            this.collapse();\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(): void {\r\n        const {expanded} = this;\r\n        this.#wasExpandedOnMouseDown = expanded;\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetOption = (<Element>target).closest<HTMLEOptionElement>(\"e-option\");\r\n        if (targetOption) {\r\n            targetOption.focus({preventScroll: true});\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded, activeOption, selectedOption} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                if (expanded) {\r\n                    const previousOption = activeOption ?\r\n                        this.#previousOption(activeOption) :\r\n                        this.#firstOption();\r\n                    if (previousOption) {\r\n                        previousOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const previousOption = selectedOption ?\r\n                        this.#previousOption(selectedOption) :\r\n                        this.#firstOption();\r\n                    if (previousOption) {\r\n                        this.#selectOption(previousOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (expanded) {\r\n                    const nextOption = activeOption ?\r\n                        this.#nextOption(activeOption) :\r\n                        this.#lastOption();\r\n                    if (nextOption) {\r\n                        nextOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const nextOption = selectedOption ?\r\n                        this.#nextOption(selectedOption) :\r\n                        this.#lastOption();\r\n                    if (nextOption) {\r\n                        this.#selectOption(nextOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstOption = this.#firstOption();\r\n                if (firstOption) {\r\n                    if (expanded) {\r\n                        firstOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(firstOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastOption = this.#lastOption();\r\n                if (lastOption) {\r\n                    if (expanded) {\r\n                        lastOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(lastOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                this.toggle();\r\n                const {expanded} = this;\r\n                if (expanded) {\r\n                    const {selectedOption} = this;\r\n                    (selectedOption ?? this.#firstOption())?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    if (activeOption) {\r\n                        this.#selectOption(activeOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.collapse();\r\n                    event.stopPropagation();\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            default: {\r\n                const {length: keyLength} = key;\r\n                if (keyLength == 1) {\r\n                    const keyCode = key.charCodeAt(0);\r\n                    const {options} = this;\r\n                    const activeIndex = activeOption ? options.indexOf(activeOption) : -1;\r\n                    const matchingOption = options.find(\r\n                        (option_i, i) => option_i.label.toLowerCase().charCodeAt(0) == keyCode && i > activeIndex\r\n                    ) ?? options.find(\r\n                        (option_i) => option_i.label.toLowerCase().charCodeAt(0) == keyCode\r\n                    );\r\n                    if (matchingOption) {\r\n                        matchingOption.focus({preventScroll: true});\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    #handleSelectEvent(event: Event): void {\r\n        const {target} = event;\r\n        const targetOption = (<Element>target).closest<HTMLEOptionElement>(\"e-option\");\r\n        if (targetOption) {\r\n            const {selected} = targetOption;\r\n            if (selected) {\r\n                const {options} = this;\r\n                options.forEach((option_i) => {\r\n                    if (option_i !== targetOption && option_i.selected) {\r\n                        option_i.selected = false;\r\n                    }\r\n                });\r\n                this.#setSelectedOption(targetOption);\r\n            }\r\n            else {\r\n                const {selectedOption} = this;\r\n                if (selectedOption === null) {\r\n                    const firstOption = this.#firstOption();\r\n                    if (firstOption !== null) {\r\n                        this.#setSelectedOption(firstOption);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLESelectElement: HTMLESelectElementConstructor = HTMLESelectElementBase;","import { CustomElement } from \"../Element\";\r\n\r\nexport { HTMLESeparatorElement };\r\n\r\ninterface HTMLESeparatorElementConstructor {\r\n    prototype: HTMLESeparatorElement;\r\n    new(): HTMLESeparatorElement;\r\n}\r\n\r\ninterface HTMLESeparatorElement extends HTMLElement {}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-separator\": HTMLESeparatorElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-separator\"\r\n})\r\nclass HTMLESeparatorElementBase extends HTMLElement implements HTMLESeparatorElement {\r\n    #internals: ElementInternals;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#internals = this.attachInternals();\r\n        this.#internals.role = \"separator\";\r\n    }\r\n}\r\n\r\nvar HTMLESeparatorElement: HTMLESeparatorElementConstructor = HTMLESeparatorElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEToolTipElement };\r\n\r\ninterface HTMLEToolTipElementConstructor {\r\n    prototype: HTMLEToolTipElement;\r\n    new(): HTMLEToolTipElement;\r\n}\r\n\r\ninterface HTMLEToolTipElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    htmlFor: string;\r\n    position: \"top\" | \"bottom\" | \"right\" | \"left\";\r\n    visible: boolean;\r\n    show(): void;\r\n    hide(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tooltip\": HTMLEToolTipElement;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar HIDE_DELAY_MS = 200;\r\nvar SHOW_DELAY_MS = 200;\r\n\r\n@CustomElement({\r\n    name: \"e-tooltip\"\r\n})\r\nclass HTMLEToolTipElementBase extends HTMLElement implements HTMLEToolTipElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String, observed: true, name: \"for\"})\r\n    htmlFor!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"top\"})\r\n    position!: \"top\" | \"bottom\" | \"right\" | \"left\";\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    visible!: boolean;\r\n\r\n    #target: HTMLElement | null;\r\n    #targetListenerObject: EventListenerObject;\r\n    #documentListenerObject: EventListenerObject;\r\n    #toggleAnimation: Animation | null;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"container\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"arrow\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#toggleAnimation = null;\r\n        this.#targetListenerObject = (function(tooltip) {\r\n            return {\r\n                handleEvent(event: Event) {\r\n                    const {type} = event;\r\n                    switch (type) {\r\n                        case \"mouseenter\": {\r\n                            tooltip.#handleTargetMouseEnterEvent();\r\n                            break;\r\n                        }\r\n                        case \"mouseleave\": {\r\n                            tooltip.#handleTargetMouseLeaveEvent();\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n        })(this);\r\n        this.#documentListenerObject = (function(tooltip) {\r\n            return {\r\n                handleEvent(event: Event) {\r\n                    const {type} = event;\r\n                    switch (type) {\r\n                        case \"keydown\": {\r\n                            tooltip.#handleDocumentKeyDownEvent(<KeyboardEvent>event);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n        })(this);\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {htmlFor} = this;\r\n        this.#setTarget(htmlFor);\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"for\": {\r\n                this.#setTarget(newValue);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    show(): void {\r\n        this.visible = true;\r\n        let toggleAnimation = this.#toggleAnimation;\r\n        if (toggleAnimation !== null) {\r\n            const {id} = toggleAnimation;\r\n            if (id === \"hide\") {\r\n                toggleAnimation.cancel();\r\n            }\r\n        }\r\n        toggleAnimation = this.animate([\r\n            { opacity: 0 },\r\n            { opacity: 1 }\r\n        ], {\r\n            id: \"show\",\r\n            duration: SHOW_DELAY_MS\r\n        })\r\n        const {finished} = toggleAnimation;\r\n        finished.then(\r\n            () => {\r\n                this.#toggleAnimation = null;\r\n            },\r\n            () => {\r\n                this.visible = false;\r\n            }\r\n        );\r\n        this.#toggleAnimation = toggleAnimation;\r\n        this.#position();\r\n    }\r\n\r\n    hide(): void {\r\n        let toggleAnimation = this.#toggleAnimation;\r\n        if (toggleAnimation !== null) {\r\n            const {id} = toggleAnimation;\r\n            if (id === \"show\") {\r\n                toggleAnimation.cancel();\r\n            }\r\n        }\r\n        toggleAnimation = this.animate([\r\n            { opacity: 1 },\r\n            { opacity: 0 }\r\n        ], {\r\n            id: \"hide\",\r\n            duration: HIDE_DELAY_MS\r\n        });\r\n        const {finished} = toggleAnimation;\r\n        finished.then(\r\n            () => {\r\n                this.visible = false;\r\n            },\r\n            () => {\r\n                this.visible = true;\r\n            }\r\n        );\r\n        this.#toggleAnimation = toggleAnimation;\r\n    }\r\n\r\n    #arrow(): HTMLElement {\r\n        return this.shadowRoot.querySelector<HTMLElement>(\"[part=arrow]\")!;\r\n    }\r\n\r\n    #setTarget(id: string | null): void {\r\n        const target = id ? document.getElementById(id) : null;\r\n        if (target !== null) {\r\n            const oldTarget = this.#target;\r\n            if (oldTarget) {\r\n                oldTarget.removeEventListener(\"mouseenter\", this.#targetListenerObject);\r\n                oldTarget.removeEventListener(\"mouseleave\", this.#targetListenerObject);\r\n            }\r\n            target.addEventListener(\"mouseenter\", this.#targetListenerObject);\r\n            target.addEventListener(\"mouseleave\", this.#targetListenerObject);\r\n        }\r\n        this.#target = target;\r\n    }\r\n\r\n    #position(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const {top: targetTop, bottom: targetBottom, left: targetLeft, right: targetRight} = target.getBoundingClientRect();\r\n            const {width: tooltipWidth, height: tooltipHeight} = this.getBoundingClientRect();\r\n            const tooltipHalfWidth = tooltipWidth / 2;\r\n            const tooltipHalfHeight = tooltipHeight / 2;\r\n            const targetCenter = (targetRight + targetLeft) / 2;\r\n            const targetMiddle = (targetBottom + targetTop) / 2;\r\n            const {position, style: tooltipStyle} = this;\r\n            const arrow = this.#arrow();\r\n            const {style: arrowStyle} = arrow;\r\n            const {width: arrowWidth, height: arrowHeight} = arrow.getBoundingClientRect();\r\n            const arrowHalfWidth = arrowWidth / 2;\r\n            const arrowHalfHeight = arrowHeight / 2;\r\n            const {clientWidth} = document.body;\r\n            switch (position) {\r\n                case \"top\": {\r\n                    tooltipStyle.setProperty(\"top\", `${targetTop - tooltipHeight - arrowHalfHeight}px`);\r\n                    tooltipStyle.setProperty(\"left\", `${\r\n                        Math.max(0, Math.min(targetCenter - tooltipHalfWidth, clientWidth - tooltipWidth))\r\n                    }px`);\r\n                    arrowStyle.setProperty(\"top\", `${targetTop - arrowHalfHeight}px`);\r\n                    arrowStyle.setProperty(\"left\", `${targetCenter}px`);\r\n                    break;\r\n                }\r\n                case \"bottom\": {\r\n                    tooltipStyle.setProperty(\"top\", `${targetBottom + arrowHalfHeight}px`);\r\n                    tooltipStyle.setProperty(\"left\", `${\r\n                        Math.max(0, Math.min(targetCenter - tooltipHalfWidth, clientWidth - tooltipWidth))\r\n                    }px`);\r\n                    arrowStyle.setProperty(\"top\", `${targetBottom + arrowHalfHeight}px`);\r\n                    arrowStyle.setProperty(\"left\", `${targetCenter}px`);\r\n                    break;\r\n                }\r\n                case \"left\": {\r\n                    tooltipStyle.setProperty(\"top\", `${targetMiddle - tooltipHalfHeight}px`);\r\n                    tooltipStyle.setProperty(\"left\", `${targetLeft - tooltipWidth - arrowHalfWidth}px`);\r\n                    arrowStyle.setProperty(\"top\", `${targetMiddle}px`);\r\n                    arrowStyle.setProperty(\"left\", `${targetLeft - arrowHalfWidth}px`);\r\n                    break;\r\n                }\r\n                case \"right\": {\r\n                    tooltipStyle.setProperty(\"top\", `${targetMiddle - tooltipHalfHeight}px`);\r\n                    tooltipStyle.setProperty(\"left\", `${targetRight + arrowHalfWidth}px`);\r\n                    arrowStyle.setProperty(\"top\", `${targetMiddle}px`);\r\n                    arrowStyle.setProperty(\"left\", `${targetRight + arrowHalfWidth}px`);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleTargetMouseEnterEvent(): void {\r\n        this.show();\r\n        document.addEventListener(\"keydown\", this.#documentListenerObject);\r\n    }\r\n\r\n    #handleTargetMouseLeaveEvent(): void {\r\n        this.hide();\r\n        document.removeEventListener(\"keydown\", this.#documentListenerObject);\r\n    }\r\n\r\n    #handleDocumentKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        switch (key) {\r\n            case \"Escape\": {\r\n                this.hide();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolTipElement: HTMLEToolTipElementConstructor = HTMLEToolTipElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEHandleElement };\r\n\r\ninterface HTMLEHandleElementConstructor {\r\n    prototype: HTMLEHandleElement;\r\n    new(): HTMLEHandleElement;\r\n}\r\n\r\ninterface HTMLEHandleElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    controls: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-handle\": HTMLEHandleElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"move\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-handle\"\r\n})\r\nclass HTMLEHandleElementBase extends HTMLElement implements HTMLEHandleElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                            \r\n                            width: 24px;\r\n                            height: 12px;\r\n                            \r\n                            background-color: rgb(0, 128, 255);\r\n\r\n                            -webkit-mask-image: url(\"assets/dots.png\");\r\n                            mask-image: url(\"assets/dots.png\");\r\n\r\n                            -webkit-mask-repeat: repeat;\r\n                            mask-repeat: repeat;\r\n                            cursor: move;\r\n                        }\r\n                    `\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"controls\": {\r\n                const {controls} = this;\r\n                this.#target = document.getElementById(controls);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        this.#target = document.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            const target = this.#target;\r\n            if (target !== null) {\r\n                const targetComputedStyle = window.getComputedStyle(target);\r\n                const {movementX, movementY} = event;\r\n                const {width: rectWidth, height: rectHeight} = target.getBoundingClientRect();\r\n                const outerElement = target.parentElement ?? document.body;\r\n                const {\r\n                    left: outerRectLeft, right: outerRectRight,\r\n                    top: outerRectTop, bottom: outerRectBottom\r\n                } = outerElement.getBoundingClientRect();\r\n                const left = parseFloat(targetComputedStyle.getPropertyValue(\"left\"));\r\n                const newLeft = Math.max(outerRectLeft, Math.min(Math.trunc(left + movementX), outerRectRight - rectWidth));\r\n                const top = parseFloat(targetComputedStyle.getPropertyValue(\"top\"));\r\n                const newTop = Math.max(outerRectTop, Math.min(Math.trunc(top + movementY), outerRectBottom - rectHeight));\r\n                target.style.setProperty(\"left\", `${newLeft}px`);\r\n                target.style.setProperty(\"top\", `${newTop}px`);\r\n                this.dispatchEvent(new CustomEvent(\"move\"));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEHandleElement: HTMLEHandleElementConstructor = HTMLEHandleElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEHeightSashElement };\r\n\r\ninterface HTMLEHeightSashElementConstructor {\r\n    prototype: HTMLEHeightSashElement;\r\n    new(): HTMLEHeightSashElement;\r\n}\r\n\r\ninterface HTMLEHeightSashElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    controls: string;\r\n    growdir: \"top\" | \"bottom\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-hsash\": HTMLEHeightSashElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"resize\": Event;\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-hsash\"\r\n})\r\nclass HTMLEHeightSashElementBase extends HTMLElement implements HTMLEHeightSashElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"top\"})\r\n    growdir!: \"top\" | \"bottom\";\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n    #queuedPointerCallback: FrameRequestCallback | null;\r\n    #pointerMovement: number;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#target = null;\r\n        this.#queuedPointerCallback = null;\r\n        this.#pointerMovement = 0;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    #pointerMoveCallback(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const {style} = target;\r\n            const {growdir} = this;\r\n            const movementY = this.#pointerMovement;\r\n            const height = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            const newHeight = Math.trunc(height + (growdir == \"top\" ? -1 : 1) * movementY);\r\n            style.setProperty(\"height\", `${newHeight}px`);\r\n            const computedNewHeight = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            style.setProperty(\"height\", `${computedNewHeight}px`);\r\n            this.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        this.#queuedPointerCallback = null;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        const rootNode = <ShadowRoot | Document>this.getRootNode();\r\n        this.#target = rootNode.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            if (this.#queuedPointerCallback == null) {\r\n                this.#pointerMovement = event.movementY;\r\n                this.#queuedPointerCallback = this.#pointerMoveCallback.bind(this);\r\n                requestAnimationFrame(this.#queuedPointerCallback);\r\n            }\r\n            else {\r\n                this.#pointerMovement += event.movementY;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n}\r\n\r\nvar HTMLEHeightSashElement: HTMLEHeightSashElementConstructor = HTMLEHeightSashElementBase;","import { CustomElement, AttributeProperty } from \"../Element\";\r\n\r\nexport { HTMLEImportElement };\r\n\r\ninterface HTMLEImportElementConstructor {\r\n    prototype: HTMLEImportElement;\r\n    new(): HTMLEImportElement;\r\n}\r\n\r\ninterface HTMLEImportElement extends HTMLElement {\r\n    src: string;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-import\": HTMLEImportElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"load\": Event;\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-import\"\r\n})\r\nclass HTMLEImportElementBase extends HTMLElement implements HTMLEImportElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    src!: string;\r\n    \r\n    connectedCallback(): void {\r\n        const {src} = this;\r\n        if (src) {\r\n            this.#importRequest(src);\r\n        }\r\n    }\r\n\r\n    async #importRequest(src: string): Promise<void> {\r\n        this.outerHTML = await fetch(src).then((response: Response) => {\r\n            if (response.ok) {\r\n                return response.text();\r\n            }\r\n            else {\r\n                throw new Error(response.statusText);\r\n            }\r\n        });\r\n        this.dispatchEvent(new Event(\"load\", {bubbles: true}));\r\n    }\r\n}\r\n\r\nvar HTMLEImportElement: HTMLEImportElementConstructor = HTMLEImportElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLELoaderElement };\r\n\r\ninterface HTMLELoaderElementConstructor {\r\n    prototype: HTMLELoaderElement;\r\n    new(): HTMLELoaderElement;\r\n}\r\n\r\ninterface HTMLELoaderElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    type: \"bar\" | \"circle\";\r\n    promise: Promise<any> | null;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-loader\": HTMLELoaderElement,\r\n    }\r\n}\r\n\r\nvar barShadowTemplate: HTMLTemplateElement;\r\nvar circleShadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-loader\"\r\n})\r\nclass HTMLELoaderElementBase extends HTMLElement implements HTMLELoaderElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String, defaultValue: \"bar\", observed: true})\r\n    type!: \"bar\" | \"circle\";\r\n    \r\n    #promise: Promise<any> | null;\r\n\r\n    static {\r\n        const commonStyle = element(\"style\", {\r\n            children: [\r\n                /*css*/`\r\n                    :host {\r\n                        display: inline-block;\r\n                        --default-loader-color: rgb(0, 128, 255);\r\n                        --default-animation-duration: 2s;\r\n                    }\r\n                `\r\n            ]\r\n        });\r\n        const barStyle = commonStyle.cloneNode(true);\r\n        const circleStyle = commonStyle.cloneNode(true);\r\n        barStyle.textContent += /*css*/`\r\n            :host {\r\n                display: block;\r\n            }\r\n\r\n            [part=\"bar\"] {\r\n                position: relative;\r\n                display: block;\r\n                overflow: hidden;\r\n                height: 6px;\r\n                width: 100%;\r\n            }\r\n\r\n            [part=\"slider\"] {\r\n                display: flex;\r\n                position: absolute;\r\n                width: 100%;\r\n                height: 100%;\r\n                animation-name: slider;\r\n            }\r\n\r\n            [part=\"slider\"],\r\n            [part=\"cursor\"] {\r\n                border-radius: 4px;\r\n                will-change: transform;\r\n                animation-duration: var(--animation-duration, var(--default-animation-duration));\r\n                animation-timing-function: linear;\r\n                animation-iteration-count: infinite;\r\n            }\r\n\r\n            [part=\"cursor\"] {\r\n                display: block;\r\n                width: 128px;\r\n                background-color: var(--loader-color, var(--default-loader-color));\r\n                animation-name: cursor;\r\n            }\r\n\r\n            [part=\"bar\"]:after {\r\n                animation-name: shine;\r\n                animation-duration: var(--animation-duration, var(--default-animation-duration));\r\n                animation-iteration-count: infinite;\r\n                animation-fill-mode: forwards;  \r\n                content: \"\";\r\n                position: absolute;\r\n                left: -100%;\r\n                width: 100%;\r\n                height: 100%;\r\n                top: 0;\r\n                opacity: 0;\r\n                \r\n                background: rgba(255, 255, 255, 0.13);\r\n                background: linear-gradient(\r\n                    to right, \r\n                    rgba(255, 255, 255, 0) 0%,\r\n                    rgba(255, 255, 255, 0.1) 10%,\r\n                    rgba(255, 255, 255, 0.9) 80%,\r\n                    rgba(255, 255, 255, 0) 100%\r\n                );\r\n            }\r\n\r\n            @keyframes shine {\r\n                25% {\r\n                    opacity: 1;\r\n                    left: -100%;\r\n                }\r\n                100% {\r\n                    opacity: 0;\r\n                    left: 100%;\r\n                }\r\n            }\r\n\r\n            @keyframes slider {\r\n                0% {\r\n                    transform: translateX(0%);\r\n                }\r\n                100% {\r\n                    transform: translateX(100%);\r\n                }\r\n            }\r\n\r\n            @keyframes cursor {\r\n                0% {\r\n                    transform: translateX(-100%);\r\n                }\r\n                100% {\r\n                    transform: translateX(100%);\r\n                }\r\n            }\r\n        `;\r\n        circleStyle.textContent += /*css*/`\r\n            :host {\r\n                display: inline-block;\r\n            }\r\n\r\n            [part=\"circle\"] {\r\n                width: 12px;\r\n                height: 12px;\r\n                border-top: 4px solid var(--loader-color, var(--default-loader-color));\r\n                border-right: 4px solid var(--loader-color, var(--default-loader-color));\r\n                border-left: 4px solid transparent;\r\n                border-bottom: 4px solid transparent;\r\n                border-radius: 50%;\r\n                animation-duration: 1s;\r\n                animation-name: circle;\r\n                animation-timing-function: linear;\r\n                animation-iteration-count: infinite;\r\n            }\r\n\r\n            @keyframes circle {\r\n                0% {\r\n                    transform: rotate(0);\r\n                }\r\n                100% {\r\n                    transform: rotate(360deg);\r\n                }\r\n            }\r\n        `;\r\n        barShadowTemplate = element(\"template\");\r\n        barShadowTemplate.content.append(\r\n            barStyle,\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"bar\"\r\n                },\r\n                children: [\r\n                    element(\"div\", {\r\n                        attributes: {\r\n                            part: \"slider\"\r\n                        },\r\n                        children: [\r\n                            element(\"div\", {\r\n                                attributes: {\r\n                                    part: \"cursor\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n        circleShadowTemplate = element(\"template\");\r\n        circleShadowTemplate.content.append(\r\n            circleStyle,\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"circle\"\r\n                }\r\n            })\r\n        )\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.#updateTemplate();\r\n        this.#promise = null;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"type\": {\r\n                this.#updateTemplate();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    set promise(promise: Promise<any> | null) {\r\n        if (promise) {\r\n            promise.finally(() => {\r\n                this.remove();\r\n            });\r\n        }\r\n        this.#promise = promise;\r\n    }\r\n\r\n    get promise(): Promise<any> | null {\r\n        return this.#promise;\r\n    }\r\n\r\n    #updateTemplate(): void {\r\n        const {type, shadowRoot} = this;\r\n        switch (type) {\r\n            case \"circle\": {\r\n                shadowRoot.replaceChildren(\r\n                    circleShadowTemplate.content.cloneNode(true)\r\n                );\r\n                break;\r\n            }\r\n            case \"bar\": {\r\n                shadowRoot.replaceChildren(\r\n                    barShadowTemplate.content.cloneNode(true)\r\n                );\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLELoaderElement: HTMLELoaderElementConstructor = HTMLELoaderElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEWidthSashElement };\r\n\r\ninterface HTMLEWidthSashElementConstructor {\r\n    prototype: HTMLEWidthSashElement;\r\n    new(): HTMLEWidthSashElement;\r\n}\r\n\r\ninterface HTMLEWidthSashElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    controls: string;\r\n    growdir: \"right\" | \"left\";\r\n    max: boolean;\r\n    setWidth(width: number): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-wsash\": HTMLEWidthSashElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"resize\": Event;\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-wsash\"\r\n})\r\nclass HTMLEWidthSashElementBase extends HTMLElement implements HTMLEWidthSashElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"right\"})\r\n    growdir!: \"right\" | \"left\";\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    max!: boolean;\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n    #queuedPointerCallback: FrameRequestCallback | null;\r\n    #pointerMovement: number;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#target = null;\r\n        this.#queuedPointerCallback = null;\r\n        this.#pointerMovement = 0;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    setWidth(width: number): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const {max} = this;\r\n            const {style} = target;\r\n            style.setProperty(\"width\", `${width}px`);\r\n            if (max) {\r\n                style.setProperty(\"max-width\", `${width}px`);\r\n            }\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const {growdir} = this;\r\n            const movementX = this.#pointerMovement;\r\n            const width = parseFloat(targetComputedStyle.getPropertyValue(\"width\"));\r\n            const newWidth = width + (growdir == \"right\" ? 1 : -1) * movementX;\r\n            this.setWidth(newWidth);\r\n            this.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        this.#pointerMovement = 0;\r\n        this.#queuedPointerCallback = null;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        const rootNode = <ShadowRoot | Document>this.getRootNode();\r\n        this.#target = rootNode.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            if (this.#queuedPointerCallback == null) {\r\n                this.#queuedPointerCallback = this.#pointerMoveCallback.bind(this);\r\n                requestAnimationFrame(this.#queuedPointerCallback);\r\n            }\r\n            this.#pointerMovement += event.movementX;\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n}\r\n\r\nvar HTMLEWidthSashElement: HTMLEWidthSashElementConstructor = HTMLEWidthSashElementBase;","import { areAttributesMatching, AttributeMutationMixin } from \"../elements/Element\";\r\n\r\nexport { AttributeMixinsObserver };\r\n\r\ninterface AttributeMixinsObserverConstructor {\r\n    prototype: AttributeMixinsObserver;\r\n    new(mixins: AttributeMutationMixin[]): AttributeMixinsObserver;\r\n}\r\n\r\ninterface AttributeMixinsObserver {\r\n    observe(target: Node): void;\r\n    trigger(): void;\r\n    disconnect(): void;\r\n}\r\n\r\nclass AttributeMixinsObserverBase implements AttributeMixinsObserver {\r\n    #observer: MutationObserver;\r\n    #mixins: AttributeMutationMixin[];\r\n\r\n    constructor(mixins: AttributeMutationMixin[]) {\r\n        this.#observer = new MutationObserver(\r\n            this.#callback.bind(this)\r\n        );\r\n        this.#mixins = mixins.slice();\r\n    }\r\n\r\n    trigger(): void {\r\n        this.#callback(this.#observer.takeRecords());\r\n    }\r\n\r\n    observe(target: Node): void  {\r\n        this.#observer.observe(target, {\r\n            childList: true,\r\n            subtree: true,\r\n            attributeFilter: this.#mixins.map((mixin => mixin.attributeName))\r\n        });\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#observer.disconnect();\r\n    }\r\n\r\n    #callback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            mutation.addedNodes.forEach((node: Node) => {\r\n                if (node instanceof Element) {\r\n                    this.#attachMatchingAttributeMixinsInSubtree(node);\r\n                }\r\n            });\r\n            mutation.removedNodes.forEach((node: Node) => {\r\n                if (node instanceof Element) {\r\n                    this.#detachMatchingAttributeMixinsInSubtree(node);\r\n                }\r\n            });\r\n            if (mutation.target instanceof Element) {\r\n                const targetElement = mutation.target;\r\n                const attributeName = mutation.attributeName;\r\n                if (attributeName) {\r\n                    const relatedMixins = this.#mixins.filter(mixin => mixin.attributeName == attributeName);\r\n                    relatedMixins.forEach((mixin) => {\r\n                        if (areAttributesMatching(\r\n                                mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                                attributeName!, targetElement.getAttribute(attributeName!)\r\n                            )) {\r\n                                mixin.attach(targetElement);\r\n                        }\r\n                        else {\r\n                            mixin.detach(targetElement);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    #attachMatchingAttributeMixinsInSubtree(element: Element) {\r\n        Array.from(element.attributes).forEach((attr) => {\r\n            let matchingMixins = this.#mixins.filter(\r\n                mixin => areAttributesMatching(\r\n                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                    attr.name, attr.value\r\n                )\r\n            );\r\n            matchingMixins.forEach((mixin) => {\r\n                mixin.attach(element);\r\n            });\r\n        });\r\n        let childIndex = 0;\r\n        const {children} = element;\r\n        while (childIndex < children.length) {\r\n            const child = children.item(childIndex);\r\n            if (child !== null) {\r\n                this.#attachMatchingAttributeMixinsInSubtree(child);\r\n            }\r\n            childIndex++;\r\n        }\r\n    }\r\n\r\n    #detachMatchingAttributeMixinsInSubtree(element: Element) {\r\n        Array.from(element.attributes).forEach((attr) => {\r\n            let matchingMixins = this.#mixins.filter(\r\n                mixin => areAttributesMatching(\r\n                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                    attr.name, attr.value\r\n                )\r\n            );\r\n            matchingMixins.forEach((mixin) => {\r\n                mixin.detach(element);\r\n            });\r\n        });\r\n        let childIndex = 0;\r\n        const {children} = element;\r\n        while (childIndex < children.length) {\r\n            const child = children.item(childIndex);\r\n            if (child !== null) {\r\n                this.#detachMatchingAttributeMixinsInSubtree(child);\r\n            }\r\n            childIndex++;\r\n        }\r\n    }\r\n}\r\n\r\nvar AttributeMixinsObserver: AttributeMixinsObserverConstructor = AttributeMixinsObserverBase;","import { ReactiveChildElements } from \"../../elements/Element\";\r\nimport { camelToTrain } from \"../../elements/Snippets\";\r\n\r\nexport { WidgetFactoryConstructor };\r\n\r\nexport { widget };\r\nexport { Widget };\r\nexport { WidgetFactory };\r\nexport { widgets };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {}\r\n}\r\n\r\ninterface WidgetFactoryConstructor {\r\n    prototype: WidgetFactory;\r\n    new(): WidgetFactory;\r\n}\r\n\r\ninterface WidgetFactory {\r\n    create(properties?: object): HTMLElement;\r\n    slot(root: HTMLElement, name: string | null): HTMLElement | null;\r\n}\r\n\r\nvar slotsMap: WeakMap<HTMLElement, {\r\n    widget: WidgetFactory,\r\n    element: WeakRef<HTMLElement>;\r\n    slot: string | null;\r\n}[]> = new WeakMap();\r\nvar slotsObserver = new MutationObserver(\r\n    (mutationsList: MutationRecord[]) => {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            if (target instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"childList\": {\r\n                        const slotReferences = slotsMap.get(target);\r\n                        if (slotReferences) {\r\n                            slotReferences.forEach(slotRef_i => {\r\n                                const {widget, element, slot} = slotRef_i;\r\n                                const slottedCallback = (widget as any)[\"slottedCallback\"];\r\n                                if (typeof slottedCallback == \"function\") {\r\n                                    slottedCallback(element.deref(), target, slot);\r\n                                }\r\n                            });\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n);\r\n\r\nvar widgetsMap: WeakMap<HTMLElement, WidgetFactory> = new WeakMap();\r\nvar attributesObserver = new MutationObserver(\r\n    (mutationsList: MutationRecord[]) => {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            if (target instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"attributes\": {\r\n                        const {attributeName, oldValue} = mutation;\r\n                        const widget = widgetsMap.get(target);\r\n                        if (widget) {\r\n                            const attributeChangedCallback = (widget as any)[\"attributeChangedCallback\"];\r\n                            if (typeof attributeChangedCallback == \"function\") {\r\n                                attributeChangedCallback(target, attributeName, oldValue, target.getAttribute(attributeName!));\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n);\r\n\r\nclass WidgetFactoryBase implements WidgetFactory {\r\n\r\n    constructor() {\r\n        const widget = <WidgetFactory>this;\r\n        this.create = new Proxy(\r\n            this.create, {\r\n                apply: (target, thisArg, argumentsList: Parameters<WidgetFactory[\"create\"]>) => {\r\n                    const element = <HTMLElement>Reflect.apply(target, thisArg, argumentsList);\r\n                    const observedSlots = <(string | null)[]>(widget as any)[\"observedSlots\"];\r\n                    if (Array.isArray(observedSlots)) {\r\n                        const slots = observedSlots\r\n                            .map(slotName_i => {\r\n                                return {\r\n                                    slotName: slotName_i,\r\n                                    slotElement: widget.slot(element, slotName_i)\r\n                                };\r\n                            });\r\n                        slots.forEach(slot_i => {\r\n                            const {slotElement, slotName} = slot_i;\r\n                            if (slotElement) {\r\n                                slotsObserver.observe(slotElement, {\r\n                                    childList: true\r\n                                });\r\n                                const slotReferences = slotsMap.get(slotElement);\r\n                                const slotReference = {widget, element: new WeakRef(element), slot: slotName};\r\n                                if (Array.isArray(slotReferences)) {\r\n                                    slotReferences.push(slotReference);\r\n                                }\r\n                                else {\r\n                                    slotsMap.set(slotElement, new Array(slotReference));\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                    const observedAttributes = (widget as any)[\"observedAttributes\"];\r\n                    if (Array.isArray(observedAttributes)) {\r\n                        widgetsMap.set(element, widget);\r\n                        attributesObserver.observe(element, {\r\n                            attributes: true,\r\n                            attributeFilter: observedAttributes,\r\n                            attributeOldValue: true\r\n                        });\r\n                    }\r\n                    return element;\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    create(): HTMLElement {\r\n        throw new Error(`create method is not implemented`);\r\n    }\r\n\r\n    slot(): HTMLElement | null {\r\n        return null;\r\n    }\r\n\r\n    get observedSlots(): string[] {\r\n        return [\"\"];\r\n    }\r\n}\r\n\r\nvar WidgetFactory: WidgetFactoryConstructor = WidgetFactoryBase;\r\nvar widgets: Map<string, WidgetFactory> = new Map();\r\n\r\ninterface WidgetInit<K extends keyof WidgetNameMap> {\r\n    properties?: Parameters<WidgetNameMap[K][\"create\"]>[0],\r\n    attributes?: {\r\n        [name: string]: number | string | boolean\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    slotted?: {\r\n        [slot: string]: Node | string | (Node | string)[] | NodeList | ReactiveChildElements\r\n    } | (Node | string | (Node | string)[] | NodeList | ReactiveChildElements),\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: K, init?: WidgetInit<K>): ReturnType<WidgetNameMap[K][\"create\"]>;\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: K, init?: WidgetInit<K>): HTMLElement {\r\n    const widget = widgets.get(name);\r\n    if (widget) {\r\n        if (init !== undefined) {\r\n            const {properties, attributes, dataset, slotted, listeners} = init;\r\n            const element = widget.create(properties);\r\n            if (attributes) {\r\n                Object.entries(attributes).forEach(([attributeName, attributeValue]) => {\r\n                    if (attributeValue !== undefined) {\r\n                        if (typeof attributeValue === \"boolean\") {\r\n                            element.toggleAttribute(camelToTrain(attributeName), attributeValue);\r\n                        }\r\n                        else {\r\n                            element.setAttribute(camelToTrain(attributeName), String(attributeValue));\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            if (dataset) {\r\n                const {dataset: elementDataset} = element;\r\n                Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                    elementDataset[datasetEntry_i] = String(dataset[datasetEntry_i]);\r\n                });\r\n            }\r\n            if (slotted) {\r\n                if (typeof slotted === \"function\" || Array.isArray(slotted) || slotted instanceof NodeList || typeof slotted === \"string\" || slotted instanceof Node) {\r\n                    const slot = widget.slot(element, null);\r\n                    if (slot) {\r\n                        if (typeof slotted === \"function\") {\r\n                            slot.append(...slotted(slot));\r\n                        }\r\n                        else if (typeof slotted === \"object\" && \"length\" in slotted) {\r\n                            slot.append(...Array.from(slotted));\r\n                        }\r\n                        else {\r\n                            slot.append(slotted);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    Object.entries(slotted).forEach(([slot_i, slotted]) => {\r\n                        const slot = widget.slot(element, slot_i);\r\n                        if (slot) {\r\n                            if (typeof slotted === \"function\") {\r\n                                slot.append(...slotted(slot));\r\n                            }\r\n                            else if (typeof slotted === \"object\" && \"length\" in slotted) {\r\n                                slot.append(...Array.from(slotted));\r\n                            }\r\n                            else {\r\n                                slot.append(slotted);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            if (listeners) {\r\n                Object.entries(listeners).forEach(([name_i, listener_i]) => {\r\n                    if (Array.isArray(listener_i)) {\r\n                        element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                    }\r\n                    else {\r\n                        element.addEventListener(name_i, listener_i);\r\n                    }\r\n                });\r\n            }\r\n            return element;\r\n        }\r\n        else {\r\n            return widget.create();\r\n        }\r\n    }\r\n    throw new Error(`Unknown widget ${name}. The corresponding module might not be imported.`);\r\n}\r\n\r\ninterface WidgetDecorator {\r\n    (init: {\r\n        name: string;\r\n    }): <W extends WidgetFactoryConstructor>(widget: W) => W;\r\n}\r\n\r\nconst Widget: WidgetDecorator = function(init: {\r\n    name: string;\r\n}) {\r\n    return <W extends WidgetFactoryConstructor>(\r\n        widget: W\r\n    ) => {\r\n        const {name} = init;\r\n        widgets.set(\r\n            name,\r\n            new widget()\r\n        );\r\n        return widget;\r\n    }\r\n}","import { element } from \"../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"./Widget\";\r\n\r\nexport { separatorWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"separator\": SeparatorWidgetFactory\r\n    }\r\n}\r\n\r\ninterface SeparatorWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar separatorWidget = new (\r\nWidget({\r\n    name: \"separator\"\r\n})(class SeparatorWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"separator\",\r\n                role: \"separator\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuItemWidget };\r\n\r\ntype MenuItemType = \"button\" | \"radio\" | \"checkbox\" | \"menu\" | \"submenu\";\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menuitem\": MenuItemWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        type?: MenuItemType;\r\n        checked?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void;\r\n    getMenu(item: HTMLElement): HTMLElement | null;\r\n    getKeyShortcut(item: HTMLElement): string | null;\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    getType(item: HTMLElement): MenuItemType | null;\r\n    setType(item: HTMLElement, type: MenuItemType): void;\r\n    getValue(item: HTMLElement): string;\r\n    setValue(item: HTMLElement, value: string): void;\r\n    getName(item: HTMLElement): string;\r\n    setName(item: HTMLElement, value: string): void;\r\n    getChecked(item: HTMLElement): boolean;\r\n    setChecked(item: HTMLElement, value: boolean): void;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setExpanded(item: HTMLElement, value: boolean): void;\r\n    getExpanded(item: HTMLElement): boolean;\r\n    toggle(item: HTMLElement, force?: boolean): void;\r\n    expand(item: HTMLElement): void;\r\n    collapse(item: HTMLElement): void;\r\n}\r\n\r\nvar menuItemWidget = new(\r\nWidget({\r\n    name: \"menuitem\"\r\n})(\r\nclass MenuItemWidgetFactoryBase extends WidgetFactory implements MenuItemWidgetFactory {\r\n    #iconPartTemplate: HTMLElement;\r\n    #arrowPartTemplate : HTMLElement;\r\n    #keyshortcutsPartTemplate: HTMLElement;\r\n    #template: HTMLElement;\r\n    #types: MenuItemType[];\r\n    #typesFeatures: {\r\n        [key in MenuItemType]: {\r\n            role: string,\r\n            hasIcon: boolean,\r\n            hasArrow: boolean\r\n        }\r\n    };\r\n\r\n    constructor() {\r\n        super();\r\n        this.#iconPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"icon\"\r\n            }\r\n        });\r\n        this.#arrowPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"arrow\"\r\n            }\r\n        });\r\n        this.#keyshortcutsPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"keyshortcuts\"\r\n            }\r\n        });\r\n        this.#template = element(\"button\", {\r\n            attributes: {\r\n                class: \"menuitem\",\r\n                role: \"menuitem\",\r\n                type: \"button\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                this.#iconPartTemplate.cloneNode(true),\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n        this.#types = [\"checkbox\", \"radio\", \"menu\", \"submenu\", \"button\"];\r\n        this.#typesFeatures = {\r\n            button: {\r\n                role: \"menuitem\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            checkbox: {\r\n                role: \"menuitemcheckbox\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            radio: {\r\n                role: \"menuitemradio\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            menu: {\r\n                role: \"menuitem\",\r\n                hasIcon: false,\r\n                hasArrow: false\r\n            },\r\n            submenu: {\r\n                role: \"menuitem\",\r\n                hasIcon: true,\r\n                hasArrow: true\r\n            }\r\n        }\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        type: MenuItemType;\r\n        checked?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (init !== undefined) {\r\n            const {id, classList, tabIndex, keyshortcut, checked, type, label, name, value, disabled} = init;\r\n            if (id !== undefined) {\r\n                item.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                item.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                item.tabIndex = tabIndex;\r\n            }\r\n            if (keyshortcut !== undefined) {\r\n                this.setKeyShortcut(item, keyshortcut);\r\n            }\r\n            if (checked !== undefined) {\r\n                this.setChecked(item, checked);\r\n            }\r\n            if (type !== undefined) {\r\n                if (type == \"menu\" || type == \"submenu\") {\r\n                    this.setExpanded(item, false);\r\n                }\r\n                this.setType(item, type);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(item, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(item, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(item: HTMLElement): HTMLElement | null {\r\n        return item;\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void {\r\n        const hasChildMenu = Array.from(slot.childNodes).some(\r\n            childNode_i => childNode_i instanceof HTMLElement && childNode_i.classList.contains(\"menu\")\r\n        );\r\n        item.setAttribute(\"aria-haspopup\", String(hasChildMenu));\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n\r\n    getMenu(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .menu\");\r\n    }\r\n\r\n    getKeyShortcut(item: HTMLElement): string | null {\r\n        return item.getAttribute(\"aria-keyshortcuts\");\r\n    }\r\n\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void {\r\n        let keyshortcutsPart = item.querySelector(\":scope > .keyshortcuts\");\r\n        if (value !== null) {\r\n            item.setAttribute(\"aria-keyshortcuts\", value);\r\n            if (!keyshortcutsPart) {\r\n                const labelPart = this.#label(item);\r\n                const keyshortcutsPartTemplate = this.#keyshortcutsPartTemplate;\r\n                keyshortcutsPart = <HTMLElement>keyshortcutsPartTemplate.cloneNode(true);\r\n                labelPart.after(keyshortcutsPart);\r\n            }\r\n            keyshortcutsPart.textContent = value;\r\n        }\r\n        else {\r\n            item.removeAttribute(\"aria-keyshortcuts\");\r\n            if (keyshortcutsPart) {\r\n                keyshortcutsPart.remove();\r\n            }\r\n        }\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n    \r\n    getType(item: HTMLElement): MenuItemType | null {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`menuitem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setType(item: HTMLElement, type: MenuItemType): void {\r\n        const typesFeatures = this.#typesFeatures;\r\n        const iconPartTemplate = this.#iconPartTemplate;\r\n        const arrowPartTemplate = this.#arrowPartTemplate;\r\n        const {role, hasIcon, hasArrow} = typesFeatures[type];\r\n        const oldType = this.getType(item);\r\n        const {classList} = item;\r\n        if (oldType) {\r\n            classList.remove(`menuitem-${oldType}`);\r\n        }\r\n        classList.add(`menuitem-${type}`);\r\n        item.setAttribute(\"role\", role);\r\n        const labelPart = this.#label(item);\r\n        const iconPart = item.querySelector(\":scope > .icon\");\r\n        const arrowPart = item.querySelector(\":scope > .arrow\");\r\n        if (hasIcon) {\r\n            if (!iconPart && labelPart) {\r\n                labelPart.before(iconPartTemplate.cloneNode(true));\r\n            }\r\n        }\r\n        else {\r\n            if (iconPart) {\r\n                iconPart.remove();\r\n            }\r\n        }\r\n        if (hasArrow) {\r\n            if (!arrowPart && labelPart) {\r\n                labelPart.after(arrowPartTemplate.cloneNode(true));\r\n            }\r\n        }\r\n        else {\r\n            if (arrowPart) {\r\n                arrowPart.remove();\r\n            }\r\n        }\r\n    }\r\n\r\n    getValue(item: HTMLElement): string {\r\n        return item.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"value\", value);\r\n    }\r\n    \r\n    getName(item: HTMLElement): string {\r\n        return item.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getChecked(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-checked\") ?? String(false));\r\n    }\r\n\r\n    setChecked(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-checked\", String(value));\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-expanded\", String(value));\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-expanded\") ?? String(false));\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        const expand = force ?? !this.getExpanded(item);\r\n        this.setExpanded(item, expand);\r\n        if (expand) {\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    expand(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (!expanded) {\r\n            this.setExpanded(item, true);\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    collapse(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (expanded) {\r\n            this.setExpanded(item, false);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.setChecked(targetItem, !this.getChecked(targetItem));\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.setChecked(targetItem, true);\r\n                    break;\r\n                }\r\n                case \"menu\":\r\n                case \"submenu\": {\r\n                    this.toggle(targetItem);\r\n                    if (this.getExpanded(targetItem)) {\r\n                        this.getMenu(targetItem)?.focus({preventScroll: true});\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(item: HTMLElement): void {\r\n        const menu = this.getMenu(item);\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = item.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const type = this.getType(item);\r\n            if (type == \"menu\") {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const closestMenu = item.closest(\".menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    const overflowX = itemRight + menuWidth - clientWidth;\r\n                    const overflowY = itemTop + menuHeight - clientHeight;\r\n                    menuStyle.setProperty(\"left\", `${\r\n                        overflowX > 0 ?\r\n                        itemLeft - menuWidth - closestMenuLeft :\r\n                        itemRight - closestMenuLeft\r\n                    }px`);\r\n                    const menuComputedStyle = window.getComputedStyle(menu);\r\n                    const {paddingTop, paddingBottom} = menuComputedStyle;\r\n                    const menuPaddingTop = parseFloat(paddingTop);\r\n                    const menuPaddingBottom = parseFloat(paddingBottom);\r\n                    menuStyle.setProperty(\"top\", `${\r\n                        overflowY > 0 ?\r\n                        itemBottom - menuHeight - closestMenuTop + menuPaddingBottom :\r\n                        itemTop - closestMenuTop - menuPaddingTop\r\n                    }px`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { menuItemWidget } from \"./MenuItemWidget\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuBarWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menubar\": MenuBarWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuBarWidgetFactory extends WidgetFactory {\r\n    setExpanded(menubar: HTMLElement, value: boolean): void;\r\n    getExpanded(menubar: HTMLElement): boolean;\r\n}\r\n\r\nvar menuBarWidget = new (\r\nWidget({\r\n    name: \"menubar\"\r\n})(class MenubarWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menubar\",\r\n                role: \"menubar\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        )\r\n    }\r\n\r\n    create() {\r\n        const menubar = <HTMLElement>this.#template.cloneNode(true);\r\n        menubar.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        menubar.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        menubar.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        menubar.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        menubar.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        return menubar;\r\n    }\r\n\r\n    slot(menubar: HTMLElement) {\r\n        return menubar;\r\n    }\r\n\r\n    setExpanded(menubar: HTMLElement, value: boolean): void {\r\n        menubar.toggleAttribute(\"aria-expanded\", value);\r\n    }\r\n\r\n    getExpanded(menubar: HTMLElement): boolean {\r\n        return menubar.hasAttribute(\"aria-expanded\");\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node) {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"menuitem\") && !menuItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"menuitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getActiveItem(menubar: HTMLElement): HTMLElement | null {\r\n        return menubar.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem:focus-within\"\r\n        );\r\n    }\r\n\r\n    #firstItem(menubar: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menubar;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(menubar: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menubar;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n\r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = menuItemWidget.getMenu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #isClosestMenu(menubar: HTMLElement, target: HTMLElement): boolean {\r\n        return target.closest(\":is(.menubar, .menu)\") == menubar;\r\n    }\r\n\r\n    #nearestItem(menubar: HTMLElement, target: HTMLElement): HTMLElement | null {\r\n        return Array.from(menubar.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem) {\r\n            const expanded = this.getExpanded(menubar);\r\n            const isClosestMenu = this.#isClosestMenu(menubar, targetItem);\r\n            if (isClosestMenu) {\r\n                const isExpanded = !expanded;\r\n                this.setExpanded(menubar, isExpanded);\r\n                if (isExpanded) {\r\n                    if (targetItem !== null && !menuItemWidget.getExpanded(targetItem)) {\r\n                        menuItemWidget.expand(targetItem);\r\n                    }\r\n                    const menu = menuItemWidget.getMenu(targetItem);\r\n                    menu?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    menubar.focus({preventScroll: true})\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && this.getExpanded(menubar)) {\r\n            const nearestItem = this.#nearestItem(menubar, target);\r\n            if (nearestItem) {\r\n                menuItemWidget.expand(nearestItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && !target.contains(<Element>relatedTarget)) {\r\n            const nearestItem = this.#nearestItem(menubar, target);\r\n            if (nearestItem) {\r\n                menuItemWidget.collapse(nearestItem);\r\n            }\r\n        }\r\n        const lostFocusWithin = !menubar.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.setExpanded(menubar, false);\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const activeItem = this.#getActiveItem(menubar);\r\n            const expanded = this.getExpanded(menubar);\r\n            const isClosestMenu = this.#isClosestMenu(menubar, target);\r\n            if (isClosestMenu && target !== activeItem && expanded) {\r\n                const menu = menuItemWidget.getMenu(target);\r\n                if (menu) {\r\n                    menu.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    target.focus({preventScroll: true});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        let activeItem = this.#getActiveItem(menubar);\r\n        const expanded = this.getExpanded(menubar);\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem(menubar) :\r\n                    this.#firstItem(menubar);\r\n                previousItem?.focus({preventScroll: true});\r\n                activeItem = this.#getActiveItem(menubar);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem(menubar) : \r\n                    this.#lastItem(menubar);\r\n                nextItem?.focus({preventScroll: true});\r\n                activeItem = this.#getActiveItem(menubar);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    this.setExpanded(menubar, !expanded);\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.setExpanded(menubar, false);\r\n                    if (activeItem) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    menubar.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { menuItemWidget } from \"./MenuItemWidget\";\r\n\r\nexport { menuWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menu\": MenuWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        contextual?: boolean;\r\n        position?: {x: number, y: number};\r\n    }): HTMLElement;\r\n    setPosition(menu: HTMLElement, x: number, y: number): void;\r\n    getContextual(menu: HTMLElement): boolean;\r\n    setContextual(menu: HTMLElement, value: boolean): void;\r\n    items(menu: HTMLElement): HTMLElement[];\r\n}\r\n\r\nvar mouseOverExpandDelay = 0_200;\r\nvar mouseOutCollapseDelay = 0_400;\r\n\r\nvar menuWidget = new (\r\nWidget({\r\n    name: \"menu\"\r\n})(class MenuWidgetFactoryBase extends WidgetFactory implements MenuWidgetFactory {\r\n\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #toggleTimeouts: WeakMap<HTMLElement, {clear(): void;}>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menu\",\r\n                role: \"menu\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#toggleTimeouts = new WeakMap();\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        contextual?: boolean;\r\n        position?: {x: number, y: number};\r\n    }): HTMLElement {\r\n        const menu = <HTMLElement>this.#template.cloneNode(true);\r\n        menu.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        menu.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        menu.addEventListener(\"mouseout\", this.#handleMouseOutEvent.bind(this));\r\n        menu.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        menu.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, contextual, position} = properties;\r\n            if (id !== undefined) {\r\n                menu.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                menu.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                menu.tabIndex = tabIndex;\r\n            }\r\n            if (contextual !== undefined) {\r\n                this.setContextual(menu, contextual);\r\n            }\r\n            if (position !== undefined) {\r\n                const {x, y} = position;\r\n                this.setPosition(menu, x, y);\r\n            }\r\n        }\r\n        return menu;\r\n    }\r\n\r\n    slot(menu: HTMLElement): HTMLElement | null {\r\n        return menu;\r\n    }\r\n\r\n    setPosition(menu: HTMLElement, x: number, y: number): void {\r\n        const {style} = menu;\r\n        const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        const left = x + scrollX;\r\n        const top = y + scrollY;\r\n        const {clientWidth, clientHeight} = document.body;\r\n        const overflowX = left + menuWidth - clientWidth;\r\n        const overflowY = top + menuHeight - clientHeight;\r\n        style.setProperty(\"left\", `${overflowX > 0 ? left - menuWidth : left}px`);\r\n        style.setProperty(\"top\", `${overflowY > 0 ? top - menuHeight : top}px`);\r\n    }\r\n\r\n    getContextual(menu: HTMLElement): boolean {\r\n        const {classList} = menu;\r\n        return classList.contains(\"menu-contextual\");\r\n    }\r\n\r\n    setContextual(menu: HTMLElement, value: boolean): void {\r\n        const {classList} = menu;\r\n        if (value) {\r\n            classList.add(\"menu-contextual\");\r\n        }\r\n        else {\r\n            classList.remove(\"menu-contextual\");\r\n        }\r\n    }\r\n\r\n    items(menu: HTMLElement): HTMLElement[] {\r\n        return Array.from(menu.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        ));\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"menuitem\") && !menuItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"menuitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #collapseSubmenus(menu: HTMLElement): void {\r\n        menu.querySelectorAll<HTMLElement>(\":is(:scope, :scope > .menuitemgroup) > .menuitem[aria-expanded]\")\r\n            .forEach(menuitem_i => menuItemWidget.collapse(menuitem_i));\r\n    }\r\n\r\n    #isClosestMenu(menu: HTMLElement, target: HTMLElement): boolean {\r\n        return target.closest(\".menu\") == menu;\r\n    }\r\n\r\n    #nearestItem(menu: HTMLElement, target: HTMLElement): HTMLElement | null {\r\n        return Array.from(menu.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #firstItem(menu: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menu;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(menu: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menu;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n\r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = menuItemWidget.getMenu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #getActiveItem(menu: HTMLElement): HTMLElement | null {\r\n        return menu.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem:focus-within\"\r\n        );\r\n    }\r\n\r\n    async #setItemTimeout(item: HTMLElement, delay?: number): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => {\r\n                resolve(undefined);\r\n            }, delay ?? 0);\r\n            this.#toggleTimeouts.set(item, {\r\n                clear: () => {\r\n                    clearTimeout(timeout);\r\n                    reject();\r\n                }\r\n            });\r\n        }).then(() => {\r\n            this.#toggleTimeouts.delete(item);\r\n        });\r\n    }\r\n\r\n    #clearItemTimeout(item: HTMLElement): void {\r\n        const timeout = this.#toggleTimeouts.get(item);\r\n        if (typeof timeout !== \"undefined\") {\r\n            this.#toggleTimeouts.delete(item);\r\n            timeout.clear();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem) {\r\n            const contextual = this.getContextual(targetMenu);\r\n            if (contextual) {\r\n                try {\r\n                    targetMenu.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const isClosestMenu = this.#isClosestMenu(targetMenu, targetItem);\r\n                if (isClosestMenu) {\r\n                    const type = menuItemWidget.getType(targetItem);\r\n                    const name = menuItemWidget.getName(targetItem);\r\n                    const value = menuItemWidget.getValue(targetItem);\r\n                    if (type == \"radio\") {\r\n                        targetMenu.querySelectorAll<HTMLElement>(\r\n                            `:is(:scope, :scope > .menuitemgroup) > .menuitem-radio[name=${name}]`\r\n                        )\r\n                        .forEach((radio_i) => {\r\n                            menuItemWidget.setChecked(radio_i, menuItemWidget.getValue(radio_i) == value);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetMenu.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const contextual = this.getContextual(targetMenu);\r\n            if (contextual) {\r\n                try {\r\n                    targetMenu.remove();\r\n                } catch (error) {\r\n                    undefined;\r\n                }\r\n            }\r\n            else {\r\n                const nearestItem = this.#nearestItem(targetMenu, <HTMLElement>target);\r\n                if (nearestItem) {\r\n                    menuItemWidget.collapse(nearestItem);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetMenu);\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem(targetMenu) :\r\n                    this.#firstItem(targetMenu);\r\n                previousItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem(targetMenu) :\r\n                    this.#firstItem(targetMenu);\r\n                nextItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetMenu);\r\n                firstItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetMenu);\r\n                lastItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const type = menuItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            menuItemWidget.expand(activeItem);\r\n                            const firstChildItem = this.#firstChildItem(activeItem);\r\n                            firstChildItem?.focus({preventScroll: true});\r\n                            event.preventDefault();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    const isTargetClosestMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                    ) == targetMenu;\r\n                    if (!isTargetClosestMenu) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const isTargetClosestMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                    ) == targetMenu;\r\n                    if (!isTargetClosestMenu) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const type = menuItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            const expanded = menuItemWidget.getExpanded(activeItem);\r\n                            if (!expanded) {\r\n                                menuItemWidget.expand(activeItem);\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                                event.stopPropagation();\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOutEvent(event: MouseEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const nearestItem = this.#nearestItem(targetMenu, target);\r\n            if (nearestItem !== null) {\r\n                if (menuItemWidget.getType(nearestItem) == \"submenu\" &&\r\n                    !menuItemWidget.getExpanded(nearestItem)) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                ) == targetMenu;\r\n                if (isTargetClosestMenu) {\r\n                    const activeItem = this.#getActiveItem(targetMenu);\r\n                    if (activeItem !== null &&\r\n                        menuItemWidget.getType(activeItem) == \"submenu\" &&\r\n                        menuItemWidget.getExpanded(activeItem)) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, mouseOutCollapseDelay)\r\n                            .then(() => {\r\n                                menuItemWidget.collapse(activeItem);\r\n                            })\r\n                            .catch(() => undefined);\r\n                    }\r\n                    const {clientX, clientY} = event;\r\n                    const {left, right, top, bottom} = targetMenu.getBoundingClientRect();\r\n                    const intersectsWithMouse = !(\r\n                        left > clientX || right < clientX || top > clientY || bottom < clientY\r\n                    );\r\n                    const containsRelatedTarget = targetMenu.contains(<Node>relatedTarget);\r\n                    if (intersectsWithMouse && containsRelatedTarget) {\r\n                        if (relatedTarget instanceof HTMLElement && relatedTarget.classList.contains(\"menu\") && relatedTarget !== targetMenu) {\r\n                            relatedTarget.focus({preventScroll: true});\r\n                        }\r\n                        else {\r\n                            targetMenu.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    if (!intersectsWithMouse) {\r\n                        targetMenu.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const nearestItem = this.#nearestItem(targetMenu, target); \r\n            if (nearestItem !== null) {\r\n                if (menuItemWidget.getType(nearestItem) == \"submenu\" &&\r\n                    menuItemWidget.getExpanded(nearestItem)) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                ) == targetMenu;\r\n                if (isTargetClosestMenu) {\r\n                    const activeItem = this.#getActiveItem(targetMenu);\r\n                    if (activeItem !== null) {\r\n                        if (menuItemWidget.getType(activeItem) == \"submenu\" &&\r\n                            menuItemWidget.getExpanded(activeItem) && \r\n                            !activeItem.contains(<HTMLElement>target)) {\r\n                            this.#clearItemTimeout(activeItem);\r\n                            this.#setItemTimeout(activeItem, mouseOutCollapseDelay)\r\n                                .then(() => {\r\n                                    menuItemWidget.collapse(activeItem);\r\n                                })\r\n                                .catch(() => undefined);\r\n                        }\r\n                    }\r\n                    nearestItem.focus({preventScroll: true});\r\n                    if (menuItemWidget.getType(nearestItem) == \"submenu\") {\r\n                        if (!menuItemWidget.getExpanded(nearestItem)) {\r\n                            this.#clearItemTimeout(nearestItem);\r\n                            this.#setItemTimeout(nearestItem, mouseOverExpandDelay)\r\n                                .then(() => {\r\n                                    const activeItem = this.#getActiveItem(targetMenu);\r\n                                    this.#collapseSubmenus(targetMenu);\r\n                                    if (activeItem) {\r\n                                        this.#clearItemTimeout(activeItem);\r\n                                        menuItemWidget.expand(activeItem);\r\n                                        menuItemWidget.getMenu(activeItem)?.focus({preventScroll: true});\r\n                                    }\r\n                                })\r\n                                .catch(() => undefined);\r\n                        }\r\n                        else {\r\n                            menuItemWidget.getMenu(nearestItem)?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menuitemgroup\": MenuItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar menuItemGroupWidget = new (\r\nWidget({\r\n    name: \"menuitemgroup\"\r\n})(class MenuItemGroupWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menuitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement): HTMLElement | null {\r\n        return group;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { treeItemWidget };\r\n\r\ntype TreeItemType = \"parent\" | \"leaf\";\r\n\r\ninterface TreeItemWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        type?: TreeItemType;\r\n        label?: string;\r\n        title?: string;\r\n        disabled?: boolean;\r\n        draggable?: boolean;\r\n    }): HTMLElement;\r\n    group(item: HTMLElement): HTMLElement | null;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setExpanded(item: HTMLElement, value: boolean): void;\r\n    getExpanded(item: HTMLElement): boolean;\r\n    setDraggable(row: HTMLElement, value: boolean): void;\r\n    getDraggable(item: HTMLElement): boolean;\r\n    getType(item: HTMLElement): TreeItemType | null;\r\n    setType(item: HTMLElement, value: TreeItemType): void;\r\n    toggle(item: HTMLElement, force?: boolean): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"treeitem\": TreeItemWidgetFactory,\r\n    }\r\n}\r\n\r\nvar treeItemWidget = new (\r\nWidget({\r\n    name: \"treeitem\"\r\n})(class TreeItemWidgetFactoryBase extends WidgetFactory implements TreeItemWidgetFactory {\r\n    #template: HTMLElement;\r\n    #types: TreeItemType[];\r\n\r\n    constructor() {\r\n        super();\r\n        this.#types = [\"parent\", \"leaf\"];\r\n        this.#template = element(\"li\", {\r\n            attributes: {\r\n                class: \"treeitem\",\r\n                role: \"treeitem\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"content\"\r\n                    },\r\n                    children: [\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"arrow\"\r\n                            }\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    group(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .treeitemgroup\");\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        label?: string;\r\n        title?: string;\r\n        type?: TreeItemType;\r\n        disabled?: boolean;\r\n        draggable?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, label, title, type = \"leaf\", disabled, draggable} = properties;\r\n            if (id !== undefined) {\r\n                item.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                item.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                item.tabIndex = tabIndex;\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (title !== undefined) {\r\n                this.setTitle(item, title);\r\n            }\r\n            this.setType(item, type);\r\n            if (type === \"parent\") {\r\n                this.setExpanded(item, false);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n            if (draggable !== undefined) {\r\n                this.setDraggable(item, draggable);\r\n            }\r\n            this.setSelected(item, false);\r\n        }\r\n        return item;\r\n    }\r\n\r\n    get observedSlots() {\r\n        return [\"content\", \"group\"];\r\n    }\r\n\r\n    slot(item: HTMLElement, name: string | null) {\r\n        switch (name) {\r\n            case \"content\":\r\n                return this.#content(item);\r\n            case \"group\":\r\n                return item;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #content(item: HTMLElement): HTMLElement {\r\n        const content = item.querySelector<HTMLElement>(\":scope > .content\")!;\r\n        if (!content) throw new Error(\"Missing .content slot.\");\r\n        return content;\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return item.getAttribute(\"aria-label\") ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"aria-label\", value);\r\n    }\r\n\r\n    getTitle(item: HTMLElement): string {\r\n        return item.title;\r\n    }\r\n\r\n    setTitle(item: HTMLElement, value: string): void {\r\n        item.title = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? Number(posInSet) : -1;\r\n    }\r\n\r\n    getType(item: HTMLElement): TreeItemType {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`treeitem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        throw new Error(\"Missing type.\");\r\n    }\r\n\r\n    setType(item: HTMLElement, type: TreeItemType): void {\r\n        const {classList} = item;\r\n        try {\r\n            const oldType = this.getType(item);\r\n            classList.remove(`treeitem-${oldType}`);\r\n        }\r\n        catch (e) {};\r\n        classList.add(`treeitem-${type}`);\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-expanded\", String(value));\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-expanded\") ?? String(false));\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            if (!classList.contains(\"active\")) {\r\n                classList.add(\"active\");\r\n            }\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDraggable(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"draggable\", String(value));\r\n    }\r\n\r\n    getDraggable(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"draggable\") ?? String(false));\r\n    }\r\n\r\n    setSelected(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-selected\", String(value));\r\n        item.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    setLevel(item: HTMLElement, value: number): void {\r\n        item.style.setProperty(\"--level\", String(value));\r\n    }\r\n\r\n    getLevel(item: HTMLElement): number {\r\n        return parseInt(item.style.getPropertyValue(\"--level\"));\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        this.setExpanded(item, force ?? !this.getExpanded(item));\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget, shiftKey, ctrlKey} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            if (type == \"parent\" && !(shiftKey || ctrlKey)) {\r\n                this.toggle(targetItem);\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { treeItemWidget } from \"./TreeItemWidget\";\r\n\r\nexport { treeWidget };\r\n\r\ninterface TreeWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement;\r\n    items(tree: HTMLElement): HTMLElement[];\r\n    selectedItems(tree: HTMLElement): HTMLElement[];\r\n    beginSelection(tree: HTMLElement): void;\r\n    endSelection(tree: HTMLElement): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"tree\": TreeWidgetFactory,\r\n    }\r\n}\r\n\r\nvar treeWidget = new (\r\nWidget({\r\n    name: \"tree\"\r\n})(class TreeWidgetFactoryBase extends WidgetFactory implements TreeWidgetFactory {\r\n\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"tree\",\r\n                role: \"tree\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement {\r\n        const tree = <HTMLElement>this.#template.cloneNode(true);\r\n        tree.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        tree.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        tree.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        tree.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        tree.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        tree.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        tree.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        tree.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        tree.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        tree.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        tree.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        this.#onSelection.set(tree, false);\r\n        this.#hasSelectionChanged.set(tree, false);\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, multisectable} = properties;\r\n            if (id !== undefined) {\r\n                tree.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                tree.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                tree.tabIndex = tabIndex;\r\n            }\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(tree, multisectable);\r\n            }\r\n        }\r\n        return tree;\r\n    }\r\n\r\n    slot(tree: HTMLElement) {\r\n        return tree;\r\n    }\r\n\r\n    slottedCallback(tree: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"treeitem\")) {\r\n                treeItemWidget.setPosInSet(child_i, i);\r\n                treeItemWidget.setLevel(child_i, 0);\r\n            }\r\n        });\r\n    }\r\n\r\n    items(tree: HTMLElement): HTMLElement[] {\r\n        return Array.from(tree.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .treeitemgroup) > .treeitem\"\r\n        ));\r\n    }\r\n\r\n    selectedItems(tree: HTMLElement): HTMLElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        let item = this.#firstItem(tree);\r\n        while (item !== null) {\r\n            const selected = treeItemWidget.getSelected(item);\r\n            if (selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(tree: HTMLElement): void {\r\n        this.#onSelection.set(tree, true);\r\n    }\r\n\r\n    endSelection(tree: HTMLElement): void {\r\n        this.#onSelection.set(tree, false);\r\n        if (this.#hasSelectionChanged.get(tree)) {\r\n            tree.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(tree, false);\r\n        }\r\n    }\r\n\r\n    setMultiSelectable(tree: HTMLElement, value: boolean): void {\r\n        tree.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(tree: HTMLElement): boolean {\r\n        return JSON.parse(tree.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    #getActiveItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".treeitem.active\");\r\n    }\r\n\r\n    #getDropTargetItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".treeitem.droptarget\");\r\n    }\r\n\r\n    #setDropTargetItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const {classList} = tree;\r\n        const dropTargetItem = this.#getDropTargetItem(tree);\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            treeItemWidget.setDropTarget(dropTargetItem, false);\r\n        }\r\n        if (item !== null) {\r\n            treeItemWidget.setDropTarget(item, true);\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"treeitem\") && !treeItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"treeitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextItem = this.#nextItem(from);\r\n            while (nextItem && nextItem !== to) {\r\n                range.push(nextItem);\r\n                nextItem = this.#nextItem(nextItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousItem = this.#previousItem(from);\r\n            while (previousItem && previousItem !== to) {\r\n                range.push(previousItem);\r\n                previousItem = this.#previousItem(previousItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        selectedItems.forEach((item_i) => {\r\n            if (!items.includes(item_i)) {\r\n                treeItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            const selected = treeItemWidget.getSelected(item_i);\r\n            if (tree.contains(item_i) && !selected) {\r\n                treeItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #addToSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        this.beginSelection(tree);\r\n        items.forEach((item_i) => {\r\n            if (!treeItemWidget.getSelected(item_i)) {\r\n                treeItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #removeFromSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                treeItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #clearSelection(tree: HTMLElement): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        selectedItems.forEach((item_i) => {\r\n            treeItemWidget.setSelected(item_i, false);\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #setActiveItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(tree);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            treeItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            treeItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #firstItem(tree: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(tree: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousSibling = <HTMLElement | null>walker.previousSibling();\r\n        return previousSibling ?\r\n            this.#deepestItem(previousSibling) :\r\n            <HTMLElement | null>walker.parentNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const type = treeItemWidget.getType(item);\r\n        const expanded = treeItemWidget.getExpanded(item);\r\n        return <HTMLElement | null>(\r\n            type === \"leaf\" ?\r\n                walker.nextNode() :\r\n                expanded ?\r\n                    walker.nextNode() :\r\n                    walker.nextSibling() ??\r\n                    (walker.parentNode(), walker.nextSibling())\r\n        );\r\n    }\r\n\r\n    #deepestItem(item: HTMLElement): HTMLElement {\r\n        const expanded = treeItemWidget.getExpanded(item);\r\n        if (expanded) {\r\n            const walker = this.#walker;\r\n            const lastItem = <HTMLElement>walker.lastChild();\r\n            if (lastItem) {\r\n                return this.#deepestItem(lastItem);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey, button} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        if (targetItem) {\r\n            const selected = treeItemWidget.getSelected(targetItem);\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setSelection(targetTree, targetItem);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            targetItem.blur();\r\n                            this.#removeFromSelection(targetTree, targetItem);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(targetTree, targetItem);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const activeItem = this.#getActiveItem(targetTree);\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                targetItem\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetTree, ...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                }\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(targetTree, targetItem);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            const type = treeItemWidget.getType(targetItem);\r\n            if (type == \"parent\") {\r\n                treeItemWidget.toggle(targetItem, true);\r\n            }\r\n            this.#setDropTargetItem(targetTree, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (!targetTree.contains(<Node>relatedTarget)) {\r\n            this.#setDropTargetItem(targetTree, null);\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const focusWithin = targetTree.contains(<Node>relatedTarget);\r\n        if (!focusWithin) {   \r\n            const activeItem = this.#getActiveItem(targetTree);\r\n            if (activeItem) {\r\n                activeItem.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetTree, targetItem);\r\n            targetTree.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetTree.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetTree.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetTree);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetTree, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetTree, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(\r\n                                firstItem,\r\n                                this.#deepestItem(lastItem)\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetTree, ...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const expanded = treeItemWidget.getExpanded(activeItem);\r\n                    if (expanded) {\r\n                        treeItemWidget.toggle(activeItem);\r\n                    }\r\n                    else {\r\n                        const walker = this.#walker;\r\n                        const parentItem = <HTMLElement>walker.parentNode();\r\n                        if (parentItem) {\r\n                            parentItem.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const expanded = treeItemWidget.getExpanded(activeItem);\r\n                    if (!expanded) {\r\n                        treeItemWidget.toggle(activeItem);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = treeItemWidget.getSelected(previousItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetTree, previousItem) :\r\n                                this.#addToSelection(targetTree, previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetTree);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = treeItemWidget.getSelected(nextItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetTree, nextItem) :\r\n                                this.#addToSelection(targetTree, nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetTree);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetTree);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetTree);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(targetTree, activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection(targetTree);\r\n                this.#setActiveItem(targetTree, null);\r\n                targetTree.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {target} = event;\r\n        const targetTree = <HTMLElement>target;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"treeitem\")) {\r\n            if (this.#onSelection.get(targetTree)) {\r\n                this.#hasSelectionChanged.set(target, true);\r\n            }\r\n            else {\r\n                targetTree.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { treeItemWidget } from \"./TreeItemWidget\";\r\n\r\nexport { treeItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"treeitemgroup\": TreeItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface TreeItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar treeItemGroupWidget = new (\r\nWidget({\r\n    name: \"treeitemgroup\"\r\n})(class TreeItemGroupWidgetFactoryBase extends WidgetFactory implements TreeItemGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"treeitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n\r\n    slottedCallback(group: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"treeitem\")) {\r\n                treeItemWidget.setPosInSet(child_i, i);\r\n                treeItemWidget.setLevel(child_i, (() => {\r\n                    let level = -1;\r\n                    let closestItem: HTMLElement | null = child_i;\r\n                    while (closestItem !== null && closestItem.matches(\".tree :scope\")) {\r\n                        closestItem = closestItem.parentElement?.closest(\".treeitem\") ?? null;\r\n                        level++;\r\n                    }\r\n                    return level;\r\n                })());\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { listItemWidget };\r\n\r\ninterface ListItemWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        label?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"listitem\": ListItemWidgetFactory,\r\n    }\r\n}\r\n\r\nvar listItemWidget = new (\r\nWidget({\r\n    name: \"listitem\"\r\n})(class ListItemWidgetFactoryBase extends WidgetFactory implements ListItemWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"li\", {\r\n            attributes: {\r\n                class: \"listitem\",\r\n                role: \"listitem\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        label?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {label, disabled} = init;\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n            this.setSelected(item, false);\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(root: HTMLElement): HTMLElement | null {\r\n        return root;\r\n    }\r\n\r\n    group(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .listitemgroup\");\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(row: HTMLElement, value: boolean): void {\r\n        row.setAttribute(\"aria-selected\", String(value));\r\n        row.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(row: HTMLElement): boolean {\r\n        return JSON.parse(row.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    #label(item: HTMLElement): Node {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { listItemWidget } from \"./ListItemWidget\";\r\n\r\nexport  { listWidget };\r\n\r\ninterface ListWidgetFactory extends WidgetFactory {\r\n    create(properties: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement;\r\n    items(list: HTMLElement): HTMLElement[];\r\n    beginSelection(list: HTMLElement): void;\r\n    endSelection(list: HTMLElement): void;\r\n    selectedItems(list: HTMLElement): HTMLElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"list\": ListWidgetFactory,\r\n    }\r\n}\r\n\r\nvar listWidget = new (\r\nWidget({\r\n    name: \"list\"\r\n})(class ListWidgetFactoryBase extends WidgetFactory implements ListWidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"list\",\r\n                role: \"list\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement {\r\n        const list = <HTMLElement>this.#template.cloneNode(true);\r\n        list.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        list.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        list.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        list.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        list.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        list.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        list.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        list.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        list.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        list.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        list.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        list.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, multisectable} = properties;\r\n            if (id !== undefined) {\r\n                list.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                list.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                list.tabIndex = tabIndex;\r\n            }\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(list, multisectable);\r\n            }\r\n        }\r\n        this.#onSelection.set(list, false);\r\n        this.#hasSelectionChanged.set(list, false);\r\n        return list;\r\n    }\r\n\r\n    slot(list: HTMLElement) {\r\n        return list;\r\n    }\r\n\r\n    slottedCallback(list: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"listitem\")) {\r\n                listItemWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n\r\n    setMultiSelectable(tree: HTMLElement, value: boolean): void {\r\n        tree.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(tree: HTMLElement): boolean {\r\n        return JSON.parse(tree.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    #getActiveItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".listitem.active\");\r\n    }\r\n\r\n    #getDropTargetItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".listitem.droptarget\");\r\n    }\r\n\r\n    items(list: HTMLElement): HTMLElement[] {\r\n        return Array.from(list.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .listitemgroup) > .listitem\"\r\n        ));\r\n    }\r\n\r\n    selectedItems(list: HTMLElement): HTMLElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        let item = this.#firstItem(list);\r\n        while (item !== null) {\r\n            const selected = listItemWidget.getSelected(item);\r\n            if (selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(list: HTMLElement): void {\r\n        this.#onSelection.set(list, true);\r\n    }\r\n\r\n    endSelection(list: HTMLElement): void {\r\n        this.#onSelection.set(list, false);\r\n        if (this.#hasSelectionChanged.get(list)) {\r\n            list.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(list, false);\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"listitem\") && !listItemWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"listitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextItem = this.#nextItem(from);\r\n            while (nextItem && nextItem !== to) {\r\n                range.push(nextItem);\r\n                nextItem = this.#nextItem(nextItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousItem = this.#previousItem(from);\r\n            while (previousItem && previousItem !== to) {\r\n                range.push(previousItem);\r\n                previousItem = this.#previousItem(previousItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        selectedItems.forEach((item_i) => {\r\n            if (!items.includes(item_i)) {\r\n                listItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            const selected = listItemWidget.getSelected(item_i);\r\n            if (list.contains(item_i) && !selected) {\r\n                listItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #addToSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        this.beginSelection(list);\r\n        items.forEach((item_i) => {\r\n            if (!listItemWidget.getSelected(item_i)) {\r\n                listItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #removeFromSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                listItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #clearSelection(list: HTMLElement): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        selectedItems.forEach((item_i) => {\r\n            listItemWidget.setSelected(item_i, false);\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #setActiveItem(list: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(list);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            listItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            listItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n    \r\n    #setDropTargetItem(list: HTMLElement, item: HTMLElement | null): void {\r\n        const {classList} = list;\r\n        const dropTargetItem = this.#getDropTargetItem(list);\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            listItemWidget.setDropTarget(dropTargetItem, false);\r\n        }\r\n        if (item !== null) {\r\n            listItemWidget.setDropTarget(item, false);\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    #firstItem(list: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(list: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLElement | null>walker.previousNode();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const nextItem = <HTMLElement | null>walker.nextNode();\r\n        return nextItem;\r\n    }\r\n\r\n    #handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetList, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            this.#setDropTargetItem(targetList, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!targetList.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(targetList, null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            const selectedItems = this.selectedItems(targetTree);\r\n            if (!selectedItems.includes(targetItem)) {\r\n                this.#setSelection(targetTree, targetItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetTree);\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetTree, targetItem);\r\n            targetTree.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetList);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetList, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetList, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(firstItem, lastItem);\r\n                            if (range) {\r\n                                this.#setSelection(targetList, ...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = listItemWidget.getSelected(previousItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetList, previousItem) :\r\n                                this.#addToSelection(targetList, previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetList);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = listItemWidget.getSelected(nextItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetList, nextItem) :\r\n                                this.#addToSelection(targetList, nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetList);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetList);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetList);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(targetList, activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection(targetList);\r\n                this.#setActiveItem(targetList, null);\r\n                targetList.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey, button} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            const selected = listItemWidget.getSelected(targetItem);\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setSelection(targetList, targetItem);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            targetItem.blur();\r\n                            this.#removeFromSelection(targetList, targetItem);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(targetList, targetItem);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const activeItem = this.#getActiveItem(targetList);\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                targetItem\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetList, ...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                }\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(targetList, targetItem);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetList.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetList.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetList) {\r\n            if (this.#onSelection.get(targetList)) {\r\n                this.#hasSelectionChanged.set(targetList, true);\r\n            }\r\n            else {\r\n                targetList.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { listItemWidget } from \"./ListItemWidget\";\r\n\r\nexport { listItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"listitemgroup\": ListItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ListItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar listItemGroupWidget = new (\r\nWidget({\r\n    name: \"listitemgroup\"\r\n})(class ListItemGroupWidgetFactoryBase extends WidgetFactory implements ListItemGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"listitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n\r\n    slottedCallback(group: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"listitem\")) {\r\n                listItemWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { toolbarItemWidget };\r\n\r\ntype ToolBarItemType = \"button\" | \"checkbox\" | \"radio\" | \"menubutton\";\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbaritem\": ToolBarItemWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ToolBarItemWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        id?: string;\r\n        type: ToolBarItemType;\r\n        pressed?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    menu(item: HTMLElement): HTMLElement | null;\r\n    getName(item: HTMLElement): string;\r\n    setName(item: HTMLElement, value: string): void;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setPressed(item: HTMLElement, value: boolean): void;\r\n    getPressed(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    getValue(item: HTMLElement): string;\r\n    setValue(item: HTMLElement, value: string): void;\r\n    getType(item: HTMLElement): ToolBarItemType | null;\r\n    setType(item: HTMLElement, value: ToolBarItemType): void;\r\n}\r\n\r\nvar toolbarItemWidget = new(\r\nWidget({\r\n    name: \"toolbaritem\"\r\n})(\r\nclass ToolBarItemWidgetFactoryBase extends WidgetFactory implements ToolBarItemWidgetFactory {\r\n    #template: HTMLElement;\r\n    #types: ToolBarItemType[];\r\n\r\n    constructor() {\r\n        super();\r\n        this.#types = [\"button\", \"checkbox\", \"radio\", \"menubutton\"];\r\n        this.#template = element(\"button\", {\r\n            attributes: {\r\n                class: \"toolbaritem\",\r\n                role: \"button\",\r\n                type: \"button\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        type?: ToolBarItemType;\r\n        pressed?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }) {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (init !== void 0) {\r\n            const {id, keyshortcut, pressed, type, label, name, value, disabled} = init;\r\n            if (id !== undefined) {\r\n                item.id = id;\r\n            }\r\n            if (keyshortcut !== undefined) {\r\n                this.setKeyShortcut(item, keyshortcut);\r\n            }\r\n            if (pressed !== undefined) {\r\n                this.setPressed(item, pressed);\r\n            }\r\n            if (type !== undefined) {\r\n                this.setType(item, type);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(item, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(item, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(item: HTMLElement): HTMLElement | null {\r\n        return item;\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void {\r\n        const hasChildMenu = Array.from(slot.childNodes).some(\r\n            childNode_i => childNode_i instanceof HTMLElement && childNode_i.classList.contains(\"menu\")\r\n        );\r\n        item.setAttribute(\"aria-haspopup\", String(hasChildMenu));\r\n    }\r\n\r\n    menu(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .menu\");\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-expanded\", value);\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-expanded\");\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    getKeyShortcut(item: HTMLElement): string | null {\r\n        return item.getAttribute(\"aria-keyshortcuts\");\r\n    }\r\n\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void {\r\n        if (value !== null) {\r\n            item.setAttribute(\"aria-keyshortcuts\", value);\r\n        }\r\n        else {\r\n            item.removeAttribute(\"aria-keyshortcuts\");\r\n        }\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        const expand = force ?? !this.getExpanded(item);\r\n        this.setExpanded(item, expand);\r\n        if (expand) {\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    expand(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (!expanded) {\r\n            this.setExpanded(item, true);\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    collapse(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (expanded) {\r\n            this.setExpanded(item, false);\r\n        }\r\n    }\r\n\r\n    getType(item: HTMLElement): ToolBarItemType | null {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`toolbaritem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setType(item: HTMLElement, type: ToolBarItemType): void {\r\n        const oldType = this.getType(item);\r\n        if (type !== oldType) {\r\n            const {classList} = item;\r\n            if (oldType) {\r\n                classList.remove(`toolbaritem-${oldType}`);\r\n            }\r\n            classList.add(`toolbaritem-${type}`);\r\n        }\r\n    }\r\n\r\n    getValue(item: HTMLElement): string {\r\n        return item.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"value\", value);\r\n    }\r\n\r\n    getTitle(item: HTMLElement): string {\r\n        return item.getAttribute(\"title\") ?? \"\";\r\n    }\r\n\r\n    setTitle(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"title\", value);\r\n    }\r\n\r\n    getName(item: HTMLElement): string {\r\n        return item.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getPressed(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-pressed\") ?? String(false));\r\n    }\r\n\r\n    setPressed(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-pressed\", String(value));\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetItem = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetItem.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse(targetItem);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.setPressed(targetItem, !this.getPressed(targetItem));\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.setPressed(targetItem, true);\r\n                    break;\r\n                }\r\n                case \"menubutton\": {\r\n                    const menu = this.menu(targetItem);\r\n                    if (menu && !menu.contains(<Node>target)) {\r\n                        this.toggle(targetItem);\r\n                        const expanded = this.getExpanded(targetItem);\r\n                        if (expanded) {\r\n                            menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(item: HTMLElement): void {\r\n        const type = this.getType(item);\r\n        if (type == \"menubutton\") {\r\n            const menu = this.menu(item);\r\n            if (menu !== null) {\r\n                const {style: menuStyle} = menu;\r\n                const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = item.getBoundingClientRect();\r\n                const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n                const {scrollY, scrollX} = window;\r\n                const {clientWidth, clientHeight} = document.body;\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n        }\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n}));\r\n","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { toolbarItemWidget } from \"./ToolBarItemWidget\";\r\n\r\nexport { toolbarWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbar\": ToolBarWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ToolBarWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }): HTMLElement;\r\n    setOrientation(toolbar: HTMLElement, value: ToolBarOrientation): void;\r\n    getOrientation(toolbar: HTMLElement): ToolBarOrientation;\r\n}\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\nvar toolbarWidget = new (\r\nWidget({\r\n    name: \"toolbar\"\r\n})(class ToolBarWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"toolbar\",\r\n                role: \"toolbar\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        )\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }) {\r\n        const toolbar = <HTMLElement>this.#template.cloneNode(true);\r\n        toolbar.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        toolbar.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        toolbar.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        toolbar.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        toolbar.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex} = properties;\r\n            if (id !== undefined) {\r\n                toolbar.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                toolbar.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                toolbar.tabIndex = tabIndex;\r\n            }\r\n        }\r\n        return toolbar;\r\n    }\r\n\r\n    slot(toolbar: HTMLElement) {\r\n        return toolbar;\r\n    }\r\n\r\n    #getActiveItem(toolbar: HTMLElement): HTMLElement | null {\r\n        return toolbar.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .toolbaritemgroup) > .toolbaritem.active\"\r\n        );\r\n    }\r\n\r\n    items(toolbar: HTMLElement): HTMLElement[] {\r\n        return Array.from(toolbar.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .toolbaritemgroup) > .toolbaritem\"\r\n        ));\r\n    }\r\n\r\n    setOrientation(toolbar: HTMLElement, value: ToolBarOrientation): void {\r\n        toolbar.setAttribute(\"aria-orientation\", value);\r\n    }\r\n\r\n    getOrientation(toolbar: HTMLElement): ToolBarOrientation {\r\n        return <ToolBarOrientation>toolbar.getAttribute(\"aria-orientation\") ?? \"horizontal\";\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node) {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"toolbaritem\") && !toolbarItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"toolbaritemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(toolbar: Element): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = toolbar;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(toolbar: Element): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = toolbar;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLElement | null>walker.previousSibling();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = toolbarItemWidget.menu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #setActiveItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(tree);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            toolbarItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            toolbarItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: Event): void {\r\n        const {currentTarget, target} = event;\r\n        const toolbar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem) {\r\n            const type = toolbarItemWidget.getType(targetItem);\r\n            const name = toolbarItemWidget.getName(targetItem);\r\n            const value = toolbarItemWidget.getType(targetItem);\r\n            if (type == \"radio\") {\r\n                toolbar.querySelectorAll<HTMLElement>(\r\n                    `:is(:scope, :scope > .toolbaritemgroup) > .toolbaritem[type=radio][name=${name}]`\r\n                ).forEach((radio_i) => {\r\n                    toolbarItemWidget.setPressed(radio_i, toolbarItemWidget.getValue(radio_i) == value);\r\n                });\r\n            }\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const focusWithin = targetToolbar.contains(<Node>relatedTarget);\r\n        if (!focusWithin) {\r\n            const activeItem = this.#getActiveItem(targetToolbar);\r\n            if (activeItem) {\r\n                activeItem.focus();\r\n            }\r\n            else {\r\n                const firstItem = this.#firstItem(targetToolbar);\r\n                firstItem?.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetToolbar, targetItem);\r\n            targetToolbar.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetToolbar.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.#setActiveItem(targetToolbar, null);\r\n            targetToolbar.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetToolbar);\r\n        switch (key) {\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const type = toolbarItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"menubutton\": {\r\n                            toolbarItemWidget.expand(activeItem);\r\n                            const firstChildItem = this.#firstChildItem(activeItem);\r\n                            firstChildItem?.focus({preventScroll: true});\r\n                            event.preventDefault();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetToolbar);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetToolbar);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetToolbar);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetToolbar);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    activeItem.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    targetToolbar.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { toolbarItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbaritemgroup\": MenuItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar toolbarItemGroupWidget = new (\r\nWidget({\r\n    name: \"toolbaritemgroup\"\r\n})(class MenuItemGroupWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"toolbaritemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n}));","import { element } from \"../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"./Widget\";\r\n\r\nexport { widthSashWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"widthsash\": WidthSashWidgetFactory\r\n    }\r\n}\r\n\r\ninterface WidthSashWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"left\" | \"right\";\r\n    }): HTMLElement;\r\n}\r\n\r\nvar widthSashWidget = new (\r\nWidget({\r\n    name: \"widthsash\"\r\n})(class WidthSashWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    #targets: WeakMap<HTMLElement, HTMLElement | null>;\r\n    #onCaptureFlags: WeakMap<HTMLElement, boolean>;\r\n    #queuedPointerCallbacks: WeakMap<HTMLElement, FrameRequestCallback | null>;\r\n    #pointerMovements: WeakMap<HTMLElement, number>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"widthsash\"\r\n            }\r\n        });\r\n        this.#targets = new WeakMap();\r\n        this.#onCaptureFlags = new WeakMap();\r\n        this.#queuedPointerCallbacks = new WeakMap();\r\n        this.#pointerMovements = new WeakMap();\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"left\" | \"right\";\r\n    }) {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const sash = <HTMLElement>this.#template.cloneNode(true);\r\n        sash.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        sash.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        sash.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, controls, growDir} = properties;\r\n            if (id !== undefined) {\r\n                sash.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                sash.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                sash.tabIndex = tabIndex;\r\n            }\r\n            if (controls !== undefined) {\r\n                this.setControls(sash, controls);\r\n            }\r\n            if (growDir !== undefined) {\r\n                this.setGrowDir(sash, growDir);\r\n            }\r\n        }\r\n        targets.set(sash, null);\r\n        queuedPointerCallbacks.set(sash, null);\r\n        pointerMovements.set(sash, 0);\r\n        onCaptureFlags.set(sash, false);\r\n        return sash;\r\n    }\r\n\r\n    getGrowDir(sash: HTMLElement): \"right\" | \"left\" {\r\n        return <\"right\" | \"left\">sash.getAttribute(\"data-growdir\") ?? \"right\";\r\n    }\r\n\r\n    setGrowDir(sash: HTMLElement, value: \"right\" | \"left\"): void {\r\n        sash.setAttribute(\"data-growdir\", value);\r\n    }\r\n\r\n    getControls(sash: HTMLElement): string | null {\r\n        return sash.getAttribute(\"data-controls\");\r\n    }\r\n\r\n    setControls(sash: HTMLElement, value: string): void {\r\n        sash.setAttribute(\"data-controls\", value);\r\n    }\r\n\r\n    setWidth(sash: HTMLElement, width: number): void {\r\n        const targets = this.#targets;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            target.style.setProperty(\"width\", `${width}px`);\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        sashTarget.releasePointerCapture(pointerId);\r\n        onCaptureFlags.set(sashTarget, false);\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const controls = this.getControls(sashTarget);\r\n        if (controls) {\r\n            const targets = this.#targets;\r\n            const onCaptureFlags = this.#onCaptureFlags;\r\n            const rootNode = <ShadowRoot | Document>sashTarget.getRootNode();\r\n            targets.set(sashTarget, rootNode.getElementById(controls));\r\n            onCaptureFlags.set(sashTarget, true);\r\n            sashTarget.setPointerCapture(pointerId);\r\n        }\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        const {currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const pointerMoveCallback = this.#pointerMoveCallback;\r\n        const onCaptureFlag = onCaptureFlags.get(sashTarget);\r\n        if (onCaptureFlag) {\r\n            let callback = queuedPointerCallbacks.get(sashTarget);\r\n            if (callback == null) {\r\n                callback = pointerMoveCallback.bind(this, sashTarget);\r\n                queuedPointerCallbacks.set(sashTarget, callback);\r\n                requestAnimationFrame(callback);\r\n            }\r\n            const pointerMovement = pointerMovements.get(sashTarget)! + event.movementX;\r\n            pointerMovements.set(sashTarget, pointerMovement);\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(sash: HTMLElement): void {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const growdir = this.getGrowDir(sash);\r\n            const movementX = pointerMovements.get(sash)!;\r\n            const width = parseFloat(targetComputedStyle.getPropertyValue(\"width\"));\r\n            const newWidth = width + (growdir == \"right\" ? 1 : -1) * movementX;\r\n            this.setWidth(sash, newWidth);\r\n            sash.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        pointerMovements.set(sash, 0);\r\n        queuedPointerCallbacks.set(sash, null);\r\n    }\r\n}));","import { element } from \"../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"./Widget\";\r\n\r\nexport { heightSashWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"heightsash\": HeightSashWidgetFactory\r\n    }\r\n}\r\n\r\ninterface HeightSashWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"top\" | \"bottom\";\r\n    }): HTMLElement;\r\n}\r\n\r\nvar heightSashWidget = new (\r\nWidget({\r\n    name: \"heightsash\"\r\n})(class HeightSashWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    #targets: WeakMap<HTMLElement, HTMLElement | null>;\r\n    #onCaptureFlags: WeakMap<HTMLElement, boolean>;\r\n    #queuedPointerCallbacks: WeakMap<HTMLElement, FrameRequestCallback | null>;\r\n    #pointerMovements: WeakMap<HTMLElement, number>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"heightsash\"\r\n            }\r\n        });\r\n        this.#targets = new WeakMap();\r\n        this.#onCaptureFlags = new WeakMap();\r\n        this.#queuedPointerCallbacks = new WeakMap();\r\n        this.#pointerMovements = new WeakMap();\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"top\" | \"bottom\";\r\n    }) {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const sash = <HTMLElement>this.#template.cloneNode(true);\r\n        sash.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        sash.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        sash.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, controls, growDir} = properties;\r\n            if (id !== undefined) {\r\n                sash.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                sash.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                sash.tabIndex = tabIndex;\r\n            }\r\n            if (controls !== undefined) {\r\n                this.setControls(sash, controls);\r\n            }\r\n            if (growDir !== undefined) {\r\n                this.setGrowDir(sash, growDir);\r\n            }\r\n        }\r\n        targets.set(sash, null);\r\n        queuedPointerCallbacks.set(sash, null);\r\n        pointerMovements.set(sash, 0);\r\n        onCaptureFlags.set(sash, false);\r\n        return sash;\r\n    }\r\n\r\n    getGrowDir(sash: HTMLElement): \"top\" | \"bottom\" {\r\n        return <\"top\" | \"bottom\">sash.getAttribute(\"data-growdir\") ?? \"top\";\r\n    }\r\n\r\n    setGrowDir(sash: HTMLElement, value: \"top\" | \"bottom\"): void {\r\n        sash.setAttribute(\"data-growdir\", value);\r\n    }\r\n\r\n    getControls(sash: HTMLElement): string | null {\r\n        return sash.getAttribute(\"data-controls\");\r\n    }\r\n\r\n    setControls(sash: HTMLElement, value: string): void {\r\n        sash.setAttribute(\"data-controls\", value);\r\n    }\r\n\r\n    setHeight(sash: HTMLElement, height: number): void {\r\n        const targets = this.#targets;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            target.style.setProperty(\"height\", `${height}px`);\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        sashTarget.releasePointerCapture(pointerId);\r\n        onCaptureFlags.set(sashTarget, false);\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const controls = this.getControls(sashTarget);\r\n        if (controls) {\r\n            const targets = this.#targets;\r\n            const onCaptureFlags = this.#onCaptureFlags;\r\n            const rootNode = <ShadowRoot | Document>sashTarget.getRootNode();\r\n            targets.set(sashTarget, rootNode.getElementById(controls));\r\n            onCaptureFlags.set(sashTarget, true);\r\n            sashTarget.setPointerCapture(pointerId);\r\n        }\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        const {currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const onCaptureFlag = onCaptureFlags.get(sashTarget);\r\n        if (onCaptureFlag) {\r\n            let callback = queuedPointerCallbacks.get(sashTarget);\r\n            if (callback == null) {\r\n                callback = this.#pointerMoveCallback.bind(this, sashTarget);\r\n                queuedPointerCallbacks.set(sashTarget, callback);\r\n                requestAnimationFrame(callback);\r\n            }\r\n            const pointerMovement = pointerMovements.get(sashTarget)! + event.movementX;\r\n            pointerMovements.set(sashTarget, pointerMovement);\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(sash: HTMLElement): void {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const growdir = this.getGrowDir(sash);\r\n            const movementX = pointerMovements.get(sash)!;\r\n            const height = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            const newHeight = height + (growdir == \"top\" ? -1 : 1) * movementX;\r\n            this.setHeight(sash, newHeight);\r\n            sash.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        pointerMovements.set(sash, 0);\r\n        queuedPointerCallbacks.set(sash, null);\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridCellWidget };\r\n\r\ninterface GridCellWidgetFactory extends WidgetFactory {\r\n    create(init: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        disabled?: boolean;\r\n        headers?: string;\r\n    }): HTMLElement;\r\n    getHeaders(item: HTMLElement): string;\r\n    setHeaders(item: HTMLElement, value: string): void;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridcell\": GridCellWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridCellWidget = new (\r\nWidget({\r\n    name: \"gridcell\"\r\n})(class GridCellWidgetFactoryBase extends WidgetFactory implements GridCellWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"td\", {\r\n            attributes: {\r\n                class: \"gridcell\",\r\n                role: \"gridcell\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        disabled?: boolean;\r\n        headers?: string;\r\n    }): HTMLElement {\r\n        const cell = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {id, classList, tabIndex, disabled, headers} = init;\r\n            if (id !== undefined) {\r\n                cell.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                cell.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                cell.tabIndex = tabIndex;\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(cell, disabled);\r\n            }\r\n            if (headers !== undefined) {\r\n                this.setHeaders(cell, headers);\r\n            }\r\n            this.setSelected(cell, false);\r\n        }\r\n        return cell;\r\n    }\r\n\r\n    slot(cell: HTMLElement): HTMLElement | null {\r\n        return cell;\r\n    }\r\n\r\n    getHeaders(item: HTMLElement): string {\r\n        return item.getAttribute(\"headers\") ?? \"\";\r\n    }\r\n\r\n    setHeaders(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"headers\", value);\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-selected\", String(value));\r\n        item.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .content > .label\")!;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { gridCellWidget } from \"./GridCellWidget\";\r\n\r\nexport { gridRowWidget };\r\n\r\ninterface GridRowWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        disabled?: boolean\r\n    }): HTMLElement;\r\n    cells(row: HTMLElement): HTMLElement[];\r\n    setPosInSet(row: HTMLElement, value: number): void;\r\n    getPosInSet(row: HTMLElement): number;\r\n    setActive(row: HTMLElement, value: boolean): void;\r\n    getActive(row: HTMLElement): boolean;\r\n    setDropTarget(row: HTMLElement, value: boolean): void;\r\n    getDropTarget(row: HTMLElement): boolean;\r\n    setSelected(row: HTMLElement, value: boolean): void;\r\n    getSelected(row: HTMLElement): boolean;\r\n    setDisabled(row: HTMLElement, value: boolean): void;\r\n    getDisabled(row: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridrow\": GridRowWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridRowWidget = new (\r\nWidget({\r\n    name: \"gridrow\"\r\n})(class GridRowWidgetFactoryBase extends WidgetFactory implements GridRowWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"tr\", {\r\n            attributes: {\r\n                class: \"gridrow\",\r\n                role: \"row\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const row = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {disabled} = init;\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(row, disabled);\r\n            }\r\n            this.setSelected(row, false);\r\n        }\r\n        return row;\r\n    }\r\n\r\n    slot(row: HTMLElement): HTMLElement | null {\r\n        return row;\r\n    }\r\n\r\n    cells(row: HTMLElement): HTMLElement[] {\r\n        return Array.from(row.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridcell\"\r\n        ));\r\n    }\r\n    \r\n    setPosInSet(row: HTMLElement, value: number): void {\r\n        row.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(row: HTMLElement): number {\r\n        const posInSet = row.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(row: HTMLElement, value: boolean): void {\r\n        const {classList} = row;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(row: HTMLElement): boolean {\r\n        const {classList} = row;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(row: HTMLElement, value: boolean): void {\r\n        const {classList} = row;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(row: HTMLElement): boolean {\r\n        const {classList} = row;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(row: HTMLElement, value: boolean): void {\r\n        row.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(row: HTMLElement): boolean {\r\n        return row.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(row: HTMLElement, value: boolean): void {\r\n        row.setAttribute(\"aria-selected\", String(value));\r\n        row.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(row: HTMLElement): boolean {\r\n        return JSON.parse(row.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((item_i, i) => {\r\n            if (item_i instanceof HTMLElement) {\r\n                gridCellWidget.setPosInSet(item_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { gridCellWidget } from \"./GridCellWidget\";\r\nimport { gridRowWidget } from \"./GridRowWidget\";\r\n\r\nexport { gridWidget };\r\n\r\ntype GridSelectBy = \"cell\" | \"row\";\r\n\r\ninterface GridRowWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n        selectby?: GridSelectBy\r\n    }): HTMLElement;\r\n    setSelectBy(item: HTMLElement, value: GridSelectBy): void;\r\n    getSelectBy(item: HTMLElement): GridSelectBy;\r\n    headers(grid: HTMLElement): HTMLElement[];\r\n    cells(grid: HTMLElement): HTMLElement[];\r\n    rows(grid: HTMLElement): HTMLElement[];\r\n    beginSelection(grid: HTMLElement): void;\r\n    endSelection(grid: HTMLElement): void;\r\n    selectedCells(grid: HTMLElement): HTMLElement[];\r\n    selectedRows(grid: HTMLElement): HTMLElement[];\r\n    clearSelection(grid: HTMLElement): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"grid\": GridRowWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridWidget = new (\r\nWidget({\r\n    name: \"grid\"\r\n})(class GridWidgetFactoryBase extends WidgetFactory implements GridRowWidgetFactory {\r\n\r\n    #getActiveRow(grid: HTMLElement): HTMLElement | null {\r\n        return grid.querySelector<HTMLElement>(\".gridrow.active\");\r\n    }\r\n\r\n    #getActiveCell(grid: HTMLElement): HTMLElement | null {\r\n        return grid.querySelector<HTMLElement>(\".gridcell.active\");\r\n    }\r\n\r\n    headers(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridhead > .gridheader\"\r\n        ));\r\n    }\r\n\r\n    rows(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridbody > .gridrow\"\r\n        ));\r\n    }\r\n\r\n    cells(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridbody > .gridrow > .gridcell\"\r\n        ));\r\n    }\r\n\r\n    #template: HTMLElement;\r\n    #rowsWalker: TreeWalker;\r\n    #cellsWalker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"table\", {\r\n            attributes: {\r\n                class: \"grid\",\r\n                role: \"grid\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#cellsWalker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#cellsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#rowsWalker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#rowsWalkerNodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n        selectby?: GridSelectBy;\r\n    }) {\r\n        const grid = <HTMLElement>this.#template.cloneNode(true);\r\n        //grid.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        grid.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        grid.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        grid.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        grid.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        grid.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        grid.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, selectby, multisectable} = properties;\r\n            if (id !== undefined) {\r\n                grid.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                grid.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                grid.tabIndex = tabIndex;\r\n            }\r\n            if (selectby !== undefined) {\r\n                this.setSelectBy(grid, selectby);\r\n            }\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(grid, multisectable);\r\n            }\r\n        }\r\n        return grid;\r\n    }\r\n\r\n    slot(grid: HTMLElement): HTMLElement | null {\r\n        return grid;\r\n    }\r\n\r\n    setMultiSelectable(grid: HTMLElement, value: boolean): void {\r\n        grid.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(grid: HTMLElement): boolean {\r\n        return JSON.parse(grid.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    setSelectBy(grid: HTMLElement, value: GridSelectBy): void {\r\n        grid.setAttribute(\"data-selectby\", value);\r\n    }\r\n\r\n    getSelectBy(grid: HTMLElement): GridSelectBy {\r\n        return <GridSelectBy>grid.getAttribute(\"data-selectby\") ?? \"cell\";\r\n    }\r\n\r\n    beginSelection(grid: HTMLElement): void {\r\n        this.#onSelection.set(grid, true);\r\n    }\r\n\r\n    endSelection(grid: HTMLElement): void {\r\n        this.#onSelection.set(grid, false);\r\n        if (this.#hasSelectionChanged.get(grid)) {\r\n            grid.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(grid, false);\r\n        }\r\n    }\r\n\r\n    clearSelection(grid: HTMLElement): void {\r\n        this.#clearCellsSelection(grid);\r\n        this.#clearRowsSelection(grid);\r\n    }\r\n\r\n    selectedCells(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll(\":scope > .gridbody > .gridrow > .gridcell[aria-selected=true]\"));\r\n    }\r\n\r\n    selectedRows(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll(\":scope > .gridbody > .gridrow[aria-selected=true]\"));\r\n    }\r\n\r\n    #cellsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"gridcell\") && !gridCellWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"gridrow\") || classList.contains(\"gridbody\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #rowsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"gridrow\") && !gridRowWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"gridbody\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getCellsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextCell = this.#nextCell(from);\r\n            while (nextCell && nextCell !== to) {\r\n                range.push(nextCell);\r\n                nextCell = this.#nextCell(nextCell);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousCell = this.#previousCell(from);\r\n            while (previousCell && previousCell !== to) {\r\n                range.push(previousCell);\r\n                previousCell = this.#previousRow(previousCell);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #getRowsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextRow = this.#nextRow(from);\r\n            while (nextRow && nextRow !== to) {\r\n                range.push(nextRow);\r\n                nextRow = this.#nextRow(nextRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousRow = this.#previousRow(from);\r\n            while (previousRow && previousRow !== to) {\r\n                range.push(previousRow);\r\n                previousRow = this.#previousRow(previousRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setCellsSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        selectedCells.forEach((selectedCell_i) => {\r\n            if (!cells.includes(selectedCell_i)) {\r\n                gridCellWidget.setSelected(selectedCell_i, false);\r\n            }\r\n        });\r\n        cells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (!selected) {\r\n                gridCellWidget.setSelected(cell_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #setRowsSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        selectedRows.forEach((selectedRow_i) => {\r\n            if (!rows.includes(selectedRow_i)) {\r\n                gridRowWidget.setSelected(selectedRow_i, false);\r\n            }\r\n        });\r\n        rows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (!selected) {\r\n                gridRowWidget.setSelected(row_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #addCellsToSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        cells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (!selected) {\r\n                gridCellWidget.setSelected(cell_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #addRowsToSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        rows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (!selected) {\r\n                gridRowWidget.setSelected(row_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #removeCellsFromSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        cells.forEach((cell_i) => {\r\n            if (selectedCells.includes(cell_i)) {\r\n                gridCellWidget.setSelected(cell_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #removeRowsFromSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        rows.forEach((row_i) => {\r\n            if (selectedRows.includes(row_i)) {\r\n                gridRowWidget.setSelected(row_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #clearCellsSelection(grid: HTMLElement): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        selectedCells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (selected) {\r\n                gridCellWidget.setSelected(cell_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #clearRowsSelection(grid: HTMLElement): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        selectedRows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (selected) {\r\n                gridRowWidget.setSelected(row_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #setActiveCell(grid: HTMLElement, cell: HTMLElement | null): void {\r\n        const activeCell = this.#getActiveCell(grid);\r\n        if (activeCell !== null && activeCell !== cell) {\r\n            gridCellWidget.setActive(activeCell, false);\r\n            activeCell.tabIndex = -1;\r\n        }\r\n        if (cell !== null) {\r\n            gridCellWidget.setActive(cell, true);\r\n            cell.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #setActiveRow(grid: HTMLElement, row: HTMLElement | null): void {\r\n        const activeRow = this.#getActiveRow(grid);\r\n        if (activeRow !== null && activeRow !== row) {\r\n            gridRowWidget.setActive(activeRow, false);\r\n            activeRow.tabIndex = -1;\r\n        }\r\n        if (row !== null) {\r\n            gridCellWidget.setActive(row, true);\r\n            row.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #firstCell(row: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLElement | null>cellsWalker.firstChild();\r\n    }\r\n\r\n    #lastCell(row: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLElement | null>cellsWalker.lastChild();\r\n    }\r\n\r\n    #previousCell(cell: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLElement | null>cellsWalker.previousNode();\r\n    }\r\n\r\n    #nextCell(cell: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLElement | null>cellsWalker.nextNode();\r\n    }\r\n\r\n    #closestRow(cell: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = cell;\r\n        return <HTMLElement | null>rowsWalker.parentNode();\r\n    }\r\n\r\n    #firstRow(grid: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = grid;\r\n        return <HTMLElement | null>rowsWalker.firstChild();\r\n    }\r\n\r\n    #lastRow(grid: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = grid;\r\n        return <HTMLElement | null>rowsWalker.lastChild();\r\n    }\r\n\r\n    #previousRow(row: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLElement | null>rowsWalker.previousNode();\r\n    }\r\n\r\n    #nextRow(row: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLElement | null>rowsWalker.nextNode();\r\n    }\r\n\r\n    #topCell(cell: HTMLElement): HTMLElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const closestRowCells = gridRowWidget.cells(closestRow);\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const previousRow = this.#previousRow(closestRow);\r\n            if (previousRow) {\r\n                const previousRowCells = gridRowWidget.cells(previousRow);\r\n                return previousRowCells[Math.min(cellIndex, previousRowCells.length)];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #bottomCell(cell: HTMLElement): HTMLElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const closestRowCells = gridRowWidget.cells(closestRow);\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const nextRow = this.#nextRow(closestRow);\r\n            if (nextRow) {\r\n                const nextRowCells = gridRowWidget.cells(nextRow);\r\n                return nextRowCells[Math.min(cellIndex, nextRowCells.length)];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /*#handleContextMenuEvent(event: MouseEvent) {\r\n        const {currentTarget, target} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    const selectedCells = this.selectedCells(targetGrid);\r\n                    if (!selectedCells.includes(targetCell)) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    targetCell.focus({preventScroll: true});\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    const selectedRows = this.selectedRows(targetGrid);\r\n                    if (!selectedRows.includes(targetRow)) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    targetRow.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        event.preventDefault();\r\n    }*/\r\n\r\n    /*#handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            const type = treeitemWidget.getType(targetItem);\r\n            if (type == \"parent\") {\r\n                treeitemWidget.toggle(targetItem, true);\r\n            }\r\n            this.#setDropTargetItem(targetTree, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!targetTree.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(targetTree, null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }*/\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const activeCell = this.#getActiveCell(targetGrid);\r\n                if (activeCell && relatedTarget !== activeCell) {\r\n                    activeCell.focus();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const activeRow = this.#getActiveRow(targetGrid);\r\n                if (activeRow && relatedTarget !== activeRow) {\r\n                    activeRow.focus();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    this.#setActiveCell(targetGrid, targetCell);\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    this.#setActiveRow(targetGrid, targetRow);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetGrid.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetGrid.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const activeCell = this.#getActiveCell(targetGrid);\r\n        const activeRow = this.#getActiveRow(targetGrid);\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        const multiselectable = this.getMultiSelectable(targetGrid);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey && multiselectable) {\r\n                    switch (selectby) {\r\n                        case \"cell\": {\r\n                            const firstRow = this.#firstRow(targetGrid);\r\n                            const firstCell = firstRow ? this.#firstCell(firstRow) : null;\r\n                            const lastRow = this.#lastRow(targetGrid);\r\n                            const lastCell = lastRow ? this.#lastCell(lastRow) : null;\r\n                            if (firstCell && lastCell) {\r\n                                const range = this.#getCellsRange(firstCell, lastCell);\r\n                                if (range) {\r\n                                    this.#setCellsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"row\": {\r\n                            const firstRow = this.#firstRow(targetGrid);\r\n                            const lastRow = this.#lastRow(targetGrid);\r\n                            if (firstRow && lastRow) {\r\n                                const range = this.#getRowsRange(firstRow, lastRow);\r\n                                if (range) {\r\n                                    this.#setRowsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const previousCell = this.#previousCell(activeCell);\r\n                        if (previousCell) {\r\n                            previousCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(previousCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, previousCell) :\r\n                                    this.#addCellsToSelection(targetGrid, previousCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const nextCell = this.#nextCell(activeCell);\r\n                        if (nextCell) {\r\n                            nextCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(nextCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, nextCell) :\r\n                                    this.#addCellsToSelection(targetGrid, nextCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const firstRow = activeRow ?? this.#firstRow(targetGrid);\r\n                        const topCell = activeCell ?\r\n                            this.#topCell(activeCell) :\r\n                            firstRow ?\r\n                            this.#firstCell(firstRow) :\r\n                            null;\r\n                        if (topCell) {\r\n                            topCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(topCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, topCell) :\r\n                                    this.#addCellsToSelection(targetGrid, topCell);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const previousRow = activeRow ?\r\n                            this.#previousRow(activeRow) :\r\n                            this.#firstRow(targetGrid);\r\n                        if (previousRow) {\r\n                            previousRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridRowWidget.getSelected(previousRow);\r\n                                selected ?\r\n                                    this.#removeRowsFromSelection(targetGrid, previousRow) :\r\n                                    this.#addRowsToSelection(targetGrid, previousRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const lastRow = activeRow ?? this.#lastRow(targetGrid);\r\n                        const bottomCell = activeCell ?\r\n                            this.#bottomCell(activeCell) :\r\n                            lastRow ?\r\n                            this.#lastCell(lastRow) :\r\n                            null;\r\n                            if (bottomCell) {\r\n                                bottomCell.focus({preventScroll: true});\r\n                                const {shiftKey} = event;\r\n                                if (shiftKey && multiselectable) {\r\n                                    const selected = gridCellWidget.getSelected(bottomCell);\r\n                                    selected ?\r\n                                        this.#removeCellsFromSelection(targetGrid, bottomCell) :\r\n                                        this.#addCellsToSelection(targetGrid, bottomCell);\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"row\": {\r\n                        const nextRow = activeRow ?\r\n                            this.#nextRow(activeRow) :\r\n                            this.#lastRow(targetGrid);\r\n                        if (nextRow) {\r\n                            nextRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridRowWidget.getSelected(nextRow);\r\n                                selected ?\r\n                                    this.#removeRowsFromSelection(targetGrid, nextRow) :\r\n                                    this.#addRowsToSelection(targetGrid, nextRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const firstCell = this.#firstCell(activeRow);\r\n                            if (firstCell) {\r\n                                firstCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const firstRow = this.#firstRow(targetGrid);\r\n                        if (firstRow) {\r\n                            firstRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const lastCell = this.#lastCell(activeRow);\r\n                            if (lastCell) {\r\n                                lastCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const lastRow = this.#lastRow(targetGrid);\r\n                        if (lastRow) {\r\n                            lastRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeCell) {\r\n                            this.#setCellsSelection(targetGrid, activeCell);\r\n                            activeCell.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        if (activeRow) {\r\n                            this.#setRowsSelection(targetGrid, activeRow);\r\n                            activeRow.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        this.#clearCellsSelection(targetGrid);\r\n                        this.#setActiveCell(targetGrid, null);\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        this.#clearRowsSelection(targetGrid);\r\n                        this.#setActiveRow(targetGrid, null);\r\n                        break;\r\n                    }\r\n                }\r\n                targetGrid.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        const multiselectable = this.getMultiSelectable(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    if (multiselectable) {\r\n                        if (!shiftKey && !ctrlKey) {\r\n                            this.#setCellsSelection(targetGrid, targetCell);\r\n                        }\r\n                        else if (ctrlKey) {\r\n                            const selected = gridCellWidget.getSelected(targetCell);\r\n                            !selected ?\r\n                                this.#addCellsToSelection(targetGrid, targetCell) :\r\n                                this.#removeCellsFromSelection(targetGrid, targetCell);\r\n                            event.stopPropagation();\r\n                        }\r\n                        else if (shiftKey) {\r\n                            const activeCell = this.#getActiveCell(targetGrid);\r\n                            if (activeCell) {\r\n                                const range = this.#getCellsRange(\r\n                                    activeCell,\r\n                                    targetCell\r\n                                );\r\n                                if (range) {\r\n                                    this.#setCellsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.#setCellsSelection(targetGrid, targetCell);\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    if (multiselectable) {\r\n                        if (!shiftKey && !ctrlKey) {\r\n                            this.#setRowsSelection(targetGrid, targetRow);\r\n                        }\r\n                        else if (ctrlKey) {\r\n                            const selected = gridRowWidget.getSelected(targetRow);\r\n                            !selected ?\r\n                                this.#addRowsToSelection(targetGrid, targetRow) :\r\n                                this.#removeRowsFromSelection(targetGrid, targetRow);\r\n                            event.stopPropagation();\r\n                        }\r\n                        else if (shiftKey) {\r\n                            const activeRow = this.#getActiveRow(targetGrid);\r\n                            if (activeRow) {\r\n                                const range = this.#getRowsRange(\r\n                                    activeRow,\r\n                                    targetRow\r\n                                );\r\n                                if (range) {\r\n                                    this.#setRowsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.#setRowsSelection(targetGrid, targetRow);\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetList) {\r\n            if (this.#onSelection.get(targetList)) {\r\n                this.#hasSelectionChanged.set(targetList, true);\r\n            }\r\n            else {\r\n                targetList.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { gridRowWidget } from \"./GridRowWidget\";\r\n\r\nexport { gridBodyWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridbody\": GridBodyWidgetFactory\r\n    }\r\n}\r\n\r\ninterface GridBodyWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar gridBodyWidget = new (\r\nWidget({\r\n    name: \"gridbody\"\r\n})(class GridBodyWidgetFactoryBase extends WidgetFactory implements GridBodyWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"tbody\", {\r\n            attributes: {\r\n                class: \"gridbody\",\r\n                role: \"rowgroup\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(body: HTMLElement) {\r\n        return body;\r\n    }\r\n\r\n    slottedCallback(body: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"gridrow\")) {\r\n                gridRowWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridHeadWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridhead\": GridHeadWidgetFactory\r\n    }\r\n}\r\n\r\ninterface GridHeadWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar gridHeadWidget = new (\r\nWidget({\r\n    name: \"gridhead\"\r\n})(class GridHeadWidgetFactoryBase extends WidgetFactory implements GridHeadWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"thead\", {\r\n            attributes: {\r\n                class: \"gridhead\",\r\n                role: \"rowgroup\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(head: HTMLElement) {\r\n        return head;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridHeaderWidget };\r\n\r\ninterface GridHeaderWidgetFactory extends WidgetFactory {\r\n    create(init: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }): HTMLElement;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridheader\": GridHeaderWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridHeaderWidget = new (\r\nWidget({\r\n    name: \"gridheader\"\r\n})(class GridHeaderWidgetFactoryBase extends WidgetFactory implements GridHeaderWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"th\", {\r\n            attributes: {\r\n                class: \"gridheader\",\r\n                scope: \"column\",\r\n                role: \"columnheader\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }): HTMLElement {\r\n        const header = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {id, classList, tabIndex} = init;\r\n            if (id !== undefined) {\r\n                header.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                header.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                header.tabIndex = tabIndex;\r\n            }\r\n        }\r\n        return header;\r\n    }\r\n\r\n    slot(header: HTMLElement): HTMLElement | null {\r\n        return header;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { optionWidget };\r\n\r\ninterface OptionWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        label?: string;\r\n        name?: string;\r\n        value?: string;\r\n        selected?: boolean;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    getLabel(option: HTMLElement): string;\r\n    setLabel(option: HTMLElement, value: string): void;\r\n    getValue(option: HTMLElement): string;\r\n    setValue(option: HTMLElement, value: string): void;\r\n    getName(option: HTMLElement): string;\r\n    setName(option: HTMLElement, value: string): void;\r\n    getSelected(option: HTMLElement): boolean;\r\n    setSelected(option: HTMLElement, value: boolean): void;\r\n    setDisabled(option: HTMLElement, value: boolean): void;\r\n    getDisabled(option: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"option\": OptionWidgetFactory\r\n    }\r\n}\r\n\r\nvar optionWidget = new(\r\nWidget({\r\n    name: \"option\"\r\n})(\r\nclass OptionWidgetFactoryBase extends WidgetFactory implements OptionWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"span\", {\r\n            attributes: {\r\n                class: \"option\",\r\n                role: \"option\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(properties?: {\r\n        selected?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const option = <HTMLElement>this.#template.cloneNode(true);\r\n        if (properties !== undefined) {\r\n            const {label, name, value, disabled} = properties;\r\n            let {selected} = properties;\r\n            selected = selected ?? false;\r\n            if (selected !== undefined) {\r\n                this.setSelected(option, selected);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(option, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(option, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(option, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(option, disabled);\r\n            }\r\n        }\r\n        return option;\r\n    }\r\n\r\n    get observedAttributes() {\r\n        return [\"aria-selected\"];\r\n    }\r\n\r\n    attributeChangedCallback(option: HTMLElement, name: string, oldValue: string, newValue: string) {\r\n        switch (name) {\r\n            case \"aria-selected\": {\r\n                if (JSON.parse(newValue) === true) {\r\n                    option.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #label(option: HTMLElement): HTMLElement {\r\n        return option.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n\r\n    getLabel(option: HTMLElement): string {\r\n        return this.#label(option).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(option: HTMLElement, value: string): void {\r\n        this.#label(option).textContent = value;\r\n    }\r\n\r\n    getValue(option: HTMLElement): string {\r\n        return option.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(option: HTMLElement, value: string): void {\r\n        option.setAttribute(\"value\", value);\r\n    }\r\n    \r\n    getName(option: HTMLElement): string {\r\n        return option.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(option: HTMLElement, value: string): void {\r\n        option.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getSelected(option: HTMLElement): boolean {\r\n        return JSON.parse(option.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    setSelected(option: HTMLElement, value: boolean): void {\r\n        option.setAttribute(\"aria-selected\", String(value));\r\n    }\r\n\r\n    getDisabled(option: HTMLElement): boolean {\r\n        return option.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(option: HTMLElement, value: boolean): void {\r\n        option.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { optionWidget } from \"./OptionWidget\";\r\n\r\nexport { comboBoxWidget };\r\n\r\ninterface ComboBoxWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        name?: string;\r\n        disabled?: boolean;\r\n        multiselectable?: boolean;\r\n    }): HTMLElement;\r\n    options(combobox: HTMLElement): HTMLElement[];\r\n    getName(combobox: HTMLElement): string;\r\n    setName(combobox: HTMLElement, value: string): void;\r\n    getExpanded(combobox: HTMLElement): boolean;\r\n    setExpanded(combobox: HTMLElement, value: boolean): void;\r\n    setDisabled(combobox: HTMLElement, value: boolean): void;\r\n    getDisabled(combobox: HTMLElement): boolean;\r\n    expand(combobox: HTMLElement): void;\r\n    collapse(combobox: HTMLElement): void;\r\n    toggle(combobox: HTMLElement, force?: boolean): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"combobox\": ComboBoxWidgetFactory\r\n    }\r\n}\r\n\r\nvar comboBoxWidget = new(\r\nWidget({\r\n    name: \"combobox\"\r\n})(\r\nclass ComboBoxWidgetFactoryBase extends WidgetFactory implements ComboBoxWidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #optionsObserver: MutationObserver;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#optionsObserver = new MutationObserver(\r\n            this.#optionsMutationCallback.bind(this)\r\n        );\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"combobox\",\r\n                role: \"combobox\",\r\n                tabindex: 0,\r\n            },\r\n            children: [\r\n                element(\"div\", {\r\n                    attributes: {\r\n                        class: \"content\"\r\n                    },\r\n                    children: [\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"value\"\r\n                            }\r\n                        })\r\n                    ]\r\n                }),\r\n                element(\"div\", {\r\n                    attributes: {\r\n                        class: \"box\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        name?: string;\r\n        disabled?: boolean;\r\n        multiselectable?: boolean;\r\n    }): HTMLElement {\r\n        const combobox = <HTMLElement>this.#template.cloneNode(true);\r\n        this.#optionsObserver.observe(combobox, {\r\n            childList: true,\r\n            subtree: true\r\n        });\r\n        combobox.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        combobox.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        combobox.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        combobox.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.setExpanded(combobox, false);\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, name, disabled, multiselectable} = properties;\r\n            if (id !== undefined) {\r\n                combobox.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                combobox.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                combobox.tabIndex = tabIndex;\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(combobox, name);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(combobox, disabled);\r\n            }\r\n            if (multiselectable !== undefined) {\r\n                this.setMultiSelectable(combobox, multiselectable);\r\n            }\r\n        }\r\n        return combobox;\r\n    }\r\n\r\n    slot(combobox: HTMLElement) {\r\n        return this.#box(combobox);\r\n    }\r\n\r\n    slottedCallback(combobox: HTMLElement, slot: HTMLElement, name: string | null) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement) {\r\n                //gridRowWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n\r\n    #box(combobox: HTMLElement): HTMLElement {\r\n        return combobox.querySelector<HTMLElement>(\":scope > .box\")!;\r\n    }\r\n    \r\n    options(combobox: HTMLElement): HTMLElement[] {\r\n        return Array.from(combobox.querySelectorAll<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option\"\r\n        ));\r\n    }\r\n\r\n    selectedOption(combobox: HTMLElement): HTMLElement | null {\r\n        return combobox.querySelector<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option[aria-selected=true]\"\r\n        );\r\n    }\r\n\r\n    #getActiveOption(combobox: HTMLElement): HTMLElement | null {\r\n        return combobox.querySelector<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option:focus-within\"\r\n        );\r\n    }\r\n\r\n    #value(combobox: HTMLElement): HTMLElement {\r\n        return combobox.querySelector<HTMLElement>(\":scope > .content > .value\")!;\r\n    }\r\n    \r\n    getName(combobox: HTMLElement): string {\r\n        return combobox.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(combobox: HTMLElement, value: string): void {\r\n        combobox.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getDisabled(combobox: HTMLElement): boolean {\r\n        return combobox.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(combobox: HTMLElement, value: boolean): void {\r\n        combobox.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setExpanded(combobox: HTMLElement, value: boolean): void {\r\n        combobox.setAttribute(\"aria-expanded\", String(value));\r\n    }\r\n\r\n    getExpanded(combobox: HTMLElement): boolean {\r\n        return JSON.parse(combobox.getAttribute(\"aria-expanded\") ?? String(false));\r\n    }\r\n\r\n    setMultiSelectable(combobox: HTMLElement, value: boolean): void {\r\n        combobox.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(combobox: HTMLElement): boolean {\r\n        return JSON.parse(combobox.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    expand(combobox: HTMLElement): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        if (!expanded) {\r\n            this.setExpanded(combobox, true);\r\n            this.#positionBox(combobox);\r\n            const selectedOption = this.selectedOption(combobox);\r\n            if (selectedOption) {\r\n                selectedOption.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(combobox: HTMLElement): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        if (expanded) {\r\n            this.setExpanded(combobox, false);\r\n            combobox.focus();\r\n        }\r\n    }\r\n\r\n    toggle(combobox: HTMLElement, force?: boolean): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand(combobox) : this.collapse(combobox);\r\n    }\r\n\r\n    #optionsMutationCallback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            const targetCombobox = (<HTMLElement>target).closest<HTMLElement>(\".combobox\")!;\r\n            if (targetCombobox instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"childList\": {\r\n                        const {addedNodes} = mutation;\r\n                        const selector = \".option[aria-selected=true]\";\r\n                        for (let node of addedNodes) {\r\n                            if (node instanceof HTMLElement) {\r\n                                const selectedOption = node.matches(selector) ? node :\r\n                                    node.querySelector<HTMLElement>(selector);\r\n                                if (selectedOption) {\r\n                                    this.#setSelectedOption(targetCombobox, selectedOption);\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"option\") && !optionWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"optiongroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstOption(combobox: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = this.#box(combobox);\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastOption(combobox: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = this.#box(combobox);\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousOption(option: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextOption(option: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLElement | null>walker.nextNode();\r\n    }\r\n\r\n    #selectOption(combobox: HTMLElement, option: HTMLElement) {\r\n        const selectedOption = this.selectedOption(combobox);\r\n        if (selectedOption) {\r\n            optionWidget.setSelected(selectedOption, false);\r\n        }\r\n        if (option !== selectedOption) {\r\n            optionWidget.setSelected(option, true);\r\n            this.#setSelectedOption(combobox, option);\r\n            combobox.dispatchEvent(new Event(\"change\", {bubbles: true}));\r\n        }\r\n    }\r\n    \r\n    #setSelectedOption(combobox: HTMLElement, option: HTMLElement) {\r\n        this.#value(combobox).textContent = optionWidget.getLabel(option);\r\n    }\r\n\r\n    #positionBox(combobox: HTMLElement): void {\r\n        const box = combobox.querySelector<HTMLElement>(\":scope > .box\")!;\r\n        const {style: optionsStyle} = box;  \r\n        const {bottom, left} = combobox.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        optionsStyle.setProperty(\"top\", `${bottom + scrollY}px`);\r\n        optionsStyle.setProperty(\"left\", `${left + scrollX}px`);\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        this.toggle(targetCombobox);\r\n        const expanded = this.getExpanded(targetCombobox);\r\n        if (expanded) {\r\n            const selectedOption = this.selectedOption(targetCombobox);\r\n            (selectedOption ?? this.options(targetCombobox)[0])?.focus({preventScroll: true});\r\n        }\r\n        else {\r\n            const targetOption = (<HTMLElement>target).closest<HTMLElement>(\".option\");\r\n            if (targetOption) {\r\n                this.#selectOption(targetCombobox, targetOption);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetCombobox.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse(targetCombobox);\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        const expanded = this.getExpanded(targetCombobox);\r\n        const activeOption = this.#getActiveOption(targetCombobox);\r\n        const selectedOption = this.selectedOption(targetCombobox);\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                if (expanded) {\r\n                    const previousOption = activeOption ?\r\n                        this.#previousOption(activeOption) :\r\n                        this.#firstOption(targetCombobox);\r\n                    if (previousOption) {\r\n                        previousOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const previousOption = selectedOption ?\r\n                        this.#previousOption(selectedOption) :\r\n                        this.#firstOption(targetCombobox);\r\n                    if (previousOption) {\r\n                        this.#selectOption(targetCombobox, previousOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (expanded) {\r\n                    const nextOption = activeOption ?\r\n                        this.#nextOption(activeOption) :\r\n                        this.#lastOption(targetCombobox);\r\n                    if (nextOption) {\r\n                        nextOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const nextOption = selectedOption ?\r\n                        this.#nextOption(selectedOption) :\r\n                        this.#lastOption(targetCombobox);\r\n                    if (nextOption) {\r\n                        this.#selectOption(targetCombobox, nextOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstOption = this.#firstOption(targetCombobox);\r\n                if (firstOption) {\r\n                    if (expanded) {\r\n                        firstOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(targetCombobox, firstOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastOption = this.#lastOption(targetCombobox);\r\n                if (lastOption) {\r\n                    if (expanded) {\r\n                        lastOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(targetCombobox, lastOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (expanded) {\r\n                    this.collapse(targetCombobox);\r\n                    if (activeOption) {\r\n                        this.#selectOption(targetCombobox, activeOption);\r\n                    }\r\n                }\r\n                else {\r\n                    this.expand(targetCombobox);\r\n                    selectedOption?.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.collapse(targetCombobox);\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            default: {\r\n                const {length: keyLength} = key;\r\n                if (keyLength == 1) {\r\n                    const keyCode = key.charCodeAt(0);\r\n                    const options = this.options(targetCombobox);\r\n                    const activeIndex = activeOption ? options.indexOf(activeOption) : -1;\r\n                    const matchingOption = options.find(\r\n                        (option_i, i) => optionWidget.getLabel(option_i).toLowerCase().charCodeAt(0) == keyCode && i > activeIndex\r\n                    ) ?? options.find(\r\n                        (option_i) => optionWidget.getLabel(option_i).toLowerCase().charCodeAt(0) == keyCode\r\n                    );\r\n                    if (matchingOption) {\r\n                        matchingOption.focus({preventScroll: true});\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetItem = (<Element>target).closest<HTMLElement>(\".option\");\r\n        if (targetItem) {\r\n            targetItem.focus({preventScroll: true});\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { optionGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"optiongroup\": OptionGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface OptionGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar optionGroupWidget = new (\r\nWidget({\r\n    name: \"optiongroup\"\r\n})(class OptionGroupWidgetFactoryBase extends WidgetFactory implements OptionGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"optiongroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n}));"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","Key","KeyModifier","MouseButton","HotKey","constructor","mod1","mod2","this","toString","length","toUpperCase","test","event","mod","Control","altKey","ctrlKey","shiftKey","ModelChangeRecordBase","init","target","changeType","propertyName","oldValue","undefined","newValue","removedIndex","removedItems","ModelNodesList","insertedIndex","insertedItems","sortedIndices","PROPERTY_CHANGE","LIST_REMOVE","LIST_INSERT","LIST_SORT","ModelChangeRecord","items","slice","item","index","values","ModelEventBase","type","currentTarget","ModelEventTargetAccessor","setCurrentTarget","setTarget","ModelEvent","ModelNodeBase","Map","receiveEvent","callbacks","forEach","callback_i","addEventListener","callback","push","set","removeEventListener","callbackIndex","findIndex","splice","delete","dispatchEvent","super","parentNode","setParent","isCyclicReference","ancestorNode","TypeError","beginChanges","endChanges","getRecords","property","records","record","ModelNodeRecordsAccessor","triggerChange","node","handleRecord","ModelNode","ModelProperty","ModelObjectPropertiesAccessor","getProperty","setProperty","ModelObjectBase","ModelObject","ModelList","item_i","indexOf","sort","compareFunction","indexedItems","map","i","indexedItem_a","indexedItem_b","indexedItem_i","prepend","_items","append","insert","Math","abs","remove","clear","removedItem_i","reference","options","properties","propertiesFilter","childList","subtree","filter","record_i","includes","ModelChangeObserver","WeakMap","observe","references","listener","bind","unobserve","disconnect","snakeToCamel","str","split","charAt","substring","toLowerCase","join","camelToSnake","replace","trainToCamel","AttributeProperty","String","defaultValue","observed","name","observedAttributes","Reflect","Array","isArray","writable","Boolean","hasAttribute","setAttribute","removeAttribute","val","getAttribute","JSON","parse","stringify","Number","parseFloat","Stylesheet","text","stylesheet","CSSStyleSheet","replaceSync","trimMultilineIndent","newlineIndex","indentMatch","match","indent","replaceAll","trimEnd","CustomElement","elementCtor","customElements","define","QueryProperty","propertyKey","selector","getter","withinShadowRoot","shadowRoot","querySelector","QueryAllProperty","from","querySelectorAll","fragment","nodes","document","createDocumentFragment","textNode","createTextNode","tagName","attributes","dataset","children","listeners","element","createElement","entries","attributeName","attributeValue","toggleAttribute","elementDataset","keys","datasetEntry_i","name_i","listener_i","reactiveElementsMap","reactiveElementsFinalizationRegistry","FinalizationRegistry","heldValue","model","reactiveElement","reactiveElementsMapEntry","reactiveElementsArray","reactiveElementsPropertyObserver","reactiveElement_i","elementRef","react","deref","WeakRef","register","observerOptions","concat","property_i","reactiveChildElementsMap","reactiveChildElementsFinalizationRegistry","list","reactiveChildElement","reactiveChildrenElementsMapEntry","reactiveChildElementsArray","reactiveChildElementsObserver","range","listLength","reactiveChildElements_i","parentRef","mapping","placeholder","parent","firstChild","childrenCount","removeChild","insertedItemsArray","before","removedCount","createRange","removeEndIndex","setStartBefore","setEndAfter","deleteContents","childrenArray","index_i","reactiveChildElements","reactiveChildElementsMapEntry","areAttributesMatching","referenceAttributeType","referenceAttributeName","referenceAttributeValue","RegExp","AttributeMutationMixinBase","attributeType","attach","detach","shadowTemplate","HTMLEGridCellElementBase","HTMLElement","attachShadow","mode","content","cloneNode","connectedCallback","tabIndex","attributeChangedCallback","Event","bubbles","HTMLEGridCellElement","HTMLEGridRowGroupElementBase","assignedElements","element_i","posinset","HTMLEGridRowGroupElement","HTMLEMenuItemElementBase","internals","attachInternals","role","ariaChecked","ariaDisabled","ariaExpanded","ariaLabel","tabindex","parseInt","toggle","force","expanded","expand","collapse","menu","style","menuStyle","top","itemTop","bottom","itemBottom","left","itemLeft","right","itemRight","getBoundingClientRect","width","menuWidth","height","menuHeight","scrollY","scrollX","window","clientWidth","clientHeight","body","overflowX","overflowY","closestMenu","closest","closestMenuTop","closestMenuLeft","part","HTMLEMenuItemElement","EMenuItem","assign","label","trigger","slot","title","click","button","checkbox","radio","submenu","HTMLEMenuItemGroupElementBase","toggleAnimations","HTMLEMenuItemGroupElement","EMenuItemGroup","radios","HTMLEMenuElementBase","createTreeWalker","NodeFilter","SHOW_ELEMENT","activeIndex","activeItem","positionContextual","x","y","firstItem","walker","currentNode","root","find","contains","FILTER_ACCEPT","FILTER_SKIP","FILTER_REJECT","lastChild","previousNode","nextNode","targetItem","checked","radio_i","nearestItem","relatedTarget","contextual","error","focus","preventScroll","stopPropagation","composedPath","target_i","HTMLEMenuElement","blur","cancel","toggleAnimation","animate","duration","finished","then","catch","finally","clientX","clientY","intersectsWithMouse","containsRelatedTarget","EMenu","HTMLEGridRowElementBase","cells","HTMLEGridCellCollection","slotName","cell_i","HTMLEGridRowElement","HTMLEGridBodyElement","namedItem","HTMLEGridRowCollection","HTMLEGridBodyElementBase","rows","HTMLEGridElementBase","activeCell","activeRow","head","beginSelection","endSelection","clearSelection","selectedCells","selectedRows","hidden","to","fromIndex","toIndex","min","max","position","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","nextVisibleRow","DOCUMENT_POSITION_PRECEDING","previousVisibleRow","selectedCell_i","selected","selectedRow_i","row_i","cell","active","row","cellsWalker","rowsWalker","closestRow","closestRowCells","cellIndex","previousRow","previousRowCells","nextRow","nextRowCells","selectby","targetCell","lastSelectedCell","targetRow","lastSelectedRow","firstRow","firstCell","lastRow","lastCell","preventDefault","previousCell","nextCell","topCell","bottomCell","HTMLEGridElement","HTMLEGridHeadElementBase","HTMLEGridHeadElement","HTMLEMenuBarElementBase","disabled","previousSibling","nextSibling","Element","isExpanded","HTMLEMenuBarElement","HTMLEMenuButtonElementBase","iconPart","HTMLEMenuButtonElement","EMenuButton","HTMLEToolBarItemElementBase","HTMLEToolBarItemElement","EToolBarItem","menubutton","select","HTMLEToolBarItemGroupElementBase","textContent","wasExpandedOnMouseDown","HTMLEToolBarItemGroupElement","HTMLEToolBarElementBase","pressed","previousItem","nextItem","lastItem","HTMLEToolBarElement","HTMLETabElementBase","panel","controls","getRootNode","HTMLETabElement","HTMLETabListElementBase","tabs","activeTab","selectedTab","upgrade","tabToSelect","tab","targetTab","tab_i","HTMLETabListElement","HTMLETabPanelElementBase","id","HTMLETabPanelElement","HTMLETreeItemElementBase","labelPart","level","HTMLETreeItemElement","HTMLETreeItemGroupElementBase","HTMLETreeItemGroupElement","HTMLETreeElementBase","getElementsByTagName","dropTargetItem","selectedItems","nextVisibleItem","previousVisibleItem","selectedItem_i","droptarget","relatedTargetRoot","relatedTargetHost","ShadowRoot","host","parentItem","HTMLETreeElement","HTMLEListItemElementBase","badge","toolbar","HTMLSpanElement","HTMLEListItemElement","HTMLEListItemGroupElementBase","HTMLEListItemGroupElement","HTMLEListElementBase","lastSelectedItem","HTMLEListElement","HTMLEDraggableElementBase","referee","draggable","disconnectedCallback","thisRefIndex","getReference","HTMLEDraggableElement","HTMLEDragzoneElementBase","draggables","selectedDraggables","selectDraggable","unselectDraggable","elem","thisSelectedDraggable","dragged","dataTransfer","dropEffect","setData","thisDraggedDraggable","targetIndex","firstIndex","direction","sign","startRangeIndex","endRangeIndex","thisDraggable","HTMLEDragzoneElement","HTMLEDropzoneElementBase","droptest","appendAreaPart","removeDraggables","dragovered","dropIndex","dragzoneId","getData","dragzone","getElementById","selectedDraggable","HTMLEDropzoneElement","addDraggables","placeholderPart","dataTransferSuccess","newDraggables","insertionPosition","multiple","newDraggable","insertAdjacentElement","appendChild","replaceChild","CustomEvent","detail","action","once","predicate","toRemove","atPosition","HTMLEDialogElementBase","handleEvent","confirm","open","close","HTMLEDialogElement","HTMLEOptionElementBase","ariaSelected","HTMLEOptionElement","HTMLEOptionGroupElementBase","mutationObserver","HTMLEOptionGroupElement","HTMLESelectElementBase","formAssociated","activeOption","selectedOption","optionToSelect","option_i","option","setFormValue","box","optionsStyle","targetOption","previousOption","nextOption","firstOption","lastOption","keyLength","keyCode","charCodeAt","matchingOption","MutationObserver","mutationsList","mutation","HTMLESelectElement","HTMLESeparatorElementBase","HTMLESeparatorElement","HTMLEToolTipElementBase","tooltip","htmlFor","show","visible","opacity","hide","oldTarget","targetTop","targetBottom","targetLeft","targetRight","tooltipWidth","tooltipHeight","tooltipHalfWidth","tooltipHalfHeight","targetCenter","targetMiddle","tooltipStyle","arrow","arrowStyle","arrowWidth","arrowHeight","arrowHalfWidth","arrowHalfHeight","HTMLEToolTipElement","HTMLEHandleElementBase","pointerId","releasePointerCapture","setPointerCapture","targetComputedStyle","getComputedStyle","movementX","movementY","rectWidth","rectHeight","outerElement","parentElement","outerRectLeft","outerRectRight","outerRectTop","outerRectBottom","getPropertyValue","newLeft","trunc","newTop","HTMLEHandleElement","HTMLEHeightSashElementBase","growdir","newHeight","computedNewHeight","rootNode","requestAnimationFrame","HTMLEHeightSashElement","HTMLEImportElementBase","src","async","outerHTML","fetch","response","ok","Error","statusText","barShadowTemplate","circleShadowTemplate","HTMLEImportElement","HTMLELoaderElementBase","promise","replaceChildren","commonStyle","barStyle","circleStyle","HTMLELoaderElement","HTMLEWidthSashElementBase","setWidth","newWidth","HTMLEWidthSashElement","addedNodes","removedNodes","targetElement","mixin","attr","childIndex","child","AttributeMixinsObserver","mixins","takeRecords","attributeFilter","slotsMap","slotsObserver","slotReferences","slotRef_i","widget","slottedCallback","widgetsMap","attributesObserver","WidgetFactory","create","Proxy","apply","thisArg","argumentsList","observedSlots","slotName_i","slotElement","slot_i","slotReference","attributeOldValue","widgets","Widget","separatorWidget","class","menuItemWidget","hasIcon","hasArrow","classList","keyshortcut","add","setKeyShortcut","setChecked","setExpanded","setType","setLabel","setName","setValue","setDisabled","hasChildMenu","childNodes","some","childNode_i","getMenu","getKeyShortcut","keyshortcutsPart","after","getLabel","getType","types","type_i","typesFeatures","iconPartTemplate","arrowPartTemplate","oldType","arrowPart","getValue","getName","getChecked","getDisabled","getExpanded","menuComputedStyle","paddingTop","paddingBottom","menuPaddingTop","menuPaddingBottom","menuBarWidget","menubar","menuWidget","setContextual","setPosition","getContextual","menuitem_i","delay","Promise","resolve","reject","timeout","setTimeout","clearTimeout","targetMenu","menuItemGroupWidget","group","treeItemWidget","setTitle","setDraggable","setSelected","getTitle","setPosInSet","getPosInSet","posInSet","e","setActive","getActive","setDropTarget","getDropTarget","getDraggable","getSelected","setLevel","getLevel","treeWidget","tree","multisectable","setMultiSelectable","child_i","getMultiSelectable","targetTree","treeItemGroupWidget","closestItem","matches","listItemWidget","listWidget","targetList","listItemGroupWidget","toolbarItemWidget","setPressed","getPressed","toolbarWidget","setOrientation","getOrientation","targetToolbar","toolbarItemGroupWidget","widthSashWidget","targets","pointerMovements","onCaptureFlags","queuedPointerCallbacks","sash","growDir","setControls","setGrowDir","getGrowDir","getControls","sashTarget","pointerMoveCallback","pointerMovement","heightSashWidget","setHeight","gridCellWidget","headers","setHeaders","getHeaders","gridRowWidget","gridWidget","grid","setSelectBy","getSelectBy","targetGrid","multiselectable","gridBodyWidget","gridHeadWidget","gridHeaderWidget","scope","header","optionWidget","comboBoxWidget","combobox","targetCombobox","optionGroupWidget"],"sourceRoot":""}