{"version":3,"file":"editor.js","mappings":"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","sources":["webpack://editor/./src/Input.ts","webpack://editor/./src/models/Model.ts","webpack://editor/./src/elements/Snippets.ts","webpack://editor/./src/elements/Element.ts","webpack://editor/./src/elements/containers/grid/GridCell.ts","webpack://editor/./src/elements/containers/grid/GridRowGroup.ts","webpack://editor/./src/elements/containers/menus/MenuItem.ts","webpack://editor/./src/elements/containers/menus/MenuItemGroup.ts","webpack://editor/./src/elements/containers/menus/Menu.ts","webpack://editor/./src/elements/containers/grid/GridRow.ts","webpack://editor/./src/elements/containers/grid/GridCellCollection.ts","webpack://editor/./src/elements/containers/grid/GridRowCollection.ts","webpack://editor/./src/elements/containers/grid/GridBody.ts","webpack://editor/./src/elements/containers/grid/Grid.ts","webpack://editor/./src/elements/containers/grid/GridHead.ts","webpack://editor/./src/elements/containers/menus/MenuBar.ts","webpack://editor/./src/elements/containers/menus/MenuButton.ts","webpack://editor/./src/elements/containers/toolbars/ToolBarItem.ts","webpack://editor/./src/elements/containers/toolbars/ToolBarItemGroup.ts","webpack://editor/./src/elements/containers/toolbars/ToolBar.ts","webpack://editor/./src/elements/containers/tabs/Tab.ts","webpack://editor/./src/elements/containers/tabs/TabList.ts","webpack://editor/./src/elements/containers/tabs/TabPanel.ts","webpack://editor/./src/elements/containers/trees/TreeItem.ts","webpack://editor/./src/elements/containers/trees/TreeItemGroup.ts","webpack://editor/./src/elements/containers/trees/Tree.ts","webpack://editor/./src/elements/containers/lists/ListItem.ts","webpack://editor/./src/elements/containers/lists/ListItemGroup.ts","webpack://editor/./src/elements/containers/lists/List.ts","webpack://editor/./src/elements/controls/draggable/Draggable.ts","webpack://editor/./src/elements/controls/draggable/Dragzone.ts","webpack://editor/./src/elements/controls/draggable/Dropzone.ts","webpack://editor/./src/elements/controls/dialogs/Dialog.ts","webpack://editor/./src/elements/controls/forms/Option.ts","webpack://editor/./src/elements/controls/forms/OptionGroup.ts","webpack://editor/./src/elements/controls/forms/Select.ts","webpack://editor/./src/elements/misc/Separator.ts","webpack://editor/./src/elements/misc/ToolTip.ts","webpack://editor/./src/elements/misc/Handle.ts","webpack://editor/./src/elements/misc/HeightSash.ts","webpack://editor/./src/elements/misc/Import.ts","webpack://editor/./src/elements/misc/Loader.ts","webpack://editor/./src/elements/misc/WidthSash.ts","webpack://editor/./src/observers/AttributeMixinsObserver.ts","webpack://editor/./src/views/widgets/Widget.ts","webpack://editor/./src/views/widgets/SeparatorWidget.ts","webpack://editor/./src/views/widgets/menu/MenuItemWidget.ts","webpack://editor/./src/views/widgets/menu/MenuBarWidget.ts","webpack://editor/./src/views/widgets/menu/MenuWidget.ts","webpack://editor/./src/views/widgets/menu/MenuItemGroupWidget.ts","webpack://editor/./src/views/widgets/tree/TreeItemWidget.ts","webpack://editor/./src/views/widgets/tree/TreeWidget.ts","webpack://editor/./src/views/widgets/tree/TreeItemGroupWidget.ts","webpack://editor/./src/views/widgets/list/ListItemWidget.ts","webpack://editor/./src/views/widgets/list/ListWidget.ts","webpack://editor/./src/views/widgets/list/ListItemGroupWidget.ts","webpack://editor/./src/views/widgets/toolbar/ToolBarItemWidget.ts","webpack://editor/./src/views/widgets/toolbar/ToolBarWidget.ts","webpack://editor/./src/views/widgets/toolbar/ToolBarItemGroupWidget.ts","webpack://editor/./src/views/widgets/WidthSashWidget.ts","webpack://editor/./src/views/widgets/HeightSashWidget.ts","webpack://editor/./src/views/widgets/grid/GridCellWidget.ts","webpack://editor/./src/views/widgets/grid/GridRowWidget.ts","webpack://editor/./src/views/widgets/grid/GridWidget.ts","webpack://editor/./src/views/widgets/grid/GridBodyWidget.ts","webpack://editor/./src/views/widgets/grid/GridHeadWidget.ts","webpack://editor/./src/views/widgets/grid/GridHeaderWidget.ts","webpack://editor/./src/views/widgets/combobox/OptionWidget.ts","webpack://editor/./src/views/widgets/combobox/ComboBoxWidget.ts","webpack://editor/./src/views/widgets/combobox/OptionGroupWidget.ts"],"sourcesContent":["export { Key };\r\nexport { KeyModifier };\r\nexport { HotKey };\r\nexport { MouseButton };\r\n\r\nenum Key {\r\n    A = \"a\",\r\n    B = \"b\",\r\n    C = \"c\",\r\n    D = \"d\",\r\n    E = \"e\",\r\n    F = \"f\",\r\n    G = \"g\",\r\n    H = \"h\",\r\n    I = \"i\",\r\n    J = \"j\",\r\n    K = \"k\",\r\n    L = \"l\",\r\n    M = \"m\",\r\n    O = \"o\",\r\n    P = \"p\",\r\n    Q = \"q\",\r\n    R = \"r\",\r\n    S = \"s\",\r\n    T = \"t\",\r\n    U = \"u\",\r\n    V = \"v\",\r\n    W = \"w\",\r\n    X = \"x\",\r\n    Y = \"y\",\r\n    Z = \"z\",\r\n    ENTER = \"Enter\",\r\n    BACKSPACE = \"Backspace\",\r\n    ARROW_DOWN = \"ArrowDown\",\r\n    ARROW_LEFT = \"ArrowLeft\",\r\n    ARROW_RIGHT = \"ArrowRight\",\r\n    ARROW_UP = \"ArrowUp\",\r\n    SHIFT = \"Shift\"\r\n}\r\n\r\nenum KeyModifier {\r\n    Alt = \"Alt\",\r\n    Control = \"Control\",\r\n    Shift = \"Shift\"\r\n}\r\n\r\nenum MouseButton {\r\n    LEFT = 1,\r\n    WHEEL = 2,\r\n    RIGHT = 3,\r\n    FORWARD = 4,\r\n    BACK = 5\r\n}\r\n\r\nclass HotKey {\r\n    readonly key: Key;\r\n    readonly mod1?: KeyModifier;\r\n    readonly mod2?: KeyModifier;\r\n\r\n    constructor(key: Key, mod1?: KeyModifier, mod2?: KeyModifier) {\r\n        this.key = key;\r\n        this.mod1 = mod1;\r\n        this.mod2 = mod2;\r\n    }\r\n\r\n    toString(): string {\r\n        return `${this.mod1 ? `${this.#modifierString(this.mod1)}+` : \"\"}${this.mod2 ? `${this.#modifierString(this.mod2)}+` : \"\"}${(this.key.length == 1) ? this.key.toUpperCase() : this.key}`;\r\n    }\r\n\r\n    test(event: KeyboardEvent): boolean {\r\n        return (!this.mod1 || this.#testModifier(this.mod1, event)) && (!this.mod2 || this.#testModifier(this.mod2, event)) && event.key == this.key;\r\n    }\r\n\r\n    #modifierString(mod: KeyModifier): string {\r\n        switch (mod) {\r\n            case KeyModifier.Control:\r\n                return \"Ctrl\";\r\n            default:\r\n                return mod;\r\n        }\r\n    }\r\n\r\n    #testModifier(mod: KeyModifier, event: KeyboardEvent): boolean {\r\n        switch (mod) {\r\n            case \"Alt\":\r\n                return event.altKey;\r\n            case \"Control\":\r\n                return event.ctrlKey;\r\n            case \"Shift\":\r\n                return event.shiftKey;\r\n            default:\r\n                return true;\r\n        }\r\n    }\r\n}","export { ModelChangeRecord };\r\nexport { ModelEvent };\r\nexport { ModelNode };\r\nexport { ModelObject };\r\nexport { ModelProperty };\r\nexport { ModelList };\r\nexport { ModelChangeObserverOptions };\r\nexport { ModelChangeObserver };\r\n\r\ninterface ModelChangeRecordConstructor {\r\n    prototype: ModelChangeRecord;\r\n    new(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ): ModelChangeRecord;\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\ninterface ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly changeType: number;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\nclass ModelChangeRecordBase implements ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList;\r\n    readonly changeType: number;\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n\r\n    constructor(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ) {\r\n        this.target = init.target;\r\n        this.changeType = init.changeType;\r\n        this.propertyName = init.propertyName ?? null;\r\n        this.oldValue = init.oldValue ?? undefined;\r\n        this.newValue = init.newValue ?? undefined;\r\n        this.removedIndex = init.removedIndex ?? 0;\r\n        this.removedItems = new ModelNodesList(init.removedItems ?? []);\r\n        this.insertedIndex = init.insertedIndex ?? 0;\r\n        this.insertedItems = new ModelNodesList(init.insertedItems ?? []);\r\n        this.sortedIndices = init.sortedIndices ?? [];\r\n    }\r\n\r\n    static get PROPERTY_CHANGE(): number {\r\n        return 1;\r\n    }\r\n\r\n    static get LIST_REMOVE(): number {\r\n        return 2;\r\n    }\r\n\r\n    static get LIST_INSERT(): number {\r\n        return 3;\r\n    }\r\n\r\n    static get LIST_SORT(): number {\r\n        return 4;\r\n    }\r\n\r\n    get PROPERTY_CHANGE(): number {\r\n        return ModelChangeRecordBase.PROPERTY_CHANGE;\r\n    }\r\n\r\n    get LIST_REMOVE(): number {\r\n        return ModelChangeRecordBase.LIST_REMOVE;\r\n    }\r\n\r\n    get LIST_INSERT(): number {\r\n        return ModelChangeRecordBase.LIST_INSERT;\r\n    }\r\n\r\n    get LIST_SORT(): number {\r\n        return ModelChangeRecordBase.LIST_SORT;\r\n    }\r\n}\r\n\r\nvar ModelChangeRecord: ModelChangeRecordConstructor = ModelChangeRecordBase;\r\n\r\ninterface ModelNodesListConstructor {\r\n    prototype: ModelNodesList;\r\n    new(items: any[]): ModelNodesList;\r\n}\r\n\r\ninterface ModelNodesList {\r\n    get length(): number;\r\n    item(index: number): ModelNode | null;\r\n    values(): IterableIterator<ModelNode>;\r\n}\r\n\r\nclass ModelNodesListBase implements ModelNodesList {\r\n    #items: ModelNode[];\r\n\r\n    constructor(items: ModelNode[]) {\r\n        this.#items = items.slice();\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    item(index: number): ModelNode | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    values(): IterableIterator<ModelNode> {\r\n        return this.#items.values();\r\n    }\r\n}\r\n\r\nvar ModelNodesList: ModelNodesListConstructor = ModelNodesListBase;\r\n\r\ninterface ModelEventConstructor {\r\n    prototype: ModelEvent;\r\n    new(type: string): ModelEvent;\r\n}\r\n\r\ninterface ModelEvent {\r\n    readonly type: string;\r\n    readonly currentTarget: ModelEventTarget | null;\r\n    readonly target: ModelEventTarget | null;\r\n}\r\n\r\nclass ModelEventBase implements ModelEvent {\r\n    readonly type: string;\r\n\r\n    #currentTarget: ModelEventTarget | null;\r\n    #target: ModelEventTarget | null;\r\n\r\n    constructor(type: string) {\r\n        this.type = type;\r\n        this.#currentTarget = null;\r\n        this.#target = null;\r\n    }\r\n\r\n    get currentTarget(): ModelEventTarget | null {\r\n        return this.#currentTarget;\r\n    }\r\n\r\n    get target(): ModelEventTarget | null {\r\n        return this.#target;\r\n    }\r\n\r\n    static ModelEventTargetAccessor? = new class ModelEventTargetAccessor {\r\n        setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#currentTarget = currentTarget;\r\n            }\r\n        }\r\n\r\n        setTarget(event: ModelEvent, target: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#target = target;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface ModelEventTargetAccessor {\r\n    setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void;\r\n    setTarget(event: ModelEvent, target: ModelEventTarget): void;\r\n}\r\n\r\nvar ModelEventTargetAccessor: ModelEventTargetAccessor = ModelEventBase.ModelEventTargetAccessor!;\r\ndelete ModelEventBase.ModelEventTargetAccessor;\r\n\r\nvar ModelEvent: ModelEventConstructor = ModelEventBase;\r\n\r\ninterface ModelEventTargetConstructor {\r\n    prototype: ModelEventTarget;\r\n    new(): ModelEventTarget;\r\n}\r\n\r\ninterface ModelEventTarget {\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    dispatchEvent(event: ModelEvent): void;\r\n    receiveEvent(event: ModelEvent): void;\r\n}\r\n\r\nclass ModelEventTargetBase implements ModelEventTarget {\r\n    #callbacks: Map<string, ((event: ModelEvent) => void)[]>;\r\n\r\n    constructor() {\r\n        this.#callbacks = new Map();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        const {type} = event;\r\n        const callbacks = this.#callbacks.get(type);\r\n        ModelEventTargetAccessor.setCurrentTarget(event, this);\r\n        if (callbacks) {\r\n            callbacks.forEach((callback_i) => {\r\n                callback_i(event);\r\n            });\r\n        }\r\n    }\r\n\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            callbacks.push(callback);\r\n        }\r\n        else {\r\n            this.#callbacks.set(type, [callback]);\r\n        }\r\n    }\r\n\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            const callbackIndex = callbacks.findIndex(\r\n                callback_i => callback_i == callback\r\n            );\r\n            if (callbackIndex > -1) {\r\n                callbacks.splice(callbackIndex, 1);\r\n            }\r\n            if (callbacks.length == 0) {\r\n                this.#callbacks.delete(type);\r\n            }\r\n        }\r\n    }\r\n\r\n    dispatchEvent(event: ModelEvent): void {\r\n        ModelEventTargetAccessor.setTarget(event, this);\r\n        this.receiveEvent(event);\r\n    }\r\n}\r\n\r\nvar ModelEventTarget: ModelEventTargetConstructor = ModelEventTargetBase;\r\n\r\ninterface ModelNodeConstructor {\r\n    prototype: ModelNode;\r\n    new(): ModelNode;\r\n}\r\n\r\ninterface ModelNode extends ModelEventTarget {\r\n    readonly parentNode: ModelNode | null;\r\n    setParent(parentNode: ModelNode | null): void;\r\n    getRecords(): ModelChangeRecord[];\r\n    beginChanges(): void;\r\n    endChanges(): void;\r\n}\r\n\r\ninterface ModelNodeRecordsAccessor {\r\n    triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void;\r\n    handleRecord(node: ModelNode, record: ModelChangeRecord): void;\r\n}\r\n\r\nclass ModelNodeBase extends ModelEventTargetBase implements ModelNode {\r\n    #parentNode: ModelNode | null;\r\n    #records: ModelChangeRecord[];\r\n    #isRecording: boolean;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#parentNode = null;\r\n        this.#records = [];\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    get parentNode(): ModelNode | null {\r\n        return this.#parentNode;\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        if (parentNode !== null) {\r\n            let isCyclicReference = parentNode == this;\r\n            let {parentNode: ancestorNode} = parentNode;\r\n            while (!isCyclicReference && ancestorNode !== null) {\r\n                ({parentNode: ancestorNode} = ancestorNode);\r\n                isCyclicReference = ancestorNode == this;\r\n            }\r\n            if (!isCyclicReference) {\r\n                this.#parentNode = parentNode;\r\n            }\r\n            else {\r\n                throw new TypeError(\"Failed to set parent on ModelNode: circular reference detected in the hierarchy.\");\r\n            }\r\n        }\r\n        else {\r\n            this.#parentNode = null;\r\n        }\r\n    }\r\n    \r\n    beginChanges(): void {\r\n        this.#isRecording = true;\r\n    }\r\n\r\n    endChanges(): void {\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        this.#records.splice(0);\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    getRecords(): ModelChangeRecord[] {\r\n        return this.#records.slice();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        super.receiveEvent(event);\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            parentNode.receiveEvent(event);\r\n        }\r\n    }\r\n\r\n    #triggerChange(property: string, oldValue: any, newValue: any): void {\r\n        const records = this.#records;\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.PROPERTY_CHANGE,\r\n            propertyName: property,\r\n            oldValue, newValue\r\n        });\r\n        records.push(record);\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        records.splice(0);\r\n    }\r\n\r\n    #handleRecord(record: ModelChangeRecord): void {\r\n        this.#records.push(record);\r\n        if (!this.#isRecording) {\r\n            this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n            this.#records.splice(0);\r\n        }\r\n    }\r\n\r\n    static ModelNodeRecordsAccessor? = new class ModelNodeRecordsAccessor {\r\n        triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#triggerChange(property, oldValue, newValue);\r\n            }\r\n        }\r\n\r\n        handleRecord(node: ModelNode, record: ModelChangeRecord): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#handleRecord(record);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelNodeRecordsAccessor: ModelNodeRecordsAccessor = ModelNodeBase.ModelNodeRecordsAccessor!;\r\ndelete ModelNodeBase.ModelNodeRecordsAccessor;\r\n\r\nvar ModelNode: ModelNodeConstructor = ModelNodeBase;\r\n\r\ninterface ModelPropertyDecorator {\r\n    (\r\n        init?: {\r\n            type: typeof String | typeof Number | typeof Boolean | typeof Date | typeof Object\r\n        }\r\n    ): <Model extends ModelObject>(target: Model, property: string) => void;\r\n}\r\n\r\nconst ModelProperty: ModelPropertyDecorator = function(\r\n    init?: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Date | typeof Object\r\n    }\r\n) {\r\n    return (\r\n        target: ModelObject, property: string\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        /*const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n        if (Array.isArray(observedAttributes)) {\r\n            observedAttributes.push(property);\r\n        }\r\n        else {\r\n            Object.defineProperty(\r\n                constructor, \"observedAttributes\", {\r\n                    value: [property],\r\n                    writable: false\r\n                }\r\n            );\r\n        }*/\r\n        const setter = function(this: ModelObject, value: any) {\r\n            const oldValue = ModelObjectPropertiesAccessor.getProperty(this, property);\r\n            ModelObjectPropertiesAccessor.setProperty(this, property, value);\r\n            if (value !== oldValue) {\r\n                ModelNodeRecordsAccessor.triggerChange(this, property, oldValue, value);\r\n            }\r\n            return true;\r\n        };\r\n        const getter = function(this: ModelObject) {\r\n            return ModelObjectPropertiesAccessor.getProperty(this, property);\r\n        };\r\n        Object.defineProperty(prototype, property, {\r\n            set: setter,\r\n            get: getter,\r\n            enumerable: true\r\n        });\r\n    }\r\n}\r\n\r\ninterface ModelObjectConstructor {\r\n    prototype: ModelObject;\r\n    new(): ModelObject;\r\n}\r\n\r\ninterface ModelObject extends ModelNode {}\r\n\r\ninterface ModelObjectPropertiesAccessor {\r\n    setProperty(node: ModelNode, property: string, value: any): void;\r\n    getProperty(node: ModelNode, property: string,): any;\r\n}\r\n\r\nclass ModelObjectBase extends ModelNodeBase implements ModelObject {\r\n    #properties: Map<string, any>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#properties = new Map();\r\n    }\r\n\r\n    static ModelObjectPropertiesAccessor? = new class ModelPropertiesAccessor {\r\n        setProperty(node: ModelObject, property: string, value: any): void {\r\n            if (node instanceof ModelObjectBase) {\r\n                node.#properties.set(property, value);\r\n            }\r\n        }\r\n\r\n        getProperty(node: ModelObject, property: string): any {\r\n            if (node instanceof ModelObjectBase) {\r\n                return node.#properties.get(property);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelObjectPropertiesAccessor: ModelObjectPropertiesAccessor = ModelObjectBase.ModelObjectPropertiesAccessor!;\r\ndelete ModelObjectBase.ModelObjectPropertiesAccessor;\r\n\r\nvar ModelObject: ModelObjectConstructor = ModelObjectBase;\r\n\r\ninterface ModelListConstructor {\r\n    prototype: ModelList;\r\n    new<Model extends ModelNode>(): ModelList<Model>;\r\n    new<Model extends ModelNode>(items: Model[]): ModelList<Model>;\r\n}\r\n\r\ninterface ModelList<Model extends ModelNode = ModelNode> extends ModelNode {\r\n    readonly parentNode: ModelNode | null;\r\n    readonly length: number;\r\n    index(item: Model): number;\r\n    get(index: number): Model | null;\r\n    values(): IterableIterator<Model>;\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void;\r\n    insert(index: number, ...items: Model[]): void;\r\n    prepend(...items: Model[]): void;\r\n    append(...items: Model[]): void;\r\n    remove(item: Model): void;\r\n    clear(): void;\r\n}\r\n\r\nclass ModelListBase<Model extends ModelNode = ModelNode> extends ModelNodeBase implements ModelList<Model> {\r\n    #items: Model[];\r\n\r\n    constructor()\r\n    constructor(items: Model[])\r\n    constructor(items?: Model[]) {\r\n        super();\r\n        this.#items = items?.slice() ?? [];\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        super.setParent(parentNode);\r\n        this.#items.forEach((item_i) => {\r\n            item_i.setParent(parentNode);\r\n        });\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    get(index: number): Model | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    index(item: Model): number {\r\n        return this.#items.indexOf(item);\r\n    }\r\n\r\n    values(): IterableIterator<Model> {\r\n        return this.#items.values();\r\n    }\r\n\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void {\r\n        const items = this.#items;\r\n        const indexedItems = items.map(\r\n            (item_i, i) => {\r\n                return {\r\n                    item: item_i,\r\n                    index: i\r\n                };\r\n            }\r\n        );\r\n        indexedItems.sort(\r\n            (indexedItem_a, indexedItem_b) => {\r\n                return compareFunction(\r\n                    indexedItem_a.item, indexedItem_b.item\r\n                )\r\n            }\r\n        );\r\n        this.#items = indexedItems.map(indexedItem_i => indexedItem_i.item);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_SORT,\r\n            sortedIndices: indexedItems.map(indexedItem_i => indexedItem_i.index)\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    prepend(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.splice(0, 0, ...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: 0,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    append(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.push(...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: length,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    insert(index: number, ...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const positiveIndex = Math.abs(index);\r\n        if (positiveIndex <= length) {\r\n            if (index >= 0) {\r\n                const {parentNode} = this;\r\n                items.forEach(item_i => {\r\n                    item_i.setParent(parentNode);\r\n                });\r\n                if (index < length) {\r\n                    _items.splice(index, 0, ...items);\r\n                }\r\n                else {\r\n                    _items.push(...items);\r\n                }\r\n            }\r\n            else if (index < 0) {\r\n                index = length - index;\r\n                const {parentNode} = this;\r\n                if (parentNode) {\r\n                    items.forEach(item_i => {\r\n                        item_i.setParent(parentNode);\r\n                    });\r\n                }\r\n                _items.splice(index, 0, ...items);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_INSERT,\r\n                insertedIndex: index,\r\n                insertedItems: items.slice()\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    remove(item: Model): void {\r\n        const _items = this.#items;\r\n        const index = _items.indexOf(item);\r\n        if (index > -1) {\r\n            const item = _items.splice(index, 1)[0];\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                item.setParent(null);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: index,\r\n                removedItems: [item]\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    clear(): void {\r\n        const items = this.#items;\r\n        const {length} = items;\r\n        if (length > 0) {\r\n            const removedItems = items.splice(0);\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                removedItems.forEach((removedItem_i) => {\r\n                    removedItem_i.setParent(null);\r\n                });\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: 0,\r\n                removedItems: removedItems\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n};\r\n\r\nvar ModelList: ModelListConstructor = ModelListBase!;\r\n\r\ninterface ModelChangeObserverConstructor {\r\n    prototype: ModelChangeObserver;\r\n    new(callback: (records: ModelChangeRecord[]) => void): ModelChangeObserver;\r\n}\r\n\r\ninterface ModelChangeObserver {\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void;\r\n    unobserve(node: ModelNode): void;\r\n    disconnect(): void;\r\n}\r\n\r\ntype ModelChangeObserverOptions = {\r\n    properties?: boolean;\r\n    propertiesFilter?: string[];\r\n    childList?: boolean;\r\n    subtree?: boolean;\r\n}\r\n\r\nclass ModelChangeObserverBase implements ModelChangeObserver {\r\n    #callback: (records: ModelChangeRecord[]) => void;\r\n    #records: ModelChangeRecord[];\r\n    #disconnected: boolean;\r\n\r\n    #references: WeakMap<ModelNode, {\r\n        listener: (event: ModelEvent) => void,\r\n        options: ModelChangeObserverOptions\r\n    }>;\r\n\r\n    constructor(callback: (records: ModelChangeRecord[]) => void) {\r\n        this.#callback = callback;\r\n        this.#records = [];\r\n        this.#disconnected = false;\r\n        this.#references = new WeakMap();\r\n    }\r\n\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void {\r\n        this.#disconnected = false;\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (!reference) {\r\n            const listener = this.#handleModelEvent.bind(this);\r\n            node.addEventListener(\"modelchange\", listener);\r\n            reference = {listener, options};\r\n            references.set(node, reference);\r\n        }\r\n        else {\r\n            references.set(node, reference);\r\n        }\r\n    }\r\n\r\n    unobserve(node: ModelNode): void {\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (reference) {\r\n            const {listener} = reference;\r\n            node.removeEventListener(\"modelchange\", listener);\r\n        }\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#records.splice(0);\r\n        this.#disconnected = true;\r\n    }\r\n\r\n    #trigger(): void {\r\n        const records = this.#records.splice(0);\r\n        if (records.length > 0) {\r\n            this.#callback(records);\r\n        }\r\n    }\r\n\r\n    #handleModelEvent(event: ModelEvent): void {\r\n        if (!this.#disconnected) {\r\n            const {target, currentTarget} = event;\r\n            const reference = this.#references.get(<ModelNode>currentTarget);\r\n            if (reference) {\r\n                const {options} = reference;\r\n                const {properties, propertiesFilter, childList, subtree} = options;\r\n                if (subtree) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n                else if (target == currentTarget) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelChangeObserver: ModelChangeObserverConstructor = ModelChangeObserverBase;","\r\nexport { snakeToCamel };\r\nexport { camelToSnake };\r\nexport { trainToCamel };\r\nexport { camelToTrain };\r\n\r\nfunction snakeToCamel(str: string) {\r\n  return str.split('_').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToSnake(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '_').toLowerCase();\r\n}\r\n\r\nfunction trainToCamel(str: string) {\r\n  return str.split('-').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToTrain(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '-').toLowerCase();\r\n}","import { ModelList, ModelNode, ModelChangeRecord, ModelChangeObserver, ModelChangeObserverOptions } from \"../models/Model\";\r\nimport { camelToTrain } from \"./Snippets\";\r\n/*\r\nexport { subtreeNodes };\r\nexport { ancestorNodes };*/\r\nexport { CustomElement };\r\nexport { ReactiveChildElements };\r\nexport { QueryProperty };\r\nexport { QueryAllProperty };\r\nexport { AttributeProperty };\r\nexport { reactiveElement };\r\nexport { reactiveChildElements };\r\nexport { element };\r\nexport { fragment };\r\nexport { textNode };\r\nexport { AttributeMutationMixin };\r\nexport { AttributeType };\r\nexport { areAttributesMatching };\r\nexport { AttributeMutationMixinBase };\r\nexport { trimMultilineIndent };\r\nexport { Stylesheet };\r\n\r\ninterface AttributePropertyDecorator {\r\n    (\r\n        init: {\r\n            type: typeof String;\r\n            observed?: boolean;\r\n            defaultValue?: string | null;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Number;\r\n            observed?: boolean;\r\n            defaultValue?: number | null;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Boolean;\r\n            observed?: boolean;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Object;\r\n            observed?: boolean;\r\n            defaultValue?: any | null;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n}\r\n\r\nconst AttributeProperty: AttributePropertyDecorator = function(\r\n    init: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Object;\r\n        observed?: boolean;\r\n        defaultValue?: string | number | any | null;\r\n        name?: string;\r\n    }\r\n) {\r\n    return <E extends HTMLElement>(\r\n        target: E, property: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(property);\r\n        const {defaultValue = null, observed = false, name = camelToTrain(propertyName)} = init;\r\n        if (observed) {\r\n            const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n            if (Array.isArray(observedAttributes)) {\r\n                observedAttributes.push(name);\r\n            }\r\n            else {\r\n                Object.defineProperty(\r\n                    constructor, \"observedAttributes\", {\r\n                        value: [name],\r\n                        writable: false\r\n                    }\r\n                );\r\n            }\r\n        }\r\n        const {type} = init;\r\n        switch (type) {\r\n            case Boolean: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        return this.hasAttribute(name);\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value) {\r\n                            this.setAttribute(name, \"\");\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Object: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(name);\r\n                        return (val !== null) ? JSON.parse(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(name, JSON.stringify(value));\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Number: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(name);\r\n                        return (val !== null) ? parseFloat(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(name, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case String:\r\n            default: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(name);\r\n                        return (val !== null) ? val : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(name, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n    \r\nfunction Stylesheet(text: string): CSSStyleSheet {\r\n    const stylesheet = new CSSStyleSheet();\r\n    (stylesheet as any).replaceSync(text);\r\n    return stylesheet;\r\n}\r\n\r\nfunction trimMultilineIndent(text: string): string {\r\n    const newlineIndex = text.indexOf(\"\\n\");\r\n    text = text.substring(newlineIndex + 1);\r\n    const indentMatch = text.match(/^[\\s]*/);\r\n    if (indentMatch) {\r\n        const indent = text.substring(0, indentMatch[0].length);\r\n        text = text.replaceAll(indent, \"\").trimEnd();\r\n    }\r\n    return text;\r\n}\r\n\r\ninterface CustomElementDecorator {\r\n    (init: {\r\n        name: string;\r\n        options?: ElementDefinitionOptions\r\n    }): <C extends CustomElementConstructor>(elementCtor: C) => C;\r\n}\r\n\r\nconst CustomElement: CustomElementDecorator = function(init: {\r\n    name: string;\r\n    options?: ElementDefinitionOptions\r\n}) {\r\n    return <C extends CustomElementConstructor>(\r\n        elementCtor: C\r\n    ) => {\r\n        const {name, options} = init;\r\n        if (!customElements.get(name)) {\r\n            customElements.define(\r\n                name,\r\n                elementCtor,\r\n                options\r\n            );\r\n        }\r\n        return elementCtor;\r\n    }\r\n}\r\n\r\ninterface QueryPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryProperty: QueryPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(propertyKey);\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return this.shadowRoot!.querySelector(selector);\r\n        } : function(this: HTMLElement) {\r\n            return this.querySelector(selector);\r\n        }\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\ninterface QueryAllPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryAllProperty: QueryAllPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(propertyKey);\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return Array.from(this.shadowRoot!.querySelectorAll(selector));\r\n        } : function(this: HTMLElement) {\r\n            return Array.from(this.querySelectorAll(selector));\r\n        };\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\nfunction fragment(...nodes: (Node | string)[]): DocumentFragment {\r\n    const fragment = document.createDocumentFragment();\r\n    fragment.append(...nodes);\r\n    return fragment;\r\n}\r\n\r\nfunction textNode(text: string): Node {\r\n    return document.createTextNode(text);\r\n}\r\n\r\ninterface HTMLElementInit {\r\n    options?: ElementCreationOptions,\r\n    attributes?: {\r\n        [name: string]: number | string | boolean | undefined\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    children?: Node | string | (Node | string)[] | NodeList | ReactiveChildElements,\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction element<E extends HTMLElementTagNameMap[K], K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): E;\r\nfunction element(\r\n    tagName: string, init?: HTMLElementInit): HTMLElement;\r\nfunction element<K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): HTMLElementTagNameMap[K] {\r\n    if (init) {\r\n        const {options, attributes, dataset, children, listeners} = init;\r\n        const element = document.createElement(tagName, options);\r\n        if (attributes) {\r\n            Object.entries(attributes).forEach(([attributeName, attributeValue]) => {\r\n                if (attributeValue !== undefined) {\r\n                    if (typeof attributeValue === \"boolean\") {\r\n                        element.toggleAttribute(camelToTrain(attributeName), attributeValue);\r\n                    }\r\n                    else {\r\n                        element.setAttribute(camelToTrain(attributeName), String(attributeValue));\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        if (dataset) {\r\n            const {dataset: elementDataset} = element;\r\n            Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                elementDataset[datasetEntry_i] = String(dataset[datasetEntry_i]);\r\n            });\r\n        }\r\n        if (children) {\r\n            if (typeof children === \"function\") {\r\n                element.append(...children(element));\r\n            }\r\n            else if (typeof children === \"object\" && \"length\" in children) {\r\n                element.append(...Array.from(children));\r\n            }\r\n            else {\r\n                element.append(children);\r\n            }\r\n        }\r\n        if (listeners) {\r\n            Object.entries(listeners).forEach(([name_i, listener_i]) => {\r\n                if (Array.isArray(listener_i)) {\r\n                    element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                }\r\n                else {\r\n                    element.addEventListener(name_i, listener_i);\r\n                }\r\n            });\r\n        }\r\n        return element;\r\n    }\r\n    return document.createElement(tagName);\r\n}\r\n\r\nconst reactiveElementsMap = new WeakMap<ModelNode, {\r\n    observerOptions: ModelChangeObserverOptions,\r\n    reactiveElementsArray: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }[]\r\n}>();\r\n\r\nconst reactiveElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    model: ModelNode,\r\n    reactiveElement: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }\r\n}) => {\r\n    const {model, reactiveElement} = heldValue;\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    if (reactiveElementsMapEntry !== undefined) {\r\n        const {reactiveElementsArray} = reactiveElementsMapEntry;\r\n        reactiveElementsArray.splice(reactiveElementsArray.indexOf(reactiveElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveElementsPropertyObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    records.forEach((record_i) => {\r\n        const {target, propertyName, oldValue, newValue} = record_i;\r\n        const {reactiveElementsArray} = reactiveElementsMap.get(target)!;\r\n        reactiveElementsArray.forEach(reactiveElement_i => {\r\n            const {elementRef, react, properties} = reactiveElement_i;\r\n            const element = elementRef.deref();\r\n            if (element) {\r\n                if (properties.includes(propertyName!)) {\r\n                    react(element, propertyName!, oldValue, newValue);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveElement<M extends ModelNode, E extends Element, K extends string>(\r\n    model: M,\r\n    element: E,\r\n    properties: K[],\r\n    react: (object: E, property: K, oldValue: any, newValue: any) => void\r\n): E;\r\nfunction reactiveElement<M extends ModelNode, E extends Element>(\r\n    model: M,\r\n    element: E,\r\n    properties: string[],\r\n    react: (element: E, property: string, oldValue: any, newValue: any) => void\r\n): E {\r\n    const elementRef = new WeakRef(element);\r\n    const reactiveElement = {elementRef, react, properties};\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    reactiveElementsFinalizationRegistry.register(element, {model, reactiveElement});\r\n    if (!reactiveElementsMapEntry) {\r\n        const observerOptions = {\r\n            properties: true,\r\n            propertiesFilter: properties\r\n        };\r\n        const reactiveElementsArray = [reactiveElement];\r\n        reactiveElementsMap.set(model, {observerOptions, reactiveElementsArray});\r\n        reactiveElementsPropertyObserver.observe(model, observerOptions);\r\n    }\r\n    else {\r\n        const {reactiveElementsArray, observerOptions} = reactiveElementsMapEntry;\r\n        const {propertiesFilter} = observerOptions;\r\n        reactiveElementsArray.push(reactiveElement);\r\n        observerOptions.propertiesFilter = propertiesFilter ?\r\n            propertiesFilter.concat(properties.filter(\r\n                property_i => !propertiesFilter.includes(property_i)\r\n            )) : properties.filter(\r\n                (property_i, i, properties) => properties.indexOf(property_i) === i\r\n            )\r\n    }\r\n    properties.forEach((property_i) => {\r\n        if (property_i in model) {\r\n            const value = Reflect.get(model, property_i, model);\r\n            if (value !== undefined) {\r\n                react(element, <any>property_i, <any>undefined, value);\r\n            }\r\n        }\r\n    });\r\n    return element;\r\n}\r\n\r\ninterface ReactiveChildElements {\r\n    (parent: Node & ParentNode): (Node | string)[]\r\n}\r\n\r\nconst reactiveChildElementsMap = new WeakMap<ModelList, {\r\n    reactiveChildElementsArray: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }[]\r\n}>();\r\n\r\nconst reactiveChildElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    list: ModelList,\r\n    reactiveChildElement: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }\r\n}) => {\r\n    const {list, reactiveChildElement} = heldValue;\r\n    const reactiveChildrenElementsMapEntry = reactiveChildElementsMap.get(list);\r\n    if (reactiveChildrenElementsMapEntry) {\r\n        const {reactiveChildElementsArray} = reactiveChildrenElementsMapEntry;\r\n        reactiveChildElementsArray.splice(reactiveChildElementsArray.indexOf(reactiveChildElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveChildElementsObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    let range: null | Range = null;\r\n    Array.from(records.values()).forEach((record_i) => {\r\n        const {target} = record_i;\r\n        const list = <ModelList>target;\r\n        const {length: listLength} = list;\r\n        const {reactiveChildElementsArray} = reactiveChildElementsMap.get(list)!;\r\n        reactiveChildElementsArray.forEach((reactiveChildElements_i) => {\r\n            const {parentRef, mapping, placeholder} = reactiveChildElements_i;\r\n            const parent = parentRef.deref();\r\n            if (parent) {\r\n                const {firstChild, children} = parent;\r\n                const {length: childrenCount} = children;\r\n                if (placeholder && listLength > 0 && firstChild == placeholder) {\r\n                    parent.removeChild(placeholder);\r\n                }\r\n                const {changeType, LIST_INSERT, LIST_REMOVE, LIST_SORT} = record_i;\r\n                switch (changeType) {\r\n                    case LIST_INSERT: {\r\n                        const {insertedIndex, insertedItems} = record_i;\r\n                        const insertedItemsArray = Array.from(insertedItems.values()).map(mapping);\r\n                        const {length: childrenCount} = children;\r\n                        if (insertedIndex < childrenCount) {\r\n                            children[insertedIndex].before(...insertedItemsArray);\r\n                        }\r\n                        else {\r\n                            parent.append(...insertedItemsArray);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_REMOVE: {\r\n                        const {removedIndex, removedItems} = record_i;\r\n                        const {length: removedCount} = removedItems;\r\n                        range = range ?? document.createRange();\r\n                        const removeEndIndex = removedIndex + (removedCount - 1);\r\n                        if (removeEndIndex < childrenCount) {\r\n                            range.setStartBefore(children[removedIndex]);\r\n                            range.setEndAfter(children[removeEndIndex]);\r\n                            range.deleteContents();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_SORT: {\r\n                        const {sortedIndices} = record_i;\r\n                        const childrenArray = Array.from(children);\r\n                        parent.append(\r\n                            ...sortedIndices.filter(\r\n                                index_i => index_i < childrenCount\r\n                            ).map(\r\n                                index_i => childrenArray[index_i]\r\n                            )\r\n                        );\r\n                        break;\r\n                    }\r\n                }\r\n                if (listLength == 0 && placeholder) {\r\n                    parent.append(placeholder);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveChildElements<Model extends ModelNode>(\r\n    list: ModelList<Model>,\r\n    mapping: (item: Model) => Element,\r\n    placeholder?: Element\r\n): ReactiveChildElements {\r\n    return (parent: Node & ParentNode) => {\r\n        const parentRef = new WeakRef(parent);\r\n        const reactiveChildElementsMapEntry = reactiveChildElementsMap.get(list);\r\n        const reactiveChildElement = {parentRef, mapping, placeholder};\r\n        reactiveChildElementsFinalizationRegistry.register(parent, {list, reactiveChildElement});\r\n        if (!reactiveChildElementsMapEntry) {\r\n            const reactiveChildElementsArray = [reactiveChildElement];\r\n            reactiveChildElementsMap.set(list, {reactiveChildElementsArray});\r\n            reactiveChildElementsObserver.observe(list, {\r\n                childList: true\r\n            });\r\n        }\r\n        else {\r\n            const {reactiveChildElementsArray} = reactiveChildElementsMapEntry;\r\n            reactiveChildElementsArray.push(reactiveChildElement);\r\n        }\r\n        return list.length == 0 && placeholder ?\r\n            [placeholder] : Array.from(list.values()).map(mapping);\r\n    }\r\n}\r\n\r\ninterface AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n    attach(element: Element): void;\r\n    detach(element: Element): void;\r\n}\r\n\r\ntype AttributeType = \"string\" | \"boolean\" | \"list\";\r\n\r\nfunction areAttributesMatching(\r\n    referenceAttributeType: AttributeType,\r\n    referenceAttributeName: string, referenceAttributeValue: string,\r\n    attributeName: string, attributeValue: string | null): boolean {\r\n    if (referenceAttributeName == attributeName) {\r\n        switch (referenceAttributeType) {\r\n            case \"boolean\":\r\n                return referenceAttributeValue == \"\" && attributeValue == \"\";\r\n            case \"string\":\r\n                return referenceAttributeValue !== \"\" && (referenceAttributeValue == attributeValue);\r\n            case \"list\":\r\n                return (referenceAttributeValue !== \"\" && attributeValue !== null) && new RegExp(`${referenceAttributeValue}\\s*?`, \"g\").test(attributeValue );\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nclass AttributeMutationMixinBase implements AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n\r\n    constructor(attributeName: string, attributeType: AttributeType = \"boolean\", attributeValue: string = \"\") {\r\n        this.attributeName = attributeName;\r\n        this.attributeType = attributeType;\r\n        this.attributeValue = attributeValue;\r\n    }\r\n\r\n    attach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n\r\n    detach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n}","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEGridCellElement };\r\n\r\ninterface HTMLEGridCellElementConstructor {\r\n    prototype: HTMLEGridCellElement;\r\n    new(): HTMLEGridCellElement;\r\n}\r\n\r\ninterface HTMLEGridCellElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n    headers: string;\r\n    posinset: number;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridcell\": HTMLEGridCellElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridcell\"\r\n})\r\nclass HTMLEGridCellElementBase extends HTMLElement implements HTMLEGridCellElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    headers!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridCellElement: HTMLEGridCellElementConstructor = HTMLEGridCellElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\n\r\nexport { HTMLEGridRowGroupElement };\r\n\r\ninterface HTMLEGridRowGroupElementConstructor {\r\n    prototype: HTMLEGridRowGroupElement;\r\n    new(): HTMLEGridRowGroupElement;\r\n}\r\n\r\ninterface HTMLEGridRowGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrowgroup\": HTMLEGridRowGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrowgroup\"\r\n})\r\nclass HTMLEGridRowGroupElementBase extends HTMLElement implements HTMLEGridRowGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                            /*display: flex;\r\n                            flex-direction: column;*/\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowGroupElement: HTMLEGridRowGroupElementConstructor = HTMLEGridRowGroupElementBase;","import { CustomElement, AttributeProperty, QueryProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\n\r\nexport { HTMLEMenuItemElement };\r\nexport { EMenuItem };\r\n\r\ninterface HTMLEMenuItemElementConstructor {\r\n    prototype: HTMLEMenuItemElement;\r\n    new(): HTMLEMenuItemElement;\r\n}\r\n\r\ninterface HTMLEMenuItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n    get menu(): HTMLEMenuElement | null;\r\n    name: string;\r\n    label: string | null;\r\n    value: string;\r\n    hotkey: string;\r\n    disabled: boolean;\r\n    checked: boolean;\r\n    expanded: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(attributeName: string, oldValue: string | null, newValue: string | null): void;\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitem\": HTMLEMenuItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitem\"\r\n})\r\nclass HTMLEMenuItemElementBase extends HTMLElement implements HTMLEMenuItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n    \r\n    @QueryProperty({selector: \":scope > e-menu[slot=menu]\"})\r\n    menu!: HTMLEMenuElement | null;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string | null;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    hotkey!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    checked!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    expanded!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    overflown!: boolean;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"button\", observed: true})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n\r\n    attributeChangedCallback(attributeName: string, oldValue: string | null, newValue: string | null): void {\r\n        const {internals} = this;\r\n        switch (attributeName) {\r\n            case \"type\": {\r\n                switch (newValue) {\r\n                    case \"checkbox\":\r\n                    case \"radio\": {\r\n                        internals.role = `menuitem${newValue}`;\r\n                        break;\r\n                    }\r\n                    default: {\r\n                        internals.role = \"menuitem\";\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"checked\": {\r\n                internals.ariaChecked = String(newValue !== null);\r\n                break;\r\n            }\r\n            case \"disabled\": {\r\n                internals.ariaDisabled = String(newValue !== null);\r\n                break;\r\n            }\r\n            case \"expanded\": {\r\n                internals.ariaExpanded = String(newValue !== null);\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                internals.ariaLabel = newValue;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"icon\"\r\n                }\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"label\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"arrow\"\r\n                }\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const internals = this.attachInternals();\r\n        this.internals = internals;\r\n        internals.role = \"menuitem\";\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const tabindex = this.getAttribute(\"tabindex\");\r\n        this.tabIndex = tabindex !== null ? parseInt(tabindex) : -1;\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                const expand = force ?? !expanded;\r\n                this.expanded = expand;\r\n                if (expand) {\r\n                    this.#positionMenu();\r\n                }\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (!expanded) {\r\n                    this.expanded = true;\r\n                    this.#positionMenu();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (expanded) {\r\n                    this.expanded = false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const {type} = this;\r\n            if (type == \"menu\") {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemRight - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const closestMenu = this.closest(\"e-menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    const overflowX = itemRight + menuWidth - clientWidth;\r\n                    const overflowY = itemTop + menuHeight - clientHeight;\r\n                    menuStyle.setProperty(\"left\", `${\r\n                        overflowX > 0 ?\r\n                        itemLeft - menuWidth - closestMenuLeft :\r\n                        itemRight - closestMenuLeft\r\n                    }px`);\r\n                    menuStyle.setProperty(\"top\", `${\r\n                        overflowY > 0 ?\r\n                        itemBottom  - menuHeight - closestMenuTop :\r\n                        itemTop - closestMenuTop\r\n                    }px`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemElement: HTMLEMenuItemElementConstructor = HTMLEMenuItemElementBase;\r\n\r\ninterface EMenuItemConstructor {\r\n    prototype: HTMLEMenuItemElement;\r\n    new(init: {\r\n        name?: string;\r\n        label: string;\r\n        type?: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    button(init: {\r\n        name?: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    checkbox(init: {\r\n        name?: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    radio(init: {\r\n        name?: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    menu(init: {\r\n        name?: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    submenu(init: {\r\n        name?: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n}\r\n\r\nvar EMenuItem = <EMenuItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string;\r\n        label: string;\r\n        type?: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menu} = init;\r\n        if (menu) {\r\n            menu.slot = \"menu\";\r\n        }\r\n        return element(\"e-menuitem\", {\r\n            attributes: {\r\n                tabindex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type\r\n            },\r\n            children: menu ? [\r\n                label,\r\n                menu\r\n            ] : [\r\n                label\r\n            ],\r\n            listeners: {\r\n                click: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemElement.prototype,\r\n        button(init: {\r\n            name?: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name?: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name?: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menu(init: {\r\n            name?: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"menu\"\r\n            });\r\n        },\r\n        submenu(init: {\r\n            name?: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"submenu\"\r\n            });\r\n        }\r\n    }\r\n);","import { element, CustomElement, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuItemElement, EMenuItem } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuItemGroupElement };\r\nexport { EMenuItemGroup };\r\n\r\ninterface HTMLEMenuItemGroupElementConstructor {\r\n    prototype: HTMLEMenuItemGroupElement;\r\n    new(): HTMLEMenuItemGroupElement;\r\n}\r\n\r\ninterface HTMLEMenuItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    label: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitemgroup\": HTMLEMenuItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitemgroup\"\r\n})\r\nclass HTMLEMenuItemGroupElementBase extends HTMLElement implements HTMLEMenuItemGroupElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"label\"\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        const internals = this.attachInternals();\r\n        internals.role = \"group\";\r\n        this.internals = internals;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        const {internals} = this;\r\n        switch (name) {\r\n            case \"label\":\r\n                internals.ariaLabel = newValue;\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemGroupElement: HTMLEMenuItemGroupElementConstructor = HTMLEMenuItemGroupElementBase;\r\n\r\ninterface EMenuItemGroupConstructor {\r\n    prototype: HTMLEMenuItemGroupElement;\r\n    new(init: {\r\n        name?: string;\r\n        items: HTMLEMenuItemElement[];\r\n    }): HTMLEMenuItemGroupElement;\r\n    radios(init: {name: string, items: {label: string, value: string}[]}): HTMLEMenuItemGroupElement;\r\n}\r\n\r\nvar EMenuItemGroup = <EMenuItemGroupConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string,\r\n        items: HTMLEMenuItemElement[]\r\n    }) {\r\n        const {name, items} = init;\r\n        return element(\"e-menuitemgroup\", {\r\n            attributes: {\r\n                name: name\r\n            },\r\n            children: items\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemGroupElement.prototype,\r\n        radios: (init: {\r\n            name: string,\r\n            items: {\r\n                label: string,\r\n                value: string\r\n            }[]\r\n        }) => {\r\n            const {name, items} = init;\r\n            return element(\"e-menuitemgroup\", {\r\n                attributes: {\r\n                    name: name\r\n                },\r\n                children: items.map(\r\n                    ({label, value}) => new EMenuItem({name, label, type: \"radio\", value})\r\n                )\r\n            });\r\n        }\r\n    }\r\n);","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuElement };\r\nexport { EMenu };\r\n\r\ninterface HTMLEMenuElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    firstItem(): HTMLEMenuItemElement | null;\r\n    items(): HTMLEMenuItemElement[];\r\n    name: string;\r\n    contextual: boolean;\r\n    connectedCallback(): void;\r\n    positionContextual(x: number, y: number): void;\r\n}\r\n\r\ninterface HTMLEMenuElementConstructor {\r\n    prototype: HTMLEMenuElement;\r\n    new(): HTMLEMenuElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menu\": HTMLEMenuElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar toggleAnimations: WeakMap<HTMLEMenuItemElement, Animation>;\r\nvar HIDE_DELAY_MS = 200;\r\nvar SHOW_DELAY_MS = 400;\r\n\r\n@CustomElement({\r\n    name: \"e-menu\"\r\n})\r\nclass HTMLEMenuElementBase extends HTMLElement implements HTMLEMenuElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    items(): HTMLEMenuItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        ));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        const {activeIndex} = this;\r\n        return this.querySelector<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem:focus-within\"\r\n        ) ?? activeIndex > -1 ? this.items()[activeIndex] ?? null : null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    contextual!: boolean;\r\n\r\n    #walker: TreeWalker;\r\n    #activeIndex: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        toggleAnimations = new WeakMap();\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        this.#activeIndex = -1;\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"mouseout\", this.#handleMouseOutEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const tabindex = this.getAttribute(\"tabindex\");\r\n        this.tabIndex = tabindex !== null ? parseInt(tabindex) : -1;\r\n    }\r\n\r\n    positionContextual(x: number, y: number): void {\r\n        const {style} = this;\r\n        const {width: menuWidth, height: menuHeight} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        const left = x + scrollX;\r\n        const top = y + scrollY;\r\n        const {clientWidth, clientHeight} = document.body;\r\n        const overflowX = left + menuWidth - clientWidth;\r\n        const overflowY = top + menuHeight - clientHeight;\r\n        style.setProperty(\"left\", `${overflowX > 0 ? left - menuWidth : left}px`);\r\n        style.setProperty(\"top\", `${overflowY > 0 ? top - menuHeight : top}px`);\r\n    }\r\n\r\n    #collapseSubmenus(): void {\r\n        this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem[expanded]\"\r\n        )\r\n        .forEach((item_i) => {\r\n            item_i.collapse();\r\n        });\r\n    }\r\n    \r\n    #nearestItem(target: Element): HTMLEMenuItemElement | null {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextNode();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        return menu instanceof HTMLEMenuElementBase ?\r\n            menu.firstItem() :\r\n            null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        if (item !== null) {\r\n            this.#activeIndex = this.items().indexOf(item);\r\n        }\r\n    }\r\n    \r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetItem = (<HTMLElement>target).closest(\"e-menuitem\");\r\n        if (targetItem) {\r\n            const {type, checked} = targetItem;\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    targetItem.checked = !checked;\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    const {name, value} = targetItem;\r\n                    targetItem.checked = true;\r\n                    this.querySelectorAll<HTMLEMenuItemElement>(\r\n                        `:is(:scope, :scope > e-menuitemgroup) > e-menuitem[type=radio][name=${name}]`\r\n                    )\r\n                    .forEach((radio_i) => {\r\n                        radio_i.checked = radio_i.value == value;\r\n                    });\r\n                    break;\r\n                }\r\n                case \"menu\":\r\n                case \"submenu\": {\r\n                    targetItem.toggle();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem) {\r\n                this.#setActiveItem(nearestItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const {contextual} = this;\r\n            if (contextual) {\r\n                try {\r\n                    this.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const {activeItem} = this;\r\n                if (activeItem?.expanded) {\r\n                    activeItem.collapse();\r\n                }\r\n                this.#setActiveItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.firstItem() :\r\n                    this.firstItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.firstItem();\r\n                firstItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                lastItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"menu\":\r\n                        case \"submenu\": {\r\n                            activeItem.expand();\r\n                            if (activeItem.expanded) {\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                            }\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            activeItem.click();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                    else {\r\n                        const {contextual} = this;\r\n                        if (contextual) {\r\n                            this.blur();\r\n                            this.dispatchEvent(new Event(\"close\", {bubbles: true}));\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            if (!activeItem.expanded) {\r\n                                activeItem.expand();\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                                event.stopPropagation();\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOutEvent(event: MouseEvent): void {\r\n        const {target, relatedTarget} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem !== null) {\r\n                if (nearestItem.type == \"submenu\" &&\r\n                    !nearestItem.expanded) {\r\n                    toggleAnimations.get(nearestItem)?.cancel();\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLEMenuElement\r\n                ) == this;\r\n                if (isTargetClosestMenu) {\r\n                    const {activeItem} = this;\r\n                    if (activeItem?.type == \"submenu\" &&\r\n                        activeItem.expanded) {\r\n                        let toggleAnimation = toggleAnimations.get(activeItem);\r\n                        if (toggleAnimation) {\r\n                            toggleAnimation.cancel();\r\n                        }\r\n                        toggleAnimation = activeItem.animate(null, {\r\n                            duration: HIDE_DELAY_MS\r\n                        });\r\n                        toggleAnimations.set(activeItem, toggleAnimation);\r\n                        const {finished} = toggleAnimation;\r\n                        finished\r\n                            .then(() => {\r\n                                activeItem.collapse();\r\n                            })\r\n                            .catch(() => undefined)\r\n                            .finally(() => {\r\n                                toggleAnimations.delete(activeItem);\r\n                            });\r\n                    }\r\n                    const {clientX, clientY} = event;\r\n                    const {left, right, top, bottom} = this.getBoundingClientRect();\r\n                    const intersectsWithMouse = !(\r\n                        left > clientX || right < clientX || top > clientY || bottom < clientY\r\n                    );\r\n                    const containsRelatedTarget = this.contains(<Node>relatedTarget);\r\n                    if (intersectsWithMouse && containsRelatedTarget) {\r\n                        if (relatedTarget instanceof HTMLEMenuElement && relatedTarget !== this) {\r\n                            relatedTarget.focus({preventScroll: true});\r\n                        }\r\n                        else {\r\n                            this.focus({preventScroll: true});\r\n                            this.#setActiveItem(null);\r\n                        }\r\n                    }\r\n                    if (!intersectsWithMouse) {\r\n                        this.focus({preventScroll: true});\r\n                        this.#setActiveItem(null);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem !== null) {\r\n                if (nearestItem.type === \"submenu\" && nearestItem.expanded) {\r\n                    toggleAnimations.get(nearestItem)?.cancel();\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLEMenuElement\r\n                ) == this;\r\n                if (isTargetClosestMenu) {\r\n                    const {activeItem} = this;\r\n                    if (activeItem?.type === \"submenu\" &&\r\n                        activeItem.expanded && \r\n                        !activeItem.contains(<Node>target)) {\r\n                        let toggleAnimation = toggleAnimations.get(activeItem);\r\n                        if (toggleAnimation) {\r\n                            toggleAnimation.cancel();\r\n                        }\r\n                        toggleAnimation = activeItem.animate(null, {\r\n                            duration: SHOW_DELAY_MS\r\n                        });\r\n                        toggleAnimations.set(activeItem, toggleAnimation);\r\n                        const {finished} = toggleAnimation;\r\n                        finished\r\n                            .then(() => {\r\n                                activeItem.collapse();\r\n                            })\r\n                            .catch(() => undefined)\r\n                            .finally(() => {\r\n                                toggleAnimations.delete(activeItem);\r\n                            });\r\n                    }\r\n                    this.#setActiveItem(nearestItem);\r\n                    nearestItem.focus({preventScroll: true});\r\n                    if (nearestItem.type === \"submenu\") {\r\n                        if (!nearestItem.expanded) {\r\n                            let toggleAnimation = toggleAnimations.get(nearestItem);\r\n                            if (toggleAnimation) {\r\n                                toggleAnimation.cancel();\r\n                            }\r\n                            toggleAnimation = nearestItem.animate(null, {\r\n                                duration: HIDE_DELAY_MS\r\n                            });\r\n                            toggleAnimations.set(nearestItem, toggleAnimation);\r\n                            const {finished} = toggleAnimation;\r\n                            finished\r\n                                .then(() => {\r\n                                    const {activeItem} = this;\r\n                                    this.#collapseSubmenus();\r\n                                    if (activeItem) {\r\n                                        toggleAnimations.get(activeItem)?.cancel();\r\n                                        activeItem.expand();\r\n                                        activeItem.menu?.focus({preventScroll: true});\r\n                                    }\r\n                                })\r\n                                .catch(() => undefined)\r\n                                .finally(() => {\r\n                                    toggleAnimations.delete(nearestItem);\r\n                                });\r\n                        }\r\n                        else {\r\n                            nearestItem.menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuElement: HTMLEMenuElementConstructor = HTMLEMenuElementBase;\r\n\r\ninterface EMenuConstructor {\r\n    prototype: HTMLEMenuElement;\r\n    new(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }): HTMLEMenuElement;\r\n}\r\n\r\nvar EMenu = <EMenuConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }) {\r\n        const {name, children} = init;\r\n        return element(\"e-menu\", {\r\n            attributes: {\r\n                name: name,\r\n                tabindex: -1,\r\n            },\r\n            children: children\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuElement.prototype,\r\n    }\r\n);","import { AttributeProperty, CustomElement, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\n\r\nexport { HTMLEGridRowElement };\r\n\r\ninterface HTMLEGridRowElementConstructor {\r\n    prototype: HTMLEGridRowElement;\r\n    new(): HTMLEGridRowElement;\r\n}\r\n\r\ninterface HTMLEGridRowElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    active: boolean;\r\n    selected: boolean;\r\n    posinset: number;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrow\": HTMLEGridRowElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrow\"\r\n})\r\nclass HTMLEGridRowElementBase extends HTMLElement implements HTMLEGridRowElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    #menu: HTMLEMenuElement | null;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row;\r\n                        }\r\n\r\n                        :host([droptarget]) {\r\n                            background-color: gainsboro;\r\n                        }\r\n                        \r\n                        :host(:hover) {\r\n                            background-color: rgba(135, 206, 250, 0.2);\r\n                        }\r\n\r\n                        :host([active]) {\r\n                            outline: 1px solid rgb(135, 206, 250);\r\n                            outline-offset: -1px;\r\n                        }\r\n\r\n                        :host([selected]) {\r\n                            background-color: rgba(135, 206, 250, 0.4);\r\n                            outline: 1px solid rgb(135, 206, 250);\r\n                            outline-offset: -1px;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\"),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#menu = null;\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"menu\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#menu = element instanceof HTMLEMenuElement ? element : null;\r\n                break;\r\n            }\r\n            default: {\r\n                const assignedCells = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n                    .assignedElements()\r\n                    .filter(\r\n                        element_i => element_i instanceof HTMLEGridCellElement\r\n                    );\r\n                assignedCells.forEach((cell_i, i) => {\r\n                    cell_i.posinset = i;\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowElement: HTMLEGridRowElementConstructor = HTMLEGridRowElementBase;","import { HTMLEGridElement } from \"./Grid\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\n\r\nexport { HTMLEGridCellCollection };\r\n\r\ninterface HTMLEGridCellCollectionConstructor {\r\n    prototype: HTMLEGridCellCollection;\r\n    new(root: HTMLElement): HTMLEGridCellCollection;\r\n}\r\n\r\ninterface HTMLEGridCellCollection {\r\n    length: number;\r\n    item(index: number): HTMLEGridCellElement | null;\r\n    namedItem(name: string): HTMLEGridCellElement | null;\r\n    values(): IterableIterator<HTMLEGridCellElement>;\r\n}\r\n\r\nclass HTMLEGridCellCollectionBase implements HTMLEGridCellCollection {\r\n    #walker: TreeWalker;\r\n\r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridCellElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEGridCellElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEGridCellElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEGridCellElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEGridCellElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEGridCellElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEGridCellElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEGridCellElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEGridCellElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridCellCollection: HTMLEGridCellCollectionConstructor =  HTMLEGridCellCollectionBase;","import { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\n\r\nexport { HTMLEGridRowCollection };\r\n\r\ninterface HTMLEGridRowCollectionConstructor {\r\n    prototype: HTMLEGridRowCollection;\r\n    new(root: HTMLElement): HTMLEGridRowCollection;\r\n}\r\n\r\ninterface HTMLEGridRowCollection {\r\n    length: number;\r\n    item(index: number): HTMLEGridRowElement | null;\r\n    namedItem(name: string): HTMLEGridRowElement | null;\r\n    values(): IterableIterator<HTMLEGridRowElement>;\r\n}\r\n\r\nclass HTMLEGridRowCollectionBase implements HTMLEGridRowCollection {\r\n    #walker: TreeWalker;\r\n    \r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement || node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEGridRowElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEGridRowElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEGridRowElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEGridRowElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEGridRowElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEGridRowElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEGridRowElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEGridRowElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowCollection: HTMLEGridRowCollectionConstructor =  HTMLEGridRowCollectionBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\n\r\nexport { HTMLEGridBodyElement };\r\n\r\ninterface HTMLEGridBodyElementConstructor {\r\n    prototype: HTMLEGridBodyElement;\r\n    new(): HTMLEGridBodyElement;\r\n}\r\n\r\ninterface HTMLEGridBodyElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridbody\": HTMLEGridBodyElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridbody\"\r\n})\r\nclass HTMLEGridBodyElementBase extends HTMLElement implements HTMLEGridBodyElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridBodyElement: HTMLEGridBodyElementConstructor = HTMLEGridBodyElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridHeadElement } from \"./GridHead\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\n\r\nexport { HTMLEGridElement };\r\n\r\ninterface HTMLEGridElementConstructor {\r\n    prototype: HTMLEGridElement;\r\n    new(): HTMLEGridElement;\r\n}\r\n\r\ninterface HTMLEGridElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly body: HTMLEGridBodyElement | null;\r\n    readonly head: HTMLEGridHeadElement | null\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n    readonly activeCell: HTMLEGridCellElement | null;\r\n    readonly activeRow: HTMLEGridRowElement | null;\r\n    selectby: \"cell\" | \"row\";\r\n    name: string;\r\n    multiselectable: boolean;\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    clearSelection(): void;\r\n    selectedCells(): HTMLEGridCellElement[];\r\n    selectedRows(): HTMLEGridRowElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-grid\": HTMLEGridElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-grid\"\r\n})\r\nclass HTMLEGridElementBase extends HTMLElement implements HTMLEGridElement {\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    get activeCell(): HTMLEGridCellElement | null {\r\n        return this.querySelector<HTMLEGridCellElement>(\"e-gridcell[active]\");\r\n    }\r\n\r\n    get activeRow(): HTMLEGridRowElement | null {\r\n        return this.querySelector<HTMLEGridRowElement>(\"e-gridrow[active]\");\r\n    }\r\n\r\n    get body(): HTMLEGridBodyElement | null {\r\n        return this.querySelector<HTMLEGridBodyElement>(\":scope > e-gridbody\");\r\n    }\r\n\r\n    get head(): HTMLEGridHeadElement | null {\r\n        return this.querySelector<HTMLEGridHeadElement>(\":scope > e-gridhead\");\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"cell\"})\r\n    selectby!: \"cell\" | \"row\";\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    multiselectable!: boolean;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #cellsWalker: TreeWalker;\r\n    #rowsWalker: TreeWalker;\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#cellsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#cellsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#rowsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#rowsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"dblclick\", this.#handleDblClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.#clearCellsSelection();\r\n        this.#clearRowsSelection();\r\n    }\r\n\r\n    selectedCells(): HTMLEGridCellElement[] {\r\n        return Array.from(this.querySelectorAll(\"e-gridcell[selected]\"));\r\n    }\r\n\r\n    selectedRows(): HTMLEGridRowElement[] {\r\n        return Array.from(this.querySelectorAll(\"e-gridrow[selected]\"));\r\n    }\r\n\r\n    #cellsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridCellElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement || node instanceof HTMLEGridRowGroupElement || node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #rowsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridRowElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement || node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getCellsRange(from: HTMLEGridCellElement, to: HTMLEGridCellElement): HTMLEGridCellElement[] {\r\n        const cells = Array.from(this.cells.values());\r\n        const fromIndex = cells.indexOf(from);\r\n        const toIndex = cells.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return cells.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #getRowsRange(from: HTMLEGridRowElement, to: HTMLEGridRowElement): HTMLEGridRowElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleRow = this.#nextRow(from);\r\n            while (nextVisibleRow && nextVisibleRow !== to) {\r\n                range.push(nextVisibleRow);\r\n                nextVisibleRow = this.#nextRow(nextVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleRow = this.#previousRow(from);\r\n            while (previousVisibleRow && previousVisibleRow !== to) {\r\n                range.push(previousVisibleRow);\r\n                previousVisibleRow = this.#previousRow(previousVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setCellsSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((selectedCell_i) => {\r\n            if (!cells.includes(selectedCell_i)) {\r\n                selectedCell_i.selected = false;\r\n            }\r\n        });\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setRowsSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((selectedRow_i) => {\r\n            if (!rows.includes(selectedRow_i)) {\r\n                selectedRow_i.selected = false;\r\n            }\r\n        });\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addCellsToSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addRowsToSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeCellsFromSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        cells.forEach((cell_i) => {\r\n            if (selectedCells.includes(cell_i)) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeRowsFromSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        rows.forEach((row_i) => {\r\n            if (selectedRows.includes(row_i)) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearCellsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((cell_i) => {\r\n            if (cell_i.selected) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearRowsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((row_i) => {\r\n            if (row_i.selected) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveCell(cell: HTMLEGridCellElement | null): void {\r\n        const {activeCell} = this;\r\n        if (activeCell !== null && activeCell !== cell) {\r\n            activeCell.active = false;\r\n            activeCell.tabIndex = -1;\r\n        }\r\n        if (cell !== null) {\r\n            const cellsWalker = this.#cellsWalker;\r\n            cellsWalker.currentNode = cell;\r\n            cell.active = true;\r\n            cell.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #setActiveRow(row: HTMLEGridRowElement | null): void {\r\n        const {activeRow} = this;\r\n        if (activeRow !== null && activeRow !== row) {\r\n            activeRow.active = false;\r\n            activeRow.tabIndex = -1;\r\n        }\r\n        if (row !== null) {\r\n            const rowsWalker = this.#rowsWalker;\r\n            rowsWalker.currentNode = row;\r\n            row.active = true;\r\n            row.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #firstCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.firstChild();\r\n    }\r\n\r\n    #lastCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.lastChild();\r\n    }\r\n\r\n    #previousCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.previousNode();\r\n    }\r\n\r\n    #nextCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.nextNode();\r\n    }\r\n\r\n    #closestRow(cell: HTMLEGridCellElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = cell;\r\n        return <HTMLEGridRowElement | null>rowsWalker.parentNode();\r\n    }\r\n\r\n    #firstRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.firstChild();\r\n    }\r\n\r\n    #lastRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.lastChild();\r\n    }\r\n\r\n    #previousRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.previousNode();\r\n    }\r\n\r\n    #nextRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.nextNode();\r\n    }\r\n\r\n    #topCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const {cells: closestRowCells} = closestRow;\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const previousRow = this.#previousRow(closestRow);\r\n            if (previousRow) {\r\n                const {cells: previousRowCells} = previousRow;\r\n                return previousRowCells.item(\r\n                    Math.min(cellIndex, previousRowCells.length)\r\n                );\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #bottomCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const {cells: closestRowCells} = closestRow;\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const nextRow = this.#nextRow(closestRow);\r\n            if (nextRow) {\r\n                const {cells: nextRowCells} = nextRow;\r\n                return nextRowCells.item(\r\n                    Math.min(cellIndex, nextRowCells.length)\r\n                );\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {ctrlKey, shiftKey} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const composedPath = event.composedPath();\r\n                const targetCell = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridCellElement\r\n                ) : null;\r\n                const selectedCells = this.selectedCells();\r\n                if (targetCell instanceof HTMLEGridCellElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetCell.selected ?\r\n                            this.#addCellsToSelection(targetCell) :\r\n                            this.#removeCellsFromSelection(targetCell);\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedCell = selectedCells[selectedCells.length - 1];\r\n                        if (lastSelectedCell) {\r\n                            const range = this.#getCellsRange(\r\n                                lastSelectedCell,\r\n                                targetCell\r\n                            );\r\n                            if (range) {\r\n                                selectedCells.includes(targetCell) ?\r\n                                    this.#removeCellsFromSelection(...range) :\r\n                                    this.#addCellsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setCellsSelection(targetCell);\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const selectedRows = this.selectedRows();\r\n                const composedPath = event.composedPath();\r\n                const targetRow = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridRowElement\r\n                ) : null;\r\n                if (targetRow instanceof HTMLEGridRowElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetRow.selected ?\r\n                            this.#addRowsToSelection(targetRow) :\r\n                            this.#removeRowsFromSelection(targetRow);\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedRow = selectedRows[selectedRows.length - 1];\r\n                        if (lastSelectedRow) {\r\n                            const range = this.#getRowsRange(\r\n                                lastSelectedRow,\r\n                                targetRow\r\n                            );\r\n                            if (range) {\r\n                                selectedRows.includes(targetRow) ?\r\n                                    this.#removeRowsFromSelection(...range) :\r\n                                    this.#addRowsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setRowsSelection(targetRow);\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleDblClickEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {selectby, activeCell, activeRow} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    switch (selectby) {\r\n                        case \"cell\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const firstCell = firstRow ? this.#firstCell(firstRow) : null;\r\n                            const lastRow = this.#lastRow();\r\n                            const lastCell = lastRow ? this.#lastCell(lastRow) : null;\r\n                            if (firstCell && lastCell) {\r\n                                const range = this.#getCellsRange(firstCell, lastCell);\r\n                                if (range) {\r\n                                    this.#setCellsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"row\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const lastRow = this.#lastRow();\r\n                            if (firstRow && lastRow) {\r\n                                const range = this.#getRowsRange(firstRow, lastRow);\r\n                                if (range) {\r\n                                    this.#setRowsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const previousCell = this.#previousCell(activeCell);\r\n                        if (previousCell) {\r\n                            previousCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousCell.selected ?\r\n                                    this.#removeCellsFromSelection(previousCell) :\r\n                                    this.#addCellsToSelection(previousCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const nextCell = this.#nextCell(activeCell);\r\n                        if (nextCell) {\r\n                            nextCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextCell.selected ?\r\n                                    this.#removeCellsFromSelection(nextCell) :\r\n                                    this.#addCellsToSelection(nextCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const firstRow = activeRow ?? this.#firstRow();\r\n                        const topCell = activeCell ?\r\n                            this.#topCell(activeCell) :\r\n                            firstRow ?\r\n                            this.#firstCell(firstRow) :\r\n                            null;\r\n                        if (topCell) {\r\n                            topCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                topCell.selected ?\r\n                                    this.#removeCellsFromSelection(topCell) :\r\n                                    this.#addCellsToSelection(topCell);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const previousRow = activeRow ?\r\n                            this.#previousRow(activeRow) :\r\n                            this.#firstRow();\r\n                        if (previousRow) {\r\n                            previousRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousRow.selected ?\r\n                                    this.#removeRowsFromSelection(previousRow) :\r\n                                    this.#addRowsToSelection(previousRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const lastRow = activeRow ?? this.#lastRow();\r\n                        const bottomCell = activeCell ?\r\n                            this.#bottomCell(activeCell) :\r\n                            lastRow ?\r\n                            this.#lastCell(lastRow) :\r\n                            null;\r\n                            if (bottomCell) {\r\n                                bottomCell.focus({preventScroll: true});\r\n                                const {shiftKey} = event;\r\n                                if (shiftKey) {\r\n                                    bottomCell.selected ?\r\n                                        this.#removeCellsFromSelection(bottomCell) :\r\n                                        this.#addCellsToSelection(bottomCell);\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"row\": {\r\n                        const nextRow = activeRow ?\r\n                            this.#nextRow(activeRow) :\r\n                            this.#lastRow();\r\n                        if (nextRow) {\r\n                            nextRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextRow.selected ?\r\n                                    this.#removeRowsFromSelection(nextRow) :\r\n                                    this.#addRowsToSelection(nextRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const firstCell = this.#firstCell(activeRow);\r\n                            if (firstCell) {\r\n                                firstCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const firstRow = this.#firstRow();\r\n                        if (firstRow) {\r\n                            firstRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const lastCell = this.#lastCell(activeRow);\r\n                            if (lastCell) {\r\n                                lastCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const lastRow = this.#lastRow();\r\n                        if (lastRow) {\r\n                            lastRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeCell) {\r\n                            this.#setCellsSelection(activeCell);\r\n                            activeCell.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        if (activeRow) {\r\n                            this.#setRowsSelection(activeRow);\r\n                            activeRow.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        this.#clearCellsSelection();\r\n                        this.#setActiveCell(null);\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        this.#clearRowsSelection();\r\n                        this.#setActiveRow(null);\r\n                        break;\r\n                    }\r\n                }\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const {activeCell} = this;\r\n                if (activeCell && relatedTarget !== activeCell) {\r\n                    activeCell.focus();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const {activeRow} = this;\r\n                if (activeRow && relatedTarget !== activeRow) {\r\n                    activeRow.focus();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLEGridCellElement>(\"e-gridcell\");\r\n                if (targetCell) {\r\n                    this.#setActiveCell(targetCell);\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLEGridRowElement>(\"e-gridrow\");\r\n                if (targetRow) {\r\n                    this.#setActiveRow(targetRow);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedRows = <HTMLEGridRowElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridRowElement\r\n            );\r\n            assignedRows.forEach((row_i, i) => {\r\n                row_i.posinset = i;\r\n            });\r\n    }\r\n}\r\n\r\nvar HTMLEGridElement: HTMLEGridElementConstructor = HTMLEGridElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\n\r\nexport { HTMLEGridHeadElement };\r\n\r\ninterface HTMLEGridHeadElementConstructor {\r\n    prototype: HTMLEGridHeadElement;\r\n    new(): HTMLEGridHeadElement;\r\n}\r\n\r\ninterface HTMLEGridHeadElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridhead\": HTMLEGridHeadElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridhead\"\r\n})\r\nclass HTMLEGridHeadElementBase extends HTMLElement implements HTMLEGridHeadElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                        }\r\n                    `\r\n                    ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridHeadElement: HTMLEGridHeadElementConstructor = HTMLEGridHeadElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuBarElement };\r\n\r\ninterface HTMLEMenuBarElementConstructor {\r\n    prototype: HTMLEMenuBarElement;\r\n    new(): HTMLEMenuBarElement;\r\n}\r\n\r\ninterface HTMLEMenuBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    items(): HTMLEMenuItemElement[];\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    expanded: boolean;\r\n    connectedCallback(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menubar\": HTMLEMenuBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menubar\"\r\n})\r\nclass HTMLEMenuBarElementBase extends HTMLElement implements HTMLEMenuBarElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    #activeIndex: number;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const tabindex = this.getAttribute(\"tabindex\");\r\n        this.tabIndex = tabindex !== null ? parseInt(tabindex) : -1;\r\n    }\r\n\r\n    items(): HTMLEMenuItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        ));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        const {activeIndex} = this;\r\n        return this.querySelector<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem:focus-within\"\r\n        ) ?? activeIndex > -1 ? this.items()[activeIndex] ?? null : null;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement && !(node.disabled || node.hidden)) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLEMenuItemElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        const {activeItem, expanded} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.collapse();\r\n        }\r\n        if (item !== null) {\r\n            if (expanded) {\r\n                item.expand();\r\n            }\r\n            this.#activeIndex = this.items().indexOf(item);\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    get #items(): HTMLEMenuItemElement[] {\r\n        return Array.from(\r\n            this.querySelectorAll(\":is(:scope, :scope > e-menuitemgroup) > e-menuitem\")\r\n        );\r\n    }\r\n\r\n    #isClosestMenu(target: Element): boolean {\r\n        return target.closest(\":is(e-menubar, e-menu)\") == this;\r\n    }\r\n\r\n    #nearestItem(target: Element): HTMLEMenuItemElement | null {\r\n        return this.#items.find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n    \r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (!this.contains(<Node | null>relatedTarget)) {\r\n            (activeItem ?? this.firstItem())?.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof Element) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            this.#setActiveItem(nearestItem);\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, relatedTarget} = event;\r\n        if (target instanceof HTMLElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem) {\r\n                nearestItem.collapse();\r\n            }\r\n        }\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.expanded = false;\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {expanded, activeItem} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu && target !== activeItem && expanded) {\r\n                const {menu} = target;\r\n                if (menu) {\r\n                    target.expand();\r\n                    menu.focus({preventScroll: true});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {expanded, activeItem} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu) {\r\n                const isExpanded = !expanded;\r\n                this.expanded = isExpanded;\r\n                if (isExpanded) {\r\n                    if (activeItem && !activeItem.expanded) {\r\n                        activeItem.expand();\r\n                    }\r\n                    const {menu} = target;\r\n                    menu?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    document.body.focus();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded} = this;\r\n        let {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.firstItem() : \r\n                    this.#lastItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    this.expanded = !expanded;\r\n                    if (!expanded) {\r\n                        const firstChildItem = this.#firstChildItem(activeItem);\r\n                        firstChildItem?.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.expanded = false;\r\n                    if (activeItem) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuBarElement: HTMLEMenuBarElementConstructor = HTMLEMenuBarElementBase;","import { CustomElement, AttributeProperty, element, QueryProperty } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuButtonElement };\r\nexport { EMenuButton };\r\n\r\ninterface HTMLEMenuButtonElementConstructor {\r\n    prototype: HTMLEMenuButtonElement;\r\n    new(): HTMLEMenuButtonElement;\r\n}\r\n\r\ninterface HTMLEMenuButtonElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    readonly firstItem: HTMLEMenuItemElement | null;\r\n    name: string;\r\n    disabled: boolean;\r\n    expanded: boolean;\r\n    connectedCallback(): void;\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-menubutton\"\r\n})\r\nclass HTMLEMenuButtonElementBase extends HTMLElement implements HTMLEMenuButtonElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @QueryProperty({selector: \":scope > e-menu[slot=menu]\"})\r\n    readonly menu!: HTMLEMenuElement | null;\r\n    \r\n    @QueryProperty({selector: \":scope > e-menu[slot=menu] e-menuitem\"})\r\n    readonly firstItem!: HTMLEMenuItemElement | null;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const tabindex = this.getAttribute(\"tabindex\");\r\n        this.tabIndex = tabindex !== null ? parseInt(tabindex) : -1;\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {expanded} = this;\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n\r\n    expand(): void {\r\n        const {expanded} = this;\r\n        if (!expanded) {\r\n            this.expanded = true;\r\n            this.#positionMenu();\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {expanded} = this;\r\n        if (expanded) {\r\n            this.expanded = false;\r\n        }\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const overflowX = itemRight + menuWidth - clientWidth;\r\n            const overflowY = itemTop + menuHeight - clientHeight;\r\n            menuStyle.setProperty(\"left\", `${\r\n                overflowX > 0 ?\r\n                scrollX + itemRight - menuWidth :\r\n                scrollX + itemLeft\r\n            }px`);\r\n            menuStyle.setProperty(\"top\", `${\r\n                overflowY > 0 ?\r\n                scrollY + itemTop - menuHeight :\r\n                scrollY + itemBottom\r\n            }px`);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {menu} = this;\r\n        if (menu && !menu.contains(<Node>target)) {\r\n            this.toggle();\r\n            const {expanded} = this;\r\n            if (expanded) {\r\n                menu?.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded} = this;\r\n        switch (key) {\r\n            case \"ArrowDown\":\r\n            case \"Enter\":\r\n                if (!expanded) {\r\n                    this.expand();\r\n                    this.firstItem?.focus({preventScroll: true});\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            case \"Escape\":\r\n                if (expanded) {\r\n                    this.collapse();\r\n                }\r\n                this.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuButtonElement: HTMLEMenuButtonElementConstructor = HTMLEMenuButtonElementBase;\r\n\r\ninterface EMenuButtonConstructor {\r\n    prototype: HTMLEMenuButtonElement;\r\n    new(init: {\r\n        menu: HTMLEMenuElement\r\n    }): HTMLEMenuButtonElement;\r\n}\r\n\r\nvar EMenuButton = <EMenuButtonConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        menu: HTMLEMenuElement\r\n    }) {\r\n        const {menu} = init;\r\n        menu.slot = \"menu\";\r\n        return element(\"e-menubutton\", {\r\n            attributes: {\r\n                tabindex: -1\r\n            },\r\n            children: [menu]\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuButtonElement.prototype,\r\n    }\r\n);","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element, QueryProperty } from \"../../Element\";\r\nimport { HTMLEMenuButtonElement } from \"../menus/MenuButton\";\r\n\r\nexport { HTMLEToolBarItemElement };\r\nexport { EToolBarItem };\r\n\r\ninterface HTMLEToolBarItemElementConstructor {\r\n    prototype: HTMLEToolBarItemElement;\r\n    new(): HTMLEToolBarItemElement;\r\n}\r\n\r\ninterface HTMLEToolBarItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menubutton: HTMLEMenuButtonElement | null;\r\n    readonly select: HTMLESelectElement | null;\r\n    value: string;\r\n    name: string;\r\n    label: string;\r\n    active: boolean;\r\n    pressed: boolean;\r\n    iconed: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritem\": HTMLEToolBarItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar iconPart: HTMLElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritem\"\r\n})\r\nclass HTMLEToolBarItemElementBase extends HTMLElement implements HTMLEToolBarItemElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @QueryProperty({selector: \":scope > e-menubutton[slot=menubutton]\"})\r\n    readonly menubutton!: HTMLEMenuButtonElement | null;\r\n    \r\n    @QueryProperty({selector: \":scope > e-select[slot=select]\"})\r\n    readonly select!: HTMLESelectElement | null;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    pressed!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    iconed!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\"),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"select\"\r\n                }\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menubutton\"\r\n                }\r\n            })\r\n        );\r\n        iconPart = element(\"span\", {\r\n            attributes: {\r\n                part: \"icon\"\r\n            }\r\n        });\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                //...\r\n                break;\r\n            }\r\n            case \"iconed\": {\r\n                const {shadowRoot} = this;\r\n                if (newValue !== null) {\r\n                    shadowRoot.prepend(iconPart.cloneNode(true));\r\n                }\r\n                else {\r\n                    const iconPart = shadowRoot.querySelector<HTMLElement>(\"[part=icon]\");\r\n                    if (iconPart) {\r\n                        iconPart.remove();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemElement: HTMLEToolBarItemElementConstructor = HTMLEToolBarItemElementBase;\r\n\r\ninterface EToolBarItemConstructor {\r\n    prototype: HTMLEToolBarItemElement;\r\n    new(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n    button(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    checkbox(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    radio(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    menubutton(init: {\r\n        name: string;\r\n        label: string;\r\n        menubutton: HTMLEMenuButtonElement;\r\n    }): HTMLEToolBarItemElement;\r\n    select(init: {\r\n        name: string;\r\n        label: string;\r\n        select: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n}\r\n\r\nvar EToolBarItem = <EToolBarItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menubutton, select} = init;\r\n        if (menubutton) {\r\n            menubutton.slot = \"menubutton\";\r\n        }\r\n        if (select) {\r\n            select.slot = \"select\";\r\n        }\r\n        return element(\"e-toolbaritem\", {\r\n            attributes: {\r\n                tabindex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type\r\n            },\r\n            children: menubutton ? [menubutton] : select ? [select] : undefined,\r\n            listeners: {\r\n                click: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEToolBarItemElement.prototype,\r\n        button(init: {\r\n            name: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menubutton(init: {\r\n            name: string;\r\n            label: string;\r\n            menubutton: HTMLEMenuButtonElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"menubutton\"\r\n            });\r\n        },\r\n        select(init: {\r\n            name: string;\r\n            label: string;\r\n            select: HTMLESelectElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"select\"\r\n            });\r\n        },\r\n    }\r\n);","\r\nimport { element, CustomElement, AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEToolBarItemGroupElement };\r\n\r\ninterface HTMLEToolBarItemGroupElementConstructor {\r\n    prototype: HTMLEToolBarItemGroupElement;\r\n    new(): HTMLEToolBarItemGroupElement;\r\n}\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\ninterface HTMLEToolBarItemGroupElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritemgroup\": HTMLEToolBarItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritemgroup\"\r\n})\r\nclass HTMLEToolBarItemGroupElementBase extends HTMLElement implements HTMLEToolBarItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            width: max-content;\r\n                            flex-direction: row;\r\n                        }\r\n\r\n                        /*:host([orientation=\"vertical\"]) {\r\n                            flex-direction: column;\r\n                        }\r\n\r\n                        :host([orientation=\"horizontal\"]) {\r\n                            flex-direction: row;\r\n                        }*/\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const label = this.shadowRoot.querySelector<HTMLLabelElement>(\"[part='label']\");\r\n                if (label) {\r\n                    label.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemGroupElement: HTMLEToolBarItemGroupElementConstructor = HTMLEToolBarItemGroupElementBase;","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEToolBarItemElement } from \"./ToolBarItem\";\r\nimport { HTMLEToolBarItemGroupElement } from \"./ToolBarItemGroup\";\r\n\r\nexport { HTMLEToolBarElement };\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\ninterface HTMLEToolBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly activeItem: HTMLEToolBarItemElement | null;\r\n    items(): HTMLEToolBarItemElement[];\r\n    firstItem(): HTMLEToolBarItemElement | null;\r\n    name: string;\r\n    orientation: ToolBarOrientation;\r\n}\r\n\r\ninterface HTMLEToolbarElementConstructor {\r\n    prototype: HTMLEToolBarElement;\r\n    new(): HTMLEToolBarElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbar\": HTMLEToolBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar wasExpandedOnMouseDown: WeakMap<HTMLEToolBarItemElement, boolean>;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbar\"\r\n})\r\nclass HTMLEToolBarElementBase extends HTMLElement implements HTMLEToolBarElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get activeItem(): HTMLEToolBarItemElement | null {\r\n        return this.querySelector<HTMLEToolBarItemElement>(\r\n            \"e-toolbaritem[active]\"\r\n        );\r\n    }\r\n\r\n    items(): HTMLEToolBarItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEToolBarItemElement>(\r\n            \":is(:scope, :scope > e-toolbaritemgroup) > e-toolbaritem\"\r\n        ));\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    orientation!: ToolBarOrientation;\r\n\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        wasExpandedOnMouseDown = new WeakMap();\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"dblclick\", this.#handleDblClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEToolBarItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEToolBarItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    firstItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEToolBarItemElement | null>walker.previousSibling();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEToolBarItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEToolBarItemElement | null): void {\r\n        const {activeItem} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetItem = (<HTMLElement>target).closest(\"e-toolbaritem\");\r\n        if (targetItem) {\r\n            const {type, pressed} = targetItem;\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    targetItem.pressed = !pressed;\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    targetItem.pressed = true;\r\n                    break;\r\n                }\r\n                case \"menubutton\": {\r\n                    const {menubutton} = targetItem;\r\n                    if (menubutton && !menubutton.contains(<Node>target)) {\r\n                        const force = !wasExpandedOnMouseDown.get(targetItem) ?? true;\r\n                        menubutton.toggle(force);\r\n                        if (force) {\r\n                            menubutton.firstItem?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                case \"select\": {\r\n                    const {select} = targetItem;\r\n                    if (select && !select.contains(<Node>target)) {\r\n                        const force = !wasExpandedOnMouseDown.get(targetItem) ?? true;\r\n                        select.toggle(force);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleDblClickEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (!this.contains(<Node>relatedTarget)) {\r\n            (activeItem ?? this.firstItem())?.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetItem = <HTMLEToolBarItemElement | null>(<HTMLElement>target).closest(\"e-toolbaritem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetItem);\r\n            this.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetItem = (<HTMLElement>target).closest(\"e-toolbaritem\");\r\n        if (targetItem) {\r\n            const {type} = targetItem;\r\n            switch (type) {\r\n                case \"menubutton\": {\r\n                    const {menubutton} = targetItem;\r\n                    if (menubutton && !menubutton.contains(<Node>target)) {\r\n                        wasExpandedOnMouseDown.set(targetItem, menubutton.expanded);\r\n                    }\r\n                    break;\r\n                }\r\n                case \"select\": {\r\n                    const {select} = targetItem;\r\n                    if (select && !select.contains(<Node>target)) {\r\n                        wasExpandedOnMouseDown.set(targetItem, select.expanded);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"menubutton\": {\r\n                            const {menubutton} = activeItem;\r\n                            if (menubutton) {\r\n                                menubutton.expand();\r\n                                menubutton.firstItem?.focus({preventScroll: true});\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"select\": {\r\n                            const {select} = activeItem;\r\n                            if (select) {\r\n                                select.expand();\r\n                            }\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            activeItem.click();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"select\": {\r\n                            activeItem.select?.expand();\r\n                            event.stopPropagation();\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarElement: HTMLEToolbarElementConstructor = HTMLEToolBarElementBase;","import { CustomElement, AttributeProperty } from \"../../Element\";\r\nimport { HTMLETabPanelElement } from \"./TabPanel\";\r\n\r\nexport { HTMLETabElement };\r\n\r\ninterface HTMLETabElementConstructor {\r\n    prototype: HTMLETabElement;\r\n    new(): HTMLETabElement;\r\n}\r\n\r\ninterface HTMLETabElement extends HTMLElement {\r\n    get panel(): HTMLETabPanelElement | null;\r\n    name: string;\r\n    active: boolean;\r\n    disabled: boolean;\r\n    controls: string;\r\n    selected: boolean;\r\n    select(): void;\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tab\": HTMLETabElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tab\"\r\n})\r\nclass HTMLETabElementBase extends HTMLElement implements HTMLETabElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n    \r\n    get panel(): HTMLETabPanelElement | null {\r\n        const {controls} = this;\r\n        return (<Document | ShadowRoot>this.getRootNode()).querySelector<HTMLETabPanelElement>(`e-tabpanel#${controls}`);\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    select(): void {\r\n        this.selected = true;\r\n    }\r\n}\r\n\r\nvar HTMLETabElement: HTMLETabElementConstructor = HTMLETabElementBase;","import { CustomElement } from \"../../Element\";\r\nimport { HTMLETabElement } from \"./Tab\";\r\n\r\nexport { HTMLETabListElement };\r\n\r\ninterface HTMLETabListElementConstructor {\r\n    prototype: HTMLETabListElement;\r\n    new(): HTMLETabListElement;\r\n}\r\n\r\ninterface HTMLETabListElement extends HTMLElement {\r\n    get activeTab(): HTMLETabElement | null;\r\n    get selectedTab(): HTMLETabElement | null;\r\n    get tabs(): HTMLETabElement[];\r\n    firstItem(): HTMLETabElement | null;\r\n    connectedCallback(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tablist\": HTMLETabListElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tablist\"\r\n})\r\nclass HTMLETabListElementBase extends HTMLElement implements HTMLETabListElement {\r\n\r\n    #walker: TreeWalker;\r\n    \r\n    get tabs(): HTMLETabElement[] {\r\n        return Array.from(\r\n            this.querySelectorAll(\"e-tab\")\r\n        );\r\n    }\r\n\r\n    get activeTab(): HTMLETabElement | null {\r\n        return this.querySelector(\r\n            \"e-tab[active]\"\r\n        );\r\n    }\r\n\r\n    get selectedTab(): HTMLETabElement | null {\r\n        return this.querySelector(\r\n            \"e-tab[selected]\"\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex, selectedTab} = this;\r\n        this.tabIndex = tabIndex;\r\n        customElements.upgrade(this);\r\n        const tabToSelect = selectedTab ?? this.firstItem();\r\n        if (tabToSelect) {\r\n            this.#selectTab(tabToSelect);\r\n        }\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLETabElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    firstItem(): HTMLETabElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLETabElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLETabElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLETabElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLETabElement): HTMLETabElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLETabElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLETabElement): HTMLETabElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLETabElement | null>walker.nextNode();\r\n    }\r\n\r\n    #setActiveTab(item: HTMLETabElement | null): void {\r\n        const {activeTab} = this;\r\n        if (activeTab !== null && activeTab !== item) {\r\n            activeTab.active = false;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n        }\r\n    }\r\n\r\n    #selectTab(tab: HTMLETabElement) {\r\n        const {selectedTab} = this;\r\n        if (tab !== selectedTab) {\r\n            tab.selected = true;\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetTab = (<Element>target).closest(\"e-tab\");\r\n        if (targetTab) {\r\n            targetTab.select();\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {selectedTab} = this;\r\n        if (!this.contains(<Node>relatedTarget)) {\r\n            (selectedTab ?? this.firstItem())?.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetTab = <HTMLETabElement | null>(<HTMLElement>target).closest(\"e-tab\");\r\n        if (targetTab) {\r\n            this.#setActiveTab(targetTab);\r\n            this.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeTab} = this;\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousTab = activeTab ?\r\n                    this.#previousItem(activeTab) ?? this.#lastItem() :\r\n                    this.firstItem();\r\n                previousTab?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextTab = activeTab ?\r\n                    this.#nextItem(activeTab) ?? this.firstItem() :\r\n                    this.#lastItem();\r\n                nextTab?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                activeTab?.click();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event) {\r\n        const {target} = event;\r\n        const targetTab = <HTMLETabElement>target;\r\n        if (targetTab.selected) {\r\n            const {tabs} = this;\r\n            tabs.forEach((tab_i) => {\r\n                if (tab_i !== targetTab) {\r\n                    //const {selected} = tab_i;\r\n                    //if (selected) {\r\n                        tab_i.selected = false;\r\n                    //}\r\n                    const {panel} = tab_i;\r\n                    if (panel) {\r\n                        panel.hidden = true;\r\n                    }\r\n                }\r\n            });\r\n            const {panel} = targetTab;\r\n            if (panel) {\r\n                panel.hidden = false;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabListElement: HTMLETabListElementConstructor = HTMLETabListElementBase;","import { CustomElement } from \"../../Element\";\r\nimport { HTMLETabElement } from \"./Tab\";\r\n\r\nexport { HTMLETabPanelElement };\r\n\r\ninterface HTMLETabPanelElementConstructor {\r\n    prototype: HTMLETabPanelElement;\r\n    new(): HTMLETabPanelElement;\r\n}\r\n\r\ninterface HTMLETabPanelElement extends HTMLElement {\r\n    get tab(): HTMLETabElement | null;\r\n    connectedCallback(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tabpanel\": HTMLETabPanelElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tabpanel\"\r\n})\r\nclass HTMLETabPanelElementBase extends HTMLElement implements HTMLETabPanelElement {\r\n\r\n    get tab(): HTMLETabElement | null {\r\n        const {id} = this;\r\n        return (<Document | ShadowRoot>this.getRootNode()).querySelector<HTMLETabElement>(`e-tab[controls=${id}]`);\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n        const {tab} = this;\r\n        if (tab) {\r\n            customElements.upgrade(tab);\r\n            const {selected} = tab;\r\n            this.hidden = !selected;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabPanelElement: HTMLETabPanelElementConstructor = HTMLETabPanelElementBase;\r\n","import { CustomElement, element, AttributeProperty, QueryProperty } from \"../../Element\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeItemElement };\r\n\r\ninterface HTMLETreeItemElementConstructor {\r\n    prototype: HTMLETreeItemElement;\r\n    new(): HTMLETreeItemElement;\r\n}\r\n\r\ninterface HTMLETreeItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly group: HTMLETreeItemGroupElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    expanded: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    level: number;\r\n    type: \"leaf\" | \"parent\";\r\n    toggle(force?: boolean): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitem\": HTMLETreeItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-treeitem\"\r\n})\r\nclass HTMLETreeItemElementBase extends HTMLElement implements HTMLETreeItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    expanded!: boolean;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number, observed: true})\r\n    level!: number;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"leaf\"})\r\n    type!: \"leaf\" | \"parent\";\r\n\r\n    @QueryProperty({selector: \":scope > e-treeitemgroup[slot=group]\"})\r\n    group!: HTMLETreeItemGroupElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"arrow\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"group\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"expanded\": {\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const labelPart = this.shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"level\": {\r\n                this.style.setProperty(\"--level\", `${this.level}`);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {expanded} = this;\r\n        this.expanded = force ?? !expanded;\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemElement: HTMLETreeItemElementConstructor = HTMLETreeItemElementBase;","import { CustomElement } from \"../../Element\";\r\n\r\nexport { HTMLETreeItemGroupElement };\r\n\r\ninterface HTMLETreeItemGroupElementConstructor {\r\n    prototype: HTMLETreeItemGroupElement;\r\n    new(): HTMLETreeItemGroupElement;\r\n}\r\n\r\ninterface HTMLETreeItemGroupElement extends HTMLElement {}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitemgroup\": HTMLETreeItemGroupElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-treeitemgroup\"\r\n})\r\nclass HTMLETreeItemGroupElementBase extends HTMLElement implements HTMLETreeItemGroupElement {\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemGroupElement: HTMLETreeItemGroupElementConstructor = HTMLETreeItemGroupElementBase;","import { CustomElement, AttributeProperty } from \"../../Element\";\r\nimport { HTMLETreeItemElement } from \"./TreeItem\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeElement };\r\n\r\ninterface HTMLETreeElementConstructor {\r\n    prototype: HTMLETreeElement;\r\n    new(): HTMLETreeElement;\r\n}\r\n\r\ninterface HTMLETreeElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLETreeItemElement>;\r\n    readonly activeItem: HTMLETreeItemElement | null;\r\n    readonly dropTargetItem: HTMLETreeItemElement | null;\r\n    firstItem(): HTMLETreeItemElement | null;\r\n    droptarget: boolean;\r\n    name: string;\r\n    selectedItems(): HTMLETreeItemElement[];\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tree\": HTMLETreeElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tree\"\r\n})\r\nclass HTMLETreeElementBase extends HTMLElement implements HTMLETreeElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLETreeItemElement>;\r\n\r\n    get activeItem(): HTMLETreeItemElement | null {\r\n        return this.querySelector<HTMLETreeItemElement>(\r\n            \"e-treeitem[active]\"\r\n        );\r\n    }\r\n\r\n    get dropTargetItem(): HTMLETreeItemElement | null {\r\n        return this.querySelector<HTMLETreeItemElement>(\r\n            \"e-treeitem[droptarget]\"\r\n        );\r\n    }\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.items = this.getElementsByTagName(\"e-treeitem\");\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"dblclick\", this.#handleDblClickEvent.bind(this));\r\n        this.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    selectedItems(): HTMLETreeItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLETreeItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLETreeItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLETreeItemElement, to: HTMLETreeItemElement): HTMLETreeItemElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleItem = this.#nextItem(from);\r\n            while (nextVisibleItem && nextVisibleItem !== to) {\r\n                range.push(nextVisibleItem);\r\n                nextVisibleItem = this.#nextItem(nextVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleItem = this.#previousItem(from);\r\n            while (previousVisibleItem && previousVisibleItem !== to) {\r\n                range.push(previousVisibleItem);\r\n                previousVisibleItem = this.#previousItem(previousVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLETreeItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((item_i) => {\r\n            item_i.selected = false;\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLETreeItemElement | null): void {\r\n        const {activeItem} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = item;\r\n            item.active = true;\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n    \r\n    #setDropTargetItem(item: HTMLETreeItemElement | null): void {\r\n        const {dropTargetItem} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n        }\r\n    }\r\n\r\n    firstItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousSibling = <HTMLETreeItemElement | null>walker.previousSibling();\r\n        return previousSibling ?\r\n            this.#deepestItem(previousSibling) :\r\n            <HTMLETreeItemElement | null>walker.parentNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const {type, expanded} = item;\r\n        return <HTMLETreeItemElement | null>(\r\n            type === \"leaf\" ?\r\n                walker.nextNode() :\r\n                expanded ?\r\n                    walker.nextNode() :\r\n                    walker.nextSibling() ??\r\n                    (walker.parentNode(), walker.nextSibling())\r\n        );\r\n    }\r\n\r\n    #deepestItem(item: HTMLETreeItemElement): HTMLETreeItemElement {\r\n        if (item.expanded) {\r\n            const walker = this.#walker;\r\n            const lastItem = <HTMLETreeItemElement>walker.lastChild();\r\n            if (lastItem) {\r\n                return this.#deepestItem(lastItem);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, shiftKey, ctrlKey} = event;\r\n        const targetItem = <HTMLETreeItemElement | null>(<HTMLElement>target).closest(\"e-treeitem\");\r\n        if (targetItem) {\r\n            if (!shiftKey && !ctrlKey) {\r\n                this.#setSelection(targetItem);\r\n                const {type} = targetItem;\r\n                if (type == \"parent\") {\r\n                    targetItem.toggle();\r\n                }\r\n            }\r\n        }\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleDblClickEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        const targetItem = <HTMLETreeItemElement | null>(<HTMLElement>target).closest(\"e-treeitem\");\r\n        if (targetItem) {\r\n            const {type} = targetItem;\r\n            if (type == \"parent\") {\r\n                targetItem.toggle(true);\r\n            }\r\n            this.#setDropTargetItem(targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!this.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        const {root} = walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? root, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? root, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(\r\n                                firstItem,\r\n                                this.#deepestItem(lastItem)\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    if (activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                    else {\r\n                        const walker = this.#walker;\r\n                        const parentItem = <HTMLETreeItemElement>walker.parentNode();\r\n                        if (parentItem) {\r\n                            parentItem.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    if (!activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.#setActiveItem(null);\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (!this.contains(<Node | null>relatedTarget)) {\r\n            (activeItem ?? this.firstItem())?.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetItem = <HTMLETreeItemElement | null>(<HTMLElement>target).closest(\"e-treeitem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetItem);\r\n            this.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node | null>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey, button} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const {selected} = target;\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey && !selected) {\r\n                        this.#setSelection(target);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            target.blur();\r\n                        }\r\n                        (!selected) ?\r\n                            this.#addToSelection(target) :\r\n                            this.#removeFromSelection(target);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const {activeItem} = this\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                target\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(target);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETreeElement: HTMLETreeElementConstructor = HTMLETreeElementBase;","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEToolBarElement } from \"../toolbars/ToolBar\";\r\n\r\nexport { HTMLEListItemElement };\r\n\r\ninterface HTMLEListItemElementConstructor {\r\n    prototype: HTMLEListItemElement;\r\n    new(): HTMLEListItemElement;\r\n}\r\n\r\ninterface HTMLEListItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly badge: HTMLSpanElement | null;\r\n    readonly toolbar: HTMLEToolBarElement | null;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitem\": HTMLEListItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-listitem\"\r\n})\r\nclass HTMLEListItemElementBase extends HTMLElement implements HTMLEListItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    get badge(): HTMLElement | null {\r\n        return this.#badge;\r\n    }\r\n\r\n    get toolbar(): HTMLEToolBarElement | null {\r\n        return this.#toolbar;\r\n    }\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    #badge: HTMLElement | null;\r\n    #toolbar: HTMLEToolBarElement | null;\r\n    #menu: HTMLEMenuElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#badge = null;\r\n        this.#menu = null;\r\n        this.#toolbar = null;\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this))\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"toolbar\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#toolbar = element instanceof HTMLEToolBarElement ? element : null;\r\n                break;\r\n            }\r\n            case \"badge\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#badge = element instanceof HTMLSpanElement ? element : null;\r\n                break;\r\n            }\r\n            case \"menu\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#menu = element instanceof HTMLEMenuElement ? element : null;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEListItemElement: HTMLEListItemElementConstructor = HTMLEListItemElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEListItemElement } from \"./ListItem\";\r\n\r\nexport { HTMLEListItemGroupElement };\r\n\r\ninterface HTMLEListItemGroupElementConstructor {\r\n    prototype: HTMLEListItemGroupElement;\r\n    new(): HTMLEListItemGroupElement;\r\n}\r\n\r\ninterface HTMLEListItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitemgroup\": HTMLEListItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-listitemgroup\"\r\n})\r\nclass HTMLEListItemGroupElementBase extends HTMLElement implements HTMLEListItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEListItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEListItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEListItemGroupElement: HTMLEListItemGroupElementConstructor = HTMLEListItemGroupElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEListItemElement } from \"./ListItem\";\r\nimport { HTMLEListItemGroupElement } from \"./ListItemGroup\";\r\n\r\nexport { HTMLEListElement };\r\n\r\ninterface HTMLEListElementConstructor {\r\n    prototype: HTMLEListElement;\r\n    new(): HTMLEListElement;\r\n}\r\n\r\ninterface HTMLEListElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEListItemElement>;\r\n    readonly activeItem: HTMLEListItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    droptarget: boolean;\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    selectedItems(): HTMLEListItemElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-list\": HTMLEListElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-list\"\r\n})\r\nclass HTMLEListElementBase extends HTMLElement implements HTMLEListElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEListItemElement>;\r\n\r\n    get dropTargetItem(): HTMLEListItemElement | null {\r\n        return this.items[this.#dropTargetIndex] ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    #dropTargetIndex: number;\r\n    #activeIndex: number;\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        this.#dropTargetIndex = -1;\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.items = this.getElementsByTagName(\"e-listitem\");\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEListItemElement | null {\r\n        return this.items[this.activeIndex] ?? null;\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    selectedItems(): HTMLEListItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.#firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEListItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEListItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLEListItemElement, to: HTMLEListItemElement): HTMLEListItemElement[] {\r\n        const items = Array.from(this.items);\r\n        const fromIndex = items.indexOf(from);\r\n        const toIndex = items.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return items.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        selectedItems.forEach((item_i) => {\r\n            if (item_i.selected) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEListItemElement | null): void {\r\n        const {activeItem, items} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n            item.tabIndex = 0;\r\n            this.#activeIndex = Array.from(items).indexOf(item);\r\n        }\r\n    }\r\n\r\n    #setDropTargetItem(item: HTMLEListItemElement | null): void {\r\n        const {dropTargetItem, items} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n            this.#dropTargetIndex = Array.from(items).indexOf(item);\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n            this.#dropTargetIndex = -1;\r\n        }\r\n    }\r\n\r\n    #firstItem(): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLEListItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLEListItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEListItemElement): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEListItemElement | null>walker.previousNode();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEListItemElement): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const nextItem = <HTMLEListItemElement | null>walker.nextNode();\r\n        return nextItem;\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent) {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n            target.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey} = event;\r\n        const selectedItems = this.selectedItems();\r\n        if (target instanceof HTMLEListItemElement) {\r\n            if (!shiftKey && !ctrlKey) {\r\n                this.#setSelection(target);\r\n            }\r\n            else if (ctrlKey) {\r\n                (!target.selected) ?\r\n                    this.#addToSelection(target) :\r\n                    this.#removeFromSelection(target);\r\n                event.stopPropagation();\r\n            }\r\n            else if (shiftKey) {\r\n                const lastSelectedItem = selectedItems[selectedItems.length - 1];\r\n                if (lastSelectedItem) {\r\n                    const range = this.#getItemsRange(\r\n                        lastSelectedItem,\r\n                        target\r\n                    );\r\n                    if (range) {\r\n                        if (selectedItems.includes(target)) {\r\n                            this.#removeFromSelection(...range);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(...range);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.#setSelection(target);\r\n                }\r\n                event.stopPropagation();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            this.#setDropTargetItem(target);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n    \r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n        const relatedTargetHost =\r\n            relatedTargetRoot instanceof ShadowRoot ?\r\n            relatedTargetRoot.host :\r\n            relatedTarget;\r\n        if (!this.contains(<Node>relatedTargetHost)) {\r\n            this.#setDropTargetItem(null);\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    const walker = this.#walker;\r\n                    const {root} = walker;\r\n                    const firstItem = <HTMLEListItemElement>(\r\n                        walker.currentNode = walker.parentNode() ?? root, walker.firstChild()\r\n                    );\r\n                    const lastItem = <HTMLEListItemElement>(\r\n                        walker.currentNode = walker.parentNode() ?? root, walker.lastChild()\r\n                    );\r\n                    const range = this.#getItemsRange(\r\n                        firstItem,\r\n                        lastItem\r\n                    );\r\n                    if (range) {\r\n                        this.#setSelection(...range);\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                const {activeItem} = this;\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.#setActiveItem(null);\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            this.#setActiveItem(target);\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (!this.#onSelection) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEListItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEListItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEListElement: HTMLEListElementConstructor = HTMLEListElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEDraggableElement };\r\n\r\ninterface HTMLEDraggableElementConstructor {\r\n    prototype: HTMLEDraggableElement;\r\n    new(): HTMLEDraggableElement;\r\n}\r\n\r\ninterface HTMLEDraggableElement extends HTMLElement {\r\n    readonly referee: this | null;\r\n    readonly references: this[];\r\n    selected: boolean;\r\n    dragged: boolean;\r\n    dragovered: boolean;\r\n\r\n    connectedCallback(): void;\r\n    disconnectedCallback(): void;\r\n    getReference(): this;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-draggable\": HTMLEDraggableElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-draggable\"\r\n})\r\nclass HTMLEDraggableElementBase extends HTMLElement implements HTMLEDraggableElement {\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    dragovered!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    dragged!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    #referee: this | null;\r\n    readonly references: this[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            padding: 3px 4px;\r\n                            cursor: pointer;\r\n                            white-space: nowrap;\r\n                            border-radius: 4px;\r\n                            border: 1px solid black;\r\n                            user-select: none;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                            color: lightgray;\r\n                            border-color: lightgray;\r\n                        }\r\n        \r\n                        :host([selected]:active) {\r\n                            cursor: grabbing;\r\n                        }\r\n                        \r\n                        :host([selected]) {\r\n                            cursor: grab;\r\n                            font-weight: bold;\r\n                            outline: 1px auto black;\r\n                        }\r\n        \r\n                        :host([dragovered]) {\r\n                            border-style: dotted;\r\n                        }\r\n                        \r\n                        [part=\"container\"] {\r\n                            display: flex;\r\n                            align-items: center;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"container\"\r\n                },\r\n                children: [\r\n                    element(\"slot\", {\r\n                        children: [\r\n                            \"&nbsp;\"\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.references = [];\r\n        this.#referee = null;\r\n    }\r\n\r\n    get referee(): this | null {\r\n        return this.#referee;\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n        this.draggable = true;\r\n    }\r\n\r\n    disconnectedCallback(): void {\r\n        if (this.referee) {\r\n            const thisRefIndex = this.referee.references.indexOf(this);\r\n            if (thisRefIndex > -1) {\r\n                this.referee.references.splice(thisRefIndex, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    getReference(): this {\r\n        const reference = <this>this.cloneNode(true);\r\n        reference.#referee = this;\r\n        return reference;\r\n    }\r\n}\r\n\r\nvar HTMLEDraggableElement: HTMLEDraggableElementConstructor = HTMLEDraggableElementBase","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\n\r\nexport { HTMLEDragzoneElement };\r\n\r\ninterface HTMLEDragzoneElementConstructor {\r\n    prototype: HTMLEDragzoneElement;\r\n    new(): HTMLEDragzoneElement\r\n}\r\n\r\ninterface HTMLEDragzoneElement extends HTMLElement {\r\n    readonly draggables: HTMLEDraggableElement[];\r\n    readonly selectedDraggables: HTMLEDraggableElement[];\r\n    disabled: boolean;\r\n    selectDraggable(draggable: HTMLEDraggableElement): void;\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void;\r\n    clearSelection(): void;\r\n    connectedCallback(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dragzone\": HTMLEDragzoneElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dragzone\"\r\n})\r\nclass HTMLEDragzoneElementBase extends HTMLElement implements HTMLEDragzoneElement {\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    #draggables: HTMLEDraggableElement[];\r\n    #selectedDraggables: HTMLEDraggableElement[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                        }\r\n        \r\n                        [part=\"container\"] {\r\n                            position: relative;\r\n                            display: flex;\r\n                            flex-direction: column;\r\n                            padding-left: 2px;\r\n                            padding-right: 2px;\r\n                        }\r\n        \r\n                        ::slotted(*) {\r\n                            margin-top: 2px;\r\n                            margin-bottom: 2px;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"container\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n        this.#draggables = [];\r\n        this.#selectedDraggables = [];\r\n    }\r\n\r\n    get draggables(): HTMLEDraggableElement[] {\r\n        return this.#draggables;\r\n    }\r\n\r\n    get selectedDraggables(): HTMLEDraggableElement[] {\r\n        return this.#selectedDraggables;\r\n    }\r\n\r\n    selectDraggable(draggable: HTMLEDraggableElement): void {\r\n        if (!this.selectedDraggables.includes(draggable)) {\r\n            this.selectedDraggables.push(draggable);\r\n        }\r\n        if (!draggable.selected) {\r\n            draggable.selected = true;\r\n        }\r\n    }\r\n\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void {\r\n        const index = this.selectedDraggables.indexOf(draggable);\r\n        if (index > -1) {\r\n            if (draggable.selected) {\r\n                draggable.selected = false;\r\n            }\r\n            this.selectedDraggables.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.selectedDraggables.forEach((draggable) => {\r\n            draggable.selected = false;\r\n        });\r\n        this.#selectedDraggables = [];\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const draggables = slot.assignedElements().filter(\r\n                    elem => elem instanceof HTMLEDraggableElement\r\n                ) as HTMLEDraggableElement[];\r\n                this.#draggables = draggables;\r\n                this.draggables.forEach((draggable) => {\r\n                    draggable.draggable = true;\r\n                });\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Escape\":\r\n                    this.clearSelection();\r\n                    this.focus();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragstart\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                this.selectedDraggables.forEach((thisSelectedDraggable) => {\r\n                    thisSelectedDraggable.dragged = true;\r\n                });\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", this.id);\r\n                }\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event) => {\r\n            const dataTransfer = event.dataTransfer;\r\n            if (dataTransfer) {\r\n                dataTransfer.dropEffect = \"none\";\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"dragend\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                const thisDraggedDraggables = this.draggables.filter(draggable => draggable.dragged);\r\n                thisDraggedDraggables.forEach((thisDraggedDraggable) => {\r\n                    thisDraggedDraggable.dragged = false;\r\n                });\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            if (!this.contains(relatedTarget)) {\r\n                this.clearSelection();\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button == 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        if (!target.selected) {\r\n                            this.clearSelection();\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                    else if (event.ctrlKey) {\r\n                        (!target.selected) ?\r\n                            this.selectDraggable(target) :\r\n                            this.unselectDraggable(target);\r\n                    }\r\n                    else if (event.shiftKey) {\r\n                        if (this.selectedDraggables.length > 0) {\r\n                            const targetIndex = this.draggables.indexOf(target);\r\n                            const firstIndex = this.draggables.indexOf(this.selectedDraggables[0]);\r\n                            const direction = Math.sign(targetIndex - firstIndex);\r\n                            const fromIndex = (direction > 0) ? 0 : this.draggables.length - 1;\r\n                            const toIndex = (direction > 0) ? this.draggables.length - 1 : 0;\r\n                            const startRangeIndex = (direction > 0) ? firstIndex : targetIndex;\r\n                            const endRangeIndex = (direction > 0) ? targetIndex : firstIndex;\r\n                            for (let index = fromIndex; index !== (toIndex + direction); index += direction) {\r\n                                (index >= startRangeIndex && index <= endRangeIndex) ? \r\n                                    this.selectDraggable(this.draggables[index]) :\r\n                                    this.unselectDraggable(this.draggables[index]);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.clearSelection();\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mouseup\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button == 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        this.draggables.forEach((thisDraggable) => {\r\n                            if (thisDraggable !== target) {\r\n                                this.unselectDraggable(thisDraggable);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEDragzoneElement: HTMLEDragzoneElementConstructor = HTMLEDragzoneElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\nimport { HTMLEDragzoneElement } from \"./Dragzone\";\r\n\r\nexport { HTMLEDropzoneElement };\r\nexport { EDataChangeEvent };\r\n\r\ninterface HTMLEDropzoneElementConstructor {\r\n    prototype: HTMLEDropzoneElement;\r\n    new(): HTMLEDropzoneElement;\r\n}\r\n\r\ninterface HTMLEDropzoneElement extends HTMLEDragzoneElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    dragovered: DropzoneDragoveredType | null;\r\n    name: string;\r\n    multiple: boolean;\r\n    placeholder: string;\r\n\r\n    droptest: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => void) | null;\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): void;\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean): void;\r\n\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ntype DropzoneDragoveredType = \"self\" | \"draggable\" | \"appendarea\";\r\n\r\ntype EDataChangeEvent = CustomEvent<{\r\n    action: \"insert\" | \"remove\";\r\n    draggables: HTMLEDraggableElement[];\r\n    position: number;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dropzone\": HTMLEDropzoneElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"e_datachange\": EDataChangeEvent,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dropzone\"\r\n})\r\nclass HTMLEDropzoneElementBase extends HTMLEDragzoneElement implements HTMLEDropzoneElement {\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    dragovered!: DropzoneDragoveredType | null;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    placeholder!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    multiple!: boolean;\r\n\r\n    droptest!: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => boolean) | null;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.shadowRoot!.querySelector(\"style\")!.append(/*css*/`\r\n            :host {\r\n                border: 1px dashed gray;\r\n            }\r\n\r\n            :host(:not([multiple]):not(:empty)) [part=\"appendarea\"],\r\n            :host(:not(:empty):not([dragovered])) [part=\"appendarea\"] {\r\n                display: none !important;\r\n            }\r\n\r\n            [part=\"appendarea\"] {\r\n                display: block;\r\n                margin: 2px;\r\n                border-radius: 4px;\r\n                border: 1px dotted black;\r\n            }\r\n\r\n            :host(:not([dragovered=\"appendarea\"])) [part=\"appendarea\"] {\r\n                border-color: transparent;\r\n            }\r\n            \r\n            [part=\"placeholder\"] {\r\n                display: inline-block;\r\n                color: grey;\r\n                pointer-events: none;\r\n                user-select: none;\r\n            }\r\n        `);\r\n\r\n        this.shadowRoot.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"appendarea\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"placeholder\"\r\n                        },\r\n                        children: [\r\n                            \"&nbsp;\"\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.droptest = null;\r\n    }\r\n    \r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        const appendAreaPart = this.shadowRoot!.querySelector<HTMLDivElement>(\"[part='appendarea']\");\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Delete\":\r\n                    if (this == event.target) {\r\n                        this.removeDraggables();\r\n                    }\r\n                    else {\r\n                        this.removeDraggables(draggable => draggable.selected);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragover\", (event: DragEvent) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragover\", (event) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragenter\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                target.dragovered = true;\r\n                this.dragovered = \"draggable\";\r\n            }\r\n            else {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragenter\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"appendarea\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event: DragEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                if (target == this) {\r\n                    if (appendAreaPart) {\r\n                        this.dragovered = \"self\";\r\n                    }\r\n                    if (!this.draggables.includes(relatedTarget)) {\r\n                        this.dragovered = null;\r\n                    }\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                }\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragleave\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n        \r\n        this.addEventListener(\"drop\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                let dropIndex = this.draggables.length;\r\n                if (target == this) {\r\n                    this.dragovered = null;\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                    dropIndex = this.draggables.indexOf(target);\r\n                }\r\n\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    const dragzoneId = dataTransfer.getData(\"text/plain\");\r\n                    const dragzone = document.getElementById(dragzoneId);\r\n                    if (dragzone instanceof HTMLEDragzoneElement) {\r\n                        const selectedDraggables = dragzone.selectedDraggables;\r\n                        if (selectedDraggables) {\r\n                            selectedDraggables.forEach((selectedDraggable) => {\r\n                                selectedDraggable.dragged = false;\r\n                            });\r\n                            if (dragzone instanceof HTMLEDropzoneElement) {\r\n                                dragzone.removeDraggables((draggable) => selectedDraggables.includes(draggable));\r\n                            }\r\n                            dragzone.clearSelection();\r\n                            this.addDraggables(selectedDraggables, dropIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.dragovered = null;\r\n            event.preventDefault();\r\n        });\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"placeholder\": {\r\n                const placeholderPart = this.shadowRoot.querySelector(\"[part='placeholder']\");\r\n                if (placeholderPart) {\r\n                    placeholderPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): HTMLEDraggableElement[] | null {\r\n        if (draggables.length > 0) {\r\n            let dataTransferSuccess = true;\r\n            if (this.droptest) {\r\n                dataTransferSuccess = this.droptest(this, draggables);\r\n            }\r\n            \r\n            let newDraggables: HTMLEDraggableElement[] = [];\r\n            let insertionPosition = -1;\r\n            if (dataTransferSuccess) {\r\n                if (this.multiple) {\r\n                    draggables.forEach((draggable) => {\r\n                        let newDraggable = draggable.getReference();\r\n                        if (position > -1 && position < this.draggables.length) {\r\n                            this.draggables[position].insertAdjacentElement(\"beforebegin\", newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? position : insertionPosition;\r\n                        }\r\n                        else {\r\n                            this.appendChild(newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? this.draggables.length - 1 : insertionPosition;\r\n                        }\r\n                        newDraggables.push(newDraggable);\r\n                    });\r\n                }\r\n                else {\r\n                    let newDraggable = draggables[0].getReference();\r\n                    if (this.draggables.length > 0) {\r\n                        this.replaceChild(newDraggable, this.draggables[0]);\r\n                    }\r\n                    else {\r\n                        this.appendChild(newDraggable);\r\n                    }\r\n                    newDraggables.push(newDraggable);\r\n                    insertionPosition = 0;\r\n                }\r\n            }\r\n            \r\n            const slot = this.shadowRoot?.querySelector(\"slot\");\r\n            if (slot) {\r\n                slot.addEventListener(\"slotchange\", () => {\r\n                    this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                        bubbles: true,\r\n                        detail: {\r\n                            action: \"insert\",\r\n                            draggables: newDraggables,\r\n                            position: insertionPosition\r\n                        }\r\n                    }));\r\n                }, {once: true});\r\n            }\r\n            return newDraggables;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean = () => true) {\r\n        let toRemove = this.draggables.filter(\r\n            (value: HTMLEDraggableElement, index: number) => {\r\n                return predicate(value, index);\r\n            }\r\n        );\r\n        let atPosition = this.draggables.indexOf(toRemove[0]);\r\n        toRemove.forEach((draggable) => {\r\n            draggable.remove(); \r\n        });\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                    bubbles: true,\r\n                    detail: {\r\n                        action: \"remove\",\r\n                        draggables: toRemove,\r\n                        position: atPosition\r\n                    }\r\n                }));\r\n            }, {once: true});\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEDropzoneElement: HTMLEDropzoneElementConstructor = HTMLEDropzoneElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEDialogElement };\r\n\r\ninterface HTMLEDialogElementConstructor {\r\n    prototype: HTMLEDialogElement;\r\n    new(): HTMLEDialogElement;\r\n}\r\n\r\ntype DialogElementType = \"confirm\" | \"alert\";\r\n\r\ninterface HTMLEDialogElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: DialogElementType;\r\n    open(): void;\r\n    close(): void;\r\n    cancel(): void;\r\n    confirm(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dialog\": HTMLEDialogElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"open\": Event,\r\n        \"close\": Event,\r\n        \"cancel\": Event,\r\n        \"confirm\": Event,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dialog\"\r\n})\r\nclass HTMLEDialogElementBase extends HTMLElement implements HTMLEDialogElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: DialogElementType;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            padding: 6px;\r\n                            background-color: white;\r\n        \r\n                            -webkit-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            -moz-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                        }\r\n        \r\n                        button {\r\n                            cursor: pointer;\r\n                        }\r\n        \r\n                        [part=\"actions\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part=\"header\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part=\"button\"]:not(:first-child) {\r\n                            margin-left: 4px;\r\n                        }\r\n        \r\n                        :host([type=\"confirm\"]) [part=\"ok-button\"] {\r\n                            display: none !important;\r\n                        }\r\n        \r\n                        :host([type=\"alert\"]) [part=\"cancel-button\"],\r\n                        :host([type=\"alert\"]) [part=\"confirm-button\"] {\r\n                            display: none !important;\r\n                        }\r\n                    `\r\n                    ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"header\"\r\n                },\r\n                children: [\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button close-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"x\"\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"hr\", {\r\n                attributes: {\r\n                    part: \"separator\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"body\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"hr\", {\r\n                attributes: {\r\n                    part: \"separator\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"actions\",\r\n                },\r\n                children: [\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button cancel-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"Cancel\"\r\n                        ]\r\n                    }),\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button confirm-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"Confirm\"\r\n                        ]\r\n                    }),\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button ok-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"OK\"\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n        );\r\n    }\r\n\r\n    connectedCallback() {\r\n        this.shadowRoot.addEventListener(\"click\", this);\r\n    }\r\n\r\n    handleEvent(event: Event) {\r\n        const {type, target} = event;\r\n        switch (type) {\r\n            case \"click\":\r\n                const {part} = <Element>target;\r\n                if (part.contains(\"close-button\") || part.contains(\"cancel-button\")) {\r\n                    this.cancel();\r\n                }\r\n                else if (part.contains(\"confirm-button\") || part.contains(\"ok-button\")) {\r\n                    this.confirm();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    open(): void {\r\n        this.dispatchEvent(new CustomEvent(\"open\", {bubbles: true}));\r\n    }\r\n\r\n    close(): void {\r\n        this.dispatchEvent(new CustomEvent(\"close\", {bubbles: true}));\r\n    }\r\n\r\n    cancel(): void {\r\n        this.dispatchEvent(new CustomEvent(\"cancel\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n\r\n    confirm(): void {\r\n        this.dispatchEvent(new CustomEvent(\"confirm\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n}\r\n\r\nvar HTMLEDialogElement: HTMLEDialogElementConstructor = HTMLEDialogElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionElement };\r\n\r\ninterface HTMLEOptionElementConstructor {\r\n    prototype: HTMLEOptionElement;\r\n    new(): HTMLEOptionElement;\r\n}\r\n\r\ninterface HTMLEOptionElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n    name: string;\r\n    value: string;\r\n    label: string;\r\n    disabled: boolean;\r\n    selected: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-option\": HTMLEOptionElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-option\"\r\n})\r\nclass HTMLEOptionElementBase extends HTMLElement implements HTMLEOptionElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n    \r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"label\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const internals = this.attachInternals();\r\n        internals.role = \"option\";\r\n        this.internals = internals;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector<HTMLElement>(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"selected\": {\r\n                const {internals, selected} = this;\r\n                internals.ariaSelected = String(selected);\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEOptionElement: HTMLEOptionElementConstructor = HTMLEOptionElementBase;","import { CustomElement, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionGroupElement };\r\n\r\ninterface HTMLEOptionGroupElementConstructor {\r\n    prototype: HTMLEOptionGroupElement;\r\n    new(): HTMLEOptionGroupElement;\r\n}\r\n\r\ninterface HTMLEOptionGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-optiongroup\": HTMLEOptionGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-optiongroup\"\r\n})\r\nclass HTMLEOptionGroupElementBase extends HTMLElement implements HTMLEOptionGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n}\r\n\r\nvar HTMLEOptionGroupElement: HTMLEOptionGroupElementConstructor = HTMLEOptionGroupElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEOptionElement } from \"./Option\";\r\nimport { HTMLEOptionGroupElement } from \"./OptionGroup\";\r\n\r\nexport { HTMLESelectElement };\r\n\r\ninterface HTMLESelectElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n    get options(): HTMLEOptionElement[];\r\n    get activeOption(): HTMLEOptionElement | null;\r\n    get selectedOption(): HTMLEOptionElement | null;\r\n    name: string;\r\n    value: string;\r\n    expanded: boolean;\r\n    expand(): void;\r\n    collapse(): void;\r\n    toggle(force?: boolean): void;\r\n}\r\n\r\ninterface HTMLESelectElementConstructor {\r\n    prototype: HTMLESelectElement;\r\n    new(): HTMLESelectElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-select\": HTMLESelectElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar mutationObserver: MutationObserver;\r\n\r\n@CustomElement({\r\n    name: \"e-select\"\r\n})\r\nclass HTMLESelectElementBase extends HTMLElement implements HTMLESelectElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n\r\n    static get formAssociated(): boolean {\r\n        return true;\r\n    }\r\n\r\n    get options(): HTMLEOptionElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEOptionElement>(\r\n            \"e-option\"\r\n        ));\r\n    }\r\n\r\n    get activeOption(): HTMLEOptionElement | null {\r\n        return this.querySelector(\"e-option:focus-within\") ?? null;\r\n    }\r\n\r\n    get selectedOption(): HTMLEOptionElement | null {\r\n        return this.querySelector(\"e-option[selected]\") ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"select\", observed: true})\r\n    type!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    #walker: TreeWalker;\r\n    #wasExpandedOnMouseDown: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"output\", {\r\n                        attributes: {\r\n                            part: \"value\"\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"box\"\r\n                },\r\n                children: element(\"slot\")\r\n            })\r\n        );\r\n        mutationObserver = new MutationObserver(\r\n            (mutationsList: MutationRecord[]) => {\r\n                mutationsList.forEach((mutation: MutationRecord) => {\r\n                    const {target} = mutation;\r\n                    const select = <HTMLESelectElementBase>target;\r\n                    const {selectedOption, value, options} = select;\r\n                    if (!selectedOption) {\r\n                        const optionToSelect = value ? options.find(\r\n                            option_i => option_i.value === value\r\n                        ) : select.#firstOption();\r\n                        if (optionToSelect) {\r\n                            optionToSelect.selected = true;\r\n                        }\r\n                        else {\r\n                            select.#setSelectedOption(null);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        )\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const internals = this.attachInternals();\r\n        internals.role = \"combobox\";\r\n        this.internals = internals;\r\n        this.#wasExpandedOnMouseDown = false;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        mutationObserver.observe(\r\n            this, {\r\n                childList: true,\r\n                subtree: true\r\n            }\r\n        );\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {options, selectedOption, value} = this;\r\n        const tabindex = this.getAttribute(\"tabindex\");\r\n        this.tabIndex = tabindex !== null ? parseInt(tabindex) : 0;\r\n        customElements.upgrade(this);\r\n        const optionToSelect = selectedOption ?? (\r\n            value ? options.find(\r\n                option_i => option_i.value === value\r\n            ) : null\r\n        ) ?? this.#firstOption();\r\n        if (optionToSelect) {\r\n            if (optionToSelect === selectedOption) {\r\n                this.#setSelectedOption(selectedOption);\r\n            }\r\n            else {\r\n                this.#selectOption(optionToSelect);\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {expanded} = this;\r\n        if (!expanded) {\r\n            this.expanded = true;\r\n            this.#positionBox();\r\n            const {selectedOption} = this;\r\n            if (selectedOption) {\r\n                selectedOption.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {expanded} = this;\r\n        if (expanded) {\r\n            this.expanded = false;\r\n            this.focus();\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {expanded} = this;\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n    \r\n    #value(): HTMLElement {\r\n        return this.shadowRoot.querySelector<HTMLElement>(\"[part=value]\")!;\r\n    }\r\n\r\n    #box(): HTMLElement {\r\n        return this.shadowRoot.querySelector<HTMLElement>(\"[part=box]\")!;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEOptionElement && !node.disabled && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        else if (node instanceof HTMLEOptionGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEOptionElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEOptionElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousOption(option: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLEOptionElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextOption(option: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLEOptionElement | null>walker.nextNode();\r\n    }\r\n\r\n    #selectOption(option: HTMLEOptionElement) {\r\n        const {selectedOption} = this;\r\n        if (option !== selectedOption) {\r\n            option.selected = true;\r\n        }\r\n    }\r\n    \r\n    #setSelectedOption(option: HTMLEOptionElement | null) {\r\n        const {label, value} = option ?? {\r\n            label: \"\",\r\n            value: \"\"\r\n        };\r\n        const {internals} = this;\r\n        this.#value().textContent = label;\r\n        internals.setFormValue(value);\r\n    }\r\n\r\n    #positionBox(): void {\r\n        const box = this.#box()\r\n        const {style: optionsStyle} = box;\r\n        const {bottom, left} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        optionsStyle.setProperty(\"top\", `${bottom + scrollY}px`);\r\n        optionsStyle.setProperty(\"left\", `${left + scrollX}px`);\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const wasExpandedOnMouseDown = this.#wasExpandedOnMouseDown;\r\n        if (!wasExpandedOnMouseDown) {\r\n            const {selectedOption} = this;\r\n            this.expand();\r\n            (selectedOption ?? this.#firstOption() ?? this).focus({preventScroll: true});\r\n        }\r\n        else {\r\n            this.collapse();\r\n            const targetOption = (<HTMLElement>target).closest<HTMLEOptionElement>(\"e-option\");\r\n            if (targetOption) {\r\n                this.#selectOption(targetOption);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin || this === relatedTarget) {\r\n            this.collapse();\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(): void {\r\n        const {expanded} = this;\r\n        this.#wasExpandedOnMouseDown = expanded;\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetOption = (<Element>target).closest<HTMLEOptionElement>(\"e-option\");\r\n        if (targetOption) {\r\n            targetOption.focus({preventScroll: true});\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded, activeOption, selectedOption} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                if (expanded) {\r\n                    const previousOption = activeOption ?\r\n                        this.#previousOption(activeOption) :\r\n                        this.#firstOption();\r\n                    if (previousOption) {\r\n                        previousOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const previousOption = selectedOption ?\r\n                        this.#previousOption(selectedOption) :\r\n                        this.#firstOption();\r\n                    if (previousOption) {\r\n                        this.#selectOption(previousOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (expanded) {\r\n                    const nextOption = activeOption ?\r\n                        this.#nextOption(activeOption) :\r\n                        this.#lastOption();\r\n                    if (nextOption) {\r\n                        nextOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const nextOption = selectedOption ?\r\n                        this.#nextOption(selectedOption) :\r\n                        this.#lastOption();\r\n                    if (nextOption) {\r\n                        this.#selectOption(nextOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstOption = this.#firstOption();\r\n                if (firstOption) {\r\n                    if (expanded) {\r\n                        firstOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(firstOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastOption = this.#lastOption();\r\n                if (lastOption) {\r\n                    if (expanded) {\r\n                        lastOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(lastOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                this.toggle();\r\n                const {expanded} = this;\r\n                if (expanded) {\r\n                    const {selectedOption} = this;\r\n                    (selectedOption ?? this.#firstOption())?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    if (activeOption) {\r\n                        this.#selectOption(activeOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.collapse();\r\n                    event.stopPropagation();\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            default: {\r\n                const {length: keyLength} = key;\r\n                if (keyLength == 1) {\r\n                    const keyCode = key.charCodeAt(0);\r\n                    const {options} = this;\r\n                    const activeIndex = activeOption ? options.indexOf(activeOption) : -1;\r\n                    const matchingOption = options.find(\r\n                        (option_i, i) => option_i.label.toLowerCase().charCodeAt(0) == keyCode && i > activeIndex\r\n                    ) ?? options.find(\r\n                        (option_i) => option_i.label.toLowerCase().charCodeAt(0) == keyCode\r\n                    );\r\n                    if (matchingOption) {\r\n                        matchingOption.focus({preventScroll: true});\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    #handleSelectEvent(event: Event): void {\r\n        const {target} = event;\r\n        const targetOption = (<Element>target).closest<HTMLEOptionElement>(\"e-option\");\r\n        if (targetOption) {\r\n            const {selected} = targetOption;\r\n            if (selected) {\r\n                const {options} = this;\r\n                options.forEach((option_i) => {\r\n                    if (option_i !== targetOption && option_i.selected) {\r\n                        option_i.selected = false;\r\n                    }\r\n                });\r\n                this.#setSelectedOption(targetOption);\r\n            }\r\n            else {\r\n                const {selectedOption} = this;\r\n                if (selectedOption === null) {\r\n                    const firstOption = this.#firstOption();\r\n                    if (firstOption !== null) {\r\n                        this.#setSelectedOption(firstOption);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLESelectElement: HTMLESelectElementConstructor = HTMLESelectElementBase;","import { CustomElement } from \"../Element\";\r\n\r\nexport { HTMLESeparatorElement };\r\n\r\ninterface HTMLESeparatorElementConstructor {\r\n    prototype: HTMLESeparatorElement;\r\n    new(): HTMLESeparatorElement;\r\n}\r\n\r\ninterface HTMLESeparatorElement extends HTMLElement {}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-separator\": HTMLESeparatorElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-separator\"\r\n})\r\nclass HTMLESeparatorElementBase extends HTMLElement implements HTMLESeparatorElement {\r\n    #internals: ElementInternals;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#internals = this.attachInternals();\r\n        this.#internals.role = \"separator\";\r\n    }\r\n}\r\n\r\nvar HTMLESeparatorElement: HTMLESeparatorElementConstructor = HTMLESeparatorElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEToolTipElement };\r\n\r\ninterface HTMLEToolTipElementConstructor {\r\n    prototype: HTMLEToolTipElement;\r\n    new(): HTMLEToolTipElement;\r\n}\r\n\r\ninterface HTMLEToolTipElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    htmlFor: string;\r\n    position: \"top\" | \"bottom\" | \"right\" | \"left\";\r\n    visible: boolean;\r\n    show(): void;\r\n    hide(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tooltip\": HTMLEToolTipElement;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar HIDE_DELAY_MS = 200;\r\nvar SHOW_DELAY_MS = 200;\r\n\r\n@CustomElement({\r\n    name: \"e-tooltip\"\r\n})\r\nclass HTMLEToolTipElementBase extends HTMLElement implements HTMLEToolTipElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String, observed: true, name: \"for\"})\r\n    htmlFor!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"top\"})\r\n    position!: \"top\" | \"bottom\" | \"right\" | \"left\";\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    visible!: boolean;\r\n\r\n    #target: HTMLElement | null;\r\n    #targetListenerObject: EventListenerObject;\r\n    #documentListenerObject: EventListenerObject;\r\n    #toggleAnimation: Animation | null;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"container\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"arrow\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#toggleAnimation = null;\r\n        this.#targetListenerObject = (function(tooltip) {\r\n            return {\r\n                handleEvent(event: Event) {\r\n                    const {type} = event;\r\n                    switch (type) {\r\n                        case \"mouseenter\": {\r\n                            tooltip.#handleTargetMouseEnterEvent();\r\n                            break;\r\n                        }\r\n                        case \"mouseleave\": {\r\n                            tooltip.#handleTargetMouseLeaveEvent();\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n        })(this);\r\n        this.#documentListenerObject = (function(tooltip) {\r\n            return {\r\n                handleEvent(event: Event) {\r\n                    const {type} = event;\r\n                    switch (type) {\r\n                        case \"keydown\": {\r\n                            tooltip.#handleDocumentKeyDownEvent(<KeyboardEvent>event);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n        })(this);\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {htmlFor} = this;\r\n        this.#setTarget(htmlFor);\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"for\": {\r\n                this.#setTarget(newValue);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    show(): void {\r\n        this.visible = true;\r\n        let toggleAnimation = this.#toggleAnimation;\r\n        if (toggleAnimation !== null) {\r\n            const {id} = toggleAnimation;\r\n            if (id === \"hide\") {\r\n                toggleAnimation.cancel();\r\n            }\r\n        }\r\n        toggleAnimation = this.animate([\r\n            { opacity: 0 },\r\n            { opacity: 1 }\r\n        ], {\r\n            id: \"show\",\r\n            duration: SHOW_DELAY_MS\r\n        })\r\n        const {finished} = toggleAnimation;\r\n        finished.then(\r\n            () => {\r\n                this.#toggleAnimation = null;\r\n            },\r\n            () => {\r\n                this.visible = false;\r\n            }\r\n        );\r\n        this.#toggleAnimation = toggleAnimation;\r\n        this.#position();\r\n    }\r\n\r\n    hide(): void {\r\n        let toggleAnimation = this.#toggleAnimation;\r\n        if (toggleAnimation !== null) {\r\n            const {id} = toggleAnimation;\r\n            if (id === \"show\") {\r\n                toggleAnimation.cancel();\r\n            }\r\n        }\r\n        toggleAnimation = this.animate([\r\n            { opacity: 1 },\r\n            { opacity: 0 }\r\n        ], {\r\n            id: \"hide\",\r\n            duration: HIDE_DELAY_MS\r\n        });\r\n        const {finished} = toggleAnimation;\r\n        finished.then(\r\n            () => {\r\n                this.visible = false;\r\n            },\r\n            () => {\r\n                this.visible = true;\r\n            }\r\n        );\r\n        this.#toggleAnimation = toggleAnimation;\r\n    }\r\n\r\n    #arrow(): HTMLElement {\r\n        return this.shadowRoot.querySelector<HTMLElement>(\"[part=arrow]\")!;\r\n    }\r\n\r\n    #setTarget(id: string | null): void {\r\n        const target = id ? document.getElementById(id) : null;\r\n        if (target !== null) {\r\n            const oldTarget = this.#target;\r\n            if (oldTarget) {\r\n                oldTarget.removeEventListener(\"mouseenter\", this.#targetListenerObject);\r\n                oldTarget.removeEventListener(\"mouseleave\", this.#targetListenerObject);\r\n            }\r\n            target.addEventListener(\"mouseenter\", this.#targetListenerObject);\r\n            target.addEventListener(\"mouseleave\", this.#targetListenerObject);\r\n        }\r\n        this.#target = target;\r\n    }\r\n\r\n    #position(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const {top: targetTop, bottom: targetBottom, left: targetLeft, right: targetRight} = target.getBoundingClientRect();\r\n            const {width: tooltipWidth, height: tooltipHeight} = this.getBoundingClientRect();\r\n            const tooltipHalfWidth = tooltipWidth / 2;\r\n            const tooltipHalfHeight = tooltipHeight / 2;\r\n            const targetCenter = (targetRight + targetLeft) / 2;\r\n            const targetMiddle = (targetBottom + targetTop) / 2;\r\n            const {position, style: tooltipStyle} = this;\r\n            const arrow = this.#arrow();\r\n            const {style: arrowStyle} = arrow;\r\n            const {width: arrowWidth, height: arrowHeight} = arrow.getBoundingClientRect();\r\n            const arrowHalfWidth = arrowWidth / 2;\r\n            const arrowHalfHeight = arrowHeight / 2;\r\n            const {clientWidth} = document.body;\r\n            switch (position) {\r\n                case \"top\": {\r\n                    tooltipStyle.setProperty(\"top\", `${targetTop - tooltipHeight - arrowHalfHeight}px`);\r\n                    tooltipStyle.setProperty(\"left\", `${\r\n                        Math.max(0, Math.min(targetCenter - tooltipHalfWidth, clientWidth - tooltipWidth))\r\n                    }px`);\r\n                    arrowStyle.setProperty(\"top\", `${targetTop - arrowHalfHeight}px`);\r\n                    arrowStyle.setProperty(\"left\", `${targetCenter}px`);\r\n                    break;\r\n                }\r\n                case \"bottom\": {\r\n                    tooltipStyle.setProperty(\"top\", `${targetBottom + arrowHalfHeight}px`);\r\n                    tooltipStyle.setProperty(\"left\", `${\r\n                        Math.max(0, Math.min(targetCenter - tooltipHalfWidth, clientWidth - tooltipWidth))\r\n                    }px`);\r\n                    arrowStyle.setProperty(\"top\", `${targetBottom + arrowHalfHeight}px`);\r\n                    arrowStyle.setProperty(\"left\", `${targetCenter}px`);\r\n                    break;\r\n                }\r\n                case \"left\": {\r\n                    tooltipStyle.setProperty(\"top\", `${targetMiddle - tooltipHalfHeight}px`);\r\n                    tooltipStyle.setProperty(\"left\", `${targetLeft - tooltipWidth - arrowHalfWidth}px`);\r\n                    arrowStyle.setProperty(\"top\", `${targetMiddle}px`);\r\n                    arrowStyle.setProperty(\"left\", `${targetLeft - arrowHalfWidth}px`);\r\n                    break;\r\n                }\r\n                case \"right\": {\r\n                    tooltipStyle.setProperty(\"top\", `${targetMiddle - tooltipHalfHeight}px`);\r\n                    tooltipStyle.setProperty(\"left\", `${targetRight + arrowHalfWidth}px`);\r\n                    arrowStyle.setProperty(\"top\", `${targetMiddle}px`);\r\n                    arrowStyle.setProperty(\"left\", `${targetRight + arrowHalfWidth}px`);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleTargetMouseEnterEvent(): void {\r\n        this.show();\r\n        document.addEventListener(\"keydown\", this.#documentListenerObject);\r\n    }\r\n\r\n    #handleTargetMouseLeaveEvent(): void {\r\n        this.hide();\r\n        document.removeEventListener(\"keydown\", this.#documentListenerObject);\r\n    }\r\n\r\n    #handleDocumentKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        switch (key) {\r\n            case \"Escape\": {\r\n                this.hide();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolTipElement: HTMLEToolTipElementConstructor = HTMLEToolTipElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEHandleElement };\r\n\r\ninterface HTMLEHandleElementConstructor {\r\n    prototype: HTMLEHandleElement;\r\n    new(): HTMLEHandleElement;\r\n}\r\n\r\ninterface HTMLEHandleElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    controls: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-handle\": HTMLEHandleElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"move\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-handle\"\r\n})\r\nclass HTMLEHandleElementBase extends HTMLElement implements HTMLEHandleElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                            \r\n                            width: 24px;\r\n                            height: 12px;\r\n                            \r\n                            background-color: rgb(0, 128, 255);\r\n\r\n                            -webkit-mask-image: url(\"assets/dots.png\");\r\n                            mask-image: url(\"assets/dots.png\");\r\n\r\n                            -webkit-mask-repeat: repeat;\r\n                            mask-repeat: repeat;\r\n                            cursor: move;\r\n                        }\r\n                    `\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"controls\": {\r\n                const {controls} = this;\r\n                this.#target = document.getElementById(controls);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        this.#target = document.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            const target = this.#target;\r\n            if (target !== null) {\r\n                const targetComputedStyle = window.getComputedStyle(target);\r\n                const {movementX, movementY} = event;\r\n                const {width: rectWidth, height: rectHeight} = target.getBoundingClientRect();\r\n                const outerElement = target.parentElement ?? document.body;\r\n                const {\r\n                    left: outerRectLeft, right: outerRectRight,\r\n                    top: outerRectTop, bottom: outerRectBottom\r\n                } = outerElement.getBoundingClientRect();\r\n                const left = parseFloat(targetComputedStyle.getPropertyValue(\"left\"));\r\n                const newLeft = Math.max(outerRectLeft, Math.min(Math.trunc(left + movementX), outerRectRight - rectWidth));\r\n                const top = parseFloat(targetComputedStyle.getPropertyValue(\"top\"));\r\n                const newTop = Math.max(outerRectTop, Math.min(Math.trunc(top + movementY), outerRectBottom - rectHeight));\r\n                target.style.setProperty(\"left\", `${newLeft}px`);\r\n                target.style.setProperty(\"top\", `${newTop}px`);\r\n                this.dispatchEvent(new CustomEvent(\"move\"));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEHandleElement: HTMLEHandleElementConstructor = HTMLEHandleElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEHeightSashElement };\r\n\r\ninterface HTMLEHeightSashElementConstructor {\r\n    prototype: HTMLEHeightSashElement;\r\n    new(): HTMLEHeightSashElement;\r\n}\r\n\r\ninterface HTMLEHeightSashElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    controls: string;\r\n    growdir: \"top\" | \"bottom\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-hsash\": HTMLEHeightSashElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"resize\": Event;\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-hsash\"\r\n})\r\nclass HTMLEHeightSashElementBase extends HTMLElement implements HTMLEHeightSashElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"top\"})\r\n    growdir!: \"top\" | \"bottom\";\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n    #queuedPointerCallback: FrameRequestCallback | null;\r\n    #pointerMovement: number;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#target = null;\r\n        this.#queuedPointerCallback = null;\r\n        this.#pointerMovement = 0;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    #pointerMoveCallback(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const {style} = target;\r\n            const {growdir} = this;\r\n            const movementY = this.#pointerMovement;\r\n            const height = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            const newHeight = Math.trunc(height + (growdir == \"top\" ? -1 : 1) * movementY);\r\n            style.setProperty(\"height\", `${newHeight}px`);\r\n            const computedNewHeight = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            style.setProperty(\"height\", `${computedNewHeight}px`);\r\n            this.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        this.#queuedPointerCallback = null;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        const rootNode = <ShadowRoot | Document>this.getRootNode();\r\n        this.#target = rootNode.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            if (this.#queuedPointerCallback == null) {\r\n                this.#pointerMovement = event.movementY;\r\n                this.#queuedPointerCallback = this.#pointerMoveCallback.bind(this);\r\n                requestAnimationFrame(this.#queuedPointerCallback);\r\n            }\r\n            else {\r\n                this.#pointerMovement += event.movementY;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n}\r\n\r\nvar HTMLEHeightSashElement: HTMLEHeightSashElementConstructor = HTMLEHeightSashElementBase;","import { CustomElement, AttributeProperty } from \"../Element\";\r\n\r\nexport { HTMLEImportElement };\r\n\r\ninterface HTMLEImportElementConstructor {\r\n    prototype: HTMLEImportElement;\r\n    new(): HTMLEImportElement;\r\n}\r\n\r\ninterface HTMLEImportElement extends HTMLElement {\r\n    src: string;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-import\": HTMLEImportElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"load\": Event;\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-import\"\r\n})\r\nclass HTMLEImportElementBase extends HTMLElement implements HTMLEImportElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    src!: string;\r\n    \r\n    connectedCallback(): void {\r\n        const {src} = this;\r\n        if (src) {\r\n            this.#importRequest(src);\r\n        }\r\n    }\r\n\r\n    async #importRequest(src: string): Promise<void> {\r\n        this.outerHTML = await fetch(src).then((response: Response) => {\r\n            if (response.ok) {\r\n                return response.text();\r\n            }\r\n            else {\r\n                throw new Error(response.statusText);\r\n            }\r\n        });\r\n        this.dispatchEvent(new Event(\"load\", {bubbles: true}));\r\n    }\r\n}\r\n\r\nvar HTMLEImportElement: HTMLEImportElementConstructor = HTMLEImportElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLELoaderElement };\r\n\r\ninterface HTMLELoaderElementConstructor {\r\n    prototype: HTMLELoaderElement;\r\n    new(): HTMLELoaderElement;\r\n}\r\n\r\ninterface HTMLELoaderElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    type: \"bar\" | \"circle\";\r\n    promise: Promise<any> | null;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-loader\": HTMLELoaderElement,\r\n    }\r\n}\r\n\r\nvar barShadowTemplate: HTMLTemplateElement;\r\nvar circleShadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-loader\"\r\n})\r\nclass HTMLELoaderElementBase extends HTMLElement implements HTMLELoaderElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String, defaultValue: \"bar\", observed: true})\r\n    type!: \"bar\" | \"circle\";\r\n    \r\n    #promise: Promise<any> | null;\r\n\r\n    static {\r\n        const commonStyle = element(\"style\", {\r\n            children: [\r\n                /*css*/`\r\n                    :host {\r\n                        display: inline-block;\r\n                        --default-loader-color: rgb(0, 128, 255);\r\n                        --default-animation-duration: 2s;\r\n                    }\r\n                `\r\n            ]\r\n        });\r\n        const barStyle = commonStyle.cloneNode(true);\r\n        const circleStyle = commonStyle.cloneNode(true);\r\n        barStyle.textContent += /*css*/`\r\n            :host {\r\n                display: block;\r\n            }\r\n\r\n            [part=\"bar\"] {\r\n                position: relative;\r\n                display: block;\r\n                overflow: hidden;\r\n                height: 6px;\r\n                width: 100%;\r\n            }\r\n\r\n            [part=\"slider\"] {\r\n                display: flex;\r\n                position: absolute;\r\n                width: 100%;\r\n                height: 100%;\r\n                animation-name: slider;\r\n            }\r\n\r\n            [part=\"slider\"],\r\n            [part=\"cursor\"] {\r\n                border-radius: 4px;\r\n                will-change: transform;\r\n                animation-duration: var(--animation-duration, var(--default-animation-duration));\r\n                animation-timing-function: linear;\r\n                animation-iteration-count: infinite;\r\n            }\r\n\r\n            [part=\"cursor\"] {\r\n                display: block;\r\n                width: 128px;\r\n                background-color: var(--loader-color, var(--default-loader-color));\r\n                animation-name: cursor;\r\n            }\r\n\r\n            [part=\"bar\"]:after {\r\n                animation-name: shine;\r\n                animation-duration: var(--animation-duration, var(--default-animation-duration));\r\n                animation-iteration-count: infinite;\r\n                animation-fill-mode: forwards;  \r\n                content: \"\";\r\n                position: absolute;\r\n                left: -100%;\r\n                width: 100%;\r\n                height: 100%;\r\n                top: 0;\r\n                opacity: 0;\r\n                \r\n                background: rgba(255, 255, 255, 0.13);\r\n                background: linear-gradient(\r\n                    to right, \r\n                    rgba(255, 255, 255, 0) 0%,\r\n                    rgba(255, 255, 255, 0.1) 10%,\r\n                    rgba(255, 255, 255, 0.9) 80%,\r\n                    rgba(255, 255, 255, 0) 100%\r\n                );\r\n            }\r\n\r\n            @keyframes shine {\r\n                25% {\r\n                    opacity: 1;\r\n                    left: -100%;\r\n                }\r\n                100% {\r\n                    opacity: 0;\r\n                    left: 100%;\r\n                }\r\n            }\r\n\r\n            @keyframes slider {\r\n                0% {\r\n                    transform: translateX(0%);\r\n                }\r\n                100% {\r\n                    transform: translateX(100%);\r\n                }\r\n            }\r\n\r\n            @keyframes cursor {\r\n                0% {\r\n                    transform: translateX(-100%);\r\n                }\r\n                100% {\r\n                    transform: translateX(100%);\r\n                }\r\n            }\r\n        `;\r\n        circleStyle.textContent += /*css*/`\r\n            :host {\r\n                display: inline-block;\r\n            }\r\n\r\n            [part=\"circle\"] {\r\n                width: 12px;\r\n                height: 12px;\r\n                border-top: 4px solid var(--loader-color, var(--default-loader-color));\r\n                border-right: 4px solid var(--loader-color, var(--default-loader-color));\r\n                border-left: 4px solid transparent;\r\n                border-bottom: 4px solid transparent;\r\n                border-radius: 50%;\r\n                animation-duration: 1s;\r\n                animation-name: circle;\r\n                animation-timing-function: linear;\r\n                animation-iteration-count: infinite;\r\n            }\r\n\r\n            @keyframes circle {\r\n                0% {\r\n                    transform: rotate(0);\r\n                }\r\n                100% {\r\n                    transform: rotate(360deg);\r\n                }\r\n            }\r\n        `;\r\n        barShadowTemplate = element(\"template\");\r\n        barShadowTemplate.content.append(\r\n            barStyle,\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"bar\"\r\n                },\r\n                children: [\r\n                    element(\"div\", {\r\n                        attributes: {\r\n                            part: \"slider\"\r\n                        },\r\n                        children: [\r\n                            element(\"div\", {\r\n                                attributes: {\r\n                                    part: \"cursor\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n        circleShadowTemplate = element(\"template\");\r\n        circleShadowTemplate.content.append(\r\n            circleStyle,\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"circle\"\r\n                }\r\n            })\r\n        )\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.#updateTemplate();\r\n        this.#promise = null;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"type\": {\r\n                this.#updateTemplate();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    set promise(promise: Promise<any> | null) {\r\n        if (promise) {\r\n            promise.finally(() => {\r\n                this.remove();\r\n            });\r\n        }\r\n        this.#promise = promise;\r\n    }\r\n\r\n    get promise(): Promise<any> | null {\r\n        return this.#promise;\r\n    }\r\n\r\n    #updateTemplate(): void {\r\n        const {type, shadowRoot} = this;\r\n        switch (type) {\r\n            case \"circle\": {\r\n                shadowRoot.replaceChildren(\r\n                    circleShadowTemplate.content.cloneNode(true)\r\n                );\r\n                break;\r\n            }\r\n            case \"bar\": {\r\n                shadowRoot.replaceChildren(\r\n                    barShadowTemplate.content.cloneNode(true)\r\n                );\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLELoaderElement: HTMLELoaderElementConstructor = HTMLELoaderElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEWidthSashElement };\r\n\r\ninterface HTMLEWidthSashElementConstructor {\r\n    prototype: HTMLEWidthSashElement;\r\n    new(): HTMLEWidthSashElement;\r\n}\r\n\r\ninterface HTMLEWidthSashElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    controls: string;\r\n    growdir: \"right\" | \"left\";\r\n    max: boolean;\r\n    setWidth(width: number): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-wsash\": HTMLEWidthSashElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"resize\": Event;\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-wsash\"\r\n})\r\nclass HTMLEWidthSashElementBase extends HTMLElement implements HTMLEWidthSashElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"right\"})\r\n    growdir!: \"right\" | \"left\";\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    max!: boolean;\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n    #queuedPointerCallback: FrameRequestCallback | null;\r\n    #pointerMovement: number;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#target = null;\r\n        this.#queuedPointerCallback = null;\r\n        this.#pointerMovement = 0;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    setWidth(width: number): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const {max} = this;\r\n            const {style} = target;\r\n            style.setProperty(\"width\", `${width}px`);\r\n            if (max) {\r\n                style.setProperty(\"max-width\", `${width}px`);\r\n            }\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const {growdir} = this;\r\n            const movementX = this.#pointerMovement;\r\n            const width = parseFloat(targetComputedStyle.getPropertyValue(\"width\"));\r\n            const newWidth = width + (growdir == \"right\" ? 1 : -1) * movementX;\r\n            this.setWidth(newWidth);\r\n            this.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        this.#pointerMovement = 0;\r\n        this.#queuedPointerCallback = null;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        const rootNode = <ShadowRoot | Document>this.getRootNode();\r\n        this.#target = rootNode.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            if (this.#queuedPointerCallback == null) {\r\n                this.#queuedPointerCallback = this.#pointerMoveCallback.bind(this);\r\n                requestAnimationFrame(this.#queuedPointerCallback);\r\n            }\r\n            this.#pointerMovement += event.movementX;\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n}\r\n\r\nvar HTMLEWidthSashElement: HTMLEWidthSashElementConstructor = HTMLEWidthSashElementBase;","import { areAttributesMatching, AttributeMutationMixin } from \"../elements/Element\";\r\n\r\nexport { AttributeMixinsObserver };\r\n\r\ninterface AttributeMixinsObserverConstructor {\r\n    prototype: AttributeMixinsObserver;\r\n    new(mixins: AttributeMutationMixin[]): AttributeMixinsObserver;\r\n}\r\n\r\ninterface AttributeMixinsObserver {\r\n    observe(target: Node): void;\r\n    trigger(): void;\r\n    disconnect(): void;\r\n}\r\n\r\nclass AttributeMixinsObserverBase implements AttributeMixinsObserver {\r\n    #observer: MutationObserver;\r\n    #mixins: AttributeMutationMixin[];\r\n\r\n    constructor(mixins: AttributeMutationMixin[]) {\r\n        this.#observer = new MutationObserver(\r\n            this.#callback.bind(this)\r\n        );\r\n        this.#mixins = mixins.slice();\r\n    }\r\n\r\n    trigger(): void {\r\n        this.#callback(this.#observer.takeRecords());\r\n    }\r\n\r\n    observe(target: Node): void  {\r\n        this.#observer.observe(target, {\r\n            childList: true,\r\n            subtree: true,\r\n            attributeFilter: this.#mixins.map((mixin => mixin.attributeName))\r\n        });\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#observer.disconnect();\r\n    }\r\n\r\n    #callback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            mutation.addedNodes.forEach((node: Node) => {\r\n                if (node instanceof Element) {\r\n                    this.#attachMatchingAttributeMixinsInSubtree(node);\r\n                }\r\n            });\r\n            mutation.removedNodes.forEach((node: Node) => {\r\n                if (node instanceof Element) {\r\n                    this.#detachMatchingAttributeMixinsInSubtree(node);\r\n                }\r\n            });\r\n            if (mutation.target instanceof Element) {\r\n                const targetElement = mutation.target;\r\n                const attributeName = mutation.attributeName;\r\n                if (attributeName) {\r\n                    const relatedMixins = this.#mixins.filter(mixin => mixin.attributeName == attributeName);\r\n                    relatedMixins.forEach((mixin) => {\r\n                        if (areAttributesMatching(\r\n                                mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                                attributeName!, targetElement.getAttribute(attributeName!)\r\n                            )) {\r\n                                mixin.attach(targetElement);\r\n                        }\r\n                        else {\r\n                            mixin.detach(targetElement);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    #attachMatchingAttributeMixinsInSubtree(element: Element) {\r\n        Array.from(element.attributes).forEach((attr) => {\r\n            let matchingMixins = this.#mixins.filter(\r\n                mixin => areAttributesMatching(\r\n                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                    attr.name, attr.value\r\n                )\r\n            );\r\n            matchingMixins.forEach((mixin) => {\r\n                mixin.attach(element);\r\n            });\r\n        });\r\n        let childIndex = 0;\r\n        const {children} = element;\r\n        while (childIndex < children.length) {\r\n            const child = children.item(childIndex);\r\n            if (child !== null) {\r\n                this.#attachMatchingAttributeMixinsInSubtree(child);\r\n            }\r\n            childIndex++;\r\n        }\r\n    }\r\n\r\n    #detachMatchingAttributeMixinsInSubtree(element: Element) {\r\n        Array.from(element.attributes).forEach((attr) => {\r\n            let matchingMixins = this.#mixins.filter(\r\n                mixin => areAttributesMatching(\r\n                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                    attr.name, attr.value\r\n                )\r\n            );\r\n            matchingMixins.forEach((mixin) => {\r\n                mixin.detach(element);\r\n            });\r\n        });\r\n        let childIndex = 0;\r\n        const {children} = element;\r\n        while (childIndex < children.length) {\r\n            const child = children.item(childIndex);\r\n            if (child !== null) {\r\n                this.#detachMatchingAttributeMixinsInSubtree(child);\r\n            }\r\n            childIndex++;\r\n        }\r\n    }\r\n}\r\n\r\nvar AttributeMixinsObserver: AttributeMixinsObserverConstructor = AttributeMixinsObserverBase;","import { ReactiveChildElements } from \"../../elements/Element\";\r\nimport { camelToTrain } from \"../../elements/Snippets\";\r\n\r\nexport { WidgetFactoryConstructor };\r\n\r\nexport { widget };\r\nexport { Widget };\r\nexport { WidgetFactory };\r\nexport { widgets };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {}\r\n}\r\n\r\ninterface WidgetFactoryConstructor {\r\n    prototype: WidgetFactory;\r\n    new(): WidgetFactory;\r\n}\r\n\r\ninterface WidgetFactory {\r\n    create(properties?: object): HTMLElement;\r\n    slot(root: HTMLElement, name: string | null): HTMLElement | null;\r\n}\r\n\r\nvar slotsMap: WeakMap<HTMLElement, {\r\n    widget: WidgetFactory,\r\n    element: WeakRef<HTMLElement>;\r\n    slot: string | null;\r\n}[]> = new WeakMap();\r\nvar slotsObserver = new MutationObserver(\r\n    (mutationsList: MutationRecord[]) => {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            if (target instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"childList\": {\r\n                        const slotReferences = slotsMap.get(target);\r\n                        if (slotReferences) {\r\n                            slotReferences.forEach(slotRef_i => {\r\n                                const {widget, element, slot} = slotRef_i;\r\n                                const slottedCallback = (widget as any)[\"slottedCallback\"];\r\n                                if (typeof slottedCallback == \"function\") {\r\n                                    slottedCallback(element.deref(), target, slot);\r\n                                }\r\n                            });\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n);\r\n\r\nvar widgetsMap: WeakMap<HTMLElement, WidgetFactory> = new WeakMap();\r\nvar attributesObserver = new MutationObserver(\r\n    (mutationsList: MutationRecord[]) => {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            if (target instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"attributes\": {\r\n                        const {attributeName, oldValue} = mutation;\r\n                        const widget = widgetsMap.get(target);\r\n                        if (widget) {\r\n                            const attributeChangedCallback = (widget as any)[\"attributeChangedCallback\"];\r\n                            if (typeof attributeChangedCallback == \"function\") {\r\n                                attributeChangedCallback(target, attributeName, oldValue, target.getAttribute(attributeName!));\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n);\r\n\r\nclass WidgetFactoryBase implements WidgetFactory {\r\n\r\n    constructor() {\r\n        const widget = <WidgetFactory>this;\r\n        this.create = new Proxy(\r\n            this.create, {\r\n                apply: (target, thisArg, argumentsList: Parameters<WidgetFactory[\"create\"]>) => {\r\n                    const element = <HTMLElement>Reflect.apply(target, thisArg, argumentsList);\r\n                    const observedSlots = <(string | null)[]>(widget as any)[\"observedSlots\"];\r\n                    if (Array.isArray(observedSlots)) {\r\n                        const slots = observedSlots\r\n                            .map(slotName_i => {\r\n                                return {\r\n                                    slotName: slotName_i,\r\n                                    slotElement: widget.slot(element, slotName_i)\r\n                                };\r\n                            });\r\n                        slots.forEach(slot_i => {\r\n                            const {slotElement, slotName} = slot_i;\r\n                            if (slotElement) {\r\n                                slotsObserver.observe(slotElement, {\r\n                                    childList: true\r\n                                });\r\n                                const slotReferences = slotsMap.get(slotElement);\r\n                                const slotReference = {widget, element: new WeakRef(element), slot: slotName};\r\n                                if (Array.isArray(slotReferences)) {\r\n                                    slotReferences.push(slotReference);\r\n                                }\r\n                                else {\r\n                                    slotsMap.set(slotElement, new Array(slotReference));\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                    const observedAttributes = (widget as any)[\"observedAttributes\"];\r\n                    if (Array.isArray(observedAttributes)) {\r\n                        widgetsMap.set(element, widget);\r\n                        attributesObserver.observe(element, {\r\n                            attributes: true,\r\n                            attributeFilter: observedAttributes,\r\n                            attributeOldValue: true\r\n                        });\r\n                    }\r\n                    return element;\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    create(): HTMLElement {\r\n        throw new Error(`create method is not implemented`);\r\n    }\r\n\r\n    slot(): HTMLElement | null {\r\n        return null;\r\n    }\r\n\r\n    get observedSlots(): string[] {\r\n        return [\"\"];\r\n    }\r\n}\r\n\r\nvar WidgetFactory: WidgetFactoryConstructor = WidgetFactoryBase;\r\nvar widgets: Map<string, WidgetFactory> = new Map();\r\n\r\ninterface WidgetInit<K extends keyof WidgetNameMap> {\r\n    properties?: Parameters<WidgetNameMap[K][\"create\"]>[0],\r\n    attributes?: {\r\n        [name: string]: number | string | boolean\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    slotted?: {\r\n        [slot: string]: Node | string | (Node | string)[] | NodeList | ReactiveChildElements\r\n    } | (Node | string | (Node | string)[] | NodeList | ReactiveChildElements),\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: K, init?: WidgetInit<K>): ReturnType<WidgetNameMap[K][\"create\"]>;\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: K, init?: WidgetInit<K>): HTMLElement {\r\n    const widget = widgets.get(name);\r\n    if (widget) {\r\n        if (init !== undefined) {\r\n            const {properties, attributes, dataset, slotted, listeners} = init;\r\n            const element = widget.create(properties);\r\n            if (attributes) {\r\n                Object.entries(attributes).forEach(([attributeName, attributeValue]) => {\r\n                    if (attributeValue !== undefined) {\r\n                        if (typeof attributeValue === \"boolean\") {\r\n                            element.toggleAttribute(camelToTrain(attributeName), attributeValue);\r\n                        }\r\n                        else {\r\n                            element.setAttribute(camelToTrain(attributeName), String(attributeValue));\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            if (dataset) {\r\n                const {dataset: elementDataset} = element;\r\n                Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                    elementDataset[datasetEntry_i] = String(dataset[datasetEntry_i]);\r\n                });\r\n            }\r\n            if (slotted) {\r\n                if (typeof slotted === \"function\" || Array.isArray(slotted) || slotted instanceof NodeList || typeof slotted === \"string\" || slotted instanceof Node) {\r\n                    const slot = widget.slot(element, null);\r\n                    if (slot) {\r\n                        if (typeof slotted === \"function\") {\r\n                            slot.append(...slotted(slot));\r\n                        }\r\n                        else if (typeof slotted === \"object\" && \"length\" in slotted) {\r\n                            slot.append(...Array.from(slotted));\r\n                        }\r\n                        else {\r\n                            slot.append(slotted);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    Object.entries(slotted).forEach(([slot_i, slotted]) => {\r\n                        const slot = widget.slot(element, slot_i);\r\n                        if (slot) {\r\n                            if (typeof slotted === \"function\") {\r\n                                slot.append(...slotted(slot));\r\n                            }\r\n                            else if (typeof slotted === \"object\" && \"length\" in slotted) {\r\n                                slot.append(...Array.from(slotted));\r\n                            }\r\n                            else {\r\n                                slot.append(slotted);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            if (listeners) {\r\n                Object.entries(listeners).forEach(([name_i, listener_i]) => {\r\n                    if (Array.isArray(listener_i)) {\r\n                        element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                    }\r\n                    else {\r\n                        element.addEventListener(name_i, listener_i);\r\n                    }\r\n                });\r\n            }\r\n            return element;\r\n        }\r\n        else {\r\n            return widget.create();\r\n        }\r\n    }\r\n    throw new Error(`Unknown widget ${name}. The corresponding module might not be imported.`);\r\n}\r\n\r\ninterface WidgetDecorator {\r\n    (init: {\r\n        name: string;\r\n    }): <W extends WidgetFactoryConstructor>(widget: W) => W;\r\n}\r\n\r\nconst Widget: WidgetDecorator = function(init: {\r\n    name: string;\r\n}) {\r\n    return <W extends WidgetFactoryConstructor>(\r\n        widget: W\r\n    ) => {\r\n        const {name} = init;\r\n        widgets.set(\r\n            name,\r\n            new widget()\r\n        );\r\n        return widget;\r\n    }\r\n}","import { element } from \"../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"./Widget\";\r\n\r\nexport { separatorWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"separator\": SeparatorWidgetFactory\r\n    }\r\n}\r\n\r\ninterface SeparatorWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar separatorWidget = new (\r\nWidget({\r\n    name: \"separator\"\r\n})(class SeparatorWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"separator\",\r\n                role: \"separator\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuItemWidget };\r\n\r\ntype MenuItemType = \"button\" | \"radio\" | \"checkbox\" | \"menu\" | \"submenu\";\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menuitem\": MenuItemWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        type?: MenuItemType;\r\n        checked?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void;\r\n    getMenu(item: HTMLElement): HTMLElement | null;\r\n    getKeyShortcut(item: HTMLElement): string | null;\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    getType(item: HTMLElement): MenuItemType | null;\r\n    setType(item: HTMLElement, type: MenuItemType): void;\r\n    getValue(item: HTMLElement): string;\r\n    setValue(item: HTMLElement, value: string): void;\r\n    getName(item: HTMLElement): string;\r\n    setName(item: HTMLElement, value: string): void;\r\n    getChecked(item: HTMLElement): boolean;\r\n    setChecked(item: HTMLElement, value: boolean): void;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setExpanded(item: HTMLElement, value: boolean): void;\r\n    getExpanded(item: HTMLElement): boolean;\r\n    toggle(item: HTMLElement, force?: boolean): void;\r\n    expand(item: HTMLElement): void;\r\n    collapse(item: HTMLElement): void;\r\n}\r\n\r\nvar menuItemWidget = new(\r\nWidget({\r\n    name: \"menuitem\"\r\n})(\r\nclass MenuItemWidgetFactoryBase extends WidgetFactory implements MenuItemWidgetFactory {\r\n    #iconPartTemplate: HTMLElement;\r\n    #arrowPartTemplate : HTMLElement;\r\n    #keyshortcutsPartTemplate: HTMLElement;\r\n    #template: HTMLElement;\r\n    #types: MenuItemType[];\r\n    #typesFeatures: {\r\n        [key in MenuItemType]: {\r\n            role: string,\r\n            hasIcon: boolean,\r\n            hasArrow: boolean\r\n        }\r\n    };\r\n\r\n    constructor() {\r\n        super();\r\n        this.#iconPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"icon\"\r\n            }\r\n        });\r\n        this.#arrowPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"arrow\"\r\n            }\r\n        });\r\n        this.#keyshortcutsPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"keyshortcuts\"\r\n            }\r\n        });\r\n        this.#template = element(\"button\", {\r\n            attributes: {\r\n                class: \"menuitem\",\r\n                role: \"menuitem\",\r\n                type: \"button\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                this.#iconPartTemplate.cloneNode(true),\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n        this.#types = [\"checkbox\", \"radio\", \"menu\", \"submenu\", \"button\"];\r\n        this.#typesFeatures = {\r\n            button: {\r\n                role: \"menuitem\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            checkbox: {\r\n                role: \"menuitemcheckbox\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            radio: {\r\n                role: \"menuitemradio\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            menu: {\r\n                role: \"menuitem\",\r\n                hasIcon: false,\r\n                hasArrow: false\r\n            },\r\n            submenu: {\r\n                role: \"menuitem\",\r\n                hasIcon: true,\r\n                hasArrow: true\r\n            }\r\n        }\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        type: MenuItemType;\r\n        checked?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (init !== undefined) {\r\n            const {id, classList, tabIndex, keyshortcut, checked, type, label, name, value, disabled} = init;\r\n            if (id !== undefined) {\r\n                item.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                item.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                item.tabIndex = tabIndex;\r\n            }\r\n            if (keyshortcut !== undefined) {\r\n                this.setKeyShortcut(item, keyshortcut);\r\n            }\r\n            if (checked !== undefined) {\r\n                this.setChecked(item, checked);\r\n            }\r\n            if (type !== undefined) {\r\n                if (type == \"menu\" || type == \"submenu\") {\r\n                    this.setExpanded(item, false);\r\n                }\r\n                this.setType(item, type);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(item, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(item, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(item: HTMLElement): HTMLElement | null {\r\n        return item;\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void {\r\n        const hasChildMenu = Array.from(slot.childNodes).some(\r\n            childNode_i => childNode_i instanceof HTMLElement && childNode_i.classList.contains(\"menu\")\r\n        );\r\n        item.setAttribute(\"aria-haspopup\", String(hasChildMenu));\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n\r\n    getMenu(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .menu\");\r\n    }\r\n\r\n    getKeyShortcut(item: HTMLElement): string | null {\r\n        return item.getAttribute(\"aria-keyshortcuts\");\r\n    }\r\n\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void {\r\n        let keyshortcutsPart = item.querySelector(\":scope > .keyshortcuts\");\r\n        if (value !== null) {\r\n            item.setAttribute(\"aria-keyshortcuts\", value);\r\n            if (!keyshortcutsPart) {\r\n                const labelPart = this.#label(item);\r\n                const keyshortcutsPartTemplate = this.#keyshortcutsPartTemplate;\r\n                keyshortcutsPart = <HTMLElement>keyshortcutsPartTemplate.cloneNode(true);\r\n                labelPart.after(keyshortcutsPart);\r\n            }\r\n            keyshortcutsPart.textContent = value;\r\n        }\r\n        else {\r\n            item.removeAttribute(\"aria-keyshortcuts\");\r\n            if (keyshortcutsPart) {\r\n                keyshortcutsPart.remove();\r\n            }\r\n        }\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n    \r\n    getType(item: HTMLElement): MenuItemType | null {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`menuitem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setType(item: HTMLElement, type: MenuItemType): void {\r\n        const typesFeatures = this.#typesFeatures;\r\n        const iconPartTemplate = this.#iconPartTemplate;\r\n        const arrowPartTemplate = this.#arrowPartTemplate;\r\n        const {role, hasIcon, hasArrow} = typesFeatures[type];\r\n        const oldType = this.getType(item);\r\n        const {classList} = item;\r\n        if (oldType) {\r\n            classList.remove(`menuitem-${oldType}`);\r\n        }\r\n        classList.add(`menuitem-${type}`);\r\n        item.setAttribute(\"role\", role);\r\n        const labelPart = this.#label(item);\r\n        const iconPart = item.querySelector(\":scope > .icon\");\r\n        const arrowPart = item.querySelector(\":scope > .arrow\");\r\n        if (hasIcon) {\r\n            if (!iconPart && labelPart) {\r\n                labelPart.before(iconPartTemplate.cloneNode(true));\r\n            }\r\n        }\r\n        else {\r\n            if (iconPart) {\r\n                iconPart.remove();\r\n            }\r\n        }\r\n        if (hasArrow) {\r\n            if (!arrowPart && labelPart) {\r\n                labelPart.after(arrowPartTemplate.cloneNode(true));\r\n            }\r\n        }\r\n        else {\r\n            if (arrowPart) {\r\n                arrowPart.remove();\r\n            }\r\n        }\r\n    }\r\n\r\n    getValue(item: HTMLElement): string {\r\n        return item.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"value\", value);\r\n    }\r\n    \r\n    getName(item: HTMLElement): string {\r\n        return item.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getChecked(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-checked\") ?? String(false));\r\n    }\r\n\r\n    setChecked(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-checked\", String(value));\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-expanded\", String(value));\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-expanded\") ?? String(false));\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        const expand = force ?? !this.getExpanded(item);\r\n        this.setExpanded(item, expand);\r\n        if (expand) {\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    expand(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (!expanded) {\r\n            this.setExpanded(item, true);\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    collapse(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (expanded) {\r\n            this.setExpanded(item, false);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.setChecked(targetItem, !this.getChecked(targetItem));\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.setChecked(targetItem, true);\r\n                    break;\r\n                }\r\n                case \"menu\":\r\n                case \"submenu\": {\r\n                    this.toggle(targetItem);\r\n                    if (this.getExpanded(targetItem)) {\r\n                        this.getMenu(targetItem)?.focus({preventScroll: true});\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(item: HTMLElement): void {\r\n        const menu = this.getMenu(item);\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = item.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const type = this.getType(item);\r\n            if (type == \"menu\") {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const closestMenu = item.closest(\".menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    const overflowX = itemRight + menuWidth - clientWidth;\r\n                    const overflowY = itemTop + menuHeight - clientHeight;\r\n                    menuStyle.setProperty(\"left\", `${\r\n                        overflowX > 0 ?\r\n                        itemLeft - menuWidth - closestMenuLeft :\r\n                        itemRight - closestMenuLeft\r\n                    }px`);\r\n                    const menuComputedStyle = window.getComputedStyle(menu);\r\n                    const {paddingTop, paddingBottom} = menuComputedStyle;\r\n                    const menuPaddingTop = parseFloat(paddingTop);\r\n                    const menuPaddingBottom = parseFloat(paddingBottom);\r\n                    menuStyle.setProperty(\"top\", `${\r\n                        overflowY > 0 ?\r\n                        itemBottom - menuHeight - closestMenuTop + menuPaddingBottom :\r\n                        itemTop - closestMenuTop - menuPaddingTop\r\n                    }px`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { menuItemWidget } from \"./MenuItemWidget\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuBarWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menubar\": MenuBarWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuBarWidgetFactory extends WidgetFactory {\r\n    setExpanded(menubar: HTMLElement, value: boolean): void;\r\n    getExpanded(menubar: HTMLElement): boolean;\r\n}\r\n\r\nvar menuBarWidget = new (\r\nWidget({\r\n    name: \"menubar\"\r\n})(class MenubarWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menubar\",\r\n                role: \"menubar\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        )\r\n    }\r\n\r\n    create() {\r\n        const menubar = <HTMLElement>this.#template.cloneNode(true);\r\n        menubar.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        menubar.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        menubar.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        menubar.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        menubar.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        return menubar;\r\n    }\r\n\r\n    slot(menubar: HTMLElement) {\r\n        return menubar;\r\n    }\r\n\r\n    setExpanded(menubar: HTMLElement, value: boolean): void {\r\n        menubar.toggleAttribute(\"aria-expanded\", value);\r\n    }\r\n\r\n    getExpanded(menubar: HTMLElement): boolean {\r\n        return menubar.hasAttribute(\"aria-expanded\");\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node) {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"menuitem\") && !menuItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"menuitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getActiveItem(menubar: HTMLElement): HTMLElement | null {\r\n        return menubar.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem:focus-within\"\r\n        );\r\n    }\r\n\r\n    #firstItem(menubar: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menubar;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(menubar: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menubar;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n\r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = menuItemWidget.getMenu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #isClosestMenu(menubar: HTMLElement, target: HTMLElement): boolean {\r\n        return target.closest(\":is(.menubar, .menu)\") == menubar;\r\n    }\r\n\r\n    #nearestItem(menubar: HTMLElement, target: HTMLElement): HTMLElement | null {\r\n        return Array.from(menubar.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem) {\r\n            const expanded = this.getExpanded(menubar);\r\n            const isClosestMenu = this.#isClosestMenu(menubar, targetItem);\r\n            if (isClosestMenu) {\r\n                const isExpanded = !expanded;\r\n                this.setExpanded(menubar, isExpanded);\r\n                if (isExpanded) {\r\n                    if (targetItem !== null && !menuItemWidget.getExpanded(targetItem)) {\r\n                        menuItemWidget.expand(targetItem);\r\n                    }\r\n                    const menu = menuItemWidget.getMenu(targetItem);\r\n                    menu?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    menubar.focus({preventScroll: true})\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && this.getExpanded(menubar)) {\r\n            const nearestItem = this.#nearestItem(menubar, target);\r\n            if (nearestItem) {\r\n                menuItemWidget.expand(nearestItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && !target.contains(<Element>relatedTarget)) {\r\n            const nearestItem = this.#nearestItem(menubar, target);\r\n            if (nearestItem) {\r\n                menuItemWidget.collapse(nearestItem);\r\n            }\r\n        }\r\n        const lostFocusWithin = !menubar.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.setExpanded(menubar, false);\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const activeItem = this.#getActiveItem(menubar);\r\n            const expanded = this.getExpanded(menubar);\r\n            const isClosestMenu = this.#isClosestMenu(menubar, target);\r\n            if (isClosestMenu && target !== activeItem && expanded) {\r\n                const menu = menuItemWidget.getMenu(target);\r\n                if (menu) {\r\n                    menu.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    target.focus({preventScroll: true});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        let activeItem = this.#getActiveItem(menubar);\r\n        const expanded = this.getExpanded(menubar);\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem(menubar) :\r\n                    this.#firstItem(menubar);\r\n                previousItem?.focus({preventScroll: true});\r\n                activeItem = this.#getActiveItem(menubar);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem(menubar) : \r\n                    this.#lastItem(menubar);\r\n                nextItem?.focus({preventScroll: true});\r\n                activeItem = this.#getActiveItem(menubar);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    this.setExpanded(menubar, !expanded);\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.setExpanded(menubar, false);\r\n                    if (activeItem) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    menubar.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { menuItemWidget } from \"./MenuItemWidget\";\r\n\r\nexport { menuWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menu\": MenuWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        contextual?: boolean;\r\n        position?: {x: number, y: number};\r\n    }): HTMLElement;\r\n    setPosition(menu: HTMLElement, x: number, y: number): void;\r\n    getContextual(menu: HTMLElement): boolean;\r\n    setContextual(menu: HTMLElement, value: boolean): void;\r\n    items(menu: HTMLElement): HTMLElement[];\r\n}\r\n\r\nvar mouseOverExpandDelay = 0_200;\r\nvar mouseOutCollapseDelay = 0_400;\r\n\r\nvar menuWidget = new (\r\nWidget({\r\n    name: \"menu\"\r\n})(class MenuWidgetFactoryBase extends WidgetFactory implements MenuWidgetFactory {\r\n\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #toggleTimeouts: WeakMap<HTMLElement, {clear(): void;}>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menu\",\r\n                role: \"menu\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#toggleTimeouts = new WeakMap();\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        contextual?: boolean;\r\n        position?: {x: number, y: number};\r\n    }): HTMLElement {\r\n        const menu = <HTMLElement>this.#template.cloneNode(true);\r\n        menu.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        menu.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        menu.addEventListener(\"mouseout\", this.#handleMouseOutEvent.bind(this));\r\n        menu.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        menu.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, contextual, position} = properties;\r\n            if (id !== undefined) {\r\n                menu.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                menu.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                menu.tabIndex = tabIndex;\r\n            }\r\n            if (contextual !== undefined) {\r\n                this.setContextual(menu, contextual);\r\n            }\r\n            if (position !== undefined) {\r\n                const {x, y} = position;\r\n                this.setPosition(menu, x, y);\r\n            }\r\n        }\r\n        return menu;\r\n    }\r\n\r\n    slot(menu: HTMLElement): HTMLElement | null {\r\n        return menu;\r\n    }\r\n\r\n    setPosition(menu: HTMLElement, x: number, y: number): void {\r\n        const {style} = menu;\r\n        const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        const left = x + scrollX;\r\n        const top = y + scrollY;\r\n        const {clientWidth, clientHeight} = document.body;\r\n        const overflowX = left + menuWidth - clientWidth;\r\n        const overflowY = top + menuHeight - clientHeight;\r\n        style.setProperty(\"left\", `${overflowX > 0 ? left - menuWidth : left}px`);\r\n        style.setProperty(\"top\", `${overflowY > 0 ? top - menuHeight : top}px`);\r\n    }\r\n\r\n    getContextual(menu: HTMLElement): boolean {\r\n        const {classList} = menu;\r\n        return classList.contains(\"menu-contextual\");\r\n    }\r\n\r\n    setContextual(menu: HTMLElement, value: boolean): void {\r\n        const {classList} = menu;\r\n        if (value) {\r\n            classList.add(\"menu-contextual\");\r\n        }\r\n        else {\r\n            classList.remove(\"menu-contextual\");\r\n        }\r\n    }\r\n\r\n    items(menu: HTMLElement): HTMLElement[] {\r\n        return Array.from(menu.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        ));\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"menuitem\") && !menuItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"menuitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #collapseSubmenus(menu: HTMLElement): void {\r\n        menu.querySelectorAll<HTMLElement>(\":is(:scope, :scope > .menuitemgroup) > .menuitem[aria-expanded]\")\r\n            .forEach(menuitem_i => menuItemWidget.collapse(menuitem_i));\r\n    }\r\n\r\n    #isClosestMenu(menu: HTMLElement, target: HTMLElement): boolean {\r\n        return target.closest(\".menu\") == menu;\r\n    }\r\n\r\n    #nearestItem(menu: HTMLElement, target: HTMLElement): HTMLElement | null {\r\n        return Array.from(menu.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #firstItem(menu: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menu;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(menu: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menu;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n\r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = menuItemWidget.getMenu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #getActiveItem(menu: HTMLElement): HTMLElement | null {\r\n        return menu.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem:focus-within\"\r\n        );\r\n    }\r\n\r\n    async #setItemTimeout(item: HTMLElement, delay?: number): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => {\r\n                resolve(undefined);\r\n            }, delay ?? 0);\r\n            this.#toggleTimeouts.set(item, {\r\n                clear: () => {\r\n                    clearTimeout(timeout);\r\n                    reject();\r\n                }\r\n            });\r\n        }).then(() => {\r\n            this.#toggleTimeouts.delete(item);\r\n        });\r\n    }\r\n\r\n    #clearItemTimeout(item: HTMLElement): void {\r\n        const timeout = this.#toggleTimeouts.get(item);\r\n        if (typeof timeout !== \"undefined\") {\r\n            this.#toggleTimeouts.delete(item);\r\n            timeout.clear();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem) {\r\n            const contextual = this.getContextual(targetMenu);\r\n            if (contextual) {\r\n                try {\r\n                    targetMenu.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const isClosestMenu = this.#isClosestMenu(targetMenu, targetItem);\r\n                if (isClosestMenu) {\r\n                    const type = menuItemWidget.getType(targetItem);\r\n                    const name = menuItemWidget.getName(targetItem);\r\n                    const value = menuItemWidget.getValue(targetItem);\r\n                    if (type == \"radio\") {\r\n                        targetMenu.querySelectorAll<HTMLElement>(\r\n                            `:is(:scope, :scope > .menuitemgroup) > .menuitem-radio[name=${name}]`\r\n                        )\r\n                        .forEach((radio_i) => {\r\n                            menuItemWidget.setChecked(radio_i, menuItemWidget.getValue(radio_i) == value);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetMenu.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const contextual = this.getContextual(targetMenu);\r\n            if (contextual) {\r\n                try {\r\n                    targetMenu.remove();\r\n                } catch (error) {\r\n                    undefined;\r\n                }\r\n            }\r\n            else {\r\n                const nearestItem = this.#nearestItem(targetMenu, <HTMLElement>target);\r\n                if (nearestItem) {\r\n                    menuItemWidget.collapse(nearestItem);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetMenu);\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem(targetMenu) :\r\n                    this.#firstItem(targetMenu);\r\n                previousItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem(targetMenu) :\r\n                    this.#firstItem(targetMenu);\r\n                nextItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetMenu);\r\n                firstItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetMenu);\r\n                lastItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const type = menuItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            menuItemWidget.expand(activeItem);\r\n                            const firstChildItem = this.#firstChildItem(activeItem);\r\n                            firstChildItem?.focus({preventScroll: true});\r\n                            event.preventDefault();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    const isTargetClosestMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                    ) == targetMenu;\r\n                    if (!isTargetClosestMenu) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const isTargetClosestMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                    ) == targetMenu;\r\n                    if (!isTargetClosestMenu) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const type = menuItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            const expanded = menuItemWidget.getExpanded(activeItem);\r\n                            if (!expanded) {\r\n                                menuItemWidget.expand(activeItem);\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                                event.stopPropagation();\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOutEvent(event: MouseEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const nearestItem = this.#nearestItem(targetMenu, target);\r\n            if (nearestItem !== null) {\r\n                if (menuItemWidget.getType(nearestItem) == \"submenu\" &&\r\n                    !menuItemWidget.getExpanded(nearestItem)) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                ) == targetMenu;\r\n                if (isTargetClosestMenu) {\r\n                    const activeItem = this.#getActiveItem(targetMenu);\r\n                    if (activeItem !== null &&\r\n                        menuItemWidget.getType(activeItem) == \"submenu\" &&\r\n                        menuItemWidget.getExpanded(activeItem)) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, mouseOutCollapseDelay)\r\n                            .then(() => {\r\n                                menuItemWidget.collapse(activeItem);\r\n                            })\r\n                            .catch(() => undefined);\r\n                    }\r\n                    const {clientX, clientY} = event;\r\n                    const {left, right, top, bottom} = targetMenu.getBoundingClientRect();\r\n                    const intersectsWithMouse = !(\r\n                        left > clientX || right < clientX || top > clientY || bottom < clientY\r\n                    );\r\n                    const containsRelatedTarget = targetMenu.contains(<Node>relatedTarget);\r\n                    if (intersectsWithMouse && containsRelatedTarget) {\r\n                        if (relatedTarget instanceof HTMLElement && relatedTarget.classList.contains(\"menu\") && relatedTarget !== targetMenu) {\r\n                            relatedTarget.focus({preventScroll: true});\r\n                        }\r\n                        else {\r\n                            targetMenu.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    if (!intersectsWithMouse) {\r\n                        targetMenu.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const nearestItem = this.#nearestItem(targetMenu, target); \r\n            if (nearestItem !== null) {\r\n                if (menuItemWidget.getType(nearestItem) == \"submenu\" &&\r\n                    menuItemWidget.getExpanded(nearestItem)) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                ) == targetMenu;\r\n                if (isTargetClosestMenu) {\r\n                    const activeItem = this.#getActiveItem(targetMenu);\r\n                    if (activeItem !== null) {\r\n                        if (menuItemWidget.getType(activeItem) == \"submenu\" &&\r\n                            menuItemWidget.getExpanded(activeItem) && \r\n                            !activeItem.contains(<HTMLElement>target)) {\r\n                            this.#clearItemTimeout(activeItem);\r\n                            this.#setItemTimeout(activeItem, mouseOutCollapseDelay)\r\n                                .then(() => {\r\n                                    menuItemWidget.collapse(activeItem);\r\n                                })\r\n                                .catch(() => undefined);\r\n                        }\r\n                    }\r\n                    nearestItem.focus({preventScroll: true});\r\n                    if (menuItemWidget.getType(nearestItem) == \"submenu\") {\r\n                        if (!menuItemWidget.getExpanded(nearestItem)) {\r\n                            this.#clearItemTimeout(nearestItem);\r\n                            this.#setItemTimeout(nearestItem, mouseOverExpandDelay)\r\n                                .then(() => {\r\n                                    const activeItem = this.#getActiveItem(targetMenu);\r\n                                    this.#collapseSubmenus(targetMenu);\r\n                                    if (activeItem) {\r\n                                        this.#clearItemTimeout(activeItem);\r\n                                        menuItemWidget.expand(activeItem);\r\n                                        menuItemWidget.getMenu(activeItem)?.focus({preventScroll: true});\r\n                                    }\r\n                                })\r\n                                .catch(() => undefined);\r\n                        }\r\n                        else {\r\n                            menuItemWidget.getMenu(nearestItem)?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menuitemgroup\": MenuItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar menuItemGroupWidget = new (\r\nWidget({\r\n    name: \"menuitemgroup\"\r\n})(class MenuItemGroupWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menuitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement): HTMLElement | null {\r\n        return group;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { treeItemWidget };\r\n\r\ntype TreeItemType = \"parent\" | \"leaf\";\r\n\r\ninterface TreeItemWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        type?: TreeItemType;\r\n        label?: string;\r\n        title?: string;\r\n        disabled?: boolean;\r\n        draggable?: boolean;\r\n    }): HTMLElement;\r\n    group(item: HTMLElement): HTMLElement | null;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setExpanded(item: HTMLElement, value: boolean): void;\r\n    getExpanded(item: HTMLElement): boolean;\r\n    setDraggable(row: HTMLElement, value: boolean): void;\r\n    getDraggable(item: HTMLElement): boolean;\r\n    getType(item: HTMLElement): TreeItemType | null;\r\n    setType(item: HTMLElement, value: TreeItemType): void;\r\n    toggle(item: HTMLElement, force?: boolean): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"treeitem\": TreeItemWidgetFactory,\r\n    }\r\n}\r\n\r\nvar treeItemWidget = new (\r\nWidget({\r\n    name: \"treeitem\"\r\n})(class TreeItemWidgetFactoryBase extends WidgetFactory implements TreeItemWidgetFactory {\r\n    #template: HTMLElement;\r\n    #types: TreeItemType[];\r\n\r\n    constructor() {\r\n        super();\r\n        this.#types = [\"parent\", \"leaf\"];\r\n        this.#template = element(\"li\", {\r\n            attributes: {\r\n                class: \"treeitem\",\r\n                role: \"treeitem\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"content\"\r\n                    },\r\n                    children: [\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"arrow\"\r\n                            }\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    group(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .treeitemgroup\");\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        label?: string;\r\n        title?: string;\r\n        type?: TreeItemType;\r\n        disabled?: boolean;\r\n        draggable?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, label, title, type = \"leaf\", disabled, draggable} = properties;\r\n            if (id !== undefined) {\r\n                item.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                item.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                item.tabIndex = tabIndex;\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (title !== undefined) {\r\n                this.setTitle(item, title);\r\n            }\r\n            this.setType(item, type);\r\n            if (type === \"parent\") {\r\n                this.setExpanded(item, false);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n            if (draggable !== undefined) {\r\n                this.setDraggable(item, draggable);\r\n            }\r\n            this.setSelected(item, false);\r\n        }\r\n        return item;\r\n    }\r\n\r\n    get observedSlots() {\r\n        return [\"content\", \"group\"];\r\n    }\r\n\r\n    slot(item: HTMLElement, name: string | null) {\r\n        switch (name) {\r\n            case \"content\":\r\n                return this.#content(item);\r\n            case \"group\":\r\n                return item;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #content(item: HTMLElement): HTMLElement {\r\n        const content = item.querySelector<HTMLElement>(\":scope > .content\")!;\r\n        if (!content) throw new Error(\"Missing .content slot.\");\r\n        return content;\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return item.getAttribute(\"aria-label\") ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"aria-label\", value);\r\n    }\r\n\r\n    getTitle(item: HTMLElement): string {\r\n        return item.title;\r\n    }\r\n\r\n    setTitle(item: HTMLElement, value: string): void {\r\n        item.title = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? Number(posInSet) : -1;\r\n    }\r\n\r\n    getType(item: HTMLElement): TreeItemType {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`treeitem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        throw new Error(\"Missing type.\");\r\n    }\r\n\r\n    setType(item: HTMLElement, type: TreeItemType): void {\r\n        const {classList} = item;\r\n        try {\r\n            const oldType = this.getType(item);\r\n            classList.remove(`treeitem-${oldType}`);\r\n        }\r\n        catch (e) {};\r\n        classList.add(`treeitem-${type}`);\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-expanded\", String(value));\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-expanded\") ?? String(false));\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            if (!classList.contains(\"active\")) {\r\n                classList.add(\"active\");\r\n            }\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDraggable(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"draggable\", String(value));\r\n    }\r\n\r\n    getDraggable(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"draggable\") ?? String(false));\r\n    }\r\n\r\n    setSelected(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-selected\", String(value));\r\n        item.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    setLevel(item: HTMLElement, value: number): void {\r\n        item.style.setProperty(\"--level\", String(value));\r\n    }\r\n\r\n    getLevel(item: HTMLElement): number {\r\n        return parseInt(item.style.getPropertyValue(\"--level\"));\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        this.setExpanded(item, force ?? !this.getExpanded(item));\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget, shiftKey, ctrlKey} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            if (type == \"parent\" && !(shiftKey || ctrlKey)) {\r\n                this.toggle(targetItem);\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { treeItemWidget } from \"./TreeItemWidget\";\r\n\r\nexport { treeWidget };\r\n\r\ninterface TreeWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement;\r\n    items(tree: HTMLElement): HTMLElement[];\r\n    selectedItems(tree: HTMLElement): HTMLElement[];\r\n    beginSelection(tree: HTMLElement): void;\r\n    endSelection(tree: HTMLElement): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"tree\": TreeWidgetFactory,\r\n    }\r\n}\r\n\r\nvar treeWidget = new (\r\nWidget({\r\n    name: \"tree\"\r\n})(class TreeWidgetFactoryBase extends WidgetFactory implements TreeWidgetFactory {\r\n\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"tree\",\r\n                role: \"tree\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement {\r\n        const tree = <HTMLElement>this.#template.cloneNode(true);\r\n        tree.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        tree.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        tree.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        tree.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        tree.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        tree.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        tree.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        tree.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        tree.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        tree.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        tree.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        this.#onSelection.set(tree, false);\r\n        this.#hasSelectionChanged.set(tree, false);\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, multisectable} = properties;\r\n            if (id !== undefined) {\r\n                tree.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                tree.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                tree.tabIndex = tabIndex;\r\n            }\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(tree, multisectable);\r\n            }\r\n        }\r\n        return tree;\r\n    }\r\n\r\n    slot(tree: HTMLElement) {\r\n        return tree;\r\n    }\r\n\r\n    slottedCallback(tree: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"treeitem\")) {\r\n                treeItemWidget.setPosInSet(child_i, i);\r\n                treeItemWidget.setLevel(child_i, 0);\r\n            }\r\n        });\r\n    }\r\n\r\n    items(tree: HTMLElement): HTMLElement[] {\r\n        return Array.from(tree.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .treeitemgroup) > .treeitem\"\r\n        ));\r\n    }\r\n\r\n    selectedItems(tree: HTMLElement): HTMLElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        let item = this.#firstItem(tree);\r\n        while (item !== null) {\r\n            const selected = treeItemWidget.getSelected(item);\r\n            if (selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(tree: HTMLElement): void {\r\n        this.#onSelection.set(tree, true);\r\n    }\r\n\r\n    endSelection(tree: HTMLElement): void {\r\n        this.#onSelection.set(tree, false);\r\n        if (this.#hasSelectionChanged.get(tree)) {\r\n            tree.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(tree, false);\r\n        }\r\n    }\r\n\r\n    setMultiSelectable(tree: HTMLElement, value: boolean): void {\r\n        tree.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(tree: HTMLElement): boolean {\r\n        return JSON.parse(tree.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    #getActiveItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".treeitem.active\");\r\n    }\r\n\r\n    #getDropTargetItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".treeitem.droptarget\");\r\n    }\r\n\r\n    #setDropTargetItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const {classList} = tree;\r\n        const dropTargetItem = this.#getDropTargetItem(tree);\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            treeItemWidget.setDropTarget(dropTargetItem, false);\r\n        }\r\n        if (item !== null) {\r\n            treeItemWidget.setDropTarget(item, true);\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"treeitem\") && !treeItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"treeitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextItem = this.#nextItem(from);\r\n            while (nextItem && nextItem !== to) {\r\n                range.push(nextItem);\r\n                nextItem = this.#nextItem(nextItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousItem = this.#previousItem(from);\r\n            while (previousItem && previousItem !== to) {\r\n                range.push(previousItem);\r\n                previousItem = this.#previousItem(previousItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        selectedItems.forEach((item_i) => {\r\n            if (!items.includes(item_i)) {\r\n                treeItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            const selected = treeItemWidget.getSelected(item_i);\r\n            if (tree.contains(item_i) && !selected) {\r\n                treeItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #addToSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        this.beginSelection(tree);\r\n        items.forEach((item_i) => {\r\n            if (!treeItemWidget.getSelected(item_i)) {\r\n                treeItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #removeFromSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                treeItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #clearSelection(tree: HTMLElement): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        selectedItems.forEach((item_i) => {\r\n            treeItemWidget.setSelected(item_i, false);\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #setActiveItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(tree);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            treeItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            treeItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #firstItem(tree: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(tree: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousSibling = <HTMLElement | null>walker.previousSibling();\r\n        return previousSibling ?\r\n            this.#deepestItem(previousSibling) :\r\n            <HTMLElement | null>walker.parentNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const type = treeItemWidget.getType(item);\r\n        const expanded = treeItemWidget.getExpanded(item);\r\n        return <HTMLElement | null>(\r\n            type === \"leaf\" ?\r\n                walker.nextNode() :\r\n                expanded ?\r\n                    walker.nextNode() :\r\n                    walker.nextSibling() ??\r\n                    (walker.parentNode(), walker.nextSibling())\r\n        );\r\n    }\r\n\r\n    #deepestItem(item: HTMLElement): HTMLElement {\r\n        const expanded = treeItemWidget.getExpanded(item);\r\n        if (expanded) {\r\n            const walker = this.#walker;\r\n            const lastItem = <HTMLElement>walker.lastChild();\r\n            if (lastItem) {\r\n                return this.#deepestItem(lastItem);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey, button} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        if (targetItem) {\r\n            const selected = treeItemWidget.getSelected(targetItem);\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setSelection(targetTree, targetItem);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            targetItem.blur();\r\n                            this.#removeFromSelection(targetTree, targetItem);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(targetTree, targetItem);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const activeItem = this.#getActiveItem(targetTree);\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                targetItem\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetTree, ...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                }\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(targetTree, targetItem);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            const type = treeItemWidget.getType(targetItem);\r\n            if (type == \"parent\") {\r\n                treeItemWidget.toggle(targetItem, true);\r\n            }\r\n            this.#setDropTargetItem(targetTree, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (!targetTree.contains(<Node>relatedTarget)) {\r\n            this.#setDropTargetItem(targetTree, null);\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const focusWithin = targetTree.contains(<Node>relatedTarget);\r\n        if (!focusWithin) {   \r\n            const activeItem = this.#getActiveItem(targetTree);\r\n            if (activeItem) {\r\n                activeItem.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetTree, targetItem);\r\n            targetTree.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetTree.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetTree.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetTree);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetTree, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetTree, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(\r\n                                firstItem,\r\n                                this.#deepestItem(lastItem)\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetTree, ...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const expanded = treeItemWidget.getExpanded(activeItem);\r\n                    if (expanded) {\r\n                        treeItemWidget.toggle(activeItem);\r\n                    }\r\n                    else {\r\n                        const walker = this.#walker;\r\n                        const parentItem = <HTMLElement>walker.parentNode();\r\n                        if (parentItem) {\r\n                            parentItem.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const expanded = treeItemWidget.getExpanded(activeItem);\r\n                    if (!expanded) {\r\n                        treeItemWidget.toggle(activeItem);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = treeItemWidget.getSelected(previousItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetTree, previousItem) :\r\n                                this.#addToSelection(targetTree, previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetTree);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = treeItemWidget.getSelected(nextItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetTree, nextItem) :\r\n                                this.#addToSelection(targetTree, nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetTree);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetTree);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetTree);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(targetTree, activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection(targetTree);\r\n                this.#setActiveItem(targetTree, null);\r\n                targetTree.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {target} = event;\r\n        const targetTree = <HTMLElement>target;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"treeitem\")) {\r\n            if (this.#onSelection.get(targetTree)) {\r\n                this.#hasSelectionChanged.set(target, true);\r\n            }\r\n            else {\r\n                targetTree.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { treeItemWidget } from \"./TreeItemWidget\";\r\n\r\nexport { treeItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"treeitemgroup\": TreeItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface TreeItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar treeItemGroupWidget = new (\r\nWidget({\r\n    name: \"treeitemgroup\"\r\n})(class TreeItemGroupWidgetFactoryBase extends WidgetFactory implements TreeItemGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"treeitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n\r\n    slottedCallback(group: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"treeitem\")) {\r\n                treeItemWidget.setPosInSet(child_i, i);\r\n                treeItemWidget.setLevel(child_i, (() => {\r\n                    let level = -1;\r\n                    let closestItem: HTMLElement | null = child_i;\r\n                    while (closestItem !== null && closestItem.matches(\".tree :scope\")) {\r\n                        closestItem = closestItem.parentElement?.closest(\".treeitem\") ?? null;\r\n                        level++;\r\n                    }\r\n                    return level;\r\n                })());\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { listItemWidget };\r\n\r\ninterface ListItemWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        label?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"listitem\": ListItemWidgetFactory,\r\n    }\r\n}\r\n\r\nvar listItemWidget = new (\r\nWidget({\r\n    name: \"listitem\"\r\n})(class ListItemWidgetFactoryBase extends WidgetFactory implements ListItemWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"li\", {\r\n            attributes: {\r\n                class: \"listitem\",\r\n                role: \"listitem\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        label?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {label, disabled} = init;\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n            this.setSelected(item, false);\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(root: HTMLElement): HTMLElement | null {\r\n        return root;\r\n    }\r\n\r\n    group(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .listitemgroup\");\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(row: HTMLElement, value: boolean): void {\r\n        row.setAttribute(\"aria-selected\", String(value));\r\n        row.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(row: HTMLElement): boolean {\r\n        return JSON.parse(row.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    #label(item: HTMLElement): Node {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { listItemWidget } from \"./ListItemWidget\";\r\n\r\nexport  { listWidget };\r\n\r\ninterface ListWidgetFactory extends WidgetFactory {\r\n    create(properties: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement;\r\n    items(list: HTMLElement): HTMLElement[];\r\n    beginSelection(list: HTMLElement): void;\r\n    endSelection(list: HTMLElement): void;\r\n    selectedItems(list: HTMLElement): HTMLElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"list\": ListWidgetFactory,\r\n    }\r\n}\r\n\r\nvar listWidget = new (\r\nWidget({\r\n    name: \"list\"\r\n})(class ListWidgetFactoryBase extends WidgetFactory implements ListWidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"list\",\r\n                role: \"list\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement {\r\n        const list = <HTMLElement>this.#template.cloneNode(true);\r\n        list.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        list.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        list.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        list.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        list.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        list.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        list.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        list.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        list.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        list.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        list.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        list.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, multisectable} = properties;\r\n            if (id !== undefined) {\r\n                list.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                list.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                list.tabIndex = tabIndex;\r\n            }\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(list, multisectable);\r\n            }\r\n        }\r\n        this.#onSelection.set(list, false);\r\n        this.#hasSelectionChanged.set(list, false);\r\n        return list;\r\n    }\r\n\r\n    slot(list: HTMLElement) {\r\n        return list;\r\n    }\r\n\r\n    slottedCallback(list: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"listitem\")) {\r\n                listItemWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n\r\n    setMultiSelectable(tree: HTMLElement, value: boolean): void {\r\n        tree.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(tree: HTMLElement): boolean {\r\n        return JSON.parse(tree.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    #getActiveItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".listitem.active\");\r\n    }\r\n\r\n    #getDropTargetItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".listitem.droptarget\");\r\n    }\r\n\r\n    items(list: HTMLElement): HTMLElement[] {\r\n        return Array.from(list.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .listitemgroup) > .listitem\"\r\n        ));\r\n    }\r\n\r\n    selectedItems(list: HTMLElement): HTMLElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        let item = this.#firstItem(list);\r\n        while (item !== null) {\r\n            const selected = listItemWidget.getSelected(item);\r\n            if (selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(list: HTMLElement): void {\r\n        this.#onSelection.set(list, true);\r\n    }\r\n\r\n    endSelection(list: HTMLElement): void {\r\n        this.#onSelection.set(list, false);\r\n        if (this.#hasSelectionChanged.get(list)) {\r\n            list.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(list, false);\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"listitem\") && !listItemWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"listitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextItem = this.#nextItem(from);\r\n            while (nextItem && nextItem !== to) {\r\n                range.push(nextItem);\r\n                nextItem = this.#nextItem(nextItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousItem = this.#previousItem(from);\r\n            while (previousItem && previousItem !== to) {\r\n                range.push(previousItem);\r\n                previousItem = this.#previousItem(previousItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        selectedItems.forEach((item_i) => {\r\n            if (!items.includes(item_i)) {\r\n                listItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            const selected = listItemWidget.getSelected(item_i);\r\n            if (list.contains(item_i) && !selected) {\r\n                listItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #addToSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        this.beginSelection(list);\r\n        items.forEach((item_i) => {\r\n            if (!listItemWidget.getSelected(item_i)) {\r\n                listItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #removeFromSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                listItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #clearSelection(list: HTMLElement): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        selectedItems.forEach((item_i) => {\r\n            listItemWidget.setSelected(item_i, false);\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #setActiveItem(list: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(list);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            listItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            listItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n    \r\n    #setDropTargetItem(list: HTMLElement, item: HTMLElement | null): void {\r\n        const {classList} = list;\r\n        const dropTargetItem = this.#getDropTargetItem(list);\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            listItemWidget.setDropTarget(dropTargetItem, false);\r\n        }\r\n        if (item !== null) {\r\n            listItemWidget.setDropTarget(item, false);\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    #firstItem(list: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(list: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLElement | null>walker.previousNode();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const nextItem = <HTMLElement | null>walker.nextNode();\r\n        return nextItem;\r\n    }\r\n\r\n    #handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetList, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            this.#setDropTargetItem(targetList, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!targetList.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(targetList, null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            const selectedItems = this.selectedItems(targetTree);\r\n            if (!selectedItems.includes(targetItem)) {\r\n                this.#setSelection(targetTree, targetItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetTree);\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetTree, targetItem);\r\n            targetTree.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetList);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetList, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetList, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(firstItem, lastItem);\r\n                            if (range) {\r\n                                this.#setSelection(targetList, ...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = listItemWidget.getSelected(previousItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetList, previousItem) :\r\n                                this.#addToSelection(targetList, previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetList);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = listItemWidget.getSelected(nextItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetList, nextItem) :\r\n                                this.#addToSelection(targetList, nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetList);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetList);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetList);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(targetList, activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection(targetList);\r\n                this.#setActiveItem(targetList, null);\r\n                targetList.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey, button} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            const selected = listItemWidget.getSelected(targetItem);\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setSelection(targetList, targetItem);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            targetItem.blur();\r\n                            this.#removeFromSelection(targetList, targetItem);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(targetList, targetItem);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const activeItem = this.#getActiveItem(targetList);\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                targetItem\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetList, ...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                }\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(targetList, targetItem);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetList.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetList.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetList) {\r\n            if (this.#onSelection.get(targetList)) {\r\n                this.#hasSelectionChanged.set(targetList, true);\r\n            }\r\n            else {\r\n                targetList.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { listItemWidget } from \"./ListItemWidget\";\r\n\r\nexport { listItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"listitemgroup\": ListItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ListItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar listItemGroupWidget = new (\r\nWidget({\r\n    name: \"listitemgroup\"\r\n})(class ListItemGroupWidgetFactoryBase extends WidgetFactory implements ListItemGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"listitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n\r\n    slottedCallback(group: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"listitem\")) {\r\n                listItemWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { toolbarItemWidget };\r\n\r\ntype ToolBarItemType = \"button\" | \"checkbox\" | \"radio\" | \"menubutton\";\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbaritem\": ToolBarItemWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ToolBarItemWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        id?: string;\r\n        type: ToolBarItemType;\r\n        pressed?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    menu(item: HTMLElement): HTMLElement | null;\r\n    getName(item: HTMLElement): string;\r\n    setName(item: HTMLElement, value: string): void;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setPressed(item: HTMLElement, value: boolean): void;\r\n    getPressed(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    getValue(item: HTMLElement): string;\r\n    setValue(item: HTMLElement, value: string): void;\r\n    getType(item: HTMLElement): ToolBarItemType | null;\r\n    setType(item: HTMLElement, value: ToolBarItemType): void;\r\n}\r\n\r\nvar toolbarItemWidget = new(\r\nWidget({\r\n    name: \"toolbaritem\"\r\n})(\r\nclass ToolBarItemWidgetFactoryBase extends WidgetFactory implements ToolBarItemWidgetFactory {\r\n    #template: HTMLElement;\r\n    #types: ToolBarItemType[];\r\n\r\n    constructor() {\r\n        super();\r\n        this.#types = [\"button\", \"checkbox\", \"radio\", \"menubutton\"];\r\n        this.#template = element(\"button\", {\r\n            attributes: {\r\n                class: \"toolbaritem\",\r\n                role: \"button\",\r\n                type: \"button\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        type?: ToolBarItemType;\r\n        pressed?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }) {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (init !== void 0) {\r\n            const {id, keyshortcut, pressed, type, label, name, value, disabled} = init;\r\n            if (id !== undefined) {\r\n                item.id = id;\r\n            }\r\n            if (keyshortcut !== undefined) {\r\n                this.setKeyShortcut(item, keyshortcut);\r\n            }\r\n            if (pressed !== undefined) {\r\n                this.setPressed(item, pressed);\r\n            }\r\n            if (type !== undefined) {\r\n                this.setType(item, type);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(item, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(item, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(item: HTMLElement): HTMLElement | null {\r\n        return item;\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void {\r\n        const hasChildMenu = Array.from(slot.childNodes).some(\r\n            childNode_i => childNode_i instanceof HTMLElement && childNode_i.classList.contains(\"menu\")\r\n        );\r\n        item.setAttribute(\"aria-haspopup\", String(hasChildMenu));\r\n    }\r\n\r\n    menu(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .menu\");\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-expanded\", value);\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-expanded\");\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    getKeyShortcut(item: HTMLElement): string | null {\r\n        return item.getAttribute(\"aria-keyshortcuts\");\r\n    }\r\n\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void {\r\n        if (value !== null) {\r\n            item.setAttribute(\"aria-keyshortcuts\", value);\r\n        }\r\n        else {\r\n            item.removeAttribute(\"aria-keyshortcuts\");\r\n        }\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        const expand = force ?? !this.getExpanded(item);\r\n        this.setExpanded(item, expand);\r\n        if (expand) {\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    expand(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (!expanded) {\r\n            this.setExpanded(item, true);\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    collapse(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (expanded) {\r\n            this.setExpanded(item, false);\r\n        }\r\n    }\r\n\r\n    getType(item: HTMLElement): ToolBarItemType | null {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`toolbaritem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setType(item: HTMLElement, type: ToolBarItemType): void {\r\n        const oldType = this.getType(item);\r\n        if (type !== oldType) {\r\n            const {classList} = item;\r\n            if (oldType) {\r\n                classList.remove(`toolbaritem-${oldType}`);\r\n            }\r\n            classList.add(`toolbaritem-${type}`);\r\n        }\r\n    }\r\n\r\n    getValue(item: HTMLElement): string {\r\n        return item.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"value\", value);\r\n    }\r\n\r\n    getTitle(item: HTMLElement): string {\r\n        return item.getAttribute(\"title\") ?? \"\";\r\n    }\r\n\r\n    setTitle(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"title\", value);\r\n    }\r\n\r\n    getName(item: HTMLElement): string {\r\n        return item.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getPressed(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-pressed\") ?? String(false));\r\n    }\r\n\r\n    setPressed(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-pressed\", String(value));\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetItem = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetItem.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse(targetItem);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.setPressed(targetItem, !this.getPressed(targetItem));\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.setPressed(targetItem, true);\r\n                    break;\r\n                }\r\n                case \"menubutton\": {\r\n                    const menu = this.menu(targetItem);\r\n                    if (menu && !menu.contains(<Node>target)) {\r\n                        this.toggle(targetItem);\r\n                        const expanded = this.getExpanded(targetItem);\r\n                        if (expanded) {\r\n                            menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(item: HTMLElement): void {\r\n        const type = this.getType(item);\r\n        if (type == \"menubutton\") {\r\n            const menu = this.menu(item);\r\n            if (menu !== null) {\r\n                const {style: menuStyle} = menu;\r\n                const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = item.getBoundingClientRect();\r\n                const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n                const {scrollY, scrollX} = window;\r\n                const {clientWidth, clientHeight} = document.body;\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n        }\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n}));\r\n","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { toolbarItemWidget } from \"./ToolBarItemWidget\";\r\n\r\nexport { toolbarWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbar\": ToolBarWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ToolBarWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }): HTMLElement;\r\n    setOrientation(toolbar: HTMLElement, value: ToolBarOrientation): void;\r\n    getOrientation(toolbar: HTMLElement): ToolBarOrientation;\r\n}\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\nvar toolbarWidget = new (\r\nWidget({\r\n    name: \"toolbar\"\r\n})(class ToolBarWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"toolbar\",\r\n                role: \"toolbar\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        )\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }) {\r\n        const toolbar = <HTMLElement>this.#template.cloneNode(true);\r\n        toolbar.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        toolbar.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        toolbar.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        toolbar.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        toolbar.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex} = properties;\r\n            if (id !== undefined) {\r\n                toolbar.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                toolbar.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                toolbar.tabIndex = tabIndex;\r\n            }\r\n        }\r\n        return toolbar;\r\n    }\r\n\r\n    slot(toolbar: HTMLElement) {\r\n        return toolbar;\r\n    }\r\n\r\n    #getActiveItem(toolbar: HTMLElement): HTMLElement | null {\r\n        return toolbar.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .toolbaritemgroup) > .toolbaritem.active\"\r\n        );\r\n    }\r\n\r\n    items(toolbar: HTMLElement): HTMLElement[] {\r\n        return Array.from(toolbar.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .toolbaritemgroup) > .toolbaritem\"\r\n        ));\r\n    }\r\n\r\n    setOrientation(toolbar: HTMLElement, value: ToolBarOrientation): void {\r\n        toolbar.setAttribute(\"aria-orientation\", value);\r\n    }\r\n\r\n    getOrientation(toolbar: HTMLElement): ToolBarOrientation {\r\n        return <ToolBarOrientation>toolbar.getAttribute(\"aria-orientation\") ?? \"horizontal\";\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node) {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"toolbaritem\") && !toolbarItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"toolbaritemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(toolbar: Element): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = toolbar;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(toolbar: Element): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = toolbar;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLElement | null>walker.previousSibling();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = toolbarItemWidget.menu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #setActiveItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(tree);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            toolbarItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            toolbarItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: Event): void {\r\n        const {currentTarget, target} = event;\r\n        const toolbar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem) {\r\n            const type = toolbarItemWidget.getType(targetItem);\r\n            const name = toolbarItemWidget.getName(targetItem);\r\n            const value = toolbarItemWidget.getType(targetItem);\r\n            if (type == \"radio\") {\r\n                toolbar.querySelectorAll<HTMLElement>(\r\n                    `:is(:scope, :scope > .toolbaritemgroup) > .toolbaritem[type=radio][name=${name}]`\r\n                ).forEach((radio_i) => {\r\n                    toolbarItemWidget.setPressed(radio_i, toolbarItemWidget.getValue(radio_i) == value);\r\n                });\r\n            }\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const focusWithin = targetToolbar.contains(<Node>relatedTarget);\r\n        if (!focusWithin) {\r\n            const activeItem = this.#getActiveItem(targetToolbar);\r\n            if (activeItem) {\r\n                activeItem.focus();\r\n            }\r\n            else {\r\n                const firstItem = this.#firstItem(targetToolbar);\r\n                firstItem?.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetToolbar, targetItem);\r\n            targetToolbar.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetToolbar.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.#setActiveItem(targetToolbar, null);\r\n            targetToolbar.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetToolbar);\r\n        switch (key) {\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const type = toolbarItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"menubutton\": {\r\n                            toolbarItemWidget.expand(activeItem);\r\n                            const firstChildItem = this.#firstChildItem(activeItem);\r\n                            firstChildItem?.focus({preventScroll: true});\r\n                            event.preventDefault();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetToolbar);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetToolbar);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetToolbar);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetToolbar);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    activeItem.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    targetToolbar.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { toolbarItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbaritemgroup\": MenuItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar toolbarItemGroupWidget = new (\r\nWidget({\r\n    name: \"toolbaritemgroup\"\r\n})(class MenuItemGroupWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"toolbaritemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n}));","import { element } from \"../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"./Widget\";\r\n\r\nexport { widthSashWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"widthsash\": WidthSashWidgetFactory\r\n    }\r\n}\r\n\r\ninterface WidthSashWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"left\" | \"right\";\r\n    }): HTMLElement;\r\n}\r\n\r\nvar widthSashWidget = new (\r\nWidget({\r\n    name: \"widthsash\"\r\n})(class WidthSashWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    #targets: WeakMap<HTMLElement, HTMLElement | null>;\r\n    #onCaptureFlags: WeakMap<HTMLElement, boolean>;\r\n    #queuedPointerCallbacks: WeakMap<HTMLElement, FrameRequestCallback | null>;\r\n    #pointerMovements: WeakMap<HTMLElement, number>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"widthsash\"\r\n            }\r\n        });\r\n        this.#targets = new WeakMap();\r\n        this.#onCaptureFlags = new WeakMap();\r\n        this.#queuedPointerCallbacks = new WeakMap();\r\n        this.#pointerMovements = new WeakMap();\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"left\" | \"right\";\r\n    }) {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const sash = <HTMLElement>this.#template.cloneNode(true);\r\n        sash.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        sash.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        sash.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, controls, growDir} = properties;\r\n            if (id !== undefined) {\r\n                sash.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                sash.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                sash.tabIndex = tabIndex;\r\n            }\r\n            if (controls !== undefined) {\r\n                this.setControls(sash, controls);\r\n            }\r\n            if (growDir !== undefined) {\r\n                this.setGrowDir(sash, growDir);\r\n            }\r\n        }\r\n        targets.set(sash, null);\r\n        queuedPointerCallbacks.set(sash, null);\r\n        pointerMovements.set(sash, 0);\r\n        onCaptureFlags.set(sash, false);\r\n        return sash;\r\n    }\r\n\r\n    getGrowDir(sash: HTMLElement): \"right\" | \"left\" {\r\n        return <\"right\" | \"left\">sash.getAttribute(\"data-growdir\") ?? \"right\";\r\n    }\r\n\r\n    setGrowDir(sash: HTMLElement, value: \"right\" | \"left\"): void {\r\n        sash.setAttribute(\"data-growdir\", value);\r\n    }\r\n\r\n    getControls(sash: HTMLElement): string | null {\r\n        return sash.getAttribute(\"data-controls\");\r\n    }\r\n\r\n    setControls(sash: HTMLElement, value: string): void {\r\n        sash.setAttribute(\"data-controls\", value);\r\n    }\r\n\r\n    setWidth(sash: HTMLElement, width: number): void {\r\n        const targets = this.#targets;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            target.style.setProperty(\"width\", `${width}px`);\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        sashTarget.releasePointerCapture(pointerId);\r\n        onCaptureFlags.set(sashTarget, false);\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const controls = this.getControls(sashTarget);\r\n        if (controls) {\r\n            const targets = this.#targets;\r\n            const onCaptureFlags = this.#onCaptureFlags;\r\n            const rootNode = <ShadowRoot | Document>sashTarget.getRootNode();\r\n            targets.set(sashTarget, rootNode.getElementById(controls));\r\n            onCaptureFlags.set(sashTarget, true);\r\n            sashTarget.setPointerCapture(pointerId);\r\n        }\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        const {currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const pointerMoveCallback = this.#pointerMoveCallback;\r\n        const onCaptureFlag = onCaptureFlags.get(sashTarget);\r\n        if (onCaptureFlag) {\r\n            let callback = queuedPointerCallbacks.get(sashTarget);\r\n            if (callback == null) {\r\n                callback = pointerMoveCallback.bind(this, sashTarget);\r\n                queuedPointerCallbacks.set(sashTarget, callback);\r\n                requestAnimationFrame(callback);\r\n            }\r\n            const pointerMovement = pointerMovements.get(sashTarget)! + event.movementX;\r\n            pointerMovements.set(sashTarget, pointerMovement);\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(sash: HTMLElement): void {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const growdir = this.getGrowDir(sash);\r\n            const movementX = pointerMovements.get(sash)!;\r\n            const width = parseFloat(targetComputedStyle.getPropertyValue(\"width\"));\r\n            const newWidth = width + (growdir == \"right\" ? 1 : -1) * movementX;\r\n            this.setWidth(sash, newWidth);\r\n            sash.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        pointerMovements.set(sash, 0);\r\n        queuedPointerCallbacks.set(sash, null);\r\n    }\r\n}));","import { element } from \"../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"./Widget\";\r\n\r\nexport { heightSashWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"heightsash\": HeightSashWidgetFactory\r\n    }\r\n}\r\n\r\ninterface HeightSashWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"top\" | \"bottom\";\r\n    }): HTMLElement;\r\n}\r\n\r\nvar heightSashWidget = new (\r\nWidget({\r\n    name: \"heightsash\"\r\n})(class HeightSashWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    #targets: WeakMap<HTMLElement, HTMLElement | null>;\r\n    #onCaptureFlags: WeakMap<HTMLElement, boolean>;\r\n    #queuedPointerCallbacks: WeakMap<HTMLElement, FrameRequestCallback | null>;\r\n    #pointerMovements: WeakMap<HTMLElement, number>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"heightsash\"\r\n            }\r\n        });\r\n        this.#targets = new WeakMap();\r\n        this.#onCaptureFlags = new WeakMap();\r\n        this.#queuedPointerCallbacks = new WeakMap();\r\n        this.#pointerMovements = new WeakMap();\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"top\" | \"bottom\";\r\n    }) {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const sash = <HTMLElement>this.#template.cloneNode(true);\r\n        sash.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        sash.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        sash.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, controls, growDir} = properties;\r\n            if (id !== undefined) {\r\n                sash.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                sash.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                sash.tabIndex = tabIndex;\r\n            }\r\n            if (controls !== undefined) {\r\n                this.setControls(sash, controls);\r\n            }\r\n            if (growDir !== undefined) {\r\n                this.setGrowDir(sash, growDir);\r\n            }\r\n        }\r\n        targets.set(sash, null);\r\n        queuedPointerCallbacks.set(sash, null);\r\n        pointerMovements.set(sash, 0);\r\n        onCaptureFlags.set(sash, false);\r\n        return sash;\r\n    }\r\n\r\n    getGrowDir(sash: HTMLElement): \"top\" | \"bottom\" {\r\n        return <\"top\" | \"bottom\">sash.getAttribute(\"data-growdir\") ?? \"top\";\r\n    }\r\n\r\n    setGrowDir(sash: HTMLElement, value: \"top\" | \"bottom\"): void {\r\n        sash.setAttribute(\"data-growdir\", value);\r\n    }\r\n\r\n    getControls(sash: HTMLElement): string | null {\r\n        return sash.getAttribute(\"data-controls\");\r\n    }\r\n\r\n    setControls(sash: HTMLElement, value: string): void {\r\n        sash.setAttribute(\"data-controls\", value);\r\n    }\r\n\r\n    setHeight(sash: HTMLElement, height: number): void {\r\n        const targets = this.#targets;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            target.style.setProperty(\"height\", `${height}px`);\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        sashTarget.releasePointerCapture(pointerId);\r\n        onCaptureFlags.set(sashTarget, false);\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const controls = this.getControls(sashTarget);\r\n        if (controls) {\r\n            const targets = this.#targets;\r\n            const onCaptureFlags = this.#onCaptureFlags;\r\n            const rootNode = <ShadowRoot | Document>sashTarget.getRootNode();\r\n            targets.set(sashTarget, rootNode.getElementById(controls));\r\n            onCaptureFlags.set(sashTarget, true);\r\n            sashTarget.setPointerCapture(pointerId);\r\n        }\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        const {currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const onCaptureFlag = onCaptureFlags.get(sashTarget);\r\n        if (onCaptureFlag) {\r\n            let callback = queuedPointerCallbacks.get(sashTarget);\r\n            if (callback == null) {\r\n                callback = this.#pointerMoveCallback.bind(this, sashTarget);\r\n                queuedPointerCallbacks.set(sashTarget, callback);\r\n                requestAnimationFrame(callback);\r\n            }\r\n            const pointerMovement = pointerMovements.get(sashTarget)! + event.movementX;\r\n            pointerMovements.set(sashTarget, pointerMovement);\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(sash: HTMLElement): void {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const growdir = this.getGrowDir(sash);\r\n            const movementX = pointerMovements.get(sash)!;\r\n            const height = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            const newHeight = height + (growdir == \"top\" ? -1 : 1) * movementX;\r\n            this.setHeight(sash, newHeight);\r\n            sash.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        pointerMovements.set(sash, 0);\r\n        queuedPointerCallbacks.set(sash, null);\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridCellWidget };\r\n\r\ninterface GridCellWidgetFactory extends WidgetFactory {\r\n    create(init: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        disabled?: boolean;\r\n        headers?: string;\r\n    }): HTMLElement;\r\n    getHeaders(item: HTMLElement): string;\r\n    setHeaders(item: HTMLElement, value: string): void;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridcell\": GridCellWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridCellWidget = new (\r\nWidget({\r\n    name: \"gridcell\"\r\n})(class GridCellWidgetFactoryBase extends WidgetFactory implements GridCellWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"td\", {\r\n            attributes: {\r\n                class: \"gridcell\",\r\n                role: \"gridcell\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        disabled?: boolean;\r\n        headers?: string;\r\n    }): HTMLElement {\r\n        const cell = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {id, classList, tabIndex, disabled, headers} = init;\r\n            if (id !== undefined) {\r\n                cell.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                cell.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                cell.tabIndex = tabIndex;\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(cell, disabled);\r\n            }\r\n            if (headers !== undefined) {\r\n                this.setHeaders(cell, headers);\r\n            }\r\n            this.setSelected(cell, false);\r\n        }\r\n        return cell;\r\n    }\r\n\r\n    slot(cell: HTMLElement): HTMLElement | null {\r\n        return cell;\r\n    }\r\n\r\n    getHeaders(item: HTMLElement): string {\r\n        return item.getAttribute(\"headers\") ?? \"\";\r\n    }\r\n\r\n    setHeaders(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"headers\", value);\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-selected\", String(value));\r\n        item.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .content > .label\")!;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { gridCellWidget } from \"./GridCellWidget\";\r\n\r\nexport { gridRowWidget };\r\n\r\ninterface GridRowWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        disabled?: boolean\r\n    }): HTMLElement;\r\n    cells(row: HTMLElement): HTMLElement[];\r\n    setPosInSet(row: HTMLElement, value: number): void;\r\n    getPosInSet(row: HTMLElement): number;\r\n    setActive(row: HTMLElement, value: boolean): void;\r\n    getActive(row: HTMLElement): boolean;\r\n    setDropTarget(row: HTMLElement, value: boolean): void;\r\n    getDropTarget(row: HTMLElement): boolean;\r\n    setSelected(row: HTMLElement, value: boolean): void;\r\n    getSelected(row: HTMLElement): boolean;\r\n    setDisabled(row: HTMLElement, value: boolean): void;\r\n    getDisabled(row: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridrow\": GridRowWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridRowWidget = new (\r\nWidget({\r\n    name: \"gridrow\"\r\n})(class GridRowWidgetFactoryBase extends WidgetFactory implements GridRowWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"tr\", {\r\n            attributes: {\r\n                class: \"gridrow\",\r\n                role: \"row\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const row = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {disabled} = init;\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(row, disabled);\r\n            }\r\n            this.setSelected(row, false);\r\n        }\r\n        return row;\r\n    }\r\n\r\n    slot(row: HTMLElement): HTMLElement | null {\r\n        return row;\r\n    }\r\n\r\n    cells(row: HTMLElement): HTMLElement[] {\r\n        return Array.from(row.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridcell\"\r\n        ));\r\n    }\r\n    \r\n    setPosInSet(row: HTMLElement, value: number): void {\r\n        row.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(row: HTMLElement): number {\r\n        const posInSet = row.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(row: HTMLElement, value: boolean): void {\r\n        const {classList} = row;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(row: HTMLElement): boolean {\r\n        const {classList} = row;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(row: HTMLElement, value: boolean): void {\r\n        const {classList} = row;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(row: HTMLElement): boolean {\r\n        const {classList} = row;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(row: HTMLElement, value: boolean): void {\r\n        row.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(row: HTMLElement): boolean {\r\n        return row.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(row: HTMLElement, value: boolean): void {\r\n        row.setAttribute(\"aria-selected\", String(value));\r\n        row.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(row: HTMLElement): boolean {\r\n        return JSON.parse(row.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((item_i, i) => {\r\n            if (item_i instanceof HTMLElement) {\r\n                gridCellWidget.setPosInSet(item_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { gridCellWidget } from \"./GridCellWidget\";\r\nimport { gridRowWidget } from \"./GridRowWidget\";\r\n\r\nexport { gridWidget };\r\n\r\ntype GridSelectBy = \"cell\" | \"row\";\r\n\r\ninterface GridRowWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n        selectby?: GridSelectBy\r\n    }): HTMLElement;\r\n    setSelectBy(item: HTMLElement, value: GridSelectBy): void;\r\n    getSelectBy(item: HTMLElement): GridSelectBy;\r\n    headers(grid: HTMLElement): HTMLElement[];\r\n    cells(grid: HTMLElement): HTMLElement[];\r\n    rows(grid: HTMLElement): HTMLElement[];\r\n    beginSelection(grid: HTMLElement): void;\r\n    endSelection(grid: HTMLElement): void;\r\n    selectedCells(grid: HTMLElement): HTMLElement[];\r\n    selectedRows(grid: HTMLElement): HTMLElement[];\r\n    clearSelection(grid: HTMLElement): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"grid\": GridRowWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridWidget = new (\r\nWidget({\r\n    name: \"grid\"\r\n})(class GridWidgetFactoryBase extends WidgetFactory implements GridRowWidgetFactory {\r\n\r\n    #getActiveRow(grid: HTMLElement): HTMLElement | null {\r\n        return grid.querySelector<HTMLElement>(\".gridrow.active\");\r\n    }\r\n\r\n    #getActiveCell(grid: HTMLElement): HTMLElement | null {\r\n        return grid.querySelector<HTMLElement>(\".gridcell.active\");\r\n    }\r\n\r\n    headers(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridhead > .gridheader\"\r\n        ));\r\n    }\r\n\r\n    rows(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridbody > .gridrow\"\r\n        ));\r\n    }\r\n\r\n    cells(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridbody > .gridrow > .gridcell\"\r\n        ));\r\n    }\r\n\r\n    #template: HTMLElement;\r\n    #rowsWalker: TreeWalker;\r\n    #cellsWalker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"table\", {\r\n            attributes: {\r\n                class: \"grid\",\r\n                role: \"grid\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#cellsWalker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#cellsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#rowsWalker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#rowsWalkerNodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n        selectby?: GridSelectBy;\r\n    }) {\r\n        const grid = <HTMLElement>this.#template.cloneNode(true);\r\n        //grid.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        grid.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        grid.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        grid.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        grid.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        grid.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        grid.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, selectby, multisectable} = properties;\r\n            if (id !== undefined) {\r\n                grid.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                grid.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                grid.tabIndex = tabIndex;\r\n            }\r\n            if (selectby !== undefined) {\r\n                this.setSelectBy(grid, selectby);\r\n            }\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(grid, multisectable);\r\n            }\r\n        }\r\n        return grid;\r\n    }\r\n\r\n    slot(grid: HTMLElement): HTMLElement | null {\r\n        return grid;\r\n    }\r\n\r\n    setMultiSelectable(grid: HTMLElement, value: boolean): void {\r\n        grid.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(grid: HTMLElement): boolean {\r\n        return JSON.parse(grid.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    setSelectBy(grid: HTMLElement, value: GridSelectBy): void {\r\n        grid.setAttribute(\"data-selectby\", value);\r\n    }\r\n\r\n    getSelectBy(grid: HTMLElement): GridSelectBy {\r\n        return <GridSelectBy>grid.getAttribute(\"data-selectby\") ?? \"cell\";\r\n    }\r\n\r\n    beginSelection(grid: HTMLElement): void {\r\n        this.#onSelection.set(grid, true);\r\n    }\r\n\r\n    endSelection(grid: HTMLElement): void {\r\n        this.#onSelection.set(grid, false);\r\n        if (this.#hasSelectionChanged.get(grid)) {\r\n            grid.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(grid, false);\r\n        }\r\n    }\r\n\r\n    clearSelection(grid: HTMLElement): void {\r\n        this.#clearCellsSelection(grid);\r\n        this.#clearRowsSelection(grid);\r\n    }\r\n\r\n    selectedCells(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll(\":scope > .gridbody > .gridrow > .gridcell[aria-selected=true]\"));\r\n    }\r\n\r\n    selectedRows(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll(\":scope > .gridbody > .gridrow[aria-selected=true]\"));\r\n    }\r\n\r\n    #cellsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"gridcell\") && !gridCellWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"gridrow\") || classList.contains(\"gridbody\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #rowsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"gridrow\") && !gridRowWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"gridbody\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getCellsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextCell = this.#nextCell(from);\r\n            while (nextCell && nextCell !== to) {\r\n                range.push(nextCell);\r\n                nextCell = this.#nextCell(nextCell);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousCell = this.#previousCell(from);\r\n            while (previousCell && previousCell !== to) {\r\n                range.push(previousCell);\r\n                previousCell = this.#previousRow(previousCell);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #getRowsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextRow = this.#nextRow(from);\r\n            while (nextRow && nextRow !== to) {\r\n                range.push(nextRow);\r\n                nextRow = this.#nextRow(nextRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousRow = this.#previousRow(from);\r\n            while (previousRow && previousRow !== to) {\r\n                range.push(previousRow);\r\n                previousRow = this.#previousRow(previousRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setCellsSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        selectedCells.forEach((selectedCell_i) => {\r\n            if (!cells.includes(selectedCell_i)) {\r\n                gridCellWidget.setSelected(selectedCell_i, false);\r\n            }\r\n        });\r\n        cells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (!selected) {\r\n                gridCellWidget.setSelected(cell_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #setRowsSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        selectedRows.forEach((selectedRow_i) => {\r\n            if (!rows.includes(selectedRow_i)) {\r\n                gridRowWidget.setSelected(selectedRow_i, false);\r\n            }\r\n        });\r\n        rows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (!selected) {\r\n                gridRowWidget.setSelected(row_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #addCellsToSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        cells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (!selected) {\r\n                gridCellWidget.setSelected(cell_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #addRowsToSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        rows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (!selected) {\r\n                gridRowWidget.setSelected(row_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #removeCellsFromSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        cells.forEach((cell_i) => {\r\n            if (selectedCells.includes(cell_i)) {\r\n                gridCellWidget.setSelected(cell_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #removeRowsFromSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        rows.forEach((row_i) => {\r\n            if (selectedRows.includes(row_i)) {\r\n                gridRowWidget.setSelected(row_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #clearCellsSelection(grid: HTMLElement): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        selectedCells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (selected) {\r\n                gridCellWidget.setSelected(cell_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #clearRowsSelection(grid: HTMLElement): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        selectedRows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (selected) {\r\n                gridRowWidget.setSelected(row_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #setActiveCell(grid: HTMLElement, cell: HTMLElement | null): void {\r\n        const activeCell = this.#getActiveCell(grid);\r\n        if (activeCell !== null && activeCell !== cell) {\r\n            gridCellWidget.setActive(activeCell, false);\r\n            activeCell.tabIndex = -1;\r\n        }\r\n        if (cell !== null) {\r\n            gridCellWidget.setActive(cell, true);\r\n            cell.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #setActiveRow(grid: HTMLElement, row: HTMLElement | null): void {\r\n        const activeRow = this.#getActiveRow(grid);\r\n        if (activeRow !== null && activeRow !== row) {\r\n            gridRowWidget.setActive(activeRow, false);\r\n            activeRow.tabIndex = -1;\r\n        }\r\n        if (row !== null) {\r\n            gridCellWidget.setActive(row, true);\r\n            row.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #firstCell(row: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLElement | null>cellsWalker.firstChild();\r\n    }\r\n\r\n    #lastCell(row: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLElement | null>cellsWalker.lastChild();\r\n    }\r\n\r\n    #previousCell(cell: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLElement | null>cellsWalker.previousNode();\r\n    }\r\n\r\n    #nextCell(cell: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLElement | null>cellsWalker.nextNode();\r\n    }\r\n\r\n    #closestRow(cell: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = cell;\r\n        return <HTMLElement | null>rowsWalker.parentNode();\r\n    }\r\n\r\n    #firstRow(grid: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = grid;\r\n        return <HTMLElement | null>rowsWalker.firstChild();\r\n    }\r\n\r\n    #lastRow(grid: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = grid;\r\n        return <HTMLElement | null>rowsWalker.lastChild();\r\n    }\r\n\r\n    #previousRow(row: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLElement | null>rowsWalker.previousNode();\r\n    }\r\n\r\n    #nextRow(row: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLElement | null>rowsWalker.nextNode();\r\n    }\r\n\r\n    #topCell(cell: HTMLElement): HTMLElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const closestRowCells = gridRowWidget.cells(closestRow);\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const previousRow = this.#previousRow(closestRow);\r\n            if (previousRow) {\r\n                const previousRowCells = gridRowWidget.cells(previousRow);\r\n                return previousRowCells[Math.min(cellIndex, previousRowCells.length)];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #bottomCell(cell: HTMLElement): HTMLElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const closestRowCells = gridRowWidget.cells(closestRow);\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const nextRow = this.#nextRow(closestRow);\r\n            if (nextRow) {\r\n                const nextRowCells = gridRowWidget.cells(nextRow);\r\n                return nextRowCells[Math.min(cellIndex, nextRowCells.length)];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /*#handleContextMenuEvent(event: MouseEvent) {\r\n        const {currentTarget, target} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    const selectedCells = this.selectedCells(targetGrid);\r\n                    if (!selectedCells.includes(targetCell)) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    targetCell.focus({preventScroll: true});\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    const selectedRows = this.selectedRows(targetGrid);\r\n                    if (!selectedRows.includes(targetRow)) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    targetRow.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        event.preventDefault();\r\n    }*/\r\n\r\n    /*#handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            const type = treeitemWidget.getType(targetItem);\r\n            if (type == \"parent\") {\r\n                treeitemWidget.toggle(targetItem, true);\r\n            }\r\n            this.#setDropTargetItem(targetTree, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!targetTree.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(targetTree, null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }*/\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const activeCell = this.#getActiveCell(targetGrid);\r\n                if (activeCell && relatedTarget !== activeCell) {\r\n                    activeCell.focus();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const activeRow = this.#getActiveRow(targetGrid);\r\n                if (activeRow && relatedTarget !== activeRow) {\r\n                    activeRow.focus();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    this.#setActiveCell(targetGrid, targetCell);\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    this.#setActiveRow(targetGrid, targetRow);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetGrid.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetGrid.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const activeCell = this.#getActiveCell(targetGrid);\r\n        const activeRow = this.#getActiveRow(targetGrid);\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        const multiselectable = this.getMultiSelectable(targetGrid);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey && multiselectable) {\r\n                    switch (selectby) {\r\n                        case \"cell\": {\r\n                            const firstRow = this.#firstRow(targetGrid);\r\n                            const firstCell = firstRow ? this.#firstCell(firstRow) : null;\r\n                            const lastRow = this.#lastRow(targetGrid);\r\n                            const lastCell = lastRow ? this.#lastCell(lastRow) : null;\r\n                            if (firstCell && lastCell) {\r\n                                const range = this.#getCellsRange(firstCell, lastCell);\r\n                                if (range) {\r\n                                    this.#setCellsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"row\": {\r\n                            const firstRow = this.#firstRow(targetGrid);\r\n                            const lastRow = this.#lastRow(targetGrid);\r\n                            if (firstRow && lastRow) {\r\n                                const range = this.#getRowsRange(firstRow, lastRow);\r\n                                if (range) {\r\n                                    this.#setRowsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const previousCell = this.#previousCell(activeCell);\r\n                        if (previousCell) {\r\n                            previousCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(previousCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, previousCell) :\r\n                                    this.#addCellsToSelection(targetGrid, previousCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const nextCell = this.#nextCell(activeCell);\r\n                        if (nextCell) {\r\n                            nextCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(nextCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, nextCell) :\r\n                                    this.#addCellsToSelection(targetGrid, nextCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const firstRow = activeRow ?? this.#firstRow(targetGrid);\r\n                        const topCell = activeCell ?\r\n                            this.#topCell(activeCell) :\r\n                            firstRow ?\r\n                            this.#firstCell(firstRow) :\r\n                            null;\r\n                        if (topCell) {\r\n                            topCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(topCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, topCell) :\r\n                                    this.#addCellsToSelection(targetGrid, topCell);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const previousRow = activeRow ?\r\n                            this.#previousRow(activeRow) :\r\n                            this.#firstRow(targetGrid);\r\n                        if (previousRow) {\r\n                            previousRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridRowWidget.getSelected(previousRow);\r\n                                selected ?\r\n                                    this.#removeRowsFromSelection(targetGrid, previousRow) :\r\n                                    this.#addRowsToSelection(targetGrid, previousRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const lastRow = activeRow ?? this.#lastRow(targetGrid);\r\n                        const bottomCell = activeCell ?\r\n                            this.#bottomCell(activeCell) :\r\n                            lastRow ?\r\n                            this.#lastCell(lastRow) :\r\n                            null;\r\n                            if (bottomCell) {\r\n                                bottomCell.focus({preventScroll: true});\r\n                                const {shiftKey} = event;\r\n                                if (shiftKey && multiselectable) {\r\n                                    const selected = gridCellWidget.getSelected(bottomCell);\r\n                                    selected ?\r\n                                        this.#removeCellsFromSelection(targetGrid, bottomCell) :\r\n                                        this.#addCellsToSelection(targetGrid, bottomCell);\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"row\": {\r\n                        const nextRow = activeRow ?\r\n                            this.#nextRow(activeRow) :\r\n                            this.#lastRow(targetGrid);\r\n                        if (nextRow) {\r\n                            nextRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridRowWidget.getSelected(nextRow);\r\n                                selected ?\r\n                                    this.#removeRowsFromSelection(targetGrid, nextRow) :\r\n                                    this.#addRowsToSelection(targetGrid, nextRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const firstCell = this.#firstCell(activeRow);\r\n                            if (firstCell) {\r\n                                firstCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const firstRow = this.#firstRow(targetGrid);\r\n                        if (firstRow) {\r\n                            firstRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const lastCell = this.#lastCell(activeRow);\r\n                            if (lastCell) {\r\n                                lastCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const lastRow = this.#lastRow(targetGrid);\r\n                        if (lastRow) {\r\n                            lastRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeCell) {\r\n                            this.#setCellsSelection(targetGrid, activeCell);\r\n                            activeCell.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        if (activeRow) {\r\n                            this.#setRowsSelection(targetGrid, activeRow);\r\n                            activeRow.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        this.#clearCellsSelection(targetGrid);\r\n                        this.#setActiveCell(targetGrid, null);\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        this.#clearRowsSelection(targetGrid);\r\n                        this.#setActiveRow(targetGrid, null);\r\n                        break;\r\n                    }\r\n                }\r\n                targetGrid.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        const multiselectable = this.getMultiSelectable(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    if (multiselectable) {\r\n                        if (!shiftKey && !ctrlKey) {\r\n                            this.#setCellsSelection(targetGrid, targetCell);\r\n                        }\r\n                        else if (ctrlKey) {\r\n                            const selected = gridCellWidget.getSelected(targetCell);\r\n                            !selected ?\r\n                                this.#addCellsToSelection(targetGrid, targetCell) :\r\n                                this.#removeCellsFromSelection(targetGrid, targetCell);\r\n                            event.stopPropagation();\r\n                        }\r\n                        else if (shiftKey) {\r\n                            const activeCell = this.#getActiveCell(targetGrid);\r\n                            if (activeCell) {\r\n                                const range = this.#getCellsRange(\r\n                                    activeCell,\r\n                                    targetCell\r\n                                );\r\n                                if (range) {\r\n                                    this.#setCellsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.#setCellsSelection(targetGrid, targetCell);\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    if (multiselectable) {\r\n                        if (!shiftKey && !ctrlKey) {\r\n                            this.#setRowsSelection(targetGrid, targetRow);\r\n                        }\r\n                        else if (ctrlKey) {\r\n                            const selected = gridRowWidget.getSelected(targetRow);\r\n                            !selected ?\r\n                                this.#addRowsToSelection(targetGrid, targetRow) :\r\n                                this.#removeRowsFromSelection(targetGrid, targetRow);\r\n                            event.stopPropagation();\r\n                        }\r\n                        else if (shiftKey) {\r\n                            const activeRow = this.#getActiveRow(targetGrid);\r\n                            if (activeRow) {\r\n                                const range = this.#getRowsRange(\r\n                                    activeRow,\r\n                                    targetRow\r\n                                );\r\n                                if (range) {\r\n                                    this.#setRowsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.#setRowsSelection(targetGrid, targetRow);\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetList) {\r\n            if (this.#onSelection.get(targetList)) {\r\n                this.#hasSelectionChanged.set(targetList, true);\r\n            }\r\n            else {\r\n                targetList.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { gridRowWidget } from \"./GridRowWidget\";\r\n\r\nexport { gridBodyWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridbody\": GridBodyWidgetFactory\r\n    }\r\n}\r\n\r\ninterface GridBodyWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar gridBodyWidget = new (\r\nWidget({\r\n    name: \"gridbody\"\r\n})(class GridBodyWidgetFactoryBase extends WidgetFactory implements GridBodyWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"tbody\", {\r\n            attributes: {\r\n                class: \"gridbody\",\r\n                role: \"rowgroup\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(body: HTMLElement) {\r\n        return body;\r\n    }\r\n\r\n    slottedCallback(body: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"gridrow\")) {\r\n                gridRowWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridHeadWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridhead\": GridHeadWidgetFactory\r\n    }\r\n}\r\n\r\ninterface GridHeadWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar gridHeadWidget = new (\r\nWidget({\r\n    name: \"gridhead\"\r\n})(class GridHeadWidgetFactoryBase extends WidgetFactory implements GridHeadWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"thead\", {\r\n            attributes: {\r\n                class: \"gridhead\",\r\n                role: \"rowgroup\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(head: HTMLElement) {\r\n        return head;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridHeaderWidget };\r\n\r\ninterface GridHeaderWidgetFactory extends WidgetFactory {\r\n    create(init: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }): HTMLElement;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridheader\": GridHeaderWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridHeaderWidget = new (\r\nWidget({\r\n    name: \"gridheader\"\r\n})(class GridHeaderWidgetFactoryBase extends WidgetFactory implements GridHeaderWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"th\", {\r\n            attributes: {\r\n                class: \"gridheader\",\r\n                scope: \"column\",\r\n                role: \"columnheader\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }): HTMLElement {\r\n        const header = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {id, classList, tabIndex} = init;\r\n            if (id !== undefined) {\r\n                header.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                header.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                header.tabIndex = tabIndex;\r\n            }\r\n        }\r\n        return header;\r\n    }\r\n\r\n    slot(header: HTMLElement): HTMLElement | null {\r\n        return header;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { optionWidget };\r\n\r\ninterface OptionWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        label?: string;\r\n        name?: string;\r\n        value?: string;\r\n        selected?: boolean;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    getLabel(option: HTMLElement): string;\r\n    setLabel(option: HTMLElement, value: string): void;\r\n    getValue(option: HTMLElement): string;\r\n    setValue(option: HTMLElement, value: string): void;\r\n    getName(option: HTMLElement): string;\r\n    setName(option: HTMLElement, value: string): void;\r\n    getSelected(option: HTMLElement): boolean;\r\n    setSelected(option: HTMLElement, value: boolean): void;\r\n    setDisabled(option: HTMLElement, value: boolean): void;\r\n    getDisabled(option: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"option\": OptionWidgetFactory\r\n    }\r\n}\r\n\r\nvar optionWidget = new(\r\nWidget({\r\n    name: \"option\"\r\n})(\r\nclass OptionWidgetFactoryBase extends WidgetFactory implements OptionWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"span\", {\r\n            attributes: {\r\n                class: \"option\",\r\n                role: \"option\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(properties?: {\r\n        selected?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const option = <HTMLElement>this.#template.cloneNode(true);\r\n        if (properties !== undefined) {\r\n            const {label, name, value, disabled} = properties;\r\n            let {selected} = properties;\r\n            selected = selected ?? false;\r\n            if (selected !== undefined) {\r\n                this.setSelected(option, selected);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(option, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(option, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(option, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(option, disabled);\r\n            }\r\n        }\r\n        return option;\r\n    }\r\n\r\n    get observedAttributes() {\r\n        return [\"aria-selected\"];\r\n    }\r\n\r\n    attributeChangedCallback(option: HTMLElement, name: string, oldValue: string, newValue: string) {\r\n        switch (name) {\r\n            case \"aria-selected\": {\r\n                if (JSON.parse(newValue) === true) {\r\n                    option.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #label(option: HTMLElement): HTMLElement {\r\n        return option.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n\r\n    getLabel(option: HTMLElement): string {\r\n        return this.#label(option).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(option: HTMLElement, value: string): void {\r\n        this.#label(option).textContent = value;\r\n    }\r\n\r\n    getValue(option: HTMLElement): string {\r\n        return option.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(option: HTMLElement, value: string): void {\r\n        option.setAttribute(\"value\", value);\r\n    }\r\n    \r\n    getName(option: HTMLElement): string {\r\n        return option.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(option: HTMLElement, value: string): void {\r\n        option.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getSelected(option: HTMLElement): boolean {\r\n        return JSON.parse(option.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    setSelected(option: HTMLElement, value: boolean): void {\r\n        option.setAttribute(\"aria-selected\", String(value));\r\n    }\r\n\r\n    getDisabled(option: HTMLElement): boolean {\r\n        return option.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(option: HTMLElement, value: boolean): void {\r\n        option.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { optionWidget } from \"./OptionWidget\";\r\n\r\nexport { comboBoxWidget };\r\n\r\ninterface ComboBoxWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        name?: string;\r\n        disabled?: boolean;\r\n        multiselectable?: boolean;\r\n    }): HTMLElement;\r\n    options(combobox: HTMLElement): HTMLElement[];\r\n    getName(combobox: HTMLElement): string;\r\n    setName(combobox: HTMLElement, value: string): void;\r\n    getExpanded(combobox: HTMLElement): boolean;\r\n    setExpanded(combobox: HTMLElement, value: boolean): void;\r\n    setDisabled(combobox: HTMLElement, value: boolean): void;\r\n    getDisabled(combobox: HTMLElement): boolean;\r\n    expand(combobox: HTMLElement): void;\r\n    collapse(combobox: HTMLElement): void;\r\n    toggle(combobox: HTMLElement, force?: boolean): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"combobox\": ComboBoxWidgetFactory\r\n    }\r\n}\r\n\r\nvar comboBoxWidget = new(\r\nWidget({\r\n    name: \"combobox\"\r\n})(\r\nclass ComboBoxWidgetFactoryBase extends WidgetFactory implements ComboBoxWidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #optionsObserver: MutationObserver;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#optionsObserver = new MutationObserver(\r\n            this.#optionsMutationCallback.bind(this)\r\n        );\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"combobox\",\r\n                role: \"combobox\",\r\n                tabindex: 0,\r\n            },\r\n            children: [\r\n                element(\"div\", {\r\n                    attributes: {\r\n                        class: \"content\"\r\n                    },\r\n                    children: [\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"value\"\r\n                            }\r\n                        })\r\n                    ]\r\n                }),\r\n                element(\"div\", {\r\n                    attributes: {\r\n                        class: \"box\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        name?: string;\r\n        disabled?: boolean;\r\n        multiselectable?: boolean;\r\n    }): HTMLElement {\r\n        const combobox = <HTMLElement>this.#template.cloneNode(true);\r\n        this.#optionsObserver.observe(combobox, {\r\n            childList: true,\r\n            subtree: true\r\n        });\r\n        combobox.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        combobox.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        combobox.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        combobox.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.setExpanded(combobox, false);\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, name, disabled, multiselectable} = properties;\r\n            if (id !== undefined) {\r\n                combobox.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                combobox.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                combobox.tabIndex = tabIndex;\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(combobox, name);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(combobox, disabled);\r\n            }\r\n            if (multiselectable !== undefined) {\r\n                this.setMultiSelectable(combobox, multiselectable);\r\n            }\r\n        }\r\n        return combobox;\r\n    }\r\n\r\n    slot(combobox: HTMLElement) {\r\n        return this.#box(combobox);\r\n    }\r\n\r\n    slottedCallback(combobox: HTMLElement, slot: HTMLElement, name: string | null) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement) {\r\n                //gridRowWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n\r\n    #box(combobox: HTMLElement): HTMLElement {\r\n        return combobox.querySelector<HTMLElement>(\":scope > .box\")!;\r\n    }\r\n    \r\n    options(combobox: HTMLElement): HTMLElement[] {\r\n        return Array.from(combobox.querySelectorAll<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option\"\r\n        ));\r\n    }\r\n\r\n    selectedOption(combobox: HTMLElement): HTMLElement | null {\r\n        return combobox.querySelector<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option[aria-selected=true]\"\r\n        );\r\n    }\r\n\r\n    #getActiveOption(combobox: HTMLElement): HTMLElement | null {\r\n        return combobox.querySelector<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option:focus-within\"\r\n        );\r\n    }\r\n\r\n    #value(combobox: HTMLElement): HTMLElement {\r\n        return combobox.querySelector<HTMLElement>(\":scope > .content > .value\")!;\r\n    }\r\n    \r\n    getName(combobox: HTMLElement): string {\r\n        return combobox.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(combobox: HTMLElement, value: string): void {\r\n        combobox.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getDisabled(combobox: HTMLElement): boolean {\r\n        return combobox.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(combobox: HTMLElement, value: boolean): void {\r\n        combobox.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setExpanded(combobox: HTMLElement, value: boolean): void {\r\n        combobox.setAttribute(\"aria-expanded\", String(value));\r\n    }\r\n\r\n    getExpanded(combobox: HTMLElement): boolean {\r\n        return JSON.parse(combobox.getAttribute(\"aria-expanded\") ?? String(false));\r\n    }\r\n\r\n    setMultiSelectable(combobox: HTMLElement, value: boolean): void {\r\n        combobox.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(combobox: HTMLElement): boolean {\r\n        return JSON.parse(combobox.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    expand(combobox: HTMLElement): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        if (!expanded) {\r\n            this.setExpanded(combobox, true);\r\n            this.#positionBox(combobox);\r\n            const selectedOption = this.selectedOption(combobox);\r\n            if (selectedOption) {\r\n                selectedOption.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(combobox: HTMLElement): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        if (expanded) {\r\n            this.setExpanded(combobox, false);\r\n            combobox.focus();\r\n        }\r\n    }\r\n\r\n    toggle(combobox: HTMLElement, force?: boolean): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand(combobox) : this.collapse(combobox);\r\n    }\r\n\r\n    #optionsMutationCallback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            const targetCombobox = (<HTMLElement>target).closest<HTMLElement>(\".combobox\")!;\r\n            if (targetCombobox instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"childList\": {\r\n                        const {addedNodes} = mutation;\r\n                        const selector = \".option[aria-selected=true]\";\r\n                        for (let node of addedNodes) {\r\n                            if (node instanceof HTMLElement) {\r\n                                const selectedOption = node.matches(selector) ? node :\r\n                                    node.querySelector<HTMLElement>(selector);\r\n                                if (selectedOption) {\r\n                                    this.#setSelectedOption(targetCombobox, selectedOption);\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"option\") && !optionWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"optiongroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstOption(combobox: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = this.#box(combobox);\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastOption(combobox: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = this.#box(combobox);\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousOption(option: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextOption(option: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLElement | null>walker.nextNode();\r\n    }\r\n\r\n    #selectOption(combobox: HTMLElement, option: HTMLElement) {\r\n        const selectedOption = this.selectedOption(combobox);\r\n        if (selectedOption) {\r\n            optionWidget.setSelected(selectedOption, false);\r\n        }\r\n        if (option !== selectedOption) {\r\n            optionWidget.setSelected(option, true);\r\n            this.#setSelectedOption(combobox, option);\r\n            combobox.dispatchEvent(new Event(\"change\", {bubbles: true}));\r\n        }\r\n    }\r\n    \r\n    #setSelectedOption(combobox: HTMLElement, option: HTMLElement) {\r\n        this.#value(combobox).textContent = optionWidget.getLabel(option);\r\n    }\r\n\r\n    #positionBox(combobox: HTMLElement): void {\r\n        const box = combobox.querySelector<HTMLElement>(\":scope > .box\")!;\r\n        const {style: optionsStyle} = box;  \r\n        const {bottom, left} = combobox.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        optionsStyle.setProperty(\"top\", `${bottom + scrollY}px`);\r\n        optionsStyle.setProperty(\"left\", `${left + scrollX}px`);\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        this.toggle(targetCombobox);\r\n        const expanded = this.getExpanded(targetCombobox);\r\n        if (expanded) {\r\n            const selectedOption = this.selectedOption(targetCombobox);\r\n            (selectedOption ?? this.options(targetCombobox)[0])?.focus({preventScroll: true});\r\n        }\r\n        else {\r\n            const targetOption = (<HTMLElement>target).closest<HTMLElement>(\".option\");\r\n            if (targetOption) {\r\n                this.#selectOption(targetCombobox, targetOption);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetCombobox.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse(targetCombobox);\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        const expanded = this.getExpanded(targetCombobox);\r\n        const activeOption = this.#getActiveOption(targetCombobox);\r\n        const selectedOption = this.selectedOption(targetCombobox);\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                if (expanded) {\r\n                    const previousOption = activeOption ?\r\n                        this.#previousOption(activeOption) :\r\n                        this.#firstOption(targetCombobox);\r\n                    if (previousOption) {\r\n                        previousOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const previousOption = selectedOption ?\r\n                        this.#previousOption(selectedOption) :\r\n                        this.#firstOption(targetCombobox);\r\n                    if (previousOption) {\r\n                        this.#selectOption(targetCombobox, previousOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (expanded) {\r\n                    const nextOption = activeOption ?\r\n                        this.#nextOption(activeOption) :\r\n                        this.#lastOption(targetCombobox);\r\n                    if (nextOption) {\r\n                        nextOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const nextOption = selectedOption ?\r\n                        this.#nextOption(selectedOption) :\r\n                        this.#lastOption(targetCombobox);\r\n                    if (nextOption) {\r\n                        this.#selectOption(targetCombobox, nextOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstOption = this.#firstOption(targetCombobox);\r\n                if (firstOption) {\r\n                    if (expanded) {\r\n                        firstOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(targetCombobox, firstOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastOption = this.#lastOption(targetCombobox);\r\n                if (lastOption) {\r\n                    if (expanded) {\r\n                        lastOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(targetCombobox, lastOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (expanded) {\r\n                    this.collapse(targetCombobox);\r\n                    if (activeOption) {\r\n                        this.#selectOption(targetCombobox, activeOption);\r\n                    }\r\n                }\r\n                else {\r\n                    this.expand(targetCombobox);\r\n                    selectedOption?.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.collapse(targetCombobox);\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            default: {\r\n                const {length: keyLength} = key;\r\n                if (keyLength == 1) {\r\n                    const keyCode = key.charCodeAt(0);\r\n                    const options = this.options(targetCombobox);\r\n                    const activeIndex = activeOption ? options.indexOf(activeOption) : -1;\r\n                    const matchingOption = options.find(\r\n                        (option_i, i) => optionWidget.getLabel(option_i).toLowerCase().charCodeAt(0) == keyCode && i > activeIndex\r\n                    ) ?? options.find(\r\n                        (option_i) => optionWidget.getLabel(option_i).toLowerCase().charCodeAt(0) == keyCode\r\n                    );\r\n                    if (matchingOption) {\r\n                        matchingOption.focus({preventScroll: true});\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetItem = (<Element>target).closest<HTMLElement>(\".option\");\r\n        if (targetItem) {\r\n            targetItem.focus({preventScroll: true});\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { optionGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"optiongroup\": OptionGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface OptionGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar optionGroupWidget = new (\r\nWidget({\r\n    name: \"optiongroup\"\r\n})(class OptionGroupWidgetFactoryBase extends WidgetFactory implements OptionGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"optiongroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n}));"],"names":["Key","KeyModifier","MouseButton","ModelChangeRecordBase","constructor","init","this","target","changeType","propertyName","oldValue","undefined","newValue","removedIndex","removedItems","ModelNodesList","insertedIndex","insertedItems","sortedIndices","PROPERTY_CHANGE","LIST_REMOVE","LIST_INSERT","LIST_SORT","ModelChangeRecord","items","slice","length","item","index","values","ModelEventBase","type","currentTarget","ModelEventTargetAccessor","setCurrentTarget","event","setTarget","ModelEvent","ModelNodeBase","Map","receiveEvent","callbacks","get","forEach","callback_i","addEventListener","callback","push","set","removeEventListener","callbackIndex","findIndex","splice","delete","dispatchEvent","super","parentNode","setParent","isCyclicReference","ancestorNode","TypeError","beginChanges","endChanges","getRecords","property","records","record","ModelNodeRecordsAccessor","triggerChange","node","handleRecord","ModelNode","ModelObjectBase","ModelObjectPropertiesAccessor","setProperty","value","getProperty","ModelList","item_i","indexOf","sort","compareFunction","indexedItems","map","i","indexedItem_a","indexedItem_b","indexedItem_i","prepend","_items","append","insert","Math","abs","remove","clear","removedItem_i","reference","options","properties","propertiesFilter","childList","subtree","filter","record_i","includes","ModelChangeObserver","WeakMap","observe","references","listener","bind","unobserve","disconnect","str","replace","toLowerCase","AttributeProperty","prototype","String","defaultValue","observed","name","observedAttributes","Reflect","Array","isArray","Object","defineProperty","writable","Boolean","hasAttribute","setAttribute","removeAttribute","val","getAttribute","JSON","parse","stringify","Number","parseFloat","CustomElement","elementCtor","customElements","define","QueryProperty","propertyKey","selector","getter","withinShadowRoot","shadowRoot","querySelector","tagName","attributes","dataset","children","listeners","element","document","createElement","entries","attributeName","attributeValue","toggleAttribute","elementDataset","keys","datasetEntry_i","from","name_i","listener_i","reactiveElementsMap","FinalizationRegistry","heldValue","model","reactiveElement","reactiveElementsMapEntry","reactiveElementsArray","reactiveElement_i","elementRef","react","deref","reactiveChildElementsMap","areAttributesMatching","referenceAttributeType","referenceAttributeName","referenceAttributeValue","RegExp","test","list","reactiveChildElement","reactiveChildrenElementsMapEntry","reactiveChildElementsArray","range","listLength","reactiveChildElements_i","parentRef","mapping","placeholder","parent","firstChild","childrenCount","removeChild","insertedItemsArray","before","removedCount","createRange","removeEndIndex","setStartBefore","setEndAfter","deleteContents","childrenArray","index_i","shadowTemplate","HTMLEGridCellElementBase","HTMLElement","attachShadow","mode","content","cloneNode","connectedCallback","tabIndex","attributeChangedCallback","Event","bubbles","HTMLEGridCellElement","HTMLEGridRowGroupElementBase","assignedElements","element_i","posinset","HTMLEGridRowGroupElement","HTMLEMenuItemElementBase","internals","attachInternals","role","ariaChecked","ariaDisabled","ariaExpanded","ariaLabel","tabindex","parseInt","toggle","force","expanded","expand","collapse","menu","style","menuStyle","top","itemTop","bottom","itemBottom","left","itemLeft","right","itemRight","getBoundingClientRect","width","menuWidth","height","menuHeight","scrollY","scrollX","window","clientWidth","clientHeight","body","overflowX","overflowY","closestMenu","closest","closestMenuTop","closestMenuLeft","part","HTMLEMenuItemElement","EMenuItem","assign","label","trigger","slot","title","click","button","checkbox","radio","submenu","HTMLEMenuItemGroupElementBase","toggleAnimations","HTMLEMenuItemGroupElement","radios","HTMLEMenuElementBase","createTreeWalker","NodeFilter","SHOW_ELEMENT","querySelectorAll","activeIndex","activeItem","positionContextual","x","y","firstItem","walker","currentNode","root","find","contains","FILTER_ACCEPT","FILTER_SKIP","FILTER_REJECT","lastChild","previousNode","nextNode","targetItem","checked","radio_i","nearestItem","relatedTarget","contextual","error","key","focus","preventScroll","stopPropagation","composedPath","target_i","HTMLEMenuElement","blur","cancel","toggleAnimation","animate","duration","finished","then","catch","finally","clientX","clientY","intersectsWithMouse","containsRelatedTarget","HTMLEGridRowElementBase","cells","HTMLEGridCellCollection","slotName","cell_i","HTMLEGridRowElement","HTMLEGridBodyElement","namedItem","HTMLEGridRowCollection","HTMLEGridBodyElementBase","rows","HTMLEGridElementBase","activeCell","activeRow","head","beginSelection","endSelection","clearSelection","selectedCells","selectedRows","hidden","to","fromIndex","toIndex","min","max","position","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","nextVisibleRow","DOCUMENT_POSITION_PRECEDING","previousVisibleRow","selectedCell_i","selected","selectedRow_i","row_i","cell","active","row","cellsWalker","rowsWalker","closestRow","closestRowCells","cellIndex","previousRow","previousRowCells","nextRow","nextRowCells","ctrlKey","shiftKey","selectby","targetCell","lastSelectedCell","targetRow","lastSelectedRow","firstRow","firstCell","lastRow","lastCell","preventDefault","previousCell","nextCell","topCell","bottomCell","HTMLEGridHeadElementBase","HTMLEMenuBarElementBase","disabled","previousSibling","nextSibling","Element","isExpanded","HTMLEMenuButtonElementBase","iconPart","HTMLEMenuButtonElement","HTMLEToolBarItemElementBase","HTMLEToolBarItemElement","EToolBarItem","menubutton","select","HTMLEToolBarItemGroupElementBase","textContent","wasExpandedOnMouseDown","HTMLEToolBarItemGroupElement","HTMLEToolBarElementBase","pressed","previousItem","nextItem","lastItem","HTMLEToolBarElement","HTMLETabElementBase","panel","controls","getRootNode","HTMLETabElement","HTMLETabListElementBase","tabs","activeTab","selectedTab","upgrade","tabToSelect","tab","targetTab","tab_i","HTMLETabPanelElementBase","id","HTMLETreeItemElementBase","labelPart","level","HTMLETreeItemElement","HTMLETreeItemGroupElementBase","HTMLETreeItemGroupElement","HTMLETreeElementBase","getElementsByTagName","dropTargetItem","selectedItems","nextVisibleItem","previousVisibleItem","selectedItem_i","droptarget","relatedTargetRoot","relatedTargetHost","ShadowRoot","host","parentItem","HTMLEListItemElementBase","badge","toolbar","HTMLSpanElement","HTMLEListItemElement","HTMLEListItemGroupElementBase","HTMLEListItemGroupElement","HTMLEListElementBase","lastSelectedItem","HTMLEDraggableElementBase","referee","draggable","disconnectedCallback","thisRefIndex","getReference","HTMLEDraggableElement","HTMLEDragzoneElementBase","draggables","selectedDraggables","selectDraggable","unselectDraggable","elem","thisSelectedDraggable","dragged","dataTransfer","dropEffect","setData","thisDraggedDraggable","targetIndex","firstIndex","direction","sign","startRangeIndex","endRangeIndex","thisDraggable","HTMLEDragzoneElement","HTMLEDropzoneElementBase","droptest","appendAreaPart","removeDraggables","dragovered","dropIndex","dragzoneId","getData","dragzone","getElementById","selectedDraggable","HTMLEDropzoneElement","addDraggables","placeholderPart","dataTransferSuccess","newDraggables","insertionPosition","multiple","newDraggable","insertAdjacentElement","appendChild","replaceChild","CustomEvent","detail","action","once","predicate","toRemove","atPosition","HTMLEDialogElementBase","handleEvent","confirm","open","close","HTMLEOptionElementBase","ariaSelected","HTMLEOptionElement","HTMLEOptionGroupElementBase","mutationObserver","HTMLEOptionGroupElement","HTMLESelectElementBase","formAssociated","activeOption","selectedOption","optionToSelect","option_i","option","setFormValue","box","optionsStyle","targetOption","previousOption","nextOption","firstOption","lastOption","keyLength","keyCode","charCodeAt","matchingOption","MutationObserver","mutationsList","mutation","HTMLESeparatorElementBase","HTMLEToolTipElementBase","tooltip","htmlFor","show","visible","opacity","hide","oldTarget","targetTop","targetBottom","targetLeft","targetRight","tooltipWidth","tooltipHeight","tooltipHalfWidth","tooltipHalfHeight","targetCenter","targetMiddle","tooltipStyle","arrow","arrowStyle","arrowWidth","arrowHeight","arrowHalfWidth","arrowHalfHeight","HTMLEHandleElementBase","pointerId","releasePointerCapture","setPointerCapture","targetComputedStyle","getComputedStyle","movementX","movementY","rectWidth","rectHeight","outerElement","parentElement","outerRectLeft","outerRectRight","outerRectTop","outerRectBottom","getPropertyValue","newLeft","trunc","newTop","HTMLEHeightSashElementBase","growdir","newHeight","computedNewHeight","rootNode","requestAnimationFrame","HTMLEImportElementBase","src","async","outerHTML","fetch","response","ok","text","Error","statusText","barShadowTemplate","circleShadowTemplate","HTMLELoaderElementBase","promise","replaceChildren","commonStyle","barStyle","circleStyle","HTMLEWidthSashElementBase","setWidth","newWidth","slotsMap","slotsObserver","slotReferences","slotRef_i","widget","slottedCallback","widgetsMap","attributesObserver","WidgetFactory","create","Proxy","apply","thisArg","argumentsList","observedSlots","slotName_i","slotElement","slot_i","slotReference","WeakRef","attributeFilter","attributeOldValue","widgets","Widget","class","menuItemWidget","hasIcon","hasArrow","classList","keyshortcut","add","setKeyShortcut","setChecked","setExpanded","setType","setLabel","setName","setValue","setDisabled","hasChildMenu","childNodes","some","childNode_i","getMenu","getKeyShortcut","keyshortcutsPart","after","getLabel","getType","types","type_i","typesFeatures","iconPartTemplate","arrowPartTemplate","oldType","arrowPart","getValue","getName","getChecked","getDisabled","getExpanded","menuComputedStyle","paddingTop","paddingBottom","menuPaddingTop","menuPaddingBottom","menubar","setContextual","setPosition","getContextual","menuitem_i","delay","Promise","resolve","reject","timeout","setTimeout","clearTimeout","targetMenu","group","treeItemWidget","setTitle","setDraggable","setSelected","getTitle","setPosInSet","getPosInSet","posInSet","e","setActive","getActive","setDropTarget","getDropTarget","getDraggable","getSelected","setLevel","getLevel","tree","multisectable","setMultiSelectable","child_i","getMultiSelectable","targetTree","closestItem","matches","listItemWidget","targetList","toolbarItemWidget","setPressed","getPressed","setOrientation","getOrientation","targetToolbar","targets","pointerMovements","onCaptureFlags","queuedPointerCallbacks","sash","growDir","setControls","setGrowDir","getGrowDir","getControls","sashTarget","pointerMoveCallback","pointerMovement","setHeight","gridCellWidget","headers","setHeaders","getHeaders","gridRowWidget","grid","setSelectBy","getSelectBy","targetGrid","multiselectable","scope","header","optionWidget","combobox","targetCombobox","addedNodes"],"sourceRoot":""}