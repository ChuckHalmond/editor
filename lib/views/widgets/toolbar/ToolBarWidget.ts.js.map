{"version":3,"file":"views/widgets/toolbar/ToolBarWidget.ts.js","mappings":"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","sources":["webpack://editor/./src/elements/Element.ts","webpack://editor/./src/elements/Snippets.ts","webpack://editor/./src/models/Model.ts","webpack://editor/./src/views/widgets/Widget.ts","webpack://editor/./src/views/widgets/toolbar/ToolBarItemWidget.ts","webpack://editor/webpack/bootstrap","webpack://editor/webpack/runtime/define property getters","webpack://editor/webpack/runtime/hasOwnProperty shorthand","webpack://editor/./src/views/widgets/toolbar/ToolBarWidget.ts"],"sourcesContent":["import { ModelList, ModelNode, ModelChangeRecord, ModelChangeObserver, ModelChangeObserverOptions } from \"../models/Model\";\r\nimport { camelToTrain } from \"./Snippets\";\r\n\r\nexport { CustomElement };\r\nexport { ReactiveChildElements };\r\nexport { QueryProperty };\r\nexport { QueryAllProperty };\r\nexport { AttributeProperty };\r\nexport { reactiveElement };\r\nexport { revokeReactiveElement };\r\nexport { reactiveChildElements };\r\nexport { revokeReactiveChildElements };\r\nexport { element };\r\nexport { fragment };\r\nexport { textNode };\r\nexport { AttributeMutationMixin };\r\nexport { AttributeType };\r\nexport { areAttributesMatching };\r\nexport { AttributeMutationMixinBase };\r\nexport { trimMultilineIndent };\r\nexport { Stylesheet };\r\n\r\nexport { reactiveElementsMap };\r\n\r\ninterface AttributePropertyDecorator {\r\n    (\r\n        init: {\r\n            type: typeof String;\r\n            observed?: boolean;\r\n            defaultValue?: string | null;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Number;\r\n            observed?: boolean;\r\n            defaultValue?: number | null;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Boolean;\r\n            observed?: boolean;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Object;\r\n            observed?: boolean;\r\n            defaultValue?: any | null;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n}\r\n\r\nconst AttributeProperty: AttributePropertyDecorator = function(\r\n    init: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Object;\r\n        observed?: boolean;\r\n        defaultValue?: string | number | any | null;\r\n        name?: string;\r\n    }\r\n) {\r\n    return <E extends HTMLElement>(\r\n        target: E, property: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(property);\r\n        const {defaultValue = null, observed = false, name = camelToTrain(propertyName)} = init;\r\n        if (observed) {\r\n            const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n            if (Array.isArray(observedAttributes)) {\r\n                observedAttributes.push(name);\r\n            }\r\n            else {\r\n                Object.defineProperty(\r\n                    constructor, \"observedAttributes\", {\r\n                        value: [name],\r\n                        writable: false\r\n                    }\r\n                );\r\n            }\r\n        }\r\n        const {type} = init;\r\n        switch (type) {\r\n            case Boolean: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        return this.hasAttribute(name);\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value) {\r\n                            this.setAttribute(name, \"\");\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Object: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(name);\r\n                        return (val !== null) ? JSON.parse(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(name, JSON.stringify(value));\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Number: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(name);\r\n                        return (val !== null) ? parseFloat(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(name, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case String:\r\n            default: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(name);\r\n                        return (val !== null) ? val : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(name, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n    \r\nfunction Stylesheet(text: string): CSSStyleSheet {\r\n    const stylesheet = new CSSStyleSheet();\r\n    (stylesheet as any).replaceSync(text);\r\n    return stylesheet;\r\n}\r\n\r\nfunction trimMultilineIndent(text: string): string {\r\n    const newlineIndex = text.indexOf(\"\\n\");\r\n    text = text.substring(newlineIndex + 1);\r\n    const indentMatch = text.match(/^[\\s]*/);\r\n    if (indentMatch) {\r\n        const indent = text.substring(0, indentMatch[0].length);\r\n        text = text.replaceAll(indent, \"\").trimEnd();\r\n    }\r\n    return text;\r\n}\r\n\r\ninterface CustomElementDecorator {\r\n    (init: {\r\n        name: string;\r\n        options?: ElementDefinitionOptions\r\n    }): <C extends CustomElementConstructor>(elementCtor: C) => C;\r\n}\r\n\r\nconst CustomElement: CustomElementDecorator = function(init: {\r\n    name: string;\r\n    options?: ElementDefinitionOptions\r\n}) {\r\n    return <C extends CustomElementConstructor>(\r\n        elementCtor: C\r\n    ) => {\r\n        const {name, options} = init;\r\n        if (!customElements.get(name)) {\r\n            customElements.define(\r\n                name,\r\n                elementCtor,\r\n                options\r\n            );\r\n        }\r\n        return elementCtor;\r\n    }\r\n}\r\n\r\ninterface QueryPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryProperty: QueryPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(propertyKey);\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return this.shadowRoot!.querySelector(selector);\r\n        } : function(this: HTMLElement) {\r\n            return this.querySelector(selector);\r\n        }\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\ninterface QueryAllPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryAllProperty: QueryAllPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(propertyKey);\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return Array.from(this.shadowRoot!.querySelectorAll(selector));\r\n        } : function(this: HTMLElement) {\r\n            return Array.from(this.querySelectorAll(selector));\r\n        };\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\nfunction fragment(...nodes: (Node | string)[]): DocumentFragment {\r\n    const fragment = document.createDocumentFragment();\r\n    fragment.append(...nodes);\r\n    return fragment;\r\n}\r\n\r\nfunction textNode(text: string): Node {\r\n    return document.createTextNode(text);\r\n}\r\n\r\ninterface HTMLElementInit {\r\n    options?: ElementCreationOptions,\r\n    attributes?: {\r\n        [name: string]: number | string | boolean | undefined\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    children?: Node | string | (Node | string)[] | NodeList | ReactiveChildElements,\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction element<E extends HTMLElementTagNameMap[K], K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): E;\r\nfunction element(\r\n    tagName: string, init?: HTMLElementInit): HTMLElement;\r\nfunction element<K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): HTMLElementTagNameMap[K] {\r\n    if (init) {\r\n        const {options, attributes, dataset, children, listeners} = init;\r\n        const element = document.createElement(tagName, options);\r\n        if (attributes) {\r\n            Object.entries(attributes).forEach(([attributeName, attributeValue]) => {\r\n                if (attributeValue !== undefined) {\r\n                    if (typeof attributeValue === \"boolean\") {\r\n                        element.toggleAttribute(camelToTrain(attributeName), attributeValue);\r\n                    }\r\n                    else {\r\n                        element.setAttribute(camelToTrain(attributeName), String(attributeValue));\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        if (dataset) {\r\n            const {dataset: elementDataset} = element;\r\n            Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                elementDataset[datasetEntry_i] = String(dataset[datasetEntry_i]);\r\n            });\r\n        }\r\n        if (children) {\r\n            if (typeof children === \"function\") {\r\n                children(element);\r\n            }\r\n            else if (typeof children === \"object\" && \"length\" in children) {\r\n                element.append(...Array.from(children));\r\n            }\r\n            else {\r\n                element.append(children);\r\n            }\r\n        }\r\n        if (listeners) {\r\n            Object.entries(listeners).forEach(([name_i, listener_i]) => {\r\n                if (Array.isArray(listener_i)) {\r\n                    element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                }\r\n                else {\r\n                    element.addEventListener(name_i, listener_i);\r\n                }\r\n            });\r\n        }\r\n        return element;\r\n    }\r\n    return document.createElement(tagName);\r\n}\r\n\r\nconst reactiveElementsMap = new WeakMap<ModelNode, {\r\n    observerOptions: ModelChangeObserverOptions,\r\n    reactiveElementsArray: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }[]\r\n}>();\r\n\r\nconst reactiveElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    model: ModelNode,\r\n    reactiveElement: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }\r\n}) => {\r\n    const {model, reactiveElement} = heldValue;\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    if (reactiveElementsMapEntry !== undefined) {\r\n        const {reactiveElementsArray} = reactiveElementsMapEntry;\r\n        reactiveElementsArray.splice(reactiveElementsArray.indexOf(reactiveElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveElementsPropertyObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    records.forEach((record_i) => {\r\n        const {target, propertyName, oldValue, newValue} = record_i;\r\n        const {reactiveElementsArray} = reactiveElementsMap.get(target)!;\r\n        reactiveElementsArray.forEach(reactiveElement_i => {\r\n            const {elementRef, react, properties} = reactiveElement_i;\r\n            const element = elementRef.deref();\r\n            if (element) {\r\n                if (properties.includes(propertyName!)) {\r\n                    react(element, propertyName!, oldValue, newValue);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveElement<M extends ModelNode, E extends Element, K extends string>(\r\n    model: M,\r\n    element: E,\r\n    properties: K[],\r\n    react: (object: E, property: K, oldValue: any, newValue: any) => void\r\n): E;\r\nfunction reactiveElement<M extends ModelNode, E extends Element>(\r\n    model: M,\r\n    element: E,\r\n    properties: string[],\r\n    react: (element: E, property: string, oldValue: any, newValue: any) => void\r\n): E {\r\n    const elementRef = new WeakRef(element);\r\n    const reactiveElement = {elementRef, react, properties};\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    reactiveElementsFinalizationRegistry.register(element, {model, reactiveElement});\r\n    if (!reactiveElementsMapEntry) {\r\n        const observerOptions = {\r\n            properties: true,\r\n            propertiesFilter: properties\r\n        };\r\n        const reactiveElementsArray = [reactiveElement];\r\n        reactiveElementsMap.set(model, {observerOptions, reactiveElementsArray});\r\n        reactiveElementsPropertyObserver.observe(model, observerOptions);\r\n    }\r\n    else {\r\n        const {reactiveElementsArray, observerOptions} = reactiveElementsMapEntry;\r\n        const {propertiesFilter} = observerOptions;\r\n        reactiveElementsArray.push(reactiveElement);\r\n        observerOptions.propertiesFilter = propertiesFilter ?\r\n            propertiesFilter.concat(properties.filter(\r\n                property_i => !propertiesFilter.includes(property_i)\r\n            )) : properties.filter(\r\n                (property_i, i, properties) => properties.indexOf(property_i) === i\r\n            )\r\n    }\r\n    properties.forEach((property_i) => {\r\n        if (property_i in model) {\r\n            const value = Reflect.get(model, property_i, model);\r\n            react(element, <any>property_i, <any>undefined, value);\r\n        }\r\n    });\r\n    return element;\r\n}\r\n\r\nfunction revokeReactiveElement<M extends ModelNode, E extends Element>(\r\n    model: M,\r\n    element: E\r\n): void {\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    if (reactiveElementsMapEntry) {\r\n        const {reactiveElementsArray} = reactiveElementsMapEntry;\r\n        const reactiveElementIndex = reactiveElementsArray.findIndex(\r\n            reactiveElement => reactiveElement.elementRef.deref() === element\r\n        );\r\n        if (reactiveElementIndex > -1) {\r\n            reactiveElementsArray.splice(reactiveElementIndex, 1);\r\n        }\r\n        if (reactiveElementsArray.length === 0) {\r\n            reactiveElementsMap.delete(model);\r\n        }\r\n    }\r\n}\r\n\r\ninterface ReactiveChildElements {\r\n    (parent: ParentNode): void;\r\n}\r\n\r\nconst reactiveChildElementsMap = new WeakMap<ModelList, {\r\n    reactiveChildElementsArray: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }[]\r\n}>();\r\n\r\nconst reactiveChildElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    list: ModelList,\r\n    reactiveChildElement: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }\r\n}) => {\r\n    const {list, reactiveChildElement} = heldValue;\r\n    const reactiveChildrenElementsMapEntry = reactiveChildElementsMap.get(list);\r\n    if (reactiveChildrenElementsMapEntry) {\r\n        const {reactiveChildElementsArray} = reactiveChildrenElementsMapEntry;\r\n        reactiveChildElementsArray.splice(reactiveChildElementsArray.indexOf(reactiveChildElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveChildElementsObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    let range: null | Range = null;\r\n    Array.from(records.values()).forEach((record_i) => {\r\n        const {target} = record_i;\r\n        const list = <ModelList>target;\r\n        const {length: listLength} = list;\r\n        const {reactiveChildElementsArray} = reactiveChildElementsMap.get(list)!;\r\n        reactiveChildElementsArray.forEach((reactiveChildElements_i) => {\r\n            const {parentRef, mapping, placeholder} = reactiveChildElements_i;\r\n            const parent = parentRef.deref();\r\n            if (parent) {\r\n                const {firstChild, children} = parent;\r\n                const {length: childrenCount} = children;\r\n                if (placeholder && listLength > 0 && firstChild == placeholder) {\r\n                    parent.removeChild(placeholder);\r\n                }\r\n                const {changeType, LIST_INSERT, LIST_REMOVE, LIST_SORT} = record_i;\r\n                switch (changeType) {\r\n                    case LIST_INSERT: {\r\n                        const {insertedIndex, insertedItems} = record_i;\r\n                        const insertedItemsArray = Array.from(insertedItems.values()).map(mapping);\r\n                        const {length: childrenCount} = children;\r\n                        if (insertedIndex < childrenCount) {\r\n                            children[insertedIndex].before(...insertedItemsArray);\r\n                        }\r\n                        else {\r\n                            parent.append(...insertedItemsArray);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_REMOVE: {\r\n                        const {removedIndex, removedItems} = record_i;\r\n                        const {length: removedCount} = removedItems;\r\n                        range = range ?? document.createRange();\r\n                        const removeEndIndex = removedIndex + (removedCount - 1);\r\n                        if (removeEndIndex < childrenCount) {\r\n                            range.setStartBefore(children[removedIndex]);\r\n                            range.setEndAfter(children[removeEndIndex]);\r\n                            range.deleteContents();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_SORT: {\r\n                        const {sortedIndices} = record_i;\r\n                        const childrenArray = Array.from(children);\r\n                        parent.append(\r\n                            ...sortedIndices.filter(\r\n                                index_i => index_i < childrenCount\r\n                            ).map(\r\n                                index_i => childrenArray[index_i]\r\n                            )\r\n                        );\r\n                        break;\r\n                    }\r\n                }\r\n                if (listLength == 0 && placeholder) {\r\n                    parent.append(placeholder);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveChildElements<Model extends ModelNode>(\r\n    list: ModelList<Model>,\r\n    mapping: (item: Model) => Element,\r\n    placeholder?: Element\r\n): ReactiveChildElements {\r\n    return (parent: ParentNode) => {\r\n        const parentRef = new WeakRef(parent);\r\n        const reactiveChildElementsMapEntry = reactiveChildElementsMap.get(list);\r\n        const reactiveChildElement = {parentRef, mapping, placeholder};\r\n        reactiveChildElementsFinalizationRegistry.register(parent, {list, reactiveChildElement});\r\n        if (!reactiveChildElementsMapEntry) {\r\n            const reactiveChildElementsArray = [reactiveChildElement];\r\n            reactiveChildElementsMap.set(list, {reactiveChildElementsArray});\r\n            reactiveChildElementsObserver.observe(list, {\r\n                childList: true\r\n            });\r\n        }\r\n        else {\r\n            const {reactiveChildElementsArray} = reactiveChildElementsMapEntry;\r\n            reactiveChildElementsArray.push(reactiveChildElement);\r\n        }\r\n        const children = list.length == 0 && placeholder ?\r\n            [placeholder] : Array.from(list.values()).map(mapping);\r\n        parent.replaceChildren(...children);\r\n    }\r\n}\r\n\r\nfunction revokeReactiveChildElements<Model extends ModelNode>(\r\n    list: ModelList<Model>,\r\n    parent: ParentNode,\r\n): void {\r\n    const reactiveChildElementsMapEntry = reactiveChildElementsMap.get(list);\r\n    if (reactiveChildElementsMapEntry) {\r\n        const {reactiveChildElementsArray} = reactiveChildElementsMapEntry;\r\n        const reactiveChildElementsIndex = reactiveChildElementsArray.findIndex(\r\n            reactiveChildElement => reactiveChildElement.parentRef.deref() === parent\r\n        );\r\n        if (reactiveChildElementsIndex > -1) {\r\n            reactiveChildElementsArray.splice(reactiveChildElementsIndex, 1);\r\n        }\r\n        if (reactiveChildElementsArray.length === 0) {\r\n            reactiveChildElementsMap.delete(list);\r\n        }\r\n    }\r\n}\r\n\r\ninterface AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n    attach(element: Element): void;\r\n    detach(element: Element): void;\r\n}\r\n\r\ntype AttributeType = \"string\" | \"boolean\" | \"list\";\r\n\r\nfunction areAttributesMatching(\r\n    referenceAttributeType: AttributeType,\r\n    referenceAttributeName: string, referenceAttributeValue: string,\r\n    attributeName: string, attributeValue: string | null): boolean {\r\n    if (referenceAttributeName == attributeName) {\r\n        switch (referenceAttributeType) {\r\n            case \"boolean\":\r\n                return referenceAttributeValue == \"\" && attributeValue == \"\";\r\n            case \"string\":\r\n                return referenceAttributeValue !== \"\" && (referenceAttributeValue == attributeValue);\r\n            case \"list\":\r\n                return (referenceAttributeValue !== \"\" && attributeValue !== null) && new RegExp(`${referenceAttributeValue}\\s*?`, \"g\").test(attributeValue );\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nclass AttributeMutationMixinBase implements AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n\r\n    constructor(attributeName: string, attributeType: AttributeType = \"boolean\", attributeValue: string = \"\") {\r\n        this.attributeName = attributeName;\r\n        this.attributeType = attributeType;\r\n        this.attributeValue = attributeValue;\r\n    }\r\n\r\n    attach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n\r\n    detach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n}","\r\nexport { snakeToCamel };\r\nexport { camelToSnake };\r\nexport { trainToCamel };\r\nexport { camelToTrain };\r\n\r\nfunction snakeToCamel(str: string) {\r\n  return str.split('_').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToSnake(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '_').toLowerCase();\r\n}\r\n\r\nfunction trainToCamel(str: string) {\r\n  return str.split('-').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToTrain(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '-').toLowerCase();\r\n}","export { ModelChangeRecord };\r\nexport { ModelEvent };\r\nexport { ModelNode };\r\nexport { ModelObject };\r\nexport { ModelProperty };\r\nexport { ModelList };\r\nexport { ModelChangeObserverOptions };\r\nexport { ModelChangeObserver };\r\n\r\ninterface ModelChangeRecordConstructor {\r\n    prototype: ModelChangeRecord;\r\n    new(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ): ModelChangeRecord;\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\ninterface ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly changeType: number;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\nclass ModelChangeRecordBase implements ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList;\r\n    readonly changeType: number;\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n\r\n    constructor(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ) {\r\n        this.target = init.target;\r\n        this.changeType = init.changeType;\r\n        this.propertyName = init.propertyName ?? null;\r\n        this.oldValue = init.oldValue ?? undefined;\r\n        this.newValue = init.newValue ?? undefined;\r\n        this.removedIndex = init.removedIndex ?? 0;\r\n        this.removedItems = new ModelNodesList(init.removedItems ?? []);\r\n        this.insertedIndex = init.insertedIndex ?? 0;\r\n        this.insertedItems = new ModelNodesList(init.insertedItems ?? []);\r\n        this.sortedIndices = init.sortedIndices ?? [];\r\n    }\r\n\r\n    static get PROPERTY_CHANGE(): number {\r\n        return 1;\r\n    }\r\n\r\n    static get LIST_REMOVE(): number {\r\n        return 2;\r\n    }\r\n\r\n    static get LIST_INSERT(): number {\r\n        return 3;\r\n    }\r\n\r\n    static get LIST_SORT(): number {\r\n        return 4;\r\n    }\r\n\r\n    get PROPERTY_CHANGE(): number {\r\n        return ModelChangeRecordBase.PROPERTY_CHANGE;\r\n    }\r\n\r\n    get LIST_REMOVE(): number {\r\n        return ModelChangeRecordBase.LIST_REMOVE;\r\n    }\r\n\r\n    get LIST_INSERT(): number {\r\n        return ModelChangeRecordBase.LIST_INSERT;\r\n    }\r\n\r\n    get LIST_SORT(): number {\r\n        return ModelChangeRecordBase.LIST_SORT;\r\n    }\r\n}\r\n\r\nvar ModelChangeRecord: ModelChangeRecordConstructor = ModelChangeRecordBase;\r\n\r\ninterface ModelNodesListConstructor {\r\n    prototype: ModelNodesList;\r\n    new(items: any[]): ModelNodesList;\r\n}\r\n\r\ninterface ModelNodesList {\r\n    get length(): number;\r\n    item(index: number): ModelNode | null;\r\n    values(): IterableIterator<ModelNode>;\r\n}\r\n\r\nclass ModelNodesListBase implements ModelNodesList {\r\n    #items: ModelNode[];\r\n\r\n    constructor(items: ModelNode[]) {\r\n        this.#items = items.slice();\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    item(index: number): ModelNode | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    values(): IterableIterator<ModelNode> {\r\n        return this.#items.values();\r\n    }\r\n}\r\n\r\nvar ModelNodesList: ModelNodesListConstructor = ModelNodesListBase;\r\n\r\ninterface ModelEventConstructor {\r\n    prototype: ModelEvent;\r\n    new(type: string): ModelEvent;\r\n}\r\n\r\ninterface ModelEvent {\r\n    readonly type: string;\r\n    readonly currentTarget: ModelEventTarget | null;\r\n    readonly target: ModelEventTarget | null;\r\n}\r\n\r\nclass ModelEventBase implements ModelEvent {\r\n    readonly type: string;\r\n\r\n    #currentTarget: ModelEventTarget | null;\r\n    #target: ModelEventTarget | null;\r\n\r\n    constructor(type: string) {\r\n        this.type = type;\r\n        this.#currentTarget = null;\r\n        this.#target = null;\r\n    }\r\n\r\n    get currentTarget(): ModelEventTarget | null {\r\n        return this.#currentTarget;\r\n    }\r\n\r\n    get target(): ModelEventTarget | null {\r\n        return this.#target;\r\n    }\r\n\r\n    static ModelEventTargetAccessor? = new class ModelEventTargetAccessor {\r\n        setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#currentTarget = currentTarget;\r\n            }\r\n        }\r\n\r\n        setTarget(event: ModelEvent, target: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#target = target;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface ModelEventTargetAccessor {\r\n    setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void;\r\n    setTarget(event: ModelEvent, target: ModelEventTarget): void;\r\n}\r\n\r\nvar ModelEventTargetAccessor: ModelEventTargetAccessor = ModelEventBase.ModelEventTargetAccessor!;\r\ndelete ModelEventBase.ModelEventTargetAccessor;\r\n\r\nvar ModelEvent: ModelEventConstructor = ModelEventBase;\r\n\r\ninterface ModelEventTargetConstructor {\r\n    prototype: ModelEventTarget;\r\n    new(): ModelEventTarget;\r\n}\r\n\r\ninterface ModelEventTarget {\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    dispatchEvent(event: ModelEvent): void;\r\n    receiveEvent(event: ModelEvent): void;\r\n}\r\n\r\nclass ModelEventTargetBase implements ModelEventTarget {\r\n    #callbacks: Map<string, ((event: ModelEvent) => void)[]>;\r\n\r\n    constructor() {\r\n        this.#callbacks = new Map();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        const {type} = event;\r\n        const callbacks = this.#callbacks.get(type);\r\n        ModelEventTargetAccessor.setCurrentTarget(event, this);\r\n        if (callbacks) {\r\n            callbacks.forEach((callback_i) => {\r\n                callback_i(event);\r\n            });\r\n        }\r\n    }\r\n\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            callbacks.push(callback);\r\n        }\r\n        else {\r\n            this.#callbacks.set(type, [callback]);\r\n        }\r\n    }\r\n\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            const callbackIndex = callbacks.findIndex(\r\n                callback_i => callback_i == callback\r\n            );\r\n            if (callbackIndex > -1) {\r\n                callbacks.splice(callbackIndex, 1);\r\n            }\r\n            if (callbacks.length == 0) {\r\n                this.#callbacks.delete(type);\r\n            }\r\n        }\r\n    }\r\n\r\n    dispatchEvent(event: ModelEvent): void {\r\n        ModelEventTargetAccessor.setTarget(event, this);\r\n        this.receiveEvent(event);\r\n    }\r\n}\r\n\r\nvar ModelEventTarget: ModelEventTargetConstructor = ModelEventTargetBase;\r\n\r\ninterface ModelNodeConstructor {\r\n    prototype: ModelNode;\r\n    new(): ModelNode;\r\n}\r\n\r\ninterface ModelNode extends ModelEventTarget {\r\n    readonly parentNode: ModelNode | null;\r\n    setParent(parentNode: ModelNode | null): void;\r\n    getRecords(): ModelChangeRecord[];\r\n    beginChanges(): void;\r\n    endChanges(): void;\r\n}\r\n\r\ninterface ModelNodeRecordsAccessor {\r\n    triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void;\r\n    handleRecord(node: ModelNode, record: ModelChangeRecord): void;\r\n}\r\n\r\nclass ModelNodeBase extends ModelEventTargetBase implements ModelNode {\r\n    #parentNode: ModelNode | null;\r\n    #records: ModelChangeRecord[];\r\n    #isRecording: boolean;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#parentNode = null;\r\n        this.#records = [];\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    get parentNode(): ModelNode | null {\r\n        return this.#parentNode;\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        if (parentNode !== null) {\r\n            let isCyclicReference = parentNode == this;\r\n            let {parentNode: ancestorNode} = parentNode;\r\n            while (!isCyclicReference && ancestorNode !== null) {\r\n                ({parentNode: ancestorNode} = ancestorNode);\r\n                isCyclicReference = ancestorNode == this;\r\n            }\r\n            if (!isCyclicReference) {\r\n                this.#parentNode = parentNode;\r\n            }\r\n            else {\r\n                throw new TypeError(\"Failed to set parent on ModelNode: circular reference detected in the hierarchy.\");\r\n            }\r\n        }\r\n        else {\r\n            this.#parentNode = null;\r\n        }\r\n    }\r\n    \r\n    beginChanges(): void {\r\n        this.#isRecording = true;\r\n    }\r\n\r\n    endChanges(): void {\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        this.#records.splice(0);\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    getRecords(): ModelChangeRecord[] {\r\n        return this.#records.slice();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        super.receiveEvent(event);\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            parentNode.receiveEvent(event);\r\n        }\r\n    }\r\n\r\n    #triggerChange(property: string, oldValue: any, newValue: any): void {\r\n        const records = this.#records;\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.PROPERTY_CHANGE,\r\n            propertyName: property,\r\n            oldValue, newValue\r\n        });\r\n        records.push(record);\r\n        if (!this.#isRecording) {\r\n            this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n            records.splice(0);\r\n        }\r\n    }\r\n\r\n    #handleRecord(record: ModelChangeRecord): void {\r\n        this.#records.push(record);\r\n        if (!this.#isRecording) {\r\n            this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n            this.#records.splice(0);\r\n        }\r\n    }\r\n\r\n    static ModelNodeRecordsAccessor? = new class ModelNodeRecordsAccessor {\r\n        triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#triggerChange(property, oldValue, newValue);\r\n            }\r\n        }\r\n\r\n        handleRecord(node: ModelNode, record: ModelChangeRecord): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#handleRecord(record);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelNodeRecordsAccessor: ModelNodeRecordsAccessor = ModelNodeBase.ModelNodeRecordsAccessor!;\r\ndelete ModelNodeBase.ModelNodeRecordsAccessor;\r\n\r\nvar ModelNode: ModelNodeConstructor = ModelNodeBase;\r\n\r\ninterface ModelPropertyDecorator {\r\n    (): <Model extends ModelObject>(target: Model, property: string) => void;\r\n}\r\n\r\nconst ModelProperty: ModelPropertyDecorator = function() {\r\n    return (\r\n        target: ModelObject, property: string\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const setter = function(this: ModelObject, value: any) {\r\n            const oldValue = ModelObjectPropertiesAccessor.getProperty(this, property);\r\n            ModelObjectPropertiesAccessor.setProperty(this, property, value);\r\n            if (value !== oldValue) {\r\n                ModelNodeRecordsAccessor.triggerChange(this, property, oldValue, value);\r\n            }\r\n            return true;\r\n        };\r\n        const getter = function(this: ModelObject) {\r\n            return ModelObjectPropertiesAccessor.getProperty(this, property);\r\n        };\r\n        Object.defineProperty(prototype, property, {\r\n            set: setter,\r\n            get: getter,\r\n            enumerable: true\r\n        });\r\n    }\r\n}\r\n\r\ninterface ModelObjectConstructor {\r\n    prototype: ModelObject;\r\n    new(): ModelObject;\r\n}\r\n\r\ninterface ModelObject extends ModelNode {}\r\n\r\ninterface ModelObjectPropertiesAccessor {\r\n    setProperty(node: ModelNode, property: string, value: any): void;\r\n    getProperty(node: ModelNode, property: string,): any;\r\n}\r\n\r\nclass ModelObjectBase extends ModelNodeBase implements ModelObject {\r\n    #properties: Map<string, any>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#properties = new Map();\r\n    }\r\n\r\n    static ModelObjectPropertiesAccessor? = new class ModelPropertiesAccessor {\r\n        setProperty(node: ModelObject, property: string, value: any): void {\r\n            if (node instanceof ModelObjectBase) {\r\n                node.#properties.set(property, value);\r\n            }\r\n        }\r\n\r\n        getProperty(node: ModelObject, property: string): any {\r\n            if (node instanceof ModelObjectBase) {\r\n                return node.#properties.get(property);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelObjectPropertiesAccessor: ModelObjectPropertiesAccessor = ModelObjectBase.ModelObjectPropertiesAccessor!;\r\ndelete ModelObjectBase.ModelObjectPropertiesAccessor;\r\n\r\nvar ModelObject: ModelObjectConstructor = ModelObjectBase;\r\n\r\ninterface ModelListConstructor {\r\n    prototype: ModelList;\r\n    new<Model extends ModelNode>(): ModelList<Model>;\r\n    new<Model extends ModelNode>(items: Model[]): ModelList<Model>;\r\n}\r\n\r\ninterface ModelList<Model extends ModelNode = ModelNode> extends ModelNode {\r\n    readonly parentNode: ModelNode | null;\r\n    readonly length: number;\r\n    index(item: Model): number;\r\n    get(index: number): Model | null;\r\n    values(): IterableIterator<Model>;\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void;\r\n    insert(index: number, ...items: Model[]): void;\r\n    prepend(...items: Model[]): void;\r\n    append(...items: Model[]): void;\r\n    remove(item: Model): void;\r\n    clear(): void;\r\n}\r\n\r\nclass ModelListBase<Model extends ModelNode = ModelNode> extends ModelNodeBase implements ModelList<Model> {\r\n    #items: Model[];\r\n\r\n    constructor()\r\n    constructor(items: Model[])\r\n    constructor(items?: Model[]) {\r\n        super();\r\n        this.#items = items?.slice() ?? [];\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        super.setParent(parentNode);\r\n        this.#items.forEach((item_i) => {\r\n            item_i.setParent(parentNode);\r\n        });\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    get(index: number): Model | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    index(item: Model): number {\r\n        return this.#items.indexOf(item);\r\n    }\r\n\r\n    values(): IterableIterator<Model> {\r\n        return this.#items.values();\r\n    }\r\n\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void {\r\n        const items = this.#items;\r\n        const indexedItems = items.map(\r\n            (item_i, i) => {\r\n                return {\r\n                    item: item_i,\r\n                    index: i\r\n                };\r\n            }\r\n        );\r\n        indexedItems.sort(\r\n            (indexedItem_a, indexedItem_b) => {\r\n                return compareFunction(\r\n                    indexedItem_a.item, indexedItem_b.item\r\n                )\r\n            }\r\n        );\r\n        this.#items = indexedItems.map(indexedItem_i => indexedItem_i.item);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_SORT,\r\n            sortedIndices: indexedItems.map(indexedItem_i => indexedItem_i.index)\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    prepend(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.splice(0, 0, ...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: 0,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    append(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.push(...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: length,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    insert(index: number, ...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const positiveIndex = Math.abs(index);\r\n        if (positiveIndex <= length) {\r\n            if (index >= 0) {\r\n                const {parentNode} = this;\r\n                items.forEach(item_i => {\r\n                    item_i.setParent(parentNode);\r\n                });\r\n                if (index < length) {\r\n                    _items.splice(index, 0, ...items);\r\n                }\r\n                else {\r\n                    _items.push(...items);\r\n                }\r\n            }\r\n            else if (index < 0) {\r\n                index = length - index;\r\n                const {parentNode} = this;\r\n                if (parentNode) {\r\n                    items.forEach(item_i => {\r\n                        item_i.setParent(parentNode);\r\n                    });\r\n                }\r\n                _items.splice(index, 0, ...items);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_INSERT,\r\n                insertedIndex: index,\r\n                insertedItems: items.slice()\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    remove(item: Model): void {\r\n        const _items = this.#items;\r\n        const index = _items.indexOf(item);\r\n        if (index > -1) {\r\n            const item = _items.splice(index, 1)[0];\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                item.setParent(null);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: index,\r\n                removedItems: [item]\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    clear(): void {\r\n        const items = this.#items;\r\n        const {length} = items;\r\n        if (length > 0) {\r\n            const removedItems = items.splice(0);\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                removedItems.forEach((removedItem_i) => {\r\n                    removedItem_i.setParent(null);\r\n                });\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: 0,\r\n                removedItems: removedItems\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n};\r\n\r\nvar ModelList: ModelListConstructor = ModelListBase!;\r\n\r\ninterface ModelChangeObserverConstructor {\r\n    prototype: ModelChangeObserver;\r\n    new(callback: (records: ModelChangeRecord[]) => void): ModelChangeObserver;\r\n}\r\n\r\ninterface ModelChangeObserver {\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void;\r\n    unobserve(node: ModelNode): void;\r\n    disconnect(): void;\r\n}\r\n\r\ntype ModelChangeObserverOptions = {\r\n    properties?: boolean;\r\n    propertiesFilter?: string[];\r\n    childList?: boolean;\r\n    subtree?: boolean;\r\n}\r\n\r\nclass ModelChangeObserverBase implements ModelChangeObserver {\r\n    #callback: (records: ModelChangeRecord[]) => void;\r\n    #records: ModelChangeRecord[];\r\n    #disconnected: boolean;\r\n\r\n    #references: WeakMap<ModelNode, {\r\n        listener: (event: ModelEvent) => void,\r\n        options: ModelChangeObserverOptions\r\n    }>;\r\n\r\n    constructor(callback: (records: ModelChangeRecord[]) => void) {\r\n        this.#callback = callback;\r\n        this.#records = [];\r\n        this.#disconnected = false;\r\n        this.#references = new WeakMap();\r\n    }\r\n\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void {\r\n        this.#disconnected = false;\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (!reference) {\r\n            const listener = this.#handleModelEvent.bind(this);\r\n            node.addEventListener(\"modelchange\", listener);\r\n            reference = {listener, options};\r\n            references.set(node, reference);\r\n        }\r\n        else {\r\n            references.set(node, reference);\r\n        }\r\n    }\r\n\r\n    unobserve(node: ModelNode): void {\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (reference) {\r\n            const {listener} = reference;\r\n            node.removeEventListener(\"modelchange\", listener);\r\n        }\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#records.splice(0);\r\n        this.#disconnected = true;\r\n    }\r\n\r\n    #trigger(): void {\r\n        const records = this.#records.splice(0);\r\n        if (records.length > 0) {\r\n            this.#callback(records);\r\n        }\r\n    }\r\n\r\n    #handleModelEvent(event: ModelEvent): void {\r\n        if (!this.#disconnected) {\r\n            const {target, currentTarget} = event;\r\n            const reference = this.#references.get(<ModelNode>currentTarget);\r\n            if (reference) {\r\n                const {options} = reference;\r\n                const {properties, propertiesFilter, childList, subtree} = options;\r\n                if (subtree) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n                else if (target == currentTarget) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelChangeObserver: ModelChangeObserverConstructor = ModelChangeObserverBase;","import { ReactiveChildElements } from \"../../elements/Element\";\r\nimport { camelToTrain } from \"../../elements/Snippets\";\r\n\r\nexport { WidgetFactoryConstructor };\r\n\r\nexport { widget };\r\nexport { Widget };\r\nexport { WidgetFactory };\r\nexport { widgets };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {}\r\n}\r\n\r\ninterface WidgetFactoryConstructor {\r\n    prototype: WidgetFactory;\r\n    new(): WidgetFactory;\r\n}\r\n\r\ninterface WidgetFactory {\r\n    create(properties?: object): HTMLElement;\r\n    slot(root: HTMLElement, name: string | null): HTMLElement | null;\r\n}\r\n\r\nvar slotsMap: WeakMap<HTMLElement, {\r\n    widget: WidgetFactory,\r\n    element: WeakRef<HTMLElement>;\r\n    slot: string | null;\r\n}[]> = new WeakMap();\r\nvar slotsObserver = new MutationObserver(\r\n    (mutationsList: MutationRecord[]) => {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            if (target instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"childList\": {\r\n                        const slotReferences = slotsMap.get(target);\r\n                        if (slotReferences) {\r\n                            slotReferences.forEach(slotRef_i => {\r\n                                const {widget, element, slot} = slotRef_i;\r\n                                const slottedCallback = (widget as any)[\"slottedCallback\"];\r\n                                if (typeof slottedCallback == \"function\") {\r\n                                    slottedCallback(element.deref(), target, slot);\r\n                                }\r\n                            });\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n);\r\n\r\nvar widgetsMap: WeakMap<HTMLElement, WidgetFactory> = new WeakMap();\r\nvar attributesObserver = new MutationObserver(\r\n    (mutationsList: MutationRecord[]) => {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            if (target instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"attributes\": {\r\n                        const {attributeName, oldValue} = mutation;\r\n                        const widget = widgetsMap.get(target);\r\n                        if (widget) {\r\n                            const attributeChangedCallback = (widget as any)[\"attributeChangedCallback\"];\r\n                            if (typeof attributeChangedCallback == \"function\") {\r\n                                attributeChangedCallback(target, attributeName, oldValue, target.getAttribute(attributeName!));\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n);\r\n\r\nclass WidgetFactoryBase implements WidgetFactory {\r\n\r\n    constructor() {\r\n        const widget = <WidgetFactory>this;\r\n        this.create = new Proxy(\r\n            this.create, {\r\n                apply: (target, thisArg, argumentsList: Parameters<WidgetFactory[\"create\"]>) => {\r\n                    const element = <HTMLElement>Reflect.apply(target, thisArg, argumentsList);\r\n                    const observedSlots = <(string | null)[]>(widget as any)[\"observedSlots\"];\r\n                    if (Array.isArray(observedSlots)) {\r\n                        const slots = observedSlots\r\n                            .map(slotName_i => {\r\n                                return {\r\n                                    slotName: slotName_i,\r\n                                    slotElement: widget.slot(element, slotName_i)\r\n                                };\r\n                            });\r\n                        slots.forEach(slot_i => {\r\n                            const {slotElement, slotName} = slot_i;\r\n                            if (slotElement) {\r\n                                slotsObserver.observe(slotElement, {\r\n                                    childList: true\r\n                                });\r\n                                const slotReferences = slotsMap.get(slotElement);\r\n                                const slotReference = {widget, element: new WeakRef(element), slot: slotName};\r\n                                if (Array.isArray(slotReferences)) {\r\n                                    slotReferences.push(slotReference);\r\n                                }\r\n                                else {\r\n                                    slotsMap.set(slotElement, new Array(slotReference));\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                    const observedAttributes = (widget as any)[\"observedAttributes\"];\r\n                    if (Array.isArray(observedAttributes)) {\r\n                        widgetsMap.set(element, widget);\r\n                        attributesObserver.observe(element, {\r\n                            attributes: true,\r\n                            attributeFilter: observedAttributes,\r\n                            attributeOldValue: true\r\n                        });\r\n                    }\r\n                    return element;\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    create(): HTMLElement {\r\n        throw new Error(`create method is not implemented`);\r\n    }\r\n\r\n    slot(): HTMLElement | null {\r\n        return null;\r\n    }\r\n\r\n    get observedSlots(): string[] {\r\n        return [\"\"];\r\n    }\r\n}\r\n\r\nvar WidgetFactory: WidgetFactoryConstructor = WidgetFactoryBase;\r\nvar widgets: Map<string, WidgetFactory> = new Map();\r\n\r\ninterface WidgetInit<K extends keyof WidgetNameMap> {\r\n    properties?: Parameters<WidgetNameMap[K][\"create\"]>[0],\r\n    attributes?: {\r\n        [name: string]: number | string | boolean\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    slotted?: {\r\n        [slot: string]: Node | string | (Node | string)[] | NodeList | ReactiveChildElements\r\n    } | (Node | string | (Node | string)[] | NodeList | ReactiveChildElements),\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: K, init?: WidgetInit<K>): ReturnType<WidgetNameMap[K][\"create\"]>;\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: K, init?: WidgetInit<K>): HTMLElement {\r\n    const widget = widgets.get(name);\r\n    if (widget) {\r\n        if (init !== undefined) {\r\n            const {properties, attributes, dataset, slotted, listeners} = init;\r\n            const element = widget.create(properties);\r\n            if (attributes) {\r\n                Object.entries(attributes).forEach(([attributeName, attributeValue]) => {\r\n                    if (attributeValue !== undefined) {\r\n                        if (typeof attributeValue === \"boolean\") {\r\n                            element.toggleAttribute(camelToTrain(attributeName), attributeValue);\r\n                        }\r\n                        else {\r\n                            element.setAttribute(camelToTrain(attributeName), String(attributeValue));\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            if (dataset) {\r\n                const {dataset: elementDataset} = element;\r\n                Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                    elementDataset[datasetEntry_i] = String(dataset[datasetEntry_i]);\r\n                });\r\n            }\r\n            if (slotted) {\r\n                if (typeof slotted === \"function\" || Array.isArray(slotted) || slotted instanceof NodeList || typeof slotted === \"string\" || slotted instanceof Node) {\r\n                    const slot = widget.slot(element, null);\r\n                    if (slot) {\r\n                        if (typeof slotted === \"function\") {\r\n                            slotted(slot);\r\n                        }\r\n                        else if (typeof slotted === \"object\" && \"length\" in slotted) {\r\n                            slot.append(...Array.from(slotted));\r\n                        }\r\n                        else {\r\n                            slot.append(slotted);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    Object.entries(slotted).forEach(([slot_i, slotted]) => {\r\n                        const slot = widget.slot(element, slot_i);\r\n                        if (slot) {\r\n                            if (typeof slotted === \"function\") {\r\n                                slotted(slot);\r\n                            }\r\n                            else if (typeof slotted === \"object\" && \"length\" in slotted) {\r\n                                slot.append(...Array.from(slotted));\r\n                            }\r\n                            else {\r\n                                slot.append(slotted);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            if (listeners) {\r\n                Object.entries(listeners).forEach(([name_i, listener_i]) => {\r\n                    if (Array.isArray(listener_i)) {\r\n                        element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                    }\r\n                    else {\r\n                        element.addEventListener(name_i, listener_i);\r\n                    }\r\n                });\r\n            }\r\n            return element;\r\n        }\r\n        else {\r\n            return widget.create();\r\n        }\r\n    }\r\n    throw new Error(`Unknown widget ${name}. The corresponding module might not be imported.`);\r\n}\r\n\r\ninterface WidgetDecorator {\r\n    (init: {\r\n        name: string;\r\n    }): <W extends WidgetFactoryConstructor>(widget: W) => W;\r\n}\r\n\r\nconst Widget: WidgetDecorator = function(init: {\r\n    name: string;\r\n}) {\r\n    return <W extends WidgetFactoryConstructor>(\r\n        widget: W\r\n    ) => {\r\n        const {name} = init;\r\n        widgets.set(\r\n            name,\r\n            new widget()\r\n        );\r\n        return widget;\r\n    }\r\n}","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { toolbarItemWidget };\r\n\r\ntype ToolBarItemType = \"button\" | \"checkbox\" | \"radio\" | \"menubutton\";\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbaritem\": ToolBarItemWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ToolBarItemWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        id?: string;\r\n        type: ToolBarItemType;\r\n        pressed?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    menu(item: HTMLElement): HTMLElement | null;\r\n    getName(item: HTMLElement): string;\r\n    setName(item: HTMLElement, value: string): void;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setPressed(item: HTMLElement, value: boolean): void;\r\n    getPressed(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    getValue(item: HTMLElement): string;\r\n    setValue(item: HTMLElement, value: string): void;\r\n    getType(item: HTMLElement): ToolBarItemType | null;\r\n    setType(item: HTMLElement, value: ToolBarItemType): void;\r\n}\r\n\r\nvar toolbarItemWidget = new(\r\nWidget({\r\n    name: \"toolbaritem\"\r\n})(\r\nclass ToolBarItemWidgetFactoryBase extends WidgetFactory implements ToolBarItemWidgetFactory {\r\n    #template: HTMLElement;\r\n    #types: ToolBarItemType[];\r\n\r\n    constructor() {\r\n        super();\r\n        this.#types = [\"button\", \"checkbox\", \"radio\", \"menubutton\"];\r\n        this.#template = element(\"button\", {\r\n            attributes: {\r\n                class: \"toolbaritem\",\r\n                role: \"button\",\r\n                type: \"button\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        type?: ToolBarItemType;\r\n        pressed?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }) {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (init !== void 0) {\r\n            const {id, keyshortcut, pressed, type, label, name, value, disabled} = init;\r\n            if (id !== undefined) {\r\n                item.id = id;\r\n            }\r\n            if (keyshortcut !== undefined) {\r\n                this.setKeyShortcut(item, keyshortcut);\r\n            }\r\n            if (pressed !== undefined) {\r\n                this.setPressed(item, pressed);\r\n            }\r\n            if (type !== undefined) {\r\n                this.setType(item, type);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(item, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(item, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(item: HTMLElement): HTMLElement | null {\r\n        return item;\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void {\r\n        const hasChildMenu = Array.from(slot.childNodes).some(\r\n            childNode_i => childNode_i instanceof HTMLElement && childNode_i.classList.contains(\"menu\")\r\n        );\r\n        item.setAttribute(\"aria-haspopup\", String(hasChildMenu));\r\n    }\r\n\r\n    menu(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .menu\");\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-expanded\", value);\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-expanded\");\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    getKeyShortcut(item: HTMLElement): string | null {\r\n        return item.getAttribute(\"aria-keyshortcuts\");\r\n    }\r\n\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void {\r\n        if (value !== null) {\r\n            item.setAttribute(\"aria-keyshortcuts\", value);\r\n        }\r\n        else {\r\n            item.removeAttribute(\"aria-keyshortcuts\");\r\n        }\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        const expand = force ?? !this.getExpanded(item);\r\n        this.setExpanded(item, expand);\r\n        if (expand) {\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    expand(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (!expanded) {\r\n            this.setExpanded(item, true);\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    collapse(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (expanded) {\r\n            this.setExpanded(item, false);\r\n        }\r\n    }\r\n\r\n    getType(item: HTMLElement): ToolBarItemType | null {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`toolbaritem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setType(item: HTMLElement, type: ToolBarItemType): void {\r\n        const oldType = this.getType(item);\r\n        if (type !== oldType) {\r\n            const {classList} = item;\r\n            if (oldType) {\r\n                classList.remove(`toolbaritem-${oldType}`);\r\n            }\r\n            classList.add(`toolbaritem-${type}`);\r\n        }\r\n    }\r\n\r\n    getValue(item: HTMLElement): string {\r\n        return item.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"value\", value);\r\n    }\r\n\r\n    getTitle(item: HTMLElement): string {\r\n        return item.getAttribute(\"title\") ?? \"\";\r\n    }\r\n\r\n    setTitle(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"title\", value);\r\n    }\r\n\r\n    getName(item: HTMLElement): string {\r\n        return item.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getPressed(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-pressed\") ?? String(false));\r\n    }\r\n\r\n    setPressed(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-pressed\", String(value));\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetItem = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetItem.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse(targetItem);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.setPressed(targetItem, !this.getPressed(targetItem));\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.setPressed(targetItem, true);\r\n                    break;\r\n                }\r\n                case \"menubutton\": {\r\n                    const menu = this.menu(targetItem);\r\n                    if (menu && !menu.contains(<Node>target)) {\r\n                        this.toggle(targetItem);\r\n                        const expanded = this.getExpanded(targetItem);\r\n                        if (expanded) {\r\n                            menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(item: HTMLElement): void {\r\n        const type = this.getType(item);\r\n        if (type == \"menubutton\") {\r\n            const menu = this.menu(item);\r\n            if (menu !== null) {\r\n                const {style: menuStyle} = menu;\r\n                const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = item.getBoundingClientRect();\r\n                const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n                const {scrollY, scrollX} = window;\r\n                const {clientWidth, clientHeight} = document.body;\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n        }\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n}));\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { toolbarItemWidget } from \"./ToolBarItemWidget\";\r\n\r\nexport { toolbarWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbar\": ToolBarWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ToolBarWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }): HTMLElement;\r\n    setOrientation(toolbar: HTMLElement, value: ToolBarOrientation): void;\r\n    getOrientation(toolbar: HTMLElement): ToolBarOrientation;\r\n}\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\nvar toolbarWidget = new (\r\nWidget({\r\n    name: \"toolbar\"\r\n})(class ToolBarWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"toolbar\",\r\n                role: \"toolbar\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        )\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }) {\r\n        const toolbar = <HTMLElement>this.#template.cloneNode(true);\r\n        toolbar.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        toolbar.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        toolbar.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        toolbar.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        toolbar.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex} = properties;\r\n            if (id !== undefined) {\r\n                toolbar.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                toolbar.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                toolbar.tabIndex = tabIndex;\r\n            }\r\n        }\r\n        return toolbar;\r\n    }\r\n\r\n    slot(toolbar: HTMLElement) {\r\n        return toolbar;\r\n    }\r\n\r\n    #getActiveItem(toolbar: HTMLElement): HTMLElement | null {\r\n        return toolbar.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .toolbaritemgroup) > .toolbaritem.active\"\r\n        );\r\n    }\r\n\r\n    items(toolbar: HTMLElement): HTMLElement[] {\r\n        return Array.from(toolbar.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .toolbaritemgroup) > .toolbaritem\"\r\n        ));\r\n    }\r\n\r\n    setOrientation(toolbar: HTMLElement, value: ToolBarOrientation): void {\r\n        toolbar.setAttribute(\"aria-orientation\", value);\r\n    }\r\n\r\n    getOrientation(toolbar: HTMLElement): ToolBarOrientation {\r\n        return <ToolBarOrientation>toolbar.getAttribute(\"aria-orientation\") ?? \"horizontal\";\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node) {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"toolbaritem\") && !toolbarItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"toolbaritemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(toolbar: Element): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = toolbar;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(toolbar: Element): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = toolbar;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLElement | null>walker.previousSibling();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = toolbarItemWidget.menu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #setActiveItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(tree);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            toolbarItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            toolbarItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: Event): void {\r\n        const {currentTarget, target} = event;\r\n        const toolbar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem) {\r\n            const type = toolbarItemWidget.getType(targetItem);\r\n            const name = toolbarItemWidget.getName(targetItem);\r\n            const value = toolbarItemWidget.getType(targetItem);\r\n            if (type == \"radio\") {\r\n                toolbar.querySelectorAll<HTMLElement>(\r\n                    `:is(:scope, :scope > .toolbaritemgroup) > .toolbaritem[type=radio][name=${name}]`\r\n                ).forEach((radio_i) => {\r\n                    toolbarItemWidget.setPressed(radio_i, toolbarItemWidget.getValue(radio_i) == value);\r\n                });\r\n            }\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const focusWithin = targetToolbar.contains(<Node>relatedTarget);\r\n        if (!focusWithin) {\r\n            const activeItem = this.#getActiveItem(targetToolbar);\r\n            if (activeItem) {\r\n                activeItem.focus();\r\n            }\r\n            else {\r\n                const firstItem = this.#firstItem(targetToolbar);\r\n                firstItem?.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetToolbar, targetItem);\r\n            targetToolbar.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetToolbar.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.#setActiveItem(targetToolbar, null);\r\n            targetToolbar.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetToolbar);\r\n        switch (key) {\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const type = toolbarItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"menubutton\": {\r\n                            toolbarItemWidget.expand(activeItem);\r\n                            const firstChildItem = this.#firstChildItem(activeItem);\r\n                            firstChildItem?.focus({preventScroll: true});\r\n                            event.preventDefault();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetToolbar);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetToolbar);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetToolbar);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetToolbar);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    activeItem.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    targetToolbar.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}));"],"names":["element","tagName","init","options","attributes","dataset","children","listeners","document","createElement","Object","entries","forEach","attributeName","attributeValue","undefined","toggleAttribute","setAttribute","String","elementDataset","keys","datasetEntry_i","append","Array","from","name_i","listener_i","isArray","addEventListener","reactiveElementsMap","WeakMap","FinalizationRegistry","heldValue","model","reactiveElement","reactiveElementsMapEntry","get","reactiveElementsArray","splice","indexOf","records","record_i","target","propertyName","oldValue","newValue","reactiveElement_i","elementRef","react","properties","deref","includes","reactiveChildElementsMap","list","reactiveChildElement","reactiveChildrenElementsMapEntry","reactiveChildElementsArray","range","values","length","listLength","reactiveChildElements_i","parentRef","mapping","placeholder","parent","firstChild","childrenCount","removeChild","changeType","LIST_INSERT","LIST_REMOVE","LIST_SORT","insertedIndex","insertedItems","insertedItemsArray","map","before","removedIndex","removedItems","removedCount","createRange","removeEndIndex","setStartBefore","setEndAfter","deleteContents","sortedIndices","childrenArray","filter","index_i","camelToTrain","str","replace","toLowerCase","ModelChangeRecordBase","constructor","this","ModelNodesList","PROPERTY_CHANGE","ModelChangeRecord","items","slice","item","index","ModelEventBase","type","currentTarget","ModelEventTargetAccessor","setCurrentTarget","event","setTarget","ModelEvent","ModelEventTargetBase","Map","receiveEvent","callbacks","callback_i","callback","push","set","removeEventListener","callbackIndex","findIndex","delete","dispatchEvent","ModelNodeBase","super","parentNode","setParent","isCyclicReference","ancestorNode","TypeError","beginChanges","endChanges","getRecords","property","record","ModelNodeRecordsAccessor","triggerChange","node","handleRecord","ModelNode","ModelObjectBase","ModelObjectPropertiesAccessor","setProperty","value","getProperty","ModelList","item_i","sort","compareFunction","indexedItems","i","indexedItem_a","indexedItem_b","indexedItem_i","prepend","_items","insert","Math","abs","remove","clear","removedItem_i","reference","propertiesFilter","childList","subtree","ModelChangeObserver","observe","references","listener","bind","unobserve","disconnect","slotsMap","slotsObserver","MutationObserver","mutationsList","mutation","HTMLElement","slotReferences","slotRef_i","widget","slot","slottedCallback","widgetsMap","attributesObserver","attributeChangedCallback","getAttribute","WidgetFactory","create","Proxy","apply","thisArg","argumentsList","Reflect","observedSlots","slotName_i","slotName","slotElement","slot_i","slotReference","WeakRef","observedAttributes","attributeFilter","attributeOldValue","Error","widgets","Widget","name","toolbarItemWidget","class","role","tabindex","cloneNode","id","keyshortcut","pressed","label","disabled","setKeyShortcut","setPressed","setType","setLabel","setName","setValue","setDisabled","hasChildMenu","childNodes","some","childNode_i","classList","contains","menu","querySelector","setExpanded","getExpanded","hasAttribute","getLabel","textContent","getKeyShortcut","removeAttribute","toggle","force","expand","collapse","getType","types","type_i","oldType","add","getValue","getTitle","setTitle","getName","getPressed","JSON","parse","getDisabled","setActive","getActive","relatedTarget","targetItem","closest","focus","preventScroll","style","menuStyle","top","itemTop","bottom","itemBottom","left","itemLeft","right","itemRight","getBoundingClientRect","width","menuWidth","height","menuHeight","scrollY","scrollX","window","clientWidth","clientHeight","body","overflowX","overflowY","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","d","definition","key","o","defineProperty","enumerable","obj","prop","prototype","hasOwnProperty","call","createTreeWalker","NodeFilter","SHOW_ELEMENT","toolbar","tabIndex","querySelectorAll","setOrientation","getOrientation","FILTER_ACCEPT","FILTER_SKIP","FILTER_REJECT","walker","currentNode","lastChild","previousSibling","nextSibling","tree","activeItem","radio_i","stopPropagation","targetToolbar","preventDefault","previousItem","firstItem","nextItem","lastItem"],"sourceRoot":""}