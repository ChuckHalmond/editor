{"version":3,"file":"views/MenuView.ts.js","mappings":"8GAyLA,MAAMA,EAAwC,SAASC,GAInD,OACIC,IAEA,MAAM,KAACC,EAAI,QAAEC,GAAWH,EAQxB,OAPKI,eAAeC,IAAIH,IACpBE,eAAeE,OACXJ,EACAD,EACAE,GAGDF,CAAW,CAE1B,EAkGA,SAASM,EACLC,EAAYR,GACZ,GAAIA,EAAM,CACN,MAAM,QAACG,EAAO,WAAEM,EAAU,QAAEC,EAAO,SAAEC,EAAQ,UAAEC,GAAaZ,EACtDO,EAAUM,SAASC,cAAcN,EAASL,GAahD,GAZIM,GACAM,OAAOC,QAAQP,GAAYQ,SAAQ,EAAEC,EAAeC,WACzBC,IAAnBD,IAC8B,kBAAnBA,EACPZ,EAAQc,iBAAgB,QAAaH,GAAgBC,GAGrDZ,EAAQe,cAAa,QAAaJ,GAAgBK,OAAOJ,I,IAKrET,EAAS,CACT,MAAOA,QAASc,GAAkBjB,EAClCQ,OAAOU,KAAKf,GAASO,SAASS,IAC1BF,EAAeE,GAAkBH,OAAOb,EAAQgB,GAAgB,G,CAwBxE,OArBIf,IACwB,mBAAbA,EACPA,EAASJ,GAEgB,iBAAbI,GAAyB,WAAYA,EACjDJ,EAAQoB,UAAUC,MAAMC,KAAKlB,IAG7BJ,EAAQoB,OAAOhB,IAGnBC,GACAG,OAAOC,QAAQJ,GAAWK,SAAQ,EAAEa,EAAQC,MACpCH,MAAMI,QAAQD,GACdxB,EAAQ0B,iBAAiBH,EAAQC,EAAW,GAAIA,EAAW,IAG3DxB,EAAQ0B,iBAAiBH,EAAQC,E,IAItCxB,C,CAEX,OAAOM,SAASC,cAAcN,EAClC,CAEA,MAAM0B,EAAsB,IAAIC,QAS1BC,EAAuC,IAAIC,sBAAsBC,IAQnE,MAAM,MAACC,EAAK,gBAAEC,GAAmBF,EAC3BG,EAA2BP,EAAoB7B,IAAIkC,GACzD,QAAiCnB,IAA7BqB,EAAwC,CACxC,MAAM,sBAACC,GAAyBD,EAChCC,EAAsBC,OAAOD,EAAsBE,QAAQJ,GAAkB,E,KAI/EK,EAAmC,IAAI,MAAqBC,IAC9DA,EAAQ7B,SAAS8B,IACb,MAAM,OAACC,EAAM,aAAEC,EAAY,SAAEC,EAAQ,SAAEC,GAAYJ,GAC7C,sBAACL,GAAyBR,EAAoB7B,IAAI2C,GACxDN,EAAsBzB,SAAQmC,IAC1B,MAAM,WAACC,EAAU,MAAEC,EAAK,WAAEC,GAAcH,EAClC7C,EAAU8C,EAAWG,QACvBjD,GACIgD,EAAWE,SAASR,IACpBK,EAAM/C,EAAS0C,EAAeC,EAAUC,E,GAGlD,GACJ,IASN,SAASX,EACLD,EACAhC,EACAgD,EACAD,GAEA,MACMd,EAAkB,CAACa,WADN,IAAIK,QAAQnD,GACM+C,QAAOC,cACtCd,EAA2BP,EAAoB7B,IAAIkC,GAEzD,GADAH,EAAqCuB,SAASpD,EAAS,CAACgC,QAAOC,oBAC1DC,EASA,CACD,MAAM,sBAACC,EAAqB,gBAAEkB,GAAmBnB,GAC3C,iBAACoB,GAAoBD,EAC3BlB,EAAsBoB,KAAKtB,GAC3BoB,EAAgBC,iBAAmBA,EAC/BA,EAAiBE,OAAOR,EAAWS,QAC/BC,IAAeJ,EAAiBJ,SAASQ,MACxCV,EAAWS,QACZ,CAACC,EAAYC,EAAGX,IAAeA,EAAWX,QAAQqB,KAAgBC,G,KAjB/C,CAC3B,MAAMN,EAAkB,CACpBL,YAAY,EACZM,iBAAkBN,GAEhBb,EAAwB,CAACF,GAC/BN,EAAoBiC,IAAI5B,EAAO,CAACqB,kBAAiBlB,0BACjDG,EAAiCuB,QAAQ7B,EAAOqB,E,CAmBpD,OANAL,EAAWtC,SAASgD,IAChB,GAAIA,KAAc1B,EAAO,CACrB,MAAM8B,EAAQC,QAAQjE,IAAIkC,EAAO0B,EAAY1B,GAC7Ce,EAAM/C,EAAc0D,OAAiB7C,EAAWiD,E,KAGjD9D,CACX,CAyBA,MAAMgE,EAA2B,IAAIpC,QAQ/BqC,EAA4C,IAAInC,sBAAsBC,IAQxE,MAAM,KAACmC,EAAI,qBAAEC,GAAwBpC,EAC/BqC,EAAmCJ,EAAyBlE,IAAIoE,GACtE,GAAIE,EAAkC,CAClC,MAAM,2BAACC,GAA8BD,EACrCC,EAA2BjC,OAAOiC,EAA2BhC,QAAQ8B,GAAuB,E,KAI9FG,EAAgC,IAAI,MAAqB/B,IAC3D,IAAIgC,EAAsB,KAC1BlD,MAAMC,KAAKiB,EAAQiC,UAAU9D,SAAS8B,IAClC,MAAM,OAACC,GAAUD,EACX0B,EAAkBzB,GACjBgC,OAAQC,GAAcR,GACvB,2BAACG,GAA8BL,EAAyBlE,IAAIoE,GAClEG,EAA2B3D,SAASiE,IAChC,MAAM,UAACC,EAAS,QAAEC,EAAO,YAAEC,GAAeH,EACpCI,EAASH,EAAU3B,QACzB,GAAI8B,EAAQ,CACR,MAAM,WAACC,EAAU,SAAE5E,GAAY2E,GACxBN,OAAQQ,GAAiB7E,EAC5B0E,GAAeJ,EAAa,GAAKM,GAAcF,GAC/CC,EAAOG,YAAYJ,GAEvB,MAAM,WAACK,EAAU,YAAEC,EAAW,YAAEC,EAAW,UAAEC,GAAa9C,EAC1D,OAAQ2C,GACJ,KAAKC,EAAa,CACd,MAAM,cAACG,EAAa,cAAEC,GAAiBhD,EACjCiD,EAAqBpE,MAAMC,KAAKkE,EAAchB,UAAUkB,IAAIb,IAC3DJ,OAAQQ,GAAiB7E,EAC5BmF,EAAgBN,EAChB7E,EAASmF,GAAeI,UAAUF,GAGlCV,EAAO3D,UAAUqE,GAErB,K,CAEJ,KAAKJ,EAAa,CACd,MAAM,aAACO,EAAY,aAAEC,GAAgBrD,GAC9BiC,OAAQqB,GAAgBD,EAC/BtB,EAAQA,GAASjE,SAASyF,cAC1B,MAAMC,EAAiBJ,GAAgBE,EAAe,GAClDE,EAAiBf,IACjBV,EAAM0B,eAAe7F,EAASwF,IAC9BrB,EAAM2B,YAAY9F,EAAS4F,IAC3BzB,EAAM4B,kBAEV,K,CAEJ,KAAKb,EAAW,CACZ,MAAM,cAACc,GAAiB5D,EAClB6D,EAAgBhF,MAAMC,KAAKlB,GACjC2E,EAAO3D,UACAgF,EAAc3C,QACb6C,GAAWA,EAAUrB,IACvBS,KACEY,GAAWD,EAAcC,MAGjC,K,EAGU,GAAd5B,GAAmBI,GACnBC,EAAO3D,OAAO0D,E,IAGxB,GACJ,IAGN,SAASyB,EACLrC,EACAW,EACAC,GAEA,OAAQC,IACJ,MAAMH,EAAY,IAAIzB,QAAQ4B,GACxByB,EAAgCxC,EAAyBlE,IAAIoE,GAC7DC,EAAuB,CAACS,YAAWC,UAASC,eAElD,GADAb,EAA0Cb,SAAS2B,EAAQ,CAACb,OAAMC,yBAC7DqC,EAOA,CACD,MAAM,2BAACnC,GAA8BmC,EACrCnC,EAA2Bd,KAAKY,E,KATA,CAChC,MAAME,EAA6B,CAACF,GACpCH,EAAyBJ,IAAIM,EAAM,CAACG,+BACpCC,EAA8BT,QAAQK,EAAM,CACxCuC,WAAW,G,CAOnB,MAAMrG,EAA0B,GAAf8D,EAAKO,QAAeK,EACjC,CAACA,GAAezD,MAAMC,KAAK4C,EAAKM,UAAUkB,IAAIb,GAClDE,EAAO2B,mBAAmBtG,EAAS,CAE3C,C,iBCxiBA,SAASuG,EAAaC,GACpB,OAAOA,EAAIC,QAAQ,mBAAoB,KAAKC,aAC9C,C,6wBC4BA,MAAMC,EAYFC,YACIvH,GAaAwH,KAAKxE,OAAShD,EAAKgD,OACnBwE,KAAK9B,WAAa1F,EAAK0F,WACvB8B,KAAKvE,aAAejD,EAAKiD,cAAgB,KACzCuE,KAAKtE,SAAWlD,EAAKkD,eAAY9B,EACjCoG,KAAKrE,SAAWnD,EAAKmD,eAAY/B,EACjCoG,KAAKrB,aAAenG,EAAKmG,cAAgB,EACzCqB,KAAKpB,aAAe,IAAIqB,EAAezH,EAAKoG,cAAgB,IAC5DoB,KAAK1B,cAAgB9F,EAAK8F,eAAiB,EAC3C0B,KAAKzB,cAAgB,IAAI0B,EAAezH,EAAK+F,eAAiB,IAC9DyB,KAAKb,cAAgB3G,EAAK2G,eAAiB,EAC/C,CAEWe,6BACP,OAAO,CACX,CAEW9B,yBACP,OAAO,CACX,CAEWD,yBACP,OAAO,CACX,CAEWE,uBACP,OAAO,CACX,CAEI6B,sBACA,OAAOJ,EAAsBI,eACjC,CAEI9B,kBACA,OAAO0B,EAAsB1B,WACjC,CAEID,kBACA,OAAO2B,EAAsB3B,WACjC,CAEIE,gBACA,OAAOyB,EAAsBzB,SACjC,EAGJ,IAAI8B,EAAkDL,E,cAiCtD,IAAIG,EApBJ,MAGIF,YAAYK,GAFZ,mBAGI,EAAAJ,KAAI,EAAUI,EAAMC,QAAO,IAC/B,CAEI7C,aACA,OAAO,EAAAwC,KAAI,OAAQxC,MACvB,CAEA8C,KAAKC,GACD,OAAO,EAAAP,KAAI,OAAQO,IAAU,IACjC,CAEAhD,SACI,OAAO,EAAAyC,KAAI,OAAQzC,QACvB,GAgBJ,MAAMiD,EAMFT,YAAYU,GAHZ,mBACA,mBAGIT,KAAKS,KAAOA,EACZ,EAAAT,KAAI,EAAkB,KAAI,KAC1B,EAAAA,KAAI,EAAW,KAAI,IACvB,CAEIU,oBACA,OAAO,EAAAV,KAAI,MACf,CAEIxE,aACA,OAAO,EAAAwE,KAAI,MACf,E,4BAEO,EAAAW,yBAA4B,IAAI,MACnCC,iBAAiBC,EAAmBH,GAC5BG,aAAiBL,GACjB,EAAAK,EAAK,EAAkBH,EAAa,IAE5C,CAEAI,UAAUD,EAAmBrF,GACrBqF,aAAiBL,GACjB,EAAAK,EAAK,EAAWrF,EAAM,IAE9B,GASR,IAAImF,EAAqDH,EAAeG,gCACjEH,EAAeG,yBAEtB,IAAII,EAAoCP,EAcxC,MAAMQ,EAGFjB,cAFA,mBAGI,EAAAC,KAAI,EAAc,IAAIiB,IAAK,IAC/B,CAEAC,aAAaL,GACT,MAAM,KAACJ,GAAQI,EACTM,EAAY,EAAAnB,KAAI,OAAYnH,IAAI4H,GACtCE,EAAyBC,iBAAiBC,EAAOb,MAC7CmB,GACAA,EAAU1H,SAAS2H,IACfA,EAAWP,EAAM,GAG7B,CAEApG,iBAAiBgG,EAAcY,GAC3B,MAAMF,EAAY,EAAAnB,KAAI,OAAYnH,IAAI4H,GAClCU,EACAA,EAAU7E,KAAK+E,GAGf,EAAArB,KAAI,OAAYrD,IAAI8D,EAAM,CAACY,GAEnC,CAEAC,oBAAoBb,EAAcY,GAC9B,MAAMF,EAAY,EAAAnB,KAAI,OAAYnH,IAAI4H,GACtC,GAAIU,EAAW,CACX,MAAMI,EAAgBJ,EAAUK,WAC5BJ,GAAcA,GAAcC,IAE5BE,GAAiB,GACjBJ,EAAUhG,OAAOoG,EAAe,GAEZ,GAApBJ,EAAU3D,QACV,EAAAwC,KAAI,OAAYyB,OAAOhB,E,CAGnC,CAEAiB,cAAcb,GACVF,EAAyBG,UAAUD,EAAOb,MAC1CA,KAAKkB,aAAaL,EACtB,E,cAuBJ,MAAMc,UAAsBX,EAKxBjB,cACI6B,Q,YALJ,mBACA,mBACA,mBAII,EAAA5B,KAAI,EAAe,KAAI,KACvB,EAAAA,KAAI,EAAY,GAAE,KAClB,EAAAA,KAAI,GAAgB,EAAK,IAC7B,CAEI6B,iBACA,OAAO,EAAA7B,KAAI,MACf,CAEA8B,UAAUD,GACN,GAAmB,OAAfA,EAAqB,CACrB,IAAIE,EAAoBF,GAAc7B,MACjC6B,WAAYG,GAAgBH,EACjC,MAAQE,GAAsC,OAAjBC,KACvBH,WAAYG,GAAgBA,GAC9BD,EAAoBC,GAAgBhC,KAExC,GAAK+B,EAID,MAAM,IAAIE,UAAU,oFAHpB,EAAAjC,KAAI,EAAe6B,EAAU,I,MAOjC,EAAA7B,KAAI,EAAe,KAAI,IAE/B,CAEAkC,eACI,EAAAlC,KAAI,GAAgB,EAAI,IAC5B,CAEAmC,aACInC,KAAK0B,cAAc,IAAIX,EAAW,gBAClC,EAAAf,KAAI,OAAU7E,OAAO,GACrB,EAAA6E,KAAI,GAAgB,EAAK,IAC7B,CAEAoC,aACI,OAAO,EAAApC,KAAI,OAAUK,OACzB,CAEAa,aAAaL,GACTe,MAAMV,aAAaL,GACnB,MAAM,WAACgB,GAAc7B,KACjB6B,GACAA,EAAWX,aAAaL,EAEhC,E,mEAEewB,EAAkB3G,EAAeC,GAC5C,MAAML,EAAU,EAAA0E,KAAI,OACdsC,EAAS,IAAInC,EAAkB,CACjC3E,OAAQwE,KACR9B,WAAYiC,EAAkBD,gBAC9BzE,aAAc4G,EACd3G,WAAUC,aAEdL,EAAQgB,KAAKgG,GACR,EAAAtC,KAAI,SACLA,KAAK0B,cAAc,IAAIX,EAAW,gBAClCzF,EAAQH,OAAO,GAEvB,EAAC,WAEamH,GACV,EAAAtC,KAAI,OAAU1D,KAAKgG,GACd,EAAAtC,KAAI,SACLA,KAAK0B,cAAc,IAAIX,EAAW,gBAClC,EAAAf,KAAI,OAAU7E,OAAO,GAE7B,EAEO,EAAAoH,yBAA4B,IAAI,MACnCC,cAAcC,EAAiBJ,EAAkB3G,EAAeC,GACxD8G,aAAgBd,GAChB,EAAAc,EAAI,SAAe,KAAnBA,EAAoBJ,EAAU3G,EAAUC,EAEhD,CAEA+G,aAAaD,EAAiBH,GACtBG,aAAgBd,GAChB,EAAAc,EAAI,SAAc,KAAlBA,EAAmBH,EAE3B,GAIR,IAAIC,EAAqDZ,EAAcY,gCAChEZ,EAAcY,yBAErB,IAAII,EAAkChB,EAMtC,MAAMiB,EAAwC,WAC1C,MAAO,CACHpH,EAAqB6G,KAErB,MAAM,YAACtC,GAAevE,GAChB,UAACqH,GAAa9C,EAYpBxG,OAAOuJ,eAAeD,EAAWR,EAAU,CACvC1F,IAZW,SAA4BE,GACvC,MAAMnB,EAAWqH,EAA8BC,YAAYhD,KAAMqC,GAKjE,OAJAU,EAA8BE,YAAYjD,KAAMqC,EAAUxF,GACtDA,IAAUnB,GACV6G,EAAyBC,cAAcxC,KAAMqC,EAAU3G,EAAUmB,IAE9D,CACX,EAMIhE,IALW,WACX,OAAOkK,EAA8BC,YAAYhD,KAAMqC,EAC3D,EAIIa,YAAY,GACd,CAEV,EAcA,MAAMC,UAAwBxB,EAG1B5B,cACI6B,QAHJ,mBAII,EAAA5B,KAAI,EAAe,IAAIiB,IAAK,IAChC,E,cAEO,EAAA8B,8BAAiC,IAAI,MACxCE,YAAYR,EAAmBJ,EAAkBxF,GACzC4F,aAAgBU,GAChB,EAAAV,EAAI,OAAa9F,IAAI0F,EAAUxF,EAEvC,CAEAmG,YAAYP,EAAmBJ,GAC3B,GAAII,aAAgBU,EAChB,OAAO,EAAAV,EAAI,OAAa5J,IAAIwJ,EAEpC,GAIR,IAAIU,EAA+DI,EAAgBJ,qCAC5EI,EAAgBJ,8BAEvB,IAAIK,EAAsCD,E,cAoM1C,IAAIE,EA9KJ,cAAiE1B,EAK7D5B,YAAYK,GACRwB,QALJ,mBAMI,EAAA5B,KAAI,EAAUI,GAAOC,SAAW,GAAE,IACtC,CAEAyB,UAAUD,GACND,MAAME,UAAUD,GAChB,EAAA7B,KAAI,OAAQvG,SAAS6J,IACjBA,EAAOxB,UAAUD,EAAW,GAEpC,CAEIrE,aACA,OAAO,EAAAwC,KAAI,OAAQxC,MACvB,CAEA3E,IAAI0H,GACA,OAAO,EAAAP,KAAI,OAAQO,IAAU,IACjC,CAEAA,MAAMD,GACF,OAAO,EAAAN,KAAI,OAAQ5E,QAAQkF,EAC/B,CAEA/C,SACI,OAAO,EAAAyC,KAAI,OAAQzC,QACvB,CAEAgG,KAAKC,GACD,MACMC,EADQ,EAAAzD,KAAI,OACSvB,KACvB,CAAC6E,EAAQ5G,KACE,CACH4D,KAAMgD,EACN/C,MAAO7D,MAInB+G,EAAaF,MACT,CAACG,EAAeC,IACLH,EACHE,EAAcpD,KAAMqD,EAAcrD,QAI9C,EAAAN,KAAI,EAAUyD,EAAahF,KAAImF,GAAiBA,EAActD,OAAK,KACnE,MAAMgC,EAAS,IAAInC,EAAkB,CACjC3E,OAAQwE,KACR9B,WAAYiC,EAAkB9B,UAC9Bc,cAAesE,EAAahF,KAAImF,GAAiBA,EAAcrD,UAEnEgC,EAAyBG,aAAa1C,KAAMsC,EAChD,CAEAuB,WAAWzD,GACP,MAAM0D,EAAS,EAAA9D,KAAI,QACb,WAAC6B,GAAc7B,KACjB6B,GACAzB,EAAM3G,SAAQ6J,IACVA,EAAOxB,UAAUD,EAAW,IAGpCiC,EAAO3I,OAAO,EAAG,KAAMiF,GACvB,MAAMkC,EAAS,IAAInC,EAAkB,CACjC3E,OAAQwE,KACR9B,WAAYiC,EAAkBhC,YAC9BG,cAAe,EACfC,cAAe6B,IAEnBmC,EAAyBG,aAAa1C,KAAMsC,EAChD,CAEAnI,UAAUiG,GACN,MAAM0D,EAAS,EAAA9D,KAAI,QACb,OAACxC,GAAUsG,GACX,WAACjC,GAAc7B,KACjB6B,GACAzB,EAAM3G,SAAQ6J,IACVA,EAAOxB,UAAUD,EAAW,IAGpCiC,EAAOxH,QAAQ8D,GACf,MAAMkC,EAAS,IAAInC,EAAkB,CACjC3E,OAAQwE,KACR9B,WAAYiC,EAAkBhC,YAC9BG,cAAed,EACfe,cAAe6B,IAEnBmC,EAAyBG,aAAa1C,KAAMsC,EAChD,CAEAyB,OAAOxD,KAAkBH,GACrB,MAAM0D,EAAS,EAAA9D,KAAI,QACb,OAACxC,GAAUsG,EAEjB,GADsBE,KAAKC,IAAI1D,IACV/C,EAAQ,CACzB,GAAI+C,GAAS,EAAG,CACZ,MAAM,WAACsB,GAAc7B,KACrBI,EAAM3G,SAAQ6J,IACVA,EAAOxB,UAAUD,EAAW,IAE5BtB,EAAQ/C,EACRsG,EAAO3I,OAAOoF,EAAO,KAAMH,GAG3B0D,EAAOxH,QAAQ8D,E,MAGlB,GAAIG,EAAQ,EAAG,CAChBA,EAAQ/C,EAAS+C,EACjB,MAAM,WAACsB,GAAc7B,KACjB6B,GACAzB,EAAM3G,SAAQ6J,IACVA,EAAOxB,UAAUD,EAAW,IAGpCiC,EAAO3I,OAAOoF,EAAO,KAAMH,E,CAE/B,MAAMkC,EAAS,IAAInC,EAAkB,CACjC3E,OAAQwE,KACR9B,WAAYiC,EAAkBhC,YAC9BG,cAAeiC,EACfhC,cAAe6B,EAAMC,UAEzBkC,EAAyBG,aAAa1C,KAAMsC,E,CAEpD,CAEA4B,OAAO5D,GACH,MAAMwD,EAAS,EAAA9D,KAAI,OACbO,EAAQuD,EAAO1I,QAAQkF,GAC7B,GAAIC,GAAS,EAAG,CACZ,MAAMD,EAAOwD,EAAO3I,OAAOoF,EAAO,GAAG,IAC/B,WAACsB,GAAc7B,KACjB6B,GACAvB,EAAKwB,UAAU,MAEnB,MAAMQ,EAAS,IAAInC,EAAkB,CACjC3E,OAAQwE,KACR9B,WAAYiC,EAAkB/B,YAC9BO,aAAc4B,EACd3B,aAAc,CAAC0B,KAEnBiC,EAAyBG,aAAa1C,KAAMsC,E,CAEpD,CAEA6B,QACI,MAAM/D,EAAQ,EAAAJ,KAAI,QACZ,OAACxC,GAAU4C,EACjB,GAAI5C,EAAS,EAAG,CACZ,MAAMoB,EAAewB,EAAMjF,OAAO,IAC5B,WAAC0G,GAAc7B,KACjB6B,GACAjD,EAAanF,SAAS2K,IAClBA,EAActC,UAAU,KAAK,IAGrC,MAAMQ,EAAS,IAAInC,EAAkB,CACjC3E,OAAQwE,KACR9B,WAAYiC,EAAkB/B,YAC9BO,aAAc,EACdC,aAAcA,IAElB2D,EAAyBG,aAAa1C,KAAMsC,E,CAEpD,G,mFAsEI,MAAMhH,EAAU,EAAA0E,KAAI,OAAU7E,OAAO,GACjCG,EAAQkC,OAAS,GACjB,EAAAwC,KAAI,OAAU,KAAdA,KAAe1E,EAEvB,EAAC,WAEiBuF,GACd,IAAK,EAAAb,KAAI,OAAgB,CACrB,MAAM,OAACxE,EAAM,cAAEkF,GAAiBG,EAC1BwD,EAAY,EAAArE,KAAI,OAAanH,IAAe6H,GAClD,GAAI2D,EAAW,CACX,MAAM,QAAC1L,GAAW0L,GACZ,WAACtI,EAAU,iBAAEM,EAAgB,UAAEmD,EAAS,QAAE8E,GAAW3L,EACvD2L,EACIvI,GAAcP,aAAkBmH,GAC5BtG,EACA,EAAA2D,KAAI,OAAU1D,QACPd,EAAO4G,aACL5F,QAAOjB,IACJ,MAAM,aAACE,GAAgBF,EACvB,OAAOc,EAAiBJ,SACpBR,EACH,KAKb,EAAAuE,KAAI,OAAU1D,QACPd,EAAO4G,cAGlB,EAAApC,KAAI,SAAS,KAAbA,OAEKR,GAAahE,aAAkB6H,IACpC,EAAArD,KAAI,OAAU1D,QACPd,EAAO4G,cAEd,EAAApC,KAAI,SAAS,KAAbA,OAGCxE,GAAUkF,IACX3E,GAAcP,aAAkBmH,GAC5BtG,EACA,EAAA2D,KAAI,OAAU1D,QACPd,EAAO4G,aACL5F,QAAOjB,IACJ,MAAM,aAACE,GAAgBF,EACvB,OAAOc,EAAiBJ,SACpBR,EACH,KAKb,EAAAuE,KAAI,OAAU1D,QACPd,EAAO4G,cAGlB,EAAApC,KAAI,SAAS,KAAbA,OAEKR,GAAahE,aAAkB6H,IACpC,EAAArD,KAAI,OAAU1D,QACPd,EAAO4G,cAEd,EAAApC,KAAI,SAAS,KAAbA,O,EAKpB,EAGJ,IAAIuE,EAvHJ,MAUIxE,YAAYsB,G,YATZ,mBACA,mBACA,mBAEA,mBAMI,EAAArB,KAAI,EAAaqB,EAAQ,KACzB,EAAArB,KAAI,EAAY,GAAE,KAClB,EAAAA,KAAI,GAAiB,EAAK,KAC1B,EAAAA,KAAI,EAAe,IAAIrF,QAAS,IACpC,CAEAiC,QAAQ6F,EAAiB9J,GACrB,EAAAqH,KAAI,GAAiB,EAAK,KAC1B,MAAMwE,EAAa,EAAAxE,KAAI,OACvB,IAAIqE,EAAYG,EAAW3L,IAAI4J,GAC/B,GAAK4B,EAODG,EAAW7H,IAAI8F,EAAM4B,OAPT,CACZ,MAAMI,EAAW,EAAAzE,KAAI,SAAmB0E,KAAK1E,MAC7CyC,EAAKhI,iBAAiB,cAAegK,GACrCJ,EAAY,CAACI,WAAU9L,WACvB6L,EAAW7H,IAAI8F,EAAM4B,E,CAK7B,CAEAM,UAAUlC,GAEN,IAAI4B,EADe,EAAArE,KAAI,OACInH,IAAI4J,GAC/B,GAAI4B,EAAW,CACX,MAAM,SAACI,GAAYJ,EACnB5B,EAAKnB,oBAAoB,cAAemD,E,CAEhD,CAEAG,aACI,EAAA5E,KAAI,OAAU7E,OAAO,GACrB,EAAA6E,KAAI,GAAiB,EAAI,IAC7B,E,4rBC9rBJ,MAAM6E,UAAiBC,YAGnB/E,cACI6B,QAHJ,mBAII,EAAA5B,KAAI,EAAU,KAAI,IACtB,CAEIjF,YACA,OAAO,EAAAiF,KAAI,MACf,CAEA+E,SAAShK,GACDA,IAAU,EAAAiF,KAAI,QACd,EAAAA,KAAI,EAAUjF,EAAK,IAE3B,CAEAiK,cAEA,CAEAC,eAEA,CAEAC,SACI,MAAM,WAACC,GAAcnF,KACrB,GAAmB,OAAfmF,EAAqB,CACrB,MAAMC,EAASpF,KAAKiF,eAChBG,GACAD,EAAW1F,gBAAgB2F,E,CAGnC,MAAMC,EAAQrF,KAAKgF,cACfK,GACArF,KAAKP,gBAAgB4F,EAE7B,E,cAGJ,IAAIC,EAAwBT,C,GCzDxBU,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqB7L,IAAjB8L,EACH,OAAOA,EAAaC,QAGrB,IAAIC,EAASL,EAAyBE,GAAY,CAGjDE,QAAS,CAAC,GAOX,OAHAE,EAAoBJ,GAAUG,EAAQA,EAAOD,QAASH,GAG/CI,EAAOD,OACf,CCrBAH,EAAoBM,EAAI,CAACH,EAASI,KACjC,IAAI,IAAIC,KAAOD,EACXP,EAAoBS,EAAEF,EAAYC,KAASR,EAAoBS,EAAEN,EAASK,IAC5EzM,OAAOuJ,eAAe6C,EAASK,EAAK,CAAE9C,YAAY,EAAMrK,IAAKkN,EAAWC,IAE1E,ECNDR,EAAoBS,EAAI,CAACC,EAAKC,IAAU5M,OAAOsJ,UAAUuD,eAAeC,KAAKH,EAAKC,G,8pBCclF,MAAMG,UAAkB,KAMpBvG,YAAYvH,GACRoJ,QACA5B,KAAKtH,KAAOF,GAAME,KAClBsH,KAAKI,MAAQ,IAAI,KAAU5H,GAAM4H,OAAS,GAC9C,EANA,IADC,W,2BAiBL,MAAMmG,UAAsB,KAaxBxG,YAAYvH,GACRoJ,QACA,MAAM,KAAClJ,EAAI,MAAE8N,EAAK,KAAE/F,EAAI,KAAEgG,GAAQjO,EAClCwH,KAAKtH,KAAOA,EACZsH,KAAKwG,MAAQA,EACbxG,KAAKS,KAAOA,EACZT,KAAKyG,KAAOA,CAChB,EAlBA,IADC,W,2BAID,IADC,W,4BAID,IADC,W,2BAID,IADC,W,2BAgCL,IAAMC,EAAN,cAA2B,IAKvB3G,YAAYhF,GACR6G,Q,YACA5B,KAAK+E,SAAShK,GAAS,IAAIuL,EAAU,CACjClG,MAAO,KAEf,CAEA4E,cACI,MAAM,MAACjK,GAASiF,KAChB,OAAO,EAAAA,KAAI,SAAY,KAAhBA,KAAiBjF,EAC5B,G,yBAEY0L,GACR,OAAO,QAAQ,SAAU,CACrBtN,UAAU,QACNsN,EAAKrG,OACLkD,GAAU,EAAAtD,KAAI,SAAgB,KAApBA,KAAqBsD,MAG3C,EAAC,WAEehD,GACZ,MAAM,MAACkG,EAAK,KAAE/F,EAAI,KAAEgG,GAAQnG,EAC5B,OAAO,QACHA,GACA,QAAQ,aAAc,CAClBrH,WAAY,CACRwH,KAAMA,GAEVtH,SAAU,CACSqN,GACjBjK,YACY3C,IAAT6M,EAAsB,CACnB,EAAAzG,KAAI,SAAY,KAAhBA,KAAiByG,IACjB,MAGZ,CAAC,QAAS,SACV,CAACE,EAAUtE,EAAU3G,EAAUC,KAElB,UADD0G,IAEAsE,EAASH,MAAQ7K,E,GAMrC,EApDE+K,EAAY,IAHjB,QAAc,CACXhO,KAAM,YAEJgO,E","sources":["webpack://editor/./src/elements/Element.ts","webpack://editor/./src/elements/Snippets.ts","webpack://editor/./src/models/Model.ts","webpack://editor/./src/views/View.ts","webpack://editor/webpack/bootstrap","webpack://editor/webpack/runtime/define property getters","webpack://editor/webpack/runtime/hasOwnProperty shorthand","webpack://editor/./src/views/MenuView.ts"],"sourcesContent":["import { ModelList, ModelNode, ModelChangeRecord, ModelChangeObserver, ModelChangeObserverOptions } from \"../models/Model\";\r\nimport { camelToTrain } from \"./Snippets\";\r\n\r\nexport { CustomElement };\r\nexport { ReactiveChildElements };\r\nexport { QueryProperty };\r\nexport { QueryAllProperty };\r\nexport { AttributeProperty };\r\nexport { reactiveElement };\r\nexport { revokeReactiveElement };\r\nexport { reactiveChildElements };\r\nexport { revokeReactiveChildElements };\r\nexport { element };\r\nexport { fragment };\r\nexport { textNode };\r\nexport { AttributeMutationMixin };\r\nexport { AttributeType };\r\nexport { areAttributesMatching };\r\nexport { AttributeMutationMixinBase };\r\nexport { trimMultilineIndent };\r\nexport { Stylesheet };\r\n\r\nexport { reactiveElementsMap };\r\n\r\ninterface AttributePropertyDecorator {\r\n    (\r\n        init: {\r\n            type: typeof String;\r\n            observed?: boolean;\r\n            defaultValue?: string | null;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Number;\r\n            observed?: boolean;\r\n            defaultValue?: number | null;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Boolean;\r\n            observed?: boolean;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Object;\r\n            observed?: boolean;\r\n            defaultValue?: any | null;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n}\r\n\r\nconst AttributeProperty: AttributePropertyDecorator = function(\r\n    init: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Object;\r\n        observed?: boolean;\r\n        defaultValue?: string | number | any | null;\r\n        name?: string;\r\n    }\r\n) {\r\n    return <E extends HTMLElement>(\r\n        target: E, property: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(property);\r\n        const {defaultValue = null, observed = false, name = camelToTrain(propertyName)} = init;\r\n        if (observed) {\r\n            const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n            if (Array.isArray(observedAttributes)) {\r\n                observedAttributes.push(name);\r\n            }\r\n            else {\r\n                Object.defineProperty(\r\n                    constructor, \"observedAttributes\", {\r\n                        value: [name],\r\n                        writable: false\r\n                    }\r\n                );\r\n            }\r\n        }\r\n        const {type} = init;\r\n        switch (type) {\r\n            case Boolean: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        return this.hasAttribute(name);\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value) {\r\n                            this.setAttribute(name, \"\");\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Object: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(name);\r\n                        return (val !== null) ? JSON.parse(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(name, JSON.stringify(value));\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Number: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(name);\r\n                        return (val !== null) ? parseFloat(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(name, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case String:\r\n            default: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(name);\r\n                        return (val !== null) ? val : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(name, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n    \r\nfunction Stylesheet(text: string): CSSStyleSheet {\r\n    const stylesheet = new CSSStyleSheet();\r\n    (stylesheet as any).replaceSync(text);\r\n    return stylesheet;\r\n}\r\n\r\nfunction trimMultilineIndent(text: string): string {\r\n    const newlineIndex = text.indexOf(\"\\n\");\r\n    text = text.substring(newlineIndex + 1);\r\n    const indentMatch = text.match(/^[\\s]*/);\r\n    if (indentMatch) {\r\n        const indent = text.substring(0, indentMatch[0].length);\r\n        text = text.replaceAll(indent, \"\").trimEnd();\r\n    }\r\n    return text;\r\n}\r\n\r\ninterface CustomElementDecorator {\r\n    (init: {\r\n        name: string;\r\n        options?: ElementDefinitionOptions\r\n    }): <C extends CustomElementConstructor>(elementCtor: C) => C;\r\n}\r\n\r\nconst CustomElement: CustomElementDecorator = function(init: {\r\n    name: string;\r\n    options?: ElementDefinitionOptions\r\n}) {\r\n    return <C extends CustomElementConstructor>(\r\n        elementCtor: C\r\n    ) => {\r\n        const {name, options} = init;\r\n        if (!customElements.get(name)) {\r\n            customElements.define(\r\n                name,\r\n                elementCtor,\r\n                options\r\n            );\r\n        }\r\n        return elementCtor;\r\n    }\r\n}\r\n\r\ninterface QueryPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryProperty: QueryPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(propertyKey);\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return this.shadowRoot!.querySelector(selector);\r\n        } : function(this: HTMLElement) {\r\n            return this.querySelector(selector);\r\n        }\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\ninterface QueryAllPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryAllProperty: QueryAllPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(propertyKey);\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return Array.from(this.shadowRoot!.querySelectorAll(selector));\r\n        } : function(this: HTMLElement) {\r\n            return Array.from(this.querySelectorAll(selector));\r\n        };\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\nfunction fragment(...nodes: (Node | string)[]): DocumentFragment {\r\n    const fragment = document.createDocumentFragment();\r\n    fragment.append(...nodes);\r\n    return fragment;\r\n}\r\n\r\nfunction textNode(text: string): Node {\r\n    return document.createTextNode(text);\r\n}\r\n\r\ninterface HTMLElementInit {\r\n    options?: ElementCreationOptions,\r\n    attributes?: {\r\n        [name: string]: number | string | boolean | undefined\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    children?: Node | string | (Node | string)[] | NodeList | ReactiveChildElements,\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction element<E extends HTMLElementTagNameMap[K], K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): E;\r\nfunction element(\r\n    tagName: string, init?: HTMLElementInit): HTMLElement;\r\nfunction element<K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): HTMLElementTagNameMap[K] {\r\n    if (init) {\r\n        const {options, attributes, dataset, children, listeners} = init;\r\n        const element = document.createElement(tagName, options);\r\n        if (attributes) {\r\n            Object.entries(attributes).forEach(([attributeName, attributeValue]) => {\r\n                if (attributeValue !== undefined) {\r\n                    if (typeof attributeValue === \"boolean\") {\r\n                        element.toggleAttribute(camelToTrain(attributeName), attributeValue);\r\n                    }\r\n                    else {\r\n                        element.setAttribute(camelToTrain(attributeName), String(attributeValue));\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        if (dataset) {\r\n            const {dataset: elementDataset} = element;\r\n            Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                elementDataset[datasetEntry_i] = String(dataset[datasetEntry_i]);\r\n            });\r\n        }\r\n        if (children) {\r\n            if (typeof children === \"function\") {\r\n                children(element);\r\n            }\r\n            else if (typeof children === \"object\" && \"length\" in children) {\r\n                element.append(...Array.from(children));\r\n            }\r\n            else {\r\n                element.append(children);\r\n            }\r\n        }\r\n        if (listeners) {\r\n            Object.entries(listeners).forEach(([name_i, listener_i]) => {\r\n                if (Array.isArray(listener_i)) {\r\n                    element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                }\r\n                else {\r\n                    element.addEventListener(name_i, listener_i);\r\n                }\r\n            });\r\n        }\r\n        return element;\r\n    }\r\n    return document.createElement(tagName);\r\n}\r\n\r\nconst reactiveElementsMap = new WeakMap<ModelNode, {\r\n    observerOptions: ModelChangeObserverOptions,\r\n    reactiveElementsArray: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }[]\r\n}>();\r\n\r\nconst reactiveElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    model: ModelNode,\r\n    reactiveElement: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }\r\n}) => {\r\n    const {model, reactiveElement} = heldValue;\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    if (reactiveElementsMapEntry !== undefined) {\r\n        const {reactiveElementsArray} = reactiveElementsMapEntry;\r\n        reactiveElementsArray.splice(reactiveElementsArray.indexOf(reactiveElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveElementsPropertyObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    records.forEach((record_i) => {\r\n        const {target, propertyName, oldValue, newValue} = record_i;\r\n        const {reactiveElementsArray} = reactiveElementsMap.get(target)!;\r\n        reactiveElementsArray.forEach(reactiveElement_i => {\r\n            const {elementRef, react, properties} = reactiveElement_i;\r\n            const element = elementRef.deref();\r\n            if (element) {\r\n                if (properties.includes(propertyName!)) {\r\n                    react(element, propertyName!, oldValue, newValue);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveElement<M extends ModelNode, E extends Element, K extends string>(\r\n    model: M,\r\n    element: E,\r\n    properties: K[],\r\n    react: (object: E, property: K, oldValue: any, newValue: any) => void\r\n): E;\r\nfunction reactiveElement<M extends ModelNode, E extends Element>(\r\n    model: M,\r\n    element: E,\r\n    properties: string[],\r\n    react: (element: E, property: string, oldValue: any, newValue: any) => void\r\n): E {\r\n    const elementRef = new WeakRef(element);\r\n    const reactiveElement = {elementRef, react, properties};\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    reactiveElementsFinalizationRegistry.register(element, {model, reactiveElement});\r\n    if (!reactiveElementsMapEntry) {\r\n        const observerOptions = {\r\n            properties: true,\r\n            propertiesFilter: properties\r\n        };\r\n        const reactiveElementsArray = [reactiveElement];\r\n        reactiveElementsMap.set(model, {observerOptions, reactiveElementsArray});\r\n        reactiveElementsPropertyObserver.observe(model, observerOptions);\r\n    }\r\n    else {\r\n        const {reactiveElementsArray, observerOptions} = reactiveElementsMapEntry;\r\n        const {propertiesFilter} = observerOptions;\r\n        reactiveElementsArray.push(reactiveElement);\r\n        observerOptions.propertiesFilter = propertiesFilter ?\r\n            propertiesFilter.concat(properties.filter(\r\n                property_i => !propertiesFilter.includes(property_i)\r\n            )) : properties.filter(\r\n                (property_i, i, properties) => properties.indexOf(property_i) === i\r\n            )\r\n    }\r\n    properties.forEach((property_i) => {\r\n        if (property_i in model) {\r\n            const value = Reflect.get(model, property_i, model);\r\n            react(element, <any>property_i, <any>undefined, value);\r\n        }\r\n    });\r\n    return element;\r\n}\r\n\r\nfunction revokeReactiveElement<M extends ModelNode, E extends Element>(\r\n    model: M,\r\n    element: E\r\n): void {\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    if (reactiveElementsMapEntry) {\r\n        const {reactiveElementsArray} = reactiveElementsMapEntry;\r\n        const reactiveElementIndex = reactiveElementsArray.findIndex(\r\n            reactiveElement => reactiveElement.elementRef.deref() === element\r\n        );\r\n        if (reactiveElementIndex > -1) {\r\n            reactiveElementsArray.splice(reactiveElementIndex, 1);\r\n        }\r\n        if (reactiveElementsArray.length === 0) {\r\n            reactiveElementsMap.delete(model);\r\n        }\r\n    }\r\n}\r\n\r\ninterface ReactiveChildElements {\r\n    (parent: ParentNode): void;\r\n}\r\n\r\nconst reactiveChildElementsMap = new WeakMap<ModelList, {\r\n    reactiveChildElementsArray: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }[]\r\n}>();\r\n\r\nconst reactiveChildElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    list: ModelList,\r\n    reactiveChildElement: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }\r\n}) => {\r\n    const {list, reactiveChildElement} = heldValue;\r\n    const reactiveChildrenElementsMapEntry = reactiveChildElementsMap.get(list);\r\n    if (reactiveChildrenElementsMapEntry) {\r\n        const {reactiveChildElementsArray} = reactiveChildrenElementsMapEntry;\r\n        reactiveChildElementsArray.splice(reactiveChildElementsArray.indexOf(reactiveChildElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveChildElementsObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    let range: null | Range = null;\r\n    Array.from(records.values()).forEach((record_i) => {\r\n        const {target} = record_i;\r\n        const list = <ModelList>target;\r\n        const {length: listLength} = list;\r\n        const {reactiveChildElementsArray} = reactiveChildElementsMap.get(list)!;\r\n        reactiveChildElementsArray.forEach((reactiveChildElements_i) => {\r\n            const {parentRef, mapping, placeholder} = reactiveChildElements_i;\r\n            const parent = parentRef.deref();\r\n            if (parent) {\r\n                const {firstChild, children} = parent;\r\n                const {length: childrenCount} = children;\r\n                if (placeholder && listLength > 0 && firstChild == placeholder) {\r\n                    parent.removeChild(placeholder);\r\n                }\r\n                const {changeType, LIST_INSERT, LIST_REMOVE, LIST_SORT} = record_i;\r\n                switch (changeType) {\r\n                    case LIST_INSERT: {\r\n                        const {insertedIndex, insertedItems} = record_i;\r\n                        const insertedItemsArray = Array.from(insertedItems.values()).map(mapping);\r\n                        const {length: childrenCount} = children;\r\n                        if (insertedIndex < childrenCount) {\r\n                            children[insertedIndex].before(...insertedItemsArray);\r\n                        }\r\n                        else {\r\n                            parent.append(...insertedItemsArray);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_REMOVE: {\r\n                        const {removedIndex, removedItems} = record_i;\r\n                        const {length: removedCount} = removedItems;\r\n                        range = range ?? document.createRange();\r\n                        const removeEndIndex = removedIndex + (removedCount - 1);\r\n                        if (removeEndIndex < childrenCount) {\r\n                            range.setStartBefore(children[removedIndex]);\r\n                            range.setEndAfter(children[removeEndIndex]);\r\n                            range.deleteContents();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_SORT: {\r\n                        const {sortedIndices} = record_i;\r\n                        const childrenArray = Array.from(children);\r\n                        parent.append(\r\n                            ...sortedIndices.filter(\r\n                                index_i => index_i < childrenCount\r\n                            ).map(\r\n                                index_i => childrenArray[index_i]\r\n                            )\r\n                        );\r\n                        break;\r\n                    }\r\n                }\r\n                if (listLength == 0 && placeholder) {\r\n                    parent.append(placeholder);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveChildElements<Model extends ModelNode>(\r\n    list: ModelList<Model>,\r\n    mapping: (item: Model) => Element,\r\n    placeholder?: Element\r\n): ReactiveChildElements {\r\n    return (parent: ParentNode) => {\r\n        const parentRef = new WeakRef(parent);\r\n        const reactiveChildElementsMapEntry = reactiveChildElementsMap.get(list);\r\n        const reactiveChildElement = {parentRef, mapping, placeholder};\r\n        reactiveChildElementsFinalizationRegistry.register(parent, {list, reactiveChildElement});\r\n        if (!reactiveChildElementsMapEntry) {\r\n            const reactiveChildElementsArray = [reactiveChildElement];\r\n            reactiveChildElementsMap.set(list, {reactiveChildElementsArray});\r\n            reactiveChildElementsObserver.observe(list, {\r\n                childList: true\r\n            });\r\n        }\r\n        else {\r\n            const {reactiveChildElementsArray} = reactiveChildElementsMapEntry;\r\n            reactiveChildElementsArray.push(reactiveChildElement);\r\n        }\r\n        const children = list.length == 0 && placeholder ?\r\n            [placeholder] : Array.from(list.values()).map(mapping);\r\n        parent.replaceChildren(...children);\r\n    }\r\n}\r\n\r\nfunction revokeReactiveChildElements<Model extends ModelNode>(\r\n    list: ModelList<Model>,\r\n    parent: ParentNode,\r\n): void {\r\n    const reactiveChildElementsMapEntry = reactiveChildElementsMap.get(list);\r\n    if (reactiveChildElementsMapEntry) {\r\n        const {reactiveChildElementsArray} = reactiveChildElementsMapEntry;\r\n        const reactiveChildElementsIndex = reactiveChildElementsArray.findIndex(\r\n            reactiveChildElement => reactiveChildElement.parentRef.deref() === parent\r\n        );\r\n        if (reactiveChildElementsIndex > -1) {\r\n            reactiveChildElementsArray.splice(reactiveChildElementsIndex, 1);\r\n        }\r\n        if (reactiveChildElementsArray.length === 0) {\r\n            reactiveChildElementsMap.delete(list);\r\n        }\r\n    }\r\n}\r\n\r\ninterface AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n    attach(element: Element): void;\r\n    detach(element: Element): void;\r\n}\r\n\r\ntype AttributeType = \"string\" | \"boolean\" | \"list\";\r\n\r\nfunction areAttributesMatching(\r\n    referenceAttributeType: AttributeType,\r\n    referenceAttributeName: string, referenceAttributeValue: string,\r\n    attributeName: string, attributeValue: string | null): boolean {\r\n    if (referenceAttributeName == attributeName) {\r\n        switch (referenceAttributeType) {\r\n            case \"boolean\":\r\n                return referenceAttributeValue == \"\" && attributeValue == \"\";\r\n            case \"string\":\r\n                return referenceAttributeValue !== \"\" && (referenceAttributeValue == attributeValue);\r\n            case \"list\":\r\n                return (referenceAttributeValue !== \"\" && attributeValue !== null) && new RegExp(`${referenceAttributeValue}\\s*?`, \"g\").test(attributeValue );\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nclass AttributeMutationMixinBase implements AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n\r\n    constructor(attributeName: string, attributeType: AttributeType = \"boolean\", attributeValue: string = \"\") {\r\n        this.attributeName = attributeName;\r\n        this.attributeType = attributeType;\r\n        this.attributeValue = attributeValue;\r\n    }\r\n\r\n    attach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n\r\n    detach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n}","\r\nexport { snakeToCamel };\r\nexport { camelToSnake };\r\nexport { trainToCamel };\r\nexport { camelToTrain };\r\n\r\nfunction snakeToCamel(str: string) {\r\n  return str.split('_').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToSnake(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '_').toLowerCase();\r\n}\r\n\r\nfunction trainToCamel(str: string) {\r\n  return str.split('-').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToTrain(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '-').toLowerCase();\r\n}","export { ModelChangeRecord };\r\nexport { ModelEvent };\r\nexport { ModelNode };\r\nexport { ModelObject };\r\nexport { ModelProperty };\r\nexport { ModelList };\r\nexport { ModelChangeObserverOptions };\r\nexport { ModelChangeObserver };\r\n\r\ninterface ModelChangeRecordConstructor {\r\n    prototype: ModelChangeRecord;\r\n    new(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ): ModelChangeRecord;\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\ninterface ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly changeType: number;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\nclass ModelChangeRecordBase implements ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList;\r\n    readonly changeType: number;\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n\r\n    constructor(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ) {\r\n        this.target = init.target;\r\n        this.changeType = init.changeType;\r\n        this.propertyName = init.propertyName ?? null;\r\n        this.oldValue = init.oldValue ?? undefined;\r\n        this.newValue = init.newValue ?? undefined;\r\n        this.removedIndex = init.removedIndex ?? 0;\r\n        this.removedItems = new ModelNodesList(init.removedItems ?? []);\r\n        this.insertedIndex = init.insertedIndex ?? 0;\r\n        this.insertedItems = new ModelNodesList(init.insertedItems ?? []);\r\n        this.sortedIndices = init.sortedIndices ?? [];\r\n    }\r\n\r\n    static get PROPERTY_CHANGE(): number {\r\n        return 1;\r\n    }\r\n\r\n    static get LIST_REMOVE(): number {\r\n        return 2;\r\n    }\r\n\r\n    static get LIST_INSERT(): number {\r\n        return 3;\r\n    }\r\n\r\n    static get LIST_SORT(): number {\r\n        return 4;\r\n    }\r\n\r\n    get PROPERTY_CHANGE(): number {\r\n        return ModelChangeRecordBase.PROPERTY_CHANGE;\r\n    }\r\n\r\n    get LIST_REMOVE(): number {\r\n        return ModelChangeRecordBase.LIST_REMOVE;\r\n    }\r\n\r\n    get LIST_INSERT(): number {\r\n        return ModelChangeRecordBase.LIST_INSERT;\r\n    }\r\n\r\n    get LIST_SORT(): number {\r\n        return ModelChangeRecordBase.LIST_SORT;\r\n    }\r\n}\r\n\r\nvar ModelChangeRecord: ModelChangeRecordConstructor = ModelChangeRecordBase;\r\n\r\ninterface ModelNodesListConstructor {\r\n    prototype: ModelNodesList;\r\n    new(items: any[]): ModelNodesList;\r\n}\r\n\r\ninterface ModelNodesList {\r\n    get length(): number;\r\n    item(index: number): ModelNode | null;\r\n    values(): IterableIterator<ModelNode>;\r\n}\r\n\r\nclass ModelNodesListBase implements ModelNodesList {\r\n    #items: ModelNode[];\r\n\r\n    constructor(items: ModelNode[]) {\r\n        this.#items = items.slice();\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    item(index: number): ModelNode | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    values(): IterableIterator<ModelNode> {\r\n        return this.#items.values();\r\n    }\r\n}\r\n\r\nvar ModelNodesList: ModelNodesListConstructor = ModelNodesListBase;\r\n\r\ninterface ModelEventConstructor {\r\n    prototype: ModelEvent;\r\n    new(type: string): ModelEvent;\r\n}\r\n\r\ninterface ModelEvent {\r\n    readonly type: string;\r\n    readonly currentTarget: ModelEventTarget | null;\r\n    readonly target: ModelEventTarget | null;\r\n}\r\n\r\nclass ModelEventBase implements ModelEvent {\r\n    readonly type: string;\r\n\r\n    #currentTarget: ModelEventTarget | null;\r\n    #target: ModelEventTarget | null;\r\n\r\n    constructor(type: string) {\r\n        this.type = type;\r\n        this.#currentTarget = null;\r\n        this.#target = null;\r\n    }\r\n\r\n    get currentTarget(): ModelEventTarget | null {\r\n        return this.#currentTarget;\r\n    }\r\n\r\n    get target(): ModelEventTarget | null {\r\n        return this.#target;\r\n    }\r\n\r\n    static ModelEventTargetAccessor? = new class ModelEventTargetAccessor {\r\n        setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#currentTarget = currentTarget;\r\n            }\r\n        }\r\n\r\n        setTarget(event: ModelEvent, target: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#target = target;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface ModelEventTargetAccessor {\r\n    setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void;\r\n    setTarget(event: ModelEvent, target: ModelEventTarget): void;\r\n}\r\n\r\nvar ModelEventTargetAccessor: ModelEventTargetAccessor = ModelEventBase.ModelEventTargetAccessor!;\r\ndelete ModelEventBase.ModelEventTargetAccessor;\r\n\r\nvar ModelEvent: ModelEventConstructor = ModelEventBase;\r\n\r\ninterface ModelEventTargetConstructor {\r\n    prototype: ModelEventTarget;\r\n    new(): ModelEventTarget;\r\n}\r\n\r\ninterface ModelEventTarget {\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    dispatchEvent(event: ModelEvent): void;\r\n    receiveEvent(event: ModelEvent): void;\r\n}\r\n\r\nclass ModelEventTargetBase implements ModelEventTarget {\r\n    #callbacks: Map<string, ((event: ModelEvent) => void)[]>;\r\n\r\n    constructor() {\r\n        this.#callbacks = new Map();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        const {type} = event;\r\n        const callbacks = this.#callbacks.get(type);\r\n        ModelEventTargetAccessor.setCurrentTarget(event, this);\r\n        if (callbacks) {\r\n            callbacks.forEach((callback_i) => {\r\n                callback_i(event);\r\n            });\r\n        }\r\n    }\r\n\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            callbacks.push(callback);\r\n        }\r\n        else {\r\n            this.#callbacks.set(type, [callback]);\r\n        }\r\n    }\r\n\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            const callbackIndex = callbacks.findIndex(\r\n                callback_i => callback_i == callback\r\n            );\r\n            if (callbackIndex > -1) {\r\n                callbacks.splice(callbackIndex, 1);\r\n            }\r\n            if (callbacks.length == 0) {\r\n                this.#callbacks.delete(type);\r\n            }\r\n        }\r\n    }\r\n\r\n    dispatchEvent(event: ModelEvent): void {\r\n        ModelEventTargetAccessor.setTarget(event, this);\r\n        this.receiveEvent(event);\r\n    }\r\n}\r\n\r\nvar ModelEventTarget: ModelEventTargetConstructor = ModelEventTargetBase;\r\n\r\ninterface ModelNodeConstructor {\r\n    prototype: ModelNode;\r\n    new(): ModelNode;\r\n}\r\n\r\ninterface ModelNode extends ModelEventTarget {\r\n    readonly parentNode: ModelNode | null;\r\n    setParent(parentNode: ModelNode | null): void;\r\n    getRecords(): ModelChangeRecord[];\r\n    beginChanges(): void;\r\n    endChanges(): void;\r\n}\r\n\r\ninterface ModelNodeRecordsAccessor {\r\n    triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void;\r\n    handleRecord(node: ModelNode, record: ModelChangeRecord): void;\r\n}\r\n\r\nclass ModelNodeBase extends ModelEventTargetBase implements ModelNode {\r\n    #parentNode: ModelNode | null;\r\n    #records: ModelChangeRecord[];\r\n    #isRecording: boolean;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#parentNode = null;\r\n        this.#records = [];\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    get parentNode(): ModelNode | null {\r\n        return this.#parentNode;\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        if (parentNode !== null) {\r\n            let isCyclicReference = parentNode == this;\r\n            let {parentNode: ancestorNode} = parentNode;\r\n            while (!isCyclicReference && ancestorNode !== null) {\r\n                ({parentNode: ancestorNode} = ancestorNode);\r\n                isCyclicReference = ancestorNode == this;\r\n            }\r\n            if (!isCyclicReference) {\r\n                this.#parentNode = parentNode;\r\n            }\r\n            else {\r\n                throw new TypeError(\"Failed to set parent on ModelNode: circular reference detected in the hierarchy.\");\r\n            }\r\n        }\r\n        else {\r\n            this.#parentNode = null;\r\n        }\r\n    }\r\n    \r\n    beginChanges(): void {\r\n        this.#isRecording = true;\r\n    }\r\n\r\n    endChanges(): void {\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        this.#records.splice(0);\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    getRecords(): ModelChangeRecord[] {\r\n        return this.#records.slice();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        super.receiveEvent(event);\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            parentNode.receiveEvent(event);\r\n        }\r\n    }\r\n\r\n    #triggerChange(property: string, oldValue: any, newValue: any): void {\r\n        const records = this.#records;\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.PROPERTY_CHANGE,\r\n            propertyName: property,\r\n            oldValue, newValue\r\n        });\r\n        records.push(record);\r\n        if (!this.#isRecording) {\r\n            this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n            records.splice(0);\r\n        }\r\n    }\r\n\r\n    #handleRecord(record: ModelChangeRecord): void {\r\n        this.#records.push(record);\r\n        if (!this.#isRecording) {\r\n            this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n            this.#records.splice(0);\r\n        }\r\n    }\r\n\r\n    static ModelNodeRecordsAccessor? = new class ModelNodeRecordsAccessor {\r\n        triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#triggerChange(property, oldValue, newValue);\r\n            }\r\n        }\r\n\r\n        handleRecord(node: ModelNode, record: ModelChangeRecord): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#handleRecord(record);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelNodeRecordsAccessor: ModelNodeRecordsAccessor = ModelNodeBase.ModelNodeRecordsAccessor!;\r\ndelete ModelNodeBase.ModelNodeRecordsAccessor;\r\n\r\nvar ModelNode: ModelNodeConstructor = ModelNodeBase;\r\n\r\ninterface ModelPropertyDecorator {\r\n    (): <Model extends ModelObject>(target: Model, property: string) => void;\r\n}\r\n\r\nconst ModelProperty: ModelPropertyDecorator = function() {\r\n    return (\r\n        target: ModelObject, property: string\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const setter = function(this: ModelObject, value: any) {\r\n            const oldValue = ModelObjectPropertiesAccessor.getProperty(this, property);\r\n            ModelObjectPropertiesAccessor.setProperty(this, property, value);\r\n            if (value !== oldValue) {\r\n                ModelNodeRecordsAccessor.triggerChange(this, property, oldValue, value);\r\n            }\r\n            return true;\r\n        };\r\n        const getter = function(this: ModelObject) {\r\n            return ModelObjectPropertiesAccessor.getProperty(this, property);\r\n        };\r\n        Object.defineProperty(prototype, property, {\r\n            set: setter,\r\n            get: getter,\r\n            enumerable: true\r\n        });\r\n    }\r\n}\r\n\r\ninterface ModelObjectConstructor {\r\n    prototype: ModelObject;\r\n    new(): ModelObject;\r\n}\r\n\r\ninterface ModelObject extends ModelNode {}\r\n\r\ninterface ModelObjectPropertiesAccessor {\r\n    setProperty(node: ModelNode, property: string, value: any): void;\r\n    getProperty(node: ModelNode, property: string,): any;\r\n}\r\n\r\nclass ModelObjectBase extends ModelNodeBase implements ModelObject {\r\n    #properties: Map<string, any>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#properties = new Map();\r\n    }\r\n\r\n    static ModelObjectPropertiesAccessor? = new class ModelPropertiesAccessor {\r\n        setProperty(node: ModelObject, property: string, value: any): void {\r\n            if (node instanceof ModelObjectBase) {\r\n                node.#properties.set(property, value);\r\n            }\r\n        }\r\n\r\n        getProperty(node: ModelObject, property: string): any {\r\n            if (node instanceof ModelObjectBase) {\r\n                return node.#properties.get(property);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelObjectPropertiesAccessor: ModelObjectPropertiesAccessor = ModelObjectBase.ModelObjectPropertiesAccessor!;\r\ndelete ModelObjectBase.ModelObjectPropertiesAccessor;\r\n\r\nvar ModelObject: ModelObjectConstructor = ModelObjectBase;\r\n\r\ninterface ModelListConstructor {\r\n    prototype: ModelList;\r\n    new<Model extends ModelNode>(): ModelList<Model>;\r\n    new<Model extends ModelNode>(items: Model[]): ModelList<Model>;\r\n}\r\n\r\ninterface ModelList<Model extends ModelNode = ModelNode> extends ModelNode {\r\n    readonly parentNode: ModelNode | null;\r\n    readonly length: number;\r\n    index(item: Model): number;\r\n    get(index: number): Model | null;\r\n    values(): IterableIterator<Model>;\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void;\r\n    insert(index: number, ...items: Model[]): void;\r\n    prepend(...items: Model[]): void;\r\n    append(...items: Model[]): void;\r\n    remove(item: Model): void;\r\n    clear(): void;\r\n}\r\n\r\nclass ModelListBase<Model extends ModelNode = ModelNode> extends ModelNodeBase implements ModelList<Model> {\r\n    #items: Model[];\r\n\r\n    constructor()\r\n    constructor(items: Model[])\r\n    constructor(items?: Model[]) {\r\n        super();\r\n        this.#items = items?.slice() ?? [];\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        super.setParent(parentNode);\r\n        this.#items.forEach((item_i) => {\r\n            item_i.setParent(parentNode);\r\n        });\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    get(index: number): Model | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    index(item: Model): number {\r\n        return this.#items.indexOf(item);\r\n    }\r\n\r\n    values(): IterableIterator<Model> {\r\n        return this.#items.values();\r\n    }\r\n\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void {\r\n        const items = this.#items;\r\n        const indexedItems = items.map(\r\n            (item_i, i) => {\r\n                return {\r\n                    item: item_i,\r\n                    index: i\r\n                };\r\n            }\r\n        );\r\n        indexedItems.sort(\r\n            (indexedItem_a, indexedItem_b) => {\r\n                return compareFunction(\r\n                    indexedItem_a.item, indexedItem_b.item\r\n                )\r\n            }\r\n        );\r\n        this.#items = indexedItems.map(indexedItem_i => indexedItem_i.item);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_SORT,\r\n            sortedIndices: indexedItems.map(indexedItem_i => indexedItem_i.index)\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    prepend(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.splice(0, 0, ...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: 0,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    append(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.push(...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: length,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    insert(index: number, ...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const positiveIndex = Math.abs(index);\r\n        if (positiveIndex <= length) {\r\n            if (index >= 0) {\r\n                const {parentNode} = this;\r\n                items.forEach(item_i => {\r\n                    item_i.setParent(parentNode);\r\n                });\r\n                if (index < length) {\r\n                    _items.splice(index, 0, ...items);\r\n                }\r\n                else {\r\n                    _items.push(...items);\r\n                }\r\n            }\r\n            else if (index < 0) {\r\n                index = length - index;\r\n                const {parentNode} = this;\r\n                if (parentNode) {\r\n                    items.forEach(item_i => {\r\n                        item_i.setParent(parentNode);\r\n                    });\r\n                }\r\n                _items.splice(index, 0, ...items);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_INSERT,\r\n                insertedIndex: index,\r\n                insertedItems: items.slice()\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    remove(item: Model): void {\r\n        const _items = this.#items;\r\n        const index = _items.indexOf(item);\r\n        if (index > -1) {\r\n            const item = _items.splice(index, 1)[0];\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                item.setParent(null);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: index,\r\n                removedItems: [item]\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    clear(): void {\r\n        const items = this.#items;\r\n        const {length} = items;\r\n        if (length > 0) {\r\n            const removedItems = items.splice(0);\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                removedItems.forEach((removedItem_i) => {\r\n                    removedItem_i.setParent(null);\r\n                });\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: 0,\r\n                removedItems: removedItems\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n};\r\n\r\nvar ModelList: ModelListConstructor = ModelListBase!;\r\n\r\ninterface ModelChangeObserverConstructor {\r\n    prototype: ModelChangeObserver;\r\n    new(callback: (records: ModelChangeRecord[]) => void): ModelChangeObserver;\r\n}\r\n\r\ninterface ModelChangeObserver {\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void;\r\n    unobserve(node: ModelNode): void;\r\n    disconnect(): void;\r\n}\r\n\r\ntype ModelChangeObserverOptions = {\r\n    properties?: boolean;\r\n    propertiesFilter?: string[];\r\n    childList?: boolean;\r\n    subtree?: boolean;\r\n}\r\n\r\nclass ModelChangeObserverBase implements ModelChangeObserver {\r\n    #callback: (records: ModelChangeRecord[]) => void;\r\n    #records: ModelChangeRecord[];\r\n    #disconnected: boolean;\r\n\r\n    #references: WeakMap<ModelNode, {\r\n        listener: (event: ModelEvent) => void,\r\n        options: ModelChangeObserverOptions\r\n    }>;\r\n\r\n    constructor(callback: (records: ModelChangeRecord[]) => void) {\r\n        this.#callback = callback;\r\n        this.#records = [];\r\n        this.#disconnected = false;\r\n        this.#references = new WeakMap();\r\n    }\r\n\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void {\r\n        this.#disconnected = false;\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (!reference) {\r\n            const listener = this.#handleModelEvent.bind(this);\r\n            node.addEventListener(\"modelchange\", listener);\r\n            reference = {listener, options};\r\n            references.set(node, reference);\r\n        }\r\n        else {\r\n            references.set(node, reference);\r\n        }\r\n    }\r\n\r\n    unobserve(node: ModelNode): void {\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (reference) {\r\n            const {listener} = reference;\r\n            node.removeEventListener(\"modelchange\", listener);\r\n        }\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#records.splice(0);\r\n        this.#disconnected = true;\r\n    }\r\n\r\n    #trigger(): void {\r\n        const records = this.#records.splice(0);\r\n        if (records.length > 0) {\r\n            this.#callback(records);\r\n        }\r\n    }\r\n\r\n    #handleModelEvent(event: ModelEvent): void {\r\n        if (!this.#disconnected) {\r\n            const {target, currentTarget} = event;\r\n            const reference = this.#references.get(<ModelNode>currentTarget);\r\n            if (reference) {\r\n                const {options} = reference;\r\n                const {properties, propertiesFilter, childList, subtree} = options;\r\n                if (subtree) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n                else if (target == currentTarget) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelChangeObserver: ModelChangeObserverConstructor = ModelChangeObserverBase;","import { ModelObject } from \"../models/Model\";\r\n\r\nexport { View };\r\n\r\ninterface View extends HTMLElement {\r\n    readonly model: ModelObject | null;\r\n    setModel(model: ModelObject): void;\r\n    renderShadow(): Node | undefined;\r\n    renderLight(): Node | undefined;\r\n    render(): void;\r\n}\r\n\r\ninterface ViewConstructor {\r\n    prototype: View;\r\n    new(): View;\r\n}\r\n\r\nclass ViewBase extends HTMLElement implements View {\r\n    #model: ModelObject | null;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#model = null;\r\n    }\r\n\r\n    get model(): ModelObject | null {\r\n        return this.#model;\r\n    }\r\n    \r\n    setModel(model: ModelObject): void {\r\n        if (model !== this.#model) {\r\n            this.#model = model;\r\n        }\r\n    }\r\n\r\n    renderLight(): Node | undefined {\r\n        return;\r\n    }\r\n\r\n    renderShadow(): Node | undefined {\r\n        return;\r\n    }\r\n\r\n    render(): void {\r\n        const {shadowRoot} = this;\r\n        if (shadowRoot !== null) {\r\n            const shadow = this.renderShadow();\r\n            if (shadow) {\r\n                shadowRoot.replaceChildren(shadow);\r\n            }\r\n        }\r\n        const light = this.renderLight();\r\n        if (light) {\r\n            this.replaceChildren(light);\r\n        }\r\n    }\r\n}\r\n\r\nvar View: ViewConstructor = ViewBase;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import { HTMLEMenuItemElement } from \"../elements/containers/menus/MenuItem\";\r\nimport { CustomElement, element, reactiveChildElements, reactiveElement } from \"../elements/Element\";\r\nimport { ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\n\r\nexport { MenuModel };\r\nexport { MenuItemModel };\r\nexport { MenuView };\r\n\r\ninterface MenuInit {\r\n    name?: string;\r\n    items: MenuItemModel[];\r\n}\r\n\r\nclass MenuModel extends ModelObject {\r\n    readonly items: ModelList<MenuItemModel>;\r\n    \r\n    @ModelProperty()\r\n    name?: string;\r\n    \r\n    constructor(init: MenuInit) {\r\n        super();\r\n        this.name = init?.name;\r\n        this.items = new ModelList(init?.items ?? []);\r\n    }\r\n}\r\n\r\ninterface MenuItemInit {\r\n    label: string;\r\n    name?: string;\r\n    type?: \"button\" | \"radio\" | \"checkbox\" | \"menu\" | \"submenu\";\r\n    menu?: MenuModel;\r\n}\r\n\r\nclass MenuItemModel extends ModelObject {\r\n    @ModelProperty()\r\n    name?: string;\r\n\r\n    @ModelProperty()\r\n    label: string;\r\n\r\n    @ModelProperty()\r\n    type?: \"button\" | \"radio\" | \"checkbox\" | \"menu\" | \"submenu\";\r\n\r\n    @ModelProperty()\r\n    menu?: MenuModel;\r\n    \r\n    constructor(init: MenuItemInit) {\r\n        super();\r\n        const {name, label, type, menu} = init;\r\n        this.name = name;\r\n        this.label = label;\r\n        this.type = type;\r\n        this.menu = menu;\r\n    }\r\n}\r\n\r\ninterface MenuViewConstructor {\r\n    prototype: MenuView;\r\n    new(): MenuView;\r\n    new(model: MenuModel): MenuView;\r\n}\r\n\r\ninterface MenuView extends View {\r\n    readonly model: MenuModel;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"v-menu\": MenuView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"v-menu\"\r\n})\r\nclass MenuViewBase extends View {\r\n    readonly model!: MenuModel;\r\n\r\n    constructor()\r\n    constructor(model: MenuModel)\r\n    constructor(model?: MenuModel) {\r\n        super();\r\n        this.setModel(model ?? new MenuModel({\r\n            items: []\r\n        }));\r\n    }\r\n\r\n    renderLight() {\r\n        const {model} = this;\r\n        return this.#renderMenu(model);\r\n    }\r\n\r\n    #renderMenu(menu: MenuModel) {\r\n        return element(\"e-menu\", {\r\n            children: reactiveChildElements(\r\n                menu.items,\r\n                item_i => this.#renderMenuItem(item_i)\r\n            )\r\n        });\r\n    }\r\n\r\n    #renderMenuItem(item: MenuItemModel): HTMLEMenuItemElement {\r\n        const {label, type, menu} = item;\r\n        return reactiveElement(\r\n            item,\r\n            element(\"e-menuitem\", {\r\n                attributes: {\r\n                    type: type\r\n                },\r\n                children: [\r\n                    <string | Node>label\r\n                ].concat(\r\n                    (menu !== undefined) ? [\r\n                        this.#renderMenu(menu)\r\n                    ] : []\r\n                )\r\n            }),\r\n            [\"label\", \"name\"],\r\n            (menuitem, property, oldValue, newValue) => {\r\n                switch (property) {\r\n                    case \"label\": {\r\n                        menuitem.label = newValue;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nvar MenuView: MenuViewConstructor = MenuViewBase;"],"names":["CustomElement","init","elementCtor","name","options","customElements","get","define","element","tagName","attributes","dataset","children","listeners","document","createElement","Object","entries","forEach","attributeName","attributeValue","undefined","toggleAttribute","setAttribute","String","elementDataset","keys","datasetEntry_i","append","Array","from","name_i","listener_i","isArray","addEventListener","reactiveElementsMap","WeakMap","reactiveElementsFinalizationRegistry","FinalizationRegistry","heldValue","model","reactiveElement","reactiveElementsMapEntry","reactiveElementsArray","splice","indexOf","reactiveElementsPropertyObserver","records","record_i","target","propertyName","oldValue","newValue","reactiveElement_i","elementRef","react","properties","deref","includes","WeakRef","register","observerOptions","propertiesFilter","push","concat","filter","property_i","i","set","observe","value","Reflect","reactiveChildElementsMap","reactiveChildElementsFinalizationRegistry","list","reactiveChildElement","reactiveChildrenElementsMapEntry","reactiveChildElementsArray","reactiveChildElementsObserver","range","values","length","listLength","reactiveChildElements_i","parentRef","mapping","placeholder","parent","firstChild","childrenCount","removeChild","changeType","LIST_INSERT","LIST_REMOVE","LIST_SORT","insertedIndex","insertedItems","insertedItemsArray","map","before","removedIndex","removedItems","removedCount","createRange","removeEndIndex","setStartBefore","setEndAfter","deleteContents","sortedIndices","childrenArray","index_i","reactiveChildElements","reactiveChildElementsMapEntry","childList","replaceChildren","camelToTrain","str","replace","toLowerCase","ModelChangeRecordBase","constructor","this","ModelNodesList","PROPERTY_CHANGE","ModelChangeRecord","items","slice","item","index","ModelEventBase","type","currentTarget","ModelEventTargetAccessor","setCurrentTarget","event","setTarget","ModelEvent","ModelEventTargetBase","Map","receiveEvent","callbacks","callback_i","callback","removeEventListener","callbackIndex","findIndex","delete","dispatchEvent","ModelNodeBase","super","parentNode","setParent","isCyclicReference","ancestorNode","TypeError","beginChanges","endChanges","getRecords","property","record","ModelNodeRecordsAccessor","triggerChange","node","handleRecord","ModelNode","ModelProperty","prototype","defineProperty","ModelObjectPropertiesAccessor","getProperty","setProperty","enumerable","ModelObjectBase","ModelObject","ModelList","item_i","sort","compareFunction","indexedItems","indexedItem_a","indexedItem_b","indexedItem_i","prepend","_items","insert","Math","abs","remove","clear","removedItem_i","reference","subtree","ModelChangeObserver","references","listener","bind","unobserve","disconnect","ViewBase","HTMLElement","setModel","renderLight","renderShadow","render","shadowRoot","shadow","light","View","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","d","definition","key","o","obj","prop","hasOwnProperty","call","MenuModel","MenuItemModel","label","menu","MenuViewBase","menuitem"],"sourceRoot":""}