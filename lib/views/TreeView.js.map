{"version":3,"file":"views/TreeView.js","mappings":"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","sources":["webpack://editor/./src/elements/Element.ts","webpack://editor/./src/elements/Snippets.ts","webpack://editor/./src/models/Model.ts","webpack://editor/./src/views/View.ts","webpack://editor/webpack/bootstrap","webpack://editor/webpack/runtime/define property getters","webpack://editor/webpack/runtime/hasOwnProperty shorthand","webpack://editor/./src/views/TreeView.ts"],"sourcesContent":["import { ModelList, ModelNode, ModelChangeRecord, ModelChangeObserver, ModelChangeObserverOptions } from \"../models/Model\";\r\nimport { camelToTrain } from \"./Snippets\";\r\n\r\nexport { CustomElement };\r\nexport { ReactiveChildElements };\r\nexport { QueryProperty };\r\nexport { QueryAllProperty };\r\nexport { AttributeProperty };\r\nexport { reactiveElement };\r\nexport { revokeReactiveElement };\r\nexport { reactiveChildElements };\r\nexport { revokeReactiveChildElements };\r\nexport { element };\r\nexport { fragment };\r\nexport { textNode };\r\nexport { AttributeMutationMixin };\r\nexport { AttributeType };\r\nexport { areAttributesMatching };\r\nexport { AttributeMutationMixinBase };\r\nexport { trimMultilineIndent };\r\nexport { Stylesheet };\r\n\r\nexport { reactiveElementsMap };\r\n\r\ninterface AttributePropertyDecorator {\r\n    (\r\n        init: {\r\n            type: typeof String;\r\n            observed?: boolean;\r\n            defaultValue?: string | null;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Number;\r\n            observed?: boolean;\r\n            defaultValue?: number | null;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Boolean;\r\n            observed?: boolean;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Object;\r\n            observed?: boolean;\r\n            defaultValue?: any | null;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n}\r\n\r\nconst AttributeProperty: AttributePropertyDecorator = function(\r\n    init: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Object;\r\n        observed?: boolean;\r\n        defaultValue?: string | number | any | null;\r\n        name?: string;\r\n    }\r\n) {\r\n    return <E extends HTMLElement>(\r\n        target: E, property: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(property);\r\n        const {defaultValue = null, observed = false, name = camelToTrain(propertyName)} = init;\r\n        if (observed) {\r\n            const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n            if (Array.isArray(observedAttributes)) {\r\n                observedAttributes.push(name);\r\n            }\r\n            else {\r\n                Object.defineProperty(\r\n                    constructor, \"observedAttributes\", {\r\n                        value: [name],\r\n                        writable: false\r\n                    }\r\n                );\r\n            }\r\n        }\r\n        const {type} = init;\r\n        switch (type) {\r\n            case Boolean: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        return this.hasAttribute(name);\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value) {\r\n                            this.setAttribute(name, \"\");\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Object: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(name);\r\n                        return (val !== null) ? JSON.parse(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(name, JSON.stringify(value));\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Number: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(name);\r\n                        return (val !== null) ? parseFloat(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(name, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case String:\r\n            default: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(name);\r\n                        return (val !== null) ? val : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(name, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n    \r\nfunction Stylesheet(text: string): CSSStyleSheet {\r\n    const stylesheet = new CSSStyleSheet();\r\n    (stylesheet as any).replaceSync(text);\r\n    return stylesheet;\r\n}\r\n\r\nfunction trimMultilineIndent(text: string): string {\r\n    const newlineIndex = text.indexOf(\"\\n\");\r\n    text = text.substring(newlineIndex + 1);\r\n    const indentMatch = text.match(/^[\\s]*/);\r\n    if (indentMatch) {\r\n        const indent = text.substring(0, indentMatch[0].length);\r\n        text = text.replaceAll(indent, \"\").trimEnd();\r\n    }\r\n    return text;\r\n}\r\n\r\ninterface CustomElementDecorator {\r\n    (init: {\r\n        name: string;\r\n        options?: ElementDefinitionOptions\r\n    }): <C extends CustomElementConstructor>(elementCtor: C) => C;\r\n}\r\n\r\nconst CustomElement: CustomElementDecorator = function(init: {\r\n    name: string;\r\n    options?: ElementDefinitionOptions\r\n}) {\r\n    return <C extends CustomElementConstructor>(\r\n        elementCtor: C\r\n    ) => {\r\n        const {name, options} = init;\r\n        if (!customElements.get(name)) {\r\n            customElements.define(\r\n                name,\r\n                elementCtor,\r\n                options\r\n            );\r\n        }\r\n        return elementCtor;\r\n    }\r\n}\r\n\r\ninterface QueryPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryProperty: QueryPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(propertyKey);\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return this.shadowRoot!.querySelector(selector);\r\n        } : function(this: HTMLElement) {\r\n            return this.querySelector(selector);\r\n        }\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\ninterface QueryAllPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryAllProperty: QueryAllPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(propertyKey);\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return Array.from(this.shadowRoot!.querySelectorAll(selector));\r\n        } : function(this: HTMLElement) {\r\n            return Array.from(this.querySelectorAll(selector));\r\n        };\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\nfunction fragment(...nodes: (Node | string)[]): DocumentFragment {\r\n    const fragment = document.createDocumentFragment();\r\n    fragment.append(...nodes);\r\n    return fragment;\r\n}\r\n\r\nfunction textNode(text: string): Node {\r\n    return document.createTextNode(text);\r\n}\r\n\r\ninterface HTMLElementInit {\r\n    options?: ElementCreationOptions,\r\n    attributes?: {\r\n        [name: string]: number | string | boolean | undefined\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    children?: Node | string | (Node | string)[] | NodeList | ReactiveChildElements,\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction element<E extends HTMLElementTagNameMap[K], K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): E;\r\nfunction element(\r\n    tagName: string, init?: HTMLElementInit): HTMLElement;\r\nfunction element<K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): HTMLElementTagNameMap[K] {\r\n    if (init) {\r\n        const {options, attributes, dataset, children, listeners} = init;\r\n        const element = document.createElement(tagName, options);\r\n        if (attributes) {\r\n            Object.entries(attributes).forEach(([attributeName, attributeValue]) => {\r\n                if (attributeValue !== undefined) {\r\n                    if (typeof attributeValue === \"boolean\") {\r\n                        element.toggleAttribute(camelToTrain(attributeName), attributeValue);\r\n                    }\r\n                    else {\r\n                        element.setAttribute(camelToTrain(attributeName), String(attributeValue));\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        if (dataset) {\r\n            const {dataset: elementDataset} = element;\r\n            Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                elementDataset[datasetEntry_i] = String(dataset[datasetEntry_i]);\r\n            });\r\n        }\r\n        if (children) {\r\n            if (typeof children === \"function\") {\r\n                children(element);\r\n            }\r\n            else if (typeof children === \"object\" && \"length\" in children) {\r\n                element.append(...Array.from(children));\r\n            }\r\n            else {\r\n                element.append(children);\r\n            }\r\n        }\r\n        if (listeners) {\r\n            Object.entries(listeners).forEach(([name_i, listener_i]) => {\r\n                if (Array.isArray(listener_i)) {\r\n                    element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                }\r\n                else {\r\n                    element.addEventListener(name_i, listener_i);\r\n                }\r\n            });\r\n        }\r\n        return element;\r\n    }\r\n    return document.createElement(tagName);\r\n}\r\n\r\nconst reactiveElementsMap = new WeakMap<ModelNode, {\r\n    observerOptions: ModelChangeObserverOptions,\r\n    reactiveElementsArray: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }[]\r\n}>();\r\n\r\nconst reactiveElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    model: ModelNode,\r\n    reactiveElement: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }\r\n}) => {\r\n    const {model, reactiveElement} = heldValue;\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    if (reactiveElementsMapEntry !== undefined) {\r\n        const {reactiveElementsArray} = reactiveElementsMapEntry;\r\n        reactiveElementsArray.splice(reactiveElementsArray.indexOf(reactiveElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveElementsPropertyObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    records.forEach((record_i) => {\r\n        const {target, propertyName, oldValue, newValue} = record_i;\r\n        const {reactiveElementsArray} = reactiveElementsMap.get(target)!;\r\n        reactiveElementsArray.forEach(reactiveElement_i => {\r\n            const {elementRef, react, properties} = reactiveElement_i;\r\n            const element = elementRef.deref();\r\n            if (element) {\r\n                if (properties.includes(propertyName!)) {\r\n                    react(element, propertyName!, oldValue, newValue);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveElement<M extends ModelNode, E extends Element, K extends string>(\r\n    model: M,\r\n    element: E,\r\n    properties: K[],\r\n    react: (object: E, property: K, oldValue: any, newValue: any) => void\r\n): E;\r\nfunction reactiveElement<M extends ModelNode, E extends Element>(\r\n    model: M,\r\n    element: E,\r\n    properties: string[],\r\n    react: (element: E, property: string, oldValue: any, newValue: any) => void\r\n): E {\r\n    const elementRef = new WeakRef(element);\r\n    const reactiveElement = {elementRef, react, properties};\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    reactiveElementsFinalizationRegistry.register(element, {model, reactiveElement});\r\n    if (!reactiveElementsMapEntry) {\r\n        const observerOptions = {\r\n            properties: true,\r\n            propertiesFilter: properties\r\n        };\r\n        const reactiveElementsArray = [reactiveElement];\r\n        reactiveElementsMap.set(model, {observerOptions, reactiveElementsArray});\r\n        reactiveElementsPropertyObserver.observe(model, observerOptions);\r\n    }\r\n    else {\r\n        const {reactiveElementsArray, observerOptions} = reactiveElementsMapEntry;\r\n        const {propertiesFilter} = observerOptions;\r\n        reactiveElementsArray.push(reactiveElement);\r\n        observerOptions.propertiesFilter = propertiesFilter ?\r\n            propertiesFilter.concat(properties.filter(\r\n                property_i => !propertiesFilter.includes(property_i)\r\n            )) : properties.filter(\r\n                (property_i, i, properties) => properties.indexOf(property_i) === i\r\n            )\r\n    }\r\n    properties.forEach((property_i) => {\r\n        if (property_i in model) {\r\n            const value = Reflect.get(model, property_i, model);\r\n            react(element, <any>property_i, <any>undefined, value);\r\n        }\r\n    });\r\n    return element;\r\n}\r\n\r\nfunction revokeReactiveElement<M extends ModelNode, E extends Element>(\r\n    model: M,\r\n    element: E\r\n): void {\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    if (reactiveElementsMapEntry) {\r\n        const {reactiveElementsArray} = reactiveElementsMapEntry;\r\n        const reactiveElementIndex = reactiveElementsArray.findIndex(\r\n            reactiveElement => reactiveElement.elementRef.deref() === element\r\n        );\r\n        if (reactiveElementIndex > -1) {\r\n            reactiveElementsArray.splice(reactiveElementIndex, 1);\r\n        }\r\n        if (reactiveElementsArray.length === 0) {\r\n            reactiveElementsMap.delete(model);\r\n        }\r\n    }\r\n}\r\n\r\ninterface ReactiveChildElements {\r\n    (parent: ParentNode): void;\r\n}\r\n\r\nconst reactiveChildElementsMap = new WeakMap<ModelList, {\r\n    reactiveChildElementsArray: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }[]\r\n}>();\r\n\r\nconst reactiveChildElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    list: ModelList,\r\n    reactiveChildElement: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }\r\n}) => {\r\n    const {list, reactiveChildElement} = heldValue;\r\n    const reactiveChildrenElementsMapEntry = reactiveChildElementsMap.get(list);\r\n    if (reactiveChildrenElementsMapEntry) {\r\n        const {reactiveChildElementsArray} = reactiveChildrenElementsMapEntry;\r\n        reactiveChildElementsArray.splice(reactiveChildElementsArray.indexOf(reactiveChildElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveChildElementsObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    let range: null | Range = null;\r\n    Array.from(records.values()).forEach((record_i) => {\r\n        const {target} = record_i;\r\n        const list = <ModelList>target;\r\n        const {length: listLength} = list;\r\n        const {reactiveChildElementsArray} = reactiveChildElementsMap.get(list)!;\r\n        reactiveChildElementsArray.forEach((reactiveChildElements_i) => {\r\n            const {parentRef, mapping, placeholder} = reactiveChildElements_i;\r\n            const parent = parentRef.deref();\r\n            if (parent) {\r\n                const {firstChild, children} = parent;\r\n                const {length: childrenCount} = children;\r\n                if (placeholder && listLength > 0 && firstChild == placeholder) {\r\n                    parent.removeChild(placeholder);\r\n                }\r\n                const {changeType, LIST_INSERT, LIST_REMOVE, LIST_SORT} = record_i;\r\n                switch (changeType) {\r\n                    case LIST_INSERT: {\r\n                        const {insertedIndex, insertedItems} = record_i;\r\n                        const insertedItemsArray = Array.from(insertedItems.values()).map(mapping);\r\n                        const {length: childrenCount} = children;\r\n                        if (insertedIndex < childrenCount) {\r\n                            children[insertedIndex].before(...insertedItemsArray);\r\n                        }\r\n                        else {\r\n                            parent.append(...insertedItemsArray);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_REMOVE: {\r\n                        const {removedIndex, removedItems} = record_i;\r\n                        const {length: removedCount} = removedItems;\r\n                        range = range ?? document.createRange();\r\n                        const removeEndIndex = removedIndex + (removedCount - 1);\r\n                        if (removeEndIndex < childrenCount) {\r\n                            range.setStartBefore(children[removedIndex]);\r\n                            range.setEndAfter(children[removeEndIndex]);\r\n                            range.deleteContents();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_SORT: {\r\n                        const {sortedIndices} = record_i;\r\n                        const childrenArray = Array.from(children);\r\n                        parent.append(\r\n                            ...sortedIndices.filter(\r\n                                index_i => index_i < childrenCount\r\n                            ).map(\r\n                                index_i => childrenArray[index_i]\r\n                            )\r\n                        );\r\n                        break;\r\n                    }\r\n                }\r\n                if (listLength == 0 && placeholder) {\r\n                    parent.append(placeholder);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveChildElements<Model extends ModelNode>(\r\n    list: ModelList<Model>,\r\n    mapping: (item: Model) => Element,\r\n    placeholder?: Element\r\n): ReactiveChildElements {\r\n    return (parent: ParentNode) => {\r\n        const parentRef = new WeakRef(parent);\r\n        const reactiveChildElementsMapEntry = reactiveChildElementsMap.get(list);\r\n        const reactiveChildElement = {parentRef, mapping, placeholder};\r\n        reactiveChildElementsFinalizationRegistry.register(parent, {list, reactiveChildElement});\r\n        if (!reactiveChildElementsMapEntry) {\r\n            const reactiveChildElementsArray = [reactiveChildElement];\r\n            reactiveChildElementsMap.set(list, {reactiveChildElementsArray});\r\n            reactiveChildElementsObserver.observe(list, {\r\n                childList: true\r\n            });\r\n        }\r\n        else {\r\n            const {reactiveChildElementsArray} = reactiveChildElementsMapEntry;\r\n            reactiveChildElementsArray.push(reactiveChildElement);\r\n        }\r\n        const children = list.length == 0 && placeholder ?\r\n            [placeholder] : Array.from(list.values()).map(mapping);\r\n        parent.replaceChildren(...children);\r\n    }\r\n}\r\n\r\nfunction revokeReactiveChildElements<Model extends ModelNode>(\r\n    list: ModelList<Model>,\r\n    parent: ParentNode,\r\n): void {\r\n    const reactiveChildElementsMapEntry = reactiveChildElementsMap.get(list);\r\n    if (reactiveChildElementsMapEntry) {\r\n        const {reactiveChildElementsArray} = reactiveChildElementsMapEntry;\r\n        const reactiveChildElementsIndex = reactiveChildElementsArray.findIndex(\r\n            reactiveChildElement => reactiveChildElement.parentRef.deref() === parent\r\n        );\r\n        if (reactiveChildElementsIndex > -1) {\r\n            reactiveChildElementsArray.splice(reactiveChildElementsIndex, 1);\r\n        }\r\n        if (reactiveChildElementsArray.length === 0) {\r\n            reactiveChildElementsMap.delete(list);\r\n        }\r\n    }\r\n}\r\n\r\ninterface AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n    attach(element: Element): void;\r\n    detach(element: Element): void;\r\n}\r\n\r\ntype AttributeType = \"string\" | \"boolean\" | \"list\";\r\n\r\nfunction areAttributesMatching(\r\n    referenceAttributeType: AttributeType,\r\n    referenceAttributeName: string, referenceAttributeValue: string,\r\n    attributeName: string, attributeValue: string | null): boolean {\r\n    if (referenceAttributeName == attributeName) {\r\n        switch (referenceAttributeType) {\r\n            case \"boolean\":\r\n                return referenceAttributeValue == \"\" && attributeValue == \"\";\r\n            case \"string\":\r\n                return referenceAttributeValue !== \"\" && (referenceAttributeValue == attributeValue);\r\n            case \"list\":\r\n                return (referenceAttributeValue !== \"\" && attributeValue !== null) && new RegExp(`${referenceAttributeValue}\\s*?`, \"g\").test(attributeValue );\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nclass AttributeMutationMixinBase implements AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n\r\n    constructor(attributeName: string, attributeType: AttributeType = \"boolean\", attributeValue: string = \"\") {\r\n        this.attributeName = attributeName;\r\n        this.attributeType = attributeType;\r\n        this.attributeValue = attributeValue;\r\n    }\r\n\r\n    attach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n\r\n    detach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n}","\r\nexport { snakeToCamel };\r\nexport { camelToSnake };\r\nexport { trainToCamel };\r\nexport { camelToTrain };\r\n\r\nfunction snakeToCamel(str: string) {\r\n  return str.split('_').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToSnake(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '_').toLowerCase();\r\n}\r\n\r\nfunction trainToCamel(str: string) {\r\n  return str.split('-').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToTrain(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '-').toLowerCase();\r\n}","export { ModelChangeRecord };\r\nexport { ModelEvent };\r\nexport { ModelNode };\r\nexport { ModelObject };\r\nexport { ModelProperty };\r\nexport { ModelList };\r\nexport { ModelChangeObserverOptions };\r\nexport { ModelChangeObserver };\r\n\r\ninterface ModelChangeRecordConstructor {\r\n    prototype: ModelChangeRecord;\r\n    new(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ): ModelChangeRecord;\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\ninterface ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly changeType: number;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\nclass ModelChangeRecordBase implements ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList;\r\n    readonly changeType: number;\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n\r\n    constructor(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ) {\r\n        this.target = init.target;\r\n        this.changeType = init.changeType;\r\n        this.propertyName = init.propertyName ?? null;\r\n        this.oldValue = init.oldValue ?? undefined;\r\n        this.newValue = init.newValue ?? undefined;\r\n        this.removedIndex = init.removedIndex ?? 0;\r\n        this.removedItems = new ModelNodesList(init.removedItems ?? []);\r\n        this.insertedIndex = init.insertedIndex ?? 0;\r\n        this.insertedItems = new ModelNodesList(init.insertedItems ?? []);\r\n        this.sortedIndices = init.sortedIndices ?? [];\r\n    }\r\n\r\n    static get PROPERTY_CHANGE(): number {\r\n        return 1;\r\n    }\r\n\r\n    static get LIST_REMOVE(): number {\r\n        return 2;\r\n    }\r\n\r\n    static get LIST_INSERT(): number {\r\n        return 3;\r\n    }\r\n\r\n    static get LIST_SORT(): number {\r\n        return 4;\r\n    }\r\n\r\n    get PROPERTY_CHANGE(): number {\r\n        return ModelChangeRecordBase.PROPERTY_CHANGE;\r\n    }\r\n\r\n    get LIST_REMOVE(): number {\r\n        return ModelChangeRecordBase.LIST_REMOVE;\r\n    }\r\n\r\n    get LIST_INSERT(): number {\r\n        return ModelChangeRecordBase.LIST_INSERT;\r\n    }\r\n\r\n    get LIST_SORT(): number {\r\n        return ModelChangeRecordBase.LIST_SORT;\r\n    }\r\n}\r\n\r\nvar ModelChangeRecord: ModelChangeRecordConstructor = ModelChangeRecordBase;\r\n\r\ninterface ModelNodesListConstructor {\r\n    prototype: ModelNodesList;\r\n    new(items: any[]): ModelNodesList;\r\n}\r\n\r\ninterface ModelNodesList {\r\n    get length(): number;\r\n    item(index: number): ModelNode | null;\r\n    values(): IterableIterator<ModelNode>;\r\n}\r\n\r\nclass ModelNodesListBase implements ModelNodesList {\r\n    #items: ModelNode[];\r\n\r\n    constructor(items: ModelNode[]) {\r\n        this.#items = items.slice();\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    item(index: number): ModelNode | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    values(): IterableIterator<ModelNode> {\r\n        return this.#items.values();\r\n    }\r\n}\r\n\r\nvar ModelNodesList: ModelNodesListConstructor = ModelNodesListBase;\r\n\r\ninterface ModelEventConstructor {\r\n    prototype: ModelEvent;\r\n    new(type: string): ModelEvent;\r\n}\r\n\r\ninterface ModelEvent {\r\n    readonly type: string;\r\n    readonly currentTarget: ModelEventTarget | null;\r\n    readonly target: ModelEventTarget | null;\r\n}\r\n\r\nclass ModelEventBase implements ModelEvent {\r\n    readonly type: string;\r\n\r\n    #currentTarget: ModelEventTarget | null;\r\n    #target: ModelEventTarget | null;\r\n\r\n    constructor(type: string) {\r\n        this.type = type;\r\n        this.#currentTarget = null;\r\n        this.#target = null;\r\n    }\r\n\r\n    get currentTarget(): ModelEventTarget | null {\r\n        return this.#currentTarget;\r\n    }\r\n\r\n    get target(): ModelEventTarget | null {\r\n        return this.#target;\r\n    }\r\n\r\n    static ModelEventTargetAccessor? = new class ModelEventTargetAccessor {\r\n        setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#currentTarget = currentTarget;\r\n            }\r\n        }\r\n\r\n        setTarget(event: ModelEvent, target: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#target = target;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface ModelEventTargetAccessor {\r\n    setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void;\r\n    setTarget(event: ModelEvent, target: ModelEventTarget): void;\r\n}\r\n\r\nvar ModelEventTargetAccessor: ModelEventTargetAccessor = ModelEventBase.ModelEventTargetAccessor!;\r\ndelete ModelEventBase.ModelEventTargetAccessor;\r\n\r\nvar ModelEvent: ModelEventConstructor = ModelEventBase;\r\n\r\ninterface ModelEventTargetConstructor {\r\n    prototype: ModelEventTarget;\r\n    new(): ModelEventTarget;\r\n}\r\n\r\ninterface ModelEventTarget {\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    dispatchEvent(event: ModelEvent): void;\r\n    receiveEvent(event: ModelEvent): void;\r\n}\r\n\r\nclass ModelEventTargetBase implements ModelEventTarget {\r\n    #callbacks: Map<string, ((event: ModelEvent) => void)[]>;\r\n\r\n    constructor() {\r\n        this.#callbacks = new Map();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        const {type} = event;\r\n        const callbacks = this.#callbacks.get(type);\r\n        ModelEventTargetAccessor.setCurrentTarget(event, this);\r\n        if (callbacks) {\r\n            callbacks.forEach((callback_i) => {\r\n                callback_i(event);\r\n            });\r\n        }\r\n    }\r\n\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            callbacks.push(callback);\r\n        }\r\n        else {\r\n            this.#callbacks.set(type, [callback]);\r\n        }\r\n    }\r\n\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            const callbackIndex = callbacks.findIndex(\r\n                callback_i => callback_i == callback\r\n            );\r\n            if (callbackIndex > -1) {\r\n                callbacks.splice(callbackIndex, 1);\r\n            }\r\n            if (callbacks.length == 0) {\r\n                this.#callbacks.delete(type);\r\n            }\r\n        }\r\n    }\r\n\r\n    dispatchEvent(event: ModelEvent): void {\r\n        ModelEventTargetAccessor.setTarget(event, this);\r\n        this.receiveEvent(event);\r\n    }\r\n}\r\n\r\nvar ModelEventTarget: ModelEventTargetConstructor = ModelEventTargetBase;\r\n\r\ninterface ModelNodeConstructor {\r\n    prototype: ModelNode;\r\n    new(): ModelNode;\r\n}\r\n\r\ninterface ModelNode extends ModelEventTarget {\r\n    readonly parentNode: ModelNode | null;\r\n    setParent(parentNode: ModelNode | null): void;\r\n    getRecords(): ModelChangeRecord[];\r\n    beginChanges(): void;\r\n    endChanges(): void;\r\n}\r\n\r\ninterface ModelNodeRecordsAccessor {\r\n    triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void;\r\n    handleRecord(node: ModelNode, record: ModelChangeRecord): void;\r\n}\r\n\r\nclass ModelNodeBase extends ModelEventTargetBase implements ModelNode {\r\n    #parentNode: ModelNode | null;\r\n    #records: ModelChangeRecord[];\r\n    #isRecording: boolean;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#parentNode = null;\r\n        this.#records = [];\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    get parentNode(): ModelNode | null {\r\n        return this.#parentNode;\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        if (parentNode !== null) {\r\n            let isCyclicReference = parentNode == this;\r\n            let {parentNode: ancestorNode} = parentNode;\r\n            while (!isCyclicReference && ancestorNode !== null) {\r\n                ({parentNode: ancestorNode} = ancestorNode);\r\n                isCyclicReference = ancestorNode == this;\r\n            }\r\n            if (!isCyclicReference) {\r\n                this.#parentNode = parentNode;\r\n            }\r\n            else {\r\n                throw new TypeError(\"Failed to set parent on ModelNode: circular reference detected in the hierarchy.\");\r\n            }\r\n        }\r\n        else {\r\n            this.#parentNode = null;\r\n        }\r\n    }\r\n    \r\n    beginChanges(): void {\r\n        this.#isRecording = true;\r\n    }\r\n\r\n    endChanges(): void {\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        this.#records.splice(0);\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    getRecords(): ModelChangeRecord[] {\r\n        return this.#records.slice();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        super.receiveEvent(event);\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            parentNode.receiveEvent(event);\r\n        }\r\n    }\r\n\r\n    #triggerChange(property: string, oldValue: any, newValue: any): void {\r\n        const records = this.#records;\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.PROPERTY_CHANGE,\r\n            propertyName: property,\r\n            oldValue, newValue\r\n        });\r\n        records.push(record);\r\n        if (!this.#isRecording) {\r\n            this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n            records.splice(0);\r\n        }\r\n    }\r\n\r\n    #handleRecord(record: ModelChangeRecord): void {\r\n        this.#records.push(record);\r\n        if (!this.#isRecording) {\r\n            this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n            this.#records.splice(0);\r\n        }\r\n    }\r\n\r\n    static ModelNodeRecordsAccessor? = new class ModelNodeRecordsAccessor {\r\n        triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#triggerChange(property, oldValue, newValue);\r\n            }\r\n        }\r\n\r\n        handleRecord(node: ModelNode, record: ModelChangeRecord): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#handleRecord(record);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelNodeRecordsAccessor: ModelNodeRecordsAccessor = ModelNodeBase.ModelNodeRecordsAccessor!;\r\ndelete ModelNodeBase.ModelNodeRecordsAccessor;\r\n\r\nvar ModelNode: ModelNodeConstructor = ModelNodeBase;\r\n\r\ninterface ModelPropertyDecorator {\r\n    (): <Model extends ModelObject>(target: Model, property: string) => void;\r\n}\r\n\r\nconst ModelProperty: ModelPropertyDecorator = function() {\r\n    return (\r\n        target: ModelObject, property: string\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const setter = function(this: ModelObject, value: any) {\r\n            const oldValue = ModelObjectPropertiesAccessor.getProperty(this, property);\r\n            ModelObjectPropertiesAccessor.setProperty(this, property, value);\r\n            if (value !== oldValue) {\r\n                ModelNodeRecordsAccessor.triggerChange(this, property, oldValue, value);\r\n            }\r\n            return true;\r\n        };\r\n        const getter = function(this: ModelObject) {\r\n            return ModelObjectPropertiesAccessor.getProperty(this, property);\r\n        };\r\n        Object.defineProperty(prototype, property, {\r\n            set: setter,\r\n            get: getter,\r\n            enumerable: true\r\n        });\r\n    }\r\n}\r\n\r\ninterface ModelObjectConstructor {\r\n    prototype: ModelObject;\r\n    new(): ModelObject;\r\n}\r\n\r\ninterface ModelObject extends ModelNode {}\r\n\r\ninterface ModelObjectPropertiesAccessor {\r\n    setProperty(node: ModelNode, property: string, value: any): void;\r\n    getProperty(node: ModelNode, property: string,): any;\r\n}\r\n\r\nclass ModelObjectBase extends ModelNodeBase implements ModelObject {\r\n    #properties: Map<string, any>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#properties = new Map();\r\n    }\r\n\r\n    static ModelObjectPropertiesAccessor? = new class ModelPropertiesAccessor {\r\n        setProperty(node: ModelObject, property: string, value: any): void {\r\n            if (node instanceof ModelObjectBase) {\r\n                node.#properties.set(property, value);\r\n            }\r\n        }\r\n\r\n        getProperty(node: ModelObject, property: string): any {\r\n            if (node instanceof ModelObjectBase) {\r\n                return node.#properties.get(property);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelObjectPropertiesAccessor: ModelObjectPropertiesAccessor = ModelObjectBase.ModelObjectPropertiesAccessor!;\r\ndelete ModelObjectBase.ModelObjectPropertiesAccessor;\r\n\r\nvar ModelObject: ModelObjectConstructor = ModelObjectBase;\r\n\r\ninterface ModelListConstructor {\r\n    prototype: ModelList;\r\n    new<Model extends ModelNode>(): ModelList<Model>;\r\n    new<Model extends ModelNode>(items: Model[]): ModelList<Model>;\r\n}\r\n\r\ninterface ModelList<Model extends ModelNode = ModelNode> extends ModelNode {\r\n    readonly parentNode: ModelNode | null;\r\n    readonly length: number;\r\n    index(item: Model): number;\r\n    get(index: number): Model | null;\r\n    values(): IterableIterator<Model>;\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void;\r\n    insert(index: number, ...items: Model[]): void;\r\n    prepend(...items: Model[]): void;\r\n    append(...items: Model[]): void;\r\n    remove(item: Model): void;\r\n    clear(): void;\r\n}\r\n\r\nclass ModelListBase<Model extends ModelNode = ModelNode> extends ModelNodeBase implements ModelList<Model> {\r\n    #items: Model[];\r\n\r\n    constructor()\r\n    constructor(items: Model[])\r\n    constructor(items?: Model[]) {\r\n        super();\r\n        this.#items = items?.slice() ?? [];\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        super.setParent(parentNode);\r\n        this.#items.forEach((item_i) => {\r\n            item_i.setParent(parentNode);\r\n        });\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    get(index: number): Model | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    index(item: Model): number {\r\n        return this.#items.indexOf(item);\r\n    }\r\n\r\n    values(): IterableIterator<Model> {\r\n        return this.#items.values();\r\n    }\r\n\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void {\r\n        const items = this.#items;\r\n        const indexedItems = items.map(\r\n            (item_i, i) => {\r\n                return {\r\n                    item: item_i,\r\n                    index: i\r\n                };\r\n            }\r\n        );\r\n        indexedItems.sort(\r\n            (indexedItem_a, indexedItem_b) => {\r\n                return compareFunction(\r\n                    indexedItem_a.item, indexedItem_b.item\r\n                )\r\n            }\r\n        );\r\n        this.#items = indexedItems.map(indexedItem_i => indexedItem_i.item);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_SORT,\r\n            sortedIndices: indexedItems.map(indexedItem_i => indexedItem_i.index)\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    prepend(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.splice(0, 0, ...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: 0,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    append(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.push(...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: length,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    insert(index: number, ...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const positiveIndex = Math.abs(index);\r\n        if (positiveIndex <= length) {\r\n            if (index >= 0) {\r\n                const {parentNode} = this;\r\n                items.forEach(item_i => {\r\n                    item_i.setParent(parentNode);\r\n                });\r\n                if (index < length) {\r\n                    _items.splice(index, 0, ...items);\r\n                }\r\n                else {\r\n                    _items.push(...items);\r\n                }\r\n            }\r\n            else if (index < 0) {\r\n                index = length - index;\r\n                const {parentNode} = this;\r\n                if (parentNode) {\r\n                    items.forEach(item_i => {\r\n                        item_i.setParent(parentNode);\r\n                    });\r\n                }\r\n                _items.splice(index, 0, ...items);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_INSERT,\r\n                insertedIndex: index,\r\n                insertedItems: items.slice()\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    remove(item: Model): void {\r\n        const _items = this.#items;\r\n        const index = _items.indexOf(item);\r\n        if (index > -1) {\r\n            const item = _items.splice(index, 1)[0];\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                item.setParent(null);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: index,\r\n                removedItems: [item]\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    clear(): void {\r\n        const items = this.#items;\r\n        const {length} = items;\r\n        if (length > 0) {\r\n            const removedItems = items.splice(0);\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                removedItems.forEach((removedItem_i) => {\r\n                    removedItem_i.setParent(null);\r\n                });\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: 0,\r\n                removedItems: removedItems\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n};\r\n\r\nvar ModelList: ModelListConstructor = ModelListBase!;\r\n\r\ninterface ModelChangeObserverConstructor {\r\n    prototype: ModelChangeObserver;\r\n    new(callback: (records: ModelChangeRecord[]) => void): ModelChangeObserver;\r\n}\r\n\r\ninterface ModelChangeObserver {\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void;\r\n    unobserve(node: ModelNode): void;\r\n    disconnect(): void;\r\n}\r\n\r\ntype ModelChangeObserverOptions = {\r\n    properties?: boolean;\r\n    propertiesFilter?: string[];\r\n    childList?: boolean;\r\n    subtree?: boolean;\r\n}\r\n\r\nclass ModelChangeObserverBase implements ModelChangeObserver {\r\n    #callback: (records: ModelChangeRecord[]) => void;\r\n    #records: ModelChangeRecord[];\r\n    #disconnected: boolean;\r\n\r\n    #references: WeakMap<ModelNode, {\r\n        listener: (event: ModelEvent) => void,\r\n        options: ModelChangeObserverOptions\r\n    }>;\r\n\r\n    constructor(callback: (records: ModelChangeRecord[]) => void) {\r\n        this.#callback = callback;\r\n        this.#records = [];\r\n        this.#disconnected = false;\r\n        this.#references = new WeakMap();\r\n    }\r\n\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void {\r\n        this.#disconnected = false;\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (!reference) {\r\n            const listener = this.#handleModelEvent.bind(this);\r\n            node.addEventListener(\"modelchange\", listener);\r\n            reference = {listener, options};\r\n            references.set(node, reference);\r\n        }\r\n        else {\r\n            references.set(node, reference);\r\n        }\r\n    }\r\n\r\n    unobserve(node: ModelNode): void {\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (reference) {\r\n            const {listener} = reference;\r\n            node.removeEventListener(\"modelchange\", listener);\r\n        }\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#records.splice(0);\r\n        this.#disconnected = true;\r\n    }\r\n\r\n    #trigger(): void {\r\n        const records = this.#records.splice(0);\r\n        if (records.length > 0) {\r\n            this.#callback(records);\r\n        }\r\n    }\r\n\r\n    #handleModelEvent(event: ModelEvent): void {\r\n        if (!this.#disconnected) {\r\n            const {target, currentTarget} = event;\r\n            const reference = this.#references.get(<ModelNode>currentTarget);\r\n            if (reference) {\r\n                const {options} = reference;\r\n                const {properties, propertiesFilter, childList, subtree} = options;\r\n                if (subtree) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n                else if (target == currentTarget) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelChangeObserver: ModelChangeObserverConstructor = ModelChangeObserverBase;","import { ModelObject } from \"../models/Model\";\r\n\r\nexport { View };\r\n\r\ninterface View extends HTMLElement {\r\n    readonly model: ModelObject | null;\r\n    setModel(model: ModelObject): void;\r\n    renderShadow(): Node | undefined;\r\n    renderLight(): Node | undefined;\r\n    render(): void;\r\n}\r\n\r\ninterface ViewConstructor {\r\n    prototype: View;\r\n    new(): View;\r\n}\r\n\r\nclass ViewBase extends HTMLElement implements View {\r\n    #model: ModelObject | null;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#model = null;\r\n    }\r\n\r\n    get model(): ModelObject | null {\r\n        return this.#model;\r\n    }\r\n    \r\n    setModel(model: ModelObject): void {\r\n        if (model !== this.#model) {\r\n            this.#model = model;\r\n        }\r\n    }\r\n\r\n    renderLight(): Node | undefined {\r\n        return;\r\n    }\r\n\r\n    renderShadow(): Node | undefined {\r\n        return;\r\n    }\r\n\r\n    render(): void {\r\n        const {shadowRoot} = this;\r\n        if (shadowRoot !== null) {\r\n            const shadow = this.renderShadow();\r\n            if (shadow) {\r\n                shadowRoot.replaceChildren(shadow);\r\n            }\r\n        }\r\n        const light = this.renderLight();\r\n        if (light) {\r\n            this.replaceChildren(light);\r\n        }\r\n    }\r\n}\r\n\r\nvar View: ViewConstructor = ViewBase;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import { HTMLEMenuElement } from \"../elements/containers/menus/Menu\";\r\nimport { HTMLEToolBarElement } from \"../elements/containers/toolbars/ToolBar\";\r\nimport { HTMLETreeElement } from \"../elements/containers/trees/Tree\";\r\nimport { HTMLETreeItemElement } from \"../elements/containers/trees/TreeItem\";\r\nimport { AttributeProperty, CustomElement, element, fragment, reactiveChildElements, reactiveElement } from \"../elements/Element\";\r\nimport { ModelEvent, ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\n\r\nexport { TreeItemModelList };\r\nexport { TreeModel };\r\nexport { TreeItemModel };\r\nexport { TreeView };\r\n\r\ninterface TreeModelInit {\r\n    items: TreeItemModel[];\r\n    sortFunction?: (item_a: TreeItemModel, item_b: TreeItemModel) => number;\r\n}\r\n\r\nclass TreeModel extends ModelObject {\r\n    readonly items: ModelList<TreeItemModel>;\r\n    readonly childItems: ModelList<TreeItemModel>;\r\n    sortFunction: ((item_a: TreeItemModel, item_b: TreeItemModel) => number) | null;\r\n\r\n    constructor()\r\n    constructor(init: TreeModelInit)\r\n    constructor(init?: TreeModelInit) {\r\n        super();\r\n        const {items = [], sortFunction} = init ?? {};\r\n        items.forEach((item_i, i) => item_i.index = i);\r\n        const childItems = new ModelList(items);\r\n        childItems.setParent(this);\r\n        this.childItems = childItems;\r\n        this.items = new ModelList(this.subtreeItems());\r\n        this.sortFunction = sortFunction ??\r\n            function(item_a: TreeItemModel, item_b: TreeItemModel) {\r\n                return item_a.name.localeCompare(item_b.name);\r\n            };\r\n        this.addEventListener(\"modelchange\", this.#handleModelChangeEvent.bind(this));\r\n    }\r\n    \r\n    #handleModelChangeEvent(event: ModelEvent): void {\r\n        const {target} = event;\r\n        const {items, sortFunction, subtreeItems} = this;\r\n        if (target instanceof ModelList) {\r\n            const records = target.getRecords();\r\n            records.forEach((record_i) => {\r\n                const {insertedItems, removedItems} = record_i;\r\n                const flattenedInsertedItems = (<TreeItemModel[]>Array.from(insertedItems.values())).flatMap(\r\n                    insertedItem_i => Array.of(insertedItem_i, ...subtreeItems.call(insertedItem_i))\r\n                );\r\n                const flattenedRemovedItems = (<TreeItemModel[]>Array.from(removedItems.values())).flatMap(\r\n                    removedItem_i => Array.of(removedItem_i, ...subtreeItems.call(removedItem_i))\r\n                );\r\n                items.beginChanges();\r\n                items.append(...flattenedInsertedItems);\r\n                flattenedRemovedItems.forEach((removedItem_i) => items.remove(removedItem_i));\r\n                if (sortFunction) items.sort(sortFunction);\r\n                items.endChanges();\r\n            });\r\n            Array.from((<ModelList<TreeItemModel>>target).values()).forEach((item_i, i) => {\r\n                item_i.index = i;\r\n            });\r\n        }\r\n    }\r\n\r\n    subtreeItems(): TreeItemModel[] {\r\n        const {childItems} = this;\r\n        return Array.from(childItems.values()).flatMap(\r\n            treeItem_i => Array.of(treeItem_i, ...treeItem_i.subtreeItems())\r\n        );\r\n    }\r\n\r\n    getItemByUri(this: TreeModel | TreeItemModel, uri: string): TreeItemModel | null {\r\n        const {childItems} = this;\r\n        const {length: itemsCount} = childItems;\r\n        const {length: uriLength} = uri;\r\n        for (let i = 0; i < itemsCount; i++) {\r\n            const item_i = childItems.get(i)!;\r\n            const {uri: itemUri} = item_i;\r\n            const {length: itemUriLength} = itemUri;\r\n            if (uri.startsWith(itemUri)) {\r\n                if (itemUriLength === uriLength) {\r\n                    return <TreeItemModel>item_i;\r\n                }\r\n                return TreeModel.prototype.getItemByUri.call(item_i, uri);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\nclass TreeItemModelList {\r\n    readonly items: TreeItemModel[];\r\n\r\n    constructor(items: TreeItemModel[]) {\r\n        this.items = items;\r\n    }\r\n\r\n    get count(): number {\r\n        return this.items.length;\r\n    }\r\n\r\n    remove(): void {\r\n        const {items} = this;\r\n        const removedItemsGroups = items.reduce((map, item_i) => {\r\n            const {parentNode} = item_i;\r\n            if (parentNode instanceof TreeItemModel || parentNode instanceof TreeModel) {\r\n                const {childItems} = parentNode;\r\n                const group = map.get(childItems);\r\n                if (group) group.push(item_i);\r\n                else map.set(childItems, [item_i]);\r\n            }\r\n            return map;\r\n        }, new Map<ModelList, TreeItemModel[]>());\r\n        Array.from(removedItemsGroups.entries()).forEach(\r\n            ([list_i, children_i]) => {\r\n                list_i.beginChanges();\r\n                children_i.forEach((child_i) => {\r\n                    list_i.remove(child_i);\r\n                });\r\n                list_i.endChanges();\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nclass TreeItemModel extends ModelObject {\r\n    readonly childItems: ModelList<TreeItemModel>;\r\n\r\n    @ModelProperty()\r\n    name: string;\r\n    \r\n    @ModelProperty()\r\n    type: \"leaf\" | \"parent\";\r\n\r\n    @ModelProperty()\r\n    index: number;\r\n\r\n    get level(): number {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return parentNode.level + 1;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    get uri(): string {\r\n        const {parentNode, name} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return `${parentNode.uri}${name}/`;\r\n        }\r\n        return `${name}/`;\r\n    }\r\n\r\n    get parentItem(): TreeItemModel | null {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return parentNode;\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    constructor(init: {name: string, type: \"leaf\" | \"parent\", items?: TreeItemModel[]}) {\r\n        super();\r\n        const {name, type, items = []} = init;\r\n        items.forEach((item_i, i) => item_i.index = i);\r\n        const childItems = new ModelList(items);\r\n        childItems.setParent(this);\r\n        this.name = name;\r\n        this.childItems = childItems;\r\n        this.type = type;\r\n        this.index = -1;\r\n    }\r\n\r\n    subtreeItems(): TreeItemModel[] {\r\n        const {childItems} = this;\r\n        return Array.from(childItems.values()).flatMap(\r\n            treeItem_i => Array.of(treeItem_i, ...treeItem_i.subtreeItems())\r\n        );\r\n    }\r\n\r\n    remove(): void {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel || parentNode instanceof TreeModel) {\r\n            const {childItems} = parentNode;\r\n            if (childItems) {\r\n                childItems.remove(this);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface TreeViewConstructor {\r\n    prototype: TreeView;\r\n    new(): TreeView;\r\n    new(model: TreeModel): TreeView;\r\n}\r\n\r\ninterface TreeView extends View {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly model: TreeModel;\r\n    setModel(model: TreeModel): void;\r\n    renderShadow(): Node;\r\n    draggable: boolean;\r\n    selectedItems(): TreeItemModel[];\r\n    activeItem(): TreeItemModel | null;\r\n    get treeElement(): HTMLETreeElement | null ;\r\n    treeItemElement(item: TreeItemModel): HTMLETreeItemElement | null;\r\n    treeItem(element: HTMLETreeItemElement): TreeItemModel | null;\r\n    itemContentDelegate(this: TreeView, item: TreeItemModel): string | Node;\r\n    itemToolbarDelegate(this: TreeView, item: TreeItemModel): HTMLEToolBarElement | null;\r\n    itemMenuDelegate(this: TreeView): HTMLEMenuElement | null;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeview\": TreeView,\r\n    }\r\n}\r\n\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-treeview\"\r\n})\r\nclass TreeViewBase extends View implements TreeView {\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly model!: TreeModel;\r\n\r\n    #dragImages: WeakMap<TreeItemModel, WeakRef<Element>>;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    draggable!: boolean;\r\n\r\n    static {\r\n        style = /*css*/`\r\n            :host {\r\n                display: block;\r\n            }\r\n            \r\n            .offscreen {\r\n                position: absolute;\r\n                top: 0;\r\n                left: 0;\r\n                transform: translateY(-100%);\r\n                display: block;\r\n                pointer-events: none;\r\n            }\r\n            \r\n            .dragimage {\r\n                white-space: nowrap;\r\n                margin: 1px;\r\n                display: inline-block;\r\n                outline: 1px solid var(--focused-item-outline-color);\r\n                outline-offset: -1px;\r\n                border-radius: 3px; \r\n                padding: 2px 4px;\r\n            }\r\n        `;\r\n    }\r\n    \r\n    constructor()\r\n    constructor(model: TreeModel)\r\n    constructor(model?: TreeModel) {\r\n        super();\r\n        this.#dragImages = new WeakMap();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        this.setModel(model ?? new TreeModel());\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"draggable\": {\r\n                const {treeElement} = this;\r\n                if (treeElement) {\r\n                    Array.from(treeElement.items).forEach(\r\n                        item_i => item_i.draggable = newValue !== null\r\n                    );\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    get treeElement(): HTMLETreeElement | null {\r\n        return this.shadowRoot.querySelector<HTMLETreeElement>(\"e-tree\")!;\r\n    }\r\n\r\n    treeItemElement(item: TreeItemModel): HTMLETreeItemElement | null  {\r\n        return this.shadowRoot.querySelector<HTMLETreeItemElement>(`e-treeitem[uri=${item.uri}]`)!;\r\n    }\r\n\r\n    #getTreeItemElementUri(item: HTMLETreeItemElement): string {\r\n        let uri = \"\";\r\n        let closestItem = <HTMLETreeItemElement | null>item;\r\n        while (closestItem !== null) {\r\n            const {dataset, parentElement} = closestItem;\r\n            const {name} = dataset;\r\n            uri = `${name}/` + uri;\r\n            closestItem = parentElement?.closest(\"e-treeitem\") ?? null;\r\n        }\r\n        return uri;\r\n    }\r\n\r\n    treeItem(element: HTMLETreeItemElement): TreeItemModel | null  {\r\n        return this.model.getItemByUri(this.#getTreeItemElementUri(element));\r\n    }\r\n\r\n    override renderShadow(): Node {\r\n        const {model} = this;\r\n        const treeElement = element(\"e-tree\", {\r\n            attributes: {\r\n                tabindex: 0,\r\n            },\r\n            children: reactiveChildElements(\r\n                model.childItems, item => this.#renderTreeItem(item)\r\n            ),\r\n            listeners: {\r\n                dragstart: <EventListener>this.#handleDragStartEvent.bind(this),\r\n                drop: <EventListener>this.#handleDropEvent.bind(this),\r\n                contextmenu: <EventListener>this.#handleContextMenuEvent.bind(this),\r\n                focus: <EventListener>this.#handleFocusEvent.bind(this),\r\n                focusin: <EventListener>this.#handleFocusInEvent.bind(this),\r\n                focusout: <EventListener>this.#handleFocusOutEvent.bind(this),\r\n            }\r\n        });\r\n        return fragment(\r\n            /*element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"/css/main.css\"\r\n                }\r\n            }),*/\r\n            treeElement,\r\n            element(\"slot\"),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    class: \"offscreen\",\r\n                    hidden: true\r\n                },\r\n                children: reactiveChildElements(model.items,\r\n                    item => this.#renderTreeItemDragImage(item)\r\n                )\r\n            })\r\n        );\r\n    }\r\n\r\n    itemContentDelegate(item: TreeItemModel): string | Node {\r\n        return reactiveElement(\r\n            item,\r\n            element(\"span\"),\r\n            [\"name\"],\r\n            (label, property, oldValue, newValue) => {\r\n                label.textContent = newValue;\r\n            }\r\n        );\r\n    }\r\n\r\n    itemToolbarDelegate(item: TreeItemModel): HTMLEToolBarElement | null {\r\n        return null;\r\n    }\r\n    \r\n    itemMenuDelegate(this: TreeView): HTMLEMenuElement | null {\r\n        return null;\r\n    }\r\n\r\n    selectedItems(): TreeItemModel[] {\r\n        const {treeElement} = this;\r\n        if (treeElement) {\r\n            const selectedElements = treeElement.selectedItems();\r\n            return selectedElements.map(\r\n                item_i => <TreeItemModel>this.treeItem(item_i)\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    activeItem(): TreeItemModel | null {\r\n        const {treeElement} = this;\r\n        if (treeElement) {\r\n            const {activeItem} = treeElement;\r\n            return activeItem ?\r\n                this.treeItem(activeItem) :\r\n                null;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #getDragImage(model: TreeItemModel): Element | null {\r\n        return this.#dragImages.get(model)?.deref() ?? null;\r\n    }\r\n\r\n    #renderTreeItem(item: TreeItemModel): HTMLETreeItemElement {\r\n        const {draggable} = this;\r\n        const {index, level, name} = item;\r\n        const toolbar = this.itemToolbarDelegate(item);\r\n        const content = this.itemContentDelegate(item);\r\n        const treeItemElement = reactiveElement(\r\n            item,\r\n            element(\"e-treeitem\", {\r\n                attributes: {\r\n                    draggable: String(draggable),\r\n                    posinset: index,\r\n                    level: level\r\n                },\r\n                dataset: {\r\n                    name: name\r\n                },\r\n                children: [\r\n                    ...(content ? [content] : []),\r\n                    ...(toolbar ? [toolbar] : [])\r\n                ]\r\n            }),\r\n            [\"index\", \"name\", \"type\"],\r\n            (treeitem, propertyName, oldValue, newValue) => {\r\n                switch (propertyName) {\r\n                    case \"index\": {\r\n                        treeitem.posinset = newValue;\r\n                        break;\r\n                    }\r\n                    case \"name\": {\r\n                        const {dataset} = treeitem;\r\n                        dataset.name = newValue;\r\n                        break;\r\n                    }\r\n                    case \"type\": {\r\n                        treeitem.type = newValue;\r\n                        switch (newValue) {\r\n                            case \"parent\": {\r\n                                treeitem.append(\r\n                                    element(\"e-treeitemgroup\", {\r\n                                        attributes: {\r\n                                            slot: \"group\"\r\n                                        },\r\n                                        children: reactiveChildElements(item.childItems,\r\n                                            item => this.#renderTreeItem(item)\r\n                                        )\r\n                                    })\r\n                                );\r\n                                break;\r\n                            }\r\n                            case \"leaf\": {\r\n                                const {group} = treeitem;\r\n                                if (group) {\r\n                                    group.remove();\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        );\r\n        return treeItemElement;\r\n    }\r\n\r\n    #renderTreeItemDragImage(item: TreeItemModel): Element {\r\n        const dragImageElement = reactiveElement(\r\n            item,\r\n            element(\"span\", {\r\n                attributes: {\r\n                    class: \"dragimage\"\r\n                }\r\n            }),\r\n            [\"name\"],\r\n            (span, property, oldValue, newValue) => {\r\n                span.textContent = newValue;\r\n            }\r\n        );\r\n        this.#dragImages.set(item, new WeakRef(dragImageElement));\r\n        return dragImageElement;\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLETreeElement>currentTarget;\r\n        const targetItem = <HTMLETreeItemElement>(<Element>target).closest(\"e-treeitem\");\r\n        const {model} = this;\r\n        if (targetItem) {\r\n            const {dataTransfer} = event;\r\n            const selectedElements = targetTree.selectedItems();\r\n            const {length: selectedCount} = selectedElements;\r\n            if (selectedCount > 0) {\r\n                const selectedUris = \r\n                    selectedElements\r\n                    .map(element_i => this.#getTreeItemElementUri(element_i))\r\n                    .filter(\r\n                        (uri_i, _, uris) => !uris.some(\r\n                            uri_j => uri_i.startsWith(`${uri_j}/`)\r\n                        )\r\n                    );\r\n                const selectedUrisString = selectedUris.join(\"\\n\");\r\n                const lastUri = selectedUris[selectedUris.length - 1];\r\n                const lastItem = model.getItemByUri(lastUri);\r\n                if (lastItem && dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", selectedUrisString);\r\n                    const dragImage = this.#getDragImage(lastItem);\r\n                    if (dragImage) {\r\n                        dataTransfer.setDragImage(dragImage, -16, 0);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLETreeElement>currentTarget;\r\n        const targetItem = <HTMLETreeItemElement>(<Element>target).closest(\"e-treeitem\");\r\n        const {model} = this;\r\n        const {sortFunction} = model;\r\n        if (targetItem) {\r\n            const {dataTransfer} = event;\r\n            if (dataTransfer) {\r\n                const targetUri = this.#getTreeItemElementUri(targetItem);\r\n                const targetItemModel = model.getItemByUri(targetUri)!;\r\n                const transferedUris = dataTransfer.getData(\"text/plain\").split(\"\\n\");\r\n                const targetIsWithin = transferedUris.some(uri_i => targetUri.startsWith(`${uri_i}/`) || uri_i === targetUri);\r\n                if (!targetIsWithin) {\r\n                    const transferedItems = <TreeItemModel[]>(\r\n                        transferedUris.map(\r\n                            uri_i => model.getItemByUri(uri_i)\r\n                        ).filter(\r\n                            item_i => item_i !== null\r\n                        )\r\n                    );\r\n                    const {type: targetType, parentItem: targetParentItem} = targetItemModel;\r\n                    const {childItems: targetList} =\r\n                        targetType === \"parent\" ? targetItemModel :\r\n                        targetParentItem ? targetParentItem : model;\r\n                    const targetItems = Array.from(targetList.values());\r\n                    targetItems.forEach((item_i) => {\r\n                        const sameLabelIndex = transferedItems.findIndex(item_j => item_j.name === item_i.name);\r\n                        if (sameLabelIndex > -1) {\r\n                            const doReplace = confirm(`Replace ${item_i.name}?`);\r\n                            if (doReplace) {\r\n                                targetList.remove(item_i);\r\n                            }\r\n                            else {\r\n                                transferedItems.copyWithin(sameLabelIndex, sameLabelIndex + 1);\r\n                                transferedItems.length--;\r\n                            }\r\n                        }\r\n                    });\r\n                    const transferedItemsModelList = new TreeItemModelList(transferedItems);\r\n                    transferedItemsModelList.remove();\r\n                    if (sortFunction) {\r\n                        targetList.beginChanges();\r\n                        targetList.append(...transferedItems);\r\n                        targetList.sort(sortFunction);\r\n                        targetList.endChanges();\r\n                    }\r\n                    else {\r\n                        targetList.insert(targetItem.posinset, ...transferedItems);\r\n                    }\r\n                    const newElements = targetTree.querySelectorAll<HTMLETreeItemElement>(`e-treeitem:is(${\r\n                        transferedItems.map(item_i => `[data-uri=\"${item_i.uri}\"]`).join(\",\")\r\n                    })`);\r\n                    targetTree.beginSelection();\r\n                    newElements.forEach(element_i => element_i.selected = true);\r\n                    targetTree.endSelection();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        const {clientX, clientY, currentTarget, target} = event;\r\n        const targetTree = <HTMLETreeElement>currentTarget;\r\n        const targetItem = <HTMLETreeItemElement>(<Element>target).closest(\"e-treeitem\");\r\n        if (targetItem) {\r\n            const contextMenu = this.itemMenuDelegate();\r\n            if (contextMenu !== null) {\r\n                contextMenu.contextual = true;\r\n                contextMenu.addEventListener(\"close\", () => {\r\n                    targetItem.focus({preventScroll: true});\r\n                });\r\n                targetTree.append(contextMenu);\r\n                contextMenu.positionContextual(clientX, clientY);\r\n                contextMenu.focus({preventScroll: true});\r\n            }\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLETreeElement>currentTarget;\r\n        if (relatedTarget !== null  && !this.contains(<Node | null>relatedTarget)) {\r\n            const relatedPosition = (<Node>relatedTarget).compareDocumentPosition(this);\r\n            if (!(relatedPosition & Node.DOCUMENT_POSITION_DISCONNECTED) && (relatedPosition & Node.DOCUMENT_POSITION_PRECEDING)) {\r\n                const {activeItem} = targetTree;\r\n                if (activeItem) {\r\n                    const itemToolbar = activeItem.querySelector(\"e-toolbar\");\r\n                    if (itemToolbar) {\r\n                        event.preventDefault();\r\n                        itemToolbar.focus();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetItem = <HTMLETreeItemElement>(<Element>target).closest(\"e-treeitem\");\r\n        if (targetItem) {\r\n            const itemToolbar = targetItem.querySelector(\"e-toolbar\");\r\n            if (itemToolbar) {\r\n                itemToolbar.tabIndex = itemToolbar.contains(<Node | null>target) ? -1 : 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetItem = <HTMLETreeItemElement>(<Element>target).closest(\"e-treeitem\");\r\n        if (targetItem) {\r\n            const itemToolbar = targetItem.querySelector(\"e-toolbar\");\r\n            if (itemToolbar) {\r\n                itemToolbar.tabIndex = itemToolbar.contains(<Node | null>target) ? 0 : -1;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar TreeView: TreeViewConstructor = TreeViewBase;"],"names":["AttributeProperty","init","target","property","constructor","prototype","propertyName","String","defaultValue","observed","name","observedAttributes","Reflect","get","Array","isArray","push","Object","defineProperty","value","writable","type","Boolean","this","hasAttribute","set","setAttribute","removeAttribute","val","getAttribute","JSON","parse","stringify","Number","parseFloat","CustomElement","elementCtor","options","customElements","define","fragment","nodes","document","createDocumentFragment","append","element","tagName","attributes","dataset","children","listeners","createElement","entries","forEach","attributeName","attributeValue","undefined","toggleAttribute","elementDataset","keys","datasetEntry_i","from","name_i","listener_i","addEventListener","reactiveElementsMap","WeakMap","reactiveElementsFinalizationRegistry","FinalizationRegistry","heldValue","model","reactiveElement","reactiveElementsMapEntry","reactiveElementsArray","splice","indexOf","reactiveElementsPropertyObserver","records","record_i","oldValue","newValue","reactiveElement_i","elementRef","react","properties","deref","includes","WeakRef","register","observerOptions","propertiesFilter","concat","filter","property_i","i","observe","reactiveChildElementsMap","reactiveChildElementsFinalizationRegistry","list","reactiveChildElement","reactiveChildrenElementsMapEntry","reactiveChildElementsArray","reactiveChildElementsObserver","range","values","length","listLength","reactiveChildElements_i","parentRef","mapping","placeholder","parent","firstChild","childrenCount","removeChild","changeType","LIST_INSERT","LIST_REMOVE","LIST_SORT","insertedIndex","insertedItems","insertedItemsArray","map","before","removedIndex","removedItems","removedCount","createRange","removeEndIndex","setStartBefore","setEndAfter","deleteContents","sortedIndices","childrenArray","index_i","reactiveChildElements","reactiveChildElementsMapEntry","childList","replaceChildren","camelToTrain","str","replace","toLowerCase","ModelChangeRecordBase","ModelNodesList","PROPERTY_CHANGE","ModelChangeRecord","items","slice","item","index","ModelEventBase","currentTarget","ModelEventTargetAccessor","setCurrentTarget","event","setTarget","ModelEvent","ModelEventTargetBase","Map","receiveEvent","callbacks","callback_i","callback","removeEventListener","callbackIndex","findIndex","delete","dispatchEvent","ModelNodeBase","super","parentNode","setParent","isCyclicReference","ancestorNode","TypeError","beginChanges","endChanges","getRecords","record","ModelNodeRecordsAccessor","triggerChange","node","handleRecord","ModelNode","ModelProperty","ModelObjectPropertiesAccessor","getProperty","setProperty","enumerable","ModelObjectBase","ModelObject","ModelList","item_i","sort","compareFunction","indexedItems","indexedItem_a","indexedItem_b","indexedItem_i","prepend","_items","insert","Math","abs","remove","clear","removedItem_i","reference","subtree","ModelChangeObserver","references","listener","bind","unobserve","disconnect","ViewBase","HTMLElement","setModel","renderLight","renderShadow","render","shadowRoot","shadow","light","View","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","d","definition","key","o","obj","prop","hasOwnProperty","call","style","TreeModel","sortFunction","childItems","subtreeItems","item_a","item_b","localeCompare","flatMap","treeItem_i","of","getItemByUri","uri","itemsCount","uriLength","itemUri","itemUriLength","startsWith","flattenedInsertedItems","insertedItem_i","flattenedRemovedItems","TreeItemModelList","count","removedItemsGroups","reduce","TreeItemModel","group","list_i","children_i","child_i","level","parentItem","TreeViewBase","attachShadow","mode","adoptedStylesheet","CSSStyleSheet","adoptedStyleSheets","attributeChangedCallback","treeElement","draggable","querySelector","treeItemElement","treeItem","tabindex","dragstart","drop","contextmenu","focus","focusin","focusout","class","hidden","itemContentDelegate","label","textContent","itemToolbarDelegate","itemMenuDelegate","selectedItems","activeItem","closestItem","parentElement","closest","toolbar","content","posinset","treeitem","slot","dragImageElement","span","targetTree","targetItem","dataTransfer","selectedElements","selectedCount","selectedUris","element_i","uri_i","_","uris","some","uri_j","selectedUrisString","join","lastUri","lastItem","dropEffect","setData","dragImage","setDragImage","targetUri","targetItemModel","transferedUris","getData","split","transferedItems","targetType","targetParentItem","targetList","sameLabelIndex","item_j","confirm","copyWithin","newElements","querySelectorAll","beginSelection","selected","endSelection","clientX","clientY","contextMenu","contextual","preventScroll","positionContextual","preventDefault","relatedTarget","contains","relatedPosition","compareDocumentPosition","Node","DOCUMENT_POSITION_DISCONNECTED","DOCUMENT_POSITION_PRECEDING","itemToolbar","tabIndex"],"sourceRoot":""}