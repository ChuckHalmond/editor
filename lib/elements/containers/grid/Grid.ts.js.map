{"version":3,"file":"elements/containers/grid/Grid.ts.js","mappings":"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","sources":["webpack://editor/./src/elements/Element.ts","webpack://editor/./src/elements/Snippets.ts","webpack://editor/./src/elements/containers/grid/GridBody.ts","webpack://editor/./src/elements/containers/grid/GridCell.ts","webpack://editor/./src/elements/containers/grid/GridRow.ts","webpack://editor/./src/elements/containers/grid/GridRowGroup.ts","webpack://editor/./src/models/Model.ts","webpack://editor/webpack/bootstrap","webpack://editor/webpack/runtime/define property getters","webpack://editor/webpack/runtime/hasOwnProperty shorthand","webpack://editor/./src/elements/containers/grid/Grid.ts"],"sourcesContent":["import { ModelList, ModelNode, ModelChangeRecord, ModelChangeObserver, ModelChangeObserverOptions } from \"../models/Model\";\r\nimport { camelToTrain } from \"./Snippets\";\r\n\r\nexport { CustomElement };\r\nexport { ReactiveChildElements };\r\nexport { QueryProperty };\r\nexport { QueryAllProperty };\r\nexport { AttributeProperty };\r\nexport { reactiveElement };\r\nexport { revokeReactiveElement };\r\nexport { reactiveChildElements };\r\nexport { revokeReactiveChildElements };\r\nexport { element };\r\nexport { fragment };\r\nexport { textNode };\r\nexport { AttributeMutationMixin };\r\nexport { AttributeType };\r\nexport { areAttributesMatching };\r\nexport { AttributeMutationMixinBase };\r\nexport { trimMultilineIndent };\r\nexport { Stylesheet };\r\n\r\nexport { reactiveElementsMap };\r\n\r\ninterface AttributePropertyDecorator {\r\n    (\r\n        init: {\r\n            type: typeof String;\r\n            observed?: boolean;\r\n            defaultValue?: string | null;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Number;\r\n            observed?: boolean;\r\n            defaultValue?: number | null;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Boolean;\r\n            observed?: boolean;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Object;\r\n            observed?: boolean;\r\n            defaultValue?: any | null;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n}\r\n\r\nconst AttributeProperty: AttributePropertyDecorator = function(\r\n    init: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Object;\r\n        observed?: boolean;\r\n        defaultValue?: string | number | any | null;\r\n        name?: string;\r\n    }\r\n) {\r\n    return <E extends HTMLElement>(\r\n        target: E, property: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(property);\r\n        const {defaultValue = null, observed = false, name = camelToTrain(propertyName)} = init;\r\n        if (observed) {\r\n            const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n            if (Array.isArray(observedAttributes)) {\r\n                observedAttributes.push(name);\r\n            }\r\n            else {\r\n                Object.defineProperty(\r\n                    constructor, \"observedAttributes\", {\r\n                        value: [name],\r\n                        writable: false\r\n                    }\r\n                );\r\n            }\r\n        }\r\n        const {type} = init;\r\n        switch (type) {\r\n            case Boolean: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        return this.hasAttribute(name);\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value) {\r\n                            this.setAttribute(name, \"\");\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Object: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(name);\r\n                        return (val !== null) ? JSON.parse(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(name, JSON.stringify(value));\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Number: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(name);\r\n                        return (val !== null) ? parseFloat(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(name, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case String:\r\n            default: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(name);\r\n                        return (val !== null) ? val : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(name, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n    \r\nfunction Stylesheet(text: string): CSSStyleSheet {\r\n    const stylesheet = new CSSStyleSheet();\r\n    (stylesheet as any).replaceSync(text);\r\n    return stylesheet;\r\n}\r\n\r\nfunction trimMultilineIndent(text: string): string {\r\n    const newlineIndex = text.indexOf(\"\\n\");\r\n    text = text.substring(newlineIndex + 1);\r\n    const indentMatch = text.match(/^[\\s]*/);\r\n    if (indentMatch) {\r\n        const indent = text.substring(0, indentMatch[0].length);\r\n        text = text.replaceAll(indent, \"\").trimEnd();\r\n    }\r\n    return text;\r\n}\r\n\r\ninterface CustomElementDecorator {\r\n    (init: {\r\n        name: string;\r\n        options?: ElementDefinitionOptions\r\n    }): <C extends CustomElementConstructor>(elementCtor: C) => C;\r\n}\r\n\r\nconst CustomElement: CustomElementDecorator = function(init: {\r\n    name: string;\r\n    options?: ElementDefinitionOptions\r\n}) {\r\n    return <C extends CustomElementConstructor>(\r\n        elementCtor: C\r\n    ) => {\r\n        const {name, options} = init;\r\n        if (!customElements.get(name)) {\r\n            customElements.define(\r\n                name,\r\n                elementCtor,\r\n                options\r\n            );\r\n        }\r\n        return elementCtor;\r\n    }\r\n}\r\n\r\ninterface QueryPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryProperty: QueryPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(propertyKey);\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return this.shadowRoot!.querySelector(selector);\r\n        } : function(this: HTMLElement) {\r\n            return this.querySelector(selector);\r\n        }\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\ninterface QueryAllPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryAllProperty: QueryAllPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(propertyKey);\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return Array.from(this.shadowRoot!.querySelectorAll(selector));\r\n        } : function(this: HTMLElement) {\r\n            return Array.from(this.querySelectorAll(selector));\r\n        };\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\nfunction fragment(...nodes: (Node | string)[]): DocumentFragment {\r\n    const fragment = document.createDocumentFragment();\r\n    fragment.append(...nodes);\r\n    return fragment;\r\n}\r\n\r\nfunction textNode(text: string): Node {\r\n    return document.createTextNode(text);\r\n}\r\n\r\ninterface HTMLElementInit {\r\n    options?: ElementCreationOptions,\r\n    attributes?: {\r\n        [name: string]: number | string | boolean | undefined\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    children?: Node | string | (Node | string)[] | NodeList | ReactiveChildElements,\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction element<E extends HTMLElementTagNameMap[K], K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): E;\r\nfunction element(\r\n    tagName: string, init?: HTMLElementInit): HTMLElement;\r\nfunction element<K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): HTMLElementTagNameMap[K] {\r\n    if (init) {\r\n        const {options, attributes, dataset, children, listeners} = init;\r\n        const element = document.createElement(tagName, options);\r\n        if (attributes) {\r\n            Object.entries(attributes).forEach(([attributeName, attributeValue]) => {\r\n                if (attributeValue !== undefined) {\r\n                    if (typeof attributeValue === \"boolean\") {\r\n                        element.toggleAttribute(camelToTrain(attributeName), attributeValue);\r\n                    }\r\n                    else {\r\n                        element.setAttribute(camelToTrain(attributeName), String(attributeValue));\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        if (dataset) {\r\n            const {dataset: elementDataset} = element;\r\n            Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                elementDataset[datasetEntry_i] = String(dataset[datasetEntry_i]);\r\n            });\r\n        }\r\n        if (children) {\r\n            if (typeof children === \"function\") {\r\n                children(element);\r\n            }\r\n            else if (typeof children === \"object\" && \"length\" in children) {\r\n                element.append(...Array.from(children));\r\n            }\r\n            else {\r\n                element.append(children);\r\n            }\r\n        }\r\n        if (listeners) {\r\n            Object.entries(listeners).forEach(([name_i, listener_i]) => {\r\n                if (Array.isArray(listener_i)) {\r\n                    element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                }\r\n                else {\r\n                    element.addEventListener(name_i, listener_i);\r\n                }\r\n            });\r\n        }\r\n        return element;\r\n    }\r\n    return document.createElement(tagName);\r\n}\r\n\r\nconst reactiveElementsMap = new WeakMap<ModelNode, {\r\n    observerOptions: ModelChangeObserverOptions,\r\n    reactiveElementsArray: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }[]\r\n}>();\r\n\r\nconst reactiveElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    model: ModelNode,\r\n    reactiveElement: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }\r\n}) => {\r\n    const {model, reactiveElement} = heldValue;\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    if (reactiveElementsMapEntry !== undefined) {\r\n        const {reactiveElementsArray} = reactiveElementsMapEntry;\r\n        reactiveElementsArray.splice(reactiveElementsArray.indexOf(reactiveElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveElementsPropertyObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    records.forEach((record_i) => {\r\n        const {target, propertyName, oldValue, newValue} = record_i;\r\n        const {reactiveElementsArray} = reactiveElementsMap.get(target)!;\r\n        reactiveElementsArray.forEach(reactiveElement_i => {\r\n            const {elementRef, react, properties} = reactiveElement_i;\r\n            const element = elementRef.deref();\r\n            if (element) {\r\n                if (properties.includes(propertyName!)) {\r\n                    react(element, propertyName!, oldValue, newValue);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveElement<M extends ModelNode, E extends Element, K extends string>(\r\n    model: M,\r\n    element: E,\r\n    properties: K[],\r\n    react: (object: E, property: K, oldValue: any, newValue: any) => void\r\n): E;\r\nfunction reactiveElement<M extends ModelNode, E extends Element>(\r\n    model: M,\r\n    element: E,\r\n    properties: string[],\r\n    react: (element: E, property: string, oldValue: any, newValue: any) => void\r\n): E {\r\n    const elementRef = new WeakRef(element);\r\n    const reactiveElement = {elementRef, react, properties};\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    reactiveElementsFinalizationRegistry.register(element, {model, reactiveElement});\r\n    if (!reactiveElementsMapEntry) {\r\n        const observerOptions = {\r\n            properties: true,\r\n            propertiesFilter: properties\r\n        };\r\n        const reactiveElementsArray = [reactiveElement];\r\n        reactiveElementsMap.set(model, {observerOptions, reactiveElementsArray});\r\n        reactiveElementsPropertyObserver.observe(model, observerOptions);\r\n    }\r\n    else {\r\n        const {reactiveElementsArray, observerOptions} = reactiveElementsMapEntry;\r\n        const {propertiesFilter} = observerOptions;\r\n        reactiveElementsArray.push(reactiveElement);\r\n        observerOptions.propertiesFilter = propertiesFilter ?\r\n            propertiesFilter.concat(properties.filter(\r\n                property_i => !propertiesFilter.includes(property_i)\r\n            )) : properties.filter(\r\n                (property_i, i, properties) => properties.indexOf(property_i) === i\r\n            )\r\n    }\r\n    properties.forEach((property_i) => {\r\n        if (property_i in model) {\r\n            const value = Reflect.get(model, property_i, model);\r\n            react(element, <any>property_i, <any>undefined, value);\r\n        }\r\n    });\r\n    return element;\r\n}\r\n\r\nfunction revokeReactiveElement<M extends ModelNode, E extends Element>(\r\n    model: M,\r\n    element: E\r\n): void {\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    if (reactiveElementsMapEntry) {\r\n        const {reactiveElementsArray} = reactiveElementsMapEntry;\r\n        const reactiveElementIndex = reactiveElementsArray.findIndex(\r\n            reactiveElement => reactiveElement.elementRef.deref() === element\r\n        );\r\n        if (reactiveElementIndex > -1) {\r\n            reactiveElementsArray.splice(reactiveElementIndex, 1);\r\n        }\r\n        if (reactiveElementsArray.length === 0) {\r\n            reactiveElementsMap.delete(model);\r\n        }\r\n    }\r\n}\r\n\r\ninterface ReactiveChildElements {\r\n    (parent: ParentNode): void;\r\n}\r\n\r\nconst reactiveChildElementsMap = new WeakMap<ModelList, {\r\n    reactiveChildElementsArray: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }[]\r\n}>();\r\n\r\nconst reactiveChildElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    list: ModelList,\r\n    reactiveChildElement: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }\r\n}) => {\r\n    const {list, reactiveChildElement} = heldValue;\r\n    const reactiveChildrenElementsMapEntry = reactiveChildElementsMap.get(list);\r\n    if (reactiveChildrenElementsMapEntry) {\r\n        const {reactiveChildElementsArray} = reactiveChildrenElementsMapEntry;\r\n        reactiveChildElementsArray.splice(reactiveChildElementsArray.indexOf(reactiveChildElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveChildElementsObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    let range: null | Range = null;\r\n    Array.from(records.values()).forEach((record_i) => {\r\n        const {target} = record_i;\r\n        const list = <ModelList>target;\r\n        const {length: listLength} = list;\r\n        const {reactiveChildElementsArray} = reactiveChildElementsMap.get(list)!;\r\n        reactiveChildElementsArray.forEach((reactiveChildElements_i) => {\r\n            const {parentRef, mapping, placeholder} = reactiveChildElements_i;\r\n            const parent = parentRef.deref();\r\n            if (parent) {\r\n                const {firstChild, children} = parent;\r\n                const {length: childrenCount} = children;\r\n                if (placeholder && listLength > 0 && firstChild == placeholder) {\r\n                    parent.removeChild(placeholder);\r\n                }\r\n                const {changeType, LIST_INSERT, LIST_REMOVE, LIST_SORT} = record_i;\r\n                switch (changeType) {\r\n                    case LIST_INSERT: {\r\n                        const {insertedIndex, insertedItems} = record_i;\r\n                        const insertedItemsArray = Array.from(insertedItems.values()).map(mapping);\r\n                        const {length: childrenCount} = children;\r\n                        if (insertedIndex < childrenCount) {\r\n                            children[insertedIndex].before(...insertedItemsArray);\r\n                        }\r\n                        else {\r\n                            parent.append(...insertedItemsArray);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_REMOVE: {\r\n                        const {removedIndex, removedItems} = record_i;\r\n                        const {length: removedCount} = removedItems;\r\n                        range = range ?? document.createRange();\r\n                        const removeEndIndex = removedIndex + (removedCount - 1);\r\n                        if (removeEndIndex < childrenCount) {\r\n                            range.setStartBefore(children[removedIndex]);\r\n                            range.setEndAfter(children[removeEndIndex]);\r\n                            range.deleteContents();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_SORT: {\r\n                        const {sortedIndices} = record_i;\r\n                        const childrenArray = Array.from(children);\r\n                        parent.append(\r\n                            ...sortedIndices.filter(\r\n                                index_i => index_i < childrenCount\r\n                            ).map(\r\n                                index_i => childrenArray[index_i]\r\n                            )\r\n                        );\r\n                        break;\r\n                    }\r\n                }\r\n                if (listLength == 0 && placeholder) {\r\n                    parent.append(placeholder);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveChildElements<Model extends ModelNode>(\r\n    list: ModelList<Model>,\r\n    mapping: (item: Model) => Element,\r\n    placeholder?: Element\r\n): ReactiveChildElements {\r\n    return (parent: ParentNode) => {\r\n        const parentRef = new WeakRef(parent);\r\n        const reactiveChildElementsMapEntry = reactiveChildElementsMap.get(list);\r\n        const reactiveChildElement = {parentRef, mapping, placeholder};\r\n        reactiveChildElementsFinalizationRegistry.register(parent, {list, reactiveChildElement});\r\n        if (!reactiveChildElementsMapEntry) {\r\n            const reactiveChildElementsArray = [reactiveChildElement];\r\n            reactiveChildElementsMap.set(list, {reactiveChildElementsArray});\r\n            reactiveChildElementsObserver.observe(list, {\r\n                childList: true\r\n            });\r\n        }\r\n        else {\r\n            const {reactiveChildElementsArray} = reactiveChildElementsMapEntry;\r\n            reactiveChildElementsArray.push(reactiveChildElement);\r\n        }\r\n        const children = list.length == 0 && placeholder ?\r\n            [placeholder] : Array.from(list.values()).map(mapping);\r\n        parent.replaceChildren(...children);\r\n    }\r\n}\r\n\r\nfunction revokeReactiveChildElements<Model extends ModelNode>(\r\n    list: ModelList<Model>,\r\n    parent: ParentNode,\r\n): void {\r\n    const reactiveChildElementsMapEntry = reactiveChildElementsMap.get(list);\r\n    if (reactiveChildElementsMapEntry) {\r\n        const {reactiveChildElementsArray} = reactiveChildElementsMapEntry;\r\n        const reactiveChildElementsIndex = reactiveChildElementsArray.findIndex(\r\n            reactiveChildElement => reactiveChildElement.parentRef.deref() === parent\r\n        );\r\n        if (reactiveChildElementsIndex > -1) {\r\n            reactiveChildElementsArray.splice(reactiveChildElementsIndex, 1);\r\n        }\r\n        if (reactiveChildElementsArray.length === 0) {\r\n            reactiveChildElementsMap.delete(list);\r\n        }\r\n    }\r\n}\r\n\r\ninterface AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n    attach(element: Element): void;\r\n    detach(element: Element): void;\r\n}\r\n\r\ntype AttributeType = \"string\" | \"boolean\" | \"list\";\r\n\r\nfunction areAttributesMatching(\r\n    referenceAttributeType: AttributeType,\r\n    referenceAttributeName: string, referenceAttributeValue: string,\r\n    attributeName: string, attributeValue: string | null): boolean {\r\n    if (referenceAttributeName == attributeName) {\r\n        switch (referenceAttributeType) {\r\n            case \"boolean\":\r\n                return referenceAttributeValue == \"\" && attributeValue == \"\";\r\n            case \"string\":\r\n                return referenceAttributeValue !== \"\" && (referenceAttributeValue == attributeValue);\r\n            case \"list\":\r\n                return (referenceAttributeValue !== \"\" && attributeValue !== null) && new RegExp(`${referenceAttributeValue}\\s*?`, \"g\").test(attributeValue );\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nclass AttributeMutationMixinBase implements AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n\r\n    constructor(attributeName: string, attributeType: AttributeType = \"boolean\", attributeValue: string = \"\") {\r\n        this.attributeName = attributeName;\r\n        this.attributeType = attributeType;\r\n        this.attributeValue = attributeValue;\r\n    }\r\n\r\n    attach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n\r\n    detach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n}","\r\nexport { snakeToCamel };\r\nexport { camelToSnake };\r\nexport { trainToCamel };\r\nexport { camelToTrain };\r\n\r\nfunction snakeToCamel(str: string) {\r\n  return str.split('_').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToSnake(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '_').toLowerCase();\r\n}\r\n\r\nfunction trainToCamel(str: string) {\r\n  return str.split('-').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToTrain(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '-').toLowerCase();\r\n}","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\n\r\nexport { HTMLEGridBodyElement };\r\n\r\ninterface HTMLEGridBodyElementConstructor {\r\n    prototype: HTMLEGridBodyElement;\r\n    new(): HTMLEGridBodyElement;\r\n}\r\n\r\ninterface HTMLEGridBodyElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    cells(): HTMLEGridCellElement[];\r\n    rows(): HTMLEGridRowElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridbody\": HTMLEGridBodyElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-gridbody\"\r\n})\r\nclass HTMLEGridBodyElementBase extends HTMLElement implements HTMLEGridBodyElement {\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    cells(): HTMLEGridCellElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEGridCellElement>(\r\n            \"e-gridcell\"\r\n        ));\r\n    }\r\n\r\n    rows(): HTMLEGridRowElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEGridRowElement>(\r\n            \"e-gridrow\"\r\n        ));\r\n    }\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: table-row-group;\r\n            }\r\n        `;\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridBodyElement: HTMLEGridBodyElementConstructor = HTMLEGridBodyElementBase;","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEGridCellElement };\r\n\r\ninterface HTMLEGridCellElementConstructor {\r\n    prototype: HTMLEGridCellElement;\r\n    new(): HTMLEGridCellElement;\r\n}\r\n\r\ninterface HTMLEGridCellElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n    headers: string;\r\n    posinset: number;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridcell\": HTMLEGridCellElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-gridcell\"\r\n})\r\nclass HTMLEGridCellElementBase extends HTMLElement implements HTMLEGridCellElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    headers!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: table-cell;\r\n                text-align: left;\r\n            }\r\n            \r\n            :host([type=\"columnheader\"]:hover) {\r\n                background-color: var(--hovered-item-color);\r\n            }\r\n            \r\n            :host(:hover):host-context(e-grid:is(:not([selectby]), [selectby=\"cell\"])) {\r\n                background-color: var(--hovered-item-color);\r\n            }\r\n            \r\n            :host([type=\"columnheader\"][active]) {\r\n                background-color: var(--focused-item-color);\r\n            }\r\n            \r\n            :host([active]):host-context(e-grid:focus-within:is(:not([selectby]), [selectby=\"cell\"])) {\r\n                outline: 1px solid var(--focused-item-outline-color);\r\n                outline-offset: -1px;\r\n            }\r\n\r\n            :host(:focus-visible):host-context(e-grid:focus-within:is([selectby=\"row\"])) {\r\n                outline: none;\r\n            }\r\n            \r\n            :host([selected]):host-context(e-grid:is(:not([selectby]), [selectby=\"cell\"])) {\r\n                background-color: var(--selected-item-color);\r\n            }\r\n        `;\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridCellElement: HTMLEGridCellElementConstructor = HTMLEGridCellElementBase;","import { AttributeProperty, CustomElement, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\n\r\nexport { HTMLEGridRowElement };\r\n\r\ninterface HTMLEGridRowElementConstructor {\r\n    prototype: HTMLEGridRowElement;\r\n    new(): HTMLEGridRowElement;\r\n}\r\n\r\ninterface HTMLEGridRowElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    active: boolean;\r\n    selected: boolean;\r\n    posinset: number;\r\n    cells(): HTMLEGridCellElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrow\": HTMLEGridRowElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrow\"\r\n})\r\nclass HTMLEGridRowElementBase extends HTMLElement implements HTMLEGridRowElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    cells(): HTMLEGridCellElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEGridCellElement>(\"e-gridcell\"));\r\n    }\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    #menu: HTMLEMenuElement | null;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: table-row;\r\n            }\r\n            \r\n            :host(:hover):host-context(e-grid:is([selectby=\"row\"])) {\r\n                background-color: var(--hovered-item-color);\r\n            }\r\n            \r\n            :host([active]):host-context(e-grid:focus-within:is([selectby=\"row\"])) {\r\n                outline: 1px solid var(--focused-item-outline-color);\r\n                outline-offset: -1px;\r\n            }\r\n            \r\n            :host([selected]):host-context(e-grid:is([selectby=\"row\"])) {\r\n                background-color: var(--selected-item-color);\r\n            }\r\n        `;\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#menu = null;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedCells = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedCells.forEach((cell_i, i) => {\r\n            cell_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowElement: HTMLEGridRowElementConstructor = HTMLEGridRowElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\n\r\nexport { HTMLEGridRowGroupElement };\r\n\r\ninterface HTMLEGridRowGroupElementConstructor {\r\n    prototype: HTMLEGridRowGroupElement;\r\n    new(): HTMLEGridRowGroupElement;\r\n}\r\n\r\ninterface HTMLEGridRowGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrowgroup\": HTMLEGridRowGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrowgroup\"\r\n})\r\nclass HTMLEGridRowGroupElementBase extends HTMLElement implements HTMLEGridRowGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: table-row-group;\r\n            }\r\n        `;\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowGroupElement: HTMLEGridRowGroupElementConstructor = HTMLEGridRowGroupElementBase;","export { ModelChangeRecord };\r\nexport { ModelEvent };\r\nexport { ModelNode };\r\nexport { ModelObject };\r\nexport { ModelProperty };\r\nexport { ModelList };\r\nexport { ModelChangeObserverOptions };\r\nexport { ModelChangeObserver };\r\n\r\ninterface ModelChangeRecordConstructor {\r\n    prototype: ModelChangeRecord;\r\n    new(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ): ModelChangeRecord;\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\ninterface ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly changeType: number;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\nclass ModelChangeRecordBase implements ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList;\r\n    readonly changeType: number;\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n\r\n    constructor(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ) {\r\n        this.target = init.target;\r\n        this.changeType = init.changeType;\r\n        this.propertyName = init.propertyName ?? null;\r\n        this.oldValue = init.oldValue ?? undefined;\r\n        this.newValue = init.newValue ?? undefined;\r\n        this.removedIndex = init.removedIndex ?? 0;\r\n        this.removedItems = new ModelNodesList(init.removedItems ?? []);\r\n        this.insertedIndex = init.insertedIndex ?? 0;\r\n        this.insertedItems = new ModelNodesList(init.insertedItems ?? []);\r\n        this.sortedIndices = init.sortedIndices ?? [];\r\n    }\r\n\r\n    static get PROPERTY_CHANGE(): number {\r\n        return 1;\r\n    }\r\n\r\n    static get LIST_REMOVE(): number {\r\n        return 2;\r\n    }\r\n\r\n    static get LIST_INSERT(): number {\r\n        return 3;\r\n    }\r\n\r\n    static get LIST_SORT(): number {\r\n        return 4;\r\n    }\r\n\r\n    get PROPERTY_CHANGE(): number {\r\n        return ModelChangeRecordBase.PROPERTY_CHANGE;\r\n    }\r\n\r\n    get LIST_REMOVE(): number {\r\n        return ModelChangeRecordBase.LIST_REMOVE;\r\n    }\r\n\r\n    get LIST_INSERT(): number {\r\n        return ModelChangeRecordBase.LIST_INSERT;\r\n    }\r\n\r\n    get LIST_SORT(): number {\r\n        return ModelChangeRecordBase.LIST_SORT;\r\n    }\r\n}\r\n\r\nvar ModelChangeRecord: ModelChangeRecordConstructor = ModelChangeRecordBase;\r\n\r\ninterface ModelNodesListConstructor {\r\n    prototype: ModelNodesList;\r\n    new(items: any[]): ModelNodesList;\r\n}\r\n\r\ninterface ModelNodesList {\r\n    get length(): number;\r\n    item(index: number): ModelNode | null;\r\n    values(): IterableIterator<ModelNode>;\r\n}\r\n\r\nclass ModelNodesListBase implements ModelNodesList {\r\n    #items: ModelNode[];\r\n\r\n    constructor(items: ModelNode[]) {\r\n        this.#items = items.slice();\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    item(index: number): ModelNode | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    values(): IterableIterator<ModelNode> {\r\n        return this.#items.values();\r\n    }\r\n}\r\n\r\nvar ModelNodesList: ModelNodesListConstructor = ModelNodesListBase;\r\n\r\ninterface ModelEventConstructor {\r\n    prototype: ModelEvent;\r\n    new(type: string): ModelEvent;\r\n}\r\n\r\ninterface ModelEvent {\r\n    readonly type: string;\r\n    readonly currentTarget: ModelEventTarget | null;\r\n    readonly target: ModelEventTarget | null;\r\n}\r\n\r\nclass ModelEventBase implements ModelEvent {\r\n    readonly type: string;\r\n\r\n    #currentTarget: ModelEventTarget | null;\r\n    #target: ModelEventTarget | null;\r\n\r\n    constructor(type: string) {\r\n        this.type = type;\r\n        this.#currentTarget = null;\r\n        this.#target = null;\r\n    }\r\n\r\n    get currentTarget(): ModelEventTarget | null {\r\n        return this.#currentTarget;\r\n    }\r\n\r\n    get target(): ModelEventTarget | null {\r\n        return this.#target;\r\n    }\r\n\r\n    static ModelEventTargetAccessor? = new class ModelEventTargetAccessor {\r\n        setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#currentTarget = currentTarget;\r\n            }\r\n        }\r\n\r\n        setTarget(event: ModelEvent, target: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#target = target;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface ModelEventTargetAccessor {\r\n    setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void;\r\n    setTarget(event: ModelEvent, target: ModelEventTarget): void;\r\n}\r\n\r\nvar ModelEventTargetAccessor: ModelEventTargetAccessor = ModelEventBase.ModelEventTargetAccessor!;\r\ndelete ModelEventBase.ModelEventTargetAccessor;\r\n\r\nvar ModelEvent: ModelEventConstructor = ModelEventBase;\r\n\r\ninterface ModelEventTargetConstructor {\r\n    prototype: ModelEventTarget;\r\n    new(): ModelEventTarget;\r\n}\r\n\r\ninterface ModelEventTarget {\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    dispatchEvent(event: ModelEvent): void;\r\n    receiveEvent(event: ModelEvent): void;\r\n}\r\n\r\nclass ModelEventTargetBase implements ModelEventTarget {\r\n    #callbacks: Map<string, ((event: ModelEvent) => void)[]>;\r\n\r\n    constructor() {\r\n        this.#callbacks = new Map();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        const {type} = event;\r\n        const callbacks = this.#callbacks.get(type);\r\n        ModelEventTargetAccessor.setCurrentTarget(event, this);\r\n        if (callbacks) {\r\n            callbacks.forEach((callback_i) => {\r\n                callback_i(event);\r\n            });\r\n        }\r\n    }\r\n\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            callbacks.push(callback);\r\n        }\r\n        else {\r\n            this.#callbacks.set(type, [callback]);\r\n        }\r\n    }\r\n\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            const callbackIndex = callbacks.findIndex(\r\n                callback_i => callback_i == callback\r\n            );\r\n            if (callbackIndex > -1) {\r\n                callbacks.splice(callbackIndex, 1);\r\n            }\r\n            if (callbacks.length == 0) {\r\n                this.#callbacks.delete(type);\r\n            }\r\n        }\r\n    }\r\n\r\n    dispatchEvent(event: ModelEvent): void {\r\n        ModelEventTargetAccessor.setTarget(event, this);\r\n        this.receiveEvent(event);\r\n    }\r\n}\r\n\r\nvar ModelEventTarget: ModelEventTargetConstructor = ModelEventTargetBase;\r\n\r\ninterface ModelNodeConstructor {\r\n    prototype: ModelNode;\r\n    new(): ModelNode;\r\n}\r\n\r\ninterface ModelNode extends ModelEventTarget {\r\n    readonly parentNode: ModelNode | null;\r\n    setParent(parentNode: ModelNode | null): void;\r\n    getRecords(): ModelChangeRecord[];\r\n    beginChanges(): void;\r\n    endChanges(): void;\r\n}\r\n\r\ninterface ModelNodeRecordsAccessor {\r\n    triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void;\r\n    handleRecord(node: ModelNode, record: ModelChangeRecord): void;\r\n}\r\n\r\nclass ModelNodeBase extends ModelEventTargetBase implements ModelNode {\r\n    #parentNode: ModelNode | null;\r\n    #records: ModelChangeRecord[];\r\n    #isRecording: boolean;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#parentNode = null;\r\n        this.#records = [];\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    get parentNode(): ModelNode | null {\r\n        return this.#parentNode;\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        if (parentNode !== null) {\r\n            let isCyclicReference = parentNode == this;\r\n            let {parentNode: ancestorNode} = parentNode;\r\n            while (!isCyclicReference && ancestorNode !== null) {\r\n                ({parentNode: ancestorNode} = ancestorNode);\r\n                isCyclicReference = ancestorNode == this;\r\n            }\r\n            if (!isCyclicReference) {\r\n                this.#parentNode = parentNode;\r\n            }\r\n            else {\r\n                throw new TypeError(\"Failed to set parent on ModelNode: circular reference detected in the hierarchy.\");\r\n            }\r\n        }\r\n        else {\r\n            this.#parentNode = null;\r\n        }\r\n    }\r\n    \r\n    beginChanges(): void {\r\n        this.#isRecording = true;\r\n    }\r\n\r\n    endChanges(): void {\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        this.#records.splice(0);\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    getRecords(): ModelChangeRecord[] {\r\n        return this.#records.slice();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        super.receiveEvent(event);\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            parentNode.receiveEvent(event);\r\n        }\r\n    }\r\n\r\n    #triggerChange(property: string, oldValue: any, newValue: any): void {\r\n        const records = this.#records;\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.PROPERTY_CHANGE,\r\n            propertyName: property,\r\n            oldValue, newValue\r\n        });\r\n        records.push(record);\r\n        if (!this.#isRecording) {\r\n            this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n            records.splice(0);\r\n        }\r\n    }\r\n\r\n    #handleRecord(record: ModelChangeRecord): void {\r\n        this.#records.push(record);\r\n        if (!this.#isRecording) {\r\n            this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n            this.#records.splice(0);\r\n        }\r\n    }\r\n\r\n    static ModelNodeRecordsAccessor? = new class ModelNodeRecordsAccessor {\r\n        triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#triggerChange(property, oldValue, newValue);\r\n            }\r\n        }\r\n\r\n        handleRecord(node: ModelNode, record: ModelChangeRecord): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#handleRecord(record);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelNodeRecordsAccessor: ModelNodeRecordsAccessor = ModelNodeBase.ModelNodeRecordsAccessor!;\r\ndelete ModelNodeBase.ModelNodeRecordsAccessor;\r\n\r\nvar ModelNode: ModelNodeConstructor = ModelNodeBase;\r\n\r\ninterface ModelPropertyDecorator {\r\n    (): <Model extends ModelObject>(target: Model, property: string) => void;\r\n}\r\n\r\nconst ModelProperty: ModelPropertyDecorator = function() {\r\n    return (\r\n        target: ModelObject, property: string\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const setter = function(this: ModelObject, value: any) {\r\n            const oldValue = ModelObjectPropertiesAccessor.getProperty(this, property);\r\n            ModelObjectPropertiesAccessor.setProperty(this, property, value);\r\n            if (value !== oldValue) {\r\n                ModelNodeRecordsAccessor.triggerChange(this, property, oldValue, value);\r\n            }\r\n            return true;\r\n        };\r\n        const getter = function(this: ModelObject) {\r\n            return ModelObjectPropertiesAccessor.getProperty(this, property);\r\n        };\r\n        Object.defineProperty(prototype, property, {\r\n            set: setter,\r\n            get: getter,\r\n            enumerable: true\r\n        });\r\n    }\r\n}\r\n\r\ninterface ModelObjectConstructor {\r\n    prototype: ModelObject;\r\n    new(): ModelObject;\r\n}\r\n\r\ninterface ModelObject extends ModelNode {}\r\n\r\ninterface ModelObjectPropertiesAccessor {\r\n    setProperty(node: ModelNode, property: string, value: any): void;\r\n    getProperty(node: ModelNode, property: string,): any;\r\n}\r\n\r\nclass ModelObjectBase extends ModelNodeBase implements ModelObject {\r\n    #properties: Map<string, any>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#properties = new Map();\r\n    }\r\n\r\n    static ModelObjectPropertiesAccessor? = new class ModelPropertiesAccessor {\r\n        setProperty(node: ModelObject, property: string, value: any): void {\r\n            if (node instanceof ModelObjectBase) {\r\n                node.#properties.set(property, value);\r\n            }\r\n        }\r\n\r\n        getProperty(node: ModelObject, property: string): any {\r\n            if (node instanceof ModelObjectBase) {\r\n                return node.#properties.get(property);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelObjectPropertiesAccessor: ModelObjectPropertiesAccessor = ModelObjectBase.ModelObjectPropertiesAccessor!;\r\ndelete ModelObjectBase.ModelObjectPropertiesAccessor;\r\n\r\nvar ModelObject: ModelObjectConstructor = ModelObjectBase;\r\n\r\ninterface ModelListConstructor {\r\n    prototype: ModelList;\r\n    new<Model extends ModelNode>(): ModelList<Model>;\r\n    new<Model extends ModelNode>(items: Model[]): ModelList<Model>;\r\n}\r\n\r\ninterface ModelList<Model extends ModelNode = ModelNode> extends ModelNode {\r\n    readonly parentNode: ModelNode | null;\r\n    readonly length: number;\r\n    index(item: Model): number;\r\n    get(index: number): Model | null;\r\n    values(): IterableIterator<Model>;\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void;\r\n    insert(index: number, ...items: Model[]): void;\r\n    prepend(...items: Model[]): void;\r\n    append(...items: Model[]): void;\r\n    remove(item: Model): void;\r\n    clear(): void;\r\n}\r\n\r\nclass ModelListBase<Model extends ModelNode = ModelNode> extends ModelNodeBase implements ModelList<Model> {\r\n    #items: Model[];\r\n\r\n    constructor()\r\n    constructor(items: Model[])\r\n    constructor(items?: Model[]) {\r\n        super();\r\n        this.#items = items?.slice() ?? [];\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        super.setParent(parentNode);\r\n        this.#items.forEach((item_i) => {\r\n            item_i.setParent(parentNode);\r\n        });\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    get(index: number): Model | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    index(item: Model): number {\r\n        return this.#items.indexOf(item);\r\n    }\r\n\r\n    values(): IterableIterator<Model> {\r\n        return this.#items.values();\r\n    }\r\n\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void {\r\n        const items = this.#items;\r\n        const indexedItems = items.map(\r\n            (item_i, i) => {\r\n                return {\r\n                    item: item_i,\r\n                    index: i\r\n                };\r\n            }\r\n        );\r\n        indexedItems.sort(\r\n            (indexedItem_a, indexedItem_b) => {\r\n                return compareFunction(\r\n                    indexedItem_a.item, indexedItem_b.item\r\n                )\r\n            }\r\n        );\r\n        this.#items = indexedItems.map(indexedItem_i => indexedItem_i.item);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_SORT,\r\n            sortedIndices: indexedItems.map(indexedItem_i => indexedItem_i.index)\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    prepend(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.splice(0, 0, ...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: 0,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    append(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.push(...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: length,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    insert(index: number, ...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const positiveIndex = Math.abs(index);\r\n        if (positiveIndex <= length) {\r\n            if (index >= 0) {\r\n                const {parentNode} = this;\r\n                items.forEach(item_i => {\r\n                    item_i.setParent(parentNode);\r\n                });\r\n                if (index < length) {\r\n                    _items.splice(index, 0, ...items);\r\n                }\r\n                else {\r\n                    _items.push(...items);\r\n                }\r\n            }\r\n            else if (index < 0) {\r\n                index = length - index;\r\n                const {parentNode} = this;\r\n                if (parentNode) {\r\n                    items.forEach(item_i => {\r\n                        item_i.setParent(parentNode);\r\n                    });\r\n                }\r\n                _items.splice(index, 0, ...items);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_INSERT,\r\n                insertedIndex: index,\r\n                insertedItems: items.slice()\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    remove(item: Model): void {\r\n        const _items = this.#items;\r\n        const index = _items.indexOf(item);\r\n        if (index > -1) {\r\n            const item = _items.splice(index, 1)[0];\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                item.setParent(null);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: index,\r\n                removedItems: [item]\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    clear(): void {\r\n        const items = this.#items;\r\n        const {length} = items;\r\n        if (length > 0) {\r\n            const removedItems = items.splice(0);\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                removedItems.forEach((removedItem_i) => {\r\n                    removedItem_i.setParent(null);\r\n                });\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: 0,\r\n                removedItems: removedItems\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n};\r\n\r\nvar ModelList: ModelListConstructor = ModelListBase!;\r\n\r\ninterface ModelChangeObserverConstructor {\r\n    prototype: ModelChangeObserver;\r\n    new(callback: (records: ModelChangeRecord[]) => void): ModelChangeObserver;\r\n}\r\n\r\ninterface ModelChangeObserver {\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void;\r\n    unobserve(node: ModelNode): void;\r\n    disconnect(): void;\r\n}\r\n\r\ntype ModelChangeObserverOptions = {\r\n    properties?: boolean;\r\n    propertiesFilter?: string[];\r\n    childList?: boolean;\r\n    subtree?: boolean;\r\n}\r\n\r\nclass ModelChangeObserverBase implements ModelChangeObserver {\r\n    #callback: (records: ModelChangeRecord[]) => void;\r\n    #records: ModelChangeRecord[];\r\n    #disconnected: boolean;\r\n\r\n    #references: WeakMap<ModelNode, {\r\n        listener: (event: ModelEvent) => void,\r\n        options: ModelChangeObserverOptions\r\n    }>;\r\n\r\n    constructor(callback: (records: ModelChangeRecord[]) => void) {\r\n        this.#callback = callback;\r\n        this.#records = [];\r\n        this.#disconnected = false;\r\n        this.#references = new WeakMap();\r\n    }\r\n\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void {\r\n        this.#disconnected = false;\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (!reference) {\r\n            const listener = this.#handleModelEvent.bind(this);\r\n            node.addEventListener(\"modelchange\", listener);\r\n            reference = {listener, options};\r\n            references.set(node, reference);\r\n        }\r\n        else {\r\n            references.set(node, reference);\r\n        }\r\n    }\r\n\r\n    unobserve(node: ModelNode): void {\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (reference) {\r\n            const {listener} = reference;\r\n            node.removeEventListener(\"modelchange\", listener);\r\n        }\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#records.splice(0);\r\n        this.#disconnected = true;\r\n    }\r\n\r\n    #trigger(): void {\r\n        const records = this.#records.splice(0);\r\n        if (records.length > 0) {\r\n            this.#callback(records);\r\n        }\r\n    }\r\n\r\n    #handleModelEvent(event: ModelEvent): void {\r\n        if (!this.#disconnected) {\r\n            const {target, currentTarget} = event;\r\n            const reference = this.#references.get(<ModelNode>currentTarget);\r\n            if (reference) {\r\n                const {options} = reference;\r\n                const {properties, propertiesFilter, childList, subtree} = options;\r\n                if (subtree) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n                else if (target == currentTarget) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelChangeObserver: ModelChangeObserverConstructor = ModelChangeObserverBase;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridHeadElement } from \"./GridHead\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\n\r\nexport { HTMLEGridElement };\r\n\r\ninterface HTMLEGridElementConstructor {\r\n    prototype: HTMLEGridElement;\r\n    new(): HTMLEGridElement;\r\n}\r\n\r\ninterface HTMLEGridElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly body: HTMLEGridBodyElement | null;\r\n    readonly head: HTMLEGridHeadElement | null\r\n    readonly activeCell: HTMLEGridCellElement | null;\r\n    readonly activeRow: HTMLEGridRowElement | null;\r\n    selectby: \"cell\" | \"row\";\r\n    name: string;\r\n    multiselectable: boolean;\r\n    cells(): HTMLEGridCellElement[];\r\n    rows(): HTMLEGridRowElement[];\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    clearSelection(): void;\r\n    selectedCells(): HTMLEGridCellElement[];\r\n    selectedRows(): HTMLEGridRowElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-grid\": HTMLEGridElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-grid\"\r\n})\r\nclass HTMLEGridElementBase extends HTMLElement implements HTMLEGridElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    cells(): HTMLEGridCellElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEGridCellElement>(\r\n            \"e-gridcell\"\r\n        ));\r\n    }\r\n\r\n    rows(): HTMLEGridRowElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEGridRowElement>(\r\n            \"e-gridrow\"\r\n        ));\r\n    }\r\n\r\n    get activeCell(): HTMLEGridCellElement | null {\r\n        return this.querySelector<HTMLEGridCellElement>(\"e-gridcell[active]\");\r\n    }\r\n\r\n    get activeRow(): HTMLEGridRowElement | null {\r\n        return this.querySelector<HTMLEGridRowElement>(\"e-gridrow[active]\");\r\n    }\r\n\r\n    get body(): HTMLEGridBodyElement | null {\r\n        return this.querySelector<HTMLEGridBodyElement>(\":scope > e-gridbody\");\r\n    }\r\n\r\n    get head(): HTMLEGridHeadElement | null {\r\n        return this.querySelector<HTMLEGridHeadElement>(\":scope > e-gridhead\");\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"cell\"})\r\n    selectby!: \"cell\" | \"row\";\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    multiselectable!: boolean;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #cellsWalker: TreeWalker;\r\n    #rowsWalker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: table;\r\n                user-select: none;\r\n                line-height: 22px;\r\n            }\r\n            \r\n            :host(:focus) {\r\n                outline: 1px solid var(--focused-item-outline-color);\r\n                outline-offset: -1px;\r\n            }\r\n        `;\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#cellsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#cellsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#rowsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#rowsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"dblclick\", this.#handleDblClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.#clearCellsSelection();\r\n        this.#clearRowsSelection();\r\n    }\r\n\r\n    selectedCells(): HTMLEGridCellElement[] {\r\n        return Array.from(this.querySelectorAll(\"e-gridcell[selected]\"));\r\n    }\r\n\r\n    selectedRows(): HTMLEGridRowElement[] {\r\n        return Array.from(this.querySelectorAll(\"e-gridrow[selected]\"));\r\n    }\r\n\r\n    #cellsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridCellElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement || node instanceof HTMLEGridRowGroupElement || node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #rowsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridRowElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement || node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getCellsRange(from: HTMLEGridCellElement, to: HTMLEGridCellElement): HTMLEGridCellElement[] {\r\n        const cells = Array.from(this.cells());\r\n        const fromIndex = cells.indexOf(from);\r\n        const toIndex = cells.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return cells.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #getRowsRange(from: HTMLEGridRowElement, to: HTMLEGridRowElement): HTMLEGridRowElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleRow = this.#nextRow(from);\r\n            while (nextVisibleRow && nextVisibleRow !== to) {\r\n                range.push(nextVisibleRow);\r\n                nextVisibleRow = this.#nextRow(nextVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleRow = this.#previousRow(from);\r\n            while (previousVisibleRow && previousVisibleRow !== to) {\r\n                range.push(previousVisibleRow);\r\n                previousVisibleRow = this.#previousRow(previousVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setCellsSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((selectedCell_i) => {\r\n            if (!cells.includes(selectedCell_i)) {\r\n                selectedCell_i.selected = false;\r\n            }\r\n        });\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setRowsSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((selectedRow_i) => {\r\n            if (!rows.includes(selectedRow_i)) {\r\n                selectedRow_i.selected = false;\r\n            }\r\n        });\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addCellsToSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addRowsToSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeCellsFromSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        cells.forEach((cell_i) => {\r\n            if (selectedCells.includes(cell_i)) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeRowsFromSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        rows.forEach((row_i) => {\r\n            if (selectedRows.includes(row_i)) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearCellsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((cell_i) => {\r\n            if (cell_i.selected) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearRowsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((row_i) => {\r\n            if (row_i.selected) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveCell(cell: HTMLEGridCellElement | null): void {\r\n        const {activeCell} = this;\r\n        if (activeCell !== null && activeCell !== cell) {\r\n            activeCell.active = false;\r\n            activeCell.tabIndex = -1;\r\n        }\r\n        if (cell !== null) {\r\n            const cellsWalker = this.#cellsWalker;\r\n            cellsWalker.currentNode = cell;\r\n            cell.active = true;\r\n            cell.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #setActiveRow(row: HTMLEGridRowElement | null): void {\r\n        const {activeRow} = this;\r\n        if (activeRow !== null && activeRow !== row) {\r\n            activeRow.active = false;\r\n            activeRow.tabIndex = -1;\r\n        }\r\n        if (row !== null) {\r\n            const rowsWalker = this.#rowsWalker;\r\n            rowsWalker.currentNode = row;\r\n            row.active = true;\r\n            row.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #firstCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.firstChild();\r\n    }\r\n\r\n    #lastCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.lastChild();\r\n    }\r\n\r\n    #previousCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.previousNode();\r\n    }\r\n\r\n    #nextCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.nextNode();\r\n    }\r\n\r\n    #closestRow(cell: HTMLEGridCellElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = cell;\r\n        return <HTMLEGridRowElement | null>rowsWalker.parentNode();\r\n    }\r\n\r\n    #firstRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.firstChild();\r\n    }\r\n\r\n    #lastRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.lastChild();\r\n    }\r\n\r\n    #previousRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.previousNode();\r\n    }\r\n\r\n    #nextRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.nextNode();\r\n    }\r\n\r\n    #topCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const closestRowCells = closestRow.cells();\r\n            const cellIndex = closestRowCells.indexOf(cell);\r\n            const previousRow = this.#previousRow(closestRow);\r\n            if (previousRow) {\r\n                const previousRowCells = previousRow.cells();\r\n                return previousRowCells[\r\n                    Math.min(cellIndex, previousRowCells.length)\r\n                ];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #bottomCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const closestRowCells = closestRow.cells();\r\n            const cellIndex = closestRowCells.indexOf(cell);\r\n            const nextRow = this.#nextRow(closestRow);\r\n            if (nextRow) {\r\n                const nextRowCells = nextRow.cells();\r\n                return nextRowCells[\r\n                    Math.min(cellIndex, nextRowCells.length)\r\n                ];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {ctrlKey, shiftKey} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const composedPath = event.composedPath();\r\n                const targetCell = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridCellElement\r\n                ) : null;\r\n                const selectedCells = this.selectedCells();\r\n                if (targetCell instanceof HTMLEGridCellElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetCell.selected ?\r\n                            this.#addCellsToSelection(targetCell) :\r\n                            this.#removeCellsFromSelection(targetCell);\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedCell = selectedCells[selectedCells.length - 1];\r\n                        if (lastSelectedCell) {\r\n                            const range = this.#getCellsRange(\r\n                                lastSelectedCell,\r\n                                targetCell\r\n                            );\r\n                            if (range) {\r\n                                selectedCells.includes(targetCell) ?\r\n                                    this.#removeCellsFromSelection(...range) :\r\n                                    this.#addCellsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setCellsSelection(targetCell);\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const selectedRows = this.selectedRows();\r\n                const composedPath = event.composedPath();\r\n                const targetRow = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridRowElement\r\n                ) : null;\r\n                if (targetRow instanceof HTMLEGridRowElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetRow.selected ?\r\n                            this.#addRowsToSelection(targetRow) :\r\n                            this.#removeRowsFromSelection(targetRow);\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedRow = selectedRows[selectedRows.length - 1];\r\n                        if (lastSelectedRow) {\r\n                            const range = this.#getRowsRange(\r\n                                lastSelectedRow,\r\n                                targetRow\r\n                            );\r\n                            if (range) {\r\n                                selectedRows.includes(targetRow) ?\r\n                                    this.#removeRowsFromSelection(...range) :\r\n                                    this.#addRowsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setRowsSelection(targetRow);\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleDblClickEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {selectby, activeCell, activeRow} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    switch (selectby) {\r\n                        case \"cell\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const firstCell = firstRow ? this.#firstCell(firstRow) : null;\r\n                            const lastRow = this.#lastRow();\r\n                            const lastCell = lastRow ? this.#lastCell(lastRow) : null;\r\n                            if (firstCell && lastCell) {\r\n                                const range = this.#getCellsRange(firstCell, lastCell);\r\n                                if (range) {\r\n                                    this.#setCellsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"row\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const lastRow = this.#lastRow();\r\n                            if (firstRow && lastRow) {\r\n                                const range = this.#getRowsRange(firstRow, lastRow);\r\n                                if (range) {\r\n                                    this.#setRowsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const previousCell = this.#previousCell(activeCell);\r\n                        if (previousCell) {\r\n                            previousCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousCell.selected ?\r\n                                    this.#removeCellsFromSelection(previousCell) :\r\n                                    this.#addCellsToSelection(previousCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const nextCell = this.#nextCell(activeCell);\r\n                        if (nextCell) {\r\n                            nextCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextCell.selected ?\r\n                                    this.#removeCellsFromSelection(nextCell) :\r\n                                    this.#addCellsToSelection(nextCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const firstRow = activeRow ?? this.#firstRow();\r\n                        const topCell = activeCell ?\r\n                            this.#topCell(activeCell) :\r\n                            firstRow ?\r\n                            this.#firstCell(firstRow) :\r\n                            null;\r\n                        if (topCell) {\r\n                            topCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                topCell.selected ?\r\n                                    this.#removeCellsFromSelection(topCell) :\r\n                                    this.#addCellsToSelection(topCell);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const previousRow = activeRow ?\r\n                            this.#previousRow(activeRow) :\r\n                            this.#firstRow();\r\n                        if (previousRow) {\r\n                            previousRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousRow.selected ?\r\n                                    this.#removeRowsFromSelection(previousRow) :\r\n                                    this.#addRowsToSelection(previousRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const lastRow = activeRow ?? this.#lastRow();\r\n                        const bottomCell = activeCell ?\r\n                            this.#bottomCell(activeCell) :\r\n                            lastRow ?\r\n                            this.#lastCell(lastRow) :\r\n                            null;\r\n                            if (bottomCell) {\r\n                                bottomCell.focus({preventScroll: true});\r\n                                const {shiftKey} = event;\r\n                                if (shiftKey) {\r\n                                    bottomCell.selected ?\r\n                                        this.#removeCellsFromSelection(bottomCell) :\r\n                                        this.#addCellsToSelection(bottomCell);\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"row\": {\r\n                        const nextRow = activeRow ?\r\n                            this.#nextRow(activeRow) :\r\n                            this.#lastRow();\r\n                        if (nextRow) {\r\n                            nextRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextRow.selected ?\r\n                                    this.#removeRowsFromSelection(nextRow) :\r\n                                    this.#addRowsToSelection(nextRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const firstCell = this.#firstCell(activeRow);\r\n                            if (firstCell) {\r\n                                firstCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const firstRow = this.#firstRow();\r\n                        if (firstRow) {\r\n                            firstRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const lastCell = this.#lastCell(activeRow);\r\n                            if (lastCell) {\r\n                                lastCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const lastRow = this.#lastRow();\r\n                        if (lastRow) {\r\n                            lastRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeCell) {\r\n                            this.#setCellsSelection(activeCell);\r\n                            activeCell.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        if (activeRow) {\r\n                            this.#setRowsSelection(activeRow);\r\n                            activeRow.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        this.#clearCellsSelection();\r\n                        this.#setActiveCell(null);\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        this.#clearRowsSelection();\r\n                        this.#setActiveRow(null);\r\n                        break;\r\n                    }\r\n                }\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const {activeCell} = this;\r\n                if (activeCell && relatedTarget !== activeCell) {\r\n                    activeCell.focus();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const {activeRow} = this;\r\n                if (activeRow && relatedTarget !== activeRow) {\r\n                    activeRow.focus();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLEGridCellElement>(\"e-gridcell\");\r\n                if (targetCell) {\r\n                    this.#setActiveCell(targetCell);\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLEGridRowElement>(\"e-gridrow\");\r\n                if (targetRow) {\r\n                    this.#setActiveRow(targetRow);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedRows = <HTMLEGridRowElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridRowElement\r\n            );\r\n            assignedRows.forEach((row_i, i) => {\r\n                row_i.posinset = i;\r\n            });\r\n    }\r\n}\r\n\r\nvar HTMLEGridElement: HTMLEGridElementConstructor = HTMLEGridElementBase;"],"names":["AttributeProperty","init","target","property","constructor","prototype","propertyName","String","defaultValue","observed","name","observedAttributes","Reflect","get","Array","isArray","push","Object","defineProperty","value","writable","type","Boolean","this","hasAttribute","set","setAttribute","removeAttribute","val","getAttribute","JSON","parse","stringify","Number","parseFloat","CustomElement","elementCtor","options","customElements","define","element","tagName","attributes","dataset","children","listeners","document","createElement","entries","forEach","attributeName","attributeValue","undefined","toggleAttribute","elementDataset","keys","datasetEntry_i","append","from","name_i","listener_i","addEventListener","reactiveElementsMap","WeakMap","FinalizationRegistry","heldValue","model","reactiveElement","reactiveElementsMapEntry","reactiveElementsArray","splice","indexOf","records","record_i","oldValue","newValue","reactiveElement_i","elementRef","react","properties","deref","includes","reactiveChildElementsMap","list","reactiveChildElement","reactiveChildrenElementsMapEntry","reactiveChildElementsArray","range","values","length","listLength","reactiveChildElements_i","parentRef","mapping","placeholder","parent","firstChild","childrenCount","removeChild","changeType","LIST_INSERT","LIST_REMOVE","LIST_SORT","insertedIndex","insertedItems","insertedItemsArray","map","before","removedIndex","removedItems","removedCount","createRange","removeEndIndex","setStartBefore","setEndAfter","deleteContents","sortedIndices","childrenArray","filter","index_i","camelToTrain","str","replace","toLowerCase","shadowTemplate","style","HTMLEGridBodyElementBase","HTMLElement","super","shadowRoot","attachShadow","mode","adoptedStylesheet","CSSStyleSheet","adoptedStyleSheets","content","cloneNode","bind","cells","querySelectorAll","rows","event","assignedElements","element_i","item_i","i","posinset","HTMLEGridBodyElement","HTMLEGridCellElementBase","connectedCallback","tabIndex","attributeChangedCallback","dispatchEvent","Event","bubbles","HTMLEGridCellElement","HTMLEGridRowElementBase","menu","cell_i","HTMLEGridRowElement","HTMLEGridRowGroupElementBase","HTMLEGridRowGroupElement","ModelChangeRecordBase","ModelNodesList","PROPERTY_CHANGE","ModelChangeRecord","items","slice","item","index","ModelEventBase","currentTarget","ModelEventTargetAccessor","setCurrentTarget","setTarget","ModelEvent","ModelEventTargetBase","Map","receiveEvent","callbacks","callback_i","callback","removeEventListener","callbackIndex","findIndex","delete","ModelNodeBase","parentNode","setParent","isCyclicReference","ancestorNode","TypeError","beginChanges","endChanges","getRecords","record","ModelNodeRecordsAccessor","triggerChange","node","handleRecord","ModelNode","ModelObjectBase","ModelObjectPropertiesAccessor","setProperty","getProperty","ModelList","sort","compareFunction","indexedItems","indexedItem_a","indexedItem_b","indexedItem_i","prepend","_items","insert","Math","abs","remove","clear","removedItem_i","reference","propertiesFilter","childList","subtree","ModelChangeObserver","observe","references","listener","unobserve","disconnect","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","d","definition","key","o","enumerable","obj","prop","hasOwnProperty","call","HTMLEGridElementBase","createTreeWalker","NodeFilter","SHOW_ELEMENT","activeCell","querySelector","activeRow","body","head","beginSelection","endSelection","clearSelection","selectedCells","selectedRows","hidden","FILTER_ACCEPT","FILTER_SKIP","FILTER_REJECT","to","fromIndex","toIndex","min","max","position","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","nextVisibleRow","DOCUMENT_POSITION_PRECEDING","previousVisibleRow","selectedCell_i","selected","selectedRow_i","row_i","cell","active","currentNode","row","cellsWalker","lastChild","previousNode","nextNode","rowsWalker","root","closestRow","cellIndex","previousRow","previousRowCells","nextRow","nextRowCells","ctrlKey","shiftKey","selectby","composedPath","targetCell","find","target_i","lastSelectedCell","targetRow","lastSelectedRow","stopPropagation","firstRow","firstCell","lastRow","lastCell","preventDefault","previousCell","focus","preventScroll","nextCell","topCell","bottomCell","click","relatedTarget","closest"],"sourceRoot":""}