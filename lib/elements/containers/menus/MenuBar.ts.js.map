{"version":3,"file":"elements/containers/menus/MenuBar.ts.js","mappings":"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","sources":["webpack://editor/./src/elements/Element.ts","webpack://editor/./src/elements/Snippets.ts","webpack://editor/./src/elements/containers/menus/MenuItem.ts","webpack://editor/./src/elements/containers/menus/MenuItemGroup.ts","webpack://editor/./src/models/Model.ts","webpack://editor/webpack/bootstrap","webpack://editor/webpack/runtime/define property getters","webpack://editor/webpack/runtime/hasOwnProperty shorthand","webpack://editor/./src/elements/containers/menus/MenuBar.ts"],"sourcesContent":["import { ModelList, ModelNode, ModelChangeRecord, ModelChangeObserver, ModelChangeObserverOptions } from \"../models/Model\";\r\nimport { camelToTrain } from \"./Snippets\";\r\n\r\nexport { CustomElement };\r\nexport { ReactiveChildElements };\r\nexport { QueryProperty };\r\nexport { QueryAllProperty };\r\nexport { AttributeProperty };\r\nexport { reactiveElement };\r\nexport { revokeReactiveElement };\r\nexport { reactiveChildElements };\r\nexport { revokeReactiveChildElements };\r\nexport { element };\r\nexport { fragment };\r\nexport { textNode };\r\nexport { AttributeMutationMixin };\r\nexport { AttributeType };\r\nexport { areAttributesMatching };\r\nexport { AttributeMutationMixinBase };\r\nexport { trimMultilineIndent };\r\nexport { Stylesheet };\r\n\r\nexport { reactiveElementsMap };\r\n\r\ninterface AttributePropertyDecorator {\r\n    (\r\n        init: {\r\n            type: typeof String;\r\n            observed?: boolean;\r\n            defaultValue?: string | null;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Number;\r\n            observed?: boolean;\r\n            defaultValue?: number | null;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Boolean;\r\n            observed?: boolean;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Object;\r\n            observed?: boolean;\r\n            defaultValue?: any | null;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n}\r\n\r\nconst AttributeProperty: AttributePropertyDecorator = function(\r\n    init: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Object;\r\n        observed?: boolean;\r\n        defaultValue?: string | number | any | null;\r\n        name?: string;\r\n    }\r\n) {\r\n    return <E extends HTMLElement>(\r\n        target: E, property: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(property);\r\n        const {defaultValue = null, observed = false, name = camelToTrain(propertyName)} = init;\r\n        if (observed) {\r\n            const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n            if (Array.isArray(observedAttributes)) {\r\n                observedAttributes.push(name);\r\n            }\r\n            else {\r\n                Object.defineProperty(\r\n                    constructor, \"observedAttributes\", {\r\n                        value: [name],\r\n                        writable: false\r\n                    }\r\n                );\r\n            }\r\n        }\r\n        const {type} = init;\r\n        switch (type) {\r\n            case Boolean: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        return this.hasAttribute(name);\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value) {\r\n                            this.setAttribute(name, \"\");\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Object: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(name);\r\n                        return (val !== null) ? JSON.parse(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(name, JSON.stringify(value));\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Number: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(name);\r\n                        return (val !== null) ? parseFloat(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(name, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case String:\r\n            default: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(name);\r\n                        return (val !== null) ? val : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(name, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n    \r\nfunction Stylesheet(text: string): CSSStyleSheet {\r\n    const stylesheet = new CSSStyleSheet();\r\n    (stylesheet as any).replaceSync(text);\r\n    return stylesheet;\r\n}\r\n\r\nfunction trimMultilineIndent(text: string): string {\r\n    const newlineIndex = text.indexOf(\"\\n\");\r\n    text = text.substring(newlineIndex + 1);\r\n    const indentMatch = text.match(/^[\\s]*/);\r\n    if (indentMatch) {\r\n        const indent = text.substring(0, indentMatch[0].length);\r\n        text = text.replaceAll(indent, \"\").trimEnd();\r\n    }\r\n    return text;\r\n}\r\n\r\ninterface CustomElementDecorator {\r\n    (init: {\r\n        name: string;\r\n        options?: ElementDefinitionOptions\r\n    }): <C extends CustomElementConstructor>(elementCtor: C) => C;\r\n}\r\n\r\nconst CustomElement: CustomElementDecorator = function(init: {\r\n    name: string;\r\n    options?: ElementDefinitionOptions\r\n}) {\r\n    return <C extends CustomElementConstructor>(\r\n        elementCtor: C\r\n    ) => {\r\n        const {name, options} = init;\r\n        if (!customElements.get(name)) {\r\n            customElements.define(\r\n                name,\r\n                elementCtor,\r\n                options\r\n            );\r\n        }\r\n        return elementCtor;\r\n    }\r\n}\r\n\r\ninterface QueryPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryProperty: QueryPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(propertyKey);\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return this.shadowRoot!.querySelector(selector);\r\n        } : function(this: HTMLElement) {\r\n            return this.querySelector(selector);\r\n        }\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\ninterface QueryAllPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryAllProperty: QueryAllPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(propertyKey);\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return Array.from(this.shadowRoot!.querySelectorAll(selector));\r\n        } : function(this: HTMLElement) {\r\n            return Array.from(this.querySelectorAll(selector));\r\n        };\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\nfunction fragment(...nodes: (Node | string)[]): DocumentFragment {\r\n    const fragment = document.createDocumentFragment();\r\n    fragment.append(...nodes);\r\n    return fragment;\r\n}\r\n\r\nfunction textNode(text: string): Node {\r\n    return document.createTextNode(text);\r\n}\r\n\r\ninterface HTMLElementInit {\r\n    options?: ElementCreationOptions,\r\n    attributes?: {\r\n        [name: string]: number | string | boolean | undefined\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    children?: Node | string | (Node | string)[] | NodeList | ReactiveChildElements,\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction element<E extends HTMLElementTagNameMap[K], K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): E;\r\nfunction element(\r\n    tagName: string, init?: HTMLElementInit): HTMLElement;\r\nfunction element<K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): HTMLElementTagNameMap[K] {\r\n    if (init) {\r\n        const {options, attributes, dataset, children, listeners} = init;\r\n        const element = document.createElement(tagName, options);\r\n        if (attributes) {\r\n            Object.entries(attributes).forEach(([attributeName, attributeValue]) => {\r\n                if (attributeValue !== undefined) {\r\n                    if (typeof attributeValue === \"boolean\") {\r\n                        element.toggleAttribute(camelToTrain(attributeName), attributeValue);\r\n                    }\r\n                    else {\r\n                        element.setAttribute(camelToTrain(attributeName), String(attributeValue));\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        if (dataset) {\r\n            const {dataset: elementDataset} = element;\r\n            Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                elementDataset[datasetEntry_i] = String(dataset[datasetEntry_i]);\r\n            });\r\n        }\r\n        if (children) {\r\n            if (typeof children === \"function\") {\r\n                children(element);\r\n            }\r\n            else if (typeof children === \"object\" && \"length\" in children) {\r\n                element.append(...Array.from(children));\r\n            }\r\n            else {\r\n                element.append(children);\r\n            }\r\n        }\r\n        if (listeners) {\r\n            Object.entries(listeners).forEach(([name_i, listener_i]) => {\r\n                if (Array.isArray(listener_i)) {\r\n                    element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                }\r\n                else {\r\n                    element.addEventListener(name_i, listener_i);\r\n                }\r\n            });\r\n        }\r\n        return element;\r\n    }\r\n    return document.createElement(tagName);\r\n}\r\n\r\nconst reactiveElementsMap = new WeakMap<ModelNode, {\r\n    observerOptions: ModelChangeObserverOptions,\r\n    reactiveElementsArray: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }[]\r\n}>();\r\n\r\nconst reactiveElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    model: ModelNode,\r\n    reactiveElement: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }\r\n}) => {\r\n    const {model, reactiveElement} = heldValue;\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    if (reactiveElementsMapEntry !== undefined) {\r\n        const {reactiveElementsArray} = reactiveElementsMapEntry;\r\n        reactiveElementsArray.splice(reactiveElementsArray.indexOf(reactiveElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveElementsPropertyObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    records.forEach((record_i) => {\r\n        const {target, propertyName, oldValue, newValue} = record_i;\r\n        const {reactiveElementsArray} = reactiveElementsMap.get(target)!;\r\n        reactiveElementsArray.forEach(reactiveElement_i => {\r\n            const {elementRef, react, properties} = reactiveElement_i;\r\n            const element = elementRef.deref();\r\n            if (element) {\r\n                if (properties.includes(propertyName!)) {\r\n                    react(element, propertyName!, oldValue, newValue);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveElement<M extends ModelNode, E extends Element, K extends string>(\r\n    model: M,\r\n    element: E,\r\n    properties: K[],\r\n    react: (object: E, property: K, oldValue: any, newValue: any) => void\r\n): E;\r\nfunction reactiveElement<M extends ModelNode, E extends Element>(\r\n    model: M,\r\n    element: E,\r\n    properties: string[],\r\n    react: (element: E, property: string, oldValue: any, newValue: any) => void\r\n): E {\r\n    const elementRef = new WeakRef(element);\r\n    const reactiveElement = {elementRef, react, properties};\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    reactiveElementsFinalizationRegistry.register(element, {model, reactiveElement});\r\n    if (!reactiveElementsMapEntry) {\r\n        const observerOptions = {\r\n            properties: true,\r\n            propertiesFilter: properties\r\n        };\r\n        const reactiveElementsArray = [reactiveElement];\r\n        reactiveElementsMap.set(model, {observerOptions, reactiveElementsArray});\r\n        reactiveElementsPropertyObserver.observe(model, observerOptions);\r\n    }\r\n    else {\r\n        const {reactiveElementsArray, observerOptions} = reactiveElementsMapEntry;\r\n        const {propertiesFilter} = observerOptions;\r\n        reactiveElementsArray.push(reactiveElement);\r\n        observerOptions.propertiesFilter = propertiesFilter ?\r\n            propertiesFilter.concat(properties.filter(\r\n                property_i => !propertiesFilter.includes(property_i)\r\n            )) : properties.filter(\r\n                (property_i, i, properties) => properties.indexOf(property_i) === i\r\n            )\r\n    }\r\n    properties.forEach((property_i) => {\r\n        if (property_i in model) {\r\n            const value = Reflect.get(model, property_i, model);\r\n            react(element, <any>property_i, <any>undefined, value);\r\n        }\r\n    });\r\n    return element;\r\n}\r\n\r\nfunction revokeReactiveElement<M extends ModelNode, E extends Element>(\r\n    model: M,\r\n    element: E\r\n): void {\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    if (reactiveElementsMapEntry) {\r\n        const {reactiveElementsArray} = reactiveElementsMapEntry;\r\n        const reactiveElementIndex = reactiveElementsArray.findIndex(\r\n            reactiveElement => reactiveElement.elementRef.deref() === element\r\n        );\r\n        if (reactiveElementIndex > -1) {\r\n            reactiveElementsArray.splice(reactiveElementIndex, 1);\r\n        }\r\n        if (reactiveElementsArray.length === 0) {\r\n            reactiveElementsMap.delete(model);\r\n        }\r\n    }\r\n}\r\n\r\ninterface ReactiveChildElements {\r\n    (parent: ParentNode): void;\r\n}\r\n\r\nconst reactiveChildElementsMap = new WeakMap<ModelList, {\r\n    reactiveChildElementsArray: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }[]\r\n}>();\r\n\r\nconst reactiveChildElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    list: ModelList,\r\n    reactiveChildElement: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }\r\n}) => {\r\n    const {list, reactiveChildElement} = heldValue;\r\n    const reactiveChildrenElementsMapEntry = reactiveChildElementsMap.get(list);\r\n    if (reactiveChildrenElementsMapEntry) {\r\n        const {reactiveChildElementsArray} = reactiveChildrenElementsMapEntry;\r\n        reactiveChildElementsArray.splice(reactiveChildElementsArray.indexOf(reactiveChildElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveChildElementsObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    let range: null | Range = null;\r\n    Array.from(records.values()).forEach((record_i) => {\r\n        const {target} = record_i;\r\n        const list = <ModelList>target;\r\n        const {length: listLength} = list;\r\n        const {reactiveChildElementsArray} = reactiveChildElementsMap.get(list)!;\r\n        reactiveChildElementsArray.forEach((reactiveChildElements_i) => {\r\n            const {parentRef, mapping, placeholder} = reactiveChildElements_i;\r\n            const parent = parentRef.deref();\r\n            if (parent) {\r\n                const {firstChild, children} = parent;\r\n                const {length: childrenCount} = children;\r\n                if (placeholder && listLength > 0 && firstChild == placeholder) {\r\n                    parent.removeChild(placeholder);\r\n                }\r\n                const {changeType, LIST_INSERT, LIST_REMOVE, LIST_SORT} = record_i;\r\n                switch (changeType) {\r\n                    case LIST_INSERT: {\r\n                        const {insertedIndex, insertedItems} = record_i;\r\n                        const insertedItemsArray = Array.from(insertedItems.values()).map(mapping);\r\n                        const {length: childrenCount} = children;\r\n                        if (insertedIndex < childrenCount) {\r\n                            children[insertedIndex].before(...insertedItemsArray);\r\n                        }\r\n                        else {\r\n                            parent.append(...insertedItemsArray);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_REMOVE: {\r\n                        const {removedIndex, removedItems} = record_i;\r\n                        const {length: removedCount} = removedItems;\r\n                        range = range ?? document.createRange();\r\n                        const removeEndIndex = removedIndex + (removedCount - 1);\r\n                        if (removeEndIndex < childrenCount) {\r\n                            range.setStartBefore(children[removedIndex]);\r\n                            range.setEndAfter(children[removeEndIndex]);\r\n                            range.deleteContents();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_SORT: {\r\n                        const {sortedIndices} = record_i;\r\n                        const childrenArray = Array.from(children);\r\n                        parent.append(\r\n                            ...sortedIndices.filter(\r\n                                index_i => index_i < childrenCount\r\n                            ).map(\r\n                                index_i => childrenArray[index_i]\r\n                            )\r\n                        );\r\n                        break;\r\n                    }\r\n                }\r\n                if (listLength == 0 && placeholder) {\r\n                    parent.append(placeholder);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveChildElements<Model extends ModelNode>(\r\n    list: ModelList<Model>,\r\n    mapping: (item: Model) => Element,\r\n    placeholder?: Element\r\n): ReactiveChildElements {\r\n    return (parent: ParentNode) => {\r\n        const parentRef = new WeakRef(parent);\r\n        const reactiveChildElementsMapEntry = reactiveChildElementsMap.get(list);\r\n        const reactiveChildElement = {parentRef, mapping, placeholder};\r\n        reactiveChildElementsFinalizationRegistry.register(parent, {list, reactiveChildElement});\r\n        if (!reactiveChildElementsMapEntry) {\r\n            const reactiveChildElementsArray = [reactiveChildElement];\r\n            reactiveChildElementsMap.set(list, {reactiveChildElementsArray});\r\n            reactiveChildElementsObserver.observe(list, {\r\n                childList: true\r\n            });\r\n        }\r\n        else {\r\n            const {reactiveChildElementsArray} = reactiveChildElementsMapEntry;\r\n            reactiveChildElementsArray.push(reactiveChildElement);\r\n        }\r\n        const children = list.length == 0 && placeholder ?\r\n            [placeholder] : Array.from(list.values()).map(mapping);\r\n        parent.replaceChildren(...children);\r\n    }\r\n}\r\n\r\nfunction revokeReactiveChildElements<Model extends ModelNode>(\r\n    list: ModelList<Model>,\r\n    parent: ParentNode,\r\n): void {\r\n    const reactiveChildElementsMapEntry = reactiveChildElementsMap.get(list);\r\n    if (reactiveChildElementsMapEntry) {\r\n        const {reactiveChildElementsArray} = reactiveChildElementsMapEntry;\r\n        const reactiveChildElementsIndex = reactiveChildElementsArray.findIndex(\r\n            reactiveChildElement => reactiveChildElement.parentRef.deref() === parent\r\n        );\r\n        if (reactiveChildElementsIndex > -1) {\r\n            reactiveChildElementsArray.splice(reactiveChildElementsIndex, 1);\r\n        }\r\n        if (reactiveChildElementsArray.length === 0) {\r\n            reactiveChildElementsMap.delete(list);\r\n        }\r\n    }\r\n}\r\n\r\ninterface AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n    attach(element: Element): void;\r\n    detach(element: Element): void;\r\n}\r\n\r\ntype AttributeType = \"string\" | \"boolean\" | \"list\";\r\n\r\nfunction areAttributesMatching(\r\n    referenceAttributeType: AttributeType,\r\n    referenceAttributeName: string, referenceAttributeValue: string,\r\n    attributeName: string, attributeValue: string | null): boolean {\r\n    if (referenceAttributeName == attributeName) {\r\n        switch (referenceAttributeType) {\r\n            case \"boolean\":\r\n                return referenceAttributeValue == \"\" && attributeValue == \"\";\r\n            case \"string\":\r\n                return referenceAttributeValue !== \"\" && (referenceAttributeValue == attributeValue);\r\n            case \"list\":\r\n                return (referenceAttributeValue !== \"\" && attributeValue !== null) && new RegExp(`${referenceAttributeValue}\\s*?`, \"g\").test(attributeValue );\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nclass AttributeMutationMixinBase implements AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n\r\n    constructor(attributeName: string, attributeType: AttributeType = \"boolean\", attributeValue: string = \"\") {\r\n        this.attributeName = attributeName;\r\n        this.attributeType = attributeType;\r\n        this.attributeValue = attributeValue;\r\n    }\r\n\r\n    attach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n\r\n    detach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n}","\r\nexport { snakeToCamel };\r\nexport { camelToSnake };\r\nexport { trainToCamel };\r\nexport { camelToTrain };\r\n\r\nfunction snakeToCamel(str: string) {\r\n  return str.split('_').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToSnake(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '_').toLowerCase();\r\n}\r\n\r\nfunction trainToCamel(str: string) {\r\n  return str.split('-').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToTrain(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '-').toLowerCase();\r\n}","import { CustomElement, AttributeProperty, QueryProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\n\r\nexport { HTMLEMenuItemElement };\r\nexport { EMenuItem };\r\n\r\ninterface HTMLEMenuItemElementConstructor {\r\n    prototype: HTMLEMenuItemElement;\r\n    new(): HTMLEMenuItemElement;\r\n}\r\n\r\ninterface HTMLEMenuItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n    get menu(): HTMLEMenuElement | null;\r\n    name: string;\r\n    label: string | null;\r\n    value: string;\r\n    hotkey: string;\r\n    disabled: boolean;\r\n    checked: boolean;\r\n    expanded: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(attributeName: string, oldValue: string | null, newValue: string | null): void;\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitem\": HTMLEMenuItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitem\"\r\n})\r\nclass HTMLEMenuItemElementBase extends HTMLElement implements HTMLEMenuItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n    \r\n    @QueryProperty({selector: \":scope > e-menu[slot=menu]\"})\r\n    menu!: HTMLEMenuElement | null;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string | null;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    hotkey!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    checked!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    expanded!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    overflown!: boolean;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"button\", observed: true})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"icon\"\r\n                }\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"label\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"arrow\"\r\n                }\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: flex;\r\n                user-select: none;\r\n                white-space: nowrap;\r\n                box-sizing: border-box;\r\n            }\r\n            \r\n            :host([disabled]) {\r\n                opacity: 0.38;\r\n                pointer-events: none;\r\n            }\r\n            \r\n            :host(:focus-within) {\r\n                background-color: var(--focused-item-color);\r\n            }\r\n\r\n            :host(:focus-visible) {\r\n                outline: none;\r\n            }\r\n            \r\n            :host(:is([type=\"menu\"], [type=\"submenu\"])) ::slotted([slot=\"menu\"]) {\r\n                z-index: 1;\r\n                position: absolute;\r\n            }\r\n            \r\n            :host(:is([type=\"menu\"], [type=\"submenu\"]):not([expanded])) ::slotted([slot=\"menu\"]) {\r\n                opacity: 0;\r\n                pointer-events: none;\r\n            }\r\n            \r\n            :host([type=\"submenu\"]) [part=\"icon\"] {\r\n                visibility: hidden;\r\n            }\r\n            \r\n            :host([type=\"menu\"]) [part=\"icon\"],\r\n            :host(:not([type=\"submenu\"])) [part=\"arrow\"] {\r\n                display: none;\r\n            }\r\n            \r\n            :host(:is([type=\"checkbox\"], [type=\"radio\"])[checked]) {\r\n                --icon-color: black;\r\n                --icon-image: url(\"/assets/done_FILL0_wght400_GRAD0_opsz48.svg\");\r\n            }\r\n            \r\n            :host([type=\"submenu\"]) {\r\n                --arrow-color: black;\r\n                --arrow-image: url(\"/assets/arrow_right_FILL0_wght400_GRAD0_opsz48.svg\");\r\n            }\r\n            \r\n            [part=\"icon\"],\r\n            [part=\"label\"],\r\n            [part=\"arrow\"] {\r\n                pointer-events: none;\r\n            }\r\n            \r\n            [part=\"icon\"] {\r\n                flex: none;\r\n                display: inline-block;\r\n                width: 18px;\r\n                height: 18px;\r\n                padding: 2px;\r\n                overflow: hidden;\r\n                margin-right: 4px;\r\n            }\r\n            \r\n            [part=\"label\"] {\r\n                flex: auto;\r\n                line-height: 18px;\r\n                padding: 2px;\r\n                margin-left: 8px;\r\n                margin-right: 8px;\r\n            }\r\n            \r\n            :host(:is(:not([type]), [type=\"button\"], [type=\"radio\"], [type=\"checkbox\"])[checked]) [part=\"icon\"] {\r\n                background-color: var(--activated-item-color);\r\n            }\r\n            \r\n            :host(:is(:not([type]), [type=\"button\"], [type=\"radio\"], [type=\"checkbox\"])) [part=\"icon\"]::before {\r\n                display: inline-block;\r\n                width: 18px;\r\n                height: 18px;\r\n                content: \"\";\r\n                mask-size: 18px 18px;\r\n                -webkit-mask-size: 18px 18px;\r\n                background-color: var(--icon-color, none);\r\n                -webkit-mask-image: var(--icon-image, none);\r\n                mask-image: var(--icon-image, none);\r\n                filter: var(--icon-filter, none);\r\n            }\r\n            \r\n            [part=\"arrow\"] {\r\n                flex: none;\r\n                display: inline-block;\r\n                width: 18px;\r\n                height: 18px;\r\n                margin: 1px 4px 1px 1px;\r\n            }\r\n            \r\n            [part=\"arrow\"]::after {\r\n                display: inline-block;\r\n                width: 18px;\r\n                height: 18px;\r\n                margin: 1px;\r\n                content: \"\";\r\n                mask-size: 18px 18px;\r\n                -webkit-mask-size: 18px 18px;\r\n                background-color: var(--arrow-color, none);\r\n                -webkit-mask-image: var(--arrow-image, none);\r\n                mask-image: var(--arrow-image, none);\r\n                filter: var(--arrow-filter, none);\r\n            }\r\n\r\n            :host(:hover):host-context(e-menubar:focus),\r\n            :host(:hover):host-context(e-menubar:not(:focus-within)) {\r\n                background-color: var(--hovered-item-color);\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const internals = this.attachInternals();\r\n        this.internals = internals;\r\n        internals.role = \"menuitem\";\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    attributeChangedCallback(attributeName: string, oldValue: string | null, newValue: string | null): void {\r\n        const {internals} = this;\r\n        switch (attributeName) {\r\n            case \"type\": {\r\n                switch (newValue) {\r\n                    case \"checkbox\":\r\n                    case \"radio\": {\r\n                        internals.role = `menuitem${newValue}`;\r\n                        break;\r\n                    }\r\n                    default: {\r\n                        internals.role = \"menuitem\";\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"checked\": {\r\n                internals.ariaChecked = String(newValue !== null);\r\n                break;\r\n            }\r\n            case \"disabled\": {\r\n                internals.ariaDisabled = String(newValue !== null);\r\n                break;\r\n            }\r\n            case \"expanded\": {\r\n                internals.ariaExpanded = String(newValue !== null);\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                internals.ariaLabel = newValue;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                const expand = force ?? !expanded;\r\n                this.expanded = expand;\r\n                if (expand) {\r\n                    this.#positionMenu();\r\n                }\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (!expanded) {\r\n                    this.expanded = true;\r\n                    this.#positionMenu();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (expanded) {\r\n                    this.expanded = false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            let {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const {type} = this;\r\n            if (type === \"menu\") {\r\n                const offsetParent = <HTMLElement>(menu.offsetParent ?? document.body);\r\n                const {offsetLeft, offsetTop} = offsetParent;\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                itemLeft -= offsetLeft;\r\n                itemRight -= offsetLeft;\r\n                itemTop -= offsetTop;\r\n                itemBottom -= offsetTop;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    itemRight - menuWidth :\r\n                    itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    itemTop - menuHeight  :\r\n                    itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                const closestMenu = this.closest(\"e-menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    itemLeft -= closestMenuLeft;\r\n                    itemRight -= closestMenuLeft;\r\n                    itemTop -= closestMenuTop;\r\n                    itemBottom -= closestMenuTop;\r\n                }\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    itemLeft - menuWidth :\r\n                    itemRight\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    itemBottom - menuHeight :\r\n                    itemTop\r\n                }px`);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemElement: HTMLEMenuItemElementConstructor = HTMLEMenuItemElementBase;\r\n\r\ninterface EMenuItemConstructor {\r\n    prototype: HTMLEMenuItemElement;\r\n    new(init: {\r\n        name?: string;\r\n        label: string;\r\n        type?: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    button(init: {\r\n        name?: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    checkbox(init: {\r\n        name?: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    radio(init: {\r\n        name?: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    menu(init: {\r\n        name?: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    submenu(init: {\r\n        name?: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n}\r\n\r\nvar EMenuItem = <EMenuItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string;\r\n        label: string;\r\n        type?: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menu} = init;\r\n        if (menu) {\r\n            menu.slot = \"menu\";\r\n        }\r\n        return element(\"e-menuitem\", {\r\n            attributes: {\r\n                tabindex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type\r\n            },\r\n            children: menu ? [\r\n                label,\r\n                menu\r\n            ] : [\r\n                label\r\n            ],\r\n            listeners: {\r\n                click: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemElement.prototype,\r\n        button(init: {\r\n            name?: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name?: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name?: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menu(init: {\r\n            name?: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"menu\"\r\n            });\r\n        },\r\n        submenu(init: {\r\n            name?: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"submenu\"\r\n            });\r\n        }\r\n    }\r\n);","import { element, CustomElement, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuItemElement, EMenuItem } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuItemGroupElement };\r\nexport { EMenuItemGroup };\r\n\r\ninterface HTMLEMenuItemGroupElementConstructor {\r\n    prototype: HTMLEMenuItemGroupElement;\r\n    new(): HTMLEMenuItemGroupElement;\r\n}\r\n\r\ninterface HTMLEMenuItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    label: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitemgroup\": HTMLEMenuItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitemgroup\"\r\n})\r\nclass HTMLEMenuItemGroupElementBase extends HTMLElement implements HTMLEMenuItemGroupElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"label\"\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: flex;\r\n                flex-direction: column;\r\n            }\r\n            \r\n            [part=\"label\"] {\r\n                font-weight: bold;\r\n            }\r\n            \r\n            :host([label]) [part=\"label\"] {\r\n                padding-bottom: 6px;\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        const internals = this.attachInternals();\r\n        internals.role = \"group\";\r\n        this.internals = internals;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        const {internals} = this;\r\n        switch (name) {\r\n            case \"label\":\r\n                internals.ariaLabel = newValue;\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemGroupElement: HTMLEMenuItemGroupElementConstructor = HTMLEMenuItemGroupElementBase;\r\n\r\ninterface EMenuItemGroupConstructor {\r\n    prototype: HTMLEMenuItemGroupElement;\r\n    new(init: {\r\n        name?: string;\r\n        items: HTMLEMenuItemElement[];\r\n    }): HTMLEMenuItemGroupElement;\r\n    radios(init: {name: string, items: {label: string, value: string}[]}): HTMLEMenuItemGroupElement;\r\n}\r\n\r\nvar EMenuItemGroup = <EMenuItemGroupConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string,\r\n        items: HTMLEMenuItemElement[]\r\n    }) {\r\n        const {name, items} = init;\r\n        return element(\"e-menuitemgroup\", {\r\n            attributes: {\r\n                name: name\r\n            },\r\n            children: items\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemGroupElement.prototype,\r\n        radios: (init: {\r\n            name: string,\r\n            items: {\r\n                label: string,\r\n                value: string\r\n            }[]\r\n        }) => {\r\n            const {name, items} = init;\r\n            return element(\"e-menuitemgroup\", {\r\n                attributes: {\r\n                    name: name\r\n                },\r\n                children: items.map(\r\n                    ({label, value}) => new EMenuItem({name, label, type: \"radio\", value})\r\n                )\r\n            });\r\n        }\r\n    }\r\n);","export { ModelChangeRecord };\r\nexport { ModelEvent };\r\nexport { ModelNode };\r\nexport { ModelObject };\r\nexport { ModelProperty };\r\nexport { ModelList };\r\nexport { ModelChangeObserverOptions };\r\nexport { ModelChangeObserver };\r\n\r\ninterface ModelChangeRecordConstructor {\r\n    prototype: ModelChangeRecord;\r\n    new(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ): ModelChangeRecord;\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\ninterface ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly changeType: number;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\nclass ModelChangeRecordBase implements ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList;\r\n    readonly changeType: number;\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n\r\n    constructor(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ) {\r\n        this.target = init.target;\r\n        this.changeType = init.changeType;\r\n        this.propertyName = init.propertyName ?? null;\r\n        this.oldValue = init.oldValue ?? undefined;\r\n        this.newValue = init.newValue ?? undefined;\r\n        this.removedIndex = init.removedIndex ?? 0;\r\n        this.removedItems = new ModelNodesList(init.removedItems ?? []);\r\n        this.insertedIndex = init.insertedIndex ?? 0;\r\n        this.insertedItems = new ModelNodesList(init.insertedItems ?? []);\r\n        this.sortedIndices = init.sortedIndices ?? [];\r\n    }\r\n\r\n    static get PROPERTY_CHANGE(): number {\r\n        return 1;\r\n    }\r\n\r\n    static get LIST_REMOVE(): number {\r\n        return 2;\r\n    }\r\n\r\n    static get LIST_INSERT(): number {\r\n        return 3;\r\n    }\r\n\r\n    static get LIST_SORT(): number {\r\n        return 4;\r\n    }\r\n\r\n    get PROPERTY_CHANGE(): number {\r\n        return ModelChangeRecordBase.PROPERTY_CHANGE;\r\n    }\r\n\r\n    get LIST_REMOVE(): number {\r\n        return ModelChangeRecordBase.LIST_REMOVE;\r\n    }\r\n\r\n    get LIST_INSERT(): number {\r\n        return ModelChangeRecordBase.LIST_INSERT;\r\n    }\r\n\r\n    get LIST_SORT(): number {\r\n        return ModelChangeRecordBase.LIST_SORT;\r\n    }\r\n}\r\n\r\nvar ModelChangeRecord: ModelChangeRecordConstructor = ModelChangeRecordBase;\r\n\r\ninterface ModelNodesListConstructor {\r\n    prototype: ModelNodesList;\r\n    new(items: any[]): ModelNodesList;\r\n}\r\n\r\ninterface ModelNodesList {\r\n    get length(): number;\r\n    item(index: number): ModelNode | null;\r\n    values(): IterableIterator<ModelNode>;\r\n}\r\n\r\nclass ModelNodesListBase implements ModelNodesList {\r\n    #items: ModelNode[];\r\n\r\n    constructor(items: ModelNode[]) {\r\n        this.#items = items.slice();\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    item(index: number): ModelNode | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    values(): IterableIterator<ModelNode> {\r\n        return this.#items.values();\r\n    }\r\n}\r\n\r\nvar ModelNodesList: ModelNodesListConstructor = ModelNodesListBase;\r\n\r\ninterface ModelEventConstructor {\r\n    prototype: ModelEvent;\r\n    new(type: string): ModelEvent;\r\n}\r\n\r\ninterface ModelEvent {\r\n    readonly type: string;\r\n    readonly currentTarget: ModelEventTarget | null;\r\n    readonly target: ModelEventTarget | null;\r\n}\r\n\r\nclass ModelEventBase implements ModelEvent {\r\n    readonly type: string;\r\n\r\n    #currentTarget: ModelEventTarget | null;\r\n    #target: ModelEventTarget | null;\r\n\r\n    constructor(type: string) {\r\n        this.type = type;\r\n        this.#currentTarget = null;\r\n        this.#target = null;\r\n    }\r\n\r\n    get currentTarget(): ModelEventTarget | null {\r\n        return this.#currentTarget;\r\n    }\r\n\r\n    get target(): ModelEventTarget | null {\r\n        return this.#target;\r\n    }\r\n\r\n    static ModelEventTargetAccessor? = new class ModelEventTargetAccessor {\r\n        setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#currentTarget = currentTarget;\r\n            }\r\n        }\r\n\r\n        setTarget(event: ModelEvent, target: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#target = target;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface ModelEventTargetAccessor {\r\n    setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void;\r\n    setTarget(event: ModelEvent, target: ModelEventTarget): void;\r\n}\r\n\r\nvar ModelEventTargetAccessor: ModelEventTargetAccessor = ModelEventBase.ModelEventTargetAccessor!;\r\ndelete ModelEventBase.ModelEventTargetAccessor;\r\n\r\nvar ModelEvent: ModelEventConstructor = ModelEventBase;\r\n\r\ninterface ModelEventTargetConstructor {\r\n    prototype: ModelEventTarget;\r\n    new(): ModelEventTarget;\r\n}\r\n\r\ninterface ModelEventTarget {\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    dispatchEvent(event: ModelEvent): void;\r\n    receiveEvent(event: ModelEvent): void;\r\n}\r\n\r\nclass ModelEventTargetBase implements ModelEventTarget {\r\n    #callbacks: Map<string, ((event: ModelEvent) => void)[]>;\r\n\r\n    constructor() {\r\n        this.#callbacks = new Map();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        const {type} = event;\r\n        const callbacks = this.#callbacks.get(type);\r\n        ModelEventTargetAccessor.setCurrentTarget(event, this);\r\n        if (callbacks) {\r\n            callbacks.forEach((callback_i) => {\r\n                callback_i(event);\r\n            });\r\n        }\r\n    }\r\n\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            callbacks.push(callback);\r\n        }\r\n        else {\r\n            this.#callbacks.set(type, [callback]);\r\n        }\r\n    }\r\n\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            const callbackIndex = callbacks.findIndex(\r\n                callback_i => callback_i == callback\r\n            );\r\n            if (callbackIndex > -1) {\r\n                callbacks.splice(callbackIndex, 1);\r\n            }\r\n            if (callbacks.length == 0) {\r\n                this.#callbacks.delete(type);\r\n            }\r\n        }\r\n    }\r\n\r\n    dispatchEvent(event: ModelEvent): void {\r\n        ModelEventTargetAccessor.setTarget(event, this);\r\n        this.receiveEvent(event);\r\n    }\r\n}\r\n\r\nvar ModelEventTarget: ModelEventTargetConstructor = ModelEventTargetBase;\r\n\r\ninterface ModelNodeConstructor {\r\n    prototype: ModelNode;\r\n    new(): ModelNode;\r\n}\r\n\r\ninterface ModelNode extends ModelEventTarget {\r\n    readonly parentNode: ModelNode | null;\r\n    setParent(parentNode: ModelNode | null): void;\r\n    getRecords(): ModelChangeRecord[];\r\n    beginChanges(): void;\r\n    endChanges(): void;\r\n}\r\n\r\ninterface ModelNodeRecordsAccessor {\r\n    triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void;\r\n    handleRecord(node: ModelNode, record: ModelChangeRecord): void;\r\n}\r\n\r\nclass ModelNodeBase extends ModelEventTargetBase implements ModelNode {\r\n    #parentNode: ModelNode | null;\r\n    #records: ModelChangeRecord[];\r\n    #isRecording: boolean;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#parentNode = null;\r\n        this.#records = [];\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    get parentNode(): ModelNode | null {\r\n        return this.#parentNode;\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        if (parentNode !== null) {\r\n            let isCyclicReference = parentNode == this;\r\n            let {parentNode: ancestorNode} = parentNode;\r\n            while (!isCyclicReference && ancestorNode !== null) {\r\n                ({parentNode: ancestorNode} = ancestorNode);\r\n                isCyclicReference = ancestorNode == this;\r\n            }\r\n            if (!isCyclicReference) {\r\n                this.#parentNode = parentNode;\r\n            }\r\n            else {\r\n                throw new TypeError(\"Failed to set parent on ModelNode: circular reference detected in the hierarchy.\");\r\n            }\r\n        }\r\n        else {\r\n            this.#parentNode = null;\r\n        }\r\n    }\r\n    \r\n    beginChanges(): void {\r\n        this.#isRecording = true;\r\n    }\r\n\r\n    endChanges(): void {\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        this.#records.splice(0);\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    getRecords(): ModelChangeRecord[] {\r\n        return this.#records.slice();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        super.receiveEvent(event);\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            parentNode.receiveEvent(event);\r\n        }\r\n    }\r\n\r\n    #triggerChange(property: string, oldValue: any, newValue: any): void {\r\n        const records = this.#records;\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.PROPERTY_CHANGE,\r\n            propertyName: property,\r\n            oldValue, newValue\r\n        });\r\n        records.push(record);\r\n        if (!this.#isRecording) {\r\n            this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n            records.splice(0);\r\n        }\r\n    }\r\n\r\n    #handleRecord(record: ModelChangeRecord): void {\r\n        this.#records.push(record);\r\n        if (!this.#isRecording) {\r\n            this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n            this.#records.splice(0);\r\n        }\r\n    }\r\n\r\n    static ModelNodeRecordsAccessor? = new class ModelNodeRecordsAccessor {\r\n        triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#triggerChange(property, oldValue, newValue);\r\n            }\r\n        }\r\n\r\n        handleRecord(node: ModelNode, record: ModelChangeRecord): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#handleRecord(record);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelNodeRecordsAccessor: ModelNodeRecordsAccessor = ModelNodeBase.ModelNodeRecordsAccessor!;\r\ndelete ModelNodeBase.ModelNodeRecordsAccessor;\r\n\r\nvar ModelNode: ModelNodeConstructor = ModelNodeBase;\r\n\r\ninterface ModelPropertyDecorator {\r\n    (): <Model extends ModelObject>(target: Model, property: string) => void;\r\n}\r\n\r\nconst ModelProperty: ModelPropertyDecorator = function() {\r\n    return (\r\n        target: ModelObject, property: string\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const setter = function(this: ModelObject, value: any) {\r\n            const oldValue = ModelObjectPropertiesAccessor.getProperty(this, property);\r\n            ModelObjectPropertiesAccessor.setProperty(this, property, value);\r\n            if (value !== oldValue) {\r\n                ModelNodeRecordsAccessor.triggerChange(this, property, oldValue, value);\r\n            }\r\n            return true;\r\n        };\r\n        const getter = function(this: ModelObject) {\r\n            return ModelObjectPropertiesAccessor.getProperty(this, property);\r\n        };\r\n        Object.defineProperty(prototype, property, {\r\n            set: setter,\r\n            get: getter,\r\n            enumerable: true\r\n        });\r\n    }\r\n}\r\n\r\ninterface ModelObjectConstructor {\r\n    prototype: ModelObject;\r\n    new(): ModelObject;\r\n}\r\n\r\ninterface ModelObject extends ModelNode {}\r\n\r\ninterface ModelObjectPropertiesAccessor {\r\n    setProperty(node: ModelNode, property: string, value: any): void;\r\n    getProperty(node: ModelNode, property: string,): any;\r\n}\r\n\r\nclass ModelObjectBase extends ModelNodeBase implements ModelObject {\r\n    #properties: Map<string, any>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#properties = new Map();\r\n    }\r\n\r\n    static ModelObjectPropertiesAccessor? = new class ModelPropertiesAccessor {\r\n        setProperty(node: ModelObject, property: string, value: any): void {\r\n            if (node instanceof ModelObjectBase) {\r\n                node.#properties.set(property, value);\r\n            }\r\n        }\r\n\r\n        getProperty(node: ModelObject, property: string): any {\r\n            if (node instanceof ModelObjectBase) {\r\n                return node.#properties.get(property);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelObjectPropertiesAccessor: ModelObjectPropertiesAccessor = ModelObjectBase.ModelObjectPropertiesAccessor!;\r\ndelete ModelObjectBase.ModelObjectPropertiesAccessor;\r\n\r\nvar ModelObject: ModelObjectConstructor = ModelObjectBase;\r\n\r\ninterface ModelListConstructor {\r\n    prototype: ModelList;\r\n    new<Model extends ModelNode>(): ModelList<Model>;\r\n    new<Model extends ModelNode>(items: Model[]): ModelList<Model>;\r\n}\r\n\r\ninterface ModelList<Model extends ModelNode = ModelNode> extends ModelNode {\r\n    readonly parentNode: ModelNode | null;\r\n    readonly length: number;\r\n    index(item: Model): number;\r\n    get(index: number): Model | null;\r\n    values(): IterableIterator<Model>;\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void;\r\n    insert(index: number, ...items: Model[]): void;\r\n    prepend(...items: Model[]): void;\r\n    append(...items: Model[]): void;\r\n    remove(item: Model): void;\r\n    clear(): void;\r\n}\r\n\r\nclass ModelListBase<Model extends ModelNode = ModelNode> extends ModelNodeBase implements ModelList<Model> {\r\n    #items: Model[];\r\n\r\n    constructor()\r\n    constructor(items: Model[])\r\n    constructor(items?: Model[]) {\r\n        super();\r\n        this.#items = items?.slice() ?? [];\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        super.setParent(parentNode);\r\n        this.#items.forEach((item_i) => {\r\n            item_i.setParent(parentNode);\r\n        });\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    get(index: number): Model | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    index(item: Model): number {\r\n        return this.#items.indexOf(item);\r\n    }\r\n\r\n    values(): IterableIterator<Model> {\r\n        return this.#items.values();\r\n    }\r\n\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void {\r\n        const items = this.#items;\r\n        const indexedItems = items.map(\r\n            (item_i, i) => {\r\n                return {\r\n                    item: item_i,\r\n                    index: i\r\n                };\r\n            }\r\n        );\r\n        indexedItems.sort(\r\n            (indexedItem_a, indexedItem_b) => {\r\n                return compareFunction(\r\n                    indexedItem_a.item, indexedItem_b.item\r\n                )\r\n            }\r\n        );\r\n        this.#items = indexedItems.map(indexedItem_i => indexedItem_i.item);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_SORT,\r\n            sortedIndices: indexedItems.map(indexedItem_i => indexedItem_i.index)\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    prepend(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.splice(0, 0, ...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: 0,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    append(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.push(...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: length,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    insert(index: number, ...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const positiveIndex = Math.abs(index);\r\n        if (positiveIndex <= length) {\r\n            if (index >= 0) {\r\n                const {parentNode} = this;\r\n                items.forEach(item_i => {\r\n                    item_i.setParent(parentNode);\r\n                });\r\n                if (index < length) {\r\n                    _items.splice(index, 0, ...items);\r\n                }\r\n                else {\r\n                    _items.push(...items);\r\n                }\r\n            }\r\n            else if (index < 0) {\r\n                index = length - index;\r\n                const {parentNode} = this;\r\n                if (parentNode) {\r\n                    items.forEach(item_i => {\r\n                        item_i.setParent(parentNode);\r\n                    });\r\n                }\r\n                _items.splice(index, 0, ...items);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_INSERT,\r\n                insertedIndex: index,\r\n                insertedItems: items.slice()\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    remove(item: Model): void {\r\n        const _items = this.#items;\r\n        const index = _items.indexOf(item);\r\n        if (index > -1) {\r\n            const item = _items.splice(index, 1)[0];\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                item.setParent(null);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: index,\r\n                removedItems: [item]\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    clear(): void {\r\n        const items = this.#items;\r\n        const {length} = items;\r\n        if (length > 0) {\r\n            const removedItems = items.splice(0);\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                removedItems.forEach((removedItem_i) => {\r\n                    removedItem_i.setParent(null);\r\n                });\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: 0,\r\n                removedItems: removedItems\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n};\r\n\r\nvar ModelList: ModelListConstructor = ModelListBase!;\r\n\r\ninterface ModelChangeObserverConstructor {\r\n    prototype: ModelChangeObserver;\r\n    new(callback: (records: ModelChangeRecord[]) => void): ModelChangeObserver;\r\n}\r\n\r\ninterface ModelChangeObserver {\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void;\r\n    unobserve(node: ModelNode): void;\r\n    disconnect(): void;\r\n}\r\n\r\ntype ModelChangeObserverOptions = {\r\n    properties?: boolean;\r\n    propertiesFilter?: string[];\r\n    childList?: boolean;\r\n    subtree?: boolean;\r\n}\r\n\r\nclass ModelChangeObserverBase implements ModelChangeObserver {\r\n    #callback: (records: ModelChangeRecord[]) => void;\r\n    #records: ModelChangeRecord[];\r\n    #disconnected: boolean;\r\n\r\n    #references: WeakMap<ModelNode, {\r\n        listener: (event: ModelEvent) => void,\r\n        options: ModelChangeObserverOptions\r\n    }>;\r\n\r\n    constructor(callback: (records: ModelChangeRecord[]) => void) {\r\n        this.#callback = callback;\r\n        this.#records = [];\r\n        this.#disconnected = false;\r\n        this.#references = new WeakMap();\r\n    }\r\n\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void {\r\n        this.#disconnected = false;\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (!reference) {\r\n            const listener = this.#handleModelEvent.bind(this);\r\n            node.addEventListener(\"modelchange\", listener);\r\n            reference = {listener, options};\r\n            references.set(node, reference);\r\n        }\r\n        else {\r\n            references.set(node, reference);\r\n        }\r\n    }\r\n\r\n    unobserve(node: ModelNode): void {\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (reference) {\r\n            const {listener} = reference;\r\n            node.removeEventListener(\"modelchange\", listener);\r\n        }\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#records.splice(0);\r\n        this.#disconnected = true;\r\n    }\r\n\r\n    #trigger(): void {\r\n        const records = this.#records.splice(0);\r\n        if (records.length > 0) {\r\n            this.#callback(records);\r\n        }\r\n    }\r\n\r\n    #handleModelEvent(event: ModelEvent): void {\r\n        if (!this.#disconnected) {\r\n            const {target, currentTarget} = event;\r\n            const reference = this.#references.get(<ModelNode>currentTarget);\r\n            if (reference) {\r\n                const {options} = reference;\r\n                const {properties, propertiesFilter, childList, subtree} = options;\r\n                if (subtree) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n                else if (target == currentTarget) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelChangeObserver: ModelChangeObserverConstructor = ModelChangeObserverBase;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuBarElement };\r\n\r\ninterface HTMLEMenuBarElementConstructor {\r\n    prototype: HTMLEMenuBarElement;\r\n    new(): HTMLEMenuBarElement;\r\n}\r\n\r\ninterface HTMLEMenuBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    items(): HTMLEMenuItemElement[];\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    expanded: boolean;\r\n    connectedCallback(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menubar\": HTMLEMenuBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-menubar\"\r\n})\r\nclass HTMLEMenuBarElementBase extends HTMLElement implements HTMLEMenuBarElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    #activeIndex: number;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: flex;\r\n                flex-direction: row;\r\n                width: max-content;\r\n            }\r\n            \r\n            :host(:focus) {\r\n                outline: 1px solid var(--focused-item-outline-color);\r\n                outline-offset: -1px;\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const tabindex = this.getAttribute(\"tabindex\");\r\n        this.tabIndex = tabindex !== null ? parseInt(tabindex) : -1;\r\n    }\r\n\r\n    items(): HTMLEMenuItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        ));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        const {activeIndex} = this;\r\n        return this.querySelector<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem:focus-within\"\r\n        ) ?? activeIndex > -1 ? this.items()[activeIndex] ?? null : null;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement && !(node.disabled || node.hidden)) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLEMenuItemElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        const {activeItem, expanded} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.collapse();\r\n        }\r\n        if (item !== null) {\r\n            if (expanded) {\r\n                item.expand();\r\n            }\r\n            this.#activeIndex = this.items().indexOf(item);\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    get #items(): HTMLEMenuItemElement[] {\r\n        return Array.from(\r\n            this.querySelectorAll(\":is(:scope, :scope > e-menuitemgroup) > e-menuitem\")\r\n        );\r\n    }\r\n\r\n    #isClosestMenu(target: Element): boolean {\r\n        return target.closest(\":is(e-menubar, e-menu)\") == this;\r\n    }\r\n\r\n    #nearestItem(target: Element): HTMLEMenuItemElement | null {\r\n        return this.#items.find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n    \r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (!this.contains(<Node | null>relatedTarget)) {\r\n            (activeItem ?? this.firstItem())?.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof Element) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            this.#setActiveItem(nearestItem);\r\n            this.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, relatedTarget} = event;\r\n        if (target instanceof HTMLElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem) {\r\n                nearestItem.collapse();\r\n            }\r\n        }\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.expanded = false;\r\n            this.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {expanded, activeItem} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu && target !== activeItem && expanded) {\r\n                const {menu} = target;\r\n                if (menu) {\r\n                    target.expand();\r\n                    menu.focus({preventScroll: true});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {expanded, activeItem} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu) {\r\n                const isExpanded = !expanded;\r\n                this.expanded = isExpanded;\r\n                if (isExpanded) {\r\n                    if (activeItem && !activeItem.expanded) {\r\n                        activeItem.expand();\r\n                    }\r\n                    const {menu} = target;\r\n                    menu?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    if (activeItem) {\r\n                        activeItem.collapse();\r\n                        activeItem.blur();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded} = this;\r\n        let {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.firstItem() : \r\n                    this.#lastItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    this.expanded = !expanded;\r\n                    if (!expanded) {\r\n                        const firstChildItem = this.#firstChildItem(activeItem);\r\n                        firstChildItem?.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.expanded = false;\r\n                    if (activeItem) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuBarElement: HTMLEMenuBarElementConstructor = HTMLEMenuBarElementBase;"],"names":["AttributeProperty","init","target","property","constructor","prototype","propertyName","String","defaultValue","observed","name","observedAttributes","Reflect","get","Array","isArray","push","Object","defineProperty","value","writable","type","Boolean","this","hasAttribute","set","setAttribute","removeAttribute","val","getAttribute","JSON","parse","stringify","Number","parseFloat","CustomElement","elementCtor","options","customElements","define","QueryProperty","propertyKey","selector","getter","withinShadowRoot","shadowRoot","querySelector","element","tagName","attributes","dataset","children","listeners","document","createElement","entries","forEach","attributeName","attributeValue","undefined","toggleAttribute","elementDataset","keys","datasetEntry_i","append","from","name_i","listener_i","addEventListener","reactiveElementsMap","WeakMap","FinalizationRegistry","heldValue","model","reactiveElement","reactiveElementsMapEntry","reactiveElementsArray","splice","indexOf","records","record_i","oldValue","newValue","reactiveElement_i","elementRef","react","properties","deref","includes","reactiveChildElementsMap","list","reactiveChildElement","reactiveChildrenElementsMapEntry","reactiveChildElementsArray","range","values","length","listLength","reactiveChildElements_i","parentRef","mapping","placeholder","parent","firstChild","childrenCount","removeChild","changeType","LIST_INSERT","LIST_REMOVE","LIST_SORT","insertedIndex","insertedItems","insertedItemsArray","map","before","removedIndex","removedItems","removedCount","createRange","removeEndIndex","setStartBefore","setEndAfter","deleteContents","sortedIndices","childrenArray","filter","index_i","camelToTrain","str","replace","toLowerCase","shadowTemplate","style","HTMLEMenuItemElementBase","HTMLElement","super","internals","attachInternals","role","attachShadow","mode","adoptedStylesheet","CSSStyleSheet","adoptedStyleSheets","content","cloneNode","connectedCallback","tabIndex","attributeChangedCallback","ariaChecked","ariaDisabled","ariaExpanded","ariaLabel","toggle","force","expanded","expand","dispatchEvent","Event","bubbles","collapse","menu","menuStyle","top","itemTop","bottom","itemBottom","left","itemLeft","right","itemRight","getBoundingClientRect","width","menuWidth","height","menuHeight","clientWidth","clientHeight","body","offsetParent","offsetLeft","offsetTop","overflowX","overflowY","setProperty","closestMenu","closest","closestMenuTop","closestMenuLeft","part","HTMLEMenuItemElement","EMenuItem","assign","label","trigger","slot","tabindex","title","click","button","checkbox","radio","submenu","HTMLEMenuItemGroupElementBase","HTMLEMenuItemGroupElement","items","radios","ModelChangeRecordBase","ModelNodesList","PROPERTY_CHANGE","ModelChangeRecord","slice","item","index","ModelEventBase","currentTarget","ModelEventTargetAccessor","setCurrentTarget","event","setTarget","ModelEvent","ModelEventTargetBase","Map","receiveEvent","callbacks","callback_i","callback","removeEventListener","callbackIndex","findIndex","delete","ModelNodeBase","parentNode","setParent","isCyclicReference","ancestorNode","TypeError","beginChanges","endChanges","getRecords","record","ModelNodeRecordsAccessor","triggerChange","node","handleRecord","ModelNode","ModelObjectBase","ModelObjectPropertiesAccessor","getProperty","ModelList","item_i","sort","compareFunction","indexedItems","i","indexedItem_a","indexedItem_b","indexedItem_i","prepend","_items","insert","Math","abs","remove","clear","removedItem_i","reference","propertiesFilter","childList","subtree","ModelChangeObserver","observe","references","listener","bind","unobserve","disconnect","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","d","definition","key","o","enumerable","obj","prop","hasOwnProperty","call","HTMLEMenuBarElementBase","createTreeWalker","NodeFilter","SHOW_ELEMENT","parseInt","querySelectorAll","activeIndex","activeItem","firstItem","walker","currentNode","root","disabled","hidden","FILTER_ACCEPT","FILTER_SKIP","FILTER_REJECT","lastChild","previousSibling","nextSibling","find","contains","relatedTarget","focus","Element","nearestItem","preventScroll","isExpanded","blur","stopPropagation"],"sourceRoot":""}