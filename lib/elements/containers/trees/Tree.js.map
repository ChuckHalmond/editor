{"version":3,"file":"elements/containers/trees/Tree.js","mappings":"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","sources":["webpack://editor/webpack/runtime/create fake namespace object","webpack://editor/./src/elements/Element.ts","webpack://editor/./src/elements/Snippets.ts","webpack://editor/./src/elements/containers/trees/TreeItem.ts","webpack://editor/./src/elements/containers/trees/TreeItemGroup.ts","webpack://editor/./src/models/Model.ts","webpack://editor/./src/stylesheets/Theme.ts","webpack://editor/webpack/bootstrap","webpack://editor/webpack/runtime/define property getters","webpack://editor/webpack/runtime/hasOwnProperty shorthand","webpack://editor/webpack/runtime/make namespace object","webpack://editor/./src/elements/containers/trees/Tree.ts"],"sourcesContent":["var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","import { ModelList, ModelNode, ModelChangeRecord, ModelChangeObserver, ModelChangeObserverOptions } from \"../models/Model\";\r\nimport { camelToTrain } from \"./Snippets\";\r\n\r\nexport { CustomElement };\r\nexport { ReactiveChildElements };\r\nexport { QueryProperty };\r\nexport { QueryAllProperty };\r\nexport { AttributeProperty };\r\nexport { reactiveElement };\r\nexport { revokeReactiveElement };\r\nexport { reactiveChildElements };\r\nexport { revokeReactiveChildElements };\r\nexport { element };\r\nexport { fragment };\r\nexport { textNode };\r\nexport { AttributeMutationMixin };\r\nexport { AttributeType };\r\nexport { areAttributesMatching };\r\nexport { AttributeMutationMixinBase };\r\nexport { trimMultilineIndent };\r\nexport { Stylesheet };\r\n\r\nexport { reactiveElementsMap };\r\n\r\ninterface AttributePropertyDecorator {\r\n    (\r\n        init: {\r\n            type: typeof String;\r\n            observed?: boolean;\r\n            defaultValue?: string | null;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Number;\r\n            observed?: boolean;\r\n            defaultValue?: number | null;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Boolean;\r\n            observed?: boolean;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Object;\r\n            observed?: boolean;\r\n            defaultValue?: any | null;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n}\r\n\r\nconst AttributeProperty: AttributePropertyDecorator = function(\r\n    init: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Object;\r\n        observed?: boolean;\r\n        defaultValue?: string | number | any | null;\r\n        name?: string;\r\n    }\r\n) {\r\n    return <E extends HTMLElement>(\r\n        target: E, property: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(property);\r\n        const {defaultValue = null, observed = false, name = camelToTrain(propertyName)} = init;\r\n        if (observed) {\r\n            const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n            if (Array.isArray(observedAttributes)) {\r\n                observedAttributes.push(name);\r\n            }\r\n            else {\r\n                Object.defineProperty(\r\n                    constructor, \"observedAttributes\", {\r\n                        value: [name],\r\n                        writable: false\r\n                    }\r\n                );\r\n            }\r\n        }\r\n        const {type} = init;\r\n        switch (type) {\r\n            case Boolean: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        return this.hasAttribute(name);\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value) {\r\n                            this.setAttribute(name, \"\");\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Object: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(name);\r\n                        return (val !== null) ? JSON.parse(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(name, JSON.stringify(value));\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Number: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(name);\r\n                        return (val !== null) ? parseFloat(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(name, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case String:\r\n            default: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(name);\r\n                        return (val !== null) ? val : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(name, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n    \r\nfunction Stylesheet(text: string): CSSStyleSheet {\r\n    const stylesheet = new CSSStyleSheet();\r\n    (stylesheet as any).replaceSync(text);\r\n    return stylesheet;\r\n}\r\n\r\nfunction trimMultilineIndent(text: string): string {\r\n    const newlineIndex = text.indexOf(\"\\n\");\r\n    text = text.substring(newlineIndex + 1);\r\n    const indentMatch = text.match(/^[\\s]*/);\r\n    if (indentMatch) {\r\n        const indent = text.substring(0, indentMatch[0].length);\r\n        text = text.replaceAll(indent, \"\").trimEnd();\r\n    }\r\n    return text;\r\n}\r\n\r\ninterface CustomElementDecorator {\r\n    (init: {\r\n        name: string;\r\n        options?: ElementDefinitionOptions\r\n    }): <C extends CustomElementConstructor>(elementCtor: C) => C;\r\n}\r\n\r\nconst CustomElement: CustomElementDecorator = function(init: {\r\n    name: string;\r\n    options?: ElementDefinitionOptions\r\n}) {\r\n    return <C extends CustomElementConstructor>(\r\n        elementCtor: C\r\n    ) => {\r\n        const {name, options} = init;\r\n        if (!customElements.get(name)) {\r\n            customElements.define(\r\n                name,\r\n                elementCtor,\r\n                options\r\n            );\r\n        }\r\n        return elementCtor;\r\n    }\r\n}\r\n\r\ninterface QueryPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryProperty: QueryPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(propertyKey);\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return this.shadowRoot!.querySelector(selector);\r\n        } : function(this: HTMLElement) {\r\n            return this.querySelector(selector);\r\n        }\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\ninterface QueryAllPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryAllProperty: QueryAllPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(propertyKey);\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return Array.from(this.shadowRoot!.querySelectorAll(selector));\r\n        } : function(this: HTMLElement) {\r\n            return Array.from(this.querySelectorAll(selector));\r\n        };\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\nfunction fragment(...nodes: (Node | string)[]): DocumentFragment {\r\n    const fragment = document.createDocumentFragment();\r\n    fragment.append(...nodes);\r\n    return fragment;\r\n}\r\n\r\nfunction textNode(text: string): Node {\r\n    return document.createTextNode(text);\r\n}\r\n\r\ninterface HTMLElementInit {\r\n    options?: ElementCreationOptions,\r\n    attributes?: {\r\n        [name: string]: number | string | boolean | undefined\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    children?: Node | string | (Node | string)[] | NodeList | ReactiveChildElements,\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction element<E extends HTMLElementTagNameMap[K], K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): E;\r\nfunction element(\r\n    tagName: string, init?: HTMLElementInit): HTMLElement;\r\nfunction element<K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): HTMLElementTagNameMap[K] {\r\n    if (init) {\r\n        const {options, attributes, dataset, children, listeners} = init;\r\n        const element = document.createElement(tagName, options);\r\n        if (attributes) {\r\n            Object.entries(attributes).forEach(([attributeName, attributeValue]) => {\r\n                if (attributeValue !== undefined) {\r\n                    if (typeof attributeValue === \"boolean\") {\r\n                        element.toggleAttribute(camelToTrain(attributeName), attributeValue);\r\n                    }\r\n                    else {\r\n                        element.setAttribute(camelToTrain(attributeName), String(attributeValue));\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        if (dataset) {\r\n            const {dataset: elementDataset} = element;\r\n            Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                elementDataset[datasetEntry_i] = String(dataset[datasetEntry_i]);\r\n            });\r\n        }\r\n        if (children) {\r\n            if (typeof children === \"function\") {\r\n                children(element);\r\n            }\r\n            else if (typeof children === \"object\" && \"length\" in children) {\r\n                element.append(...Array.from(children));\r\n            }\r\n            else {\r\n                element.append(children);\r\n            }\r\n        }\r\n        if (listeners) {\r\n            Object.entries(listeners).forEach(([name_i, listener_i]) => {\r\n                if (Array.isArray(listener_i)) {\r\n                    element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                }\r\n                else {\r\n                    element.addEventListener(name_i, listener_i);\r\n                }\r\n            });\r\n        }\r\n        return element;\r\n    }\r\n    return document.createElement(tagName);\r\n}\r\n\r\nconst reactiveElementsMap = new WeakMap<ModelNode, {\r\n    observerOptions: ModelChangeObserverOptions,\r\n    reactiveElementsArray: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }[]\r\n}>();\r\n\r\nconst reactiveElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    model: ModelNode,\r\n    reactiveElement: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }\r\n}) => {\r\n    const {model, reactiveElement} = heldValue;\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    if (reactiveElementsMapEntry !== undefined) {\r\n        const {reactiveElementsArray} = reactiveElementsMapEntry;\r\n        reactiveElementsArray.splice(reactiveElementsArray.indexOf(reactiveElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveElementsPropertyObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    records.forEach((record_i) => {\r\n        const {target, propertyName, oldValue, newValue} = record_i;\r\n        const {reactiveElementsArray} = reactiveElementsMap.get(target)!;\r\n        reactiveElementsArray.forEach(reactiveElement_i => {\r\n            const {elementRef, react, properties} = reactiveElement_i;\r\n            const element = elementRef.deref();\r\n            if (element) {\r\n                if (properties.includes(propertyName!)) {\r\n                    react(element, propertyName!, oldValue, newValue);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveElement<M extends ModelNode, E extends Element, K extends string>(\r\n    model: M,\r\n    element: E,\r\n    properties: K[],\r\n    react: (object: E, property: K, oldValue: any, newValue: any) => void\r\n): E;\r\nfunction reactiveElement<M extends ModelNode, E extends Element>(\r\n    model: M,\r\n    element: E,\r\n    properties: string[],\r\n    react: (element: E, property: string, oldValue: any, newValue: any) => void\r\n): E {\r\n    const elementRef = new WeakRef(element);\r\n    const reactiveElement = {elementRef, react, properties};\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    reactiveElementsFinalizationRegistry.register(element, {model, reactiveElement});\r\n    if (!reactiveElementsMapEntry) {\r\n        const observerOptions = {\r\n            properties: true,\r\n            propertiesFilter: properties\r\n        };\r\n        const reactiveElementsArray = [reactiveElement];\r\n        reactiveElementsMap.set(model, {observerOptions, reactiveElementsArray});\r\n        reactiveElementsPropertyObserver.observe(model, observerOptions);\r\n    }\r\n    else {\r\n        const {reactiveElementsArray, observerOptions} = reactiveElementsMapEntry;\r\n        const {propertiesFilter} = observerOptions;\r\n        reactiveElementsArray.push(reactiveElement);\r\n        observerOptions.propertiesFilter = propertiesFilter ?\r\n            propertiesFilter.concat(properties.filter(\r\n                property_i => !propertiesFilter.includes(property_i)\r\n            )) : properties.filter(\r\n                (property_i, i, properties) => properties.indexOf(property_i) === i\r\n            )\r\n    }\r\n    properties.forEach((property_i) => {\r\n        if (property_i in model) {\r\n            const value = Reflect.get(model, property_i, model);\r\n            react(element, <any>property_i, <any>undefined, value);\r\n        }\r\n    });\r\n    return element;\r\n}\r\n\r\nfunction revokeReactiveElement<M extends ModelNode, E extends Element>(\r\n    model: M,\r\n    element: E\r\n): void {\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    if (reactiveElementsMapEntry) {\r\n        const {reactiveElementsArray} = reactiveElementsMapEntry;\r\n        const reactiveElementIndex = reactiveElementsArray.findIndex(\r\n            reactiveElement => reactiveElement.elementRef.deref() === element\r\n        );\r\n        if (reactiveElementIndex > -1) {\r\n            reactiveElementsArray.splice(reactiveElementIndex, 1);\r\n        }\r\n        if (reactiveElementsArray.length === 0) {\r\n            reactiveElementsMap.delete(model);\r\n        }\r\n    }\r\n}\r\n\r\ninterface ReactiveChildElements {\r\n    (parent: ParentNode): void;\r\n}\r\n\r\nconst reactiveChildElementsMap = new WeakMap<ModelList, {\r\n    reactiveChildElementsArray: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }[]\r\n}>();\r\n\r\nconst reactiveChildElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    list: ModelList,\r\n    reactiveChildElement: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }\r\n}) => {\r\n    const {list, reactiveChildElement} = heldValue;\r\n    const reactiveChildrenElementsMapEntry = reactiveChildElementsMap.get(list);\r\n    if (reactiveChildrenElementsMapEntry) {\r\n        const {reactiveChildElementsArray} = reactiveChildrenElementsMapEntry;\r\n        reactiveChildElementsArray.splice(reactiveChildElementsArray.indexOf(reactiveChildElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveChildElementsObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    let range: null | Range = null;\r\n    Array.from(records.values()).forEach((record_i) => {\r\n        const {target} = record_i;\r\n        const list = <ModelList>target;\r\n        const {length: listLength} = list;\r\n        const {reactiveChildElementsArray} = reactiveChildElementsMap.get(list)!;\r\n        reactiveChildElementsArray.forEach((reactiveChildElements_i) => {\r\n            const {parentRef, mapping, placeholder} = reactiveChildElements_i;\r\n            const parent = parentRef.deref();\r\n            if (parent) {\r\n                const {firstChild, children} = parent;\r\n                const {length: childrenCount} = children;\r\n                if (placeholder && listLength > 0 && firstChild == placeholder) {\r\n                    parent.removeChild(placeholder);\r\n                }\r\n                const {changeType, LIST_INSERT, LIST_REMOVE, LIST_SORT} = record_i;\r\n                switch (changeType) {\r\n                    case LIST_INSERT: {\r\n                        const {insertedIndex, insertedItems} = record_i;\r\n                        const insertedItemsArray = Array.from(insertedItems.values()).map(mapping);\r\n                        const {length: childrenCount} = children;\r\n                        if (insertedIndex < childrenCount) {\r\n                            children[insertedIndex].before(...insertedItemsArray);\r\n                        }\r\n                        else {\r\n                            parent.append(...insertedItemsArray);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_REMOVE: {\r\n                        const {removedIndex, removedItems} = record_i;\r\n                        const {length: removedCount} = removedItems;\r\n                        range = range ?? document.createRange();\r\n                        const removeEndIndex = removedIndex + (removedCount - 1);\r\n                        if (removeEndIndex < childrenCount) {\r\n                            range.setStartBefore(children[removedIndex]);\r\n                            range.setEndAfter(children[removeEndIndex]);\r\n                            range.deleteContents();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_SORT: {\r\n                        const {sortedIndices} = record_i;\r\n                        const childrenArray = Array.from(children);\r\n                        parent.append(\r\n                            ...sortedIndices.filter(\r\n                                index_i => index_i < childrenCount\r\n                            ).map(\r\n                                index_i => childrenArray[index_i]\r\n                            )\r\n                        );\r\n                        break;\r\n                    }\r\n                }\r\n                if (listLength == 0 && placeholder) {\r\n                    parent.append(placeholder);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveChildElements<Model extends ModelNode>(\r\n    list: ModelList<Model>,\r\n    mapping: (item: Model) => Element,\r\n    placeholder?: Element\r\n): ReactiveChildElements {\r\n    return (parent: ParentNode) => {\r\n        const parentRef = new WeakRef(parent);\r\n        const reactiveChildElementsMapEntry = reactiveChildElementsMap.get(list);\r\n        const reactiveChildElement = {parentRef, mapping, placeholder};\r\n        reactiveChildElementsFinalizationRegistry.register(parent, {list, reactiveChildElement});\r\n        if (!reactiveChildElementsMapEntry) {\r\n            const reactiveChildElementsArray = [reactiveChildElement];\r\n            reactiveChildElementsMap.set(list, {reactiveChildElementsArray});\r\n            reactiveChildElementsObserver.observe(list, {\r\n                childList: true\r\n            });\r\n        }\r\n        else {\r\n            const {reactiveChildElementsArray} = reactiveChildElementsMapEntry;\r\n            reactiveChildElementsArray.push(reactiveChildElement);\r\n        }\r\n        const children = list.length == 0 && placeholder ?\r\n            [placeholder] : Array.from(list.values()).map(mapping);\r\n        parent.replaceChildren(...children);\r\n    }\r\n}\r\n\r\nfunction revokeReactiveChildElements<Model extends ModelNode>(\r\n    list: ModelList<Model>,\r\n    parent: ParentNode,\r\n): void {\r\n    const reactiveChildElementsMapEntry = reactiveChildElementsMap.get(list);\r\n    if (reactiveChildElementsMapEntry) {\r\n        const {reactiveChildElementsArray} = reactiveChildElementsMapEntry;\r\n        const reactiveChildElementsIndex = reactiveChildElementsArray.findIndex(\r\n            reactiveChildElement => reactiveChildElement.parentRef.deref() === parent\r\n        );\r\n        if (reactiveChildElementsIndex > -1) {\r\n            reactiveChildElementsArray.splice(reactiveChildElementsIndex, 1);\r\n        }\r\n        if (reactiveChildElementsArray.length === 0) {\r\n            reactiveChildElementsMap.delete(list);\r\n        }\r\n    }\r\n}\r\n\r\ninterface AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n    attach(element: Element): void;\r\n    detach(element: Element): void;\r\n}\r\n\r\ntype AttributeType = \"string\" | \"boolean\" | \"list\";\r\n\r\nfunction areAttributesMatching(\r\n    referenceAttributeType: AttributeType,\r\n    referenceAttributeName: string, referenceAttributeValue: string,\r\n    attributeName: string, attributeValue: string | null): boolean {\r\n    if (referenceAttributeName == attributeName) {\r\n        switch (referenceAttributeType) {\r\n            case \"boolean\":\r\n                return referenceAttributeValue == \"\" && attributeValue == \"\";\r\n            case \"string\":\r\n                return referenceAttributeValue !== \"\" && (referenceAttributeValue == attributeValue);\r\n            case \"list\":\r\n                return (referenceAttributeValue !== \"\" && attributeValue !== null) && new RegExp(`${referenceAttributeValue}\\s*?`, \"g\").test(attributeValue );\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nclass AttributeMutationMixinBase implements AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n\r\n    constructor(attributeName: string, attributeType: AttributeType = \"boolean\", attributeValue: string = \"\") {\r\n        this.attributeName = attributeName;\r\n        this.attributeType = attributeType;\r\n        this.attributeValue = attributeValue;\r\n    }\r\n\r\n    attach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n\r\n    detach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n}","\r\nexport { snakeToCamel };\r\nexport { camelToSnake };\r\nexport { trainToCamel };\r\nexport { camelToTrain };\r\n\r\nfunction snakeToCamel(str: string) {\r\n  return str.split('_').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToSnake(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '_').toLowerCase();\r\n}\r\n\r\nfunction trainToCamel(str: string) {\r\n  return str.split('-').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToTrain(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '-').toLowerCase();\r\n}","import { CustomElement, element, AttributeProperty, QueryProperty } from \"../../Element\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\nimport { themeStylesheet } from \"../../../stylesheets/Theme\";\r\n\r\nexport { HTMLETreeItemElement };\r\n\r\ninterface HTMLETreeItemElementConstructor {\r\n    prototype: HTMLETreeItemElement;\r\n    new(): HTMLETreeItemElement;\r\n}\r\n\r\ninterface HTMLETreeItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly group: HTMLETreeItemGroupElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    expanded: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    level: number;\r\n    type: \"leaf\" | \"parent\";\r\n    toggle(force?: boolean): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitem\": HTMLETreeItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-treeitem\"\r\n})\r\nclass HTMLETreeItemElementBase extends HTMLElement implements HTMLETreeItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    expanded!: boolean;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number, observed: true})\r\n    level!: number;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"leaf\"})\r\n    type!: \"leaf\" | \"parent\";\r\n\r\n    @QueryProperty({selector: \":scope > e-treeitemgroup[slot=group]\"})\r\n    group!: HTMLETreeItemGroupElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"arrow\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"group\"\r\n                }\r\n            })\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: block;\r\n                user-select: none;\r\n            }\r\n            \r\n            :host([droptarget]) {\r\n                background-color: var(--droptarget-item-color);\r\n            }\r\n            \r\n            :host([active]:focus-visible) {\r\n                outline: none;\r\n            }\r\n            \r\n            :host([active]:is(:focus, :not(:focus-within))):host-context(e-tree:focus-within) [part=\"content\"] {\r\n                outline: 1px solid var(--focused-item-outline-color);\r\n                outline-offset: -1px;\r\n            }\r\n            \r\n            [part=\"content\"]:hover {\r\n                background-color: var(--hovered-item-color);\r\n            }\r\n            \r\n            :host([selected]) [part=\"content\"] {\r\n                background-color: var(--selected-item-color);\r\n            }\r\n            \r\n            [part=\"content\"] {\r\n                display: flex;\r\n                line-height: 22px;\r\n                padding-left: calc(var(--level) * var(--indent-width, 12px));\r\n            }\r\n            \r\n            :host(:not([type=\"parent\"])) ::slotted([slot=\"group\"]),\r\n            :host(:not([expanded])) ::slotted([slot=\"group\"]) {\r\n                display: none;\r\n            }\r\n            \r\n            :host(:not([type=\"parent\"])) [part=\"arrow\"]::before {\r\n                visibility: hidden;\r\n            }\r\n            \r\n            [part=\"arrow\"] {\r\n                display: inline-block;\r\n                width: 18px;\r\n                height: 18px;\r\n                margin: 1px 4px 1px 1px;\r\n            }\r\n            \r\n            [part=\"arrow\"]::before {\r\n                display: inline-block;\r\n                width: 18px;\r\n                height: 18px;\r\n                margin: 1px;\r\n                content: \"\";\r\n                mask-size: 18px 18px;\r\n                -webkit-mask-size: 18px 18px;\r\n                background-color: var(--arrow-color, none);\r\n                filter: var(--arrow-filter, none);\r\n            }\r\n            \r\n            :host(:not([expanded])) [part=\"arrow\"]::before {\r\n                -webkit-mask-image: var(--arrow-icon-collapsed, none);\r\n                mask-image: var(--arrow-icon-collapsed, none);\r\n            }\r\n            \r\n            :host([expanded]) [part=\"arrow\"]::before {\r\n                -webkit-mask-image: var(--arrow-icon-expanded, none);\r\n                mask-image: var(--arrow-icon-expanded, none);\r\n            }\r\n        `;\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet, themeStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"expanded\": {\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const labelPart = this.shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"level\": {\r\n                this.style.setProperty(\"--level\", `${this.level}`);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {expanded} = this;\r\n        this.expanded = force ?? !expanded;\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemElement: HTMLETreeItemElementConstructor = HTMLETreeItemElementBase;","import { CustomElement, element } from \"../../Element\";\r\n\r\nexport { HTMLETreeItemGroupElement };\r\n\r\ninterface HTMLETreeItemGroupElementConstructor {\r\n    prototype: HTMLETreeItemGroupElement;\r\n    new(): HTMLETreeItemGroupElement;\r\n}\r\n\r\ninterface HTMLETreeItemGroupElement extends HTMLElement {}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitemgroup\": HTMLETreeItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-treeitemgroup\"\r\n})\r\nclass HTMLETreeItemGroupElementBase extends HTMLElement implements HTMLETreeItemGroupElement {\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: block;\r\n            }\r\n        `;\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemGroupElement: HTMLETreeItemGroupElementConstructor = HTMLETreeItemGroupElementBase;","export { ModelChangeRecord };\r\nexport { ModelEvent };\r\nexport { ModelNode };\r\nexport { ModelObject };\r\nexport { ModelProperty };\r\nexport { ModelList };\r\nexport { ModelChangeObserverOptions };\r\nexport { ModelChangeObserver };\r\n\r\ninterface ModelChangeRecordConstructor {\r\n    prototype: ModelChangeRecord;\r\n    new(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ): ModelChangeRecord;\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\ninterface ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly changeType: number;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\nclass ModelChangeRecordBase implements ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList;\r\n    readonly changeType: number;\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n\r\n    constructor(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ) {\r\n        this.target = init.target;\r\n        this.changeType = init.changeType;\r\n        this.propertyName = init.propertyName ?? null;\r\n        this.oldValue = init.oldValue ?? undefined;\r\n        this.newValue = init.newValue ?? undefined;\r\n        this.removedIndex = init.removedIndex ?? 0;\r\n        this.removedItems = new ModelNodesList(init.removedItems ?? []);\r\n        this.insertedIndex = init.insertedIndex ?? 0;\r\n        this.insertedItems = new ModelNodesList(init.insertedItems ?? []);\r\n        this.sortedIndices = init.sortedIndices ?? [];\r\n    }\r\n\r\n    static get PROPERTY_CHANGE(): number {\r\n        return 1;\r\n    }\r\n\r\n    static get LIST_REMOVE(): number {\r\n        return 2;\r\n    }\r\n\r\n    static get LIST_INSERT(): number {\r\n        return 3;\r\n    }\r\n\r\n    static get LIST_SORT(): number {\r\n        return 4;\r\n    }\r\n\r\n    get PROPERTY_CHANGE(): number {\r\n        return ModelChangeRecordBase.PROPERTY_CHANGE;\r\n    }\r\n\r\n    get LIST_REMOVE(): number {\r\n        return ModelChangeRecordBase.LIST_REMOVE;\r\n    }\r\n\r\n    get LIST_INSERT(): number {\r\n        return ModelChangeRecordBase.LIST_INSERT;\r\n    }\r\n\r\n    get LIST_SORT(): number {\r\n        return ModelChangeRecordBase.LIST_SORT;\r\n    }\r\n}\r\n\r\nvar ModelChangeRecord: ModelChangeRecordConstructor = ModelChangeRecordBase;\r\n\r\ninterface ModelNodesListConstructor {\r\n    prototype: ModelNodesList;\r\n    new(items: any[]): ModelNodesList;\r\n}\r\n\r\ninterface ModelNodesList {\r\n    get length(): number;\r\n    item(index: number): ModelNode | null;\r\n    values(): IterableIterator<ModelNode>;\r\n}\r\n\r\nclass ModelNodesListBase implements ModelNodesList {\r\n    #items: ModelNode[];\r\n\r\n    constructor(items: ModelNode[]) {\r\n        this.#items = items.slice();\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    item(index: number): ModelNode | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    values(): IterableIterator<ModelNode> {\r\n        return this.#items.values();\r\n    }\r\n}\r\n\r\nvar ModelNodesList: ModelNodesListConstructor = ModelNodesListBase;\r\n\r\ninterface ModelEventConstructor {\r\n    prototype: ModelEvent;\r\n    new(type: string): ModelEvent;\r\n}\r\n\r\ninterface ModelEvent {\r\n    readonly type: string;\r\n    readonly currentTarget: ModelEventTarget | null;\r\n    readonly target: ModelEventTarget | null;\r\n}\r\n\r\nclass ModelEventBase implements ModelEvent {\r\n    readonly type: string;\r\n\r\n    #currentTarget: ModelEventTarget | null;\r\n    #target: ModelEventTarget | null;\r\n\r\n    constructor(type: string) {\r\n        this.type = type;\r\n        this.#currentTarget = null;\r\n        this.#target = null;\r\n    }\r\n\r\n    get currentTarget(): ModelEventTarget | null {\r\n        return this.#currentTarget;\r\n    }\r\n\r\n    get target(): ModelEventTarget | null {\r\n        return this.#target;\r\n    }\r\n\r\n    static ModelEventTargetAccessor? = new class ModelEventTargetAccessor {\r\n        setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#currentTarget = currentTarget;\r\n            }\r\n        }\r\n\r\n        setTarget(event: ModelEvent, target: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#target = target;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface ModelEventTargetAccessor {\r\n    setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void;\r\n    setTarget(event: ModelEvent, target: ModelEventTarget): void;\r\n}\r\n\r\nvar ModelEventTargetAccessor: ModelEventTargetAccessor = ModelEventBase.ModelEventTargetAccessor!;\r\ndelete ModelEventBase.ModelEventTargetAccessor;\r\n\r\nvar ModelEvent: ModelEventConstructor = ModelEventBase;\r\n\r\ninterface ModelEventTargetConstructor {\r\n    prototype: ModelEventTarget;\r\n    new(): ModelEventTarget;\r\n}\r\n\r\ninterface ModelEventTarget {\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    dispatchEvent(event: ModelEvent): void;\r\n    receiveEvent(event: ModelEvent): void;\r\n}\r\n\r\nclass ModelEventTargetBase implements ModelEventTarget {\r\n    #callbacks: Map<string, ((event: ModelEvent) => void)[]>;\r\n\r\n    constructor() {\r\n        this.#callbacks = new Map();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        const {type} = event;\r\n        const callbacks = this.#callbacks.get(type);\r\n        ModelEventTargetAccessor.setCurrentTarget(event, this);\r\n        if (callbacks) {\r\n            callbacks.forEach((callback_i) => {\r\n                callback_i(event);\r\n            });\r\n        }\r\n    }\r\n\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            callbacks.push(callback);\r\n        }\r\n        else {\r\n            this.#callbacks.set(type, [callback]);\r\n        }\r\n    }\r\n\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            const callbackIndex = callbacks.findIndex(\r\n                callback_i => callback_i == callback\r\n            );\r\n            if (callbackIndex > -1) {\r\n                callbacks.splice(callbackIndex, 1);\r\n            }\r\n            if (callbacks.length == 0) {\r\n                this.#callbacks.delete(type);\r\n            }\r\n        }\r\n    }\r\n\r\n    dispatchEvent(event: ModelEvent): void {\r\n        ModelEventTargetAccessor.setTarget(event, this);\r\n        this.receiveEvent(event);\r\n    }\r\n}\r\n\r\nvar ModelEventTarget: ModelEventTargetConstructor = ModelEventTargetBase;\r\n\r\ninterface ModelNodeConstructor {\r\n    prototype: ModelNode;\r\n    new(): ModelNode;\r\n}\r\n\r\ninterface ModelNode extends ModelEventTarget {\r\n    readonly parentNode: ModelNode | null;\r\n    setParent(parentNode: ModelNode | null): void;\r\n    getRecords(): ModelChangeRecord[];\r\n    beginChanges(): void;\r\n    endChanges(): void;\r\n}\r\n\r\ninterface ModelNodeRecordsAccessor {\r\n    triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void;\r\n    handleRecord(node: ModelNode, record: ModelChangeRecord): void;\r\n}\r\n\r\nclass ModelNodeBase extends ModelEventTargetBase implements ModelNode {\r\n    #parentNode: ModelNode | null;\r\n    #records: ModelChangeRecord[];\r\n    #isRecording: boolean;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#parentNode = null;\r\n        this.#records = [];\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    get parentNode(): ModelNode | null {\r\n        return this.#parentNode;\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        if (parentNode !== null) {\r\n            let isCyclicReference = parentNode == this;\r\n            let {parentNode: ancestorNode} = parentNode;\r\n            while (!isCyclicReference && ancestorNode !== null) {\r\n                ({parentNode: ancestorNode} = ancestorNode);\r\n                isCyclicReference = ancestorNode == this;\r\n            }\r\n            if (!isCyclicReference) {\r\n                this.#parentNode = parentNode;\r\n            }\r\n            else {\r\n                throw new TypeError(\"Failed to set parent on ModelNode: circular reference detected in the hierarchy.\");\r\n            }\r\n        }\r\n        else {\r\n            this.#parentNode = null;\r\n        }\r\n    }\r\n    \r\n    beginChanges(): void {\r\n        this.#isRecording = true;\r\n    }\r\n\r\n    endChanges(): void {\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        this.#records.splice(0);\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    getRecords(): ModelChangeRecord[] {\r\n        return this.#records.slice();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        super.receiveEvent(event);\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            parentNode.receiveEvent(event);\r\n        }\r\n    }\r\n\r\n    #triggerChange(property: string, oldValue: any, newValue: any): void {\r\n        const records = this.#records;\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.PROPERTY_CHANGE,\r\n            propertyName: property,\r\n            oldValue, newValue\r\n        });\r\n        records.push(record);\r\n        if (!this.#isRecording) {\r\n            this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n            records.splice(0);\r\n        }\r\n    }\r\n\r\n    #handleRecord(record: ModelChangeRecord): void {\r\n        this.#records.push(record);\r\n        if (!this.#isRecording) {\r\n            this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n            this.#records.splice(0);\r\n        }\r\n    }\r\n\r\n    static ModelNodeRecordsAccessor? = new class ModelNodeRecordsAccessor {\r\n        triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#triggerChange(property, oldValue, newValue);\r\n            }\r\n        }\r\n\r\n        handleRecord(node: ModelNode, record: ModelChangeRecord): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#handleRecord(record);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelNodeRecordsAccessor: ModelNodeRecordsAccessor = ModelNodeBase.ModelNodeRecordsAccessor!;\r\ndelete ModelNodeBase.ModelNodeRecordsAccessor;\r\n\r\nvar ModelNode: ModelNodeConstructor = ModelNodeBase;\r\n\r\ninterface ModelPropertyDecorator {\r\n    (): <Model extends ModelObject>(target: Model, property: string) => void;\r\n}\r\n\r\nconst ModelProperty: ModelPropertyDecorator = function() {\r\n    return (\r\n        target: ModelObject, property: string\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const setter = function(this: ModelObject, value: any) {\r\n            const oldValue = ModelObjectPropertiesAccessor.getProperty(this, property);\r\n            ModelObjectPropertiesAccessor.setProperty(this, property, value);\r\n            if (value !== oldValue) {\r\n                ModelNodeRecordsAccessor.triggerChange(this, property, oldValue, value);\r\n            }\r\n            return true;\r\n        };\r\n        const getter = function(this: ModelObject) {\r\n            return ModelObjectPropertiesAccessor.getProperty(this, property);\r\n        };\r\n        Object.defineProperty(prototype, property, {\r\n            set: setter,\r\n            get: getter,\r\n            enumerable: true\r\n        });\r\n    }\r\n}\r\n\r\ninterface ModelObjectConstructor {\r\n    prototype: ModelObject;\r\n    new(): ModelObject;\r\n}\r\n\r\ninterface ModelObject extends ModelNode {}\r\n\r\ninterface ModelObjectPropertiesAccessor {\r\n    setProperty(node: ModelNode, property: string, value: any): void;\r\n    getProperty(node: ModelNode, property: string,): any;\r\n}\r\n\r\nclass ModelObjectBase extends ModelNodeBase implements ModelObject {\r\n    #properties: Map<string, any>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#properties = new Map();\r\n    }\r\n\r\n    static ModelObjectPropertiesAccessor? = new class ModelPropertiesAccessor {\r\n        setProperty(node: ModelObject, property: string, value: any): void {\r\n            if (node instanceof ModelObjectBase) {\r\n                node.#properties.set(property, value);\r\n            }\r\n        }\r\n\r\n        getProperty(node: ModelObject, property: string): any {\r\n            if (node instanceof ModelObjectBase) {\r\n                return node.#properties.get(property);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelObjectPropertiesAccessor: ModelObjectPropertiesAccessor = ModelObjectBase.ModelObjectPropertiesAccessor!;\r\ndelete ModelObjectBase.ModelObjectPropertiesAccessor;\r\n\r\nvar ModelObject: ModelObjectConstructor = ModelObjectBase;\r\n\r\ninterface ModelListConstructor {\r\n    prototype: ModelList;\r\n    new<Model extends ModelNode>(): ModelList<Model>;\r\n    new<Model extends ModelNode>(items: Model[]): ModelList<Model>;\r\n}\r\n\r\ninterface ModelList<Model extends ModelNode = ModelNode> extends ModelNode {\r\n    readonly parentNode: ModelNode | null;\r\n    readonly length: number;\r\n    index(item: Model): number;\r\n    get(index: number): Model | null;\r\n    values(): IterableIterator<Model>;\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void;\r\n    insert(index: number, ...items: Model[]): void;\r\n    prepend(...items: Model[]): void;\r\n    append(...items: Model[]): void;\r\n    remove(item: Model): void;\r\n    clear(): void;\r\n}\r\n\r\nclass ModelListBase<Model extends ModelNode = ModelNode> extends ModelNodeBase implements ModelList<Model> {\r\n    #items: Model[];\r\n\r\n    constructor()\r\n    constructor(items: Model[])\r\n    constructor(items?: Model[]) {\r\n        super();\r\n        this.#items = items?.slice() ?? [];\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        super.setParent(parentNode);\r\n        this.#items.forEach((item_i) => {\r\n            item_i.setParent(parentNode);\r\n        });\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    get(index: number): Model | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    index(item: Model): number {\r\n        return this.#items.indexOf(item);\r\n    }\r\n\r\n    values(): IterableIterator<Model> {\r\n        return this.#items.values();\r\n    }\r\n\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void {\r\n        const items = this.#items;\r\n        const indexedItems = items.map(\r\n            (item_i, i) => {\r\n                return {\r\n                    item: item_i,\r\n                    index: i\r\n                };\r\n            }\r\n        );\r\n        indexedItems.sort(\r\n            (indexedItem_a, indexedItem_b) => {\r\n                return compareFunction(\r\n                    indexedItem_a.item, indexedItem_b.item\r\n                )\r\n            }\r\n        );\r\n        this.#items = indexedItems.map(indexedItem_i => indexedItem_i.item);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_SORT,\r\n            sortedIndices: indexedItems.map(indexedItem_i => indexedItem_i.index)\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    prepend(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.splice(0, 0, ...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: 0,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    append(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.push(...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: length,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    insert(index: number, ...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const positiveIndex = Math.abs(index);\r\n        if (positiveIndex <= length) {\r\n            if (index >= 0) {\r\n                const {parentNode} = this;\r\n                items.forEach(item_i => {\r\n                    item_i.setParent(parentNode);\r\n                });\r\n                if (index < length) {\r\n                    _items.splice(index, 0, ...items);\r\n                }\r\n                else {\r\n                    _items.push(...items);\r\n                }\r\n            }\r\n            else if (index < 0) {\r\n                index = length - index;\r\n                const {parentNode} = this;\r\n                if (parentNode) {\r\n                    items.forEach(item_i => {\r\n                        item_i.setParent(parentNode);\r\n                    });\r\n                }\r\n                _items.splice(index, 0, ...items);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_INSERT,\r\n                insertedIndex: index,\r\n                insertedItems: items.slice()\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    remove(item: Model): void {\r\n        const _items = this.#items;\r\n        const index = _items.indexOf(item);\r\n        if (index > -1) {\r\n            const item = _items.splice(index, 1)[0];\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                item.setParent(null);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: index,\r\n                removedItems: [item]\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    clear(): void {\r\n        const items = this.#items;\r\n        const {length} = items;\r\n        if (length > 0) {\r\n            const removedItems = items.splice(0);\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                removedItems.forEach((removedItem_i) => {\r\n                    removedItem_i.setParent(null);\r\n                });\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: 0,\r\n                removedItems: removedItems\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n};\r\n\r\nvar ModelList: ModelListConstructor = ModelListBase!;\r\n\r\ninterface ModelChangeObserverConstructor {\r\n    prototype: ModelChangeObserver;\r\n    new(callback: (records: ModelChangeRecord[]) => void): ModelChangeObserver;\r\n}\r\n\r\ninterface ModelChangeObserver {\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void;\r\n    unobserve(node: ModelNode): void;\r\n    disconnect(): void;\r\n}\r\n\r\ntype ModelChangeObserverOptions = {\r\n    properties?: boolean;\r\n    propertiesFilter?: string[];\r\n    childList?: boolean;\r\n    subtree?: boolean;\r\n}\r\n\r\nclass ModelChangeObserverBase implements ModelChangeObserver {\r\n    #callback: (records: ModelChangeRecord[]) => void;\r\n    #records: ModelChangeRecord[];\r\n    #disconnected: boolean;\r\n\r\n    #references: WeakMap<ModelNode, {\r\n        listener: (event: ModelEvent) => void,\r\n        options: ModelChangeObserverOptions\r\n    }>;\r\n\r\n    constructor(callback: (records: ModelChangeRecord[]) => void) {\r\n        this.#callback = callback;\r\n        this.#records = [];\r\n        this.#disconnected = false;\r\n        this.#references = new WeakMap();\r\n    }\r\n\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void {\r\n        this.#disconnected = false;\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (!reference) {\r\n            const listener = this.#handleModelEvent.bind(this);\r\n            node.addEventListener(\"modelchange\", listener);\r\n            reference = {listener, options};\r\n            references.set(node, reference);\r\n        }\r\n        else {\r\n            references.set(node, reference);\r\n        }\r\n    }\r\n\r\n    unobserve(node: ModelNode): void {\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (reference) {\r\n            const {listener} = reference;\r\n            node.removeEventListener(\"modelchange\", listener);\r\n        }\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#records.splice(0);\r\n        this.#disconnected = true;\r\n    }\r\n\r\n    #trigger(): void {\r\n        const records = this.#records.splice(0);\r\n        if (records.length > 0) {\r\n            this.#callback(records);\r\n        }\r\n    }\r\n\r\n    #handleModelEvent(event: ModelEvent): void {\r\n        if (!this.#disconnected) {\r\n            const {target, currentTarget} = event;\r\n            const reference = this.#references.get(<ModelNode>currentTarget);\r\n            if (reference) {\r\n                const {options} = reference;\r\n                const {properties, propertiesFilter, childList, subtree} = options;\r\n                if (subtree) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n                else if (target == currentTarget) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelChangeObserver: ModelChangeObserverConstructor = ModelChangeObserverBase;","import * as arrowRight from \"../../assets/arrow_right_FILL0_wght400_GRAD0_opsz48.svg\";\r\nimport * as arrowDropDown from \"../../assets/arrow_drop_down_FILL0_wght400_GRAD0_opsz48.svg\";\r\nimport * as arrowDropUp from \"../../assets/arrow_drop_up_FILL0_wght400_GRAD0_opsz48.svg\";\r\n\r\nexport { themeStylesheet };\r\n\r\nconst themeStylesheet = new CSSStyleSheet();\r\nconsole.log(arrowRight);\r\nthemeStylesheet.replace(/*css*/`\r\n    :root {\r\n        --font-color: black;\r\n        \r\n        --icon-size: 18px;\r\n\r\n        --line-height: 18px;\r\n        --padded-line-height: 22px;\r\n\r\n        --menu-box-shadow: rgba(0, 0, 0, 0.2) 0 1px 3px;\r\n\r\n        --primary-color: white;\r\n        --secondary-color: white;\r\n\r\n        --text-color: white;\r\n        --text-darker-color: white;\r\n        --text-lighter-color: white;\r\n\r\n        --content-background-color: white;\r\n        --item-border-color: grey;\r\n        --section-border-color: lightgrey;\r\n        --padding-background-color: gainsboro;\r\n\r\n        --accent-color: hsl(212, 100%, 50%);\r\n        --hovered-item-color: hsl(203, 92%, 80%, 50%);\r\n        --focused-item-color: hsl(203, 92%, 50%, 50%);\r\n        --focused-item-outline-color: hsl(203, 92%, 50%);\r\n        --selected-item-color: hsl(203, 92%, 75%, 75%);\r\n        --activated-item-color: hsl(203, 92%, 50%, 50%);\r\n        --droptarget-item-color: hsl(203, 92%, 50%, 50%);\r\n\r\n        --arrow-color: var(--font-color);\r\n        --arrow-icon-collapsed: url(${arrowRight});\r\n        --arrow-icon-expanded: url(${arrowDropDown});\r\n\r\n        --sortorder-indicator-color: var(--font-color);\r\n        --sortorder-indicator-ascending: url(${arrowDropUp});\r\n        --sortorder-indicator-descending: url(${arrowDropDown});\r\n    }\r\n`);","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLETreeItemElement } from \"./TreeItem\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeElement };\r\n\r\ninterface HTMLETreeElementConstructor {\r\n    prototype: HTMLETreeElement;\r\n    new(): HTMLETreeElement;\r\n}\r\n\r\ninterface HTMLETreeElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLETreeItemElement>;\r\n    readonly activeItem: HTMLETreeItemElement | null;\r\n    readonly dropTargetItem: HTMLETreeItemElement | null;\r\n    firstItem(): HTMLETreeItemElement | null;\r\n    droptarget: boolean;\r\n    name: string;\r\n    selectedItems(): HTMLETreeItemElement[];\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tree\": HTMLETreeElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-tree\"\r\n})\r\nclass HTMLETreeElementBase extends HTMLElement implements HTMLETreeElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLETreeItemElement>;\r\n\r\n    get activeItem(): HTMLETreeItemElement | null {\r\n        return this.querySelector<HTMLETreeItemElement>(\r\n            \"e-treeitem[active]\"\r\n        );\r\n    }\r\n\r\n    get dropTargetItem(): HTMLETreeItemElement | null {\r\n        return this.querySelector<HTMLETreeItemElement>(\r\n            \"e-treeitem[droptarget]\"\r\n        );\r\n    }\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: block;\r\n            }\r\n            \r\n            :host(:focus) {\r\n                outline: 1px solid var(--focused-item-outline-color);\r\n                outline-offset: -1px;\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.items = this.getElementsByTagName(\"e-treeitem\");\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"dblclick\", this.#handleDblClickEvent.bind(this));\r\n        this.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    selectedItems(): HTMLETreeItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLETreeItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLETreeItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLETreeItemElement, to: HTMLETreeItemElement): HTMLETreeItemElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleItem = this.#nextItem(from);\r\n            while (nextVisibleItem && nextVisibleItem !== to) {\r\n                range.push(nextVisibleItem);\r\n                nextVisibleItem = this.#nextItem(nextVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleItem = this.#previousItem(from);\r\n            while (previousVisibleItem && previousVisibleItem !== to) {\r\n                range.push(previousVisibleItem);\r\n                previousVisibleItem = this.#previousItem(previousVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLETreeItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((item_i) => {\r\n            item_i.selected = false;\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLETreeItemElement | null): void {\r\n        const {activeItem} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = item;\r\n            item.active = true;\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n    \r\n    #setDropTargetItem(item: HTMLETreeItemElement | null): void {\r\n        const {dropTargetItem} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n        }\r\n    }\r\n\r\n    firstItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousSibling = <HTMLETreeItemElement | null>walker.previousSibling();\r\n        return previousSibling ?\r\n            this.#deepestItem(previousSibling) :\r\n            <HTMLETreeItemElement | null>walker.parentNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const {type, expanded} = item;\r\n        return <HTMLETreeItemElement | null>(\r\n            type === \"leaf\" ?\r\n                walker.nextNode() :\r\n                expanded ?\r\n                    walker.nextNode() :\r\n                    walker.nextSibling() ??\r\n                    (walker.parentNode(), walker.nextSibling())\r\n        );\r\n    }\r\n\r\n    #deepestItem(item: HTMLETreeItemElement): HTMLETreeItemElement {\r\n        if (item.expanded) {\r\n            const walker = this.#walker;\r\n            const lastItem = <HTMLETreeItemElement>walker.lastChild();\r\n            if (lastItem) {\r\n                return this.#deepestItem(lastItem);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, shiftKey, ctrlKey} = event;\r\n        const targetItem = <HTMLETreeItemElement | null>(<HTMLElement>target).closest(\"e-treeitem\");\r\n        if (targetItem) {\r\n            if (!shiftKey && !ctrlKey) {\r\n                this.#setSelection(targetItem);\r\n                const {type} = targetItem;\r\n                if (type == \"parent\") {\r\n                    targetItem.toggle();\r\n                }\r\n            }\r\n        }\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleDblClickEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        const targetItem = <HTMLETreeItemElement | null>(<HTMLElement>target).closest(\"e-treeitem\");\r\n        if (targetItem) {\r\n            const {type} = targetItem;\r\n            if (type == \"parent\") {\r\n                targetItem.toggle(true);\r\n            }\r\n            this.#setDropTargetItem(targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        let rootNode = <Node>relatedTarget;\r\n        while (!(rootNode instanceof HTMLETreeItemElement || rootNode instanceof Document)) {\r\n            rootNode = rootNode.getRootNode();\r\n            if (rootNode instanceof ShadowRoot) {\r\n                rootNode = rootNode.host;\r\n            }\r\n        }\r\n        if (rootNode instanceof Document) {\r\n            this.#setDropTargetItem(null);\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? this, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? this, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(\r\n                                firstItem,\r\n                                this.#deepestItem(lastItem)\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    if (activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                    else {\r\n                        const walker = this.#walker;\r\n                        const parentItem = <HTMLETreeItemElement>walker.parentNode();\r\n                        if (parentItem) {\r\n                            parentItem.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    if (!activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.#setActiveItem(null);\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (!this.contains(<Node | null>relatedTarget)) {\r\n            (activeItem ?? this.firstItem())?.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetItem = <HTMLETreeItemElement | null>(<HTMLElement>target).closest(\"e-treeitem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetItem);\r\n            this.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node | null>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey, button} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const {selected} = target;\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey && !selected) {\r\n                        this.#setSelection(target);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            target.blur();\r\n                        }\r\n                        (!selected) ?\r\n                            this.#addToSelection(target) :\r\n                            this.#removeFromSelection(target);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const {activeItem} = this\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                target\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(target);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETreeElement: HTMLETreeElementConstructor = HTMLETreeElementBase;"],"names":["leafPrototypes","getProto","AttributeProperty","init","target","property","constructor","prototype","propertyName","String","defaultValue","observed","name","observedAttributes","Reflect","get","Array","isArray","push","Object","defineProperty","value","writable","type","Boolean","this","hasAttribute","set","setAttribute","removeAttribute","val","getAttribute","JSON","parse","stringify","Number","parseFloat","CustomElement","elementCtor","options","customElements","define","QueryProperty","propertyKey","selector","getter","withinShadowRoot","shadowRoot","querySelector","element","tagName","attributes","dataset","children","listeners","document","createElement","entries","forEach","attributeName","attributeValue","undefined","toggleAttribute","elementDataset","keys","datasetEntry_i","append","from","name_i","listener_i","addEventListener","reactiveElementsMap","WeakMap","FinalizationRegistry","heldValue","model","reactiveElement","reactiveElementsMapEntry","reactiveElementsArray","splice","indexOf","records","record_i","oldValue","newValue","reactiveElement_i","elementRef","react","properties","deref","includes","reactiveChildElementsMap","list","reactiveChildElement","reactiveChildrenElementsMapEntry","reactiveChildElementsArray","range","values","length","listLength","reactiveChildElements_i","parentRef","mapping","placeholder","parent","firstChild","childrenCount","removeChild","changeType","LIST_INSERT","LIST_REMOVE","LIST_SORT","insertedIndex","insertedItems","insertedItemsArray","map","before","removedIndex","removedItems","removedCount","createRange","removeEndIndex","setStartBefore","setEndAfter","deleteContents","sortedIndices","childrenArray","filter","index_i","camelToTrain","str","replace","toLowerCase","shadowTemplate","style","HTMLETreeItemElementBase","HTMLElement","super","attachShadow","mode","adoptedStylesheet","CSSStyleSheet","adoptedStyleSheets","content","cloneNode","connectedCallback","tabIndex","attributeChangedCallback","dispatchEvent","Event","bubbles","labelPart","textContent","setProperty","level","toggle","force","expanded","part","HTMLETreeItemElement","HTMLETreeItemGroupElementBase","HTMLETreeItemGroupElement","ModelChangeRecordBase","ModelNodesList","PROPERTY_CHANGE","ModelChangeRecord","items","slice","item","index","ModelEventBase","currentTarget","ModelEventTargetAccessor","setCurrentTarget","event","setTarget","ModelEvent","ModelEventTargetBase","Map","receiveEvent","callbacks","callback_i","callback","removeEventListener","callbackIndex","findIndex","delete","ModelNodeBase","parentNode","setParent","isCyclicReference","ancestorNode","TypeError","beginChanges","endChanges","getRecords","record","ModelNodeRecordsAccessor","triggerChange","node","handleRecord","ModelNode","ModelObjectBase","ModelObjectPropertiesAccessor","getProperty","ModelList","item_i","sort","compareFunction","indexedItems","i","indexedItem_a","indexedItem_b","indexedItem_i","prepend","_items","insert","Math","abs","remove","clear","removedItem_i","reference","propertiesFilter","childList","subtree","ModelChangeObserver","observe","references","listener","bind","unobserve","disconnect","themeStylesheet","console","log","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","getPrototypeOf","obj","t","__esModule","then","ns","create","r","def","current","getOwnPropertyNames","key","d","definition","o","enumerable","prop","hasOwnProperty","call","Symbol","toStringTag","HTMLETreeElementBase","createTreeWalker","NodeFilter","SHOW_ELEMENT","getElementsByTagName","activeItem","dropTargetItem","selectedItems","walker","currentNode","root","firstItem","selected","beginSelection","endSelection","FILTER_ACCEPT","FILTER_SKIP","FILTER_REJECT","to","position","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","nextVisibleItem","DOCUMENT_POSITION_PRECEDING","previousVisibleItem","selectedItem_i","contains","active","droptarget","lastChild","previousSibling","nextNode","nextSibling","lastItem","shiftKey","ctrlKey","targetItem","closest","stopPropagation","preventDefault","relatedTarget","rootNode","Document","getRootNode","ShadowRoot","host","parentItem","focus","preventScroll","previousItem","nextItem","click","button","blur"],"sourceRoot":""}