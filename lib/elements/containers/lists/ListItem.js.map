{"version":3,"file":"elements/containers/lists/ListItem.js","mappings":"2FA0DA,MAAMA,EAAgD,SAClDC,GAOA,MAAO,CACHC,EAAWC,KAEX,MAAM,YAACC,GAAeF,GAChB,UAACG,GAAaD,EACdE,EAAeC,OAAOJ,IACtB,aAACK,EAAe,KAAI,SAAEC,GAAW,EAAK,KAAEC,GAAO,QAAaJ,IAAiBL,EACnF,GAAIQ,EAAU,CACV,MAAME,EAAqBC,QAAQC,IAAIT,EAAa,qBAAsBA,GACtEU,MAAMC,QAAQJ,GACdA,EAAmBK,KAAKN,GAGxBO,OAAOC,eACHd,EAAa,qBAAsB,CAC/Be,MAAO,CAACT,GACRU,UAAU,G,CAK1B,MAAM,KAACC,GAAQpB,EACf,OAAQoB,GACJ,KAAKC,QACDL,OAAOC,eAAeb,EAAWC,EAAc,CAC3CO,IAAK,WACD,OAAOU,KAAKC,aAAad,EAC7B,EACAe,IAAK,SAA4BN,GACzBA,EACAI,KAAKG,aAAahB,EAAM,IAGxBa,KAAKI,gBAAgBjB,EAE7B,IAEJ,MAEJ,KAAKO,OACDA,OAAOC,eAAeb,EAAWC,EAAc,CAC3CO,IAAK,WACD,MAAMe,EAAML,KAAKM,aAAanB,GAC9B,OAAgB,OAARkB,EAAgBE,KAAKC,MAAMH,GAAOpB,CAC9C,EACAiB,IAAK,SAA4BN,GACf,OAAVA,EACAI,KAAKG,aAAahB,EAAMoB,KAAKE,UAAUb,IAGvCI,KAAKI,gBAAgBjB,EAE7B,IAEJ,MAEJ,KAAKuB,OACDhB,OAAOC,eAAeb,EAAWC,EAAc,CAC3CO,IAAK,WACD,MAAMe,EAAML,KAAKM,aAAanB,GAC9B,OAAgB,OAARkB,EAAgBM,WAAWN,GAAOpB,CAC9C,EACAiB,IAAK,SAA4BN,GACf,OAAVA,EACAI,KAAKG,aAAahB,EAAMS,GAGxBI,KAAKI,gBAAgBjB,EAE7B,IAEJ,MAGJ,QACIO,OAAOC,eAAeb,EAAWC,EAAc,CAC3CO,IAAK,WACD,MAAMe,EAAML,KAAKM,aAAanB,GAC9B,OAAgB,OAARkB,EAAgBA,EAAMpB,CAClC,EACAiB,IAAK,SAA4BN,GACf,OAAVA,EACAI,KAAKG,aAAahB,EAAMS,GAGxBI,KAAKI,gBAAgBjB,EAE7B,I,CAMpB,EA0BMyB,EAAwC,SAASlC,GAInD,OACImC,IAEA,MAAM,KAAC1B,EAAI,QAAE2B,GAAWpC,EAQxB,OAPKqC,eAAezB,IAAIH,IACpB4B,eAAeC,OACX7B,EACA0B,EACAC,GAGDD,CAAW,CAE1B,EAWMI,EAAwC,SACtCvC,GAKJ,MAAO,CACHC,EAAWuC,KAEX,MAAM,YAACrC,GAAeF,GAChB,UAACG,GAAaD,EACdE,EAAeC,OAAOkC,IACtB,SAACC,GAAYzC,EAEb0C,EADmB1C,EAAK2C,iBACI,WAC9B,OAAOrB,KAAKsB,WAAYC,cAAcJ,EAC1C,EAAI,WACA,OAAOnB,KAAKuB,cAAcJ,EAC9B,EACAzB,OAAOC,eAAeb,EAAWC,EAAc,CAC3CO,IAAK8B,GACP,CAEV,EAgEA,SAASI,EACLC,EAAY/C,GACZ,GAAIA,EAAM,CACN,MAAM,QAACoC,EAAO,WAAEY,EAAU,QAAEC,EAAO,SAAEC,EAAQ,UAAEC,GAAanD,EACtD8C,EAAUM,SAASC,cAAcN,EAASX,GAahD,GAZIY,GACAhC,OAAOsC,QAAQN,GAAYO,SAAQ,EAAEC,EAAeC,WACzBC,IAAnBD,IAC8B,kBAAnBA,EACPX,EAAQa,iBAAgB,QAAaH,GAAgBC,GAGrDX,EAAQrB,cAAa,QAAa+B,GAAgBlD,OAAOmD,I,IAKrER,EAAS,CACT,MAAOA,QAASW,GAAkBd,EAClC9B,OAAO6C,KAAKZ,GAASM,SAASO,IAC1BF,EAAeE,GAAkBxD,OAAO2C,EAAQa,GAAgB,G,CAwBxE,OArBIZ,IACwB,mBAAbA,EACPA,EAASJ,GAEgB,iBAAbI,GAAyB,WAAYA,EACjDJ,EAAQiB,UAAUlD,MAAMmD,KAAKd,IAG7BJ,EAAQiB,OAAOb,IAGnBC,GACAnC,OAAOsC,QAAQH,GAAWI,SAAQ,EAAEU,EAAQC,MACpCrD,MAAMC,QAAQoD,GACdpB,EAAQqB,iBAAiBF,EAAQC,EAAW,GAAIA,EAAW,IAG3DpB,EAAQqB,iBAAiBF,EAAQC,E,IAItCpB,C,CAEX,OAAOM,SAASC,cAAcN,EAClC,CAEA,MAAMqB,EAAsB,IAAIC,QASa,IAAIC,sBAAsBC,IAQnE,MAAM,MAACC,EAAK,gBAAEC,GAAmBF,EAC3BG,EAA2BN,EAAoBxD,IAAI4D,GACzD,QAAiCd,IAA7BgB,EAAwC,CACxC,MAAM,sBAACC,GAAyBD,EAChCC,EAAsBC,OAAOD,EAAsBE,QAAQJ,GAAkB,E,KAI5C,IAAI,MAAqBK,IAC9DA,EAAQvB,SAASwB,IACb,MAAM,OAAC9E,EAAM,aAAEI,EAAY,SAAE2E,EAAQ,SAAEC,GAAYF,GAC7C,sBAACJ,GAAyBP,EAAoBxD,IAAIX,GACxD0E,EAAsBpB,SAAQ2B,IAC1B,MAAM,WAACC,EAAU,MAAEC,EAAK,WAAEC,GAAcH,EAClCpC,EAAUqC,EAAWG,QACvBxC,GACIuC,EAAWE,SAASlF,IACpB+E,EAAMtC,EAASzC,EAAe2E,EAAUC,E,GAGlD,GACJ,IAuEN,MAAMO,EAA2B,IAAInB,QAQa,IAAIC,sBAAsBC,IAQxE,MAAM,KAACkB,EAAI,qBAAEC,GAAwBnB,EAC/BoB,EAAmCH,EAAyB5E,IAAI6E,GACtE,GAAIE,EAAkC,CAClC,MAAM,2BAACC,GAA8BD,EACrCC,EAA2BhB,OAAOgB,EAA2Bf,QAAQa,GAAuB,E,KAI9D,IAAI,MAAqBZ,IAC3D,IAAIe,EAAsB,KAC1BhF,MAAMmD,KAAKc,EAAQgB,UAAUvC,SAASwB,IAClC,MAAM,OAAC9E,GAAU8E,EACXU,EAAkBxF,GACjB8F,OAAQC,GAAcP,GACvB,2BAACG,GAA8BJ,EAAyB5E,IAAI6E,GAClEG,EAA2BrC,SAAS0C,IAChC,MAAM,UAACC,EAAS,QAAEC,EAAO,YAAEC,GAAeH,EACpCI,EAASH,EAAUZ,QACzB,GAAIe,EAAQ,CACR,MAAM,WAACC,EAAU,SAAEpD,GAAYmD,GACxBN,OAAQQ,GAAiBrD,EAC5BkD,GAAeJ,EAAa,GAAKM,GAAcF,GAC/CC,EAAOG,YAAYJ,GAEvB,MAAM,WAACK,EAAU,YAAEC,EAAW,YAAEC,EAAW,UAAEC,GAAa7B,EAC1D,OAAQ0B,GACJ,KAAKC,EAAa,CACd,MAAM,cAACG,EAAa,cAAEC,GAAiB/B,EACjCgC,EAAqBlG,MAAMmD,KAAK8C,EAAchB,UAAUkB,IAAIb,IAC3DJ,OAAQQ,GAAiBrD,EAC5B2D,EAAgBN,EAChBrD,EAAS2D,GAAeI,UAAUF,GAGlCV,EAAOtC,UAAUgD,GAErB,K,CAEJ,KAAKJ,EAAa,CACd,MAAM,aAACO,EAAY,aAAEC,GAAgBpC,GAC9BgB,OAAQqB,GAAgBD,EAC/BtB,EAAQA,GAASzC,SAASiE,cAC1B,MAAMC,EAAiBJ,GAAgBE,EAAe,GAClDE,EAAiBf,IACjBV,EAAM0B,eAAerE,EAASgE,IAC9BrB,EAAM2B,YAAYtE,EAASoE,IAC3BzB,EAAM4B,kBAEV,K,CAEJ,KAAKb,EAAW,CACZ,MAAM,cAACc,GAAiB3C,EAClB4C,EAAgB9G,MAAMmD,KAAKd,GACjCmD,EAAOtC,UACA2D,EAAcE,QACbC,GAAWA,EAAUtB,IACvBS,KACEa,GAAWF,EAAcE,MAGjC,K,EAGU,GAAd7B,GAAmBI,GACnBC,EAAOtC,OAAOqC,E,IAGxB,GACJ,G,iBC5gBN,SAAS0B,EAAaC,GACpB,OAAOA,EAAIC,QAAQ,mBAAoB,KAAKC,aAC9C,C,2FCSIC,EACAC,EACAC,E,s/BAOJ,IAAMC,EAAoB,EAA1B,cAAmCC,YAiE/BnI,cACIoI,Q,YAvCJ,mBACA,mBAuCI,EAAAjH,KAAI,GAAiB,EAAC,KACtB,EAAAA,KAAI,EAAW8B,SAASoF,iBACpBlH,KAAMmH,WAAWC,aAAc,EAAApH,KAAI,SAAmBqH,KAAKrH,OAC9D,KACD,MAAMsB,EAAatB,KAAKsH,aAAa,CAACC,KAAM,SACtCC,EAAoB,IAAIC,cAC9BD,EAAkBd,QAAQG,GAC1BvF,EAAWoG,mBAAqB,CAACF,GACjClG,EAAWmB,OACPmE,EAAee,QAAQC,WAAU,IAErC5H,KAAK6C,iBAAiB,QAAS,EAAA7C,KAAI,SAAmBqH,KAAKrH,OAC3DA,KAAK6C,iBAAiB,YAAa,EAAA7C,KAAI,SAAuBqH,KAAKrH,OACnEA,KAAK6C,iBAAiB,WAAY,EAAA7C,KAAI,SAAsBqH,KAAKrH,OACjEA,KAAK6C,iBAAiB,UAAW,EAAA7C,KAAI,SAAqBqH,KAAKrH,OAC/DA,KAAK6C,iBAAiB,WAAY,EAAA7C,KAAI,SAAsBqH,KAAKrH,OACjEA,KAAK6C,iBAAiB,UAAW,EAAA7C,KAAI,SAAqBqH,KAAKrH,MACnE,CAhFA6H,QACI,OAAOtI,MAAMmD,KAAK1C,KAAK8H,iBACnB,sDAER,CAEIC,kBACA,OAAO,EAAA/H,KAAI,MACf,CAEIgI,iBACA,MAAM,YAACD,GAAe/H,KACtB,OAAOA,KAAKuB,cACR,oEACCwG,GAAe,EAAI/H,KAAK6H,QAAQE,IAAgB,KAAO,IAChE,CAmEAE,oBACI,MAAMC,EAAWlI,KAAKM,aAAa,YACnCN,KAAKmI,SAAwB,OAAbD,EAAoBE,SAASF,IAAa,CAC9D,CAEAG,mBAAmBC,EAAWC,GAC1B,MAAM,MAAC1B,GAAS7G,MACTwI,MAAOC,EAAWC,OAAQC,GAAc3I,KAAK4I,yBAC9C,QAACC,EAAO,QAAEC,GAAWC,OACrBC,EAAOV,EAAIO,EACXI,EAAMV,EAAIO,GACV,YAACI,EAAW,aAAEC,GAAgBrH,SAASsH,KACvCC,EAAYL,EAAOP,EAAYS,EAC/BI,EAAYL,EAAMN,EAAaQ,EACrCtC,EAAM0C,YAAY,OAAQ,GAAGF,EAAY,EAAIL,EAAOP,EAAYO,OAChEnC,EAAM0C,YAAY,MAAO,GAAGD,EAAY,EAAIL,EAAMN,EAAaM,MACnE,CA2BAO,YACI,MAAMC,EAAS,EAAAzJ,KAAI,OAEnB,OADAyJ,EAAOC,YAAcD,EAAOE,KACQF,EAAOzE,YAC/C,G,uDA5BIhF,KAAK8H,iBACD,gEAEH7F,SAAS2H,IACNA,EAAOC,UAAU,GAEzB,EAAC,WAEYlL,GACT,OAAOY,MAAMmD,KAAK1C,KAAK8H,iBACnB,uDACDgC,MAAKF,GAAUA,EAAOG,SAASpL,MAAY,IAClD,EAAC,WAEiBqL,GACd,OAAIA,aAAgB,IACT7C,WAAW8C,cAElBD,aAAgB,IACT7C,WAAW+C,YAEf/C,WAAWgD,aACtB,EAAC,aASG,MAAMV,EAAS,EAAAzJ,KAAI,OAEnB,OADAyJ,EAAOC,YAAcD,EAAOE,KACQF,EAAOW,WAC/C,EAAC,WAEaC,GACV,MAAMZ,EAAS,EAAAzJ,KAAI,OAEnB,OADAyJ,EAAOC,YAAcW,EACeZ,EAAOa,cAC/C,EAAC,WAESD,GACN,MAAMZ,EAAS,EAAAzJ,KAAI,OAEnB,OADAyJ,EAAOC,YAAcW,EACeZ,EAAOc,UAC/C,EAAC,WAEeF,GACZ,MAAM,KAACG,GAAQH,EACf,OAAOG,aAAgB,EACnBA,EAAKhB,YACL,IACR,EAAC,WAEca,GACE,OAATA,GACA,EAAArK,KAAI,EAAgBA,KAAK6H,QAAQtE,QAAQ8G,GAAK,IAEtD,EAAC,WAEiBI,GACd,MAAM,OAAC9L,GAAU8L,EACXC,EAA2B/L,EAAQgM,QAAQ,cACjD,GAAID,EAAY,CACZ,MAAM,KAAC5K,EAAI,QAAE8K,GAAWF,EACxB,OAAQ5K,GACJ,IAAK,WACD4K,EAAWE,SAAWA,EACtB,MAEJ,IAAK,QAAS,CACV,MAAM,KAACzL,EAAI,MAAES,GAAS8K,EACtBA,EAAWE,SAAU,EACrB5K,KAAK8H,iBACD,uEAAuE3I,MAE1E8C,SAAS4I,IACNA,EAAQD,QAAUC,EAAQjL,OAASA,CAAK,IAE5C,K,CAEJ,IAAK,OACL,IAAK,UACD8K,EAAWI,S,CAK3B,EAAC,WAEmBL,GAChB,MAAM,OAAC9L,GAAU8L,EACjB,GAAI9L,aAAkB,IAAsB,CACxC,MAAMoM,EAAc,EAAA/K,KAAI,SAAa,KAAjBA,KAAkBrB,GAClCoM,GACA,EAAA/K,KAAI,SAAe,KAAnBA,KAAoB+K,E,CAGhC,EAAC,WAEoBN,GACjB,MAAM,cAACO,GAAiBP,EAExB,IADyBzK,KAAK+J,SAAeiB,GACxB,CACjB,MAAM,WAACC,GAAcjL,KACrB,GAAIiL,EACA,IACIjL,KAAKkL,QAEK,CAAd,MAAOC,GAAO,KAEb,CACD,MAAM,WAACnD,GAAchI,KACjBgI,GAAYoD,UACZpD,EAAW6B,WAEf,EAAA7J,KAAI,SAAe,KAAnBA,KAAoB,K,EAGhC,EAAC,WAEmByK,GAChB,MAAM,IAACY,GAAOZ,GACR,WAACzC,GAAchI,KACrB,OAAQqL,GACJ,IAAK,WACoBrD,EACjB,EAAAhI,KAAI,SAAc,KAAlBA,KAAmBgI,IAAe,EAAAhI,KAAI,SAAU,KAAdA,MAClCA,KAAKwJ,cACK8B,MAAM,CAACC,eAAe,IACpCd,EAAMe,kBACN,MAEJ,IAAK,aACgBxD,EACb,EAAAhI,KAAI,SAAU,KAAdA,KAAegI,IAAehI,KAAKwJ,YACnCxJ,KAAKwJ,cACC8B,MAAM,CAACC,eAAe,IAChCd,EAAMe,kBACN,MAEJ,IAAK,OACiBxL,KAAKwJ,aACZ8B,MAAM,CAACC,eAAe,IACjCd,EAAMe,kBACN,MAEJ,IAAK,MACgB,EAAAxL,KAAI,SAAU,KAAdA,OACPsL,MAAM,CAACC,eAAe,IAChCd,EAAMe,kBACN,MAEJ,IAAK,QACL,IAAK,IACD,GAAIxD,EAAY,CACZ,MAAM,KAAClI,GAAQkI,EACf,OAAQlI,GACJ,IAAK,OACL,IAAK,UACDkI,EAAWyD,SACPzD,EAAWoD,UACY,EAAApL,KAAI,SAAgB,KAApBA,KAAqBgI,IAC5BsD,MAAM,CAACC,eAAe,IAE1C,MAEJ,QACIvD,EAAW0D,QAInBjB,EAAMe,iB,CAEV,MAEJ,IAAK,SACD,GAAIxD,EAIA,GAH4ByC,EAAMkB,eAAe7B,MAC7C8B,GAAYA,aAAoBC,KAC/B7L,KAMA,CACD,MAAM,WAACiL,GAAcjL,KACjBiL,IACAjL,KAAK8L,OACL9L,KAAK+L,cAAc,IAAIC,MAAM,QAAS,CAACC,SAAS,KAChDxB,EAAMe,kB,MATVxD,EAAW6B,WACX7B,EAAWsD,MAAM,CAACC,eAAe,IACjCd,EAAMe,kBAWd,MAEJ,IAAK,YACGxD,IAC4ByC,EAAMkB,eAAe7B,MAC7C8B,GAAYA,aAAoBC,KAC/B7L,OAEDgI,EAAW6B,WACX7B,EAAWsD,MAAM,CAACC,eAAe,IACjCd,EAAMe,oBAGd,MAEJ,IAAK,aACD,GAAIxD,EAAY,CACZ,MAAM,KAAClI,GAAQkI,EAEN,YADDlI,IAEKkI,EAAWoD,WACZpD,EAAWyD,SACY,EAAAzL,KAAI,SAAgB,KAApBA,KAAqBgI,IAC5BsD,MAAM,CAACC,eAAe,IACtCd,EAAMe,mB,EASlC,EAAC,WAEoBf,GACjB,MAAM,OAAC9L,EAAM,cAAEqM,GAAiBP,EAChC,GAAI9L,aAAkB,IAAsB,CACxC,MAAMoM,EAAc,EAAA/K,KAAI,SAAa,KAAjBA,KAAkBrB,GACtC,GAAoB,OAAhBoM,IACwB,WAApBA,EAAYjL,MACXiL,EAAYK,UACbtE,EAAiBxH,IAAIyL,IAAcmB,SAEXzB,EAAMkB,eAAe7B,MAC7C8B,GAAYA,aAAoBC,KAC/B7L,MACoB,CACrB,MAAM,WAACgI,GAAchI,KACrB,GAAwB,WAApBgI,GAAYlI,MACZkI,EAAWoD,SAAU,CACrB,IAAIe,EAAkBrF,EAAiBxH,IAAI0I,GACvCmE,GACAA,EAAgBD,SAEpBC,EAAkBnE,EAAWoE,QAAQ,KAAM,CACvCC,SA3WR,MA6WIvF,EAAiB5G,IAAI8H,EAAYmE,GACjC,MAAM,SAACG,GAAYH,EACnBG,EACKC,MAAK,KACFvE,EAAW6B,UAAU,IAExB2C,OAAM,KAAe,IACrBC,SAAQ,KACL3F,EAAiB4F,OAAO1E,EAAW,G,CAG/C,MAAM,QAAC2E,EAAO,QAAEC,GAAWnC,GACrB,KAACzB,EAAI,MAAE6D,EAAK,IAAE5D,EAAG,OAAE6D,GAAU9M,KAAK4I,wBAClCmE,IACF/D,EAAO2D,GAAWE,EAAQF,GAAW1D,EAAM2D,GAAWE,EAASF,GAE7DI,EAAwBhN,KAAK+J,SAAeiB,GAC9C+B,GAAuBC,IACnBhC,aAAyBa,GAAoBb,IAAkBhL,KAC/DgL,EAAcM,MAAM,CAACC,eAAe,KAGpCvL,KAAKsL,MAAM,CAACC,eAAe,IAC3B,EAAAvL,KAAI,SAAe,KAAnBA,KAAoB,QAGvB+M,IACD/M,KAAKsL,MAAM,CAACC,eAAe,IAC3B,EAAAvL,KAAI,SAAe,KAAnBA,KAAoB,M,EAKxC,EAAC,WAEqByK,GAClB,MAAM,OAAC9L,GAAU8L,EACjB,GAAI9L,aAAkB,IAAsB,CACxC,MAAMoM,EAAc,EAAA/K,KAAI,SAAa,KAAjBA,KAAkBrB,GACtC,GAAoB,OAAhBoM,IACyB,YAArBA,EAAYjL,MAAsBiL,EAAYK,UAC9CtE,EAAiBxH,IAAIyL,IAAcmB,SAEXzB,EAAMkB,eAAe7B,MAC7C8B,GAAYA,aAAoBC,KAC/B7L,MACoB,CACrB,MAAM,WAACgI,GAAchI,KACrB,GAAyB,YAArBgI,GAAYlI,MACZkI,EAAWoD,WACVpD,EAAW+B,SAAepL,GAAS,CACpC,IAAIwN,EAAkBrF,EAAiBxH,IAAI0I,GACvCmE,GACAA,EAAgBD,SAEpBC,EAAkBnE,EAAWoE,QAAQ,KAAM,CACvCC,SApaR,MAsaIvF,EAAiB5G,IAAI8H,EAAYmE,GACjC,MAAM,SAACG,GAAYH,EACnBG,EACKC,MAAK,KACFvE,EAAW6B,UAAU,IAExB2C,OAAM,KAAe,IACrBC,SAAQ,KACL3F,EAAiB4F,OAAO1E,EAAW,G,CAK/C,GAFA,EAAAhI,KAAI,SAAe,KAAnBA,KAAoB+K,GACpBA,EAAYO,MAAM,CAACC,eAAe,IACT,YAArBR,EAAYjL,KACZ,GAAKiL,EAAYK,SA0BbL,EAAYP,MAAMc,MAAM,CAACC,eAAe,QA1BjB,CACvB,IAAIY,EAAkBrF,EAAiBxH,IAAIyL,GACvCoB,GACAA,EAAgBD,SAEpBC,EAAkBpB,EAAYqB,QAAQ,KAAM,CACxCC,SA3bZ,MA6bQvF,EAAiB5G,IAAI6K,EAAaoB,GAClC,MAAM,SAACG,GAAYH,EACnBG,EACKC,MAAK,KACF,MAAM,WAACvE,GAAchI,KACrB,EAAAA,KAAI,SAAkB,KAAtBA,MACIgI,IACAlB,EAAiBxH,IAAI0I,IAAakE,SAClClE,EAAWyD,SACXzD,EAAWwC,MAAMc,MAAM,CAACC,eAAe,I,IAG9CiB,OAAM,KAAe,IACrBC,SAAQ,KACL3F,EAAiB4F,OAAO3B,EAAY,G,GAUpE,GAhbInE,GAAiB,QAAQ,aACVe,QAAQlF,QACnB,QAAQ,SAEZoE,EAAe,ixBA2BfC,EAAmB,IAAI/D,QAxC3B,IADC,QAAkB,CAACjD,KAAMd,U,2BAI1B,IADC,QAAkB,CAACc,KAAMC,W,iCAxBxBgH,EAAoB,MAHzB,QAAc,CACX5H,KAAM,YAEJ4H,GAkdN,IAAI8E,EAAgD9E,EAUtBrH,OAAOuN,QACvB,SAASvO,GAIf,MAAM,KAACS,EAAI,SAAEyC,GAAYlD,EACzB,OAAO,QAAQ,SAAU,CACrBgD,WAAY,CACRvC,KAAMA,EACN+I,UAAW,GAEftG,SAAUA,GAElB,GAAG,CACC9C,UAAW+M,EAAiB/M,W,kDC5ehC8H,EACAC,E,0nBAKJ,IAAMqG,EAAN,cAAuClG,YAsLnCnI,cACIoI,Q,YACA,MAAMkG,EAAYnN,KAAKoN,kBACvBpN,KAAKmN,UAAYA,EACjBA,EAAUE,KAAO,WACjB,MAAM/L,EAAatB,KAAKsH,aAAa,CAACC,KAAM,SACtCC,EAAoB,IAAIC,cAC9BD,EAAkBd,QAAQG,GAC1BvF,EAAWoG,mBAAqB,CAACF,GACjClG,EAAWmB,OACPmE,EAAee,QAAQC,WAAU,GAEzC,CAEAK,oBACI,MAAM,SAACE,GAAYnI,KACnBA,KAAKmI,SAAWA,CACpB,CAEAmF,yBAAyBpL,EAAuBwB,EAAyBC,GACrE,MAAM,UAACwJ,GAAanN,KACpB,OAAQkC,GACJ,IAAK,OACD,OAAQyB,GACJ,IAAK,WACL,IAAK,QACDwJ,EAAUE,KAAO,WAAW1J,IAC5B,MAEJ,QACIwJ,EAAUE,KAAO,WAIzB,MAEJ,IAAK,UACDF,EAAUI,YAAcvO,OAAoB,OAAb2E,GAC/B,MAEJ,IAAK,WACDwJ,EAAUK,aAAexO,OAAoB,OAAb2E,GAChC,MAEJ,IAAK,WACDwJ,EAAUM,aAAezO,OAAoB,OAAb2E,GAChC,MAEJ,IAAK,QACDwJ,EAAUO,UAAY/J,EAIlC,CAEAmH,OAAO6C,GACH,MAAM,KAAC7N,EAAI,SAAEsL,GAAYpL,KACzB,OAAQF,GACJ,IAAK,OACL,IAAK,UAAW,CACZ,MAAM2L,EAASkC,IAAUvC,EACzBpL,KAAKoL,SAAWK,EACZA,GACA,EAAAzL,KAAI,SAAc,KAAlBA,MAEJA,KAAK+L,cAAc,IAAIC,MAAM,SAAU,CAACC,SAAS,KACjD,K,EAGZ,CAEAR,SACI,MAAM,KAAC3L,EAAI,SAAEsL,GAAYpL,KACzB,OAAQF,GACJ,IAAK,OACL,IAAK,UACIsL,IACDpL,KAAKoL,UAAW,EAChB,EAAApL,KAAI,SAAc,KAAlBA,OAKhB,CAEA6J,WACI,MAAM,KAAC/J,EAAI,SAAEsL,GAAYpL,KACzB,OAAQF,GACJ,IAAK,OACL,IAAK,UACGsL,IACApL,KAAKoL,UAAW,GAKhC,G,2BAGI,MAAM,KAACZ,GAAQxK,KACf,GAAa,OAATwK,EAAe,CACf,MAAO3D,MAAO+G,GAAapD,EAC3B,IAAKvB,IAAK4E,EAASf,OAAQgB,EAAY9E,KAAM+E,EAAUlB,MAAOmB,GAAahO,KAAK4I,wBAChF,MAAOJ,MAAOC,EAAWC,OAAQC,GAAc6B,EAAK5B,yBAC9C,YAACM,EAAW,aAAEC,GAAgBrH,SAASsH,MACvC,KAACtJ,GAAQE,KACf,GAAa,SAATF,EAAiB,CACjB,MAAMmO,EAA6BzD,EAAKyD,cAAgBnM,SAASsH,MAC3D,WAAC8E,EAAU,UAAEC,GAAaF,EAC1B5E,EAAY2E,EAAYvF,EAAYS,EACpCI,EAAYuE,EAAUlF,EAAaQ,EACzC4E,GAAYG,EACZF,GAAaE,EACbL,GAAWM,EACXL,GAAcK,EACdP,EAAUrE,YAAY,OAAQ,GAC1BF,EAAY,EACZ2E,EAAYvF,EACZsF,OAEJH,EAAUrE,YAAY,MAAO,GACzBD,EAAY,EACZuE,EAAUlF,EACVmF,M,KAGH,CACD,MAAMzE,EAAY2E,EAAYvF,EAAYS,EACpCI,EAAYuE,EAAUlF,EAAaQ,EACnCiF,EAAcpO,KAAK2K,QAAQ,UACjC,GAAoB,OAAhByD,EAAsB,CACtB,MAAOnF,IAAKoF,EAAgBrF,KAAMsF,GAAmBF,EAAYxF,wBACjEmF,GAAYO,EACZN,GAAaM,EACbT,GAAWQ,EACXP,GAAcO,C,CAElBT,EAAUrE,YAAY,OAAQ,GAC1BF,EAAY,EACZ0E,EAAWtF,EACXuF,OAEJJ,EAAUrE,YAAY,MAAO,GACzBD,EAAY,EACZwE,EAAanF,EACbkF,M,EAIhB,GAvSIjH,GAAiB,QAAQ,aACVe,QAAQlF,QACnB,QAAQ,OAAQ,CACZf,WAAY,CACR6M,KAAM,WAGd,QAAQ,OAAQ,CACZ7M,WAAY,CACR6M,KAAM,SAEV3M,SAAU,EACN,QAAQ,YAGhB,QAAQ,OAAQ,CACZF,WAAY,CACR6M,KAAM,YAGd,QAAQ,OAAQ,CACZ7M,WAAY,CACRvC,KAAM,WAIlB0H,EAAe,2+HAxDnB,IADC,QAAc,CAAC1F,SAAU,gC,2BAI1B,IADC,QAAkB,CAACrB,KAAMd,U,2BAI1B,IADC,QAAkB,CAACc,KAAMd,OAAQE,UAAU,K,4BAI5C,IADC,QAAkB,CAACY,KAAMd,U,4BAI1B,IADC,QAAkB,CAACc,KAAMd,U,6BAI1B,IADC,QAAkB,CAACc,KAAMC,QAASb,UAAU,K,+BAI7C,IADC,QAAkB,CAACY,KAAMC,QAASb,UAAU,K,8BAI7C,IADC,QAAkB,CAACY,KAAMC,QAASb,UAAU,K,+BAI7C,IADC,QAAkB,CAACY,KAAMC,W,gCAI1B,IADC,QAAkB,CAACD,KAAMd,OAAQC,aAAc,SAAUC,UAAU,K,2BAhClEgO,EAAwB,IAH7B,QAAc,CACX/N,KAAM,gBAEJ+N,GA8UN,IAAIsB,EAAwDtB,EA0CxDuB,EAAkC/O,OAAOuN,QAC/B,SAASvO,GAQf,MAAM,MAACgQ,EAAK,KAAEvP,EAAI,KAAEW,EAAI,MAAEF,EAAK,QAAE+O,EAAO,KAAEnE,GAAQ9L,EAIlD,OAHI8L,IACAA,EAAKoE,KAAO,SAET,QAAQ,aAAc,CACzBlN,WAAY,CACRwG,UAAW,EACX2G,MAAOH,EACPvP,KAAMA,EACNS,MAAOA,EACPE,KAAMA,GAEV8B,SAAU4I,EAAO,CACbkE,EACAlE,GACA,CACAkE,GAEJ7M,UAAW,CACP6J,MAAOiD,IAGnB,GAAG,CACC7P,UAAW0P,EAAqB1P,UAChCgQ,OAAOpQ,GAMI,IAAI+P,EAAU,IACd/P,EAAMoB,KAAM,WAGvBiP,SAASrQ,GAME,IAAI+P,EAAU,IACd/P,EAAMoB,KAAM,aAGvBkP,MAAMtQ,GAMK,IAAI+P,EAAU,IACd/P,EAAMoB,KAAM,UAGvB0K,KAAK9L,GAKM,IAAI+P,EAAU,IACd/P,EAAMoB,KAAM,SAGvBmP,QAAQvQ,GAKG,IAAI+P,EAAU,IACd/P,EAAMoB,KAAM,a,oCCxd3B8G,EACAC,E,0VAKJ,IAAMqI,EAAN,cAA4ClI,YAqCxCnI,cACIoI,QACA,MAAM3F,EAAatB,KAAKsH,aAAa,CAACC,KAAM,SACtCC,EAAoB,IAAIC,cAC9BD,EAAkBd,QAAQG,GAC1BvF,EAAWoG,mBAAqB,CAACF,GACjClG,EAAWmB,OACPmE,EAAee,QAAQC,WAAU,IAErC,MAAMuF,EAAYnN,KAAKoN,kBACvBD,EAAUE,KAAO,QACjBrN,KAAKmN,UAAYA,CACrB,CAEAG,yBAAyBnO,EAAcuE,EAAyBC,GAC5D,MAAM,UAACwJ,GAAanN,KAEX,UADDb,IAEAgO,EAAUO,UAAY/J,EAGlC,IA9CIiD,GAAiB,QAAQ,aACVe,QAAQlF,QACnB,QAAQ,OAAQ,CACZf,WAAY,CACR6M,KAAM,YAGd,QAAQ,SAEZ1H,EAAe,yUAlBnB,IADC,QAAkB,CAAC/G,KAAMd,U,2BAI1B,IADC,QAAkB,CAACc,KAAMd,OAAQE,UAAU,K,4BAL1CgQ,EAA6B,IAHlC,QAAc,CACX/P,KAAM,qBAEJ+P,GA6DN,IAAIC,EAAkED,EAWtBxP,OAAOuN,QACzC,SAASvO,GAIf,MAAM,KAACS,EAAI,MAAE0I,GAASnJ,EACtB,OAAO,QAAQ,kBAAmB,CAC9BgD,WAAY,CACRvC,KAAMA,GAEVyC,SAAUiG,GAElB,GAAG,CACC/I,UAAWqQ,EAA0BrQ,UACrCsQ,OAAS1Q,IAOL,MAAM,KAACS,EAAI,MAAE0I,GAASnJ,EACtB,OAAO,QAAQ,kBAAmB,CAC9BgD,WAAY,CACRvC,KAAMA,GAEVyC,SAAUiG,EAAMnC,KACZ,EAAEgJ,QAAO9O,WAAW,IAAI,IAAU,CAACT,OAAMuP,QAAO5O,KAAM,QAASF,aAErE,G,oECtGVgH,EACAC,EACAwI,E,8oBAKJ,IAAMC,EAAN,cAAsCtI,YAsClCnI,cACIoI,Q,YAjBJ,mB,+VAkBI,CAAAjH,KAAI,EAAW8B,SAASoF,iBACpBlH,KAAMmH,WAAWC,aAAc,EAAApH,KAAI,SAAaqH,KAAKrH,OACxD,KACD,MAAMsB,EAAatB,KAAKsH,aAAa,CAACC,KAAM,SACtCC,EAAoB,IAAIC,cAC9BD,EAAkBd,QAAQG,GAC1BvF,EAAWoG,mBAAqB,CAACF,GACjClG,EAAWmB,OACPmE,EAAee,QAAQC,WAAU,IAErC5H,KAAK6C,iBAAiB,QAAS,EAAA7C,KAAI,SAAmBqH,KAAKrH,OAC3DA,KAAK6C,iBAAiB,cAAe,EAAA7C,KAAI,SAAyBqH,KAAKrH,OACvEA,KAAK6C,iBAAiB,WAAY,EAAA7C,KAAI,SAAsBqH,KAAKrH,OACjEA,KAAK6C,iBAAiB,QAAS,EAAA7C,KAAI,SAAmBqH,KAAKrH,OAC3DA,KAAK6C,iBAAiB,UAAW,EAAA7C,KAAI,SAAqBqH,KAAKrH,OAC/DA,KAAK6C,iBAAiB,WAAY,EAAA7C,KAAI,SAAsBqH,KAAKrH,OACjEA,KAAK6C,iBAAiB,YAAa,EAAA7C,KAAI,SAAuBqH,KAAKrH,OACnEA,KAAK6C,iBAAiB,UAAW,EAAA7C,KAAI,SAAqBqH,KAAKrH,MACnE,CAtDIgI,iBACA,OAAOhI,KAAKuB,cACR,wBAER,CAEAsG,QACI,OAAOtI,MAAMmD,KAAK1C,KAAK8H,iBACnB,4DAER,CA8CAG,oBACI,MAAM,SAACE,GAAYnI,KACnBA,KAAKmI,SAAWA,CACpB,CAYAqB,YACI,MAAMC,EAAS,EAAAzJ,KAAI,OAEnB,OADAyJ,EAAOC,YAAcD,EAAOE,KACWF,EAAOzE,YAClD,G,uCAdYgF,GACR,OAAIA,aAAgB,IACT7C,WAAW8C,cAElBD,aAAgB,IACT7C,WAAW+C,YAEf/C,WAAWgD,aACtB,EAAC,aASG,MAAMV,EAAS,EAAAzJ,KAAI,OAEnB,OADAyJ,EAAOC,YAAcD,EAAOE,KACWF,EAAOW,WAClD,EAAC,WAEaC,GACV,MAAMZ,EAAS,EAAAzJ,KAAI,OAGnB,OAFAyJ,EAAOC,YAAcW,EACgCZ,EAAO8F,iBAEhE,EAAC,WAESlF,GACN,MAAMZ,EAAS,EAAAzJ,KAAI,OAEnB,OADAyJ,EAAOC,YAAcW,EACkBZ,EAAO+F,aAClD,EAAC,WAEcnF,GACX,MAAM,WAACrC,GAAchI,KACF,OAAfgI,GAAuBA,IAAeqC,IACtCrC,EAAWyH,QAAS,GAEX,OAATpF,IACAA,EAAKoF,QAAS,EAEtB,EAAC,WAEiBhF,GACd,MAAM,OAAC9L,GAAU8L,EACXC,EAA2B/L,EAAQgM,QAAQ,iBACjD,GAAID,EAAY,CACZ,MAAM,KAAC5K,EAAI,QAAE4P,GAAWhF,EACxB,OAAQ5K,GACJ,IAAK,WACD4K,EAAWgF,SAAWA,EACtB,MAEJ,IAAK,QACDhF,EAAWgF,SAAU,EACrB,MAEJ,IAAK,aAAc,CACf,MAAM,WAACC,GAAcjF,EACrB,GAAIiF,IAAeA,EAAW5F,SAAepL,GAAS,CAClD,MAAMgP,GAAS0B,EAAuB/P,IAAIoL,KAAe,EACzDiF,EAAW7E,OAAO6C,GACdA,GACAgC,EAAWnG,WAAW8B,MAAM,CAACC,eAAe,G,CAGpD,K,CAEJ,IAAK,SAAU,CACX,MAAM,OAACqE,GAAUlF,EACjB,GAAIkF,IAAWA,EAAO7F,SAAepL,GAAS,CAC1C,MAAMgP,GAAS0B,EAAuB/P,IAAIoL,KAAe,EACzDkF,EAAO9E,OAAO6C,E,CAElB,K,GAIZlD,EAAMe,iBACV,EAAC,WAEuBf,GACpBA,EAAMe,iBACV,EAAC,WAEoBf,GACjBA,EAAMe,iBACV,EAAC,WAEiBf,GACd,MAAM,cAACO,GAAiBP,GAClB,WAACzC,GAAchI,KAChBA,KAAK+J,SAAeiB,KACpBhD,GAAchI,KAAKwJ,cAAc8B,OAE1C,EAAC,WAEmBb,GAChB,MAAM,OAAC9L,GAAU8L,EACXC,EAA2D/L,EAAQgM,QAAQ,iBAC7ED,IACA,EAAA1K,KAAI,SAAe,KAAnBA,KAAoB0K,GACpB1K,KAAKmI,UAAY,EAEzB,EAAC,WAEoBsC,GACjB,MAAM,cAACO,GAAiBP,GACCzK,KAAK+J,SAAeiB,KAEzChL,KAAKmI,SAAW,EAExB,EAAC,WAEqBsC,GAClB,MAAM,OAAC9L,GAAU8L,EACXC,EAA2B/L,EAAQgM,QAAQ,iBACjD,GAAID,EAAY,CACZ,MAAM,KAAC5K,GAAQ4K,EACf,OAAQ5K,GACJ,IAAK,aAAc,CACf,MAAM,WAAC6P,GAAcjF,EACjBiF,IAAeA,EAAW5F,SAAepL,IACzC0Q,EAAuBnP,IAAIwK,EAAYiF,EAAWvE,UAEtD,K,CAEJ,IAAK,SAAU,CACX,MAAM,OAACwE,GAAUlF,EACbkF,IAAWA,EAAO7F,SAAepL,IACjC0Q,EAAuBnP,IAAIwK,EAAYkF,EAAOxE,UAElD,K,GAIhB,EAAC,WAEmBX,GAChB,MAAM,IAACY,GAAOZ,GACR,WAACzC,GAAchI,KACrB,OAAQqL,GACJ,IAAK,QACD,GAAIrD,EAAY,CACZ,MAAM,KAAClI,GAAQkI,EACf,OAAQlI,GACJ,IAAK,aAAc,CACf,MAAM,WAAC6P,GAAc3H,EACjB2H,IACAA,EAAWlE,SACXkE,EAAWnG,WAAW8B,MAAM,CAACC,eAAe,KAEhD,K,CAEJ,IAAK,SAAU,CACX,MAAM,OAACqE,GAAU5H,EACb4H,GACAA,EAAOnE,SAEX,K,CAEJ,QACIzD,EAAW0D,QAInBjB,EAAMe,iB,CAEV,MAEJ,IAAK,YACD,GAAIxD,EAAY,CACZ,MAAM6H,EAAe,EAAA7P,KAAI,SAAc,KAAlBA,KAAmBgI,GACpC6H,GACAA,EAAavE,MAAM,CAACC,eAAe,G,KAGtC,CACD,MAAM/B,EAAYxJ,KAAKwJ,YACnBA,GACAA,EAAU8B,MAAM,CAACC,eAAe,G,CAGxCd,EAAMe,kBACN,MAEJ,IAAK,aACD,GAAIxD,EAAY,CACZ,MAAM8H,EAAW,EAAA9P,KAAI,SAAU,KAAdA,KAAegI,GAC5B8H,GACAA,EAASxE,MAAM,CAACC,eAAe,G,KAGlC,CACD,MAAMwE,EAAW,EAAA/P,KAAI,SAAU,KAAdA,MACb+P,GACAA,EAASzE,MAAM,CAACC,eAAe,G,CAGvCd,EAAMe,kBACN,MAEJ,IAAK,YACD,GAAIxD,EAAY,CACZ,MAAM,KAAClI,GAAQkI,EAEN,WADDlI,IAEAkI,EAAW4H,QAAQnE,SACnBhB,EAAMe,kB,CAKlB,MAEJ,IAAK,OAAQ,CACT,MAAMhC,EAAYxJ,KAAKwJ,YACnBA,GACAA,EAAU8B,MAAM,CAACC,eAAe,IAEpCd,EAAMe,kBACN,K,CAEJ,IAAK,MAAO,CACR,MAAMuE,EAAW,EAAA/P,KAAI,SAAU,KAAdA,MACb+P,GACAA,EAASzE,MAAM,CAACC,eAAe,IAEnCd,EAAMe,kBACN,K,EAGZ,GAlRI5E,GAAiB,QAAQ,aACVe,QAAQlF,QACnB,QAAQ,SAEZ4M,EAAyB,IAAItM,QAC7B8D,EAAe,uHAbnB,IADC,QAAkB,CAAC/G,KAAMd,U,2BAI1B,IADC,QAAkB,CAACc,KAAMd,U,kCAnBxBsQ,EAAuB,IAH5B,QAAc,CACXnQ,KAAM,eAEJmQ,GA8SN,IAAIU,EAAsDV,C,sCCnTtD1I,EACAC,EACAoJ,E,gVAKJ,IAAMC,EAAN,cAA0ClJ,YAmHtCnI,cACIoI,QACA,MAAM3F,EAAatB,KAAKsH,aAAa,CAACC,KAAM,SACtCC,EAAoB,IAAIC,cAC9BD,EAAkBd,QAAQG,GAC1BvF,EAAWoG,mBAAqB,CAACF,GACjClG,EAAWmB,OACPmE,EAAee,QAAQC,WAAU,GAEzC,CAEAK,oBACI,MAAM,SAACE,GAAYnI,KACnBA,KAAKmI,SAAWA,CACpB,CAEAmF,yBAAyBnO,EAAcuE,EAAyBC,GAC5D,OAAQxE,GACJ,IAAK,QAED,MAEJ,IAAK,SAAU,CACX,MAAM,WAACmC,GAActB,KACrB,GAAiB,OAAb2D,EACArC,EAAW6O,QAAQF,EAASrI,WAAU,QAErC,CACD,MAAMqI,EAAW3O,EAAWC,cAA2B,eACnD0O,GACAA,EAAS/E,Q,CAGjB,K,EAGZ,IApHItE,GAAiB,QAAQ,aACVe,QAAQlF,QACnB,QAAQ,SACR,QAAQ,OAAQ,CACZf,WAAY,CACRvC,KAAM,aAGd,QAAQ,OAAQ,CACZuC,WAAY,CACRvC,KAAM,iBAIlB8Q,GAAW,QAAQ,OAAQ,CACvBvO,WAAY,CACR6M,KAAM,UAGd1H,EAAe,83DAjDnB,IADC,QAAc,CAAC1F,SAAU,4C,iCAI1B,IADC,QAAc,CAACA,SAAU,oC,6BAI1B,IADC,QAAkB,CAACrB,KAAMC,W,6BAI1B,IADC,QAAkB,CAACD,KAAMC,W,8BAI1B,IADC,QAAkB,CAACD,KAAMC,W,+BAI1B,IADC,QAAkB,CAACD,KAAMC,QAASb,UAAU,K,6BAI7C,IADC,QAAkB,CAACY,KAAMd,OAAQE,UAAU,K,4BAI5C,IADC,QAAkB,CAACY,KAAMd,U,2BAI1B,IADC,QAAkB,CAACc,KAAMd,OAAQE,UAAU,K,4BAI5C,IADC,QAAkB,CAACY,KAAMd,U,2BA/BxBkR,EAA2B,IAHhC,QAAc,CACX/Q,KAAM,mBAEJ+Q,GA0JN,IAAIE,EAA8DF,EA2C9DG,EAAwC3Q,OAAOuN,QACrC,SAASvO,GASf,MAAM,MAACgQ,EAAK,KAAEvP,EAAI,KAAEW,EAAI,MAAEF,EAAK,QAAE+O,EAAO,WAAEgB,EAAU,OAAEC,GAAUlR,EAOhE,OANIiR,IACAA,EAAWf,KAAO,cAElBgB,IACAA,EAAOhB,KAAO,WAEX,QAAQ,gBAAiB,CAC5BlN,WAAY,CACRwG,UAAW,EACX2G,MAAOH,EACPvP,KAAMA,EACNS,MAAOA,EACPE,KAAMA,GAEV8B,SAAU+N,EAAa,CAACA,GAAcC,EAAS,CAACA,QAAUxN,EAC1DP,UAAW,CACP6J,MAAOiD,IAGnB,GAAG,CACC7P,UAAWsR,EAAwBtR,UACnCgQ,OAAOpQ,GAMI,IAAI2R,EAAa,IACjB3R,EAAMoB,KAAM,WAGvBiP,SAASrQ,GAME,IAAI2R,EAAa,IACjB3R,EAAMoB,KAAM,aAGvBkP,MAAMtQ,GAMK,IAAI2R,EAAa,IACjB3R,EAAMoB,KAAM,UAGvB6P,WAAWjR,GAKA,IAAI2R,EAAa,IACjB3R,EAAMoB,KAAM,eAGvB8P,OAAOlR,GAKI,IAAI2R,EAAa,IACjB3R,EAAMoB,KAAM,Y,sCCnS3B8G,EACAC,E,gVAKJ,IAAMyJ,EAAN,cAA+CtJ,YAwB3CnI,cACIoI,QACA,MAAM3F,EAAatB,KAAKsH,aAAa,CAACC,KAAM,SACtCC,EAAoB,IAAIC,cAC9BD,EAAkBd,QAAQG,GAC1BvF,EAAWoG,mBAAqB,CAACF,GACjClG,EAAWmB,OACPmE,EAAee,QAAQC,WAAU,GAEzC,CAEA0F,yBAAyBnO,EAAcuE,EAAyBC,GAC5D,OAAQxE,GACJ,IAAK,QAAS,CACV,MAAMuP,EAAQ1O,KAAKsB,WAAWC,cAAgC,kBAC1DmN,IACAA,EAAM6B,YAAc5M,GAExB,K,EAGZ,IAlCIiD,GAAiB,QAAQ,aACVe,QAAQlF,QACnB,QAAQ,SAEZoE,EAAe,4JAVnB,IADC,QAAkB,CAAC/G,KAAMd,U,2BAI1B,IADC,QAAkB,CAACc,KAAMd,OAAQE,UAAU,K,4BAP1CoR,EAAgC,IAHrC,QAAc,CACXnR,KAAM,wBAEJmR,GAgDN,IAAIE,EAAwEF,C,iuBC3B5E,MAAMG,EAYF5R,YACIH,GAaAsB,KAAKrB,OAASD,EAAKC,OACnBqB,KAAKmF,WAAazG,EAAKyG,WACvBnF,KAAKjB,aAAeL,EAAKK,cAAgB,KACzCiB,KAAK0D,SAAWhF,EAAKgF,eAAYtB,EACjCpC,KAAK2D,SAAWjF,EAAKiF,eAAYvB,EACjCpC,KAAK4F,aAAelH,EAAKkH,cAAgB,EACzC5F,KAAK6F,aAAe,IAAI6K,EAAehS,EAAKmH,cAAgB,IAC5D7F,KAAKuF,cAAgB7G,EAAK6G,eAAiB,EAC3CvF,KAAKwF,cAAgB,IAAIkL,EAAehS,EAAK8G,eAAiB,IAC9DxF,KAAKoG,cAAgB1H,EAAK0H,eAAiB,EAC/C,CAEWuK,6BACP,OAAO,CACX,CAEWtL,yBACP,OAAO,CACX,CAEWD,yBACP,OAAO,CACX,CAEWE,uBACP,OAAO,CACX,CAEIqL,sBACA,OAAOF,EAAsBE,eACjC,CAEItL,kBACA,OAAOoL,EAAsBpL,WACjC,CAEID,kBACA,OAAOqL,EAAsBrL,WACjC,CAEIE,gBACA,OAAOmL,EAAsBnL,SACjC,EAGJ,IAAIsL,EAAkDH,E,cAiCtD,IAAIC,EApBJ,MAGI7R,YAAYgJ,GAFZ,mBAGI,EAAA7H,KAAI,EAAU6H,EAAMgJ,QAAO,IAC/B,CAEIpM,aACA,OAAO,EAAAzE,KAAI,OAAQyE,MACvB,CAEA4F,KAAKyG,GACD,OAAO,EAAA9Q,KAAI,OAAQ8Q,IAAU,IACjC,CAEAtM,SACI,OAAO,EAAAxE,KAAI,OAAQwE,QACvB,GAgBJ,MAAMuM,EAMFlS,YAAYiB,GAHZ,mBACA,mBAGIE,KAAKF,KAAOA,EACZ,EAAAE,KAAI,EAAkB,KAAI,KAC1B,EAAAA,KAAI,EAAW,KAAI,IACvB,CAEIgR,oBACA,OAAO,EAAAhR,KAAI,MACf,CAEIrB,aACA,OAAO,EAAAqB,KAAI,MACf,E,4BAEO,EAAAiR,yBAA4B,IAAI,MACnCC,iBAAiBzG,EAAmBuG,GAC5BvG,aAAiBsG,GACjB,EAAAtG,EAAK,EAAkBuG,EAAa,IAE5C,CAEAG,UAAU1G,EAAmB9L,GACrB8L,aAAiBsG,GACjB,EAAAtG,EAAK,EAAW9L,EAAM,IAE9B,GASR,IAAIsS,EAAqDF,EAAeE,gCACjEF,EAAeE,yBAEtB,IAAIG,EAAoCL,EAcxC,MAAMM,EAGFxS,cAFA,mBAGI,EAAAmB,KAAI,EAAc,IAAIsR,IAAK,IAC/B,CAEAC,aAAa9G,GACT,MAAM,KAAC3K,GAAQ2K,EACT+G,EAAY,EAAAxR,KAAI,OAAYV,IAAIQ,GACtCmR,EAAyBC,iBAAiBzG,EAAOzK,MAC7CwR,GACAA,EAAUvP,SAASwP,IACfA,EAAWhH,EAAM,GAG7B,CAEA5H,iBAAiB/C,EAAc4R,GAC3B,MAAMF,EAAY,EAAAxR,KAAI,OAAYV,IAAIQ,GAClC0R,EACAA,EAAU/R,KAAKiS,GAGf,EAAA1R,KAAI,OAAYE,IAAIJ,EAAM,CAAC4R,GAEnC,CAEAC,oBAAoB7R,EAAc4R,GAC9B,MAAMF,EAAY,EAAAxR,KAAI,OAAYV,IAAIQ,GACtC,GAAI0R,EAAW,CACX,MAAMI,EAAgBJ,EAAUK,WAC5BJ,GAAcA,GAAcC,IAE5BE,GAAiB,GACjBJ,EAAUlO,OAAOsO,EAAe,GAEZ,GAApBJ,EAAU/M,QACV,EAAAzE,KAAI,OAAY0M,OAAO5M,E,CAGnC,CAEAiM,cAActB,GACVwG,EAAyBE,UAAU1G,EAAOzK,MAC1CA,KAAKuR,aAAa9G,EACtB,E,cAuBJ,MAAMqH,UAAsBT,EAKxBxS,cACIoI,Q,YALJ,mBACA,mBACA,mBAII,EAAAjH,KAAI,EAAe,KAAI,KACvB,EAAAA,KAAI,EAAY,GAAE,KAClB,EAAAA,KAAI,GAAgB,EAAK,IAC7B,CAEI+R,iBACA,OAAO,EAAA/R,KAAI,MACf,CAEAgS,UAAUD,GACN,GAAmB,OAAfA,EAAqB,CACrB,IAAIE,EAAoBF,GAAc/R,MACjC+R,WAAYG,GAAgBH,EACjC,MAAQE,GAAsC,OAAjBC,KACvBH,WAAYG,GAAgBA,GAC9BD,EAAoBC,GAAgBlS,KAExC,GAAKiS,EAID,MAAM,IAAIE,UAAU,oFAHpB,EAAAnS,KAAI,EAAe+R,EAAU,I,MAOjC,EAAA/R,KAAI,EAAe,KAAI,IAE/B,CAEAoS,eACI,EAAApS,KAAI,GAAgB,EAAI,IAC5B,CAEAqS,aACIrS,KAAK+L,cAAc,IAAIqF,EAAW,gBAClC,EAAApR,KAAI,OAAUsD,OAAO,GACrB,EAAAtD,KAAI,GAAgB,EAAK,IAC7B,CAEAsS,aACI,OAAO,EAAAtS,KAAI,OAAU6Q,OACzB,CAEAU,aAAa9G,GACTxD,MAAMsK,aAAa9G,GACnB,MAAM,WAACsH,GAAc/R,KACjB+R,GACAA,EAAWR,aAAa9G,EAEhC,E,mEAEe7L,EAAkB8E,EAAeC,GAC5C,MAAMH,EAAU,EAAAxD,KAAI,OACduS,EAAS,IAAI3B,EAAkB,CACjCjS,OAAQqB,KACRmF,WAAYyL,EAAkBD,gBAC9B5R,aAAcH,EACd8E,WAAUC,aAEdH,EAAQ/D,KAAK8S,GACR,EAAAvS,KAAI,SACLA,KAAK+L,cAAc,IAAIqF,EAAW,gBAClC5N,EAAQF,OAAO,GAEvB,EAAC,WAEaiP,GACV,EAAAvS,KAAI,OAAUP,KAAK8S,GACd,EAAAvS,KAAI,SACLA,KAAK+L,cAAc,IAAIqF,EAAW,gBAClC,EAAApR,KAAI,OAAUsD,OAAO,GAE7B,EAEO,EAAAkP,yBAA4B,IAAI,MACnCC,cAAczI,EAAiBpL,EAAkB8E,EAAeC,GACxDqG,aAAgB8H,GAChB,EAAA9H,EAAI,SAAe,KAAnBA,EAAoBpL,EAAU8E,EAAUC,EAEhD,CAEA+O,aAAa1I,EAAiBuI,GACtBvI,aAAgB8H,GAChB,EAAA9H,EAAI,SAAc,KAAlBA,EAAmBuI,EAE3B,GAIR,IAAIC,EAAqDV,EAAcU,gCAChEV,EAAcU,yBAErB,IAAIG,EAAkCb,EA2CtC,MAAMc,UAAwBd,EAG1BjT,cACIoI,QAHJ,mBAII,EAAAjH,KAAI,EAAe,IAAIsR,IAAK,IAChC,E,cAEO,EAAAuB,8BAAiC,IAAI,MACxCtJ,YAAYS,EAAmBpL,EAAkBgB,GACzCoK,aAAgB4I,GAChB,EAAA5I,EAAI,OAAa9J,IAAItB,EAAUgB,EAEvC,CAEAkT,YAAY9I,EAAmBpL,GAC3B,GAAIoL,aAAgB4I,EAChB,OAAO,EAAA5I,EAAI,OAAa1K,IAAIV,EAEpC,GAI2DgU,EAAgBC,qCAC5ED,EAAgBC,8B,cAsMvB,IAAIE,EA9KJ,cAAiEjB,EAK7DjT,YAAYgJ,GACRZ,QALJ,mBAMI,EAAAjH,KAAI,EAAU6H,GAAOgJ,SAAW,GAAE,IACtC,CAEAmB,UAAUD,GACN9K,MAAM+K,UAAUD,GAChB,EAAA/R,KAAI,OAAQiC,SAAS2H,IACjBA,EAAOoI,UAAUD,EAAW,GAEpC,CAEItN,aACA,OAAO,EAAAzE,KAAI,OAAQyE,MACvB,CAEAnF,IAAIwR,GACA,OAAO,EAAA9Q,KAAI,OAAQ8Q,IAAU,IACjC,CAEAA,MAAMzG,GACF,OAAO,EAAArK,KAAI,OAAQuD,QAAQ8G,EAC/B,CAEA7F,SACI,OAAO,EAAAxE,KAAI,OAAQwE,QACvB,CAEAwO,KAAKC,GACD,MACMC,EADQ,EAAAlT,KAAI,OACS0F,KACvB,CAACkE,EAAQuJ,KACE,CACH9I,KAAMT,EACNkH,MAAOqC,MAInBD,EAAaF,MACT,CAACI,EAAeC,IACLJ,EACHG,EAAc/I,KAAMgJ,EAAchJ,QAI9C,EAAArK,KAAI,EAAUkT,EAAaxN,KAAI4N,GAAiBA,EAAcjJ,OAAK,KACnE,MAAMkI,EAAS,IAAI3B,EAAkB,CACjCjS,OAAQqB,KACRmF,WAAYyL,EAAkBtL,UAC9Bc,cAAe8M,EAAaxN,KAAI4N,GAAiBA,EAAcxC,UAEnE0B,EAAyBE,aAAa1S,KAAMuS,EAChD,CAEApC,WAAWtI,GACP,MAAM0L,EAAS,EAAAvT,KAAI,QACb,WAAC+R,GAAc/R,KACjB+R,GACAlK,EAAM5F,SAAQ2H,IACVA,EAAOoI,UAAUD,EAAW,IAGpCwB,EAAOjQ,OAAO,EAAG,KAAMuE,GACvB,MAAM0K,EAAS,IAAI3B,EAAkB,CACjCjS,OAAQqB,KACRmF,WAAYyL,EAAkBxL,YAC9BG,cAAe,EACfC,cAAeqC,IAEnB2K,EAAyBE,aAAa1S,KAAMuS,EAChD,CAEA9P,UAAUoF,GACN,MAAM0L,EAAS,EAAAvT,KAAI,QACb,OAACyE,GAAU8O,GACX,WAACxB,GAAc/R,KACjB+R,GACAlK,EAAM5F,SAAQ2H,IACVA,EAAOoI,UAAUD,EAAW,IAGpCwB,EAAO9T,QAAQoI,GACf,MAAM0K,EAAS,IAAI3B,EAAkB,CACjCjS,OAAQqB,KACRmF,WAAYyL,EAAkBxL,YAC9BG,cAAed,EACfe,cAAeqC,IAEnB2K,EAAyBE,aAAa1S,KAAMuS,EAChD,CAEAiB,OAAO1C,KAAkBjJ,GACrB,MAAM0L,EAAS,EAAAvT,KAAI,QACb,OAACyE,GAAU8O,EAEjB,GADsBE,KAAKC,IAAI5C,IACVrM,EAAQ,CACzB,GAAIqM,GAAS,EAAG,CACZ,MAAM,WAACiB,GAAc/R,KACrB6H,EAAM5F,SAAQ2H,IACVA,EAAOoI,UAAUD,EAAW,IAE5BjB,EAAQrM,EACR8O,EAAOjQ,OAAOwN,EAAO,KAAMjJ,GAG3B0L,EAAO9T,QAAQoI,E,MAGlB,GAAIiJ,EAAQ,EAAG,CAChBA,EAAQrM,EAASqM,EACjB,MAAM,WAACiB,GAAc/R,KACjB+R,GACAlK,EAAM5F,SAAQ2H,IACVA,EAAOoI,UAAUD,EAAW,IAGpCwB,EAAOjQ,OAAOwN,EAAO,KAAMjJ,E,CAE/B,MAAM0K,EAAS,IAAI3B,EAAkB,CACjCjS,OAAQqB,KACRmF,WAAYyL,EAAkBxL,YAC9BG,cAAeuL,EACftL,cAAeqC,EAAMgJ,UAEzB2B,EAAyBE,aAAa1S,KAAMuS,E,CAEpD,CAEArH,OAAOb,GACH,MAAMkJ,EAAS,EAAAvT,KAAI,OACb8Q,EAAQyC,EAAOhQ,QAAQ8G,GAC7B,GAAIyG,GAAS,EAAG,CACZ,MAAMzG,EAAOkJ,EAAOjQ,OAAOwN,EAAO,GAAG,IAC/B,WAACiB,GAAc/R,KACjB+R,GACA1H,EAAK2H,UAAU,MAEnB,MAAMO,EAAS,IAAI3B,EAAkB,CACjCjS,OAAQqB,KACRmF,WAAYyL,EAAkBvL,YAC9BO,aAAckL,EACdjL,aAAc,CAACwE,KAEnBmI,EAAyBE,aAAa1S,KAAMuS,E,CAEpD,CAEAoB,QACI,MAAM9L,EAAQ,EAAA7H,KAAI,QACZ,OAACyE,GAAUoD,EACjB,GAAIpD,EAAS,EAAG,CACZ,MAAMoB,EAAegC,EAAMvE,OAAO,IAC5B,WAACyO,GAAc/R,KACjB+R,GACAlM,EAAa5D,SAAS2R,IAClBA,EAAc5B,UAAU,KAAK,IAGrC,MAAMO,EAAS,IAAI3B,EAAkB,CACjCjS,OAAQqB,KACRmF,WAAYyL,EAAkBvL,YAC9BO,aAAc,EACdC,aAAcA,IAElB2M,EAAyBE,aAAa1S,KAAMuS,E,CAEpD,G,mFAsEI,MAAM/O,EAAU,EAAAxD,KAAI,OAAUsD,OAAO,GACjCE,EAAQiB,OAAS,GACjB,EAAAzE,KAAI,OAAU,KAAdA,KAAewD,EAEvB,EAAC,WAEiBiH,GACd,IAAK,EAAAzK,KAAI,OAAgB,CACrB,MAAM,OAACrB,EAAM,cAAEqS,GAAiBvG,EAC1BoJ,EAAY,EAAA7T,KAAI,OAAaV,IAAe0R,GAClD,GAAI6C,EAAW,CACX,MAAM,QAAC/S,GAAW+S,GACZ,WAAC9P,EAAU,iBAAE+P,EAAgB,UAAEC,EAAS,QAAEC,GAAWlT,EACvDkT,EACIjQ,GAAcpF,aAAkBgU,GAC5BmB,EACA,EAAA9T,KAAI,OAAUP,QACPd,EAAO2T,aACLhM,QAAO7C,IACJ,MAAM,aAAC1E,GAAgB0E,EACvB,OAAOqQ,EAAiB7P,SACpBlF,EACH,KAKb,EAAAiB,KAAI,OAAUP,QACPd,EAAO2T,cAGlB,EAAAtS,KAAI,SAAS,KAAbA,OAEK+T,GAAapV,aAAkBoU,IACpC,EAAA/S,KAAI,OAAUP,QACPd,EAAO2T,cAEd,EAAAtS,KAAI,SAAS,KAAbA,OAGCrB,GAAUqS,IACXjN,GAAcpF,aAAkBgU,GAC5BmB,EACA,EAAA9T,KAAI,OAAUP,QACPd,EAAO2T,aACLhM,QAAO7C,IACJ,MAAM,aAAC1E,GAAgB0E,EACvB,OAAOqQ,EAAiB7P,SACpBlF,EACH,KAKb,EAAAiB,KAAI,OAAUP,QACPd,EAAO2T,cAGlB,EAAAtS,KAAI,SAAS,KAAbA,OAEK+T,GAAapV,aAAkBoU,IACpC,EAAA/S,KAAI,OAAUP,QACPd,EAAO2T,cAEd,EAAAtS,KAAI,SAAS,KAAbA,O,EAKpB,EAGJ,IAAIiU,EAvHJ,MAUIpV,YAAY6S,G,YATZ,mBACA,mBACA,mBAEA,mBAMI,EAAA1R,KAAI,EAAa0R,EAAQ,KACzB,EAAA1R,KAAI,EAAY,GAAE,KAClB,EAAAA,KAAI,GAAiB,EAAK,KAC1B,EAAAA,KAAI,EAAe,IAAI+C,QAAS,IACpC,CAEAmR,QAAQlK,EAAiBlJ,GACrB,EAAAd,KAAI,GAAiB,EAAK,KAC1B,MAAMmU,EAAa,EAAAnU,KAAI,OACvB,IAAI6T,EAAYM,EAAW7U,IAAI0K,GAC/B,GAAK6J,EAODM,EAAWjU,IAAI8J,EAAM6J,OAPT,CACZ,MAAMO,EAAW,EAAApU,KAAI,SAAmBqH,KAAKrH,MAC7CgK,EAAKnH,iBAAiB,cAAeuR,GACrCP,EAAY,CAACO,WAAUtT,WACvBqT,EAAWjU,IAAI8J,EAAM6J,E,CAK7B,CAEAQ,UAAUrK,GAEN,IAAI6J,EADe,EAAA7T,KAAI,OACIV,IAAI0K,GAC/B,GAAI6J,EAAW,CACX,MAAM,SAACO,GAAYP,EACnB7J,EAAK2H,oBAAoB,cAAeyC,E,CAEhD,CAEAE,aACI,EAAAtU,KAAI,OAAUsD,OAAO,GACrB,EAAAtD,KAAI,GAAiB,EAAI,IAC7B,E,GC9sBAuU,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBrS,IAAjBsS,EACH,OAAOA,EAAaC,QAGrB,IAAIC,EAASL,EAAyBE,GAAY,CAGjDE,QAAS,CAAC,GAOX,OAHAE,EAAoBJ,GAAUG,EAAQA,EAAOD,QAASH,GAG/CI,EAAOD,OACf,CCrBAH,EAAoBM,EAAI,CAACH,EAASI,KACjC,IAAI,IAAI1J,KAAO0J,EACXP,EAAoBQ,EAAED,EAAY1J,KAASmJ,EAAoBQ,EAAEL,EAAStJ,IAC5E3L,OAAOC,eAAegV,EAAStJ,EAAK,CAAE4J,YAAY,EAAM3V,IAAKyV,EAAW1J,IAE1E,ECNDmJ,EAAoBQ,EAAI,CAACE,EAAKC,IAAUzV,OAAOZ,UAAUsW,eAAeC,KAAKH,EAAKC,G,8CC+B9EvO,EACAC,E,w/BAKJ,IAAMyO,EAAN,cAAuCtO,YAyEnCnI,cACIoI,Q,YAxCJ,mBACA,mBACA,mBAuCI,MAAM3F,EAAatB,KAAKsH,aAAa,CAACC,KAAM,SACtCC,EAAoB,IAAIC,cAC9BD,EAAkBd,QAAQG,GAC1BvF,EAAWoG,mBAAqB,CAACF,GACjClG,EAAWmB,OACPmE,EAAee,QAAQC,WAAU,IAErC,EAAA5H,KAAI,EAAU,KAAI,KAClB,EAAAA,KAAI,EAAS,KAAI,KACjB,EAAAA,KAAI,EAAY,KAAI,KACpBsB,EAAWuB,iBAAiB,aAAc,EAAA7C,KAAI,SAAwBqH,KAAKrH,MAC/E,CAlFIuV,YACA,OAAO,EAAAvV,KAAI,MACf,CAEIwV,cACA,OAAO,EAAAxV,KAAI,MACf,CAEIwK,WACA,OAAO,EAAAxK,KAAI,MACf,CA0EAiI,oBACI,MAAM,SAACE,GAAYnI,KACnBA,KAAKmI,SAAWA,CACpB,CAEAmF,yBAAyBnO,EAAcuE,EAAyBC,GAC5D,OAAQxE,GACJ,IAAK,WACDa,KAAK+L,cAAc,IAAIC,MAAM,SAAU,CAACC,SAAS,KACjD,MAEJ,IAAK,QAAS,CACV,MAAM,WAAC3K,GAActB,KACfyV,EAAYnU,EAAWC,cAAc,gBACvCkU,IACAA,EAAUlF,YAAc5M,GAE5B,K,EAGZ,G,mEAEuB8G,GACnB,MAAM,OAAC9L,GAAU8L,GACVtL,KAAMuW,GAA6B/W,EAC1C,OAAQ+W,GACJ,IAAK,UAAW,CACZ,MAAMlU,EAA4B7C,EAAQgX,mBAAmB,GAC7D,EAAA3V,KAAI,EAAYwB,aAAmB,EAAAoU,EAAsBpU,EAAU,KAAI,KACvE,K,CAEJ,IAAK,QAAS,CACV,MAAMA,EAA4B7C,EAAQgX,mBAAmB,GAC7D,EAAA3V,KAAI,EAAUwB,aAAmBqU,gBAAkBrU,EAAU,KAAI,KACjE,K,CAEJ,IAAK,OAAQ,CACT,MAAMA,EAA4B7C,EAAQgX,mBAAmB,GAC7D,EAAA3V,KAAI,EAASwB,aAAmB,IAAmBA,EAAU,KAAI,KACjE,K,EAGZ,GA3FIoF,GAAiB,QAAQ,aACVe,QAAQlF,QACnB,QAAQ,SAEZoE,EAAe,qzBA1BnB,IADC,QAAkB,CAAC/G,KAAMd,U,2BAI1B,IADC,QAAkB,CAACc,KAAMY,U,+BAI1B,IADC,QAAkB,CAACZ,KAAMd,OAAQE,UAAU,K,4BAI5C,IADC,QAAkB,CAACY,KAAMC,W,iCAI1B,IADC,QAAkB,CAACD,KAAMC,W,6BAI1B,IADC,QAAkB,CAACD,KAAMC,QAASb,UAAU,K,+BA/B3CoW,EAAwB,IAH7B,QAAc,CACXnW,KAAM,gBAEJmW,GAqIN,IAAIQ,EAAwDR,C","sources":["webpack://editor/./src/elements/Element.ts","webpack://editor/./src/elements/Snippets.ts","webpack://editor/./src/elements/containers/menus/Menu.ts","webpack://editor/./src/elements/containers/menus/MenuItem.ts","webpack://editor/./src/elements/containers/menus/MenuItemGroup.ts","webpack://editor/./src/elements/containers/toolbars/ToolBar.ts","webpack://editor/./src/elements/containers/toolbars/ToolBarItem.ts","webpack://editor/./src/elements/containers/toolbars/ToolBarItemGroup.ts","webpack://editor/./src/models/Model.ts","webpack://editor/webpack/bootstrap","webpack://editor/webpack/runtime/define property getters","webpack://editor/webpack/runtime/hasOwnProperty shorthand","webpack://editor/./src/elements/containers/lists/ListItem.ts"],"sourcesContent":["import { ModelList, ModelNode, ModelChangeRecord, ModelChangeObserver, ModelChangeObserverOptions } from \"../models/Model\";\r\nimport { camelToTrain } from \"./Snippets\";\r\n\r\nexport { CustomElement };\r\nexport { ReactiveChildElements };\r\nexport { QueryProperty };\r\nexport { QueryAllProperty };\r\nexport { AttributeProperty };\r\nexport { reactiveElement };\r\nexport { revokeReactiveElement };\r\nexport { reactiveChildElements };\r\nexport { revokeReactiveChildElements };\r\nexport { element };\r\nexport { fragment };\r\nexport { textNode };\r\nexport { AttributeMutationMixin };\r\nexport { AttributeType };\r\nexport { areAttributesMatching };\r\nexport { AttributeMutationMixinBase };\r\nexport { trimMultilineIndent };\r\nexport { Stylesheet };\r\n\r\nexport { reactiveElementsMap };\r\n\r\ninterface AttributePropertyDecorator {\r\n    (\r\n        init: {\r\n            type: typeof String;\r\n            observed?: boolean;\r\n            defaultValue?: string | null;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Number;\r\n            observed?: boolean;\r\n            defaultValue?: number | null;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Boolean;\r\n            observed?: boolean;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Object;\r\n            observed?: boolean;\r\n            defaultValue?: any | null;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n}\r\n\r\nconst AttributeProperty: AttributePropertyDecorator = function(\r\n    init: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Object;\r\n        observed?: boolean;\r\n        defaultValue?: string | number | any | null;\r\n        name?: string;\r\n    }\r\n) {\r\n    return <E extends HTMLElement>(\r\n        target: E, property: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(property);\r\n        const {defaultValue = null, observed = false, name = camelToTrain(propertyName)} = init;\r\n        if (observed) {\r\n            const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n            if (Array.isArray(observedAttributes)) {\r\n                observedAttributes.push(name);\r\n            }\r\n            else {\r\n                Object.defineProperty(\r\n                    constructor, \"observedAttributes\", {\r\n                        value: [name],\r\n                        writable: false\r\n                    }\r\n                );\r\n            }\r\n        }\r\n        const {type} = init;\r\n        switch (type) {\r\n            case Boolean: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        return this.hasAttribute(name);\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value) {\r\n                            this.setAttribute(name, \"\");\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Object: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(name);\r\n                        return (val !== null) ? JSON.parse(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(name, JSON.stringify(value));\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Number: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(name);\r\n                        return (val !== null) ? parseFloat(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(name, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case String:\r\n            default: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(name);\r\n                        return (val !== null) ? val : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(name, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n    \r\nfunction Stylesheet(text: string): CSSStyleSheet {\r\n    const stylesheet = new CSSStyleSheet();\r\n    (stylesheet as any).replaceSync(text);\r\n    return stylesheet;\r\n}\r\n\r\nfunction trimMultilineIndent(text: string): string {\r\n    const newlineIndex = text.indexOf(\"\\n\");\r\n    text = text.substring(newlineIndex + 1);\r\n    const indentMatch = text.match(/^[\\s]*/);\r\n    if (indentMatch) {\r\n        const indent = text.substring(0, indentMatch[0].length);\r\n        text = text.replaceAll(indent, \"\").trimEnd();\r\n    }\r\n    return text;\r\n}\r\n\r\ninterface CustomElementDecorator {\r\n    (init: {\r\n        name: string;\r\n        options?: ElementDefinitionOptions\r\n    }): <C extends CustomElementConstructor>(elementCtor: C) => C;\r\n}\r\n\r\nconst CustomElement: CustomElementDecorator = function(init: {\r\n    name: string;\r\n    options?: ElementDefinitionOptions\r\n}) {\r\n    return <C extends CustomElementConstructor>(\r\n        elementCtor: C\r\n    ) => {\r\n        const {name, options} = init;\r\n        if (!customElements.get(name)) {\r\n            customElements.define(\r\n                name,\r\n                elementCtor,\r\n                options\r\n            );\r\n        }\r\n        return elementCtor;\r\n    }\r\n}\r\n\r\ninterface QueryPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryProperty: QueryPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(propertyKey);\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return this.shadowRoot!.querySelector(selector);\r\n        } : function(this: HTMLElement) {\r\n            return this.querySelector(selector);\r\n        }\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\ninterface QueryAllPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryAllProperty: QueryAllPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(propertyKey);\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return Array.from(this.shadowRoot!.querySelectorAll(selector));\r\n        } : function(this: HTMLElement) {\r\n            return Array.from(this.querySelectorAll(selector));\r\n        };\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\nfunction fragment(...nodes: (Node | string)[]): DocumentFragment {\r\n    const fragment = document.createDocumentFragment();\r\n    fragment.append(...nodes);\r\n    return fragment;\r\n}\r\n\r\nfunction textNode(text: string): Node {\r\n    return document.createTextNode(text);\r\n}\r\n\r\ninterface HTMLElementInit {\r\n    options?: ElementCreationOptions,\r\n    attributes?: {\r\n        [name: string]: number | string | boolean | undefined\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    children?: Node | string | (Node | string)[] | NodeList | ReactiveChildElements,\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction element<E extends HTMLElementTagNameMap[K], K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): E;\r\nfunction element(\r\n    tagName: string, init?: HTMLElementInit): HTMLElement;\r\nfunction element<K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): HTMLElementTagNameMap[K] {\r\n    if (init) {\r\n        const {options, attributes, dataset, children, listeners} = init;\r\n        const element = document.createElement(tagName, options);\r\n        if (attributes) {\r\n            Object.entries(attributes).forEach(([attributeName, attributeValue]) => {\r\n                if (attributeValue !== undefined) {\r\n                    if (typeof attributeValue === \"boolean\") {\r\n                        element.toggleAttribute(camelToTrain(attributeName), attributeValue);\r\n                    }\r\n                    else {\r\n                        element.setAttribute(camelToTrain(attributeName), String(attributeValue));\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        if (dataset) {\r\n            const {dataset: elementDataset} = element;\r\n            Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                elementDataset[datasetEntry_i] = String(dataset[datasetEntry_i]);\r\n            });\r\n        }\r\n        if (children) {\r\n            if (typeof children === \"function\") {\r\n                children(element);\r\n            }\r\n            else if (typeof children === \"object\" && \"length\" in children) {\r\n                element.append(...Array.from(children));\r\n            }\r\n            else {\r\n                element.append(children);\r\n            }\r\n        }\r\n        if (listeners) {\r\n            Object.entries(listeners).forEach(([name_i, listener_i]) => {\r\n                if (Array.isArray(listener_i)) {\r\n                    element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                }\r\n                else {\r\n                    element.addEventListener(name_i, listener_i);\r\n                }\r\n            });\r\n        }\r\n        return element;\r\n    }\r\n    return document.createElement(tagName);\r\n}\r\n\r\nconst reactiveElementsMap = new WeakMap<ModelNode, {\r\n    observerOptions: ModelChangeObserverOptions,\r\n    reactiveElementsArray: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }[]\r\n}>();\r\n\r\nconst reactiveElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    model: ModelNode,\r\n    reactiveElement: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }\r\n}) => {\r\n    const {model, reactiveElement} = heldValue;\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    if (reactiveElementsMapEntry !== undefined) {\r\n        const {reactiveElementsArray} = reactiveElementsMapEntry;\r\n        reactiveElementsArray.splice(reactiveElementsArray.indexOf(reactiveElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveElementsPropertyObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    records.forEach((record_i) => {\r\n        const {target, propertyName, oldValue, newValue} = record_i;\r\n        const {reactiveElementsArray} = reactiveElementsMap.get(target)!;\r\n        reactiveElementsArray.forEach(reactiveElement_i => {\r\n            const {elementRef, react, properties} = reactiveElement_i;\r\n            const element = elementRef.deref();\r\n            if (element) {\r\n                if (properties.includes(propertyName!)) {\r\n                    react(element, propertyName!, oldValue, newValue);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveElement<M extends ModelNode, E extends Element, K extends string>(\r\n    model: M,\r\n    element: E,\r\n    properties: K[],\r\n    react: (object: E, property: K, oldValue: any, newValue: any) => void\r\n): E;\r\nfunction reactiveElement<M extends ModelNode, E extends Element>(\r\n    model: M,\r\n    element: E,\r\n    properties: string[],\r\n    react: (element: E, property: string, oldValue: any, newValue: any) => void\r\n): E {\r\n    const elementRef = new WeakRef(element);\r\n    const reactiveElement = {elementRef, react, properties};\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    reactiveElementsFinalizationRegistry.register(element, {model, reactiveElement});\r\n    if (!reactiveElementsMapEntry) {\r\n        const observerOptions = {\r\n            properties: true,\r\n            propertiesFilter: properties\r\n        };\r\n        const reactiveElementsArray = [reactiveElement];\r\n        reactiveElementsMap.set(model, {observerOptions, reactiveElementsArray});\r\n        reactiveElementsPropertyObserver.observe(model, observerOptions);\r\n    }\r\n    else {\r\n        const {reactiveElementsArray, observerOptions} = reactiveElementsMapEntry;\r\n        const {propertiesFilter} = observerOptions;\r\n        reactiveElementsArray.push(reactiveElement);\r\n        observerOptions.propertiesFilter = propertiesFilter ?\r\n            propertiesFilter.concat(properties.filter(\r\n                property_i => !propertiesFilter.includes(property_i)\r\n            )) : properties.filter(\r\n                (property_i, i, properties) => properties.indexOf(property_i) === i\r\n            )\r\n    }\r\n    properties.forEach((property_i) => {\r\n        if (property_i in model) {\r\n            const value = Reflect.get(model, property_i, model);\r\n            react(element, <any>property_i, <any>undefined, value);\r\n        }\r\n    });\r\n    return element;\r\n}\r\n\r\nfunction revokeReactiveElement<M extends ModelNode, E extends Element>(\r\n    model: M,\r\n    element: E\r\n): void {\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    if (reactiveElementsMapEntry) {\r\n        const {reactiveElementsArray} = reactiveElementsMapEntry;\r\n        const reactiveElementIndex = reactiveElementsArray.findIndex(\r\n            reactiveElement => reactiveElement.elementRef.deref() === element\r\n        );\r\n        if (reactiveElementIndex > -1) {\r\n            reactiveElementsArray.splice(reactiveElementIndex, 1);\r\n        }\r\n        if (reactiveElementsArray.length === 0) {\r\n            reactiveElementsMap.delete(model);\r\n        }\r\n    }\r\n}\r\n\r\ninterface ReactiveChildElements {\r\n    (parent: ParentNode): void;\r\n}\r\n\r\nconst reactiveChildElementsMap = new WeakMap<ModelList, {\r\n    reactiveChildElementsArray: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }[]\r\n}>();\r\n\r\nconst reactiveChildElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    list: ModelList,\r\n    reactiveChildElement: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }\r\n}) => {\r\n    const {list, reactiveChildElement} = heldValue;\r\n    const reactiveChildrenElementsMapEntry = reactiveChildElementsMap.get(list);\r\n    if (reactiveChildrenElementsMapEntry) {\r\n        const {reactiveChildElementsArray} = reactiveChildrenElementsMapEntry;\r\n        reactiveChildElementsArray.splice(reactiveChildElementsArray.indexOf(reactiveChildElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveChildElementsObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    let range: null | Range = null;\r\n    Array.from(records.values()).forEach((record_i) => {\r\n        const {target} = record_i;\r\n        const list = <ModelList>target;\r\n        const {length: listLength} = list;\r\n        const {reactiveChildElementsArray} = reactiveChildElementsMap.get(list)!;\r\n        reactiveChildElementsArray.forEach((reactiveChildElements_i) => {\r\n            const {parentRef, mapping, placeholder} = reactiveChildElements_i;\r\n            const parent = parentRef.deref();\r\n            if (parent) {\r\n                const {firstChild, children} = parent;\r\n                const {length: childrenCount} = children;\r\n                if (placeholder && listLength > 0 && firstChild == placeholder) {\r\n                    parent.removeChild(placeholder);\r\n                }\r\n                const {changeType, LIST_INSERT, LIST_REMOVE, LIST_SORT} = record_i;\r\n                switch (changeType) {\r\n                    case LIST_INSERT: {\r\n                        const {insertedIndex, insertedItems} = record_i;\r\n                        const insertedItemsArray = Array.from(insertedItems.values()).map(mapping);\r\n                        const {length: childrenCount} = children;\r\n                        if (insertedIndex < childrenCount) {\r\n                            children[insertedIndex].before(...insertedItemsArray);\r\n                        }\r\n                        else {\r\n                            parent.append(...insertedItemsArray);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_REMOVE: {\r\n                        const {removedIndex, removedItems} = record_i;\r\n                        const {length: removedCount} = removedItems;\r\n                        range = range ?? document.createRange();\r\n                        const removeEndIndex = removedIndex + (removedCount - 1);\r\n                        if (removeEndIndex < childrenCount) {\r\n                            range.setStartBefore(children[removedIndex]);\r\n                            range.setEndAfter(children[removeEndIndex]);\r\n                            range.deleteContents();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_SORT: {\r\n                        const {sortedIndices} = record_i;\r\n                        const childrenArray = Array.from(children);\r\n                        parent.append(\r\n                            ...sortedIndices.filter(\r\n                                index_i => index_i < childrenCount\r\n                            ).map(\r\n                                index_i => childrenArray[index_i]\r\n                            )\r\n                        );\r\n                        break;\r\n                    }\r\n                }\r\n                if (listLength == 0 && placeholder) {\r\n                    parent.append(placeholder);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveChildElements<Model extends ModelNode>(\r\n    list: ModelList<Model>,\r\n    mapping: (item: Model) => Element,\r\n    placeholder?: Element\r\n): ReactiveChildElements {\r\n    return (parent: ParentNode) => {\r\n        const parentRef = new WeakRef(parent);\r\n        const reactiveChildElementsMapEntry = reactiveChildElementsMap.get(list);\r\n        const reactiveChildElement = {parentRef, mapping, placeholder};\r\n        reactiveChildElementsFinalizationRegistry.register(parent, {list, reactiveChildElement});\r\n        if (!reactiveChildElementsMapEntry) {\r\n            const reactiveChildElementsArray = [reactiveChildElement];\r\n            reactiveChildElementsMap.set(list, {reactiveChildElementsArray});\r\n            reactiveChildElementsObserver.observe(list, {\r\n                childList: true\r\n            });\r\n        }\r\n        else {\r\n            const {reactiveChildElementsArray} = reactiveChildElementsMapEntry;\r\n            reactiveChildElementsArray.push(reactiveChildElement);\r\n        }\r\n        const children = list.length == 0 && placeholder ?\r\n            [placeholder] : Array.from(list.values()).map(mapping);\r\n        parent.replaceChildren(...children);\r\n    }\r\n}\r\n\r\nfunction revokeReactiveChildElements<Model extends ModelNode>(\r\n    list: ModelList<Model>,\r\n    parent: ParentNode,\r\n): void {\r\n    const reactiveChildElementsMapEntry = reactiveChildElementsMap.get(list);\r\n    if (reactiveChildElementsMapEntry) {\r\n        const {reactiveChildElementsArray} = reactiveChildElementsMapEntry;\r\n        const reactiveChildElementsIndex = reactiveChildElementsArray.findIndex(\r\n            reactiveChildElement => reactiveChildElement.parentRef.deref() === parent\r\n        );\r\n        if (reactiveChildElementsIndex > -1) {\r\n            reactiveChildElementsArray.splice(reactiveChildElementsIndex, 1);\r\n        }\r\n        if (reactiveChildElementsArray.length === 0) {\r\n            reactiveChildElementsMap.delete(list);\r\n        }\r\n    }\r\n}\r\n\r\ninterface AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n    attach(element: Element): void;\r\n    detach(element: Element): void;\r\n}\r\n\r\ntype AttributeType = \"string\" | \"boolean\" | \"list\";\r\n\r\nfunction areAttributesMatching(\r\n    referenceAttributeType: AttributeType,\r\n    referenceAttributeName: string, referenceAttributeValue: string,\r\n    attributeName: string, attributeValue: string | null): boolean {\r\n    if (referenceAttributeName == attributeName) {\r\n        switch (referenceAttributeType) {\r\n            case \"boolean\":\r\n                return referenceAttributeValue == \"\" && attributeValue == \"\";\r\n            case \"string\":\r\n                return referenceAttributeValue !== \"\" && (referenceAttributeValue == attributeValue);\r\n            case \"list\":\r\n                return (referenceAttributeValue !== \"\" && attributeValue !== null) && new RegExp(`${referenceAttributeValue}\\s*?`, \"g\").test(attributeValue );\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nclass AttributeMutationMixinBase implements AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n\r\n    constructor(attributeName: string, attributeType: AttributeType = \"boolean\", attributeValue: string = \"\") {\r\n        this.attributeName = attributeName;\r\n        this.attributeType = attributeType;\r\n        this.attributeValue = attributeValue;\r\n    }\r\n\r\n    attach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n\r\n    detach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n}","\r\nexport { snakeToCamel };\r\nexport { camelToSnake };\r\nexport { trainToCamel };\r\nexport { camelToTrain };\r\n\r\nfunction snakeToCamel(str: string) {\r\n  return str.split('_').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToSnake(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '_').toLowerCase();\r\n}\r\n\r\nfunction trainToCamel(str: string) {\r\n  return str.split('-').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToTrain(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '-').toLowerCase();\r\n}","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuElement };\r\nexport { EMenu };\r\n\r\ninterface HTMLEMenuElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    firstItem(): HTMLEMenuItemElement | null;\r\n    items(): HTMLEMenuItemElement[];\r\n    name: string;\r\n    contextual: boolean;\r\n    connectedCallback(): void;\r\n    positionContextual(x: number, y: number): void;\r\n}\r\n\r\ninterface HTMLEMenuElementConstructor {\r\n    prototype: HTMLEMenuElement;\r\n    new(): HTMLEMenuElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menu\": HTMLEMenuElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\nvar toggleAnimations: WeakMap<HTMLEMenuItemElement, Animation>;\r\nvar HIDE_DELAY_MS = 200;\r\nvar SHOW_DELAY_MS = 400;\r\n\r\n@CustomElement({\r\n    name: \"e-menu\"\r\n})\r\nclass HTMLEMenuElementBase extends HTMLElement implements HTMLEMenuElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    items(): HTMLEMenuItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        ));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        const {activeIndex} = this;\r\n        return this.querySelector<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem:focus-within\"\r\n        ) ?? activeIndex > -1 ? this.items()[activeIndex] ?? null : null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    contextual!: boolean;\r\n\r\n    #walker: TreeWalker;\r\n    #activeIndex: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: flex;\r\n                flex-direction: column;\r\n            \r\n                padding: 3px;\r\n                background-color: white;\r\n                width: max-content;\r\n                box-sizing: border-box;\r\n            \r\n                -webkit-box-shadow: var(--menu-box-shadow);\r\n                box-shadow: var(--menu-box-shadow);\r\n            }\r\n            \r\n            :host([contextual]) {\r\n                z-index: 1;\r\n                position: absolute;\r\n            \r\n                transition-property: opacity;\r\n                transition-duration: 0.2s;\r\n                opacity: 0;\r\n            }\r\n            \r\n            :host([contextual]:focus-within) {\r\n                opacity: 1;\r\n            }\r\n        `;\r\n        toggleAnimations = new WeakMap();\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#activeIndex = -1;\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"mouseout\", this.#handleMouseOutEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const tabindex = this.getAttribute(\"tabindex\");\r\n        this.tabIndex = tabindex !== null ? parseInt(tabindex) : -1;\r\n    }\r\n\r\n    positionContextual(x: number, y: number): void {\r\n        const {style} = this;\r\n        const {width: menuWidth, height: menuHeight} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        const left = x + scrollX;\r\n        const top = y + scrollY;\r\n        const {clientWidth, clientHeight} = document.body;\r\n        const overflowX = left + menuWidth - clientWidth;\r\n        const overflowY = top + menuHeight - clientHeight;\r\n        style.setProperty(\"left\", `${overflowX > 0 ? left - menuWidth : left}px`);\r\n        style.setProperty(\"top\", `${overflowY > 0 ? top - menuHeight : top}px`);\r\n    }\r\n\r\n    #collapseSubmenus(): void {\r\n        this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem[expanded]\"\r\n        )\r\n        .forEach((item_i) => {\r\n            item_i.collapse();\r\n        });\r\n    }\r\n    \r\n    #nearestItem(target: Element): HTMLEMenuItemElement | null {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextNode();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        return menu instanceof HTMLEMenuElementBase ?\r\n            menu.firstItem() :\r\n            null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        if (item !== null) {\r\n            this.#activeIndex = this.items().indexOf(item);\r\n        }\r\n    }\r\n    \r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetItem = (<HTMLElement>target).closest(\"e-menuitem\");\r\n        if (targetItem) {\r\n            const {type, checked} = targetItem;\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    targetItem.checked = !checked;\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    const {name, value} = targetItem;\r\n                    targetItem.checked = true;\r\n                    this.querySelectorAll<HTMLEMenuItemElement>(\r\n                        `:is(:scope, :scope > e-menuitemgroup) > e-menuitem[type=radio][name=${name}]`\r\n                    )\r\n                    .forEach((radio_i) => {\r\n                        radio_i.checked = radio_i.value == value;\r\n                    });\r\n                    break;\r\n                }\r\n                case \"menu\":\r\n                case \"submenu\": {\r\n                    targetItem.toggle();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem) {\r\n                this.#setActiveItem(nearestItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const {contextual} = this;\r\n            if (contextual) {\r\n                try {\r\n                    this.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const {activeItem} = this;\r\n                if (activeItem?.expanded) {\r\n                    activeItem.collapse();\r\n                }\r\n                this.#setActiveItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.firstItem() :\r\n                    this.firstItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.firstItem();\r\n                firstItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                lastItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"menu\":\r\n                        case \"submenu\": {\r\n                            activeItem.expand();\r\n                            if (activeItem.expanded) {\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                            }\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            activeItem.click();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                    else {\r\n                        const {contextual} = this;\r\n                        if (contextual) {\r\n                            this.blur();\r\n                            this.dispatchEvent(new Event(\"close\", {bubbles: true}));\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            if (!activeItem.expanded) {\r\n                                activeItem.expand();\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                                event.stopPropagation();\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOutEvent(event: MouseEvent): void {\r\n        const {target, relatedTarget} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem !== null) {\r\n                if (nearestItem.type == \"submenu\" &&\r\n                    !nearestItem.expanded) {\r\n                    toggleAnimations.get(nearestItem)?.cancel();\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLEMenuElement\r\n                ) == this;\r\n                if (isTargetClosestMenu) {\r\n                    const {activeItem} = this;\r\n                    if (activeItem?.type == \"submenu\" &&\r\n                        activeItem.expanded) {\r\n                        let toggleAnimation = toggleAnimations.get(activeItem);\r\n                        if (toggleAnimation) {\r\n                            toggleAnimation.cancel();\r\n                        }\r\n                        toggleAnimation = activeItem.animate(null, {\r\n                            duration: HIDE_DELAY_MS\r\n                        });\r\n                        toggleAnimations.set(activeItem, toggleAnimation);\r\n                        const {finished} = toggleAnimation;\r\n                        finished\r\n                            .then(() => {\r\n                                activeItem.collapse();\r\n                            })\r\n                            .catch(() => undefined)\r\n                            .finally(() => {\r\n                                toggleAnimations.delete(activeItem);\r\n                            });\r\n                    }\r\n                    const {clientX, clientY} = event;\r\n                    const {left, right, top, bottom} = this.getBoundingClientRect();\r\n                    const intersectsWithMouse = !(\r\n                        left > clientX || right < clientX || top > clientY || bottom < clientY\r\n                    );\r\n                    const containsRelatedTarget = this.contains(<Node>relatedTarget);\r\n                    if (intersectsWithMouse && containsRelatedTarget) {\r\n                        if (relatedTarget instanceof HTMLEMenuElement && relatedTarget !== this) {\r\n                            relatedTarget.focus({preventScroll: true});\r\n                        }\r\n                        else {\r\n                            this.focus({preventScroll: true});\r\n                            this.#setActiveItem(null);\r\n                        }\r\n                    }\r\n                    if (!intersectsWithMouse) {\r\n                        this.focus({preventScroll: true});\r\n                        this.#setActiveItem(null);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem !== null) {\r\n                if (nearestItem.type === \"submenu\" && nearestItem.expanded) {\r\n                    toggleAnimations.get(nearestItem)?.cancel();\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLEMenuElement\r\n                ) == this;\r\n                if (isTargetClosestMenu) {\r\n                    const {activeItem} = this;\r\n                    if (activeItem?.type === \"submenu\" &&\r\n                        activeItem.expanded && \r\n                        !activeItem.contains(<Node>target)) {\r\n                        let toggleAnimation = toggleAnimations.get(activeItem);\r\n                        if (toggleAnimation) {\r\n                            toggleAnimation.cancel();\r\n                        }\r\n                        toggleAnimation = activeItem.animate(null, {\r\n                            duration: SHOW_DELAY_MS\r\n                        });\r\n                        toggleAnimations.set(activeItem, toggleAnimation);\r\n                        const {finished} = toggleAnimation;\r\n                        finished\r\n                            .then(() => {\r\n                                activeItem.collapse();\r\n                            })\r\n                            .catch(() => undefined)\r\n                            .finally(() => {\r\n                                toggleAnimations.delete(activeItem);\r\n                            });\r\n                    }\r\n                    this.#setActiveItem(nearestItem);\r\n                    nearestItem.focus({preventScroll: true});\r\n                    if (nearestItem.type === \"submenu\") {\r\n                        if (!nearestItem.expanded) {\r\n                            let toggleAnimation = toggleAnimations.get(nearestItem);\r\n                            if (toggleAnimation) {\r\n                                toggleAnimation.cancel();\r\n                            }\r\n                            toggleAnimation = nearestItem.animate(null, {\r\n                                duration: HIDE_DELAY_MS\r\n                            });\r\n                            toggleAnimations.set(nearestItem, toggleAnimation);\r\n                            const {finished} = toggleAnimation;\r\n                            finished\r\n                                .then(() => {\r\n                                    const {activeItem} = this;\r\n                                    this.#collapseSubmenus();\r\n                                    if (activeItem) {\r\n                                        toggleAnimations.get(activeItem)?.cancel();\r\n                                        activeItem.expand();\r\n                                        activeItem.menu?.focus({preventScroll: true});\r\n                                    }\r\n                                })\r\n                                .catch(() => undefined)\r\n                                .finally(() => {\r\n                                    toggleAnimations.delete(nearestItem);\r\n                                });\r\n                        }\r\n                        else {\r\n                            nearestItem.menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuElement: HTMLEMenuElementConstructor = HTMLEMenuElementBase;\r\n\r\ninterface EMenuConstructor {\r\n    prototype: HTMLEMenuElement;\r\n    new(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }): HTMLEMenuElement;\r\n}\r\n\r\nvar EMenu = <EMenuConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }) {\r\n        const {name, children} = init;\r\n        return element(\"e-menu\", {\r\n            attributes: {\r\n                name: name,\r\n                tabindex: -1,\r\n            },\r\n            children: children\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuElement.prototype,\r\n    }\r\n);","import { CustomElement, AttributeProperty, QueryProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\n\r\nexport { HTMLEMenuItemElement };\r\nexport { EMenuItem };\r\n\r\ninterface HTMLEMenuItemElementConstructor {\r\n    prototype: HTMLEMenuItemElement;\r\n    new(): HTMLEMenuItemElement;\r\n}\r\n\r\ninterface HTMLEMenuItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n    get menu(): HTMLEMenuElement | null;\r\n    name: string;\r\n    label: string | null;\r\n    value: string;\r\n    hotkey: string;\r\n    disabled: boolean;\r\n    checked: boolean;\r\n    expanded: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(attributeName: string, oldValue: string | null, newValue: string | null): void;\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitem\": HTMLEMenuItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitem\"\r\n})\r\nclass HTMLEMenuItemElementBase extends HTMLElement implements HTMLEMenuItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n    \r\n    @QueryProperty({selector: \":scope > e-menu[slot=menu]\"})\r\n    menu!: HTMLEMenuElement | null;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string | null;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    hotkey!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    checked!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    expanded!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    overflown!: boolean;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"button\", observed: true})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"icon\"\r\n                }\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"label\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"arrow\"\r\n                }\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: flex;\r\n                user-select: none;\r\n                white-space: nowrap;\r\n                box-sizing: border-box;\r\n            }\r\n            \r\n            :host([disabled]) {\r\n                opacity: 0.38;\r\n                pointer-events: none;\r\n            }\r\n            \r\n            :host(:focus-within) {\r\n                background-color: var(--focused-item-color);\r\n            }\r\n\r\n            :host(:focus-visible) {\r\n                outline: none;\r\n            }\r\n            \r\n            :host(:is([type=\"menu\"], [type=\"submenu\"])) ::slotted([slot=\"menu\"]) {\r\n                z-index: 1;\r\n                position: absolute;\r\n            }\r\n            \r\n            :host(:is([type=\"menu\"], [type=\"submenu\"]):not([expanded])) ::slotted([slot=\"menu\"]) {\r\n                opacity: 0;\r\n                pointer-events: none;\r\n            }\r\n            \r\n            :host([type=\"submenu\"]) [part=\"icon\"] {\r\n                visibility: hidden;\r\n            }\r\n            \r\n            :host([type=\"menu\"]) [part=\"icon\"],\r\n            :host(:not([type=\"submenu\"])) [part=\"arrow\"] {\r\n                display: none;\r\n            }\r\n            \r\n            :host(:is([type=\"checkbox\"], [type=\"radio\"])[checked]) {\r\n                --icon-color: black;\r\n                --icon-image: url(\"/assets/done_FILL0_wght400_GRAD0_opsz48.svg\");\r\n            }\r\n            \r\n            :host([type=\"submenu\"]) {\r\n                --arrow-color: black;\r\n                --arrow-image: url(\"/assets/arrow_right_FILL0_wght400_GRAD0_opsz48.svg\");\r\n            }\r\n            \r\n            [part=\"icon\"],\r\n            [part=\"label\"],\r\n            [part=\"arrow\"] {\r\n                pointer-events: none;\r\n            }\r\n            \r\n            [part=\"icon\"] {\r\n                flex: none;\r\n                display: inline-block;\r\n                width: 18px;\r\n                height: 18px;\r\n                padding: 2px;\r\n                overflow: hidden;\r\n                margin-right: 4px;\r\n            }\r\n            \r\n            [part=\"label\"] {\r\n                flex: auto;\r\n                line-height: 18px;\r\n                padding: 2px;\r\n                margin-left: 8px;\r\n                margin-right: 8px;\r\n            }\r\n            \r\n            :host(:is(:not([type]), [type=\"button\"], [type=\"radio\"], [type=\"checkbox\"])[checked]) [part=\"icon\"] {\r\n                background-color: var(--activated-item-color);\r\n            }\r\n            \r\n            :host(:is(:not([type]), [type=\"button\"], [type=\"radio\"], [type=\"checkbox\"])) [part=\"icon\"]::before {\r\n                display: inline-block;\r\n                width: 18px;\r\n                height: 18px;\r\n                content: \"\";\r\n                mask-size: 18px 18px;\r\n                -webkit-mask-size: 18px 18px;\r\n                background-color: var(--icon-color, none);\r\n                -webkit-mask-image: var(--icon-image, none);\r\n                mask-image: var(--icon-image, none);\r\n                filter: var(--icon-filter, none);\r\n            }\r\n            \r\n            [part=\"arrow\"] {\r\n                flex: none;\r\n                display: inline-block;\r\n                width: 18px;\r\n                height: 18px;\r\n                margin: 1px 4px 1px 1px;\r\n            }\r\n            \r\n            [part=\"arrow\"]::after {\r\n                display: inline-block;\r\n                width: 18px;\r\n                height: 18px;\r\n                margin: 1px;\r\n                content: \"\";\r\n                mask-size: 18px 18px;\r\n                -webkit-mask-size: 18px 18px;\r\n                background-color: var(--arrow-color, none);\r\n                -webkit-mask-image: var(--arrow-image, none);\r\n                mask-image: var(--arrow-image, none);\r\n                filter: var(--arrow-filter, none);\r\n            }\r\n\r\n            :host(:hover):host-context(e-menubar:focus),\r\n            :host(:hover):host-context(e-menubar:not(:focus-within)) {\r\n                background-color: var(--hovered-item-color);\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const internals = this.attachInternals();\r\n        this.internals = internals;\r\n        internals.role = \"menuitem\";\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    attributeChangedCallback(attributeName: string, oldValue: string | null, newValue: string | null): void {\r\n        const {internals} = this;\r\n        switch (attributeName) {\r\n            case \"type\": {\r\n                switch (newValue) {\r\n                    case \"checkbox\":\r\n                    case \"radio\": {\r\n                        internals.role = `menuitem${newValue}`;\r\n                        break;\r\n                    }\r\n                    default: {\r\n                        internals.role = \"menuitem\";\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"checked\": {\r\n                internals.ariaChecked = String(newValue !== null);\r\n                break;\r\n            }\r\n            case \"disabled\": {\r\n                internals.ariaDisabled = String(newValue !== null);\r\n                break;\r\n            }\r\n            case \"expanded\": {\r\n                internals.ariaExpanded = String(newValue !== null);\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                internals.ariaLabel = newValue;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                const expand = force ?? !expanded;\r\n                this.expanded = expand;\r\n                if (expand) {\r\n                    this.#positionMenu();\r\n                }\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (!expanded) {\r\n                    this.expanded = true;\r\n                    this.#positionMenu();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (expanded) {\r\n                    this.expanded = false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            let {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const {type} = this;\r\n            if (type === \"menu\") {\r\n                const offsetParent = <HTMLElement>(menu.offsetParent ?? document.body);\r\n                const {offsetLeft, offsetTop} = offsetParent;\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                itemLeft -= offsetLeft;\r\n                itemRight -= offsetLeft;\r\n                itemTop -= offsetTop;\r\n                itemBottom -= offsetTop;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    itemRight - menuWidth :\r\n                    itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    itemTop - menuHeight  :\r\n                    itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                const closestMenu = this.closest(\"e-menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    itemLeft -= closestMenuLeft;\r\n                    itemRight -= closestMenuLeft;\r\n                    itemTop -= closestMenuTop;\r\n                    itemBottom -= closestMenuTop;\r\n                }\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    itemLeft - menuWidth :\r\n                    itemRight\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    itemBottom - menuHeight :\r\n                    itemTop\r\n                }px`);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemElement: HTMLEMenuItemElementConstructor = HTMLEMenuItemElementBase;\r\n\r\ninterface EMenuItemConstructor {\r\n    prototype: HTMLEMenuItemElement;\r\n    new(init: {\r\n        name?: string;\r\n        label: string;\r\n        type?: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    button(init: {\r\n        name?: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    checkbox(init: {\r\n        name?: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    radio(init: {\r\n        name?: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    menu(init: {\r\n        name?: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    submenu(init: {\r\n        name?: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n}\r\n\r\nvar EMenuItem = <EMenuItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string;\r\n        label: string;\r\n        type?: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menu} = init;\r\n        if (menu) {\r\n            menu.slot = \"menu\";\r\n        }\r\n        return element(\"e-menuitem\", {\r\n            attributes: {\r\n                tabindex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type\r\n            },\r\n            children: menu ? [\r\n                label,\r\n                menu\r\n            ] : [\r\n                label\r\n            ],\r\n            listeners: {\r\n                click: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemElement.prototype,\r\n        button(init: {\r\n            name?: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name?: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name?: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menu(init: {\r\n            name?: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"menu\"\r\n            });\r\n        },\r\n        submenu(init: {\r\n            name?: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"submenu\"\r\n            });\r\n        }\r\n    }\r\n);","import { element, CustomElement, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuItemElement, EMenuItem } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuItemGroupElement };\r\nexport { EMenuItemGroup };\r\n\r\ninterface HTMLEMenuItemGroupElementConstructor {\r\n    prototype: HTMLEMenuItemGroupElement;\r\n    new(): HTMLEMenuItemGroupElement;\r\n}\r\n\r\ninterface HTMLEMenuItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    label: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitemgroup\": HTMLEMenuItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitemgroup\"\r\n})\r\nclass HTMLEMenuItemGroupElementBase extends HTMLElement implements HTMLEMenuItemGroupElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"label\"\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: flex;\r\n                flex-direction: column;\r\n            }\r\n            \r\n            [part=\"label\"] {\r\n                font-weight: bold;\r\n            }\r\n            \r\n            :host([label]) [part=\"label\"] {\r\n                padding-bottom: 6px;\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        const internals = this.attachInternals();\r\n        internals.role = \"group\";\r\n        this.internals = internals;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        const {internals} = this;\r\n        switch (name) {\r\n            case \"label\":\r\n                internals.ariaLabel = newValue;\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemGroupElement: HTMLEMenuItemGroupElementConstructor = HTMLEMenuItemGroupElementBase;\r\n\r\ninterface EMenuItemGroupConstructor {\r\n    prototype: HTMLEMenuItemGroupElement;\r\n    new(init: {\r\n        name?: string;\r\n        items: HTMLEMenuItemElement[];\r\n    }): HTMLEMenuItemGroupElement;\r\n    radios(init: {name: string, items: {label: string, value: string}[]}): HTMLEMenuItemGroupElement;\r\n}\r\n\r\nvar EMenuItemGroup = <EMenuItemGroupConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string,\r\n        items: HTMLEMenuItemElement[]\r\n    }) {\r\n        const {name, items} = init;\r\n        return element(\"e-menuitemgroup\", {\r\n            attributes: {\r\n                name: name\r\n            },\r\n            children: items\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemGroupElement.prototype,\r\n        radios: (init: {\r\n            name: string,\r\n            items: {\r\n                label: string,\r\n                value: string\r\n            }[]\r\n        }) => {\r\n            const {name, items} = init;\r\n            return element(\"e-menuitemgroup\", {\r\n                attributes: {\r\n                    name: name\r\n                },\r\n                children: items.map(\r\n                    ({label, value}) => new EMenuItem({name, label, type: \"radio\", value})\r\n                )\r\n            });\r\n        }\r\n    }\r\n);","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEToolBarItemElement } from \"./ToolBarItem\";\r\nimport { HTMLEToolBarItemGroupElement } from \"./ToolBarItemGroup\";\r\n\r\nexport { HTMLEToolBarElement };\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\ninterface HTMLEToolBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly activeItem: HTMLEToolBarItemElement | null;\r\n    items(): HTMLEToolBarItemElement[];\r\n    firstItem(): HTMLEToolBarItemElement | null;\r\n    name: string;\r\n    orientation: ToolBarOrientation;\r\n}\r\n\r\ninterface HTMLEToolbarElementConstructor {\r\n    prototype: HTMLEToolBarElement;\r\n    new(): HTMLEToolBarElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbar\": HTMLEToolBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\nvar wasExpandedOnMouseDown: WeakMap<HTMLEToolBarItemElement, boolean>;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbar\"\r\n})\r\nclass HTMLEToolBarElementBase extends HTMLElement implements HTMLEToolBarElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get activeItem(): HTMLEToolBarItemElement | null {\r\n        return this.querySelector<HTMLEToolBarItemElement>(\r\n            \"e-toolbaritem[active]\"\r\n        );\r\n    }\r\n\r\n    items(): HTMLEToolBarItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEToolBarItemElement>(\r\n            \":is(:scope, :scope > e-toolbaritemgroup) > e-toolbaritem\"\r\n        ));\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    orientation!: ToolBarOrientation;\r\n\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        wasExpandedOnMouseDown = new WeakMap();\r\n        style = /*css*/`\r\n            :host {\r\n                display: flex;\r\n                flex-direction: row;\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"dblclick\", this.#handleDblClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEToolBarItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEToolBarItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    firstItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEToolBarItemElement | null>walker.previousSibling();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEToolBarItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEToolBarItemElement | null): void {\r\n        const {activeItem} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetItem = (<HTMLElement>target).closest(\"e-toolbaritem\");\r\n        if (targetItem) {\r\n            const {type, pressed} = targetItem;\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    targetItem.pressed = !pressed;\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    targetItem.pressed = true;\r\n                    break;\r\n                }\r\n                case \"menubutton\": {\r\n                    const {menubutton} = targetItem;\r\n                    if (menubutton && !menubutton.contains(<Node>target)) {\r\n                        const force = !wasExpandedOnMouseDown.get(targetItem) ?? true;\r\n                        menubutton.toggle(force);\r\n                        if (force) {\r\n                            menubutton.firstItem?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                case \"select\": {\r\n                    const {select} = targetItem;\r\n                    if (select && !select.contains(<Node>target)) {\r\n                        const force = !wasExpandedOnMouseDown.get(targetItem) ?? true;\r\n                        select.toggle(force);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleDblClickEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (!this.contains(<Node>relatedTarget)) {\r\n            (activeItem ?? this.firstItem())?.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetItem = <HTMLEToolBarItemElement | null>(<HTMLElement>target).closest(\"e-toolbaritem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetItem);\r\n            this.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetItem = (<HTMLElement>target).closest(\"e-toolbaritem\");\r\n        if (targetItem) {\r\n            const {type} = targetItem;\r\n            switch (type) {\r\n                case \"menubutton\": {\r\n                    const {menubutton} = targetItem;\r\n                    if (menubutton && !menubutton.contains(<Node>target)) {\r\n                        wasExpandedOnMouseDown.set(targetItem, menubutton.expanded);\r\n                    }\r\n                    break;\r\n                }\r\n                case \"select\": {\r\n                    const {select} = targetItem;\r\n                    if (select && !select.contains(<Node>target)) {\r\n                        wasExpandedOnMouseDown.set(targetItem, select.expanded);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"menubutton\": {\r\n                            const {menubutton} = activeItem;\r\n                            if (menubutton) {\r\n                                menubutton.expand();\r\n                                menubutton.firstItem?.focus({preventScroll: true});\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"select\": {\r\n                            const {select} = activeItem;\r\n                            if (select) {\r\n                                select.expand();\r\n                            }\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            activeItem.click();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"select\": {\r\n                            activeItem.select?.expand();\r\n                            event.stopPropagation();\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarElement: HTMLEToolbarElementConstructor = HTMLEToolBarElementBase;","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element, QueryProperty } from \"../../Element\";\r\nimport { HTMLEMenuButtonElement } from \"../menus/MenuButton\";\r\n\r\nexport { HTMLEToolBarItemElement };\r\nexport { EToolBarItem };\r\n\r\ninterface HTMLEToolBarItemElementConstructor {\r\n    prototype: HTMLEToolBarItemElement;\r\n    new(): HTMLEToolBarItemElement;\r\n}\r\n\r\ninterface HTMLEToolBarItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menubutton: HTMLEMenuButtonElement | null;\r\n    readonly select: HTMLESelectElement | null;\r\n    value: string;\r\n    name: string;\r\n    label: string;\r\n    active: boolean;\r\n    pressed: boolean;\r\n    iconed: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritem\": HTMLEToolBarItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\nvar iconPart: HTMLElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritem\"\r\n})\r\nclass HTMLEToolBarItemElementBase extends HTMLElement implements HTMLEToolBarItemElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @QueryProperty({selector: \":scope > e-menubutton[slot=menubutton]\"})\r\n    readonly menubutton!: HTMLEMenuButtonElement | null;\r\n    \r\n    @QueryProperty({selector: \":scope > e-select[slot=select]\"})\r\n    readonly select!: HTMLESelectElement | null;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    pressed!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    iconed!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\"),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"select\"\r\n                }\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menubutton\"\r\n                }\r\n            })\r\n        );\r\n        iconPart = element(\"span\", {\r\n            attributes: {\r\n                part: \"icon\"\r\n            }\r\n        });\r\n        style = /*css*/`\r\n            :host {\r\n                display: flex;\r\n                user-select: none;\r\n                white-space: nowrap;\r\n                cursor: pointer;\r\n                line-height: 22px;\r\n            }\r\n            \r\n            :host([disabled]) {\r\n                opacity: 0.38;\r\n                pointer-events: none;\r\n            }\r\n            \r\n            :host(:hover) {\r\n                background-color: var(--hovered-item-color);\r\n            }\r\n            \r\n            :host([pressed]) {\r\n                background-color: var(--activated-item-color);\r\n            }\r\n            \r\n            :host(:not([iconed])) [part=\"icon\"] {\r\n                display: none;\r\n            }\r\n\r\n            [part=\"icon\"] {\r\n                flex: none;\r\n                display: inline-block;\r\n                width: 18px;\r\n                height: 18px;\r\n                padding: 2px;\r\n                overflow: hidden;\r\n            }\r\n            \r\n            [part=\"icon\"]::before {\r\n                display: inline-block;\r\n                width: 18px;\r\n                height: 18px;\r\n                content: \"\";\r\n                mask-size: 18px 18px;\r\n                -webkit-mask-size: 18px 18px;\r\n                background-color: var(--icon-color, none);\r\n                -webkit-mask-image: var(--icon-image, none);\r\n                mask-image: var(--icon-image, none);\r\n                filter: var(--icon-filter, none);\r\n            }\r\n            \r\n            :host(:focus-within):host-context(e-toolbar:focus-within) {\r\n                outline: 1px solid var(--focused-item-outline-color);\r\n                outline-offset: -1px;\r\n            }\r\n            \r\n            /*:host([type=\"menubutton\"]) ::slotted(e-menubutton):focus,\r\n            :host([type=\"select\"]) ::slotted(e-select):focus {\r\n                outline: none;\r\n                outline-offset: none;\r\n            }*/\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                //...\r\n                break;\r\n            }\r\n            case \"iconed\": {\r\n                const {shadowRoot} = this;\r\n                if (newValue !== null) {\r\n                    shadowRoot.prepend(iconPart.cloneNode(true));\r\n                }\r\n                else {\r\n                    const iconPart = shadowRoot.querySelector<HTMLElement>(\"[part=icon]\");\r\n                    if (iconPart) {\r\n                        iconPart.remove();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemElement: HTMLEToolBarItemElementConstructor = HTMLEToolBarItemElementBase;\r\n\r\ninterface EToolBarItemConstructor {\r\n    prototype: HTMLEToolBarItemElement;\r\n    new(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n    button(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    checkbox(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    radio(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    menubutton(init: {\r\n        name: string;\r\n        label: string;\r\n        menubutton: HTMLEMenuButtonElement;\r\n    }): HTMLEToolBarItemElement;\r\n    select(init: {\r\n        name: string;\r\n        label: string;\r\n        select: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n}\r\n\r\nvar EToolBarItem = <EToolBarItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menubutton, select} = init;\r\n        if (menubutton) {\r\n            menubutton.slot = \"menubutton\";\r\n        }\r\n        if (select) {\r\n            select.slot = \"select\";\r\n        }\r\n        return element(\"e-toolbaritem\", {\r\n            attributes: {\r\n                tabindex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type\r\n            },\r\n            children: menubutton ? [menubutton] : select ? [select] : undefined,\r\n            listeners: {\r\n                click: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEToolBarItemElement.prototype,\r\n        button(init: {\r\n            name: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menubutton(init: {\r\n            name: string;\r\n            label: string;\r\n            menubutton: HTMLEMenuButtonElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"menubutton\"\r\n            });\r\n        },\r\n        select(init: {\r\n            name: string;\r\n            label: string;\r\n            select: HTMLESelectElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"select\"\r\n            });\r\n        },\r\n    }\r\n);","\r\nimport { element, CustomElement, AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEToolBarItemGroupElement };\r\n\r\ninterface HTMLEToolBarItemGroupElementConstructor {\r\n    prototype: HTMLEToolBarItemGroupElement;\r\n    new(): HTMLEToolBarItemGroupElement;\r\n}\r\n\r\ninterface HTMLEToolBarItemGroupElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritemgroup\": HTMLEToolBarItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritemgroup\"\r\n})\r\nclass HTMLEToolBarItemGroupElementBase extends HTMLElement implements HTMLEToolBarItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: flex;\r\n                width: max-content;\r\n                flex-direction: row;\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const label = this.shadowRoot.querySelector<HTMLLabelElement>(\"[part='label']\");\r\n                if (label) {\r\n                    label.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemGroupElement: HTMLEToolBarItemGroupElementConstructor = HTMLEToolBarItemGroupElementBase;","export { ModelChangeRecord };\r\nexport { ModelEvent };\r\nexport { ModelNode };\r\nexport { ModelObject };\r\nexport { ModelProperty };\r\nexport { ModelList };\r\nexport { ModelChangeObserverOptions };\r\nexport { ModelChangeObserver };\r\n\r\ninterface ModelChangeRecordConstructor {\r\n    prototype: ModelChangeRecord;\r\n    new(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ): ModelChangeRecord;\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\ninterface ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly changeType: number;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\nclass ModelChangeRecordBase implements ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList;\r\n    readonly changeType: number;\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n\r\n    constructor(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ) {\r\n        this.target = init.target;\r\n        this.changeType = init.changeType;\r\n        this.propertyName = init.propertyName ?? null;\r\n        this.oldValue = init.oldValue ?? undefined;\r\n        this.newValue = init.newValue ?? undefined;\r\n        this.removedIndex = init.removedIndex ?? 0;\r\n        this.removedItems = new ModelNodesList(init.removedItems ?? []);\r\n        this.insertedIndex = init.insertedIndex ?? 0;\r\n        this.insertedItems = new ModelNodesList(init.insertedItems ?? []);\r\n        this.sortedIndices = init.sortedIndices ?? [];\r\n    }\r\n\r\n    static get PROPERTY_CHANGE(): number {\r\n        return 1;\r\n    }\r\n\r\n    static get LIST_REMOVE(): number {\r\n        return 2;\r\n    }\r\n\r\n    static get LIST_INSERT(): number {\r\n        return 3;\r\n    }\r\n\r\n    static get LIST_SORT(): number {\r\n        return 4;\r\n    }\r\n\r\n    get PROPERTY_CHANGE(): number {\r\n        return ModelChangeRecordBase.PROPERTY_CHANGE;\r\n    }\r\n\r\n    get LIST_REMOVE(): number {\r\n        return ModelChangeRecordBase.LIST_REMOVE;\r\n    }\r\n\r\n    get LIST_INSERT(): number {\r\n        return ModelChangeRecordBase.LIST_INSERT;\r\n    }\r\n\r\n    get LIST_SORT(): number {\r\n        return ModelChangeRecordBase.LIST_SORT;\r\n    }\r\n}\r\n\r\nvar ModelChangeRecord: ModelChangeRecordConstructor = ModelChangeRecordBase;\r\n\r\ninterface ModelNodesListConstructor {\r\n    prototype: ModelNodesList;\r\n    new(items: any[]): ModelNodesList;\r\n}\r\n\r\ninterface ModelNodesList {\r\n    get length(): number;\r\n    item(index: number): ModelNode | null;\r\n    values(): IterableIterator<ModelNode>;\r\n}\r\n\r\nclass ModelNodesListBase implements ModelNodesList {\r\n    #items: ModelNode[];\r\n\r\n    constructor(items: ModelNode[]) {\r\n        this.#items = items.slice();\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    item(index: number): ModelNode | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    values(): IterableIterator<ModelNode> {\r\n        return this.#items.values();\r\n    }\r\n}\r\n\r\nvar ModelNodesList: ModelNodesListConstructor = ModelNodesListBase;\r\n\r\ninterface ModelEventConstructor {\r\n    prototype: ModelEvent;\r\n    new(type: string): ModelEvent;\r\n}\r\n\r\ninterface ModelEvent {\r\n    readonly type: string;\r\n    readonly currentTarget: ModelEventTarget | null;\r\n    readonly target: ModelEventTarget | null;\r\n}\r\n\r\nclass ModelEventBase implements ModelEvent {\r\n    readonly type: string;\r\n\r\n    #currentTarget: ModelEventTarget | null;\r\n    #target: ModelEventTarget | null;\r\n\r\n    constructor(type: string) {\r\n        this.type = type;\r\n        this.#currentTarget = null;\r\n        this.#target = null;\r\n    }\r\n\r\n    get currentTarget(): ModelEventTarget | null {\r\n        return this.#currentTarget;\r\n    }\r\n\r\n    get target(): ModelEventTarget | null {\r\n        return this.#target;\r\n    }\r\n\r\n    static ModelEventTargetAccessor? = new class ModelEventTargetAccessor {\r\n        setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#currentTarget = currentTarget;\r\n            }\r\n        }\r\n\r\n        setTarget(event: ModelEvent, target: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#target = target;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface ModelEventTargetAccessor {\r\n    setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void;\r\n    setTarget(event: ModelEvent, target: ModelEventTarget): void;\r\n}\r\n\r\nvar ModelEventTargetAccessor: ModelEventTargetAccessor = ModelEventBase.ModelEventTargetAccessor!;\r\ndelete ModelEventBase.ModelEventTargetAccessor;\r\n\r\nvar ModelEvent: ModelEventConstructor = ModelEventBase;\r\n\r\ninterface ModelEventTargetConstructor {\r\n    prototype: ModelEventTarget;\r\n    new(): ModelEventTarget;\r\n}\r\n\r\ninterface ModelEventTarget {\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    dispatchEvent(event: ModelEvent): void;\r\n    receiveEvent(event: ModelEvent): void;\r\n}\r\n\r\nclass ModelEventTargetBase implements ModelEventTarget {\r\n    #callbacks: Map<string, ((event: ModelEvent) => void)[]>;\r\n\r\n    constructor() {\r\n        this.#callbacks = new Map();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        const {type} = event;\r\n        const callbacks = this.#callbacks.get(type);\r\n        ModelEventTargetAccessor.setCurrentTarget(event, this);\r\n        if (callbacks) {\r\n            callbacks.forEach((callback_i) => {\r\n                callback_i(event);\r\n            });\r\n        }\r\n    }\r\n\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            callbacks.push(callback);\r\n        }\r\n        else {\r\n            this.#callbacks.set(type, [callback]);\r\n        }\r\n    }\r\n\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            const callbackIndex = callbacks.findIndex(\r\n                callback_i => callback_i == callback\r\n            );\r\n            if (callbackIndex > -1) {\r\n                callbacks.splice(callbackIndex, 1);\r\n            }\r\n            if (callbacks.length == 0) {\r\n                this.#callbacks.delete(type);\r\n            }\r\n        }\r\n    }\r\n\r\n    dispatchEvent(event: ModelEvent): void {\r\n        ModelEventTargetAccessor.setTarget(event, this);\r\n        this.receiveEvent(event);\r\n    }\r\n}\r\n\r\nvar ModelEventTarget: ModelEventTargetConstructor = ModelEventTargetBase;\r\n\r\ninterface ModelNodeConstructor {\r\n    prototype: ModelNode;\r\n    new(): ModelNode;\r\n}\r\n\r\ninterface ModelNode extends ModelEventTarget {\r\n    readonly parentNode: ModelNode | null;\r\n    setParent(parentNode: ModelNode | null): void;\r\n    getRecords(): ModelChangeRecord[];\r\n    beginChanges(): void;\r\n    endChanges(): void;\r\n}\r\n\r\ninterface ModelNodeRecordsAccessor {\r\n    triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void;\r\n    handleRecord(node: ModelNode, record: ModelChangeRecord): void;\r\n}\r\n\r\nclass ModelNodeBase extends ModelEventTargetBase implements ModelNode {\r\n    #parentNode: ModelNode | null;\r\n    #records: ModelChangeRecord[];\r\n    #isRecording: boolean;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#parentNode = null;\r\n        this.#records = [];\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    get parentNode(): ModelNode | null {\r\n        return this.#parentNode;\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        if (parentNode !== null) {\r\n            let isCyclicReference = parentNode == this;\r\n            let {parentNode: ancestorNode} = parentNode;\r\n            while (!isCyclicReference && ancestorNode !== null) {\r\n                ({parentNode: ancestorNode} = ancestorNode);\r\n                isCyclicReference = ancestorNode == this;\r\n            }\r\n            if (!isCyclicReference) {\r\n                this.#parentNode = parentNode;\r\n            }\r\n            else {\r\n                throw new TypeError(\"Failed to set parent on ModelNode: circular reference detected in the hierarchy.\");\r\n            }\r\n        }\r\n        else {\r\n            this.#parentNode = null;\r\n        }\r\n    }\r\n    \r\n    beginChanges(): void {\r\n        this.#isRecording = true;\r\n    }\r\n\r\n    endChanges(): void {\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        this.#records.splice(0);\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    getRecords(): ModelChangeRecord[] {\r\n        return this.#records.slice();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        super.receiveEvent(event);\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            parentNode.receiveEvent(event);\r\n        }\r\n    }\r\n\r\n    #triggerChange(property: string, oldValue: any, newValue: any): void {\r\n        const records = this.#records;\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.PROPERTY_CHANGE,\r\n            propertyName: property,\r\n            oldValue, newValue\r\n        });\r\n        records.push(record);\r\n        if (!this.#isRecording) {\r\n            this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n            records.splice(0);\r\n        }\r\n    }\r\n\r\n    #handleRecord(record: ModelChangeRecord): void {\r\n        this.#records.push(record);\r\n        if (!this.#isRecording) {\r\n            this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n            this.#records.splice(0);\r\n        }\r\n    }\r\n\r\n    static ModelNodeRecordsAccessor? = new class ModelNodeRecordsAccessor {\r\n        triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#triggerChange(property, oldValue, newValue);\r\n            }\r\n        }\r\n\r\n        handleRecord(node: ModelNode, record: ModelChangeRecord): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#handleRecord(record);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelNodeRecordsAccessor: ModelNodeRecordsAccessor = ModelNodeBase.ModelNodeRecordsAccessor!;\r\ndelete ModelNodeBase.ModelNodeRecordsAccessor;\r\n\r\nvar ModelNode: ModelNodeConstructor = ModelNodeBase;\r\n\r\ninterface ModelPropertyDecorator {\r\n    (): <Model extends ModelObject>(target: Model, property: string) => void;\r\n}\r\n\r\nconst ModelProperty: ModelPropertyDecorator = function() {\r\n    return (\r\n        target: ModelObject, property: string\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const setter = function(this: ModelObject, value: any) {\r\n            const oldValue = ModelObjectPropertiesAccessor.getProperty(this, property);\r\n            ModelObjectPropertiesAccessor.setProperty(this, property, value);\r\n            if (value !== oldValue) {\r\n                ModelNodeRecordsAccessor.triggerChange(this, property, oldValue, value);\r\n            }\r\n            return true;\r\n        };\r\n        const getter = function(this: ModelObject) {\r\n            return ModelObjectPropertiesAccessor.getProperty(this, property);\r\n        };\r\n        Object.defineProperty(prototype, property, {\r\n            set: setter,\r\n            get: getter,\r\n            enumerable: true\r\n        });\r\n    }\r\n}\r\n\r\ninterface ModelObjectConstructor {\r\n    prototype: ModelObject;\r\n    new(): ModelObject;\r\n}\r\n\r\ninterface ModelObject extends ModelNode {}\r\n\r\ninterface ModelObjectPropertiesAccessor {\r\n    setProperty(node: ModelNode, property: string, value: any): void;\r\n    getProperty(node: ModelNode, property: string,): any;\r\n}\r\n\r\nclass ModelObjectBase extends ModelNodeBase implements ModelObject {\r\n    #properties: Map<string, any>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#properties = new Map();\r\n    }\r\n\r\n    static ModelObjectPropertiesAccessor? = new class ModelPropertiesAccessor {\r\n        setProperty(node: ModelObject, property: string, value: any): void {\r\n            if (node instanceof ModelObjectBase) {\r\n                node.#properties.set(property, value);\r\n            }\r\n        }\r\n\r\n        getProperty(node: ModelObject, property: string): any {\r\n            if (node instanceof ModelObjectBase) {\r\n                return node.#properties.get(property);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelObjectPropertiesAccessor: ModelObjectPropertiesAccessor = ModelObjectBase.ModelObjectPropertiesAccessor!;\r\ndelete ModelObjectBase.ModelObjectPropertiesAccessor;\r\n\r\nvar ModelObject: ModelObjectConstructor = ModelObjectBase;\r\n\r\ninterface ModelListConstructor {\r\n    prototype: ModelList;\r\n    new<Model extends ModelNode>(): ModelList<Model>;\r\n    new<Model extends ModelNode>(items: Model[]): ModelList<Model>;\r\n}\r\n\r\ninterface ModelList<Model extends ModelNode = ModelNode> extends ModelNode {\r\n    readonly parentNode: ModelNode | null;\r\n    readonly length: number;\r\n    index(item: Model): number;\r\n    get(index: number): Model | null;\r\n    values(): IterableIterator<Model>;\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void;\r\n    insert(index: number, ...items: Model[]): void;\r\n    prepend(...items: Model[]): void;\r\n    append(...items: Model[]): void;\r\n    remove(item: Model): void;\r\n    clear(): void;\r\n}\r\n\r\nclass ModelListBase<Model extends ModelNode = ModelNode> extends ModelNodeBase implements ModelList<Model> {\r\n    #items: Model[];\r\n\r\n    constructor()\r\n    constructor(items: Model[])\r\n    constructor(items?: Model[]) {\r\n        super();\r\n        this.#items = items?.slice() ?? [];\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        super.setParent(parentNode);\r\n        this.#items.forEach((item_i) => {\r\n            item_i.setParent(parentNode);\r\n        });\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    get(index: number): Model | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    index(item: Model): number {\r\n        return this.#items.indexOf(item);\r\n    }\r\n\r\n    values(): IterableIterator<Model> {\r\n        return this.#items.values();\r\n    }\r\n\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void {\r\n        const items = this.#items;\r\n        const indexedItems = items.map(\r\n            (item_i, i) => {\r\n                return {\r\n                    item: item_i,\r\n                    index: i\r\n                };\r\n            }\r\n        );\r\n        indexedItems.sort(\r\n            (indexedItem_a, indexedItem_b) => {\r\n                return compareFunction(\r\n                    indexedItem_a.item, indexedItem_b.item\r\n                )\r\n            }\r\n        );\r\n        this.#items = indexedItems.map(indexedItem_i => indexedItem_i.item);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_SORT,\r\n            sortedIndices: indexedItems.map(indexedItem_i => indexedItem_i.index)\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    prepend(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.splice(0, 0, ...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: 0,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    append(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.push(...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: length,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    insert(index: number, ...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const positiveIndex = Math.abs(index);\r\n        if (positiveIndex <= length) {\r\n            if (index >= 0) {\r\n                const {parentNode} = this;\r\n                items.forEach(item_i => {\r\n                    item_i.setParent(parentNode);\r\n                });\r\n                if (index < length) {\r\n                    _items.splice(index, 0, ...items);\r\n                }\r\n                else {\r\n                    _items.push(...items);\r\n                }\r\n            }\r\n            else if (index < 0) {\r\n                index = length - index;\r\n                const {parentNode} = this;\r\n                if (parentNode) {\r\n                    items.forEach(item_i => {\r\n                        item_i.setParent(parentNode);\r\n                    });\r\n                }\r\n                _items.splice(index, 0, ...items);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_INSERT,\r\n                insertedIndex: index,\r\n                insertedItems: items.slice()\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    remove(item: Model): void {\r\n        const _items = this.#items;\r\n        const index = _items.indexOf(item);\r\n        if (index > -1) {\r\n            const item = _items.splice(index, 1)[0];\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                item.setParent(null);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: index,\r\n                removedItems: [item]\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    clear(): void {\r\n        const items = this.#items;\r\n        const {length} = items;\r\n        if (length > 0) {\r\n            const removedItems = items.splice(0);\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                removedItems.forEach((removedItem_i) => {\r\n                    removedItem_i.setParent(null);\r\n                });\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: 0,\r\n                removedItems: removedItems\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n};\r\n\r\nvar ModelList: ModelListConstructor = ModelListBase!;\r\n\r\ninterface ModelChangeObserverConstructor {\r\n    prototype: ModelChangeObserver;\r\n    new(callback: (records: ModelChangeRecord[]) => void): ModelChangeObserver;\r\n}\r\n\r\ninterface ModelChangeObserver {\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void;\r\n    unobserve(node: ModelNode): void;\r\n    disconnect(): void;\r\n}\r\n\r\ntype ModelChangeObserverOptions = {\r\n    properties?: boolean;\r\n    propertiesFilter?: string[];\r\n    childList?: boolean;\r\n    subtree?: boolean;\r\n}\r\n\r\nclass ModelChangeObserverBase implements ModelChangeObserver {\r\n    #callback: (records: ModelChangeRecord[]) => void;\r\n    #records: ModelChangeRecord[];\r\n    #disconnected: boolean;\r\n\r\n    #references: WeakMap<ModelNode, {\r\n        listener: (event: ModelEvent) => void,\r\n        options: ModelChangeObserverOptions\r\n    }>;\r\n\r\n    constructor(callback: (records: ModelChangeRecord[]) => void) {\r\n        this.#callback = callback;\r\n        this.#records = [];\r\n        this.#disconnected = false;\r\n        this.#references = new WeakMap();\r\n    }\r\n\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void {\r\n        this.#disconnected = false;\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (!reference) {\r\n            const listener = this.#handleModelEvent.bind(this);\r\n            node.addEventListener(\"modelchange\", listener);\r\n            reference = {listener, options};\r\n            references.set(node, reference);\r\n        }\r\n        else {\r\n            references.set(node, reference);\r\n        }\r\n    }\r\n\r\n    unobserve(node: ModelNode): void {\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (reference) {\r\n            const {listener} = reference;\r\n            node.removeEventListener(\"modelchange\", listener);\r\n        }\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#records.splice(0);\r\n        this.#disconnected = true;\r\n    }\r\n\r\n    #trigger(): void {\r\n        const records = this.#records.splice(0);\r\n        if (records.length > 0) {\r\n            this.#callback(records);\r\n        }\r\n    }\r\n\r\n    #handleModelEvent(event: ModelEvent): void {\r\n        if (!this.#disconnected) {\r\n            const {target, currentTarget} = event;\r\n            const reference = this.#references.get(<ModelNode>currentTarget);\r\n            if (reference) {\r\n                const {options} = reference;\r\n                const {properties, propertiesFilter, childList, subtree} = options;\r\n                if (subtree) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n                else if (target == currentTarget) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelChangeObserver: ModelChangeObserverConstructor = ModelChangeObserverBase;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEToolBarElement } from \"../toolbars/ToolBar\";\r\n\r\nexport { HTMLEListItemElement };\r\n\r\ninterface HTMLEListItemElementConstructor {\r\n    prototype: HTMLEListItemElement;\r\n    new(): HTMLEListItemElement;\r\n}\r\n\r\ninterface HTMLEListItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly badge: HTMLSpanElement | null;\r\n    readonly toolbar: HTMLEToolBarElement | null;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitem\": HTMLEListItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-listitem\"\r\n})\r\nclass HTMLEListItemElementBase extends HTMLElement implements HTMLEListItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    get badge(): HTMLElement | null {\r\n        return this.#badge;\r\n    }\r\n\r\n    get toolbar(): HTMLEToolBarElement | null {\r\n        return this.#toolbar;\r\n    }\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    #badge: HTMLElement | null;\r\n    #toolbar: HTMLEToolBarElement | null;\r\n    #menu: HTMLEMenuElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: flex;\r\n                user-select: none;\r\n                line-height: 22px;\r\n            }\r\n            \r\n            :host([droptarget]) {\r\n                background-color: var(--droptarget-item-color);\r\n            }\r\n            \r\n            :host(:hover) {\r\n                background-color: var(--hovered-item-color);\r\n            }\r\n            \r\n            :host([active]) {\r\n                outline: 1px solid var(--focused-item-outline-color);\r\n                outline-offset: -1px;\r\n            }\r\n            \r\n            :host(:focus) {\r\n                background-color: var(--focus-background-color);\r\n            }\r\n            \r\n            :host([selected]) {\r\n                background-color: var(--selected-item-color);\r\n            }\r\n        `;\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#badge = null;\r\n        this.#menu = null;\r\n        this.#toolbar = null;\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this))\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"toolbar\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#toolbar = element instanceof HTMLEToolBarElement ? element : null;\r\n                break;\r\n            }\r\n            case \"badge\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#badge = element instanceof HTMLSpanElement ? element : null;\r\n                break;\r\n            }\r\n            case \"menu\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#menu = element instanceof HTMLEMenuElement ? element : null;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEListItemElement: HTMLEListItemElementConstructor = HTMLEListItemElementBase;"],"names":["AttributeProperty","init","target","property","constructor","prototype","propertyName","String","defaultValue","observed","name","observedAttributes","Reflect","get","Array","isArray","push","Object","defineProperty","value","writable","type","Boolean","this","hasAttribute","set","setAttribute","removeAttribute","val","getAttribute","JSON","parse","stringify","Number","parseFloat","CustomElement","elementCtor","options","customElements","define","QueryProperty","propertyKey","selector","getter","withinShadowRoot","shadowRoot","querySelector","element","tagName","attributes","dataset","children","listeners","document","createElement","entries","forEach","attributeName","attributeValue","undefined","toggleAttribute","elementDataset","keys","datasetEntry_i","append","from","name_i","listener_i","addEventListener","reactiveElementsMap","WeakMap","FinalizationRegistry","heldValue","model","reactiveElement","reactiveElementsMapEntry","reactiveElementsArray","splice","indexOf","records","record_i","oldValue","newValue","reactiveElement_i","elementRef","react","properties","deref","includes","reactiveChildElementsMap","list","reactiveChildElement","reactiveChildrenElementsMapEntry","reactiveChildElementsArray","range","values","length","listLength","reactiveChildElements_i","parentRef","mapping","placeholder","parent","firstChild","childrenCount","removeChild","changeType","LIST_INSERT","LIST_REMOVE","LIST_SORT","insertedIndex","insertedItems","insertedItemsArray","map","before","removedIndex","removedItems","removedCount","createRange","removeEndIndex","setStartBefore","setEndAfter","deleteContents","sortedIndices","childrenArray","filter","index_i","camelToTrain","str","replace","toLowerCase","shadowTemplate","style","toggleAnimations","HTMLEMenuElementBase","HTMLElement","super","createTreeWalker","NodeFilter","SHOW_ELEMENT","bind","attachShadow","mode","adoptedStylesheet","CSSStyleSheet","adoptedStyleSheets","content","cloneNode","items","querySelectorAll","activeIndex","activeItem","connectedCallback","tabindex","tabIndex","parseInt","positionContextual","x","y","width","menuWidth","height","menuHeight","getBoundingClientRect","scrollX","scrollY","window","left","top","clientWidth","clientHeight","body","overflowX","overflowY","setProperty","firstItem","walker","currentNode","root","item_i","collapse","find","contains","node","FILTER_ACCEPT","FILTER_SKIP","FILTER_REJECT","lastChild","item","previousNode","nextNode","menu","event","targetItem","closest","checked","radio_i","toggle","nearestItem","relatedTarget","contextual","remove","error","expanded","key","focus","preventScroll","stopPropagation","expand","click","composedPath","target_i","HTMLEMenuElement","blur","dispatchEvent","Event","bubbles","cancel","toggleAnimation","animate","duration","finished","then","catch","finally","delete","clientX","clientY","right","bottom","intersectsWithMouse","containsRelatedTarget","assign","HTMLEMenuItemElementBase","internals","attachInternals","role","attributeChangedCallback","ariaChecked","ariaDisabled","ariaExpanded","ariaLabel","force","menuStyle","itemTop","itemBottom","itemLeft","itemRight","offsetParent","offsetLeft","offsetTop","closestMenu","closestMenuTop","closestMenuLeft","part","HTMLEMenuItemElement","EMenuItem","label","trigger","slot","title","button","checkbox","radio","submenu","HTMLEMenuItemGroupElementBase","HTMLEMenuItemGroupElement","radios","wasExpandedOnMouseDown","HTMLEToolBarElementBase","previousSibling","nextSibling","active","pressed","menubutton","select","previousItem","nextItem","lastItem","HTMLEToolBarElement","iconPart","HTMLEToolBarItemElementBase","prepend","HTMLEToolBarItemElement","EToolBarItem","HTMLEToolBarItemGroupElementBase","textContent","HTMLEToolBarItemGroupElement","ModelChangeRecordBase","ModelNodesList","PROPERTY_CHANGE","ModelChangeRecord","slice","index","ModelEventBase","currentTarget","ModelEventTargetAccessor","setCurrentTarget","setTarget","ModelEvent","ModelEventTargetBase","Map","receiveEvent","callbacks","callback_i","callback","removeEventListener","callbackIndex","findIndex","ModelNodeBase","parentNode","setParent","isCyclicReference","ancestorNode","TypeError","beginChanges","endChanges","getRecords","record","ModelNodeRecordsAccessor","triggerChange","handleRecord","ModelNode","ModelObjectBase","ModelObjectPropertiesAccessor","getProperty","ModelList","sort","compareFunction","indexedItems","i","indexedItem_a","indexedItem_b","indexedItem_i","_items","insert","Math","abs","clear","removedItem_i","reference","propertiesFilter","childList","subtree","ModelChangeObserver","observe","references","listener","unobserve","disconnect","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","d","definition","o","enumerable","obj","prop","hasOwnProperty","call","HTMLEListItemElementBase","badge","toolbar","labelPart","slotName","assignedElements","H","HTMLSpanElement","HTMLEListItemElement"],"sourceRoot":""}